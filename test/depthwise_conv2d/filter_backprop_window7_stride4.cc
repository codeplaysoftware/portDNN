/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_depthwise_conv2d_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/depthwise_conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::DefaultBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;
using GTestTypePairs = sycldnn::types::ToGTestTypes<SNNTypePairs>::type;

template <typename Pair>
using FilterBackpropWindow7Stride4 =
    sycldnn::depthwise_conv2d::WindowStrideTest<Pair, 7, 4>;
TYPED_TEST_SUITE(FilterBackpropWindow7Stride4, GTestTypePairs);
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1508., 1536., 2125., 2164., 2203., 1336., 1360., 1816., 1844., 2554.,
      2593., 2632., 1600., 1624., 2151., 2184., 3021., 3066., 3111., 1884.,
      1911., 2514., 2547., 3516., 3561., 3606., 2181., 2208., 2877., 2910.,
      4011., 4056., 4101., 2478., 2505., 1096., 1112., 1474., 1495., 1516.,
      868.,  880.,  1272., 1288., 1705., 1726., 1747., 1000., 1012.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      342., 352., 362.,  372.,  382.,  392.,  402.,  452.,  462., 472.,
      482., 492., 502.,  512.,  562.,  572.,  582.,  592.,  602., 612.,
      622., 672., 682.,  692.,  702.,  712.,  722.,  732.,  782., 792.,
      802., 812., 822.,  832.,  842.,  892.,  902.,  912.,  922., 932.,
      942., 952., 1002., 1012., 1022., 1032., 1042., 1052., 1062.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2820., 3016., 2872., 3072., 3956., 4250., 4028., 4328., 4100., 4406.,
      2472., 2672., 2516., 2720., 3392., 3632., 3444., 3688., 4748., 5108.,
      4820., 5186., 4892., 5264., 2956., 3200., 3000., 3248., 4008., 4302.,
      4068., 4368., 5601., 6042., 5682., 6132., 5763., 6222., 3468., 3768.,
      3516., 3822., 4668., 5028., 4728., 5094., 6492., 7032., 6573., 7122.,
      6654., 7212., 3996., 4362., 4044., 4416., 5328., 5754., 5388., 5820.,
      7383., 8022., 7464., 8112., 7545., 8202., 4524., 4956., 4572., 5010.,
      1952., 2192., 1980., 2224., 2588., 2948., 2624., 2990., 2660., 3032.,
      1492., 1736., 1512., 1760., 2260., 2544., 2288., 2576., 2984., 3410.,
      3020., 3452., 3056., 3494., 1712., 2000., 1732., 2024.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      584.,  684.,  600.,  704.,  616.,  724.,  632.,  744.,  648.,  764.,
      664.,  784.,  680.,  804.,  760.,  904.,  776.,  924.,  792.,  944.,
      808.,  964.,  824.,  984.,  840.,  1004., 856.,  1024., 936.,  1124.,
      952.,  1144., 968.,  1164., 984.,  1184., 1000., 1204., 1016., 1224.,
      1032., 1244., 1112., 1344., 1128., 1364., 1144., 1384., 1160., 1404.,
      1176., 1424., 1192., 1444., 1208., 1464., 1288., 1564., 1304., 1584.,
      1320., 1604., 1336., 1624., 1352., 1644., 1368., 1664., 1384., 1684.,
      1464., 1784., 1480., 1804., 1496., 1824., 1512., 1844., 1528., 1864.,
      1544., 1884., 1560., 1904., 1640., 2004., 1656., 2024., 1672., 2044.,
      1688., 2064., 1704., 2084., 1720., 2104., 1736., 2124.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5444.,  5640.,  5836.,  6032.,  5544.,  5744.,  5944.,  6144.,  7618.,
      7912.,  8206.,  8500.,  7756.,  8056.,  8356.,  8656.,  7894.,  8200.,
      8506.,  8812.,  4744.,  4944.,  5144.,  5344.,  4828.,  5032.,  5236.,
      5440.,  6544.,  6784.,  7024.,  7264.,  6644.,  6888.,  7132.,  7376.,
      9136.,  9496.,  9856.,  10216., 9274.,  9640.,  10006., 10372., 9412.,
      9784.,  10156., 10528., 5668.,  5912.,  6156.,  6400.,  5752.,  6000.,
      6248.,  6496.,  7722.,  8016.,  8310.,  8604.,  7836.,  8136.,  8436.,
      8736.,  10761., 11202., 11643., 12084., 10914., 11364., 11814., 12264.,
      11067., 11526., 11985., 12444., 6636.,  6936.,  7236.,  7536.,  6726.,
      7032.,  7338.,  7644.,  8976.,  9336.,  9696.,  10056., 9090.,  9456.,
      9822.,  10188., 12444., 12984., 13524., 14064., 12597., 13146., 13695.,
      14244., 12750., 13308., 13866., 14424., 7626.,  7992.,  8358.,  8724.,
      7716.,  8088.,  8460.,  8832.,  10230., 10656., 11082., 11508., 10344.,
      10776., 11208., 11640., 14127., 14766., 15405., 16044., 14280., 14928.,
      15576., 16224., 14433., 15090., 15747., 16404., 8616.,  9048.,  9480.,
      9912.,  8706.,  9144.,  9582.,  10020., 3664.,  3904.,  4144.,  4384.,
      3716.,  3960.,  4204.,  4448.,  4816.,  5176.,  5536.,  5896.,  4882.,
      5248.,  5614.,  5980.,  4948.,  5320.,  5692.,  6064.,  2740.,  2984.,
      3228.,  3472.,  2776.,  3024.,  3272.,  3520.,  4236.,  4520.,  4804.,
      5088.,  4288.,  4576.,  4864.,  5152.,  5542.,  5968.,  6394.,  6820.,
      5608.,  6040.,  6472.,  6904.,  5674.,  6112.,  6550.,  6988.,  3136.,
      3424.,  3712.,  4000.,  3172.,  3464.,  3756.,  4048.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1068., 1168., 1268., 1368., 1096., 1200., 1304., 1408., 1124., 1232.,
      1340., 1448., 1152., 1264., 1376., 1488., 1180., 1296., 1412., 1528.,
      1208., 1328., 1448., 1568., 1236., 1360., 1484., 1608., 1376., 1520.,
      1664., 1808., 1404., 1552., 1700., 1848., 1432., 1584., 1736., 1888.,
      1460., 1616., 1772., 1928., 1488., 1648., 1808., 1968., 1516., 1680.,
      1844., 2008., 1544., 1712., 1880., 2048., 1684., 1872., 2060., 2248.,
      1712., 1904., 2096., 2288., 1740., 1936., 2132., 2328., 1768., 1968.,
      2168., 2368., 1796., 2000., 2204., 2408., 1824., 2032., 2240., 2448.,
      1852., 2064., 2276., 2488., 1992., 2224., 2456., 2688., 2020., 2256.,
      2492., 2728., 2048., 2288., 2528., 2768., 2076., 2320., 2564., 2808.,
      2104., 2352., 2600., 2848., 2132., 2384., 2636., 2888., 2160., 2416.,
      2672., 2928., 2300., 2576., 2852., 3128., 2328., 2608., 2888., 3168.,
      2356., 2640., 2924., 3208., 2384., 2672., 2960., 3248., 2412., 2704.,
      2996., 3288., 2440., 2736., 3032., 3328., 2468., 2768., 3068., 3368.,
      2608., 2928., 3248., 3568., 2636., 2960., 3284., 3608., 2664., 2992.,
      3320., 3648., 2692., 3024., 3356., 3688., 2720., 3056., 3392., 3728.,
      2748., 3088., 3428., 3768., 2776., 3120., 3464., 3808., 2916., 3280.,
      3644., 4008., 2944., 3312., 3680., 4048., 2972., 3344., 3716., 4088.,
      3000., 3376., 3752., 4128., 3028., 3408., 3788., 4168., 3056., 3440.,
      3824., 4208., 3084., 3472., 3860., 4248.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5588.,  6032.,  5692.,  6144.,  7840.,  8500.,  7984.,  8656.,  8128.,
      8812.,  4900.,  5344.,  4988.,  5440.,  6732.,  7264.,  6836.,  7376.,
      9424.,  10216., 9568.,  10372., 9712.,  10528., 5868.,  6400.,  5956.,
      6496.,  7956.,  8604.,  8076.,  8736.,  11121., 12084., 11283., 12264.,
      11445., 12444., 6888.,  7536.,  6984.,  7644.,  9276.,  10056., 9396.,
      10188., 12903., 14064., 13065., 14244., 13227., 14424., 7944.,  8724.,
      8040.,  8832.,  10596., 11508., 10716., 11640., 14685., 16044., 14847.,
      16224., 15009., 16404., 9000.,  9912.,  9096.,  10020., 3876.,  4384.,
      3932.,  4448.,  5140.,  5896.,  5212.,  5980.,  5284.,  6064.,  2964.,
      3472.,  3004.,  3520.,  4492.,  5088.,  4548.,  5152.,  5932.,  6820.,
      6004.,  6904.,  6076.,  6988.,  3404.,  4000.,  3444.,  4048.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1152., 1368., 1184., 1408., 1216., 1448., 1248., 1488., 1280., 1528.,
      1312., 1568., 1344., 1608., 1504., 1808., 1536., 1848., 1568., 1888.,
      1600., 1928., 1632., 1968., 1664., 2008., 1696., 2048., 1856., 2248.,
      1888., 2288., 1920., 2328., 1952., 2368., 1984., 2408., 2016., 2448.,
      2048., 2488., 2208., 2688., 2240., 2728., 2272., 2768., 2304., 2808.,
      2336., 2848., 2368., 2888., 2400., 2928., 2560., 3128., 2592., 3168.,
      2624., 3208., 2656., 3248., 2688., 3288., 2720., 3328., 2752., 3368.,
      2912., 3568., 2944., 3608., 2976., 3648., 3008., 3688., 3040., 3728.,
      3072., 3768., 3104., 3808., 3264., 4008., 3296., 4048., 3328., 4088.,
      3360., 4128., 3392., 4168., 3424., 4208., 3456., 4248.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10788., 11176., 11672., 12064., 10988., 11384., 11888., 12288., 15098.,
      15680., 16412., 17000., 15374., 15968., 16712., 17312., 15650., 16256.,
      17012., 17624., 9404.,  9800.,  10288., 10688., 9572.,  9976.,  10472.,
      10880., 12988., 13464., 14048., 14528., 13188., 13672., 14264., 14752.,
      18134., 18848., 19712., 20432., 18410., 19136., 20012., 20744., 18686.,
      19424., 20312., 21056., 11252., 11736., 12312., 12800., 11420., 11912.,
      12496., 12992., 15330., 15912., 16620., 17208., 15558., 16152., 16872.,
      17472., 21369., 22242., 23286., 24168., 21675., 22566., 23628., 24528.,
      21981., 22890., 23970., 24888., 13182., 13776., 14472., 15072., 13362.,
      13968., 14676., 15288., 17838., 18552., 19392., 20112., 18066., 18792.,
      19644., 20376., 24735., 25806., 27048., 28128., 25041., 26130., 27390.,
      28488., 25347., 26454., 27732., 28848., 15162., 15888., 16716., 17448.,
      15342., 16080., 16920., 17664., 20346., 21192., 22164., 23016., 20574.,
      21432., 22416., 23280., 28101., 29370., 30810., 32088., 28407., 29694.,
      31152., 32448., 28713., 30018., 31494., 32808., 17142., 18000., 18960.,
      19824., 17322., 18192., 19164., 20040., 7276.,  7752.,  8288.,  8768.,
      7380.,  7864.,  8408.,  8896.,  9566.,  10280., 11072., 11792., 9698.,
      10424., 11228., 11960., 9830.,  10568., 11384., 12128., 5444.,  5928.,
      6456.,  6944.,  5516.,  6008.,  6544.,  7040.,  8420.,  8984.,  9608.,
      10176., 8524.,  9096.,  9728.,  10304., 11018., 11864., 12788., 13640.,
      11150., 12008., 12944., 13808., 11282., 12152., 13100., 13976., 6236.,
      6808.,  7424.,  8000.,  6308.,  6888.,  7512.,  8096.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2108., 2304., 2536., 2736., 2164., 2368., 2608., 2816., 2220., 2432.,
      2680., 2896., 2276., 2496., 2752., 2976., 2332., 2560., 2824., 3056.,
      2388., 2624., 2896., 3136., 2444., 2688., 2968., 3216., 2724., 3008.,
      3328., 3616., 2780., 3072., 3400., 3696., 2836., 3136., 3472., 3776.,
      2892., 3200., 3544., 3856., 2948., 3264., 3616., 3936., 3004., 3328.,
      3688., 4016., 3060., 3392., 3760., 4096., 3340., 3712., 4120., 4496.,
      3396., 3776., 4192., 4576., 3452., 3840., 4264., 4656., 3508., 3904.,
      4336., 4736., 3564., 3968., 4408., 4816., 3620., 4032., 4480., 4896.,
      3676., 4096., 4552., 4976., 3956., 4416., 4912., 5376., 4012., 4480.,
      4984., 5456., 4068., 4544., 5056., 5536., 4124., 4608., 5128., 5616.,
      4180., 4672., 5200., 5696., 4236., 4736., 5272., 5776., 4292., 4800.,
      5344., 5856., 4572., 5120., 5704., 6256., 4628., 5184., 5776., 6336.,
      4684., 5248., 5848., 6416., 4740., 5312., 5920., 6496., 4796., 5376.,
      5992., 6576., 4852., 5440., 6064., 6656., 4908., 5504., 6136., 6736.,
      5188., 5824., 6496., 7136., 5244., 5888., 6568., 7216., 5300., 5952.,
      6640., 7296., 5356., 6016., 6712., 7376., 5412., 6080., 6784., 7456.,
      5468., 6144., 6856., 7536., 5524., 6208., 6928., 7616., 5804., 6528.,
      7288., 8016., 5860., 6592., 7360., 8096., 5916., 6656., 7432., 8176.,
      5972., 6720., 7504., 8256., 6028., 6784., 7576., 8336., 6084., 6848.,
      7648., 8416., 6140., 6912., 7720., 8496.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5572.,  5704.,  5836.,  5968.,  6312.,  6448.,  6584.,  6720.,  5964.,
      6104.,  6244.,  6384.,  6736.,  6880.,  7024.,  7168.,  7726.,  7924.,
      8122.,  8320.,  8812.,  9016.,  9220.,  9424.,  8266.,  8476.,  8686.,
      8896.,  9400.,  9616.,  9832.,  10048., 8806.,  9028.,  9250.,  9472.,
      9988.,  10216., 10444., 10672., 4844.,  4984.,  5124.,  5264.,  5584.,
      5728.,  5872.,  6016.,  5172.,  5320.,  5468.,  5616.,  5944.,  6096.,
      6248.,  6400.,  9884.,  10104., 10324., 10544., 10976., 11200., 11424.,
      11648., 10276., 10504., 10732., 10960., 11400., 11632., 11864., 12096.,
      13666., 13996., 14326., 14656., 15280., 15616., 15952., 16288., 14206.,
      14548., 14890., 15232., 15868., 16216., 16564., 16912., 14746., 15100.,
      15454., 15808., 16456., 16816., 17176., 17536., 8452.,  8680.,  8908.,
      9136.,  9544.,  9776.,  10008., 10240., 8780.,  9016.,  9252.,  9488.,
      9904.,  10144., 10384., 10624., 14462., 14788., 15114., 15440., 16012.,
      16344., 16676., 17008., 14906., 15244., 15582., 15920., 16504., 16848.,
      17192., 17536., 19977., 20466., 20955., 21444., 22266., 22764., 23262.,
      23760., 20571., 21078., 21585., 22092., 22932., 23448., 23964., 24480.,
      21165., 21690., 22215., 22740., 23598., 24132., 24666., 25200., 12202.,
      12540., 12878., 13216., 13752., 14096., 14440., 14784., 12550., 12900.,
      13250., 13600., 14148., 14504., 14860., 15216., 19346., 19804., 20262.,
      20720., 21424., 21888., 22352., 22816., 19790., 20260., 20730., 21200.,
      21916., 22392., 22868., 23344., 26511., 27198., 27885., 28572., 29592.,
      30288., 30984., 31680., 21857., 22434., 23011., 23588., 24498., 25084.,
      25670., 26256., 22451., 23046., 23641., 24236., 25164., 25768., 26372.,
      26976., 16030., 16500., 16970., 17440., 18108., 18584., 19060., 19536.,
      16378., 16860., 17342., 17824., 18504., 18992., 19480., 19968., 14758.,
      15092., 15426., 15760., 16340., 16680., 17020., 17360., 15202., 15548.,
      15894., 16240., 16832., 17184., 17536., 17888., 20373., 20874., 21375.,
      21876., 22710., 23220., 23730., 24240., 20967., 21486., 22005., 22524.,
      23376., 23904., 24432., 24960., 21561., 22098., 22635., 23172., 24042.,
      24588., 25134., 25680., 12434., 12780., 13126., 13472., 14016., 14368.,
      14720., 15072., 12782., 13140., 13498., 13856., 14412., 14776., 15140.,
      15504., 4604.,  4824.,  5044.,  5264.,  5600.,  5824.,  6048.,  6272.,
      4804.,  5032.,  5260.,  5488.,  5832.,  6064.,  6296.,  6528.,  5746.,
      6076.,  6406.,  6736.,  7216.,  7552.,  7888.,  8224.,  5998.,  6340.,
      6682.,  7024.,  7516.,  7864.,  8212.,  8560.,  6250.,  6604.,  6958.,
      7312.,  7816.,  8176.,  8536.,  8896.,  2980.,  3208.,  3436.,  3664.,
      3976.,  4208.,  4440.,  4672.,  3116.,  3352.,  3588.,  3824.,  4144.,
      4384.,  4624.,  4864.,  6804.,  7112.,  7420.,  7728.,  8152.,  8464.,
      8776.,  9088.,  7004.,  7320.,  7636.,  7952.,  8384.,  8704.,  9024.,
      9344.,  8518.,  8980.,  9442.,  9904.,  10516., 10984., 11452., 11920.,
      8770.,  9244.,  9718.,  10192., 10816., 11296., 11776., 12256., 9022.,
      9508.,  9994.,  10480., 11116., 11608., 12100., 12592., 4476.,  4792.,
      5108.,  5424.,  5824.,  6144.,  6464.,  6784.,  4612.,  4936.,  5260.,
      5584.,  5992.,  6320.,  6648.,  6976.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4020.,  4216.,  4412.,  4608.,  4872.,  5072.,  5272.,  5472.,  4124.,
      4328.,  4532.,  4736.,  5008.,  5216.,  5424.,  5632.,  4228.,  4440.,
      4652.,  4864.,  5144.,  5360.,  5576.,  5792.,  4332.,  4552.,  4772.,
      4992.,  5280.,  5504.,  5728.,  5952.,  4436.,  4664.,  4892.,  5120.,
      5416.,  5648.,  5880.,  6112.,  4540.,  4776.,  5012.,  5248.,  5552.,
      5792.,  6032.,  6272.,  4644.,  4888.,  5132.,  5376.,  5688.,  5936.,
      6184.,  6432.,  5164.,  5448.,  5732.,  6016.,  6368.,  6656.,  6944.,
      7232.,  5268.,  5560.,  5852.,  6144.,  6504.,  6800.,  7096.,  7392.,
      5372.,  5672.,  5972.,  6272.,  6640.,  6944.,  7248.,  7552.,  5476.,
      5784.,  6092.,  6400.,  6776.,  7088.,  7400.,  7712.,  5580.,  5896.,
      6212.,  6528.,  6912.,  7232.,  7552.,  7872.,  5684.,  6008.,  6332.,
      6656.,  7048.,  7376.,  7704.,  8032.,  5788.,  6120.,  6452.,  6784.,
      7184.,  7520.,  7856.,  8192.,  6308.,  6680.,  7052.,  7424.,  7864.,
      8240.,  8616.,  8992.,  6412.,  6792.,  7172.,  7552.,  8000.,  8384.,
      8768.,  9152.,  6516.,  6904.,  7292.,  7680.,  8136.,  8528.,  8920.,
      9312.,  6620.,  7016.,  7412.,  7808.,  8272.,  8672.,  9072.,  9472.,
      6724.,  7128.,  7532.,  7936.,  8408.,  8816.,  9224.,  9632.,  6828.,
      7240.,  7652.,  8064.,  8544.,  8960.,  9376.,  9792.,  6932.,  7352.,
      7772.,  8192.,  8680.,  9104.,  9528.,  9952.,  7452.,  7912.,  8372.,
      8832.,  9360.,  9824.,  10288., 10752., 7556.,  8024.,  8492.,  8960.,
      9496.,  9968.,  10440., 10912., 7660.,  8136.,  8612.,  9088.,  9632.,
      10112., 10592., 11072., 7764.,  8248.,  8732.,  9216.,  9768.,  10256.,
      10744., 11232., 7868.,  8360.,  8852.,  9344.,  9904.,  10400., 10896.,
      11392., 7972.,  8472.,  8972.,  9472.,  10040., 10544., 11048., 11552.,
      8076.,  8584.,  9092.,  9600.,  10176., 10688., 11200., 11712., 8596.,
      9144.,  9692.,  10240., 10856., 11408., 11960., 12512., 8700.,  9256.,
      9812.,  10368., 10992., 11552., 12112., 12672., 8804.,  9368.,  9932.,
      10496., 11128., 11696., 12264., 12832., 8908.,  9480.,  10052., 10624.,
      11264., 11840., 12416., 12992., 9012.,  9592.,  10172., 10752., 11400.,
      11984., 12568., 13152., 9116.,  9704.,  10292., 10880., 11536., 12128.,
      12720., 13312., 9220.,  9816.,  10412., 11008., 11672., 12272., 12872.,
      13472., 9740.,  10376., 11012., 11648., 12352., 12992., 13632., 14272.,
      9844.,  10488., 11132., 11776., 12488., 13136., 13784., 14432., 9948.,
      10600., 11252., 11904., 12624., 13280., 13936., 14592., 10052., 10712.,
      11372., 12032., 12760., 13424., 14088., 14752., 10156., 10824., 11492.,
      12160., 12896., 13568., 14240., 14912., 10260., 10936., 11612., 12288.,
      13032., 13712., 14392., 15072., 10364., 11048., 11732., 12416., 13168.,
      13856., 14544., 15232., 10884., 11608., 12332., 13056., 13848., 14576.,
      15304., 16032., 10988., 11720., 12452., 13184., 13984., 14720., 15456.,
      16192., 11092., 11832., 12572., 13312., 14120., 14864., 15608., 16352.,
      11196., 11944., 12692., 13440., 14256., 15008., 15760., 16512., 11300.,
      12056., 12812., 13568., 14392., 15152., 15912., 16672., 11404., 12168.,
      12932., 13696., 14528., 15296., 16064., 16832., 11508., 12280., 13052.,
      13824., 14664., 15440., 16216., 16992.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5604.,  5968.,  6340.,  6720.,  6004.,  6384.,  6772.,  7168.,  7786.,
      8320.,  8866.,  9424.,  8338.,  8896.,  9466.,  10048., 8890.,  9472.,
      10066., 10672., 4900.,  5264.,  5636.,  6016.,  5236.,  5616.,  6004.,
      6400.,  10004., 10544., 11092., 11648., 10404., 10960., 11524., 12096.,
      13858., 14656., 15466., 16288., 14410., 15232., 16066., 16912., 14962.,
      15808., 16666., 17536., 8596.,  9136.,  9684.,  10240., 8932.,  9488.,
      10052., 10624., 14674., 15440., 16218., 17008., 15130., 15920., 16722.,
      17536., 20313., 21444., 22593., 23760., 20925., 22092., 23277., 24480.,
      21537., 22740., 23961., 25200., 12450., 13216., 13994., 14784., 12810.,
      13600., 14402., 15216., 19690., 20720., 21762., 22816., 20146., 21200.,
      22266., 23344., 27045., 28572., 30117., 31680., 22281., 23588., 24913.,
      26256., 22893., 24236., 25597., 26976., 16410., 17440., 18482., 19536.,
      16770., 17824., 18890., 19968., 14978., 15760., 16554., 17360., 15434.,
      16240., 17058., 17888., 20721., 21876., 23049., 24240., 21333., 22524.,
      23733., 24960., 21945., 23172., 24417., 25680., 12690., 13472., 14266.,
      15072., 13050., 13856., 14674., 15504., 4772.,  5264.,  5764.,  6272.,
      4980.,  5488.,  6004.,  6528.,  6010.,  6736.,  7474.,  8224.,  6274.,
      7024.,  7786.,  8560.,  6538.,  7312.,  8098.,  8896.,  3172.,  3664.,
      4164.,  4672.,  3316.,  3824.,  4340.,  4864.,  7060.,  7728.,  8404.,
      9088.,  7268.,  7952.,  8644.,  9344.,  8914.,  9904.,  10906., 11920.,
      9178.,  10192., 11218., 12256., 9442.,  10480., 11530., 12592., 4756.,
      5424.,  6100.,  6784.,  4900.,  5584.,  6276.,  6976.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4188.,  4608.,  5036.,  5472.,  4300.,  4736.,  5180.,  5632.,  4412.,
      4864.,  5324.,  5792.,  4524.,  4992.,  5468.,  5952.,  4636.,  5120.,
      5612.,  6112.,  4748.,  5248.,  5756.,  6272.,  4860.,  5376.,  5900.,
      6432.,  5420.,  6016.,  6620.,  7232.,  5532.,  6144.,  6764.,  7392.,
      5644.,  6272.,  6908.,  7552.,  5756.,  6400.,  7052.,  7712.,  5868.,
      6528.,  7196.,  7872.,  5980.,  6656.,  7340.,  8032.,  6092.,  6784.,
      7484.,  8192.,  6652.,  7424.,  8204.,  8992.,  6764.,  7552.,  8348.,
      9152.,  6876.,  7680.,  8492.,  9312.,  6988.,  7808.,  8636.,  9472.,
      7100.,  7936.,  8780.,  9632.,  7212.,  8064.,  8924.,  9792.,  7324.,
      8192.,  9068.,  9952.,  7884.,  8832.,  9788.,  10752., 7996.,  8960.,
      9932.,  10912., 8108.,  9088.,  10076., 11072., 8220.,  9216.,  10220.,
      11232., 8332.,  9344.,  10364., 11392., 8444.,  9472.,  10508., 11552.,
      8556.,  9600.,  10652., 11712., 9116.,  10240., 11372., 12512., 9228.,
      10368., 11516., 12672., 9340.,  10496., 11660., 12832., 9452.,  10624.,
      11804., 12992., 9564.,  10752., 11948., 13152., 9676.,  10880., 12092.,
      13312., 9788.,  11008., 12236., 13472., 10348., 11648., 12956., 14272.,
      10460., 11776., 13100., 14432., 10572., 11904., 13244., 14592., 10684.,
      12032., 13388., 14752., 10796., 12160., 13532., 14912., 10908., 12288.,
      13676., 15072., 11020., 12416., 13820., 15232., 11580., 13056., 14540.,
      16032., 11692., 13184., 14684., 16192., 11804., 13312., 14828., 16352.,
      11916., 13440., 14972., 16512., 12028., 13568., 15116., 16672., 12140.,
      13696., 15260., 16832., 12252., 13824., 15404., 16992.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10948., 11208., 11672., 11936., 12412., 12680., 13168., 13440., 11732.,
      12008., 12488., 12768., 13260., 13544., 14048., 14336., 15182., 15572.,
      16244., 16640., 17330., 17732., 18440., 18848., 16262., 16676., 17372.,
      17792., 18506., 18932., 19664., 20096., 17342., 17780., 18500., 18944.,
      19682., 20132., 20888., 21344., 9524.,  9800.,  10248., 10528., 10988.,
      11272., 11744., 12032., 10180., 10472., 10936., 11232., 11708., 12008.,
      12496., 12800., 19572., 20008., 20648., 21088., 21740., 22184., 22848.,
      23296., 20356., 20808., 21464., 21920., 22588., 23048., 23728., 24192.,
      27062., 27716., 28652., 29312., 30266., 30932., 31904., 32576., 28142.,
      28820., 29780., 30464., 31442., 32132., 33128., 33824., 29222., 29924.,
      30908., 31616., 32618., 33332., 34352., 35072., 16740., 17192., 17816.,
      18272., 18908., 19368., 20016., 20480., 17396., 17864., 18504., 18976.,
      19628., 20104., 20768., 21248., 28702., 29348., 30228., 30880., 31778.,
      32436., 33352., 34016., 29590., 30260., 31164., 31840., 32762., 33444.,
      34384., 35072., 39657., 40626., 41910., 42888., 44199., 45186., 46524.,
      47520., 40845., 41850., 43170., 44184., 45531., 46554., 47928., 48960.,
      42033., 43074., 44430., 45480., 46863., 47922., 49332., 50400., 24230.,
      24900., 25756., 26432., 27306., 27988., 28880., 29568., 24926., 25620.,
      26500., 27200., 28098., 28804., 29720., 30432., 38470., 39380., 40524.,
      41440., 42602., 43524., 44704., 45632., 39358., 40292., 41460., 42400.,
      43586., 44532., 45736., 46688., 52725., 54090., 55770., 57144., 58851.,
      60234., 61968., 63360., 43417., 44562., 46022., 47176., 48663., 49826.,
      51340., 52512., 44605., 45786., 47282., 48472., 49995., 51194., 52744.,
      53952., 31886., 32820., 33940., 34880., 36018., 36964., 38120., 39072.,
      32582., 33540., 34684., 35648., 36810., 37780., 38960., 39936., 29294.,
      29956., 30852., 31520., 32434., 33108., 34040., 34720., 30182., 30868.,
      31788., 32480., 33418., 34116., 35072., 35776., 40449., 41442., 42750.,
      43752., 45087., 46098., 47460., 48480., 41637., 42666., 44010., 45048.,
      46419., 47466., 48864., 49920., 42825., 43890., 45270., 46344., 47751.,
      48834., 50268., 51360., 24694., 25380., 26252., 26944., 27834., 28532.,
      29440., 30144., 25390., 26100., 26996., 27712., 28626., 29348., 30280.,
      31008., 9108.,  9544.,  10088., 10528., 11084., 11528., 12096., 12544.,
      9508.,  9960.,  10520., 10976., 11548., 12008., 12592., 13056., 11366.,
      12020., 12812., 13472., 14282., 14948., 15776., 16448., 11870., 12548.,
      13364., 14048., 14882., 15572., 16424., 17120., 12374., 13076., 13916.,
      14624., 15482., 16196., 17072., 17792., 5892.,  6344.,  6872.,  7328.,
      7868.,  8328.,  8880.,  9344.,  6164.,  6632.,  7176.,  7648.,  8204.,
      8680.,  9248.,  9728.,  13508., 14120., 14840., 15456., 16188., 16808.,
      17552., 18176., 13908., 14536., 15272., 15904., 16652., 17288., 18048.,
      18688., 16910., 17828., 18884., 19808., 20882., 21812., 22904., 23840.,
      17414., 18356., 19436., 20384., 21482., 22436., 23552., 24512., 17918.,
      18884., 19988., 20960., 22082., 23060., 24200., 25184., 8884.,  9512.,
      10216., 10848., 11564., 12200., 12928., 13568., 9156.,  9800.,  10520.,
      11168., 11900., 12552., 13296., 13952.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7988.,  8376.,  8824.,  9216.,  9676.,  10072., 10544., 10944., 8196.,
      8600.,  9064.,  9472.,  9948.,  10360., 10848., 11264., 8404.,  8824.,
      9304.,  9728.,  10220., 10648., 11152., 11584., 8612.,  9048.,  9544.,
      9984.,  10492., 10936., 11456., 11904., 8820.,  9272.,  9784.,  10240.,
      10764., 11224., 11760., 12224., 9028.,  9496.,  10024., 10496., 11036.,
      11512., 12064., 12544., 9236.,  9720.,  10264., 10752., 11308., 11800.,
      12368., 12864., 10276., 10840., 11464., 12032., 12668., 13240., 13888.,
      14464., 10484., 11064., 11704., 12288., 12940., 13528., 14192., 14784.,
      10692., 11288., 11944., 12544., 13212., 13816., 14496., 15104., 10900.,
      11512., 12184., 12800., 13484., 14104., 14800., 15424., 11108., 11736.,
      12424., 13056., 13756., 14392., 15104., 15744., 11316., 11960., 12664.,
      13312., 14028., 14680., 15408., 16064., 11524., 12184., 12904., 13568.,
      14300., 14968., 15712., 16384., 12564., 13304., 14104., 14848., 15660.,
      16408., 17232., 17984., 12772., 13528., 14344., 15104., 15932., 16696.,
      17536., 18304., 12980., 13752., 14584., 15360., 16204., 16984., 17840.,
      18624., 13188., 13976., 14824., 15616., 16476., 17272., 18144., 18944.,
      13396., 14200., 15064., 15872., 16748., 17560., 18448., 19264., 13604.,
      14424., 15304., 16128., 17020., 17848., 18752., 19584., 13812., 14648.,
      15544., 16384., 17292., 18136., 19056., 19904., 14852., 15768., 16744.,
      17664., 18652., 19576., 20576., 21504., 15060., 15992., 16984., 17920.,
      18924., 19864., 20880., 21824., 15268., 16216., 17224., 18176., 19196.,
      20152., 21184., 22144., 15476., 16440., 17464., 18432., 19468., 20440.,
      21488., 22464., 15684., 16664., 17704., 18688., 19740., 20728., 21792.,
      22784., 15892., 16888., 17944., 18944., 20012., 21016., 22096., 23104.,
      16100., 17112., 18184., 19200., 20284., 21304., 22400., 23424., 17140.,
      18232., 19384., 20480., 21644., 22744., 23920., 25024., 17348., 18456.,
      19624., 20736., 21916., 23032., 24224., 25344., 17556., 18680., 19864.,
      20992., 22188., 23320., 24528., 25664., 17764., 18904., 20104., 21248.,
      22460., 23608., 24832., 25984., 17972., 19128., 20344., 21504., 22732.,
      23896., 25136., 26304., 18180., 19352., 20584., 21760., 23004., 24184.,
      25440., 26624., 18388., 19576., 20824., 22016., 23276., 24472., 25744.,
      26944., 19428., 20696., 22024., 23296., 24636., 25912., 27264., 28544.,
      19636., 20920., 22264., 23552., 24908., 26200., 27568., 28864., 19844.,
      21144., 22504., 23808., 25180., 26488., 27872., 29184., 20052., 21368.,
      22744., 24064., 25452., 26776., 28176., 29504., 20260., 21592., 22984.,
      24320., 25724., 27064., 28480., 29824., 20468., 21816., 23224., 24576.,
      25996., 27352., 28784., 30144., 20676., 22040., 23464., 24832., 26268.,
      27640., 29088., 30464., 21716., 23160., 24664., 26112., 27628., 29080.,
      30608., 32064., 21924., 23384., 24904., 26368., 27900., 29368., 30912.,
      32384., 22132., 23608., 25144., 26624., 28172., 29656., 31216., 32704.,
      22340., 23832., 25384., 26880., 28444., 29944., 31520., 33024., 22548.,
      24056., 25624., 27136., 28716., 30232., 31824., 33344., 22756., 24280.,
      25864., 27392., 28988., 30520., 32128., 33664., 22964., 24504., 26104.,
      27648., 29260., 30808., 32432., 33984.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17412., 17672., 17932., 18192., 18728., 18992., 19256., 19520., 20076.,
      20344., 20612., 20880., 21456., 21728., 22000., 22272., 18452., 18728.,
      19004., 19280., 19832., 20112., 20392., 20672., 21244., 21528., 21812.,
      22096., 22688., 22976., 23264., 23552., 24726., 25116., 25506., 25896.,
      26716., 27112., 27508., 27904., 28754., 29156., 29558., 29960., 30840.,
      31248., 31656., 32064., 26350., 26764., 27178., 27592., 28436., 28856.,
      29276., 29696., 30570., 30996., 31422., 31848., 32752., 33184., 33616.,
      34048., 17606., 17916., 18226., 18536., 19276., 19592., 19908., 20224.,
      20994., 21316., 21638., 21960., 22760., 23088., 23416., 23744., 18772.,
      19048., 19324., 19600., 20216., 20496., 20776., 21056., 21692., 21976.,
      22260., 22544., 23200., 23488., 23776., 24064., 20068., 20360., 20652.,
      20944., 21576., 21872., 22168., 22464., 23116., 23416., 23716., 24016.,
      24688., 24992., 25296., 25600., 10164., 10344., 10524., 10704., 11160.,
      11344., 11528., 11712., 12188., 12376., 12564., 12752., 13248., 13440.,
      13632., 13824., 11204., 11400., 11596., 11792., 12264., 12464., 12664.,
      12864., 13356., 13560., 13764., 13968., 14480., 14688., 14896., 15104.,
      17630., 17900., 18170., 18440., 19140., 19416., 19692., 19968., 20698.,
      20980., 21262., 21544., 22304., 22592., 22880., 23168., 19254., 19548.,
      19842., 20136., 20860., 21160., 21460., 21760., 22514., 22820., 23126.,
      23432., 24216., 24528., 24840., 25152., 20878., 21196., 21514., 21832.,
      22580., 22904., 23228., 23552., 24330., 24660., 24990., 25320., 26128.,
      26464., 26800., 27136., 18436., 18632., 18828., 19024., 19560., 19760.,
      19960., 20160., 20716., 20920., 21124., 21328., 21904., 22112., 22320.,
      22528., 19732., 19944., 20156., 20368., 20920., 21136., 21352., 21568.,
      22140., 22360., 22580., 22800., 23392., 23616., 23840., 24064., 22582.,
      22972., 23362., 23752., 24476., 24872., 25268., 25664., 26418., 26820.,
      27222., 27624., 28408., 28816., 29224., 29632., 23822., 24236., 24650.,
      25064., 25812., 26232., 26652., 27072., 27850., 28276., 28702., 29128.,
      29936., 30368., 30800., 31232., 36745., 37202., 37659., 38116., 39066.,
      39532., 39998., 40464., 41459., 41934., 42409., 42884., 43924., 44408.,
      44892., 45376., 38573., 39066., 39559., 40052., 41038., 41540., 42042.,
      42544., 43575., 44086., 44597., 45108., 46184., 46704., 47224., 47744.,
      40401., 40930., 41459., 41988., 43010., 43548., 44086., 44624., 45691.,
      46238., 46785., 47332., 48444., 49000., 49556., 50112., 33198., 33612.,
      34026., 34440., 35220., 35640., 36060., 36480., 37290., 37716., 38142.,
      38568., 39408., 39840., 40272., 40704., 20102., 20412., 20722., 21032.,
      21708., 22024., 22340., 22656., 23362., 23684., 24006., 24328., 25064.,
      25392., 25720., 26048., 21630., 22028., 22426., 22824., 23556., 23960.,
      24364., 24768., 25530., 25940., 26350., 26760., 27552., 27968., 28384.,
      28800., 22870., 23292., 23714., 24136., 24892., 25320., 25748., 26176.,
      26962., 27396., 27830., 28264., 29080., 29520., 29960., 30400., 29973.,
      30570., 31167., 31764., 32854., 33460., 34066., 34672., 35807., 36422.,
      37037., 37652., 38832., 39456., 40080., 40704., 21433., 21938., 22443.,
      22948., 23946., 24460., 24974., 25488., 26531., 27054., 27577., 28100.,
      29188., 29720., 30252., 30784., 23261., 23802., 24343., 24884., 25918.,
      26468., 27018., 27568., 28647., 29206., 29765., 30324., 31448., 32016.,
      32584., 33152., 21366., 21788., 22210., 22632., 23420., 23848., 24276.,
      24704., 25522., 25956., 26390., 26824., 27672., 28112., 28552., 28992.,
      22734., 23180., 23626., 24072., 24884., 25336., 25788., 26240., 27082.,
      27540., 27998., 28456., 29328., 29792., 30256., 30720., 16582., 16988.,
      17394., 17800., 18540., 18952., 19364., 19776., 20546., 20964., 21382.,
      21800., 22600., 23024., 23448., 23872., 17822., 18252., 18682., 19112.,
      19876., 20312., 20748., 21184., 21978., 22420., 22862., 23304., 24128.,
      24576., 25024., 25472., 25121., 25730., 26339., 26948., 28050., 28668.,
      29286., 29904., 31051., 31678., 32305., 32932., 34124., 34760., 35396.,
      36032., 26949., 27594., 28239., 28884., 30022., 30676., 31330., 31984.,
      33167., 33830., 34493., 35156., 36384., 37056., 37728., 38400., 24553.,
      25106., 25659., 26212., 27258., 27820., 28382., 28944., 30035., 30606.,
      31177., 31748., 32884., 33464., 34044., 34624., 21822., 22252., 22682.,
      23112., 23908., 24344., 24780., 25216., 26042., 26484., 26926., 27368.,
      28224., 28672., 29120., 29568., 23190., 23644., 24098., 24552., 25372.,
      25832., 26292., 26752., 27602., 28068., 28534., 29000., 29880., 30352.,
      30824., 31296., 11380., 11560., 11740., 11920., 12312., 12496., 12680.,
      12864., 13276., 13464., 13652., 13840., 14272., 14464., 14656., 14848.,
      12164., 12360., 12556., 12752., 13160., 13360., 13560., 13760., 14188.,
      14392., 14596., 14800., 15248., 15456., 15664., 15872., 15550., 15820.,
      16090., 16360., 16900., 17176., 17452., 17728., 18298., 18580., 18862.,
      19144., 19744., 20032., 20320., 20608., 16534., 16828., 17122., 17416.,
      17980., 18280., 18580., 18880., 19474., 19780., 20086., 20392., 21016.,
      21328., 21640., 21952., 17518., 17836., 18154., 18472., 19060., 19384.,
      19708., 20032., 20650., 20980., 21310., 21640., 22288., 22624., 22960.,
      23296., 9028.,  9224.,  9420.,  9616.,  9960.,  10160., 10360., 10560.,
      10924., 11128., 11332., 11536., 11920., 12128., 12336., 12544., 9556.,
      9768.,  9980.,  10192., 10552., 10768., 10984., 11200., 11580., 11800.,
      12020., 12240., 12640., 12864., 13088., 13312., 20004., 20360., 20716.,
      21072., 21640., 22000., 22360., 22720., 23308., 23672., 24036., 24400.,
      25008., 25376., 25744., 26112., 20788., 21160., 21532., 21904., 22488.,
      22864., 23240., 23616., 24220., 24600., 24980., 25360., 25984., 26368.,
      26752., 27136., 16006., 16412., 16818., 17224., 17900., 18312., 18724.,
      19136., 19842., 20260., 20678., 21096., 21832., 22256., 22680., 23104.,
      16990., 17420., 17850., 18280., 18980., 19416., 19852., 20288., 21018.,
      21460., 21902., 22344., 23104., 23552., 24000., 24448., 17974., 18428.,
      18882., 19336., 20060., 20520., 20980., 21440., 22194., 22660., 23126.,
      23592., 24376., 24848., 25320., 25792., 14836., 15208., 15580., 15952.,
      16472., 16848., 17224., 17600., 18140., 18520., 18900., 19280., 19840.,
      20224., 20608., 20992., 7044.,  7304.,  7564.,  7824.,  8232.,  8496.,
      8760.,  9024.,  9452.,  9720.,  9988.,  10256., 10704., 10976., 11248.,
      11520.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15588., 15976., 16364., 16752., 17256., 17648., 18040., 18432., 18956.,
      19352., 19748., 20144., 20688., 21088., 21488., 21888., 15988., 16392.,
      16796., 17200., 17720., 18128., 18536., 18944., 19484., 19896., 20308.,
      20720., 21280., 21696., 22112., 22528., 16388., 16808., 17228., 17648.,
      18184., 18608., 19032., 19456., 20012., 20440., 20868., 21296., 21872.,
      22304., 22736., 23168., 16788., 17224., 17660., 18096., 18648., 19088.,
      19528., 19968., 20540., 20984., 21428., 21872., 22464., 22912., 23360.,
      23808., 17188., 17640., 18092., 18544., 19112., 19568., 20024., 20480.,
      21068., 21528., 21988., 22448., 23056., 23520., 23984., 24448., 17588.,
      18056., 18524., 18992., 19576., 20048., 20520., 20992., 21596., 22072.,
      22548., 23024., 23648., 24128., 24608., 25088., 17988., 18472., 18956.,
      19440., 20040., 20528., 21016., 21504., 22124., 22616., 23108., 23600.,
      24240., 24736., 25232., 25728., 19988., 20552., 21116., 21680., 22360.,
      22928., 23496., 24064., 24764., 25336., 25908., 26480., 27200., 27776.,
      28352., 28928., 20388., 20968., 21548., 22128., 22824., 23408., 23992.,
      24576., 25292., 25880., 26468., 27056., 27792., 28384., 28976., 29568.,
      20788., 21384., 21980., 22576., 23288., 23888., 24488., 25088., 25820.,
      26424., 27028., 27632., 28384., 28992., 29600., 30208., 21188., 21800.,
      22412., 23024., 23752., 24368., 24984., 25600., 26348., 26968., 27588.,
      28208., 28976., 29600., 30224., 30848., 21588., 22216., 22844., 23472.,
      24216., 24848., 25480., 26112., 26876., 27512., 28148., 28784., 29568.,
      30208., 30848., 31488., 9444.,  9832.,  10220., 10608., 11112., 11504.,
      11896., 12288., 12812., 13208., 13604., 14000., 14544., 14944., 15344.,
      15744., 9844.,  10248., 10652., 11056., 11576., 11984., 12392., 12800.,
      13340., 13752., 14164., 14576., 15136., 15552., 15968., 16384., 3396.,
      3624.,  3852.,  4080.,  4424.,  4656.,  4888.,  5120.,  5484.,  5720.,
      5956.,  6192.,  6576.,  6816.,  7056.,  7296.,  3796.,  4040.,  4284.,
      4528.,  4888.,  5136.,  5384.,  5632.,  6012.,  6264.,  6516.,  6768.,
      7168.,  7424.,  7680.,  7936.,  4196.,  4456.,  4716.,  4976.,  5352.,
      5616.,  5880.,  6144.,  6540.,  6808.,  7076.,  7344.,  7760.,  8032.,
      8304.,  8576.,  4596.,  4872.,  5148.,  5424.,  5816.,  6096.,  6376.,
      6656.,  7068.,  7352.,  7636.,  7920.,  8352.,  8640.,  8928.,  9216.,
      4996.,  5288.,  5580.,  5872.,  6280.,  6576.,  6872.,  7168.,  7596.,
      7896.,  8196.,  8496.,  8944.,  9248.,  9552.,  9856.,  5396.,  5704.,
      6012.,  6320.,  6744.,  7056.,  7368.,  7680.,  8124.,  8440.,  8756.,
      9072.,  9536.,  9856.,  10176., 10496., 5796.,  6120.,  6444.,  6768.,
      7208.,  7536.,  7864.,  8192.,  8652.,  8984.,  9316.,  9648.,  10128.,
      10464., 10800., 11136., 7796.,  8200.,  8604.,  9008.,  9528.,  9936.,
      10344., 10752., 11292., 11704., 12116., 12528., 13088., 13504., 13920.,
      14336., 8196.,  8616.,  9036.,  9456.,  9992.,  10416., 10840., 11264.,
      11820., 12248., 12676., 13104., 13680., 14112., 14544., 14976., 8596.,
      9032.,  9468.,  9904.,  10456., 10896., 11336., 11776., 12348., 12792.,
      13236., 13680., 14272., 14720., 15168., 15616., 8996.,  9448.,  9900.,
      10352., 10920., 11376., 11832., 12288., 12876., 13336., 13796., 14256.,
      14864., 15328., 15792., 16256., 9396.,  9864.,  10332., 10800., 11384.,
      11856., 12328., 12800., 13404., 13880., 14356., 14832., 15456., 15936.,
      16416., 16896., 9796.,  10280., 10764., 11248., 11848., 12336., 12824.,
      13312., 13932., 14424., 14916., 15408., 16048., 16544., 17040., 17536.,
      10196., 10696., 11196., 11696., 12312., 12816., 13320., 13824., 14460.,
      14968., 15476., 15984., 16640., 17152., 17664., 18176., 12196., 12776.,
      13356., 13936., 14632., 15216., 15800., 16384., 17100., 17688., 18276.,
      18864., 19600., 20192., 20784., 21376., 12596., 13192., 13788., 14384.,
      15096., 15696., 16296., 16896., 17628., 18232., 18836., 19440., 20192.,
      20800., 21408., 22016., 12996., 13608., 14220., 14832., 15560., 16176.,
      16792., 17408., 18156., 18776., 19396., 20016., 20784., 21408., 22032.,
      22656., 13396., 14024., 14652., 15280., 16024., 16656., 17288., 17920.,
      18684., 19320., 19956., 20592., 21376., 22016., 22656., 23296., 13796.,
      14440., 15084., 15728., 16488., 17136., 17784., 18432., 19212., 19864.,
      20516., 21168., 21968., 22624., 23280., 23936., 14196., 14856., 15516.,
      16176., 16952., 17616., 18280., 18944., 19740., 20408., 21076., 21744.,
      22560., 23232., 23904., 24576., 14596., 15272., 15948., 16624., 17416.,
      18096., 18776., 19456., 20268., 20952., 21636., 22320., 23152., 23840.,
      24528., 25216., 16596., 17352., 18108., 18864., 19736., 20496., 21256.,
      22016., 22908., 23672., 24436., 25200., 26112., 26880., 27648., 28416.,
      16996., 17768., 18540., 19312., 20200., 20976., 21752., 22528., 23436.,
      24216., 24996., 25776., 26704., 27488., 28272., 29056., 17396., 18184.,
      18972., 19760., 20664., 21456., 22248., 23040., 23964., 24760., 25556.,
      26352., 27296., 28096., 28896., 29696., 17796., 18600., 19404., 20208.,
      21128., 21936., 22744., 23552., 24492., 25304., 26116., 26928., 27888.,
      28704., 29520., 30336., 18196., 19016., 19836., 20656., 21592., 22416.,
      23240., 24064., 25020., 25848., 26676., 27504., 28480., 29312., 30144.,
      30976., 14244., 14824., 15404., 15984., 16680., 17264., 17848., 18432.,
      19148., 19736., 20324., 20912., 21648., 22240., 22832., 23424., 14644.,
      15240., 15836., 16432., 17144., 17744., 18344., 18944., 19676., 20280.,
      20884., 21488., 22240., 22848., 23456., 24064., 16388., 16808., 17228.,
      17648., 18184., 18608., 19032., 19456., 20012., 20440., 20868., 21296.,
      21872., 22304., 22736., 23168., 16788., 17224., 17660., 18096., 18648.,
      19088., 19528., 19968., 20540., 20984., 21428., 21872., 22464., 22912.,
      23360., 23808., 17188., 17640., 18092., 18544., 19112., 19568., 20024.,
      20480., 21068., 21528., 21988., 22448., 23056., 23520., 23984., 24448.,
      17588., 18056., 18524., 18992., 19576., 20048., 20520., 20992., 21596.,
      22072., 22548., 23024., 23648., 24128., 24608., 25088., 17988., 18472.,
      18956., 19440., 20040., 20528., 21016., 21504., 22124., 22616., 23108.,
      23600., 24240., 24736., 25232., 25728., 18388., 18888., 19388., 19888.,
      20504., 21008., 21512., 22016., 22652., 23160., 23668., 24176., 24832.,
      25344., 25856., 26368., 18788., 19304., 19820., 20336., 20968., 21488.,
      22008., 22528., 23180., 23704., 24228., 24752., 25424., 25952., 26480.,
      27008.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1660., 2299., 2338., 2377., 2416., 1468., 1492., 1996., 2767., 2806.,
      2845., 2884., 1756., 1780., 2364., 3273., 3318., 3363., 3408., 2067.,
      2094., 2760., 3813., 3858., 3903., 3948., 2391., 2418., 3156., 4353.,
      4398., 4443., 4488., 2715., 2742., 1204., 1597., 1618., 1639., 1660.,
      952.,  964.,  1396., 1849., 1870., 1891., 1912., 1096., 1108.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      370.,  380.,  390.,  400.,  410.,  420.,  430.,  490.,  500.,  510.,
      520.,  530.,  540.,  550.,  610.,  620.,  630.,  640.,  650.,  660.,
      670.,  730.,  740.,  750.,  760.,  770.,  780.,  790.,  850.,  860.,
      870.,  880.,  890.,  900.,  910.,  970.,  980.,  990.,  1000., 1010.,
      1020., 1030., 1090., 1100., 1110., 1120., 1130., 1140., 1150.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3104., 3320., 4280., 4598., 4352., 4676., 4424., 4754., 4496., 4832.,
      2716., 2936., 2760., 2984., 3728., 3992., 5144., 5534., 5216., 5612.,
      5288., 5690., 5360., 5768., 3244., 3512., 3288., 3560., 4404., 4728.,
      6069., 6546., 6150., 6636., 6231., 6726., 6312., 6816., 3804., 4134.,
      3852., 4188., 5124., 5520., 7041., 7626., 7122., 7716., 7203., 7806.,
      7284., 7896., 4380., 4782., 4428., 4836., 5844., 6312., 8013., 8706.,
      8094., 8796., 8175., 8886., 8256., 8976., 4956., 5430., 5004., 5484.,
      2144., 2408., 2804., 3194., 2840., 3236., 2876., 3278., 2912., 3320.,
      1636., 1904., 1656., 1928., 2480., 2792., 3236., 3698., 3272., 3740.,
      3308., 3782., 3344., 3824., 1876., 2192., 1896., 2216.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      632.,  740.,  648.,  760.,  664.,  780.,  680.,  800.,  696.,  820.,
      712.,  840.,  728.,  860.,  824.,  980.,  840.,  1000., 856.,  1020.,
      872.,  1040., 888.,  1060., 904.,  1080., 920.,  1100., 1016., 1220.,
      1032., 1240., 1048., 1260., 1064., 1280., 1080., 1300., 1096., 1320.,
      1112., 1340., 1208., 1460., 1224., 1480., 1240., 1500., 1256., 1520.,
      1272., 1540., 1288., 1560., 1304., 1580., 1400., 1700., 1416., 1720.,
      1432., 1740., 1448., 1760., 1464., 1780., 1480., 1800., 1496., 1820.,
      1592., 1940., 1608., 1960., 1624., 1980., 1640., 2000., 1656., 2020.,
      1672., 2040., 1688., 2060., 1784., 2180., 1800., 2200., 1816., 2220.,
      1832., 2240., 1848., 2260., 1864., 2280., 1880., 2300.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5992.,  6208.,  6424.,  6640.,  8242.,  8560.,  8878.,  9196.,  8380.,
      8704.,  9028.,  9352.,  8518.,  8848.,  9178.,  9508.,  8656.,  8992.,
      9328.,  9664.,  5212.,  5432.,  5652.,  5872.,  5296.,  5520.,  5744.,
      5968.,  7192.,  7456.,  7720.,  7984.,  9898.,  10288., 10678., 11068.,
      10036., 10432., 10828., 11224., 10174., 10576., 10978., 11380., 10312.,
      10720., 11128., 11536., 6220.,  6488.,  6756.,  7024.,  6304.,  6576.,
      6848.,  7120.,  8484.,  8808.,  9132.,  9456.,  11661., 12138., 12615.,
      13092., 11814., 12300., 12786., 13272., 11967., 12462., 12957., 13452.,
      12120., 12624., 13128., 13632., 7278.,  7608.,  7938.,  8268.,  7368.,
      7704.,  8040.,  8376.,  9852.,  10248., 10644., 11040., 13497., 14082.,
      14667., 15252., 13650., 14244., 14838., 15432., 13803., 14406., 15009.,
      15612., 13956., 14568., 15180., 15792., 8358.,  8760.,  9162.,  9564.,
      8448.,  8856.,  9264.,  9672.,  11220., 11688., 12156., 12624., 15333.,
      16026., 16719., 17412., 15486., 16188., 16890., 17592., 15639., 16350.,
      17061., 17772., 15792., 16512., 17232., 17952., 9438.,  9912.,  10386.,
      10860., 9528.,  10008., 10488., 10968., 4024.,  4288.,  4552.,  4816.,
      5218.,  5608.,  5998.,  6388.,  5284.,  5680.,  6076.,  6472.,  5350.,
      5752.,  6154.,  6556.,  5416.,  5824.,  6232.,  6640.,  3004.,  3272.,
      3540.,  3808.,  3040.,  3312.,  3584.,  3856.,  4648.,  4960.,  5272.,
      5584.,  6010.,  6472.,  6934.,  7396.,  6076.,  6544.,  7012.,  7480.,
      6142.,  6616.,  7090.,  7564.,  6208.,  6688.,  7168.,  7648.,  3436.,
      3752.,  4068.,  4384.,  3472.,  3792.,  4112.,  4432.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1156., 1264., 1372., 1480., 1184., 1296., 1408., 1520., 1212., 1328.,
      1444., 1560., 1240., 1360., 1480., 1600., 1268., 1392., 1516., 1640.,
      1296., 1424., 1552., 1680., 1324., 1456., 1588., 1720., 1492., 1648.,
      1804., 1960., 1520., 1680., 1840., 2000., 1548., 1712., 1876., 2040.,
      1576., 1744., 1912., 2080., 1604., 1776., 1948., 2120., 1632., 1808.,
      1984., 2160., 1660., 1840., 2020., 2200., 1828., 2032., 2236., 2440.,
      1856., 2064., 2272., 2480., 1884., 2096., 2308., 2520., 1912., 2128.,
      2344., 2560., 1940., 2160., 2380., 2600., 1968., 2192., 2416., 2640.,
      1996., 2224., 2452., 2680., 2164., 2416., 2668., 2920., 2192., 2448.,
      2704., 2960., 2220., 2480., 2740., 3000., 2248., 2512., 2776., 3040.,
      2276., 2544., 2812., 3080., 2304., 2576., 2848., 3120., 2332., 2608.,
      2884., 3160., 2500., 2800., 3100., 3400., 2528., 2832., 3136., 3440.,
      2556., 2864., 3172., 3480., 2584., 2896., 3208., 3520., 2612., 2928.,
      3244., 3560., 2640., 2960., 3280., 3600., 2668., 2992., 3316., 3640.,
      2836., 3184., 3532., 3880., 2864., 3216., 3568., 3920., 2892., 3248.,
      3604., 3960., 2920., 3280., 3640., 4000., 2948., 3312., 3676., 4040.,
      2976., 3344., 3712., 4080., 3004., 3376., 3748., 4120., 3172., 3568.,
      3964., 4360., 3200., 3600., 4000., 4400., 3228., 3632., 4036., 4440.,
      3256., 3664., 4072., 4480., 3284., 3696., 4108., 4520., 3312., 3728.,
      4144., 4560., 3340., 3760., 4180., 4600.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6156.,  6640.,  8488.,  9196.,  8632.,  9352.,  8776.,  9508.,  8920.,
      9664.,  5388.,  5872.,  5476.,  5968.,  7404.,  7984.,  10216., 11068.,
      10360., 11224., 10504., 11380., 10648., 11536., 6444.,  7024.,  6532.,
      7120.,  8748.,  9456.,  12057., 13092., 12219., 13272., 12381., 13452.,
      12543., 13632., 7560.,  8268.,  7656.,  8376.,  10188., 11040., 14001.,
      15252., 14163., 15432., 14325., 15612., 14487., 15792., 8712.,  9564.,
      8808.,  9672.,  11628., 12624., 15945., 17412., 16107., 17592., 16269.,
      17772., 16431., 17952., 9864.,  10860., 9960.,  10968., 4260.,  4816.,
      5572.,  6388.,  5644.,  6472.,  5716.,  6556.,  5788.,  6640.,  3252.,
      3808.,  3292.,  3856.,  4932.,  5584.,  6436.,  7396.,  6508.,  7480.,
      6580.,  7564.,  6652.,  7648.,  3732.,  4384.,  3772.,  4432.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1248., 1480., 1280., 1520., 1312., 1560., 1344., 1600., 1376., 1640.,
      1408., 1680., 1440., 1720., 1632., 1960., 1664., 2000., 1696., 2040.,
      1728., 2080., 1760., 2120., 1792., 2160., 1824., 2200., 2016., 2440.,
      2048., 2480., 2080., 2520., 2112., 2560., 2144., 2600., 2176., 2640.,
      2208., 2680., 2400., 2920., 2432., 2960., 2464., 3000., 2496., 3040.,
      2528., 3080., 2560., 3120., 2592., 3160., 2784., 3400., 2816., 3440.,
      2848., 3480., 2880., 3520., 2912., 3560., 2944., 3600., 2976., 3640.,
      3168., 3880., 3200., 3920., 3232., 3960., 3264., 4000., 3296., 4040.,
      3328., 4080., 3360., 4120., 3552., 4360., 3584., 4400., 3616., 4440.,
      3648., 4480., 3680., 4520., 3712., 4560., 3744., 4600.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11884., 12312., 12848., 13280., 16346., 16976., 17756., 18392., 16622.,
      17264., 18056., 18704., 16898., 17552., 18356., 19016., 17174., 17840.,
      18656., 19328., 10340., 10776., 11304., 11744., 10508., 10952., 11488.,
      11936., 14284., 14808., 15440., 15968., 19658., 20432., 21356., 22136.,
      19934., 20720., 21656., 22448., 20210., 21008., 21956., 22760., 20486.,
      21296., 22256., 23072., 12356., 12888., 13512., 14048., 12524., 13064.,
      13696., 14240., 16854., 17496., 18264., 18912., 23169., 24114., 25230.,
      26184., 23475., 24438., 25572., 26544., 23781., 24762., 25914., 26904.,
      24087., 25086., 26256., 27264., 14466., 15120., 15876., 16536., 14646.,
      15312., 16080., 16752., 19590., 20376., 21288., 22080., 26841., 28002.,
      29334., 30504., 27147., 28326., 29676., 30864., 27453., 28650., 30018.,
      31224., 27759., 28974., 30360., 31584., 16626., 17424., 18324., 19128.,
      16806., 17616., 18528., 19344., 22326., 23256., 24312., 25248., 30513.,
      31890., 33438., 34824., 30819., 32214., 33780., 35184., 31125., 32538.,
      34122., 35544., 31431., 32862., 34464., 35904., 18786., 19728., 20772.,
      21720., 18966., 19920., 20976., 21936., 7996.,  8520.,  9104.,  9632.,
      10370., 11144., 11996., 12776., 10502., 11288., 12152., 12944., 10634.,
      11432., 12308., 13112., 10766., 11576., 12464., 13280., 5972.,  6504.,
      7080.,  7616.,  6044.,  6584.,  7168.,  7712.,  9244.,  9864.,  10544.,
      11168., 11954., 12872., 13868., 14792., 12086., 13016., 14024., 14960.,
      12218., 13160., 14180., 15128., 12350., 13304., 14336., 15296., 6836.,
      7464.,  8136.,  8768.,  6908.,  7544.,  8224.,  8864.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2284., 2496., 2744., 2960., 2340., 2560., 2816., 3040., 2396., 2624.,
      2888., 3120., 2452., 2688., 2960., 3200., 2508., 2752., 3032., 3280.,
      2564., 2816., 3104., 3360., 2620., 2880., 3176., 3440., 2956., 3264.,
      3608., 3920., 3012., 3328., 3680., 4000., 3068., 3392., 3752., 4080.,
      3124., 3456., 3824., 4160., 3180., 3520., 3896., 4240., 3236., 3584.,
      3968., 4320., 3292., 3648., 4040., 4400., 3628., 4032., 4472., 4880.,
      3684., 4096., 4544., 4960., 3740., 4160., 4616., 5040., 3796., 4224.,
      4688., 5120., 3852., 4288., 4760., 5200., 3908., 4352., 4832., 5280.,
      3964., 4416., 4904., 5360., 4300., 4800., 5336., 5840., 4356., 4864.,
      5408., 5920., 4412., 4928., 5480., 6000., 4468., 4992., 5552., 6080.,
      4524., 5056., 5624., 6160., 4580., 5120., 5696., 6240., 4636., 5184.,
      5768., 6320., 4972., 5568., 6200., 6800., 5028., 5632., 6272., 6880.,
      5084., 5696., 6344., 6960., 5140., 5760., 6416., 7040., 5196., 5824.,
      6488., 7120., 5252., 5888., 6560., 7200., 5308., 5952., 6632., 7280.,
      5644., 6336., 7064., 7760., 5700., 6400., 7136., 7840., 5756., 6464.,
      7208., 7920., 5812., 6528., 7280., 8000., 5868., 6592., 7352., 8080.,
      5924., 6656., 7424., 8160., 5980., 6720., 7496., 8240., 6316., 7104.,
      7928., 8720., 6372., 7168., 8000., 8800., 6428., 7232., 8072., 8880.,
      6484., 7296., 8144., 8960., 6540., 7360., 8216., 9040., 6596., 7424.,
      8288., 9120., 6652., 7488., 8360., 9200.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23340., 23768., 24196., 24624., 25264., 25696., 26128., 26560., 32062.,
      32692., 33322., 33952., 34876., 35512., 36148., 36784., 32602., 33244.,
      33886., 34528., 35464., 36112., 36760., 37408., 33142., 33796., 34450.,
      35104., 36052., 36712., 37372., 38032., 33682., 34348., 35014., 35680.,
      36640., 37312., 37984., 38656., 20244., 20680., 21116., 21552., 22168.,
      22608., 23048., 23488., 20572., 21016., 21460., 21904., 22528., 22976.,
      23424., 23872., 28044., 28568., 29092., 29616., 30352., 30880., 31408.,
      31936., 38542., 39316., 40090., 40864., 41932., 42712., 43492., 44272.,
      39082., 39868., 40654., 41440., 42520., 43312., 44104., 44896., 39622.,
      40420., 41218., 42016., 43108., 43912., 44716., 45520., 40162., 40972.,
      41782., 42592., 43696., 44512., 45328., 46144., 24180., 24712., 25244.,
      25776., 26488., 27024., 27560., 28096., 24508., 25048., 25588., 26128.,
      26848., 27392., 27936., 28480., 33066., 33708., 34350., 34992., 35880.,
      36528., 37176., 37824., 45393., 46338., 47283., 48228., 49506., 50460.,
      51414., 52368., 45987., 46950., 47913., 48876., 50172., 51144., 52116.,
      53088., 46581., 47562., 48543., 49524., 50838., 51828., 52818., 53808.,
      47175., 48174., 49173., 50172., 51504., 52512., 53520., 54528., 28278.,
      28932., 29586., 30240., 31092., 31752., 32412., 33072., 28626., 29292.,
      29958., 30624., 31488., 32160., 32832., 33504., 38394., 39180., 39966.,
      40752., 41784., 42576., 43368., 44160., 52521., 53682., 54843., 56004.,
      57498., 58668., 59838., 61008., 53115., 54294., 55473., 56652., 58164.,
      59352., 60540., 61728., 53709., 54906., 56103., 57300., 58830., 60036.,
      61242., 62448., 54303., 55518., 56733., 57948., 59496., 60720., 61944.,
      63168., 32454., 33252., 34050., 34848., 35844., 36648., 37452., 38256.,
      32802., 33612., 34422., 35232., 36240., 37056., 37872., 38688., 43722.,
      44652., 45582., 46512., 47688., 48624., 49560., 50496., 43009., 44130.,
      45251., 46372., 47826., 48956., 50086., 51216., 43603., 44742., 45881.,
      47020., 48492., 49640., 50788., 51936., 44197., 45354., 46511., 47668.,
      49158., 50324., 51490., 52656., 44791., 45966., 47141., 48316., 49824.,
      51008., 52192., 53376., 22038., 22724., 23410., 24096., 24980., 25672.,
      26364., 27056., 22386., 23084., 23782., 24480., 25376., 26080., 26784.,
      27488., 15468., 15992., 16516., 17040., 17680., 18208., 18736., 19264.,
      19966., 20740., 21514., 22288., 23212., 23992., 24772., 25552., 20218.,
      21004., 21790., 22576., 23512., 24304., 25096., 25888., 20470., 21268.,
      22066., 22864., 23812., 24616., 25420., 26224., 20722., 21532., 22342.,
      23152., 24112., 24928., 25744., 26560., 11412., 11944., 12476., 13008.,
      13624., 14160., 14696., 15232., 11548., 12088., 12628., 13168., 13792.,
      14336., 14880., 15424., 17868., 18488., 19108., 19728., 20464., 21088.,
      21712., 22336., 22990., 23908., 24826., 25744., 26812., 27736., 28660.,
      29584., 23242., 24172., 25102., 26032., 27112., 28048., 28984., 29920.,
      23494., 24436., 25378., 26320., 27412., 28360., 29308., 30256., 23746.,
      24700., 25654., 26608., 27712., 28672., 29632., 30592., 13044., 13672.,
      14300., 14928., 15640., 16272., 16904., 17536., 13180., 13816., 14452.,
      15088., 15808., 16448., 17088., 17728.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4356.,  4568.,  4780.,  4992.,  5272.,  5488.,  5704.,  5920.,  4460.,
      4680.,  4900.,  5120.,  5408.,  5632.,  5856.,  6080.,  4564.,  4792.,
      5020.,  5248.,  5544.,  5776.,  6008.,  6240.,  4668.,  4904.,  5140.,
      5376.,  5680.,  5920.,  6160.,  6400.,  4772.,  5016.,  5260.,  5504.,
      5816.,  6064.,  6312.,  6560.,  4876.,  5128.,  5380.,  5632.,  5952.,
      6208.,  6464.,  6720.,  4980.,  5240.,  5500.,  5760.,  6088.,  6352.,
      6616.,  6880.,  5604.,  5912.,  6220.,  6528.,  6904.,  7216.,  7528.,
      7840.,  5708.,  6024.,  6340.,  6656.,  7040.,  7360.,  7680.,  8000.,
      5812.,  6136.,  6460.,  6784.,  7176.,  7504.,  7832.,  8160.,  5916.,
      6248.,  6580.,  6912.,  7312.,  7648.,  7984.,  8320.,  6020.,  6360.,
      6700.,  7040.,  7448.,  7792.,  8136.,  8480.,  6124.,  6472.,  6820.,
      7168.,  7584.,  7936.,  8288.,  8640.,  6228.,  6584.,  6940.,  7296.,
      7720.,  8080.,  8440.,  8800.,  6852.,  7256.,  7660.,  8064.,  8536.,
      8944.,  9352.,  9760.,  6956.,  7368.,  7780.,  8192.,  8672.,  9088.,
      9504.,  9920.,  7060.,  7480.,  7900.,  8320.,  8808.,  9232.,  9656.,
      10080., 7164.,  7592.,  8020.,  8448.,  8944.,  9376.,  9808.,  10240.,
      7268.,  7704.,  8140.,  8576.,  9080.,  9520.,  9960.,  10400., 7372.,
      7816.,  8260.,  8704.,  9216.,  9664.,  10112., 10560., 7476.,  7928.,
      8380.,  8832.,  9352.,  9808.,  10264., 10720., 8100.,  8600.,  9100.,
      9600.,  10168., 10672., 11176., 11680., 8204.,  8712.,  9220.,  9728.,
      10304., 10816., 11328., 11840., 8308.,  8824.,  9340.,  9856.,  10440.,
      10960., 11480., 12000., 8412.,  8936.,  9460.,  9984.,  10576., 11104.,
      11632., 12160., 8516.,  9048.,  9580.,  10112., 10712., 11248., 11784.,
      12320., 8620.,  9160.,  9700.,  10240., 10848., 11392., 11936., 12480.,
      8724.,  9272.,  9820.,  10368., 10984., 11536., 12088., 12640., 9348.,
      9944.,  10540., 11136., 11800., 12400., 13000., 13600., 9452.,  10056.,
      10660., 11264., 11936., 12544., 13152., 13760., 9556.,  10168., 10780.,
      11392., 12072., 12688., 13304., 13920., 9660.,  10280., 10900., 11520.,
      12208., 12832., 13456., 14080., 9764.,  10392., 11020., 11648., 12344.,
      12976., 13608., 14240., 9868.,  10504., 11140., 11776., 12480., 13120.,
      13760., 14400., 9972.,  10616., 11260., 11904., 12616., 13264., 13912.,
      14560., 10596., 11288., 11980., 12672., 13432., 14128., 14824., 15520.,
      10700., 11400., 12100., 12800., 13568., 14272., 14976., 15680., 10804.,
      11512., 12220., 12928., 13704., 14416., 15128., 15840., 10908., 11624.,
      12340., 13056., 13840., 14560., 15280., 16000., 11012., 11736., 12460.,
      13184., 13976., 14704., 15432., 16160., 11116., 11848., 12580., 13312.,
      14112., 14848., 15584., 16320., 11220., 11960., 12700., 13440., 14248.,
      14992., 15736., 16480., 11844., 12632., 13420., 14208., 15064., 15856.,
      16648., 17440., 11948., 12744., 13540., 14336., 15200., 16000., 16800.,
      17600., 12052., 12856., 13660., 14464., 15336., 16144., 16952., 17760.,
      12156., 12968., 13780., 14592., 15472., 16288., 17104., 17920., 12260.,
      13080., 13900., 14720., 15608., 16432., 17256., 18080., 12364., 13192.,
      14020., 14848., 15744., 16576., 17408., 18240., 12468., 13304., 14140.,
      14976., 15880., 16720., 17560., 18400.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23668., 24624., 25588., 26560., 32554., 33952., 35362., 36784., 33106.,
      34528., 35962., 37408., 33658., 35104., 36562., 38032., 34210., 35680.,
      37162., 38656., 20596., 21552., 22516., 23488., 20932., 21904., 22884.,
      23872., 28468., 29616., 30772., 31936., 39178., 40864., 42562., 44272.,
      39730., 41440., 43162., 44896., 40282., 42016., 43762., 45520., 40834.,
      42592., 44362., 46144., 24628., 25776., 26932., 28096., 24964., 26128.,
      27300., 28480., 33594., 34992., 36402., 37824., 46185., 48228., 50289.,
      52368., 46797., 48876., 50973., 53088., 47409., 49524., 51657., 53808.,
      48021., 50172., 52341., 54528., 28842., 30240., 31650., 33072., 29202.,
      30624., 32058., 33504., 39066., 40752., 42450., 44160., 53529., 56004.,
      58497., 61008., 54141., 56652., 59181., 61728., 54753., 57300., 59865.,
      62448., 55365., 57948., 60549., 63168., 33162., 34848., 36546., 38256.,
      33522., 35232., 36954., 38688., 44538., 46512., 48498., 50496., 43977.,
      46372., 48785., 51216., 44589., 47020., 49469., 51936., 45201., 47668.,
      50153., 52656., 45813., 48316., 50837., 53376., 22634., 24096., 25570.,
      27056., 22994., 24480., 25978., 27488., 15940., 17040., 18148., 19264.,
      20674., 22288., 23914., 25552., 20938., 22576., 24226., 25888., 21202.,
      22864., 24538., 26224., 21466., 23152., 24850., 26560., 11908., 13008.,
      14116., 15232., 12052., 13168., 14292., 15424., 18436., 19728., 21028.,
      22336., 23842., 25744., 27658., 29584., 24106., 26032., 27970., 29920.,
      24370., 26320., 28282., 30256., 24634., 26608., 28594., 30592., 13636.,
      14928., 16228., 17536., 13780., 15088., 16404., 17728.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4540.,  4992.,  5452.,  5920.,  4652.,  5120.,  5596.,  6080.,  4764.,
      5248.,  5740.,  6240.,  4876.,  5376.,  5884.,  6400.,  4988.,  5504.,
      6028.,  6560.,  5100.,  5632.,  6172.,  6720.,  5212.,  5760.,  6316.,
      6880.,  5884.,  6528.,  7180.,  7840.,  5996.,  6656.,  7324.,  8000.,
      6108.,  6784.,  7468.,  8160.,  6220.,  6912.,  7612.,  8320.,  6332.,
      7040.,  7756.,  8480.,  6444.,  7168.,  7900.,  8640.,  6556.,  7296.,
      8044.,  8800.,  7228.,  8064.,  8908.,  9760.,  7340.,  8192.,  9052.,
      9920.,  7452.,  8320.,  9196.,  10080., 7564.,  8448.,  9340.,  10240.,
      7676.,  8576.,  9484.,  10400., 7788.,  8704.,  9628.,  10560., 7900.,
      8832.,  9772.,  10720., 8572.,  9600.,  10636., 11680., 8684.,  9728.,
      10780., 11840., 8796.,  9856.,  10924., 12000., 8908.,  9984.,  11068.,
      12160., 9020.,  10112., 11212., 12320., 9132.,  10240., 11356., 12480.,
      9244.,  10368., 11500., 12640., 9916.,  11136., 12364., 13600., 10028.,
      11264., 12508., 13760., 10140., 11392., 12652., 13920., 10252., 11520.,
      12796., 14080., 10364., 11648., 12940., 14240., 10476., 11776., 13084.,
      14400., 10588., 11904., 13228., 14560., 11260., 12672., 14092., 15520.,
      11372., 12800., 14236., 15680., 11484., 12928., 14380., 15840., 11596.,
      13056., 14524., 16000., 11708., 13184., 14668., 16160., 11820., 13312.,
      14812., 16320., 11932., 13440., 14956., 16480., 12604., 14208., 15820.,
      17440., 12716., 14336., 15964., 17600., 12828., 14464., 16108., 17760.,
      12940., 14592., 16252., 17920., 13052., 14720., 16396., 18080., 13164.,
      14848., 16540., 18240., 13276., 14976., 16684., 18400.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15252., 15592., 16136., 16480., 17036., 17384., 17952., 18304., 20078.,
      20564., 21332., 21824., 22610., 23108., 23912., 24416., 21158., 21668.,
      22460., 22976., 23786., 24308., 25136., 25664., 22238., 22772., 23588.,
      24128., 24962., 25508., 26360., 26912., 23318., 23876., 24716., 25280.,
      26138., 26708., 27584., 28160., 13188., 13544., 14072., 14432., 14972.,
      15336., 15888., 16256., 13844., 14216., 14760., 15136., 15692., 16072.,
      16640., 17024., 24660., 25192., 25928., 26464., 27212., 27752., 28512.,
      29056., 33038., 33812., 34868., 35648., 36722., 37508., 38600., 39392.,
      34118., 34916., 35996., 36800., 37898., 38708., 39824., 40640., 35198.,
      36020., 37124., 37952., 39074., 39908., 41048., 41888., 36278., 37124.,
      38252., 39104., 40250., 41108., 42272., 43136., 21060., 21608., 22328.,
      22880., 23612., 24168., 24912., 25472., 21716., 22280., 23016., 23584.,
      24332., 24904., 25664., 26240., 34678., 35444., 36444., 37216., 38234.,
      39012., 40048., 40832., 46713., 47826., 49254., 50376., 51831., 52962.,
      54444., 55584., 47901., 49050., 50514., 51672., 53163., 54330., 55848.,
      57024., 49089., 50274., 51774., 52968., 54495., 55698., 57252., 58464.,
      50277., 51498., 53034., 54264., 55827., 57066., 58656., 59904., 29246.,
      30036., 31012., 31808., 32802., 33604., 34616., 35424., 29942., 30756.,
      31756., 32576., 33594., 34420., 35456., 36288., 34838., 35636., 36668.,
      37472., 38522., 39332., 40400., 41216., 42025., 43058., 44406., 45448.,
      46823., 47874., 49276., 50336., 43213., 44282., 45666., 46744., 48155.,
      49242., 50680., 51776., 44401., 45506., 46926., 48040., 49487., 50610.,
      52084., 53216., 45589., 46730., 48186., 49336., 50819., 51978., 53488.,
      54656., 22750., 23316., 24068., 24640., 25410., 25988., 26776., 27360.,
      23446., 24036., 24812., 25408., 26202., 26804., 27616., 28224., 37046.,
      37876., 38940., 39776., 40858., 41700., 42800., 43648., 33241., 34194.,
      35462., 36424., 37719., 38690., 40012., 40992., 34429., 35418., 36722.,
      37720., 39051., 40058., 41416., 42432., 35617., 36642., 37982., 39016.,
      40383., 41426., 42820., 43872., 36805., 37866., 39242., 40312., 41715.,
      42794., 44224., 45312., 16510., 17108., 17892., 18496., 19298., 19908.,
      20728., 21344., 17206., 17828., 18636., 19264., 20090., 20724., 21568.,
      22208., 11892., 12424., 13064., 13600., 14252., 14792., 15456., 16000.,
      14462., 15236., 16148., 16928., 17858., 18644., 19592., 20384., 14966.,
      15764., 16700., 17504., 18458., 19268., 20240., 21056., 15470., 16292.,
      17252., 18080., 19058., 19892., 20888., 21728., 15974., 16820., 17804.,
      18656., 19658., 20516., 21536., 22400., 7908.,  8456.,  9080.,  9632.,
      10268., 10824., 11472., 12032., 8180.,  8744.,  9384.,  9952.,  10604.,
      11176., 11840., 12416., 16692., 17416., 18248., 18976., 19820., 20552.,
      21408., 22144., 20510., 21572., 22772., 23840., 25058., 26132., 27368.,
      28448., 21014., 22100., 23324., 24416., 25658., 26756., 28016., 29120.,
      21518., 22628., 23876., 24992., 26258., 27380., 28664., 29792., 22022.,
      23156., 24428., 25568., 26858., 28004., 29312., 30464., 11172., 11912.,
      12728., 13472., 14300., 15048., 15888., 16640., 11444., 12200., 13032.,
      13792., 14636., 15400., 16256., 17024.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8660.,  9080.,  9560.,  9984.,  10476., 10904., 11408., 11840., 8868.,
      9304.,  9800.,  10240., 10748., 11192., 11712., 12160., 9076.,  9528.,
      10040., 10496., 11020., 11480., 12016., 12480., 9284.,  9752.,  10280.,
      10752., 11292., 11768., 12320., 12800., 9492.,  9976.,  10520., 11008.,
      11564., 12056., 12624., 13120., 9700.,  10200., 10760., 11264., 11836.,
      12344., 12928., 13440., 9908.,  10424., 11000., 11520., 12108., 12632.,
      13232., 13760., 11156., 11768., 12440., 13056., 13740., 14360., 15056.,
      15680., 11364., 11992., 12680., 13312., 14012., 14648., 15360., 16000.,
      11572., 12216., 12920., 13568., 14284., 14936., 15664., 16320., 11780.,
      12440., 13160., 13824., 14556., 15224., 15968., 16640., 11988., 12664.,
      13400., 14080., 14828., 15512., 16272., 16960., 12196., 12888., 13640.,
      14336., 15100., 15800., 16576., 17280., 12404., 13112., 13880., 14592.,
      15372., 16088., 16880., 17600., 13652., 14456., 15320., 16128., 17004.,
      17816., 18704., 19520., 13860., 14680., 15560., 16384., 17276., 18104.,
      19008., 19840., 14068., 14904., 15800., 16640., 17548., 18392., 19312.,
      20160., 14276., 15128., 16040., 16896., 17820., 18680., 19616., 20480.,
      14484., 15352., 16280., 17152., 18092., 18968., 19920., 20800., 14692.,
      15576., 16520., 17408., 18364., 19256., 20224., 21120., 14900., 15800.,
      16760., 17664., 18636., 19544., 20528., 21440., 16148., 17144., 18200.,
      19200., 20268., 21272., 22352., 23360., 16356., 17368., 18440., 19456.,
      20540., 21560., 22656., 23680., 16564., 17592., 18680., 19712., 20812.,
      21848., 22960., 24000., 16772., 17816., 18920., 19968., 21084., 22136.,
      23264., 24320., 16980., 18040., 19160., 20224., 21356., 22424., 23568.,
      24640., 17188., 18264., 19400., 20480., 21628., 22712., 23872., 24960.,
      17396., 18488., 19640., 20736., 21900., 23000., 24176., 25280., 18644.,
      19832., 21080., 22272., 23532., 24728., 26000., 27200., 18852., 20056.,
      21320., 22528., 23804., 25016., 26304., 27520., 19060., 20280., 21560.,
      22784., 24076., 25304., 26608., 27840., 19268., 20504., 21800., 23040.,
      24348., 25592., 26912., 28160., 19476., 20728., 22040., 23296., 24620.,
      25880., 27216., 28480., 19684., 20952., 22280., 23552., 24892., 26168.,
      27520., 28800., 19892., 21176., 22520., 23808., 25164., 26456., 27824.,
      29120., 21140., 22520., 23960., 25344., 26796., 28184., 29648., 31040.,
      21348., 22744., 24200., 25600., 27068., 28472., 29952., 31360., 21556.,
      22968., 24440., 25856., 27340., 28760., 30256., 31680., 21764., 23192.,
      24680., 26112., 27612., 29048., 30560., 32000., 21972., 23416., 24920.,
      26368., 27884., 29336., 30864., 32320., 22180., 23640., 25160., 26624.,
      28156., 29624., 31168., 32640., 22388., 23864., 25400., 26880., 28428.,
      29912., 31472., 32960., 23636., 25208., 26840., 28416., 30060., 31640.,
      33296., 34880., 23844., 25432., 27080., 28672., 30332., 31928., 33600.,
      35200., 24052., 25656., 27320., 28928., 30604., 32216., 33904., 35520.,
      24260., 25880., 27560., 29184., 30876., 32504., 34208., 35840., 24468.,
      26104., 27800., 29440., 31148., 32792., 34512., 36160., 24676., 26328.,
      28040., 29696., 31420., 33080., 34816., 36480., 24884., 26552., 28280.,
      29952., 31692., 33368., 35120., 36800.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22356., 22696., 23036., 23376., 23992., 24336., 24680., 25024., 25660.,
      26008., 26356., 26704., 27360., 27712., 28064., 28416., 20982., 21340.,
      21698., 22056., 22844., 23208., 23572., 23936., 24754., 25124., 25494.,
      25864., 26712., 27088., 27464., 27840., 22606., 22988., 23370., 23752.,
      24564., 24952., 25340., 25728., 26570., 26964., 27358., 27752., 28624.,
      29024., 29424., 29824., 24230., 24636., 25042., 25448., 26284., 26696.,
      27108., 27520., 28386., 28804., 29222., 29640., 30536., 30960., 31384.,
      31808., 25854., 26284., 26714., 27144., 28004., 28440., 28876., 29312.,
      30202., 30644., 31086., 31528., 32448., 32896., 33344., 33792., 17700.,
      17928., 18156., 18384., 18952., 19184., 19416., 19648., 20236., 20472.,
      20708., 20944., 21552., 21792., 22032., 22272., 18996., 19240., 19484.,
      19728., 20312., 20560., 20808., 21056., 21660., 21912., 22164., 22416.,
      23040., 23296., 23552., 23808., 16148., 16424., 16700., 16976., 17528.,
      17808., 18088., 18368., 18940., 19224., 19508., 19792., 20384., 20672.,
      20960., 21248., 25878., 26268., 26658., 27048., 27868., 28264., 28660.,
      29056., 29906., 30308., 30710., 31112., 31992., 32400., 32808., 33216.,
      27502., 27916., 28330., 28744., 29588., 30008., 30428., 30848., 31722.,
      32148., 32574., 33000., 33904., 34336., 34768., 35200., 29126., 29564.,
      30002., 30440., 31308., 31752., 32196., 32640., 33538., 33988., 34438.,
      34888., 35816., 36272., 36728., 37184., 30750., 31212., 31674., 32136.,
      33028., 33496., 33964., 34432., 35354., 35828., 36302., 36776., 37728.,
      38208., 38688., 39168., 26980., 27272., 27564., 27856., 28488., 28784.,
      29080., 29376., 30028., 30328., 30628., 30928., 31600., 31904., 32208.,
      32512., 28276., 28584., 28892., 29200., 29848., 30160., 30472., 30784.,
      31452., 31768., 32084., 32400., 33088., 33408., 33728., 34048., 15214.,
      15468., 15722., 15976., 16564., 16824., 17084., 17344., 17962., 18228.,
      18494., 18760., 19408., 19680., 19952., 20224., 19737., 20082., 20427.,
      20772., 21610., 21964., 22318., 22672., 23555., 23918., 24281., 24644.,
      25572., 25944., 26316., 26688., 21565., 21946., 22327., 22708., 23582.,
      23972., 24362., 24752., 25671., 26070., 26469., 26868., 27832., 28240.,
      28648., 29056., 23393., 23810., 24227., 24644., 25554., 25980., 26406.,
      26832., 27787., 28222., 28657., 29092., 30092., 30536., 30980., 31424.,
      25221., 25674., 26127., 26580., 27526., 27988., 28450., 28912., 29903.,
      30374., 30845., 31316., 32352., 32832., 33312., 33792., 16230., 16508.,
      16786., 17064., 17708., 17992., 18276., 18560., 19234., 19524., 19814.,
      20104., 20808., 21104., 21400., 21696., 17598., 17900., 18202., 18504.,
      19172., 19480., 19788., 20096., 20794., 21108., 21422., 21736., 22464.,
      22784., 23104., 23424., 19726., 20140., 20554., 20968., 21716., 22136.,
      22556., 22976., 23754., 24180., 24606., 25032., 25840., 26272., 26704.,
      27136., 22985., 23506., 24027., 24548., 25562., 26092., 26622., 27152.,
      28211., 28750., 29289., 29828., 30932., 31480., 32028., 32576., 24813.,
      25370., 25927., 26484., 27534., 28100., 28666., 29232., 30327., 30902.,
      31477., 32052., 33192., 33776., 34360., 34944., 26641., 27234., 27827.,
      28420., 29506., 30108., 30710., 31312., 32443., 33054., 33665., 34276.,
      35452., 36072., 36692., 37312., 28469., 29098., 29727., 30356., 31478.,
      32116., 32754., 33392., 34559., 35206., 35853., 36500., 37712., 38368.,
      39024., 39680., 18054., 18364., 18674., 18984., 19660., 19976., 20292.,
      20608., 21314., 21636., 21958., 22280., 23016., 23344., 23672., 24000.,
      19422., 19756., 20090., 20424., 21124., 21464., 21804., 22144., 22874.,
      23220., 23566., 23912., 24672., 25024., 25376., 25728., 26286., 26860.,
      27434., 28008., 28916., 29496., 30076., 30656., 31594., 32180., 32766.,
      33352., 34320., 34912., 35504., 36096., 34297., 34866., 35435., 36004.,
      37066., 37644., 38222., 38800., 39907., 40494., 41081., 41668., 42820.,
      43416., 44012., 44608., 36125., 36730., 37335., 37940., 39038., 39652.,
      40266., 40880., 42023., 42646., 43269., 43892., 45080., 45712., 46344.,
      46976., 37953., 38594., 39235., 39876., 41010., 41660., 42310., 42960.,
      44139., 44798., 45457., 46116., 47340., 48008., 48676., 49344., 39781.,
      40458., 41135., 41812., 42982., 43668., 44354., 45040., 46255., 46950.,
      47645., 48340., 49600., 50304., 51008., 51712., 17830., 18172., 18514.,
      18856., 19564., 19912., 20260., 20608., 21346., 21700., 22054., 22408.,
      23176., 23536., 23896., 24256., 19198., 19564., 19930., 20296., 21028.,
      21400., 21772., 22144., 22906., 23284., 23662., 24040., 24832., 25216.,
      25600., 25984., 16852., 17128., 17404., 17680., 18168., 18448., 18728.,
      19008., 19516., 19800., 20084., 20368., 20896., 21184., 21472., 21760.,
      21622., 22012., 22402., 22792., 23452., 23848., 24244., 24640., 25330.,
      25732., 26134., 26536., 27256., 27664., 28072., 28480., 22606., 23020.,
      23434., 23848., 24532., 24952., 25372., 25792., 26506., 26932., 27358.,
      27784., 28528., 28960., 29392., 29824., 23590., 24028., 24466., 24904.,
      25612., 26056., 26500., 26944., 27682., 28132., 28582., 29032., 29800.,
      30256., 30712., 31168., 24574., 25036., 25498., 25960., 26692., 27160.,
      27628., 28096., 28858., 29332., 29806., 30280., 31072., 31552., 32032.,
      32512., 12964., 13256., 13548., 13840., 14280., 14576., 14872., 15168.,
      15628., 15928., 16228., 16528., 17008., 17312., 17616., 17920., 13492.,
      13800., 14108., 14416., 14872., 15184., 15496., 15808., 16284., 16600.,
      16916., 17232., 17728., 18048., 18368., 18688., 7572.,  7784.,  7996.,
      8208.,  8632.,  8848.,  9064.,  9280.,  9724.,  9944.,  10164., 10384.,
      10848., 11072., 11296., 11520., 8470.,  8764.,  9058.,  9352.,  9916.,
      10216., 10516., 10816., 11410., 11716., 12022., 12328., 12952., 13264.,
      13576., 13888., 9454.,  9772.,  10090., 10408., 10996., 11320., 11644.,
      11968., 12586., 12916., 13246., 13576., 14224., 14560., 14896., 15232.,
      10438., 10780., 11122., 11464., 12076., 12424., 12772., 13120., 13762.,
      14116., 14470., 14824., 15496., 15856., 16216., 16576., 11422., 11788.,
      12154., 12520., 13156., 13528., 13900., 14272., 14938., 15316., 15694.,
      16072., 16768., 17152., 17536., 17920., 4708.,  4936.,  5164.,  5392.,
      5768.,  6000.,  6232.,  6464.,  6860.,  7096.,  7332.,  7568.,  7984.,
      8224.,  8464.,  8704.,  5236.,  5480.,  5724.,  5968.,  6360.,  6608.,
      6856.,  7104.,  7516.,  7768.,  8020.,  8272.,  8704.,  8960.,  9216.,
      9472.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16900., 17320., 17740., 18160., 18696., 19120., 19544., 19968., 20524.,
      20952., 21380., 21808., 22384., 22816., 23248., 23680., 17300., 17736.,
      18172., 18608., 19160., 19600., 20040., 20480., 21052., 21496., 21940.,
      22384., 22976., 23424., 23872., 24320., 17700., 18152., 18604., 19056.,
      19624., 20080., 20536., 20992., 21580., 22040., 22500., 22960., 23568.,
      24032., 24496., 24960., 18100., 18568., 19036., 19504., 20088., 20560.,
      21032., 21504., 22108., 22584., 23060., 23536., 24160., 24640., 25120.,
      25600., 18500., 18984., 19468., 19952., 20552., 21040., 21528., 22016.,
      22636., 23128., 23620., 24112., 24752., 25248., 25744., 26240., 18900.,
      19400., 19900., 20400., 21016., 21520., 22024., 22528., 23164., 23672.,
      24180., 24688., 25344., 25856., 26368., 26880., 19300., 19816., 20332.,
      20848., 21480., 22000., 22520., 23040., 23692., 24216., 24740., 25264.,
      25936., 26464., 26992., 27520., 9156.,  9512.,  9868.,  10224., 10696.,
      11056., 11416., 11776., 12268., 12632., 12996., 13360., 13872., 14240.,
      14608., 14976., 9556.,  9928.,  10300., 10672., 11160., 11536., 11912.,
      12288., 12796., 13176., 13556., 13936., 14464., 14848., 15232., 15616.,
      9956.,  10344., 10732., 11120., 11624., 12016., 12408., 12800., 13324.,
      13720., 14116., 14512., 15056., 15456., 15856., 16256., 10356., 10760.,
      11164., 11568., 12088., 12496., 12904., 13312., 13852., 14264., 14676.,
      15088., 15648., 16064., 16480., 16896., 2308.,  2472.,  2636.,  2800.,
      3080.,  3248.,  3416.,  3584.,  3884.,  4056.,  4228.,  4400.,  4720.,
      4896.,  5072.,  5248.,  2708.,  2888.,  3068.,  3248.,  3544.,  3728.,
      3912.,  4096.,  4412.,  4600.,  4788.,  4976.,  5312.,  5504.,  5696.,
      5888.,  3108.,  3304.,  3500.,  3696.,  4008.,  4208.,  4408.,  4608.,
      4940.,  5144.,  5348.,  5552.,  5904.,  6112.,  6320.,  6528.,  5508.,
      5800.,  6092.,  6384.,  6792.,  7088.,  7384.,  7680.,  8108.,  8408.,
      8708.,  9008.,  9456.,  9760.,  10064., 10368., 5908.,  6216.,  6524.,
      6832.,  7256.,  7568.,  7880.,  8192.,  8636.,  8952.,  9268.,  9584.,
      10048., 10368., 10688., 11008., 6308.,  6632.,  6956.,  7280.,  7720.,
      8048.,  8376.,  8704.,  9164.,  9496.,  9828.,  10160., 10640., 10976.,
      11312., 11648., 6708.,  7048.,  7388.,  7728.,  8184.,  8528.,  8872.,
      9216.,  9692.,  10040., 10388., 10736., 11232., 11584., 11936., 12288.,
      7108.,  7464.,  7820.,  8176.,  8648.,  9008.,  9368.,  9728.,  10220.,
      10584., 10948., 11312., 11824., 12192., 12560., 12928., 7508.,  7880.,
      8252.,  8624.,  9112.,  9488.,  9864.,  10240., 10748., 11128., 11508.,
      11888., 12416., 12800., 13184., 13568., 7908.,  8296.,  8684.,  9072.,
      9576.,  9968.,  10360., 10752., 11276., 11672., 12068., 12464., 13008.,
      13408., 13808., 14208., 10308., 10792., 11276., 11760., 12360., 12848.,
      13336., 13824., 14444., 14936., 15428., 15920., 16560., 17056., 17552.,
      18048., 10708., 11208., 11708., 12208., 12824., 13328., 13832., 14336.,
      14972., 15480., 15988., 16496., 17152., 17664., 18176., 18688., 11108.,
      11624., 12140., 12656., 13288., 13808., 14328., 14848., 15500., 16024.,
      16548., 17072., 17744., 18272., 18800., 19328., 11508., 12040., 12572.,
      13104., 13752., 14288., 14824., 15360., 16028., 16568., 17108., 17648.,
      18336., 18880., 19424., 19968., 11908., 12456., 13004., 13552., 14216.,
      14768., 15320., 15872., 16556., 17112., 17668., 18224., 18928., 19488.,
      20048., 20608., 12308., 12872., 13436., 14000., 14680., 15248., 15816.,
      16384., 17084., 17656., 18228., 18800., 19520., 20096., 20672., 21248.,
      12708., 13288., 13868., 14448., 15144., 15728., 16312., 16896., 17612.,
      18200., 18788., 19376., 20112., 20704., 21296., 21888., 15108., 15784.,
      16460., 17136., 17928., 18608., 19288., 19968., 20780., 21464., 22148.,
      22832., 23664., 24352., 25040., 25728., 15508., 16200., 16892., 17584.,
      18392., 19088., 19784., 20480., 21308., 22008., 22708., 23408., 24256.,
      24960., 25664., 26368., 15908., 16616., 17324., 18032., 18856., 19568.,
      20280., 20992., 21836., 22552., 23268., 23984., 24848., 25568., 26288.,
      27008., 16308., 17032., 17756., 18480., 19320., 20048., 20776., 21504.,
      22364., 23096., 23828., 24560., 25440., 26176., 26912., 27648., 16708.,
      17448., 18188., 18928., 19784., 20528., 21272., 22016., 22892., 23640.,
      24388., 25136., 26032., 26784., 27536., 28288., 17108., 17864., 18620.,
      19376., 20248., 21008., 21768., 22528., 23420., 24184., 24948., 25712.,
      26624., 27392., 28160., 28928., 17508., 18280., 19052., 19824., 20712.,
      21488., 22264., 23040., 23948., 24728., 25508., 26288., 27216., 28000.,
      28784., 29568., 15556., 16168., 16780., 17392., 18120., 18736., 19352.,
      19968., 20716., 21336., 21956., 22576., 23344., 23968., 24592., 25216.,
      15956., 16584., 17212., 17840., 18584., 19216., 19848., 20480., 21244.,
      21880., 22516., 23152., 23936., 24576., 25216., 25856., 16356., 17000.,
      17644., 18288., 19048., 19696., 20344., 20992., 21772., 22424., 23076.,
      23728., 24528., 25184., 25840., 26496., 16756., 17416., 18076., 18736.,
      19512., 20176., 20840., 21504., 22300., 22968., 23636., 24304., 25120.,
      25792., 26464., 27136., 16900., 17320., 17740., 18160., 18696., 19120.,
      19544., 19968., 20524., 20952., 21380., 21808., 22384., 22816., 23248.,
      23680., 17300., 17736., 18172., 18608., 19160., 19600., 20040., 20480.,
      21052., 21496., 21940., 22384., 22976., 23424., 23872., 24320., 17700.,
      18152., 18604., 19056., 19624., 20080., 20536., 20992., 21580., 22040.,
      22500., 22960., 23568., 24032., 24496., 24960., 20100., 20648., 21196.,
      21744., 22408., 22960., 23512., 24064., 24748., 25304., 25860., 26416.,
      27120., 27680., 28240., 28800., 20500., 21064., 21628., 22192., 22872.,
      23440., 24008., 24576., 25276., 25848., 26420., 26992., 27712., 28288.,
      28864., 29440., 20900., 21480., 22060., 22640., 23336., 23920., 24504.,
      25088., 25804., 26392., 26980., 27568., 28304., 28896., 29488., 30080.,
      21300., 21896., 22492., 23088., 23800., 24400., 25000., 25600., 26332.,
      26936., 27540., 28144., 28896., 29504., 30112., 30720., 9156.,  9512.,
      9868.,  10224., 10696., 11056., 11416., 11776., 12268., 12632., 12996.,
      13360., 13872., 14240., 14608., 14976., 9556.,  9928.,  10300., 10672.,
      11160., 11536., 11912., 12288., 12796., 13176., 13556., 13936., 14464.,
      14848., 15232., 15616., 9956.,  10344., 10732., 11120., 11624., 12016.,
      12408., 12800., 13324., 13720., 14116., 14512., 15056., 15456., 15856.,
      16256.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3754., 3808., 4772., 4840., 3376., 3424., 3472., 4510., 4564., 5724.,
      5792., 4048., 4096., 4144., 5337., 5400., 6766., 6844., 4770., 4824.,
      4878., 6219., 6282., 7858., 7936., 5526., 5580., 5634., 7101., 7164.,
      8950., 9028., 6282., 6336., 6390., 2662., 2692., 3260., 3296., 2200.,
      2224., 2248., 3082., 3112., 3764., 3800., 2536., 2560., 2584.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      426.,  436.,  446.,  456.,  466.,  476.,  486.,  566.,  576.,  586.,
      596.,  606.,  616.,  626.,  706.,  716.,  726.,  736.,  746.,  756.,
      766.,  846.,  856.,  866.,  876.,  886.,  896.,  906.,  986.,  996.,
      1006., 1016., 1026., 1036., 1046., 1126., 1136., 1146., 1156., 1166.,
      1176., 1186., 1266., 1276., 1286., 1296., 1306., 1316., 1326.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7130.,  7508.,  7232.,  7616.,  9040.,  9544.,  9168.,  9680.,  6374.,
      6752.,  6464.,  6848.,  6554.,  6944.,  8558.,  9020.,  8660.,  9128.,
      10832., 11448., 10960., 11584., 7634.,  8096.,  7724.,  8192.,  7814.,
      8288.,  10107., 10674., 10224., 10800., 12776., 13532., 12920., 13688.,
      8973.,  9540.,  9072.,  9648.,  9171.,  9756.,  11745., 12438., 11862.,
      12564., 14792., 15716., 14936., 15872., 10359., 11052., 10458., 11160.,
      10557., 11268., 13383., 14202., 13500., 14328., 16808., 17900., 16952.,
      18056., 11745., 12564., 11844., 12672., 11943., 12780., 4862.,  5324.,
      4916.,  5384.,  5904.,  6520.,  5968.,  6592.,  3938.,  4400.,  3980.,
      4448.,  4022.,  4496.,  5618.,  6164.,  5672.,  6224.,  6800.,  7528.,
      6864.,  7600.,  4526.,  5072.,  4568.,  5120.,  4610.,  5168.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      728.,  852.,  744.,  872.,  760.,  892.,  776.,  912.,  792.,  932.,
      808.,  952.,  824.,  972.,  952.,  1132., 968.,  1152., 984.,  1172.,
      1000., 1192., 1016., 1212., 1032., 1232., 1048., 1252., 1176., 1412.,
      1192., 1432., 1208., 1452., 1224., 1472., 1240., 1492., 1256., 1512.,
      1272., 1532., 1400., 1692., 1416., 1712., 1432., 1732., 1448., 1752.,
      1464., 1772., 1480., 1792., 1496., 1812., 1624., 1972., 1640., 1992.,
      1656., 2012., 1672., 2032., 1688., 2052., 1704., 2072., 1720., 2092.,
      1848., 2252., 1864., 2272., 1880., 2292., 1896., 2312., 1912., 2332.,
      1928., 2352., 1944., 2372., 2072., 2532., 2088., 2552., 2104., 2572.,
      2120., 2592., 2136., 2612., 2152., 2632., 2168., 2652.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13882., 14260., 14638., 15016., 14080., 14464., 14848., 15232., 17576.,
      18080., 18584., 19088., 17824., 18336., 18848., 19360., 12370., 12748.,
      13126., 13504., 12544., 12928., 13312., 13696., 12718., 13108., 13498.,
      13888., 16654., 17116., 17578., 18040., 16852., 17320., 17788., 18256.,
      21048., 21664., 22280., 22896., 21296., 21920., 22544., 23168., 14806.,
      15268., 15730., 16192., 14980., 15448., 15916., 16384., 15154., 15628.,
      16102., 16576., 19647., 20214., 20781., 21348., 19872., 20448., 21024.,
      21600., 24796., 25552., 26308., 27064., 25072., 25840., 26608., 27376.,
      17379., 17946., 18513., 19080., 17568., 18144., 18720., 19296., 17757.,
      18342., 18927., 19512., 22797., 23490., 24183., 24876., 23022., 23724.,
      24426., 25128., 28660., 29584., 30508., 31432., 28936., 29872., 30808.,
      31744., 20025., 20718., 21411., 22104., 20214., 20916., 21618., 22320.,
      20403., 21114., 21825., 22536., 25947., 26766., 27585., 28404., 26172.,
      27000., 27828., 28656., 32524., 33616., 34708., 35800., 32800., 33904.,
      35008., 36112., 22671., 23490., 24309., 25128., 22860., 23688., 24516.,
      25344., 23049., 23886., 24723., 25560., 9262.,  9724.,  10186., 10648.,
      9364.,  9832.,  10300., 10768., 11192., 11808., 12424., 13040., 11312.,
      11936., 12560., 13184., 7414.,  7876.,  8338.,  8800.,  7492.,  7960.,
      8428.,  8896.,  7570.,  8044.,  8518.,  8992.,  10690., 11236., 11782.,
      12328., 10792., 11344., 11896., 12448., 12872., 13600., 14328., 15056.,
      12992., 13728., 14464., 15200., 8506.,  9052.,  9598.,  10144., 8584.,
      9136.,  9688.,  10240., 8662.,  9220.,  9778.,  10336.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1332., 1456., 1580., 1704., 1360., 1488., 1616., 1744., 1388., 1520.,
      1652., 1784., 1416., 1552., 1688., 1824., 1444., 1584., 1724., 1864.,
      1472., 1616., 1760., 1904., 1500., 1648., 1796., 1944., 1724., 1904.,
      2084., 2264., 1752., 1936., 2120., 2304., 1780., 1968., 2156., 2344.,
      1808., 2000., 2192., 2384., 1836., 2032., 2228., 2424., 1864., 2064.,
      2264., 2464., 1892., 2096., 2300., 2504., 2116., 2352., 2588., 2824.,
      2144., 2384., 2624., 2864., 2172., 2416., 2660., 2904., 2200., 2448.,
      2696., 2944., 2228., 2480., 2732., 2984., 2256., 2512., 2768., 3024.,
      2284., 2544., 2804., 3064., 2508., 2800., 3092., 3384., 2536., 2832.,
      3128., 3424., 2564., 2864., 3164., 3464., 2592., 2896., 3200., 3504.,
      2620., 2928., 3236., 3544., 2648., 2960., 3272., 3584., 2676., 2992.,
      3308., 3624., 2900., 3248., 3596., 3944., 2928., 3280., 3632., 3984.,
      2956., 3312., 3668., 4024., 2984., 3344., 3704., 4064., 3012., 3376.,
      3740., 4104., 3040., 3408., 3776., 4144., 3068., 3440., 3812., 4184.,
      3292., 3696., 4100., 4504., 3320., 3728., 4136., 4544., 3348., 3760.,
      4172., 4584., 3376., 3792., 4208., 4624., 3404., 3824., 4244., 4664.,
      3432., 3856., 4280., 4704., 3460., 3888., 4316., 4744., 3684., 4144.,
      4604., 5064., 3712., 4176., 4640., 5104., 3740., 4208., 4676., 5144.,
      3768., 4240., 4712., 5184., 3796., 4272., 4748., 5224., 3824., 4304.,
      4784., 5264., 3852., 4336., 4820., 5304.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14158., 15016., 14362., 15232., 17952., 19088., 18208., 19360., 12658.,
      13504., 12838., 13696., 13018., 13888., 17014., 18040., 17218., 18256.,
      21536., 22896., 21792., 23168., 15178., 16192., 15358., 16384., 15538.,
      16576., 20097., 21348., 20331., 21600., 25408., 27064., 25696., 27376.,
      17847., 19080., 18045., 19296., 18243., 19512., 23373., 24876., 23607.,
      25128., 29440., 31432., 29728., 31744., 20619., 22104., 20817., 22320.,
      21015., 22536., 26649., 28404., 26883., 28656., 33472., 35800., 33760.,
      36112., 23391., 25128., 23589., 25344., 23787., 25560., 9670.,  10648.,
      9778.,  10768., 11744., 13040., 11872., 13184., 7834.,  8800.,  7918.,
      8896.,  8002.,  8992.,  11182., 12328., 11290., 12448., 13536., 15056.,
      13664., 15200., 9010.,  10144., 9094.,  10240., 9178.,  10336.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1440., 1704., 1472., 1744., 1504., 1784., 1536., 1824., 1568., 1864.,
      1600., 1904., 1632., 1944., 1888., 2264., 1920., 2304., 1952., 2344.,
      1984., 2384., 2016., 2424., 2048., 2464., 2080., 2504., 2336., 2824.,
      2368., 2864., 2400., 2904., 2432., 2944., 2464., 2984., 2496., 3024.,
      2528., 3064., 2784., 3384., 2816., 3424., 2848., 3464., 2880., 3504.,
      2912., 3544., 2944., 3584., 2976., 3624., 3232., 3944., 3264., 3984.,
      3296., 4024., 3328., 4064., 3360., 4104., 3392., 4144., 3424., 4184.,
      3680., 4504., 3712., 4544., 3744., 4584., 3776., 4624., 3808., 4664.,
      3840., 4704., 3872., 4744., 4128., 5064., 4160., 5104., 4192., 5144.,
      4224., 5184., 4256., 5224., 4288., 5264., 4320., 5304.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27566., 28316., 29276., 30032., 27962., 28724., 29696., 30464., 34904.,
      35904., 37168., 38176., 35400., 36416., 37696., 38720., 24566., 25316.,
      26252., 27008., 24914., 25676., 26624., 27392., 25262., 26036., 26996.,
      27776., 33110., 34028., 35156., 36080., 33506., 34436., 35576., 36512.,
      41848., 43072., 44560., 45792., 42344., 43584., 45088., 46336., 29438.,
      30356., 31460., 32384., 29786., 30716., 31832., 32768., 30134., 31076.,
      32204., 33152., 39069., 40194., 41562., 42696., 39519., 40662., 42048.,
      43200., 49316., 50816., 52616., 54128., 49868., 51392., 53216., 54752.,
      34569., 35694., 37026., 38160., 34947., 36090., 37440., 38592., 35325.,
      36486., 37854., 39024., 13881., 14490., 15342., 15960., 14331., 14958.,
      15828., 16464., 25556., 26624., 27992., 29072., 26108., 27200., 28592.,
      29696., 11445., 12054., 12870., 13488., 11823., 12450., 13284., 13920.,
      12201., 12846., 13698., 14352., 20181., 21042., 22146., 23016., 20631.,
      21510., 22632., 23520., 24836., 25984., 27432., 28592., 25388., 26560.,
      28032., 29216., 16737., 17598., 18666., 19536., 17115., 17994., 19080.,
      19968., 17493., 18390., 19494., 20400., 18422., 19340., 20372., 21296.,
      18626., 19556., 20600., 21536., 22264., 23488., 24848., 26080., 22504.,
      23744., 25120., 26368., 14750., 15668., 16676., 17600., 14906., 15836.,
      16856., 17792., 15062., 16004., 17036., 17984., 21278., 22364., 23564.,
      24656., 21482., 22580., 23792., 24896., 25624., 27072., 28656., 30112.,
      25864., 27328., 28928., 30400., 16934., 18020., 19196., 20288., 17090.,
      18188., 19376., 20480., 17246., 18356., 19556., 20672.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2636., 2880.,  3160., 3408.,  2692., 2944.,  3232., 3488.,  2748., 3008.,
      3304., 3568.,  2804., 3072.,  3376., 3648.,  2860., 3136.,  3448., 3728.,
      2916., 3200.,  3520., 3808.,  2972., 3264.,  3592., 3888.,  3420., 3776.,
      4168., 4528.,  3476., 3840.,  4240., 4608.,  3532., 3904.,  4312., 4688.,
      3588., 3968.,  4384., 4768.,  3644., 4032.,  4456., 4848.,  3700., 4096.,
      4528., 4928.,  3756., 4160.,  4600., 5008.,  4204., 4672.,  5176., 5648.,
      4260., 4736.,  5248., 5728.,  4316., 4800.,  5320., 5808.,  4372., 4864.,
      5392., 5888.,  4428., 4928.,  5464., 5968.,  4484., 4992.,  5536., 6048.,
      4540., 5056.,  5608., 6128.,  4988., 5568.,  6184., 6768.,  5044., 5632.,
      6256., 6848.,  5100., 5696.,  6328., 6928.,  5156., 5760.,  6400., 7008.,
      5212., 5824.,  6472., 7088.,  5268., 5888.,  6544., 7168.,  5324., 5952.,
      6616., 7248.,  5772., 6464.,  7192., 7888.,  5828., 6528.,  7264., 7968.,
      5884., 6592.,  7336., 8048.,  5940., 6656.,  7408., 8128.,  5996., 6720.,
      7480., 8208.,  6052., 6784.,  7552., 8288.,  6108., 6848.,  7624., 8368.,
      6556., 7360.,  8200., 9008.,  6612., 7424.,  8272., 9088.,  6668., 7488.,
      8344., 9168.,  6724., 7552.,  8416., 9248.,  6780., 7616.,  8488., 9328.,
      6836., 7680.,  8560., 9408.,  6892., 7744.,  8632., 9488.,  7340., 8256.,
      9208., 10128., 7396., 8320.,  9280., 10208., 7452., 8384.,  9352., 10288.,
      7508., 8448.,  9424., 10368., 7564., 8512.,  9496., 10448., 7620., 8576.,
      9568., 10528., 7676., 8640.,  9640., 10608.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23278., 23644., 24010., 24376., 25156., 25528., 25900., 26272., 24058.,
      24436., 24814., 25192., 25984., 26368., 26752., 27136., 29384., 29872.,
      30360., 30848., 31856., 32352., 32848., 33344., 30360., 30864., 31368.,
      31872., 32896., 33408., 33920., 34432., 20350., 20716., 21082., 21448.,
      22180., 22552., 22924., 23296., 21034., 21412., 21790., 22168., 22912.,
      23296., 23680., 24064., 21718., 22108., 22498., 22888., 23644., 24040.,
      24436., 24832., 34198., 34732., 35266., 35800., 36748., 37288., 37828.,
      38368., 34978., 35524., 36070., 36616., 37576., 38128., 38680., 39232.,
      43048., 43760., 44472., 45184., 46416., 47136., 47856., 48576., 44024.,
      44752., 45480., 46208., 47456., 48192., 48928., 49664., 29926., 30460.,
      30994., 31528., 32428., 32968., 33508., 34048., 30610., 31156., 31702.,
      32248., 33160., 33712., 34264., 34816., 31294., 31852., 32410., 32968.,
      33892., 34456., 35020., 35584., 38613., 39226., 39839., 40452., 41542.,
      42164., 42786., 43408., 39495., 40126., 40757., 41388., 42496., 43136.,
      43776., 44416., 44140., 44872., 45604., 46336., 47656., 48400., 49144.,
      49888., 45220., 45976., 46732., 47488., 48832., 49600., 50368., 51136.,
      33709., 34322., 34935., 35548., 36566., 37188., 37810., 38432., 34447.,
      35078., 35709., 36340., 37376., 38016., 38656., 39296., 29937., 30458.,
      30979., 31500., 32426., 32956., 33486., 34016., 8337.,  8562.,  8787.,
      9012.,  9714.,  9948.,  10182., 10416., 9219.,  9462.,  9705.,  9948.,
      10668., 10920., 11172., 11424., 18684., 19112., 19540., 19968., 20984.,
      21424., 21864., 22304., 19764., 20216., 20668., 21120., 22160., 22624.,
      23088., 23552., 6537.,  6762.,  6987.,  7212.,  7842.,  8076.,  8310.,
      8544.,  7275.,  7518.,  7761.,  8004.,  8652.,  8904.,  9156.,  9408.,
      8013.,  8274.,  8535.,  8796.,  9462.,  9732.,  10002., 10272., 20685.,
      21162., 21639., 22116., 23070., 23556., 24042., 24528., 21567., 22062.,
      22557., 23052., 24024., 24528., 25032., 25536., 25484., 26120., 26756.,
      27392., 28616., 29264., 29912., 30560., 26564., 27224., 27884., 28544.,
      29792., 30464., 31136., 31808., 16869., 17346., 17823., 18300., 19182.,
      19668., 20154., 20640., 17607., 18102., 18597., 19092., 19992., 20496.,
      21000., 21504., 18345., 18858., 19371., 19884., 20802., 21324., 21846.,
      22368., 17110., 17644., 18178., 18712., 19468., 20008., 20548., 21088.,
      17506., 18052., 18598., 19144., 19912., 20464., 21016., 21568., 20264.,
      20976., 21688., 22400., 23376., 24096., 24816., 25536., 20728., 21456.,
      22184., 22912., 23904., 24640., 25376., 26112., 12838., 13372., 13906.,
      14440., 15148., 15688., 16228., 16768., 13138., 13684., 14230., 14776.,
      15496., 16048., 16600., 17152., 13438., 13996., 14554., 15112., 15844.,
      16408., 16972., 17536., 19454., 20028., 20602., 21176., 21972., 22552.,
      23132., 23712., 19850., 20436., 21022., 21608., 22416., 23008., 23600.,
      24192., 21384., 22064., 22744., 23424., 24368., 25056., 25744., 26432.,
      21848., 22544., 23240., 23936., 24896., 25600., 26304., 27008., 14862.,
      15436., 16010., 16584., 17332., 17912., 18492., 19072., 15162., 15748.,
      16334., 16920., 17680., 18272., 18864., 19456., 14310., 14780., 15250.,
      15720., 16364., 16840., 17316., 17792.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5028.,  5272.,  5516.,  5760.,  6072.,  6320.,  6568.,  6816.,  5132.,
      5384.,  5636.,  5888.,  6208.,  6464.,  6720.,  6976.,  5236.,  5496.,
      5756.,  6016.,  6344.,  6608.,  6872.,  7136.,  5340.,  5608.,  5876.,
      6144.,  6480.,  6752.,  7024.,  7296.,  5444.,  5720.,  5996.,  6272.,
      6616.,  6896.,  7176.,  7456.,  5548.,  5832.,  6116.,  6400.,  6752.,
      7040.,  7328.,  7616.,  5652.,  5944.,  6236.,  6528.,  6888.,  7184.,
      7480.,  7776.,  6484.,  6840.,  7196.,  7552.,  7976.,  8336.,  8696.,
      9056.,  6588.,  6952.,  7316.,  7680.,  8112.,  8480.,  8848.,  9216.,
      6692.,  7064.,  7436.,  7808.,  8248.,  8624.,  9000.,  9376.,  6796.,
      7176.,  7556.,  7936.,  8384.,  8768.,  9152.,  9536.,  6900.,  7288.,
      7676.,  8064.,  8520.,  8912.,  9304.,  9696.,  7004.,  7400.,  7796.,
      8192.,  8656.,  9056.,  9456.,  9856.,  7108.,  7512.,  7916.,  8320.,
      8792.,  9200.,  9608.,  10016., 7940.,  8408.,  8876.,  9344.,  9880.,
      10352., 10824., 11296., 8044.,  8520.,  8996.,  9472.,  10016., 10496.,
      10976., 11456., 8148.,  8632.,  9116.,  9600.,  10152., 10640., 11128.,
      11616., 8252.,  8744.,  9236.,  9728.,  10288., 10784., 11280., 11776.,
      8356.,  8856.,  9356.,  9856.,  10424., 10928., 11432., 11936., 8460.,
      8968.,  9476.,  9984.,  10560., 11072., 11584., 12096., 8564.,  9080.,
      9596.,  10112., 10696., 11216., 11736., 12256., 9396.,  9976.,  10556.,
      11136., 11784., 12368., 12952., 13536., 9500.,  10088., 10676., 11264.,
      11920., 12512., 13104., 13696., 9604.,  10200., 10796., 11392., 12056.,
      12656., 13256., 13856., 9708.,  10312., 10916., 11520., 12192., 12800.,
      13408., 14016., 9812.,  10424., 11036., 11648., 12328., 12944., 13560.,
      14176., 9916.,  10536., 11156., 11776., 12464., 13088., 13712., 14336.,
      10020., 10648., 11276., 11904., 12600., 13232., 13864., 14496., 10852.,
      11544., 12236., 12928., 13688., 14384., 15080., 15776., 10956., 11656.,
      12356., 13056., 13824., 14528., 15232., 15936., 11060., 11768., 12476.,
      13184., 13960., 14672., 15384., 16096., 11164., 11880., 12596., 13312.,
      14096., 14816., 15536., 16256., 11268., 11992., 12716., 13440., 14232.,
      14960., 15688., 16416., 11372., 12104., 12836., 13568., 14368., 15104.,
      15840., 16576., 11476., 12216., 12956., 13696., 14504., 15248., 15992.,
      16736., 12308., 13112., 13916., 14720., 15592., 16400., 17208., 18016.,
      12412., 13224., 14036., 14848., 15728., 16544., 17360., 18176., 12516.,
      13336., 14156., 14976., 15864., 16688., 17512., 18336., 12620., 13448.,
      14276., 15104., 16000., 16832., 17664., 18496., 12724., 13560., 14396.,
      15232., 16136., 16976., 17816., 18656., 12828., 13672., 14516., 15360.,
      16272., 17120., 17968., 18816., 12932., 13784., 14636., 15488., 16408.,
      17264., 18120., 18976., 13764., 14680., 15596., 16512., 17496., 18416.,
      19336., 20256., 13868., 14792., 15716., 16640., 17632., 18560., 19488.,
      20416., 13972., 14904., 15836., 16768., 17768., 18704., 19640., 20576.,
      14076., 15016., 15956., 16896., 17904., 18848., 19792., 20736., 14180.,
      15128., 16076., 17024., 18040., 18992., 19944., 20896., 14284., 15240.,
      16196., 17152., 18176., 19136., 20096., 21056., 14388., 15352., 16316.,
      17280., 18312., 19280., 20248., 21216.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23446., 24376., 25318., 26272., 24238., 25192., 26158., 27136., 29624.,
      30848., 32088., 33344., 30616., 31872., 33144., 34432., 20542., 21448.,
      22366., 23296., 21238., 22168., 23110., 24064., 21934., 22888., 23854.,
      24832., 34534., 35800., 37078., 38368., 35326., 36616., 37918., 39232.,
      43512., 45184., 46872., 48576., 44504., 46208., 47928., 49664., 30286.,
      31528., 32782., 34048., 30982., 32248., 33526., 34816., 31678., 32968.,
      34270., 35584., 39001., 40452., 41921., 43408., 39901., 41388., 42893.,
      44416., 44596., 46336., 48100., 49888., 45700., 47488., 49300., 51136.,
      34133., 35548., 36981., 38432., 34889., 36340., 37809., 39296., 30269.,
      31500., 32749., 34016., 8337.,  9012.,  9705.,  10416., 9237.,  9948.,
      10677., 11424., 18836., 19968., 21124., 22304., 19940., 21120., 22324.,
      23552., 6573.,  7212.,  7869.,  8544.,  7329.,  8004.,  8697.,  9408.,
      8085.,  8796.,  9525.,  10272., 20937., 22116., 23313., 24528., 21837.,
      23052., 24285., 25536., 25844., 27392., 28964., 30560., 26948., 28544.,
      30164., 31808., 17157., 18300., 19461., 20640., 17913., 19092., 20289.,
      21504., 18669., 19884., 21117., 22368., 17542., 18712., 19894., 21088.,
      17950., 19144., 20350., 21568., 20856., 22400., 23960., 25536., 21336.,
      22912., 24504., 26112., 13294., 14440., 15598., 16768., 13606., 14776.,
      15958., 17152., 13918., 15112., 16318., 17536., 19926., 21176., 22438.,
      23712., 20334., 21608., 22894., 24192., 21944., 23424., 24920., 26432.,
      22424., 23936., 25464., 27008., 15358., 16584., 17822., 19072., 15670.,
      16920., 18182., 19456., 14702., 15720., 16750., 17792.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5244.,  5760.,  6284.,  6816.,  5356.,  5888.,  6428.,  6976.,  5468.,
      6016.,  6572.,  7136.,  5580.,  6144.,  6716.,  7296.,  5692.,  6272.,
      6860.,  7456.,  5804.,  6400.,  7004.,  7616.,  5916.,  6528.,  7148.,
      7776.,  6812.,  7552.,  8300.,  9056.,  6924.,  7680.,  8444.,  9216.,
      7036.,  7808.,  8588.,  9376.,  7148.,  7936.,  8732.,  9536.,  7260.,
      8064.,  8876.,  9696.,  7372.,  8192.,  9020.,  9856.,  7484.,  8320.,
      9164.,  10016., 8380.,  9344.,  10316., 11296., 8492.,  9472.,  10460.,
      11456., 8604.,  9600.,  10604., 11616., 8716.,  9728.,  10748., 11776.,
      8828.,  9856.,  10892., 11936., 8940.,  9984.,  11036., 12096., 9052.,
      10112., 11180., 12256., 9948.,  11136., 12332., 13536., 10060., 11264.,
      12476., 13696., 10172., 11392., 12620., 13856., 10284., 11520., 12764.,
      14016., 10396., 11648., 12908., 14176., 10508., 11776., 13052., 14336.,
      10620., 11904., 13196., 14496., 11516., 12928., 14348., 15776., 11628.,
      13056., 14492., 15936., 11740., 13184., 14636., 16096., 11852., 13312.,
      14780., 16256., 11964., 13440., 14924., 16416., 12076., 13568., 15068.,
      16576., 12188., 13696., 15212., 16736., 13084., 14720., 16364., 18016.,
      13196., 14848., 16508., 18176., 13308., 14976., 16652., 18336., 13420.,
      15104., 16796., 18496., 13532., 15232., 16940., 18656., 13644., 15360.,
      17084., 18816., 13756., 15488., 17228., 18976., 14652., 16512., 18380.,
      20256., 14764., 16640., 18524., 20416., 14876., 16768., 18668., 20576.,
      14988., 16896., 18812., 20736., 15100., 17024., 18956., 20896., 15212.,
      17152., 19100., 21056., 15324., 17280., 19244., 21216.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      32598., 33068., 33940., 34416., 35306., 35788., 36696., 37184., 34158.,
      34652., 35548., 36048., 36962., 37468., 38400., 38912., 28072., 28528.,
      29488., 29952., 30936., 31408., 32416., 32896., 30024., 30512., 31504.,
      32000., 33016., 33520., 34560., 35072., 28838., 29308., 30132., 30608.,
      31450., 31932., 32792., 33280., 30206., 30700., 31548., 32048., 32914.,
      33420., 34304., 34816., 16982., 17244., 17860., 18128., 18762., 19036.,
      19688., 19968., 18086., 18380., 19076., 19376., 20090., 20396., 21128.,
      21440., 19646., 19964., 20684., 21008., 21746., 22076., 22832., 23168.,
      23144., 23536., 24432., 24832., 25752., 26160., 27104., 27520., 25096.,
      25520., 26448., 26880., 27832., 28272., 29248., 29696., 15734., 16028.,
      16676., 16976., 17642., 17948., 18632., 18944., 17102., 17420., 18092.,
      18416., 19106., 19436., 20144., 20480., 18470., 18812., 19508., 19856.,
      20570., 20924., 21656., 22016., 34161., 34738., 35774., 36360., 37423.,
      38018., 39108., 39712., 35925., 36538., 37610., 38232., 39331., 39962.,
      41088., 41728., 38844., 39528., 40776., 41472., 42756., 43464., 44784.,
      45504., 41004., 41736., 43032., 43776., 45108., 45864., 47232., 48000.,
      29545., 30122., 31086., 31672., 32663., 33258., 34276., 34880., 31021.,
      31634., 32634., 33256., 34283., 34914., 35968., 36608., 27249., 27770.,
      28678., 29208., 30143., 30682., 31644., 32192., 16233., 16674., 17574.,
      18024., 18951., 19410., 20364., 20832., 17997., 18474., 19410., 19896.,
      20859., 21354., 22344., 22848., 28508., 29224., 30504., 31232., 32548.,
      33288., 34640., 35392., 30668., 31432., 32760., 33536., 34900., 35688.,
      37088., 37888., 12705., 13146., 13974., 14424., 15279., 15738., 16620.,
      17088., 14181., 14658., 15522., 16008., 16899., 17394., 18312., 18816.,
      15657., 16170., 17070., 17592., 18519., 19050., 20004., 20544., 35553.,
      36242., 37390., 38088., 39263., 39970., 41172., 41888., 37317., 38042.,
      39226., 39960., 41171., 41914., 43152., 43904., 36604., 37352., 38664.,
      39424., 40772., 41544., 42928., 43712., 38764., 39560., 40920., 41728.,
      43124., 43944., 45376., 46208., 30041., 30730., 31806., 32504., 33607.,
      34314., 35444., 36160., 31517., 32242., 33354., 34088., 35227., 35970.,
      37136., 37888., 26593., 27098., 27990., 28504., 29423., 29946., 30892.,
      31424., 8678.,  8972.,  9476.,  9776.,  10298., 10604., 11144., 11456.,
      9470.,  9788.,  10316., 10640., 11186., 11516., 12080., 12416., 10600.,
      10992., 11632., 12032., 12696., 13104., 13792., 14208., 11528., 11952.,
      12624., 13056., 13752., 14192., 14912., 15360., 6326.,  6620.,  7076.,
      7376.,  7850.,  8156.,  8648.,  8960.,  6926.,  7244.,  7724.,  8048.,
      8546.,  8876.,  9392.,  9728.,  7526.,  7868.,  8372.,  8720.,  9242.,
      9596.,  10136., 10496., 16566., 17068., 17780., 18288., 19018., 19532.,
      20280., 20800., 17358., 17884., 18620., 19152., 19906., 20444., 21216.,
      21760., 18216., 18800., 19632., 20224., 21080., 21680., 22560., 23168.,
      19144., 19760., 20624., 21248., 22136., 22768., 23680., 24320., 12550.,
      13052., 13716., 14224., 14906., 15420., 16120., 16640., 13150., 13676.,
      14364., 14896., 15602., 16140., 16864., 17408., 12598., 13020., 13604.,
      14032., 14634., 15068., 15688., 16128.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10004., 10488., 11032., 11520., 12076., 12568., 13136., 13632., 10212.,
      10712., 11272., 11776., 12348., 12856., 13440., 13952., 10420., 10936.,
      11512., 12032., 12620., 13144., 13744., 14272., 10628., 11160., 11752.,
      12288., 12892., 13432., 14048., 14592., 10836., 11384., 11992., 12544.,
      13164., 13720., 14352., 14912., 11044., 11608., 12232., 12800., 13436.,
      14008., 14656., 15232., 11252., 11832., 12472., 13056., 13708., 14296.,
      14960., 15552., 12916., 13624., 14392., 15104., 15884., 16600., 17392.,
      18112., 13124., 13848., 14632., 15360., 16156., 16888., 17696., 18432.,
      13332., 14072., 14872., 15616., 16428., 17176., 18000., 18752., 13540.,
      14296., 15112., 15872., 16700., 17464., 18304., 19072., 13748., 14520.,
      15352., 16128., 16972., 17752., 18608., 19392., 13956., 14744., 15592.,
      16384., 17244., 18040., 18912., 19712., 14164., 14968., 15832., 16640.,
      17516., 18328., 19216., 20032., 15828., 16760., 17752., 18688., 19692.,
      20632., 21648., 22592., 16036., 16984., 17992., 18944., 19964., 20920.,
      21952., 22912., 16244., 17208., 18232., 19200., 20236., 21208., 22256.,
      23232., 16452., 17432., 18472., 19456., 20508., 21496., 22560., 23552.,
      16660., 17656., 18712., 19712., 20780., 21784., 22864., 23872., 16868.,
      17880., 18952., 19968., 21052., 22072., 23168., 24192., 17076., 18104.,
      19192., 20224., 21324., 22360., 23472., 24512., 18740., 19896., 21112.,
      22272., 23500., 24664., 25904., 27072., 18948., 20120., 21352., 22528.,
      23772., 24952., 26208., 27392., 19156., 20344., 21592., 22784., 24044.,
      25240., 26512., 27712., 19364., 20568., 21832., 23040., 24316., 25528.,
      26816., 28032., 19572., 20792., 22072., 23296., 24588., 25816., 27120.,
      28352., 19780., 21016., 22312., 23552., 24860., 26104., 27424., 28672.,
      19988., 21240., 22552., 23808., 25132., 26392., 27728., 28992., 21652.,
      23032., 24472., 25856., 27308., 28696., 30160., 31552., 21860., 23256.,
      24712., 26112., 27580., 28984., 30464., 31872., 22068., 23480., 24952.,
      26368., 27852., 29272., 30768., 32192., 22276., 23704., 25192., 26624.,
      28124., 29560., 31072., 32512., 22484., 23928., 25432., 26880., 28396.,
      29848., 31376., 32832., 22692., 24152., 25672., 27136., 28668., 30136.,
      31680., 33152., 22900., 24376., 25912., 27392., 28940., 30424., 31984.,
      33472., 24564., 26168., 27832., 29440., 31116., 32728., 34416., 36032.,
      24772., 26392., 28072., 29696., 31388., 33016., 34720., 36352., 24980.,
      26616., 28312., 29952., 31660., 33304., 35024., 36672., 25188., 26840.,
      28552., 30208., 31932., 33592., 35328., 36992., 25396., 27064., 28792.,
      30464., 32204., 33880., 35632., 37312., 25604., 27288., 29032., 30720.,
      32476., 34168., 35936., 37632., 25812., 27512., 29272., 30976., 32748.,
      34456., 36240., 37952., 27476., 29304., 31192., 33024., 34924., 36760.,
      38672., 40512., 27684., 29528., 31432., 33280., 35196., 37048., 38976.,
      40832., 27892., 29752., 31672., 33536., 35468., 37336., 39280., 41152.,
      28100., 29976., 31912., 33792., 35740., 37624., 39584., 41472., 28308.,
      30200., 32152., 34048., 36012., 37912., 39888., 41792., 28516., 30424.,
      32392., 34304., 36284., 38200., 40192., 42112., 28724., 30648., 32632.,
      34560., 36556., 38488., 40496., 42432.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x11x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24406., 24876., 25346., 25816., 26700., 27176., 27652., 28128., 29042.,
      29524., 30006., 30488., 31432., 31920., 32408., 32896., 25966., 26460.,
      26954., 27448., 28356., 28856., 29356., 29856., 30794., 31300., 31806.,
      32312., 33280., 33792., 34304., 34816., 18312., 18768., 19224., 19680.,
      20624., 21088., 21552., 22016., 23000., 23472., 23944., 24416., 25440.,
      25920., 26400., 26880., 20136., 20624., 21112., 21600., 22576., 23072.,
      23568., 24064., 25080., 25584., 26088., 26592., 27648., 28160., 28672.,
      29184., 16886., 17356., 17826., 18296., 19084., 19560., 20036., 20512.,
      21330., 21812., 22294., 22776., 23624., 24112., 24600., 25088., 18062.,
      18556., 19050., 19544., 20356., 20856., 21356., 21856., 22698., 23204.,
      23710., 24216., 25088., 25600., 26112., 26624., 6694.,  6956.,  7218.,
      7480.,  8060.,  8328.,  8596.,  8864.,  9474.,  9748.,  10022., 10296.,
      10936., 11216., 11496., 11776., 23206., 23500., 23794., 24088., 24796.,
      25096., 25396., 25696., 26434., 26740., 27046., 27352., 28120., 28432.,
      28744., 29056., 24766., 25084., 25402., 25720., 26452., 26776., 27100.,
      27424., 28186., 28516., 28846., 29176., 29968., 30304., 30640., 30976.,
      29000., 29392., 29784., 30176., 31056., 31456., 31856., 32256., 33176.,
      33584., 33992., 34400., 35360., 35776., 36192., 36608., 30824., 31248.,
      31672., 32096., 33008., 33440., 33872., 34304., 35256., 35696., 36136.,
      36576., 37568., 38016., 38464., 38912., 18502., 18796., 19090., 19384.,
      19996., 20296., 20596., 20896., 21538., 21844., 22150., 22456., 23128.,
      23440., 23752., 24064., 19678., 19996., 20314., 20632., 21268., 21592.,
      21916., 22240., 22906., 23236., 23566., 23896., 24592., 24928., 25264.,
      25600., 20854., 21196., 21538., 21880., 22540., 22888., 23236., 23584.,
      24274., 24628., 24982., 25336., 26056., 26416., 26776., 27136., 33569.,
      34146., 34723., 35300., 36402., 36988., 37574., 38160., 39307., 39902.,
      40497., 41092., 42284., 42888., 43492., 44096., 35525., 36138., 36751.,
      37364., 38502., 39124., 39746., 40368., 41551., 42182., 42813., 43444.,
      44672., 45312., 45952., 46592., 31436., 32120., 32804., 33488., 34776.,
      35472., 36168., 36864., 38212., 38920., 39628., 40336., 41744., 42464.,
      43184., 43904., 33660., 34392., 35124., 35856., 37192., 37936., 38680.,
      39424., 40820., 41576., 42332., 43088., 44544., 45312., 46080., 46848.,
      24337., 24914., 25491., 26068., 27026., 27612., 28198., 28784., 29787.,
      30382., 30977., 31572., 32620., 33224., 33828., 34432., 25717., 26330.,
      26943., 27556., 28550., 29172., 29794., 30416., 31455., 32086., 32717.,
      33348., 34432., 35072., 35712., 36352., 16729., 17250., 17771., 18292.,
      19194., 19724., 20254., 20784., 21731., 22270., 22809., 23348., 24340.,
      24888., 25436., 25984., 25497., 25938., 26379., 26820., 27786., 28236.,
      28686., 29136., 30147., 30606., 31065., 31524., 32580., 33048., 33516.,
      33984., 27453., 27930., 28407., 28884., 29886., 30372., 30858., 31344.,
      32391., 32886., 33381., 33876., 34968., 35472., 35976., 36480., 31212.,
      31928., 32644., 33360., 34680., 35408., 36136., 36864., 38244., 38984.,
      39724., 40464., 41904., 42656., 43408., 44160., 33436., 34200., 34964.,
      35728., 37096., 37872., 38648., 39424., 40852., 41640., 42428., 43216.,
      44704., 45504., 46304., 47104., 18441., 18882., 19323., 19764., 20586.,
      21036., 21486., 21936., 22803., 23262., 23721., 24180., 25092., 25560.,
      26028., 26496., 19821., 20298., 20775., 21252., 22110., 22596., 23082.,
      23568., 24471., 24966., 25461., 25956., 26904., 27408., 27912., 28416.,
      21201., 21714., 22227., 22740., 23634., 24156., 24678., 25200., 26139.,
      26670., 27201., 27732., 28716., 29256., 29796., 30336., 42385., 43074.,
      43763., 44452., 45666., 46364., 47062., 47760., 49019., 49726., 50433.,
      51140., 52444., 53160., 53876., 54592., 44341., 45066., 45791., 46516.,
      47766., 48500., 49234., 49968., 51263., 52006., 52749., 53492., 54832.,
      55584., 56336., 57088., 35084., 35832., 36580., 37328., 38680., 39440.,
      40200., 40960., 42372., 43144., 43916., 44688., 46160., 46944., 47728.,
      48512., 37308., 38104., 38900., 39696., 41096., 41904., 42712., 43520.,
      44980., 45800., 46620., 47440., 48960., 49792., 50624., 51456., 31361.,
      32050., 32739., 33428., 34498., 35196., 35894., 36592., 37707., 38414.,
      39121., 39828., 40988., 41704., 42420., 43136., 32741., 33466., 34191.,
      34916., 36022., 36756., 37490., 38224., 39375., 40118., 40861., 41604.,
      42800., 43552., 44304., 45056., 21577., 22082., 22587., 23092., 23978.,
      24492., 25006., 25520., 26451., 26974., 27497., 28020., 28996., 29528.,
      30060., 30592., 17062., 17356., 17650., 17944., 18652., 18952., 19252.,
      19552., 20290., 20596., 20902., 21208., 21976., 22288., 22600., 22912.,
      18622., 18940., 19258., 19576., 20308., 20632., 20956., 21280., 22042.,
      22372., 22702., 23032., 23824., 24160., 24496., 24832., 20808., 21200.,
      21592., 21984., 22864., 23264., 23664., 24064., 24984., 25392., 25800.,
      26208., 27168., 27584., 28000., 28416., 22632., 23056., 23480., 23904.,
      24816., 25248., 25680., 26112., 27064., 27504., 27944., 28384., 29376.,
      29824., 30272., 30720., 12358., 12652., 12946., 13240., 13852., 14152.,
      14452., 14752., 15394., 15700., 16006., 16312., 16984., 17296., 17608.,
      17920., 13534., 13852., 14170., 14488., 15124., 15448., 15772., 16096.,
      16762., 17092., 17422., 17752., 18448., 18784., 19120., 19456., 14710.,
      15052., 15394., 15736., 16396., 16744., 17092., 17440., 18130., 18484.,
      18838., 19192., 19912., 20272., 20632., 20992., 32630., 33132., 33634.,
      34136., 35052., 35560., 36068., 36576., 37522., 38036., 38550., 39064.,
      40040., 40560., 41080., 41600., 34190., 34716., 35242., 35768., 36708.,
      37240., 37772., 38304., 39274., 39812., 40350., 40888., 41888., 42432.,
      42976., 43520., 35848., 36432., 37016., 37600., 38672., 39264., 39856.,
      40448., 41560., 42160., 42760., 43360., 44512., 45120., 45728., 46336.,
      37672., 38288., 38904., 39520., 40624., 41248., 41872., 42496., 43640.,
      44272., 44904., 45536., 46720., 47360., 48000., 48640., 24598., 25100.,
      25602., 26104., 26924., 27432., 27940., 28448., 29298., 29812., 30326.,
      30840., 31720., 32240., 32760., 33280., 25774., 26300., 26826., 27352.,
      28196., 28728., 29260., 29792., 30666., 31204., 31742., 32280., 33184.,
      33728., 34272., 34816., 24774., 25196., 25618., 26040., 26780., 27208.,
      27636., 28064., 28834., 29268., 29702., 30136., 30936., 31376., 31816.,
      32256.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x11x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19524., 20008., 20492., 20976., 21576., 22064., 22552., 23040., 23660.,
      24152., 24644., 25136., 25776., 26272., 26768., 27264., 19924., 20424.,
      20924., 21424., 22040., 22544., 23048., 23552., 24188., 24696., 25204.,
      25712., 26368., 26880., 27392., 27904., 20324., 20840., 21356., 21872.,
      22504., 23024., 23544., 24064., 24716., 25240., 25764., 26288., 26960.,
      27488., 28016., 28544., 20724., 21256., 21788., 22320., 22968., 23504.,
      24040., 24576., 25244., 25784., 26324., 26864., 27552., 28096., 28640.,
      29184., 8580.,  8872.,  9164.,  9456.,  9864.,  10160., 10456., 10752.,
      11180., 11480., 11780., 12080., 12528., 12832., 13136., 13440., 8980.,
      9288.,  9596.,  9904.,  10328., 10640., 10952., 11264., 11708., 12024.,
      12340., 12656., 13120., 13440., 13760., 14080., 9380.,  9704.,  10028.,
      10352., 10792., 11120., 11448., 11776., 12236., 12568., 12900., 13232.,
      13712., 14048., 14384., 14720., 4132.,  4328.,  4524.,  4720.,  5032.,
      5232.,  5432.,  5632.,  5964.,  6168.,  6372.,  6576.,  6928.,  7136.,
      7344.,  7552.,  4532.,  4744.,  4956.,  5168.,  5496.,  5712.,  5928.,
      6144.,  6492.,  6712.,  6932.,  7152.,  7520.,  7744.,  7968.,  8192.,
      4932.,  5160.,  5388.,  5616.,  5960.,  6192.,  6424.,  6656.,  7020.,
      7256.,  7492.,  7728.,  8112.,  8352.,  8592.,  8832.,  5332.,  5576.,
      5820.,  6064.,  6424.,  6672.,  6920.,  7168.,  7548.,  7800.,  8052.,
      8304.,  8704.,  8960.,  9216.,  9472.,  5732.,  5992.,  6252.,  6512.,
      6888.,  7152.,  7416.,  7680.,  8076.,  8344.,  8612.,  8880.,  9296.,
      9568.,  9840.,  10112., 6132.,  6408.,  6684.,  6960.,  7352.,  7632.,
      7912.,  8192.,  8604.,  8888.,  9172.,  9456.,  9888.,  10176., 10464.,
      10752., 6532.,  6824.,  7116.,  7408.,  7816.,  8112.,  8408.,  8704.,
      9132.,  9432.,  9732.,  10032., 10480., 10784., 11088., 11392., 9732.,
      10152., 10572., 10992., 11528., 11952., 12376., 12800., 13356., 13784.,
      14212., 14640., 15216., 15648., 16080., 16512., 10132., 10568., 11004.,
      11440., 11992., 12432., 12872., 13312., 13884., 14328., 14772., 15216.,
      15808., 16256., 16704., 17152., 10532., 10984., 11436., 11888., 12456.,
      12912., 13368., 13824., 14412., 14872., 15332., 15792., 16400., 16864.,
      17328., 17792., 10932., 11400., 11868., 12336., 12920., 13392., 13864.,
      14336., 14940., 15416., 15892., 16368., 16992., 17472., 17952., 18432.,
      11332., 11816., 12300., 12784., 13384., 13872., 14360., 14848., 15468.,
      15960., 16452., 16944., 17584., 18080., 18576., 19072., 11732., 12232.,
      12732., 13232., 13848., 14352., 14856., 15360., 15996., 16504., 17012.,
      17520., 18176., 18688., 19200., 19712., 12132., 12648., 13164., 13680.,
      14312., 14832., 15352., 15872., 16524., 17048., 17572., 18096., 18768.,
      19296., 19824., 20352., 15332., 15976., 16620., 17264., 18024., 18672.,
      19320., 19968., 20748., 21400., 22052., 22704., 23504., 24160., 24816.,
      25472., 15732., 16392., 17052., 17712., 18488., 19152., 19816., 20480.,
      21276., 21944., 22612., 23280., 24096., 24768., 25440., 26112., 16132.,
      16808., 17484., 18160., 18952., 19632., 20312., 20992., 21804., 22488.,
      23172., 23856., 24688., 25376., 26064., 26752., 16532., 17224., 17916.,
      18608., 19416., 20112., 20808., 21504., 22332., 23032., 23732., 24432.,
      25280., 25984., 26688., 27392., 16932., 17640., 18348., 19056., 19880.,
      20592., 21304., 22016., 22860., 23576., 24292., 25008., 25872., 26592.,
      27312., 28032., 17332., 18056., 18780., 19504., 20344., 21072., 21800.,
      22528., 23388., 24120., 24852., 25584., 26464., 27200., 27936., 28672.,
      17732., 18472., 19212., 19952., 20808., 21552., 22296., 23040., 23916.,
      24664., 25412., 26160., 27056., 27808., 28560., 29312., 20932., 21800.,
      22668., 23536., 24520., 25392., 26264., 27136., 28140., 29016., 29892.,
      30768., 31792., 32672., 33552., 34432., 21332., 22216., 23100., 23984.,
      24984., 25872., 26760., 27648., 28668., 29560., 30452., 31344., 32384.,
      33280., 34176., 35072., 21732., 22632., 23532., 24432., 25448., 26352.,
      27256., 28160., 29196., 30104., 31012., 31920., 32976., 33888., 34800.,
      35712., 22132., 23048., 23964., 24880., 25912., 26832., 27752., 28672.,
      29724., 30648., 31572., 32496., 33568., 34496., 35424., 36352., 18180.,
      18856., 19532., 20208., 21000., 21680., 22360., 23040., 23852., 24536.,
      25220., 25904., 26736., 27424., 28112., 28800., 18580., 19272., 19964.,
      20656., 21464., 22160., 22856., 23552., 24380., 25080., 25780., 26480.,
      27328., 28032., 28736., 29440., 18980., 19688., 20396., 21104., 21928.,
      22640., 23352., 24064., 24908., 25624., 26340., 27056., 27920., 28640.,
      29360., 30080., 9380.,  9704.,  10028., 10352., 10792., 11120., 11448.,
      11776., 12236., 12568., 12900., 13232., 13712., 14048., 14384., 14720.,
      9780.,  10120., 10460., 10800., 11256., 11600., 11944., 12288., 12764.,
      13112., 13460., 13808., 14304., 14656., 15008., 15360., 1732.,  1832.,
      1932.,  2032.,  2248.,  2352.,  2456.,  2560.,  2796.,  2904.,  3012.,
      3120.,  3376.,  3488.,  3600.,  3712.,  2132.,  2248.,  2364.,  2480.,
      2712.,  2832.,  2952.,  3072.,  3324.,  3448.,  3572.,  3696.,  3968.,
      4096.,  4224.,  4352.,  2532.,  2664.,  2796.,  2928.,  3176.,  3312.,
      3448.,  3584.,  3852.,  3992.,  4132.,  4272.,  4560.,  4704.,  4848.,
      4992.,  2932.,  3080.,  3228.,  3376.,  3640.,  3792.,  3944.,  4096.,
      4380.,  4536.,  4692.,  4848.,  5152.,  5312.,  5472.,  5632.,  3332.,
      3496.,  3660.,  3824.,  4104.,  4272.,  4440.,  4608.,  4908.,  5080.,
      5252.,  5424.,  5744.,  5920.,  6096.,  6272.,  6532.,  6824.,  7116.,
      7408.,  7816.,  8112.,  8408.,  8704.,  9132.,  9432.,  9732.,  10032.,
      10480., 10784., 11088., 11392., 6932.,  7240.,  7548.,  7856.,  8280.,
      8592.,  8904.,  9216.,  9660.,  9976.,  10292., 10608., 11072., 11392.,
      11712., 12032., 7332.,  7656.,  7980.,  8304.,  8744.,  9072.,  9400.,
      9728.,  10188., 10520., 10852., 11184., 11664., 12000., 12336., 12672.,
      7732.,  8072.,  8412.,  8752.,  9208.,  9552.,  9896.,  10240., 10716.,
      11064., 11412., 11760., 12256., 12608., 12960., 13312., 8132.,  8488.,
      8844.,  9200.,  9672.,  10032., 10392., 10752., 11244., 11608., 11972.,
      12336., 12848., 13216., 13584., 13952., 8532.,  8904.,  9276.,  9648.,
      10136., 10512., 10888., 11264., 11772., 12152., 12532., 12912., 13440.,
      13824., 14208., 14592., 8932.,  9320.,  9708.,  10096., 10600., 10992.,
      11384., 11776., 12300., 12696., 13092., 13488., 14032., 14432., 14832.,
      15232.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1816., 1844., 2554., 2593., 2632., 1600., 1624., 2151., 2184., 3021.,
      3066., 3111., 1884., 1911., 2514., 2547., 3516., 3561., 3606., 2181.,
      2208., 2877., 2910., 4011., 4056., 4101., 2478., 2505., 3240., 3273.,
      4506., 4551., 4596., 2775., 2802., 1272., 1288., 1705., 1726., 1747.,
      1000., 1012., 1448., 1464., 1936., 1957., 1978., 1132., 1144.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      342., 352., 362.,  372.,  382.,  392.,  402.,  452.,  462., 472.,
      482., 492., 502.,  512.,  562.,  572.,  582.,  592.,  602., 612.,
      622., 672., 682.,  692.,  702.,  712.,  722.,  732.,  782., 792.,
      802., 812., 822.,  832.,  842.,  892.,  902.,  912.,  922., 932.,
      942., 952., 1002., 1012., 1022., 1032., 1042., 1052., 1062.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3392., 3632., 3444., 3688., 4748., 5108., 4820., 5186., 4892., 5264.,
      2956., 3200., 3000., 3248., 4008., 4302., 4068., 4368., 5601., 6042.,
      5682., 6132., 5763., 6222., 3468., 3768., 3516., 3822., 4668., 5028.,
      4728., 5094., 6492., 7032., 6573., 7122., 6654., 7212., 3996., 4362.,
      4044., 4416., 5328., 5754., 5388., 5820., 7383., 8022., 7464., 8112.,
      7545., 8202., 4524., 4956., 4572., 5010., 5988., 6480., 6048., 6546.,
      8274., 9012., 8355., 9102., 8436., 9192., 5052., 5550., 5100., 5604.,
      2260., 2544., 2288., 2576., 2984., 3410., 3020., 3452., 3056., 3494.,
      1712., 2000., 1732., 2024., 2568., 2896., 2596., 2928., 3380., 3872.,
      3416., 3914., 3452., 3956., 1932., 2264., 1952., 2288.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      584.,  684.,  600.,  704.,  616.,  724.,  632.,  744.,  648.,  764.,
      664.,  784.,  680.,  804.,  760.,  904.,  776.,  924.,  792.,  944.,
      808.,  964.,  824.,  984.,  840.,  1004., 856.,  1024., 936.,  1124.,
      952.,  1144., 968.,  1164., 984.,  1184., 1000., 1204., 1016., 1224.,
      1032., 1244., 1112., 1344., 1128., 1364., 1144., 1384., 1160., 1404.,
      1176., 1424., 1192., 1444., 1208., 1464., 1288., 1564., 1304., 1584.,
      1320., 1604., 1336., 1624., 1352., 1644., 1368., 1664., 1384., 1684.,
      1464., 1784., 1480., 1804., 1496., 1824., 1512., 1844., 1528., 1864.,
      1544., 1884., 1560., 1904., 1640., 2004., 1656., 2024., 1672., 2044.,
      1688., 2064., 1704., 2084., 1720., 2104., 1736., 2124.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6544.,  6784.,  7024.,  7264.,  6644.,  6888.,  7132.,  7376.,  9136.,
      9496.,  9856.,  10216., 9274.,  9640.,  10006., 10372., 9412.,  9784.,
      10156., 10528., 5668.,  5912.,  6156.,  6400.,  5752.,  6000.,  6248.,
      6496.,  7722.,  8016.,  8310.,  8604.,  7836.,  8136.,  8436.,  8736.,
      10761., 11202., 11643., 12084., 10914., 11364., 11814., 12264., 11067.,
      11526., 11985., 12444., 6636.,  6936.,  7236.,  7536.,  6726.,  7032.,
      7338.,  7644.,  8976.,  9336.,  9696.,  10056., 9090.,  9456.,  9822.,
      10188., 12444., 12984., 13524., 14064., 12597., 13146., 13695., 14244.,
      12750., 13308., 13866., 14424., 7626.,  7992.,  8358.,  8724.,  7716.,
      8088.,  8460.,  8832.,  10230., 10656., 11082., 11508., 10344., 10776.,
      11208., 11640., 14127., 14766., 15405., 16044., 14280., 14928., 15576.,
      16224., 14433., 15090., 15747., 16404., 8616.,  9048.,  9480.,  9912.,
      8706.,  9144.,  9582.,  10020., 11484., 11976., 12468., 12960., 11598.,
      12096., 12594., 13092., 15810., 16548., 17286., 18024., 15963., 16710.,
      17457., 18204., 16116., 16872., 17628., 18384., 9606.,  10104., 10602.,
      11100., 9696.,  10200., 10704., 11208., 4236.,  4520.,  4804.,  5088.,
      4288.,  4576.,  4864.,  5152.,  5542.,  5968.,  6394.,  6820.,  5608.,
      6040.,  6472.,  6904.,  5674.,  6112.,  6550.,  6988.,  3136.,  3424.,
      3712.,  4000.,  3172.,  3464.,  3756.,  4048.,  4808.,  5136.,  5464.,
      5792.,  4860.,  5192.,  5524.,  5856.,  6268.,  6760.,  7252.,  7744.,
      6334.,  6832.,  7330.,  7828.,  6400.,  6904.,  7408.,  7912.,  3532.,
      3864.,  4196.,  4528.,  3568.,  3904.,  4240.,  4576.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1068., 1168., 1268., 1368., 1096., 1200., 1304., 1408., 1124., 1232.,
      1340., 1448., 1152., 1264., 1376., 1488., 1180., 1296., 1412., 1528.,
      1208., 1328., 1448., 1568., 1236., 1360., 1484., 1608., 1376., 1520.,
      1664., 1808., 1404., 1552., 1700., 1848., 1432., 1584., 1736., 1888.,
      1460., 1616., 1772., 1928., 1488., 1648., 1808., 1968., 1516., 1680.,
      1844., 2008., 1544., 1712., 1880., 2048., 1684., 1872., 2060., 2248.,
      1712., 1904., 2096., 2288., 1740., 1936., 2132., 2328., 1768., 1968.,
      2168., 2368., 1796., 2000., 2204., 2408., 1824., 2032., 2240., 2448.,
      1852., 2064., 2276., 2488., 1992., 2224., 2456., 2688., 2020., 2256.,
      2492., 2728., 2048., 2288., 2528., 2768., 2076., 2320., 2564., 2808.,
      2104., 2352., 2600., 2848., 2132., 2384., 2636., 2888., 2160., 2416.,
      2672., 2928., 2300., 2576., 2852., 3128., 2328., 2608., 2888., 3168.,
      2356., 2640., 2924., 3208., 2384., 2672., 2960., 3248., 2412., 2704.,
      2996., 3288., 2440., 2736., 3032., 3328., 2468., 2768., 3068., 3368.,
      2608., 2928., 3248., 3568., 2636., 2960., 3284., 3608., 2664., 2992.,
      3320., 3648., 2692., 3024., 3356., 3688., 2720., 3056., 3392., 3728.,
      2748., 3088., 3428., 3768., 2776., 3120., 3464., 3808., 2916., 3280.,
      3644., 4008., 2944., 3312., 3680., 4048., 2972., 3344., 3716., 4088.,
      3000., 3376., 3752., 4128., 3028., 3408., 3788., 4168., 3056., 3440.,
      3824., 4208., 3084., 3472., 3860., 4248.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6732.,  7264.,  6836.,  7376.,  9424.,  10216., 9568.,  10372., 9712.,
      10528., 5868.,  6400.,  5956.,  6496.,  7956.,  8604.,  8076.,  8736.,
      11121., 12084., 11283., 12264., 11445., 12444., 6888.,  7536.,  6984.,
      7644.,  9276.,  10056., 9396.,  10188., 12903., 14064., 13065., 14244.,
      13227., 14424., 7944.,  8724.,  8040.,  8832.,  10596., 11508., 10716.,
      11640., 14685., 16044., 14847., 16224., 15009., 16404., 9000.,  9912.,
      9096.,  10020., 11916., 12960., 12036., 13092., 16467., 18024., 16629.,
      18204., 16791., 18384., 10056., 11100., 10152., 11208., 4492.,  5088.,
      4548.,  5152.,  5932.,  6820.,  6004.,  6904.,  6076.,  6988.,  3404.,
      4000.,  3444.,  4048.,  5108.,  5792.,  5164.,  5856.,  6724.,  7744.,
      6796.,  7828.,  6868.,  7912.,  3844.,  4528.,  3884.,  4576.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1152., 1368., 1184., 1408., 1216., 1448., 1248., 1488., 1280., 1528.,
      1312., 1568., 1344., 1608., 1504., 1808., 1536., 1848., 1568., 1888.,
      1600., 1928., 1632., 1968., 1664., 2008., 1696., 2048., 1856., 2248.,
      1888., 2288., 1920., 2328., 1952., 2368., 1984., 2408., 2016., 2448.,
      2048., 2488., 2208., 2688., 2240., 2728., 2272., 2768., 2304., 2808.,
      2336., 2848., 2368., 2888., 2400., 2928., 2560., 3128., 2592., 3168.,
      2624., 3208., 2656., 3248., 2688., 3288., 2720., 3328., 2752., 3368.,
      2912., 3568., 2944., 3608., 2976., 3648., 3008., 3688., 3040., 3728.,
      3072., 3768., 3104., 3808., 3264., 4008., 3296., 4048., 3328., 4088.,
      3360., 4128., 3392., 4168., 3424., 4208., 3456., 4248.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12988., 13464., 14048., 14528., 13188., 13672., 14264., 14752., 18134.,
      18848., 19712., 20432., 18410., 19136., 20012., 20744., 18686., 19424.,
      20312., 21056., 11252., 11736., 12312., 12800., 11420., 11912., 12496.,
      12992., 15330., 15912., 16620., 17208., 15558., 16152., 16872., 17472.,
      21369., 22242., 23286., 24168., 21675., 22566., 23628., 24528., 21981.,
      22890., 23970., 24888., 13182., 13776., 14472., 15072., 13362., 13968.,
      14676., 15288., 17838., 18552., 19392., 20112., 18066., 18792., 19644.,
      20376., 24735., 25806., 27048., 28128., 25041., 26130., 27390., 28488.,
      25347., 26454., 27732., 28848., 15162., 15888., 16716., 17448., 15342.,
      16080., 16920., 17664., 20346., 21192., 22164., 23016., 20574., 21432.,
      22416., 23280., 28101., 29370., 30810., 32088., 28407., 29694., 31152.,
      32448., 28713., 30018., 31494., 32808., 17142., 18000., 18960., 19824.,
      17322., 18192., 19164., 20040., 22854., 23832., 24936., 25920., 23082.,
      24072., 25188., 26184., 31467., 32934., 34572., 36048., 31773., 33258.,
      34914., 36408., 32079., 33582., 35256., 36768., 19122., 20112., 21204.,
      22200., 19302., 20304., 21408., 22416., 8420.,  8984.,  9608.,  10176.,
      8524.,  9096.,  9728.,  10304., 11018., 11864., 12788., 13640., 11150.,
      12008., 12944., 13808., 11282., 12152., 13100., 13976., 6236.,  6808.,
      7424.,  8000.,  6308.,  6888.,  7512.,  8096.,  9564.,  10216., 10928.,
      11584., 9668.,  10328., 11048., 11712., 12470., 13448., 14504., 15488.,
      12602., 13592., 14660., 15656., 12734., 13736., 14816., 15824., 7028.,
      7688.,  8392.,  9056.,  7100.,  7768.,  8480.,  9152.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2108., 2304., 2536., 2736., 2164., 2368., 2608., 2816., 2220., 2432.,
      2680., 2896., 2276., 2496., 2752., 2976., 2332., 2560., 2824., 3056.,
      2388., 2624., 2896., 3136., 2444., 2688., 2968., 3216., 2724., 3008.,
      3328., 3616., 2780., 3072., 3400., 3696., 2836., 3136., 3472., 3776.,
      2892., 3200., 3544., 3856., 2948., 3264., 3616., 3936., 3004., 3328.,
      3688., 4016., 3060., 3392., 3760., 4096., 3340., 3712., 4120., 4496.,
      3396., 3776., 4192., 4576., 3452., 3840., 4264., 4656., 3508., 3904.,
      4336., 4736., 3564., 3968., 4408., 4816., 3620., 4032., 4480., 4896.,
      3676., 4096., 4552., 4976., 3956., 4416., 4912., 5376., 4012., 4480.,
      4984., 5456., 4068., 4544., 5056., 5536., 4124., 4608., 5128., 5616.,
      4180., 4672., 5200., 5696., 4236., 4736., 5272., 5776., 4292., 4800.,
      5344., 5856., 4572., 5120., 5704., 6256., 4628., 5184., 5776., 6336.,
      4684., 5248., 5848., 6416., 4740., 5312., 5920., 6496., 4796., 5376.,
      5992., 6576., 4852., 5440., 6064., 6656., 4908., 5504., 6136., 6736.,
      5188., 5824., 6496., 7136., 5244., 5888., 6568., 7216., 5300., 5952.,
      6640., 7296., 5356., 6016., 6712., 7376., 5412., 6080., 6784., 7456.,
      5468., 6144., 6856., 7536., 5524., 6208., 6928., 7616., 5804., 6528.,
      7288., 8016., 5860., 6592., 7360., 8096., 5916., 6656., 7432., 8176.,
      5972., 6720., 7504., 8256., 6028., 6784., 7576., 8336., 6084., 6848.,
      7648., 8416., 6140., 6912., 7720., 8496.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9884.,  10104., 10324., 10544., 10976., 11200., 11424., 11648., 10276.,
      10504., 10732., 10960., 11400., 11632., 11864., 12096., 13666., 13996.,
      14326., 14656., 15280., 15616., 15952., 16288., 14206., 14548., 14890.,
      15232., 15868., 16216., 16564., 16912., 14746., 15100., 15454., 15808.,
      16456., 16816., 17176., 17536., 8452.,  8680.,  8908.,  9136.,  9544.,
      9776.,  10008., 10240., 8780.,  9016.,  9252.,  9488.,  9904.,  10144.,
      10384., 10624., 14462., 14788., 15114., 15440., 16012., 16344., 16676.,
      17008., 14906., 15244., 15582., 15920., 16504., 16848., 17192., 17536.,
      19977., 20466., 20955., 21444., 22266., 22764., 23262., 23760., 20571.,
      21078., 21585., 22092., 22932., 23448., 23964., 24480., 21165., 21690.,
      22215., 22740., 23598., 24132., 24666., 25200., 12202., 12540., 12878.,
      13216., 13752., 14096., 14440., 14784., 12550., 12900., 13250., 13600.,
      14148., 14504., 14860., 15216., 19346., 19804., 20262., 20720., 21424.,
      21888., 22352., 22816., 19790., 20260., 20730., 21200., 21916., 22392.,
      22868., 23344., 26511., 27198., 27885., 28572., 29592., 30288., 30984.,
      31680., 21857., 22434., 23011., 23588., 24498., 25084., 25670., 26256.,
      22451., 23046., 23641., 24236., 25164., 25768., 26372., 26976., 16030.,
      16500., 16970., 17440., 18108., 18584., 19060., 19536., 16378., 16860.,
      17342., 17824., 18504., 18992., 19480., 19968., 14758., 15092., 15426.,
      15760., 16340., 16680., 17020., 17360., 15202., 15548., 15894., 16240.,
      16832., 17184., 17536., 17888., 20373., 20874., 21375., 21876., 22710.,
      23220., 23730., 24240., 20967., 21486., 22005., 22524., 23376., 23904.,
      24432., 24960., 21561., 22098., 22635., 23172., 24042., 24588., 25134.,
      25680., 12434., 12780., 13126., 13472., 14016., 14368., 14720., 15072.,
      12782., 13140., 13498., 13856., 14412., 14776., 15140., 15504., 19642.,
      20108., 20574., 21040., 21752., 22224., 22696., 23168., 11766., 12116.,
      12466., 12816., 13412., 13768., 14124., 14480., 18587., 19158., 19729.,
      20300., 21204., 21784., 22364., 22944., 19181., 19770., 20359., 20948.,
      21870., 22468., 23066., 23664., 19775., 20382., 20989., 21596., 22536.,
      23152., 23768., 24384., 8966.,  9316.,  9666.,  10016., 10564., 10920.,
      11276., 11632., 9314.,  9676.,  10038., 10400., 10960., 11328., 11696.,
      12064., 6804.,  7112.,  7420.,  7728.,  8152.,  8464.,  8776.,  9088.,
      7004.,  7320.,  7636.,  7952.,  8384.,  8704.,  9024.,  9344.,  8518.,
      8980.,  9442.,  9904.,  10516., 10984., 11452., 11920., 8770.,  9244.,
      9718.,  10192., 10816., 11296., 11776., 12256., 9022.,  9508.,  9994.,
      10480., 11116., 11608., 12100., 12592., 4476.,  4792.,  5108.,  5424.,
      5824.,  6144.,  6464.,  6784.,  4612.,  4936.,  5260.,  5584.,  5992.,
      6320.,  6648.,  6976.,  9004.,  9400.,  9796.,  10192., 10704., 11104.,
      11504., 11904., 9204.,  9608.,  10012., 10416., 10936., 11344., 11752.,
      12160., 11290., 11884., 12478., 13072., 13816., 14416., 15016., 15616.,
      9366.,  9844.,  10322., 10800., 11428., 11912., 12396., 12880., 9618.,
      10108., 10598., 11088., 11728., 12224., 12720., 13216., 5972.,  6376.,
      6780.,  7184.,  7672.,  8080.,  8488.,  8896.,  6108.,  6520.,  6932.,
      7344.,  7840.,  8256.,  8672.,  9088.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4020.,  4216.,  4412.,  4608.,  4872.,  5072.,  5272.,  5472.,  4124.,
      4328.,  4532.,  4736.,  5008.,  5216.,  5424.,  5632.,  4228.,  4440.,
      4652.,  4864.,  5144.,  5360.,  5576.,  5792.,  4332.,  4552.,  4772.,
      4992.,  5280.,  5504.,  5728.,  5952.,  4436.,  4664.,  4892.,  5120.,
      5416.,  5648.,  5880.,  6112.,  4540.,  4776.,  5012.,  5248.,  5552.,
      5792.,  6032.,  6272.,  4644.,  4888.,  5132.,  5376.,  5688.,  5936.,
      6184.,  6432.,  5164.,  5448.,  5732.,  6016.,  6368.,  6656.,  6944.,
      7232.,  5268.,  5560.,  5852.,  6144.,  6504.,  6800.,  7096.,  7392.,
      5372.,  5672.,  5972.,  6272.,  6640.,  6944.,  7248.,  7552.,  5476.,
      5784.,  6092.,  6400.,  6776.,  7088.,  7400.,  7712.,  5580.,  5896.,
      6212.,  6528.,  6912.,  7232.,  7552.,  7872.,  5684.,  6008.,  6332.,
      6656.,  7048.,  7376.,  7704.,  8032.,  5788.,  6120.,  6452.,  6784.,
      7184.,  7520.,  7856.,  8192.,  6308.,  6680.,  7052.,  7424.,  7864.,
      8240.,  8616.,  8992.,  6412.,  6792.,  7172.,  7552.,  8000.,  8384.,
      8768.,  9152.,  6516.,  6904.,  7292.,  7680.,  8136.,  8528.,  8920.,
      9312.,  6620.,  7016.,  7412.,  7808.,  8272.,  8672.,  9072.,  9472.,
      6724.,  7128.,  7532.,  7936.,  8408.,  8816.,  9224.,  9632.,  6828.,
      7240.,  7652.,  8064.,  8544.,  8960.,  9376.,  9792.,  6932.,  7352.,
      7772.,  8192.,  8680.,  9104.,  9528.,  9952.,  7452.,  7912.,  8372.,
      8832.,  9360.,  9824.,  10288., 10752., 7556.,  8024.,  8492.,  8960.,
      9496.,  9968.,  10440., 10912., 7660.,  8136.,  8612.,  9088.,  9632.,
      10112., 10592., 11072., 7764.,  8248.,  8732.,  9216.,  9768.,  10256.,
      10744., 11232., 7868.,  8360.,  8852.,  9344.,  9904.,  10400., 10896.,
      11392., 7972.,  8472.,  8972.,  9472.,  10040., 10544., 11048., 11552.,
      8076.,  8584.,  9092.,  9600.,  10176., 10688., 11200., 11712., 8596.,
      9144.,  9692.,  10240., 10856., 11408., 11960., 12512., 8700.,  9256.,
      9812.,  10368., 10992., 11552., 12112., 12672., 8804.,  9368.,  9932.,
      10496., 11128., 11696., 12264., 12832., 8908.,  9480.,  10052., 10624.,
      11264., 11840., 12416., 12992., 9012.,  9592.,  10172., 10752., 11400.,
      11984., 12568., 13152., 9116.,  9704.,  10292., 10880., 11536., 12128.,
      12720., 13312., 9220.,  9816.,  10412., 11008., 11672., 12272., 12872.,
      13472., 9740.,  10376., 11012., 11648., 12352., 12992., 13632., 14272.,
      9844.,  10488., 11132., 11776., 12488., 13136., 13784., 14432., 9948.,
      10600., 11252., 11904., 12624., 13280., 13936., 14592., 10052., 10712.,
      11372., 12032., 12760., 13424., 14088., 14752., 10156., 10824., 11492.,
      12160., 12896., 13568., 14240., 14912., 10260., 10936., 11612., 12288.,
      13032., 13712., 14392., 15072., 10364., 11048., 11732., 12416., 13168.,
      13856., 14544., 15232., 10884., 11608., 12332., 13056., 13848., 14576.,
      15304., 16032., 10988., 11720., 12452., 13184., 13984., 14720., 15456.,
      16192., 11092., 11832., 12572., 13312., 14120., 14864., 15608., 16352.,
      11196., 11944., 12692., 13440., 14256., 15008., 15760., 16512., 11300.,
      12056., 12812., 13568., 14392., 15152., 15912., 16672., 11404., 12168.,
      12932., 13696., 14528., 15296., 16064., 16832., 11508., 12280., 13052.,
      13824., 14664., 15440., 16216., 16992.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10004., 10544., 11092., 11648., 10404., 10960., 11524., 12096., 13858.,
      14656., 15466., 16288., 14410., 15232., 16066., 16912., 14962., 15808.,
      16666., 17536., 8596.,  9136.,  9684.,  10240., 8932.,  9488.,  10052.,
      10624., 14674., 15440., 16218., 17008., 15130., 15920., 16722., 17536.,
      20313., 21444., 22593., 23760., 20925., 22092., 23277., 24480., 21537.,
      22740., 23961., 25200., 12450., 13216., 13994., 14784., 12810., 13600.,
      14402., 15216., 19690., 20720., 21762., 22816., 20146., 21200., 22266.,
      23344., 27045., 28572., 30117., 31680., 22281., 23588., 24913., 26256.,
      22893., 24236., 25597., 26976., 16410., 17440., 18482., 19536., 16770.,
      17824., 18890., 19968., 14978., 15760., 16554., 17360., 15434., 16240.,
      17058., 17888., 20721., 21876., 23049., 24240., 21333., 22524., 23733.,
      24960., 21945., 23172., 24417., 25680., 12690., 13472., 14266., 15072.,
      13050., 13856., 14674., 15504., 19994., 21040., 22098., 23168., 12002.,
      12816., 13642., 14480., 19005., 20300., 21613., 22944., 19617., 20948.,
      22297., 23664., 20229., 21596., 22981., 24384., 9226.,  10016., 10818.,
      11632., 9586.,  10400., 11226., 12064., 7060.,  7728.,  8404.,  9088.,
      7268.,  7952.,  8644.,  9344.,  8914.,  9904.,  10906., 11920., 9178.,
      10192., 11218., 12256., 9442.,  10480., 11530., 12592., 4756.,  5424.,
      6100.,  6784.,  4900.,  5584.,  6276.,  6976.,  9348.,  10192., 11044.,
      11904., 9556.,  10416., 11284., 12160., 11818., 13072., 14338., 15616.,
      9778.,  10800., 11834., 12880., 10042., 11088., 12146., 13216., 6340.,
      7184.,  8036.,  8896.,  6484.,  7344.,  8212.,  9088.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4188.,  4608.,  5036.,  5472.,  4300.,  4736.,  5180.,  5632.,  4412.,
      4864.,  5324.,  5792.,  4524.,  4992.,  5468.,  5952.,  4636.,  5120.,
      5612.,  6112.,  4748.,  5248.,  5756.,  6272.,  4860.,  5376.,  5900.,
      6432.,  5420.,  6016.,  6620.,  7232.,  5532.,  6144.,  6764.,  7392.,
      5644.,  6272.,  6908.,  7552.,  5756.,  6400.,  7052.,  7712.,  5868.,
      6528.,  7196.,  7872.,  5980.,  6656.,  7340.,  8032.,  6092.,  6784.,
      7484.,  8192.,  6652.,  7424.,  8204.,  8992.,  6764.,  7552.,  8348.,
      9152.,  6876.,  7680.,  8492.,  9312.,  6988.,  7808.,  8636.,  9472.,
      7100.,  7936.,  8780.,  9632.,  7212.,  8064.,  8924.,  9792.,  7324.,
      8192.,  9068.,  9952.,  7884.,  8832.,  9788.,  10752., 7996.,  8960.,
      9932.,  10912., 8108.,  9088.,  10076., 11072., 8220.,  9216.,  10220.,
      11232., 8332.,  9344.,  10364., 11392., 8444.,  9472.,  10508., 11552.,
      8556.,  9600.,  10652., 11712., 9116.,  10240., 11372., 12512., 9228.,
      10368., 11516., 12672., 9340.,  10496., 11660., 12832., 9452.,  10624.,
      11804., 12992., 9564.,  10752., 11948., 13152., 9676.,  10880., 12092.,
      13312., 9788.,  11008., 12236., 13472., 10348., 11648., 12956., 14272.,
      10460., 11776., 13100., 14432., 10572., 11904., 13244., 14592., 10684.,
      12032., 13388., 14752., 10796., 12160., 13532., 14912., 10908., 12288.,
      13676., 15072., 11020., 12416., 13820., 15232., 11580., 13056., 14540.,
      16032., 11692., 13184., 14684., 16192., 11804., 13312., 14828., 16352.,
      11916., 13440., 14972., 16512., 12028., 13568., 15116., 16672., 12140.,
      13696., 15260., 16832., 12252., 13824., 15404., 16992.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19572., 20008., 20648., 21088., 21740., 22184., 22848., 23296., 20356.,
      20808., 21464., 21920., 22588., 23048., 23728., 24192., 27062., 27716.,
      28652., 29312., 30266., 30932., 31904., 32576., 28142., 28820., 29780.,
      30464., 31442., 32132., 33128., 33824., 29222., 29924., 30908., 31616.,
      32618., 33332., 34352., 35072., 16740., 17192., 17816., 18272., 18908.,
      19368., 20016., 20480., 17396., 17864., 18504., 18976., 19628., 20104.,
      20768., 21248., 28702., 29348., 30228., 30880., 31778., 32436., 33352.,
      34016., 29590., 30260., 31164., 31840., 32762., 33444., 34384., 35072.,
      39657., 40626., 41910., 42888., 44199., 45186., 46524., 47520., 40845.,
      41850., 43170., 44184., 45531., 46554., 47928., 48960., 42033., 43074.,
      44430., 45480., 46863., 47922., 49332., 50400., 24230., 24900., 25756.,
      26432., 27306., 27988., 28880., 29568., 24926., 25620., 26500., 27200.,
      28098., 28804., 29720., 30432., 38470., 39380., 40524., 41440., 42602.,
      43524., 44704., 45632., 39358., 40292., 41460., 42400., 43586., 44532.,
      45736., 46688., 52725., 54090., 55770., 57144., 58851., 60234., 61968.,
      63360., 43417., 44562., 46022., 47176., 48663., 49826., 51340., 52512.,
      44605., 45786., 47282., 48472., 49995., 51194., 52744., 53952., 31886.,
      32820., 33940., 34880., 36018., 36964., 38120., 39072., 32582., 33540.,
      34684., 35648., 36810., 37780., 38960., 39936., 29294., 29956., 30852.,
      31520., 32434., 33108., 34040., 34720., 30182., 30868., 31788., 32480.,
      33418., 34116., 35072., 35776., 40449., 41442., 42750., 43752., 45087.,
      46098., 47460., 48480., 41637., 42666., 44010., 45048., 46419., 47466.,
      48864., 49920., 42825., 43890., 45270., 46344., 47751., 48834., 50268.,
      51360., 24694., 25380., 26252., 26944., 27834., 28532., 29440., 30144.,
      25390., 26100., 26996., 27712., 28626., 29348., 30280., 31008., 39062.,
      39988., 41148., 42080., 43258., 44196., 45392., 46336., 23310., 24004.,
      24932., 25632., 26578., 27284., 28248., 28960., 36877., 38010., 39458.,
      40600., 42075., 43226., 44728., 45888., 38065., 39234., 40718., 41896.,
      43407., 44594., 46132., 47328., 39253., 40458., 41978., 43192., 44739.,
      45962., 47536., 48768., 17758., 18452., 19332., 20032., 20930., 21636.,
      22552., 23264., 18454., 19172., 20076., 20800., 21722., 22452., 23392.,
      24128., 13508., 14120., 14840., 15456., 16188., 16808., 17552., 18176.,
      13908., 14536., 15272., 15904., 16652., 17288., 18048., 18688., 16910.,
      17828., 18884., 19808., 20882., 21812., 22904., 23840., 17414., 18356.,
      19436., 20384., 21482., 22436., 23552., 24512., 17918., 18884., 19988.,
      20960., 22082., 23060., 24200., 25184., 8884.,  9512.,  10216., 10848.,
      11564., 12200., 12928., 13568., 9156.,  9800.,  10520., 11168., 11900.,
      12552., 13296., 13952., 17908., 18696., 19592., 20384., 21292., 22088.,
      23008., 23808., 18308., 19112., 20024., 20832., 21756., 22568., 23504.,
      24320., 22454., 23636., 24956., 26144., 27482., 28676., 30032., 31232.,
      18606., 19556., 20644., 21600., 22706., 23668., 24792., 25760., 19110.,
      20084., 21196., 22176., 23306., 24292., 25440., 26432., 11876., 12680.,
      13560., 14368., 15260., 16072., 16976., 17792., 12148., 12968., 13864.,
      14688., 15596., 16424., 17344., 18176.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7988.,  8376.,  8824.,  9216.,  9676.,  10072., 10544., 10944., 8196.,
      8600.,  9064.,  9472.,  9948.,  10360., 10848., 11264., 8404.,  8824.,
      9304.,  9728.,  10220., 10648., 11152., 11584., 8612.,  9048.,  9544.,
      9984.,  10492., 10936., 11456., 11904., 8820.,  9272.,  9784.,  10240.,
      10764., 11224., 11760., 12224., 9028.,  9496.,  10024., 10496., 11036.,
      11512., 12064., 12544., 9236.,  9720.,  10264., 10752., 11308., 11800.,
      12368., 12864., 10276., 10840., 11464., 12032., 12668., 13240., 13888.,
      14464., 10484., 11064., 11704., 12288., 12940., 13528., 14192., 14784.,
      10692., 11288., 11944., 12544., 13212., 13816., 14496., 15104., 10900.,
      11512., 12184., 12800., 13484., 14104., 14800., 15424., 11108., 11736.,
      12424., 13056., 13756., 14392., 15104., 15744., 11316., 11960., 12664.,
      13312., 14028., 14680., 15408., 16064., 11524., 12184., 12904., 13568.,
      14300., 14968., 15712., 16384., 12564., 13304., 14104., 14848., 15660.,
      16408., 17232., 17984., 12772., 13528., 14344., 15104., 15932., 16696.,
      17536., 18304., 12980., 13752., 14584., 15360., 16204., 16984., 17840.,
      18624., 13188., 13976., 14824., 15616., 16476., 17272., 18144., 18944.,
      13396., 14200., 15064., 15872., 16748., 17560., 18448., 19264., 13604.,
      14424., 15304., 16128., 17020., 17848., 18752., 19584., 13812., 14648.,
      15544., 16384., 17292., 18136., 19056., 19904., 14852., 15768., 16744.,
      17664., 18652., 19576., 20576., 21504., 15060., 15992., 16984., 17920.,
      18924., 19864., 20880., 21824., 15268., 16216., 17224., 18176., 19196.,
      20152., 21184., 22144., 15476., 16440., 17464., 18432., 19468., 20440.,
      21488., 22464., 15684., 16664., 17704., 18688., 19740., 20728., 21792.,
      22784., 15892., 16888., 17944., 18944., 20012., 21016., 22096., 23104.,
      16100., 17112., 18184., 19200., 20284., 21304., 22400., 23424., 17140.,
      18232., 19384., 20480., 21644., 22744., 23920., 25024., 17348., 18456.,
      19624., 20736., 21916., 23032., 24224., 25344., 17556., 18680., 19864.,
      20992., 22188., 23320., 24528., 25664., 17764., 18904., 20104., 21248.,
      22460., 23608., 24832., 25984., 17972., 19128., 20344., 21504., 22732.,
      23896., 25136., 26304., 18180., 19352., 20584., 21760., 23004., 24184.,
      25440., 26624., 18388., 19576., 20824., 22016., 23276., 24472., 25744.,
      26944., 19428., 20696., 22024., 23296., 24636., 25912., 27264., 28544.,
      19636., 20920., 22264., 23552., 24908., 26200., 27568., 28864., 19844.,
      21144., 22504., 23808., 25180., 26488., 27872., 29184., 20052., 21368.,
      22744., 24064., 25452., 26776., 28176., 29504., 20260., 21592., 22984.,
      24320., 25724., 27064., 28480., 29824., 20468., 21816., 23224., 24576.,
      25996., 27352., 28784., 30144., 20676., 22040., 23464., 24832., 26268.,
      27640., 29088., 30464., 21716., 23160., 24664., 26112., 27628., 29080.,
      30608., 32064., 21924., 23384., 24904., 26368., 27900., 29368., 30912.,
      32384., 22132., 23608., 25144., 26624., 28172., 29656., 31216., 32704.,
      22340., 23832., 25384., 26880., 28444., 29944., 31520., 33024., 22548.,
      24056., 25624., 27136., 28716., 30232., 31824., 33344., 22756., 24280.,
      25864., 27392., 28988., 30520., 32128., 33664., 22964., 24504., 26104.,
      27648., 29260., 30808., 32432., 33984.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10164., 10344., 10524., 10704., 11160., 11344., 11528., 11712., 12188.,
      12376., 12564., 12752., 13248., 13440., 13632., 13824., 11204., 11400.,
      11596., 11792., 12264., 12464., 12664., 12864., 13356., 13560., 13764.,
      13968., 14480., 14688., 14896., 15104., 17630., 17900., 18170., 18440.,
      19140., 19416., 19692., 19968., 20698., 20980., 21262., 21544., 22304.,
      22592., 22880., 23168., 19254., 19548., 19842., 20136., 20860., 21160.,
      21460., 21760., 22514., 22820., 23126., 23432., 24216., 24528., 24840.,
      25152., 20878., 21196., 21514., 21832., 22580., 22904., 23228., 23552.,
      24330., 24660., 24990., 25320., 26128., 26464., 26800., 27136., 18436.,
      18632., 18828., 19024., 19560., 19760., 19960., 20160., 20716., 20920.,
      21124., 21328., 21904., 22112., 22320., 22528., 19732., 19944., 20156.,
      20368., 20920., 21136., 21352., 21568., 22140., 22360., 22580., 22800.,
      23392., 23616., 23840., 24064., 22582., 22972., 23362., 23752., 24476.,
      24872., 25268., 25664., 26418., 26820., 27222., 27624., 28408., 28816.,
      29224., 29632., 23822., 24236., 24650., 25064., 25812., 26232., 26652.,
      27072., 27850., 28276., 28702., 29128., 29936., 30368., 30800., 31232.,
      36745., 37202., 37659., 38116., 39066., 39532., 39998., 40464., 41459.,
      41934., 42409., 42884., 43924., 44408., 44892., 45376., 38573., 39066.,
      39559., 40052., 41038., 41540., 42042., 42544., 43575., 44086., 44597.,
      45108., 46184., 46704., 47224., 47744., 40401., 40930., 41459., 41988.,
      43010., 43548., 44086., 44624., 45691., 46238., 46785., 47332., 48444.,
      49000., 49556., 50112., 33198., 33612., 34026., 34440., 35220., 35640.,
      36060., 36480., 37290., 37716., 38142., 38568., 39408., 39840., 40272.,
      40704., 20102., 20412., 20722., 21032., 21708., 22024., 22340., 22656.,
      23362., 23684., 24006., 24328., 25064., 25392., 25720., 26048., 21630.,
      22028., 22426., 22824., 23556., 23960., 24364., 24768., 25530., 25940.,
      26350., 26760., 27552., 27968., 28384., 28800., 22870., 23292., 23714.,
      24136., 24892., 25320., 25748., 26176., 26962., 27396., 27830., 28264.,
      29080., 29520., 29960., 30400., 29973., 30570., 31167., 31764., 32854.,
      33460., 34066., 34672., 35807., 36422., 37037., 37652., 38832., 39456.,
      40080., 40704., 21433., 21938., 22443., 22948., 23946., 24460., 24974.,
      25488., 26531., 27054., 27577., 28100., 29188., 29720., 30252., 30784.,
      23261., 23802., 24343., 24884., 25918., 26468., 27018., 27568., 28647.,
      29206., 29765., 30324., 31448., 32016., 32584., 33152., 21366., 21788.,
      22210., 22632., 23420., 23848., 24276., 24704., 25522., 25956., 26390.,
      26824., 27672., 28112., 28552., 28992., 22734., 23180., 23626., 24072.,
      24884., 25336., 25788., 26240., 27082., 27540., 27998., 28456., 29328.,
      29792., 30256., 30720., 16582., 16988., 17394., 17800., 18540., 18952.,
      19364., 19776., 20546., 20964., 21382., 21800., 22600., 23024., 23448.,
      23872., 17822., 18252., 18682., 19112., 19876., 20312., 20748., 21184.,
      21978., 22420., 22862., 23304., 24128., 24576., 25024., 25472., 25121.,
      25730., 26339., 26948., 28050., 28668., 29286., 29904., 31051., 31678.,
      32305., 32932., 34124., 34760., 35396., 36032., 26949., 27594., 28239.,
      28884., 30022., 30676., 31330., 31984., 33167., 33830., 34493., 35156.,
      36384., 37056., 37728., 38400., 24553., 25106., 25659., 26212., 27258.,
      27820., 28382., 28944., 30035., 30606., 31177., 31748., 32884., 33464.,
      34044., 34624., 21822., 22252., 22682., 23112., 23908., 24344., 24780.,
      25216., 26042., 26484., 26926., 27368., 28224., 28672., 29120., 29568.,
      23190., 23644., 24098., 24552., 25372., 25832., 26292., 26752., 27602.,
      28068., 28534., 29000., 29880., 30352., 30824., 31296., 23822., 24236.,
      24650., 25064., 25812., 26232., 26652., 27072., 27850., 28276., 28702.,
      29128., 29936., 30368., 30800., 31232., 24934., 25244., 25554., 25864.,
      26508., 26824., 27140., 27456., 28130., 28452., 28774., 29096., 29800.,
      30128., 30456., 30784., 38573., 39066., 39559., 40052., 41038., 41540.,
      42042., 42544., 43575., 44086., 44597., 45108., 46184., 46704., 47224.,
      47744., 40401., 40930., 41459., 41988., 43010., 43548., 44086., 44624.,
      45691., 46238., 46785., 47332., 48444., 49000., 49556., 50112., 42229.,
      42794., 43359., 43924., 44982., 45556., 46130., 46704., 47807., 48390.,
      48973., 49556., 50704., 51296., 51888., 52480., 20102., 20412., 20722.,
      21032., 21708., 22024., 22340., 22656., 23362., 23684., 24006., 24328.,
      25064., 25392., 25720., 26048., 21470., 21804., 22138., 22472., 23172.,
      23512., 23852., 24192., 24922., 25268., 25614., 25960., 26720., 27072.,
      27424., 27776., 20004., 20360., 20716., 21072., 21640., 22000., 22360.,
      22720., 23308., 23672., 24036., 24400., 25008., 25376., 25744., 26112.,
      20788., 21160., 21532., 21904., 22488., 22864., 23240., 23616., 24220.,
      24600., 24980., 25360., 25984., 26368., 26752., 27136., 16006., 16412.,
      16818., 17224., 17900., 18312., 18724., 19136., 19842., 20260., 20678.,
      21096., 21832., 22256., 22680., 23104., 16990., 17420., 17850., 18280.,
      18980., 19416., 19852., 20288., 21018., 21460., 21902., 22344., 23104.,
      23552., 24000., 24448., 17974., 18428., 18882., 19336., 20060., 20520.,
      20980., 21440., 22194., 22660., 23126., 23592., 24376., 24848., 25320.,
      25792., 14836., 15208., 15580., 15952., 16472., 16848., 17224., 17600.,
      18140., 18520., 18900., 19280., 19840., 20224., 20608., 20992., 7044.,
      7304.,  7564.,  7824.,  8232.,  8496.,  8760.,  9024.,  9452.,  9720.,
      9988.,  10256., 10704., 10976., 11248., 11520., 9940.,  10216., 10492.,
      10768., 11256., 11536., 11816., 12096., 12604., 12888., 13172., 13456.,
      13984., 14272., 14560., 14848., 10724., 11016., 11308., 11600., 12104.,
      12400., 12696., 12992., 13516., 13816., 14116., 14416., 14960., 15264.,
      15568., 15872., 12238., 12652., 13066., 13480., 14164., 14584., 15004.,
      15424., 16138., 16564., 16990., 17416., 18160., 18592., 19024., 19456.,
      8998.,  9308.,  9618.,  9928.,  10508., 10824., 11140., 11456., 12066.,
      12388., 12710., 13032., 13672., 14000., 14328., 14656., 9982.,  10316.,
      10650., 10984., 11588., 11928., 12268., 12608., 13242., 13588., 13934.,
      14280., 14944., 15296., 15648., 16000., 6052.,  6344.,  6636.,  6928.,
      7368.,  7664.,  7960.,  8256.,  8716.,  9016.,  9316.,  9616.,  10096.,
      10400., 10704., 11008., 6580.,  6888.,  7196.,  7504.,  7960.,  8272.,
      8584.,  8896.,  9372.,  9688.,  10004., 10320., 10816., 11136., 11456.,
      11776.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15588., 15976., 16364., 16752., 17256., 17648., 18040., 18432., 18956.,
      19352., 19748., 20144., 20688., 21088., 21488., 21888., 15988., 16392.,
      16796., 17200., 17720., 18128., 18536., 18944., 19484., 19896., 20308.,
      20720., 21280., 21696., 22112., 22528., 16388., 16808., 17228., 17648.,
      18184., 18608., 19032., 19456., 20012., 20440., 20868., 21296., 21872.,
      22304., 22736., 23168., 16788., 17224., 17660., 18096., 18648., 19088.,
      19528., 19968., 20540., 20984., 21428., 21872., 22464., 22912., 23360.,
      23808., 17188., 17640., 18092., 18544., 19112., 19568., 20024., 20480.,
      21068., 21528., 21988., 22448., 23056., 23520., 23984., 24448., 17588.,
      18056., 18524., 18992., 19576., 20048., 20520., 20992., 21596., 22072.,
      22548., 23024., 23648., 24128., 24608., 25088., 17988., 18472., 18956.,
      19440., 20040., 20528., 21016., 21504., 22124., 22616., 23108., 23600.,
      24240., 24736., 25232., 25728., 19988., 20552., 21116., 21680., 22360.,
      22928., 23496., 24064., 24764., 25336., 25908., 26480., 27200., 27776.,
      28352., 28928., 20388., 20968., 21548., 22128., 22824., 23408., 23992.,
      24576., 25292., 25880., 26468., 27056., 27792., 28384., 28976., 29568.,
      20788., 21384., 21980., 22576., 23288., 23888., 24488., 25088., 25820.,
      26424., 27028., 27632., 28384., 28992., 29600., 30208., 21188., 21800.,
      22412., 23024., 23752., 24368., 24984., 25600., 26348., 26968., 27588.,
      28208., 28976., 29600., 30224., 30848., 21588., 22216., 22844., 23472.,
      24216., 24848., 25480., 26112., 26876., 27512., 28148., 28784., 29568.,
      30208., 30848., 31488., 9444.,  9832.,  10220., 10608., 11112., 11504.,
      11896., 12288., 12812., 13208., 13604., 14000., 14544., 14944., 15344.,
      15744., 9844.,  10248., 10652., 11056., 11576., 11984., 12392., 12800.,
      13340., 13752., 14164., 14576., 15136., 15552., 15968., 16384., 3396.,
      3624.,  3852.,  4080.,  4424.,  4656.,  4888.,  5120.,  5484.,  5720.,
      5956.,  6192.,  6576.,  6816.,  7056.,  7296.,  3796.,  4040.,  4284.,
      4528.,  4888.,  5136.,  5384.,  5632.,  6012.,  6264.,  6516.,  6768.,
      7168.,  7424.,  7680.,  7936.,  4196.,  4456.,  4716.,  4976.,  5352.,
      5616.,  5880.,  6144.,  6540.,  6808.,  7076.,  7344.,  7760.,  8032.,
      8304.,  8576.,  4596.,  4872.,  5148.,  5424.,  5816.,  6096.,  6376.,
      6656.,  7068.,  7352.,  7636.,  7920.,  8352.,  8640.,  8928.,  9216.,
      4996.,  5288.,  5580.,  5872.,  6280.,  6576.,  6872.,  7168.,  7596.,
      7896.,  8196.,  8496.,  8944.,  9248.,  9552.,  9856.,  5396.,  5704.,
      6012.,  6320.,  6744.,  7056.,  7368.,  7680.,  8124.,  8440.,  8756.,
      9072.,  9536.,  9856.,  10176., 10496., 5796.,  6120.,  6444.,  6768.,
      7208.,  7536.,  7864.,  8192.,  8652.,  8984.,  9316.,  9648.,  10128.,
      10464., 10800., 11136., 7796.,  8200.,  8604.,  9008.,  9528.,  9936.,
      10344., 10752., 11292., 11704., 12116., 12528., 13088., 13504., 13920.,
      14336., 8196.,  8616.,  9036.,  9456.,  9992.,  10416., 10840., 11264.,
      11820., 12248., 12676., 13104., 13680., 14112., 14544., 14976., 8596.,
      9032.,  9468.,  9904.,  10456., 10896., 11336., 11776., 12348., 12792.,
      13236., 13680., 14272., 14720., 15168., 15616., 8996.,  9448.,  9900.,
      10352., 10920., 11376., 11832., 12288., 12876., 13336., 13796., 14256.,
      14864., 15328., 15792., 16256., 9396.,  9864.,  10332., 10800., 11384.,
      11856., 12328., 12800., 13404., 13880., 14356., 14832., 15456., 15936.,
      16416., 16896., 9796.,  10280., 10764., 11248., 11848., 12336., 12824.,
      13312., 13932., 14424., 14916., 15408., 16048., 16544., 17040., 17536.,
      10196., 10696., 11196., 11696., 12312., 12816., 13320., 13824., 14460.,
      14968., 15476., 15984., 16640., 17152., 17664., 18176., 12196., 12776.,
      13356., 13936., 14632., 15216., 15800., 16384., 17100., 17688., 18276.,
      18864., 19600., 20192., 20784., 21376., 12596., 13192., 13788., 14384.,
      15096., 15696., 16296., 16896., 17628., 18232., 18836., 19440., 20192.,
      20800., 21408., 22016., 12996., 13608., 14220., 14832., 15560., 16176.,
      16792., 17408., 18156., 18776., 19396., 20016., 20784., 21408., 22032.,
      22656., 13396., 14024., 14652., 15280., 16024., 16656., 17288., 17920.,
      18684., 19320., 19956., 20592., 21376., 22016., 22656., 23296., 13796.,
      14440., 15084., 15728., 16488., 17136., 17784., 18432., 19212., 19864.,
      20516., 21168., 21968., 22624., 23280., 23936., 14196., 14856., 15516.,
      16176., 16952., 17616., 18280., 18944., 19740., 20408., 21076., 21744.,
      22560., 23232., 23904., 24576., 14596., 15272., 15948., 16624., 17416.,
      18096., 18776., 19456., 20268., 20952., 21636., 22320., 23152., 23840.,
      24528., 25216., 16596., 17352., 18108., 18864., 19736., 20496., 21256.,
      22016., 22908., 23672., 24436., 25200., 26112., 26880., 27648., 28416.,
      16996., 17768., 18540., 19312., 20200., 20976., 21752., 22528., 23436.,
      24216., 24996., 25776., 26704., 27488., 28272., 29056., 17396., 18184.,
      18972., 19760., 20664., 21456., 22248., 23040., 23964., 24760., 25556.,
      26352., 27296., 28096., 28896., 29696., 17796., 18600., 19404., 20208.,
      21128., 21936., 22744., 23552., 24492., 25304., 26116., 26928., 27888.,
      28704., 29520., 30336., 18196., 19016., 19836., 20656., 21592., 22416.,
      23240., 24064., 25020., 25848., 26676., 27504., 28480., 29312., 30144.,
      30976., 14244., 14824., 15404., 15984., 16680., 17264., 17848., 18432.,
      19148., 19736., 20324., 20912., 21648., 22240., 22832., 23424., 14644.,
      15240., 15836., 16432., 17144., 17744., 18344., 18944., 19676., 20280.,
      20884., 21488., 22240., 22848., 23456., 24064., 16388., 16808., 17228.,
      17648., 18184., 18608., 19032., 19456., 20012., 20440., 20868., 21296.,
      21872., 22304., 22736., 23168., 16788., 17224., 17660., 18096., 18648.,
      19088., 19528., 19968., 20540., 20984., 21428., 21872., 22464., 22912.,
      23360., 23808., 17188., 17640., 18092., 18544., 19112., 19568., 20024.,
      20480., 21068., 21528., 21988., 22448., 23056., 23520., 23984., 24448.,
      17588., 18056., 18524., 18992., 19576., 20048., 20520., 20992., 21596.,
      22072., 22548., 23024., 23648., 24128., 24608., 25088., 17988., 18472.,
      18956., 19440., 20040., 20528., 21016., 21504., 22124., 22616., 23108.,
      23600., 24240., 24736., 25232., 25728., 18388., 18888., 19388., 19888.,
      20504., 21008., 21512., 22016., 22652., 23160., 23668., 24176., 24832.,
      25344., 25856., 26368., 18788., 19304., 19820., 20336., 20968., 21488.,
      22008., 22528., 23180., 23704., 24228., 24752., 25424., 25952., 26480.,
      27008.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1996., 2767., 2806., 2845., 2884., 1756., 1780., 2364., 3273., 3318.,
      3363., 3408., 2067., 2094., 2760., 3813., 3858., 3903., 3948., 2391.,
      2418., 3156., 4353., 4398., 4443., 4488., 2715., 2742., 3552., 4893.,
      4938., 4983., 5028., 3039., 3066., 1396., 1849., 1870., 1891., 1912.,
      1096., 1108., 1588., 2101., 2122., 2143., 2164., 1240., 1252.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      370.,  380.,  390.,  400.,  410.,  420.,  430.,  490.,  500.,  510.,
      520.,  530.,  540.,  550.,  610.,  620.,  630.,  640.,  650.,  660.,
      670.,  730.,  740.,  750.,  760.,  770.,  780.,  790.,  850.,  860.,
      870.,  880.,  890.,  900.,  910.,  970.,  980.,  990.,  1000., 1010.,
      1020., 1030., 1090., 1100., 1110., 1120., 1130., 1140., 1150.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3728., 3992., 5144., 5534., 5216., 5612.,  5288., 5690., 5360., 5768.,
      3244., 3512., 3288., 3560., 4404., 4728.,  6069., 6546., 6150., 6636.,
      6231., 6726., 6312., 6816., 3804., 4134.,  3852., 4188., 5124., 5520.,
      7041., 7626., 7122., 7716., 7203., 7806.,  7284., 7896., 4380., 4782.,
      4428., 4836., 5844., 6312., 8013., 8706.,  8094., 8796., 8175., 8886.,
      8256., 8976., 4956., 5430., 5004., 5484.,  6564., 7104., 8985., 9786.,
      9066., 9876., 9147., 9966., 9228., 10056., 5532., 6078., 5580., 6132.,
      2480., 2792., 3236., 3698., 3272., 3740.,  3308., 3782., 3344., 3824.,
      1876., 2192., 1896., 2216., 2816., 3176.,  3668., 4202., 3704., 4244.,
      3740., 4286., 3776., 4328., 2116., 2480.,  2136., 2504.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      632.,  740.,  648.,  760.,  664.,  780.,  680.,  800.,  696.,  820.,
      712.,  840.,  728.,  860.,  824.,  980.,  840.,  1000., 856.,  1020.,
      872.,  1040., 888.,  1060., 904.,  1080., 920.,  1100., 1016., 1220.,
      1032., 1240., 1048., 1260., 1064., 1280., 1080., 1300., 1096., 1320.,
      1112., 1340., 1208., 1460., 1224., 1480., 1240., 1500., 1256., 1520.,
      1272., 1540., 1288., 1560., 1304., 1580., 1400., 1700., 1416., 1720.,
      1432., 1740., 1448., 1760., 1464., 1780., 1480., 1800., 1496., 1820.,
      1592., 1940., 1608., 1960., 1624., 1980., 1640., 2000., 1656., 2020.,
      1672., 2040., 1688., 2060., 1784., 2180., 1800., 2200., 1816., 2220.,
      1832., 2240., 1848., 2260., 1864., 2280., 1880., 2300.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7192.,  7456.,  7720.,  7984.,  9898.,  10288., 10678., 11068., 10036.,
      10432., 10828., 11224., 10174., 10576., 10978., 11380., 10312., 10720.,
      11128., 11536., 6220.,  6488.,  6756.,  7024.,  6304.,  6576.,  6848.,
      7120.,  8484.,  8808.,  9132.,  9456.,  11661., 12138., 12615., 13092.,
      11814., 12300., 12786., 13272., 11967., 12462., 12957., 13452., 12120.,
      12624., 13128., 13632., 7278.,  7608.,  7938.,  8268.,  7368.,  7704.,
      8040.,  8376.,  9852.,  10248., 10644., 11040., 13497., 14082., 14667.,
      15252., 13650., 14244., 14838., 15432., 13803., 14406., 15009., 15612.,
      13956., 14568., 15180., 15792., 8358.,  8760.,  9162.,  9564.,  8448.,
      8856.,  9264.,  9672.,  11220., 11688., 12156., 12624., 15333., 16026.,
      16719., 17412., 15486., 16188., 16890., 17592., 15639., 16350., 17061.,
      17772., 15792., 16512., 17232., 17952., 9438.,  9912.,  10386., 10860.,
      9528.,  10008., 10488., 10968., 12588., 13128., 13668., 14208., 17169.,
      17970., 18771., 19572., 17322., 18132., 18942., 19752., 17475., 18294.,
      19113., 19932., 17628., 18456., 19284., 20112., 10518., 11064., 11610.,
      12156., 10608., 11160., 11712., 12264., 4648.,  4960.,  5272.,  5584.,
      6010.,  6472.,  6934.,  7396.,  6076.,  6544.,  7012.,  7480.,  6142.,
      6616.,  7090.,  7564.,  6208.,  6688.,  7168.,  7648.,  3436.,  3752.,
      4068.,  4384.,  3472.,  3792.,  4112.,  4432.,  5272.,  5632.,  5992.,
      6352.,  6802.,  7336.,  7870.,  8404.,  6868.,  7408.,  7948.,  8488.,
      6934.,  7480.,  8026.,  8572.,  7000.,  7552.,  8104.,  8656.,  3868.,
      4232.,  4596.,  4960.,  3904.,  4272.,  4640.,  5008.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1156., 1264., 1372., 1480., 1184., 1296., 1408., 1520., 1212., 1328.,
      1444., 1560., 1240., 1360., 1480., 1600., 1268., 1392., 1516., 1640.,
      1296., 1424., 1552., 1680., 1324., 1456., 1588., 1720., 1492., 1648.,
      1804., 1960., 1520., 1680., 1840., 2000., 1548., 1712., 1876., 2040.,
      1576., 1744., 1912., 2080., 1604., 1776., 1948., 2120., 1632., 1808.,
      1984., 2160., 1660., 1840., 2020., 2200., 1828., 2032., 2236., 2440.,
      1856., 2064., 2272., 2480., 1884., 2096., 2308., 2520., 1912., 2128.,
      2344., 2560., 1940., 2160., 2380., 2600., 1968., 2192., 2416., 2640.,
      1996., 2224., 2452., 2680., 2164., 2416., 2668., 2920., 2192., 2448.,
      2704., 2960., 2220., 2480., 2740., 3000., 2248., 2512., 2776., 3040.,
      2276., 2544., 2812., 3080., 2304., 2576., 2848., 3120., 2332., 2608.,
      2884., 3160., 2500., 2800., 3100., 3400., 2528., 2832., 3136., 3440.,
      2556., 2864., 3172., 3480., 2584., 2896., 3208., 3520., 2612., 2928.,
      3244., 3560., 2640., 2960., 3280., 3600., 2668., 2992., 3316., 3640.,
      2836., 3184., 3532., 3880., 2864., 3216., 3568., 3920., 2892., 3248.,
      3604., 3960., 2920., 3280., 3640., 4000., 2948., 3312., 3676., 4040.,
      2976., 3344., 3712., 4080., 3004., 3376., 3748., 4120., 3172., 3568.,
      3964., 4360., 3200., 3600., 4000., 4400., 3228., 3632., 4036., 4440.,
      3256., 3664., 4072., 4480., 3284., 3696., 4108., 4520., 3312., 3728.,
      4144., 4560., 3340., 3760., 4180., 4600.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7404.,  7984.,  10216., 11068., 10360., 11224., 10504., 11380., 10648.,
      11536., 6444.,  7024.,  6532.,  7120.,  8748.,  9456.,  12057., 13092.,
      12219., 13272., 12381., 13452., 12543., 13632., 7560.,  8268.,  7656.,
      8376.,  10188., 11040., 14001., 15252., 14163., 15432., 14325., 15612.,
      14487., 15792., 8712.,  9564.,  8808.,  9672.,  11628., 12624., 15945.,
      17412., 16107., 17592., 16269., 17772., 16431., 17952., 9864.,  10860.,
      9960.,  10968., 13068., 14208., 17889., 19572., 18051., 19752., 18213.,
      19932., 18375., 20112., 11016., 12156., 11112., 12264., 4932.,  5584.,
      6436.,  7396.,  6508.,  7480.,  6580.,  7564.,  6652.,  7648.,  3732.,
      4384.,  3772.,  4432.,  5604.,  6352.,  7300.,  8404.,  7372.,  8488.,
      7444.,  8572.,  7516.,  8656.,  4212.,  4960.,  4252.,  5008.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1248., 1480., 1280., 1520., 1312., 1560., 1344., 1600., 1376., 1640.,
      1408., 1680., 1440., 1720., 1632., 1960., 1664., 2000., 1696., 2040.,
      1728., 2080., 1760., 2120., 1792., 2160., 1824., 2200., 2016., 2440.,
      2048., 2480., 2080., 2520., 2112., 2560., 2144., 2600., 2176., 2640.,
      2208., 2680., 2400., 2920., 2432., 2960., 2464., 3000., 2496., 3040.,
      2528., 3080., 2560., 3120., 2592., 3160., 2784., 3400., 2816., 3440.,
      2848., 3480., 2880., 3520., 2912., 3560., 2944., 3600., 2976., 3640.,
      3168., 3880., 3200., 3920., 3232., 3960., 3264., 4000., 3296., 4040.,
      3328., 4080., 3360., 4120., 3552., 4360., 3584., 4400., 3616., 4440.,
      3648., 4480., 3680., 4520., 3712., 4560., 3744., 4600.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14284., 14808., 15440., 15968., 19658., 20432., 21356., 22136., 19934.,
      20720., 21656., 22448., 20210., 21008., 21956., 22760., 20486., 21296.,
      22256., 23072., 12356., 12888., 13512., 14048., 12524., 13064., 13696.,
      14240., 16854., 17496., 18264., 18912., 23169., 24114., 25230., 26184.,
      23475., 24438., 25572., 26544., 23781., 24762., 25914., 26904., 24087.,
      25086., 26256., 27264., 14466., 15120., 15876., 16536., 14646., 15312.,
      16080., 16752., 19590., 20376., 21288., 22080., 26841., 28002., 29334.,
      30504., 27147., 28326., 29676., 30864., 27453., 28650., 30018., 31224.,
      27759., 28974., 30360., 31584., 16626., 17424., 18324., 19128., 16806.,
      17616., 18528., 19344., 22326., 23256., 24312., 25248., 30513., 31890.,
      33438., 34824., 30819., 32214., 33780., 35184., 31125., 32538., 34122.,
      35544., 31431., 32862., 34464., 35904., 18786., 19728., 20772., 21720.,
      18966., 19920., 20976., 21936., 25062., 26136., 27336., 28416., 34185.,
      35778., 37542., 39144., 34491., 36102., 37884., 39504., 34797., 36426.,
      38226., 39864., 35103., 36750., 38568., 40224., 20946., 22032., 23220.,
      24312., 21126., 22224., 23424., 24528., 9244.,  9864.,  10544., 11168.,
      11954., 12872., 13868., 14792., 12086., 13016., 14024., 14960., 12218.,
      13160., 14180., 15128., 12350., 13304., 14336., 15296., 6836.,  7464.,
      8136.,  8768.,  6908.,  7544.,  8224.,  8864.,  10492., 11208., 11984.,
      12704., 13538., 14600., 15740., 16808., 13670., 14744., 15896., 16976.,
      13802., 14888., 16052., 17144., 13934., 15032., 16208., 17312., 7700.,
      8424.,  9192.,  9920.,  7772.,  8504.,  9280.,  10016.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2284., 2496., 2744., 2960., 2340., 2560., 2816., 3040., 2396., 2624.,
      2888., 3120., 2452., 2688., 2960., 3200., 2508., 2752., 3032., 3280.,
      2564., 2816., 3104., 3360., 2620., 2880., 3176., 3440., 2956., 3264.,
      3608., 3920., 3012., 3328., 3680., 4000., 3068., 3392., 3752., 4080.,
      3124., 3456., 3824., 4160., 3180., 3520., 3896., 4240., 3236., 3584.,
      3968., 4320., 3292., 3648., 4040., 4400., 3628., 4032., 4472., 4880.,
      3684., 4096., 4544., 4960., 3740., 4160., 4616., 5040., 3796., 4224.,
      4688., 5120., 3852., 4288., 4760., 5200., 3908., 4352., 4832., 5280.,
      3964., 4416., 4904., 5360., 4300., 4800., 5336., 5840., 4356., 4864.,
      5408., 5920., 4412., 4928., 5480., 6000., 4468., 4992., 5552., 6080.,
      4524., 5056., 5624., 6160., 4580., 5120., 5696., 6240., 4636., 5184.,
      5768., 6320., 4972., 5568., 6200., 6800., 5028., 5632., 6272., 6880.,
      5084., 5696., 6344., 6960., 5140., 5760., 6416., 7040., 5196., 5824.,
      6488., 7120., 5252., 5888., 6560., 7200., 5308., 5952., 6632., 7280.,
      5644., 6336., 7064., 7760., 5700., 6400., 7136., 7840., 5756., 6464.,
      7208., 7920., 5812., 6528., 7280., 8000., 5868., 6592., 7352., 8080.,
      5924., 6656., 7424., 8160., 5980., 6720., 7496., 8240., 6316., 7104.,
      7928., 8720., 6372., 7168., 8000., 8800., 6428., 7232., 8072., 8880.,
      6484., 7296., 8144., 8960., 6540., 7360., 8216., 9040., 6596., 7424.,
      8288., 9120., 6652., 7488., 8360., 9200.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28044., 28568., 29092., 29616., 30352., 30880., 31408., 31936., 38542.,
      39316., 40090., 40864., 41932., 42712., 43492., 44272., 39082., 39868.,
      40654., 41440., 42520., 43312., 44104., 44896., 39622., 40420., 41218.,
      42016., 43108., 43912., 44716., 45520., 40162., 40972., 41782., 42592.,
      43696., 44512., 45328., 46144., 24180., 24712., 25244., 25776., 26488.,
      27024., 27560., 28096., 24508., 25048., 25588., 26128., 26848., 27392.,
      27936., 28480., 33066., 33708., 34350., 34992., 35880., 36528., 37176.,
      37824., 45393., 46338., 47283., 48228., 49506., 50460., 51414., 52368.,
      45987., 46950., 47913., 48876., 50172., 51144., 52116., 53088., 46581.,
      47562., 48543., 49524., 50838., 51828., 52818., 53808., 47175., 48174.,
      49173., 50172., 51504., 52512., 53520., 54528., 28278., 28932., 29586.,
      30240., 31092., 31752., 32412., 33072., 28626., 29292., 29958., 30624.,
      31488., 32160., 32832., 33504., 38394., 39180., 39966., 40752., 41784.,
      42576., 43368., 44160., 52521., 53682., 54843., 56004., 57498., 58668.,
      59838., 61008., 53115., 54294., 55473., 56652., 58164., 59352., 60540.,
      61728., 53709., 54906., 56103., 57300., 58830., 60036., 61242., 62448.,
      54303., 55518., 56733., 57948., 59496., 60720., 61944., 63168., 32454.,
      33252., 34050., 34848., 35844., 36648., 37452., 38256., 32802., 33612.,
      34422., 35232., 36240., 37056., 37872., 38688., 43722., 44652., 45582.,
      46512., 47688., 48624., 49560., 50496., 43009., 44130., 45251., 46372.,
      47826., 48956., 50086., 51216., 43603., 44742., 45881., 47020., 48492.,
      49640., 50788., 51936., 44197., 45354., 46511., 47668., 49158., 50324.,
      51490., 52656., 44791., 45966., 47141., 48316., 49824., 51008., 52192.,
      53376., 22038., 22724., 23410., 24096., 24980., 25672., 26364., 27056.,
      22386., 23084., 23782., 24480., 25376., 26080., 26784., 27488., 17818.,
      18380., 18942., 19504., 20312., 20880., 21448., 22016., 23001., 23826.,
      24651., 25476., 26634., 27468., 28302., 29136., 23595., 24438., 25281.,
      26124., 27300., 28152., 29004., 29856., 24189., 25050., 25911., 26772.,
      27966., 28836., 29706., 30576., 24783., 25662., 26541., 27420., 28632.,
      29520., 30408., 31296., 13670., 14244., 14818., 15392., 16164., 16744.,
      17324., 17904., 14018., 14604., 15190., 15776., 16560., 17152., 17744.,
      18336., 17868., 18488., 19108., 19728., 20464., 21088., 21712., 22336.,
      22990., 23908., 24826., 25744., 26812., 27736., 28660., 29584., 23242.,
      24172., 25102., 26032., 27112., 28048., 28984., 29920., 23494., 24436.,
      25378., 26320., 27412., 28360., 29308., 30256., 23746., 24700., 25654.,
      26608., 27712., 28672., 29632., 30592., 13044., 13672., 14300., 14928.,
      15640., 16272., 16904., 17536., 13180., 13816., 14452., 15088., 15808.,
      16448., 17088., 17728., 20268., 20984., 21700., 22416., 23248., 23968.,
      24688., 25408., 26014., 27076., 28138., 29200., 30412., 31480., 32548.,
      33616., 26266., 27340., 28414., 29488., 30712., 31792., 32872., 33952.,
      26518., 27604., 28690., 29776., 31012., 32104., 33196., 34288., 26770.,
      27868., 28966., 30064., 31312., 32416., 33520., 34624., 14676., 15400.,
      16124., 16848., 17656., 18384., 19112., 19840., 14812., 15544., 16276.,
      17008., 17824., 18560., 19296., 20032.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4356.,  4568.,  4780.,  4992.,  5272.,  5488.,  5704.,  5920.,  4460.,
      4680.,  4900.,  5120.,  5408.,  5632.,  5856.,  6080.,  4564.,  4792.,
      5020.,  5248.,  5544.,  5776.,  6008.,  6240.,  4668.,  4904.,  5140.,
      5376.,  5680.,  5920.,  6160.,  6400.,  4772.,  5016.,  5260.,  5504.,
      5816.,  6064.,  6312.,  6560.,  4876.,  5128.,  5380.,  5632.,  5952.,
      6208.,  6464.,  6720.,  4980.,  5240.,  5500.,  5760.,  6088.,  6352.,
      6616.,  6880.,  5604.,  5912.,  6220.,  6528.,  6904.,  7216.,  7528.,
      7840.,  5708.,  6024.,  6340.,  6656.,  7040.,  7360.,  7680.,  8000.,
      5812.,  6136.,  6460.,  6784.,  7176.,  7504.,  7832.,  8160.,  5916.,
      6248.,  6580.,  6912.,  7312.,  7648.,  7984.,  8320.,  6020.,  6360.,
      6700.,  7040.,  7448.,  7792.,  8136.,  8480.,  6124.,  6472.,  6820.,
      7168.,  7584.,  7936.,  8288.,  8640.,  6228.,  6584.,  6940.,  7296.,
      7720.,  8080.,  8440.,  8800.,  6852.,  7256.,  7660.,  8064.,  8536.,
      8944.,  9352.,  9760.,  6956.,  7368.,  7780.,  8192.,  8672.,  9088.,
      9504.,  9920.,  7060.,  7480.,  7900.,  8320.,  8808.,  9232.,  9656.,
      10080., 7164.,  7592.,  8020.,  8448.,  8944.,  9376.,  9808.,  10240.,
      7268.,  7704.,  8140.,  8576.,  9080.,  9520.,  9960.,  10400., 7372.,
      7816.,  8260.,  8704.,  9216.,  9664.,  10112., 10560., 7476.,  7928.,
      8380.,  8832.,  9352.,  9808.,  10264., 10720., 8100.,  8600.,  9100.,
      9600.,  10168., 10672., 11176., 11680., 8204.,  8712.,  9220.,  9728.,
      10304., 10816., 11328., 11840., 8308.,  8824.,  9340.,  9856.,  10440.,
      10960., 11480., 12000., 8412.,  8936.,  9460.,  9984.,  10576., 11104.,
      11632., 12160., 8516.,  9048.,  9580.,  10112., 10712., 11248., 11784.,
      12320., 8620.,  9160.,  9700.,  10240., 10848., 11392., 11936., 12480.,
      8724.,  9272.,  9820.,  10368., 10984., 11536., 12088., 12640., 9348.,
      9944.,  10540., 11136., 11800., 12400., 13000., 13600., 9452.,  10056.,
      10660., 11264., 11936., 12544., 13152., 13760., 9556.,  10168., 10780.,
      11392., 12072., 12688., 13304., 13920., 9660.,  10280., 10900., 11520.,
      12208., 12832., 13456., 14080., 9764.,  10392., 11020., 11648., 12344.,
      12976., 13608., 14240., 9868.,  10504., 11140., 11776., 12480., 13120.,
      13760., 14400., 9972.,  10616., 11260., 11904., 12616., 13264., 13912.,
      14560., 10596., 11288., 11980., 12672., 13432., 14128., 14824., 15520.,
      10700., 11400., 12100., 12800., 13568., 14272., 14976., 15680., 10804.,
      11512., 12220., 12928., 13704., 14416., 15128., 15840., 10908., 11624.,
      12340., 13056., 13840., 14560., 15280., 16000., 11012., 11736., 12460.,
      13184., 13976., 14704., 15432., 16160., 11116., 11848., 12580., 13312.,
      14112., 14848., 15584., 16320., 11220., 11960., 12700., 13440., 14248.,
      14992., 15736., 16480., 11844., 12632., 13420., 14208., 15064., 15856.,
      16648., 17440., 11948., 12744., 13540., 14336., 15200., 16000., 16800.,
      17600., 12052., 12856., 13660., 14464., 15336., 16144., 16952., 17760.,
      12156., 12968., 13780., 14592., 15472., 16288., 17104., 17920., 12260.,
      13080., 13900., 14720., 15608., 16432., 17256., 18080., 12364., 13192.,
      14020., 14848., 15744., 16576., 17408., 18240., 12468., 13304., 14140.,
      14976., 15880., 16720., 17560., 18400.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28468., 29616., 30772., 31936., 39178., 40864., 42562., 44272., 39730.,
      41440., 43162., 44896., 40282., 42016., 43762., 45520., 40834., 42592.,
      44362., 46144., 24628., 25776., 26932., 28096., 24964., 26128., 27300.,
      28480., 33594., 34992., 36402., 37824., 46185., 48228., 50289., 52368.,
      46797., 48876., 50973., 53088., 47409., 49524., 51657., 53808., 48021.,
      50172., 52341., 54528., 28842., 30240., 31650., 33072., 29202., 30624.,
      32058., 33504., 39066., 40752., 42450., 44160., 53529., 56004., 58497.,
      61008., 54141., 56652., 59181., 61728., 54753., 57300., 59865., 62448.,
      55365., 57948., 60549., 63168., 33162., 34848., 36546., 38256., 33522.,
      35232., 36954., 38688., 44538., 46512., 48498., 50496., 43977., 46372.,
      48785., 51216., 44589., 47020., 49469., 51936., 45201., 47668., 50153.,
      52656., 45813., 48316., 50837., 53376., 22634., 24096., 25570., 27056.,
      22994., 24480., 25978., 27488., 18266., 19504., 20754., 22016., 23673.,
      25476., 27297., 29136., 24285., 26124., 27981., 29856., 24897., 26772.,
      28665., 30576., 25509., 27420., 29349., 31296., 14154., 15392., 16642.,
      17904., 14514., 15776., 17050., 18336., 18436., 19728., 21028., 22336.,
      23842., 25744., 27658., 29584., 24106., 26032., 27970., 29920., 24370.,
      26320., 28282., 30256., 24634., 26608., 28594., 30592., 13636., 14928.,
      16228., 17536., 13780., 15088., 16404., 17728., 20932., 22416., 23908.,
      25408., 27010., 29200., 31402., 33616., 27274., 29488., 31714., 33952.,
      27538., 29776., 32026., 34288., 27802., 30064., 32338., 34624., 15364.,
      16848., 18340., 19840., 15508., 17008., 18516., 20032.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4540.,  4992.,  5452.,  5920.,  4652.,  5120.,  5596.,  6080.,  4764.,
      5248.,  5740.,  6240.,  4876.,  5376.,  5884.,  6400.,  4988.,  5504.,
      6028.,  6560.,  5100.,  5632.,  6172.,  6720.,  5212.,  5760.,  6316.,
      6880.,  5884.,  6528.,  7180.,  7840.,  5996.,  6656.,  7324.,  8000.,
      6108.,  6784.,  7468.,  8160.,  6220.,  6912.,  7612.,  8320.,  6332.,
      7040.,  7756.,  8480.,  6444.,  7168.,  7900.,  8640.,  6556.,  7296.,
      8044.,  8800.,  7228.,  8064.,  8908.,  9760.,  7340.,  8192.,  9052.,
      9920.,  7452.,  8320.,  9196.,  10080., 7564.,  8448.,  9340.,  10240.,
      7676.,  8576.,  9484.,  10400., 7788.,  8704.,  9628.,  10560., 7900.,
      8832.,  9772.,  10720., 8572.,  9600.,  10636., 11680., 8684.,  9728.,
      10780., 11840., 8796.,  9856.,  10924., 12000., 8908.,  9984.,  11068.,
      12160., 9020.,  10112., 11212., 12320., 9132.,  10240., 11356., 12480.,
      9244.,  10368., 11500., 12640., 9916.,  11136., 12364., 13600., 10028.,
      11264., 12508., 13760., 10140., 11392., 12652., 13920., 10252., 11520.,
      12796., 14080., 10364., 11648., 12940., 14240., 10476., 11776., 13084.,
      14400., 10588., 11904., 13228., 14560., 11260., 12672., 14092., 15520.,
      11372., 12800., 14236., 15680., 11484., 12928., 14380., 15840., 11596.,
      13056., 14524., 16000., 11708., 13184., 14668., 16160., 11820., 13312.,
      14812., 16320., 11932., 13440., 14956., 16480., 12604., 14208., 15820.,
      17440., 12716., 14336., 15964., 17600., 12828., 14464., 16108., 17760.,
      12940., 14592., 16252., 17920., 13052., 14720., 16396., 18080., 13164.,
      14848., 16540., 18240., 13276., 14976., 16684., 18400.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24660., 25192., 25928., 26464., 27212., 27752., 28512., 29056., 33038.,
      33812., 34868., 35648., 36722., 37508., 38600., 39392., 34118., 34916.,
      35996., 36800., 37898., 38708., 39824., 40640., 35198., 36020., 37124.,
      37952., 39074., 39908., 41048., 41888., 36278., 37124., 38252., 39104.,
      40250., 41108., 42272., 43136., 21060., 21608., 22328., 22880., 23612.,
      24168., 24912., 25472., 21716., 22280., 23016., 23584., 24332., 24904.,
      25664., 26240., 34678., 35444., 36444., 37216., 38234., 39012., 40048.,
      40832., 46713., 47826., 49254., 50376., 51831., 52962., 54444., 55584.,
      47901., 49050., 50514., 51672., 53163., 54330., 55848., 57024., 49089.,
      50274., 51774., 52968., 54495., 55698., 57252., 58464., 50277., 51498.,
      53034., 54264., 55827., 57066., 58656., 59904., 29246., 30036., 31012.,
      31808., 32802., 33604., 34616., 35424., 29942., 30756., 31756., 32576.,
      33594., 34420., 35456., 36288., 34838., 35636., 36668., 37472., 38522.,
      39332., 40400., 41216., 42025., 43058., 44406., 45448., 46823., 47874.,
      49276., 50336., 43213., 44282., 45666., 46744., 48155., 49242., 50680.,
      51776., 44401., 45506., 46926., 48040., 49487., 50610., 52084., 53216.,
      45589., 46730., 48186., 49336., 50819., 51978., 53488., 54656., 22750.,
      23316., 24068., 24640., 25410., 25988., 26776., 27360., 23446., 24036.,
      24812., 25408., 26202., 26804., 27616., 28224., 37046., 37876., 38940.,
      39776., 40858., 41700., 42800., 43648., 33241., 34194., 35462., 36424.,
      37719., 38690., 40012., 40992., 34429., 35418., 36722., 37720., 39051.,
      40058., 41416., 42432., 35617., 36642., 37982., 39016., 40383., 41426.,
      42820., 43872., 36805., 37866., 39242., 40312., 41715., 42794., 44224.,
      45312., 16510., 17108., 17892., 18496., 19298., 19908., 20728., 21344.,
      17206., 17828., 18636., 19264., 20090., 20724., 21568., 22208., 16470.,
      17076., 17916., 18528., 19386., 20004., 20880., 21504., 20361., 21234.,
      22422., 23304., 24519., 25410., 26652., 27552., 21549., 22458., 23682.,
      24600., 25851., 26778., 28056., 28992., 22737., 23682., 24942., 25896.,
      27183., 28146., 29460., 30432., 23925., 24906., 26202., 27192., 28515.,
      29514., 30864., 31872., 12318., 12948., 13764., 14400., 15234., 15876.,
      16728., 17376., 13014., 13668., 14508., 15168., 16026., 16692., 17568.,
      18240., 16692., 17416., 18248., 18976., 19820., 20552., 21408., 22144.,
      20510., 21572., 22772., 23840., 25058., 26132., 27368., 28448., 21014.,
      22100., 23324., 24416., 25658., 26756., 28016., 29120., 21518., 22628.,
      23876., 24992., 26258., 27380., 28664., 29792., 22022., 23156., 24428.,
      25568., 26858., 28004., 29312., 30464., 11172., 11912., 12728., 13472.,
      14300., 15048., 15888., 16640., 11444., 12200., 13032., 13792., 14636.,
      15400., 16256., 17024., 17140., 17800., 18568., 19232., 20012., 20680.,
      21472., 22144., 19902., 20740., 21716., 22560., 23554., 24404., 25416.,
      26272., 20406., 21268., 22268., 23136., 24154., 25028., 26064., 26944.,
      20910., 21796., 22820., 23712., 24754., 25652., 26712., 27616., 21414.,
      22324., 23372., 24288., 25354., 26276., 27360., 28288., 11876., 12296.,
      12792., 13216., 13724., 14152., 14672., 15104., 12148., 12584., 13096.,
      13536., 14060., 14504., 15040., 15488.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8660.,  9080.,  9560.,  9984.,  10476., 10904., 11408., 11840., 8868.,
      9304.,  9800.,  10240., 10748., 11192., 11712., 12160., 9076.,  9528.,
      10040., 10496., 11020., 11480., 12016., 12480., 9284.,  9752.,  10280.,
      10752., 11292., 11768., 12320., 12800., 9492.,  9976.,  10520., 11008.,
      11564., 12056., 12624., 13120., 9700.,  10200., 10760., 11264., 11836.,
      12344., 12928., 13440., 9908.,  10424., 11000., 11520., 12108., 12632.,
      13232., 13760., 11156., 11768., 12440., 13056., 13740., 14360., 15056.,
      15680., 11364., 11992., 12680., 13312., 14012., 14648., 15360., 16000.,
      11572., 12216., 12920., 13568., 14284., 14936., 15664., 16320., 11780.,
      12440., 13160., 13824., 14556., 15224., 15968., 16640., 11988., 12664.,
      13400., 14080., 14828., 15512., 16272., 16960., 12196., 12888., 13640.,
      14336., 15100., 15800., 16576., 17280., 12404., 13112., 13880., 14592.,
      15372., 16088., 16880., 17600., 13652., 14456., 15320., 16128., 17004.,
      17816., 18704., 19520., 13860., 14680., 15560., 16384., 17276., 18104.,
      19008., 19840., 14068., 14904., 15800., 16640., 17548., 18392., 19312.,
      20160., 14276., 15128., 16040., 16896., 17820., 18680., 19616., 20480.,
      14484., 15352., 16280., 17152., 18092., 18968., 19920., 20800., 14692.,
      15576., 16520., 17408., 18364., 19256., 20224., 21120., 14900., 15800.,
      16760., 17664., 18636., 19544., 20528., 21440., 16148., 17144., 18200.,
      19200., 20268., 21272., 22352., 23360., 16356., 17368., 18440., 19456.,
      20540., 21560., 22656., 23680., 16564., 17592., 18680., 19712., 20812.,
      21848., 22960., 24000., 16772., 17816., 18920., 19968., 21084., 22136.,
      23264., 24320., 16980., 18040., 19160., 20224., 21356., 22424., 23568.,
      24640., 17188., 18264., 19400., 20480., 21628., 22712., 23872., 24960.,
      17396., 18488., 19640., 20736., 21900., 23000., 24176., 25280., 18644.,
      19832., 21080., 22272., 23532., 24728., 26000., 27200., 18852., 20056.,
      21320., 22528., 23804., 25016., 26304., 27520., 19060., 20280., 21560.,
      22784., 24076., 25304., 26608., 27840., 19268., 20504., 21800., 23040.,
      24348., 25592., 26912., 28160., 19476., 20728., 22040., 23296., 24620.,
      25880., 27216., 28480., 19684., 20952., 22280., 23552., 24892., 26168.,
      27520., 28800., 19892., 21176., 22520., 23808., 25164., 26456., 27824.,
      29120., 21140., 22520., 23960., 25344., 26796., 28184., 29648., 31040.,
      21348., 22744., 24200., 25600., 27068., 28472., 29952., 31360., 21556.,
      22968., 24440., 25856., 27340., 28760., 30256., 31680., 21764., 23192.,
      24680., 26112., 27612., 29048., 30560., 32000., 21972., 23416., 24920.,
      26368., 27884., 29336., 30864., 32320., 22180., 23640., 25160., 26624.,
      28156., 29624., 31168., 32640., 22388., 23864., 25400., 26880., 28428.,
      29912., 31472., 32960., 23636., 25208., 26840., 28416., 30060., 31640.,
      33296., 34880., 23844., 25432., 27080., 28672., 30332., 31928., 33600.,
      35200., 24052., 25656., 27320., 28928., 30604., 32216., 33904., 35520.,
      24260., 25880., 27560., 29184., 30876., 32504., 34208., 35840., 24468.,
      26104., 27800., 29440., 31148., 32792., 34512., 36160., 24676., 26328.,
      28040., 29696., 31420., 33080., 34816., 36480., 24884., 26552., 28280.,
      29952., 31692., 33368., 35120., 36800.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16148., 16424., 16700., 16976., 17528., 17808., 18088., 18368., 18940.,
      19224., 19508., 19792., 20384., 20672., 20960., 21248., 25878., 26268.,
      26658., 27048., 27868., 28264., 28660., 29056., 29906., 30308., 30710.,
      31112., 31992., 32400., 32808., 33216., 27502., 27916., 28330., 28744.,
      29588., 30008., 30428., 30848., 31722., 32148., 32574., 33000., 33904.,
      34336., 34768., 35200., 29126., 29564., 30002., 30440., 31308., 31752.,
      32196., 32640., 33538., 33988., 34438., 34888., 35816., 36272., 36728.,
      37184., 30750., 31212., 31674., 32136., 33028., 33496., 33964., 34432.,
      35354., 35828., 36302., 36776., 37728., 38208., 38688., 39168., 26980.,
      27272., 27564., 27856., 28488., 28784., 29080., 29376., 30028., 30328.,
      30628., 30928., 31600., 31904., 32208., 32512., 28276., 28584., 28892.,
      29200., 29848., 30160., 30472., 30784., 31452., 31768., 32084., 32400.,
      33088., 33408., 33728., 34048., 15214., 15468., 15722., 15976., 16564.,
      16824., 17084., 17344., 17962., 18228., 18494., 18760., 19408., 19680.,
      19952., 20224., 19737., 20082., 20427., 20772., 21610., 21964., 22318.,
      22672., 23555., 23918., 24281., 24644., 25572., 25944., 26316., 26688.,
      21565., 21946., 22327., 22708., 23582., 23972., 24362., 24752., 25671.,
      26070., 26469., 26868., 27832., 28240., 28648., 29056., 23393., 23810.,
      24227., 24644., 25554., 25980., 26406., 26832., 27787., 28222., 28657.,
      29092., 30092., 30536., 30980., 31424., 25221., 25674., 26127., 26580.,
      27526., 27988., 28450., 28912., 29903., 30374., 30845., 31316., 32352.,
      32832., 33312., 33792., 16230., 16508., 16786., 17064., 17708., 17992.,
      18276., 18560., 19234., 19524., 19814., 20104., 20808., 21104., 21400.,
      21696., 17598., 17900., 18202., 18504., 19172., 19480., 19788., 20096.,
      20794., 21108., 21422., 21736., 22464., 22784., 23104., 23424., 19726.,
      20140., 20554., 20968., 21716., 22136., 22556., 22976., 23754., 24180.,
      24606., 25032., 25840., 26272., 26704., 27136., 22985., 23506., 24027.,
      24548., 25562., 26092., 26622., 27152., 28211., 28750., 29289., 29828.,
      30932., 31480., 32028., 32576., 24813., 25370., 25927., 26484., 27534.,
      28100., 28666., 29232., 30327., 30902., 31477., 32052., 33192., 33776.,
      34360., 34944., 26641., 27234., 27827., 28420., 29506., 30108., 30710.,
      31312., 32443., 33054., 33665., 34276., 35452., 36072., 36692., 37312.,
      28469., 29098., 29727., 30356., 31478., 32116., 32754., 33392., 34559.,
      35206., 35853., 36500., 37712., 38368., 39024., 39680., 18054., 18364.,
      18674., 18984., 19660., 19976., 20292., 20608., 21314., 21636., 21958.,
      22280., 23016., 23344., 23672., 24000., 19422., 19756., 20090., 20424.,
      21124., 21464., 21804., 22144., 22874., 23220., 23566., 23912., 24672.,
      25024., 25376., 25728., 26286., 26860., 27434., 28008., 28916., 29496.,
      30076., 30656., 31594., 32180., 32766., 33352., 34320., 34912., 35504.,
      36096., 34297., 34866., 35435., 36004., 37066., 37644., 38222., 38800.,
      39907., 40494., 41081., 41668., 42820., 43416., 44012., 44608., 36125.,
      36730., 37335., 37940., 39038., 39652., 40266., 40880., 42023., 42646.,
      43269., 43892., 45080., 45712., 46344., 46976., 37953., 38594., 39235.,
      39876., 41010., 41660., 42310., 42960., 44139., 44798., 45457., 46116.,
      47340., 48008., 48676., 49344., 39781., 40458., 41135., 41812., 42982.,
      43668., 44354., 45040., 46255., 46950., 47645., 48340., 49600., 50304.,
      51008., 51712., 17830., 18172., 18514., 18856., 19564., 19912., 20260.,
      20608., 21346., 21700., 22054., 22408., 23176., 23536., 23896., 24256.,
      19198., 19564., 19930., 20296., 21028., 21400., 21772., 22144., 22906.,
      23284., 23662., 24040., 24832., 25216., 25600., 25984., 20174., 20524.,
      20874., 21224., 21908., 22264., 22620., 22976., 23690., 24052., 24414.,
      24776., 25520., 25888., 26256., 26624., 27049., 27538., 28027., 28516.,
      29498., 29996., 30494., 30992., 32019., 32526., 33033., 33540., 34612.,
      35128., 35644., 36160., 28877., 29402., 29927., 30452., 31470., 32004.,
      32538., 33072., 34135., 34678., 35221., 35764., 36872., 37424., 37976.,
      38528., 30705., 31266., 31827., 32388., 33442., 34012., 34582., 35152.,
      36251., 36830., 37409., 37988., 39132., 39720., 40308., 40896., 32533.,
      33130., 33727., 34324., 35414., 36020., 36626., 37232., 38367., 38982.,
      39597., 40212., 41392., 42016., 42640., 43264., 21702., 22076., 22450.,
      22824., 23564., 23944., 24324., 24704., 25474., 25860., 26246., 26632.,
      27432., 27824., 28216., 28608., 23070., 23468., 23866., 24264., 25028.,
      25432., 25836., 26240., 27034., 27444., 27854., 28264., 29088., 29504.,
      29920., 30336., 7572.,  7784.,  7996.,  8208.,  8632.,  8848.,  9064.,
      9280.,  9724.,  9944.,  10164., 10384., 10848., 11072., 11296., 11520.,
      8470.,  8764.,  9058.,  9352.,  9916.,  10216., 10516., 10816., 11410.,
      11716., 12022., 12328., 12952., 13264., 13576., 13888., 9454.,  9772.,
      10090., 10408., 10996., 11320., 11644., 11968., 12586., 12916., 13246.,
      13576., 14224., 14560., 14896., 15232., 10438., 10780., 11122., 11464.,
      12076., 12424., 12772., 13120., 13762., 14116., 14470., 14824., 15496.,
      15856., 16216., 16576., 11422., 11788., 12154., 12520., 13156., 13528.,
      13900., 14272., 14938., 15316., 15694., 16072., 16768., 17152., 17536.,
      17920., 4708.,  4936.,  5164.,  5392.,  5768.,  6000.,  6232.,  6464.,
      6860.,  7096.,  7332.,  7568.,  7984.,  8224.,  8464.,  8704.,  5236.,
      5480.,  5724.,  5968.,  6360.,  6608.,  6856.,  7104.,  7516.,  7768.,
      8020.,  8272.,  8704.,  8960.,  9216.,  9472.,  12756., 13032., 13308.,
      13584., 14072., 14352., 14632., 14912., 15420., 15704., 15988., 16272.,
      16800., 17088., 17376., 17664., 13878., 14204., 14530., 14856., 15452.,
      15784., 16116., 16448., 17074., 17412., 17750., 18088., 18744., 19088.,
      19432., 19776., 14862., 15212., 15562., 15912., 16532., 16888., 17244.,
      17600., 18250., 18612., 18974., 19336., 20016., 20384., 20752., 21120.,
      15846., 16220., 16594., 16968., 17612., 17992., 18372., 18752., 19426.,
      19812., 20198., 20584., 21288., 21680., 22072., 22464., 16830., 17228.,
      17626., 18024., 18692., 19096., 19500., 19904., 20602., 21012., 21422.,
      21832., 22560., 22976., 23392., 23808., 8740.,  8904.,  9068.,  9232.,
      9544.,  9712.,  9880.,  10048., 10380., 10552., 10724., 10896., 11248.,
      11424., 11600., 11776., 9268.,  9448.,  9628.,  9808.,  10136., 10320.,
      10504., 10688., 11036., 11224., 11412., 11600., 11968., 12160., 12352.,
      12544.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16900., 17320., 17740., 18160., 18696., 19120., 19544., 19968., 20524.,
      20952., 21380., 21808., 22384., 22816., 23248., 23680., 17300., 17736.,
      18172., 18608., 19160., 19600., 20040., 20480., 21052., 21496., 21940.,
      22384., 22976., 23424., 23872., 24320., 17700., 18152., 18604., 19056.,
      19624., 20080., 20536., 20992., 21580., 22040., 22500., 22960., 23568.,
      24032., 24496., 24960., 18100., 18568., 19036., 19504., 20088., 20560.,
      21032., 21504., 22108., 22584., 23060., 23536., 24160., 24640., 25120.,
      25600., 18500., 18984., 19468., 19952., 20552., 21040., 21528., 22016.,
      22636., 23128., 23620., 24112., 24752., 25248., 25744., 26240., 18900.,
      19400., 19900., 20400., 21016., 21520., 22024., 22528., 23164., 23672.,
      24180., 24688., 25344., 25856., 26368., 26880., 19300., 19816., 20332.,
      20848., 21480., 22000., 22520., 23040., 23692., 24216., 24740., 25264.,
      25936., 26464., 26992., 27520., 9156.,  9512.,  9868.,  10224., 10696.,
      11056., 11416., 11776., 12268., 12632., 12996., 13360., 13872., 14240.,
      14608., 14976., 9556.,  9928.,  10300., 10672., 11160., 11536., 11912.,
      12288., 12796., 13176., 13556., 13936., 14464., 14848., 15232., 15616.,
      9956.,  10344., 10732., 11120., 11624., 12016., 12408., 12800., 13324.,
      13720., 14116., 14512., 15056., 15456., 15856., 16256., 10356., 10760.,
      11164., 11568., 12088., 12496., 12904., 13312., 13852., 14264., 14676.,
      15088., 15648., 16064., 16480., 16896., 2308.,  2472.,  2636.,  2800.,
      3080.,  3248.,  3416.,  3584.,  3884.,  4056.,  4228.,  4400.,  4720.,
      4896.,  5072.,  5248.,  2708.,  2888.,  3068.,  3248.,  3544.,  3728.,
      3912.,  4096.,  4412.,  4600.,  4788.,  4976.,  5312.,  5504.,  5696.,
      5888.,  3108.,  3304.,  3500.,  3696.,  4008.,  4208.,  4408.,  4608.,
      4940.,  5144.,  5348.,  5552.,  5904.,  6112.,  6320.,  6528.,  5508.,
      5800.,  6092.,  6384.,  6792.,  7088.,  7384.,  7680.,  8108.,  8408.,
      8708.,  9008.,  9456.,  9760.,  10064., 10368., 5908.,  6216.,  6524.,
      6832.,  7256.,  7568.,  7880.,  8192.,  8636.,  8952.,  9268.,  9584.,
      10048., 10368., 10688., 11008., 6308.,  6632.,  6956.,  7280.,  7720.,
      8048.,  8376.,  8704.,  9164.,  9496.,  9828.,  10160., 10640., 10976.,
      11312., 11648., 6708.,  7048.,  7388.,  7728.,  8184.,  8528.,  8872.,
      9216.,  9692.,  10040., 10388., 10736., 11232., 11584., 11936., 12288.,
      7108.,  7464.,  7820.,  8176.,  8648.,  9008.,  9368.,  9728.,  10220.,
      10584., 10948., 11312., 11824., 12192., 12560., 12928., 7508.,  7880.,
      8252.,  8624.,  9112.,  9488.,  9864.,  10240., 10748., 11128., 11508.,
      11888., 12416., 12800., 13184., 13568., 7908.,  8296.,  8684.,  9072.,
      9576.,  9968.,  10360., 10752., 11276., 11672., 12068., 12464., 13008.,
      13408., 13808., 14208., 10308., 10792., 11276., 11760., 12360., 12848.,
      13336., 13824., 14444., 14936., 15428., 15920., 16560., 17056., 17552.,
      18048., 10708., 11208., 11708., 12208., 12824., 13328., 13832., 14336.,
      14972., 15480., 15988., 16496., 17152., 17664., 18176., 18688., 11108.,
      11624., 12140., 12656., 13288., 13808., 14328., 14848., 15500., 16024.,
      16548., 17072., 17744., 18272., 18800., 19328., 11508., 12040., 12572.,
      13104., 13752., 14288., 14824., 15360., 16028., 16568., 17108., 17648.,
      18336., 18880., 19424., 19968., 11908., 12456., 13004., 13552., 14216.,
      14768., 15320., 15872., 16556., 17112., 17668., 18224., 18928., 19488.,
      20048., 20608., 12308., 12872., 13436., 14000., 14680., 15248., 15816.,
      16384., 17084., 17656., 18228., 18800., 19520., 20096., 20672., 21248.,
      12708., 13288., 13868., 14448., 15144., 15728., 16312., 16896., 17612.,
      18200., 18788., 19376., 20112., 20704., 21296., 21888., 15108., 15784.,
      16460., 17136., 17928., 18608., 19288., 19968., 20780., 21464., 22148.,
      22832., 23664., 24352., 25040., 25728., 15508., 16200., 16892., 17584.,
      18392., 19088., 19784., 20480., 21308., 22008., 22708., 23408., 24256.,
      24960., 25664., 26368., 15908., 16616., 17324., 18032., 18856., 19568.,
      20280., 20992., 21836., 22552., 23268., 23984., 24848., 25568., 26288.,
      27008., 16308., 17032., 17756., 18480., 19320., 20048., 20776., 21504.,
      22364., 23096., 23828., 24560., 25440., 26176., 26912., 27648., 16708.,
      17448., 18188., 18928., 19784., 20528., 21272., 22016., 22892., 23640.,
      24388., 25136., 26032., 26784., 27536., 28288., 17108., 17864., 18620.,
      19376., 20248., 21008., 21768., 22528., 23420., 24184., 24948., 25712.,
      26624., 27392., 28160., 28928., 17508., 18280., 19052., 19824., 20712.,
      21488., 22264., 23040., 23948., 24728., 25508., 26288., 27216., 28000.,
      28784., 29568., 15556., 16168., 16780., 17392., 18120., 18736., 19352.,
      19968., 20716., 21336., 21956., 22576., 23344., 23968., 24592., 25216.,
      15956., 16584., 17212., 17840., 18584., 19216., 19848., 20480., 21244.,
      21880., 22516., 23152., 23936., 24576., 25216., 25856., 16356., 17000.,
      17644., 18288., 19048., 19696., 20344., 20992., 21772., 22424., 23076.,
      23728., 24528., 25184., 25840., 26496., 16756., 17416., 18076., 18736.,
      19512., 20176., 20840., 21504., 22300., 22968., 23636., 24304., 25120.,
      25792., 26464., 27136., 16900., 17320., 17740., 18160., 18696., 19120.,
      19544., 19968., 20524., 20952., 21380., 21808., 22384., 22816., 23248.,
      23680., 17300., 17736., 18172., 18608., 19160., 19600., 20040., 20480.,
      21052., 21496., 21940., 22384., 22976., 23424., 23872., 24320., 17700.,
      18152., 18604., 19056., 19624., 20080., 20536., 20992., 21580., 22040.,
      22500., 22960., 23568., 24032., 24496., 24960., 20100., 20648., 21196.,
      21744., 22408., 22960., 23512., 24064., 24748., 25304., 25860., 26416.,
      27120., 27680., 28240., 28800., 20500., 21064., 21628., 22192., 22872.,
      23440., 24008., 24576., 25276., 25848., 26420., 26992., 27712., 28288.,
      28864., 29440., 20900., 21480., 22060., 22640., 23336., 23920., 24504.,
      25088., 25804., 26392., 26980., 27568., 28304., 28896., 29488., 30080.,
      21300., 21896., 22492., 23088., 23800., 24400., 25000., 25600., 26332.,
      26936., 27540., 28144., 28896., 29504., 30112., 30720., 9156.,  9512.,
      9868.,  10224., 10696., 11056., 11416., 11776., 12268., 12632., 12996.,
      13360., 13872., 14240., 14608., 14976., 9556.,  9928.,  10300., 10672.,
      11160., 11536., 11912., 12288., 12796., 13176., 13556., 13936., 14464.,
      14848., 15232., 15616., 9956.,  10344., 10732., 11120., 11624., 12016.,
      12408., 12800., 13324., 13720., 14116., 14512., 15056., 15456., 15856.,
      16256.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4510.,  4564.,  5724., 5792., 4048., 4096., 4144., 5337., 5400., 6766.,
      6844.,  4770.,  4824., 4878., 6219., 6282., 7858., 7936., 5526., 5580.,
      5634.,  7101.,  7164., 8950., 9028., 6282., 6336., 6390., 7983., 8046.,
      10042., 10120., 7038., 7092., 7146., 3082., 3112., 3764., 3800., 2536.,
      2560.,  2584.,  3502., 3532., 4268., 4304., 2872., 2896., 2920.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      426.,  436.,  446.,  456.,  466.,  476.,  486.,  566.,  576.,  586.,
      596.,  606.,  616.,  626.,  706.,  716.,  726.,  736.,  746.,  756.,
      766.,  846.,  856.,  866.,  876.,  886.,  896.,  906.,  986.,  996.,
      1006., 1016., 1026., 1036., 1046., 1126., 1136., 1146., 1156., 1166.,
      1176., 1186., 1266., 1276., 1286., 1296., 1306., 1316., 1326.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8558.,  9020.,  8660.,  9128.,  10832., 11448., 10960., 11584., 7634.,
      8096.,  7724.,  8192.,  7814.,  8288.,  10107., 10674., 10224., 10800.,
      12776., 13532., 12920., 13688., 8973.,  9540.,  9072.,  9648.,  9171.,
      9756.,  11745., 12438., 11862., 12564., 14792., 15716., 14936., 15872.,
      10359., 11052., 10458., 11160., 10557., 11268., 13383., 14202., 13500.,
      14328., 16808., 17900., 16952., 18056., 11745., 12564., 11844., 12672.,
      11943., 12780., 15021., 15966., 15138., 16092., 18824., 20084., 18968.,
      20240., 13131., 14076., 13230., 14184., 13329., 14292., 5618.,  6164.,
      5672.,  6224.,  6800.,  7528.,  6864.,  7600.,  4526.,  5072.,  4568.,
      5120.,  4610.,  5168.,  6374.,  7004.,  6428.,  7064.,  7696.,  8536.,
      7760.,  8608.,  5114.,  5744.,  5156.,  5792.,  5198.,  5840.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      728.,  852.,  744.,  872.,  760.,  892.,  776.,  912.,  792.,  932.,
      808.,  952.,  824.,  972.,  952.,  1132., 968.,  1152., 984.,  1172.,
      1000., 1192., 1016., 1212., 1032., 1232., 1048., 1252., 1176., 1412.,
      1192., 1432., 1208., 1452., 1224., 1472., 1240., 1492., 1256., 1512.,
      1272., 1532., 1400., 1692., 1416., 1712., 1432., 1732., 1448., 1752.,
      1464., 1772., 1480., 1792., 1496., 1812., 1624., 1972., 1640., 1992.,
      1656., 2012., 1672., 2032., 1688., 2052., 1704., 2072., 1720., 2092.,
      1848., 2252., 1864., 2272., 1880., 2292., 1896., 2312., 1912., 2332.,
      1928., 2352., 1944., 2372., 2072., 2532., 2088., 2552., 2104., 2572.,
      2120., 2592., 2136., 2612., 2152., 2632., 2168., 2652.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16654., 17116., 17578., 18040., 16852., 17320., 17788., 18256., 21048.,
      21664., 22280., 22896., 21296., 21920., 22544., 23168., 14806., 15268.,
      15730., 16192., 14980., 15448., 15916., 16384., 15154., 15628., 16102.,
      16576., 19647., 20214., 20781., 21348., 19872., 20448., 21024., 21600.,
      24796., 25552., 26308., 27064., 25072., 25840., 26608., 27376., 17379.,
      17946., 18513., 19080., 17568., 18144., 18720., 19296., 17757., 18342.,
      18927., 19512., 22797., 23490., 24183., 24876., 23022., 23724., 24426.,
      25128., 28660., 29584., 30508., 31432., 28936., 29872., 30808., 31744.,
      20025., 20718., 21411., 22104., 20214., 20916., 21618., 22320., 20403.,
      21114., 21825., 22536., 25947., 26766., 27585., 28404., 26172., 27000.,
      27828., 28656., 32524., 33616., 34708., 35800., 32800., 33904., 35008.,
      36112., 22671., 23490., 24309., 25128., 22860., 23688., 24516., 25344.,
      23049., 23886., 24723., 25560., 29097., 30042., 30987., 31932., 29322.,
      30276., 31230., 32184., 36388., 37648., 38908., 40168., 36664., 37936.,
      39208., 40480., 25317., 26262., 27207., 28152., 25506., 26460., 27414.,
      28368., 25695., 26658., 27621., 28584., 10690., 11236., 11782., 12328.,
      10792., 11344., 11896., 12448., 12872., 13600., 14328., 15056., 12992.,
      13728., 14464., 15200., 8506.,  9052.,  9598.,  10144., 8584.,  9136.,
      9688.,  10240., 8662.,  9220.,  9778.,  10336., 12118., 12748., 13378.,
      14008., 12220., 12856., 13492., 14128., 14552., 15392., 16232., 17072.,
      14672., 15520., 16368., 17216., 9598.,  10228., 10858., 11488., 9676.,
      10312., 10948., 11584., 9754.,  10396., 11038., 11680.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1332., 1456., 1580., 1704., 1360., 1488., 1616., 1744., 1388., 1520.,
      1652., 1784., 1416., 1552., 1688., 1824., 1444., 1584., 1724., 1864.,
      1472., 1616., 1760., 1904., 1500., 1648., 1796., 1944., 1724., 1904.,
      2084., 2264., 1752., 1936., 2120., 2304., 1780., 1968., 2156., 2344.,
      1808., 2000., 2192., 2384., 1836., 2032., 2228., 2424., 1864., 2064.,
      2264., 2464., 1892., 2096., 2300., 2504., 2116., 2352., 2588., 2824.,
      2144., 2384., 2624., 2864., 2172., 2416., 2660., 2904., 2200., 2448.,
      2696., 2944., 2228., 2480., 2732., 2984., 2256., 2512., 2768., 3024.,
      2284., 2544., 2804., 3064., 2508., 2800., 3092., 3384., 2536., 2832.,
      3128., 3424., 2564., 2864., 3164., 3464., 2592., 2896., 3200., 3504.,
      2620., 2928., 3236., 3544., 2648., 2960., 3272., 3584., 2676., 2992.,
      3308., 3624., 2900., 3248., 3596., 3944., 2928., 3280., 3632., 3984.,
      2956., 3312., 3668., 4024., 2984., 3344., 3704., 4064., 3012., 3376.,
      3740., 4104., 3040., 3408., 3776., 4144., 3068., 3440., 3812., 4184.,
      3292., 3696., 4100., 4504., 3320., 3728., 4136., 4544., 3348., 3760.,
      4172., 4584., 3376., 3792., 4208., 4624., 3404., 3824., 4244., 4664.,
      3432., 3856., 4280., 4704., 3460., 3888., 4316., 4744., 3684., 4144.,
      4604., 5064., 3712., 4176., 4640., 5104., 3740., 4208., 4676., 5144.,
      3768., 4240., 4712., 5184., 3796., 4272., 4748., 5224., 3824., 4304.,
      4784., 5264., 3852., 4336., 4820., 5304.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17014., 18040., 17218., 18256., 21536., 22896., 21792., 23168., 15178.,
      16192., 15358., 16384., 15538., 16576., 20097., 21348., 20331., 21600.,
      25408., 27064., 25696., 27376., 17847., 19080., 18045., 19296., 18243.,
      19512., 23373., 24876., 23607., 25128., 29440., 31432., 29728., 31744.,
      20619., 22104., 20817., 22320., 21015., 22536., 26649., 28404., 26883.,
      28656., 33472., 35800., 33760., 36112., 23391., 25128., 23589., 25344.,
      23787., 25560., 29925., 31932., 30159., 32184., 37504., 40168., 37792.,
      40480., 26163., 28152., 26361., 28368., 26559., 28584., 11182., 12328.,
      11290., 12448., 13536., 15056., 13664., 15200., 9010.,  10144., 9094.,
      10240., 9178.,  10336., 12694., 14008., 12802., 14128., 15328., 17072.,
      15456., 17216., 10186., 11488., 10270., 11584., 10354., 11680.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1440., 1704., 1472., 1744., 1504., 1784., 1536., 1824., 1568., 1864.,
      1600., 1904., 1632., 1944., 1888., 2264., 1920., 2304., 1952., 2344.,
      1984., 2384., 2016., 2424., 2048., 2464., 2080., 2504., 2336., 2824.,
      2368., 2864., 2400., 2904., 2432., 2944., 2464., 2984., 2496., 3024.,
      2528., 3064., 2784., 3384., 2816., 3424., 2848., 3464., 2880., 3504.,
      2912., 3544., 2944., 3584., 2976., 3624., 3232., 3944., 3264., 3984.,
      3296., 4024., 3328., 4064., 3360., 4104., 3392., 4144., 3424., 4184.,
      3680., 4504., 3712., 4544., 3744., 4584., 3776., 4624., 3808., 4664.,
      3840., 4704., 3872., 4744., 4128., 5064., 4160., 5104., 4192., 5144.,
      4224., 5184., 4256., 5224., 4288., 5264., 4320., 5304.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      33110., 34028., 35156., 36080., 33506., 34436., 35576., 36512., 41848.,
      43072., 44560., 45792., 42344., 43584., 45088., 46336., 29438., 30356.,
      31460., 32384., 29786., 30716., 31832., 32768., 30134., 31076., 32204.,
      33152., 39069., 40194., 41562., 42696., 39519., 40662., 42048., 43200.,
      49316., 50816., 52616., 54128., 49868., 51392., 53216., 54752., 34569.,
      35694., 37026., 38160., 34947., 36090., 37440., 38592., 35325., 36486.,
      37854., 39024., 13881., 14490., 15342., 15960., 14331., 14958., 15828.,
      16464., 25556., 26624., 27992., 29072., 26108., 27200., 28592., 29696.,
      11445., 12054., 12870., 13488., 11823., 12450., 13284., 13920., 12201.,
      12846., 13698., 14352., 20181., 21042., 22146., 23016., 20631., 21510.,
      22632., 23520., 24836., 25984., 27432., 28592., 25388., 26560., 28032.,
      29216., 16737., 17598., 18666., 19536., 17115., 17994., 19080., 19968.,
      17493., 18390., 19494., 20400., 26481., 27594., 28950., 30072., 26931.,
      28062., 29436., 30576., 32564., 34048., 35832., 37328., 33116., 34624.,
      36432., 37952., 22029., 23142., 24462., 25584., 22407., 23538., 24876.,
      26016., 22785., 23934., 25290., 26448., 21278., 22364., 23564., 24656.,
      21482., 22580., 23792., 24896., 25624., 27072., 28656., 30112., 25864.,
      27328., 28928., 30400., 16934., 18020., 19196., 20288., 17090., 18188.,
      19376., 20480., 17246., 18356., 19556., 20672., 4934.,  5420.,  6020.,
      6512.,  5138.,  5636.,  6248.,  6752.,  9784.,  10688., 11728., 12640.,
      10024., 10944., 12000., 12928., 2990.,  3476.,  4052.,  4544.,  3146.,
      3644.,  4232.,  4736.,  3302.,  3812.,  4412.,  4928.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2636., 2880.,  3160., 3408.,  2692., 2944.,  3232., 3488.,  2748., 3008.,
      3304., 3568.,  2804., 3072.,  3376., 3648.,  2860., 3136.,  3448., 3728.,
      2916., 3200.,  3520., 3808.,  2972., 3264.,  3592., 3888.,  3420., 3776.,
      4168., 4528.,  3476., 3840.,  4240., 4608.,  3532., 3904.,  4312., 4688.,
      3588., 3968.,  4384., 4768.,  3644., 4032.,  4456., 4848.,  3700., 4096.,
      4528., 4928.,  3756., 4160.,  4600., 5008.,  4204., 4672.,  5176., 5648.,
      4260., 4736.,  5248., 5728.,  4316., 4800.,  5320., 5808.,  4372., 4864.,
      5392., 5888.,  4428., 4928.,  5464., 5968.,  4484., 4992.,  5536., 6048.,
      4540., 5056.,  5608., 6128.,  4988., 5568.,  6184., 6768.,  5044., 5632.,
      6256., 6848.,  5100., 5696.,  6328., 6928.,  5156., 5760.,  6400., 7008.,
      5212., 5824.,  6472., 7088.,  5268., 5888.,  6544., 7168.,  5324., 5952.,
      6616., 7248.,  5772., 6464.,  7192., 7888.,  5828., 6528.,  7264., 7968.,
      5884., 6592.,  7336., 8048.,  5940., 6656.,  7408., 8128.,  5996., 6720.,
      7480., 8208.,  6052., 6784.,  7552., 8288.,  6108., 6848.,  7624., 8368.,
      6556., 7360.,  8200., 9008.,  6612., 7424.,  8272., 9088.,  6668., 7488.,
      8344., 9168.,  6724., 7552.,  8416., 9248.,  6780., 7616.,  8488., 9328.,
      6836., 7680.,  8560., 9408.,  6892., 7744.,  8632., 9488.,  7340., 8256.,
      9208., 10128., 7396., 8320.,  9280., 10208., 7452., 8384.,  9352., 10288.,
      7508., 8448.,  9424., 10368., 7564., 8512.,  9496., 10448., 7620., 8576.,
      9568., 10528., 7676., 8640.,  9640., 10608.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      34198., 34732., 35266., 35800., 36748., 37288., 37828., 38368., 34978.,
      35524., 36070., 36616., 37576., 38128., 38680., 39232., 43048., 43760.,
      44472., 45184., 46416., 47136., 47856., 48576., 44024., 44752., 45480.,
      46208., 47456., 48192., 48928., 49664., 29926., 30460., 30994., 31528.,
      32428., 32968., 33508., 34048., 30610., 31156., 31702., 32248., 33160.,
      33712., 34264., 34816., 31294., 31852., 32410., 32968., 33892., 34456.,
      35020., 35584., 38613., 39226., 39839., 40452., 41542., 42164., 42786.,
      43408., 39495., 40126., 40757., 41388., 42496., 43136., 43776., 44416.,
      44140., 44872., 45604., 46336., 47656., 48400., 49144., 49888., 45220.,
      45976., 46732., 47488., 48832., 49600., 50368., 51136., 33709., 34322.,
      34935., 35548., 36566., 37188., 37810., 38432., 34447., 35078., 35709.,
      36340., 37376., 38016., 38656., 39296., 29937., 30458., 30979., 31500.,
      32426., 32956., 33486., 34016., 8337.,  8562.,  8787.,  9012.,  9714.,
      9948.,  10182., 10416., 9219.,  9462.,  9705.,  9948.,  10668., 10920.,
      11172., 11424., 18684., 19112., 19540., 19968., 20984., 21424., 21864.,
      22304., 19764., 20216., 20668., 21120., 22160., 22624., 23088., 23552.,
      6537.,  6762.,  6987.,  7212.,  7842.,  8076.,  8310.,  8544.,  7275.,
      7518.,  7761.,  8004.,  8652.,  8904.,  9156.,  9408.,  8013.,  8274.,
      8535.,  8796.,  9462.,  9732.,  10002., 10272., 20685., 21162., 21639.,
      22116., 23070., 23556., 24042., 24528., 21567., 22062., 22557., 23052.,
      24024., 24528., 25032., 25536., 25484., 26120., 26756., 27392., 28616.,
      29264., 29912., 30560., 26564., 27224., 27884., 28544., 29792., 30464.,
      31136., 31808., 16869., 17346., 17823., 18300., 19182., 19668., 20154.,
      20640., 17607., 18102., 18597., 19092., 19992., 20496., 21000., 21504.,
      18345., 18858., 19371., 19884., 20802., 21324., 21846., 22368., 33033.,
      33762., 34491., 35220., 36426., 37164., 37902., 38640., 33915., 34662.,
      35409., 36156., 37380., 38136., 38892., 39648., 40604., 41576., 42548.,
      43520., 45080., 46064., 47048., 48032., 41684., 42680., 43676., 44672.,
      46256., 47264., 48272., 49280., 27201., 27930., 28659., 29388., 30522.,
      31260., 31998., 32736., 27939., 28686., 29433., 30180., 31332., 32088.,
      32844., 33600., 28677., 29442., 30207., 30972., 32142., 32916., 33690.,
      34464., 19454., 20028., 20602., 21176., 21972., 22552., 23132., 23712.,
      19850., 20436., 21022., 21608., 22416., 23008., 23600., 24192., 21384.,
      22064., 22744., 23424., 24368., 25056., 25744., 26432., 21848., 22544.,
      23240., 23936., 24896., 25600., 26304., 27008., 14862., 15436., 16010.,
      16584., 17332., 17912., 18492., 19072., 15162., 15748., 16334., 16920.,
      17680., 18272., 18864., 19456., 14310., 14780., 15250., 15720., 16364.,
      16840., 17316., 17792., 2854.,  2956.,  3058.,  3160.,  3484.,  3592.,
      3700.,  3808.,  3250.,  3364.,  3478.,  3592.,  3928.,  4048.,  4168.,
      4288.,  7784.,  8048.,  8312.,  8576.,  9104.,  9376.,  9648.,  9920.,
      8248.,  8528.,  8808.,  9088.,  9632.,  9920.,  10208., 10496., 2038.,
      2140.,  2242.,  2344.,  2620.,  2728.,  2836.,  2944.,  2338.,  2452.,
      2566.,  2680.,  2968.,  3088.,  3208.,  3328.,  2638.,  2764.,  2890.,
      3016.,  3316.,  3448.,  3580.,  3712.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5028.,  5272.,  5516.,  5760.,  6072.,  6320.,  6568.,  6816.,  5132.,
      5384.,  5636.,  5888.,  6208.,  6464.,  6720.,  6976.,  5236.,  5496.,
      5756.,  6016.,  6344.,  6608.,  6872.,  7136.,  5340.,  5608.,  5876.,
      6144.,  6480.,  6752.,  7024.,  7296.,  5444.,  5720.,  5996.,  6272.,
      6616.,  6896.,  7176.,  7456.,  5548.,  5832.,  6116.,  6400.,  6752.,
      7040.,  7328.,  7616.,  5652.,  5944.,  6236.,  6528.,  6888.,  7184.,
      7480.,  7776.,  6484.,  6840.,  7196.,  7552.,  7976.,  8336.,  8696.,
      9056.,  6588.,  6952.,  7316.,  7680.,  8112.,  8480.,  8848.,  9216.,
      6692.,  7064.,  7436.,  7808.,  8248.,  8624.,  9000.,  9376.,  6796.,
      7176.,  7556.,  7936.,  8384.,  8768.,  9152.,  9536.,  6900.,  7288.,
      7676.,  8064.,  8520.,  8912.,  9304.,  9696.,  7004.,  7400.,  7796.,
      8192.,  8656.,  9056.,  9456.,  9856.,  7108.,  7512.,  7916.,  8320.,
      8792.,  9200.,  9608.,  10016., 7940.,  8408.,  8876.,  9344.,  9880.,
      10352., 10824., 11296., 8044.,  8520.,  8996.,  9472.,  10016., 10496.,
      10976., 11456., 8148.,  8632.,  9116.,  9600.,  10152., 10640., 11128.,
      11616., 8252.,  8744.,  9236.,  9728.,  10288., 10784., 11280., 11776.,
      8356.,  8856.,  9356.,  9856.,  10424., 10928., 11432., 11936., 8460.,
      8968.,  9476.,  9984.,  10560., 11072., 11584., 12096., 8564.,  9080.,
      9596.,  10112., 10696., 11216., 11736., 12256., 9396.,  9976.,  10556.,
      11136., 11784., 12368., 12952., 13536., 9500.,  10088., 10676., 11264.,
      11920., 12512., 13104., 13696., 9604.,  10200., 10796., 11392., 12056.,
      12656., 13256., 13856., 9708.,  10312., 10916., 11520., 12192., 12800.,
      13408., 14016., 9812.,  10424., 11036., 11648., 12328., 12944., 13560.,
      14176., 9916.,  10536., 11156., 11776., 12464., 13088., 13712., 14336.,
      10020., 10648., 11276., 11904., 12600., 13232., 13864., 14496., 10852.,
      11544., 12236., 12928., 13688., 14384., 15080., 15776., 10956., 11656.,
      12356., 13056., 13824., 14528., 15232., 15936., 11060., 11768., 12476.,
      13184., 13960., 14672., 15384., 16096., 11164., 11880., 12596., 13312.,
      14096., 14816., 15536., 16256., 11268., 11992., 12716., 13440., 14232.,
      14960., 15688., 16416., 11372., 12104., 12836., 13568., 14368., 15104.,
      15840., 16576., 11476., 12216., 12956., 13696., 14504., 15248., 15992.,
      16736., 12308., 13112., 13916., 14720., 15592., 16400., 17208., 18016.,
      12412., 13224., 14036., 14848., 15728., 16544., 17360., 18176., 12516.,
      13336., 14156., 14976., 15864., 16688., 17512., 18336., 12620., 13448.,
      14276., 15104., 16000., 16832., 17664., 18496., 12724., 13560., 14396.,
      15232., 16136., 16976., 17816., 18656., 12828., 13672., 14516., 15360.,
      16272., 17120., 17968., 18816., 12932., 13784., 14636., 15488., 16408.,
      17264., 18120., 18976., 13764., 14680., 15596., 16512., 17496., 18416.,
      19336., 20256., 13868., 14792., 15716., 16640., 17632., 18560., 19488.,
      20416., 13972., 14904., 15836., 16768., 17768., 18704., 19640., 20576.,
      14076., 15016., 15956., 16896., 17904., 18848., 19792., 20736., 14180.,
      15128., 16076., 17024., 18040., 18992., 19944., 20896., 14284., 15240.,
      16196., 17152., 18176., 19136., 20096., 21056., 14388., 15352., 16316.,
      17280., 18312., 19280., 20248., 21216.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      34534., 35800., 37078., 38368., 35326., 36616., 37918., 39232., 43512.,
      45184., 46872., 48576., 44504., 46208., 47928., 49664., 30286., 31528.,
      32782., 34048., 30982., 32248., 33526., 34816., 31678., 32968., 34270.,
      35584., 39001., 40452., 41921., 43408., 39901., 41388., 42893., 44416.,
      44596., 46336., 48100., 49888., 45700., 47488., 49300., 51136., 34133.,
      35548., 36981., 38432., 34889., 36340., 37809., 39296., 30269., 31500.,
      32749., 34016., 8337.,  9012.,  9705.,  10416., 9237.,  9948.,  10677.,
      11424., 18836., 19968., 21124., 22304., 19940., 21120., 22324., 23552.,
      6573.,  7212.,  7869.,  8544.,  7329.,  8004.,  8697.,  9408.,  8085.,
      8796.,  9525.,  10272., 20937., 22116., 23313., 24528., 21837., 23052.,
      24285., 25536., 25844., 27392., 28964., 30560., 26948., 28544., 30164.,
      31808., 17157., 18300., 19461., 20640., 17913., 19092., 20289., 21504.,
      18669., 19884., 21117., 22368., 33537., 35220., 36921., 38640., 34437.,
      36156., 37893., 39648., 41300., 43520., 45764., 48032., 42404., 44672.,
      46964., 49280., 27741., 29388., 31053., 32736., 28497., 30180., 31881.,
      33600., 29253., 30972., 32709., 34464., 19926., 21176., 22438., 23712.,
      20334., 21608., 22894., 24192., 21944., 23424., 24920., 26432., 22424.,
      23936., 25464., 27008., 15358., 16584., 17822., 19072., 15670., 16920.,
      18182., 19456., 14702., 15720., 16750., 17792., 2854.,  3160.,  3478.,
      3808.,  3262.,  3592.,  3934.,  4288.,  7928.,  8576.,  9240.,  9920.,
      8408.,  9088.,  9784.,  10496., 2062.,  2344.,  2638.,  2944.,  2374.,
      2680.,  2998.,  3328.,  2686.,  3016.,  3358.,  3712.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5244.,  5760.,  6284.,  6816.,  5356.,  5888.,  6428.,  6976.,  5468.,
      6016.,  6572.,  7136.,  5580.,  6144.,  6716.,  7296.,  5692.,  6272.,
      6860.,  7456.,  5804.,  6400.,  7004.,  7616.,  5916.,  6528.,  7148.,
      7776.,  6812.,  7552.,  8300.,  9056.,  6924.,  7680.,  8444.,  9216.,
      7036.,  7808.,  8588.,  9376.,  7148.,  7936.,  8732.,  9536.,  7260.,
      8064.,  8876.,  9696.,  7372.,  8192.,  9020.,  9856.,  7484.,  8320.,
      9164.,  10016., 8380.,  9344.,  10316., 11296., 8492.,  9472.,  10460.,
      11456., 8604.,  9600.,  10604., 11616., 8716.,  9728.,  10748., 11776.,
      8828.,  9856.,  10892., 11936., 8940.,  9984.,  11036., 12096., 9052.,
      10112., 11180., 12256., 9948.,  11136., 12332., 13536., 10060., 11264.,
      12476., 13696., 10172., 11392., 12620., 13856., 10284., 11520., 12764.,
      14016., 10396., 11648., 12908., 14176., 10508., 11776., 13052., 14336.,
      10620., 11904., 13196., 14496., 11516., 12928., 14348., 15776., 11628.,
      13056., 14492., 15936., 11740., 13184., 14636., 16096., 11852., 13312.,
      14780., 16256., 11964., 13440., 14924., 16416., 12076., 13568., 15068.,
      16576., 12188., 13696., 15212., 16736., 13084., 14720., 16364., 18016.,
      13196., 14848., 16508., 18176., 13308., 14976., 16652., 18336., 13420.,
      15104., 16796., 18496., 13532., 15232., 16940., 18656., 13644., 15360.,
      17084., 18816., 13756., 15488., 17228., 18976., 14652., 16512., 18380.,
      20256., 14764., 16640., 18524., 20416., 14876., 16768., 18668., 20576.,
      14988., 16896., 18812., 20736., 15100., 17024., 18956., 20896., 15212.,
      17152., 19100., 21056., 15324., 17280., 19244., 21216.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18086., 18380., 19076., 19376., 20090., 20396., 21128., 21440., 19646.,
      19964., 20684., 21008., 21746., 22076., 22832., 23168., 23144., 23536.,
      24432., 24832., 25752., 26160., 27104., 27520., 25096., 25520., 26448.,
      26880., 27832., 28272., 29248., 29696., 15734., 16028., 16676., 16976.,
      17642., 17948., 18632., 18944., 17102., 17420., 18092., 18416., 19106.,
      19436., 20144., 20480., 18470., 18812., 19508., 19856., 20570., 20924.,
      21656., 22016., 34161., 34738., 35774., 36360., 37423., 38018., 39108.,
      39712., 35925., 36538., 37610., 38232., 39331., 39962., 41088., 41728.,
      38844., 39528., 40776., 41472., 42756., 43464., 44784., 45504., 41004.,
      41736., 43032., 43776., 45108., 45864., 47232., 48000., 29545., 30122.,
      31086., 31672., 32663., 33258., 34276., 34880., 31021., 31634., 32634.,
      33256., 34283., 34914., 35968., 36608., 27249., 27770., 28678., 29208.,
      30143., 30682., 31644., 32192., 16233., 16674., 17574., 18024., 18951.,
      19410., 20364., 20832., 17997., 18474., 19410., 19896., 20859., 21354.,
      22344., 22848., 28508., 29224., 30504., 31232., 32548., 33288., 34640.,
      35392., 30668., 31432., 32760., 33536., 34900., 35688., 37088., 37888.,
      12705., 13146., 13974., 14424., 15279., 15738., 16620., 17088., 14181.,
      14658., 15522., 16008., 16899., 17394., 18312., 18816., 15657., 16170.,
      17070., 17592., 18519., 19050., 20004., 20544., 35553., 36242., 37390.,
      38088., 39263., 39970., 41172., 41888., 37317., 38042., 39226., 39960.,
      41171., 41914., 43152., 43904., 36604., 37352., 38664., 39424., 40772.,
      41544., 42928., 43712., 38764., 39560., 40920., 41728., 43124., 43944.,
      45376., 46208., 30041., 30730., 31806., 32504., 33607., 34314., 35444.,
      36160., 31517., 32242., 33354., 34088., 35227., 35970., 37136., 37888.,
      26593., 27098., 27990., 28504., 29423., 29946., 30892., 31424., 18521.,
      18946., 19830., 20264., 21175., 21618., 22556., 23008., 20285., 20746.,
      21666., 22136., 23083., 23562., 24536., 25024., 29212., 29864., 31080.,
      31744., 32996., 33672., 34960., 35648., 31372., 32072., 33336., 34048.,
      35348., 36072., 37408., 38144., 15121., 15546., 16358., 16792., 17631.,
      18074., 18940., 19392., 16597., 17058., 17906., 18376., 19251., 19730.,
      20632., 21120., 18073., 18570., 19454., 19960., 20871., 21386., 22324.,
      22848., 16566., 17068., 17780., 18288., 19018., 19532., 20280., 20800.,
      17358., 17884., 18620., 19152., 19906., 20444., 21216., 21760., 18216.,
      18800., 19632., 20224., 21080., 21680., 22560., 23168., 19144., 19760.,
      20624., 21248., 22136., 22768., 23680., 24320., 12550., 13052., 13716.,
      14224., 14906., 15420., 16120., 16640., 13150., 13676., 14364., 14896.,
      15602., 16140., 16864., 17408., 12598., 13020., 13604., 14032., 14634.,
      15068., 15688., 16128., 5510.,  5708.,  6116.,  6320.,  6746.,  6956.,
      7400.,  7616.,  6302.,  6524.,  6956.,  7184.,  7634.,  7868.,  8336.,
      8576.,  11112., 11504., 12144., 12544., 13208., 13616., 14304., 14720.,
      12040., 12464., 13136., 13568., 14264., 14704., 15424., 15872., 3926.,
      4124.,  4484.,  4688.,  5066.,  5276.,  5672.,  5888.,  4526.,  4748.,
      5132.,  5360.,  5762.,  5996.,  6416.,  6656.,  5126.,  5372.,  5780.,
      6032.,  6458.,  6716.,  7160.,  7424.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10004., 10488., 11032., 11520., 12076., 12568., 13136., 13632., 10212.,
      10712., 11272., 11776., 12348., 12856., 13440., 13952., 10420., 10936.,
      11512., 12032., 12620., 13144., 13744., 14272., 10628., 11160., 11752.,
      12288., 12892., 13432., 14048., 14592., 10836., 11384., 11992., 12544.,
      13164., 13720., 14352., 14912., 11044., 11608., 12232., 12800., 13436.,
      14008., 14656., 15232., 11252., 11832., 12472., 13056., 13708., 14296.,
      14960., 15552., 12916., 13624., 14392., 15104., 15884., 16600., 17392.,
      18112., 13124., 13848., 14632., 15360., 16156., 16888., 17696., 18432.,
      13332., 14072., 14872., 15616., 16428., 17176., 18000., 18752., 13540.,
      14296., 15112., 15872., 16700., 17464., 18304., 19072., 13748., 14520.,
      15352., 16128., 16972., 17752., 18608., 19392., 13956., 14744., 15592.,
      16384., 17244., 18040., 18912., 19712., 14164., 14968., 15832., 16640.,
      17516., 18328., 19216., 20032., 15828., 16760., 17752., 18688., 19692.,
      20632., 21648., 22592., 16036., 16984., 17992., 18944., 19964., 20920.,
      21952., 22912., 16244., 17208., 18232., 19200., 20236., 21208., 22256.,
      23232., 16452., 17432., 18472., 19456., 20508., 21496., 22560., 23552.,
      16660., 17656., 18712., 19712., 20780., 21784., 22864., 23872., 16868.,
      17880., 18952., 19968., 21052., 22072., 23168., 24192., 17076., 18104.,
      19192., 20224., 21324., 22360., 23472., 24512., 18740., 19896., 21112.,
      22272., 23500., 24664., 25904., 27072., 18948., 20120., 21352., 22528.,
      23772., 24952., 26208., 27392., 19156., 20344., 21592., 22784., 24044.,
      25240., 26512., 27712., 19364., 20568., 21832., 23040., 24316., 25528.,
      26816., 28032., 19572., 20792., 22072., 23296., 24588., 25816., 27120.,
      28352., 19780., 21016., 22312., 23552., 24860., 26104., 27424., 28672.,
      19988., 21240., 22552., 23808., 25132., 26392., 27728., 28992., 21652.,
      23032., 24472., 25856., 27308., 28696., 30160., 31552., 21860., 23256.,
      24712., 26112., 27580., 28984., 30464., 31872., 22068., 23480., 24952.,
      26368., 27852., 29272., 30768., 32192., 22276., 23704., 25192., 26624.,
      28124., 29560., 31072., 32512., 22484., 23928., 25432., 26880., 28396.,
      29848., 31376., 32832., 22692., 24152., 25672., 27136., 28668., 30136.,
      31680., 33152., 22900., 24376., 25912., 27392., 28940., 30424., 31984.,
      33472., 24564., 26168., 27832., 29440., 31116., 32728., 34416., 36032.,
      24772., 26392., 28072., 29696., 31388., 33016., 34720., 36352., 24980.,
      26616., 28312., 29952., 31660., 33304., 35024., 36672., 25188., 26840.,
      28552., 30208., 31932., 33592., 35328., 36992., 25396., 27064., 28792.,
      30464., 32204., 33880., 35632., 37312., 25604., 27288., 29032., 30720.,
      32476., 34168., 35936., 37632., 25812., 27512., 29272., 30976., 32748.,
      34456., 36240., 37952., 27476., 29304., 31192., 33024., 34924., 36760.,
      38672., 40512., 27684., 29528., 31432., 33280., 35196., 37048., 38976.,
      40832., 27892., 29752., 31672., 33536., 35468., 37336., 39280., 41152.,
      28100., 29976., 31912., 33792., 35740., 37624., 39584., 41472., 28308.,
      30200., 32152., 34048., 36012., 37912., 39888., 41792., 28516., 30424.,
      32392., 34304., 36284., 38200., 40192., 42112., 28724., 30648., 32632.,
      34560., 36556., 38488., 40496., 42432.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x12x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23206., 23500., 23794., 24088., 24796., 25096., 25396., 25696., 26434.,
      26740., 27046., 27352., 28120., 28432., 28744., 29056., 24766., 25084.,
      25402., 25720., 26452., 26776., 27100., 27424., 28186., 28516., 28846.,
      29176., 29968., 30304., 30640., 30976., 29000., 29392., 29784., 30176.,
      31056., 31456., 31856., 32256., 33176., 33584., 33992., 34400., 35360.,
      35776., 36192., 36608., 30824., 31248., 31672., 32096., 33008., 33440.,
      33872., 34304., 35256., 35696., 36136., 36576., 37568., 38016., 38464.,
      38912., 18502., 18796., 19090., 19384., 19996., 20296., 20596., 20896.,
      21538., 21844., 22150., 22456., 23128., 23440., 23752., 24064., 19678.,
      19996., 20314., 20632., 21268., 21592., 21916., 22240., 22906., 23236.,
      23566., 23896., 24592., 24928., 25264., 25600., 20854., 21196., 21538.,
      21880., 22540., 22888., 23236., 23584., 24274., 24628., 24982., 25336.,
      26056., 26416., 26776., 27136., 33569., 34146., 34723., 35300., 36402.,
      36988., 37574., 38160., 39307., 39902., 40497., 41092., 42284., 42888.,
      43492., 44096., 35525., 36138., 36751., 37364., 38502., 39124., 39746.,
      40368., 41551., 42182., 42813., 43444., 44672., 45312., 45952., 46592.,
      31436., 32120., 32804., 33488., 34776., 35472., 36168., 36864., 38212.,
      38920., 39628., 40336., 41744., 42464., 43184., 43904., 33660., 34392.,
      35124., 35856., 37192., 37936., 38680., 39424., 40820., 41576., 42332.,
      43088., 44544., 45312., 46080., 46848., 24337., 24914., 25491., 26068.,
      27026., 27612., 28198., 28784., 29787., 30382., 30977., 31572., 32620.,
      33224., 33828., 34432., 25717., 26330., 26943., 27556., 28550., 29172.,
      29794., 30416., 31455., 32086., 32717., 33348., 34432., 35072., 35712.,
      36352., 16729., 17250., 17771., 18292., 19194., 19724., 20254., 20784.,
      21731., 22270., 22809., 23348., 24340., 24888., 25436., 25984., 25497.,
      25938., 26379., 26820., 27786., 28236., 28686., 29136., 30147., 30606.,
      31065., 31524., 32580., 33048., 33516., 33984., 27453., 27930., 28407.,
      28884., 29886., 30372., 30858., 31344., 32391., 32886., 33381., 33876.,
      34968., 35472., 35976., 36480., 31212., 31928., 32644., 33360., 34680.,
      35408., 36136., 36864., 38244., 38984., 39724., 40464., 41904., 42656.,
      43408., 44160., 33436., 34200., 34964., 35728., 37096., 37872., 38648.,
      39424., 40852., 41640., 42428., 43216., 44704., 45504., 46304., 47104.,
      18441., 18882., 19323., 19764., 20586., 21036., 21486., 21936., 22803.,
      23262., 23721., 24180., 25092., 25560., 26028., 26496., 19821., 20298.,
      20775., 21252., 22110., 22596., 23082., 23568., 24471., 24966., 25461.,
      25956., 26904., 27408., 27912., 28416., 21201., 21714., 22227., 22740.,
      23634., 24156., 24678., 25200., 26139., 26670., 27201., 27732., 28716.,
      29256., 29796., 30336., 42385., 43074., 43763., 44452., 45666., 46364.,
      47062., 47760., 49019., 49726., 50433., 51140., 52444., 53160., 53876.,
      54592., 44341., 45066., 45791., 46516., 47766., 48500., 49234., 49968.,
      51263., 52006., 52749., 53492., 54832., 55584., 56336., 57088., 35084.,
      35832., 36580., 37328., 38680., 39440., 40200., 40960., 42372., 43144.,
      43916., 44688., 46160., 46944., 47728., 48512., 37308., 38104., 38900.,
      39696., 41096., 41904., 42712., 43520., 44980., 45800., 46620., 47440.,
      48960., 49792., 50624., 51456., 31361., 32050., 32739., 33428., 34498.,
      35196., 35894., 36592., 37707., 38414., 39121., 39828., 40988., 41704.,
      42420., 43136., 32741., 33466., 34191., 34916., 36022., 36756., 37490.,
      38224., 39375., 40118., 40861., 41604., 42800., 43552., 44304., 45056.,
      21577., 22082., 22587., 23092., 23978., 24492., 25006., 25520., 26451.,
      26974., 27497., 28020., 28996., 29528., 30060., 30592., 19849., 20274.,
      20699., 21124., 22074., 22508., 22942., 23376., 24371., 24814., 25257.,
      25700., 26740., 27192., 27644., 28096., 21805., 22266., 22727., 23188.,
      24174., 24644., 25114., 25584., 26615., 27094., 27573., 28052., 29128.,
      29616., 30104., 30592., 24492., 25144., 25796., 26448., 27704., 28368.,
      29032., 29696., 31012., 31688., 32364., 33040., 34416., 35104., 35792.,
      36480., 26716., 27416., 28116., 28816., 30120., 30832., 31544., 32256.,
      33620., 34344., 35068., 35792., 37216., 37952., 38688., 39424., 13049.,
      13474., 13899., 14324., 15130., 15564., 15998., 16432., 17283., 17726.,
      18169., 18612., 19508., 19960., 20412., 20864., 14429., 14890., 15351.,
      15812., 16654., 17124., 17594., 18064., 18951., 19430., 19909., 20388.,
      21320., 21808., 22296., 22784., 15809., 16306., 16803., 17300., 18178.,
      18684., 19190., 19696., 20619., 21134., 21649., 22164., 23132., 23656.,
      24180., 24704., 32630., 33132., 33634., 34136., 35052., 35560., 36068.,
      36576., 37522., 38036., 38550., 39064., 40040., 40560., 41080., 41600.,
      34190., 34716., 35242., 35768., 36708., 37240., 37772., 38304., 39274.,
      39812., 40350., 40888., 41888., 42432., 42976., 43520., 35848., 36432.,
      37016., 37600., 38672., 39264., 39856., 40448., 41560., 42160., 42760.,
      43360., 44512., 45120., 45728., 46336., 37672., 38288., 38904., 39520.,
      40624., 41248., 41872., 42496., 43640., 44272., 44904., 45536., 46720.,
      47360., 48000., 48640., 24598., 25100., 25602., 26104., 26924., 27432.,
      27940., 28448., 29298., 29812., 30326., 30840., 31720., 32240., 32760.,
      33280., 25774., 26300., 26826., 27352., 28196., 28728., 29260., 29792.,
      30666., 31204., 31742., 32280., 33184., 33728., 34272., 34816., 24774.,
      25196., 25618., 26040., 26780., 27208., 27636., 28064., 28834., 29268.,
      29702., 30136., 30936., 31376., 31816., 32256., 10822., 11020., 11218.,
      11416., 12028., 12232., 12436., 12640., 13282., 13492., 13702., 13912.,
      14584., 14800., 15016., 15232., 12382., 12604., 12826., 13048., 13684.,
      13912., 14140., 14368., 15034., 15268., 15502., 15736., 16432., 16672.,
      16912., 17152., 21832., 22224., 22616., 23008., 23888., 24288., 24688.,
      25088., 26008., 26416., 26824., 27232., 28192., 28608., 29024., 29440.,
      23656., 24080., 24504., 24928., 25840., 26272., 26704., 27136., 28088.,
      28528., 28968., 29408., 30400., 30848., 31296., 31744., 7654.,  7852.,
      8050.,  8248.,  8764.,  8968.,  9172.,  9376.,  9922.,  10132., 10342.,
      10552., 11128., 11344., 11560., 11776., 8830.,  9052.,  9274.,  9496.,
      10036., 10264., 10492., 10720., 11290., 11524., 11758., 11992., 12592.,
      12832., 13072., 13312., 10006., 10252., 10498., 10744., 11308., 11560.,
      11812., 12064., 12658., 12916., 13174., 13432., 14056., 14320., 14584.,
      14848.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x12x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19524., 20008., 20492., 20976., 21576., 22064., 22552., 23040., 23660.,
      24152., 24644., 25136., 25776., 26272., 26768., 27264., 19924., 20424.,
      20924., 21424., 22040., 22544., 23048., 23552., 24188., 24696., 25204.,
      25712., 26368., 26880., 27392., 27904., 20324., 20840., 21356., 21872.,
      22504., 23024., 23544., 24064., 24716., 25240., 25764., 26288., 26960.,
      27488., 28016., 28544., 20724., 21256., 21788., 22320., 22968., 23504.,
      24040., 24576., 25244., 25784., 26324., 26864., 27552., 28096., 28640.,
      29184., 8580.,  8872.,  9164.,  9456.,  9864.,  10160., 10456., 10752.,
      11180., 11480., 11780., 12080., 12528., 12832., 13136., 13440., 8980.,
      9288.,  9596.,  9904.,  10328., 10640., 10952., 11264., 11708., 12024.,
      12340., 12656., 13120., 13440., 13760., 14080., 9380.,  9704.,  10028.,
      10352., 10792., 11120., 11448., 11776., 12236., 12568., 12900., 13232.,
      13712., 14048., 14384., 14720., 4132.,  4328.,  4524.,  4720.,  5032.,
      5232.,  5432.,  5632.,  5964.,  6168.,  6372.,  6576.,  6928.,  7136.,
      7344.,  7552.,  4532.,  4744.,  4956.,  5168.,  5496.,  5712.,  5928.,
      6144.,  6492.,  6712.,  6932.,  7152.,  7520.,  7744.,  7968.,  8192.,
      4932.,  5160.,  5388.,  5616.,  5960.,  6192.,  6424.,  6656.,  7020.,
      7256.,  7492.,  7728.,  8112.,  8352.,  8592.,  8832.,  5332.,  5576.,
      5820.,  6064.,  6424.,  6672.,  6920.,  7168.,  7548.,  7800.,  8052.,
      8304.,  8704.,  8960.,  9216.,  9472.,  5732.,  5992.,  6252.,  6512.,
      6888.,  7152.,  7416.,  7680.,  8076.,  8344.,  8612.,  8880.,  9296.,
      9568.,  9840.,  10112., 6132.,  6408.,  6684.,  6960.,  7352.,  7632.,
      7912.,  8192.,  8604.,  8888.,  9172.,  9456.,  9888.,  10176., 10464.,
      10752., 6532.,  6824.,  7116.,  7408.,  7816.,  8112.,  8408.,  8704.,
      9132.,  9432.,  9732.,  10032., 10480., 10784., 11088., 11392., 9732.,
      10152., 10572., 10992., 11528., 11952., 12376., 12800., 13356., 13784.,
      14212., 14640., 15216., 15648., 16080., 16512., 10132., 10568., 11004.,
      11440., 11992., 12432., 12872., 13312., 13884., 14328., 14772., 15216.,
      15808., 16256., 16704., 17152., 10532., 10984., 11436., 11888., 12456.,
      12912., 13368., 13824., 14412., 14872., 15332., 15792., 16400., 16864.,
      17328., 17792., 10932., 11400., 11868., 12336., 12920., 13392., 13864.,
      14336., 14940., 15416., 15892., 16368., 16992., 17472., 17952., 18432.,
      11332., 11816., 12300., 12784., 13384., 13872., 14360., 14848., 15468.,
      15960., 16452., 16944., 17584., 18080., 18576., 19072., 11732., 12232.,
      12732., 13232., 13848., 14352., 14856., 15360., 15996., 16504., 17012.,
      17520., 18176., 18688., 19200., 19712., 12132., 12648., 13164., 13680.,
      14312., 14832., 15352., 15872., 16524., 17048., 17572., 18096., 18768.,
      19296., 19824., 20352., 15332., 15976., 16620., 17264., 18024., 18672.,
      19320., 19968., 20748., 21400., 22052., 22704., 23504., 24160., 24816.,
      25472., 15732., 16392., 17052., 17712., 18488., 19152., 19816., 20480.,
      21276., 21944., 22612., 23280., 24096., 24768., 25440., 26112., 16132.,
      16808., 17484., 18160., 18952., 19632., 20312., 20992., 21804., 22488.,
      23172., 23856., 24688., 25376., 26064., 26752., 16532., 17224., 17916.,
      18608., 19416., 20112., 20808., 21504., 22332., 23032., 23732., 24432.,
      25280., 25984., 26688., 27392., 16932., 17640., 18348., 19056., 19880.,
      20592., 21304., 22016., 22860., 23576., 24292., 25008., 25872., 26592.,
      27312., 28032., 17332., 18056., 18780., 19504., 20344., 21072., 21800.,
      22528., 23388., 24120., 24852., 25584., 26464., 27200., 27936., 28672.,
      17732., 18472., 19212., 19952., 20808., 21552., 22296., 23040., 23916.,
      24664., 25412., 26160., 27056., 27808., 28560., 29312., 20932., 21800.,
      22668., 23536., 24520., 25392., 26264., 27136., 28140., 29016., 29892.,
      30768., 31792., 32672., 33552., 34432., 21332., 22216., 23100., 23984.,
      24984., 25872., 26760., 27648., 28668., 29560., 30452., 31344., 32384.,
      33280., 34176., 35072., 21732., 22632., 23532., 24432., 25448., 26352.,
      27256., 28160., 29196., 30104., 31012., 31920., 32976., 33888., 34800.,
      35712., 22132., 23048., 23964., 24880., 25912., 26832., 27752., 28672.,
      29724., 30648., 31572., 32496., 33568., 34496., 35424., 36352., 18180.,
      18856., 19532., 20208., 21000., 21680., 22360., 23040., 23852., 24536.,
      25220., 25904., 26736., 27424., 28112., 28800., 18580., 19272., 19964.,
      20656., 21464., 22160., 22856., 23552., 24380., 25080., 25780., 26480.,
      27328., 28032., 28736., 29440., 18980., 19688., 20396., 21104., 21928.,
      22640., 23352., 24064., 24908., 25624., 26340., 27056., 27920., 28640.,
      29360., 30080., 9380.,  9704.,  10028., 10352., 10792., 11120., 11448.,
      11776., 12236., 12568., 12900., 13232., 13712., 14048., 14384., 14720.,
      9780.,  10120., 10460., 10800., 11256., 11600., 11944., 12288., 12764.,
      13112., 13460., 13808., 14304., 14656., 15008., 15360., 1732.,  1832.,
      1932.,  2032.,  2248.,  2352.,  2456.,  2560.,  2796.,  2904.,  3012.,
      3120.,  3376.,  3488.,  3600.,  3712.,  2132.,  2248.,  2364.,  2480.,
      2712.,  2832.,  2952.,  3072.,  3324.,  3448.,  3572.,  3696.,  3968.,
      4096.,  4224.,  4352.,  2532.,  2664.,  2796.,  2928.,  3176.,  3312.,
      3448.,  3584.,  3852.,  3992.,  4132.,  4272.,  4560.,  4704.,  4848.,
      4992.,  2932.,  3080.,  3228.,  3376.,  3640.,  3792.,  3944.,  4096.,
      4380.,  4536.,  4692.,  4848.,  5152.,  5312.,  5472.,  5632.,  3332.,
      3496.,  3660.,  3824.,  4104.,  4272.,  4440.,  4608.,  4908.,  5080.,
      5252.,  5424.,  5744.,  5920.,  6096.,  6272.,  6532.,  6824.,  7116.,
      7408.,  7816.,  8112.,  8408.,  8704.,  9132.,  9432.,  9732.,  10032.,
      10480., 10784., 11088., 11392., 6932.,  7240.,  7548.,  7856.,  8280.,
      8592.,  8904.,  9216.,  9660.,  9976.,  10292., 10608., 11072., 11392.,
      11712., 12032., 7332.,  7656.,  7980.,  8304.,  8744.,  9072.,  9400.,
      9728.,  10188., 10520., 10852., 11184., 11664., 12000., 12336., 12672.,
      7732.,  8072.,  8412.,  8752.,  9208.,  9552.,  9896.,  10240., 10716.,
      11064., 11412., 11760., 12256., 12608., 12960., 13312., 8132.,  8488.,
      8844.,  9200.,  9672.,  10032., 10392., 10752., 11244., 11608., 11972.,
      12336., 12848., 13216., 13584., 13952., 8532.,  8904.,  9276.,  9648.,
      10136., 10512., 10888., 11264., 11772., 12152., 12532., 12912., 13440.,
      13824., 14208., 14592., 8932.,  9320.,  9708.,  10096., 10600., 10992.,
      11384., 11776., 12300., 12696., 13092., 13488., 14032., 14432., 14832.,
      15232.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4155., 4206., 5928., 6000., 6072., 3774., 3819., 4716., 4767., 6720.,
      6792., 6864., 4269., 4314., 5304., 5360., 7550., 7628., 7706., 4784.,
      4832., 5920., 5976., 8408., 8486., 8564., 5312., 5360., 2877., 2910.,
      4011., 4056., 4101., 2478., 2505., 3240., 3273., 4506., 4551., 4596.,
      2775., 2802., 3603., 3636., 5001., 5046., 5091., 3072., 3099.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      342., 352., 362.,  372.,  382.,  392.,  402.,  452.,  462., 472.,
      482., 492., 502.,  512.,  562.,  572.,  582.,  592.,  602., 612.,
      622., 672., 682.,  692.,  702.,  712.,  722.,  732.,  782., 792.,
      802., 812., 822.,  832.,  842.,  892.,  902.,  912.,  922., 932.,
      942., 952., 1002., 1012., 1022., 1032., 1042., 1052., 1062.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7884.,  8310.,  7980.,  8412.,  11217., 11856., 11352., 12000., 11487.,
      12144., 7116.,  7548.,  7200.,  7638.,  8940.,  9432.,  9036.,  9534.,
      12702., 13440., 12837., 13584., 12972., 13728., 8040.,  8538.,  8124.,
      8628.,  10040., 10608., 10144., 10720., 14248., 15100., 14392., 15256.,
      14536., 15412., 8992.,  9568.,  9080.,  9664.,  11184., 11840., 11288.,
      11952., 15832., 16816., 15976., 16972., 16120., 17128., 9960.,  10624.,
      10048., 10720., 5328.,  5754.,  5388.,  5820.,  7383.,  8022.,  7464.,
      8112.,  7545.,  8202.,  4524.,  4956.,  4572.,  5010.,  5988.,  6480.,
      6048.,  6546.,  8274.,  9012.,  8355.,  9102.,  8436.,  9192.,  5052.,
      5550.,  5100.,  5604.,  6648.,  7206.,  6708.,  7272.,  9165.,  10002.,
      9246.,  10092., 9327.,  10182., 5580.,  6144.,  5628.,  6198.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      584.,  684.,  600.,  704.,  616.,  724.,  632.,  744.,  648.,  764.,
      664.,  784.,  680.,  804.,  760.,  904.,  776.,  924.,  792.,  944.,
      808.,  964.,  824.,  984.,  840.,  1004., 856.,  1024., 936.,  1124.,
      952.,  1144., 968.,  1164., 984.,  1184., 1000., 1204., 1016., 1224.,
      1032., 1244., 1112., 1344., 1128., 1364., 1144., 1384., 1160., 1404.,
      1176., 1424., 1192., 1444., 1208., 1464., 1288., 1564., 1304., 1584.,
      1320., 1604., 1336., 1624., 1352., 1644., 1368., 1664., 1384., 1684.,
      1464., 1784., 1480., 1804., 1496., 1824., 1512., 1844., 1528., 1864.,
      1544., 1884., 1560., 1904., 1640., 2004., 1656., 2024., 1672., 2044.,
      1688., 2064., 1704., 2084., 1720., 2104., 1736., 2124.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15342., 15768., 16194., 16620., 15528., 15960., 16392., 16824., 21795.,
      22434., 23073., 23712., 22056., 22704., 23352., 24000., 22317., 22974.,
      23631., 24288., 13800., 14232., 14664., 15096., 13962., 14400., 14838.,
      15276., 17388., 17880., 18372., 18864., 17574., 18072., 18570., 19068.,
      24666., 25404., 26142., 26880., 24927., 25674., 26421., 27168., 25188.,
      25944., 26700., 27456., 15582., 16080., 16578., 17076., 15744., 16248.,
      16752., 17256., 19512., 20080., 20648., 21216., 19712., 20288., 20864.,
      21440., 27644., 28496., 29348., 30200., 27920., 28784., 29648., 30512.,
      28196., 29072., 29948., 30824., 17408., 17984., 18560., 19136., 17576.,
      18160., 18744., 19328., 21712., 22368., 23024., 23680., 21912., 22576.,
      23240., 23904., 30680., 31664., 32648., 33632., 30956., 31952., 32948.,
      33944., 31232., 32240., 33248., 34256., 19256., 19920., 20584., 21248.,
      19424., 20096., 20768., 21440., 10230., 10656., 11082., 11508., 10344.,
      10776., 11208., 11640., 14127., 14766., 15405., 16044., 14280., 14928.,
      15576., 16224., 14433., 15090., 15747., 16404., 8616.,  9048.,  9480.,
      9912.,  8706.,  9144.,  9582.,  10020., 11484., 11976., 12468., 12960.,
      11598., 12096., 12594., 13092., 15810., 16548., 17286., 18024., 15963.,
      16710., 17457., 18204., 16116., 16872., 17628., 18384., 9606.,  10104.,
      10602., 11100., 9696.,  10200., 10704., 11208., 12738., 13296., 13854.,
      14412., 12852., 13416., 13980., 14544., 17493., 18330., 19167., 20004.,
      17646., 18492., 19338., 20184., 17799., 18654., 19509., 20364., 10596.,
      11160., 11724., 12288., 10686., 11256., 11826., 12396.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1068., 1168., 1268., 1368., 1096., 1200., 1304., 1408., 1124., 1232.,
      1340., 1448., 1152., 1264., 1376., 1488., 1180., 1296., 1412., 1528.,
      1208., 1328., 1448., 1568., 1236., 1360., 1484., 1608., 1376., 1520.,
      1664., 1808., 1404., 1552., 1700., 1848., 1432., 1584., 1736., 1888.,
      1460., 1616., 1772., 1928., 1488., 1648., 1808., 1968., 1516., 1680.,
      1844., 2008., 1544., 1712., 1880., 2048., 1684., 1872., 2060., 2248.,
      1712., 1904., 2096., 2288., 1740., 1936., 2132., 2328., 1768., 1968.,
      2168., 2368., 1796., 2000., 2204., 2408., 1824., 2032., 2240., 2448.,
      1852., 2064., 2276., 2488., 1992., 2224., 2456., 2688., 2020., 2256.,
      2492., 2728., 2048., 2288., 2528., 2768., 2076., 2320., 2564., 2808.,
      2104., 2352., 2600., 2848., 2132., 2384., 2636., 2888., 2160., 2416.,
      2672., 2928., 2300., 2576., 2852., 3128., 2328., 2608., 2888., 3168.,
      2356., 2640., 2924., 3208., 2384., 2672., 2960., 3248., 2412., 2704.,
      2996., 3288., 2440., 2736., 3032., 3328., 2468., 2768., 3068., 3368.,
      2608., 2928., 3248., 3568., 2636., 2960., 3284., 3608., 2664., 2992.,
      3320., 3648., 2692., 3024., 3356., 3688., 2720., 3056., 3392., 3728.,
      2748., 3088., 3428., 3768., 2776., 3120., 3464., 3808., 2916., 3280.,
      3644., 4008., 2944., 3312., 3680., 4048., 2972., 3344., 3716., 4088.,
      3000., 3376., 3752., 4128., 3028., 3408., 3788., 4168., 3056., 3440.,
      3824., 4208., 3084., 3472., 3860., 4248.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15672., 16620., 15864., 16824., 22299., 23712., 22569., 24000., 22839.,
      24288., 14148., 15096., 14316., 15276., 17784., 18864., 17976., 19068.,
      25269., 26880., 25539., 27168., 25809., 27456., 15996., 17076., 16164.,
      17256., 19976., 21216., 20184., 21440., 28352., 30200., 28640., 30512.,
      28928., 30824., 17896., 19136., 18072., 19328., 22264., 23680., 22472.,
      23904., 31520., 33632., 31808., 33944., 32096., 34256., 19832., 21248.,
      20008., 21440., 10596., 11508., 10716., 11640., 14685., 16044., 14847.,
      16224., 15009., 16404., 9000.,  9912.,  9096.,  10020., 11916., 12960.,
      12036., 13092., 16467., 18024., 16629., 18204., 16791., 18384., 10056.,
      11100., 10152., 11208., 13236., 14412., 13356., 14544., 18249., 20004.,
      18411., 20184., 18573., 20364., 11112., 12288., 11208., 12396.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1152., 1368., 1184., 1408., 1216., 1448., 1248., 1488., 1280., 1528.,
      1312., 1568., 1344., 1608., 1504., 1808., 1536., 1848., 1568., 1888.,
      1600., 1928., 1632., 1968., 1664., 2008., 1696., 2048., 1856., 2248.,
      1888., 2288., 1920., 2328., 1952., 2368., 1984., 2408., 2016., 2448.,
      2048., 2488., 2208., 2688., 2240., 2728., 2272., 2768., 2304., 2808.,
      2336., 2848., 2368., 2888., 2400., 2928., 2560., 3128., 2592., 3168.,
      2624., 3208., 2656., 3248., 2688., 3288., 2720., 3328., 2752., 3368.,
      2912., 3568., 2944., 3608., 2976., 3648., 3008., 3688., 3040., 3728.,
      3072., 3768., 3104., 3808., 3264., 4008., 3296., 4048., 3328., 4088.,
      3360., 4128., 3392., 4168., 3424., 4208., 3456., 4248.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30498., 31344., 32388., 33240., 30870., 31728., 32784., 33648., 43329.,
      44598., 46146., 47424., 43851., 45138., 46704., 48000., 44373., 45678.,
      47262., 48576., 27438., 28296., 29328., 30192., 27762., 28632., 29676.,
      30552., 34590., 35568., 36744., 37728., 23442., 24176., 25108., 25848.,
      37551., 38762., 40252., 41472., 38073., 39302., 40810., 42048., 38595.,
      39842., 41368., 42624., 20506., 21240., 22148., 22888., 20830., 21576.,
      22496., 23248., 16808., 17424., 18256., 18880., 17208., 17840., 18688.,
      19328., 23524., 24448., 25672., 26608., 24076., 25024., 26272., 27232.,
      24628., 25600., 26872., 27856., 14680., 15312., 16128., 16768., 15016.,
      15664., 16496., 17152., 21208., 22000., 23008., 23808., 21608., 22416.,
      23440., 24256., 29596., 30784., 32272., 33472., 30148., 31360., 32872.,
      34096., 30700., 31936., 33472., 34720., 18376., 19184., 20176., 20992.,
      18712., 19536., 20544., 21376., 20346., 21192., 22164., 23016., 20574.,
      21432., 22416., 23280., 28101., 29370., 30810., 32088., 28407., 29694.,
      31152., 32448., 28713., 30018., 31494., 32808., 17142., 18000., 18960.,
      19824., 17322., 18192., 19164., 20040., 22854., 23832., 24936., 25920.,
      14634., 15368., 16228., 16968., 23019., 24230., 25612., 26832., 23325.,
      24554., 25954., 27192., 23631., 24878., 26296., 27552., 11698., 12432.,
      13268., 14008., 11878., 12624., 13472., 14224., 9490.,  10088., 10812.,
      11416., 9718.,  10328., 11064., 11680., 12561., 13458., 14526., 15432.,
      12867., 13782., 14868., 15792., 13173., 14106., 15210., 16152., 7278.,
      7888.,  8600.,  9216.,  7458.,  8080.,  8804.,  9432.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2108., 2304., 2536., 2736., 2164., 2368., 2608., 2816., 2220., 2432.,
      2680., 2896., 2276., 2496., 2752., 2976., 2332., 2560., 2824., 3056.,
      2388., 2624., 2896., 3136., 2444., 2688., 2968., 3216., 2724., 3008.,
      3328., 3616., 2780., 3072., 3400., 3696., 2836., 3136., 3472., 3776.,
      2892., 3200., 3544., 3856., 2948., 3264., 3616., 3936., 3004., 3328.,
      3688., 4016., 3060., 3392., 3760., 4096., 3340., 3712., 4120., 4496.,
      3396., 3776., 4192., 4576., 3452., 3840., 4264., 4656., 3508., 3904.,
      4336., 4736., 3564., 3968., 4408., 4816., 3620., 4032., 4480., 4896.,
      3676., 4096., 4552., 4976., 3956., 4416., 4912., 5376., 4012., 4480.,
      4984., 5456., 4068., 4544., 5056., 5536., 4124., 4608., 5128., 5616.,
      4180., 4672., 5200., 5696., 4236., 4736., 5272., 5776., 4292., 4800.,
      5344., 5856., 4572., 5120., 5704., 6256., 4628., 5184., 5776., 6336.,
      4684., 5248., 5848., 6416., 4740., 5312., 5920., 6496., 4796., 5376.,
      5992., 6576., 4852., 5440., 6064., 6656., 4908., 5504., 6136., 6736.,
      5188., 5824., 6496., 7136., 5244., 5888., 6568., 7216., 5300., 5952.,
      6640., 7296., 5356., 6016., 6712., 7376., 5412., 6080., 6784., 7456.,
      5468., 6144., 6856., 7536., 5524., 6208., 6928., 7616., 5804., 6528.,
      7288., 8016., 5860., 6592., 7360., 8096., 5916., 6656., 7432., 8176.,
      5972., 6720., 7504., 8256., 6028., 6784., 7576., 8336., 6084., 6848.,
      7648., 8416., 6140., 6912., 7720., 8496.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22774., 23108., 23442., 23776., 24500., 24840., 25180., 25520., 23506.,
      23852., 24198., 24544., 25280., 25632., 25984., 26336., 32397., 32898.,
      33399., 33900., 34950., 35460., 35970., 36480., 33423., 33942., 34461.,
      34980., 36048., 36576., 37104., 37632., 34449., 34986., 35523., 36060.,
      37146., 37692., 38238., 38784., 20738., 21084., 21430., 21776., 22464.,
      22816., 23168., 23520., 21374., 21732., 22090., 22448., 23148., 23512.,
      23876., 24240., 30826., 31292., 31758., 32224., 33080., 33552., 34024.,
      34496., 20166., 20516., 20866., 21216., 21956., 22312., 22668., 23024.,
      32291., 32862., 33433., 34004., 35124., 35704., 36284., 36864., 33317.,
      33906., 34495., 35084., 36222., 36820., 37418., 38016., 34343., 34950.,
      35557., 36164., 37320., 37936., 38552., 39168., 17366., 17716., 18066.,
      18416., 19108., 19464., 19820., 20176., 18002., 18364., 18726., 19088.,
      19792., 20160., 20528., 20896., 17384., 17744., 18104., 18464., 19248.,
      19616., 19984., 20352., 18168., 18544., 18920., 19296., 20096., 20480.,
      20864., 21248., 24236., 24776., 25316., 25856., 26984., 27536., 28088.,
      28640., 25316., 25880., 26444., 27008., 28160., 28736., 29312., 29888.,
      26396., 26984., 27572., 28160., 29336., 29936., 30536., 31136., 15160.,
      15536., 15912., 16288., 17024., 17408., 17792., 18176., 15816., 16208.,
      16600., 16992., 17744., 18144., 18544., 18944., 26008., 26544., 27080.,
      27616., 28576., 29120., 29664., 30208., 26792., 27344., 27896., 28448.,
      29424., 29984., 30544., 31104., 36116., 36920., 37724., 38528., 39920.,
      40736., 41552., 42368., 31948., 32648., 33348., 34048., 35336., 36048.,
      36760., 37472., 33028., 33752., 34476., 35200., 36512., 37248., 37984.,
      38720., 22376., 22928., 23480., 24032., 24944., 25504., 26064., 26624.,
      23032., 23600., 24168., 24736., 25664., 26240., 26816., 27392., 14758.,
      15092., 15426., 15760., 16340., 16680., 17020., 17360., 15202., 15548.,
      15894., 16240., 16832., 17184., 17536., 17888., 20373., 20874., 21375.,
      21876., 22710., 23220., 23730., 24240., 20967., 21486., 22005., 22524.,
      23376., 23904., 24432., 24960., 21561., 22098., 22635., 23172., 24042.,
      24588., 25134., 25680., 12434., 12780., 13126., 13472., 14016., 14368.,
      14720., 15072., 12782., 13140., 13498., 13856., 14412., 14776., 15140.,
      15504., 19642., 20108., 20574., 21040., 21752., 22224., 22696., 23168.,
      11766., 12116., 12466., 12816., 13412., 13768., 14124., 14480., 18587.,
      19158., 19729., 20300., 21204., 21784., 22364., 22944., 19181., 19770.,
      20359., 20948., 21870., 22468., 23066., 23664., 19775., 20382., 20989.,
      21596., 22536., 23152., 23768., 24384., 8966.,  9316.,  9666.,  10016.,
      10564., 10920., 11276., 11632., 9314.,  9676.,  10038., 10400., 10960.,
      11328., 11696., 12064., 8910.,  9252.,  9594.,  9936.,  10524., 10872.,
      11220., 11568., 9354.,  9708.,  10062., 10416., 11016., 11376., 11736.,
      12096., 11553., 12066., 12579., 13092., 13938., 14460., 14982., 15504.,
      12147., 12678., 13209., 13740., 14604., 15144., 15684., 16224., 12741.,
      13290., 13839., 14388., 15270., 15828., 16386., 16944., 6522.,  6876.,
      7230.,  7584.,  8136.,  8496.,  8856.,  9216.,  6870.,  7236.,  7602.,
      7968.,  8532.,  8904.,  9276.,  9648.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4020.,  4216.,  4412.,  4608.,  4872.,  5072.,  5272.,  5472.,  4124.,
      4328.,  4532.,  4736.,  5008.,  5216.,  5424.,  5632.,  4228.,  4440.,
      4652.,  4864.,  5144.,  5360.,  5576.,  5792.,  4332.,  4552.,  4772.,
      4992.,  5280.,  5504.,  5728.,  5952.,  4436.,  4664.,  4892.,  5120.,
      5416.,  5648.,  5880.,  6112.,  4540.,  4776.,  5012.,  5248.,  5552.,
      5792.,  6032.,  6272.,  4644.,  4888.,  5132.,  5376.,  5688.,  5936.,
      6184.,  6432.,  5164.,  5448.,  5732.,  6016.,  6368.,  6656.,  6944.,
      7232.,  5268.,  5560.,  5852.,  6144.,  6504.,  6800.,  7096.,  7392.,
      5372.,  5672.,  5972.,  6272.,  6640.,  6944.,  7248.,  7552.,  5476.,
      5784.,  6092.,  6400.,  6776.,  7088.,  7400.,  7712.,  5580.,  5896.,
      6212.,  6528.,  6912.,  7232.,  7552.,  7872.,  5684.,  6008.,  6332.,
      6656.,  7048.,  7376.,  7704.,  8032.,  5788.,  6120.,  6452.,  6784.,
      7184.,  7520.,  7856.,  8192.,  6308.,  6680.,  7052.,  7424.,  7864.,
      8240.,  8616.,  8992.,  6412.,  6792.,  7172.,  7552.,  8000.,  8384.,
      8768.,  9152.,  6516.,  6904.,  7292.,  7680.,  8136.,  8528.,  8920.,
      9312.,  6620.,  7016.,  7412.,  7808.,  8272.,  8672.,  9072.,  9472.,
      6724.,  7128.,  7532.,  7936.,  8408.,  8816.,  9224.,  9632.,  6828.,
      7240.,  7652.,  8064.,  8544.,  8960.,  9376.,  9792.,  6932.,  7352.,
      7772.,  8192.,  8680.,  9104.,  9528.,  9952.,  7452.,  7912.,  8372.,
      8832.,  9360.,  9824.,  10288., 10752., 7556.,  8024.,  8492.,  8960.,
      9496.,  9968.,  10440., 10912., 7660.,  8136.,  8612.,  9088.,  9632.,
      10112., 10592., 11072., 7764.,  8248.,  8732.,  9216.,  9768.,  10256.,
      10744., 11232., 7868.,  8360.,  8852.,  9344.,  9904.,  10400., 10896.,
      11392., 7972.,  8472.,  8972.,  9472.,  10040., 10544., 11048., 11552.,
      8076.,  8584.,  9092.,  9600.,  10176., 10688., 11200., 11712., 8596.,
      9144.,  9692.,  10240., 10856., 11408., 11960., 12512., 8700.,  9256.,
      9812.,  10368., 10992., 11552., 12112., 12672., 8804.,  9368.,  9932.,
      10496., 11128., 11696., 12264., 12832., 8908.,  9480.,  10052., 10624.,
      11264., 11840., 12416., 12992., 9012.,  9592.,  10172., 10752., 11400.,
      11984., 12568., 13152., 9116.,  9704.,  10292., 10880., 11536., 12128.,
      12720., 13312., 9220.,  9816.,  10412., 11008., 11672., 12272., 12872.,
      13472., 9740.,  10376., 11012., 11648., 12352., 12992., 13632., 14272.,
      9844.,  10488., 11132., 11776., 12488., 13136., 13784., 14432., 9948.,
      10600., 11252., 11904., 12624., 13280., 13936., 14592., 10052., 10712.,
      11372., 12032., 12760., 13424., 14088., 14752., 10156., 10824., 11492.,
      12160., 12896., 13568., 14240., 14912., 10260., 10936., 11612., 12288.,
      13032., 13712., 14392., 15072., 10364., 11048., 11732., 12416., 13168.,
      13856., 14544., 15232., 10884., 11608., 12332., 13056., 13848., 14576.,
      15304., 16032., 10988., 11720., 12452., 13184., 13984., 14720., 15456.,
      16192., 11092., 11832., 12572., 13312., 14120., 14864., 15608., 16352.,
      11196., 11944., 12692., 13440., 14256., 15008., 15760., 16512., 11300.,
      12056., 12812., 13568., 14392., 15152., 15912., 16672., 11404., 12168.,
      12932., 13696., 14528., 15296., 16064., 16832., 11508., 12280., 13052.,
      13824., 14664., 15440., 16216., 16992.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22922., 23776., 24642., 25520., 23666., 24544., 25434., 26336., 32637.,
      33900., 35181., 36480., 33681., 34980., 36297., 37632., 34725., 36060.,
      37413., 38784., 20922., 21776., 22642., 23520., 21570., 22448., 23338.,
      24240., 31106., 32224., 33354., 34496., 20330., 21216., 22114., 23024.,
      32601., 34004., 35425., 36864., 33645., 35084., 36541., 38016., 34689.,
      36164., 37657., 39168., 17554., 18416., 19290., 20176., 18202., 19088.,
      19986., 20896., 17544., 18464., 19400., 20352., 18344., 19296., 20264.,
      21248., 24500., 25856., 27236., 28640., 25604., 27008., 28436., 29888.,
      26708., 28160., 29636., 31136., 15368., 16288., 17224., 18176., 16040.,
      16992., 17960., 18944., 26344., 27616., 28904., 30208., 27144., 28448.,
      29768., 31104., 36644., 38528., 40436., 42368., 32372., 34048., 35748.,
      37472., 33476., 35200., 36948., 38720., 22760., 24032., 25320., 26624.,
      23432., 24736., 26056., 27392., 14978., 15760., 16554., 17360., 15434.,
      16240., 17058., 17888., 20721., 21876., 23049., 24240., 21333., 22524.,
      23733., 24960., 21945., 23172., 24417., 25680., 12690., 13472., 14266.,
      15072., 13050., 13856., 14674., 15504., 19994., 21040., 22098., 23168.,
      12002., 12816., 13642., 14480., 19005., 20300., 21613., 22944., 19617.,
      20948., 22297., 23664., 20229., 21596., 22981., 24384., 9226.,  10016.,
      10818., 11632., 9586.,  10400., 11226., 12064., 9138.,  9936.,  10746.,
      11568., 9594.,  10416., 11250., 12096., 11913., 13092., 14289., 15504.,
      12525., 13740., 14973., 16224., 13137., 14388., 15657., 16944., 6786.,
      7584.,  8394.,  9216.,  7146.,  7968.,  8802.,  9648.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4188.,  4608.,  5036.,  5472.,  4300.,  4736.,  5180.,  5632.,  4412.,
      4864.,  5324.,  5792.,  4524.,  4992.,  5468.,  5952.,  4636.,  5120.,
      5612.,  6112.,  4748.,  5248.,  5756.,  6272.,  4860.,  5376.,  5900.,
      6432.,  5420.,  6016.,  6620.,  7232.,  5532.,  6144.,  6764.,  7392.,
      5644.,  6272.,  6908.,  7552.,  5756.,  6400.,  7052.,  7712.,  5868.,
      6528.,  7196.,  7872.,  5980.,  6656.,  7340.,  8032.,  6092.,  6784.,
      7484.,  8192.,  6652.,  7424.,  8204.,  8992.,  6764.,  7552.,  8348.,
      9152.,  6876.,  7680.,  8492.,  9312.,  6988.,  7808.,  8636.,  9472.,
      7100.,  7936.,  8780.,  9632.,  7212.,  8064.,  8924.,  9792.,  7324.,
      8192.,  9068.,  9952.,  7884.,  8832.,  9788.,  10752., 7996.,  8960.,
      9932.,  10912., 8108.,  9088.,  10076., 11072., 8220.,  9216.,  10220.,
      11232., 8332.,  9344.,  10364., 11392., 8444.,  9472.,  10508., 11552.,
      8556.,  9600.,  10652., 11712., 9116.,  10240., 11372., 12512., 9228.,
      10368., 11516., 12672., 9340.,  10496., 11660., 12832., 9452.,  10624.,
      11804., 12992., 9564.,  10752., 11948., 13152., 9676.,  10880., 12092.,
      13312., 9788.,  11008., 12236., 13472., 10348., 11648., 12956., 14272.,
      10460., 11776., 13100., 14432., 10572., 11904., 13244., 14592., 10684.,
      12032., 13388., 14752., 10796., 12160., 13532., 14912., 10908., 12288.,
      13676., 15072., 11020., 12416., 13820., 15232., 11580., 13056., 14540.,
      16032., 11692., 13184., 14684., 16192., 11804., 13312., 14828., 16352.,
      11916., 13440., 14972., 16512., 12028., 13568., 15116., 16672., 12140.,
      13696., 15260., 16832., 12252., 13824., 15404., 16992.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23422., 23828., 24612., 25024., 25826., 26244., 27064., 27488., 24886.,
      25316., 26124., 26560., 27386., 27828., 28672., 29120., 33177., 33786.,
      34926., 35544., 36711., 37338., 38532., 39168., 35229., 35874., 37050.,
      37704., 38907., 39570., 40800., 41472., 32033., 32586., 33670., 34232.,
      35343., 35914., 37052., 37632., 21446., 21876., 22636., 23072., 23850.,
      24292., 25088., 25536., 22718., 23172., 23956., 24416., 25218., 25684.,
      26504., 26976., 30054., 30468., 31260., 31680., 32490., 32916., 33744.,
      34176., 20126., 20436., 21124., 21440., 22146., 22468., 23192., 23520.,
      31685., 32178., 33202., 33704., 34755., 35266., 36344., 36864., 33737.,
      34266., 35326., 35864., 36951., 37498., 38612., 39168., 35789., 36354.,
      37450., 38024., 39147., 39730., 40880., 41472., 17646., 17956., 18596.,
      18912., 19570., 19892., 20568., 20896., 18918., 19252., 19916., 20256.,
      20938., 21284., 21984., 22336., 24904., 25360., 26224., 26688., 27576.,
      28048., 28960., 29440., 26472., 26960., 27856., 28352., 29272., 29776.,
      30720., 31232., 26940., 27496., 28616., 29184., 30340., 30920., 32112.,
      32704., 29100., 29704., 30872., 31488., 32692., 33320., 34560., 35200.,
      31260., 31912., 33128., 33792., 35044., 35720., 37008., 37696., 22568.,
      23056., 23888., 24384., 25240., 25744., 26624., 27136., 16584., 16976.,
      17712., 18112., 18872., 19280., 20064., 20480., 26536., 27088., 28048.,
      28608., 29592., 30160., 31168., 31744., 28104., 28688., 29680., 30272.,
      31288., 31888., 32928., 33536., 37132., 37960., 39352., 40192., 41620.,
      42472., 43936., 44800., 34044., 34792., 36104., 36864., 38212., 38984.,
      40368., 41152., 36204., 37000., 38360., 39168., 40564., 41384., 42816.,
      43648., 23432., 24016., 24944., 25536., 26488., 27088., 28064., 28672.,
      24744., 25360., 26320., 26944., 27928., 28560., 29568., 30208., 13678.,
      14084., 14724., 15136., 15794., 16212., 16888., 17312., 14566., 14996.,
      15660., 16096., 16778., 17220., 17920., 18368., 18561., 19170., 20094.,
      20712., 21663., 22290., 23268., 23904., 19749., 20394., 21354., 22008.,
      22995., 23658., 24672., 25344., 18761., 19314., 20182., 20744., 21639.,
      22210., 23132., 23712., 11126., 11556., 12172., 12608., 13242., 13684.,
      14336., 14784., 11822., 12276., 12916., 13376., 14034., 14500., 15176.,
      15648., 20118., 20532., 21180., 21600., 22266., 22692., 23376., 23808.,
      12686., 12996., 13540., 13856., 14418., 14740., 15320., 15648., 19853.,
      20346., 21154., 21656., 22491., 23002., 23864., 24384., 21041., 21570.,
      22414., 22952., 23823., 24370., 25268., 25824., 22229., 22794., 23674.,
      24248., 25155., 25738., 26672., 27264., 10206., 10516., 11012., 11328.,
      11842., 12164., 12696., 13024., 10902., 11236., 11756., 12096., 12634.,
      12980., 13536., 13888., 14270., 14692., 15348., 15776., 16450., 16884.,
      17576., 18016., 15158., 15604., 16284., 16736., 17434., 17892., 18608.,
      19072., 14105., 14610., 15430., 15944., 16791., 17314., 18188., 18720.,
      15293., 15834., 16690., 17240., 18123., 18682., 19592., 20160., 16481.,
      17058., 17950., 18536., 19455., 20050., 20996., 21600., 11590., 12036.,
      12668., 13120., 13770., 14228., 14896., 15360., 8062.,  8404.,  8932.,
      9280.,  9826.,  10180., 10744., 11104.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7988.,  8376.,  8824.,  9216.,  9676.,  10072., 10544., 10944., 8196.,
      8600.,  9064.,  9472.,  9948.,  10360., 10848., 11264., 8404.,  8824.,
      9304.,  9728.,  10220., 10648., 11152., 11584., 8612.,  9048.,  9544.,
      9984.,  10492., 10936., 11456., 11904., 8820.,  9272.,  9784.,  10240.,
      10764., 11224., 11760., 12224., 9028.,  9496.,  10024., 10496., 11036.,
      11512., 12064., 12544., 9236.,  9720.,  10264., 10752., 11308., 11800.,
      12368., 12864., 10276., 10840., 11464., 12032., 12668., 13240., 13888.,
      14464., 10484., 11064., 11704., 12288., 12940., 13528., 14192., 14784.,
      10692., 11288., 11944., 12544., 13212., 13816., 14496., 15104., 10900.,
      11512., 12184., 12800., 13484., 14104., 14800., 15424., 11108., 11736.,
      12424., 13056., 13756., 14392., 15104., 15744., 11316., 11960., 12664.,
      13312., 14028., 14680., 15408., 16064., 11524., 12184., 12904., 13568.,
      14300., 14968., 15712., 16384., 12564., 13304., 14104., 14848., 15660.,
      16408., 17232., 17984., 12772., 13528., 14344., 15104., 15932., 16696.,
      17536., 18304., 12980., 13752., 14584., 15360., 16204., 16984., 17840.,
      18624., 13188., 13976., 14824., 15616., 16476., 17272., 18144., 18944.,
      13396., 14200., 15064., 15872., 16748., 17560., 18448., 19264., 13604.,
      14424., 15304., 16128., 17020., 17848., 18752., 19584., 13812., 14648.,
      15544., 16384., 17292., 18136., 19056., 19904., 14852., 15768., 16744.,
      17664., 18652., 19576., 20576., 21504., 15060., 15992., 16984., 17920.,
      18924., 19864., 20880., 21824., 15268., 16216., 17224., 18176., 19196.,
      20152., 21184., 22144., 15476., 16440., 17464., 18432., 19468., 20440.,
      21488., 22464., 15684., 16664., 17704., 18688., 19740., 20728., 21792.,
      22784., 15892., 16888., 17944., 18944., 20012., 21016., 22096., 23104.,
      16100., 17112., 18184., 19200., 20284., 21304., 22400., 23424., 17140.,
      18232., 19384., 20480., 21644., 22744., 23920., 25024., 17348., 18456.,
      19624., 20736., 21916., 23032., 24224., 25344., 17556., 18680., 19864.,
      20992., 22188., 23320., 24528., 25664., 17764., 18904., 20104., 21248.,
      22460., 23608., 24832., 25984., 17972., 19128., 20344., 21504., 22732.,
      23896., 25136., 26304., 18180., 19352., 20584., 21760., 23004., 24184.,
      25440., 26624., 18388., 19576., 20824., 22016., 23276., 24472., 25744.,
      26944., 19428., 20696., 22024., 23296., 24636., 25912., 27264., 28544.,
      19636., 20920., 22264., 23552., 24908., 26200., 27568., 28864., 19844.,
      21144., 22504., 23808., 25180., 26488., 27872., 29184., 20052., 21368.,
      22744., 24064., 25452., 26776., 28176., 29504., 20260., 21592., 22984.,
      24320., 25724., 27064., 28480., 29824., 20468., 21816., 23224., 24576.,
      25996., 27352., 28784., 30144., 20676., 22040., 23464., 24832., 26268.,
      27640., 29088., 30464., 21716., 23160., 24664., 26112., 27628., 29080.,
      30608., 32064., 21924., 23384., 24904., 26368., 27900., 29368., 30912.,
      32384., 22132., 23608., 25144., 26624., 28172., 29656., 31216., 32704.,
      22340., 23832., 25384., 26880., 28444., 29944., 31520., 33024., 22548.,
      24056., 25624., 27136., 28716., 30232., 31824., 33344., 22756., 24280.,
      25864., 27392., 28988., 30520., 32128., 33664., 22964., 24504., 26104.,
      27648., 29260., 30808., 32432., 33984.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23526., 23932., 24338., 24744., 25516., 25928., 26340., 26752., 27554.,
      27972., 28390., 28808., 29640., 30064., 30488., 30912., 24894., 25324.,
      25754., 26184., 26980., 27416., 27852., 28288., 29114., 29556., 29998.,
      30440., 31296., 31744., 32192., 32640., 32465., 33074., 33683., 34292.,
      35442., 36060., 36678., 37296., 38491., 39118., 39745., 40372., 41612.,
      42248., 42884., 43520., 34485., 35130., 35775., 36420., 37606., 38260.,
      38914., 39568., 40799., 41462., 42125., 42788., 44064., 44736., 45408.,
      46080., 26137., 26690., 27243., 27796., 28890., 29452., 30014., 30576.,
      31715., 32286., 32857., 33428., 34612., 35192., 35772., 36352., 22750.,
      23180., 23610., 24040., 24868., 25304., 25740., 26176., 27034., 27476.,
      27918., 28360., 29248., 29696., 30144., 30592., 24246., 24700., 25154.,
      25608., 26460., 26920., 27380., 27840., 28722., 29188., 29654., 30120.,
      31032., 31504., 31976., 32448., 19886., 20300., 20714., 21128., 21908.,
      22328., 22748., 23168., 23978., 24404., 24830., 25256., 26096., 26528.,
      26960., 27392., 14982., 15292., 15602., 15912., 16588., 16904., 17220.,
      17536., 18242., 18564., 18886., 19208., 19944., 20272., 20600., 20928.,
      23453., 23946., 24439., 24932., 25966., 26468., 26970., 27472., 28551.,
      29062., 29573., 30084., 31208., 31728., 32248., 32768., 25473., 26002.,
      26531., 27060., 28130., 28668., 29206., 29744., 30859., 31406., 31953.,
      32500., 33660., 34216., 34772., 35328., 27493., 28058., 28623., 29188.,
      30294., 30868., 31442., 32016., 33167., 33750., 34333., 34916., 36112.,
      36704., 37296., 37888., 20390., 20700., 21010., 21320., 22028., 22344.,
      22660., 22976., 23714., 24036., 24358., 24680., 25448., 25776., 26104.,
      26432., 21886., 22220., 22554., 22888., 23620., 23960., 24300., 24640.,
      25402., 25748., 26094., 26440., 27232., 27584., 27936., 28288., 25416.,
      25872., 26328., 26784., 27664., 28128., 28592., 29056., 29976., 30448.,
      30920., 31392., 32352., 32832., 33312., 33792., 26984., 27472., 27960.,
      28448., 29360., 29856., 30352., 30848., 31800., 32304., 32808., 33312.,
      34304., 34816., 35328., 35840., 40524., 41080., 41636., 42192., 43352.,
      43920., 44488., 45056., 46276., 46856., 47436., 48016., 49296., 49888.,
      50480., 51072., 42748., 43352., 43956., 44560., 45768., 46384., 47000.,
      47616., 48884., 49512., 50140., 50768., 52096., 52736., 53376., 54016.,
      44972., 45624., 46276., 46928., 48184., 48848., 49512., 50176., 51492.,
      52168., 52844., 53520., 54896., 55584., 56272., 56960., 35176., 35664.,
      36152., 36640., 37552., 38048., 38544., 39040., 39992., 40496., 41000.,
      41504., 42496., 43008., 43520., 44032., 22280., 22672., 23064., 23456.,
      24272., 24672., 25072., 25472., 26328., 26736., 27144., 27552., 28448.,
      28864., 29280., 29696., 28072., 28624., 29176., 29728., 30704., 31264.,
      31824., 32384., 33400., 33968., 34536., 35104., 36160., 36736., 37312.,
      37888., 29640., 30224., 30808., 31392., 32400., 32992., 33584., 34176.,
      35224., 35824., 36424., 37024., 38112., 38720., 39328., 39936., 38108.,
      38936., 39764., 40592., 42024., 42864., 43704., 44544., 46036., 46888.,
      47740., 48592., 50144., 51008., 51872., 52736., 29964., 30712., 31460.,
      32208., 33560., 34320., 35080., 35840., 37252., 38024., 38796., 39568.,
      41040., 41824., 42608., 43392., 32188., 32984., 33780., 34576., 35976.,
      36784., 37592., 38400., 39860., 40680., 41500., 42320., 43840., 44672.,
      45504., 46336., 25544., 26128., 26712., 27296., 28304., 28896., 29488.,
      30080., 31128., 31728., 32328., 32928., 34016., 34624., 35232., 35840.,
      27112., 27728., 28344., 28960., 30000., 30624., 31248., 31872., 32952.,
      33584., 34216., 34848., 35968., 36608., 37248., 37888., 16582., 16988.,
      17394., 17800., 18540., 18952., 19364., 19776., 20546., 20964., 21382.,
      21800., 22600., 23024., 23448., 23872., 17822., 18252., 18682., 19112.,
      19876., 20312., 20748., 21184., 21978., 22420., 22862., 23304., 24128.,
      24576., 25024., 25472., 25121., 25730., 26339., 26948., 28050., 28668.,
      29286., 29904., 31051., 31678., 32305., 32932., 34124., 34760., 35396.,
      36032., 26949., 27594., 28239., 28884., 30022., 30676., 31330., 31984.,
      33167., 33830., 34493., 35156., 36384., 37056., 37728., 38400., 24553.,
      25106., 25659., 26212., 27258., 27820., 28382., 28944., 30035., 30606.,
      31177., 31748., 32884., 33464., 34044., 34624., 21822., 22252., 22682.,
      23112., 23908., 24344., 24780., 25216., 26042., 26484., 26926., 27368.,
      28224., 28672., 29120., 29568., 23190., 23644., 24098., 24552., 25372.,
      25832., 26292., 26752., 27602., 28068., 28534., 29000., 29880., 30352.,
      30824., 31296., 23822., 24236., 24650., 25064., 25812., 26232., 26652.,
      27072., 27850., 28276., 28702., 29128., 29936., 30368., 30800., 31232.,
      24934., 25244., 25554., 25864., 26508., 26824., 27140., 27456., 28130.,
      28452., 28774., 29096., 29800., 30128., 30456., 30784., 38573., 39066.,
      39559., 40052., 41038., 41540., 42042., 42544., 43575., 44086., 44597.,
      45108., 46184., 46704., 47224., 47744., 40401., 40930., 41459., 41988.,
      43010., 43548., 44086., 44624., 45691., 46238., 46785., 47332., 48444.,
      49000., 49556., 50112., 42229., 42794., 43359., 43924., 44982., 45556.,
      46130., 46704., 47807., 48390., 48973., 49556., 50704., 51296., 51888.,
      52480., 20102., 20412., 20722., 21032., 21708., 22024., 22340., 22656.,
      23362., 23684., 24006., 24328., 25064., 25392., 25720., 26048., 21470.,
      21804., 22138., 22472., 23172., 23512., 23852., 24192., 24922., 25268.,
      25614., 25960., 26720., 27072., 27424., 27776., 22870., 23292., 23714.,
      24136., 24892., 25320., 25748., 26176., 26962., 27396., 27830., 28264.,
      29080., 29520., 29960., 30400., 24110., 24556., 25002., 25448., 26228.,
      26680., 27132., 27584., 28394., 28852., 29310., 29768., 30608., 31072.,
      31536., 32000., 21433., 21938., 22443., 22948., 23946., 24460., 24974.,
      25488., 26531., 27054., 27577., 28100., 29188., 29720., 30252., 30784.,
      23261., 23802., 24343., 24884., 25918., 26468., 27018., 27568., 28647.,
      29206., 29765., 30324., 31448., 32016., 32584., 33152., 25089., 25666.,
      26243., 26820., 27890., 28476., 29062., 29648., 30763., 31358., 31953.,
      32548., 33708., 34312., 34916., 35520., 22734., 23180., 23626., 24072.,
      24884., 25336., 25788., 26240., 27082., 27540., 27998., 28456., 29328.,
      29792., 30256., 30720., 15782., 16124., 16466., 16808., 17516., 17864.,
      18212., 18560., 19298., 19652., 20006., 20360., 21128., 21488., 21848.,
      22208.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15588., 15976., 16364., 16752., 17256., 17648., 18040., 18432., 18956.,
      19352., 19748., 20144., 20688., 21088., 21488., 21888., 15988., 16392.,
      16796., 17200., 17720., 18128., 18536., 18944., 19484., 19896., 20308.,
      20720., 21280., 21696., 22112., 22528., 16388., 16808., 17228., 17648.,
      18184., 18608., 19032., 19456., 20012., 20440., 20868., 21296., 21872.,
      22304., 22736., 23168., 16788., 17224., 17660., 18096., 18648., 19088.,
      19528., 19968., 20540., 20984., 21428., 21872., 22464., 22912., 23360.,
      23808., 17188., 17640., 18092., 18544., 19112., 19568., 20024., 20480.,
      21068., 21528., 21988., 22448., 23056., 23520., 23984., 24448., 17588.,
      18056., 18524., 18992., 19576., 20048., 20520., 20992., 21596., 22072.,
      22548., 23024., 23648., 24128., 24608., 25088., 17988., 18472., 18956.,
      19440., 20040., 20528., 21016., 21504., 22124., 22616., 23108., 23600.,
      24240., 24736., 25232., 25728., 19988., 20552., 21116., 21680., 22360.,
      22928., 23496., 24064., 24764., 25336., 25908., 26480., 27200., 27776.,
      28352., 28928., 20388., 20968., 21548., 22128., 22824., 23408., 23992.,
      24576., 25292., 25880., 26468., 27056., 27792., 28384., 28976., 29568.,
      20788., 21384., 21980., 22576., 23288., 23888., 24488., 25088., 25820.,
      26424., 27028., 27632., 28384., 28992., 29600., 30208., 21188., 21800.,
      22412., 23024., 23752., 24368., 24984., 25600., 26348., 26968., 27588.,
      28208., 28976., 29600., 30224., 30848., 21588., 22216., 22844., 23472.,
      24216., 24848., 25480., 26112., 26876., 27512., 28148., 28784., 29568.,
      30208., 30848., 31488., 9444.,  9832.,  10220., 10608., 11112., 11504.,
      11896., 12288., 12812., 13208., 13604., 14000., 14544., 14944., 15344.,
      15744., 9844.,  10248., 10652., 11056., 11576., 11984., 12392., 12800.,
      13340., 13752., 14164., 14576., 15136., 15552., 15968., 16384., 3396.,
      3624.,  3852.,  4080.,  4424.,  4656.,  4888.,  5120.,  5484.,  5720.,
      5956.,  6192.,  6576.,  6816.,  7056.,  7296.,  3796.,  4040.,  4284.,
      4528.,  4888.,  5136.,  5384.,  5632.,  6012.,  6264.,  6516.,  6768.,
      7168.,  7424.,  7680.,  7936.,  4196.,  4456.,  4716.,  4976.,  5352.,
      5616.,  5880.,  6144.,  6540.,  6808.,  7076.,  7344.,  7760.,  8032.,
      8304.,  8576.,  4596.,  4872.,  5148.,  5424.,  5816.,  6096.,  6376.,
      6656.,  7068.,  7352.,  7636.,  7920.,  8352.,  8640.,  8928.,  9216.,
      4996.,  5288.,  5580.,  5872.,  6280.,  6576.,  6872.,  7168.,  7596.,
      7896.,  8196.,  8496.,  8944.,  9248.,  9552.,  9856.,  5396.,  5704.,
      6012.,  6320.,  6744.,  7056.,  7368.,  7680.,  8124.,  8440.,  8756.,
      9072.,  9536.,  9856.,  10176., 10496., 5796.,  6120.,  6444.,  6768.,
      7208.,  7536.,  7864.,  8192.,  8652.,  8984.,  9316.,  9648.,  10128.,
      10464., 10800., 11136., 7796.,  8200.,  8604.,  9008.,  9528.,  9936.,
      10344., 10752., 11292., 11704., 12116., 12528., 13088., 13504., 13920.,
      14336., 8196.,  8616.,  9036.,  9456.,  9992.,  10416., 10840., 11264.,
      11820., 12248., 12676., 13104., 13680., 14112., 14544., 14976., 8596.,
      9032.,  9468.,  9904.,  10456., 10896., 11336., 11776., 12348., 12792.,
      13236., 13680., 14272., 14720., 15168., 15616., 8996.,  9448.,  9900.,
      10352., 10920., 11376., 11832., 12288., 12876., 13336., 13796., 14256.,
      14864., 15328., 15792., 16256., 9396.,  9864.,  10332., 10800., 11384.,
      11856., 12328., 12800., 13404., 13880., 14356., 14832., 15456., 15936.,
      16416., 16896., 9796.,  10280., 10764., 11248., 11848., 12336., 12824.,
      13312., 13932., 14424., 14916., 15408., 16048., 16544., 17040., 17536.,
      10196., 10696., 11196., 11696., 12312., 12816., 13320., 13824., 14460.,
      14968., 15476., 15984., 16640., 17152., 17664., 18176., 12196., 12776.,
      13356., 13936., 14632., 15216., 15800., 16384., 17100., 17688., 18276.,
      18864., 19600., 20192., 20784., 21376., 12596., 13192., 13788., 14384.,
      15096., 15696., 16296., 16896., 17628., 18232., 18836., 19440., 20192.,
      20800., 21408., 22016., 12996., 13608., 14220., 14832., 15560., 16176.,
      16792., 17408., 18156., 18776., 19396., 20016., 20784., 21408., 22032.,
      22656., 13396., 14024., 14652., 15280., 16024., 16656., 17288., 17920.,
      18684., 19320., 19956., 20592., 21376., 22016., 22656., 23296., 13796.,
      14440., 15084., 15728., 16488., 17136., 17784., 18432., 19212., 19864.,
      20516., 21168., 21968., 22624., 23280., 23936., 14196., 14856., 15516.,
      16176., 16952., 17616., 18280., 18944., 19740., 20408., 21076., 21744.,
      22560., 23232., 23904., 24576., 14596., 15272., 15948., 16624., 17416.,
      18096., 18776., 19456., 20268., 20952., 21636., 22320., 23152., 23840.,
      24528., 25216., 16596., 17352., 18108., 18864., 19736., 20496., 21256.,
      22016., 22908., 23672., 24436., 25200., 26112., 26880., 27648., 28416.,
      16996., 17768., 18540., 19312., 20200., 20976., 21752., 22528., 23436.,
      24216., 24996., 25776., 26704., 27488., 28272., 29056., 17396., 18184.,
      18972., 19760., 20664., 21456., 22248., 23040., 23964., 24760., 25556.,
      26352., 27296., 28096., 28896., 29696., 17796., 18600., 19404., 20208.,
      21128., 21936., 22744., 23552., 24492., 25304., 26116., 26928., 27888.,
      28704., 29520., 30336., 18196., 19016., 19836., 20656., 21592., 22416.,
      23240., 24064., 25020., 25848., 26676., 27504., 28480., 29312., 30144.,
      30976., 14244., 14824., 15404., 15984., 16680., 17264., 17848., 18432.,
      19148., 19736., 20324., 20912., 21648., 22240., 22832., 23424., 14644.,
      15240., 15836., 16432., 17144., 17744., 18344., 18944., 19676., 20280.,
      20884., 21488., 22240., 22848., 23456., 24064., 16388., 16808., 17228.,
      17648., 18184., 18608., 19032., 19456., 20012., 20440., 20868., 21296.,
      21872., 22304., 22736., 23168., 16788., 17224., 17660., 18096., 18648.,
      19088., 19528., 19968., 20540., 20984., 21428., 21872., 22464., 22912.,
      23360., 23808., 17188., 17640., 18092., 18544., 19112., 19568., 20024.,
      20480., 21068., 21528., 21988., 22448., 23056., 23520., 23984., 24448.,
      17588., 18056., 18524., 18992., 19576., 20048., 20520., 20992., 21596.,
      22072., 22548., 23024., 23648., 24128., 24608., 25088., 17988., 18472.,
      18956., 19440., 20040., 20528., 21016., 21504., 22124., 22616., 23108.,
      23600., 24240., 24736., 25232., 25728., 18388., 18888., 19388., 19888.,
      20504., 21008., 21512., 22016., 22652., 23160., 23668., 24176., 24832.,
      25344., 25856., 26368., 18788., 19304., 19820., 20336., 20968., 21488.,
      22008., 22528., 23180., 23704., 24228., 24752., 25424., 25952., 26480.,
      27008.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4560., 6432., 6504., 6576., 6648., 4137., 4182., 5172., 7296., 7368.,
      7440., 7512., 4677., 4722., 5816., 8198., 8276., 8354., 8432., 5240.,
      5288., 6488., 9134., 9212., 9290., 9368., 5816., 5864., 3156., 4353.,
      4398., 4443., 4488., 2715., 2742., 3552., 4893., 4938., 4983., 5028.,
      3039., 3066., 3948., 5433., 5478., 5523., 5568., 3363., 3390.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      370.,  380.,  390.,  400.,  410.,  420.,  430.,  490.,  500.,  510.,
      520.,  530.,  540.,  550.,  610.,  620.,  630.,  640.,  650.,  660.,
      670.,  730.,  740.,  750.,  760.,  770.,  780.,  790.,  850.,  860.,
      870.,  880.,  890.,  900.,  910.,  970.,  980.,  990.,  1000., 1010.,
      1020., 1030., 1090., 1100., 1110., 1120., 1130., 1140., 1150.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8652.,  9120.,  12171., 12864., 12306., 13008., 12441., 13152., 12576.,
      13296., 7800.,  8274.,  7884.,  8364.,  9804.,  10344., 13791., 14592.,
      13926., 14736., 14061., 14880., 14196., 15024., 8808.,  9354.,  8892.,
      9444.,  11008., 11632., 15472., 16396., 15616., 16552., 15760., 16708.,
      15904., 16864., 9848.,  10480., 9936.,  10576., 12256., 12976., 17200.,
      18268., 17344., 18424., 17488., 18580., 17632., 18736., 10904., 11632.,
      10992., 11728., 5844.,  6312.,  8013.,  8706.,  8094.,  8796.,  8175.,
      8886.,  8256.,  8976.,  4956.,  5430.,  5004.,  5484.,  6564.,  7104.,
      8985.,  9786.,  9066.,  9876.,  9147.,  9966.,  9228.,  10056., 5532.,
      6078.,  5580.,  6132.,  7284.,  7896.,  9957.,  10866., 10038., 10956.,
      10119., 11046., 10200., 11136., 6108.,  6726.,  6156.,  6780.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      632.,  740.,  648.,  760.,  664.,  780.,  680.,  800.,  696.,  820.,
      712.,  840.,  728.,  860.,  824.,  980.,  840.,  1000., 856.,  1020.,
      872.,  1040., 888.,  1060., 904.,  1080., 920.,  1100., 1016., 1220.,
      1032., 1240., 1048., 1260., 1064., 1280., 1080., 1300., 1096., 1320.,
      1112., 1340., 1208., 1460., 1224., 1480., 1240., 1500., 1256., 1520.,
      1272., 1540., 1288., 1560., 1304., 1580., 1400., 1700., 1416., 1720.,
      1432., 1740., 1448., 1760., 1464., 1780., 1480., 1800., 1496., 1820.,
      1592., 1940., 1608., 1960., 1624., 1980., 1640., 2000., 1656., 2020.,
      1672., 2040., 1688., 2060., 1784., 2180., 1800., 2200., 1816., 2220.,
      1832., 2240., 1848., 2260., 1864., 2280., 1880., 2300.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16836., 17304., 17772., 18240., 23649., 24342., 25035., 25728., 23910.,
      24612., 25314., 26016., 24171., 24882., 25593., 26304., 24432., 25152.,
      25872., 26592., 15126., 15600., 16074., 16548., 15288., 15768., 16248.,
      16728., 19068., 19608., 20148., 20688., 26781., 27582., 28383., 29184.,
      27042., 27852., 28662., 29472., 27303., 28122., 28941., 29760., 27564.,
      28392., 29220., 30048., 17070., 17616., 18162., 18708., 17232., 17784.,
      18336., 18888., 21392., 22016., 22640., 23264., 30020., 30944., 31868.,
      32792., 30296., 31232., 32168., 33104., 30572., 31520., 32468., 33416.,
      30848., 31808., 32768., 33728., 19064., 19696., 20328., 20960., 19232.,
      19872., 20512., 21152., 23792., 24512., 25232., 25952., 33332., 34400.,
      35468., 36536., 33608., 34688., 35768., 36848., 33884., 34976., 36068.,
      37160., 34160., 35264., 36368., 37472., 21080., 21808., 22536., 23264.,
      21248., 21984., 22720., 23456., 11220., 11688., 12156., 12624., 15333.,
      16026., 16719., 17412., 15486., 16188., 16890., 17592., 15639., 16350.,
      17061., 17772., 15792., 16512., 17232., 17952., 9438.,  9912.,  10386.,
      10860., 9528.,  10008., 10488., 10968., 12588., 13128., 13668., 14208.,
      17169., 17970., 18771., 19572., 17322., 18132., 18942., 19752., 17475.,
      18294., 19113., 19932., 17628., 18456., 19284., 20112., 10518., 11064.,
      11610., 12156., 10608., 11160., 11712., 12264., 13956., 14568., 15180.,
      15792., 19005., 19914., 20823., 21732., 19158., 20076., 20994., 21912.,
      19311., 20238., 21165., 22092., 19464., 20400., 21336., 22272., 11598.,
      12216., 12834., 13452., 11688., 12312., 12936., 13560.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1156., 1264., 1372., 1480., 1184., 1296., 1408., 1520., 1212., 1328.,
      1444., 1560., 1240., 1360., 1480., 1600., 1268., 1392., 1516., 1640.,
      1296., 1424., 1552., 1680., 1324., 1456., 1588., 1720., 1492., 1648.,
      1804., 1960., 1520., 1680., 1840., 2000., 1548., 1712., 1876., 2040.,
      1576., 1744., 1912., 2080., 1604., 1776., 1948., 2120., 1632., 1808.,
      1984., 2160., 1660., 1840., 2020., 2200., 1828., 2032., 2236., 2440.,
      1856., 2064., 2272., 2480., 1884., 2096., 2308., 2520., 1912., 2128.,
      2344., 2560., 1940., 2160., 2380., 2600., 1968., 2192., 2416., 2640.,
      1996., 2224., 2452., 2680., 2164., 2416., 2668., 2920., 2192., 2448.,
      2704., 2960., 2220., 2480., 2740., 3000., 2248., 2512., 2776., 3040.,
      2276., 2544., 2812., 3080., 2304., 2576., 2848., 3120., 2332., 2608.,
      2884., 3160., 2500., 2800., 3100., 3400., 2528., 2832., 3136., 3440.,
      2556., 2864., 3172., 3480., 2584., 2896., 3208., 3520., 2612., 2928.,
      3244., 3560., 2640., 2960., 3280., 3600., 2668., 2992., 3316., 3640.,
      2836., 3184., 3532., 3880., 2864., 3216., 3568., 3920., 2892., 3248.,
      3604., 3960., 2920., 3280., 3640., 4000., 2948., 3312., 3676., 4040.,
      2976., 3344., 3712., 4080., 3004., 3376., 3748., 4120., 3172., 3568.,
      3964., 4360., 3200., 3600., 4000., 4400., 3228., 3632., 4036., 4440.,
      3256., 3664., 4072., 4480., 3284., 3696., 4108., 4520., 3312., 3728.,
      4144., 4560., 3340., 3760., 4180., 4600.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17208., 18240., 24207., 25728., 24477., 26016., 24747., 26304., 25017.,
      26592., 15516., 16548., 15684., 16728., 19512., 20688., 27447., 29184.,
      27717., 29472., 27987., 29760., 28257., 30048., 17532., 18708., 17700.,
      18888., 21912., 23264., 30800., 32792., 31088., 33104., 31376., 33416.,
      31664., 33728., 19608., 20960., 19784., 21152., 24408., 25952., 34256.,
      36536., 34544., 36848., 34832., 37160., 35120., 37472., 21720., 23264.,
      21896., 23456., 11628., 12624., 15945., 17412., 16107., 17592., 16269.,
      17772., 16431., 17952., 9864.,  10860., 9960.,  10968., 13068., 14208.,
      17889., 19572., 18051., 19752., 18213., 19932., 18375., 20112., 11016.,
      12156., 11112., 12264., 14508., 15792., 19833., 21732., 19995., 21912.,
      20157., 22092., 20319., 22272., 12168., 13452., 12264., 13560.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1248., 1480., 1280., 1520., 1312., 1560., 1344., 1600., 1376., 1640.,
      1408., 1680., 1440., 1720., 1632., 1960., 1664., 2000., 1696., 2040.,
      1728., 2080., 1760., 2120., 1792., 2160., 1824., 2200., 2016., 2440.,
      2048., 2480., 2080., 2520., 2112., 2560., 2144., 2600., 2176., 2640.,
      2208., 2680., 2400., 2920., 2432., 2960., 2464., 3000., 2496., 3040.,
      2528., 3080., 2560., 3120., 2592., 3160., 2784., 3400., 2816., 3440.,
      2848., 3480., 2880., 3520., 2912., 3560., 2944., 3600., 2976., 3640.,
      3168., 3880., 3200., 3920., 3232., 3960., 3264., 4000., 3296., 4040.,
      3328., 4080., 3360., 4120., 3552., 4360., 3584., 4400., 3616., 4440.,
      3648., 4480., 3680., 4520., 3712., 4560., 3744., 4600.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      33486., 34416., 35544., 36480., 35517., 36638., 38038., 39168., 36039.,
      37178., 38596., 39744., 36561., 37718., 39154., 40320., 37083., 38258.,
      39712., 40896., 19594., 20280., 21140., 21832., 19918., 20616., 21488.,
      22192., 15934., 16496., 17256., 17824., 21813., 22638., 23742., 24576.,
      22335., 23178., 24300., 25152., 22857., 23718., 24858., 25728., 23379.,
      24258., 25416., 26304., 14010., 14584., 15332., 15912., 14334., 14920.,
      15680., 16272., 20568., 21296., 22240., 22976., 28276., 29344., 30712.,
      31792., 28828., 29920., 31312., 32416., 29380., 30496., 31912., 33040.,
      29932., 31072., 32512., 33664., 17992., 18736., 19664., 20416., 18328.,
      19088., 20032., 20800., 25368., 26288., 27424., 28352., 34900., 36256.,
      37912., 39280., 35452., 36832., 38512., 39904., 36004., 37408., 39112.,
      40528., 36556., 37984., 39712., 41152., 22024., 22960., 24080., 25024.,
      22360., 23312., 24448., 25408., 22326., 23256., 24312., 25248., 22065.,
      23186., 24478., 25608., 22371., 23510., 24820., 25968., 22677., 23834.,
      25162., 26328., 22983., 24158., 25504., 26688., 11362., 12048., 12836.,
      13528., 11542., 12240., 13040., 13744., 9190.,  9752.,  10440., 11008.,
      11913., 12738., 13734., 14568., 12219., 13062., 14076., 14928., 12525.,
      13386., 14418., 15288., 12831., 13710., 14760., 15648., 7122.,  7696.,
      8372.,  8952.,  7302.,  7888.,  8576.,  9168.,  11926., 12632., 13464.,
      14176., 15585., 16626., 17838., 18888., 15891., 16950., 18180., 19248.,
      16197., 17274., 18522., 19608., 16503., 17598., 18864., 19968., 9282.,
      10000., 10820., 11544., 9462.,  10192., 11024., 11760.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2284., 2496., 2744., 2960., 2340., 2560., 2816., 3040., 2396., 2624.,
      2888., 3120., 2452., 2688., 2960., 3200., 2508., 2752., 3032., 3280.,
      2564., 2816., 3104., 3360., 2620., 2880., 3176., 3440., 2956., 3264.,
      3608., 3920., 3012., 3328., 3680., 4000., 3068., 3392., 3752., 4080.,
      3124., 3456., 3824., 4160., 3180., 3520., 3896., 4240., 3236., 3584.,
      3968., 4320., 3292., 3648., 4040., 4400., 3628., 4032., 4472., 4880.,
      3684., 4096., 4544., 4960., 3740., 4160., 4616., 5040., 3796., 4224.,
      4688., 5120., 3852., 4288., 4760., 5200., 3908., 4352., 4832., 5280.,
      3964., 4416., 4904., 5360., 4300., 4800., 5336., 5840., 4356., 4864.,
      5408., 5920., 4412., 4928., 5480., 6000., 4468., 4992., 5552., 6080.,
      4524., 5056., 5624., 6160., 4580., 5120., 5696., 6240., 4636., 5184.,
      5768., 6320., 4972., 5568., 6200., 6800., 5028., 5632., 6272., 6880.,
      5084., 5696., 6344., 6960., 5140., 5760., 6416., 7040., 5196., 5824.,
      6488., 7120., 5252., 5888., 6560., 7200., 5308., 5952., 6632., 7280.,
      5644., 6336., 7064., 7760., 5700., 6400., 7136., 7840., 5756., 6464.,
      7208., 7920., 5812., 6528., 7280., 8000., 5868., 6592., 7352., 8080.,
      5924., 6656., 7424., 8160., 5980., 6720., 7496., 8240., 6316., 7104.,
      7928., 8720., 6372., 7168., 8000., 8800., 6428., 7232., 8072., 8880.,
      6484., 7296., 8144., 8960., 6540., 7360., 8216., 9040., 6596., 7424.,
      8288., 9120., 6652., 7488., 8360., 9200.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28666., 29084., 29502., 29920., 30728., 31152., 31576., 32000., 28313.,
      28794., 29275., 29756., 30786., 31276., 31766., 32256., 29339., 29838.,
      30337., 30836., 31884., 32392., 32900., 33408., 30365., 30882., 31399.,
      31916., 32982., 33508., 34034., 34560., 31391., 31926., 32461., 32996.,
      34080., 34624., 35168., 35712., 15590., 15892., 16194., 16496., 17140.,
      17448., 17756., 18064., 16226., 16540., 16854., 17168., 17824., 18144.,
      18464., 18784., 15690., 15996., 16302., 16608., 17304., 17616., 17928.,
      18240., 20913., 21354., 21795., 22236., 23226., 23676., 24126., 24576.,
      21939., 22398., 22857., 23316., 24324., 24792., 25260., 25728., 22965.,
      23442., 23919., 24396., 25422., 25908., 26394., 26880., 23991., 24486.,
      24981., 25476., 26520., 27024., 27528., 28032., 13878., 14196., 14514.,
      14832., 15492., 15816., 16140., 16464., 14514., 14844., 15174., 15504.,
      16176., 16512., 16848., 17184., 24792., 25264., 25736., 26208., 27104.,
      27584., 28064., 28544., 33596., 34280., 34964., 35648., 36920., 37616.,
      38312., 39008., 34676., 35384., 36092., 36800., 38096., 38816., 39536.,
      40256., 35756., 36488., 37220., 37952., 39272., 40016., 40760., 41504.,
      36836., 37592., 38348., 39104., 40448., 41216., 41984., 42752., 21672.,
      22160., 22648., 23136., 23984., 24480., 24976., 25472., 22328., 22832.,
      23336., 23840., 24704., 25216., 25728., 26240., 28952., 29488., 30024.,
      30560., 31520., 32064., 32608., 33152., 37084., 37800., 38516., 39232.,
      40536., 41264., 41992., 42720., 38164., 38904., 39644., 40384., 41712.,
      42464., 43216., 43968., 39244., 40008., 40772., 41536., 42888., 43664.,
      44440., 45216., 40324., 41112., 41900., 42688., 44064., 44864., 45664.,
      46464., 22120., 22544., 22968., 23392., 24176., 24608., 25040., 25472.,
      22776., 23216., 23656., 24096., 24896., 25344., 25792., 26240., 18634.,
      19052., 19470., 19888., 20552., 20976., 21400., 21824., 16769., 17250.,
      17731., 18212., 19026., 19516., 20006., 20496., 17363., 17862., 18361.,
      18860., 19692., 20200., 20708., 21216., 17957., 18474., 18991., 19508.,
      20358., 20884., 21410., 21936., 18551., 19086., 19621., 20156., 21024.,
      21568., 22112., 22656., 8342.,  8644.,  8946.,  9248.,  9748.,  10056.,
      10364., 10672., 8690.,  9004.,  9318.,  9632.,  10144., 10464., 10784.,
      11104., 8346.,  8652.,  8958.,  9264.,  9816.,  10128., 10440., 10752.,
      10329., 10770., 11211., 11652., 12426., 12876., 13326., 13776., 10923.,
      11382., 11841., 12300., 13092., 13560., 14028., 14496., 11517., 11994.,
      12471., 12948., 13758., 14244., 14730., 15216., 12111., 12606., 13101.,
      13596., 14424., 14928., 15432., 15936., 6246.,  6564.,  6882.,  7200.,
      7716.,  8040.,  8364.,  8688.,  6594.,  6924.,  7254.,  7584.,  8112.,
      8448.,  8784.,  9120.,  13674., 14124., 14574., 15024., 15720., 16176.,
      16632., 17088., 17457., 18114., 18771., 19428., 20418., 21084., 21750.,
      22416., 18051., 18726., 19401., 20076., 21084., 21768., 22452., 23136.,
      18645., 19338., 20031., 20724., 21750., 22452., 23154., 23856., 19239.,
      19950., 20661., 21372., 22416., 23136., 23856., 24576., 10422., 10884.,
      11346., 11808., 12468., 12936., 13404., 13872., 10770., 11244., 11718.,
      12192., 12864., 13344., 13824., 14304.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4356.,  4568.,  4780.,  4992.,  5272.,  5488.,  5704.,  5920.,  4460.,
      4680.,  4900.,  5120.,  5408.,  5632.,  5856.,  6080.,  4564.,  4792.,
      5020.,  5248.,  5544.,  5776.,  6008.,  6240.,  4668.,  4904.,  5140.,
      5376.,  5680.,  5920.,  6160.,  6400.,  4772.,  5016.,  5260.,  5504.,
      5816.,  6064.,  6312.,  6560.,  4876.,  5128.,  5380.,  5632.,  5952.,
      6208.,  6464.,  6720.,  4980.,  5240.,  5500.,  5760.,  6088.,  6352.,
      6616.,  6880.,  5604.,  5912.,  6220.,  6528.,  6904.,  7216.,  7528.,
      7840.,  5708.,  6024.,  6340.,  6656.,  7040.,  7360.,  7680.,  8000.,
      5812.,  6136.,  6460.,  6784.,  7176.,  7504.,  7832.,  8160.,  5916.,
      6248.,  6580.,  6912.,  7312.,  7648.,  7984.,  8320.,  6020.,  6360.,
      6700.,  7040.,  7448.,  7792.,  8136.,  8480.,  6124.,  6472.,  6820.,
      7168.,  7584.,  7936.,  8288.,  8640.,  6228.,  6584.,  6940.,  7296.,
      7720.,  8080.,  8440.,  8800.,  6852.,  7256.,  7660.,  8064.,  8536.,
      8944.,  9352.,  9760.,  6956.,  7368.,  7780.,  8192.,  8672.,  9088.,
      9504.,  9920.,  7060.,  7480.,  7900.,  8320.,  8808.,  9232.,  9656.,
      10080., 7164.,  7592.,  8020.,  8448.,  8944.,  9376.,  9808.,  10240.,
      7268.,  7704.,  8140.,  8576.,  9080.,  9520.,  9960.,  10400., 7372.,
      7816.,  8260.,  8704.,  9216.,  9664.,  10112., 10560., 7476.,  7928.,
      8380.,  8832.,  9352.,  9808.,  10264., 10720., 8100.,  8600.,  9100.,
      9600.,  10168., 10672., 11176., 11680., 8204.,  8712.,  9220.,  9728.,
      10304., 10816., 11328., 11840., 8308.,  8824.,  9340.,  9856.,  10440.,
      10960., 11480., 12000., 8412.,  8936.,  9460.,  9984.,  10576., 11104.,
      11632., 12160., 8516.,  9048.,  9580.,  10112., 10712., 11248., 11784.,
      12320., 8620.,  9160.,  9700.,  10240., 10848., 11392., 11936., 12480.,
      8724.,  9272.,  9820.,  10368., 10984., 11536., 12088., 12640., 9348.,
      9944.,  10540., 11136., 11800., 12400., 13000., 13600., 9452.,  10056.,
      10660., 11264., 11936., 12544., 13152., 13760., 9556.,  10168., 10780.,
      11392., 12072., 12688., 13304., 13920., 9660.,  10280., 10900., 11520.,
      12208., 12832., 13456., 14080., 9764.,  10392., 11020., 11648., 12344.,
      12976., 13608., 14240., 9868.,  10504., 11140., 11776., 12480., 13120.,
      13760., 14400., 9972.,  10616., 11260., 11904., 12616., 13264., 13912.,
      14560., 10596., 11288., 11980., 12672., 13432., 14128., 14824., 15520.,
      10700., 11400., 12100., 12800., 13568., 14272., 14976., 15680., 10804.,
      11512., 12220., 12928., 13704., 14416., 15128., 15840., 10908., 11624.,
      12340., 13056., 13840., 14560., 15280., 16000., 11012., 11736., 12460.,
      13184., 13976., 14704., 15432., 16160., 11116., 11848., 12580., 13312.,
      14112., 14848., 15584., 16320., 11220., 11960., 12700., 13440., 14248.,
      14992., 15736., 16480., 11844., 12632., 13420., 14208., 15064., 15856.,
      16648., 17440., 11948., 12744., 13540., 14336., 15200., 16000., 16800.,
      17600., 12052., 12856., 13660., 14464., 15336., 16144., 16952., 17760.,
      12156., 12968., 13780., 14592., 15472., 16288., 17104., 17920., 12260.,
      13080., 13900., 14720., 15608., 16432., 17256., 18080., 12364., 13192.,
      14020., 14848., 15744., 16576., 17408., 18240., 12468., 13304., 14140.,
      14976., 15880., 16720., 17560., 18400.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28898., 29920., 30954., 32000., 28533., 29756., 30997., 32256., 29577.,
      30836., 32113., 33408., 30621., 31916., 33229., 34560., 31665., 32996.,
      34345., 35712., 15730., 16496., 17274., 18064., 16378., 17168., 17970.,
      18784., 15810., 16608., 17418., 18240., 21093., 22236., 23397., 24576.,
      22137., 23316., 24513., 25728., 23181., 24396., 25629., 26880., 24225.,
      25476., 26745., 28032., 14034., 14832., 15642., 16464., 14682., 15504.,
      16338., 17184., 25064., 26208., 27368., 28544., 34004., 35648., 37316.,
      39008., 35108., 36800., 38516., 40256., 36212., 37952., 39716., 41504.,
      37316., 39104., 40916., 42752., 21992., 23136., 24296., 25472., 22664.,
      23840., 25032., 26240., 29288., 30560., 31848., 33152., 37524., 39232.,
      40964., 42720., 38628., 40384., 42164., 43968., 39732., 41536., 43364.,
      45216., 40836., 42688., 44564., 46464., 22376., 23392., 24424., 25472.,
      23048., 24096., 25160., 26240., 18938., 19888., 20850., 21824., 17097.,
      18212., 19345., 20496., 17709., 18860., 20029., 21216., 18321., 19508.,
      20713., 21936., 18933., 20156., 21397., 22656., 8554.,  9248.,  9954.,
      10672., 8914.,  9632.,  10362., 11104., 8538.,  9264.,  10002., 10752.,
      10617., 11652., 12705., 13776., 11229., 12300., 13389., 14496., 11841.,
      12948., 14073., 15216., 12453., 13596., 14757., 15936., 6474.,  7200.,
      7938.,  8688.,  6834.,  7584.,  8346.,  9120.,  14010., 15024., 16050.,
      17088., 17961., 19428., 20913., 22416., 18573., 20076., 21597., 23136.,
      19185., 20724., 22281., 23856., 19797., 21372., 22965., 24576., 10794.,
      11808., 12834., 13872., 11154., 12192., 13242., 14304.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4540.,  4992.,  5452.,  5920.,  4652.,  5120.,  5596.,  6080.,  4764.,
      5248.,  5740.,  6240.,  4876.,  5376.,  5884.,  6400.,  4988.,  5504.,
      6028.,  6560.,  5100.,  5632.,  6172.,  6720.,  5212.,  5760.,  6316.,
      6880.,  5884.,  6528.,  7180.,  7840.,  5996.,  6656.,  7324.,  8000.,
      6108.,  6784.,  7468.,  8160.,  6220.,  6912.,  7612.,  8320.,  6332.,
      7040.,  7756.,  8480.,  6444.,  7168.,  7900.,  8640.,  6556.,  7296.,
      8044.,  8800.,  7228.,  8064.,  8908.,  9760.,  7340.,  8192.,  9052.,
      9920.,  7452.,  8320.,  9196.,  10080., 7564.,  8448.,  9340.,  10240.,
      7676.,  8576.,  9484.,  10400., 7788.,  8704.,  9628.,  10560., 7900.,
      8832.,  9772.,  10720., 8572.,  9600.,  10636., 11680., 8684.,  9728.,
      10780., 11840., 8796.,  9856.,  10924., 12000., 8908.,  9984.,  11068.,
      12160., 9020.,  10112., 11212., 12320., 9132.,  10240., 11356., 12480.,
      9244.,  10368., 11500., 12640., 9916.,  11136., 12364., 13600., 10028.,
      11264., 12508., 13760., 10140., 11392., 12652., 13920., 10252., 11520.,
      12796., 14080., 10364., 11648., 12940., 14240., 10476., 11776., 13084.,
      14400., 10588., 11904., 13228., 14560., 11260., 12672., 14092., 15520.,
      11372., 12800., 14236., 15680., 11484., 12928., 14380., 15840., 11596.,
      13056., 14524., 16000., 11708., 13184., 14668., 16160., 11820., 13312.,
      14812., 16320., 11932., 13440., 14956., 16480., 12604., 14208., 15820.,
      17440., 12716., 14336., 15964., 17600., 12828., 14464., 16108., 17760.,
      12940., 14592., 16252., 17920., 13052., 14720., 16396., 18080., 13164.,
      14848., 16540., 18240., 13276., 14976., 16684., 18400.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35206., 35780., 36732., 37312., 38282., 38868., 39856., 40448., 31153.,
      31722., 32822., 33400., 34527., 35114., 36268., 36864., 33205., 33810.,
      34946., 35560., 36723., 37346., 38536., 39168., 35257., 35898., 37070.,
      37720., 38919., 39578., 40804., 41472., 37309., 37986., 39194., 39880.,
      41115., 41810., 43072., 43776., 17294., 17636., 18308., 18656., 19346.,
      19700., 20408., 20768., 18566., 18932., 19628., 20000., 20714., 21092.,
      21824., 22208., 21542., 21892., 22620., 22976., 23722., 24084., 24848.,
      25216., 28641., 29130., 30150., 30648., 31695., 32202., 33276., 33792.,
      30693., 31218., 32274., 32808., 33891., 34434., 35544., 36096., 32745.,
      33306., 34398., 34968., 36087., 36666., 37812., 38400., 34797., 35394.,
      36522., 37128., 38283., 38898., 40080., 40704., 20014., 20388., 21092.,
      21472., 22194., 22580., 23320., 23712., 21286., 21684., 22412., 22816.,
      23562., 23972., 24736., 25152., 24104., 24528., 25360., 25792., 26648.,
      27088., 27968., 28416., 32092., 32680., 33832., 34432., 35620., 36232.,
      37456., 38080., 34252., 34888., 36088., 36736., 37972., 38632., 39904.,
      40576., 36412., 37096., 38344., 39040., 40324., 41032., 42352., 43072.,
      38572., 39304., 40600., 41344., 42676., 43432., 44800., 45568., 22024.,
      22480., 23280., 23744., 24568., 25040., 25888., 26368., 23336., 23824.,
      24656., 25152., 26008., 26512., 27392., 27904., 26280., 26832., 27792.,
      28352., 29336., 29904., 30912., 31488., 26780., 27432., 28648., 29312.,
      30564., 31240., 32528., 33216., 28940., 29640., 30904., 31616., 32916.,
      33640., 34976., 35712., 31100., 31848., 33160., 33920., 35268., 36040.,
      37424., 38208., 33260., 34056., 35416., 36224., 37620., 38440., 39872.,
      40704., 10632., 10960., 11632., 11968., 12664., 13008., 13728., 14080.,
      11944., 12304., 13008., 13376., 14104., 14480., 15232., 15616., 21430.,
      22004., 22812., 23392., 24218., 24804., 25648., 26240., 17497., 18066.,
      18950., 19528., 20439., 21026., 21964., 22560., 18685., 19290., 20210.,
      20824., 21771., 22394., 23368., 24000., 19873., 20514., 21470., 22120.,
      23103., 23762., 24772., 25440., 21061., 21738., 22730., 23416., 24435.,
      25130., 26176., 26880., 9086.,  9428.,  9956.,  10304., 10850., 11204.,
      11768., 12128., 9782.,  10148., 10700., 11072., 11642., 12020., 12608.,
      12992., 13142., 13492., 14076., 14432., 15034., 15396., 16016., 16384.,
      16905., 17394., 18198., 18696., 19527., 20034., 20892., 21408., 18093.,
      18618., 19458., 19992., 20859., 21402., 22296., 22848., 19281., 19842.,
      20718., 21288., 22191., 22770., 23700., 24288., 20469., 21066., 21978.,
      22584., 23523., 24138., 25104., 25728., 11038., 11412., 11972., 12352.,
      12930., 13316., 13912., 14304., 11734., 12132., 12716., 13120., 13722.,
      14132., 14752., 15168., 14326., 14708., 15324., 15712., 16346., 16740.,
      17392., 17792., 18489., 19026., 19878., 20424., 21303., 21858., 22764.,
      23328., 19677., 20250., 21138., 21720., 22635., 23226., 24168., 24768.,
      20865., 21474., 22398., 23016., 23967., 24594., 25572., 26208., 22053.,
      22698., 23658., 24312., 25299., 25962., 26976., 27648., 11966., 12372.,
      12964., 13376., 13986., 14404., 15032., 15456., 12662., 13092., 13708.,
      14144., 14778., 15220., 15872., 16320.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8660.,  9080.,  9560.,  9984.,  10476., 10904., 11408., 11840., 8868.,
      9304.,  9800.,  10240., 10748., 11192., 11712., 12160., 9076.,  9528.,
      10040., 10496., 11020., 11480., 12016., 12480., 9284.,  9752.,  10280.,
      10752., 11292., 11768., 12320., 12800., 9492.,  9976.,  10520., 11008.,
      11564., 12056., 12624., 13120., 9700.,  10200., 10760., 11264., 11836.,
      12344., 12928., 13440., 9908.,  10424., 11000., 11520., 12108., 12632.,
      13232., 13760., 11156., 11768., 12440., 13056., 13740., 14360., 15056.,
      15680., 11364., 11992., 12680., 13312., 14012., 14648., 15360., 16000.,
      11572., 12216., 12920., 13568., 14284., 14936., 15664., 16320., 11780.,
      12440., 13160., 13824., 14556., 15224., 15968., 16640., 11988., 12664.,
      13400., 14080., 14828., 15512., 16272., 16960., 12196., 12888., 13640.,
      14336., 15100., 15800., 16576., 17280., 12404., 13112., 13880., 14592.,
      15372., 16088., 16880., 17600., 13652., 14456., 15320., 16128., 17004.,
      17816., 18704., 19520., 13860., 14680., 15560., 16384., 17276., 18104.,
      19008., 19840., 14068., 14904., 15800., 16640., 17548., 18392., 19312.,
      20160., 14276., 15128., 16040., 16896., 17820., 18680., 19616., 20480.,
      14484., 15352., 16280., 17152., 18092., 18968., 19920., 20800., 14692.,
      15576., 16520., 17408., 18364., 19256., 20224., 21120., 14900., 15800.,
      16760., 17664., 18636., 19544., 20528., 21440., 16148., 17144., 18200.,
      19200., 20268., 21272., 22352., 23360., 16356., 17368., 18440., 19456.,
      20540., 21560., 22656., 23680., 16564., 17592., 18680., 19712., 20812.,
      21848., 22960., 24000., 16772., 17816., 18920., 19968., 21084., 22136.,
      23264., 24320., 16980., 18040., 19160., 20224., 21356., 22424., 23568.,
      24640., 17188., 18264., 19400., 20480., 21628., 22712., 23872., 24960.,
      17396., 18488., 19640., 20736., 21900., 23000., 24176., 25280., 18644.,
      19832., 21080., 22272., 23532., 24728., 26000., 27200., 18852., 20056.,
      21320., 22528., 23804., 25016., 26304., 27520., 19060., 20280., 21560.,
      22784., 24076., 25304., 26608., 27840., 19268., 20504., 21800., 23040.,
      24348., 25592., 26912., 28160., 19476., 20728., 22040., 23296., 24620.,
      25880., 27216., 28480., 19684., 20952., 22280., 23552., 24892., 26168.,
      27520., 28800., 19892., 21176., 22520., 23808., 25164., 26456., 27824.,
      29120., 21140., 22520., 23960., 25344., 26796., 28184., 29648., 31040.,
      21348., 22744., 24200., 25600., 27068., 28472., 29952., 31360., 21556.,
      22968., 24440., 25856., 27340., 28760., 30256., 31680., 21764., 23192.,
      24680., 26112., 27612., 29048., 30560., 32000., 21972., 23416., 24920.,
      26368., 27884., 29336., 30864., 32320., 22180., 23640., 25160., 26624.,
      28156., 29624., 31168., 32640., 22388., 23864., 25400., 26880., 28428.,
      29912., 31472., 32960., 23636., 25208., 26840., 28416., 30060., 31640.,
      33296., 34880., 23844., 25432., 27080., 28672., 30332., 31928., 33600.,
      35200., 24052., 25656., 27320., 28928., 30604., 32216., 33904., 35520.,
      24260., 25880., 27560., 29184., 30876., 32504., 34208., 35840., 24468.,
      26104., 27800., 29440., 31148., 32792., 34512., 36160., 24676., 26328.,
      28040., 29696., 31420., 33080., 34816., 36480., 24884., 26552., 28280.,
      29952., 31692., 33368., 35120., 36800.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      32078., 32652., 33226., 33800., 34740., 35320., 35900., 36480., 37450.,
      38036., 38622., 39208., 40208., 40800., 41392., 41984., 26409., 26978.,
      27547., 28116., 29226., 29804., 30382., 30960., 32115., 32702., 33289.,
      33876., 35076., 35672., 36268., 36864., 28429., 29034., 29639., 30244.,
      31390., 32004., 32618., 33232., 34423., 35046., 35669., 36292., 37528.,
      38160., 38792., 39424., 30449., 31090., 31731., 32372., 33554., 34204.,
      34854., 35504., 36731., 37390., 38049., 38708., 39980., 40648., 41316.,
      41984., 32469., 33146., 33823., 34500., 35718., 36404., 37090., 37776.,
      39039., 39734., 40429., 41124., 42432., 43136., 43840., 44544., 19654.,
      19996., 20338., 20680., 21420., 21768., 22116., 22464., 23234., 23588.,
      23942., 24296., 25096., 25456., 25816., 26176., 21150., 21516., 21882.,
      22248., 23012., 23384., 23756., 24128., 24922., 25300., 25678., 26056.,
      26880., 27264., 27648., 28032., 19310., 19660., 20010., 20360., 21076.,
      21432., 21788., 22144., 22890., 23252., 23614., 23976., 24752., 25120.,
      25488., 25856., 29657., 30146., 30635., 31124., 32154., 32652., 33150.,
      33648., 34723., 35230., 35737., 36244., 37364., 37880., 38396., 38912.,
      31677., 32202., 32727., 33252., 34318., 34852., 35386., 35920., 37031.,
      37574., 38117., 38660., 39816., 40368., 40920., 41472., 33697., 34258.,
      34819., 35380., 36482., 37052., 37622., 38192., 39339., 39918., 40497.,
      41076., 42268., 42856., 43444., 44032., 35717., 36314., 36911., 37508.,
      38646., 39252., 39858., 40464., 41647., 42262., 42877., 43492., 44720.,
      45344., 45968., 46592., 29158., 29532., 29906., 30280., 31052., 31432.,
      31812., 32192., 32994., 33380., 33766., 34152., 34984., 35376., 35768.,
      36160., 30654., 31052., 31450., 31848., 32644., 33048., 33452., 33856.,
      34682., 35092., 35502., 35912., 36768., 37184., 37600., 38016., 22312.,
      22736., 23160., 23584., 24432., 24864., 25296., 25728., 26616., 27056.,
      27496., 27936., 28864., 29312., 29760., 30208., 28268., 28856., 29444.,
      30032., 31224., 31824., 32424., 33024., 34276., 34888., 35500., 36112.,
      37424., 38048., 38672., 39296., 30492., 31128., 31764., 32400., 33640.,
      34288., 34936., 35584., 36884., 37544., 38204., 38864., 40224., 40896.,
      41568., 42240., 32716., 33400., 34084., 34768., 36056., 36752., 37448.,
      38144., 39492., 40200., 40908., 41616., 43024., 43744., 44464., 45184.,
      34940., 35672., 36404., 37136., 38472., 39216., 39960., 40704., 42100.,
      42856., 43612., 44368., 45824., 46592., 47360., 48128., 20808., 21264.,
      21720., 22176., 23056., 23520., 23984., 24448., 25368., 25840., 26312.,
      26784., 27744., 28224., 28704., 29184., 22376., 22864., 23352., 23840.,
      24752., 25248., 25744., 26240., 27192., 27696., 28200., 28704., 29696.,
      30208., 30720., 31232., 24488., 25040., 25592., 26144., 27120., 27680.,
      28240., 28800., 29816., 30384., 30952., 31520., 32576., 33152., 33728.,
      34304., 25772., 26424., 27076., 27728., 28984., 29648., 30312., 30976.,
      32292., 32968., 33644., 34320., 35696., 36384., 37072., 37760., 27996.,
      28696., 29396., 30096., 31400., 32112., 32824., 33536., 34900., 35624.,
      36348., 37072., 38496., 39232., 39968., 40704., 30220., 30968., 31716.,
      32464., 33816., 34576., 35336., 36096., 37508., 38280., 39052., 39824.,
      41296., 42080., 42864., 43648., 32444., 33240., 34036., 34832., 36232.,
      37040., 37848., 38656., 40116., 40936., 41756., 42576., 44096., 44928.,
      45760., 46592., 18632., 18960., 19288., 19616., 20368., 20704., 21040.,
      21376., 22168., 22512., 22856., 23200., 24032., 24384., 24736., 25088.,
      20200., 20560., 20920., 21280., 22064., 22432., 22800., 23168., 23992.,
      24368., 24744., 25120., 25984., 26368., 26752., 27136., 26286., 26860.,
      27434., 28008., 28916., 29496., 30076., 30656., 31594., 32180., 32766.,
      33352., 34320., 34912., 35504., 36096., 34297., 34866., 35435., 36004.,
      37066., 37644., 38222., 38800., 39907., 40494., 41081., 41668., 42820.,
      43416., 44012., 44608., 36125., 36730., 37335., 37940., 39038., 39652.,
      40266., 40880., 42023., 42646., 43269., 43892., 45080., 45712., 46344.,
      46976., 37953., 38594., 39235., 39876., 41010., 41660., 42310., 42960.,
      44139., 44798., 45457., 46116., 47340., 48008., 48676., 49344., 39781.,
      40458., 41135., 41812., 42982., 43668., 44354., 45040., 46255., 46950.,
      47645., 48340., 49600., 50304., 51008., 51712., 17830., 18172., 18514.,
      18856., 19564., 19912., 20260., 20608., 21346., 21700., 22054., 22408.,
      23176., 23536., 23896., 24256., 19198., 19564., 19930., 20296., 21028.,
      21400., 21772., 22144., 22906., 23284., 23662., 24040., 24832., 25216.,
      25600., 25984., 20174., 20524., 20874., 21224., 21908., 22264., 22620.,
      22976., 23690., 24052., 24414., 24776., 25520., 25888., 26256., 26624.,
      27049., 27538., 28027., 28516., 29498., 29996., 30494., 30992., 32019.,
      32526., 33033., 33540., 34612., 35128., 35644., 36160., 28877., 29402.,
      29927., 30452., 31470., 32004., 32538., 33072., 34135., 34678., 35221.,
      35764., 36872., 37424., 37976., 38528., 30705., 31266., 31827., 32388.,
      33442., 34012., 34582., 35152., 36251., 36830., 37409., 37988., 39132.,
      39720., 40308., 40896., 32533., 33130., 33727., 34324., 35414., 36020.,
      36626., 37232., 38367., 38982., 39597., 40212., 41392., 42016., 42640.,
      43264., 21702., 22076., 22450., 22824., 23564., 23944., 24324., 24704.,
      25474., 25860., 26246., 26632., 27432., 27824., 28216., 28608., 23070.,
      23468., 23866., 24264., 25028., 25432., 25836., 26240., 27034., 27444.,
      27854., 28264., 29088., 29504., 29920., 30336., 16366., 16748., 17130.,
      17512., 18228., 18616., 19004., 19392., 20138., 20532., 20926., 21320.,
      22096., 22496., 22896., 23296., 24025., 24562., 25099., 25636., 26666.,
      27212., 27758., 28304., 29379., 29934., 30489., 31044., 32164., 32728.,
      33292., 33856., 25853., 26426., 26999., 27572., 28638., 29220., 29802.,
      30384., 31495., 32086., 32677., 33268., 34424., 35024., 35624., 36224.,
      27681., 28290., 28899., 29508., 30610., 31228., 31846., 32464., 33611.,
      34238., 34865., 35492., 36684., 37320., 37956., 38592., 29509., 30154.,
      30799., 31444., 32582., 33236., 33890., 34544., 35727., 36390., 37053.,
      37716., 38944., 39616., 40288., 40960., 23526., 23932., 24338., 24744.,
      25516., 25928., 26340., 26752., 27554., 27972., 28390., 28808., 29640.,
      30064., 30488., 30912., 24894., 25324., 25754., 26184., 26980., 27416.,
      27852., 28288., 29114., 29556., 29998., 30440., 31296., 31744., 32192.,
      32640.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16900., 17320., 17740., 18160., 18696., 19120., 19544., 19968., 20524.,
      20952., 21380., 21808., 22384., 22816., 23248., 23680., 17300., 17736.,
      18172., 18608., 19160., 19600., 20040., 20480., 21052., 21496., 21940.,
      22384., 22976., 23424., 23872., 24320., 17700., 18152., 18604., 19056.,
      19624., 20080., 20536., 20992., 21580., 22040., 22500., 22960., 23568.,
      24032., 24496., 24960., 18100., 18568., 19036., 19504., 20088., 20560.,
      21032., 21504., 22108., 22584., 23060., 23536., 24160., 24640., 25120.,
      25600., 18500., 18984., 19468., 19952., 20552., 21040., 21528., 22016.,
      22636., 23128., 23620., 24112., 24752., 25248., 25744., 26240., 18900.,
      19400., 19900., 20400., 21016., 21520., 22024., 22528., 23164., 23672.,
      24180., 24688., 25344., 25856., 26368., 26880., 19300., 19816., 20332.,
      20848., 21480., 22000., 22520., 23040., 23692., 24216., 24740., 25264.,
      25936., 26464., 26992., 27520., 9156.,  9512.,  9868.,  10224., 10696.,
      11056., 11416., 11776., 12268., 12632., 12996., 13360., 13872., 14240.,
      14608., 14976., 9556.,  9928.,  10300., 10672., 11160., 11536., 11912.,
      12288., 12796., 13176., 13556., 13936., 14464., 14848., 15232., 15616.,
      9956.,  10344., 10732., 11120., 11624., 12016., 12408., 12800., 13324.,
      13720., 14116., 14512., 15056., 15456., 15856., 16256., 10356., 10760.,
      11164., 11568., 12088., 12496., 12904., 13312., 13852., 14264., 14676.,
      15088., 15648., 16064., 16480., 16896., 2308.,  2472.,  2636.,  2800.,
      3080.,  3248.,  3416.,  3584.,  3884.,  4056.,  4228.,  4400.,  4720.,
      4896.,  5072.,  5248.,  2708.,  2888.,  3068.,  3248.,  3544.,  3728.,
      3912.,  4096.,  4412.,  4600.,  4788.,  4976.,  5312.,  5504.,  5696.,
      5888.,  3108.,  3304.,  3500.,  3696.,  4008.,  4208.,  4408.,  4608.,
      4940.,  5144.,  5348.,  5552.,  5904.,  6112.,  6320.,  6528.,  5508.,
      5800.,  6092.,  6384.,  6792.,  7088.,  7384.,  7680.,  8108.,  8408.,
      8708.,  9008.,  9456.,  9760.,  10064., 10368., 5908.,  6216.,  6524.,
      6832.,  7256.,  7568.,  7880.,  8192.,  8636.,  8952.,  9268.,  9584.,
      10048., 10368., 10688., 11008., 6308.,  6632.,  6956.,  7280.,  7720.,
      8048.,  8376.,  8704.,  9164.,  9496.,  9828.,  10160., 10640., 10976.,
      11312., 11648., 6708.,  7048.,  7388.,  7728.,  8184.,  8528.,  8872.,
      9216.,  9692.,  10040., 10388., 10736., 11232., 11584., 11936., 12288.,
      7108.,  7464.,  7820.,  8176.,  8648.,  9008.,  9368.,  9728.,  10220.,
      10584., 10948., 11312., 11824., 12192., 12560., 12928., 7508.,  7880.,
      8252.,  8624.,  9112.,  9488.,  9864.,  10240., 10748., 11128., 11508.,
      11888., 12416., 12800., 13184., 13568., 7908.,  8296.,  8684.,  9072.,
      9576.,  9968.,  10360., 10752., 11276., 11672., 12068., 12464., 13008.,
      13408., 13808., 14208., 10308., 10792., 11276., 11760., 12360., 12848.,
      13336., 13824., 14444., 14936., 15428., 15920., 16560., 17056., 17552.,
      18048., 10708., 11208., 11708., 12208., 12824., 13328., 13832., 14336.,
      14972., 15480., 15988., 16496., 17152., 17664., 18176., 18688., 11108.,
      11624., 12140., 12656., 13288., 13808., 14328., 14848., 15500., 16024.,
      16548., 17072., 17744., 18272., 18800., 19328., 11508., 12040., 12572.,
      13104., 13752., 14288., 14824., 15360., 16028., 16568., 17108., 17648.,
      18336., 18880., 19424., 19968., 11908., 12456., 13004., 13552., 14216.,
      14768., 15320., 15872., 16556., 17112., 17668., 18224., 18928., 19488.,
      20048., 20608., 12308., 12872., 13436., 14000., 14680., 15248., 15816.,
      16384., 17084., 17656., 18228., 18800., 19520., 20096., 20672., 21248.,
      12708., 13288., 13868., 14448., 15144., 15728., 16312., 16896., 17612.,
      18200., 18788., 19376., 20112., 20704., 21296., 21888., 15108., 15784.,
      16460., 17136., 17928., 18608., 19288., 19968., 20780., 21464., 22148.,
      22832., 23664., 24352., 25040., 25728., 15508., 16200., 16892., 17584.,
      18392., 19088., 19784., 20480., 21308., 22008., 22708., 23408., 24256.,
      24960., 25664., 26368., 15908., 16616., 17324., 18032., 18856., 19568.,
      20280., 20992., 21836., 22552., 23268., 23984., 24848., 25568., 26288.,
      27008., 16308., 17032., 17756., 18480., 19320., 20048., 20776., 21504.,
      22364., 23096., 23828., 24560., 25440., 26176., 26912., 27648., 16708.,
      17448., 18188., 18928., 19784., 20528., 21272., 22016., 22892., 23640.,
      24388., 25136., 26032., 26784., 27536., 28288., 17108., 17864., 18620.,
      19376., 20248., 21008., 21768., 22528., 23420., 24184., 24948., 25712.,
      26624., 27392., 28160., 28928., 17508., 18280., 19052., 19824., 20712.,
      21488., 22264., 23040., 23948., 24728., 25508., 26288., 27216., 28000.,
      28784., 29568., 15556., 16168., 16780., 17392., 18120., 18736., 19352.,
      19968., 20716., 21336., 21956., 22576., 23344., 23968., 24592., 25216.,
      15956., 16584., 17212., 17840., 18584., 19216., 19848., 20480., 21244.,
      21880., 22516., 23152., 23936., 24576., 25216., 25856., 16356., 17000.,
      17644., 18288., 19048., 19696., 20344., 20992., 21772., 22424., 23076.,
      23728., 24528., 25184., 25840., 26496., 16756., 17416., 18076., 18736.,
      19512., 20176., 20840., 21504., 22300., 22968., 23636., 24304., 25120.,
      25792., 26464., 27136., 16900., 17320., 17740., 18160., 18696., 19120.,
      19544., 19968., 20524., 20952., 21380., 21808., 22384., 22816., 23248.,
      23680., 17300., 17736., 18172., 18608., 19160., 19600., 20040., 20480.,
      21052., 21496., 21940., 22384., 22976., 23424., 23872., 24320., 17700.,
      18152., 18604., 19056., 19624., 20080., 20536., 20992., 21580., 22040.,
      22500., 22960., 23568., 24032., 24496., 24960., 20100., 20648., 21196.,
      21744., 22408., 22960., 23512., 24064., 24748., 25304., 25860., 26416.,
      27120., 27680., 28240., 28800., 20500., 21064., 21628., 22192., 22872.,
      23440., 24008., 24576., 25276., 25848., 26420., 26992., 27712., 28288.,
      28864., 29440., 20900., 21480., 22060., 22640., 23336., 23920., 24504.,
      25088., 25804., 26392., 26980., 27568., 28304., 28896., 29488., 30080.,
      21300., 21896., 22492., 23088., 23800., 24400., 25000., 25600., 26332.,
      26936., 27540., 28144., 28896., 29504., 30112., 30720., 9156.,  9512.,
      9868.,  10224., 10696., 11056., 11416., 11776., 12268., 12632., 12996.,
      13360., 13872., 14240., 14608., 14976., 9556.,  9928.,  10300., 10672.,
      11160., 11536., 11912., 12288., 12796., 13176., 13556., 13936., 14464.,
      14848., 15232., 15616., 9956.,  10344., 10732., 11120., 11624., 12016.,
      12408., 12800., 13324., 13720., 14116., 14512., 15056., 15456., 15856.,
      16256.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10377., 10476., 13318., 13444., 9558.,  9648.,  9738.,  11763., 11862.,
      15082., 15208., 10818., 10908., 10998., 13220., 13328., 16936., 17072.,
      12128., 12224., 12320., 14732., 14840., 18840., 18976., 13472., 13568.,
      13664., 7101.,  7164.,  8950.,  9028.,  6282.,  6336.,  6390.,  7983.,
      8046.,  10042., 10120., 7038.,  7092.,  7146.,  8865.,  8928.,  11134.,
      11212., 7794.,  7848.,  7902.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      426.,  436.,  446.,  456.,  466.,  476.,  486.,  566.,  576.,  586.,
      596.,  606.,  616.,  626.,  706.,  716.,  726.,  736.,  746.,  756.,
      766.,  846.,  856.,  866.,  876.,  886.,  896.,  906.,  986.,  996.,
      1006., 1016., 1026., 1036., 1046., 1126., 1136., 1146., 1156., 1166.,
      1176., 1186., 1266., 1276., 1286., 1296., 1306., 1316., 1326.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19935., 20754., 20124., 20952., 25544., 26636., 25784., 26888., 18297.,
      19116., 18468., 19296., 18639., 19476., 22581., 23526., 22770., 23724.,
      28904., 30164., 29144., 30416., 20691., 21636., 20862., 21816., 21033.,
      21996., 25348., 26440., 25552., 26656., 32416., 33872., 32672., 34144.,
      23164., 24256., 23344., 24448., 23524., 24640., 28204., 29464., 28408.,
      29680., 36000., 37680., 36256., 37952., 25684., 26944., 25864., 27136.,
      26044., 27328., 13383., 14202., 13500., 14328., 16808., 17900., 16952.,
      18056., 11745., 12564., 11844., 12672., 11943., 12780., 15021., 15966.,
      15138., 16092., 18824., 20084., 18968., 20240., 13131., 14076., 13230.,
      14184., 13329., 14292., 16659., 17730., 16776., 17856., 20840., 22268.,
      20984., 22424., 14517., 15588., 14616., 15696., 14715., 15804.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      728.,  852.,  744.,  872.,  760.,  892.,  776.,  912.,  792.,  932.,
      808.,  952.,  824.,  972.,  952.,  1132., 968.,  1152., 984.,  1172.,
      1000., 1192., 1016., 1212., 1032., 1232., 1048., 1252., 1176., 1412.,
      1192., 1432., 1208., 1452., 1224., 1472., 1240., 1492., 1256., 1512.,
      1272., 1532., 1400., 1692., 1416., 1712., 1432., 1732., 1448., 1752.,
      1464., 1772., 1480., 1792., 1496., 1812., 1624., 1972., 1640., 1992.,
      1656., 2012., 1672., 2032., 1688., 2052., 1704., 2072., 1720., 2092.,
      1848., 2252., 1864., 2272., 1880., 2292., 1896., 2312., 1912., 2332.,
      1928., 2352., 1944., 2372., 2072., 2532., 2088., 2552., 2104., 2572.,
      2120., 2592., 2136., 2612., 2152., 2632., 2168., 2652.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17163., 17598., 18033., 18468., 17532., 17976., 18420., 18864., 21836.,
      22416., 22996., 23576., 22304., 22896., 23488., 24080., 15423., 15858.,
      16293., 16728., 15756., 16200., 16644., 17088., 16089., 16542., 16995.,
      17448., 22329., 22890., 23451., 24012., 22698., 23268., 23838., 24408.,
      28388., 29136., 29884., 30632., 28856., 29616., 30376., 31136., 20085.,
      20646., 21207., 21768., 20418., 20988., 21558., 22128., 20751., 21330.,
      21909., 22488., 27716., 28424., 29132., 29840., 28112., 28832., 29552.,
      30272., 35216., 36160., 37104., 38048., 35712., 36672., 37632., 38592.,
      24884., 25592., 26300., 27008., 25232., 25952., 26672., 27392., 25580.,
      26312., 27044., 27776., 17516., 18008., 18500., 18992., 17912., 18416.,
      18920., 19424., 26416., 27200., 27984., 28768., 26912., 27712., 28512.,
      29312., 15548., 16040., 16532., 17024., 15896., 16400., 16904., 17408.,
      16244., 16760., 17276., 17792., 10203., 10638., 11073., 11508., 10428.,
      10872., 11316., 11760., 12556., 13136., 13716., 14296., 12832., 13424.,
      14016., 14608., 8463.,  8898.,  9333.,  9768.,  8652.,  9096.,  9540.,
      9984.,  8841.,  9294.,  9747.,  10200., 13353., 13914., 14475., 15036.,
      13578., 14148., 14718., 15288., 16420., 17168., 17916., 18664., 16696.,
      17456., 18216., 18976., 11109., 11670., 12231., 12792., 11298., 11868.,
      12438., 13008., 11487., 12066., 12645., 13224., 16503., 17190., 17877.,
      18564., 16728., 17424., 18120., 18816., 20284., 21200., 22116., 23032.,
      20560., 21488., 22416., 23344., 13755., 14442., 15129., 15816., 13944.,
      14640., 15336., 16032., 14133., 14838., 15543., 16248.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1332., 1456., 1580., 1704., 1360., 1488., 1616., 1744., 1388., 1520.,
      1652., 1784., 1416., 1552., 1688., 1824., 1444., 1584., 1724., 1864.,
      1472., 1616., 1760., 1904., 1500., 1648., 1796., 1944., 1724., 1904.,
      2084., 2264., 1752., 1936., 2120., 2304., 1780., 1968., 2156., 2344.,
      1808., 2000., 2192., 2384., 1836., 2032., 2228., 2424., 1864., 2064.,
      2264., 2464., 1892., 2096., 2300., 2504., 2116., 2352., 2588., 2824.,
      2144., 2384., 2624., 2864., 2172., 2416., 2660., 2904., 2200., 2448.,
      2696., 2944., 2228., 2480., 2732., 2984., 2256., 2512., 2768., 3024.,
      2284., 2544., 2804., 3064., 2508., 2800., 3092., 3384., 2536., 2832.,
      3128., 3424., 2564., 2864., 3164., 3464., 2592., 2896., 3200., 3504.,
      2620., 2928., 3236., 3544., 2648., 2960., 3272., 3584., 2676., 2992.,
      3308., 3624., 2900., 3248., 3596., 3944., 2928., 3280., 3632., 3984.,
      2956., 3312., 3668., 4024., 2984., 3344., 3704., 4064., 3012., 3376.,
      3740., 4104., 3040., 3408., 3776., 4144., 3068., 3440., 3812., 4184.,
      3292., 3696., 4100., 4504., 3320., 3728., 4136., 4544., 3348., 3760.,
      4172., 4584., 3376., 3792., 4208., 4624., 3404., 3824., 4244., 4664.,
      3432., 3856., 4280., 4704., 3460., 3888., 4316., 4744., 3684., 4144.,
      4604., 5064., 3712., 4176., 4640., 5104., 3740., 4208., 4676., 5144.,
      3768., 4240., 4712., 5184., 3796., 4272., 4748., 5224., 3824., 4304.,
      4784., 5264., 3852., 4336., 4820., 5304.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17409., 18468., 17787., 18864., 22176., 23576., 22656., 24080., 15687.,
      16728., 16029., 17088., 16371., 17448., 22701., 24012., 23079., 24408.,
      28896., 30632., 29376., 31136., 20475., 21768., 20817., 22128., 21159.,
      22488., 28220., 29840., 28628., 30272., 35904., 38048., 36416., 38592.,
      25412., 27008., 25772., 27392., 26132., 27776., 17804., 18992., 18212.,
      19424., 26944., 28768., 27456., 29312., 15860., 17024., 16220., 17408.,
      16580., 17792., 10521., 11508., 10755., 11760., 12992., 14296., 13280.,
      14608., 8799.,  9768.,  8997.,  9984.,  9195.,  10200., 13797., 15036.,
      14031., 15288., 17024., 18664., 17312., 18976., 11571., 12792., 11769.,
      13008., 11967., 13224., 17073., 18564., 17307., 18816., 21056., 23032.,
      21344., 23344., 14343., 15816., 14541., 16032., 14739., 16248.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1440., 1704., 1472., 1744., 1504., 1784., 1536., 1824., 1568., 1864.,
      1600., 1904., 1632., 1944., 1888., 2264., 1920., 2304., 1952., 2344.,
      1984., 2384., 2016., 2424., 2048., 2464., 2080., 2504., 2336., 2824.,
      2368., 2864., 2400., 2904., 2432., 2944., 2464., 2984., 2496., 3024.,
      2528., 3064., 2784., 3384., 2816., 3424., 2848., 3464., 2880., 3504.,
      2912., 3544., 2944., 3584., 2976., 3624., 3232., 3944., 3264., 3984.,
      3296., 4024., 3328., 4064., 3360., 4104., 3392., 4144., 3424., 4184.,
      3680., 4504., 3712., 4544., 3744., 4584., 3776., 4624., 3808., 4664.,
      3840., 4704., 3872., 4744., 4128., 5064., 4160., 5104., 4192., 5144.,
      4224., 5184., 4256., 5224., 4288., 5264., 4320., 5304.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18213., 18690., 19554., 20040., 18951., 19446., 20328., 20832., 23236.,
      23872., 25000., 25648., 24172., 24832., 25984., 26656., 16305., 16782.,
      17610., 18096., 16971., 17466., 18312., 18816., 17637., 18150., 19014.,
      19536., 28545., 29274., 30390., 31128., 29283., 30030., 31164., 31920.,
      36340., 37312., 38776., 39760., 37276., 38272., 39760., 40768., 25629.,
      26358., 27438., 28176., 26295., 27042., 28140., 28896., 26961., 27726.,
      28842., 29616., 35580., 36472., 37784., 38688., 36372., 37288., 38624.,
      39552., 43056., 44160., 45792., 46912., 44048., 45184., 46848., 48000.,
      32012., 32904., 34168., 35072., 32708., 33624., 34912., 35840., 30716.,
      31528., 32712., 33536., 17228., 17688., 18568., 19040., 18020., 18504.,
      19408., 19904., 28528., 29312., 30624., 31424., 29520., 30336., 31680.,
      32512., 15388., 15848., 16680., 17152., 16084., 16568., 17424., 17920.,
      16780., 17288., 18168., 18688., 10581., 11058., 11778., 12264., 11031.,
      11526., 12264., 12768., 13060., 13696., 14632., 15280., 13612., 14272.,
      15232., 15904., 8673.,  9150.,  9834.,  10320., 9051.,  9546.,  10248.,
      10752., 9429.,  9942.,  10662., 11184., 16881., 17610., 18582., 19320.,
      17331., 18078., 19068., 19824., 20788., 21760., 23032., 24016., 21340.,
      22336., 23632., 24640., 13965., 14694., 15630., 16368., 14343., 15090.,
      16044., 16800., 14721., 15486., 16458., 17232., 21517., 22370., 23466.,
      24328., 21967., 22838., 23952., 24832., 25700., 26752., 28104., 29168.,
      26252., 27328., 28704., 29792., 18105., 18958., 20018., 20880., 18483.,
      19354., 20432., 21312., 18221., 18982., 19950., 20720.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2636., 2880.,  3160., 3408.,  2692., 2944.,  3232., 3488.,  2748., 3008.,
      3304., 3568.,  2804., 3072.,  3376., 3648.,  2860., 3136.,  3448., 3728.,
      2916., 3200.,  3520., 3808.,  2972., 3264.,  3592., 3888.,  3420., 3776.,
      4168., 4528.,  3476., 3840.,  4240., 4608.,  3532., 3904.,  4312., 4688.,
      3588., 3968.,  4384., 4768.,  3644., 4032.,  4456., 4848.,  3700., 4096.,
      4528., 4928.,  3756., 4160.,  4600., 5008.,  4204., 4672.,  5176., 5648.,
      4260., 4736.,  5248., 5728.,  4316., 4800.,  5320., 5808.,  4372., 4864.,
      5392., 5888.,  4428., 4928.,  5464., 5968.,  4484., 4992.,  5536., 6048.,
      4540., 5056.,  5608., 6128.,  4988., 5568.,  6184., 6768.,  5044., 5632.,
      6256., 6848.,  5100., 5696.,  6328., 6928.,  5156., 5760.,  6400., 7008.,
      5212., 5824.,  6472., 7088.,  5268., 5888.,  6544., 7168.,  5324., 5952.,
      6616., 7248.,  5772., 6464.,  7192., 7888.,  5828., 6528.,  7264., 7968.,
      5884., 6592.,  7336., 8048.,  5940., 6656.,  7408., 8128.,  5996., 6720.,
      7480., 8208.,  6052., 6784.,  7552., 8288.,  6108., 6848.,  7624., 8368.,
      6556., 7360.,  8200., 9008.,  6612., 7424.,  8272., 9088.,  6668., 7488.,
      8344., 9168.,  6724., 7552.,  8416., 9248.,  6780., 7616.,  8488., 9328.,
      6836., 7680.,  8560., 9408.,  6892., 7744.,  8632., 9488.,  7340., 8256.,
      9208., 10128., 7396., 8320.,  9280., 10208., 7452., 8384.,  9352., 10288.,
      7508., 8448.,  9424., 10368., 7564., 8512.,  9496., 10448., 7620., 8576.,
      9568., 10528., 7676., 8640.,  9640., 10608.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11885., 12234., 12583., 12932., 13662., 14020., 14378., 14736., 12575.,
      12942., 13309., 13676., 14424., 14800., 15176., 15552., 11788., 12168.,
      12548., 12928., 13768., 14160., 14552., 14944., 12612., 13016., 13420.,
      13824., 14688., 15104., 15520., 15936., 9093.,  9442.,  9791.,  10140.,
      10798., 11156., 11514., 11872., 9639.,  10006., 10373., 10740., 11416.,
      11792., 12168., 12544., 6985.,  7242.,  7499.,  7756.,  8322.,  8588.,
      8854.,  9120.,  8873.,  9090.,  9307.,  9524.,  10122., 10348., 10574.,
      10800., 9563.,  9798.,  10033., 10268., 10884., 11128., 11372., 11616.,
      12700., 13032., 13364., 13696., 14488., 14832., 15176., 15520., 13524.,
      13880., 14236., 14592., 15408., 15776., 16144., 16512., 7137.,  7354.,
      7571.,  7788.,  8314.,  8540.,  8766.,  8992.,  7683.,  7918.,  8153.,
      8388.,  8932.,  9176.,  9420.,  9664.,  8229.,  8482.,  8735.,  8988.,
      9550.,  9812.,  10074., 10336., 13052., 13432., 13812., 14192., 15016.,
      15408., 15800., 16192., 13844., 14248., 14652., 15056., 15904., 16320.,
      16736., 17152., 13712., 14176., 14640., 15104., 16096., 16576., 17056.,
      17536., 14640., 15136., 15632., 16128., 17152., 17664., 18176., 18688.,
      10012., 10392., 10772., 11152., 11880., 12272., 12664., 13056., 10612.,
      11016., 11420., 11824., 12576., 12992., 13408., 13824., 8588.,  8952.,
      9316.,  9680.,  10392., 10768., 11144., 11520., 11468., 11800., 12132.,
      12464., 13240., 13584., 13928., 14272., 12260., 12616., 12972., 13328.,
      14128., 14496., 14864., 15232., 15056., 15584., 16112., 16640., 17696.,
      18240., 18784., 19328., 15984., 16544., 17104., 17664., 18752., 19328.,
      19904., 20480., 8812.,  9144.,  9476.,  9808.,  10488., 10832., 11176.,
      11520., 9412.,  9768.,  10124., 10480., 11184., 11552., 11920., 12288.,
      10012., 10392., 10772., 11152., 11880., 12272., 12664., 13056., 10893.,
      11242., 11591., 11940., 12574., 12932., 13290., 13648., 11391., 11758.,
      12125., 12492., 13144., 13520., 13896., 14272., 9100.,  9480.,  9860.,
      10240., 10952., 11344., 11736., 12128., 9668.,  10072., 10476., 10880.,
      11616., 12032., 12448., 12864., 8101.,  8450.,  8799.,  9148.,  9710.,
      10068., 10426., 10784., 8455.,  8822.,  9189.,  9556.,  10136., 10512.,
      10888., 11264., 5609.,  5866.,  6123.,  6380.,  6850.,  7116.,  7382.,
      7648.,  5193.,  5410.,  5627.,  5844.,  6346.,  6572.,  6798.,  7024.,
      5691.,  5926.,  6161.,  6396.,  6916.,  7160.,  7404.,  7648.,  6428.,
      6760.,  7092.,  7424.,  8088.,  8432.,  8776.,  9120.,  6996.,  7352.,
      7708.,  8064.,  8752.,  9120.,  9488.,  9856.,  3457.,  3674.,  3891.,
      4108.,  4538.,  4764.,  4990.,  5216.,  3811.,  4046.,  4281.,  4516.,
      4964.,  5208.,  5452.,  5696.,  4165.,  4418.,  4671.,  4924.,  5390.,
      5652.,  5914.,  6176.,  9989.,  10330., 10671., 11012., 11638., 11988.,
      12338., 12688., 10487., 10846., 11205., 11564., 12208., 12576., 12944.,
      13312., 11052., 11464., 11876., 12288., 13032., 13456., 13880., 14304.,
      11620., 12056., 12492., 12928., 13696., 14144., 14592., 15040., 7261.,
      7602.,  7943.,  8284.,  8838.,  9188.,  9538.,  9888.,  7615.,  7974.,
      8333.,  8692.,  9264.,  9632.,  10000., 10368., 7393.,  7706.,  8019.,
      8332.,  8858.,  9180.,  9502.,  9824.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5028.,  5272.,  5516.,  5760.,  6072.,  6320.,  6568.,  6816.,  5132.,
      5384.,  5636.,  5888.,  6208.,  6464.,  6720.,  6976.,  5236.,  5496.,
      5756.,  6016.,  6344.,  6608.,  6872.,  7136.,  5340.,  5608.,  5876.,
      6144.,  6480.,  6752.,  7024.,  7296.,  5444.,  5720.,  5996.,  6272.,
      6616.,  6896.,  7176.,  7456.,  5548.,  5832.,  6116.,  6400.,  6752.,
      7040.,  7328.,  7616.,  5652.,  5944.,  6236.,  6528.,  6888.,  7184.,
      7480.,  7776.,  6484.,  6840.,  7196.,  7552.,  7976.,  8336.,  8696.,
      9056.,  6588.,  6952.,  7316.,  7680.,  8112.,  8480.,  8848.,  9216.,
      6692.,  7064.,  7436.,  7808.,  8248.,  8624.,  9000.,  9376.,  6796.,
      7176.,  7556.,  7936.,  8384.,  8768.,  9152.,  9536.,  6900.,  7288.,
      7676.,  8064.,  8520.,  8912.,  9304.,  9696.,  7004.,  7400.,  7796.,
      8192.,  8656.,  9056.,  9456.,  9856.,  7108.,  7512.,  7916.,  8320.,
      8792.,  9200.,  9608.,  10016., 7940.,  8408.,  8876.,  9344.,  9880.,
      10352., 10824., 11296., 8044.,  8520.,  8996.,  9472.,  10016., 10496.,
      10976., 11456., 8148.,  8632.,  9116.,  9600.,  10152., 10640., 11128.,
      11616., 8252.,  8744.,  9236.,  9728.,  10288., 10784., 11280., 11776.,
      8356.,  8856.,  9356.,  9856.,  10424., 10928., 11432., 11936., 8460.,
      8968.,  9476.,  9984.,  10560., 11072., 11584., 12096., 8564.,  9080.,
      9596.,  10112., 10696., 11216., 11736., 12256., 9396.,  9976.,  10556.,
      11136., 11784., 12368., 12952., 13536., 9500.,  10088., 10676., 11264.,
      11920., 12512., 13104., 13696., 9604.,  10200., 10796., 11392., 12056.,
      12656., 13256., 13856., 9708.,  10312., 10916., 11520., 12192., 12800.,
      13408., 14016., 9812.,  10424., 11036., 11648., 12328., 12944., 13560.,
      14176., 9916.,  10536., 11156., 11776., 12464., 13088., 13712., 14336.,
      10020., 10648., 11276., 11904., 12600., 13232., 13864., 14496., 10852.,
      11544., 12236., 12928., 13688., 14384., 15080., 15776., 10956., 11656.,
      12356., 13056., 13824., 14528., 15232., 15936., 11060., 11768., 12476.,
      13184., 13960., 14672., 15384., 16096., 11164., 11880., 12596., 13312.,
      14096., 14816., 15536., 16256., 11268., 11992., 12716., 13440., 14232.,
      14960., 15688., 16416., 11372., 12104., 12836., 13568., 14368., 15104.,
      15840., 16576., 11476., 12216., 12956., 13696., 14504., 15248., 15992.,
      16736., 12308., 13112., 13916., 14720., 15592., 16400., 17208., 18016.,
      12412., 13224., 14036., 14848., 15728., 16544., 17360., 18176., 12516.,
      13336., 14156., 14976., 15864., 16688., 17512., 18336., 12620., 13448.,
      14276., 15104., 16000., 16832., 17664., 18496., 12724., 13560., 14396.,
      15232., 16136., 16976., 17816., 18656., 12828., 13672., 14516., 15360.,
      16272., 17120., 17968., 18816., 12932., 13784., 14636., 15488., 16408.,
      17264., 18120., 18976., 13764., 14680., 15596., 16512., 17496., 18416.,
      19336., 20256., 13868., 14792., 15716., 16640., 17632., 18560., 19488.,
      20416., 13972., 14904., 15836., 16768., 17768., 18704., 19640., 20576.,
      14076., 15016., 15956., 16896., 17904., 18848., 19792., 20736., 14180.,
      15128., 16076., 17024., 18040., 18992., 19944., 20896., 14284., 15240.,
      16196., 17152., 18176., 19136., 20096., 21056., 14388., 15352., 16316.,
      17280., 18312., 19280., 20248., 21216.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29145., 30212., 31297., 32400., 30621., 31724., 32845., 33984., 30644.,
      31872., 33124., 34400., 32516., 33792., 35092., 36416., 26389., 27420.,
      28469., 29536., 27721., 28788., 29873., 30976., 21629., 22476., 23341.,
      24224., 16273., 17076., 17897., 18736., 17749., 18588., 19445., 20320.,
      25364., 26496., 27652., 28832., 27236., 28416., 29620., 30848., 14573.,
      15340., 16125., 16928., 15905., 16708., 17529., 18368., 17237., 18076.,
      18933., 19808., 27244., 28400., 29580., 30784., 28828., 30032., 31260.,
      32512., 32624., 34048., 35504., 36992., 34608., 36096., 37616., 39168.,
      24252., 25360., 26492., 27648., 25644., 26800., 27980., 29184., 24348.,
      25424., 26524., 27648., 19980., 21040., 22124., 23232., 21564., 22672.,
      23804., 24960., 31984., 33536., 35120., 36736., 33968., 35584., 37232.,
      38912., 17372., 18384., 19420., 20480., 18764., 19824., 20908., 22016.,
      20156., 21264., 22396., 23552., 18121., 19044., 19985., 20944., 19021.,
      19980., 20957., 21952., 18676., 19712., 20772., 21856., 19780., 20864.,
      21972., 23104., 15365., 16252., 17157., 18080., 16121., 17044., 17985.,
      18944., 13549., 14252., 14973., 15712., 9473.,  10132., 10809., 11504.,
      10373., 11068., 11781., 12512., 14932., 15872., 16836., 17824., 16036.,
      17024., 18036., 19072., 7773.,  8396.,  9037.,  9696.,  8529.,  9188.,
      9865.,  10560., 9285.,  9980.,  10693., 11424., 15673., 16580., 17505.,
      18448., 16573., 17516., 18477., 19456., 18612., 19712., 20836., 21984.,
      19716., 20864., 22036., 23232., 12981., 13852., 14741., 15648., 13737.,
      14644., 15569., 16512., 13853., 14668., 15501., 16352.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5244.,  5760.,  6284.,  6816.,  5356.,  5888.,  6428.,  6976.,  5468.,
      6016.,  6572.,  7136.,  5580.,  6144.,  6716.,  7296.,  5692.,  6272.,
      6860.,  7456.,  5804.,  6400.,  7004.,  7616.,  5916.,  6528.,  7148.,
      7776.,  6812.,  7552.,  8300.,  9056.,  6924.,  7680.,  8444.,  9216.,
      7036.,  7808.,  8588.,  9376.,  7148.,  7936.,  8732.,  9536.,  7260.,
      8064.,  8876.,  9696.,  7372.,  8192.,  9020.,  9856.,  7484.,  8320.,
      9164.,  10016., 8380.,  9344.,  10316., 11296., 8492.,  9472.,  10460.,
      11456., 8604.,  9600.,  10604., 11616., 8716.,  9728.,  10748., 11776.,
      8828.,  9856.,  10892., 11936., 8940.,  9984.,  11036., 12096., 9052.,
      10112., 11180., 12256., 9948.,  11136., 12332., 13536., 10060., 11264.,
      12476., 13696., 10172., 11392., 12620., 13856., 10284., 11520., 12764.,
      14016., 10396., 11648., 12908., 14176., 10508., 11776., 13052., 14336.,
      10620., 11904., 13196., 14496., 11516., 12928., 14348., 15776., 11628.,
      13056., 14492., 15936., 11740., 13184., 14636., 16096., 11852., 13312.,
      14780., 16256., 11964., 13440., 14924., 16416., 12076., 13568., 15068.,
      16576., 12188., 13696., 15212., 16736., 13084., 14720., 16364., 18016.,
      13196., 14848., 16508., 18176., 13308., 14976., 16652., 18336., 13420.,
      15104., 16796., 18496., 13532., 15232., 16940., 18656., 13644., 15360.,
      17084., 18816., 13756., 15488., 17228., 18976., 14652., 16512., 18380.,
      20256., 14764., 16640., 18524., 20416., 14876., 16768., 18668., 20576.,
      14988., 16896., 18812., 20736., 15100., 17024., 18956., 20896., 15212.,
      17152., 19100., 21056., 15324., 17280., 19244., 21216.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10753., 11058., 11726., 12040., 12735., 13058., 13780., 14112., 12133.,
      12474., 13178., 13528., 14259., 14618., 15376., 15744., 9916.,  10216.,
      10952., 11264., 12036., 12360., 13168., 13504., 11564., 11912., 12696.,
      13056., 13876., 14248., 15104., 15488., 8313.,  8618.,  9214.,  9528.,
      10151., 10474., 11124., 11456., 9405.,  9746.,  10378., 10728., 11387.,
      11746., 12432., 12800., 5185.,  5370.,  5846.,  6040.,  6543.,  6746.,
      7276.,  7488.,  7993.,  8226.,  8822.,  9064.,  9687.,  9938.,  10588.,
      10848., 9373.,  9642.,  10274., 10552., 11211., 11498., 12184., 12480.,
      13468., 13864., 14696., 15104., 15972., 16392., 17296., 17728., 15116.,
      15560., 16440., 16896., 17812., 18280., 19232., 19712., 6129.,  6362.,
      6886.,  7128.,  7679.,  7930.,  8508.,  8768.,  7221.,  7490.,  8050.,
      8328.,  8915.,  9202.,  9816.,  10112., 8313.,  8618.,  9214.,  9528.,
      10151., 10474., 11124., 11456., 13036., 13400., 14184., 14560., 15380.,
      15768., 16624., 17024., 14620., 15032., 15864., 16288., 17156., 17592.,
      18496., 18944., 12112., 12512., 13408., 13824., 14768., 15200., 16192.,
      16640., 13968., 14432., 15392., 15872., 16880., 17376., 18432., 18944.,
      10124., 10488., 11176., 11552., 12276., 12664., 13424., 13824., 11324.,
      11736., 12472., 12896., 13668., 14104., 14912., 15360., 7276.,  7608.,
      8264.,  8608.,  9300.,  9656.,  10384., 10752., 9868.,  10136., 10824.,
      11104., 11828., 12120., 12880., 13184., 11452., 11768., 12504., 12832.,
      13604., 13944., 14752., 15104., 14800., 15328., 16352., 16896., 17968.,
      18528., 19648., 20224., 16656., 17248., 18336., 18944., 20080., 20704.,
      21888., 22528., 7724.,  7992.,  8584.,  8864.,  9492.,  9784.,  10448.,
      10752., 8924.,  9240.,  9880.,  10208., 10884., 11224., 11936., 12288.,
      10124., 10488., 11176., 11552., 12276., 12664., 13424., 13824., 8865.,
      9170.,  9742.,  10056., 10655., 10978., 11604., 11936., 9861.,  10202.,
      10810., 11160., 11795., 12154., 12816., 13184., 6716.,  7016.,  7624.,
      7936.,  8580.,  8904.,  9584.,  9920.,  7852.,  8200.,  8856.,  9216.,
      9908.,  10280., 11008., 11392., 6425.,  6730.,  7230.,  7544.,  8071.,
      8394.,  8948.,  9280.,  7133.,  7474.,  8010.,  8360.,  8923.,  9282.,
      9872.,  10240., 4577.,  4762.,  5142.,  5336.,  5743.,  5946.,  6380.,
      6592.,  6873.,  7106.,  7606.,  7848.,  8375.,  8626.,  9180.,  9440.,
      7869.,  8138.,  8674.,  8952.,  9515.,  9802.,  10392., 10688., 9244.,
      9640.,  10344., 10752., 11492., 11912., 12688., 13120., 10380., 10824.,
      11576., 12032., 12820., 13288., 14112., 14592., 5009.,  5242.,  5670.,
      5912.,  6367.,  6618.,  7100.,  7360.,  5717.,  5986.,  6450.,  6728.,
      7219.,  7506.,  8024.,  8320.,  6425.,  6730.,  7230.,  7544.,  8071.,
      8394.,  8948.,  9280.,  7057.,  7346.,  7902.,  8200.,  8783.,  9090.,
      9700.,  10016., 8053.,  8378.,  8970.,  9304.,  9923.,  10266., 10912.,
      11264., 6972.,  7272.,  7880.,  8192.,  8836.,  9160.,  9840.,  10176.,
      8108.,  8456.,  9112.,  9472.,  10164., 10536., 11264., 11648., 4745.,
      5034.,  5518.,  5816.,  6327.,  6634.,  7172.,  7488.,  5453.,  5778.,
      6298.,  6632.,  7179.,  7522.,  8096.,  8448.,  5009.,  5242.,  5670.,
      5912.,  6367.,  6618.,  7100.,  7360.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10004., 10488., 11032., 11520., 12076., 12568., 13136., 13632., 10212.,
      10712., 11272., 11776., 12348., 12856., 13440., 13952., 10420., 10936.,
      11512., 12032., 12620., 13144., 13744., 14272., 10628., 11160., 11752.,
      12288., 12892., 13432., 14048., 14592., 10836., 11384., 11992., 12544.,
      13164., 13720., 14352., 14912., 11044., 11608., 12232., 12800., 13436.,
      14008., 14656., 15232., 11252., 11832., 12472., 13056., 13708., 14296.,
      14960., 15552., 12916., 13624., 14392., 15104., 15884., 16600., 17392.,
      18112., 13124., 13848., 14632., 15360., 16156., 16888., 17696., 18432.,
      13332., 14072., 14872., 15616., 16428., 17176., 18000., 18752., 13540.,
      14296., 15112., 15872., 16700., 17464., 18304., 19072., 13748., 14520.,
      15352., 16128., 16972., 17752., 18608., 19392., 13956., 14744., 15592.,
      16384., 17244., 18040., 18912., 19712., 14164., 14968., 15832., 16640.,
      17516., 18328., 19216., 20032., 15828., 16760., 17752., 18688., 19692.,
      20632., 21648., 22592., 16036., 16984., 17992., 18944., 19964., 20920.,
      21952., 22912., 16244., 17208., 18232., 19200., 20236., 21208., 22256.,
      23232., 16452., 17432., 18472., 19456., 20508., 21496., 22560., 23552.,
      16660., 17656., 18712., 19712., 20780., 21784., 22864., 23872., 16868.,
      17880., 18952., 19968., 21052., 22072., 23168., 24192., 17076., 18104.,
      19192., 20224., 21324., 22360., 23472., 24512., 18740., 19896., 21112.,
      22272., 23500., 24664., 25904., 27072., 18948., 20120., 21352., 22528.,
      23772., 24952., 26208., 27392., 19156., 20344., 21592., 22784., 24044.,
      25240., 26512., 27712., 19364., 20568., 21832., 23040., 24316., 25528.,
      26816., 28032., 19572., 20792., 22072., 23296., 24588., 25816., 27120.,
      28352., 19780., 21016., 22312., 23552., 24860., 26104., 27424., 28672.,
      19988., 21240., 22552., 23808., 25132., 26392., 27728., 28992., 21652.,
      23032., 24472., 25856., 27308., 28696., 30160., 31552., 21860., 23256.,
      24712., 26112., 27580., 28984., 30464., 31872., 22068., 23480., 24952.,
      26368., 27852., 29272., 30768., 32192., 22276., 23704., 25192., 26624.,
      28124., 29560., 31072., 32512., 22484., 23928., 25432., 26880., 28396.,
      29848., 31376., 32832., 22692., 24152., 25672., 27136., 28668., 30136.,
      31680., 33152., 22900., 24376., 25912., 27392., 28940., 30424., 31984.,
      33472., 24564., 26168., 27832., 29440., 31116., 32728., 34416., 36032.,
      24772., 26392., 28072., 29696., 31388., 33016., 34720., 36352., 24980.,
      26616., 28312., 29952., 31660., 33304., 35024., 36672., 25188., 26840.,
      28552., 30208., 31932., 33592., 35328., 36992., 25396., 27064., 28792.,
      30464., 32204., 33880., 35632., 37312., 25604., 27288., 29032., 30720.,
      32476., 34168., 35936., 37632., 25812., 27512., 29272., 30976., 32748.,
      34456., 36240., 37952., 27476., 29304., 31192., 33024., 34924., 36760.,
      38672., 40512., 27684., 29528., 31432., 33280., 35196., 37048., 38976.,
      40832., 27892., 29752., 31672., 33536., 35468., 37336., 39280., 41152.,
      28100., 29976., 31912., 33792., 35740., 37624., 39584., 41472., 28308.,
      30200., 32152., 34048., 36012., 37912., 39888., 41792., 28516., 30424.,
      32392., 34304., 36284., 38200., 40192., 42112., 28724., 30648., 32632.,
      34560., 36556., 38488., 40496., 42432.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME1x14x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9553.,  9858.,  10163., 10468., 11106., 11420., 11734., 12048., 12731.,
      13054., 13377., 13700., 14428., 14760., 15092., 15424., 10741., 11082.,
      11423., 11764., 12438., 12788., 13138., 13488., 14207., 14566., 14925.,
      15284., 16048., 16416., 16784., 17152., 6732.,  7032.,  7332.,  7632.,
      8280.,  8592.,  8904.,  9216.,  9924.,  10248., 10572., 10896., 11664.,
      12000., 12336., 12672., 7932.,  8280.,  8628.,  8976.,  9672.,  10032.,
      10392., 10752., 11508., 11880., 12252., 12624., 13440., 13824., 14208.,
      14592., 4673.,  4978.,  5283.,  5588.,  6082.,  6396.,  6710.,  7024.,
      7563.,  7886.,  8209.,  8532.,  9116.,  9448.,  9780.,  10112., 5285.,
      5626.,  5967.,  6308.,  6838.,  7188.,  7538.,  7888.,  8463.,  8822.,
      9181.,  9540.,  10160., 10528., 10896., 11264., 3657.,  3842.,  4027.,
      4212.,  4586.,  4780.,  4974.,  5168.,  5587.,  5790.,  5993.,  6196.,
      6660.,  6872.,  7084.,  7296.,  7177.,  7410.,  7643.,  7876.,  8442.,
      8684.,  8926.,  9168.,  9779.,  10030., 10281., 10532., 11188., 11448.,
      11708., 11968., 8365.,  8634.,  8903.,  9172.,  9774.,  10052., 10330.,
      10608., 11255., 11542., 11829., 12116., 12808., 13104., 13400., 13696.,
      9644.,  10040., 10436., 10832., 11576., 11984., 12392., 12800., 13604.,
      14024., 14444., 14864., 15728., 16160., 16592., 17024., 10844., 11288.,
      11732., 12176., 12968., 13424., 13880., 14336., 15188., 15656., 16124.,
      16592., 17504., 17984., 18464., 18944., 3449.,  3682.,  3915.,  4148.,
      4570.,  4812.,  5054.,  5296.,  5763.,  6014.,  6265.,  6516.,  7028.,
      7288.,  7548.,  7808.,  4061.,  4330.,  4599.,  4868.,  5326.,  5604.,
      5882.,  6160.,  6663.,  6950.,  7237.,  7524.,  8072.,  8368.,  8664.,
      8960.,  4673.,  4978.,  5283.,  5588.,  6082.,  6396.,  6710.,  7024.,
      7563.,  7886.,  8209.,  8532.,  9116.,  9448.,  9780.,  10112., 12012.,
      12376., 12740., 13104., 13912., 14288., 14664., 15040., 15908., 16296.,
      16684., 17072., 18000., 18400., 18800., 19200., 13596., 14008., 14420.,
      14832., 15688., 16112., 16536., 16960., 17876., 18312., 18748., 19184.,
      20160., 20608., 21056., 21504., 11024., 11424., 11824., 12224., 13088.,
      13504., 13920., 14336., 15280., 15712., 16144., 16576., 17600., 18048.,
      18496., 18944., 12624., 13088., 13552., 14016., 14944., 15424., 15904.,
      16384., 17392., 17888., 18384., 18880., 19968., 20480., 20992., 21504.,
      6188.,  6552.,  6916.,  7280.,  7896.,  8272.,  8648.,  9024.,  9700.,
      10088., 10476., 10864., 11600., 12000., 12400., 12800., 7004.,  7416.,
      7828.,  8240.,  8904.,  9328.,  9752.,  10176., 10900., 11336., 11772.,
      12208., 12992., 13440., 13888., 14336., 5644.,  5976.,  6308.,  6640.,
      7224.,  7568.,  7912.,  8256.,  8900.,  9256.,  9612.,  9968.,  10672.,
      11040., 11408., 11776., 8844.,  9112.,  9380.,  9648.,  10360., 10640.,
      10920., 11200., 11972., 12264., 12556., 12848., 13680., 13984., 14288.,
      14592., 10428., 10744., 11060., 11376., 12136., 12464., 12792., 13120.,
      13940., 14280., 14620., 14960., 15840., 16192., 16544., 16896., 12176.,
      12704., 13232., 13760., 14752., 15296., 15840., 16384., 17456., 18016.,
      18576., 19136., 20288., 20864., 21440., 22016., 13776., 14368., 14960.,
      15552., 16608., 17216., 17824., 18432., 19568., 20192., 20816., 21440.,
      22656., 23296., 23936., 24576., 4556.,  4824.,  5092.,  5360.,  5880.,
      6160.,  6440.,  6720.,  7300.,  7592.,  7884.,  8176.,  8816.,  9120.,
      9424.,  9728.,  5372.,  5688.,  6004.,  6320.,  6888.,  7216.,  7544.,
      7872.,  8500.,  8840.,  9180.,  9520.,  10208., 10560., 10912., 11264.,
      6188.,  6552.,  6916.,  7280.,  7896.,  8272.,  8648.,  9024.,  9700.,
      10088., 10476., 10864., 11600., 12000., 12400., 12800., 9553.,  9858.,
      10163., 10468., 11106., 11420., 11734., 12048., 12731., 13054., 13377.,
      13700., 14428., 14760., 15092., 15424., 10741., 11082., 11423., 11764.,
      12438., 12788., 13138., 13488., 14207., 14566., 14925., 15284., 16048.,
      16416., 16784., 17152., 6732.,  7032.,  7332.,  7632.,  8280.,  8592.,
      8904.,  9216.,  9924.,  10248., 10572., 10896., 11664., 12000., 12336.,
      12672., 7932.,  8280.,  8628.,  8976.,  9672.,  10032., 10392., 10752.,
      11508., 11880., 12252., 12624., 13440., 13824., 14208., 14592., 4673.,
      4978.,  5283.,  5588.,  6082.,  6396.,  6710.,  7024.,  7563.,  7886.,
      8209.,  8532.,  9116.,  9448.,  9780.,  10112., 5285.,  5626.,  5967.,
      6308.,  6838.,  7188.,  7538.,  7888.,  8463.,  8822.,  9181.,  9540.,
      10160., 10528., 10896., 11264., 3657.,  3842.,  4027.,  4212.,  4586.,
      4780.,  4974.,  5168.,  5587.,  5790.,  5993.,  6196.,  6660.,  6872.,
      7084.,  7296.,  7177.,  7410.,  7643.,  7876.,  8442.,  8684.,  8926.,
      9168.,  9779.,  10030., 10281., 10532., 11188., 11448., 11708., 11968.,
      8365.,  8634.,  8903.,  9172.,  9774.,  10052., 10330., 10608., 11255.,
      11542., 11829., 12116., 12808., 13104., 13400., 13696., 9644.,  10040.,
      10436., 10832., 11576., 11984., 12392., 12800., 13604., 14024., 14444.,
      14864., 15728., 16160., 16592., 17024., 10844., 11288., 11732., 12176.,
      12968., 13424., 13880., 14336., 15188., 15656., 16124., 16592., 17504.,
      17984., 18464., 18944., 3449.,  3682.,  3915.,  4148.,  4570.,  4812.,
      5054.,  5296.,  5763.,  6014.,  6265.,  6516.,  7028.,  7288.,  7548.,
      7808.,  4061.,  4330.,  4599.,  4868.,  5326.,  5604.,  5882.,  6160.,
      6663.,  6950.,  7237.,  7524.,  8072.,  8368.,  8664.,  8960.,  4673.,
      4978.,  5283.,  5588.,  6082.,  6396.,  6710.,  7024.,  7563.,  7886.,
      8209.,  8532.,  9116.,  9448.,  9780.,  10112., 9025.,  9314.,  9603.,
      9892.,  10514., 10812., 11110., 11408., 12075., 12382., 12689., 12996.,
      13708., 14024., 14340., 14656., 10213., 10538., 10863., 11188., 11846.,
      12180., 12514., 12848., 13551., 13894., 14237., 14580., 15328., 15680.,
      16032., 16384., 7244.,  7544.,  7844.,  8144.,  8792.,  9104.,  9416.,
      9728.,  10436., 10760., 11084., 11408., 12176., 12512., 12848., 13184.,
      8444.,  8792.,  9140.,  9488.,  10184., 10544., 10904., 11264., 12020.,
      12392., 12764., 13136., 13952., 14336., 14720., 15104., 4401.,  4690.,
      4979.,  5268.,  5746.,  6044.,  6342.,  6640.,  7163.,  7470.,  7777.,
      8084.,  8652.,  8968.,  9284.,  9600.,  5013.,  5338.,  5663.,  5988.,
      6502.,  6836.,  7170.,  7504.,  8063.,  8406.,  8749.,  9092.,  9696.,
      10048., 10400., 10752., 3449.,  3682.,  3915.,  4148.,  4570.,  4812.,
      5054.,  5296.,  5763.,  6014.,  6265.,  6516.,  7028.,  7288.,  7548.,
      7808.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID1x14x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19524., 20008., 20492., 20976., 21576., 22064., 22552., 23040., 23660.,
      24152., 24644., 25136., 25776., 26272., 26768., 27264., 19924., 20424.,
      20924., 21424., 22040., 22544., 23048., 23552., 24188., 24696., 25204.,
      25712., 26368., 26880., 27392., 27904., 20324., 20840., 21356., 21872.,
      22504., 23024., 23544., 24064., 24716., 25240., 25764., 26288., 26960.,
      27488., 28016., 28544., 20724., 21256., 21788., 22320., 22968., 23504.,
      24040., 24576., 25244., 25784., 26324., 26864., 27552., 28096., 28640.,
      29184., 8580.,  8872.,  9164.,  9456.,  9864.,  10160., 10456., 10752.,
      11180., 11480., 11780., 12080., 12528., 12832., 13136., 13440., 8980.,
      9288.,  9596.,  9904.,  10328., 10640., 10952., 11264., 11708., 12024.,
      12340., 12656., 13120., 13440., 13760., 14080., 9380.,  9704.,  10028.,
      10352., 10792., 11120., 11448., 11776., 12236., 12568., 12900., 13232.,
      13712., 14048., 14384., 14720., 4132.,  4328.,  4524.,  4720.,  5032.,
      5232.,  5432.,  5632.,  5964.,  6168.,  6372.,  6576.,  6928.,  7136.,
      7344.,  7552.,  4532.,  4744.,  4956.,  5168.,  5496.,  5712.,  5928.,
      6144.,  6492.,  6712.,  6932.,  7152.,  7520.,  7744.,  7968.,  8192.,
      4932.,  5160.,  5388.,  5616.,  5960.,  6192.,  6424.,  6656.,  7020.,
      7256.,  7492.,  7728.,  8112.,  8352.,  8592.,  8832.,  5332.,  5576.,
      5820.,  6064.,  6424.,  6672.,  6920.,  7168.,  7548.,  7800.,  8052.,
      8304.,  8704.,  8960.,  9216.,  9472.,  5732.,  5992.,  6252.,  6512.,
      6888.,  7152.,  7416.,  7680.,  8076.,  8344.,  8612.,  8880.,  9296.,
      9568.,  9840.,  10112., 6132.,  6408.,  6684.,  6960.,  7352.,  7632.,
      7912.,  8192.,  8604.,  8888.,  9172.,  9456.,  9888.,  10176., 10464.,
      10752., 6532.,  6824.,  7116.,  7408.,  7816.,  8112.,  8408.,  8704.,
      9132.,  9432.,  9732.,  10032., 10480., 10784., 11088., 11392., 9732.,
      10152., 10572., 10992., 11528., 11952., 12376., 12800., 13356., 13784.,
      14212., 14640., 15216., 15648., 16080., 16512., 10132., 10568., 11004.,
      11440., 11992., 12432., 12872., 13312., 13884., 14328., 14772., 15216.,
      15808., 16256., 16704., 17152., 10532., 10984., 11436., 11888., 12456.,
      12912., 13368., 13824., 14412., 14872., 15332., 15792., 16400., 16864.,
      17328., 17792., 10932., 11400., 11868., 12336., 12920., 13392., 13864.,
      14336., 14940., 15416., 15892., 16368., 16992., 17472., 17952., 18432.,
      11332., 11816., 12300., 12784., 13384., 13872., 14360., 14848., 15468.,
      15960., 16452., 16944., 17584., 18080., 18576., 19072., 11732., 12232.,
      12732., 13232., 13848., 14352., 14856., 15360., 15996., 16504., 17012.,
      17520., 18176., 18688., 19200., 19712., 12132., 12648., 13164., 13680.,
      14312., 14832., 15352., 15872., 16524., 17048., 17572., 18096., 18768.,
      19296., 19824., 20352., 15332., 15976., 16620., 17264., 18024., 18672.,
      19320., 19968., 20748., 21400., 22052., 22704., 23504., 24160., 24816.,
      25472., 15732., 16392., 17052., 17712., 18488., 19152., 19816., 20480.,
      21276., 21944., 22612., 23280., 24096., 24768., 25440., 26112., 16132.,
      16808., 17484., 18160., 18952., 19632., 20312., 20992., 21804., 22488.,
      23172., 23856., 24688., 25376., 26064., 26752., 16532., 17224., 17916.,
      18608., 19416., 20112., 20808., 21504., 22332., 23032., 23732., 24432.,
      25280., 25984., 26688., 27392., 16932., 17640., 18348., 19056., 19880.,
      20592., 21304., 22016., 22860., 23576., 24292., 25008., 25872., 26592.,
      27312., 28032., 17332., 18056., 18780., 19504., 20344., 21072., 21800.,
      22528., 23388., 24120., 24852., 25584., 26464., 27200., 27936., 28672.,
      17732., 18472., 19212., 19952., 20808., 21552., 22296., 23040., 23916.,
      24664., 25412., 26160., 27056., 27808., 28560., 29312., 20932., 21800.,
      22668., 23536., 24520., 25392., 26264., 27136., 28140., 29016., 29892.,
      30768., 31792., 32672., 33552., 34432., 21332., 22216., 23100., 23984.,
      24984., 25872., 26760., 27648., 28668., 29560., 30452., 31344., 32384.,
      33280., 34176., 35072., 21732., 22632., 23532., 24432., 25448., 26352.,
      27256., 28160., 29196., 30104., 31012., 31920., 32976., 33888., 34800.,
      35712., 22132., 23048., 23964., 24880., 25912., 26832., 27752., 28672.,
      29724., 30648., 31572., 32496., 33568., 34496., 35424., 36352., 18180.,
      18856., 19532., 20208., 21000., 21680., 22360., 23040., 23852., 24536.,
      25220., 25904., 26736., 27424., 28112., 28800., 18580., 19272., 19964.,
      20656., 21464., 22160., 22856., 23552., 24380., 25080., 25780., 26480.,
      27328., 28032., 28736., 29440., 18980., 19688., 20396., 21104., 21928.,
      22640., 23352., 24064., 24908., 25624., 26340., 27056., 27920., 28640.,
      29360., 30080., 9380.,  9704.,  10028., 10352., 10792., 11120., 11448.,
      11776., 12236., 12568., 12900., 13232., 13712., 14048., 14384., 14720.,
      9780.,  10120., 10460., 10800., 11256., 11600., 11944., 12288., 12764.,
      13112., 13460., 13808., 14304., 14656., 15008., 15360., 1732.,  1832.,
      1932.,  2032.,  2248.,  2352.,  2456.,  2560.,  2796.,  2904.,  3012.,
      3120.,  3376.,  3488.,  3600.,  3712.,  2132.,  2248.,  2364.,  2480.,
      2712.,  2832.,  2952.,  3072.,  3324.,  3448.,  3572.,  3696.,  3968.,
      4096.,  4224.,  4352.,  2532.,  2664.,  2796.,  2928.,  3176.,  3312.,
      3448.,  3584.,  3852.,  3992.,  4132.,  4272.,  4560.,  4704.,  4848.,
      4992.,  2932.,  3080.,  3228.,  3376.,  3640.,  3792.,  3944.,  4096.,
      4380.,  4536.,  4692.,  4848.,  5152.,  5312.,  5472.,  5632.,  3332.,
      3496.,  3660.,  3824.,  4104.,  4272.,  4440.,  4608.,  4908.,  5080.,
      5252.,  5424.,  5744.,  5920.,  6096.,  6272.,  6532.,  6824.,  7116.,
      7408.,  7816.,  8112.,  8408.,  8704.,  9132.,  9432.,  9732.,  10032.,
      10480., 10784., 11088., 11392., 6932.,  7240.,  7548.,  7856.,  8280.,
      8592.,  8904.,  9216.,  9660.,  9976.,  10292., 10608., 11072., 11392.,
      11712., 12032., 7332.,  7656.,  7980.,  8304.,  8744.,  9072.,  9400.,
      9728.,  10188., 10520., 10852., 11184., 11664., 12000., 12336., 12672.,
      7732.,  8072.,  8412.,  8752.,  9208.,  9552.,  9896.,  10240., 10716.,
      11064., 11412., 11760., 12256., 12608., 12960., 13312., 8132.,  8488.,
      8844.,  9200.,  9672.,  10032., 10392., 10752., 11244., 11608., 11972.,
      12336., 12848., 13216., 13584., 13952., 8532.,  8904.,  9276.,  9648.,
      10136., 10512., 10888., 11264., 11772., 12152., 12532., 12912., 13440.,
      13824., 14208., 14592., 8932.,  9320.,  9708.,  10096., 10600., 10992.,
      11384., 11776., 12300., 12696., 13092., 13488., 14032., 14432., 14832.,
      15232.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16160., 16352., 23508., 23787., 24066., 15324., 15504., 18272., 18464.,
      26577., 26856., 27135., 17304., 17484., 33440., 33701., 48678., 49056.,
      49434., 31647., 31890., 30935., 26076., 42340., 42718., 43096., 24336.,
      24579., 28686., 28947., 41634., 42012., 42390., 27009., 27252., 14828.,
      14984., 21411., 21636., 21861., 13824., 13968., 16544., 16700., 23886.,
      24111., 24336., 15408., 15552.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15536., 15614., 15692., 15770., 15848., 15926., 16004., 16394., 16472.,
      16550., 16628., 16706., 16784., 16862., 17252., 17330., 17408., 17486.,
      17564., 17642., 17720., 18110., 18188., 18266., 18344., 18422., 18500.,
      18578., 18968., 19046., 19124., 19202., 19280., 19358., 19436., 19826.,
      19904., 19982., 20060., 20138., 20216., 20294., 20684., 20762., 20840.,
      20918., 20996., 21074., 21152.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15432., 15936., 15804., 16320., 22452., 23208., 22992., 23766., 23532.,
      24324., 14772., 15288., 15120., 15648., 19524., 20160., 19896., 20544.,
      28392., 29346., 28932., 29904., 29472., 30462., 18600., 19248., 18948.,
      19608., 38732., 40000., 36292., 37450., 53342., 55116., 54071., 55872.,
      54800., 56628., 33976., 35134., 34444., 35620., 33396., 34478., 28908.,
      29880., 46001., 47560., 46730., 48316., 47459., 49072., 26964., 27936.,
      27432., 28422., 33948., 35100., 34452., 35622., 49284., 51012., 50013.,
      51768., 50742., 52524., 32112., 33282., 32580., 33768., 15708., 16344.,
      16008., 16656., 22668., 23622., 23100., 24072., 23532., 24522., 14712.,
      15360., 14988., 15648., 19008., 19776., 19308., 20088., 27420., 28572.,
      27852., 29022., 28284., 29472., 17748., 18528., 18024., 18816.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29320., 31072., 29464., 31228., 29608., 31384., 29752., 31540., 29896.,
      31696., 30040., 31852., 30184., 32008., 30904., 32788., 31048., 32944.,
      31192., 33100., 31336., 33256., 31480., 33412., 31624., 33568., 31768.,
      33724., 32488., 34504., 32632., 34660., 32776., 34816., 32920., 34972.,
      33064., 35128., 33208., 35284., 33352., 35440., 34072., 36220., 34216.,
      36376., 34360., 36532., 34504., 36688., 34648., 36844., 34792., 37000.,
      34936., 37156., 35656., 37936., 35800., 38092., 35944., 38248., 36088.,
      38404., 36232., 38560., 36376., 38716., 36520., 38872., 37240., 39652.,
      37384., 39808., 37528., 39964., 37672., 40120., 37816., 40276., 37960.,
      40432., 38104., 40588., 38824., 41368., 38968., 41524., 39112., 41680.,
      39256., 41836., 39400., 41992., 39544., 42148., 39688., 42304.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8920.,  9232.,  9544.,  9856.,  9268.,  9592.,  9916.,  10240., 16372.,
      16872., 17372., 17872., 16858., 17312., 17766., 18220., 17408., 17880.,
      18352., 18824., 12004., 12328., 12652., 12976., 12368., 12704., 13040.,
      13376., 7692.,  7944.,  8196.,  8448.,  8040.,  8304.,  8568.,  8832.,
      13462., 13904., 14346., 14788., 11900., 12296., 12692., 13088., 12450.,
      12864., 13278., 13692., 7624.,  7888.,  8152.,  8416.,  7988.,  8264.,
      8540.,  8816.,  18596., 19224., 19852., 20480., 16194., 16776., 17358.,
      17940., 24462., 25340., 26218., 27096., 25189., 26094., 26999., 27904.,
      25916., 26848., 27780., 28712., 15210., 15792., 16374., 16956., 15680.,
      16280., 16880., 17480., 17262., 17896., 18530., 19164., 16908., 17496.,
      18084., 18672., 25547., 26466., 27385., 28304., 24930., 25812., 26694.,
      27576., 25657., 26566., 27475., 28384., 16604., 17192., 17780., 18368.,
      17074., 17680., 18286., 18892., 15608., 16184., 16760., 17336., 16086.,
      16680., 17274., 17868., 26056., 26952., 27848., 28744., 23391., 24250.,
      25109., 25968., 24118., 25004., 25890., 26776., 16462., 17056., 17650.,
      18244., 16932., 17544., 18156., 18768., 6076.,  6328.,  6580.,  6832.,
      6408.,  6672.,  6936.,  7200.,  9822.,  10264., 10706., 11148., 8940.,
      9336.,  9732.,  10128., 9402.,  9816.,  10230., 10644., 5352.,  5616.,
      5880.,  6144.,  5636.,  5912.,  6188.,  6464.,  9728.,  10112., 10496.,
      10880., 10060., 10456., 10852., 11248., 13560., 14136., 14712., 15288.,
      14022., 14616., 15210., 15804., 14484., 15096., 15708., 16320., 8476.,
      8872.,  9268.,  9664.,  8760.,  9168.,  9576.,  9984.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      34872., 36112., 37352., 38592., 35148., 36400., 37652., 38904., 35424.,
      36688., 37952., 39216., 35700., 36976., 38252., 39528., 35976., 37264.,
      38552., 39840., 36252., 37552., 38852., 40152., 36528., 37840., 39152.,
      40464., 28436., 29552., 30668., 31784., 28712., 29840., 30968., 32096.,
      28988., 30128., 31268., 32408., 20816., 21712., 22608., 23504., 21092.,
      22000., 22908., 23816., 21368., 22288., 23208., 24128., 21644., 22576.,
      23508., 24440., 23024., 24016., 25008., 26000., 23300., 24304., 25308.,
      26312., 23576., 24592., 25608., 26624., 23852., 24880., 25908., 26936.,
      24128., 25168., 26208., 27248., 24404., 25456., 26508., 27560., 24680.,
      25744., 26808., 27872., 26060., 27184., 28308., 29432., 26336., 27472.,
      28608., 29744., 26612., 27760., 28908., 30056., 26888., 28048., 29208.,
      30368., 27164., 28336., 29508., 30680., 27440., 28624., 29808., 30992.,
      27716., 28912., 30108., 31304., 29096., 30352., 31608., 32864., 29372.,
      30640., 31908., 33176., 29648., 30928., 32208., 33488., 29924., 31216.,
      32508., 33800., 30200., 31504., 32808., 34112., 30476., 31792., 33108.,
      34424., 30752., 32080., 33408., 34736., 32132., 33520., 34908., 36296.,
      32408., 33808., 35208., 36608., 32684., 34096., 35508., 36920., 32960.,
      34384., 35808., 37232., 33236., 34672., 36108., 37544., 33512., 34960.,
      36408., 37856., 33788., 35248., 36708., 38168., 35168., 36688., 38208.,
      39728., 35444., 36976., 38508., 40040., 35720., 37264., 38808., 40352.,
      35996., 37552., 39108., 40664., 36272., 37840., 39408., 40976., 36548.,
      38128., 39708., 41288., 36824., 38416., 40008., 41600.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21916., 22912., 22660., 23680., 34124., 35664., 30980., 32428., 32060.,
      33544., 21388., 22384., 22084., 23104., 12564., 13440., 13308., 14208.,
      24500., 25924., 19308., 20640., 20388., 21756., 12276., 13152., 12972.,
      13872., 34976., 36736., 33040., 34708., 47843., 50328., 49301., 51840.,
      50759., 53352., 30748., 32380., 31684., 33352., 35184., 36956., 31200.,
      32880., 48521., 51088., 48571., 51064., 50029., 52576., 28884., 30528.,
      29820., 31500., 35008., 36664., 36016., 37708., 52655., 55176., 50657.,
      53104., 52115., 54616., 33676., 35332., 34612., 36304., 9612.,  10416.,
      10212., 11040., 19304., 20620., 14664., 15888., 15528., 16788., 9180.,
      9984.,  9732.,  10560., 16212., 17280., 16812., 17904., 23304., 24888.,
      24168., 25788., 25032., 26688., 15252., 16320., 15804., 16896.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35968., 38592., 36256., 38904., 36544., 39216., 36832., 39528., 37120.,
      39840., 37408., 40152., 37696., 40464., 29408., 31784., 29696., 32096.,
      29984., 32408., 21568., 23504., 21856., 23816., 22144., 24128., 22432.,
      24440., 23872., 26000., 24160., 26312., 24448., 26624., 24736., 26936.,
      25024., 27248., 25312., 27560., 25600., 27872., 27040., 29432., 27328.,
      29744., 27616., 30056., 27904., 30368., 28192., 30680., 28480., 30992.,
      28768., 31304., 30208., 32864., 30496., 33176., 30784., 33488., 31072.,
      33800., 31360., 34112., 31648., 34424., 31936., 34736., 33376., 36296.,
      33664., 36608., 33952., 36920., 34240., 37232., 34528., 37544., 34816.,
      37856., 35104., 38168., 36544., 39728., 36832., 40040., 37120., 40352.,
      37408., 40664., 37696., 40976., 37984., 41288., 38272., 41600.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12436., 12856., 13648., 14080., 13132., 13576., 14392., 14848., 21122.,
      21784., 23032., 23712., 22158., 22792., 24012., 24664., 21914., 22520.,
      23712., 24336., 15260., 15704., 16536., 16992., 15988., 16456., 17312.,
      17792., 8956.,  9256.,  9928.,  10240., 9652.,  9976.,  10672., 11008.,
      17350., 17896., 19028., 19592., 16338., 16856., 17960., 18496., 14046.,
      14536., 15612., 16120., 9572.,  9896.,  10608., 10944., 10300., 10648.,
      11384., 11744., 16362., 16960., 18072., 18688., 14438., 15008., 16092.,
      16680., 21701., 22534., 24148., 25008., 23155., 24042., 25710., 26624.,
      23265., 24142., 25800., 26704., 14782., 15352., 16428., 17016., 13866.,
      14408., 15456., 16016., 15998., 16608., 17732., 18360., 16122., 16704.,
      17800., 18400., 25599., 26450., 28082., 28960., 25709., 26550., 28172.,
      29040., 27163., 28058., 29734., 30656., 17826., 18408., 19496., 20096.,
      14862., 15416., 16476., 17048., 14546., 15104., 16176., 16752., 15502.,
      16096., 17204., 17816., 23097., 23966., 25616., 26512., 21159., 22018.,
      23658., 24544., 22037., 22886., 24516., 25392., 14470., 15064., 16164.,
      16776., 15410., 16040., 17176., 17824., 8044.,  8344.,  9000.,  9312.,
      8708.,  9032.,  9712.,  10048., 13998., 14544., 15588., 16152., 13578.,
      14096., 15112., 15648., 11878., 12368., 13356., 13864., 7412.,  7736.,
      8368.,  8704.,  7980.,  8328.,  8984.,  9344.,  10804., 11176., 11904.,
      12288., 11468., 11864., 12616., 13024., 14562., 15120., 16176., 16752.,
      15486., 16080., 17172., 17784., 15834., 16400., 17464., 18048., 9884.,
      10280., 10984., 11392., 9364.,  9720.,  10384., 10752.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37724., 39168., 40912., 42368., 38276., 39744., 41512., 42992., 38828.,
      40320., 42112., 43616., 34004., 35264., 36824., 38096., 34556., 35840.,
      37424., 38720., 35108., 36416., 38024., 39344., 35660., 36992., 38624.,
      39968., 24596., 25536., 26776., 27728., 25148., 26112., 27376., 28352.,
      25700., 26688., 27976., 28976., 17804., 18560., 19616., 20384., 18356.,
      19136., 20216., 21008., 18908., 19712., 20816., 21632., 19460., 20288.,
      21416., 22256., 22220., 23168., 24416., 25376., 22772., 23744., 25016.,
      26000., 23324., 24320., 25616., 26624., 23876., 24896., 26216., 27248.,
      24428., 25472., 26816., 27872., 24980., 26048., 27416., 28496., 25532.,
      26624., 28016., 29120., 28292., 29504., 31016., 32240., 28844., 30080.,
      31616., 32864., 29396., 30656., 32216., 33488., 29948., 31232., 32816.,
      34112., 30500., 31808., 33416., 34736., 31052., 32384., 34016., 35360.,
      31604., 32960., 34616., 35984., 34364., 35840., 37616., 39104., 34916.,
      36416., 38216., 39728., 35468., 36992., 38816., 40352., 36020., 37568.,
      39416., 40976., 36572., 38144., 40016., 41600., 37124., 38720., 40616.,
      42224., 37676., 39296., 41216., 42848., 40436., 42176., 44216., 45968.,
      40988., 42752., 44816., 46592., 41540., 43328., 45416., 47216., 42092.,
      43904., 46016., 47840., 42644., 44480., 46616., 48464., 43196., 45056.,
      47216., 49088., 43748., 45632., 47816., 49712., 46508., 48512., 50816.,
      52832., 47060., 49088., 51416., 53456., 47612., 49664., 52016., 54080.,
      48164., 50240., 52616., 54704., 48716., 50816., 53216., 55328., 49268.,
      51392., 53816., 55952., 49820., 51968., 54416., 56576.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12100., 12520., 12940., 13360., 14192., 14624., 15056., 15488., 12828.,
      13272., 13716., 14160., 15016., 15472., 15928., 16384., 19822., 20484.,
      21146., 21808., 23112., 23792., 24472., 25152., 20898., 21532., 22166.,
      22800., 24076., 24728., 25380., 26032., 19414., 20020., 20626., 21232.,
      22480., 23104., 23728., 24352., 14396., 14840., 15284., 15728., 16616.,
      17072., 17528., 17984., 15188., 15656., 16124., 16592., 17504., 17984.,
      18464., 18944., 10508., 10808., 11108., 11408., 12120., 12432., 12744.,
      13056., 11236., 11560., 11884., 12208., 12944., 13280., 13616., 13952.,
      17514., 18060., 18606., 19152., 20340., 20904., 21468., 22032., 18590.,
      19108., 19626., 20144., 21304., 21840., 22376., 22912., 17106., 17596.,
      18086., 18576., 19708., 20216., 20724., 21232., 12484., 12808., 13132.,
      13456., 14224., 14560., 14896., 15232., 13276., 13624., 13972., 14320.,
      15112., 15472., 15832., 16192., 14526., 15124., 15722., 16320., 17480.,
      18096., 18712., 19328., 13906., 14476., 15046., 15616., 16748., 17336.,
      17924., 18512., 23817., 24650., 25483., 26316., 27980., 28840., 29700.,
      30560., 25263., 26150., 27037., 27924., 29642., 30556., 31470., 32384.,
      24085., 24962., 25839., 26716., 28424., 29328., 30232., 31136., 16002.,
      16572., 17142., 17712., 18828., 19416., 20004., 20592., 13302., 13844.,
      14386., 14928., 16016., 16576., 17136., 17696., 16218., 16828., 17438.,
      18048., 19220., 19848., 20476., 21104., 15598., 16180., 16762., 17344.,
      18488., 19088., 19688., 20288., 24299., 25150., 26001., 26852., 28534.,
      29412., 30290., 31168., 23121., 23962., 24803., 25644., 27316., 28184.,
      29052., 29920., 24567., 25462., 26357., 27252., 28978., 29900., 30822.,
      31744., 16318., 16900., 17482., 18064., 19192., 19792., 20392., 20992.,
      13618., 14172., 14726., 15280., 16380., 16952., 17524., 18096., 15798.,
      16356., 16914., 17472., 18592., 19168., 19744., 20320., 16778., 17372.,
      17966., 18560., 19716., 20328., 20940., 21552., 24269., 25138., 26007.,
      26876., 28576., 29472., 30368., 31264., 23091., 23950., 24809., 25668.,
      27358., 28244., 29130., 30016., 23449., 24298., 25147., 25996., 27676.,
      28552., 29428., 30304., 16122., 16716., 17310., 17904., 19044., 19656.,
      20268., 20880., 17070., 17700., 18330., 18960., 20136., 20784., 21432.,
      22080., 9388.,  9688.,  9988.,  10288., 11032., 11344., 11656., 11968.,
      10180., 10504., 10828., 11152., 11920., 12256., 12592., 12928., 15802.,
      16348., 16894., 17440., 18580., 19144., 19708., 20272., 14222., 14740.,
      15258., 15776., 16888., 17424., 17960., 18496., 14178., 14668., 15158.,
      15648., 16732., 17240., 17748., 18256., 7588.,  7912.,  8236.,  8560.,
      9232.,  9568.,  9904.,  10240., 8188.,  8536.,  8884.,  9232.,  9928.,
      10288., 10648., 11008., 13300., 13672., 14044., 14416., 15232., 15616.,
      16000., 16384., 14092., 14488., 14884., 15280., 16120., 16528., 16936.,
      17344., 16662., 17220., 17778., 18336., 19488., 20064., 20640., 21216.,
      17706., 18300., 18894., 19488., 20676., 21288., 21900., 22512., 17662.,
      18228., 18794., 19360., 20520., 21104., 21688., 22272., 10924., 11320.,
      11716., 12112., 12856., 13264., 13672., 14080., 9412.,  9768.,  10124.,
      10480., 11184., 11552., 11920., 12288.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      46868., 47800., 48732., 49664., 51184., 52128., 53072., 54016., 47948.,
      48904., 49860., 50816., 52360., 53328., 54296., 55264., 49028., 50008.,
      50988., 51968., 53536., 54528., 55520., 56512., 44860., 45736., 46612.,
      47488., 48952., 49840., 50728., 51616., 45940., 46840., 47740., 48640.,
      50128., 51040., 51952., 52864., 47020., 47944., 48868., 49792., 51304.,
      52240., 53176., 54112., 48100., 49048., 49996., 50944., 52480., 53440.,
      54400., 55360., 39932., 40744., 41556., 42368., 43768., 44592., 45416.,
      46240., 41012., 41848., 42684., 43520., 44944., 45792., 46640., 47488.,
      42092., 42952., 43812., 44672., 46120., 46992., 47864., 48736., 34852.,
      35608., 36364., 37120., 38464., 39232., 40000., 40768., 35932., 36712.,
      37492., 38272., 39640., 40432., 41224., 42016., 33812., 34488., 35164.,
      35840., 37104., 37792., 38480., 39168., 34892., 35592., 36292., 36992.,
      38280., 38992., 39704., 40416., 38116., 38808., 39500., 40192., 41472.,
      42176., 42880., 43584., 31900., 32488., 33076., 33664., 34840., 35440.,
      36040., 36640., 32980., 33592., 34204., 34816., 36016., 36640., 37264.,
      37888., 34060., 34696., 35332., 35968., 37192., 37840., 38488., 39136.,
      35140., 35800., 36460., 37120., 38368., 39040., 39712., 40384., 29948.,
      30504., 31060., 31616., 32760., 33328., 33896., 34464., 31028., 31608.,
      32188., 32768., 33936., 34528., 35120., 35712., 25036., 25608., 26180.,
      26752., 27912., 28496., 29080., 29664., 15748., 16216., 16684., 17152.,
      18208., 18688., 19168., 19648., 16828., 17320., 17812., 18304., 19384.,
      19888., 20392., 20896., 17908., 18424., 18940., 19456., 20560., 21088.,
      21616., 22144., 18988., 19528., 20068., 20608., 21736., 22288., 22840.,
      23392., 20068., 20632., 21196., 21760., 22912., 23488., 24064., 24640.,
      21148., 21736., 22324., 22912., 24088., 24688., 25288., 25888., 26548.,
      27256., 27964., 28672., 29968., 30688., 31408., 32128., 27628., 28360.,
      29092., 29824., 31144., 31888., 32632., 33376., 28708., 29464., 30220.,
      30976., 32320., 33088., 33856., 34624., 29788., 30568., 31348., 32128.,
      33496., 34288., 35080., 35872., 30868., 31672., 32476., 33280., 34672.,
      35488., 36304., 37120., 31948., 32776., 33604., 34432., 35848., 36688.,
      37528., 38368., 33028., 33880., 34732., 35584., 37024., 37888., 38752.,
      39616., 38428., 39400., 40372., 41344., 42904., 43888., 44872., 45856.,
      39508., 40504., 41500., 42496., 44080., 45088., 46096., 47104., 40588.,
      41608., 42628., 43648., 45256., 46288., 47320., 48352., 41668., 42712.,
      43756., 44800., 46432., 47488., 48544., 49600., 42748., 43816., 44884.,
      45952., 47608., 48688., 49768., 50848., 42676., 43640., 44604., 45568.,
      47120., 48096., 49072., 50048., 43756., 44744., 45732., 46720., 48296.,
      49296., 50296., 51296., 49028., 50008., 50988., 51968., 53536., 54528.,
      55520., 56512., 44860., 45736., 46612., 47488., 48952., 49840., 50728.,
      51616., 45940., 46840., 47740., 48640., 50128., 51040., 51952., 52864.,
      47020., 47944., 48868., 49792., 51304., 52240., 53176., 54112., 48100.,
      49048., 49996., 50944., 52480., 53440., 54400., 55360., 44956., 45800.,
      46644., 47488., 48920., 49776., 50632., 51488., 46036., 46904., 47772.,
      48640., 50096., 50976., 51856., 52736.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9996.,  10736., 11500., 12288., 11388., 12176., 12988., 13824., 18462.,
      19632., 20838., 22080., 17462., 18576., 19726., 20912., 18318., 19440.,
      20598., 21792., 13324., 14128., 14956., 15808., 13180., 13968., 14780.,
      15616., 8604.,  9296.,  10012., 10752., 8140.,  8816.,  9516.,  10240.,
      16742., 17872., 19038., 20240., 16830., 17968., 19142., 20352., 15318.,
      16400., 17518., 18672., 9244.,  9936.,  10652., 11392., 10700., 11440.,
      12204., 12992., 16502., 17536., 18606., 19712., 15534., 16576., 17654.,
      18768., 21043., 22540., 24091., 25696., 23951., 25556., 27215., 28928.,
      23147., 24732., 26371., 28064., 14438., 15472., 16542., 17648., 13630.,
      14608., 15622., 16672., 15582., 16704., 17862., 19056., 14806., 15872.,
      16974., 18112., 23015., 24612., 26263., 27968., 24259., 25836., 27467.,
      29152., 27167., 28852., 30591., 32384., 16430., 17488., 18582., 19712.,
      14406., 15472., 16574., 17712., 11398., 12416., 13470., 14560., 13310.,
      14400., 15526., 16688., 22619., 24252., 25939., 27680., 19447., 20996.,
      22599., 24256., 20179., 21708., 23291., 24928., 13558., 14640., 15758.,
      16912., 14606., 15696., 16822., 17984., 9868.,  10544., 11244., 11968.,
      10108., 10768., 11452., 12160., 16270., 17312., 18390., 19504., 16774.,
      17824., 18910., 20032., 12350., 13344., 14374., 15440., 8844.,  9456.,
      10092., 10752., 9980.,  10640., 11324., 12032., 9372.,  10064., 10780.,
      11520., 10700., 11440., 12204., 12992., 13238., 14240., 15278., 16352.,
      15086., 16160., 17270., 18416., 14758., 15776., 16830., 17920., 9116.,
      9808.,  10524., 11264., 9100.,  9712.,  10348., 11008.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      47524., 49664., 51828., 54016., 48628., 50816., 53028., 55264., 49732.,
      51968., 54228., 56512., 45460., 47488., 49540., 51616., 46564., 48640.,
      50740., 52864., 47668., 49792., 51940., 54112., 48772., 50944., 53140.,
      55360., 40468., 42368., 44292., 46240., 41572., 43520., 45492., 47488.,
      42676., 44672., 46692., 48736., 35332., 37120., 38932., 40768., 36436.,
      38272., 40132., 42016., 34212., 35840., 37492., 39168., 35316., 36992.,
      38692., 40416., 38532., 40192., 41876., 43584., 32212., 33664., 35140.,
      36640., 33316., 34816., 36340., 37888., 34420., 35968., 37540., 39136.,
      35524., 37120., 38740., 40384., 30228., 31616., 33028., 34464., 31332.,
      32768., 34228., 35712., 25332., 26752., 28196., 29664., 15940., 17152.,
      18388., 19648., 17044., 18304., 19588., 20896., 18148., 19456., 20788.,
      22144., 19252., 20608., 21988., 23392., 20356., 21760., 23188., 24640.,
      21460., 22912., 24388., 25888., 26980., 28672., 30388., 32128., 28084.,
      29824., 31588., 33376., 29188., 30976., 32788., 34624., 30292., 32128.,
      33988., 35872., 31396., 33280., 35188., 37120., 32500., 34432., 36388.,
      38368., 33604., 35584., 37588., 39616., 39124., 41344., 43588., 45856.,
      40228., 42496., 44788., 47104., 41332., 43648., 45988., 48352., 42436.,
      44800., 47188., 49600., 43540., 45952., 48388., 50848., 43364., 45568.,
      47796., 50048., 44468., 46720., 48996., 51296., 49732., 51968., 54228.,
      56512., 45460., 47488., 49540., 51616., 46564., 48640., 50740., 52864.,
      47668., 49792., 51940., 54112., 48772., 50944., 53140., 55360., 45524.,
      47488., 49476., 51488., 46628., 48640., 50676., 52736.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11612., 11992., 12760., 13152., 13956., 14360., 15200., 15616., 13068.,
      13496., 14312., 14752., 15604., 16056., 16944., 17408., 17890., 18492.,
      19700., 20320., 21582., 22220., 23536., 24192., 17994., 18540., 19692.,
      20256., 21462., 22044., 23304., 23904., 17650., 18204., 19364., 19936.,
      21150., 21740., 23008., 23616., 15660., 16088., 16936., 17376., 18260.,
      18712., 19632., 20096., 14108., 14520., 15352., 15776., 16644., 17080.,
      17984., 18432., 11180., 11512., 12232., 12576., 13332., 13688., 14480.,
      14848., 8988.,  9304.,  10008., 10336., 11076., 11416., 12192., 12544.,
      16538., 17100., 18268., 18848., 20070., 20668., 21944., 22560., 18754.,
      19324., 20500., 21088., 22318., 22924., 24208., 24832., 17834., 18348.,
      19468., 20000., 21174., 21724., 22952., 23520., 9916.,  10232., 10968.,
      11296., 12068., 12408., 13216., 13568., 11500., 11864., 12648., 13024.,
      13844., 14232., 15088., 15488., 14098., 14636., 15700., 16256., 17374.,
      17948., 19120., 19712., 14458., 15004., 16076., 16640., 17766., 18348.,
      19528., 20128., 20927., 21670., 23190., 23960., 25561., 26358., 28040.,
      28864., 23819., 24670., 26298., 27176., 28885., 29790., 31580., 32512.,
      23511., 24342., 25950., 26808., 28497., 29382., 31152., 32064., 15082.,
      15628., 16684., 17248., 18358., 18940., 20104., 20704., 11730., 12220.,
      13220., 13728., 14782., 15308., 16416., 16960., 17034., 17660., 18812.,
      19456., 20662., 21324., 22584., 23264., 13746., 14316., 15412., 16000.,
      17150., 17756., 18960., 19584., 22467., 23310., 24930., 25800., 27501.,
      28398., 30180., 31104., 22159., 22982., 24582., 25432., 27113., 27990.,
      29752., 30656., 25051., 25982., 27690., 28648., 30437., 31422., 33292.,
      34304., 15714., 16284., 17364., 17952., 19086., 19692., 20880., 21504.,
      13962., 14540., 15628., 16224., 17366., 17980., 19176., 19808., 13634.,
      14156., 15204., 15744., 16846., 17404., 18560., 19136., 15594., 16188.,
      17308., 17920., 19094., 19724., 20952., 21600., 23431., 24310., 25966.,
      26872., 28609., 29542., 31360., 32320., 22547., 23342., 24914., 25736.,
      27389., 28238., 29972., 30848., 21215., 21990., 23542., 24344., 25977.,
      26806., 28520., 29376., 14810., 15404., 16508., 17120., 18278., 18908.,
      20120., 20768., 15106., 15708., 16820., 17440., 18606., 19244., 20464.,
      21120., 10956., 11288., 12040., 12384., 13172., 13528., 14352., 14720.,
      10428., 10744., 11480., 11808., 12580., 12920., 13728., 14080., 17258.,
      17820., 18940., 19520., 20694., 21292., 22520., 23136., 16722., 17292.,
      18420., 19008., 20190., 20796., 22032., 22656., 14586., 15100., 16172.,
      16704., 17830., 18380., 19560., 20128., 7900.,  8216.,  8856.,  9184.,
      9860.,  10200., 10912., 11264., 9100.,  9464.,  10152., 10528., 11252.,
      11640., 12400., 12800., 10972., 11320., 12088., 12448., 13252., 13624.,
      14464., 14848., 12556., 12952., 13768., 14176., 15028., 15448., 16336.,
      16768., 14818., 15340., 16420., 16960., 18094., 18652., 19840., 20416.,
      16906., 17500., 18652., 19264., 20470., 21100., 22360., 23008., 14770.,
      15308., 16404., 16960., 18110., 18684., 19888., 20480., 9388.,  9784.,
      10504., 10912., 11668., 12088., 12880., 13312., 8412.,  8728.,  9368.,
      9696.,  10372., 10712., 11424., 11776.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35724., 36424., 37688., 38400., 39700., 40424., 41760., 42496., 37884.,
      38632., 39944., 40704., 42052., 42824., 44208., 44992., 29676., 30344.,
      31576., 32256., 33524., 34216., 35520., 36224., 26588., 27176., 28328.,
      28928., 30116., 30728., 31952., 32576., 28748., 29384., 30584., 31232.,
      32468., 33128., 34400., 35072., 30908., 31592., 32840., 33536., 34820.,
      35528., 36848., 37568., 33068., 33800., 35096., 35840., 37172., 37928.,
      39296., 40064., 30300., 31016., 32296., 33024., 34340., 35080., 36432.,
      37184., 32460., 33224., 34552., 35328., 36692., 37480., 38880., 39680.,
      34620., 35432., 36808., 37632., 39044., 39880., 41328., 42176., 28460.,
      29192., 30488., 31232., 32564., 33320., 34688., 35456., 30620., 31400.,
      32744., 33536., 34916., 35720., 37136., 37952., 29580., 30280., 31544.,
      32256., 33556., 34280., 35616., 36352., 31740., 32488., 33800., 34560.,
      35908., 36680., 38064., 38848., 40364., 41224., 42648., 43520., 44980.,
      45864., 47360., 48256., 35228., 36008., 37352., 38144., 39524., 40328.,
      41744., 42560., 37388., 38216., 39608., 40448., 41876., 42728., 44192.,
      45056., 39548., 40424., 41864., 42752., 44228., 45128., 46640., 47552.,
      41708., 42632., 44120., 45056., 46580., 47528., 49088., 50048., 37596.,
      38440., 39848., 40704., 42148., 43016., 44496., 45376., 38604., 39368.,
      40696., 41472., 42836., 43624., 45024., 45824., 37884., 38632., 39944.,
      40704., 42052., 42824., 44208., 44992., 29676., 30344., 31576., 32256.,
      33524., 34216., 35520., 36224., 26588., 27176., 28328., 28928., 30116.,
      30728., 31952., 32576., 28748., 29384., 30584., 31232., 32468., 33128.,
      34400., 35072., 30908., 31592., 32840., 33536., 34820., 35528., 36848.,
      37568., 33068., 33800., 35096., 35840., 37172., 37928., 39296., 40064.,
      31004., 31656., 32872., 33536., 34788., 35464., 36752., 37440., 32460.,
      33224., 34552., 35328., 36692., 37480., 38880., 39680., 34620., 35432.,
      36808., 37632., 39044., 39880., 41328., 42176., 28460., 29192., 30488.,
      31232., 32564., 33320., 34688., 35456., 30620., 31400., 32744., 33536.,
      34916., 35720., 37136., 37952., 29580., 30280., 31544., 32256., 33556.,
      34280., 35616., 36352., 31740., 32488., 33800., 34560., 35908., 36680.,
      38064., 38848., 33900., 34696., 36056., 36864., 38260., 39080., 40512.,
      41344., 35228., 36008., 37352., 38144., 39524., 40328., 41744., 42560.,
      37388., 38216., 39608., 40448., 41876., 42728., 44192., 45056., 39548.,
      40424., 41864., 42752., 44228., 45128., 46640., 47552., 41708., 42632.,
      44120., 45056., 46580., 47528., 49088., 50048., 37596., 38440., 39848.,
      40704., 42148., 43016., 44496., 45376., 38604., 39368., 40696., 41472.,
      42836., 43624., 45024., 45824., 40764., 41576., 42952., 43776., 45188.,
      46024., 47472., 48320., 29676., 30344., 31576., 32256., 33524., 34216.,
      35520., 36224., 26588., 27176., 28328., 28928., 30116., 30728., 31952.,
      32576., 28748., 29384., 30584., 31232., 32468., 33128., 34400., 35072.,
      30908., 31592., 32840., 33536., 34820., 35528., 36848., 37568., 33068.,
      33800., 35096., 35840., 37172., 37928., 39296., 40064., 31004., 31656.,
      32872., 33536., 34788., 35464., 36752., 37440., 33164., 33864., 35128.,
      35840., 37140., 37864., 39200., 39936.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8572.,  8952.,  9332.,  9712.,  10408., 10800., 11192., 11584., 12340.,
      12744., 13148., 13552., 14368., 14784., 15200., 15616., 9644.,  10072.,
      10500., 10928., 11672., 12112., 12552., 12992., 13796., 14248., 14700.,
      15152., 16016., 16480., 16944., 17408., 11946., 12548., 13150., 13752.,
      14844., 15464., 16084., 16704., 17886., 18524., 19162., 19800., 21072.,
      21728., 22384., 23040., 13490., 14036., 14582., 15128., 16164., 16728.,
      17292., 17856., 18982., 19564., 20146., 20728., 21944., 22544., 23144.,
      23744., 14074., 14628., 15182., 15736., 16780., 17352., 17924., 18496.,
      19630., 20220., 20810., 21400., 22624., 23232., 23840., 24448., 11180.,
      11608., 12036., 12464., 13208., 13648., 14088., 14528., 15332., 15784.,
      16236., 16688., 17552., 18016., 18480., 18944., 10140., 10552., 10964.,
      11376., 12104., 12528., 12952., 13376., 14164., 14600., 15036., 15472.,
      16320., 16768., 17216., 17664., 8524.,  8856.,  9188.,  9520.,  10168.,
      10512., 10856., 11200., 11908., 12264., 12620., 12976., 13744., 14112.,
      14480., 14848., 6460.,  6776.,  7092.,  7408.,  8040.,  8368.,  8696.,
      9024.,  9716.,  10056., 10396., 10736., 11488., 11840., 12192., 12544.,
      11074., 11636., 12198., 12760., 13812., 14392., 14972., 15552., 16694.,
      17292., 17890., 18488., 19720., 20336., 20952., 21568., 12682., 13252.,
      13822., 14392., 15452., 16040., 16628., 17216., 18366., 18972., 19578.,
      20184., 21424., 22048., 22672., 23296., 12178., 12692., 13206., 13720.,
      14724., 15256., 15788., 16320., 17414., 17964., 18514., 19064., 20248.,
      20816., 21384., 21952., 5948.,  6264.,  6580.,  6896.,  7528.,  7856.,
      8184.,  8512.,  9204.,  9544.,  9884.,  10224., 10976., 11328., 11680.,
      12032., 7020.,  7384.,  7748.,  8112.,  8792.,  9168.,  9544.,  9920.,
      10660., 11048., 11436., 11824., 12624., 13024., 13424., 13824., 12810.,
      13348., 13886., 14424., 15484., 16040., 16596., 17152., 18302., 18876.,
      19450., 20024., 21264., 21856., 22448., 23040., 11474., 12020., 12566.,
      13112., 14180., 14744., 15308., 15872., 17030., 17612., 18194., 18776.,
      20024., 20624., 21224., 21824., 18839., 19582., 20325., 21068., 22570.,
      23340., 24110., 24880., 26517., 27314., 28111., 28908., 30680., 31504.,
      32328., 33152., 21443., 22294., 23145., 23996., 25606., 26484., 27362.,
      28240., 29985., 30890., 31795., 32700., 34580., 35512., 36444., 37376.,
      21871., 22702., 23533., 24364., 25954., 26812., 27670., 28528., 30253.,
      31138., 32023., 32908., 34768., 35680., 36592., 37504., 14002., 14548.,
      15094., 15640., 16676., 17240., 17804., 18368., 19494., 20076., 20658.,
      21240., 22456., 23056., 23656., 24256., 9402.,  9892.,  10382., 10872.,
      11852., 12360., 12868., 13376., 14446., 14972., 15498., 16024., 17184.,
      17728., 18272., 18816., 16546., 17172., 17798., 18424., 19572., 20216.,
      20860., 21504., 22742., 23404., 24066., 24728., 26056., 26736., 27416.,
      28096., 12074., 12644., 13214., 13784., 14876., 15464., 16052., 16640.,
      17822., 18428., 19034., 19640., 20912., 21536., 22160., 22784., 20795.,
      21638., 22481., 23324., 24926., 25796., 26666., 27536., 29273., 30170.,
      31067., 31964., 33836., 34760., 35684., 36608., 21223., 22046., 22869.,
      23692., 25274., 26124., 26974., 27824., 29541., 30418., 31295., 32172.,
      34024., 34928., 35832., 36736., 23827., 24758., 25689., 26620., 28310.,
      29268., 30226., 31184., 33009., 33994., 34979., 35964., 37924., 38936.,
      39948., 40960., 13194., 13764., 14334., 14904., 15964., 16552., 17140.,
      17728., 18878., 19484., 20090., 20696., 21936., 22560., 23184., 23808.,
      11730., 12308., 12886., 13464., 14532., 15128., 15724., 16320., 17478.,
      18092., 18706., 19320., 20568., 21200., 21832., 22464., 11898., 12420.,
      12942., 13464., 14508., 15048., 15588., 16128., 17262., 17820., 18378.,
      18936., 20160., 20736., 21312., 21888., 13698., 14292., 14886., 15480.,
      16596., 17208., 17820., 18432., 19638., 20268., 20898., 21528., 22824.,
      23472., 24120., 24768., 21663., 22542., 23421., 24300., 25938., 26844.,
      27750., 28656., 30429., 31362., 32295., 33228., 35136., 36096., 37056.,
      38016., 21003., 21798., 22593., 23388., 24942., 25764., 26586., 27408.,
      29097., 29946., 30795., 31644., 33468., 34344., 35220., 36096., 19383.,
      20158., 20933., 21708., 23242., 24044., 24846., 25648., 27317., 28146.,
      28975., 29804., 31608., 32464., 33320., 34176., 13410., 14004., 14598.,
      15192., 16276., 16888., 17500., 18112., 19286., 19916., 20546., 21176.,
      22440., 23088., 23736., 24384., 11946., 12548., 13150., 13752., 14844.,
      15464., 16084., 16704., 17886., 18524., 19162., 19800., 21072., 21728.,
      22384., 23040., 7564.,  7896.,  8228.,  8560.,  9272.,  9616.,  9960.,
      10304., 11076., 11432., 11788., 12144., 12976., 13344., 13712., 14080.,
      8828.,  9144.,  9460.,  9776.,  10472., 10800., 11128., 11456., 12212.,
      12552., 12892., 13232., 14048., 14400., 14752., 15104., 14946., 15508.,
      16070., 16632., 17716., 18296., 18876., 19456., 20630., 21228., 21826.,
      22424., 23688., 24304., 24920., 25536., 15658., 16228., 16798., 17368.,
      18460., 19048., 19636., 20224., 21406., 22012., 22618., 23224., 24496.,
      25120., 25744., 26368., 13234., 13748., 14262., 14776., 15812., 16344.,
      16876., 17408., 18534., 19084., 19634., 20184., 21400., 21968., 22536.,
      23104., 6460.,  6776.,  7092.,  7408.,  8040.,  8368.,  8696.,  9024.,
      9716.,  10056., 10396., 10736., 11488., 11840., 12192., 12544., 7532.,
      7896.,  8260.,  8624.,  9304.,  9680.,  10056., 10432., 11172., 11560.,
      11948., 12336., 13136., 13536., 13936., 14336., 8348.,  8696.,  9044.,
      9392.,  10120., 10480., 10840., 11200., 11988., 12360., 12732., 13104.,
      13952., 14336., 14720., 15104., 9676.,  10072., 10468., 10864., 11640.,
      12048., 12456., 12864., 13700., 14120., 14540., 14960., 15856., 16288.,
      16720., 17152., 13434., 13956., 14478., 15000., 16044., 16584., 17124.,
      17664., 18798., 19356., 19914., 20472., 21696., 22272., 22848., 23424.,
      15234., 15828., 16422., 17016., 18132., 18744., 19356., 19968., 21174.,
      21804., 22434., 23064., 24360., 25008., 25656., 26304., 12810., 13348.,
      13886., 14424., 15484., 16040., 16596., 17152., 18302., 18876., 19450.,
      20024., 21264., 21856., 22448., 23040., 7564.,  7960.,  8356.,  8752.,
      9464.,  9872.,  10280., 10688., 11460., 11880., 12300., 12720., 13552.,
      13984., 14416., 14848., 8508.,  8824.,  9140.,  9456.,  10088., 10416.,
      10744., 11072., 11764., 12104., 12444., 12784., 13536., 13888., 14240.,
      14592.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      33372., 34072., 34772., 35472., 36776., 37488., 38200., 38912., 40276.,
      41000., 41724., 42448., 43872., 44608., 45344., 46080., 35596., 36344.,
      37092., 37840., 39192., 39952., 40712., 41472., 42884., 43656., 44428.,
      45200., 46672., 47456., 48240., 49024., 33596., 34264., 34932., 35600.,
      36872., 37552., 38232., 38912., 40244., 40936., 41628., 42320., 43712.,
      44416., 45120., 45824., 25452., 26040., 26628., 27216., 28408., 29008.,
      29608., 30208., 31460., 32072., 32684., 33296., 34608., 35232., 35856.,
      36480., 27676., 28312., 28948., 29584., 30824., 31472., 32120., 32768.,
      34068., 34728., 35388., 36048., 37408., 38080., 38752., 39424., 29900.,
      30584., 31268., 31952., 33240., 33936., 34632., 35328., 36676., 37384.,
      38092., 38800., 40208., 40928., 41648., 42368., 32124., 32856., 33588.,
      34320., 35656., 36400., 37144., 37888., 39284., 40040., 40796., 41552.,
      43008., 43776., 44544., 45312., 32748., 33464., 34180., 34896., 36216.,
      36944., 37672., 38400., 39780., 40520., 41260., 42000., 43440., 44192.,
      44944., 45696., 34972., 35736., 36500., 37264., 38632., 39408., 40184.,
      40960., 42388., 43176., 43964., 44752., 46240., 47040., 47840., 48640.,
      37196., 38008., 38820., 39632., 41048., 41872., 42696., 43520., 44996.,
      45832., 46668., 47504., 49040., 49888., 50736., 51584., 39292., 40024.,
      40756., 41488., 42824., 43568., 44312., 45056., 46452., 47208., 47964.,
      48720., 50176., 50944., 51712., 52480., 41516., 42296., 43076., 43856.,
      45240., 46032., 46824., 47616., 49060., 49864., 50668., 51472., 52976.,
      53792., 54608., 55424., 37468., 38168., 38868., 39568., 40872., 41584.,
      42296., 43008., 44372., 45096., 45820., 46544., 47968., 48704., 49440.,
      50176., 39692., 40440., 41188., 41936., 43288., 44048., 44808., 45568.,
      46980., 47752., 48524., 49296., 50768., 51552., 52336., 53120., 46588.,
      47448., 48308., 49168., 50632., 51504., 52376., 53248., 54772., 55656.,
      56540., 57424., 59008., 59904., 60800., 61696., 34348., 35128., 35908.,
      36688., 38072., 38864., 39656., 40448., 41892., 42696., 43500., 44304.,
      45808., 46624., 47440., 48256., 36572., 37400., 38228., 39056., 40488.,
      41328., 42168., 43008., 44500., 45352., 46204., 47056., 48608., 49472.,
      50336., 51200., 38796., 39672., 40548., 41424., 42904., 43792., 44680.,
      45568., 47108., 48008., 48908., 49808., 51408., 52320., 53232., 54144.,
      41020., 41944., 42868., 43792., 45320., 46256., 47192., 48128., 49716.,
      50664., 51612., 52560., 54208., 55168., 56128., 57088., 30828., 31672.,
      32516., 33360., 34808., 35664., 36520., 37376., 38884., 39752., 40620.,
      41488., 43056., 43936., 44816., 45696., 30876., 31640., 32404., 33168.,
      34536., 35312., 36088., 36864., 38292., 39080., 39868., 40656., 42144.,
      42944., 43744., 44544., 35596., 36344., 37092., 37840., 39192., 39952.,
      40712., 41472., 42884., 43656., 44428., 45200., 46672., 47456., 48240.,
      49024., 33596., 34264., 34932., 35600., 36872., 37552., 38232., 38912.,
      40244., 40936., 41628., 42320., 43712., 44416., 45120., 45824., 25452.,
      26040., 26628., 27216., 28408., 29008., 29608., 30208., 31460., 32072.,
      32684., 33296., 34608., 35232., 35856., 36480., 27676., 28312., 28948.,
      29584., 30824., 31472., 32120., 32768., 34068., 34728., 35388., 36048.,
      37408., 38080., 38752., 39424., 29900., 30584., 31268., 31952., 33240.,
      33936., 34632., 35328., 36676., 37384., 38092., 38800., 40208., 40928.,
      41648., 42368., 32124., 32856., 33588., 34320., 35656., 36400., 37144.,
      37888., 39284., 40040., 40796., 41552., 43008., 43776., 44544., 45312.,
      26028., 26680., 27332., 27984., 29240., 29904., 30568., 31232., 32548.,
      33224., 33900., 34576., 35952., 36640., 37328., 38016., 34972., 35736.,
      36500., 37264., 38632., 39408., 40184., 40960., 42388., 43176., 43964.,
      44752., 46240., 47040., 47840., 48640., 37196., 38008., 38820., 39632.,
      41048., 41872., 42696., 43520., 44996., 45832., 46668., 47504., 49040.,
      49888., 50736., 51584., 39292., 40024., 40756., 41488., 42824., 43568.,
      44312., 45056., 46452., 47208., 47964., 48720., 50176., 50944., 51712.,
      52480., 41516., 42296., 43076., 43856., 45240., 46032., 46824., 47616.,
      49060., 49864., 50668., 51472., 52976., 53792., 54608., 55424., 37468.,
      38168., 38868., 39568., 40872., 41584., 42296., 43008., 44372., 45096.,
      45820., 46544., 47968., 48704., 49440., 50176., 39692., 40440., 41188.,
      41936., 43288., 44048., 44808., 45568., 46980., 47752., 48524., 49296.,
      50768., 51552., 52336., 53120., 41916., 42712., 43508., 44304., 45704.,
      46512., 47320., 48128., 49588., 50408., 51228., 52048., 53568., 54400.,
      55232., 56064., 34348., 35128., 35908., 36688., 38072., 38864., 39656.,
      40448., 41892., 42696., 43500., 44304., 45808., 46624., 47440., 48256.,
      36572., 37400., 38228., 39056., 40488., 41328., 42168., 43008., 44500.,
      45352., 46204., 47056., 48608., 49472., 50336., 51200., 38796., 39672.,
      40548., 41424., 42904., 43792., 44680., 45568., 47108., 48008., 48908.,
      49808., 51408., 52320., 53232., 54144., 41020., 41944., 42868., 43792.,
      45320., 46256., 47192., 48128., 49716., 50664., 51612., 52560., 54208.,
      55168., 56128., 57088., 30828., 31672., 32516., 33360., 34808., 35664.,
      36520., 37376., 38884., 39752., 40620., 41488., 43056., 43936., 44816.,
      45696., 30876., 31640., 32404., 33168., 34536., 35312., 36088., 36864.,
      38292., 39080., 39868., 40656., 42144., 42944., 43744., 44544., 33100.,
      33912., 34724., 35536., 36952., 37776., 38600., 39424., 40900., 41736.,
      42572., 43408., 44944., 45792., 46640., 47488., 33596., 34264., 34932.,
      35600., 36872., 37552., 38232., 38912., 40244., 40936., 41628., 42320.,
      43712., 44416., 45120., 45824., 25452., 26040., 26628., 27216., 28408.,
      29008., 29608., 30208., 31460., 32072., 32684., 33296., 34608., 35232.,
      35856., 36480., 27676., 28312., 28948., 29584., 30824., 31472., 32120.,
      32768., 34068., 34728., 35388., 36048., 37408., 38080., 38752., 39424.,
      29900., 30584., 31268., 31952., 33240., 33936., 34632., 35328., 36676.,
      37384., 38092., 38800., 40208., 40928., 41648., 42368., 32124., 32856.,
      33588., 34320., 35656., 36400., 37144., 37888., 39284., 40040., 40796.,
      41552., 43008., 43776., 44544., 45312., 26028., 26680., 27332., 27984.,
      29240., 29904., 30568., 31232., 32548., 33224., 33900., 34576., 35952.,
      36640., 37328., 38016., 28252., 28952., 29652., 30352., 31656., 32368.,
      33080., 33792., 35156., 35880., 36604., 37328., 38752., 39488., 40224.,
      40960.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20060., 28935., 29214., 29493., 29772., 19032., 19212., 22364., 32283.,
      32562., 32841., 33120., 21192., 21372., 28452., 40986., 41364., 41742.,
      42120., 26883., 27126., 31584., 45522., 45900., 46278., 46656., 29799.,
      30042., 30108., 41098., 41476., 41854., 42232., 24267., 24510., 18308.,
      26253., 26478., 26703., 26928., 17100., 17244., 20180., 28953., 29178.,
      29403., 29628., 18828., 18972.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16926., 17004., 17082., 17160., 17238., 17316., 17394., 17862., 17940.,
      18018., 18096., 18174., 18252., 18330., 18798., 18876., 18954., 19032.,
      19110., 19188., 19266., 19734., 19812., 19890., 19968., 20046., 20124.,
      20202., 20670., 20748., 20826., 20904., 20982., 21060., 21138., 21606.,
      21684., 21762., 21840., 21918., 21996., 22074., 22542., 22620., 22698.,
      22776., 22854., 22932., 23010.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23040., 23736., 33036., 34062., 33576., 34620., 34116., 35178., 34656.,
      35736., 21996., 22704., 22344., 23064., 27504., 28344., 39516., 40758.,
      40056., 41316., 40596., 41874., 41136., 42432., 26172., 27024., 26520.,
      27384., 33588., 34632., 48177., 49716., 48906., 50472., 49635., 51228.,
      50364., 51984., 31968., 33030., 32436., 33516., 39636., 40896., 56925.,
      58788., 57654., 59544., 58383., 60300., 59112., 61056., 37584., 38862.,
      38052., 39348., 27892., 28984., 35209., 36628., 35938., 37384., 36667.,
      38140., 37396., 38896., 20288., 21142., 20756., 21628., 22464., 23304.,
      32064., 33306., 32496., 33756., 32928., 34206., 33360., 34656., 21060.,
      21912., 21336., 22200., 26064., 27048., 37248., 38706., 37680., 39156.,
      38112., 39606., 38544., 40056., 24372., 25368., 24648., 25656.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31944., 33852., 32088., 34008., 32232., 34164., 32376., 34320., 32520.,
      34476., 32664., 34632., 32808., 34788., 33672., 35724., 33816., 35880.,
      33960., 36036., 34104., 36192., 34248., 36348., 34392., 36504., 34536.,
      36660., 35400., 37596., 35544., 37752., 35688., 37908., 35832., 38064.,
      35976., 38220., 36120., 38376., 36264., 38532., 37128., 39468., 37272.,
      39624., 37416., 39780., 37560., 39936., 37704., 40092., 37848., 40248.,
      37992., 40404., 38856., 41340., 39000., 41496., 39144., 41652., 39288.,
      41808., 39432., 41964., 39576., 42120., 39720., 42276., 40584., 43212.,
      40728., 43368., 40872., 43524., 41016., 43680., 41160., 43836., 41304.,
      43992., 41448., 44148., 42312., 45084., 42456., 45240., 42600., 45396.,
      42744., 45552., 42888., 45708., 43032., 45864., 43176., 46020.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9672.,  9984.,  10296., 10608., 14038., 14488., 14938., 15388., 14588.,
      15056., 15524., 15992., 15138., 15624., 16110., 16596., 15688., 16192.,
      16696., 17200., 9812.,  10136., 10460., 10784., 10176., 10512., 10848.,
      11184., 13848., 14304., 14760., 15216., 20638., 21304., 21970., 22636.,
      21188., 21872., 22556., 23240., 21738., 22440., 23142., 23844., 22288.,
      23008., 23728., 24448., 14180., 14648., 15116., 15584., 14544., 15024.,
      15504., 15984., 19412., 20072., 20732., 21392., 27167., 28066., 28965.,
      29864., 27894., 28820., 29746., 30672., 28621., 29574., 30527., 31480.,
      29348., 30328., 31308., 32288., 18202., 18816., 19430., 20044., 18672.,
      19304., 19936., 20568., 13308., 13864., 14420., 14976., 20339., 21114.,
      21889., 22664., 21066., 21868., 22670., 23472., 21793., 22622., 23451.,
      24280., 22520., 23376., 24232., 25088., 14050., 14560., 15070., 15580.,
      14520., 15048., 15576., 16104., 12644., 13160., 13676., 14192., 18631.,
      19282., 19933., 20584., 19358., 20036., 20714., 21392., 20085., 20790.,
      21495., 22200., 20812., 21544., 22276., 23008., 9386.,  9792.,  10198.,
      10604., 9856.,  10280., 10704., 11128., 12216., 12672., 13128., 13584.,
      16614., 17280., 17946., 18612., 17076., 17760., 18444., 19128., 17538.,
      18240., 18942., 19644., 18000., 18720., 19440., 20160., 10676., 11144.,
      11612., 12080., 10960., 11440., 11920., 12400., 16200., 16800., 17400.,
      18000., 21070., 21888., 22706., 23524., 21532., 22368., 23204., 24040.,
      21994., 22848., 23702., 24556., 22456., 23328., 24200., 25072., 13252.,
      13800., 14348., 14896., 13536., 14096., 14656., 15216.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22044., 22928., 23812., 24696., 22320., 23216., 24112., 25008., 22596.,
      23504., 24412., 25320., 22872., 23792., 24712., 25632., 23148., 24080.,
      25012., 25944., 23424., 24368., 25312., 26256., 23700., 24656., 25612.,
      26568., 25356., 26384., 27412., 28440., 25632., 26672., 27712., 28752.,
      25908., 26960., 28012., 29064., 26184., 27248., 28312., 29376., 26460.,
      27536., 28612., 29688., 26736., 27824., 28912., 30000., 27012., 28112.,
      29212., 30312., 28668., 29840., 31012., 32184., 28944., 30128., 31312.,
      32496., 29220., 30416., 31612., 32808., 29496., 30704., 31912., 33120.,
      29772., 30992., 32212., 33432., 30048., 31280., 32512., 33744., 30324.,
      31568., 32812., 34056., 31980., 33296., 34612., 35928., 32256., 33584.,
      34912., 36240., 32532., 33872., 35212., 36552., 32808., 34160., 35512.,
      36864., 33084., 34448., 35812., 37176., 33360., 34736., 36112., 37488.,
      33636., 35024., 36412., 37800., 35292., 36752., 38212., 39672., 35568.,
      37040., 38512., 39984., 35844., 37328., 38812., 40296., 36120., 37616.,
      39112., 40608., 36396., 37904., 39412., 40920., 36672., 38192., 39712.,
      41232., 36948., 38480., 40012., 41544., 38604., 40208., 41812., 43416.,
      38880., 40496., 42112., 43728., 39156., 40784., 42412., 44040., 39432.,
      41072., 42712., 44352., 39708., 41360., 43012., 44664., 39984., 41648.,
      43312., 44976., 40260., 41936., 43612., 45288., 34492., 35984., 37476.,
      38968., 34768., 36272., 37776., 39280., 35044., 36560., 38076., 39592.,
      35320., 36848., 38376., 39904., 29196., 30480., 31764., 33048., 29472.,
      30768., 32064., 33360., 29748., 31056., 32364., 33672.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19596., 20592., 27516., 28956., 28596., 30072., 29676., 31188., 30756.,
      32304., 19068., 20064., 19764., 20784., 28524., 29808., 40476., 42348.,
      41556., 43464., 42636., 44580., 43716., 45696., 27420., 28704., 28116.,
      29424., 40560., 42384., 51593., 54120., 53051., 55632., 54509., 57144.,
      55967., 58656., 33132., 34828., 34068., 35800., 32304., 33920., 44897.,
      47176., 46355., 48688., 47813., 50200., 49271., 51712., 30156., 31644.,
      31092., 32616., 25456., 26992., 31033., 33064., 32491., 34576., 33949.,
      36088., 35407., 37600., 18476., 19756., 19412., 20728., 23124., 24336.,
      32592., 34356., 33456., 35256., 34320., 36156., 35184., 37056., 21876.,
      23088., 22428., 23664., 30324., 31824., 37712., 39780., 38576., 40680.,
      39440., 41580., 40304., 42480., 23508., 24880., 24060., 25456.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22784., 24696., 23072., 25008., 23360., 25320., 23648., 25632., 23936.,
      25944., 24224., 26256., 24512., 26568., 26240., 28440., 26528., 28752.,
      26816., 29064., 27104., 29376., 27392., 29688., 27680., 30000., 27968.,
      30312., 29696., 32184., 29984., 32496., 30272., 32808., 30560., 33120.,
      30848., 33432., 31136., 33744., 31424., 34056., 33152., 35928., 33440.,
      36240., 33728., 36552., 34016., 36864., 34304., 37176., 34592., 37488.,
      34880., 37800., 36608., 39672., 36896., 39984., 37184., 40296., 37472.,
      40608., 37760., 40920., 38048., 41232., 38336., 41544., 40064., 43416.,
      40352., 43728., 40640., 44040., 40928., 44352., 41216., 44664., 41504.,
      44976., 41792., 45288., 35840., 38968., 36128., 39280., 36416., 39592.,
      36704., 39904., 30336., 33048., 30624., 33360., 30912., 33672.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11892., 12312., 13104., 13536., 14342., 14840., 15924., 16440., 15442.,
      15976., 17096., 17648., 16542., 17112., 18268., 18856., 17642., 18248.,
      19440., 20064., 8700.,  9016.,  9720.,  10048., 9428.,  9768.,  10496.,
      10848., 11796., 12248., 13072., 13536., 17174., 17720., 18852., 19416.,
      18274., 18856., 20024., 20624., 19374., 19992., 21196., 21832., 20474.,
      21128., 22368., 23040., 12060., 12408., 13144., 13504., 12788., 13160.,
      13920., 14304., 16074., 16608., 17656., 18208., 20263., 20946., 22410.,
      23120., 21717., 22454., 23972., 24736., 23171., 23962., 25534., 26352.,
      24625., 25470., 27096., 27968., 14238., 14744., 15756., 16280., 15178.,
      15720., 16768., 17328., 15706., 16352., 17512., 18176., 22159., 23042.,
      24706., 25616., 23613., 24550., 26268., 27232., 25067., 26058., 27830.,
      28848., 26521., 27566., 29392., 30464., 15726., 16344., 17468., 18104.,
      16666., 17320., 18480., 19152., 15978., 16608., 17752., 18400., 20599.,
      21298., 22778., 23504., 22053., 22806., 24340., 25120., 23507., 24314.,
      25902., 26736., 24961., 25822., 27464., 28352., 9982.,  10392., 11308.,
      11736., 10922., 11368., 12320., 12784., 13924., 14376., 15184., 15648.,
      14334., 14880., 15924., 16488., 15258., 15840., 16920., 17520., 16182.,
      16800., 17916., 18552., 17106., 17760., 18912., 19584., 7948.,  8296.,
      8952.,  9312.,  8516.,  8888.,  9568.,  9952.,  10820., 11240., 12016.,
      12448., 13198., 13728., 14756., 15304., 14122., 14688., 15752., 16336.,
      15046., 15648., 16748., 17368., 15970., 16608., 17744., 18400., 8876.,
      9256.,  9944.,  10336., 9444.,  9848.,  10560., 10976.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20260., 20992., 22024., 22768., 20812., 21568., 22624., 23392., 21364.,
      22144., 23224., 24016., 21916., 22720., 23824., 24640., 22468., 23296.,
      24424., 25264., 23020., 23872., 25024., 25888., 23572., 24448., 25624.,
      26512., 26884., 27904., 29224., 30256., 27436., 28480., 29824., 30880.,
      27988., 29056., 30424., 31504., 28540., 29632., 31024., 32128., 29092.,
      30208., 31624., 32752., 29644., 30784., 32224., 33376., 30196., 31360.,
      32824., 34000., 33508., 34816., 36424., 37744., 34060., 35392., 37024.,
      38368., 34612., 35968., 37624., 38992., 35164., 36544., 38224., 39616.,
      35716., 37120., 38824., 40240., 36268., 37696., 39424., 40864., 36820.,
      38272., 40024., 41488., 40132., 41728., 43624., 45232., 40684., 42304.,
      44224., 45856., 41236., 42880., 44824., 46480., 41788., 43456., 45424.,
      47104., 42340., 44032., 46024., 47728., 42892., 44608., 46624., 48352.,
      43444., 45184., 47224., 48976., 46756., 48640., 50824., 52720., 47308.,
      49216., 51424., 53344., 47860., 49792., 52024., 53968., 48412., 50368.,
      52624., 54592., 48964., 50944., 53224., 55216., 49516., 51520., 53824.,
      55840., 50068., 52096., 54424., 56464., 53380., 55552., 58024., 60208.,
      53932., 56128., 58624., 60832., 54484., 56704., 59224., 61456., 55036.,
      57280., 59824., 62080., 55588., 57856., 60424., 62704., 56140., 58432.,
      61024., 63328., 56692., 59008., 61624., 63952., 30564., 32256., 34248.,
      35952., 31116., 32832., 34848., 36576., 31668., 33408., 35448., 37200.,
      32220., 33984., 36048., 37824., 23044., 24320., 25896., 27184., 23596.,
      24896., 26496., 27808., 24148., 25472., 27096., 28432.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11396., 11816., 12236., 12656., 13488., 13920., 14352., 14784., 12314.,
      12812., 13310., 13808., 14948., 15464., 15980., 16496., 13454., 13988.,
      14522., 15056., 16232., 16784., 17336., 17888., 14594., 15164., 15734.,
      16304., 17516., 18104., 18692., 19280., 15734., 16340., 16946., 17552.,
      18800., 19424., 20048., 20672., 8572.,  8888.,  9204.,  9520.,  10280.,
      10608., 10936., 11264., 9364.,  9704.,  10044., 10384., 11168., 11520.,
      11872., 12224., 11684., 12136., 12588., 13040., 13904., 14368., 14832.,
      15296., 17930., 18476., 19022., 19568., 20756., 21320., 21884., 22448.,
      19070., 19652., 20234., 20816., 22040., 22640., 23240., 23840., 20210.,
      20828., 21446., 22064., 23324., 23960., 24596., 25232., 21350., 22004.,
      22658., 23312., 24608., 25280., 25952., 26624., 15772., 16120., 16468.,
      16816., 17608., 17968., 18328., 18688., 16564., 16936., 17308., 17680.,
      18496., 18880., 19264., 19648., 18238., 18772., 19306., 19840., 20936.,
      21488., 22040., 22592., 20707., 21390., 22073., 22756., 24270., 24980.,
      25690., 26400., 22153., 22890., 23627., 24364., 25932., 26696., 27460.,
      28224., 23599., 24390., 25181., 25972., 27594., 28412., 29230., 30048.,
      25045., 25890., 26735., 27580., 29256., 30128., 31000., 31872., 13698.,
      14204., 14710., 15216., 16268., 16792., 17316., 17840., 14646., 15188.,
      15730., 16272., 17360., 17920., 18480., 19040., 14830., 15476., 16122.,
      16768., 17976., 18640., 19304., 19968., 19691., 20574., 21457., 22340.,
      24054., 24964., 25874., 26784., 21137., 22074., 23011., 23948., 25716.,
      26680., 27644., 28608., 22583., 23574., 24565., 25556., 27378., 28396.,
      29414., 30432., 24029., 25074., 26119., 27164., 29040., 30112., 31184.,
      32256., 14002., 14620., 15238., 15856., 17020., 17656., 18292., 18928.,
      14950., 15604., 16258., 16912., 18112., 18784., 19456., 20128., 16926.,
      17556., 18186., 18816., 20008., 20656., 21304., 21952., 24435., 25134.,
      25833., 26532., 28062., 28788., 29514., 30240., 25881., 26634., 27387.,
      28140., 29724., 30504., 31284., 32064., 27327., 28134., 28941., 29748.,
      31386., 32220., 33054., 33888., 28773., 29634., 30495., 31356., 33048.,
      33936., 34824., 35712., 12450., 12860., 13270., 13680., 14636., 15064.,
      15492., 15920., 13398., 13844., 14290., 14736., 15728., 16192., 16656.,
      17120., 16388., 16840., 17292., 17744., 18640., 19104., 19568., 20032.,
      16474., 17020., 17566., 18112., 19252., 19816., 20380., 20944., 17518.,
      18100., 18682., 19264., 20440., 21040., 21640., 22240., 18562., 19180.,
      19798., 20416., 21628., 22264., 22900., 23536., 19606., 20260., 20914.,
      21568., 22816., 23488., 24160., 24832., 8124.,  8472.,  8820.,  9168.,
      9864.,  10224., 10584., 10944., 8724.,  9096.,  9468.,  9840.,  10560.,
      10944., 11328., 11712., 12260., 12680., 13100., 13520., 14384., 14816.,
      15248., 15680., 13194., 13724., 14254., 14784., 15908., 16456., 17004.,
      17552., 14238., 14804., 15370., 15936., 17096., 17680., 18264., 18848.,
      15282., 15884., 16486., 17088., 18284., 18904., 19524., 20144., 16326.,
      16964., 17602., 18240., 19472., 20128., 20784., 21440., 7900.,  8280.,
      8660.,  9040.,  9768.,  10160., 10552., 10944., 8500.,  8904.,  9308.,
      9712.,  10464., 10880., 11296., 11712.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      39788., 40520., 41252., 41984., 43304., 44048., 44792., 45536., 40868.,
      41624., 42380., 43136., 44480., 45248., 46016., 46784., 41948., 42728.,
      43508., 44288., 45656., 46448., 47240., 48032., 43028., 43832., 44636.,
      45440., 46832., 47648., 48464., 49280., 32716., 33416., 34116., 34816.,
      36104., 36816., 37528., 38240., 33796., 34520., 35244., 35968., 37280.,
      38016., 38752., 39488., 34876., 35624., 36372., 37120., 38456., 39216.,
      39976., 40736., 14220., 14600., 14980., 15360., 16328., 16720., 17112.,
      17504., 15300., 15704., 16108., 16512., 17504., 17920., 18336., 18752.,
      16380., 16808., 17236., 17664., 18680., 19120., 19560., 20000., 17460.,
      17912., 18364., 18816., 19856., 20320., 20784., 21248., 16364., 16712.,
      17060., 17408., 18344., 18704., 19064., 19424., 17444., 17816., 18188.,
      18560., 19520., 19904., 20288., 20672., 18524., 18920., 19316., 19712.,
      20696., 21104., 21512., 21920., 25004., 25544., 26084., 26624., 27752.,
      28304., 28856., 29408., 26084., 26648., 27212., 27776., 28928., 29504.,
      30080., 30656., 27164., 27752., 28340., 28928., 30104., 30704., 31304.,
      31904., 28244., 28856., 29468., 30080., 31280., 31904., 32528., 33152.,
      29324., 29960., 30596., 31232., 32456., 33104., 33752., 34400., 30404.,
      31064., 31724., 32384., 33632., 34304., 34976., 35648., 31484., 32168.,
      32852., 33536., 34808., 35504., 36200., 36896., 37964., 38792., 39620.,
      40448., 41864., 42704., 43544., 44384., 39044., 39896., 40748., 41600.,
      43040., 43904., 44768., 45632., 40124., 41000., 41876., 42752., 44216.,
      45104., 45992., 46880., 41204., 42104., 43004., 43904., 45392., 46304.,
      47216., 48128., 42284., 43208., 44132., 45056., 46568., 47504., 48440.,
      49376., 43364., 44312., 45260., 46208., 47744., 48704., 49664., 50624.,
      44444., 45416., 46388., 47360., 48920., 49904., 50888., 51872., 50924.,
      52040., 53156., 54272., 55976., 57104., 58232., 59360., 52004., 53144.,
      54284., 55424., 57152., 58304., 59456., 60608., 53084., 54248., 55412.,
      56576., 58328., 59504., 60680., 61856., 54164., 55352., 56540., 57728.,
      59504., 60704., 61904., 63104., 45900., 46984., 48068., 49152., 50824.,
      51920., 53016., 54112., 46980., 48088., 49196., 50304., 52000., 53120.,
      54240., 55360., 48060., 49192., 50324., 51456., 53176., 54320., 55464.,
      56608., 35596., 36360., 37124., 37888., 39240., 40016., 40792., 41568.,
      36676., 37464., 38252., 39040., 40416., 41216., 42016., 42816., 37756.,
      38568., 39380., 40192., 41592., 42416., 43240., 44064., 38836., 39672.,
      40508., 41344., 42768., 43616., 44464., 45312., 39788., 40520., 41252.,
      41984., 43304., 44048., 44792., 45536., 40868., 41624., 42380., 43136.,
      44480., 45248., 46016., 46784., 41948., 42728., 43508., 44288., 45656.,
      46448., 47240., 48032., 19372., 19912., 20452., 20992., 22120., 22672.,
      23224., 23776., 20452., 21016., 21580., 22144., 23296., 23872., 24448.,
      25024., 21532., 22120., 22708., 23296., 24472., 25072., 25672., 26272.,
      22612., 23224., 23836., 24448., 25648., 26272., 26896., 27520., 14220.,
      14600., 14980., 15360., 16328., 16720., 17112., 17504., 15300., 15704.,
      16108., 16512., 17504., 17920., 18336., 18752., 16380., 16808., 17236.,
      17664., 18680., 19120., 19560., 20000.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12300., 13104., 13932., 14784., 13478., 14448., 15454., 16496., 15678.,
      16720., 17798., 18912., 17878., 18992., 20142., 21328., 20078., 21264.,
      22486., 23744., 5900.,  6512.,  7148.,  7808.,  7356.,  8016.,  8700.,
      9408.,  14668., 15536., 16428., 17344., 15046., 16112., 17214., 18352.,
      17246., 18384., 19558., 20768., 19446., 20656., 21902., 23184., 21646.,
      22928., 24246., 25600., 10060., 10736., 11436., 12160., 11516., 12240.,
      12988., 13760., 18742., 19904., 21102., 22336., 19703., 21156., 22663.,
      24224., 22611., 24172., 25787., 27456., 25519., 27188., 28911., 30688.,
      28427., 30204., 32035., 33920., 15014., 16048., 17118., 18224., 16894.,
      18000., 19142., 20320., 14358., 15424., 16526., 17664., 16135., 17540.,
      18999., 20512., 19043., 20556., 22123., 23744., 21951., 23572., 25247.,
      26976., 24859., 26588., 28371., 30208., 12294., 13232., 14206., 15216.,
      14174., 15184., 16230., 17312., 16822., 17984., 19182., 20416., 17175.,
      18532., 19943., 21408., 20083., 21548., 23067., 24640., 22991., 24564.,
      26191., 27872., 25899., 27580., 29315., 31104., 7270.,  8112.,  8990.,
      9904.,  9150.,  10064., 11014., 12000., 15356., 16208., 17084., 17984.,
      12270., 13248., 14262., 15312., 14118., 15168., 16254., 17376., 15966.,
      17088., 18246., 19440., 17814., 19008., 20238., 21504., 6524.,  7120.,
      7740.,  8384.,  7660.,  8304.,  8972.,  9664.,  12988., 13776., 14588.,
      15424., 13838., 14784., 15766., 16784., 15686., 16704., 17758., 18848.,
      17534., 18624., 19750., 20912., 19382., 20544., 21742., 22976., 9916.,
      10576., 11260., 11968., 11052., 11760., 12492., 13248.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      40244., 41984., 43748., 45536., 41348., 43136., 44948., 46784., 42452.,
      44288., 46148., 48032., 43556., 45440., 47348., 49280., 33140., 34816.,
      36516., 38240., 34244., 35968., 37716., 39488., 35348., 37120., 38916.,
      40736., 14324., 15360., 16420., 17504., 15428., 16512., 17620., 18752.,
      16532., 17664., 18820., 20000., 17636., 18816., 20020., 21248., 16436.,
      17408., 18404., 19424., 17540., 18560., 19604., 20672., 18644., 19712.,
      20804., 21920., 25268., 26624., 28004., 29408., 26372., 27776., 29204.,
      30656., 27476., 28928., 30404., 31904., 28580., 30080., 31604., 33152.,
      29684., 31232., 32804., 34400., 30788., 32384., 34004., 35648., 31892.,
      33536., 35204., 36896., 38516., 40448., 42404., 44384., 39620., 41600.,
      43604., 45632., 40724., 42752., 44804., 46880., 41828., 43904., 46004.,
      48128., 42932., 45056., 47204., 49376., 44036., 46208., 48404., 50624.,
      45140., 47360., 49604., 51872., 51764., 54272., 56804., 59360., 52868.,
      55424., 58004., 60608., 53972., 56576., 59204., 61856., 55076., 57728.,
      60404., 63104., 46708., 49152., 51620., 54112., 47812., 50304., 52820.,
      55360., 48916., 51456., 54020., 56608., 36084., 37888., 39716., 41568.,
      37188., 39040., 40916., 42816., 38292., 40192., 42116., 44064., 39396.,
      41344., 43316., 45312., 40244., 41984., 43748., 45536., 41348., 43136.,
      44948., 46784., 42452., 44288., 46148., 48032., 19636., 20992., 22372.,
      23776., 20740., 22144., 23572., 25024., 21844., 23296., 24772., 26272.,
      22948., 24448., 25972., 27520., 14324., 15360., 16420., 17504., 15428.,
      16512., 17620., 18752., 16532., 17664., 18820., 20000.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12828., 13272., 14104., 14560., 15428., 15896., 16800., 17280., 15802.,
      16204., 17212., 17632., 18694., 19132., 20248., 20704., 18082., 18556.,
      19636., 20128., 21262., 21772., 22960., 23488., 20362., 20908., 22060.,
      22624., 23830., 24412., 25672., 26272., 22642., 23260., 24484., 25120.,
      26398., 27052., 28384., 29056., 7148.,  7384.,  8040.,  8288.,  8980.,
      9240.,  9968.,  10240., 8732.,  9016.,  9720.,  10016., 10756., 11064.,
      11840., 12160., 14428., 14936., 15832., 16352., 17284., 17816., 18784.,
      19328., 14746., 15244., 16348., 16864., 18022., 18556., 19768., 20320.,
      17026., 17596., 18772., 19360., 20590., 21196., 22480., 23104., 19306.,
      19948., 21196., 21856., 23158., 23836., 25192., 25888., 21586., 22300.,
      23620., 24352., 25726., 26476., 27904., 28672., 12332., 12632., 13352.,
      13664., 14420., 14744., 15536., 15872., 13916., 14264., 15032., 15392.,
      16196., 16568., 17408., 17792., 18706., 19372., 20564., 21248., 22494.,
      23196., 24496., 25216., 17523., 18222., 19698., 20424., 21981., 22734.,
      24372., 25152., 20415., 21222., 22806., 23640., 25305., 26166., 27912.,
      28800., 23307., 24222., 25914., 26856., 28629., 29598., 31452., 32448.,
      26199., 27222., 29022., 30072., 31953., 33030., 34992., 36096., 13674.,
      14220., 15276., 15840., 16950., 17532., 18696., 19296., 15570., 16188.,
      17316., 17952., 19134., 19788., 21024., 21696., 17202., 17772., 18868.,
      19456., 20606., 21212., 22416., 23040., 17603., 18254., 19682., 20360.,
      21869., 22574., 24164., 24896., 20495., 21254., 22790., 23576., 25193.,
      26006., 27704., 28544., 23387., 24254., 25898., 26792., 28517., 29438.,
      31244., 32192., 26279., 27254., 29006., 30008., 31841., 32870., 34784.,
      35840., 11402., 11852., 12812., 13280., 14294., 14780., 15848., 16352.,
      13298., 13820., 14852., 15392., 16478., 17036., 18176., 18752., 16914.,
      17580., 18772., 19456., 20702., 21404., 22704., 23424., 18707., 19310.,
      20690., 21320., 22781., 23438., 24980., 25664., 21599., 22310., 23798.,
      24536., 26105., 26870., 28520., 29312., 24491., 25310., 26906., 27752.,
      29429., 30302., 32060., 32960., 27383., 28310., 30014., 30968., 32753.,
      33734., 35600., 36608., 8618.,  8972.,  9836.,  10208., 11126., 11516.,
      12488., 12896., 10514., 10940., 11876., 12320., 13310., 13772., 14816.,
      15296., 16636., 17144., 18072., 18592., 19556., 20088., 21088., 21632.,
      13418., 13916., 14972., 15488., 16598., 17132., 18296., 18848., 15506.,
      16076., 17204., 17792., 18974., 19580., 20816., 21440., 17594., 18236.,
      19436., 20096., 21350., 22028., 23336., 24032., 19682., 20396., 21668.,
      22400., 23726., 24476., 25856., 26624., 6348.,  6648.,  7272.,  7584.,
      8244.,  8568.,  9264.,  9600.,  7548.,  7896.,  8568.,  8928.,  9636.,
      10008., 10752., 11136., 16060., 16504., 17368., 17824., 18724., 19192.,
      20128., 20608., 14538., 15004., 16028., 16512., 17590., 18092., 19224.,
      19744., 16626., 17164., 18260., 18816., 19966., 20540., 21744., 22336.,
      18714., 19324., 20492., 21120., 22342., 22988., 24264., 24928., 20802.,
      21484., 22724., 23424., 24718., 25436., 26784., 27520., 8972.,  9336.,
      10024., 10400., 11124., 11512., 12272., 12672., 10172., 10584., 11320.,
      11744., 12516., 12952., 13760., 14208.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      38332., 39016., 40264., 40960., 42244., 42952., 44272., 44992., 40492.,
      41224., 42520., 43264., 44596., 45352., 46720., 47488., 42652., 43432.,
      44776., 45568., 46948., 47752., 49168., 49984., 44812., 45640., 47032.,
      47872., 49300., 50152., 51616., 52480., 35580., 36328., 37640., 38400.,
      39748., 40520., 41904., 42688., 37740., 38536., 39896., 40704., 42100.,
      42920., 44352., 45184., 39900., 40744., 42152., 43008., 44452., 45320.,
      46800., 47680., 25724., 26344., 27528., 28160., 29380., 30024., 31280.,
      31936., 27884., 28552., 29784., 30464., 31732., 32424., 33728., 34432.,
      30044., 30760., 32040., 32768., 34084., 34824., 36176., 36928., 32204.,
      32968., 34296., 35072., 36436., 37224., 38624., 39424., 32188., 32872.,
      34120., 34816., 36100., 36808., 38128., 38848., 34348., 35080., 36376.,
      37120., 38452., 39208., 40576., 41344., 36508., 37288., 38632., 39424.,
      40804., 41608., 43024., 43840., 26556., 27240., 28488., 29184., 30468.,
      31176., 32496., 33216., 28716., 29448., 30744., 31488., 32820., 33576.,
      34944., 35712., 30876., 31656., 33000., 33792., 35172., 35976., 37392.,
      38208., 33036., 33864., 35256., 36096., 37524., 38376., 39840., 40704.,
      29820., 30440., 31624., 32256., 33476., 34120., 35376., 36032., 31980.,
      32648., 33880., 34560., 35828., 36520., 37824., 38528., 34140., 34856.,
      36136., 36864., 38180., 38920., 40272., 41024., 35580., 36328., 37640.,
      38400., 39748., 40520., 41904., 42688., 37740., 38536., 39896., 40704.,
      42100., 42920., 44352., 45184., 39900., 40744., 42152., 43008., 44452.,
      45320., 46800., 47680., 42060., 42952., 44408., 45312., 46804., 47720.,
      49248., 50176., 26556., 27240., 28488., 29184., 30468., 31176., 32496.,
      33216., 28716., 29448., 30744., 31488., 32820., 33576., 34944., 35712.,
      30876., 31656., 33000., 33792., 35172., 35976., 37392., 38208., 32188.,
      32872., 34120., 34816., 36100., 36808., 38128., 38848., 34348., 35080.,
      36376., 37120., 38452., 39208., 40576., 41344., 36508., 37288., 38632.,
      39424., 40804., 41608., 43024., 43840., 38668., 39496., 40888., 41728.,
      43156., 44008., 45472., 46336., 31484., 32232., 33544., 34304., 35652.,
      36424., 37808., 38592., 33644., 34440., 35800., 36608., 38004., 38824.,
      40256., 41088., 35804., 36648., 38056., 38912., 40356., 41224., 42704.,
      43584., 29820., 30440., 31624., 32256., 33476., 34120., 35376., 36032.,
      31980., 32648., 33880., 34560., 35828., 36520., 37824., 38528., 34140.,
      34856., 36136., 36864., 38180., 38920., 40272., 41024., 36300., 37064.,
      38392., 39168., 40532., 41320., 42720., 43520., 38332., 39016., 40264.,
      40960., 42244., 42952., 44272., 44992., 40492., 41224., 42520., 43264.,
      44596., 45352., 46720., 47488., 42652., 43432., 44776., 45568., 46948.,
      47752., 49168., 49984., 26556., 27240., 28488., 29184., 30468., 31176.,
      32496., 33216., 28716., 29448., 30744., 31488., 32820., 33576., 34944.,
      35712., 30876., 31656., 33000., 33792., 35172., 35976., 37392., 38208.,
      33036., 33864., 35256., 36096., 37524., 38376., 39840., 40704., 25724.,
      26344., 27528., 28160., 29380., 30024., 31280., 31936., 27884., 28552.,
      29784., 30464., 31732., 32424., 33728., 34432., 30044., 30760., 32040.,
      32768., 34084., 34824., 36176., 36928.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8124.,  8568.,  9012.,  9456.,  10216., 10672., 11128., 11584., 12404.,
      12872., 13340., 13808., 14688., 15168., 15648., 16128., 12066., 12468.,
      12870., 13272., 14164., 14584., 15004., 15424., 16406., 16844., 17282.,
      17720., 18792., 19248., 19704., 20160., 13738., 14212., 14686., 15160.,
      16124., 16616., 17108., 17600., 18654., 19164., 19674., 20184., 21328.,
      21856., 22384., 22912., 15410., 15956., 16502., 17048., 18084., 18648.,
      19212., 19776., 20902., 21484., 22066., 22648., 23864., 24464., 25064.,
      25664., 17082., 17700., 18318., 18936., 20044., 20680., 21316., 21952.,
      23150., 23804., 24458., 25112., 26400., 27072., 27744., 28416., 6380.,
      6616.,  6852.,  7088.,  7640.,  7888.,  8136.,  8384.,  8996.,  9256.,
      9516.,  9776.,  10448., 10720., 10992., 11264., 7452.,  7736.,  8020.,
      8304.,  8904.,  9200.,  9496.,  9792.,  10452., 10760., 11068., 11376.,
      12096., 12416., 12736., 13056., 10236., 10744., 11252., 11760., 12584.,
      13104., 13624., 14144., 15028., 15560., 16092., 16624., 17568., 18112.,
      18656., 19200., 8834.,  9332.,  9830.,  10328., 11316., 11832., 12348.,
      12864., 13942., 14476., 15010., 15544., 16712., 17264., 17816., 18368.,
      10506., 11076., 11646., 12216., 13276., 13864., 14452., 15040., 16190.,
      16796., 17402., 18008., 19248., 19872., 20496., 21120., 12178., 12820.,
      13462., 14104., 15236., 15896., 16556., 17216., 18438., 19116., 19794.,
      20472., 21784., 22480., 23176., 23872., 13850., 14564., 15278., 15992.,
      17196., 17928., 18660., 19392., 20686., 21436., 22186., 22936., 24320.,
      25088., 25856., 26624., 8492.,  8792.,  9092.,  9392.,  10008., 10320.,
      10632., 10944., 11620., 11944., 12268., 12592., 13328., 13664., 14000.,
      14336., 9564.,  9912.,  10260., 10608., 11272., 11632., 11992., 12352.,
      13076., 13448., 13820., 14192., 14976., 15360., 15744., 16128., 17802.,
      18468., 19134., 19800., 20988., 21672., 22356., 23040., 24318., 25020.,
      25722., 26424., 27792., 28512., 29232., 29952., 17195., 17894., 18593.,
      19292., 20750., 21476., 22202., 22928., 24521., 25274., 26027., 26780.,
      28508., 29288., 30068., 30848., 19799., 20606., 21413., 22220., 23786.,
      24620., 25454., 26288., 27989., 28850., 29711., 30572., 32408., 33296.,
      34184., 35072., 22403., 23318., 24233., 25148., 26822., 27764., 28706.,
      29648., 31457., 32426., 33395., 34364., 36308., 37304., 38300., 39296.,
      25007., 26030., 27053., 28076., 29858., 30908., 31958., 33008., 34925.,
      36002., 37079., 38156., 40208., 41312., 42416., 43520., 10930., 11476.,
      12022., 12568., 13604., 14168., 14732., 15296., 16422., 17004., 17586.,
      18168., 19384., 19984., 20584., 21184., 12602., 13220., 13838., 14456.,
      15564., 16200., 16836., 17472., 18670., 19324., 19978., 20632., 21920.,
      22592., 23264., 23936., 14890., 15460., 16030., 16600., 17692., 18280.,
      18868., 19456., 20638., 21244., 21850., 22456., 23728., 24352., 24976.,
      25600., 17403., 18054., 18705., 19356., 20766., 21444., 22122., 22800.,
      24345., 25050., 25755., 26460., 28140., 28872., 29604., 30336., 20007.,
      20766., 21525., 22284., 23802., 24588., 25374., 26160., 27813., 28626.,
      29439., 30252., 32040., 32880., 33720., 34560., 22611., 23478., 24345.,
      25212., 26838., 27732., 28626., 29520., 31281., 32202., 33123., 34044.,
      35940., 36888., 37836., 38784., 25215., 26190., 27165., 28140., 29874.,
      30876., 31878., 32880., 34749., 35778., 36807., 37836., 39840., 40896.,
      41952., 43008., 10578., 11028., 11478., 11928., 12868., 13336., 13804.,
      14272., 15302., 15788., 16274., 16760., 17880., 18384., 18888., 19392.,
      12250., 12772., 13294., 13816., 14828., 15368., 15908., 16448., 17550.,
      18108., 18666., 19224., 20416., 20992., 21568., 22144., 14218., 14884.,
      15550., 16216., 17404., 18088., 18772., 19456., 20734., 21436., 22138.,
      22840., 24208., 24928., 25648., 26368., 15563., 16166., 16769., 17372.,
      18734., 19364., 19994., 20624., 22121., 22778., 23435., 24092., 25724.,
      26408., 27092., 27776., 18167., 18878., 19589., 20300., 21770., 22508.,
      23246., 23984., 25589., 26354., 27119., 27884., 29624., 30416., 31208.,
      32000., 20771., 21590., 22409., 23228., 24806., 25652., 26498., 27344.,
      29057., 29930., 30803., 31676., 33524., 34424., 35324., 36224., 23375.,
      24302., 25229., 26156., 27842., 28796., 29750., 30704., 32525., 33506.,
      34487., 35468., 37424., 38432., 39440., 40448., 9202.,  9556.,  9910.,
      10264., 11108., 11480., 11852., 12224., 13158., 13548., 13938., 14328.,
      15352., 15760., 16168., 16576., 10874., 11300., 11726., 12152., 13068.,
      13512., 13956., 14400., 15406., 15868., 16330., 16792., 17888., 18368.,
      18848., 19328., 15676., 16184., 16692., 17200., 18088., 18608., 19128.,
      19648., 20596., 21128., 21660., 22192., 23200., 23744., 24288., 24832.,
      10402., 10900., 11398., 11896., 12916., 13432., 13948., 14464., 15574.,
      16108., 16642., 17176., 18376., 18928., 19480., 20032., 12202., 12772.,
      13342., 13912., 15004., 15592., 16180., 16768., 17950., 18556., 19162.,
      19768., 21040., 21664., 22288., 22912., 14002., 14644., 15286., 15928.,
      17092., 17752., 18412., 19072., 20326., 21004., 21682., 22360., 23704.,
      24400., 25096., 25792., 15802., 16516., 17230., 17944., 19180., 19912.,
      20644., 21376., 22702., 23452., 24202., 24952., 26368., 27136., 27904.,
      28672., 4908.,  5208.,  5508.,  5808.,  6424.,  6736.,  7048.,  7360.,
      8036.,  8360.,  8684.,  9008.,  9744.,  10080., 10416., 10752., 5980.,
      6328.,  6676.,  7024.,  7688.,  8048.,  8408.,  8768.,  9492.,  9864.,
      10236., 10608., 11392., 11776., 12160., 12544., 13564., 14008., 14452.,
      14896., 15720., 16176., 16632., 17088., 17972., 18440., 18908., 19376.,
      20320., 20800., 21280., 21760., 13698., 14164., 14630., 15096., 16084.,
      16568., 17052., 17536., 18614., 19116., 19618., 20120., 21288., 21808.,
      22328., 22848., 15498., 16036., 16574., 17112., 18172., 18728., 19284.,
      19840., 20990., 21564., 22138., 22712., 23952., 24544., 25136., 25728.,
      17298., 17908., 18518., 19128., 20260., 20888., 21516., 22144., 23366.,
      24012., 24658., 25304., 26616., 27280., 27944., 28608., 19098., 19780.,
      20462., 21144., 22348., 23048., 23748., 24448., 25742., 26460., 27178.,
      27896., 29280., 30016., 30752., 31488., 7020.,  7384.,  7748.,  8112.,
      8792.,  9168.,  9544.,  9920.,  10660., 11048., 11436., 11824., 12624.,
      13024., 13424., 13824., 8092.,  8504.,  8916.,  9328.,  10056., 10480.,
      10904., 11328., 12116., 12552., 12988., 13424., 14272., 14720., 15168.,
      15616.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      38604., 39288., 39972., 40656., 41944., 42640., 43336., 44032., 45380.,
      46088., 46796., 47504., 48912., 49632., 50352., 51072., 40828., 41560.,
      42292., 43024., 44360., 45104., 45848., 46592., 47988., 48744., 49500.,
      50256., 51712., 52480., 53248., 54016., 43052., 43832., 44612., 45392.,
      46776., 47568., 48360., 49152., 50596., 51400., 52204., 53008., 54512.,
      55328., 56144., 56960., 45276., 46104., 46932., 47760., 49192., 50032.,
      50872., 51712., 53204., 54056., 54908., 55760., 57312., 58176., 59040.,
      59904., 41228., 41976., 42724., 43472., 44824., 45584., 46344., 47104.,
      48516., 49288., 50060., 50832., 52304., 53088., 53872., 54656., 43452.,
      44248., 45044., 45840., 47240., 48048., 48856., 49664., 51124., 51944.,
      52764., 53584., 55104., 55936., 56768., 57600., 45676., 46520., 47364.,
      48208., 49656., 50512., 51368., 52224., 53732., 54600., 55468., 56336.,
      57904., 58784., 59664., 60544., 21644., 22264., 22884., 23504., 24728.,
      25360., 25992., 26624., 27908., 28552., 29196., 29840., 31184., 31840.,
      32496., 33152., 23868., 24536., 25204., 25872., 27144., 27824., 28504.,
      29184., 30516., 31208., 31900., 32592., 33984., 34688., 35392., 36096.,
      26092., 26808., 27524., 28240., 29560., 30288., 31016., 31744., 33124.,
      33864., 34604., 35344., 36784., 37536., 38288., 39040., 28316., 29080.,
      29844., 30608., 31976., 32752., 33528., 34304., 35732., 36520., 37308.,
      38096., 39584., 40384., 41184., 41984., 26316., 27000., 27684., 28368.,
      29656., 30352., 31048., 31744., 33092., 33800., 34508., 35216., 36624.,
      37344., 38064., 38784., 28540., 29272., 30004., 30736., 32072., 32816.,
      33560., 34304., 35700., 36456., 37212., 37968., 39424., 40192., 40960.,
      41728., 30764., 31544., 32324., 33104., 34488., 35280., 36072., 36864.,
      38308., 39112., 39916., 40720., 42224., 43040., 43856., 44672., 31436.,
      32120., 32804., 33488., 34776., 35472., 36168., 36864., 38212., 38920.,
      39628., 40336., 41744., 42464., 43184., 43904., 33660., 34392., 35124.,
      35856., 37192., 37936., 38680., 39424., 40820., 41576., 42332., 43088.,
      44544., 45312., 46080., 46848., 35884., 36664., 37444., 38224., 39608.,
      40400., 41192., 41984., 43428., 44232., 45036., 45840., 47344., 48160.,
      48976., 49792., 38108., 38936., 39764., 40592., 42024., 42864., 43704.,
      44544., 46036., 46888., 47740., 48592., 50144., 51008., 51872., 52736.,
      29836., 30456., 31076., 31696., 32920., 33552., 34184., 34816., 36100.,
      36744., 37388., 38032., 39376., 40032., 40688., 41344., 32060., 32728.,
      33396., 34064., 35336., 36016., 36696., 37376., 38708., 39400., 40092.,
      40784., 42176., 42880., 43584., 44288., 34284., 35000., 35716., 36432.,
      37752., 38480., 39208., 39936., 41316., 42056., 42796., 43536., 44976.,
      45728., 46480., 47232., 41228., 41976., 42724., 43472., 44824., 45584.,
      46344., 47104., 48516., 49288., 50060., 50832., 52304., 53088., 53872.,
      54656., 43452., 44248., 45044., 45840., 47240., 48048., 48856., 49664.,
      51124., 51944., 52764., 53584., 55104., 55936., 56768., 57600., 45676.,
      46520., 47364., 48208., 49656., 50512., 51368., 52224., 53732., 54600.,
      55468., 56336., 57904., 58784., 59664., 60544., 47900., 48792., 49684.,
      50576., 52072., 52976., 53880., 54784., 56340., 57256., 58172., 59088.,
      60704., 61632., 62560., 63488., 31436., 32120., 32804., 33488., 34776.,
      35472., 36168., 36864., 38212., 38920., 39628., 40336., 41744., 42464.,
      43184., 43904., 33660., 34392., 35124., 35856., 37192., 37936., 38680.,
      39424., 40820., 41576., 42332., 43088., 44544., 45312., 46080., 46848.,
      35884., 36664., 37444., 38224., 39608., 40400., 41192., 41984., 43428.,
      44232., 45036., 45840., 47344., 48160., 48976., 49792., 26316., 27000.,
      27684., 28368., 29656., 30352., 31048., 31744., 33092., 33800., 34508.,
      35216., 36624., 37344., 38064., 38784., 28540., 29272., 30004., 30736.,
      32072., 32816., 33560., 34304., 35700., 36456., 37212., 37968., 39424.,
      40192., 40960., 41728., 30764., 31544., 32324., 33104., 34488., 35280.,
      36072., 36864., 38308., 39112., 39916., 40720., 42224., 43040., 43856.,
      44672., 32988., 33816., 34644., 35472., 36904., 37744., 38584., 39424.,
      40916., 41768., 42620., 43472., 45024., 45888., 46752., 47616., 33036.,
      33784., 34532., 35280., 36632., 37392., 38152., 38912., 40324., 41096.,
      41868., 42640., 44112., 44896., 45680., 46464., 35260., 36056., 36852.,
      37648., 39048., 39856., 40664., 41472., 42932., 43752., 44572., 45392.,
      46912., 47744., 48576., 49408., 37484., 38328., 39172., 40016., 41464.,
      42320., 43176., 44032., 45540., 46408., 47276., 48144., 49712., 50592.,
      51472., 52352., 29836., 30456., 31076., 31696., 32920., 33552., 34184.,
      34816., 36100., 36744., 37388., 38032., 39376., 40032., 40688., 41344.,
      32060., 32728., 33396., 34064., 35336., 36016., 36696., 37376., 38708.,
      39400., 40092., 40784., 42176., 42880., 43584., 44288., 34284., 35000.,
      35716., 36432., 37752., 38480., 39208., 39936., 41316., 42056., 42796.,
      43536., 44976., 45728., 46480., 47232., 36508., 37272., 38036., 38800.,
      40168., 40944., 41720., 42496., 43924., 44712., 45500., 46288., 47776.,
      48576., 49376., 50176., 38604., 39288., 39972., 40656., 41944., 42640.,
      43336., 44032., 45380., 46088., 46796., 47504., 48912., 49632., 50352.,
      51072., 40828., 41560., 42292., 43024., 44360., 45104., 45848., 46592.,
      47988., 48744., 49500., 50256., 51712., 52480., 53248., 54016., 43052.,
      43832., 44612., 45392., 46776., 47568., 48360., 49152., 50596., 51400.,
      52204., 53008., 54512., 55328., 56144., 56960., 31436., 32120., 32804.,
      33488., 34776., 35472., 36168., 36864., 38212., 38920., 39628., 40336.,
      41744., 42464., 43184., 43904., 33660., 34392., 35124., 35856., 37192.,
      37936., 38680., 39424., 40820., 41576., 42332., 43088., 44544., 45312.,
      46080., 46848., 35884., 36664., 37444., 38224., 39608., 40400., 41192.,
      41984., 43428., 44232., 45036., 45840., 47344., 48160., 48976., 49792.,
      38108., 38936., 39764., 40592., 42024., 42864., 43704., 44544., 46036.,
      46888., 47740., 48592., 50144., 51008., 51872., 52736., 21644., 22264.,
      22884., 23504., 24728., 25360., 25992., 26624., 27908., 28552., 29196.,
      29840., 31184., 31840., 32496., 33152., 23868., 24536., 25204., 25872.,
      27144., 27824., 28504., 29184., 30516., 31208., 31900., 32592., 33984.,
      34688., 35392., 36096., 26092., 26808., 27524., 28240., 29560., 30288.,
      31016., 31744., 33124., 33864., 34604., 35344., 36784., 37536., 38288.,
      39040.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25002., 25380., 32580., 33072., 23784., 24144., 24504., 24278., 24656.,
      30636., 31128., 23064., 23424., 21096., 33105., 33618., 43134., 43800.,
      31470., 31956., 32442., 27999., 28512., 40170., 40836., 26626., 27112.,
      27598., 31341., 31854., 40790., 41456., 29718., 30204., 30690., 19422.,
      19728., 24332., 24728., 18208., 18496., 16608., 21402., 21708., 27700.,
      28096., 20064., 20352., 20640.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19706., 19784., 19862., 19940., 20018., 20096., 20174., 20798., 20876.,
      20954., 21032., 21110., 21188., 21266., 21890., 21968., 22046., 22124.,
      22202., 22280., 22358., 22982., 23060., 23138., 23216., 23294., 23372.,
      23450., 24074., 24152., 24230., 24308., 24386., 24464., 24542., 25166.,
      25244., 25322., 25400., 25478., 25556., 25634., 26258., 26336., 26414.,
      26492., 26570., 26648., 26726.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19026., 19604., 19572., 20168., 25456., 26248., 26160., 26976., 17870.,
      18448., 18380., 18976., 18890., 19504., 16174., 16748., 16720., 17312.,
      19952., 20696., 20656., 21424., 15026., 15600., 15536., 16128., 13422.,
      13968., 32511., 33506., 33318., 34340., 38072., 39292., 39112., 40368.,
      30521., 31516., 31274., 32296., 27931., 28852., 20129., 20862., 20936.,
      21696., 29592., 30676., 30632., 31752., 18663., 19396., 19416., 20176.,
      20169., 20956., 24707., 25498., 25514., 26332., 32632., 33708., 33672.,
      34784., 23125., 23916., 23878., 24696., 24631., 25476., 17150., 17724.,
      17744., 18336., 21424., 22168., 22192., 22960., 16002., 16576., 16560.,
      17152., 15006., 15552., 22778., 23476., 23372., 24088., 29296., 30184.,
      30064., 30976., 21382., 22080., 21940., 22656., 22306., 22976.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37192., 39412., 37336., 39568., 37480., 39724., 37624., 39880., 37768.,
      40036., 37912., 40192., 38056., 40348., 39208., 41596., 39352., 41752.,
      39496., 41908., 39640., 42064., 39784., 42220., 39928., 42376., 40072.,
      42532., 41224., 43780., 41368., 43936., 41512., 44092., 41656., 44248.,
      41800., 44404., 41944., 44560., 42088., 44716., 43240., 45964., 43384.,
      46120., 43528., 46276., 43672., 46432., 43816., 46588., 43960., 46744.,
      44104., 46900., 45256., 48148., 45400., 48304., 45544., 48460., 45688.,
      48616., 45832., 48772., 45976., 48928., 46120., 49084., 47272., 50332.,
      47416., 50488., 47560., 50644., 47704., 50800., 47848., 50956., 47992.,
      51112., 48136., 51268., 49288., 52516., 49432., 52672., 49576., 52828.,
      49720., 52984., 49864., 53140., 50008., 53296., 50152., 53452.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15266., 15844., 16422., 17000., 15764., 16360., 16956., 17552., 19144.,
      19936., 20728., 21520., 19760., 20576., 21392., 22208., 12954., 13532.,
      14110., 14688., 13380., 13976., 14572., 15168., 13806., 14420., 15034.,
      15648., 17886., 18460., 19034., 19608., 18384., 18976., 19568., 20160.,
      22008., 22752., 23496., 24240., 22624., 23392., 24160., 24928., 15590.,
      16164., 16738., 17312., 16016., 16608., 17200., 17792., 15354., 15900.,
      16446., 16992., 34843., 35838., 36833., 37828., 35662., 36684., 37706.,
      38728., 40108., 41328., 42548., 43768., 41128., 42384., 43640., 44896.,
      30863., 31858., 32853., 33848., 31574., 32596., 33618., 34640., 28317.,
      29238., 30159., 31080., 20069., 20802., 21535., 22268., 20888., 21648.,
      22408., 23168., 29428., 30512., 31596., 32680., 30448., 31568., 32688.,
      33808., 17137., 17870., 18603., 19336., 17848., 18608., 19368., 20128.,
      18559., 19346., 20133., 20920., 22511., 23302., 24093., 24884., 23330.,
      24148., 24966., 25784., 29372., 30448., 31524., 32600., 30392., 31504.,
      32616., 33728., 19347., 20138., 20929., 21720., 20058., 20876., 21694.,
      22512., 20769., 21614., 22459., 23304., 16382., 16956., 17530., 18104.,
      16976., 17568., 18160., 18752., 20344., 21088., 21832., 22576., 21088.,
      21856., 22624., 23392., 14086., 14660., 15234., 15808., 14608., 15200.,
      15792., 16384., 15066., 15612., 16158., 16704., 23546., 24244., 24942.,
      25640., 24140., 24856., 25572., 26288., 29288., 30176., 31064., 31952.,
      30032., 30944., 31856., 32768., 20754., 21452., 22150., 22848., 21276.,
      21992., 22708., 23424., 21478., 22148., 22818., 23488.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      32228., 33424., 34620., 35816., 32504., 33712., 34920., 36128., 32780.,
      34000., 35220., 36440., 33056., 34288., 35520., 36752., 33332., 34576.,
      35820., 37064., 33608., 34864., 36120., 37376., 33884., 35152., 36420.,
      37688., 36092., 37456., 38820., 40184., 36368., 37744., 39120., 40496.,
      36644., 38032., 39420., 40808., 36920., 38320., 39720., 41120., 37196.,
      38608., 40020., 41432., 37472., 38896., 40320., 41744., 37748., 39184.,
      40620., 42056., 39956., 41488., 43020., 44552., 40232., 41776., 43320.,
      44864., 40508., 42064., 43620., 45176., 40784., 42352., 43920., 45488.,
      41060., 42640., 44220., 45800., 41336., 42928., 44520., 46112., 41612.,
      43216., 44820., 46424., 36396., 37840., 39284., 40728., 36672., 38128.,
      39584., 41040., 36948., 38416., 39884., 41352., 37224., 38704., 40184.,
      41664., 31100., 32336., 33572., 34808., 31376., 32624., 33872., 35120.,
      31652., 32912., 34172., 35432., 33860., 35216., 36572., 37928., 34136.,
      35504., 36872., 38240., 34412., 35792., 37172., 38552., 34688., 36080.,
      37472., 38864., 34964., 36368., 37772., 39176., 35240., 36656., 38072.,
      39488., 35516., 36944., 38372., 39800., 37724., 39248., 40772., 42296.,
      38000., 39536., 41072., 42608., 38276., 39824., 41372., 42920., 38552.,
      40112., 41672., 43232., 38828., 40400., 41972., 43544., 39104., 40688.,
      42272., 43856., 39380., 40976., 42572., 44168., 41588., 43280., 44972.,
      46664., 41864., 43568., 45272., 46976., 42140., 43856., 45572., 47288.,
      42416., 44144., 45872., 47600., 42692., 44432., 46172., 47912., 42968.,
      44720., 46472., 48224., 43244., 45008., 46772., 48536.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22466., 23720., 23558., 24848., 28256., 29840., 29664., 31296., 21086.,
      22304., 22106., 23360., 21206., 22368., 10362., 11352., 11454., 12480.,
      16224., 17584., 17632., 19040., 9510.,  10464., 10530., 11520., 8926.,
      9888.,  31959., 33732., 33573., 35400., 38688., 40952., 40768., 43104.,
      30081., 31800., 31587., 33360., 28997., 30696., 19035., 20604., 20649.,
      22272., 26336., 28456., 28416., 30608., 17565., 19080., 19071., 20640.,
      17825., 19384., 28511., 30260., 30125., 31928., 36640., 38872., 38720.,
      41024., 26681., 28376., 28187., 29936., 28797., 30472., 13802., 14840.,
      14990., 16064., 21664., 23088., 23200., 24672., 12950., 13952., 14066.,
      15104., 13070., 14080., 20066., 21352., 21254., 22576., 25824., 27472.,
      27360., 29056., 18718., 19968., 19834., 21120., 20758., 22016.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      33280., 35816., 33568., 36128., 33856., 36440., 34144., 36752., 34432.,
      37064., 34720., 37376., 35008., 37688., 37312., 40184., 37600., 40496.,
      37888., 40808., 38176., 41120., 38464., 41432., 38752., 41744., 39040.,
      42056., 41344., 44552., 41632., 44864., 41920., 45176., 42208., 45488.,
      42496., 45800., 42784., 46112., 43072., 46424., 37696., 40728., 37984.,
      41040., 38272., 41352., 38560., 41664., 32192., 34808., 32480., 35120.,
      32768., 35432., 35072., 37928., 35360., 38240., 35648., 38552., 35936.,
      38864., 36224., 39176., 36512., 39488., 36800., 39800., 39104., 42296.,
      39392., 42608., 39680., 42920., 39968., 43232., 40256., 43544., 40544.,
      43856., 40832., 44168., 43136., 46664., 43424., 46976., 43712., 47288.,
      44000., 47600., 44288., 47912., 44576., 48224., 44864., 48536.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20882., 21572., 22796., 23504., 21878., 22604., 23864., 24608., 23144.,
      24000., 25520., 26400., 24376., 25280., 26848., 27776., 18122., 18812.,
      19964., 20672., 18974., 19700., 20888., 21632., 16114., 16748., 17844.,
      18496., 9482.,  9908.,  10868., 11312., 10478., 10940., 11936., 12416.,
      14664., 15296., 16592., 17248., 15896., 16576., 17920., 18624., 7778.,
      8204.,  9092.,  9536.,  8630.,  9092.,  10016., 10496., 8394.,  8828.,
      9724.,  10176., 29955., 30894., 32706., 33672., 31593., 32586., 34452.,
      35472., 36252., 37440., 39720., 40944., 38292., 39552., 41904., 43200.,
      26199., 27138., 28842., 29808., 27621., 28614., 30372., 31392., 25075.,
      25994., 27678., 28624., 19671., 20406., 22014., 22776., 21309., 22098.,
      23760., 24576., 28076., 29120., 31256., 32336., 30116., 31232., 33440.,
      34592., 16731., 17466., 18966., 19728., 18153., 18942., 20496., 21312.,
      18231., 19010., 20554., 21360., 29227., 30142., 31930., 32872., 30865.,
      31834., 33676., 34672., 36284., 37440., 39688., 40880., 38324., 39552.,
      41872., 43136., 25567., 26482., 28162., 29104., 26989., 27958., 29692.,
      30688., 26747., 27642., 29302., 30224., 13546., 13972., 15028., 15472.,
      14734., 15196., 16288., 16768., 20424., 21056., 22480., 23136., 21912.,
      22592., 24064., 24768., 11842., 12268., 13252., 13696., 12886., 13348.,
      14368., 14848., 13866., 14300., 15292., 15744., 21986., 22660., 23964.,
      24656., 23174., 23884., 25224., 25952., 27496., 28352., 30000., 30880.,
      28984., 29888., 31584., 32512., 19290., 19964., 21196., 21888., 20334.,
      21044., 22312., 23040., 21058., 21740., 22980., 23680.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      40628., 41984., 43640., 45008., 41180., 42560., 44240., 45632., 41732.,
      43136., 44840., 46256., 42284., 43712., 45440., 46880., 42836., 44288.,
      46040., 47504., 43388., 44864., 46640., 48128., 43940., 45440., 47240.,
      48752., 48356., 50048., 52040., 53744., 48908., 50624., 52640., 54368.,
      37940., 39424., 41208., 42704., 38492., 40000., 41808., 43328., 39044.,
      40576., 42408., 43952., 39596., 41152., 43008., 44576., 29652., 30976.,
      32600., 33936., 34068., 35584., 37400., 38928., 34620., 36160., 38000.,
      39552., 35172., 36736., 38600., 40176., 35724., 37312., 39200., 40800.,
      36276., 37888., 39800., 41424., 36828., 38464., 40400., 42048., 37380.,
      39040., 41000., 42672., 34372., 35968., 37864., 39472., 34924., 36544.,
      38464., 40096., 35476., 37120., 39064., 40720., 36028., 37696., 39664.,
      41344., 30180., 31616., 33352., 34800., 30732., 32192., 33952., 35424.,
      31284., 32768., 34552., 36048., 35700., 37376., 39352., 41040., 36252.,
      37952., 39952., 41664., 36804., 38528., 40552., 42288., 37356., 39104.,
      41152., 42912., 37908., 39680., 41752., 43536., 38460., 40256., 42352.,
      44160., 39012., 40832., 42952., 44784., 40100., 41856., 43912., 45680.,
      40652., 42432., 44512., 46304., 29428., 30720., 32312., 33616., 29980.,
      31296., 32912., 34240., 30532., 31872., 33512., 34864., 31084., 32448.,
      34112., 35488., 23188., 24320., 25752., 26896., 27604., 28928., 30552.,
      31888., 28156., 29504., 31152., 32512., 28708., 30080., 31752., 33136.,
      29260., 30656., 32352., 33760., 29812., 31232., 32952., 34384., 30364.,
      31808., 33552., 35008., 30916., 32384., 34152., 35632.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22258., 22948., 23638., 24328., 25684., 26392., 27100., 27808., 23446.,
      24172., 24898., 25624., 27016., 27760., 28504., 29248., 24440., 25296.,
      26152., 27008., 28656., 29536., 30416., 31296., 25832., 26736., 27640.,
      28544., 30240., 31168., 32096., 33024., 16738., 17428., 18118., 18808.,
      20020., 20728., 21436., 22144., 17638., 18364., 19090., 19816., 21064.,
      21808., 22552., 23296., 15338., 15972., 16606., 17240., 18396., 19048.,
      19700., 20352., 13546., 13972., 14398., 14824., 15916., 16360., 16804.,
      17248., 14734., 15196., 15658., 16120., 17248., 17728., 18208., 18688.,
      17944., 18576., 19208., 19840., 21264., 21920., 22576., 23232., 19336.,
      20016., 20696., 21376., 22848., 23552., 24256., 24960., 10138., 10564.,
      10990., 11416., 12364., 12808., 13252., 13696., 11038., 11500., 11962.,
      12424., 13408., 13888., 14368., 14848., 9826.,  10260., 10694., 11128.,
      12084., 12536., 12988., 13440., 28763., 29702., 30641., 31580., 33470.,
      34436., 35402., 36368., 30449., 31442., 32435., 33428., 35372., 36392.,
      37412., 38432., 32404., 33592., 34780., 35968., 38280., 39504., 40728.,
      41952., 34364., 35624., 36884., 38144., 40528., 41824., 43120., 44416.,
      21251., 22190., 23129., 24068., 25742., 26708., 27674., 28640., 22505.,
      23498., 24491., 25484., 27212., 28232., 29252., 30272., 20047., 20966.,
      21885., 22804., 24458., 25404., 26350., 27296., 23759., 24494., 25229.,
      25964., 27650., 28412., 29174., 29936., 25445., 26234., 27023., 27812.,
      29552., 30368., 31184., 32000., 28484., 29528., 30572., 31616., 33784.,
      34864., 35944., 37024., 30444., 31560., 32676., 33792., 36032., 37184.,
      38336., 39488., 17879., 18614., 19349., 20084., 21554., 22316., 23078.,
      23840., 19133., 19922., 20711., 21500., 23024., 23840., 24656., 25472.,
      17763., 18542., 19321., 20100., 21614., 22420., 23226., 24032., 29379.,
      30294., 31209., 32124., 33990., 34932., 35874., 36816., 31065., 32034.,
      33003., 33972., 35892., 36888., 37884., 38880., 32500., 33656., 34812.,
      35968., 38248., 39440., 40632., 41824., 34460., 35688., 36916., 38144.,
      40496., 41760., 43024., 44288., 22059., 22974., 23889., 24804., 26454.,
      27396., 28338., 29280., 23313., 24282., 25251., 26220., 27924., 28920.,
      29916., 30912., 21367., 22262., 23157., 24052., 25682., 26604., 27526.,
      28448., 14058., 14484., 14910., 15336., 16428., 16872., 17316., 17760.,
      15246., 15708., 16170., 16632., 17760., 18240., 18720., 19200., 17944.,
      18576., 19208., 19840., 21264., 21920., 22576., 23232., 19336., 20016.,
      20696., 21376., 22848., 23552., 24256., 24960., 10650., 11076., 11502.,
      11928., 12876., 13320., 13764., 14208., 11550., 12012., 12474., 12936.,
      13920., 14400., 14880., 15360., 12386., 12820., 13254., 13688., 14644.,
      15096., 15548., 16000., 22754., 23428., 24102., 24776., 26116., 26808.,
      27500., 28192., 23942., 24652., 25362., 26072., 27448., 28176., 28904.,
      29632., 26744., 27600., 28456., 29312., 30960., 31840., 32720., 33600.,
      28136., 29040., 29944., 30848., 32544., 33472., 34400., 35328., 17362.,
      18036., 18710., 19384., 20580., 21272., 21964., 22656., 18262., 18972.,
      19682., 20392., 21624., 22352., 23080., 23808., 18586., 19268., 19950.,
      20632., 21836., 22536., 23236., 23936.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      44572., 45416., 46260., 47104., 48536., 49392., 50248., 51104., 45652.,
      46520., 47388., 48256., 49712., 50592., 51472., 52352., 46732., 47624.,
      48516., 49408., 50888., 51792., 52696., 53600., 47812., 48728., 49644.,
      50560., 52064., 52992., 53920., 54848., 45692., 46504., 47316., 48128.,
      49528., 50352., 51176., 52000., 46772., 47608., 48444., 49280., 50704.,
      51552., 52400., 53248., 47852., 48712., 49572., 50432., 51880., 52752.,
      53624., 54496., 36652., 37320., 37988., 38656., 39912., 40592., 41272.,
      41952., 37732., 38424., 39116., 39808., 41088., 41792., 42496., 43200.,
      27420., 28008., 28596., 29184., 30360., 30960., 31560., 32160., 28500.,
      29112., 29724., 30336., 31536., 32160., 32784., 33408., 29580., 30216.,
      30852., 31488., 32712., 33360., 34008., 34656., 30660., 31320., 31980.,
      32640., 33888., 34560., 35232., 35904., 21372., 21928., 22484., 23040.,
      24184., 24752., 25320., 25888., 30012., 30760., 31508., 32256., 33592.,
      34352., 35112., 35872., 31092., 31864., 32636., 33408., 34768., 35552.,
      36336., 37120., 32172., 32968., 33764., 34560., 35944., 36752., 37560.,
      38368., 33252., 34072., 34892., 35712., 37120., 37952., 38784., 39616.,
      34332., 35176., 36020., 36864., 38296., 39152., 40008., 40864., 35412.,
      36280., 37148., 38016., 39472., 40352., 41232., 42112., 31244., 32008.,
      32772., 33536., 34888., 35664., 36440., 37216., 28364., 29064., 29764.,
      30464., 31752., 32464., 33176., 33888., 29444., 30168., 30892., 31616.,
      32928., 33664., 34400., 35136., 30524., 31272., 32020., 32768., 34104.,
      34864., 35624., 36384., 31604., 32376., 33148., 33920., 35280., 36064.,
      36848., 37632., 26412., 27080., 27748., 28416., 29672., 30352., 31032.,
      31712., 27492., 28184., 28876., 29568., 30848., 31552., 32256., 32960.,
      28572., 29288., 30004., 30720., 32024., 32752., 33480., 34208., 37212.,
      38120., 39028., 39936., 41432., 42352., 43272., 44192., 38292., 39224.,
      40156., 41088., 42608., 43552., 44496., 45440., 39372., 40328., 41284.,
      42240., 43784., 44752., 45720., 46688., 40452., 41432., 42412., 43392.,
      44960., 45952., 46944., 47936., 40380., 41256., 42132., 43008., 44472.,
      45360., 46248., 47136., 41460., 42360., 43260., 44160., 45648., 46560.,
      47472., 48384., 42540., 43464., 44388., 45312., 46824., 47760., 48696.,
      49632., 47852., 48712., 49572., 50432., 51880., 52752., 53624., 54496.,
      48932., 49816., 50700., 51584., 53056., 53952., 54848., 55744., 38492.,
      39144., 39796., 40448., 41688., 42352., 43016., 43680., 39572., 40248.,
      40924., 41600., 42864., 43552., 44240., 44928., 40652., 41352., 42052.,
      42752., 44040., 44752., 45464., 46176., 41732., 42456., 43180., 43904.,
      45216., 45952., 46688., 47424., 34492., 35112., 35732., 36352., 37560.,
      38192., 38824., 39456., 21372., 21928., 22484., 23040., 24184., 24752.,
      25320., 25888., 22452., 23032., 23612., 24192., 25360., 25952., 26544.,
      27136., 23532., 24136., 24740., 25344., 26536., 27152., 27768., 28384.,
      24612., 25240., 25868., 26496., 27712., 28352., 28992., 29632., 25692.,
      26344., 26996., 27648., 28888., 29552., 30216., 30880., 26772., 27448.,
      28124., 28800., 30064., 30752., 31440., 32128., 27852., 28552., 29252.,
      29952., 31240., 31952., 32664., 33376.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14578., 15624., 16706., 17824., 16570., 17688., 18842., 20032., 16232.,
      17536., 18888., 20288., 18696., 20096., 21544., 23040., 12458., 13432.,
      14442., 15488., 14162., 15208., 16290., 17408., 11834., 12760., 13722.,
      14720., 12770., 13800., 14866., 15968., 14762., 15864., 17002., 18176.,
      19240., 20608., 22024., 23488., 21704., 23168., 24680., 26240., 10714.,
      11672., 12666., 13696., 12418., 13448., 14514., 15616., 12458., 13432.,
      14442., 15488., 24275., 25948., 27675., 29456., 27551., 29332., 31167.,
      33056., 28412., 30464., 32588., 34784., 32492., 34688., 36956., 39296.,
      20967., 22532., 24151., 25824., 23811., 25484., 27211., 28992., 18975.,
      20500., 22079., 23712., 22971., 24556., 26195., 27888., 26247., 27940.,
      29687., 31488., 31132., 33280., 35500., 37792., 35212., 37504., 39868.,
      42304., 20015., 21492., 23023., 24608., 22859., 24444., 26083., 27776.,
      20967., 22532., 24151., 25824., 24611., 26236., 27915., 29648., 27887.,
      29620., 31407., 33248., 28284., 30336., 32460., 34656., 32364., 34560.,
      36828., 39168., 21495., 23012., 24583., 26208., 24339., 25964., 27643.,
      29376., 20015., 21492., 23023., 24608., 17730., 18856., 20018., 21216.,
      20106., 21304., 22538., 23808., 22440., 23936., 25480., 27072., 25416.,
      27008., 28648., 30336., 15674., 16728., 17818., 18944., 17762., 18888.,
      20050., 21248., 16138., 17208., 18314., 19456., 19826., 21000., 22210.,
      23456., 22202., 23448., 24730., 26048., 20712., 22144., 23624., 25152.,
      23688., 25216., 26792., 28416., 17578., 18680., 19818., 20992., 19666.,
      20840., 22050., 23296., 15674., 16728., 17818., 18944.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45140., 47104., 49092., 51104., 46244., 48256., 50292., 52352., 47348.,
      49408., 51492., 53600., 48452., 50560., 52692., 54848., 46228., 48128.,
      50052., 52000., 47332., 49280., 51252., 53248., 48436., 50432., 52452.,
      54496., 37044., 38656., 40292., 41952., 38148., 39808., 41492., 43200.,
      27732., 29184., 30660., 32160., 28836., 30336., 31860., 33408., 29940.,
      31488., 33060., 34656., 31044., 32640., 34260., 35904., 21652., 23040.,
      24452., 25888., 30484., 32256., 34052., 35872., 31588., 33408., 35252.,
      37120., 32692., 34560., 36452., 38368., 33796., 35712., 37652., 39616.,
      34900., 36864., 38852., 40864., 36004., 38016., 40052., 42112., 31732.,
      33536., 35364., 37216., 28788., 30464., 32164., 33888., 29892., 31616.,
      33364., 35136., 30996., 32768., 34564., 36384., 32100., 33920., 35764.,
      37632., 26804., 28416., 30052., 31712., 27908., 29568., 31252., 32960.,
      29012., 30720., 32452., 34208., 37844., 39936., 42052., 44192., 38948.,
      41088., 43252., 45440., 40052., 42240., 44452., 46688., 41156., 43392.,
      45652., 47936., 40980., 43008., 45060., 47136., 42084., 44160., 46260.,
      48384., 43188., 45312., 47460., 49632., 48436., 50432., 52452., 54496.,
      49540., 51584., 53652., 55744., 38868., 40448., 42052., 43680., 39972.,
      41600., 43252., 44928., 41076., 42752., 44452., 46176., 42180., 43904.,
      45652., 47424., 34836., 36352., 37892., 39456., 21652., 23040., 24452.,
      25888., 22756., 24192., 25652., 27136., 23860., 25344., 26852., 28384.,
      24964., 26496., 28052., 29632., 26068., 27648., 29252., 30880., 27172.,
      28800., 30452., 32128., 28276., 29952., 31652., 33376.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15954., 16484., 17644., 18192., 19406., 19972., 21240., 21824., 18330.,
      18932., 20164., 20784., 22070., 22708., 24048., 24704., 19000., 19664.,
      21072., 21760., 23240., 23952., 25504., 26240., 21784., 22544., 24048.,
      24832., 26408., 27216., 28864., 29696., 11714., 12244., 13260., 13808.,
      14878., 15444., 16568., 17152., 13514., 14116., 15204., 15824., 16966.,
      17604., 18800., 19456., 11538., 12020., 12988., 13488., 14510., 15028.,
      16104., 16640., 15426., 15940., 17084., 17616., 18814., 19364., 20616.,
      21184., 17802., 18388., 19604., 20208., 21478., 22100., 23424., 24064.,
      20856., 21584., 23056., 23808., 25352., 26128., 27744., 28544., 23640.,
      24464., 26032., 26880., 28520., 29392., 31104., 32000., 11314., 11828.,
      12828., 13360., 14414., 14964., 16072., 16640., 13114., 13700., 14772.,
      15376., 16502., 17124., 18304., 18944., 11714., 12244., 13260., 13808.,
      14878., 15444., 16568., 17152., 24939., 25766., 27490., 28344., 30149.,
      31030., 32916., 33824., 28311., 29246., 31078., 32040., 33953., 34942.,
      36936., 37952., 28180., 29176., 31224., 32256., 34412., 35480., 37744.,
      38848., 32100., 33240., 35432., 36608., 38908., 40120., 42528., 43776.,
      18323., 19150., 20658., 21512., 23101., 23982., 25652., 26560., 20831.,
      21766., 23382., 24344., 26041., 27030., 28808., 29824., 16427., 17214.,
      18682., 19496., 21045., 21886., 23516., 24384., 24467., 25206., 26842.,
      27608., 29325., 30118., 31916., 32736., 27839., 28686., 30430., 31304.,
      33129., 34030., 35936., 36864., 29428., 30520., 32664., 33792., 36044.,
      37208., 39568., 40768., 33348., 34584., 36872., 38144., 40540., 41848.,
      44352., 45696., 18555., 19294., 20714., 21480., 22981., 23774., 25356.,
      26176., 21063., 21910., 23438., 24312., 25921., 26822., 28512., 29440.,
      18323., 19150., 20658., 21512., 23101., 23982., 25652., 26560., 25659.,
      26438., 28114., 28920., 30677., 31510., 33348., 34208., 29031., 29918.,
      31702., 32616., 34481., 35422., 37368., 38336., 27924., 28920., 30968.,
      32000., 34156., 35224., 37488., 38592., 31844., 32984., 35176., 36352.,
      38652., 39864., 42272., 43520., 19427., 20206., 21666., 22472., 24013.,
      24846., 26468., 27328., 21935., 22822., 24390., 25304., 26953., 27894.,
      29624., 30592., 18555., 19294., 20714., 21480., 22981., 23774., 25356.,
      26176., 18498., 19012., 20156., 20688., 21886., 22436., 23688., 24256.,
      20874., 21460., 22676., 23280., 24550., 25172., 26496., 27136., 20856.,
      21584., 23056., 23808., 25352., 26128., 27744., 28544., 23640., 24464.,
      26032., 26880., 28520., 29392., 31104., 32000., 14386., 14900., 15900.,
      16432., 17486., 18036., 19144., 19712., 16186., 16772., 17844., 18448.,
      19574., 20196., 21376., 22016., 14786., 15316., 16332., 16880., 17950.,
      18516., 19640., 20224., 19058., 19620., 20812., 21392., 22638., 23236.,
      24536., 25152., 21434., 22068., 23332., 23984., 25302., 25972., 27344.,
      28032., 19512., 20176., 21584., 22272., 23752., 24464., 26016., 26752.,
      22296., 23056., 24560., 25344., 26920., 27728., 29376., 30208., 14562.,
      15124., 16172., 16752., 17854., 18452., 19608., 20224., 16362., 16996.,
      18116., 18768., 19942., 20612., 21840., 22528., 14386., 14900., 15900.,
      16432., 17486., 18036., 19144., 19712.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      43804., 44712., 46184., 47104., 48612., 49544., 51088., 52032., 45964.,
      46920., 48440., 49408., 50964., 51944., 53536., 54528., 42876., 43752.,
      45192., 46080., 47556., 48456., 49968., 50880., 45036., 45960., 47448.,
      48384., 49908., 50856., 52416., 53376., 43996., 44840., 46248., 47104.,
      48548., 49416., 50896., 51776., 46156., 47048., 48504., 49408., 50900.,
      51816., 53344., 54272., 44092., 44904., 46280., 47104., 48516., 49352.,
      50800., 51648., 27964., 28520., 29640., 30208., 31364., 31944., 33136.,
      33728., 30124., 30728., 31896., 32512., 33716., 34344., 35584., 36224.,
      20892., 21416., 22504., 23040., 24164., 24712., 25872., 26432., 23052.,
      23624., 24760., 25344., 26516., 27112., 28320., 28928., 25212., 25832.,
      27016., 27648., 28868., 29512., 30768., 31424., 27372., 28040., 29272.,
      29952., 31220., 31912., 33216., 33920., 19164., 19752., 20904., 21504.,
      22692., 23304., 24528., 25152., 35292., 36136., 37544., 38400., 39844.,
      40712., 42192., 43072., 37452., 38344., 39800., 40704., 42196., 43112.,
      44640., 45568., 39612., 40552., 42056., 43008., 44548., 45512., 47088.,
      48064., 41772., 42760., 44312., 45312., 46900., 47912., 49536., 50560.,
      43804., 44712., 46184., 47104., 48612., 49544., 51088., 52032., 45964.,
      46920., 48440., 49408., 50964., 51944., 53536., 54528., 42876., 43752.,
      45192., 46080., 47556., 48456., 49968., 50880., 33916., 34536., 35720.,
      36352., 37572., 38216., 39472., 40128., 36076., 36744., 37976., 38656.,
      39924., 40616., 41920., 42624., 29916., 30504., 31656., 32256., 33444.,
      34056., 35280., 35904., 32076., 32712., 33912., 34560., 35796., 36456.,
      37728., 38400., 27964., 28520., 29640., 30208., 31364., 31944., 33136.,
      33728., 30124., 30728., 31896., 32512., 33716., 34344., 35584., 36224.,
      20892., 21416., 22504., 23040., 24164., 24712., 25872., 26432., 27804.,
      28584., 29928., 30720., 32100., 32904., 34320., 35136., 29964., 30792.,
      32184., 33024., 34452., 35304., 36768., 37632., 32124., 33000., 34440.,
      35328., 36804., 37704., 39216., 40128., 34284., 35208., 36696., 37632.,
      39156., 40104., 41664., 42624., 35292., 36136., 37544., 38400., 39844.,
      40712., 42192., 43072., 37452., 38344., 39800., 40704., 42196., 43112.,
      44640., 45568., 39612., 40552., 42056., 43008., 44548., 45512., 47088.,
      48064., 44092., 44904., 46280., 47104., 48516., 49352., 50800., 51648.,
      46252., 47112., 48536., 49408., 50868., 51752., 53248., 54144., 36892.,
      37544., 38760., 39424., 40676., 41352., 42640., 43328., 39052., 39752.,
      41016., 41728., 43028., 43752., 45088., 45824., 33916., 34536., 35720.,
      36352., 37572., 38216., 39472., 40128., 36076., 36744., 37976., 38656.,
      39924., 40616., 41920., 42624., 29916., 30504., 31656., 32256., 33444.,
      34056., 35280., 35904., 19164., 19752., 20904., 21504., 22692., 23304.,
      24528., 25152., 21324., 21960., 23160., 23808., 25044., 25704., 26976.,
      27648., 23484., 24168., 25416., 26112., 27396., 28104., 29424., 30144.,
      25644., 26376., 27672., 28416., 29748., 30504., 31872., 32640., 27804.,
      28584., 29928., 30720., 32100., 32904., 34320., 35136., 29964., 30792.,
      32184., 33024., 34452., 35304., 36768., 37632., 32124., 33000., 34440.,
      35328., 36804., 37704., 39216., 40128.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x11x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17490., 18020., 18550., 19080., 20276., 20824., 21372., 21920., 23206.,
      23772., 24338., 24904., 26280., 26864., 27448., 28032., 19866., 20468.,
      21070., 21672., 22940., 23560., 24180., 24800., 26158., 26796., 27434.,
      28072., 29520., 30176., 30832., 31488., 16088., 16752., 17416., 18080.,
      19440., 20128., 20816., 21504., 22984., 23696., 24408., 25120., 26720.,
      27456., 28192., 28928., 18488., 19248., 20008., 20768., 22224., 23008.,
      23792., 24576., 26152., 26960., 27768., 28576., 30272., 31104., 31936.,
      32768., 9010.,  9540.,  10070., 10600., 11508., 12056., 12604., 13152.,
      14150., 14716., 15282., 15848., 16936., 17520., 18104., 18688., 10234.,
      10836., 11438., 12040., 13020., 13640., 14260., 14880., 15950., 16588.,
      17226., 17864., 19024., 19680., 20336., 20992., 8194.,  8676.,  9158.,
      9640.,  10500., 11000., 11500., 12000., 12950., 13468., 13986., 14504.,
      15544., 16080., 16616., 17152., 16962., 17476., 17990., 18504., 19684.,
      20216., 20748., 21280., 22550., 23100., 23650., 24200., 25560., 26128.,
      26696., 27264., 19338., 19924., 20510., 21096., 22348., 22952., 23556.,
      24160., 25502., 26124., 26746., 27368., 28800., 29440., 30080., 30720.,
      17688., 18416., 19144., 19872., 21296., 22048., 22800., 23552., 25096.,
      25872., 26648., 27424., 29088., 29888., 30688., 31488., 20088., 20912.,
      21736., 22560., 24080., 24928., 25776., 26624., 28264., 29136., 30008.,
      30880., 32640., 33536., 34432., 35328., 8738.,  9252.,  9766.,  10280.,
      11172., 11704., 12236., 12768., 13750., 14300., 14850., 15400., 16472.,
      17040., 17608., 18176., 9962.,  10548., 11134., 11720., 12684., 13288.,
      13892., 14496., 15550., 16172., 16794., 17416., 18560., 19200., 19840.,
      20480., 9010.,  9540.,  10070., 10600., 11508., 12056., 12604., 13152.,
      14150., 14716., 15282., 15848., 16936., 17520., 18104., 18688., 27803.,
      28630., 29457., 30284., 32110., 32964., 33818., 34672., 36633., 37514.,
      38395., 39276., 41372., 42280., 43188., 44096., 31367., 32302., 33237.,
      34172., 36106., 37068., 38030., 38992., 41061., 42050., 43039., 44028.,
      46232., 47248., 48264., 49280., 25668., 26664., 27660., 28656., 30696.,
      31728., 32760., 33792., 36012., 37080., 38148., 39216., 41616., 42720.,
      43824., 44928., 29268., 30408., 31548., 32688., 34872., 36048., 37224.,
      38400., 40764., 41976., 43188., 44400., 46944., 48192., 49440., 50688.,
      14571., 15398., 16225., 17052., 18446., 19300., 20154., 21008., 22537.,
      23418., 24299., 25180., 26844., 27752., 28660., 29568., 16407., 17342.,
      18277., 19212., 20714., 21676., 22638., 23600., 25237., 26226., 27215.,
      28204., 29976., 30992., 32008., 33024., 12867., 13654., 14441., 15228.,
      16582., 17396., 18210., 19024., 20513., 21354., 22195., 23036., 24660.,
      25528., 26396., 27264., 24899., 25638., 26377., 27116., 28854., 29620.,
      30386., 31152., 33025., 33818., 34611., 35404., 37412., 38232., 39052.,
      39872., 28463., 29310., 30157., 31004., 32850., 33724., 34598., 35472.,
      37453., 38354., 39255., 40156., 42272., 43200., 44128., 45056., 28068.,
      29160., 30252., 31344., 33480., 34608., 35736., 36864., 39180., 40344.,
      41508., 42672., 45168., 46368., 47568., 48768., 31668., 32904., 34140.,
      35376., 37656., 38928., 40200., 41472., 43932., 45240., 46548., 47856.,
      50496., 51840., 53184., 54528., 13075., 13814., 14553., 15292., 16598.,
      17364., 18130., 18896., 20337., 21130., 21923., 22716., 24292., 25112.,
      25932., 26752., 14911., 15758., 16605., 17452., 18866., 19740., 20614.,
      21488., 23037., 23938., 24839., 25740., 27424., 28352., 29280., 30208.,
      14571., 15398., 16225., 17052., 18446., 19300., 20154., 21008., 22537.,
      23418., 24299., 25180., 26844., 27752., 28660., 29568., 25195., 25974.,
      26753., 27532., 29310., 30116., 30922., 31728., 33641., 34474., 35307.,
      36140., 38188., 39048., 39908., 40768., 28759., 29646., 30533., 31420.,
      33306., 34220., 35134., 36048., 38069., 39010., 39951., 40892., 43048.,
      44016., 44984., 45952., 25156., 26152., 27148., 28144., 30184., 31216.,
      32248., 33280., 35500., 36568., 37636., 38704., 41104., 42208., 43312.,
      44416., 28756., 29896., 31036., 32176., 34360., 35536., 36712., 37888.,
      40252., 41464., 42676., 43888., 46432., 47680., 48928., 50176., 12731.,
      13510., 14289., 15068., 16414., 17220., 18026., 18832., 20313., 21146.,
      21979., 22812., 24428., 25288., 26148., 27008., 14567., 15454., 16341.,
      17228., 18682., 19596., 20510., 21424., 23013., 23954., 24895., 25836.,
      27560., 28528., 29496., 30464., 13075., 13814., 14553., 15292., 16598.,
      17364., 18130., 18896., 20337., 21130., 21923., 22716., 24292., 25112.,
      25932., 26752., 16962., 17476., 17990., 18504., 19684., 20216., 20748.,
      21280., 22550., 23100., 23650., 24200., 25560., 26128., 26696., 27264.,
      19338., 19924., 20510., 21096., 22348., 22952., 23556., 24160., 25502.,
      26124., 26746., 27368., 28800., 29440., 30080., 30720., 17688., 18416.,
      19144., 19872., 21296., 22048., 22800., 23552., 25096., 25872., 26648.,
      27424., 29088., 29888., 30688., 31488., 20088., 20912., 21736., 22560.,
      24080., 24928., 25776., 26624., 28264., 29136., 30008., 30880., 32640.,
      33536., 34432., 35328., 8738.,  9252.,  9766.,  10280., 11172., 11704.,
      12236., 12768., 13750., 14300., 14850., 15400., 16472., 17040., 17608.,
      18176., 9962.,  10548., 11134., 11720., 12684., 13288., 13892., 14496.,
      15550., 16172., 16794., 17416., 18560., 19200., 19840., 20480., 9010.,
      9540.,  10070., 10600., 11508., 12056., 12604., 13152., 14150., 14716.,
      15282., 15848., 16936., 17520., 18104., 18688., 18546., 19108., 19670.,
      20232., 21460., 22040., 22620., 23200., 24518., 25116., 25714., 26312.,
      27720., 28336., 28952., 29568., 20922., 21556., 22190., 22824., 24124.,
      24776., 25428., 26080., 27470., 28140., 28810., 29480., 30960., 31648.,
      32336., 33024., 17112., 17776., 18440., 19104., 20464., 21152., 21840.,
      22528., 24008., 24720., 25432., 26144., 27744., 28480., 29216., 29952.,
      19512., 20272., 21032., 21792., 23248., 24032., 24816., 25600., 27176.,
      27984., 28792., 29600., 31296., 32128., 32960., 33792., 9554.,  10116.,
      10678., 11240., 12180., 12760., 13340., 13920., 14950., 15548., 16146.,
      16744., 17864., 18480., 19096., 19712., 10778., 11412., 12046., 12680.,
      13692., 14344., 14996., 15648., 16750., 17420., 18090., 18760., 19952.,
      20640., 21328., 22016., 8738.,  9252.,  9766.,  10280., 11172., 11704.,
      12236., 12768., 13750., 14300., 14850., 15400., 16472., 17040., 17608.,
      18176.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x11x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8556.,  8888.,  9220.,  9552.,  10232., 10576., 10920., 11264., 12004.,
      12360., 12716., 13072., 13872., 14240., 14608., 14976., 9756.,  10136.,
      10516., 10896., 11624., 12016., 12408., 12800., 13588., 13992., 14396.,
      14800., 15648., 16064., 16480., 16896., 9868.,  10232., 10596., 10960.,
      11672., 12048., 12424., 12800., 13572., 13960., 14348., 14736., 15568.,
      15968., 16368., 16768., 11068., 11480., 11892., 12304., 13064., 13488.,
      13912., 14336., 15156., 15592., 16028., 16464., 17344., 17792., 18240.,
      18688., 7020.,  7352.,  7684.,  8016.,  8696.,  9040.,  9384.,  9728.,
      10468., 10824., 11180., 11536., 12336., 12704., 13072., 13440., 8220.,
      8600.,  8980.,  9360.,  10088., 10480., 10872., 11264., 12052., 12456.,
      12860., 13264., 14112., 14528., 14944., 15360., 9356.,  9720.,  10084.,
      10448., 11160., 11536., 11912., 12288., 13060., 13448., 13836., 14224.,
      15056., 15456., 15856., 16256., 9356.,  9720.,  10084., 10448., 11160.,
      11536., 11912., 12288., 13060., 13448., 13836., 14224., 15056., 15456.,
      15856., 16256., 10556., 10968., 11380., 11792., 12552., 12976., 13400.,
      13824., 14644., 15080., 15516., 15952., 16832., 17280., 17728., 18176.,
      8556.,  8888.,  9220.,  9552.,  10232., 10576., 10920., 11264., 12004.,
      12360., 12716., 13072., 13872., 14240., 14608., 14976., 9756.,  10136.,
      10516., 10896., 11624., 12016., 12408., 12800., 13588., 13992., 14396.,
      14800., 15648., 16064., 16480., 16896., 9868.,  10232., 10596., 10960.,
      11672., 12048., 12424., 12800., 13572., 13960., 14348., 14736., 15568.,
      15968., 16368., 16768., 11068., 11480., 11892., 12304., 13064., 13488.,
      13912., 14336., 15156., 15592., 16028., 16464., 17344., 17792., 18240.,
      18688., 7020.,  7352.,  7684.,  8016.,  8696.,  9040.,  9384.,  9728.,
      10468., 10824., 11180., 11536., 12336., 12704., 13072., 13440., 9068.,
      9400.,  9732.,  10064., 10744., 11088., 11432., 11776., 12516., 12872.,
      13228., 13584., 14384., 14752., 15120., 15488., 10268., 10648., 11028.,
      11408., 12136., 12528., 12920., 13312., 14100., 14504., 14908., 15312.,
      16160., 16576., 16992., 17408., 9356.,  9720.,  10084., 10448., 11160.,
      11536., 11912., 12288., 13060., 13448., 13836., 14224., 15056., 15456.,
      15856., 16256., 10556., 10968., 11380., 11792., 12552., 12976., 13400.,
      13824., 14644., 15080., 15516., 15952., 16832., 17280., 17728., 18176.,
      8556.,  8888.,  9220.,  9552.,  10232., 10576., 10920., 11264., 12004.,
      12360., 12716., 13072., 13872., 14240., 14608., 14976., 9756.,  10136.,
      10516., 10896., 11624., 12016., 12408., 12800., 13588., 13992., 14396.,
      14800., 15648., 16064., 16480., 16896., 9868.,  10232., 10596., 10960.,
      11672., 12048., 12424., 12800., 13572., 13960., 14348., 14736., 15568.,
      15968., 16368., 16768., 7820.,  8184.,  8548.,  8912.,  9624.,  10000.,
      10376., 10752., 11524., 11912., 12300., 12688., 13520., 13920., 14320.,
      14720., 9020.,  9432.,  9844.,  10256., 11016., 11440., 11864., 12288.,
      13108., 13544., 13980., 14416., 15296., 15744., 16192., 16640., 9068.,
      9400.,  9732.,  10064., 10744., 11088., 11432., 11776., 12516., 12872.,
      13228., 13584., 14384., 14752., 15120., 15488., 10268., 10648., 11028.,
      11408., 12136., 12528., 12920., 13312., 14100., 14504., 14908., 15312.,
      16160., 16576., 16992., 17408., 9356.,  9720.,  10084., 10448., 11160.,
      11536., 11912., 12288., 13060., 13448., 13836., 14224., 15056., 15456.,
      15856., 16256., 10556., 10968., 11380., 11792., 12552., 12976., 13400.,
      13824., 14644., 15080., 15516., 15952., 16832., 17280., 17728., 18176.,
      8556.,  8888.,  9220.,  9552.,  10232., 10576., 10920., 11264., 12004.,
      12360., 12716., 13072., 13872., 14240., 14608., 14976., 8556.,  8888.,
      9220.,  9552.,  10232., 10576., 10920., 11264., 12004., 12360., 12716.,
      13072., 13872., 14240., 14608., 14976., 9756.,  10136., 10516., 10896.,
      11624., 12016., 12408., 12800., 13588., 13992., 14396., 14800., 15648.,
      16064., 16480., 16896., 7820.,  8184.,  8548.,  8912.,  9624.,  10000.,
      10376., 10752., 11524., 11912., 12300., 12688., 13520., 13920., 14320.,
      14720., 9020.,  9432.,  9844.,  10256., 11016., 11440., 11864., 12288.,
      13108., 13544., 13980., 14416., 15296., 15744., 16192., 16640., 9068.,
      9400.,  9732.,  10064., 10744., 11088., 11432., 11776., 12516., 12872.,
      13228., 13584., 14384., 14752., 15120., 15488., 10268., 10648., 11028.,
      11408., 12136., 12528., 12920., 13312., 14100., 14504., 14908., 15312.,
      16160., 16576., 16992., 17408., 9356.,  9720.,  10084., 10448., 11160.,
      11536., 11912., 12288., 13060., 13448., 13836., 14224., 15056., 15456.,
      15856., 16256., 9356.,  9720.,  10084., 10448., 11160., 11536., 11912.,
      12288., 13060., 13448., 13836., 14224., 15056., 15456., 15856., 16256.,
      10556., 10968., 11380., 11792., 12552., 12976., 13400., 13824., 14644.,
      15080., 15516., 15952., 16832., 17280., 17728., 18176., 8556.,  8888.,
      9220.,  9552.,  10232., 10576., 10920., 11264., 12004., 12360., 12716.,
      13072., 13872., 14240., 14608., 14976., 9756.,  10136., 10516., 10896.,
      11624., 12016., 12408., 12800., 13588., 13992., 14396., 14800., 15648.,
      16064., 16480., 16896., 7820.,  8184.,  8548.,  8912.,  9624.,  10000.,
      10376., 10752., 11524., 11912., 12300., 12688., 13520., 13920., 14320.,
      14720., 9020.,  9432.,  9844.,  10256., 11016., 11440., 11864., 12288.,
      13108., 13544., 13980., 14416., 15296., 15744., 16192., 16640., 9068.,
      9400.,  9732.,  10064., 10744., 11088., 11432., 11776., 12516., 12872.,
      13228., 13584., 14384., 14752., 15120., 15488., 7020.,  7352.,  7684.,
      8016.,  8696.,  9040.,  9384.,  9728.,  10468., 10824., 11180., 11536.,
      12336., 12704., 13072., 13440., 8220.,  8600.,  8980.,  9360.,  10088.,
      10480., 10872., 11264., 12052., 12456., 12860., 13264., 14112., 14528.,
      14944., 15360., 9356.,  9720.,  10084., 10448., 11160., 11536., 11912.,
      12288., 13060., 13448., 13836., 14224., 15056., 15456., 15856., 16256.,
      10556., 10968., 11380., 11792., 12552., 12976., 13400., 13824., 14644.,
      15080., 15516., 15952., 16832., 17280., 17728., 18176., 8556.,  8888.,
      9220.,  9552.,  10232., 10576., 10920., 11264., 12004., 12360., 12716.,
      13072., 13872., 14240., 14608., 14976., 9756.,  10136., 10516., 10896.,
      11624., 12016., 12408., 12800., 13588., 13992., 14396., 14800., 15648.,
      16064., 16480., 16896., 7820.,  8184.,  8548.,  8912.,  9624.,  10000.,
      10376., 10752., 11524., 11912., 12300., 12688., 13520., 13920., 14320.,
      14720.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21176., 21368., 30834., 31113., 31392., 20076., 20256., 27003., 27264.,
      39258., 39636., 40014., 25524., 25767., 29874., 30135., 43416., 43794.,
      44172., 28197., 28440., 32745., 33006., 47574., 47952., 48330., 30870.,
      31113., 31008., 26917., 42772., 43150., 43528., 25095., 25338., 19052.,
      19208., 27549., 27774., 27999., 17784., 17928., 20768., 20924., 30024.,
      30249., 30474., 19368., 19512.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16746., 16824., 16902., 16980., 17058., 17136., 17214., 17604., 17682.,
      17760., 17838., 17916., 17994., 18072., 18462., 18540., 18618., 18696.,
      18774., 18852., 18930., 19320., 19398., 19476., 19554., 19632., 19710.,
      19788., 20178., 20256., 20334., 20412., 20490., 20568., 20646., 21036.,
      21114., 21192., 21270., 21348., 21426., 21504., 21894., 21972., 22050.,
      22128., 22206., 22284., 22362.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25200., 25968., 25572., 26352., 36708., 37860., 37248., 38418., 37788.,
      38976., 24012., 24792., 24360., 25152., 30780., 31734., 31284., 32256.,
      44829., 46260., 45558., 47016., 46287., 47772., 29340., 30312., 29808.,
      30798., 36324., 37476., 36828., 37998., 52848., 54576., 53577., 55332.,
      54306., 56088., 34488., 35658., 34956., 36144., 41868., 43218., 42372.,
      43740., 60867., 62892., 61596., 63648., 55541., 57492., 39636., 41004.,
      40104., 41490., 29620., 30784., 23724., 24650., 38422., 39976., 39151.,
      40732., 39880., 41488., 21872., 22798., 22340., 23284., 23892., 24792.,
      24192., 25104., 34548., 35898., 34980., 36348., 35412., 36798., 22368.,
      23280., 22644., 23568., 27192., 28224., 27492., 28536., 39300., 40848.,
      39732., 41298., 40164., 41748., 25404., 26448., 25680., 26736.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31608., 33492., 31752., 33648., 31896., 33804., 32040., 33960., 32184.,
      34116., 32328., 34272., 32472., 34428., 33192., 35208., 33336., 35364.,
      33480., 35520., 33624., 35676., 33768., 35832., 33912., 35988., 34056.,
      36144., 34776., 36924., 34920., 37080., 35064., 37236., 35208., 37392.,
      35352., 37548., 35496., 37704., 35640., 37860., 36360., 38640., 36504.,
      38796., 36648., 38952., 36792., 39108., 36936., 39264., 37080., 39420.,
      37224., 39576., 37944., 40356., 38088., 40512., 38232., 40668., 38376.,
      40824., 38520., 40980., 38664., 41136., 38808., 41292., 39528., 42072.,
      39672., 42228., 39816., 42384., 39960., 42540., 40104., 42696., 40248.,
      42852., 40392., 43008., 41112., 43788., 41256., 43944., 41400., 44100.,
      41544., 44256., 41688., 44412., 41832., 44568., 41976., 44724.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11872., 12256., 12640., 13024., 12220., 12616., 13012., 13408., 17928.,
      18504., 19080., 19656., 18478., 19072., 19666., 20260., 19028., 19640.,
      20252., 20864., 11980., 12376., 12772., 13168., 12344., 12752., 13160.,
      13568., 16958., 17528., 18098., 18668., 17436., 18024., 18612., 19200.,
      25763., 26618., 27473., 28328., 26490., 27372., 28254., 29136., 27217.,
      28126., 29035., 29944., 17132., 17720., 18308., 18896., 17602., 18208.,
      18814., 19420., 15112., 15688., 16264., 16840., 15590., 16184., 16778.,
      17372., 26656., 27616., 28576., 29536., 21303., 22098., 22893., 23688.,
      22030., 22852., 23674., 24496., 15966., 16560., 17154., 17748., 16436.,
      17048., 17660., 18272., 14546., 15128., 15710., 16292., 15024., 15624.,
      16224., 16824., 23517., 24390., 25263., 26136., 24244., 25144., 26044.,
      26944., 22347., 23210., 24073., 24936., 16080., 16680., 17280., 17880.,
      16550., 17168., 17786., 18404., 14492., 15080., 15668., 16256., 12794.,
      13272., 13750., 14228., 21914., 22700., 23486., 24272., 22641., 23454.,
      24267., 25080., 23368., 24208., 25048., 25888., 10946., 11424., 11902.,
      12380., 11416., 11912., 12408., 12904., 13732., 14248., 14764., 15280.,
      14064., 14592., 15120., 15648., 19170., 19944., 20718., 21492., 19632.,
      20424., 21216., 22008., 20094., 20904., 21714., 22524., 11952., 12480.,
      13008., 13536., 12236., 12776., 13316., 13856., 12584., 13040., 13496.,
      13952., 12916., 13384., 13852., 14320., 19452., 20232., 21012., 21792.,
      16138., 16744., 17350., 17956., 16600., 17224., 17848., 18472., 11044.,
      11512., 11980., 12448., 11328., 11808., 12288., 12768.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21396., 22256., 23116., 23976., 21672., 22544., 23416., 24288., 21948.,
      22832., 23716., 24600., 22224., 23120., 24016., 24912., 22500., 23408.,
      24316., 25224., 22776., 23696., 24616., 25536., 23052., 23984., 24916.,
      25848., 24432., 25424., 26416., 27408., 24708., 25712., 26716., 27720.,
      24984., 26000., 27016., 28032., 25260., 26288., 27316., 28344., 25536.,
      26576., 27616., 28656., 25812., 26864., 27916., 28968., 26088., 27152.,
      28216., 29280., 27468., 28592., 29716., 30840., 27744., 28880., 30016.,
      31152., 28020., 29168., 30316., 31464., 28296., 29456., 30616., 31776.,
      28572., 29744., 30916., 32088., 28848., 30032., 31216., 32400., 29124.,
      30320., 31516., 32712., 30504., 31760., 33016., 34272., 30780., 32048.,
      33316., 34584., 31056., 32336., 33616., 34896., 31332., 32624., 33916.,
      35208., 31608., 32912., 34216., 35520., 31884., 33200., 34516., 35832.,
      32160., 33488., 34816., 36144., 33540., 34928., 36316., 37704., 33816.,
      35216., 36616., 38016., 34092., 35504., 36916., 38328., 34368., 35792.,
      37216., 38640., 34644., 36080., 37516., 38952., 34920., 36368., 37816.,
      39264., 35196., 36656., 38116., 39576., 36576., 38096., 39616., 41136.,
      36852., 38384., 39916., 41448., 37128., 38672., 40216., 41760., 37404.,
      38960., 40516., 42072., 37680., 39248., 40816., 42384., 37956., 39536.,
      41116., 42696., 38232., 39824., 41416., 43008., 39612., 41264., 42916.,
      44568., 39888., 41552., 43216., 44880., 40164., 41840., 43516., 45192.,
      40440., 42128., 43816., 45504., 40716., 42416., 44116., 45816., 40992.,
      42704., 44416., 46128., 41268., 42992., 44716., 46440.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23916., 25056., 24660., 25824., 34860., 36552., 35940., 37668., 37020.,
      38784., 23100., 24240., 23796., 24960., 34944., 36588., 35952., 37632.,
      50913., 53352., 52371., 54864., 53829., 56376., 33636., 35280., 34572.,
      36252., 30544., 32200., 31552., 33244., 51463., 54112., 42553., 44872.,
      44011., 46384., 29212., 30868., 30148., 31840., 35616., 37284., 36624.,
      38328., 51885., 54360., 53343., 55872., 48017., 50472., 34260., 35928.,
      35196., 36900., 28912., 30592., 23520., 24980., 37459., 39760., 38917.,
      41272., 40375., 42784., 21644., 23068., 22580., 24040., 25980., 27312.,
      26580., 27936., 37560., 39540., 38424., 40440., 39288., 41340., 24492.,
      25824., 25044., 26400., 19396., 20608., 19996., 21232., 33880., 35872.,
      26680., 28324., 27544., 29224., 18148., 19360., 18700., 19936.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22112., 23976., 22400., 24288., 22688., 24600., 22976., 24912., 23264.,
      25224., 23552., 25536., 23840., 25848., 25280., 27408., 25568., 27720.,
      25856., 28032., 26144., 28344., 26432., 28656., 26720., 28968., 27008.,
      29280., 28448., 30840., 28736., 31152., 29024., 31464., 29312., 31776.,
      29600., 32088., 29888., 32400., 30176., 32712., 31616., 34272., 31904.,
      34584., 32192., 34896., 32480., 35208., 32768., 35520., 33056., 35832.,
      33344., 36144., 34784., 37704., 35072., 38016., 35360., 38328., 35648.,
      38640., 35936., 38952., 36224., 39264., 36512., 39576., 37952., 41136.,
      38240., 41448., 38528., 41760., 38816., 42072., 39104., 42384., 39392.,
      42696., 39680., 43008., 41120., 44568., 41408., 44880., 41696., 45192.,
      41984., 45504., 42272., 45816., 42560., 46128., 42848., 46440.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10468., 10840., 11584., 11968., 11164., 11560., 12328., 12736., 17066.,
      17624., 18768., 19344., 18166., 18760., 19940., 20552., 19266., 19896.,
      21112., 21760., 12204., 12600., 13384., 13792., 12932., 13352., 14160.,
      14592., 15198., 15744., 16804., 17368., 16154., 16736., 17832., 18432.,
      22959., 23682., 25186., 25936., 24413., 25190., 26748., 27552., 25867.,
      26698., 28310., 29168., 17858., 18440., 19528., 20128., 13038., 13528.,
      14524., 15032., 14578., 15136., 16208., 16784., 15534., 16128., 17236.,
      17848., 24489., 25422., 27136., 28096., 19863., 20658., 22234., 23056.,
      21317., 22166., 23796., 24672., 14502., 15096., 16196., 16808., 15442.,
      16072., 17208., 17856., 14470., 15040., 16124., 16712., 15426., 16032.,
      17152., 17776., 24547., 25498., 27230., 28208., 26001., 27006., 28792.,
      29824., 21055., 21858., 23442., 24272., 15754., 16360., 17472., 18096.,
      16694., 17336., 18484., 19144., 16154., 16736., 17832., 18432., 14934.,
      15424., 16428., 16936., 24413., 25190., 26748., 27552., 25867., 26698.,
      28310., 29168., 27321., 28206., 29872., 30784., 13038., 13528., 14524.,
      15032., 13978., 14504., 15536., 16080., 11708., 12152., 12952., 13408.,
      12372., 12840., 13664., 14144., 13366., 13936., 15004., 15592., 14290.,
      14896., 16000., 16624., 15214., 15856., 16996., 17656., 10500., 10968.,
      11744., 12224., 6844.,  7208.,  7880.,  8256.,  8388.,  8712.,  9392.,
      9728.,  9052.,  9400.,  10104., 10464., 13674., 14256., 15336., 15936.,
      10822., 11248., 12172., 12616., 11746., 12208., 13168., 13648., 7660.,
      8008.,  8664.,  9024.,  8228.,  8600.,  9280.,  9664.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18964., 19648., 20632., 21328., 19516., 20224., 21232., 21952., 20068.,
      20800., 21832., 22576., 20620., 21376., 22432., 23200., 21172., 21952.,
      23032., 23824., 21724., 22528., 23632., 24448., 22276., 23104., 24232.,
      25072., 19276., 20096., 21216., 22048., 10868., 11456., 12344., 12944.,
      11420., 12032., 12944., 13568., 11972., 12608., 13544., 14192., 12524.,
      13184., 14144., 14816., 8212.,  8640.,  9368.,  9808.,  8764.,  9216.,
      9968.,  10432., 10372., 10816., 11560., 12016., 10924., 11392., 12160.,
      12640., 11476., 11968., 12760., 13264., 12028., 12544., 13360., 13888.,
      12580., 13120., 13960., 14512., 13132., 13696., 14560., 15136., 13684.,
      14272., 15160., 15760., 16444., 17152., 18160., 18880., 16996., 17728.,
      18760., 19504., 17548., 18304., 19360., 20128., 18100., 18880., 19960.,
      20752., 18652., 19456., 20560., 21376., 19204., 20032., 21160., 22000.,
      19756., 20608., 21760., 22624., 22516., 23488., 24760., 25744., 23068.,
      24064., 25360., 26368., 23620., 24640., 25960., 26992., 24172., 25216.,
      26560., 27616., 24724., 25792., 27160., 28240., 25276., 26368., 27760.,
      28864., 25828., 26944., 28360., 29488., 23852., 24960., 26368., 27488.,
      17492., 18368., 19544., 20432., 18044., 18944., 20144., 21056., 18596.,
      19520., 20744., 21680., 19148., 20096., 21344., 22304., 16884., 17600.,
      18616., 19344., 17436., 18176., 19216., 19968., 20068., 20800., 21832.,
      22576., 20620., 21376., 22432., 23200., 21172., 21952., 23032., 23824.,
      21724., 22528., 23632., 24448., 22276., 23104., 24232., 25072., 22828.,
      23680., 24832., 25696., 17620., 18368., 19416., 20176.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9108.,  9480.,  9852.,  10224., 11008., 11392., 11776., 12160., 9836.,
      10232., 10628., 11024., 11832., 12240., 12648., 13056., 15142., 15700.,
      16258., 16816., 18016., 18592., 19168., 19744., 16282., 16876., 17470.,
      18064., 19300., 19912., 20524., 21136., 17422., 18052., 18682., 19312.,
      20584., 21232., 21880., 22528., 11916., 12312., 12708., 13104., 13944.,
      14352., 14760., 15168., 12708., 13128., 13548., 13968., 14832., 15264.,
      15696., 16128., 17370., 17916., 18462., 19008., 20116., 20680., 21244.,
      21808., 18350., 18932., 19514., 20096., 21240., 21840., 22440., 23040.,
      28619., 29342., 30065., 30788., 32342., 33092., 33842., 34592., 30065.,
      30842., 31619., 32396., 34004., 34808., 35612., 36416., 31511., 32342.,
      33173., 34004., 35666., 36524., 37382., 38240., 21758., 22340., 22922.,
      23504., 24632., 25232., 25832., 26432., 15410., 15900., 16390., 16880.,
      17916., 18424., 18932., 19440., 14454., 15012., 15570., 16128., 17248.,
      17824., 18400., 18976., 15434., 16028., 16622., 17216., 18372., 18984.,
      19596., 20208., 24173., 25106., 26039., 26972., 28736., 29696., 30656.,
      31616., 17747., 18542., 19337., 20132., 21758., 22580., 23402., 24224.,
      19193., 20042., 20891., 21740., 23420., 24296., 25172., 26048., 13370.,
      13964., 14558., 15152., 16292., 16904., 17516., 18128., 14318., 14948.,
      15578., 16208., 17384., 18032., 18680., 19328., 12562., 13132., 13702.,
      14272., 15404., 15992., 16580., 17168., 13542., 14148., 14754., 15360.,
      16528., 17152., 17776., 18400., 21071., 22022., 22973., 23924., 25706.,
      26684., 27662., 28640., 22517., 23522., 24527., 25532., 27368., 28400.,
      29432., 30464., 19611., 20414., 21217., 22020., 23654., 24484., 25314.,
      26144., 14198., 14804., 15410., 16016., 17168., 17792., 18416., 19040.,
      15146., 15788., 16430., 17072., 18260., 18920., 19580., 20240., 18350.,
      18932., 19514., 20096., 21240., 21840., 22440., 23040., 19202., 19692.,
      20182., 20672., 21724., 22232., 22740., 23248., 30065., 30842., 31619.,
      32396., 34004., 34808., 35612., 36416., 31511., 32342., 33173., 34004.,
      35666., 36524., 37382., 38240., 32957., 33842., 34727., 35612., 37328.,
      38240., 39152., 40064., 15410., 15900., 16390., 16880., 17916., 18424.,
      18932., 19440., 16358., 16884., 17410., 17936., 19008., 19552., 20096.,
      20640., 13500., 13944., 14388., 14832., 15720., 16176., 16632., 17088.,
      14292., 14760., 15228., 15696., 16608., 17088., 17568., 18048., 14002.,
      14572., 15142., 15712., 16876., 17464., 18052., 18640., 15046., 15652.,
      16258., 16864., 18064., 18688., 19312., 19936., 16090., 16732., 17374.,
      18016., 19252., 19912., 20572., 21232., 10548., 11016., 11484., 11952.,
      12768., 13248., 13728., 14208., 6924.,  7288.,  7652.,  8016.,  8728.,
      9104.,  9480.,  9856.,  9540.,  9864.,  10188., 10512., 11280., 11616.,
      11952., 12288., 10332., 10680., 11028., 11376., 12168., 12528., 12888.,
      13248., 14350., 14932., 15514., 16096., 17272., 17872., 18472., 19072.,
      12130., 12556., 12982., 13408., 14428., 14872., 15316., 15760., 13174.,
      13636., 14098., 14560., 15616., 16096., 16576., 17056., 7548.,  7896.,
      8244.,  8592.,  9288.,  9648.,  10008., 10368., 8148.,  8520.,  8892.,
      9264.,  9984.,  10368., 10752., 11136.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37244., 37928., 38612., 39296., 40568., 41264., 41960., 42656., 38324.,
      39032., 39740., 40448., 41744., 42464., 43184., 43904., 39404., 40136.,
      40868., 41600., 42920., 43664., 44408., 45152., 40484., 41240., 41996.,
      42752., 44096., 44864., 45632., 46400., 41564., 42344., 43124., 43904.,
      45272., 46064., 46856., 47648., 42644., 43448., 44252., 45056., 46448.,
      47264., 48080., 48896., 43724., 44552., 45380., 46208., 47624., 48464.,
      49304., 50144., 37732., 38552., 39372., 40192., 41600., 42432., 43264.,
      44096., 21148., 21736., 22324., 22912., 24088., 24688., 25288., 25888.,
      22228., 22840., 23452., 24064., 25264., 25888., 26512., 27136., 23308.,
      23944., 24580., 25216., 26440., 27088., 27736., 28384., 24388., 25048.,
      25708., 26368., 27616., 28288., 28960., 29632., 15996., 16424., 16852.,
      17280., 18296., 18736., 19176., 19616., 17076., 17528., 17980., 18432.,
      19472., 19936., 20400., 20864., 20300., 20744., 21188., 21632., 22664.,
      23120., 23576., 24032., 21380., 21848., 22316., 22784., 23840., 24320.,
      24800., 25280., 22460., 22952., 23444., 23936., 25016., 25520., 26024.,
      26528., 23540., 24056., 24572., 25088., 26192., 26720., 27248., 27776.,
      24620., 25160., 25700., 26240., 27368., 27920., 28472., 29024., 25700.,
      26264., 26828., 27392., 28544., 29120., 29696., 30272., 26780., 27368.,
      27956., 28544., 29720., 30320., 30920., 31520., 32180., 32888., 33596.,
      34304., 35600., 36320., 37040., 37760., 33260., 33992., 34724., 35456.,
      36776., 37520., 38264., 39008., 34340., 35096., 35852., 36608., 37952.,
      38720., 39488., 40256., 35420., 36200., 36980., 37760., 39128., 39920.,
      40712., 41504., 36500., 37304., 38108., 38912., 40304., 41120., 41936.,
      42752., 37580., 38408., 39236., 40064., 41480., 42320., 43160., 44000.,
      38660., 39512., 40364., 41216., 42656., 43520., 44384., 45248., 44060.,
      45032., 46004., 46976., 48536., 49520., 50504., 51488., 45140., 46136.,
      47132., 48128., 49712., 50720., 51728., 52736., 46220., 47240., 48260.,
      49280., 50888., 51920., 52952., 53984., 47300., 48344., 49388., 50432.,
      52064., 53120., 54176., 55232., 48380., 49448., 50516., 51584., 53240.,
      54320., 55400., 56480., 49460., 50552., 51644., 52736., 54416., 55520.,
      56624., 57728., 50540., 51656., 52772., 53888., 55592., 56720., 57848.,
      58976., 46596., 47704., 48812., 49920., 51616., 52736., 53856., 54976.,
      34108., 34984., 35860., 36736., 38200., 39088., 39976., 40864., 35188.,
      36088., 36988., 37888., 39376., 40288., 41200., 42112., 36268., 37192.,
      38116., 39040., 40552., 41488., 42424., 43360., 37348., 38296., 39244.,
      40192., 41728., 42688., 43648., 44608., 33052., 33768., 34484., 35200.,
      36504., 37232., 37960., 38688., 34132., 34872., 35612., 36352., 37680.,
      38432., 39184., 39936., 39404., 40136., 40868., 41600., 42920., 43664.,
      44408., 45152., 40484., 41240., 41996., 42752., 44096., 44864., 45632.,
      46400., 41564., 42344., 43124., 43904., 45272., 46064., 46856., 47648.,
      42644., 43448., 44252., 45056., 46448., 47264., 48080., 48896., 43724.,
      44552., 45380., 46208., 47624., 48464., 49304., 50144., 44804., 45656.,
      46508., 47360., 48800., 49664., 50528., 51392., 34492., 35240., 35988.,
      36736., 38072., 38832., 39592., 40352.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13100., 13872., 14668., 15488., 10780., 11472., 12188., 12928., 16366.,
      17456., 18582., 19744., 18566., 19728., 20926., 22160., 20766., 22000.,
      23270., 24576., 10540., 11248., 11980., 12736., 11996., 12752., 13532.,
      14336., 14046., 15104., 16198., 17328., 15958., 17088., 18254., 19456.,
      19335., 20740., 22199., 23712., 22243., 23756., 25323., 26944., 25151.,
      26772., 28447., 30176., 17326., 18448., 19606., 20800., 11782., 12720.,
      13694., 14704., 12230., 13248., 14302., 15392., 14142., 15232., 16358.,
      17520., 25915., 27676., 29491., 31360., 17367., 18788., 20263., 21792.,
      20275., 21804., 23387., 25024., 14390., 15472., 16590., 17744., 16270.,
      17424., 18614., 19840., 13742., 14720., 15734., 16784., 15654., 16704.,
      17790., 18912., 24623., 26292., 28015., 29792., 27531., 29308., 31139.,
      33024., 17191., 18628., 20119., 21664., 14782., 15824., 16902., 18016.,
      16662., 17776., 18926., 20112., 15958., 17088., 18254., 19456., 13518.,
      14464., 15446., 16464., 22243., 23756., 25323., 26944., 25151., 26772.,
      28447., 30176., 28059., 29788., 31571., 33408., 11782., 12720., 13694.,
      14704., 13662., 14672., 15718., 16800., 9260.,  9968.,  10700., 11456.,
      10588., 11344., 12124., 12928., 9950.,  10848., 11782., 12752., 11798.,
      12768., 13774., 14816., 13646., 14688., 15766., 16880., 8940.,  9648.,
      10380., 11136., 5788.,  6352.,  6940.,  7552.,  11068., 11792., 12540.,
      13312., 12396., 13168., 13964., 14784., 18502., 19680., 20894., 22144.,
      11326., 12256., 13222., 14224., 13174., 14176., 15214., 16288., 10684.,
      11408., 12156., 12928., 11820., 12592., 13388., 14208.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37652., 39296., 40964., 42656., 38756., 40448., 42164., 43904., 39860.,
      41600., 43364., 45152., 40964., 42752., 44564., 46400., 42068., 43904.,
      45764., 47648., 43172., 45056., 46964., 48896., 44276., 46208., 48164.,
      50144., 38276., 40192., 42132., 44096., 21460., 22912., 24388., 25888.,
      22564., 24064., 25588., 27136., 23668., 25216., 26788., 28384., 24772.,
      26368., 27988., 29632., 16148., 17280., 18436., 19616., 17252., 18432.,
      19636., 20864., 20468., 21632., 22820., 24032., 21572., 22784., 24020.,
      25280., 22676., 23936., 25220., 26528., 23780., 25088., 26420., 27776.,
      24884., 26240., 27620., 29024., 25988., 27392., 28820., 30272., 27092.,
      28544., 30020., 31520., 32612., 34304., 36020., 37760., 33716., 35456.,
      37220., 39008., 34820., 36608., 38420., 40256., 35924., 37760., 39620.,
      41504., 37028., 38912., 40820., 42752., 38132., 40064., 42020., 44000.,
      39236., 41216., 43220., 45248., 44756., 46976., 49220., 51488., 45860.,
      48128., 50420., 52736., 46964., 49280., 51620., 53984., 48068., 50432.,
      52820., 55232., 49172., 51584., 54020., 56480., 50276., 52736., 55220.,
      57728., 51380., 53888., 56420., 58976., 47428., 49920., 52436., 54976.,
      34708., 36736., 38788., 40864., 35812., 37888., 39988., 42112., 36916.,
      39040., 41188., 43360., 38020., 40192., 42388., 44608., 33492., 35200.,
      36932., 38688., 34596., 36352., 38132., 39936., 39860., 41600., 43364.,
      45152., 40964., 42752., 44564., 46400., 42068., 43904., 45764., 47648.,
      43172., 45056., 46964., 48896., 44276., 46208., 48164., 50144., 45380.,
      47360., 49364., 51392., 34964., 36736., 38532., 40352.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15484., 15896., 16696., 17120., 17956., 18392., 19264., 19712., 9644.,
      9976.,  10696., 11040., 11796., 12152., 12944., 13312., 16338., 16860.,
      17988., 18528., 19710., 20268., 21504., 22080., 18618., 19212., 20412.,
      21024., 22278., 22908., 24216., 24864., 20898., 21564., 22836., 23520.,
      24846., 25548., 26928., 27648., 9164.,  9496.,  10248., 10592., 11380.,
      11736., 12560., 12928., 10748., 11128., 11928., 12320., 13156., 13560.,
      14432., 14848., 15306., 15868., 16956., 17536., 18678., 19276., 20472.,
      21088., 17266., 17900., 19060., 19712., 20926., 21596., 22864., 23552.,
      21955., 22606., 24034., 24712., 26221., 26926., 28516., 29248., 24847.,
      25606., 27142., 27928., 29545., 30358., 32056., 32896., 27739., 28606.,
      30250., 31144., 32869., 33790., 35596., 36544., 20002., 20636., 21780.,
      22432., 23630., 24300., 25552., 26240., 11402., 11852., 12812., 13280.,
      14294., 14780., 15848., 16352., 12482., 13004., 14052., 14592., 15694.,
      16252., 17408., 17984., 14442., 15036., 16156., 16768., 17942., 18572.,
      19800., 20448., 24263., 25270., 27054., 28088., 29953., 31014., 32960.,
      34048., 16979., 17646., 19090., 19784., 21309., 22030., 23636., 24384.,
      19871., 20646., 22198., 23000., 24633., 25462., 27176., 28032., 14938.,
      15532., 16636., 17248., 18406., 19036., 20248., 20896., 16834., 17500.,
      18676., 19360., 20590., 21292., 22576., 23296., 12218., 12700., 13708.,
      14208., 15270., 15788., 16904., 17440., 14178., 14732., 15812., 16384.,
      17518., 18108., 19296., 19904., 23563., 24478., 26170., 27112., 28885.,
      29854., 31708., 32704., 26455., 27478., 29278., 30328., 32209., 33286.,
      35248., 36352., 15587., 16270., 17730., 18440., 19981., 20718., 22340.,
      23104., 12434., 12988., 14052., 14624., 15742., 16332., 17504., 18112.,
      14330., 14956., 16092., 16736., 17926., 18588., 19832., 20512., 17266.,
      17900., 19060., 19712., 20926., 21596., 22864., 23552., 14874., 15324.,
      16300., 16768., 17798., 18284., 19368., 19872., 24847., 25606., 27142.,
      27928., 29545., 30358., 32056., 32896., 27739., 28606., 30250., 31144.,
      32869., 33790., 35596., 36544., 30631., 31606., 33358., 34360., 36193.,
      37222., 39136., 40192., 11402., 11852., 12812., 13280., 14294., 14780.,
      15848., 16352., 13298., 13820., 14852., 15392., 16478., 17036., 18176.,
      18752., 11756., 12120., 12904., 13280., 14100., 14488., 15344., 15744.,
      13340., 13752., 14584., 15008., 15876., 16312., 17216., 17664., 11930.,
      12348., 13324., 13760., 14790., 15244., 16328., 16800., 14018., 14508.,
      15556., 16064., 17166., 17692., 18848., 19392., 16106., 16668., 17788.,
      18368., 19542., 20140., 21368., 21984., 10044., 10456., 11192., 11616.,
      12388., 12824., 13632., 14080., 6956.,  7224.,  7816.,  8096.,  8724.,
      9016.,  9680.,  9984.,  12284., 12664., 13464., 13856., 14692., 15096.,
      15968., 16384., 13868., 14296., 15144., 15584., 16468., 16920., 17840.,
      18304., 20050., 20748., 22004., 22720., 24030., 24764., 26128., 26880.,
      12602., 13052., 14060., 14528., 15590., 16076., 17192., 17696., 14690.,
      15212., 16292., 16832., 17966., 18524., 19712., 20288., 10444., 10872.,
      11624., 12064., 12852., 13304., 14128., 14592., 11644., 12120., 12920.,
      13408., 14244., 14744., 15616., 16128.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      33244., 33832., 34984., 35584., 36772., 37384., 38608., 39232., 35404.,
      36040., 37240., 37888., 39124., 39784., 41056., 41728., 37564., 38248.,
      39496., 40192., 41476., 42184., 43504., 44224., 39724., 40456., 41752.,
      42496., 43828., 44584., 45952., 46720., 41884., 42664., 44008., 44800.,
      46180., 46984., 48400., 49216., 44044., 44872., 46264., 47104., 48532.,
      49384., 50848., 51712., 46204., 47080., 48520., 49408., 50884., 51784.,
      53296., 54208., 45612., 46600., 48152., 49152., 50740., 51752., 53376.,
      54400., 30108., 30888., 32232., 33024., 34404., 35208., 36624., 37440.,
      32268., 33096., 34488., 35328., 36756., 37608., 39072., 39936., 34428.,
      35304., 36744., 37632., 39108., 40008., 41520., 42432., 36588., 37512.,
      39000., 39936., 41460., 42408., 43968., 44928., 29276., 29992., 31272.,
      32000., 33316., 34056., 35408., 36160., 31436., 32200., 33528., 34304.,
      35668., 36456., 37856., 38656., 30716., 31464., 32776., 33536., 34884.,
      35656., 37040., 37824., 32876., 33672., 35032., 35840., 37236., 38056.,
      39488., 40320., 21468., 22056., 23208., 23808., 24996., 25608., 26832.,
      27456., 23628., 24264., 25464., 26112., 27348., 28008., 29280., 29952.,
      25788., 26472., 27720., 28416., 29700., 30408., 31728., 32448., 27948.,
      28680., 29976., 30720., 32052., 32808., 34176., 34944., 24732., 25256.,
      26344., 26880., 28004., 28552., 29712., 30272., 35404., 36040., 37240.,
      37888., 39124., 39784., 41056., 41728., 37564., 38248., 39496., 40192.,
      41476., 42184., 43504., 44224., 39724., 40456., 41752., 42496., 43828.,
      44584., 45952., 46720., 41884., 42664., 44008., 44800., 46180., 46984.,
      48400., 49216., 44044., 44872., 46264., 47104., 48532., 49384., 50848.,
      51712., 46204., 47080., 48520., 49408., 50884., 51784., 53296., 54208.,
      48364., 49288., 50776., 51712., 53236., 54184., 55744., 56704., 30108.,
      30888., 32232., 33024., 34404., 35208., 36624., 37440., 32268., 33096.,
      34488., 35328., 36756., 37608., 39072., 39936., 34428., 35304., 36744.,
      37632., 39108., 40008., 41520., 42432., 36588., 37512., 39000., 39936.,
      41460., 42408., 43968., 44928., 29276., 29992., 31272., 32000., 33316.,
      34056., 35408., 36160., 31436., 32200., 33528., 34304., 35668., 36456.,
      37856., 38656., 33596., 34408., 35784., 36608., 38020., 38856., 40304.,
      41152., 32876., 33672., 35032., 35840., 37236., 38056., 39488., 40320.,
      21468., 22056., 23208., 23808., 24996., 25608., 26832., 27456., 23628.,
      24264., 25464., 26112., 27348., 28008., 29280., 29952., 25788., 26472.,
      27720., 28416., 29700., 30408., 31728., 32448., 27948., 28680., 29976.,
      30720., 32052., 32808., 34176., 34944., 24732., 25256., 26344., 26880.,
      28004., 28552., 29712., 30272., 26892., 27464., 28600., 29184., 30356.,
      30952., 32160., 32768., 37564., 38248., 39496., 40192., 41476., 42184.,
      43504., 44224., 39724., 40456., 41752., 42496., 43828., 44584., 45952.,
      46720., 41884., 42664., 44008., 44800., 46180., 46984., 48400., 49216.,
      44044., 44872., 46264., 47104., 48532., 49384., 50848., 51712., 46204.,
      47080., 48520., 49408., 50884., 51784., 53296., 54208., 48364., 49288.,
      50776., 51712., 53236., 54184., 55744., 56704., 39132., 39976., 41384.,
      42240., 43684., 44552., 46032., 46912.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12444., 12856., 13268., 13680., 14408., 14832., 15256., 15680., 16468.,
      16904., 17340., 17776., 18624., 19072., 19520., 19968., 7244.,  7576.,
      7908.,  8240.,  8888.,  9232.,  9576.,  9920.,  10628., 10984., 11340.,
      11696., 12464., 12832., 13200., 13568., 11226., 11748., 12270., 12792.,
      13804., 14344., 14884., 15424., 16526., 17084., 17642., 18200., 19392.,
      19968., 20544., 21120., 12898., 13492., 14086., 14680., 15764., 16376.,
      16988., 17600., 18774., 19404., 20034., 20664., 21928., 22576., 23224.,
      23872., 14570., 15236., 15902., 16568., 17724., 18408., 19092., 19776.,
      21022., 21724., 22426., 23128., 24464., 25184., 25904., 26624., 5196.,
      5528.,  5860.,  6192.,  6840.,  7184.,  7528.,  7872.,  8580.,  8936.,
      9292.,  9648.,  10416., 10784., 11152., 11520., 6268.,  6648.,  7028.,
      7408.,  8104.,  8496.,  8888.,  9280.,  10036., 10440., 10844., 11248.,
      12064., 12480., 12896., 13312., 13154., 13716., 14278., 14840., 15924.,
      16504., 17084., 17664., 18838., 19436., 20034., 20632., 21896., 22512.,
      23128., 23744., 14954., 15588., 16222., 16856., 18012., 18664., 19316.,
      19968., 21214., 21884., 22554., 23224., 24560., 25248., 25936., 26624.,
      24059., 24710., 25361., 26012., 27422., 28100., 28778., 29456., 31001.,
      31706., 32411., 33116., 34796., 35528., 36260., 36992., 26663., 27422.,
      28181., 28940., 30458., 31244., 32030., 32816., 34469., 35282., 36095.,
      36908., 38696., 39536., 40376., 41216., 29267., 30134., 31001., 31868.,
      33494., 34388., 35282., 36176., 37937., 38858., 39779., 40700., 42596.,
      43544., 44492., 45440., 20426., 21060., 21694., 22328., 23452., 24104.,
      24756., 25408., 26622., 27292., 27962., 28632., 29936., 30624., 31312.,
      32000., 9554.,  10004., 10454., 10904., 11844., 12312., 12780., 13248.,
      14278., 14764., 15250., 15736., 16856., 17360., 17864., 18368., 9594.,
      10116., 10638., 11160., 12204., 12744., 13284., 13824., 14958., 15516.,
      16074., 16632., 17856., 18432., 19008., 19584., 11394., 11988., 12582.,
      13176., 14292., 14904., 15516., 16128., 17334., 17964., 18594., 19224.,
      20520., 21168., 21816., 22464., 19103., 20110., 21117., 22124., 23890.,
      24924., 25958., 26992., 28893., 29954., 31015., 32076., 34112., 35200.,
      36288., 37376., 14091., 14758., 15425., 16092., 17518., 18212., 18906.,
      19600., 21161., 21882., 22603., 23324., 25020., 25768., 26516., 27264.,
      16695., 17470., 18245., 19020., 20554., 21356., 22158., 22960., 24629.,
      25458., 26287., 27116., 28920., 29776., 30632., 31488., 12386., 12980.,
      13574., 14168., 15252., 15864., 16476., 17088., 18262., 18892., 19522.,
      20152., 21416., 22064., 22712., 23360., 14058., 14724., 15390., 16056.,
      17212., 17896., 18580., 19264., 20510., 21212., 21914., 22616., 23952.,
      24672., 25392., 26112., 11154., 11636., 12118., 12600., 13604., 14104.,
      14604., 15104., 16198., 16716., 17234., 17752., 18936., 19472., 20008.,
      20544., 12954., 13508., 14062., 14616., 15692., 16264., 16836., 17408.,
      18574., 19164., 19754., 20344., 21600., 22208., 22816., 23424., 20867.,
      21782., 22697., 23612., 25286., 26228., 27170., 28112., 29921., 30890.,
      31859., 32828., 34772., 35768., 36764., 37760., 23471., 24494., 25517.,
      26540., 28322., 29372., 30422., 31472., 33389., 34466., 35543., 36620.,
      38672., 39776., 40880., 41984., 11291., 11974., 12657., 13340., 14782.,
      15492., 16202., 16912., 18489., 19226., 19963., 20700., 22412., 23176.,
      23940., 24704., 9466.,  10020., 10574., 11128., 12172., 12744., 13316.,
      13888., 15022., 15612., 16202., 16792., 18016., 18624., 19232., 19840.,
      11138., 11764., 12390., 13016., 14132., 14776., 15420., 16064., 17270.,
      17932., 18594., 19256., 20552., 21232., 21912., 22592., 14954., 15588.,
      16222., 16856., 18012., 18664., 19316., 19968., 21214., 21884., 22554.,
      23224., 24560., 25248., 25936., 26624., 16498., 16948., 17398., 17848.,
      18820., 19288., 19756., 20224., 21286., 21772., 22258., 22744., 23896.,
      24400., 24904., 25408., 26663., 27422., 28181., 28940., 30458., 31244.,
      32030., 32816., 34469., 35282., 36095., 36908., 38696., 39536., 40376.,
      41216., 29267., 30134., 31001., 31868., 33494., 34388., 35282., 36176.,
      37937., 38858., 39779., 40700., 42596., 43544., 44492., 45440., 31871.,
      32846., 33821., 34796., 36530., 37532., 38534., 39536., 41405., 42434.,
      43463., 44492., 46496., 47552., 48608., 49664., 9554.,  10004., 10454.,
      10904., 11844., 12312., 12780., 13248., 14278., 14764., 15250., 15736.,
      16856., 17360., 17864., 18368., 11226., 11748., 12270., 12792., 13804.,
      14344., 14884., 15424., 16526., 17084., 17642., 18200., 19392., 19968.,
      20544., 21120., 7852.,  8216.,  8580.,  8944.,  9688.,  10064., 10440.,
      10816., 11620., 12008., 12396., 12784., 13648., 14048., 14448., 14848.,
      9180.,  9592.,  10004., 10416., 11208., 11632., 12056., 12480., 13332.,
      13768., 14204., 14640., 15552., 16000., 16448., 16896., 9554.,  9972.,
      10390., 10808., 11748., 12184., 12620., 13056., 14086., 14540., 14994.,
      15448., 16568., 17040., 17512., 17984., 11354., 11844., 12334., 12824.,
      13836., 14344., 14852., 15360., 16462., 16988., 17514., 18040., 19232.,
      19776., 20320., 20864., 13154., 13716., 14278., 14840., 15924., 16504.,
      17084., 17664., 18838., 19436., 20034., 20632., 21896., 22512., 23128.,
      23744., 8348.,  8760.,  9172.,  9584.,  10312., 10736., 11160., 11584.,
      12372., 12808., 13244., 13680., 14528., 14976., 15424., 15872., 9228.,
      9496.,  9764.,  10032., 10616., 10896., 11176., 11456., 12100., 12392.,
      12684., 12976., 13680., 13984., 14288., 14592., 9660.,  10040., 10420.,
      10800., 11560., 11952., 12344., 12736., 13556., 13960., 14364., 14768.,
      15648., 16064., 16480., 16896., 10988., 11416., 11844., 12272., 13080.,
      13520., 13960., 14400., 15268., 15720., 16172., 16624., 17552., 18016.,
      18480., 18944., 16554., 17252., 17950., 18648., 19868., 20584., 21300.,
      22016., 23326., 24060., 24794., 25528., 26928., 27680., 28432., 29184.,
      7794.,  8244.,  8694.,  9144.,  10116., 10584., 11052., 11520., 12582.,
      13068., 13554., 14040., 15192., 15696., 16200., 16704., 9594.,  10116.,
      10638., 11160., 12204., 12744., 13284., 13824., 14958., 15516., 16074.,
      16632., 17856., 18432., 19008., 19584., 7340.,  7768.,  8196.,  8624.,
      9368.,  9808.,  10248., 10688., 11492., 11944., 12396., 12848., 13712.,
      14176., 14640., 15104., 8412.,  8888.,  9364.,  9840.,  10632., 11120.,
      11608., 12096., 12948., 13448., 13948., 14448., 15360., 15872., 16384.,
      16896.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6444.,  6712.,  6980.,  7248.,  7864.,  8144.,  8424.,  8704.,  9380.,
      9672.,  9964.,  10256., 10992., 11296., 11600., 11904., 7644.,  7960.,
      8276.,  8592.,  9256.,  9584.,  9912.,  10240., 10964., 11304., 11644.,
      11984., 12768., 13120., 13472., 13824., 8844.,  9208.,  9572.,  9936.,
      10648., 11024., 11400., 11776., 12548., 12936., 13324., 13712., 14544.,
      14944., 15344., 15744., 10044., 10456., 10868., 11280., 12040., 12464.,
      12888., 13312., 14132., 14568., 15004., 15440., 16320., 16768., 17216.,
      17664., 8044.,  8376.,  8708.,  9040.,  9720.,  10064., 10408., 10752.,
      11492., 11848., 12204., 12560., 13360., 13728., 14096., 14464., 9244.,
      9624.,  10004., 10384., 11112., 11504., 11896., 12288., 13076., 13480.,
      13884., 14288., 15136., 15552., 15968., 16384., 10444., 10872., 11300.,
      11728., 12504., 12944., 13384., 13824., 14660., 15112., 15564., 16016.,
      16912., 17376., 17840., 18304., 12156., 12632., 13108., 13584., 14408.,
      14896., 15384., 15872., 16756., 17256., 17756., 18256., 19200., 19712.,
      20224., 20736., 6956.,  7224.,  7492.,  7760.,  8376.,  8656.,  8936.,
      9216.,  9892.,  10184., 10476., 10768., 11504., 11808., 12112., 12416.,
      8156.,  8472.,  8788.,  9104.,  9768.,  10096., 10424., 10752., 11476.,
      11816., 12156., 12496., 13280., 13632., 13984., 14336., 9356.,  9720.,
      10084., 10448., 11160., 11536., 11912., 12288., 13060., 13448., 13836.,
      14224., 15056., 15456., 15856., 16256., 10556., 10968., 11380., 11792.,
      12552., 12976., 13400., 13824., 14644., 15080., 15516., 15952., 16832.,
      17280., 17728., 18176., 6444.,  6712.,  6980.,  7248.,  7864.,  8144.,
      8424.,  8704.,  9380.,  9672.,  9964.,  10256., 10992., 11296., 11600.,
      11904., 7644.,  7960.,  8276.,  8592.,  9256.,  9584.,  9912.,  10240.,
      10964., 11304., 11644., 11984., 12768., 13120., 13472., 13824., 10444.,
      10872., 11300., 11728., 12504., 12944., 13384., 13824., 14660., 15112.,
      15564., 16016., 16912., 17376., 17840., 18304., 11644., 12120., 12596.,
      13072., 13896., 14384., 14872., 15360., 16244., 16744., 17244., 17744.,
      18688., 19200., 19712., 20224., 8556.,  8888.,  9220.,  9552.,  10232.,
      10576., 10920., 11264., 12004., 12360., 12716., 13072., 13872., 14240.,
      14608., 14976., 9756.,  10136., 10516., 10896., 11624., 12016., 12408.,
      12800., 13588., 13992., 14396., 14800., 15648., 16064., 16480., 16896.,
      10956., 11384., 11812., 12240., 13016., 13456., 13896., 14336., 15172.,
      15624., 16076., 16528., 17424., 17888., 18352., 18816., 12156., 12632.,
      13108., 13584., 14408., 14896., 15384., 15872., 16756., 17256., 17756.,
      18256., 19200., 19712., 20224., 20736., 6956.,  7224.,  7492.,  7760.,
      8376.,  8656.,  8936.,  9216.,  9892.,  10184., 10476., 10768., 11504.,
      11808., 12112., 12416., 7644.,  7960.,  8276.,  8592.,  9256.,  9584.,
      9912.,  10240., 10964., 11304., 11644., 11984., 12768., 13120., 13472.,
      13824., 8844.,  9208.,  9572.,  9936.,  10648., 11024., 11400., 11776.,
      12548., 12936., 13324., 13712., 14544., 14944., 15344., 15744., 10044.,
      10456., 10868., 11280., 12040., 12464., 12888., 13312., 14132., 14568.,
      15004., 15440., 16320., 16768., 17216., 17664., 8044.,  8376.,  8708.,
      9040.,  9720.,  10064., 10408., 10752., 11492., 11848., 12204., 12560.,
      13360., 13728., 14096., 14464., 9244.,  9624.,  10004., 10384., 11112.,
      11504., 11896., 12288., 13076., 13480., 13884., 14288., 15136., 15552.,
      15968., 16384., 10444., 10872., 11300., 11728., 12504., 12944., 13384.,
      13824., 14660., 15112., 15564., 16016., 16912., 17376., 17840., 18304.,
      11644., 12120., 12596., 13072., 13896., 14384., 14872., 15360., 16244.,
      16744., 17244., 17744., 18688., 19200., 19712., 20224., 6956.,  7224.,
      7492.,  7760.,  8376.,  8656.,  8936.,  9216.,  9892.,  10184., 10476.,
      10768., 11504., 11808., 12112., 12416., 8156.,  8472.,  8788.,  9104.,
      9768.,  10096., 10424., 10752., 11476., 11816., 12156., 12496., 13280.,
      13632., 13984., 14336., 9356.,  9720.,  10084., 10448., 11160., 11536.,
      11912., 12288., 13060., 13448., 13836., 14224., 15056., 15456., 15856.,
      16256., 10556., 10968., 11380., 11792., 12552., 12976., 13400., 13824.,
      14644., 15080., 15516., 15952., 16832., 17280., 17728., 18176., 6444.,
      6712.,  6980.,  7248.,  7864.,  8144.,  8424.,  8704.,  9380.,  9672.,
      9964.,  10256., 10992., 11296., 11600., 11904., 7644.,  7960.,  8276.,
      8592.,  9256.,  9584.,  9912.,  10240., 10964., 11304., 11644., 11984.,
      12768., 13120., 13472., 13824., 8844.,  9208.,  9572.,  9936.,  10648.,
      11024., 11400., 11776., 12548., 12936., 13324., 13712., 14544., 14944.,
      15344., 15744., 11644., 12120., 12596., 13072., 13896., 14384., 14872.,
      15360., 16244., 16744., 17244., 17744., 18688., 19200., 19712., 20224.,
      8556.,  8888.,  9220.,  9552.,  10232., 10576., 10920., 11264., 12004.,
      12360., 12716., 13072., 13872., 14240., 14608., 14976., 9756.,  10136.,
      10516., 10896., 11624., 12016., 12408., 12800., 13588., 13992., 14396.,
      14800., 15648., 16064., 16480., 16896., 10956., 11384., 11812., 12240.,
      13016., 13456., 13896., 14336., 15172., 15624., 16076., 16528., 17424.,
      17888., 18352., 18816., 12156., 12632., 13108., 13584., 14408., 14896.,
      15384., 15872., 16756., 17256., 17756., 18256., 19200., 19712., 20224.,
      20736., 6956.,  7224.,  7492.,  7760.,  8376.,  8656.,  8936.,  9216.,
      9892.,  10184., 10476., 10768., 11504., 11808., 12112., 12416., 8156.,
      8472.,  8788.,  9104.,  9768.,  10096., 10424., 10752., 11476., 11816.,
      12156., 12496., 13280., 13632., 13984., 14336., 8844.,  9208.,  9572.,
      9936.,  10648., 11024., 11400., 11776., 12548., 12936., 13324., 13712.,
      14544., 14944., 15344., 15744., 10044., 10456., 10868., 11280., 12040.,
      12464., 12888., 13312., 14132., 14568., 15004., 15440., 16320., 16768.,
      17216., 17664., 8044.,  8376.,  8708.,  9040.,  9720.,  10064., 10408.,
      10752., 11492., 11848., 12204., 12560., 13360., 13728., 14096., 14464.,
      9244.,  9624.,  10004., 10384., 11112., 11504., 11896., 12288., 13076.,
      13480., 13884., 14288., 15136., 15552., 15968., 16384., 10444., 10872.,
      11300., 11728., 12504., 12944., 13384., 13824., 14660., 15112., 15564.,
      16016., 16912., 17376., 17840., 18304., 11644., 12120., 12596., 13072.,
      13896., 14384., 14872., 15360., 16244., 16744., 17244., 17744., 18688.,
      19200., 19712., 20224., 8556.,  8888.,  9220.,  9552.,  10232., 10576.,
      10920., 11264., 12004., 12360., 12716., 13072., 13872., 14240., 14608.,
      14976.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25532., 36927., 37206., 37485., 37764., 24216., 24396., 32880., 47466.,
      47844., 48222., 48600., 31095., 31338., 31404., 43042., 43420., 43798.,
      44176., 25563., 25806., 30184., 43482., 43860., 44238., 44616., 28479.,
      28722., 33316., 48018., 48396., 48774., 49152., 31395., 31638., 22916.,
      32949., 33174., 33399., 33624., 21420., 21564., 20948., 28225., 28450.,
      28675., 28900., 16236., 16380.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18246., 18324., 18402., 18480., 18558., 18636., 18714., 19182., 19260.,
      19338., 19416., 19494., 19572., 19650., 20118., 20196., 20274., 20352.,
      20430., 20508., 20586., 21054., 21132., 21210., 21288., 21366., 21444.,
      21522., 21990., 22068., 22146., 22224., 22302., 22380., 22458., 22926.,
      23004., 23082., 23160., 23238., 23316., 23394., 23862., 23940., 24018.,
      24096., 24174., 24252., 24330.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      33696., 34680., 48588., 50046., 49128., 50604., 49668., 51162., 50208.,
      51720., 32076., 33072., 32424., 33432., 28916., 29920., 41229., 42708.,
      41958., 43464., 42687., 44220., 43416., 44976., 27376., 28398., 27844.,
      28884., 30484., 31576., 41273., 42820., 42002., 43576., 42731., 44332.,
      43460., 45088., 24800., 25782., 25268., 26268., 32308., 33488., 43877.,
      45492., 44606., 46248., 45335., 47004., 46064., 47760., 28496., 29566.,
      28964., 30052., 34260., 35400., 49041., 50724., 49770., 51480., 50499.,
      52236., 51228., 52992., 32448., 33606., 32916., 34092., 19616., 20488.,
      27744., 29034., 28176., 29484., 28608., 29934., 29040., 30384., 18148.,
      19032., 18424., 19320., 19504., 20392., 25760., 27010., 26192., 27460.,
      26624., 27910., 27056., 28360., 14804., 15576., 15080., 15864.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      34440., 36492., 34584., 36648., 34728., 36804., 34872., 36960., 35016.,
      37116., 35160., 37272., 35304., 37428., 36168., 38364., 36312., 38520.,
      36456., 38676., 36600., 38832., 36744., 38988., 36888., 39144., 37032.,
      39300., 37896., 40236., 38040., 40392., 38184., 40548., 38328., 40704.,
      38472., 40860., 38616., 41016., 38760., 41172., 39624., 42108., 39768.,
      42264., 39912., 42420., 40056., 42576., 40200., 42732., 40344., 42888.,
      40488., 43044., 41352., 43980., 41496., 44136., 41640., 44292., 41784.,
      44448., 41928., 44604., 42072., 44760., 42216., 44916., 43080., 45852.,
      43224., 46008., 43368., 46164., 43512., 46320., 43656., 46476., 43800.,
      46632., 43944., 46788., 44808., 47724., 44952., 47880., 45096., 48036.,
      45240., 48192., 45384., 48348., 45528., 48504., 45672., 48660.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14952., 15424., 15896., 16368., 23014., 23704., 24394., 25084., 23564.,
      24272., 24980., 25688., 24114., 24840., 25566., 26292., 24664., 25408.,
      26152., 26896., 15988., 16472., 16956., 17440., 16352., 16848., 17344.,
      17840., 10236., 10728., 11220., 11712., 16531., 17242., 17953., 18664.,
      17258., 17996., 18734., 19472., 17985., 18750., 19515., 20280., 18712.,
      19504., 20296., 21088., 12066., 12576., 13086., 13596., 12536., 13064.,
      13592., 14120., 14308., 14888., 15468., 16048., 22439., 23218., 23997.,
      24776., 23166., 23972., 24778., 25584., 23893., 24726., 25559., 26392.,
      24620., 25480., 26340., 27200., 11818., 12288., 12758., 13228., 12288.,
      12776., 13264., 13752., 18892., 19560., 20228., 20896., 23227., 24074.,
      24921., 25768., 23954., 24828., 25702., 26576., 24681., 25582., 26483.,
      27384., 25408., 26336., 27264., 28192., 14770., 15328., 15886., 16444.,
      15240., 15816., 16392., 16968., 18740., 19368., 19996., 20624., 27087.,
      28002., 28917., 29832., 27814., 28756., 29698., 30640., 28541., 29510.,
      30479., 31448., 29268., 30264., 31260., 32256., 18234., 18880., 19526.,
      20172., 18704., 19368., 20032., 20696., 9688.,  10048., 10408., 10768.,
      13110., 13632., 14154., 14676., 13572., 14112., 14652., 15192., 14034.,
      14592., 15150., 15708., 14496., 15072., 15648., 16224., 8532.,  8904.,
      9276.,  9648.,  8816.,  9200.,  9584.,  9968.,  9448.,  9824.,  10200.,
      10576., 10718., 11200., 11682., 12164., 11180., 11680., 12180., 12680.,
      11642., 12160., 12678., 13196., 12104., 12640., 13176., 13712., 5028.,
      5288.,  5548.,  5808.,  5312.,  5584.,  5856.,  6128.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26892., 27920., 28948., 29976., 27168., 28208., 29248., 30288., 27444.,
      28496., 29548., 30600., 27720., 28784., 29848., 30912., 27996., 29072.,
      30148., 31224., 28272., 29360., 30448., 31536., 28548., 29648., 30748.,
      31848., 30204., 31376., 32548., 33720., 30480., 31664., 32848., 34032.,
      30756., 31952., 33148., 34344., 31032., 32240., 33448., 34656., 31308.,
      32528., 33748., 34968., 31584., 32816., 34048., 35280., 31860., 33104.,
      34348., 35592., 33516., 34832., 36148., 37464., 33792., 35120., 36448.,
      37776., 34068., 35408., 36748., 38088., 34344., 35696., 37048., 38400.,
      34620., 35984., 37348., 38712., 34896., 36272., 37648., 39024., 35172.,
      36560., 37948., 39336., 36828., 38288., 39748., 41208., 37104., 38576.,
      40048., 41520., 37380., 38864., 40348., 41832., 37656., 39152., 40648.,
      42144., 37932., 39440., 40948., 42456., 38208., 39728., 41248., 42768.,
      38484., 40016., 41548., 43080., 40140., 41744., 43348., 44952., 40416.,
      42032., 43648., 45264., 40692., 42320., 43948., 45576., 40968., 42608.,
      44248., 45888., 41244., 42896., 44548., 46200., 41520., 43184., 44848.,
      46512., 41796., 43472., 45148., 46824., 36028., 37520., 39012., 40504.,
      36304., 37808., 39312., 40816., 36580., 38096., 39612., 41128., 36856.,
      38384., 39912., 41440., 30732., 32016., 33300., 34584., 31008., 32304.,
      33600., 34896., 31284., 32592., 33900., 35208., 32940., 34320., 35700.,
      37080., 33216., 34608., 36000., 37392., 33492., 34896., 36300., 37704.,
      33768., 35184., 36600., 38016., 34044., 35472., 36900., 38328., 34320.,
      35760., 37200., 38640., 34596., 36048., 37500., 38952.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29132., 30448., 41340., 43260., 42420., 44376., 43500., 45492., 44580.,
      46608., 27964., 29280., 28660., 30000., 25584., 27072., 35649., 37800.,
      37107., 39312., 38565., 40824., 40023., 42336., 24588., 26076., 25524.,
      27048., 31792., 33456., 41881., 44168., 43339., 45680., 44797., 47192.,
      46255., 48704., 25580., 26988., 26516., 27960., 38512., 40352., 47089.,
      49512., 48547., 51024., 50005., 52536., 51463., 54048., 29900., 31484.,
      30836., 32456., 36272., 38032., 51273., 53832., 52731., 55344., 54189.,
      56856., 55647., 58368., 34732., 36492., 35668., 37464., 13332., 14352.,
      18192., 19668., 19056., 20568., 19920., 21468., 20784., 22368., 12468.,
      13488., 13020., 14064., 16180., 17232., 20368., 21764., 21232., 22664.,
      22096., 23564., 22960., 24464., 11924., 12720., 12476., 13296.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27776., 29976., 28064., 30288., 28352., 30600., 28640., 30912., 28928.,
      31224., 29216., 31536., 29504., 31848., 31232., 33720., 31520., 34032.,
      31808., 34344., 32096., 34656., 32384., 34968., 32672., 35280., 32960.,
      35592., 34688., 37464., 34976., 37776., 35264., 38088., 35552., 38400.,
      35840., 38712., 36128., 39024., 36416., 39336., 38144., 41208., 38432.,
      41520., 38720., 41832., 39008., 42144., 39296., 42456., 39584., 42768.,
      39872., 43080., 41600., 44952., 41888., 45264., 42176., 45576., 42464.,
      45888., 42752., 46200., 43040., 46512., 43328., 46824., 37376., 40504.,
      37664., 40816., 37952., 41128., 38240., 41440., 31872., 34584., 32160.,
      34896., 32448., 35208., 34176., 37080., 34464., 37392., 34752., 37704.,
      35040., 38016., 35328., 38328., 35616., 38640., 35904., 38952.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14708., 15128., 15920., 16352., 20646., 21240., 22420., 23032., 21746.,
      22376., 23592., 24240., 22846., 23512., 24764., 25448., 23946., 24648.,
      25936., 26656., 14716., 15160., 15992., 16448., 15444., 15912., 16768.,
      17248., 11290., 11744., 12712., 13184., 16719., 17346., 18754., 19408.,
      18173., 18854., 20316., 21024., 19627., 20362., 21878., 22640., 21081.,
      21870., 23440., 24256., 12910., 13400., 14396., 14904., 13850., 14376.,
      15408., 15952., 16362., 16992., 18136., 18784., 22391., 23154., 24698.,
      25488., 23845., 24662., 26260., 27104., 25299., 26170., 27822., 28720.,
      26753., 27678., 29384., 30336., 10366., 10776., 11692., 12120., 11306.,
      11752., 12704., 13168., 22458., 23264., 24584., 25408., 21343., 22178.,
      23794., 24656., 22797., 23686., 25356., 26272., 24251., 25194., 26918.,
      27888., 25705., 26702., 28480., 29504., 12878., 13400., 14428., 14968.,
      13818., 14376., 15440., 16016., 15114., 15712., 16824., 17440., 22535.,
      23378., 25002., 25872., 23989., 24886., 26564., 27488., 25443., 26394.,
      28126., 29104., 26897., 27902., 29688., 30720., 16670., 17304., 18444.,
      19096., 17610., 18280., 19456., 20144., 8676.,  9000.,  9680.,  10016.,
      11358., 11808., 12756., 13224., 12282., 12768., 13752., 14256., 13206.,
      13728., 14748., 15288., 14130., 14688., 15744., 16320., 7948.,  8296.,
      8952.,  9312.,  8516.,  8888.,  9568.,  9952.,  11332., 11752., 12528.,
      12960., 12590., 13088., 14084., 14600., 13514., 14048., 15080., 15632.,
      14438., 15008., 16076., 16664., 15362., 15968., 17072., 17696., 6444.,
      6696.,  7256.,  7520.,  7012.,  7288.,  7872.,  8160.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29956., 30976., 32296., 33328., 30508., 31552., 32896., 33952., 31060.,
      32128., 33496., 34576., 31612., 32704., 34096., 35200., 32164., 33280.,
      34696., 35824., 32716., 33856., 35296., 36448., 33268., 34432., 35896.,
      37072., 36580., 37888., 39496., 40816., 37132., 38464., 40096., 41440.,
      37684., 39040., 40696., 42064., 38236., 39616., 41296., 42688., 38788.,
      40192., 41896., 43312., 39340., 40768., 42496., 43936., 39892., 41344.,
      43096., 44560., 43204., 44800., 46696., 48304., 43756., 45376., 47296.,
      48928., 44308., 45952., 47896., 49552., 44860., 46528., 48496., 50176.,
      45412., 47104., 49096., 50800., 45964., 47680., 49696., 51424., 46516.,
      48256., 50296., 52048., 49828., 51712., 53896., 55792., 50380., 52288.,
      54496., 56416., 50932., 52864., 55096., 57040., 51484., 53440., 55696.,
      57664., 52036., 54016., 56296., 58288., 52588., 54592., 56896., 58912.,
      53140., 55168., 57496., 59536., 34436., 36096., 38056., 39728., 34988.,
      36672., 38656., 40352., 35540., 37248., 39256., 40976., 36092., 37824.,
      39856., 41600., 36644., 38400., 40456., 42224., 37196., 38976., 41056.,
      42848., 37748., 39552., 41656., 43472., 33636., 35328., 37320., 39024.,
      34188., 35904., 37920., 39648., 34740., 36480., 38520., 40272., 35292.,
      37056., 39120., 40896., 29444., 30976., 32808., 34352., 29996., 31552.,
      33408., 34976., 30548., 32128., 34008., 35600., 33860., 35584., 37608.,
      39344., 34412., 36160., 38208., 39968., 34964., 36736., 38808., 40592.,
      35516., 37312., 39408., 41216., 32740., 34304., 36168., 37744., 33292.,
      34880., 36768., 38368., 33844., 35456., 37368., 38992.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12420., 12840., 13260., 13680., 14512., 14944., 15376., 15808., 17658.,
      18252., 18846., 19440., 20676., 21288., 21900., 22512., 18798., 19428.,
      20058., 20688., 21960., 22608., 23256., 23904., 19938., 20604., 21270.,
      21936., 23244., 23928., 24612., 25296., 21078., 21780., 22482., 23184.,
      24528., 25248., 25968., 26688., 14332., 14776., 15220., 15664., 16552.,
      17008., 17464., 17920., 15124., 15592., 16060., 16528., 17440., 17920.,
      18400., 18880., 12846., 13300., 13754., 14208., 15224., 15696., 16168.,
      16640., 18283., 18910., 19537., 20164., 21622., 22276., 22930., 23584.,
      19729., 20410., 21091., 21772., 23284., 23992., 24700., 25408., 21175.,
      21910., 22645., 23380., 24946., 25708., 26470., 27232., 22621., 23410.,
      24199., 24988., 26608., 27424., 28240., 29056., 13618., 14108., 14598.,
      15088., 16124., 16632., 17140., 17648., 14566., 15092., 15618., 16144.,
      17216., 17760., 18304., 18848., 16158., 16788., 17418., 18048., 19240.,
      19888., 20536., 21184., 20787., 21550., 22313., 23076., 24670., 25460.,
      26250., 27040., 22233., 23050., 23867., 24684., 26332., 27176., 28020.,
      28864., 23679., 24550., 25421., 26292., 27994., 28892., 29790., 30688.,
      25125., 26050., 26975., 27900., 29656., 30608., 31560., 32512., 10146.,
      10556., 10966., 11376., 12332., 12760., 13188., 13616., 11094., 11540.,
      11986., 12432., 13424., 13888., 14352., 14816., 21518., 22324., 23130.,
      23936., 25304., 26128., 26952., 27776., 22203., 23038., 23873., 24708.,
      26374., 27236., 28098., 28960., 23649., 24538., 25427., 26316., 28036.,
      28952., 29868., 30784., 25095., 26038., 26981., 27924., 29698., 30668.,
      31638., 32608., 26541., 27538., 28535., 29532., 31360., 32384., 33408.,
      34432., 12498., 13020., 13542., 14064., 15132., 15672., 16212., 16752.,
      13446., 14004., 14562., 15120., 16224., 16800., 17376., 17952., 16766.,
      17364., 17962., 18560., 19720., 20336., 20952., 21568., 24067., 24910.,
      25753., 26596., 28270., 29140., 30010., 30880., 25513., 26410., 27307.,
      28204., 29932., 30856., 31780., 32704., 26959., 27910., 28861., 29812.,
      31594., 32572., 33550., 34528., 28405., 29410., 30415., 31420., 33256.,
      34288., 35320., 36352., 17410., 18044., 18678., 19312., 20492., 21144.,
      21796., 22448., 18358., 19028., 19698., 20368., 21584., 22272., 22960.,
      23648., 10116., 10440., 10764., 11088., 11856., 12192., 12528., 12864.,
      12666., 13116., 13566., 14016., 15060., 15528., 15996., 16464., 13710.,
      14196., 14682., 15168., 16248., 16752., 17256., 17760., 14754., 15276.,
      15798., 16320., 17436., 17976., 18516., 19056., 15798., 16356., 16914.,
      17472., 18624., 19200., 19776., 20352., 8124.,  8472.,  8820.,  9168.,
      9864.,  10224., 10584., 10944., 8724.,  9096.,  9468.,  9840.,  10560.,
      10944., 11328., 11712., 13284., 13704., 14124., 14544., 15408., 15840.,
      16272., 16704., 14058., 14556., 15054., 15552., 16644., 17160., 17676.,
      18192., 15102., 15636., 16170., 16704., 17832., 18384., 18936., 19488.,
      16146., 16716., 17286., 17856., 19020., 19608., 20196., 20784., 17190.,
      17796., 18402., 19008., 20208., 20832., 21456., 22080., 7260.,  7512.,
      7764.,  8016.,  8616.,  8880.,  9144.,  9408.,  7860.,  8136.,  8412.,
      8688.,  9312.,  9600.,  9888.,  10176.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23564., 24072., 24580., 25088., 26184., 26704., 27224., 27744., 24644.,
      25176., 25708., 26240., 27360., 27904., 28448., 28992., 25724., 26280.,
      26836., 27392., 28536., 29104., 29672., 30240., 26804., 27384., 27964.,
      28544., 29712., 30304., 30896., 31488., 27884., 28488., 29092., 29696.,
      30888., 31504., 32120., 32736., 28964., 29592., 30220., 30848., 32064.,
      32704., 33344., 33984., 30044., 30696., 31348., 32000., 33240., 33904.,
      34568., 35232., 33324., 33992., 34660., 35328., 36584., 37264., 37944.,
      38624., 34404., 35096., 35788., 36480., 37760., 38464., 39168., 39872.,
      35484., 36200., 36916., 37632., 38936., 39664., 40392., 41120., 36564.,
      37304., 38044., 38784., 40112., 40864., 41616., 42368., 35468., 36104.,
      36740., 37376., 38600., 39248., 39896., 40544., 36548., 37208., 37868.,
      38528., 39776., 40448., 41120., 41792., 37628., 38312., 38996., 39680.,
      40952., 41648., 42344., 43040., 44108., 44936., 45764., 46592., 48008.,
      48848., 49688., 50528., 45188., 46040., 46892., 47744., 49184., 50048.,
      50912., 51776., 46268., 47144., 48020., 48896., 50360., 51248., 52136.,
      53024., 47348., 48248., 49148., 50048., 51536., 52448., 53360., 54272.,
      39084., 39880., 40676., 41472., 42856., 43664., 44472., 45280., 40164.,
      40984., 41804., 42624., 44032., 44864., 45696., 46528., 41244., 42088.,
      42932., 43776., 45208., 46064., 46920., 47776., 39404., 40264., 41124.,
      41984., 43432., 44304., 45176., 46048., 40484., 41368., 42252., 43136.,
      44608., 45504., 46400., 47296., 41564., 42472., 43380., 44288., 45784.,
      46704., 47624., 48544., 42644., 43576., 44508., 45440., 46960., 47904.,
      48848., 49792., 43724., 44680., 45636., 46592., 48136., 49104., 50072.,
      51040., 44804., 45784., 46764., 47744., 49312., 50304., 51296., 52288.,
      45884., 46888., 47892., 48896., 50488., 51504., 52520., 53536., 21132.,
      21768., 22404., 23040., 24264., 24912., 25560., 26208., 22212., 22872.,
      23532., 24192., 25440., 26112., 26784., 27456., 23292., 23976., 24660.,
      25344., 26616., 27312., 28008., 28704., 24372., 25080., 25788., 26496.,
      27792., 28512., 29232., 29952., 25452., 26184., 26916., 27648., 28968.,
      29712., 30456., 31200., 26532., 27288., 28044., 28800., 30144., 30912.,
      31680., 32448., 27612., 28392., 29172., 29952., 31320., 32112., 32904.,
      33696., 25644., 26312., 26980., 27648., 28904., 29584., 30264., 30944.,
      26724., 27416., 28108., 28800., 30080., 30784., 31488., 32192., 27804.,
      28520., 29236., 29952., 31256., 31984., 32712., 33440., 28884., 29624.,
      30364., 31104., 32432., 33184., 33936., 34688., 23564., 24072., 24580.,
      25088., 26184., 26704., 27224., 27744., 24644., 25176., 25708., 26240.,
      27360., 27904., 28448., 28992., 25724., 26280., 26836., 27392., 28536.,
      29104., 29672., 30240., 32204., 32904., 33604., 34304., 35592., 36304.,
      37016., 37728., 33284., 34008., 34732., 35456., 36768., 37504., 38240.,
      38976., 34364., 35112., 35860., 36608., 37944., 38704., 39464., 40224.,
      35444., 36216., 36988., 37760., 39120., 39904., 40688., 41472., 33324.,
      33992., 34660., 35328., 36584., 37264., 37944., 38624., 34404., 35096.,
      35788., 36480., 37760., 38464., 39168., 39872., 35484., 36200., 36916.,
      37632., 38936., 39664., 40392., 41120.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13068., 13872., 14700., 15552., 17894., 19056., 20254., 21488., 20094.,
      21328., 22598., 23904., 22294., 23600., 24942., 26320., 24494., 25872.,
      27286., 28736., 14604., 15472., 16364., 17280., 16060., 16976., 17916.,
      18880., 10326., 11200., 12110., 13056., 12487., 13700., 14967., 16288.,
      15395., 16716., 18091., 19520., 18303., 19732., 21215., 22752., 21211.,
      22748., 24339., 25984., 11526., 12464., 13438., 14448., 13406., 14416.,
      15462., 16544., 16822., 17984., 19182., 20416., 16791., 18148., 19559.,
      21024., 19699., 21164., 22683., 24256., 22607., 24180., 25807., 27488.,
      25515., 27196., 28931., 30720., 4006.,  4656.,  5342.,  6064.,  5886.,
      6608.,  7366.,  8160.,  25622., 27072., 28558., 30080., 19303., 20804.,
      22359., 23968., 22211., 23820., 25483., 27200., 25119., 26836., 28607.,
      30432., 28027., 29852., 31731., 33664., 12422., 13360., 14334., 15344.,
      14302., 15312., 16358., 17440., 17974., 19136., 20334., 21568., 24119.,
      25764., 27463., 29216., 27027., 28780., 30587., 32448., 29935., 31796.,
      33711., 35680., 32843., 34812., 36835., 38912., 19046., 20272., 21534.,
      22832., 20926., 22224., 23558., 24928., 7164.,  7760.,  8380.,  9024.,
      8622.,  9408.,  10230., 11088., 10470., 11328., 12222., 13152., 12318.,
      13248., 14214., 15216., 14166., 15168., 16206., 17280., 7292.,  7888.,
      8508.,  9152.,  8428.,  9072.,  9740.,  10432., 11708., 12496., 13308.,
      14144., 9550.,  10432., 11350., 12304., 11398., 12352., 13342., 14368.,
      13246., 14272., 15334., 16432., 15094., 16192., 17326., 18496., 2748.,
      3152.,  3580.,  4032.,  3884.,  4336.,  4812.,  5312.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23796., 25088., 26404., 27744., 24900., 26240., 27604., 28992., 26004.,
      27392., 28804., 30240., 27108., 28544., 30004., 31488., 28212., 29696.,
      31204., 32736., 29316., 30848., 32404., 33984., 30420., 32000., 33604.,
      35232., 33716., 35328., 36964., 38624., 34820., 36480., 38164., 39872.,
      35924., 37632., 39364., 41120., 37028., 38784., 40564., 42368., 35828.,
      37376., 38948., 40544., 36932., 38528., 40148., 41792., 38036., 39680.,
      41348., 43040., 44660., 46592., 48548., 50528., 45764., 47744., 49748.,
      51776., 46868., 48896., 50948., 53024., 47972., 50048., 52148., 54272.,
      39604., 41472., 43364., 45280., 40708., 42624., 44564., 46528., 41812.,
      43776., 45764., 47776., 39988., 41984., 44004., 46048., 41092., 43136.,
      45204., 47296., 42196., 44288., 46404., 48544., 43300., 45440., 47604.,
      49792., 44404., 46592., 48804., 51040., 45508., 47744., 50004., 52288.,
      46612., 48896., 51204., 53536., 21492., 23040., 24612., 26208., 22596.,
      24192., 25812., 27456., 23700., 25344., 27012., 28704., 24804., 26496.,
      28212., 29952., 25908., 27648., 29412., 31200., 27012., 28800., 30612.,
      32448., 28116., 29952., 31812., 33696., 26036., 27648., 29284., 30944.,
      27140., 28800., 30484., 32192., 28244., 29952., 31684., 33440., 29348.,
      31104., 32884., 34688., 23796., 25088., 26404., 27744., 24900., 26240.,
      27604., 28992., 26004., 27392., 28804., 30240., 32628., 34304., 36004.,
      37728., 33732., 35456., 37204., 38976., 34836., 36608., 38404., 40224.,
      35940., 37760., 39604., 41472., 33716., 35328., 36964., 38624., 34820.,
      36480., 38164., 39872., 35924., 37632., 39364., 41120.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13340., 13784., 14616., 15072., 15940., 16408., 17312., 17792., 18298.,
      18892., 20092., 20704., 21958., 22588., 23896., 24544., 20578., 21244.,
      22516., 23200., 24526., 25228., 26608., 27328., 22858., 23596., 24940.,
      25696., 27094., 27868., 29320., 30112., 25138., 25948., 27364., 28192.,
      29662., 30508., 32032., 32896., 16108., 16600., 17512., 18016., 18964.,
      19480., 20464., 20992., 17692., 18232., 19192., 19744., 20740., 21304.,
      22336., 22912., 10354., 10732., 11636., 12032., 12990., 13404., 14416.,
      14848., 12547., 13006., 14242., 14728., 16045., 16558., 17956., 18496.,
      15439., 16006., 17350., 17944., 19369., 19990., 21496., 22144., 18331.,
      19006., 20458., 21160., 22693., 23422., 25036., 25792., 21223., 22006.,
      23566., 24376., 26017., 26854., 28576., 29440., 11914., 12364., 13324.,
      13792., 14806., 15292., 16360., 16864., 13810., 14332., 15364., 15904.,
      16990., 17548., 18688., 19264., 17938., 18604., 19796., 20480., 21726.,
      22428., 23728., 24448., 15891., 16494., 17874., 18504., 19965., 20622.,
      22164., 22848., 18783., 19494., 20982., 21720., 23289., 24054., 25704.,
      26496., 21675., 22494., 24090., 24936., 26613., 27486., 29244., 30144.,
      24567., 25494., 27198., 28152., 29937., 30918., 32784., 33792., 4330.,
      4492.,  5164.,  5344.,  6070.,  6268.,  7048.,  7264.,  6226.,  6460.,
      7204.,  7456.,  8254.,  8524.,  9376.,  9664.,  26034., 26988., 28468.,
      29440., 30974., 31964., 33552., 34560., 19747., 20494., 22018., 22792.,
      24397., 25198., 26884., 27712., 22639., 23494., 25126., 26008., 27721.,
      28630., 30424., 31360., 25531., 26494., 28234., 29224., 31045., 32062.,
      33964., 35008., 28423., 29494., 31342., 32440., 34369., 35494., 37504.,
      38656., 11658., 12108., 13068., 13536., 14550., 15036., 16104., 16608.,
      13554., 14076., 15108., 15648., 16734., 17292., 18432., 19008., 18194.,
      18860., 20052., 20736., 21982., 22684., 23984., 24704., 24115., 25006.,
      26674., 27592., 29341., 30286., 32116., 33088., 27007., 28006., 29782.,
      30808., 32665., 33718., 35656., 36736., 29899., 31006., 32890., 34024.,
      35989., 37150., 39196., 40384., 32791., 34006., 35998., 37240., 39313.,
      40582., 42736., 44032., 19498., 20236., 21484., 22240., 23542., 24316.,
      25672., 26464., 21394., 22204., 23524., 24352., 25726., 26572., 28000.,
      28864., 8700.,  8952.,  9624.,  9888.,  10596., 10872., 11616., 11904.,
      10410., 10716., 11580., 11904., 12822., 13164., 14136., 14496., 12498.,
      12876., 13812., 14208., 15198., 15612., 16656., 17088., 14586., 15036.,
      16044., 16512., 17574., 18060., 19176., 19680., 16674., 17196., 18276.,
      18816., 19950., 20508., 21696., 22272., 7884.,  8184.,  8808.,  9120.,
      9780.,  10104., 10800., 11136., 9084.,  9432.,  10104., 10464., 11172.,
      11544., 12288., 12672., 13500., 13944., 14808., 15264., 16164., 16632.,
      17568., 18048., 10122., 10524., 11484., 11904., 12918., 13356., 14424.,
      14880., 12210., 12684., 13716., 14208., 15294., 15804., 16944., 17472.,
      14298., 14844., 15948., 16512., 17670., 18252., 19464., 20064., 16386.,
      17004., 18180., 18816., 20046., 20700., 21984., 22656., 3084.,  3192.,
      3624.,  3744.,  4212.,  4344.,  4848.,  4992.,  4284.,  4440.,  4920.,
      5088.,  5604.,  5784.,  6336.,  6528.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23548., 24040., 25096., 25600., 26692., 27208., 28336., 28864., 25708.,
      26248., 27352., 27904., 29044., 29608., 30784., 31360., 27868., 28456.,
      29608., 30208., 31396., 32008., 33232., 33856., 30028., 30664., 31864.,
      32512., 33748., 34408., 35680., 36352., 32188., 32872., 34120., 34816.,
      36100., 36808., 38128., 38848., 34348., 35080., 36376., 37120., 38452.,
      39208., 40576., 41344., 36508., 37288., 38632., 39424., 40804., 41608.,
      43024., 43840., 29628., 30312., 31560., 32256., 33540., 34248., 35568.,
      36288., 31788., 32520., 33816., 34560., 35892., 36648., 38016., 38784.,
      33948., 34728., 36072., 36864., 38244., 39048., 40464., 41280., 36108.,
      36936., 38328., 39168., 40596., 41448., 42912., 43776., 21500., 21992.,
      23048., 23552., 24644., 25160., 26288., 26816., 23660., 24200., 25304.,
      25856., 26996., 27560., 28736., 29312., 25820., 26408., 27560., 28160.,
      29348., 29960., 31184., 31808., 38780., 39656., 41096., 41984., 43460.,
      44360., 45872., 46784., 40940., 41864., 43352., 44288., 45812., 46760.,
      48320., 49280., 43100., 44072., 45608., 46592., 48164., 49160., 50768.,
      51776., 45260., 46280., 47864., 48896., 50516., 51560., 53216., 54272.,
      29628., 30312., 31560., 32256., 33540., 34248., 35568., 36288., 31788.,
      32520., 33816., 34560., 35892., 36648., 38016., 38784., 33948., 34728.,
      36072., 36864., 38244., 39048., 40464., 41280., 32188., 32872., 34120.,
      34816., 36100., 36808., 38128., 38848., 34348., 35080., 36376., 37120.,
      38452., 39208., 40576., 41344., 36508., 37288., 38632., 39424., 40804.,
      41608., 43024., 43840., 38668., 39496., 40888., 41728., 43156., 44008.,
      45472., 46336., 40828., 41704., 43144., 44032., 45508., 46408., 47920.,
      48832., 42988., 43912., 45400., 46336., 47860., 48808., 50368., 51328.,
      45148., 46120., 47656., 48640., 50212., 51208., 52816., 53824., 21500.,
      21992., 23048., 23552., 24644., 25160., 26288., 26816., 23660., 24200.,
      25304., 25856., 26996., 27560., 28736., 29312., 25820., 26408., 27560.,
      28160., 29348., 29960., 31184., 31808., 27980., 28616., 29816., 30464.,
      31700., 32360., 33632., 34304., 30140., 30824., 32072., 32768., 34052.,
      34760., 36080., 36800., 32300., 33032., 34328., 35072., 36404., 37160.,
      38528., 39296., 34460., 35240., 36584., 37376., 38756., 39560., 40976.,
      41792., 29628., 30312., 31560., 32256., 33540., 34248., 35568., 36288.,
      31788., 32520., 33816., 34560., 35892., 36648., 38016., 38784., 33948.,
      34728., 36072., 36864., 38244., 39048., 40464., 41280., 36108., 36936.,
      38328., 39168., 40596., 41448., 42912., 43776., 23548., 24040., 25096.,
      25600., 26692., 27208., 28336., 28864., 25708., 26248., 27352., 27904.,
      29044., 29608., 30784., 31360., 27868., 28456., 29608., 30208., 31396.,
      32008., 33232., 33856., 40828., 41704., 43144., 44032., 45508., 46408.,
      47920., 48832., 42988., 43912., 45400., 46336., 47860., 48808., 50368.,
      51328., 45148., 46120., 47656., 48640., 50212., 51208., 52816., 53824.,
      47308., 48328., 49912., 50944., 52564., 53608., 55264., 56320., 29628.,
      30312., 31560., 32256., 33540., 34248., 35568., 36288., 31788., 32520.,
      33816., 34560., 35892., 36648., 38016., 38784., 33948., 34728., 36072.,
      36864., 38244., 39048., 40464., 41280.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10172., 10616., 11060., 11504., 12264., 12720., 13176., 13632., 14452.,
      14920., 15388., 15856., 16736., 17216., 17696., 18176., 13794., 14388.,
      14982., 15576., 16660., 17272., 17884., 18496., 19670., 20300., 20930.,
      21560., 22824., 23472., 24120., 24768., 15466., 16132., 16798., 17464.,
      18620., 19304., 19988., 20672., 21918., 22620., 23322., 24024., 25360.,
      26080., 26800., 27520., 17138., 17876., 18614., 19352., 20580., 21336.,
      22092., 22848., 24166., 24940., 25714., 26488., 27896., 28688., 29480.,
      30272., 18810., 19620., 20430., 21240., 22540., 23368., 24196., 25024.,
      26414., 27260., 28106., 28952., 30432., 31296., 32160., 33024., 10732.,
      11224., 11716., 12208., 13016., 13520., 14024., 14528., 15396., 15912.,
      16428., 16944., 17872., 18400., 18928., 19456., 11804., 12344., 12884.,
      13424., 14280., 14832., 15384., 15936., 16852., 17416., 17980., 18544.,
      19520., 20096., 20672., 21248., 9578.,  9956.,  10334., 10712., 11612.,
      12008., 12404., 12800., 13790., 14204., 14618., 15032., 16112., 16544.,
      16976., 17408., 11579., 12038., 12497., 12956., 14174., 14660., 15146.,
      15632., 16985., 17498., 18011., 18524., 20012., 20552., 21092., 21632.,
      14183., 14750., 15317., 15884., 17210., 17804., 18398., 18992., 20453.,
      21074., 21695., 22316., 23912., 24560., 25208., 25856., 16787., 17462.,
      18137., 18812., 20246., 20948., 21650., 22352., 23921., 24650., 25379.,
      26108., 27812., 28568., 29324., 30080., 19391., 20174., 20957., 21740.,
      23282., 24092., 24902., 25712., 27389., 28226., 29063., 29900., 31712.,
      32576., 33440., 34304., 10578., 11028., 11478., 11928., 12868., 13336.,
      13804., 14272., 15302., 15788., 16274., 16760., 17880., 18384., 18888.,
      19392., 12250., 12772., 13294., 13816., 14828., 15368., 15908., 16448.,
      17550., 18108., 18666., 19224., 20416., 20992., 21568., 22144., 16266.,
      16932., 17598., 18264., 19452., 20136., 20820., 21504., 22782., 23484.,
      24186., 24888., 26256., 26976., 27696., 28416., 14027., 14630., 15233.,
      15836., 17198., 17828., 18458., 19088., 20585., 21242., 21899., 22556.,
      24188., 24872., 25556., 26240., 16631., 17342., 18053., 18764., 20234.,
      20972., 21710., 22448., 24053., 24818., 25583., 26348., 28088., 28880.,
      29672., 30464., 19235., 20054., 20873., 21692., 23270., 24116., 24962.,
      25808., 27521., 28394., 29267., 30140., 31988., 32888., 33788., 34688.,
      21839., 22766., 23693., 24620., 26306., 27260., 28214., 29168., 30989.,
      31970., 32951., 33932., 35888., 36896., 37904., 38912., 3890.,  4052.,
      4214.,  4376.,  5028.,  5208.,  5388.,  5568.,  6310.,  6508.,  6706.,
      6904.,  7736.,  7952.,  8168.,  8384.,  5562.,  5796.,  6030.,  6264.,
      6988.,  7240.,  7492.,  7744.,  8558.,  8828.,  9098.,  9368.,  10272.,
      10560., 10848., 11136., 23978., 24932., 25886., 26840., 28316., 29288.,
      30260., 31232., 32798., 33788., 34778., 35768., 37424., 38432., 39440.,
      40448., 17499., 18246., 18993., 19740., 21246., 22020., 22794., 23568.,
      25209., 26010., 26811., 27612., 29388., 30216., 31044., 31872., 20103.,
      20958., 21813., 22668., 24282., 25164., 26046., 26928., 28677., 29586.,
      30495., 31404., 33288., 34224., 35160., 36096., 22707., 23670., 24633.,
      25596., 27318., 28308., 29298., 30288., 32145., 33162., 34179., 35196.,
      37188., 38232., 39276., 40320., 25311., 26382., 27453., 28524., 30354.,
      31452., 32550., 33648., 35613., 36738., 37863., 38988., 41088., 42240.,
      43392., 44544., 10066., 10516., 10966., 11416., 12356., 12824., 13292.,
      13760., 14790., 15276., 15762., 16248., 17368., 17872., 18376., 18880.,
      11738., 12260., 12782., 13304., 14316., 14856., 15396., 15936., 17038.,
      17596., 18154., 18712., 19904., 20480., 21056., 21632., 16778., 17444.,
      18110., 18776., 19964., 20648., 21332., 22016., 23294., 23996., 24698.,
      25400., 26768., 27488., 28208., 28928., 21995., 22886., 23777., 24668.,
      26318., 27236., 28154., 29072., 30857., 31802., 32747., 33692., 35612.,
      36584., 37556., 38528., 24599., 25598., 26597., 27596., 29354., 30380.,
      31406., 32432., 34325., 35378., 36431., 37484., 39512., 40592., 41672.,
      42752., 27203., 28310., 29417., 30524., 32390., 33524., 34658., 35792.,
      37793., 38954., 40115., 41276., 43412., 44600., 45788., 46976., 29807.,
      31022., 32237., 33452., 35426., 36668., 37910., 39152., 41261., 42530.,
      43799., 45068., 47312., 48608., 49904., 51200., 17266., 18004., 18742.,
      19480., 20708., 21464., 22220., 22976., 24294., 25068., 25842., 26616.,
      28024., 28816., 29608., 30400., 18938., 19748., 20558., 21368., 22668.,
      23496., 24324., 25152., 26542., 27388., 28234., 29080., 30560., 31424.,
      32288., 33152., 7228.,  7480.,  7732.,  7984.,  8616.,  8880.,  9144.,
      9408.,  10100., 10376., 10652., 10928., 11680., 11968., 12256., 12544.,
      8674.,  8980.,  9286.,  9592.,  10420., 10744., 11068., 11392., 12310.,
      12652., 12994., 13336., 14344., 14704., 15064., 15424., 10474., 10852.,
      11230., 11608., 12508., 12904., 13300., 13696., 14686., 15100., 15514.,
      15928., 17008., 17440., 17872., 18304., 12274., 12724., 13174., 13624.,
      14596., 15064., 15532., 16000., 17062., 17548., 18034., 18520., 19672.,
      20176., 20680., 21184., 14074., 14596., 15118., 15640., 16684., 17224.,
      17764., 18304., 19438., 19996., 20554., 21112., 22336., 22912., 23488.,
      24064., 6956.,  7256.,  7556.,  7856.,  8472.,  8784.,  9096.,  9408.,
      10084., 10408., 10732., 11056., 11792., 12128., 12464., 12800., 8028.,
      8376.,  8724.,  9072.,  9736.,  10096., 10456., 10816., 11540., 11912.,
      12284., 12656., 13440., 13824., 14208., 14592., 11516., 11960., 12404.,
      12848., 13672., 14128., 14584., 15040., 15924., 16392., 16860., 17328.,
      18272., 18752., 19232., 19712., 9026.,  9428.,  9830.,  10232., 11156.,
      11576., 11996., 12416., 13430., 13868., 14306., 14744., 15848., 16304.,
      16760., 17216., 10826., 11300., 11774., 12248., 13244., 13736., 14228.,
      14720., 15806., 16316., 16826., 17336., 18512., 19040., 19568., 20096.,
      12626., 13172., 13718., 14264., 15332., 15896., 16460., 17024., 18182.,
      18764., 19346., 19928., 21176., 21776., 22376., 22976., 14426., 15044.,
      15662., 16280., 17420., 18056., 18692., 19328., 20558., 21212., 21866.,
      22520., 23840., 24512., 25184., 25856., 2668.,  2776.,  2884.,  2992.,
      3416.,  3536.,  3656.,  3776.,  4260.,  4392.,  4524.,  4656.,  5200.,
      5344.,  5488.,  5632.,  3740.,  3896.,  4052.,  4208.,  4680.,  4848.,
      5016.,  5184.,  5716.,  5896.,  6076.,  6256.,  6848.,  7040.,  7232.,
      7424.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3468.,  3576.,  3684.,  3792.,  4248.,  4368.,  4488.,  4608.,  5124.,
      5256.,  5388.,  5520.,  6096.,  6240.,  6384.,  6528.,  4668.,  4824.,
      4980.,  5136.,  5640.,  5808.,  5976.,  6144.,  6708.,  6888.,  7068.,
      7248.,  7872.,  8064.,  8256.,  8448.,  5868.,  6072.,  6276.,  6480.,
      7032.,  7248.,  7464.,  7680.,  8292.,  8520.,  8748.,  8976.,  9648.,
      9888.,  10128., 10368., 7068.,  7320.,  7572.,  7824.,  8424.,  8688.,
      8952.,  9216.,  9876.,  10152., 10428., 10704., 11424., 11712., 12000.,
      12288., 8268.,  8568.,  8868.,  9168.,  9816.,  10128., 10440., 10752.,
      11460., 11784., 12108., 12432., 13200., 13536., 13872., 14208., 9468.,
      9816.,  10164., 10512., 11208., 11568., 11928., 12288., 13044., 13416.,
      13788., 14160., 14976., 15360., 15744., 16128., 10668., 11064., 11460.,
      11856., 12600., 13008., 13416., 13824., 14628., 15048., 15468., 15888.,
      16752., 17184., 17616., 18048., 5196.,  5496.,  5796.,  6096.,  6744.,
      7056.,  7368.,  7680.,  8388.,  8712.,  9036.,  9360.,  10128., 10464.,
      10800., 11136., 6396.,  6744.,  7092.,  7440.,  8136.,  8496.,  8856.,
      9216.,  9972.,  10344., 10716., 11088., 11904., 12288., 12672., 13056.,
      7596.,  7992.,  8388.,  8784.,  9528.,  9936.,  10344., 10752., 11556.,
      11976., 12396., 12816., 13680., 14112., 14544., 14976., 8796.,  9240.,
      9684.,  10128., 10920., 11376., 11832., 12288., 13140., 13608., 14076.,
      14544., 15456., 15936., 16416., 16896., 3468.,  3576.,  3684.,  3792.,
      4248.,  4368.,  4488.,  4608.,  5124.,  5256.,  5388.,  5520.,  6096.,
      6240.,  6384.,  6528.,  4668.,  4824.,  4980.,  5136.,  5640.,  5808.,
      5976.,  6144.,  6708.,  6888.,  7068.,  7248.,  7872.,  8064.,  8256.,
      8448.,  5868.,  6072.,  6276.,  6480.,  7032.,  7248.,  7464.,  7680.,
      8292.,  8520.,  8748.,  8976.,  9648.,  9888.,  10128., 10368., 13068.,
      13560., 14052., 14544., 15384., 15888., 16392., 16896., 17796., 18312.,
      18828., 19344., 20304., 20832., 21360., 21888., 14268., 14808., 15348.,
      15888., 16776., 17328., 17880., 18432., 19380., 19944., 20508., 21072.,
      22080., 22656., 23232., 23808., 15468., 16056., 16644., 17232., 18168.,
      18768., 19368., 19968., 20964., 21576., 22188., 22800., 23856., 24480.,
      25104., 25728., 16668., 17304., 17940., 18576., 19560., 20208., 20856.,
      21504., 22548., 23208., 23868., 24528., 25632., 26304., 26976., 27648.,
      5196.,  5496.,  5796.,  6096.,  6744.,  7056.,  7368.,  7680.,  8388.,
      8712.,  9036.,  9360.,  10128., 10464., 10800., 11136., 6396.,  6744.,
      7092.,  7440.,  8136.,  8496.,  8856.,  9216.,  9972.,  10344., 10716.,
      11088., 11904., 12288., 12672., 13056., 7596.,  7992.,  8388.,  8784.,
      9528.,  9936.,  10344., 10752., 11556., 11976., 12396., 12816., 13680.,
      14112., 14544., 14976., 8268.,  8568.,  8868.,  9168.,  9816.,  10128.,
      10440., 10752., 11460., 11784., 12108., 12432., 13200., 13536., 13872.,
      14208., 9468.,  9816.,  10164., 10512., 11208., 11568., 11928., 12288.,
      13044., 13416., 13788., 14160., 14976., 15360., 15744., 16128., 10668.,
      11064., 11460., 11856., 12600., 13008., 13416., 13824., 14628., 15048.,
      15468., 15888., 16752., 17184., 17616., 18048., 11868., 12312., 12756.,
      13200., 13992., 14448., 14904., 15360., 16212., 16680., 17148., 17616.,
      18528., 19008., 19488., 19968., 13068., 13560., 14052., 14544., 15384.,
      15888., 16392., 16896., 17796., 18312., 18828., 19344., 20304., 20832.,
      21360., 21888., 14268., 14808., 15348., 15888., 16776., 17328., 17880.,
      18432., 19380., 19944., 20508., 21072., 22080., 22656., 23232., 23808.,
      15468., 16056., 16644., 17232., 18168., 18768., 19368., 19968., 20964.,
      21576., 22188., 22800., 23856., 24480., 25104., 25728., 3468.,  3576.,
      3684.,  3792.,  4248.,  4368.,  4488.,  4608.,  5124.,  5256.,  5388.,
      5520.,  6096.,  6240.,  6384.,  6528.,  4668.,  4824.,  4980.,  5136.,
      5640.,  5808.,  5976.,  6144.,  6708.,  6888.,  7068.,  7248.,  7872.,
      8064.,  8256.,  8448.,  5868.,  6072.,  6276.,  6480.,  7032.,  7248.,
      7464.,  7680.,  8292.,  8520.,  8748.,  8976.,  9648.,  9888.,  10128.,
      10368., 7068.,  7320.,  7572.,  7824.,  8424.,  8688.,  8952.,  9216.,
      9876.,  10152., 10428., 10704., 11424., 11712., 12000., 12288., 8268.,
      8568.,  8868.,  9168.,  9816.,  10128., 10440., 10752., 11460., 11784.,
      12108., 12432., 13200., 13536., 13872., 14208., 9468.,  9816.,  10164.,
      10512., 11208., 11568., 11928., 12288., 13044., 13416., 13788., 14160.,
      14976., 15360., 15744., 16128., 10668., 11064., 11460., 11856., 12600.,
      13008., 13416., 13824., 14628., 15048., 15468., 15888., 16752., 17184.,
      17616., 18048., 5196.,  5496.,  5796.,  6096.,  6744.,  7056.,  7368.,
      7680.,  8388.,  8712.,  9036.,  9360.,  10128., 10464., 10800., 11136.,
      6396.,  6744.,  7092.,  7440.,  8136.,  8496.,  8856.,  9216.,  9972.,
      10344., 10716., 11088., 11904., 12288., 12672., 13056., 7596.,  7992.,
      8388.,  8784.,  9528.,  9936.,  10344., 10752., 11556., 11976., 12396.,
      12816., 13680., 14112., 14544., 14976., 8796.,  9240.,  9684.,  10128.,
      10920., 11376., 11832., 12288., 13140., 13608., 14076., 14544., 15456.,
      15936., 16416., 16896., 3468.,  3576.,  3684.,  3792.,  4248.,  4368.,
      4488.,  4608.,  5124.,  5256.,  5388.,  5520.,  6096.,  6240.,  6384.,
      6528.,  4668.,  4824.,  4980.,  5136.,  5640.,  5808.,  5976.,  6144.,
      6708.,  6888.,  7068.,  7248.,  7872.,  8064.,  8256.,  8448.,  5868.,
      6072.,  6276.,  6480.,  7032.,  7248.,  7464.,  7680.,  8292.,  8520.,
      8748.,  8976.,  9648.,  9888.,  10128., 10368., 13068., 13560., 14052.,
      14544., 15384., 15888., 16392., 16896., 17796., 18312., 18828., 19344.,
      20304., 20832., 21360., 21888., 14268., 14808., 15348., 15888., 16776.,
      17328., 17880., 18432., 19380., 19944., 20508., 21072., 22080., 22656.,
      23232., 23808., 15468., 16056., 16644., 17232., 18168., 18768., 19368.,
      19968., 20964., 21576., 22188., 22800., 23856., 24480., 25104., 25728.,
      16668., 17304., 17940., 18576., 19560., 20208., 20856., 21504., 22548.,
      23208., 23868., 24528., 25632., 26304., 26976., 27648., 5196.,  5496.,
      5796.,  6096.,  6744.,  7056.,  7368.,  7680.,  8388.,  8712.,  9036.,
      9360.,  10128., 10464., 10800., 11136., 6396.,  6744.,  7092.,  7440.,
      8136.,  8496.,  8856.,  9216.,  9972.,  10344., 10716., 11088., 11904.,
      12288., 12672., 13056., 7596.,  7992.,  8388.,  8784.,  9528.,  9936.,
      10344., 10752., 11556., 11976., 12396., 12816., 13680., 14112., 14544.,
      14976.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20706., 21084., 29460., 29952., 19624., 19984., 20344., 31407., 31920.,
      40874., 41540., 29778., 30264., 30750., 34365., 34878., 45974., 46640.,
      32742., 33228., 33714., 36555., 37068., 46850., 47516., 34810., 35296.,
      33606., 34393., 34906., 46958., 47624., 32654., 33140., 33626., 17334.,
      17640., 22364., 22760., 16128., 16416., 16704., 18930., 19236., 25220.,
      25616., 17856., 18144., 18432.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21246., 21324., 21402., 21480., 21558., 21636., 21714., 22338., 22416.,
      22494., 22572., 22650., 22728., 22806., 23430., 23508., 23586., 23664.,
      23742., 23820., 23898., 24522., 24600., 24678., 24756., 24834., 24912.,
      24990., 25614., 25692., 25770., 25848., 25926., 26004., 26082., 26706.,
      26784., 26862., 26940., 27018., 27096., 27174., 27798., 27876., 27954.,
      28032., 28110., 28188., 28266.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14474., 15108., 15020., 15672., 21040., 21928., 21744., 22656., 13206.,
      13840., 13716., 14368., 14226., 14896., 24321., 25118., 25128., 25952.,
      30936., 31956., 31976., 33032., 22727., 23524., 23480., 24304., 23529.,
      24316., 28067., 28858., 28874., 29692., 38200., 39340., 39240., 40416.,
      26485., 27276., 27238., 28056., 27991., 28836., 30917., 31830., 31724.,
      32664., 36376., 37508., 37416., 38584., 29091., 30004., 29844., 30784.,
      25605., 26444., 24423., 25330., 25230., 26164., 33656., 34908., 34696.,
      35984., 22609., 23516., 23362., 24296., 24115., 25076., 13238., 13804.,
      13832., 14416., 16752., 17464., 17520., 18256., 12106., 12672., 12664.,
      13248., 13030., 13568., 18546., 19044., 19140., 19656., 24752., 25480.,
      25520., 26272., 17550., 18048., 18108., 18624., 18666., 19200.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      40104., 42492., 40248., 42648., 40392., 42804., 40536., 42960., 40680.,
      43116., 40824., 43272., 40968., 43428., 42120., 44676., 42264., 44832.,
      42408., 44988., 42552., 45144., 42696., 45300., 42840., 45456., 42984.,
      45612., 44136., 46860., 44280., 47016., 44424., 47172., 44568., 47328.,
      44712., 47484., 44856., 47640., 45000., 47796., 46152., 49044., 46296.,
      49200., 46440., 49356., 46584., 49512., 46728., 49668., 46872., 49824.,
      47016., 49980., 48168., 51228., 48312., 51384., 48456., 51540., 48600.,
      51696., 48744., 51852., 48888., 52008., 49032., 52164., 50184., 53412.,
      50328., 53568., 50472., 53724., 50616., 53880., 50760., 54036., 50904.,
      54192., 51048., 54348., 52200., 55596., 52344., 55752., 52488., 55908.,
      52632., 56064., 52776., 56220., 52920., 56376., 53064., 56532.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15962., 16596., 17230., 17864., 16460., 17112., 17764., 18416., 21992.,
      22880., 23768., 24656., 22608., 23520., 24432., 25344., 13426., 14060.,
      14694., 15328., 13852., 14504., 15156., 15808., 14278., 14948., 15618.,
      16288., 27109., 27906., 28703., 29500., 27928., 28752., 29576., 30400.,
      33204., 34224., 35244., 36264., 34224., 35280., 36336., 37392., 23921.,
      24718., 25515., 26312., 24632., 25456., 26280., 27104., 23999., 24786.,
      25573., 26360., 23855., 24646., 25437., 26228., 24674., 25492., 26310.,
      27128., 33276., 34416., 35556., 36696., 34296., 35472., 36648., 37824.,
      20691., 21482., 22273., 23064., 21402., 22220., 23038., 23856., 22113.,
      22958., 23803., 24648., 26873., 27786., 28699., 29612., 27692., 28632.,
      29572., 30512., 31684., 32816., 33948., 35080., 32704., 33872., 35040.,
      36208., 23221., 24134., 25047., 25960., 23932., 24872., 25812., 26752.,
      22979., 23818., 24657., 25496., 27715., 28622., 29529., 30436., 28534.,
      29468., 30402., 31336., 36364., 37616., 38868., 40120., 37384., 38672.,
      39960., 41248., 24087., 24994., 25901., 26808., 24798., 25732., 26666.,
      27600., 25509., 26470., 27431., 28392., 15734., 16300., 16866., 17432.,
      16328., 16912., 17496., 18080., 19224., 19936., 20648., 21360., 19968.,
      20704., 21440., 22176., 13470., 14036., 14602., 15168., 13992., 14576.,
      15160., 15744., 14194., 14732., 15270., 15808., 18354., 18852., 19350.,
      19848., 18948., 19464., 19980., 20496., 24456., 25184., 25912., 26640.,
      25200., 25952., 26704., 27456., 16362., 16860., 17358., 17856., 16884.,
      17400., 17916., 18432., 17406., 17940., 18474., 19008.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37884., 39248., 40612., 41976., 38160., 39536., 40912., 42288., 38436.,
      39824., 41212., 42600., 38712., 40112., 41512., 42912., 38988., 40400.,
      41812., 43224., 39264., 40688., 42112., 43536., 39540., 40976., 42412.,
      43848., 41748., 43280., 44812., 46344., 42024., 43568., 45112., 46656.,
      42300., 43856., 45412., 46968., 42576., 44144., 45712., 47280., 42852.,
      44432., 46012., 47592., 43128., 44720., 46312., 47904., 43404., 45008.,
      46612., 48216., 38188., 39632., 41076., 42520., 38464., 39920., 41376.,
      42832., 38740., 40208., 41676., 43144., 39016., 40496., 41976., 43456.,
      32892., 34128., 35364., 36600., 33168., 34416., 35664., 36912., 33444.,
      34704., 35964., 37224., 35652., 37008., 38364., 39720., 35928., 37296.,
      38664., 40032., 36204., 37584., 38964., 40344., 36480., 37872., 39264.,
      40656., 36756., 38160., 39564., 40968., 37032., 38448., 39864., 41280.,
      37308., 38736., 40164., 41592., 39516., 41040., 42564., 44088., 39792.,
      41328., 42864., 44400., 40068., 41616., 43164., 44712., 40344., 41904.,
      43464., 45024., 40620., 42192., 43764., 45336., 40896., 42480., 44064.,
      45648., 41172., 42768., 44364., 45960., 43380., 45072., 46764., 48456.,
      43656., 45360., 47064., 48768., 43932., 45648., 47364., 49080., 44208.,
      45936., 47664., 49392., 44484., 46224., 47964., 49704., 44760., 46512.,
      48264., 50016., 45036., 46800., 48564., 50328., 41868., 43472., 45076.,
      46680., 42144., 43760., 45376., 46992., 42420., 44048., 45676., 47304.,
      42696., 44336., 45976., 47616., 38620., 40016., 41412., 42808., 38896.,
      40304., 41712., 43120., 39172., 40592., 42012., 43432.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17138., 18312., 18230., 19440., 24736., 26320., 26144., 27776., 15918.,
      17056., 16938., 18112., 17958., 19168., 26587., 28220., 28201., 29888.,
      32160., 34216., 34240., 36368., 24989., 26568., 26495., 28128., 24545.,
      26104., 21791., 23412., 23405., 25080., 34400., 36696., 36480., 38848.,
      20217., 21784., 21723., 23344., 23229., 24904., 26723., 28460., 28337.,
      30128., 29792., 31880., 31872., 34032., 24917., 26600., 26423., 28160.,
      21977., 23448., 25831., 27492., 27445., 29160., 36576., 38840., 38656.,
      40992., 24177., 25784., 25683., 27344., 27189., 28904., 14810., 15960.,
      15998., 17184., 17376., 18800., 18912., 20384., 13734., 14848., 14850.,
      16000., 13534., 14592., 20306., 21448., 21494., 22672., 28256., 29840.,
      29792., 31424., 19246., 20352., 20362., 21504., 21478., 22656.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      39104., 41976., 39392., 42288., 39680., 42600., 39968., 42912., 40256.,
      43224., 40544., 43536., 40832., 43848., 43136., 46344., 43424., 46656.,
      43712., 46968., 44000., 47280., 44288., 47592., 44576., 47904., 44864.,
      48216., 39488., 42520., 39776., 42832., 40064., 43144., 40352., 43456.,
      33984., 36600., 34272., 36912., 34560., 37224., 36864., 39720., 37152.,
      40032., 37440., 40344., 37728., 40656., 38016., 40968., 38304., 41280.,
      38592., 41592., 40896., 44088., 41184., 44400., 41472., 44712., 41760.,
      45024., 42048., 45336., 42336., 45648., 42624., 45960., 44928., 48456.,
      45216., 48768., 45504., 49080., 45792., 49392., 46080., 49704., 46368.,
      50016., 46656., 50328., 43328., 46680., 43616., 46992., 43904., 47304.,
      44192., 47616., 39872., 42808., 40160., 43120., 40448., 43432.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13634., 14244., 15388., 16016., 14630., 15276., 16456., 17120., 19176.,
      20032., 21552., 22432., 20408., 21312., 22880., 23808., 11194., 11804.,
      12876., 13504., 12046., 12692., 13800., 14464., 12898., 13580., 14724.,
      15424., 28055., 28854., 30526., 31352., 29693., 30546., 32272., 33152.,
      33644., 34624., 36696., 37712., 35684., 36736., 38880., 39968., 24859.,
      25658., 27222., 28048., 26281., 27134., 28752., 29632., 25015., 25794.,
      27338., 28144., 21547., 22334., 23994., 24808., 23185., 24026., 25740.,
      26608., 33788., 35008., 37320., 38576., 35828., 37120., 39504., 40832.,
      18399., 19186., 20738., 21552., 19821., 20662., 22268., 23136., 21243.,
      22138., 23798., 24720., 26175., 27078., 28854., 29784., 27813., 28770.,
      30600., 31584., 28876., 29888., 31992., 33040., 30916., 32000., 34176.,
      35296., 22563., 23466., 25134., 26064., 23985., 24942., 26664., 27648.,
      22015., 22706., 24162., 24880., 27539., 28366., 30066., 30920., 29177.,
      30058., 31812., 32720., 38172., 39360., 41640., 42864., 40212., 41472.,
      43824., 45120., 24231., 25058., 26650., 27504., 25653., 26534., 28180.,
      29088., 27075., 28010., 29710., 30672., 13402., 13940., 15108., 15664.,
      14590., 15164., 16368., 16960., 15944., 16576., 18000., 18656., 17432.,
      18112., 19584., 20288., 11250., 11788., 12884., 13440., 12294., 12868.,
      14000., 14592., 12698., 13180., 14220., 14720., 20562., 21092., 22252.,
      22800., 21750., 22316., 23512., 24096., 28328., 29120., 30704., 31520.,
      29816., 30656., 32288., 33152., 18442., 18972., 20060., 20608., 19486.,
      20052., 21176., 21760., 20530., 21132., 22292., 22912.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29924., 31104., 32584., 33776., 30476., 31680., 33184., 34400., 31028.,
      32256., 33784., 35024., 31580., 32832., 34384., 35648., 32132., 33408.,
      34984., 36272., 32684., 33984., 35584., 36896., 33236., 34560., 36184.,
      37520., 37652., 39168., 40984., 42512., 38204., 39744., 41584., 43136.,
      38756., 40320., 42184., 43760., 39308., 40896., 42784., 44384., 39860.,
      41472., 43384., 45008., 40412., 42048., 43984., 45632., 40964., 42624.,
      44584., 46256., 37956., 39552., 41448., 43056., 38508., 40128., 42048.,
      43680., 39060., 40704., 42648., 44304., 39612., 41280., 43248., 44928.,
      33764., 35200., 36936., 38384., 34316., 35776., 37536., 39008., 34868.,
      36352., 38136., 39632., 39284., 40960., 42936., 44624., 39836., 41536.,
      43536., 45248., 30916., 32384., 34152., 35632., 31468., 32960., 34752.,
      36256., 32020., 33536., 35352., 36880., 32572., 34112., 35952., 37504.,
      24676., 25984., 27592., 28912., 29092., 30592., 32392., 33904., 29644.,
      31168., 32992., 34528., 30196., 31744., 33592., 35152., 30748., 32320.,
      34192., 35776., 31300., 32896., 34792., 36400., 31852., 33472., 35392.,
      37024., 32404., 34048., 35992., 37648., 33492., 35072., 36952., 38544.,
      34044., 35648., 37552., 39168., 32292., 33664., 35336., 36720., 32844.,
      34240., 35936., 37344., 33396., 34816., 36536., 37968., 33948., 35392.,
      37136., 38592., 34500., 35968., 37736., 39216., 33540., 34944., 36648.,
      38064., 34092., 35520., 37248., 38688., 34644., 36096., 37848., 39312.,
      35196., 36672., 38448., 39936., 31396., 32640., 34184., 35440., 31948.,
      33216., 34784., 36064., 32500., 33792., 35384., 36688.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19106., 19716., 20326., 20936., 22212., 22840., 23468., 24096., 20294.,
      20940., 21586., 22232., 23544., 24208., 24872., 25536., 24696., 25552.,
      26408., 27264., 28912., 29792., 30672., 31552., 26088., 26992., 27896.,
      28800., 30496., 31424., 32352., 33280., 14226., 14836., 15446., 16056.,
      17188., 17816., 18444., 19072., 15126., 15772., 16418., 17064., 18232.,
      18896., 19560., 20224., 16026., 16708., 17390., 18072., 19276., 19976.,
      20676., 21376., 26895., 27694., 28493., 29292., 31042., 31868., 32694.,
      33520., 28581., 29434., 30287., 31140., 32944., 33824., 34704., 35584.,
      28420., 29400., 30380., 31360., 33464., 34480., 35496., 36512., 30380.,
      31432., 32484., 33536., 35712., 36800., 37888., 38976., 20503., 21302.,
      22101., 22900., 24434., 25260., 26086., 26912., 21757., 22610., 23463.,
      24316., 25904., 26784., 27664., 28544., 17763., 18542., 19321., 20100.,
      21614., 22420., 23226., 24032., 25155., 25942., 26729., 27516., 29254.,
      30068., 30882., 31696., 26841., 27682., 28523., 29364., 31156., 32024.,
      32892., 33760., 32564., 33784., 35004., 36224., 38568., 39824., 41080.,
      42336., 34524., 35816., 37108., 38400., 40816., 42144., 43472., 44800.,
      18859., 19646., 20433., 21220., 22742., 23556., 24370., 25184., 20113.,
      20954., 21795., 22636., 24212., 25080., 25948., 26816., 21367., 22262.,
      23157., 24052., 25682., 26604., 27526., 28448., 29175., 30078., 30981.,
      31884., 33738., 34668., 35598., 36528., 30861., 31818., 32775., 33732.,
      35640., 36624., 37608., 38592., 27044., 28056., 29068., 30080., 32216.,
      33264., 34312., 35360., 29004., 30088., 31172., 32256., 34464., 35584.,
      36704., 37824., 21951., 22854., 23757., 24660., 26298., 27228., 28158.,
      29088., 23205., 24162., 25119., 26076., 27768., 28752., 29736., 30720.,
      17995., 18686., 19377., 20068., 21494., 22212., 22930., 23648., 26859.,
      27686., 28513., 29340., 31118., 31972., 32826., 33680., 28545., 29426.,
      30307., 31188., 33020., 33928., 34836., 35744., 33172., 34360., 35548.,
      36736., 39048., 40272., 41496., 42720., 35132., 36392., 37652., 38912.,
      41296., 42592., 43888., 45184., 20243., 21070., 21897., 22724., 24286.,
      25140., 25994., 26848., 21497., 22378., 23259., 24140., 25756., 26664.,
      27572., 28480., 22751., 23686., 24621., 25556., 27226., 28188., 29150.,
      30112., 15706., 16244., 16782., 17320., 18524., 19080., 19636., 20192.,
      16894., 17468., 18042., 18616., 19856., 20448., 21040., 21632., 17176.,
      17808., 18440., 19072., 20496., 21152., 21808., 22464., 18568., 19248.,
      19928., 20608., 22080., 22784., 23488., 24192., 11402., 11940., 12478.,
      13016., 14076., 14632., 15188., 15744., 12302., 12876., 13450., 14024.,
      15120., 15712., 16304., 16896., 12050., 12532., 13014., 13496., 14500.,
      15000., 15500., 16000., 18002., 18532., 19062., 19592., 20788., 21336.,
      21884., 22432., 19190., 19756., 20322., 20888., 22120., 22704., 23288.,
      23872., 24376., 25168., 25960., 26752., 28336., 29152., 29968., 30784.,
      25768., 26608., 27448., 28288., 29920., 30784., 31648., 32512., 13762.,
      14292., 14822., 15352., 16404., 16952., 17500., 18048., 14662., 15228.,
      15794., 16360., 17448., 18032., 18616., 19200., 15562., 16164., 16766.,
      17368., 18492., 19112., 19732., 20352.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27436., 28104., 28772., 29440., 30696., 31376., 32056., 32736., 28516.,
      29208., 29900., 30592., 31872., 32576., 33280., 33984., 29596., 30312.,
      31028., 31744., 33048., 33776., 34504., 35232., 30676., 31416., 32156.,
      32896., 34224., 34976., 35728., 36480., 28556., 29192., 29828., 30464.,
      31688., 32336., 32984., 33632., 29636., 30296., 30956., 31616., 32864.,
      33536., 34208., 34880., 30716., 31400., 32084., 32768., 34040., 34736.,
      35432., 36128., 37180., 37928., 38676., 39424., 40760., 41520., 42280.,
      43040., 38260., 39032., 39804., 40576., 41936., 42720., 43504., 44288.,
      39340., 40136., 40932., 41728., 43112., 43920., 44728., 45536., 40420.,
      41240., 42060., 42880., 44288., 45120., 45952., 46784., 41500., 42344.,
      43188., 44032., 45464., 46320., 47176., 48032., 42580., 43448., 44316.,
      45184., 46640., 47520., 48400., 49280., 38412., 39176., 39940., 40704.,
      42056., 42832., 43608., 44384., 35532., 36232., 36932., 37632., 38920.,
      39632., 40344., 41056., 36612., 37336., 38060., 38784., 40096., 40832.,
      41568., 42304., 37692., 38440., 39188., 39936., 41272., 42032., 42792.,
      43552., 38772., 39544., 40316., 41088., 42448., 43232., 44016., 44800.,
      33580., 34248., 34916., 35584., 36840., 37520., 38200., 38880., 34660.,
      35352., 36044., 36736., 38016., 38720., 39424., 40128., 35740., 36456.,
      37172., 37888., 39192., 39920., 40648., 41376., 44380., 45288., 46196.,
      47104., 48600., 49520., 50440., 51360., 45460., 46392., 47324., 48256.,
      49776., 50720., 51664., 52608., 37196., 38024., 38852., 39680., 41096.,
      41936., 42776., 43616., 38276., 39128., 39980., 40832., 42272., 43136.,
      44000., 44864., 39356., 40232., 41108., 41984., 43448., 44336., 45224.,
      46112., 40436., 41336., 42236., 43136., 44624., 45536., 46448., 47360.,
      33196., 33992., 34788., 35584., 36968., 37776., 38584., 39392., 20076.,
      20808., 21540., 22272., 23592., 24336., 25080., 25824., 21156., 21912.,
      22668., 23424., 24768., 25536., 26304., 27072., 22236., 23016., 23796.,
      24576., 25944., 26736., 27528., 28320., 23316., 24120., 24924., 25728.,
      27120., 27936., 28752., 29568., 23244., 23944., 24644., 25344., 26632.,
      27344., 28056., 28768., 24324., 25048., 25772., 26496., 27808., 28544.,
      29280., 30016., 25404., 26152., 26900., 27648., 28984., 29744., 30504.,
      31264., 30716., 31400., 32084., 32768., 34040., 34736., 35432., 36128.,
      31796., 32504., 33212., 33920., 35216., 35936., 36656., 37376., 30700.,
      31304., 31908., 32512., 33704., 34320., 34936., 35552., 31780., 32408.,
      33036., 33664., 34880., 35520., 36160., 36800., 32860., 33512., 34164.,
      34816., 36056., 36720., 37384., 38048., 33940., 34616., 35292., 35968.,
      37232., 37920., 38608., 39296., 35020., 35720., 36420., 37120., 38408.,
      39120., 39832., 40544., 38412., 39176., 39940., 40704., 42056., 42832.,
      43608., 44384., 39492., 40280., 41068., 41856., 43232., 44032., 44832.,
      45632., 40572., 41384., 42196., 43008., 44408., 45232., 46056., 46880.,
      41652., 42488., 43324., 44160., 45584., 46432., 47280., 48128., 38508.,
      39240., 39972., 40704., 42024., 42768., 43512., 44256., 39588., 40344.,
      41100., 41856., 43200., 43968., 44736., 45504., 40668., 41448., 42228.,
      43008., 44376., 45168., 45960., 46752.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13010., 14024., 15074., 16160., 15002., 16088., 17210., 18368., 20712.,
      22144., 23624., 25152., 23176., 24704., 26280., 27904., 11018., 11960.,
      12938., 13952., 12722., 13736., 14786., 15872., 14426., 15512., 16634.,
      17792., 25851., 27500., 29203., 30960., 29127., 30884., 32695., 34560.,
      26332., 28288., 30316., 32416., 30412., 32512., 34684., 36928., 22639.,
      24180., 25775., 27424., 25483., 27132., 28835., 30592., 18855., 20356.,
      21911., 23520., 19299., 20732., 22219., 23760., 22575., 24116., 25711.,
      27360., 33084., 35328., 37644., 40032., 37164., 39552., 42012., 44544.,
      16951., 18276., 19655., 21088., 19795., 21228., 22715., 24256., 22639.,
      24180., 25775., 27424., 29963., 31756., 33603., 35504., 33239., 35140.,
      37095., 39104., 24924., 26880., 28908., 31008., 29004., 31104., 33276.,
      35520., 26175., 27860., 29599., 31392., 29019., 30812., 32659., 34560.,
      16951., 18276., 19655., 21088., 23411., 24988., 26619., 28304., 26687.,
      28372., 30111., 31904., 33980., 36224., 38540., 40928., 38060., 40448.,
      42908., 45440., 20487., 21956., 23479., 25056., 23331., 24908., 26539.,
      28224., 26175., 27860., 29599., 31392., 16738., 17896., 19090., 20320.,
      19114., 20344., 21610., 22912., 18984., 20352., 21768., 23232., 21960.,
      23424., 24936., 26496., 14554., 15640., 16762., 17920., 16642., 17800.,
      18994., 20224., 15722., 16760., 17834., 18944., 11986., 13000., 14050.,
      15136., 14362., 15448., 16570., 17728., 24168., 25728., 27336., 28992.,
      27144., 28800., 30504., 32256., 10378., 11320., 12298., 13312., 12466.,
      13480., 14530., 15616., 14554., 15640., 16762., 17920.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27828., 29440., 31076., 32736., 28932., 30592., 32276., 33984., 30036.,
      31744., 33476., 35232., 31140., 32896., 34676., 36480., 28916., 30464.,
      32036., 33632., 30020., 31616., 33236., 34880., 31124., 32768., 34436.,
      36128., 37652., 39424., 41220., 43040., 38756., 40576., 42420., 44288.,
      39860., 41728., 43620., 45536., 40964., 42880., 44820., 46784., 42068.,
      44032., 46020., 48032., 43172., 45184., 47220., 49280., 38900., 40704.,
      42532., 44384., 35956., 37632., 39332., 41056., 37060., 38784., 40532.,
      42304., 38164., 39936., 41732., 43552., 39268., 41088., 42932., 44800.,
      33972., 35584., 37220., 38880., 35076., 36736., 38420., 40128., 36180.,
      37888., 39620., 41376., 45012., 47104., 49220., 51360., 46116., 48256.,
      50420., 52608., 37748., 39680., 41636., 43616., 38852., 40832., 42836.,
      44864., 39956., 41984., 44036., 46112., 41060., 43136., 45236., 47360.,
      33716., 35584., 37476., 39392., 20532., 22272., 24036., 25824., 21636.,
      23424., 25236., 27072., 22740., 24576., 26436., 28320., 23844., 25728.,
      27636., 29568., 23668., 25344., 27044., 28768., 24772., 26496., 28244.,
      30016., 25876., 27648., 29444., 31264., 31124., 32768., 34436., 36128.,
      32228., 33920., 35636., 37376., 31028., 32512., 34020., 35552., 32132.,
      33664., 35220., 36800., 33236., 34816., 36420., 38048., 34340., 35968.,
      37620., 39296., 35444., 37120., 38820., 40544., 38900., 40704., 42532.,
      44384., 40004., 41856., 43732., 45632., 41108., 43008., 44932., 46880.,
      42212., 44160., 46132., 48128., 38964., 40704., 42468., 44256., 40068.,
      41856., 43668., 45504., 41172., 43008., 44868., 46752.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14898., 15396., 16524., 17040., 18222., 18756., 19992., 20544., 17274.,
      17844., 19044., 19632., 20886., 21492., 22800., 23424., 23736., 24528.,
      26064., 26880., 28488., 29328., 31008., 31872., 26520., 27408., 29040.,
      29952., 31656., 32592., 34368., 35328., 10914., 11412., 12396., 12912.,
      13950., 14484., 15576., 16128., 12714., 13284., 14340., 14928., 16038.,
      16644., 17808., 18432., 14514., 15156., 16284., 16944., 18126., 18804.,
      20040., 20736., 27603., 28406., 30106., 30936., 32717., 33574., 35436.,
      36320., 30975., 31886., 33694., 34632., 36521., 37486., 39456., 40448.,
      26164., 27064., 29016., 29952., 32012., 32984., 35152., 36160., 30084.,
      31128., 33224., 34304., 36508., 37624., 39936., 41088., 21179., 21982.,
      23466., 24296., 25861., 26718., 28364., 29248., 23687., 24598., 26190.,
      27128., 28801., 29766., 31520., 32512., 15699., 16462., 17906., 18696.,
      20221., 21038., 22644., 23488., 20859., 21446., 22930., 23544., 25109.,
      25750., 27396., 28064., 24231., 24926., 26518., 27240., 28913., 29662.,
      31416., 32192., 31188., 32376., 34616., 35840., 38188., 39448., 41904.,
      43200., 35108., 36440., 38824., 40192., 42684., 44088., 46688., 48128.,
      16163., 16750., 18018., 18632., 19981., 20622., 22052., 22720., 18671.,
      19366., 20742., 21464., 22921., 23670., 25208., 25984., 21179., 21982.,
      23466., 24296., 25861., 26718., 28364., 29248., 31587., 32534., 34378.,
      35352., 37277., 38278., 40284., 41312., 34959., 36014., 37966., 39048.,
      41081., 42190., 44304., 45440., 23348., 24248., 26200., 27136., 29196.,
      30168., 32336., 33344., 27268., 28312., 30408., 31488., 33692., 34808.,
      37120., 38272., 24011., 24958., 26586., 27560., 29269., 30270., 32060.,
      33088., 26519., 27574., 29310., 30392., 32209., 33318., 35216., 36352.,
      16163., 16750., 18018., 18632., 19981., 20622., 22052., 22720., 24843.,
      25574., 27202., 27960., 29669., 30454., 32244., 33056., 28215., 29054.,
      30790., 31656., 33473., 34366., 36264., 37184., 32980., 34168., 36408.,
      37632., 39980., 41240., 43696., 44992., 36900., 38232., 40616., 41984.,
      44476., 45880., 48480., 49920., 18995., 19726., 21138., 21896., 23389.,
      24174., 25748., 26560., 21503., 22342., 23862., 24728., 26329., 27222.,
      28904., 29824., 24011., 24958., 26586., 27560., 29269., 30270., 32060.,
      33088., 16482., 17028., 18204., 18768., 19998., 20580., 21864., 22464.,
      18858., 19476., 20724., 21360., 22662., 23316., 24672., 25344., 18168.,
      18768., 20112., 20736., 22152., 22800., 24288., 24960., 20952., 21648.,
      23088., 23808., 25320., 26064., 27648., 28416., 12114., 12660., 13692.,
      14256., 15342., 15924., 17064., 17664., 13914., 14532., 15636., 16272.,
      17430., 18084., 19296., 19968., 13986., 14484., 15468., 15984., 17022.,
      17556., 18648., 19200., 11730., 12132., 13164., 13584., 14670., 15108.,
      16248., 16704., 14106., 14580., 15684., 16176., 17334., 17844., 19056.,
      19584., 22200., 22992., 24528., 25344., 26952., 27792., 29472., 30336.,
      24984., 25872., 27504., 28416., 30120., 31056., 32832., 33792., 8514.,
      8916.,  9804.,  10224., 11166., 11604., 12600., 13056., 10314., 10788.,
      11748., 12240., 13254., 13764., 14832., 15360., 12114., 12660., 13692.,
      14256., 15342., 15924., 17064., 17664.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25916., 26472., 27592., 28160., 29316., 29896., 31088., 31680., 28076.,
      28680., 29848., 30464., 31668., 32296., 33536., 34176., 30236., 30888.,
      32104., 32768., 34020., 34696., 35984., 36672., 32396., 33096., 34360.,
      35072., 36372., 37096., 38432., 39168., 31356., 31976., 33160., 33792.,
      35012., 35656., 36912., 37568., 33516., 34184., 35416., 36096., 37364.,
      38056., 39360., 40064., 35676., 36392., 37672., 38400., 39716., 40456.,
      41808., 42560., 41436., 42280., 43688., 44544., 45988., 46856., 48336.,
      49216., 43596., 44488., 45944., 46848., 48340., 49256., 50784., 51712.,
      37436., 38248., 39624., 40448., 41860., 42696., 44144., 44992., 39596.,
      40456., 41880., 42752., 44212., 45096., 46592., 47488., 41756., 42664.,
      44136., 45056., 46564., 47496., 49040., 49984., 43916., 44872., 46392.,
      47360., 48916., 49896., 51488., 52480., 29436., 30184., 31496., 32256.,
      33604., 34376., 35760., 36544., 23676., 24296., 25480., 26112., 27332.,
      27976., 29232., 29888., 25836., 26504., 27736., 28416., 29684., 30376.,
      31680., 32384., 27996., 28712., 29992., 30720., 32036., 32776., 34128.,
      34880., 30156., 30920., 32248., 33024., 34388., 35176., 36576., 37376.,
      25916., 26472., 27592., 28160., 29316., 29896., 31088., 31680., 28076.,
      28680., 29848., 30464., 31668., 32296., 33536., 34176., 30236., 30888.,
      32104., 32768., 34020., 34696., 35984., 36672., 42140., 42920., 44264.,
      45056., 46436., 47240., 48656., 49472., 44300., 45128., 46520., 47360.,
      48788., 49640., 51104., 51968., 37116., 37864., 39176., 39936., 41284.,
      42056., 43440., 44224., 39276., 40072., 41432., 42240., 43636., 44456.,
      45888., 46720., 41436., 42280., 43688., 44544., 45988., 46856., 48336.,
      49216., 43596., 44488., 45944., 46848., 48340., 49256., 50784., 51712.,
      37436., 38248., 39624., 40448., 41860., 42696., 44144., 44992., 23484.,
      24168., 25416., 26112., 27396., 28104., 29424., 30144., 25644., 26376.,
      27672., 28416., 29748., 30504., 31872., 32640., 27804., 28584., 29928.,
      30720., 32100., 32904., 34320., 35136., 29964., 30792., 32184., 33024.,
      34452., 35304., 36768., 37632., 23676., 24296., 25480., 26112., 27332.,
      27976., 29232., 29888., 25836., 26504., 27736., 28416., 29684., 30376.,
      31680., 32384., 27996., 28712., 29992., 30720., 32036., 32776., 34128.,
      34880., 35676., 36392., 37672., 38400., 39716., 40456., 41808., 42560.,
      37836., 38600., 39928., 40704., 42068., 42856., 44256., 45056., 37820.,
      38504., 39752., 40448., 41732., 42440., 43760., 44480., 39980., 40712.,
      42008., 42752., 44084., 44840., 46208., 46976., 42140., 42920., 44264.,
      45056., 46436., 47240., 48656., 49472., 44300., 45128., 46520., 47360.,
      48788., 49640., 51104., 51968., 37116., 37864., 39176., 39936., 41284.,
      42056., 43440., 44224., 29436., 30184., 31496., 32256., 33604., 34376.,
      35760., 36544., 31596., 32392., 33752., 34560., 35956., 36776., 38208.,
      39040., 33756., 34600., 36008., 36864., 38308., 39176., 40656., 41536.,
      35916., 36808., 38264., 39168., 40660., 41576., 43104., 44032., 23484.,
      24168., 25416., 26112., 27396., 28104., 29424., 30144., 25644., 26376.,
      27672., 28416., 29748., 30504., 31872., 32640., 27804., 28584., 29928.,
      30720., 32100., 32904., 34320., 35136.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x12x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16434., 16932., 17430., 17928., 19092., 19608., 20124., 20640., 21894.,
      22428., 22962., 23496., 24840., 25392., 25944., 26496., 18810., 19380.,
      19950., 20520., 21756., 22344., 22932., 23520., 24846., 25452., 26058.,
      26664., 28080., 28704., 29328., 29952., 21336., 22128., 22920., 23712.,
      25200., 26016., 26832., 27648., 29256., 30096., 30936., 31776., 33504.,
      34368., 35232., 36096., 23736., 24624., 25512., 26400., 27984., 28896.,
      29808., 30720., 32424., 33360., 34296., 35232., 37056., 38016., 38976.,
      39936., 8466.,  8964.,  9462.,  9960.,  10836., 11352., 11868., 12384.,
      13350., 13884., 14418., 14952., 16008., 16560., 17112., 17664., 9690.,
      10260., 10830., 11400., 12348., 12936., 13524., 14112., 15150., 15756.,
      16362., 16968., 18096., 18720., 19344., 19968., 10914., 11556., 12198.,
      12840., 13860., 14520., 15180., 15840., 16950., 17628., 18306., 18984.,
      20184., 20880., 21576., 22272., 27011., 27814., 28617., 29420., 31222.,
      32052., 32882., 33712., 35649., 36506., 37363., 38220., 40292., 41176.,
      42060., 42944., 30575., 31486., 32397., 33308., 35218., 36156., 37094.,
      38032., 40077., 41042., 42007., 42972., 45152., 46144., 47136., 48128.,
      25828., 26728., 27628., 28528., 30472., 31408., 32344., 33280., 35404.,
      36376., 37348., 38320., 40624., 41632., 42640., 43648., 29428., 30472.,
      31516., 32560., 34648., 35728., 36808., 37888., 40156., 41272., 42388.,
      43504., 45952., 47104., 48256., 49408., 14163., 14966., 15769., 16572.,
      17942., 18772., 19602., 20432., 21937., 22794., 23651., 24508., 26148.,
      27032., 27916., 28800., 15999., 16910., 17821., 18732., 20210., 21148.,
      22086., 23024., 24637., 25602., 26567., 27532., 29280., 30272., 31264.,
      32256., 13483., 14246., 15009., 15772., 17102., 17892., 18682., 19472.,
      20937., 21754., 22571., 23388., 24988., 25832., 26676., 27520., 19883.,
      20470., 21057., 21644., 23230., 23844., 24458., 25072., 26793., 27434.,
      28075., 28716., 30572., 31240., 31908., 32576., 23447., 24142., 24837.,
      25532., 27226., 27948., 28670., 29392., 31221., 31970., 32719., 33468.,
      35432., 36208., 36984., 37760., 27396., 28584., 29772., 30960., 33192.,
      34416., 35640., 36864., 39276., 40536., 41796., 43056., 45648., 46944.,
      48240., 49536., 30996., 32328., 33660., 34992., 37368., 38736., 40104.,
      41472., 44028., 45432., 46836., 48240., 50976., 52416., 53856., 55296.,
      10491., 11078., 11665., 12252., 13406., 14020., 14634., 15248., 16537.,
      17178., 17819., 18460., 19884., 20552., 21220., 21888., 12327., 13022.,
      13717., 14412., 15674., 16396., 17118., 17840., 19237., 19986., 20735.,
      21484., 23016., 23792., 24568., 25344., 14163., 14966., 15769., 16572.,
      17942., 18772., 19602., 20432., 21937., 22794., 23651., 24508., 26148.,
      27032., 27916., 28800., 30739., 31686., 32633., 33580., 35526., 36500.,
      37474., 38448., 40529., 41530., 42531., 43532., 45748., 46776., 47804.,
      48832., 34303., 35358., 36413., 37468., 39522., 40604., 41686., 42768.,
      44957., 46066., 47175., 48284., 50608., 51744., 52880., 54016., 20196.,
      21096., 21996., 22896., 24840., 25776., 26712., 27648., 29772., 30744.,
      31716., 32688., 34992., 36000., 37008., 38016., 23796., 24840., 25884.,
      26928., 29016., 30096., 31176., 32256., 34524., 35640., 36756., 37872.,
      40320., 41472., 42624., 43776., 15587., 16534., 17481., 18428., 19942.,
      20916., 21890., 22864., 24513., 25514., 26515., 27516., 29300., 30328.,
      31356., 32384., 17423., 18478., 19533., 20588., 22210., 23292., 24374.,
      25456., 27213., 28322., 29431., 30540., 32432., 33568., 34704., 35840.,
      10491., 11078., 11665., 12252., 13406., 14020., 14634., 15248., 16537.,
      17178., 17819., 18460., 19884., 20552., 21220., 21888., 23611., 24342.,
      25073., 25804., 27534., 28292., 29050., 29808., 31673., 32458., 33243.,
      34028., 36028., 36840., 37652., 38464., 27175., 28014., 28853., 29692.,
      31530., 32396., 33262., 34128., 36101., 36994., 37887., 38780., 40888.,
      41808., 42728., 43648., 30980., 32168., 33356., 34544., 36776., 38000.,
      39224., 40448., 42860., 44120., 45380., 46640., 49232., 50528., 51824.,
      53120., 34580., 35912., 37244., 38576., 40952., 42320., 43688., 45056.,
      47612., 49016., 50420., 51824., 54560., 56000., 57440., 58880., 11915.,
      12646., 13377., 14108., 15406., 16164., 16922., 17680., 19113., 19898.,
      20683., 21468., 23036., 23848., 24660., 25472., 13751., 14590., 15429.,
      16268., 17674., 18540., 19406., 20272., 21813., 22706., 23599., 24492.,
      26168., 27088., 28008., 28928., 15587., 16534., 17481., 18428., 19942.,
      20916., 21890., 22864., 24513., 25514., 26515., 27516., 29300., 30328.,
      31356., 32384., 18018., 18564., 19110., 19656., 20868., 21432., 21996.,
      22560., 23862., 24444., 25026., 25608., 27000., 27600., 28200., 28800.,
      20394., 21012., 21630., 22248., 23532., 24168., 24804., 25440., 26814.,
      27468., 28122., 28776., 30240., 30912., 31584., 32256., 16536., 17136.,
      17736., 18336., 19632., 20256., 20880., 21504., 22920., 23568., 24216.,
      24864., 26400., 27072., 27744., 28416., 18936., 19632., 20328., 21024.,
      22416., 23136., 23856., 24576., 26088., 26832., 27576., 28320., 29952.,
      30720., 31488., 32256., 9282.,  9828.,  10374., 10920., 11844., 12408.,
      12972., 13536., 14550., 15132., 15714., 16296., 17400., 18000., 18600.,
      19200., 10506., 11124., 11742., 12360., 13356., 13992., 14628., 15264.,
      16350., 17004., 17658., 18312., 19488., 20160., 20832., 21504., 8466.,
      8964.,  9462.,  9960.,  10836., 11352., 11868., 12384., 13350., 13884.,
      14418., 14952., 16008., 16560., 17112., 17664., 13266., 13668., 14070.,
      14472., 15540., 15960., 16380., 16800., 17958., 18396., 18834., 19272.,
      20520., 20976., 21432., 21888., 15642., 16116., 16590., 17064., 18204.,
      18696., 19188., 19680., 20910., 21420., 21930., 22440., 23760., 24288.,
      24816., 25344., 18264., 19056., 19848., 20640., 22128., 22944., 23760.,
      24576., 26184., 27024., 27864., 28704., 30432., 31296., 32160., 33024.,
      20664., 21552., 22440., 23328., 24912., 25824., 26736., 27648., 29352.,
      30288., 31224., 32160., 33984., 34944., 35904., 36864., 6834.,  7236.,
      7638.,  8040.,  8820.,  9240.,  9660.,  10080., 10950., 11388., 11826.,
      12264., 13224., 13680., 14136., 14592., 8058.,  8532.,  9006.,  9480.,
      10332., 10824., 11316., 11808., 12750., 13260., 13770., 14280., 15312.,
      15840., 16368., 16896., 9282.,  9828.,  10374., 10920., 11844., 12408.,
      12972., 13536., 14550., 15132., 15714., 16296., 17400., 18000., 18600.,
      19200.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x12x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9292.,  9592.,  9892.,  10192., 10840., 11152., 11464., 11776., 12484.,
      12808., 13132., 13456., 14224., 14560., 14896., 15232., 10492., 10840.,
      11188., 11536., 12232., 12592., 12952., 13312., 14068., 14440., 14812.,
      15184., 16000., 16384., 16768., 17152., 11692., 12088., 12484., 12880.,
      13624., 14032., 14440., 14848., 15652., 16072., 16492., 16912., 17776.,
      18208., 18640., 19072., 12892., 13336., 13780., 14224., 15016., 15472.,
      15928., 16384., 17236., 17704., 18172., 18640., 19552., 20032., 20512.,
      20992., 6732.,  7032.,  7332.,  7632.,  8280.,  8592.,  8904.,  9216.,
      9924.,  10248., 10572., 10896., 11664., 12000., 12336., 12672., 7932.,
      8280.,  8628.,  8976.,  9672.,  10032., 10392., 10752., 11508., 11880.,
      12252., 12624., 13440., 13824., 14208., 14592., 9132.,  9528.,  9924.,
      10320., 11064., 11472., 11880., 12288., 13092., 13512., 13932., 14352.,
      15216., 15648., 16080., 16512., 9132.,  9528.,  9924.,  10320., 11064.,
      11472., 11880., 12288., 13092., 13512., 13932., 14352., 15216., 15648.,
      16080., 16512., 10332., 10776., 11220., 11664., 12456., 12912., 13368.,
      13824., 14676., 15144., 15612., 16080., 16992., 17472., 17952., 18432.,
      9292.,  9592.,  9892.,  10192., 10840., 11152., 11464., 11776., 12484.,
      12808., 13132., 13456., 14224., 14560., 14896., 15232., 10492., 10840.,
      11188., 11536., 12232., 12592., 12952., 13312., 14068., 14440., 14812.,
      15184., 16000., 16384., 16768., 17152., 11692., 12088., 12484., 12880.,
      13624., 14032., 14440., 14848., 15652., 16072., 16492., 16912., 17776.,
      18208., 18640., 19072., 12892., 13336., 13780., 14224., 15016., 15472.,
      15928., 16384., 17236., 17704., 18172., 18640., 19552., 20032., 20512.,
      20992., 6732.,  7032.,  7332.,  7632.,  8280.,  8592.,  8904.,  9216.,
      9924.,  10248., 10572., 10896., 11664., 12000., 12336., 12672., 6732.,
      7032.,  7332.,  7632.,  8280.,  8592.,  8904.,  9216.,  9924.,  10248.,
      10572., 10896., 11664., 12000., 12336., 12672., 7932.,  8280.,  8628.,
      8976.,  9672.,  10032., 10392., 10752., 11508., 11880., 12252., 12624.,
      13440., 13824., 14208., 14592., 9132.,  9528.,  9924.,  10320., 11064.,
      11472., 11880., 12288., 13092., 13512., 13932., 14352., 15216., 15648.,
      16080., 16512., 10332., 10776., 11220., 11664., 12456., 12912., 13368.,
      13824., 14676., 15144., 15612., 16080., 16992., 17472., 17952., 18432.,
      9292.,  9592.,  9892.,  10192., 10840., 11152., 11464., 11776., 12484.,
      12808., 13132., 13456., 14224., 14560., 14896., 15232., 10492., 10840.,
      11188., 11536., 12232., 12592., 12952., 13312., 14068., 14440., 14812.,
      15184., 16000., 16384., 16768., 17152., 11692., 12088., 12484., 12880.,
      13624., 14032., 14440., 14848., 15652., 16072., 16492., 16912., 17776.,
      18208., 18640., 19072., 9644.,  10040., 10436., 10832., 11576., 11984.,
      12392., 12800., 13604., 14024., 14444., 14864., 15728., 16160., 16592.,
      17024., 10844., 11288., 11732., 12176., 12968., 13424., 13880., 14336.,
      15188., 15656., 16124., 16592., 17504., 17984., 18464., 18944., 6732.,
      7032.,  7332.,  7632.,  8280.,  8592.,  8904.,  9216.,  9924.,  10248.,
      10572., 10896., 11664., 12000., 12336., 12672., 7932.,  8280.,  8628.,
      8976.,  9672.,  10032., 10392., 10752., 11508., 11880., 12252., 12624.,
      13440., 13824., 14208., 14592., 9132.,  9528.,  9924.,  10320., 11064.,
      11472., 11880., 12288., 13092., 13512., 13932., 14352., 15216., 15648.,
      16080., 16512., 10332., 10776., 11220., 11664., 12456., 12912., 13368.,
      13824., 14676., 15144., 15612., 16080., 16992., 17472., 17952., 18432.,
      9292.,  9592.,  9892.,  10192., 10840., 11152., 11464., 11776., 12484.,
      12808., 13132., 13456., 14224., 14560., 14896., 15232., 7244.,  7544.,
      7844.,  8144.,  8792.,  9104.,  9416.,  9728.,  10436., 10760., 11084.,
      11408., 12176., 12512., 12848., 13184., 8444.,  8792.,  9140.,  9488.,
      10184., 10544., 10904., 11264., 12020., 12392., 12764., 13136., 13952.,
      14336., 14720., 15104., 9644.,  10040., 10436., 10832., 11576., 11984.,
      12392., 12800., 13604., 14024., 14444., 14864., 15728., 16160., 16592.,
      17024., 10844., 11288., 11732., 12176., 12968., 13424., 13880., 14336.,
      15188., 15656., 16124., 16592., 17504., 17984., 18464., 18944., 6732.,
      7032.,  7332.,  7632.,  8280.,  8592.,  8904.,  9216.,  9924.,  10248.,
      10572., 10896., 11664., 12000., 12336., 12672., 7932.,  8280.,  8628.,
      8976.,  9672.,  10032., 10392., 10752., 11508., 11880., 12252., 12624.,
      13440., 13824., 14208., 14592., 9132.,  9528.,  9924.,  10320., 11064.,
      11472., 11880., 12288., 13092., 13512., 13932., 14352., 15216., 15648.,
      16080., 16512., 9132.,  9528.,  9924.,  10320., 11064., 11472., 11880.,
      12288., 13092., 13512., 13932., 14352., 15216., 15648., 16080., 16512.,
      10332., 10776., 11220., 11664., 12456., 12912., 13368., 13824., 14676.,
      15144., 15612., 16080., 16992., 17472., 17952., 18432., 7244.,  7544.,
      7844.,  8144.,  8792.,  9104.,  9416.,  9728.,  10436., 10760., 11084.,
      11408., 12176., 12512., 12848., 13184., 8444.,  8792.,  9140.,  9488.,
      10184., 10544., 10904., 11264., 12020., 12392., 12764., 13136., 13952.,
      14336., 14720., 15104., 9644.,  10040., 10436., 10832., 11576., 11984.,
      12392., 12800., 13604., 14024., 14444., 14864., 15728., 16160., 16592.,
      17024., 10844., 11288., 11732., 12176., 12968., 13424., 13880., 14336.,
      15188., 15656., 16124., 16592., 17504., 17984., 18464., 18944., 6732.,
      7032.,  7332.,  7632.,  8280.,  8592.,  8904.,  9216.,  9924.,  10248.,
      10572., 10896., 11664., 12000., 12336., 12672., 6732.,  7032.,  7332.,
      7632.,  8280.,  8592.,  8904.,  9216.,  9924.,  10248., 10572., 10896.,
      11664., 12000., 12336., 12672., 7932.,  8280.,  8628.,  8976.,  9672.,
      10032., 10392., 10752., 11508., 11880., 12252., 12624., 13440., 13824.,
      14208., 14592., 9132.,  9528.,  9924.,  10320., 11064., 11472., 11880.,
      12288., 13092., 13512., 13932., 14352., 15216., 15648., 16080., 16512.,
      10332., 10776., 11220., 11664., 12456., 12912., 13368., 13824., 14676.,
      15144., 15612., 16080., 16992., 17472., 17952., 18432., 7244.,  7544.,
      7844.,  8144.,  8792.,  9104.,  9416.,  9728.,  10436., 10760., 11084.,
      11408., 12176., 12512., 12848., 13184., 8444.,  8792.,  9140.,  9488.,
      10184., 10544., 10904., 11264., 12020., 12392., 12764., 13136., 13952.,
      14336., 14720., 15104., 9644.,  10040., 10436., 10832., 11576., 11984.,
      12392., 12800., 13604., 14024., 14444., 14864., 15728., 16160., 16592.,
      17024.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26035., 26404., 38172., 38712., 35028., 25152., 25503., 21774., 20607.,
      30288., 30828., 31368., 19541., 19892., 26840., 27296., 39342., 40008.,
      40674., 25968., 26400., 29168., 27064., 41420., 42086., 42752., 25728.,
      26160., 22333., 22648., 32619., 33078., 29697., 21396., 21693., 18246.,
      17409., 25380., 25839., 26298., 16343., 16640., 19535., 19850., 28509.,
      28968., 29427., 18714., 19011.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x11x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19166., 19244., 19322., 19400., 19478., 19556., 19634., 20024., 20102.,
      20180., 20258., 20336., 20414., 20492., 20882., 20960., 21038., 21116.,
      21194., 21272., 21350., 21740., 21818., 21896., 21974., 22052., 22130.,
      22208., 22598., 22676., 22754., 22832., 22910., 22988., 23066., 23456.,
      23534., 23612., 23690., 23768., 23846., 23924., 24314., 24392., 24470.,
      24548., 24626., 24704., 24782.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16340., 16934., 16868., 17480., 25533., 26424., 26330., 27248., 27063.,
      27944., 19612., 20224., 20168., 20798., 15812., 16412., 14868., 15422.,
      22588., 23456., 21273., 22104., 22070., 22928., 14336., 14890., 14892.,
      15464., 24408., 25200., 25104., 25920., 35576., 36700., 36616., 37776.,
      37656., 38852., 24752., 25568., 25144., 25920., 22016., 22752., 20216.,
      20912., 34728., 35864., 31928., 32972., 32968., 34048., 20808., 21504.,
      21520., 22240., 19048., 19642., 19596., 20208., 28955., 29846., 29782.,
      30700., 26833., 27714., 21060., 21672., 21636., 22266., 15796., 16396.,
      15256., 15810., 24164., 25032., 23263., 24094., 24090., 24948., 17540.,
      18094., 18116., 18688., 18048., 18654., 18596., 19220., 28077., 28922.,
      28904., 29776., 29731., 30630., 21444., 22068., 17988., 18566.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x11x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36184., 38332., 36328., 38488., 36472., 38644., 36616., 38800., 36760.,
      38956., 36904., 39112., 37048., 39268., 37768., 40048., 37912., 40204.,
      38056., 40360., 38200., 40516., 38344., 40672., 38488., 40828., 38632.,
      40984., 39352., 41764., 39496., 41920., 39640., 42076., 39784., 42232.,
      39928., 42388., 40072., 42544., 40216., 42700., 40936., 43480., 41080.,
      43636., 41224., 43792., 41368., 43948., 41512., 44104., 41656., 44260.,
      41800., 44416., 42520., 45196., 42664., 45352., 42808., 45508., 42952.,
      45664., 43096., 45820., 43240., 45976., 43384., 46132., 44104., 46912.,
      44248., 47068., 44392., 47224., 44536., 47380., 44680., 47536., 44824.,
      47692., 44968., 47848., 45688., 48628., 45832., 48784., 45976., 48940.,
      46120., 49096., 46264., 49252., 46408., 49408., 46552., 49564.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13846., 14440., 15034., 15628., 14308., 14920., 15532., 16144., 24127.,
      25018., 25909., 26800., 24862., 25780., 26698., 27616., 25533., 26414.,
      27295., 28176., 19156., 19768., 20380., 20992., 19674., 20304., 20934.,
      21564., 14640., 15240., 15840., 16440., 12222., 12776., 13330., 13884.,
      21396., 22264., 23132., 24000., 22067., 22898., 23729., 24560., 22802.,
      23660., 24518., 25376., 14614., 15168., 15722., 16276., 15132., 15704.,
      16276., 16848., 22104., 22896., 23688., 24480., 22768., 23584., 24400.,
      25216., 31116., 32240., 33364., 34488., 32136., 33296., 34456., 35616.,
      33156., 34352., 35548., 36744., 21424., 22240., 23056., 23872., 21544.,
      22320., 23096., 23872., 21920., 22656., 23392., 24128., 21752., 22448.,
      23144., 23840., 34528., 35664., 36800., 37936., 32092., 33136., 34180.,
      35224., 33112., 34192., 35272., 36352., 22296., 22992., 23688., 24384.,
      22992., 23712., 24432., 25152., 19774., 20368., 20962., 21556., 20276.,
      20888., 21500., 22112., 31099., 31990., 32881., 33772., 31894., 32812.,
      33730., 34648., 29297., 30178., 31059., 31940., 22564., 23176., 23788.,
      24400., 23122., 23752., 24382., 25012., 15120., 15720., 16320., 16920.,
      13510., 14064., 14618., 15172., 24676., 25544., 26412., 27280., 22079.,
      22910., 23741., 24572., 22874., 23732., 24590., 25448., 17438., 17992.,
      18546., 19100., 17996., 18568., 19140., 19712., 13282., 13888., 14494.,
      15100., 13784., 14408., 15032., 15656., 23373., 24218., 25063., 25908.,
      24168., 25040., 25912., 26784., 24963., 25862., 26761., 27660., 18840.,
      19464., 20088., 20712., 15494., 16072., 16650., 17228.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x11x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30284., 31408., 32532., 33656., 30560., 31696., 32832., 33968., 30836.,
      31984., 33132., 34280., 31112., 32272., 33432., 34592., 31388., 32560.,
      33732., 34904., 31664., 32848., 34032., 35216., 31940., 33136., 34332.,
      35528., 33320., 34576., 35832., 37088., 33596., 34864., 36132., 37400.,
      33872., 35152., 36432., 37712., 34148., 35440., 36732., 38024., 34424.,
      35728., 37032., 38336., 34700., 36016., 37332., 38648., 34976., 36304.,
      37632., 38960., 36356., 37744., 39132., 40520., 36632., 38032., 39432.,
      40832., 36908., 38320., 39732., 41144., 37184., 38608., 40032., 41456.,
      37460., 38896., 40332., 41768., 37736., 39184., 40632., 42080., 38012.,
      39472., 40932., 42392., 39392., 40912., 42432., 43952., 39668., 41200.,
      42732., 44264., 39944., 41488., 43032., 44576., 40220., 41776., 43332.,
      44888., 40496., 42064., 43632., 45200., 40772., 42352., 43932., 45512.,
      41048., 42640., 44232., 45824., 42428., 44080., 45732., 47384., 42704.,
      44368., 46032., 47696., 42980., 44656., 46332., 48008., 43256., 44944.,
      46632., 48320., 43532., 45232., 46932., 48632., 43808., 45520., 47232.,
      48944., 44084., 45808., 47532., 49256., 38040., 39568., 41096., 42624.,
      38316., 39856., 41396., 42936., 38592., 40144., 41696., 43248., 32468.,
      33776., 35084., 36392., 32744., 34064., 35384., 36704., 33020., 34352.,
      35684., 37016., 33296., 34640., 35984., 37328., 34676., 36080., 37484.,
      38888., 34952., 36368., 37784., 39200., 35228., 36656., 38084., 39512.,
      35504., 36944., 38384., 39824., 35780., 37232., 38684., 40136., 36056.,
      37520., 38984., 40448., 36332., 37808., 39284., 40760.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17496., 18636., 18552., 19728., 25821., 27504., 27415., 29152., 28241.,
      29904., 21068., 22272., 19812., 20988., 19000., 20152., 18584., 19708.,
      27547., 29248., 27029., 28720., 28623., 30368., 18516., 19668., 19628.,
      20816., 19128., 20576., 20520., 22016., 30816., 32952., 32896., 35104.,
      30496., 32648., 21464., 22976., 21608., 23040., 20616., 22080., 19512.,
      20960., 33536., 35760., 31712., 33816., 33792., 35968., 21960., 23424.,
      23384., 24896., 18156., 19316., 19252., 20448., 25723., 27436., 27377.,
      29144., 24935., 26628., 19208., 20432., 18376., 19572., 18308., 19480.,
      18316., 19460., 27469., 29200., 27395., 29116., 29049., 30824., 19784.,
      20956., 20936., 22144., 14812., 15932., 15908., 17064., 24863., 26484.,
      26517., 28192., 25803., 27468., 18760., 19944., 15304., 16396.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x11x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31264., 33656., 31552., 33968., 31840., 34280., 32128., 34592., 32416.,
      34904., 32704., 35216., 32992., 35528., 34432., 37088., 34720., 37400.,
      35008., 37712., 35296., 38024., 35584., 38336., 35872., 38648., 36160.,
      38960., 37600., 40520., 37888., 40832., 38176., 41144., 38464., 41456.,
      38752., 41768., 39040., 42080., 39328., 42392., 40768., 43952., 41056.,
      44264., 41344., 44576., 41632., 44888., 41920., 45200., 42208., 45512.,
      42496., 45824., 43936., 47384., 44224., 47696., 44512., 48008., 44800.,
      48320., 45088., 48632., 45376., 48944., 45664., 49256., 39424., 42624.,
      39712., 42936., 40000., 43248., 33632., 36392., 33920., 36704., 34208.,
      37016., 34496., 37328., 35936., 38888., 36224., 39200., 36512., 39512.,
      36800., 39824., 37088., 40136., 37376., 40448., 37664., 40760.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14878., 15472., 16564., 17176., 15802., 16432., 17560., 18208., 24095.,
      24954., 26602., 27488., 25565., 26478., 28180., 29120., 25627., 26466.,
      28094., 28960., 19554., 20184., 21368., 22016., 20014., 20616., 21772.,
      22392., 17490., 18096., 19200., 19824., 15534., 16112., 17188., 17784.,
      25609., 26486., 28152., 29056., 27015., 27882., 29538., 30432., 28485.,
      29406., 31116., 32064., 18214., 18792., 19924., 20520., 19250., 19864.,
      21032., 21664., 19160., 19888., 21328., 22080., 20488., 21264., 22752.,
      23552., 28828., 29888., 32040., 33136., 30868., 32000., 34224., 35392.,
      28172., 29248., 31416., 32528., 21096., 21872., 23392., 24192., 20056.,
      20752., 22192., 22912., 18920., 19664., 21120., 21888., 19416., 20144.,
      21584., 22336., 32132., 33280., 35520., 36704., 30652., 31680., 33800.,
      34864., 32692., 33792., 35984., 37120., 23032., 23760., 25232., 25984.,
      24424., 25200., 26720., 27520., 17222., 17816., 18948., 19560., 18226.,
      18856., 20024., 20672., 28251., 29110., 30818., 31704., 29841., 30754.,
      32516., 33456., 27463., 28302., 29990., 30856., 20954., 21584., 22808.,
      23456., 18166., 18768., 19964., 20584., 17130., 17736., 18880., 19504.,
      16022., 16600., 17716., 18312., 25709., 26586., 28312., 29216., 23907.,
      24774., 26490., 27384., 25497., 26418., 28188., 29136., 17678., 18256.,
      19428., 20024., 18794., 19408., 20616., 21248., 13902., 14456., 15548.,
      16120., 14906., 15496., 16624., 17232., 22783., 23550., 25166., 25960.,
      24373., 25194., 26864., 27712., 25387., 26198., 27858., 28696., 19330.,
      19920., 21104., 21712., 15454., 15952., 17044., 17560.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x11x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36740., 37952., 39464., 40688., 37292., 38528., 40064., 41312., 37844.,
      39104., 40664., 41936., 38396., 39680., 41264., 42560., 38948., 40256.,
      41864., 43184., 39500., 40832., 42464., 43808., 40052., 41408., 43064.,
      44432., 42812., 44288., 46064., 47552., 43364., 44864., 46664., 48176.,
      43916., 45440., 47264., 48800., 44468., 46016., 47864., 49424., 45020.,
      46592., 48464., 50048., 45572., 47168., 49064., 50672., 46124., 47744.,
      49664., 51296., 48884., 50624., 52664., 54416., 49436., 51200., 53264.,
      55040., 49988., 51776., 53864., 55664., 50540., 52352., 54464., 56288.,
      51092., 52928., 55064., 56912., 51644., 53504., 55664., 57536., 40676.,
      42304., 44232., 45872., 32940., 34432., 36224., 37728., 33492., 35008.,
      36824., 38352., 34044., 35584., 37424., 38976., 34596., 36160., 38024.,
      39600., 35148., 36736., 38624., 40224., 35700., 37312., 39224., 40848.,
      36252., 37888., 39824., 41472., 39012., 40768., 42824., 44592., 39564.,
      41344., 43424., 45216., 40116., 41920., 44024., 45840., 40668., 42496.,
      44624., 46464., 41220., 43072., 45224., 47088., 41772., 43648., 45824.,
      47712., 42324., 44224., 46424., 48336., 37660., 39424., 41488., 43264.,
      38212., 40000., 42088., 43888., 38764., 40576., 42688., 44512., 32916.,
      34496., 36376., 37968., 33468., 35072., 36976., 38592., 34020., 35648.,
      37576., 39216., 34572., 36224., 38176., 39840., 37332., 39104., 41176.,
      42960., 37884., 39680., 41776., 43584., 38436., 40256., 42376., 44208.,
      38988., 40832., 42976., 44832., 39540., 41408., 43576., 45456., 40092.,
      41984., 44176., 46080., 31172., 32832., 34792., 36464.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16490., 17084., 17678., 18272., 19460., 20072., 20684., 21296., 17534.,
      18164., 18794., 19424., 20648., 21296., 21944., 22592., 24931., 25790.,
      26649., 27508., 29278., 30164., 31050., 31936., 26537., 27450., 28363.,
      29276., 31100., 32040., 32980., 33920., 25455., 26294., 27133., 27972.,
      29722., 30588., 31454., 32320., 19982., 20612., 21242., 21872., 23144.,
      23792., 24440., 25088., 20034., 20636., 21238., 21840., 23084., 23704.,
      24324., 24944., 17350., 17956., 18562., 19168., 20368., 20992., 21616.,
      22240., 16794., 17372., 17950., 18528., 19700., 20296., 20892., 21488.,
      26149., 27026., 27903., 28780., 30568., 31472., 32376., 33280., 27691.,
      28558., 29425., 30292., 32070., 32964., 33858., 34752., 29297., 30218.,
      31139., 32060., 33892., 34840., 35788., 36736., 19786., 20364., 20942.,
      21520., 22740., 23336., 23932., 24528., 20926., 21540., 22154., 22768.,
      24024., 24656., 25288., 25920., 18520., 19248., 19976., 20704., 22192.,
      22944., 23696., 24448., 19848., 20624., 21400., 22176., 23712., 24512.,
      25312., 26112., 29972., 31032., 32092., 33152., 35336., 36432., 37528.,
      38624., 31932., 33064., 34196., 35328., 37584., 38752., 39920., 41088.,
      28644., 29720., 30796., 31872., 34072., 35184., 36296., 37408., 21384.,
      22160., 22936., 23712., 25248., 26048., 26848., 27648., 17976., 18672.,
      19368., 20064., 21520., 22240., 22960., 23680., 20328., 21072., 21816.,
      22560., 24064., 24832., 25600., 26368., 20056., 20784., 21512., 22240.,
      23728., 24480., 25232., 25984., 30348., 31496., 32644., 33792., 36064.,
      37248., 38432., 39616., 29556., 30584., 31612., 32640., 34792., 35856.,
      36920., 37984., 31516., 32616., 33716., 34816., 37040., 38176., 39312.,
      40448., 22104., 22832., 23560., 24288., 25776., 26528., 27280., 28032.,
      23432., 24208., 24984., 25760., 27296., 28096., 28896., 29696., 14906.,
      15500., 16094., 16688., 17828., 18440., 19052., 19664., 15854., 16484.,
      17114., 17744., 18920., 19568., 20216., 20864., 24347., 25206., 26065.,
      26924., 28622., 29508., 30394., 31280., 25809., 26722., 27635., 28548.,
      30300., 31240., 32180., 33120., 23559., 24398., 25237., 26076., 27754.,
      28620., 29486., 30352., 18814., 19444., 20074., 20704., 21928., 22576.,
      23224., 23872., 16210., 16812., 17414., 18016., 19212., 19832., 20452.,
      21072., 15734., 16340., 16946., 17552., 18704., 19328., 19952., 20576.,
      16618., 17196., 17774., 18352., 19476., 20072., 20668., 21264., 25517.,
      26394., 27271., 28148., 29864., 30768., 31672., 32576., 24355., 25222.,
      26089., 26956., 28662., 29556., 30450., 31344., 25817., 26738., 27659.,
      28580., 30340., 31288., 32236., 33184., 16026., 16604., 17182., 17760.,
      18932., 19528., 20124., 20720., 17070., 17684., 18298., 18912., 20120.,
      20752., 21384., 22016., 14450., 15004., 15558., 16112., 17212., 17784.,
      18356., 18928., 15398., 15988., 16578., 17168., 18304., 18912., 19520.,
      20128., 21951., 22718., 23485., 24252., 25858., 26652., 27446., 28240.,
      23413., 24234., 25055., 25876., 27536., 28384., 29232., 30080., 23787.,
      24598., 25409., 26220., 27870., 28708., 29546., 30384., 18934., 19524.,
      20114., 20704., 21888., 22496., 23104., 23712., 14218., 14716., 15214.,
      15712., 16804., 17320., 17836., 18352.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x11x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36940., 37640., 38340., 39040., 40328., 41040., 41752., 42464., 38020.,
      38744., 39468., 40192., 41504., 42240., 42976., 43712., 39100., 39848.,
      40596., 41344., 42680., 43440., 44200., 44960., 40180., 40952., 41724.,
      42496., 43856., 44640., 45424., 46208., 41260., 42056., 42852., 43648.,
      45032., 45840., 46648., 47456., 42340., 43160., 43980., 44800., 46208.,
      47040., 47872., 48704., 43420., 44264., 45108., 45952., 47384., 48240.,
      49096., 49952., 39476., 40312., 41148., 41984., 43408., 44256., 45104.,
      45952., 32236., 32968., 33700., 34432., 35752., 36496., 37240., 37984.,
      33316., 34072., 34828., 35584., 36928., 37696., 38464., 39232., 34396.,
      35176., 35956., 36736., 38104., 38896., 39688., 40480., 35476., 36280.,
      37084., 37888., 39280., 40096., 40912., 41728., 33356., 34056., 34756.,
      35456., 36744., 37456., 38168., 38880., 34436., 35160., 35884., 36608.,
      37920., 38656., 39392., 40128., 37660., 38376., 39092., 39808., 41112.,
      41840., 42568., 43296., 38740., 39480., 40220., 40960., 42288., 43040.,
      43792., 44544., 39820., 40584., 41348., 42112., 43464., 44240., 45016.,
      45792., 40900., 41688., 42476., 43264., 44640., 45440., 46240., 47040.,
      41980., 42792., 43604., 44416., 45816., 46640., 47464., 48288., 43060.,
      43896., 44732., 45568., 46992., 47840., 48688., 49536., 32748., 33480.,
      34212., 34944., 36264., 37008., 37752., 38496., 27780., 28504., 29228.,
      29952., 31264., 32000., 32736., 33472., 23612., 24232., 24852., 25472.,
      26680., 27312., 27944., 28576., 24692., 25336., 25980., 26624., 27856.,
      28512., 29168., 29824., 25772., 26440., 27108., 27776., 29032., 29712.,
      30392., 31072., 26852., 27544., 28236., 28928., 30208., 30912., 31616.,
      32320., 23708., 24296., 24884., 25472., 26648., 27248., 27848., 28448.,
      24788., 25400., 26012., 26624., 27824., 28448., 29072., 29696., 30188.,
      30920., 31652., 32384., 33704., 34448., 35192., 35936., 31268., 32024.,
      32780., 33536., 34880., 35648., 36416., 37184., 32348., 33128., 33908.,
      34688., 36056., 36848., 37640., 38432., 33428., 34232., 35036., 35840.,
      37232., 38048., 38864., 39680., 34508., 35336., 36164., 36992., 38408.,
      39248., 40088., 40928., 35588., 36440., 37292., 38144., 39584., 40448.,
      41312., 42176., 36668., 37544., 38420., 39296., 40760., 41648., 42536.,
      43424., 34772., 35640., 36508., 37376., 38832., 39712., 40592., 41472.,
      35852., 36744., 37636., 38528., 40008., 40912., 41816., 42720., 36932.,
      37848., 38764., 39680., 41184., 42112., 43040., 43968., 31740., 32552.,
      33364., 34176., 35576., 36400., 37224., 38048., 32820., 33656., 34492.,
      35328., 36752., 37600., 38448., 39296., 32748., 33480., 34212., 34944.,
      36264., 37008., 37752., 38496., 33828., 34584., 35340., 36096., 37440.,
      38208., 38976., 39744., 39100., 39848., 40596., 41344., 42680., 43440.,
      44200., 44960., 40180., 40952., 41724., 42496., 43856., 44640., 45424.,
      46208., 41260., 42056., 42852., 43648., 45032., 45840., 46648., 47456.,
      42340., 43160., 43980., 44800., 46208., 47040., 47872., 48704., 43420.,
      44264., 45108., 45952., 47384., 48240., 49096., 49952., 44500., 45368.,
      46236., 47104., 48560., 49440., 50320., 51200., 36236., 37000., 37764.,
      38528., 39880., 40656., 41432., 42208.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12782., 13792., 14838., 15920., 14630., 15712., 16830., 17984., 20959.,
      22516., 24127., 25792., 23899., 25564., 27283., 29056., 19927., 21444.,
      23015., 24640., 16446., 17584., 18758., 19968., 16342., 17424., 18542.,
      19696., 16022., 17120., 18254., 19424., 12558., 13536., 14550., 15600.,
      21939., 23532., 25179., 26880., 23727., 25300., 26927., 28608., 26667.,
      28348., 30083., 31872., 16326., 17360., 18430., 19536., 18398., 19504.,
      20646., 21824., 20568., 21984., 23448., 24960., 23224., 24736., 26296.,
      27904., 28412., 30464., 32588., 34784., 32492., 34688., 36956., 39296.,
      31516., 33664., 35884., 38176., 23128., 24672., 26264., 27904., 19000.,
      20384., 21816., 23296., 20088., 21536., 23032., 24576., 20056., 21472.,
      22936., 24448., 34060., 36352., 38716., 41152., 28796., 30848., 32972.,
      35168., 32876., 35072., 37340., 39680., 21880., 23328., 24824., 26368.,
      24664., 26208., 27800., 29440., 12822., 13872., 14958., 16080., 14830.,
      15952., 17110., 18304., 23579., 25196., 26867., 28592., 26759., 28484.,
      30263., 32096., 22003., 23580., 25211., 26896., 18694., 19872., 21086.,
      22336., 16190., 17312., 18470., 19664., 18078., 19216., 20390., 21600.,
      12982., 14000., 15054., 16144., 24639., 26292., 27999., 29760., 24107.,
      25740., 27427., 29168., 27287., 29028., 30823., 32672., 14702., 15776.,
      16886., 18032., 16934., 18080., 19262., 20480., 16550., 17648., 18782.,
      19952., 18558., 19728., 20934., 22176., 23011., 24572., 26187., 27856.,
      26191., 27860., 29583., 31360., 25147., 26796., 28499., 30256., 21206.,
      22432., 23694., 24992., 15502., 16544., 17622., 18736.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x11x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37364., 39040., 40740., 42464., 38468., 40192., 41940., 43712., 39572.,
      41344., 43140., 44960., 40676., 42496., 44340., 46208., 41780., 43648.,
      45540., 47456., 42884., 44800., 46740., 48704., 43988., 45952., 47940.,
      49952., 40036., 41984., 43956., 45952., 32692., 34432., 36196., 37984.,
      33796., 35584., 37396., 39232., 34900., 36736., 38596., 40480., 36004.,
      37888., 39796., 41728., 33780., 35456., 37156., 38880., 34884., 36608.,
      38356., 40128., 38100., 39808., 41540., 43296., 39204., 40960., 42740.,
      44544., 40308., 42112., 43940., 45792., 41412., 43264., 45140., 47040.,
      42516., 44416., 46340., 48288., 43620., 45568., 47540., 49536., 33204.,
      34944., 36708., 38496., 28228., 29952., 31700., 33472., 23956., 25472.,
      27012., 28576., 25060., 26624., 28212., 29824., 26164., 27776., 29412.,
      31072., 27268., 28928., 30612., 32320., 24020., 25472., 26948., 28448.,
      25124., 26624., 28148., 29696., 30644., 32384., 34148., 35936., 31748.,
      33536., 35348., 37184., 32852., 34688., 36548., 38432., 33956., 35840.,
      37748., 39680., 35060., 36992., 38948., 40928., 36164., 38144., 40148.,
      42176., 37268., 39296., 41348., 43424., 35364., 37376., 39412., 41472.,
      36468., 38528., 40612., 42720., 37572., 39680., 41812., 43968., 32276.,
      34176., 36100., 38048., 33380., 35328., 37300., 39296., 33204., 34944.,
      36708., 38496., 34308., 36096., 37908., 39744., 39572., 41344., 43140.,
      44960., 40676., 42496., 44340., 46208., 41780., 43648., 45540., 47456.,
      42884., 44800., 46740., 48704., 43988., 45952., 47940., 49952., 45092.,
      47104., 49140., 51200., 36724., 38528., 40356., 42208.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16458., 16988., 18076., 18624., 19766., 20332., 21528., 22112., 18546.,
      19148., 20308., 20928., 22142., 22780., 24048., 24704., 21539., 22334.,
      23986., 24808., 26541., 27390., 29204., 30080., 24751., 25654., 27414.,
      28344., 30185., 31142., 33064., 34048., 22587., 23342., 24954., 25736.,
      27429., 28238., 30012., 30848., 20322., 20924., 22132., 22752., 24014.,
      24652., 25968., 26624., 18378., 18924., 20076., 20640., 21846., 22428.,
      23688., 24288., 18242., 18860., 20036., 20672., 21902., 22556., 23840.,
      24512., 13994., 14492., 15548., 16064., 17174., 17708., 18872., 19424.,
      23975., 24806., 26494., 27352., 29121., 30006., 31856., 32768., 25011.,
      25822., 27490., 28328., 30077., 30942., 32772., 33664., 28223., 29142.,
      30918., 31864., 33721., 34694., 36632., 37632., 16858., 17356., 18460.,
      18976., 20134., 20668., 21880., 22432., 19138., 19708., 20884., 21472.,
      22702., 23308., 24592., 25216., 19288., 20016., 21456., 22208., 23720.,
      24496., 26080., 26880., 21944., 22768., 24304., 25152., 26760., 27632.,
      29312., 30208., 28180., 29176., 31224., 32256., 34412., 35480., 37744.,
      38848., 32100., 33240., 35432., 36608., 38908., 40120., 42528., 43776.,
      30196., 31288., 33432., 34560., 36812., 37976., 40336., 41536., 22456.,
      23280., 24816., 25664., 27272., 28144., 29824., 30720., 15640., 16304.,
      17680., 18368., 19816., 20528., 22048., 22784., 22904., 23664., 25136.,
      25920., 27464., 28272., 29888., 30720., 20312., 21040., 22480., 23232.,
      24744., 25520., 27104., 27904., 31044., 32280., 34568., 35840., 38236.,
      39544., 42048., 43392., 28948., 29944., 31992., 33024., 35180., 36248.,
      38512., 39616., 32868., 34008., 36200., 37376., 39676., 40888., 43296.,
      44544., 21848., 22576., 24016., 24768., 26280., 27056., 28640., 29440.,
      24504., 25328., 26864., 27712., 29320., 30192., 31872., 32768., 12314.,
      12844., 13884., 14432., 15526., 16092., 17240., 17824., 14210., 14812.,
      15924., 16544., 17710., 18348., 19568., 20224., 21467., 22262., 23842.,
      24664., 26325., 27174., 28916., 29792., 24391., 25294., 26982., 27912.,
      29681., 30638., 32488., 33472., 19891., 20646., 22186., 22968., 24589.,
      25398., 27100., 27936., 17010., 17612., 18772., 19392., 20606., 21244.,
      22512., 23168., 13850., 14396., 15500., 16064., 17222., 17804., 19016.,
      19616., 16594., 17212., 18340., 18976., 20158., 20812., 22048., 22720.,
      12666., 13164., 14172., 14688., 15750., 16284., 17400., 17952., 23807.,
      24638., 26254., 27112., 28809., 29694., 31472., 32384., 23531., 24342.,
      25938., 26776., 28453., 29318., 31076., 31968., 26455., 27374., 29078.,
      30024., 31809., 32782., 34648., 35648., 12458., 12956., 14012., 14528.,
      15638., 16172., 17336., 17888., 14546., 15116., 16244., 16832., 18014.,
      18620., 19856., 20480., 15626., 16204., 17292., 17888., 19030., 19644.,
      20840., 21472., 17522., 18172., 19332., 20000., 21214., 21900., 23168.,
      23872., 20899., 21638., 23162., 23928., 25533., 26326., 28012., 28832.,
      23823., 24670., 26302., 27176., 28889., 29790., 31584., 32512., 22523.,
      23350., 24962., 25816., 27509., 28390., 30164., 31072., 20450., 21100.,
      22308., 22976., 24238., 24924., 26240., 26944., 15114., 15580., 16604.,
      17088., 18166., 18668., 19800., 20320.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x11x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28540., 29160., 30344., 30976., 32196., 32840., 34096., 34752., 30700.,
      31368., 32600., 33280., 34548., 35240., 36544., 37248., 27612., 28200.,
      29352., 29952., 31140., 31752., 32976., 33600., 29772., 30408., 31608.,
      32256., 33492., 34152., 35424., 36096., 31932., 32616., 33864., 34560.,
      35844., 36552., 37872., 38592., 34092., 34824., 36120., 36864., 38196.,
      38952., 40320., 41088., 32028., 32680., 33896., 34560., 35812., 36488.,
      37776., 38464., 33484., 34248., 35576., 36352., 37716., 38504., 39904.,
      40704., 27324., 28008., 29256., 29952., 31236., 31944., 33264., 33984.,
      29484., 30216., 31512., 32256., 33588., 34344., 35712., 36480., 31644.,
      32424., 33768., 34560., 35940., 36744., 38160., 38976., 33804., 34632.,
      36024., 36864., 38292., 39144., 40608., 41472., 32764., 33512., 34824.,
      35584., 36932., 37704., 39088., 39872., 34924., 35720., 37080., 37888.,
      39284., 40104., 41536., 42368., 36252., 37032., 38376., 39168., 40548.,
      41352., 42768., 43584., 38412., 39240., 40632., 41472., 42900., 43752.,
      45216., 46080., 40572., 41448., 42888., 43776., 45252., 46152., 47664.,
      48576., 42732., 43656., 45144., 46080., 47604., 48552., 50112., 51072.,
      38620., 39464., 40872., 41728., 43172., 44040., 45520., 46400., 40780.,
      41672., 43128., 44032., 45524., 46440., 47968., 48896., 30396., 31080.,
      32328., 33024., 34308., 35016., 36336., 37056., 30700., 31368., 32600.,
      33280., 34548., 35240., 36544., 37248., 27612., 28200., 29352., 29952.,
      31140., 31752., 32976., 33600., 29772., 30408., 31608., 32256., 33492.,
      34152., 35424., 36096., 31932., 32616., 33864., 34560., 35844., 36552.,
      37872., 38592., 34092., 34824., 36120., 36864., 38196., 38952., 40320.,
      41088., 32028., 32680., 33896., 34560., 35812., 36488., 37776., 38464.,
      34188., 34888., 36152., 36864., 38164., 38888., 40224., 40960., 27324.,
      28008., 29256., 29952., 31236., 31944., 33264., 33984., 29484., 30216.,
      31512., 32256., 33588., 34344., 35712., 36480., 31644., 32424., 33768.,
      34560., 35940., 36744., 38160., 38976., 33804., 34632., 36024., 36864.,
      38292., 39144., 40608., 41472., 32764., 33512., 34824., 35584., 36932.,
      37704., 39088., 39872., 34924., 35720., 37080., 37888., 39284., 40104.,
      41536., 42368., 37084., 37928., 39336., 40192., 41636., 42504., 43984.,
      44864., 38412., 39240., 40632., 41472., 42900., 43752., 45216., 46080.,
      40572., 41448., 42888., 43776., 45252., 46152., 47664., 48576., 42732.,
      43656., 45144., 46080., 47604., 48552., 50112., 51072., 38620., 39464.,
      40872., 41728., 43172., 44040., 45520., 46400., 40780., 41672., 43128.,
      44032., 45524., 46440., 47968., 48896., 30396., 31080., 32328., 33024.,
      34308., 35016., 36336., 37056., 32556., 33288., 34584., 35328., 36660.,
      37416., 38784., 39552., 27612., 28200., 29352., 29952., 31140., 31752.,
      32976., 33600., 29772., 30408., 31608., 32256., 33492., 34152., 35424.,
      36096., 31932., 32616., 33864., 34560., 35844., 36552., 37872., 38592.,
      34092., 34824., 36120., 36864., 38196., 38952., 40320., 41088., 32028.,
      32680., 33896., 34560., 35812., 36488., 37776., 38464., 34188., 34888.,
      36152., 36864., 38164., 38888., 40224., 40960., 27004., 27624., 28808.,
      29440., 30660., 31304., 32560., 33216.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13890., 14420., 14950., 15480., 16532., 17080., 17628., 18176., 19318.,
      19884., 20450., 21016., 22248., 22832., 23416., 24000., 15690., 16292.,
      16894., 17496., 18620., 19240., 19860., 20480., 21694., 22332., 22970.,
      23608., 24912., 25568., 26224., 26880., 18923., 19718., 20513., 21308.,
      22958., 23780., 24602., 25424., 27209., 28058., 28907., 29756., 31676.,
      32552., 33428., 34304., 21911., 22814., 23717., 24620., 26378., 27308.,
      28238., 29168., 31061., 32018., 32975., 33932., 35960., 36944., 37928.,
      38912., 22595., 23350., 24105., 24860., 26470., 27252., 28034., 28816.,
      30561., 31370., 32179., 32988., 34868., 35704., 36540., 37376., 19242.,
      19844., 20446., 21048., 22268., 22888., 23508., 24128., 25438., 26076.,
      26714., 27352., 28752., 29408., 30064., 30720., 17202., 17748., 18294.,
      18840., 20004., 20568., 21132., 21696., 22950., 23532., 24114., 24696.,
      26040., 26640., 27240., 27840., 16602., 17220., 17838., 18456., 19596.,
      20232., 20868., 21504., 22734., 23388., 24042., 24696., 26016., 26688.,
      27360., 28032., 10018., 10516., 11014., 11512., 12532., 13048., 13564.,
      14080., 15190., 15724., 16258., 16792., 17992., 18544., 19096., 19648.,
      19919., 20750., 21581., 22412., 24098., 24956., 25814., 26672., 28493.,
      29378., 30263., 31148., 33104., 34016., 34928., 35840., 22779., 23590.,
      24401., 25212., 26878., 27716., 28554., 29392., 31193., 32058., 32923.,
      33788., 35724., 36616., 37508., 38400., 25767., 26686., 27605., 28524.,
      30298., 31244., 32190., 33136., 35045., 36018., 36991., 37964., 40008.,
      41008., 42008., 43008., 15746., 16244., 16742., 17240., 18356., 18872.,
      19388., 19904., 21110., 21644., 22178., 22712., 24008., 24560., 25112.,
      25664., 17930., 18500., 19070., 19640., 20828., 21416., 22004., 22592.,
      23870., 24476., 25082., 25688., 27056., 27680., 28304., 28928., 18712.,
      19440., 20168., 20896., 22320., 23072., 23824., 24576., 26120., 26896.,
      27672., 28448., 30112., 30912., 31712., 32512., 21112., 21936., 22760.,
      23584., 25104., 25952., 26800., 27648., 29288., 30160., 31032., 31904.,
      33664., 34560., 35456., 36352., 25668., 26664., 27660., 28656., 30696.,
      31728., 32760., 33792., 36012., 37080., 38148., 39216., 41616., 42720.,
      43824., 44928., 29268., 30408., 31548., 32688., 34872., 36048., 37224.,
      38400., 40764., 41976., 43188., 44400., 46944., 48192., 49440., 50688.,
      29604., 30696., 31788., 32880., 35016., 36144., 37272., 38400., 40716.,
      41880., 43044., 44208., 46704., 47904., 49104., 50304., 22136., 22960.,
      23784., 24608., 26128., 26976., 27824., 28672., 30312., 31184., 32056.,
      32928., 34688., 35584., 36480., 37376., 14040., 14704., 15368., 16032.,
      17392., 18080., 18768., 19456., 20936., 21648., 22360., 23072., 24672.,
      25408., 26144., 26880., 19512., 20272., 21032., 21792., 23248., 24032.,
      24816., 25600., 27176., 27984., 28792., 29600., 31296., 32128., 32960.,
      33792., 15640., 16368., 17096., 17824., 19248., 20000., 20752., 21504.,
      23048., 23824., 24600., 25376., 27040., 27840., 28640., 29440., 27060.,
      28296., 29532., 30768., 33048., 34320., 35592., 36864., 39324., 40632.,
      41940., 43248., 45888., 47232., 48576., 49920., 27204., 28200., 29196.,
      30192., 32232., 33264., 34296., 35328., 37548., 38616., 39684., 40752.,
      43152., 44256., 45360., 46464., 30804., 31944., 33084., 34224., 36408.,
      37584., 38760., 39936., 42300., 43512., 44724., 45936., 48480., 49728.,
      50976., 52224., 18712., 19440., 20168., 20896., 22320., 23072., 23824.,
      24576., 26120., 26896., 27672., 28448., 30112., 30912., 31712., 32512.,
      21112., 21936., 22760., 23584., 25104., 25952., 26800., 27648., 29288.,
      30160., 31032., 31904., 33664., 34560., 35456., 36352., 8674.,  9204.,
      9734.,  10264., 11220., 11768., 12316., 12864., 13910., 14476., 15042.,
      15608., 16744., 17328., 17912., 18496., 10090., 10692., 11294., 11896.,
      12924., 13544., 14164., 14784., 15902., 16540., 17178., 17816., 19024.,
      19680., 20336., 20992., 18779., 19574., 20369., 21164., 22670., 23492.,
      24314., 25136., 26777., 27626., 28475., 29324., 31100., 31976., 32852.,
      33728., 21191., 22094., 22997., 23900., 25514., 26444., 27374., 28304.,
      30053., 31010., 31967., 32924., 34808., 35792., 36776., 37760., 17203.,
      17958., 18713., 19468., 20934., 21716., 22498., 23280., 24881., 25690.,
      26499., 27308., 29044., 29880., 30716., 31552., 15690., 16292., 16894.,
      17496., 18620., 19240., 19860., 20480., 21694., 22332., 22970., 23608.,
      24912., 25568., 26224., 26880., 11218., 11764., 12310., 12856., 13924.,
      14488., 15052., 15616., 16774., 17356., 17938., 18520., 19768., 20368.,
      20968., 21568., 12282., 12900., 13518., 14136., 15180., 15816., 16452.,
      17088., 18222., 18876., 19530., 20184., 21408., 22080., 22752., 23424.,
      10434., 10932., 11430., 11928., 12852., 13368., 13884., 14400., 15414.,
      15948., 16482., 17016., 18120., 18672., 19224., 19776., 19583., 20414.,
      21245., 22076., 23618., 24476., 25334., 26192., 27869., 28754., 29639.,
      30524., 32336., 33248., 34160., 35072., 19819., 20630., 21441., 22252.,
      23774., 24612., 25450., 26288., 27945., 28810., 29675., 30540., 32332.,
      33224., 34116., 35008., 22231., 23150., 24069., 24988., 26618., 27564.,
      28510., 29456., 31221., 32194., 33167., 34140., 36040., 37040., 38040.,
      39040., 10018., 10516., 11014., 11512., 12532., 13048., 13564., 14080.,
      15190., 15724., 16258., 16792., 17992., 18544., 19096., 19648., 11818.,
      12388., 12958., 13528., 14620., 15208., 15796., 16384., 17566., 18172.,
      18778., 19384., 20656., 21280., 21904., 22528., 9618.,  10196., 10774.,
      11352., 12356., 12952., 13548., 14144., 15238., 15852., 16466., 17080.,
      18264., 18896., 19528., 20160., 11034., 11684., 12334., 12984., 14060.,
      14728., 15396., 16064., 17230., 17916., 18602., 19288., 20544., 21248.,
      21952., 22656., 18211., 18950., 19689., 20428., 21878., 22644., 23410.,
      24176., 25761., 26554., 27347., 28140., 29860., 30680., 31500., 32320.,
      20623., 21470., 22317., 23164., 24722., 25596., 26470., 27344., 29037.,
      29938., 30839., 31740., 33568., 34496., 35424., 36352., 18811., 19638.,
      20465., 21292., 22830., 23684., 24538., 25392., 27065., 27946., 28827.,
      29708., 31516., 32424., 33332., 34240., 16890., 17540., 18190., 18840.,
      20012., 20680., 21348., 22016., 23278., 23964., 24650., 25336., 26688.,
      27392., 28096., 28800., 12290., 12756., 13222., 13688., 14676., 15160.,
      15644., 16128., 17206., 17708., 18210., 18712., 19880., 20400., 20920.,
      21440.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x11x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31372., 31992., 32612., 33232., 34456., 35088., 35720., 36352., 37636.,
      38280., 38924., 39568., 40912., 41568., 42224., 42880., 33596., 34264.,
      34932., 35600., 36872., 37552., 38232., 38912., 40244., 40936., 41628.,
      42320., 43712., 44416., 45120., 45824., 25452., 26040., 26628., 27216.,
      28408., 29008., 29608., 30208., 31460., 32072., 32684., 33296., 34608.,
      35232., 35856., 36480., 27676., 28312., 28948., 29584., 30824., 31472.,
      32120., 32768., 34068., 34728., 35388., 36048., 37408., 38080., 38752.,
      39424., 29900., 30584., 31268., 31952., 33240., 33936., 34632., 35328.,
      36676., 37384., 38092., 38800., 40208., 40928., 41648., 42368., 32124.,
      32856., 33588., 34320., 35656., 36400., 37144., 37888., 39284., 40040.,
      40796., 41552., 43008., 43776., 44544., 45312., 26028., 26680., 27332.,
      27984., 29240., 29904., 30568., 31232., 32548., 33224., 33900., 34576.,
      35952., 36640., 37328., 38016., 34972., 35736., 36500., 37264., 38632.,
      39408., 40184., 40960., 42388., 43176., 43964., 44752., 46240., 47040.,
      47840., 48640., 37068., 37752., 38436., 39120., 40408., 41104., 41800.,
      42496., 43844., 44552., 45260., 45968., 47376., 48096., 48816., 49536.,
      39292., 40024., 40756., 41488., 42824., 43568., 44312., 45056., 46452.,
      47208., 47964., 48720., 50176., 50944., 51712., 52480., 41516., 42296.,
      43076., 43856., 45240., 46032., 46824., 47616., 49060., 49864., 50668.,
      51472., 52976., 53792., 54608., 55424., 43740., 44568., 45396., 46224.,
      47656., 48496., 49336., 50176., 51668., 52520., 53372., 54224., 55776.,
      56640., 57504., 58368., 39692., 40440., 41188., 41936., 43288., 44048.,
      44808., 45568., 46980., 47752., 48524., 49296., 50768., 51552., 52336.,
      53120., 41916., 42712., 43508., 44304., 45704., 46512., 47320., 48128.,
      49588., 50408., 51228., 52048., 53568., 54400., 55232., 56064., 34348.,
      35128., 35908., 36688., 38072., 38864., 39656., 40448., 41892., 42696.,
      43500., 44304., 45808., 46624., 47440., 48256., 36572., 37400., 38228.,
      39056., 40488., 41328., 42168., 43008., 44500., 45352., 46204., 47056.,
      48608., 49472., 50336., 51200., 38796., 39672., 40548., 41424., 42904.,
      43792., 44680., 45568., 47108., 48008., 48908., 49808., 51408., 52320.,
      53232., 54144., 41020., 41944., 42868., 43792., 45320., 46256., 47192.,
      48128., 49716., 50664., 51612., 52560., 54208., 55168., 56128., 57088.,
      30828., 31672., 32516., 33360., 34808., 35664., 36520., 37376., 38884.,
      39752., 40620., 41488., 43056., 43936., 44816., 45696., 33052., 33944.,
      34836., 35728., 37224., 38128., 39032., 39936., 41492., 42408., 43324.,
      44240., 45856., 46784., 47712., 48640., 26828., 27512., 28196., 28880.,
      30168., 30864., 31560., 32256., 33604., 34312., 35020., 35728., 37136.,
      37856., 38576., 39296., 33596., 34264., 34932., 35600., 36872., 37552.,
      38232., 38912., 40244., 40936., 41628., 42320., 43712., 44416., 45120.,
      45824., 25452., 26040., 26628., 27216., 28408., 29008., 29608., 30208.,
      31460., 32072., 32684., 33296., 34608., 35232., 35856., 36480., 27676.,
      28312., 28948., 29584., 30824., 31472., 32120., 32768., 34068., 34728.,
      35388., 36048., 37408., 38080., 38752., 39424., 29900., 30584., 31268.,
      31952., 33240., 33936., 34632., 35328., 36676., 37384., 38092., 38800.,
      40208., 40928., 41648., 42368., 32124., 32856., 33588., 34320., 35656.,
      36400., 37144., 37888., 39284., 40040., 40796., 41552., 43008., 43776.,
      44544., 45312., 26028., 26680., 27332., 27984., 29240., 29904., 30568.,
      31232., 32548., 33224., 33900., 34576., 35952., 36640., 37328., 38016.,
      28252., 28952., 29652., 30352., 31656., 32368., 33080., 33792., 35156.,
      35880., 36604., 37328., 38752., 39488., 40224., 40960., 37068., 37752.,
      38436., 39120., 40408., 41104., 41800., 42496., 43844., 44552., 45260.,
      45968., 47376., 48096., 48816., 49536., 39292., 40024., 40756., 41488.,
      42824., 43568., 44312., 45056., 46452., 47208., 47964., 48720., 50176.,
      50944., 51712., 52480., 41516., 42296., 43076., 43856., 45240., 46032.,
      46824., 47616., 49060., 49864., 50668., 51472., 52976., 53792., 54608.,
      55424., 43740., 44568., 45396., 46224., 47656., 48496., 49336., 50176.,
      51668., 52520., 53372., 54224., 55776., 56640., 57504., 58368., 39692.,
      40440., 41188., 41936., 43288., 44048., 44808., 45568., 46980., 47752.,
      48524., 49296., 50768., 51552., 52336., 53120., 41916., 42712., 43508.,
      44304., 45704., 46512., 47320., 48128., 49588., 50408., 51228., 52048.,
      53568., 54400., 55232., 56064., 44140., 44984., 45828., 46672., 48120.,
      48976., 49832., 50688., 52196., 53064., 53932., 54800., 56368., 57248.,
      58128., 59008., 36572., 37400., 38228., 39056., 40488., 41328., 42168.,
      43008., 44500., 45352., 46204., 47056., 48608., 49472., 50336., 51200.,
      38796., 39672., 40548., 41424., 42904., 43792., 44680., 45568., 47108.,
      48008., 48908., 49808., 51408., 52320., 53232., 54144., 41020., 41944.,
      42868., 43792., 45320., 46256., 47192., 48128., 49716., 50664., 51612.,
      52560., 54208., 55168., 56128., 57088., 30828., 31672., 32516., 33360.,
      34808., 35664., 36520., 37376., 38884., 39752., 40620., 41488., 43056.,
      43936., 44816., 45696., 33052., 33944., 34836., 35728., 37224., 38128.,
      39032., 39936., 41492., 42408., 43324., 44240., 45856., 46784., 47712.,
      48640., 26828., 27512., 28196., 28880., 30168., 30864., 31560., 32256.,
      33604., 34312., 35020., 35728., 37136., 37856., 38576., 39296., 29052.,
      29784., 30516., 31248., 32584., 33328., 34072., 34816., 36212., 36968.,
      37724., 38480., 39936., 40704., 41472., 42240., 25452., 26040., 26628.,
      27216., 28408., 29008., 29608., 30208., 31460., 32072., 32684., 33296.,
      34608., 35232., 35856., 36480., 27676., 28312., 28948., 29584., 30824.,
      31472., 32120., 32768., 34068., 34728., 35388., 36048., 37408., 38080.,
      38752., 39424., 29900., 30584., 31268., 31952., 33240., 33936., 34632.,
      35328., 36676., 37384., 38092., 38800., 40208., 40928., 41648., 42368.,
      32124., 32856., 33588., 34320., 35656., 36400., 37144., 37888., 39284.,
      40040., 40796., 41552., 43008., 43776., 44544., 45312., 26028., 26680.,
      27332., 27984., 29240., 29904., 30568., 31232., 32548., 33224., 33900.,
      34576., 35952., 36640., 37328., 38016., 28252., 28952., 29652., 30352.,
      31656., 32368., 33080., 33792., 35156., 35880., 36604., 37328., 38752.,
      39488., 40224., 40960., 28300., 28920., 29540., 30160., 31384., 32016.,
      32648., 33280., 34564., 35208., 35852., 36496., 37840., 38496., 39152.,
      39808.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27624., 38388., 38928., 39468., 40008., 25211., 25562., 26420., 36932.,
      37472., 38012., 38552., 23151., 23502., 26664., 38418., 39084., 39750.,
      40416., 25800., 26232., 32136., 46410., 47076., 47742., 48408., 30984.,
      31416., 23556., 32751., 33210., 33669., 34128., 21473., 21770., 22856.,
      31859., 32318., 32777., 33236., 19917., 20214., 17676., 25335., 25794.,
      26253., 26712., 16953., 17250.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x12x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20886., 20964., 21042., 21120., 21198., 21276., 21354., 21822., 21900.,
      21978., 22056., 22134., 22212., 22290., 22758., 22836., 22914., 22992.,
      23070., 23148., 23226., 23694., 23772., 23850., 23928., 24006., 24084.,
      24162., 24630., 24708., 24786., 24864., 24942., 25020., 25098., 25566.,
      25644., 25722., 25800., 25878., 25956., 26034., 26502., 26580., 26658.,
      26736., 26814., 26892., 26970.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19332., 19920., 26833., 27624., 27630., 28448., 28427., 29272., 29224.,
      30096., 19416., 19958., 19972., 20532., 20228., 20840., 28717., 29576.,
      29514., 30400., 30311., 31224., 31108., 32048., 20008., 20574., 20564.,
      21148., 21568., 22352., 28912., 29988., 29952., 31064., 30992., 32140.,
      32032., 33216., 21416., 22160., 22128., 22896., 23264., 24080., 30384.,
      31508., 31424., 32584., 32464., 33660., 33504., 34736., 18248., 18960.,
      18960., 19696., 18620., 19208., 25607., 26398., 26434., 27252., 27261.,
      28106., 28088., 28960., 18084., 18626., 18660., 19220., 20908., 21520.,
      29387., 30246., 30214., 31100., 31041., 31954., 31868., 32808., 20068.,
      20634., 20644., 21228., 18716., 19352., 24911., 25774., 25738., 26628.,
      26565., 27482., 27392., 28336., 18084., 18674., 18660., 19268.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x12x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      39432., 41772., 39576., 41928., 39720., 42084., 39864., 42240., 40008.,
      42396., 40152., 42552., 40296., 42708., 41160., 43644., 41304., 43800.,
      41448., 43956., 41592., 44112., 41736., 44268., 41880., 44424., 42024.,
      44580., 42888., 45516., 43032., 45672., 43176., 45828., 43320., 45984.,
      43464., 46140., 43608., 46296., 43752., 46452., 44616., 47388., 44760.,
      47544., 44904., 47700., 45048., 47856., 45192., 48012., 45336., 48168.,
      45480., 48324., 46344., 49260., 46488., 49416., 46632., 49572., 46776.,
      49728., 46920., 49884., 47064., 50040., 47208., 50196., 48072., 51132.,
      48216., 51288., 48360., 51444., 48504., 51600., 48648., 51756., 48792.,
      51912., 48936., 52068., 49800., 53004., 49944., 53160., 50088., 53316.,
      50232., 53472., 50376., 53628., 50520., 53784., 50664., 53940.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17852., 18440., 19028., 19616., 22603., 23394., 24185., 24976., 23338.,
      24156., 24974., 25792., 24073., 24918., 25763., 26608., 24808., 25680.,
      26552., 27424., 15698., 16240., 16782., 17324., 16216., 16776., 17336.,
      17896., 16804., 17416., 18028., 18640., 24511., 25370., 26229., 27088.,
      25246., 26132., 27018., 27904., 25981., 26894., 27807., 28720., 26716.,
      27656., 28596., 29536., 18138., 18704., 19270., 19836., 18656., 19240.,
      19824., 20408., 21872., 22656., 23440., 24224., 31148., 32224., 33300.,
      34376., 32168., 33280., 34392., 35504., 33188., 34336., 35484., 36632.,
      34208., 35392., 36576., 37760., 23208., 23952., 24696., 25440., 23904.,
      24672., 25440., 26208., 24976., 25792., 26608., 27424., 34044., 35168.,
      36292., 37416., 35064., 36224., 37384., 38544., 36084., 37280., 38476.,
      39672., 37104., 38336., 39568., 40800., 20744., 21456., 22168., 22880.,
      21440., 22176., 22912., 23648., 14380., 14968., 15556., 16144., 20663.,
      21454., 22245., 23036., 21458., 22276., 23094., 23912., 22253., 23098.,
      23943., 24788., 23048., 23920., 24792., 25664., 15082., 15624., 16166.,
      16708., 15640., 16200., 16760., 17320., 16116., 16728., 17340., 17952.,
      26363., 27222., 28081., 28940., 27158., 28044., 28930., 29816., 27953.,
      28866., 29779., 30692., 28748., 29688., 30628., 31568., 16210., 16776.,
      17342., 17908., 16768., 17352., 17936., 18520., 17084., 17720., 18356.,
      18992., 23807., 24670., 25533., 26396., 24602., 25492., 26382., 27272.,
      25397., 26314., 27231., 28148., 26192., 27136., 28080., 29024., 17594.,
      18184., 18774., 19364., 18152., 18760., 19368., 19976.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x12x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36588., 37904., 39220., 40536., 36864., 38192., 39520., 40848., 37140.,
      38480., 39820., 41160., 37416., 38768., 40120., 41472., 37692., 39056.,
      40420., 41784., 37968., 39344., 40720., 42096., 38244., 39632., 41020.,
      42408., 39900., 41360., 42820., 44280., 40176., 41648., 43120., 44592.,
      40452., 41936., 43420., 44904., 40728., 42224., 43720., 45216., 41004.,
      42512., 44020., 45528., 41280., 42800., 44320., 45840., 41556., 43088.,
      44620., 46152., 43212., 44816., 46420., 48024., 43488., 45104., 46720.,
      48336., 43764., 45392., 47020., 48648., 44040., 45680., 47320., 48960.,
      44316., 45968., 47620., 49272., 44592., 46256., 47920., 49584., 44868.,
      46544., 48220., 49896., 39100., 40592., 42084., 43576., 39376., 40880.,
      42384., 43888., 39652., 41168., 42684., 44200., 39928., 41456., 42984.,
      44512., 33804., 35088., 36372., 37656., 34080., 35376., 36672., 37968.,
      34356., 35664., 36972., 38280., 36012., 37392., 38772., 40152., 36288.,
      37680., 39072., 40464., 36564., 37968., 39372., 40776., 36840., 38256.,
      39672., 41088., 37116., 38544., 39972., 41400., 37392., 38832., 40272.,
      41712., 37668., 39120., 40572., 42024., 39324., 40848., 42372., 43896.,
      39600., 41136., 42672., 44208., 39876., 41424., 42972., 44520., 40152.,
      41712., 43272., 44832., 40428., 42000., 43572., 45144., 40704., 42288.,
      43872., 45456., 40980., 42576., 44172., 45768., 42636., 44304., 45972.,
      47640., 42912., 44592., 46272., 47952., 43188., 44880., 46572., 48264.,
      43464., 45168., 46872., 48576., 43740., 45456., 47172., 48888., 44016.,
      45744., 47472., 49200., 44292., 46032., 47772., 49512.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16888., 18080., 22469., 24016., 24063., 25664., 25657., 27312., 27251.,
      28960., 14788., 15852., 15900., 17000., 18744., 19920., 24957., 26640.,
      26551., 28288., 28145., 29936., 29739., 31584., 17700., 18876., 18812.,
      20024., 24776., 26272., 30160., 32200., 32240., 34352., 34320., 36504.,
      36400., 38656., 22664., 24096., 24088., 25568., 25608., 27168., 30544.,
      32680., 32624., 34832., 34704., 36984., 36784., 39136., 17096., 18464.,
      18520., 19936., 18516., 19728., 20883., 22460., 22537., 24168., 24191.,
      25876., 25845., 27584., 15560., 16644., 16712., 17832., 19444., 20640.,
      27163., 28876., 28817., 30584., 30471., 32292., 32125., 34000., 20872.,
      22068., 22024., 23256., 18452., 19632., 21027., 22620., 22681., 24328.,
      24335., 26036., 25989., 27744., 15112., 16228., 16264., 17416.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x12x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37760., 40536., 38048., 40848., 38336., 41160., 38624., 41472., 38912.,
      41784., 39200., 42096., 39488., 42408., 41216., 44280., 41504., 44592.,
      41792., 44904., 42080., 45216., 42368., 45528., 42656., 45840., 42944.,
      46152., 44672., 48024., 44960., 48336., 45248., 48648., 45536., 48960.,
      45824., 49272., 46112., 49584., 46400., 49896., 40448., 43576., 40736.,
      43888., 41024., 44200., 41312., 44512., 34944., 37656., 35232., 37968.,
      35520., 38280., 37248., 40152., 37536., 40464., 37824., 40776., 38112.,
      41088., 38400., 41400., 38688., 41712., 38976., 42024., 40704., 43896.,
      40992., 44208., 41280., 44520., 41568., 44832., 41856., 45144., 42144.,
      45456., 42432., 45768., 44160., 47640., 44448., 47952., 44736., 48264.,
      45024., 48576., 45312., 48888., 45600., 49200., 45888., 49512.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17834., 18480., 19624., 20288., 21367., 22090., 23602., 24352., 22837.,
      23614., 25180., 25984., 24307., 25138., 26758., 27616., 25777., 26662.,
      28336., 29248., 13150., 13640., 14684., 15192., 14186., 14712., 15792.,
      16336., 15930., 16560., 17688., 18336., 22623., 23482., 25130., 26016.,
      24093., 25006., 26708., 27648., 25563., 26530., 28286., 29280., 27033.,
      28054., 29864., 30912., 17326., 17928., 19084., 19704., 18362., 19000.,
      20192., 20848., 20808., 21584., 23072., 23872., 29660., 30624., 32680.,
      33680., 31700., 32736., 34864., 35936., 33740., 34848., 37048., 38192.,
      35780., 36960., 39232., 40448., 23960., 24656., 26096., 26816., 25352.,
      26096., 27584., 28352., 25992., 26832., 28384., 29248., 30332., 31392.,
      33544., 34640., 32372., 33504., 35728., 36896., 34412., 35616., 37912.,
      39152., 36452., 37728., 40096., 41408., 16472., 17104., 18480., 19136.,
      17864., 18544., 19968., 20672., 16994., 17640., 18824., 19488., 19219.,
      19942., 21514., 22264., 20809., 21586., 23212., 24016., 22399., 23230.,
      24910., 25768., 23989., 24874., 26608., 27520., 14694., 15184., 16268.,
      16776., 15810., 16336., 17456., 18000., 17330., 17960., 19128., 19776.,
      28059., 28918., 30626., 31512., 29649., 30562., 32324., 33264., 31239.,
      32206., 34022., 35016., 32829., 33850., 35720., 36768., 19574., 20176.,
      21372., 21992., 20690., 21328., 22560., 23216., 17922., 18536., 19688.,
      20320., 20515., 21254., 22842., 23608., 22105., 22898., 24540., 25360.,
      23695., 24542., 26238., 27112., 25285., 26186., 27936., 28864., 14790.,
      15312., 16428., 16968., 15906., 16464., 17616., 18192.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x12x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27332., 28416., 29800., 30896., 27884., 28992., 30400., 31520., 28436.,
      29568., 31000., 32144., 28988., 30144., 31600., 32768., 29540., 30720.,
      32200., 33392., 30092., 31296., 32800., 34016., 30644., 31872., 33400.,
      34640., 33956., 35328., 37000., 38384., 34508., 35904., 37600., 39008.,
      35060., 36480., 38200., 39632., 35612., 37056., 38800., 40256., 36164.,
      37632., 39400., 40880., 36716., 38208., 40000., 41504., 37268., 38784.,
      40600., 42128., 40580., 42240., 44200., 45872., 41132., 42816., 44800.,
      46496., 41684., 43392., 45400., 47120., 42236., 43968., 46000., 47744.,
      42788., 44544., 46600., 48368., 43340., 45120., 47200., 48992., 43892.,
      45696., 47800., 49616., 39780., 41472., 43464., 45168., 40332., 42048.,
      44064., 45792., 40884., 42624., 44664., 46416., 41436., 43200., 45264.,
      47040., 35588., 37120., 38952., 40496., 36140., 37696., 39552., 41120.,
      36692., 38272., 40152., 41744., 22084., 23296., 24808., 26032., 22636.,
      23872., 25408., 26656., 23188., 24448., 26008., 27280., 23740., 25024.,
      26608., 27904., 24292., 25600., 27208., 28528., 24844., 26176., 27808.,
      29152., 25396., 26752., 28408., 29776., 28708., 30208., 32008., 33520.,
      29260., 30784., 32608., 34144., 29812., 31360., 33208., 34768., 30364.,
      31936., 33808., 35392., 30916., 32512., 34408., 36016., 31468., 33088.,
      35008., 36640., 32020., 33664., 35608., 37264., 35332., 37120., 39208.,
      41008., 35884., 37696., 39808., 41632., 36436., 38272., 40408., 42256.,
      36988., 38848., 41008., 42880., 34212., 35840., 37768., 39408., 34764.,
      36416., 38368., 40032., 35316., 36992., 38968., 40656.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18510., 19156., 19802., 20448., 21688., 22352., 23016., 23680., 21403.,
      22126., 22849., 23572., 25206., 25956., 26706., 27456., 23009., 23786.,
      24563., 25340., 27028., 27832., 28636., 29440., 24615., 25446., 26277.,
      27108., 28850., 29708., 30566., 31424., 26221., 27106., 27991., 28876.,
      30672., 31584., 32496., 33408., 14098., 14588., 15078., 15568., 16700.,
      17208., 17716., 18224., 15238., 15764., 16290., 16816., 17984., 18528.,
      19072., 19616., 17790., 18420., 19050., 19680., 20904., 21552., 22200.,
      22848., 24803., 25662., 26521., 27380., 29150., 30036., 30922., 31808.,
      26409., 27322., 28235., 29148., 30972., 31912., 32852., 33792., 28015.,
      28982., 29949., 30916., 32794., 33788., 34782., 35776., 29621., 30642.,
      31663., 32684., 34616., 35664., 36712., 37760., 19778., 20380., 20982.,
      21584., 22828., 23448., 24068., 24688., 20918., 21556., 22194., 22832.,
      24112., 24768., 25424., 26080., 21512., 22288., 23064., 23840., 25376.,
      26176., 26976., 27776., 27124., 28088., 29052., 30016., 32104., 33104.,
      34104., 35104., 29084., 30120., 31156., 32192., 34352., 35424., 36496.,
      37568., 31044., 32152., 33260., 34368., 36600., 37744., 38888., 40032.,
      33004., 34184., 35364., 36544., 38848., 40064., 41280., 42496., 20920.,
      21616., 22312., 23008., 24464., 25184., 25904., 26624., 22248., 22992.,
      23736., 24480., 25984., 26752., 27520., 28288., 24648., 25488., 26328.,
      27168., 28768., 29632., 30496., 31360., 28372., 29432., 30492., 31552.,
      33736., 34832., 35928., 37024., 30332., 31464., 32596., 33728., 35984.,
      37152., 38320., 39488., 32292., 33496., 34700., 35904., 38232., 39472.,
      40712., 41952., 34252., 35528., 36804., 38080., 40480., 41792., 43104.,
      44416., 17784., 18416., 19048., 19680., 21072., 21728., 22384., 23040.,
      19112., 19792., 20472., 21152., 22592., 23296., 24000., 24704., 15422.,
      16068., 16714., 17360., 18552., 19216., 19880., 20544., 19475., 20198.,
      20921., 21644., 23206., 23956., 24706., 25456., 20937., 21714., 22491.,
      23268., 24884., 25688., 26492., 27296., 22399., 23230., 24061., 24892.,
      26562., 27420., 28278., 29136., 23861., 24746., 25631., 26516., 28240.,
      29152., 30064., 30976., 13474., 13964., 14454., 14944., 16028., 16536.,
      17044., 17552., 14518., 15044., 15570., 16096., 17216., 17760., 18304.,
      18848., 16110., 16740., 17370., 18000., 19176., 19824., 20472., 21120.,
      25243., 26102., 26961., 27820., 29518., 30404., 31290., 32176., 26705.,
      27618., 28531., 29444., 31196., 32136., 33076., 34016., 28167., 29134.,
      30101., 31068., 32874., 33868., 34862., 35856., 29629., 30650., 31671.,
      32692., 34552., 35600., 36648., 37696., 17490., 18092., 18694., 19296.,
      20492., 21112., 21732., 22352., 18534., 19172., 19810., 20448., 21680.,
      22336., 22992., 23648., 17310., 17924., 18538., 19152., 20312., 20944.,
      21576., 22208., 18979., 19718., 20457., 21196., 22774., 23540., 24306.,
      25072., 20441., 21234., 22027., 22820., 24452., 25272., 26092., 26912.,
      21903., 22750., 23597., 24444., 26130., 27004., 27878., 28752., 23365.,
      24266., 25167., 26068., 27808., 28736., 29664., 30592., 14658., 15180.,
      15702., 16224., 17340., 17880., 18420., 18960., 15702., 16260., 16818.,
      17376., 18528., 19104., 19680., 20256.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x12x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22348., 22920., 23492., 24064., 25224., 25808., 26392., 26976., 23428.,
      24024., 24620., 25216., 26400., 27008., 27616., 28224., 24508., 25128.,
      25748., 26368., 27576., 28208., 28840., 29472., 25588., 26232., 26876.,
      27520., 28752., 29408., 30064., 30720., 26668., 27336., 28004., 28672.,
      29928., 30608., 31288., 31968., 27748., 28440., 29132., 29824., 31104.,
      31808., 32512., 33216., 28828., 29544., 30260., 30976., 32280., 33008.,
      33736., 34464., 32108., 32840., 33572., 34304., 35624., 36368., 37112.,
      37856., 33188., 33944., 34700., 35456., 36800., 37568., 38336., 39104.,
      34268., 35048., 35828., 36608., 37976., 38768., 39560., 40352., 35348.,
      36152., 36956., 37760., 39152., 39968., 40784., 41600., 34252., 34952.,
      35652., 36352., 37640., 38352., 39064., 39776., 35332., 36056., 36780.,
      37504., 38816., 39552., 40288., 41024., 36412., 37160., 37908., 38656.,
      39992., 40752., 41512., 42272., 33420., 34056., 34692., 35328., 36552.,
      37200., 37848., 38496., 34500., 35160., 35820., 36480., 37728., 38400.,
      39072., 39744., 35580., 36264., 36948., 37632., 38904., 39600., 40296.,
      40992., 36660., 37368., 38076., 38784., 40080., 40800., 41520., 42240.,
      37740., 38472., 39204., 39936., 41256., 42000., 42744., 43488., 38820.,
      39576., 40332., 41088., 42432., 43200., 43968., 44736., 39900., 40680.,
      41460., 42240., 43608., 44400., 45192., 45984., 39084., 39880., 40676.,
      41472., 42856., 43664., 44472., 45280., 40164., 40984., 41804., 42624.,
      44032., 44864., 45696., 46528., 41244., 42088., 42932., 43776., 45208.,
      46064., 46920., 47776., 42324., 43192., 44060., 44928., 46384., 47264.,
      48144., 49024., 37132., 37896., 38660., 39424., 40776., 41552., 42328.,
      43104., 38212., 39000., 39788., 40576., 41952., 42752., 43552., 44352.,
      39292., 40104., 40916., 41728., 43128., 43952., 44776., 45600., 28108.,
      28808., 29508., 30208., 31496., 32208., 32920., 33632., 29188., 29912.,
      30636., 31360., 32672., 33408., 34144., 34880., 30268., 31016., 31764.,
      32512., 33848., 34608., 35368., 36128., 31348., 32120., 32892., 33664.,
      35024., 35808., 36592., 37376., 32428., 33224., 34020., 34816., 36200.,
      37008., 37816., 38624., 33508., 34328., 35148., 35968., 37376., 38208.,
      39040., 39872., 34588., 35432., 36276., 37120., 38552., 39408., 40264.,
      41120., 28524., 29256., 29988., 30720., 32040., 32784., 33528., 34272.,
      29604., 30360., 31116., 31872., 33216., 33984., 34752., 35520., 30684.,
      31464., 32244., 33024., 34392., 35184., 35976., 36768., 31764., 32568.,
      33372., 34176., 35568., 36384., 37200., 38016., 22348., 22920., 23492.,
      24064., 25224., 25808., 26392., 26976., 23428., 24024., 24620., 25216.,
      26400., 27008., 27616., 28224., 24508., 25128., 25748., 26368., 27576.,
      28208., 28840., 29472., 30988., 31752., 32516., 33280., 34632., 35408.,
      36184., 36960., 32068., 32856., 33644., 34432., 35808., 36608., 37408.,
      38208., 33148., 33960., 34772., 35584., 36984., 37808., 38632., 39456.,
      34228., 35064., 35900., 36736., 38160., 39008., 39856., 40704., 32108.,
      32840., 33572., 34304., 35624., 36368., 37112., 37856., 33188., 33944.,
      34700., 35456., 36800., 37568., 38336., 39104., 34268., 35048., 35828.,
      36608., 37976., 38768., 39560., 40352.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21382., 22624., 23902., 25216., 18703., 20116., 21583., 23104., 21643.,
      23164., 24739., 26368., 24583., 26212., 27895., 29632., 27523., 29260.,
      31051., 32896., 11958., 12944., 13966., 15024., 14030., 15088., 16182.,
      17312., 16486., 17632., 18814., 20032., 23391., 24948., 26559., 28224.,
      26331., 27996., 29715., 31488., 29271., 31044., 32871., 34752., 32211.,
      34092., 36027., 38016., 16854., 17936., 19054., 20208., 18926., 20080.,
      21270., 22496., 20216., 21664., 23160., 24704., 20796., 22592., 24460.,
      26400., 24876., 26816., 28828., 30912., 28956., 31040., 33196., 35424.,
      33036., 35264., 37564., 39936., 18808., 20128., 21496., 22912., 21592.,
      23008., 24472., 25984., 25464., 27040., 28664., 30336., 25212., 27200.,
      29260., 31392., 29292., 31424., 33628., 35904., 33372., 35648., 37996.,
      40416., 37452., 39872., 42364., 44928., 13560., 14752., 15992., 17280.,
      16344., 17632., 18968., 20352., 21710., 22992., 24310., 25664., 19467.,
      20940., 22467., 24048., 22647., 24228., 25863., 27552., 25827., 27516.,
      29259., 31056., 29007., 30804., 32655., 34560., 12958., 13984., 15046.,
      16144., 15190., 16288., 17422., 18592., 17966., 19152., 20374., 21632.,
      24475., 26092., 27763., 29488., 27655., 29380., 31159., 32992., 30835.,
      32668., 34555., 36496., 34015., 35956., 37951., 40000., 16702., 17824.,
      18982., 20176., 18934., 20128., 21358., 22624., 14990., 16080., 17206.,
      18368., 16043., 17420., 18851., 20336., 19223., 20708., 22247., 23840.,
      22403., 23996., 25643., 27344., 25583., 27284., 29039., 30848., 15390.,
      16416., 17478., 18576., 17622., 18720., 19854., 21024.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x12x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22644., 24064., 25508., 26976., 23748., 25216., 26708., 28224., 24852.,
      26368., 27908., 29472., 25956., 27520., 29108., 30720., 27060., 28672.,
      30308., 31968., 28164., 29824., 31508., 33216., 29268., 30976., 32708.,
      34464., 32564., 34304., 36068., 37856., 33668., 35456., 37268., 39104.,
      34772., 36608., 38468., 40352., 35876., 37760., 39668., 41600., 34676.,
      36352., 38052., 39776., 35780., 37504., 39252., 41024., 36884., 38656.,
      40452., 42272., 33780., 35328., 36900., 38496., 34884., 36480., 38100.,
      39744., 35988., 37632., 39300., 40992., 37092., 38784., 40500., 42240.,
      38196., 39936., 41700., 43488., 39300., 41088., 42900., 44736., 40404.,
      42240., 44100., 45984., 39604., 41472., 43364., 45280., 40708., 42624.,
      44564., 46528., 41812., 43776., 45764., 47776., 42916., 44928., 46964.,
      49024., 37620., 39424., 41252., 43104., 38724., 40576., 42452., 44352.,
      39828., 41728., 43652., 45600., 28532., 30208., 31908., 33632., 29636.,
      31360., 33108., 34880., 30740., 32512., 34308., 36128., 31844., 33664.,
      35508., 37376., 32948., 34816., 36708., 38624., 34052., 35968., 37908.,
      39872., 35156., 37120., 39108., 41120., 28980., 30720., 32484., 34272.,
      30084., 31872., 33684., 35520., 31188., 33024., 34884., 36768., 32292.,
      34176., 36084., 38016., 22644., 24064., 25508., 26976., 23748., 25216.,
      26708., 28224., 24852., 26368., 27908., 29472., 31476., 33280., 35108.,
      36960., 32580., 34432., 36308., 38208., 33684., 35584., 37508., 39456.,
      34788., 36736., 38708., 40704., 32564., 34304., 36068., 37856., 33668.,
      35456., 37268., 39104., 34772., 36608., 38468., 40352.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21650., 22412., 23732., 24512., 25886., 26684., 28112., 28928., 20755.,
      21406., 22914., 23592., 25181., 25886., 27556., 28288., 23967., 24726.,
      26342., 27128., 28825., 29638., 31416., 32256., 27179., 28046., 29770.,
      30664., 32469., 33390., 35276., 36224., 30391., 31366., 33198., 34200.,
      36113., 37142., 39136., 40192., 12778., 13228., 14284., 14752., 15862.,
      16348., 17512., 18016., 15058., 15580., 16708., 17248., 18430., 18988.,
      20224., 20800., 18098., 18764., 19988., 20672., 21950., 22652., 23984.,
      24704., 23843., 24638., 26290., 27112., 28845., 29694., 31508., 32384.,
      27055., 27958., 29718., 30648., 32489., 33446., 35368., 36352., 30267.,
      31278., 33146., 34184., 36133., 37198., 39228., 40320., 33479., 34598.,
      36574., 37720., 39777., 40950., 43088., 44288., 17354., 17900., 19052.,
      19616., 20822., 21404., 22664., 23264., 19634., 20252., 21476., 22112.,
      23390., 24044., 25376., 26048., 22136., 22896., 24368., 25152., 26696.,
      27504., 29120., 29952., 20372., 21112., 22904., 23680., 25580., 26392.,
      28400., 29248., 24292., 25176., 27112., 28032., 30076., 31032., 33184.,
      34176., 28212., 29240., 31320., 32384., 34572., 35672., 37968., 39104.,
      32132., 33304., 35528., 36736., 39068., 40312., 42752., 44032., 17880.,
      18480., 19792., 20416., 21800., 22448., 23904., 24576., 20536., 21232.,
      22640., 23360., 24840., 25584., 27136., 27904., 26360., 27248., 28848.,
      29760., 31432., 32368., 34112., 35072., 24916., 25848., 27832., 28800.,
      30892., 31896., 34096., 35136., 28836., 29912., 32040., 33152., 35388.,
      36536., 38880., 40064., 32756., 33976., 36248., 37504., 39884., 41176.,
      43664., 44992., 36676., 38040., 40456., 41856., 44380., 45816., 48448.,
      49920., 14680., 15152., 16336., 16832., 18088., 18608., 19936., 20480.,
      17336., 17904., 19184., 19776., 21128., 21744., 23168., 23808., 19618.,
      20380., 21652., 22432., 23758., 24556., 25936., 26752., 19019., 19670.,
      21106., 21784., 23301., 24006., 25604., 26336., 21943., 22702., 24246.,
      25032., 26657., 27470., 29176., 30016., 24867., 25734., 27386., 28280.,
      30013., 30934., 32748., 33696., 27791., 28766., 30526., 31528., 33369.,
      34398., 36320., 37376., 11578., 12028., 13036., 13504., 14566., 15052.,
      16168., 16672., 13666., 14188., 15268., 15808., 16942., 17500., 18688.,
      19264., 16322., 16988., 18164., 18848., 20078., 20780., 22064., 22784.,
      21723., 22518., 24098., 24920., 26581., 27430., 29172., 30048., 24647.,
      25550., 27238., 28168., 29937., 30894., 32744., 33728., 27571., 28582.,
      30378., 31416., 33293., 34358., 36316., 37408., 30495., 31614., 33518.,
      34664., 36649., 37822., 39888., 41088., 15898., 16444., 17548., 18112.,
      19270., 19852., 21064., 21664., 17986., 18604., 19780., 20416., 21646.,
      22300., 23584., 24256., 14562., 15132., 16212., 16800., 17934., 18540.,
      19728., 20352., 14315., 14870., 16210., 16792., 18213., 18822., 20324.,
      20960., 17239., 17902., 19350., 20040., 21569., 22286., 23896., 24640.,
      20163., 20934., 22490., 23288., 24925., 25750., 27468., 28320., 23087.,
      23966., 25630., 26536., 28281., 29214., 31040., 32000., 14394., 14844.,
      15852., 16320., 17382., 17868., 18984., 19488., 16482., 17004., 18084.,
      18624., 19758., 20316., 21504., 22080.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x12x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29308., 29928., 31112., 31744., 32964., 33608., 34864., 35520., 31468.,
      32136., 33368., 34048., 35316., 36008., 37312., 38016., 33628., 34344.,
      35624., 36352., 37668., 38408., 39760., 40512., 35788., 36552., 37880.,
      38656., 40020., 40808., 42208., 43008., 30652., 31336., 32584., 33280.,
      34564., 35272., 36592., 37312., 32812., 33544., 34840., 35584., 36916.,
      37672., 39040., 39808., 34972., 35752., 37096., 37888., 39268., 40072.,
      41488., 42304., 29116., 29800., 31048., 31744., 33028., 33736., 35056.,
      35776., 31276., 32008., 33304., 34048., 35380., 36136., 37504., 38272.,
      33436., 34216., 35560., 36352., 37732., 38536., 39952., 40768., 35596.,
      36424., 37816., 38656., 40084., 40936., 42400., 43264., 27260., 27880.,
      29064., 29696., 30916., 31560., 32816., 33472., 29420., 30088., 31320.,
      32000., 33268., 33960., 35264., 35968., 31580., 32296., 33576., 34304.,
      35620., 36360., 37712., 38464., 35068., 35816., 37128., 37888., 39236.,
      40008., 41392., 42176., 37228., 38024., 39384., 40192., 41588., 42408.,
      43840., 44672., 39388., 40232., 41640., 42496., 43940., 44808., 46288.,
      47168., 41548., 42440., 43896., 44800., 46292., 47208., 48736., 49664.,
      31164., 31848., 33096., 33792., 35076., 35784., 37104., 37824., 33324.,
      34056., 35352., 36096., 37428., 38184., 39552., 40320., 35484., 36264.,
      37608., 38400., 39780., 40584., 42000., 42816., 30652., 31336., 32584.,
      33280., 34564., 35272., 36592., 37312., 32812., 33544., 34840., 35584.,
      36916., 37672., 39040., 39808., 34972., 35752., 37096., 37888., 39268.,
      40072., 41488., 42304., 37132., 37960., 39352., 40192., 41620., 42472.,
      43936., 44800., 33020., 33768., 35080., 35840., 37188., 37960., 39344.,
      40128., 35180., 35976., 37336., 38144., 39540., 40360., 41792., 42624.,
      37340., 38184., 39592., 40448., 41892., 42760., 44240., 45120., 27260.,
      27880., 29064., 29696., 30916., 31560., 32816., 33472., 29420., 30088.,
      31320., 32000., 33268., 33960., 35264., 35968., 31580., 32296., 33576.,
      34304., 35620., 36360., 37712., 38464., 33740., 34504., 35832., 36608.,
      37972., 38760., 40160., 40960., 30652., 31336., 32584., 33280., 34564.,
      35272., 36592., 37312., 32812., 33544., 34840., 35584., 36916., 37672.,
      39040., 39808., 34972., 35752., 37096., 37888., 39268., 40072., 41488.,
      42304., 31164., 31848., 33096., 33792., 35076., 35784., 37104., 37824.,
      33324., 34056., 35352., 36096., 37428., 38184., 39552., 40320., 35484.,
      36264., 37608., 38400., 39780., 40584., 42000., 42816., 37644., 38472.,
      39864., 40704., 42132., 42984., 44448., 45312., 29308., 29928., 31112.,
      31744., 32964., 33608., 34864., 35520., 31468., 32136., 33368., 34048.,
      35316., 36008., 37312., 38016., 33628., 34344., 35624., 36352., 37668.,
      38408., 39760., 40512., 33020., 33768., 35080., 35840., 37188., 37960.,
      39344., 40128., 35180., 35976., 37336., 38144., 39540., 40360., 41792.,
      42624., 37340., 38184., 39592., 40448., 41892., 42760., 44240., 45120.,
      39500., 40392., 41848., 42752., 44244., 45160., 46688., 47616., 29116.,
      29800., 31048., 31744., 33028., 33736., 35056., 35776., 31276., 32008.,
      33304., 34048., 35380., 36136., 37504., 38272., 33436., 34216., 35560.,
      36352., 37732., 38536., 39952., 40768.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18666., 19428., 20190., 20952., 22236., 23016., 23796., 24576., 25950.,
      26748., 27546., 28344., 29808., 30624., 31440., 32256., 18523., 19174.,
      19825., 20476., 21982., 22660., 23338., 24016., 25657., 26362., 27067.,
      27772., 29548., 30280., 31012., 31744., 21511., 22270., 23029., 23788.,
      25402., 26188., 26974., 27760., 29509., 30322., 31135., 31948., 33832.,
      34672., 35512., 36352., 24499., 25366., 26233., 27100., 28822., 29716.,
      30610., 31504., 33361., 34282., 35203., 36124., 38116., 39064., 40012.,
      40960., 27487., 28462., 29437., 30412., 32242., 33244., 34246., 35248.,
      37213., 38242., 39271., 40300., 42400., 43456., 44512., 45568., 14290.,
      14740., 15190., 15640., 16708., 17176., 17644., 18112., 19270., 19756.,
      20242., 20728., 21976., 22480., 22984., 23488., 16474., 16996., 17518.,
      18040., 19180., 19720., 20260., 20800., 22030., 22588., 23146., 23704.,
      25024., 25600., 26176., 26752., 16778., 17444., 18110., 18776., 19964.,
      20648., 21332., 22016., 23294., 23996., 24698., 25400., 26768., 27488.,
      28208., 28928., 21483., 22278., 23073., 23868., 25518., 26340., 27162.,
      27984., 29769., 30618., 31467., 32316., 34236., 35112., 35988., 36864.,
      24471., 25374., 26277., 27180., 28938., 29868., 30798., 31728., 33621.,
      34578., 35535., 36492., 38520., 39504., 40488., 41472., 27459., 28470.,
      29481., 30492., 32358., 33396., 34434., 35472., 37473., 38538., 39603.,
      40668., 42804., 43896., 44988., 46080., 30447., 31566., 32685., 33804.,
      35778., 36924., 38070., 39216., 41325., 42498., 43671., 44844., 47088.,
      48288., 49488., 50688., 16178., 16724., 17270., 17816., 18980., 19544.,
      20108., 20672., 21926., 22508., 23090., 23672., 25016., 25616., 26216.,
      26816., 18362., 18980., 19598., 20216., 21452., 22088., 22724., 23360.,
      24686., 25340., 25994., 26648., 28064., 28736., 29408., 30080., 19000.,
      19760., 20520., 21280., 22736., 23520., 24304., 25088., 26664., 27472.,
      28280., 29088., 30784., 31616., 32448., 33280., 18500., 19240., 19980.,
      20720., 22504., 23280., 24056., 24832., 26796., 27608., 28420., 29232.,
      31376., 32224., 33072., 33920., 22100., 22984., 23868., 24752., 26680.,
      27600., 28520., 29440., 31548., 32504., 33460., 34416., 36704., 37696.,
      38688., 39680., 25700., 26728., 27756., 28784., 30856., 31920., 32984.,
      34048., 36300., 37400., 38500., 39600., 42032., 43168., 44304., 45440.,
      29300., 30472., 31644., 32816., 35032., 36240., 37448., 38656., 41052.,
      42296., 43540., 44784., 47360., 48640., 49920., 51200., 15000., 15600.,
      16200., 16800., 18096., 18720., 19344., 19968., 21384., 22032., 22680.,
      23328., 24864., 25536., 26208., 26880., 17400., 18096., 18792., 19488.,
      20880., 21600., 22320., 23040., 24552., 25296., 26040., 26784., 28416.,
      29184., 29952., 30720., 22200., 23088., 23976., 24864., 26448., 27360.,
      28272., 29184., 30888., 31824., 32760., 33696., 35520., 36480., 37440.,
      38400., 23300., 24232., 25164., 26096., 28072., 29040., 30008., 30976.,
      33132., 34136., 35140., 36144., 38480., 39520., 40560., 41600., 26900.,
      27976., 29052., 30128., 32248., 33360., 34472., 35584., 37884., 39032.,
      40180., 41328., 43808., 44992., 46176., 47360., 30500., 31720., 32940.,
      34160., 36424., 37680., 38936., 40192., 42636., 43928., 45220., 46512.,
      49136., 50464., 51792., 53120., 34100., 35464., 36828., 38192., 40600.,
      42000., 43400., 44800., 47388., 48824., 50260., 51696., 54464., 55936.,
      57408., 58880., 11800., 12272., 12744., 13216., 14384., 14880., 15376.,
      15872., 17160., 17680., 18200., 18720., 20128., 20672., 21216., 21760.,
      14200., 14768., 15336., 15904., 17168., 17760., 18352., 18944., 20328.,
      20944., 21560., 22176., 23680., 24320., 24960., 25600., 14602., 15364.,
      16126., 16888., 18076., 18856., 19636., 20416., 21694., 22492., 23290.,
      24088., 25456., 26272., 27088., 27904., 15051., 15702., 16353., 17004.,
      18366., 19044., 19722., 20400., 21897., 22602., 23307., 24012., 25644.,
      26376., 27108., 27840., 17463., 18222., 18981., 19740., 21210., 21996.,
      22782., 23568., 25173., 25986., 26799., 27612., 29352., 30192., 31032.,
      31872., 19875., 20742., 21609., 22476., 24054., 24948., 25842., 26736.,
      28449., 29370., 30291., 31212., 33060., 34008., 34956., 35904., 22287.,
      23262., 24237., 25212., 26898., 27900., 28902., 29904., 31725., 32754.,
      33783., 34812., 36768., 37824., 38880., 39936., 11890., 12340., 12790.,
      13240., 14212., 14680., 15148., 15616., 16678., 17164., 17650., 18136.,
      19288., 19792., 20296., 20800., 13690., 14212., 14734., 15256., 16300.,
      16840., 17380., 17920., 19054., 19612., 20170., 20728., 21952., 22528.,
      23104., 23680., 13226., 13892., 14558., 15224., 16316., 17000., 17684.,
      18368., 19550., 20252., 20954., 21656., 22928., 23648., 24368., 25088.,
      17243., 18038., 18833., 19628., 21134., 21956., 22778., 23600., 25241.,
      26090., 26939., 27788., 29564., 30440., 31316., 32192., 19655., 20558.,
      21461., 22364., 23978., 24908., 25838., 26768., 28517., 29474., 30431.,
      31388., 33272., 34256., 35240., 36224., 22067., 23078., 24089., 25100.,
      26822., 27860., 28898., 29936., 31793., 32858., 33923., 34988., 36980.,
      38072., 39164., 40256., 24479., 25598., 26717., 27836., 29666., 30812.,
      31958., 33104., 35069., 36242., 37415., 38588., 40688., 41888., 43088.,
      44288., 13266., 13812., 14358., 14904., 15972., 16536., 17100., 17664.,
      18822., 19404., 19986., 20568., 21816., 22416., 23016., 23616., 15066.,
      15684., 16302., 16920., 18060., 18696., 19332., 19968., 21198., 21852.,
      22506., 23160., 24480., 25152., 25824., 26496., 10826., 11396., 11966.,
      12536., 13532., 14120., 14708., 15296., 16382., 16988., 17594., 18200.,
      19376., 20000., 20624., 21248., 11883., 12438., 12993., 13548., 14814.,
      15396., 15978., 16560., 17961., 18570., 19179., 19788., 21324., 21960.,
      22596., 23232., 14295., 14958., 15621., 16284., 17658., 18348., 19038.,
      19728., 21237., 21954., 22671., 23388., 25032., 25776., 26520., 27264.,
      16707., 17478., 18249., 19020., 20502., 21300., 22098., 22896., 24513.,
      25338., 26163., 26988., 28740., 29592., 30444., 31296., 19119., 19998.,
      20877., 21756., 23346., 24252., 25158., 26064., 27789., 28722., 29655.,
      30588., 32448., 33408., 34368., 35328., 11378., 11828., 12278., 12728.,
      13700., 14168., 14636., 15104., 16166., 16652., 17138., 17624., 18776.,
      19280., 19784., 20288., 13178., 13700., 14222., 14744., 15788., 16328.,
      16868., 17408., 18542., 19100., 19658., 20216., 21440., 22016., 22592.,
      23168.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x12x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37004., 37624., 38244., 38864., 40088., 40720., 41352., 41984., 43268.,
      43912., 44556., 45200., 46544., 47200., 47856., 48512., 39228., 39896.,
      40564., 41232., 42504., 43184., 43864., 44544., 45876., 46568., 47260.,
      47952., 49344., 50048., 50752., 51456., 41452., 42168., 42884., 43600.,
      44920., 45648., 46376., 47104., 48484., 49224., 49964., 50704., 52144.,
      52896., 53648., 54400., 43676., 44440., 45204., 45968., 47336., 48112.,
      48888., 49664., 51092., 51880., 52668., 53456., 54944., 55744., 56544.,
      57344., 31436., 32120., 32804., 33488., 34776., 35472., 36168., 36864.,
      38212., 38920., 39628., 40336., 41744., 42464., 43184., 43904., 33660.,
      34392., 35124., 35856., 37192., 37936., 38680., 39424., 40820., 41576.,
      42332., 43088., 44544., 45312., 46080., 46848., 35884., 36664., 37444.,
      38224., 39608., 40400., 41192., 41984., 43428., 44232., 45036., 45840.,
      47344., 48160., 48976., 49792., 28364., 29048., 29732., 30416., 31704.,
      32400., 33096., 33792., 35140., 35848., 36556., 37264., 38672., 39392.,
      40112., 40832., 30588., 31320., 32052., 32784., 34120., 34864., 35608.,
      36352., 37748., 38504., 39260., 40016., 41472., 42240., 43008., 43776.,
      32812., 33592., 34372., 35152., 36536., 37328., 38120., 38912., 40356.,
      41160., 41964., 42768., 44272., 45088., 45904., 46720., 35036., 35864.,
      36692., 37520., 38952., 39792., 40632., 41472., 42964., 43816., 44668.,
      45520., 47072., 47936., 48800., 49664., 32908., 33528., 34148., 34768.,
      35992., 36624., 37256., 37888., 39172., 39816., 40460., 41104., 42448.,
      43104., 43760., 44416., 35132., 35800., 36468., 37136., 38408., 39088.,
      39768., 40448., 41780., 42472., 43164., 43856., 45248., 45952., 46656.,
      47360., 37356., 38072., 38788., 39504., 40824., 41552., 42280., 43008.,
      44388., 45128., 45868., 46608., 48048., 48800., 49552., 50304., 32012.,
      32760., 33508., 34256., 35608., 36368., 37128., 37888., 39300., 40072.,
      40844., 41616., 43088., 43872., 44656., 45440., 34236., 35032., 35828.,
      36624., 38024., 38832., 39640., 40448., 41908., 42728., 43548., 44368.,
      45888., 46720., 47552., 48384., 36460., 37304., 38148., 38992., 40440.,
      41296., 42152., 43008., 44516., 45384., 46252., 47120., 48688., 49568.,
      50448., 51328., 38684., 39576., 40468., 41360., 42856., 43760., 44664.,
      45568., 47124., 48040., 48956., 49872., 51488., 52416., 53344., 54272.,
      32460., 33144., 33828., 34512., 35800., 36496., 37192., 37888., 39236.,
      39944., 40652., 41360., 42768., 43488., 44208., 44928., 34684., 35416.,
      36148., 36880., 38216., 38960., 39704., 40448., 41844., 42600., 43356.,
      44112., 45568., 46336., 47104., 47872., 36908., 37688., 38468., 39248.,
      40632., 41424., 42216., 43008., 44452., 45256., 46060., 46864., 48368.,
      49184., 50000., 50816., 31436., 32120., 32804., 33488., 34776., 35472.,
      36168., 36864., 38212., 38920., 39628., 40336., 41744., 42464., 43184.,
      43904., 33660., 34392., 35124., 35856., 37192., 37936., 38680., 39424.,
      40820., 41576., 42332., 43088., 44544., 45312., 46080., 46848., 35884.,
      36664., 37444., 38224., 39608., 40400., 41192., 41984., 43428., 44232.,
      45036., 45840., 47344., 48160., 48976., 49792., 38108., 38936., 39764.,
      40592., 42024., 42864., 43704., 44544., 46036., 46888., 47740., 48592.,
      50144., 51008., 51872., 52736., 27916., 28664., 29412., 30160., 31512.,
      32272., 33032., 33792., 35204., 35976., 36748., 37520., 38992., 39776.,
      40560., 41344., 30140., 30936., 31732., 32528., 33928., 34736., 35544.,
      36352., 37812., 38632., 39452., 40272., 41792., 42624., 43456., 44288.,
      32364., 33208., 34052., 34896., 36344., 37200., 38056., 38912., 40420.,
      41288., 42156., 43024., 44592., 45472., 46352., 47232., 32908., 33528.,
      34148., 34768., 35992., 36624., 37256., 37888., 39172., 39816., 40460.,
      41104., 42448., 43104., 43760., 44416., 35132., 35800., 36468., 37136.,
      38408., 39088., 39768., 40448., 41780., 42472., 43164., 43856., 45248.,
      45952., 46656., 47360., 37356., 38072., 38788., 39504., 40824., 41552.,
      42280., 43008., 44388., 45128., 45868., 46608., 48048., 48800., 49552.,
      50304., 39580., 40344., 41108., 41872., 43240., 44016., 44792., 45568.,
      46996., 47784., 48572., 49360., 50848., 51648., 52448., 53248., 31436.,
      32120., 32804., 33488., 34776., 35472., 36168., 36864., 38212., 38920.,
      39628., 40336., 41744., 42464., 43184., 43904., 33660., 34392., 35124.,
      35856., 37192., 37936., 38680., 39424., 40820., 41576., 42332., 43088.,
      44544., 45312., 46080., 46848., 35884., 36664., 37444., 38224., 39608.,
      40400., 41192., 41984., 43428., 44232., 45036., 45840., 47344., 48160.,
      48976., 49792., 32460., 33144., 33828., 34512., 35800., 36496., 37192.,
      37888., 39236., 39944., 40652., 41360., 42768., 43488., 44208., 44928.,
      34684., 35416., 36148., 36880., 38216., 38960., 39704., 40448., 41844.,
      42600., 43356., 44112., 45568., 46336., 47104., 47872., 36908., 37688.,
      38468., 39248., 40632., 41424., 42216., 43008., 44452., 45256., 46060.,
      46864., 48368., 49184., 50000., 50816., 39132., 39960., 40788., 41616.,
      43048., 43888., 44728., 45568., 47060., 47912., 48764., 49616., 51168.,
      52032., 52896., 53760., 37004., 37624., 38244., 38864., 40088., 40720.,
      41352., 41984., 43268., 43912., 44556., 45200., 46544., 47200., 47856.,
      48512., 39228., 39896., 40564., 41232., 42504., 43184., 43864., 44544.,
      45876., 46568., 47260., 47952., 49344., 50048., 50752., 51456., 41452.,
      42168., 42884., 43600., 44920., 45648., 46376., 47104., 48484., 49224.,
      49964., 50704., 52144., 52896., 53648., 54400., 27916., 28664., 29412.,
      30160., 31512., 32272., 33032., 33792., 35204., 35976., 36748., 37520.,
      38992., 39776., 40560., 41344., 30140., 30936., 31732., 32528., 33928.,
      34736., 35544., 36352., 37812., 38632., 39452., 40272., 41792., 42624.,
      43456., 44288., 32364., 33208., 34052., 34896., 36344., 37200., 38056.,
      38912., 40420., 41288., 42156., 43024., 44592., 45472., 46352., 47232.,
      34588., 35480., 36372., 37264., 38760., 39664., 40568., 41472., 43028.,
      43944., 44860., 45776., 47392., 48320., 49248., 50176., 28364., 29048.,
      29732., 30416., 31704., 32400., 33096., 33792., 35140., 35848., 36556.,
      37264., 38672., 39392., 40112., 40832., 30588., 31320., 32052., 32784.,
      34120., 34864., 35608., 36352., 37748., 38504., 39260., 40016., 41472.,
      42240., 43008., 43776., 32812., 33592., 34372., 35152., 36536., 37328.,
      38120., 38912., 40356., 41160., 41964., 42768., 44272., 45088., 45904.,
      46720.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23247., 23976., 30522., 31476., 22410., 23112., 23814., 33453., 34182.,
      43878., 44832., 32238., 32940., 33642., 32124., 33024., 37656., 38832.,
      30880., 31744., 26464., 15668., 16568., 25576., 26752., 15008., 15872.,
      16736., 19899., 20520., 26058., 26868., 19062., 19656., 20250., 28593.,
      29214., 37398., 38208., 27378., 27972., 28566., 25255., 25876., 29218.,
      30028., 24110., 24704., 20178.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x14x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24326., 24404., 24482., 24560., 24638., 24716., 24794., 25418., 25496.,
      25574., 25652., 25730., 25808., 25886., 26510., 26588., 26666., 26744.,
      26822., 26900., 26978., 27602., 27680., 27758., 27836., 27914., 27992.,
      28070., 28694., 28772., 28850., 28928., 29006., 29084., 29162., 29786.,
      29864., 29942., 30020., 30098., 30176., 30254., 30878., 30956., 31034.,
      31112., 31190., 31268., 31346.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25497., 26334., 26352., 27216., 33048., 34164., 34152., 35304., 23823.,
      24660., 24624., 25488., 25425., 26316., 37467., 38682., 38322., 39564.,
      48504., 50124., 49608., 51264., 35037., 36252., 35838., 37080., 36639.,
      37908., 40220., 41464., 41216., 42496., 46176., 47664., 47456., 48992.,
      37732., 38976., 38656., 39936., 31644., 32704., 17620., 18280., 18616.,
      19312., 28576., 29648., 29856., 30976., 16300., 16960., 17224., 17920.,
      18148., 18880., 18801., 19638., 19440., 20304., 24120., 25236., 24936.,
      26088., 17127., 17964., 17712., 18576., 18297., 19188., 27747., 28962.,
      28386., 29628., 35544., 37164., 36360., 38016., 25317., 26532., 25902.,
      27144., 26487., 27756., 29461., 30606., 30100., 31272., 33272., 34628.,
      34088., 35480., 27171., 28316., 27756., 28928., 22453., 23396.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x14x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45928., 48652., 46072., 48808., 46216., 48964., 46360., 49120., 46504.,
      49276., 46648., 49432., 46792., 49588., 47944., 50836., 48088., 50992.,
      48232., 51148., 48376., 51304., 48520., 51460., 48664., 51616., 48808.,
      51772., 49960., 53020., 50104., 53176., 50248., 53332., 50392., 53488.,
      50536., 53644., 50680., 53800., 50824., 53956., 51976., 55204., 52120.,
      55360., 52264., 55516., 52408., 55672., 52552., 55828., 52696., 55984.,
      52840., 56140., 53992., 57388., 54136., 57544., 54280., 57700., 54424.,
      57856., 54568., 58012., 54712., 58168., 54856., 58324., 56008., 59572.,
      56152., 59728., 56296., 59884., 56440., 60040., 56584., 60196., 56728.,
      60352., 56872., 60508., 58024., 61756., 58168., 61912., 58312., 62068.,
      58456., 62224., 58600., 62380., 58744., 62536., 58888., 62692.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9101.,  9586.,  10071., 10556., 9632.,  10144., 10656., 11168., 9236.,
      9776.,  10316., 10856., 9872.,  10448., 11024., 11600., 7161.,  7646.,
      8131.,  8616.,  7584.,  8096.,  8608.,  9120.,  6183.,  6562.,  6941.,
      7320.,  7863.,  8246.,  8629.,  9012.,  8394.,  8804.,  9214.,  9624.,
      10748., 11312., 11876., 12440., 11384., 11984., 12584., 13184., 6331.,
      6714.,  7097.,  7480.,  6754.,  7164.,  7574.,  7984.,  7177.,  7614.,
      8051.,  8488.,  10140., 10744., 11348., 11952., 10752., 11392., 12032.,
      12672., 10864., 11584., 12304., 13024., 11584., 12352., 13120., 13888.,
      7724.,  8328.,  8932.,  9536.,  8192.,  8832.,  9472.,  10112., 6996.,
      7544.,  8092.,  8640.,  8916.,  9448.,  9980.,  10512., 9528.,  10096.,
      10664., 11232., 12176., 12992., 13808., 14624., 12896., 13760., 14624.,
      15488., 6788.,  7320.,  7852.,  8384.,  7256.,  7824.,  8392.,  8960.,
      7724.,  8328.,  8932.,  9536.,  7197.,  7682.,  8167.,  8652.,  7584.,
      8096.,  8608.,  9120.,  6356.,  6896.,  7436.,  7976.,  6800.,  7376.,
      7952.,  8528.,  5257.,  5742.,  6227.,  6712.,  5536.,  6048.,  6560.,
      7072.,  3479.,  3858.,  4237.,  4616.,  5479.,  5862.,  6245.,  6628.,
      5866.,  6276.,  6686.,  7096.,  6716.,  7280.,  7844.,  8408.,  7160.,
      7760.,  8360.,  8960.,  3947.,  4330.,  4713.,  5096.,  4226.,  4636.,
      5046.,  5456.,  4505.,  4942.,  5379.,  5816.,  7825.,  8330.,  8835.,
      9340.,  8212.,  8744.,  9276.,  9808.,  7588.,  8176.,  8764.,  9352.,
      8032.,  8656.,  9280.,  9904.,  5805.,  6310.,  6815.,  7320.,  6084.,
      6616.,  7148.,  7680.,  4699.,  5130.,  5561.,  5992.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x14x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41772., 43216., 44660., 46104., 42048., 43504., 44960., 46416., 42324.,
      43792., 45260., 46728., 42600., 44080., 45560., 47040., 36476., 37712.,
      38948., 40184., 36752., 38000., 39248., 40496., 37028., 38288., 39548.,
      40808., 39236., 40592., 41948., 43304., 39512., 40880., 42248., 43616.,
      39788., 41168., 42548., 43928., 40064., 41456., 42848., 44240., 40340.,
      41744., 43148., 44552., 40616., 42032., 43448., 44864., 40892., 42320.,
      43748., 45176., 43100., 44624., 46148., 47672., 43376., 44912., 46448.,
      47984., 43652., 45200., 46748., 48296., 43928., 45488., 47048., 48608.,
      44204., 45776., 47348., 48920., 44480., 46064., 47648., 49232., 44756.,
      46352., 47948., 49544., 46964., 48656., 50348., 52040., 47240., 48944.,
      50648., 52352., 47516., 49232., 50948., 52664., 47792., 49520., 51248.,
      52976., 48068., 49808., 51548., 53288., 48344., 50096., 51848., 53600.,
      48620., 50384., 52148., 53912., 45452., 47056., 48660., 50264., 45728.,
      47344., 48960., 50576., 46004., 47632., 49260., 50888., 46280., 47920.,
      49560., 51200., 30684., 31824., 32964., 34104., 30960., 32112., 33264.,
      34416., 31236., 32400., 33564., 34728., 22948., 23952., 24956., 25960.,
      23224., 24240., 25256., 26272., 23500., 24528., 25556., 26584., 23776.,
      24816., 25856., 26896., 24052., 25104., 26156., 27208., 24328., 25392.,
      26456., 27520., 24604., 25680., 26756., 27832., 26812., 27984., 29156.,
      30328., 27088., 28272., 29456., 30640., 27364., 28560., 29756., 30952.,
      27640., 28848., 30056., 31264., 27916., 29136., 30356., 31576., 28192.,
      29424., 30656., 31888., 28468., 29712., 30956., 32200.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30875., 32700., 32585., 34464., 33760., 35944., 35968., 38224., 28989.,
      30760., 30591., 32416., 24065., 25624., 21087., 22708., 22797., 24472.,
      32224., 34456., 34432., 36736., 19609., 21176., 21211., 22832., 22813.,
      24488., 35540., 37744., 37532., 39808., 40256., 42976., 42816., 45632.,
      33196., 35328., 35044., 37248., 28956., 30976., 26436., 28496., 28428.,
      30560., 40128., 43040., 42688., 45696., 24380., 26368., 26228., 28288.,
      28076., 30208., 23331., 24940., 24609., 26272., 25408., 27304., 27040.,
      29008., 21445., 23000., 22615., 24224., 18217., 19560., 15175., 16580.,
      16453., 17912., 23488., 25432., 25120., 27136., 13697., 15048., 14867.,
      16272., 16037., 17496., 24619., 26268., 25897., 27600., 27200., 29192.,
      28832., 30896., 22653., 24248., 23823., 25472., 19105., 20552.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x14x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      43072., 46104., 43360., 46416., 43648., 46728., 43936., 47040., 37568.,
      40184., 37856., 40496., 38144., 40808., 40448., 43304., 40736., 43616.,
      41024., 43928., 41312., 44240., 41600., 44552., 41888., 44864., 42176.,
      45176., 44480., 47672., 44768., 47984., 45056., 48296., 45344., 48608.,
      45632., 48920., 45920., 49232., 46208., 49544., 48512., 52040., 48800.,
      52352., 49088., 52664., 49376., 52976., 49664., 53288., 49952., 53600.,
      50240., 53912., 46912., 50264., 47200., 50576., 47488., 50888., 47776.,
      51200., 31680., 34104., 31968., 34416., 32256., 34728., 23808., 25960.,
      24096., 26272., 24384., 26584., 24672., 26896., 24960., 27208., 25248.,
      27520., 25536., 27832., 27840., 30328., 28128., 30640., 28416., 30952.,
      28704., 31264., 28992., 31576., 29280., 31888., 29568., 32200.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 512.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      42055., 42998., 45102., 46072., 44269., 45266., 47424., 48448., 44204.,
      45248., 47768., 48848., 47012., 48128., 50720., 51872., 38283., 39226.,
      41222., 42192., 40281., 41278., 43328., 44352., 30439., 31170., 32954.,
      33712., 27035., 27774., 29674., 30440., 29249., 30042., 31996., 32816.,
      40060., 41152., 43720., 44848., 42868., 44032., 46672., 47872., 24079.,
      24818., 26610., 27376., 26077., 26870., 28716., 29536., 28075., 28922.,
      30822., 31696., 43540., 44712., 47144., 48352., 45916., 47160., 49664.,
      50944., 49424., 50816., 53792., 55232., 52400., 53888., 56960., 58496.,
      38852., 40024., 42312., 43520., 40940., 42184., 44544., 45824., 35604.,
      36664., 38840., 39936., 28548., 29576., 31864., 32928., 30924., 32024.,
      34384., 35520., 44880., 46464., 49632., 51264., 47856., 49536., 52800.,
      54528., 24436., 25464., 27608., 28672., 26524., 27624., 29840., 30976.,
      28612., 29784., 32072., 33280., 26967., 27910., 29582., 30552., 28317.,
      29314., 31040., 32064., 27500., 28544., 30488., 31568., 29156., 30272.,
      32288., 33440., 23195., 24138., 25702., 26672., 24329., 25326., 26944.,
      27968., 18743., 19474., 20826., 21584., 15211., 15950., 17418., 18184.,
      16561., 17354., 18876., 19696., 22588., 23680., 25672., 26800., 24244.,
      25408., 27472., 28672., 12255., 12994., 14354., 15120., 13389., 14182.,
      15596., 16416., 14523., 15370., 16838., 17712., 25919., 26902., 28614.,
      29624., 27269., 28306., 30072., 31136., 28940., 30080., 32120., 33296.,
      30596., 31808., 33920., 35168., 21987., 22970., 24574., 25584., 23121.,
      24158., 25816., 26880., 20927., 21762., 23218., 24080.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x14x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27204., 28288., 29672., 30768., 27756., 28864., 30272., 31392., 28308.,
      29440., 30872., 32016., 28860., 30016., 31472., 32640., 23012., 23936.,
      25160., 26096., 23564., 24512., 25760., 26720., 24116., 25088., 26360.,
      27344., 28532., 29696., 31160., 32336., 29084., 30272., 31760., 32960.,
      29636., 30848., 32360., 33584., 30188., 31424., 32960., 34208., 30740.,
      32000., 33560., 34832., 31292., 32576., 34160., 35456., 31844., 33152.,
      34760., 36080., 36260., 37760., 39560., 41072., 36812., 38336., 40160.,
      41696., 37364., 38912., 40760., 42320., 37916., 39488., 41360., 42944.,
      38468., 40064., 41960., 43568., 39020., 40640., 42560., 44192., 39572.,
      41216., 43160., 44816., 43988., 45824., 47960., 49808., 44540., 46400.,
      48560., 50432., 45092., 46976., 49160., 51056., 45644., 47552., 49760.,
      51680., 46196., 48128., 50360., 52304., 46748., 48704., 50960., 52928.,
      47300., 49280., 51560., 53552., 46340., 48256., 50472., 52400., 46892.,
      48832., 51072., 53024., 47444., 49408., 51672., 53648., 47996., 49984.,
      52272., 54272., 32676., 34176., 35976., 37488., 33228., 34752., 36576.,
      38112., 33780., 35328., 37176., 38736., 24372., 25600., 27128., 28368.,
      24924., 26176., 27728., 28992., 23172., 24192., 25512., 26544., 23724.,
      24768., 26112., 27168., 24276., 25344., 26712., 27792., 24828., 25920.,
      27312., 28416., 25380., 26496., 27912., 29040., 29796., 31104., 32712.,
      34032., 30348., 31680., 33312., 34656., 30900., 32256., 33912., 35280.,
      31452., 32832., 34512., 35904., 32004., 33408., 35112., 36528., 32556.,
      33984., 35712., 37152., 33108., 34560., 36312., 37776.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      34399., 35342., 36285., 37228., 39314., 40284., 41254., 42224., 36469.,
      37466., 38463., 39460., 41600., 42624., 43648., 44672., 34628., 35672.,
      36716., 37760., 40184., 41264., 42344., 43424., 37100., 38216., 39332.,
      40448., 42944., 44096., 45248., 46400., 26855., 27798., 28741., 29684.,
      31554., 32524., 33494., 34464., 28493., 29490., 30487., 31484., 33408.,
      34432., 35456., 36480., 23155., 23886., 24617., 25348., 27006., 27764.,
      28522., 29280., 29651., 30390., 31129., 31868., 33750., 34516., 35282.,
      36048., 31721., 32514., 33307., 34100., 36036., 36856., 37676., 38496.,
      40628., 41720., 42812., 43904., 46376., 47504., 48632., 49760., 43100.,
      44264., 45428., 46592., 49136., 50336., 51536., 52736., 23739., 24478.,
      25217., 25956., 27622., 28388., 29154., 29920., 25377., 26170., 26963.,
      27756., 29476., 30296., 31116., 31936., 27015., 27862., 28709., 29556.,
      31330., 32204., 33078., 33952., 38164., 39336., 40508., 41680., 44184.,
      45392., 46600., 47808., 40540., 41784., 43028., 44272., 46848., 48128.,
      49408., 50688., 40624., 42016., 43408., 44800., 47776., 49216., 50656.,
      52096., 43408., 44896., 46384., 47872., 50944., 52480., 54016., 55552.,
      28788., 29960., 31132., 32304., 34520., 35728., 36936., 38144., 30588.,
      31832., 33076., 34320., 36608., 37888., 39168., 40448., 25988., 27048.,
      28108., 29168., 31272., 32368., 33464., 34560., 33412., 34440., 35468.,
      36496., 38856., 39920., 40984., 42048., 35788., 36888., 37988., 39088.,
      41520., 42656., 43792., 44928., 45680., 47264., 48848., 50432., 53600.,
      55232., 56864., 58496., 48464., 50144., 51824., 53504., 56768., 58496.,
      60224., 61952., 25188., 26216., 27244., 28272., 30344., 31408., 32472.,
      33536., 26988., 28088., 29188., 30288., 32432., 33568., 34704., 35840.,
      28788., 29960., 31132., 32304., 34520., 35728., 36936., 38144., 27071.,
      28014., 28957., 29900., 31698., 32668., 33638., 34608., 28565., 29562.,
      30559., 31556., 33408., 34432., 35456., 36480., 23492., 24536., 25580.,
      26624., 28664., 29744., 30824., 31904., 25196., 26312., 27428., 28544.,
      30656., 31808., 32960., 34112., 19527., 20470., 21413., 22356., 23938.,
      24908., 25878., 26848., 20589., 21586., 22583., 23580., 25216., 26240.,
      27264., 28288., 12627., 13358., 14089., 14820., 16190., 16948., 17706.,
      18464., 20403., 21142., 21881., 22620., 24214., 24980., 25746., 26512.,
      21897., 22690., 23483., 24276., 25924., 26744., 27564., 28384., 24884.,
      25976., 27068., 28160., 30248., 31376., 32504., 33632., 26588., 27752.,
      28916., 30080., 32240., 33440., 34640., 35840., 14491., 15230., 15969.,
      16708., 18086., 18852., 19618., 20384., 15553., 16346., 17139., 17932.,
      19364., 20184., 21004., 21824., 16615., 17462., 18309., 19156., 20642.,
      21516., 22390., 23264., 29543., 30526., 31509., 32492., 34330., 35340.,
      36350., 37360., 31037., 32074., 33111., 34148., 36040., 37104., 38168.,
      39232., 28324., 29464., 30604., 31744., 33880., 35056., 36232., 37408.,
      30028., 31240., 32452., 33664., 35872., 37120., 38368., 39616., 21679.,
      22662., 23645., 24628., 26250., 27260., 28270., 29280., 22741., 23778.,
      24815., 25852., 27528., 28592., 29656., 30720., 17403., 18238., 19073.,
      19908., 21382., 22244., 23106., 23968.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x14x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15820., 16264., 16708., 17152., 18184., 18640., 19096., 19552., 16900.,
      17368., 17836., 18304., 19360., 19840., 20320., 20800., 17980., 18472.,
      18964., 19456., 20536., 21040., 21544., 22048., 19060., 19576., 20092.,
      20608., 21712., 22240., 22768., 23296., 10668., 10952., 11236., 11520.,
      12392., 12688., 12984., 13280., 11748., 12056., 12364., 12672., 13568.,
      13888., 14208., 14528., 12828., 13160., 13492., 13824., 14744., 15088.,
      15432., 15776., 19292., 19688., 20084., 20480., 21464., 21872., 22280.,
      22688., 20372., 20792., 21212., 21632., 22640., 23072., 23504., 23936.,
      21452., 21896., 22340., 22784., 23816., 24272., 24728., 25184., 22532.,
      23000., 23468., 23936., 24992., 25472., 25952., 26432., 23612., 24104.,
      24596., 25088., 26168., 26672., 27176., 27680., 24692., 25208., 25724.,
      26240., 27344., 27872., 28400., 28928., 25772., 26312., 26852., 27392.,
      28520., 29072., 29624., 30176., 34412., 35144., 35876., 36608., 37928.,
      38672., 39416., 40160., 35492., 36248., 37004., 37760., 39104., 39872.,
      40640., 41408., 36572., 37352., 38132., 38912., 40280., 41072., 41864.,
      42656., 37652., 38456., 39260., 40064., 41456., 42272., 43088., 43904.,
      38732., 39560., 40388., 41216., 42632., 43472., 44312., 45152., 39812.,
      40664., 41516., 42368., 43808., 44672., 45536., 46400., 40892., 41768.,
      42644., 43520., 44984., 45872., 46760., 47648., 49532., 50600., 51668.,
      52736., 54392., 55472., 56552., 57632., 50612., 51704., 52796., 53888.,
      55568., 56672., 57776., 58880., 51692., 52808., 53924., 55040., 56744.,
      57872., 59000., 60128., 52772., 53912., 55052., 56192., 57920., 59072.,
      60224., 61376., 53852., 55016., 56180., 57344., 59096., 60272., 61448.,
      62624., 54932., 56120., 57308., 58496., 60272., 61472., 62672., 63872.,
      56012., 57224., 58436., 59648., 61448., 62672., 63896., 65120., 41740.,
      42760., 43780., 44800., 46408., 47440., 48472., 49504., 42820., 43864.,
      44908., 45952., 47584., 48640., 49696., 50752., 43900., 44968., 46036.,
      47104., 48760., 49840., 50920., 52000., 44980., 46072., 47164., 48256.,
      49936., 51040., 52144., 53248., 29292., 30024., 30756., 31488., 32808.,
      33552., 34296., 35040., 30372., 31128., 31884., 32640., 33984., 34752.,
      35520., 36288., 31452., 32232., 33012., 33792., 35160., 35952., 36744.,
      37536., 12828., 13160., 13492., 13824., 14744., 15088., 15432., 15776.,
      13908., 14264., 14620., 14976., 15920., 16288., 16656., 17024., 12812.,
      13064., 13316., 13568., 14408., 14672., 14936., 15200., 13892., 14168.,
      14444., 14720., 15584., 15872., 16160., 16448., 14972., 15272., 15572.,
      15872., 16760., 17072., 17384., 17696., 16052., 16376., 16700., 17024.,
      17936., 18272., 18608., 18944., 17132., 17480., 17828., 18176., 19112.,
      19472., 19832., 20192., 25772., 26312., 26852., 27392., 28520., 29072.,
      29624., 30176., 26852., 27416., 27980., 28544., 29696., 30272., 30848.,
      31424., 27932., 28520., 29108., 29696., 30872., 31472., 32072., 32672.,
      29012., 29624., 30236., 30848., 32048., 32672., 33296., 33920., 30092.,
      30728., 31364., 32000., 33224., 33872., 34520., 35168., 31172., 31832.,
      32492., 33152., 34400., 35072., 35744., 36416., 32252., 32936., 33620.,
      34304., 35576., 36272., 36968., 37664.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36987., 39020., 41107., 43248., 41415., 43556., 45751., 48000., 35164.,
      37504., 39916., 42400., 40780., 43264., 45820., 48448., 33391., 35316.,
      37295., 39328., 37387., 39420., 41507., 43648., 24807., 26500., 28247.,
      30048., 28131., 29948., 31819., 33744., 32559., 34484., 36463., 38496.,
      46524., 49152., 51852., 54624., 52140., 54912., 57756., 60672., 25399.,
      27108., 28871., 30688., 29395., 31212., 33083., 35008., 33391., 35316.,
      37295., 39328., 37636., 40016., 42468., 44992., 42388., 44912., 47508.,
      50176., 37456., 40192., 43024., 45952., 43408., 46336., 49360., 52480.,
      33012., 35248., 37556., 39936., 37188., 39568., 42020., 44544., 26516.,
      28528., 30612., 32768., 28132., 30224., 32388., 34624., 32884., 35120.,
      37428., 39808., 48848., 51968., 55184., 58496., 54800., 58112., 61520.,
      65024., 24660., 26608., 28628., 30720., 28836., 30928., 33092., 35328.,
      33012., 35248., 37556., 39936., 22603., 24204., 25859., 27568., 25303.,
      27012., 28775., 30592., 20764., 22528., 24364., 26272., 24076., 25984.,
      27964., 30016., 19007., 20500., 22047., 23648., 21275., 22876., 24531.,
      26240., 14135., 15396., 16711., 18080., 17203., 18588., 20027., 21520.,
      19903., 21396., 22943., 24544., 27516., 29568., 31692., 33888., 30828.,
      33024., 35292., 37632., 14471., 15748., 17079., 18464., 16739., 18124.,
      19563., 21056., 19007., 20500., 22047., 23648., 21147., 22700., 24307.,
      25968., 23847., 25508., 27223., 28992., 20892., 22656., 24492., 26400.,
      24204., 26112., 28092., 30144., 17743., 19188., 20687., 22240., 20011.,
      21564., 23171., 24832., 14471., 15748., 17079., 18464.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x14x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15988., 17152., 18340., 19552., 17092., 18304., 19540., 20800., 18196.,
      19456., 20740., 22048., 19300., 20608., 21940., 23296., 10676., 11520.,
      12388., 13280., 11780., 12672., 13588., 14528., 12884., 13824., 14788.,
      15776., 19412., 20480., 21572., 22688., 20516., 21632., 22772., 23936.,
      21620., 22784., 23972., 25184., 22724., 23936., 25172., 26432., 23828.,
      25088., 26372., 27680., 24932., 26240., 27572., 28928., 26036., 27392.,
      28772., 30176., 34868., 36608., 38372., 40160., 35972., 37760., 39572.,
      41408., 37076., 38912., 40772., 42656., 38180., 40064., 41972., 43904.,
      39284., 41216., 43172., 45152., 40388., 42368., 44372., 46400., 41492.,
      43520., 45572., 47648., 50324., 52736., 55172., 57632., 51428., 53888.,
      56372., 58880., 52532., 55040., 57572., 60128., 53636., 56192., 58772.,
      61376., 54740., 57344., 59972., 62624., 55844., 58496., 61172., 63872.,
      56948., 59648., 62372., 65120., 42484., 44800., 47140., 49504., 43588.,
      45952., 48340., 50752., 44692., 47104., 49540., 52000., 45796., 48256.,
      50740., 53248., 29748., 31488., 33252., 35040., 30852., 32640., 34452.,
      36288., 31956., 33792., 35652., 37536., 12884., 13824., 14788., 15776.,
      13988., 14976., 15988., 17024., 12788., 13568., 14372., 15200., 13892.,
      14720., 15572., 16448., 14996., 15872., 16772., 17696., 16100., 17024.,
      17972., 18944., 17204., 18176., 19172., 20192., 26036., 27392., 28772.,
      30176., 27140., 28544., 29972., 31424., 28244., 29696., 31172., 32672.,
      29348., 30848., 32372., 33920., 30452., 32000., 33572., 35168., 31556.,
      33152., 34772., 36416., 32660., 34304., 35972., 37664.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8211.,  8694.,  9690.,  10200., 11277., 11814., 12972., 13536., 10047.,
      10638., 11742., 12360., 13545., 14190., 15456., 16128., 3828.,  4152.,
      5016.,  5376.,  6348.,  6744.,  7824.,  8256.,  5700.,  6168.,  7176.,
      7680.,  8796.,  9336.,  10560., 11136., 4347.,  4830.,  5610.,  6120.,
      6981.,  7518.,  8460.,  9024.,  5319.,  5910.,  6798.,  7416.,  8385.,
      9030.,  10080., 10752., 1971.,  2190.,  2706.,  2952.,  3549.,  3822.,
      4500.,  4800.,  4539.,  4806.,  5586.,  5880.,  6741.,  7062.,  8004.,
      8352.,  6375.,  6750.,  7638.,  8040.,  9009.,  9438.,  10488., 10944.,
      8340.,  8952.,  10104., 10752., 12012., 12696., 14064., 14784., 10212.,
      10968., 12264., 13056., 14460., 15288., 16800., 17664., 2403.,  2670.,
      3234.,  3528.,  4173.,  4494.,  5220.,  5568.,  3375.,  3750.,  4422.,
      4824.,  5577.,  6006.,  6840.,  7296.,  4347.,  4830.,  5610.,  6120.,
      6981.,  7518.,  8460.,  9024.,  9860.,  10440., 11704., 12320., 13692.,
      14344., 15824., 16512., 12308., 13032., 14440., 15200., 16716., 17512.,
      19136., 19968., 6128.,  6560.,  7712.,  8192.,  9488.,  10016., 11456.,
      12032., 8624.,  9248.,  10592., 11264., 12752., 13472., 15104., 15872.,
      5220.,  5800.,  6776.,  7392.,  8476.,  9128.,  10320., 11008., 6516.,
      7240.,  8360.,  9120.,  10348., 11144., 12480., 13312., 3204.,  3560.,
      4312.,  4704.,  5564.,  5992.,  6960.,  7424.,  4964.,  5256.,  6232.,
      6560.,  7644.,  8008.,  9200.,  9600.,  7412.,  7848.,  8968.,  9440.,
      10668., 11176., 12512., 13056., 10096., 10912., 12448., 13312., 14992.,
      15904., 17728., 18688., 12592., 13600., 15328., 16384., 18256., 19360.,
      21376., 22528., 2628.,  2920.,  3608.,  3936.,  4732.,  5096.,  6000.,
      6400.,  3924.,  4360.,  5192.,  5664.,  6604.,  7112.,  8160.,  8704.,
      5220.,  5800.,  6776.,  7392.,  8476.,  9128.,  10320., 11008., 8211.,
      8694.,  9690.,  10200., 11277., 11814., 12972., 13536., 10047., 10638.,
      11742., 12360., 13545., 14190., 15456., 16128., 3828.,  4152.,  5016.,
      5376.,  6348.,  6744.,  7824.,  8256.,  5700.,  6168.,  7176.,  7680.,
      8796.,  9336.,  10560., 11136., 4347.,  4830.,  5610.,  6120.,  6981.,
      7518.,  8460.,  9024.,  5319.,  5910.,  6798.,  7416.,  8385.,  9030.,
      10080., 10752., 1971.,  2190.,  2706.,  2952.,  3549.,  3822.,  4500.,
      4800.,  4539.,  4806.,  5586.,  5880.,  6741.,  7062.,  8004.,  8352.,
      6375.,  6750.,  7638.,  8040.,  9009.,  9438.,  10488., 10944., 8340.,
      8952.,  10104., 10752., 12012., 12696., 14064., 14784., 10212., 10968.,
      12264., 13056., 14460., 15288., 16800., 17664., 2403.,  2670.,  3234.,
      3528.,  4173.,  4494.,  5220.,  5568.,  3375.,  3750.,  4422.,  4824.,
      5577.,  6006.,  6840.,  7296.,  4347.,  4830.,  5610.,  6120.,  6981.,
      7518.,  8460.,  9024.,  7395.,  7830.,  8778.,  9240.,  10269., 10758.,
      11868., 12384., 9231.,  9774.,  10830., 11400., 12537., 13134., 14352.,
      14976., 4596.,  4920.,  5784.,  6144.,  7116.,  7512.,  8592.,  9024.,
      6468.,  6936.,  7944.,  8448.,  9564.,  10104., 11328., 11904., 3915.,
      4350.,  5082.,  5544.,  6357.,  6846.,  7740.,  8256.,  4887.,  5430.,
      6270.,  6840.,  7761.,  8358.,  9360.,  9984.,  2403.,  2670.,  3234.,
      3528.,  4173.,  4494.,  5220.,  5568.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x14x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19452., 19944., 21000., 21504., 22596., 23112., 24240., 24768., 21612.,
      22152., 23256., 23808., 24948., 25512., 26688., 27264., 23772., 24360.,
      25512., 26112., 27300., 27912., 29136., 29760., 25932., 26568., 27768.,
      28416., 29652., 30312., 31584., 32256., 18620., 19048., 20040., 20480.,
      21508., 21960., 23024., 23488., 20780., 21256., 22296., 22784., 23860.,
      24360., 25472., 25984., 22940., 23464., 24552., 25088., 26212., 26760.,
      27920., 28480., 38044., 38824., 40168., 40960., 42340., 43144., 44560.,
      45376., 40204., 41032., 42424., 43264., 44692., 45544., 47008., 47872.,
      42364., 43240., 44680., 45568., 47044., 47944., 49456., 50368., 44524.,
      45448., 46936., 47872., 49396., 50344., 51904., 52864., 46684., 47656.,
      49192., 50176., 51748., 52744., 54352., 55360., 48844., 49864., 51448.,
      52480., 54100., 55144., 56800., 57856., 41660., 42600., 44104., 45056.,
      46596., 47560., 49136., 50112., 28604., 29288., 30536., 31232., 32516.,
      33224., 34544., 35264., 30764., 31496., 32792., 33536., 34868., 35624.,
      36992., 37760., 32924., 33704., 35048., 35840., 37220., 38024., 39440.,
      40256., 35084., 35912., 37304., 38144., 39572., 40424., 41888., 42752.,
      19452., 19944., 21000., 21504., 22596., 23112., 24240., 24768., 21612.,
      22152., 23256., 23808., 24948., 25512., 26688., 27264., 23772., 24360.,
      25512., 26112., 27300., 27912., 29136., 29760., 29404., 29992., 31144.,
      31744., 32932., 33544., 34768., 35392., 31564., 32200., 33400., 34048.,
      35284., 35944., 37216., 37888., 33724., 34408., 35656., 36352., 37636.,
      38344., 39664., 40384., 35884., 36616., 37912., 38656., 39988., 40744.,
      42112., 42880., 38044., 38824., 40168., 40960., 42340., 43144., 44560.,
      45376., 40204., 41032., 42424., 43264., 44692., 45544., 47008., 47872.,
      42364., 43240., 44680., 45568., 47044., 47944., 49456., 50368., 36732.,
      37608., 39048., 39936., 41412., 42312., 43824., 44736., 38892., 39816.,
      41304., 42240., 43764., 44712., 46272., 47232., 41052., 42024., 43560.,
      44544., 46116., 47112., 48720., 49728., 43212., 44232., 45816., 46848.,
      48468., 49512., 51168., 52224., 28604., 29288., 30536., 31232., 32516.,
      33224., 34544., 35264., 30764., 31496., 32792., 33536., 34868., 35624.,
      36992., 37760., 32924., 33704., 35048., 35840., 37220., 38024., 39440.,
      40256., 22940., 23464., 24552., 25088., 26212., 26760., 27920., 28480.,
      25100., 25672., 26808., 27392., 28564., 29160., 30368., 30976., 25084.,
      25576., 26632., 27136., 28228., 28744., 29872., 30400., 27244., 27784.,
      28888., 29440., 30580., 31144., 32320., 32896., 29404., 29992., 31144.,
      31744., 32932., 33544., 34768., 35392., 31564., 32200., 33400., 34048.,
      35284., 35944., 37216., 37888., 33724., 34408., 35656., 36352., 37636.,
      38344., 39664., 40384., 41660., 42600., 44104., 45056., 46596., 47560.,
      49136., 50112., 43820., 44808., 46360., 47360., 48948., 49960., 51584.,
      52608., 45980., 47016., 48616., 49664., 51300., 52360., 54032., 55104.,
      48140., 49224., 50872., 51968., 53652., 54760., 56480., 57600., 36732.,
      37608., 39048., 39936., 41412., 42312., 43824., 44736., 38892., 39816.,
      41304., 42240., 43764., 44712., 46272., 47232., 41052., 42024., 43560.,
      44544., 46116., 47112., 48720., 49728.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, SAME3x14x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6147.,  6630.,  7113.,  7596.,  8502.,  9012.,  9522.,  10032., 11073.,
      11610., 12147., 12684., 13860., 14424., 14988., 15552., 7407.,  7998.,
      8589.,  9180.,  10194., 10812., 11430., 12048., 13197., 13842., 14487.,
      15132., 16416., 17088., 17760., 18432., 2148.,  2472.,  2796.,  3120.,
      3912.,  4272.,  4632.,  4992.,  5964.,  6360.,  6756.,  7152.,  8304.,
      8736.,  9168.,  9600.,  3444.,  3912.,  4380.,  4848.,  5784.,  6288.,
      6792.,  7296.,  8412.,  8952.,  9492.,  10032., 11328., 11904., 12480.,
      13056., 2547.,  3030.,  3513.,  3996.,  4758.,  5268.,  5778.,  6288.,
      7185.,  7722.,  8259.,  8796.,  9828.,  10392., 10956., 11520., 3231.,
      3822.,  4413.,  5004.,  5874.,  6492.,  7110.,  7728.,  8733.,  9378.,
      10023., 10668., 11808., 12480., 13152., 13824., 1899.,  2118.,  2337.,
      2556.,  3054.,  3300.,  3546.,  3792.,  4425.,  4698.,  4971.,  5244.,
      6012.,  6312.,  6612.,  6912.,  3627.,  3894.,  4161.,  4428.,  5118.,
      5412.,  5706.,  6000.,  6825.,  7146.,  7467.,  7788.,  8748.,  9096.,
      9444.,  9792.,  4887.,  5262.,  5637.,  6012.,  6810.,  7212.,  7614.,
      8016.,  8949.,  9378.,  9807.,  10236., 11304., 11760., 12216., 12672.,
      6276.,  6888.,  7500.,  8112.,  9192.,  9840.,  10488., 11136., 12396.,
      13080., 13764., 14448., 15888., 16608., 17328., 18048., 7572.,  8328.,
      9084.,  9840.,  11064., 11856., 12648., 13440., 14844., 15672., 16500.,
      17328., 18912., 19776., 20640., 21504., 1179.,  1446.,  1713.,  1980.,
      2526.,  2820.,  3114.,  3408.,  4089.,  4410.,  4731.,  5052.,  5868.,
      6216.,  6564.,  6912.,  1863.,  2238.,  2613.,  2988.,  3642.,  4044.,
      4446.,  4848.,  5637.,  6066.,  6495.,  6924.,  7848.,  8304.,  8760.,
      9216.,  2547.,  3030.,  3513.,  3996.,  4758.,  5268.,  5778.,  6288.,
      7185.,  7722.,  8259.,  8796.,  9828.,  10392., 10956., 11520., 6084.,
      6664.,  7244.,  7824.,  8968.,  9584.,  10200., 10816., 12140., 12792.,
      13444., 14096., 15600., 16288., 16976., 17664., 7764.,  8488.,  9212.,
      9936.,  11224., 11984., 12744., 13504., 14972., 15768., 16564., 17360.,
      19008., 19840., 20672., 21504., 4912.,  5344.,  5776.,  6208.,  7264.,
      7744.,  8224.,  8704.,  10000., 10528., 11056., 11584., 13120., 13696.,
      14272., 14848., 6640.,  7264.,  7888.,  8512.,  9760.,  10432., 11104.,
      11776., 13264., 13984., 14704., 15424., 17152., 17920., 18688., 19456.,
      4356.,  4936.,  5516.,  6096.,  7048.,  7664.,  8280.,  8896.,  10028.,
      10680., 11332., 11984., 13296., 13984., 14672., 15360., 5268.,  5992.,
      6716.,  7440.,  8536.,  9296.,  10056., 10816., 12092., 12888., 13684.,
      14480., 15936., 16768., 17600., 18432., 1572.,  1928.,  2284.,  2640.,
      3368.,  3760.,  4152.,  4544.,  5452.,  5880.,  6308.,  6736.,  7824.,
      8288.,  8752.,  9216.,  2724.,  3016.,  3308.,  3600.,  4456.,  4784.,
      5112.,  5440.,  6476.,  6840.,  7204.,  7568.,  8784.,  9184.,  9584.,
      9984.,  4404.,  4840.,  5276.,  5712.,  6712.,  7184.,  7656.,  8128.,
      9308.,  9816.,  10324., 10832., 12192., 12736., 13280., 13824., 6320.,
      7136.,  7952.,  8768.,  10208., 11072., 11936., 12800., 14480., 15392.,
      16304., 17216., 19136., 20096., 21056., 22016., 8048.,  9056.,  10064.,
      11072., 12704., 13760., 14816., 15872., 17744., 18848., 19952., 21056.,
      23168., 24320., 25472., 26624., 2532.,  2824.,  3116.,  3408.,  4072.,
      4400.,  4728.,  5056.,  5900.,  6264.,  6628.,  6992.,  8016.,  8416.,
      8816.,  9216.,  3444.,  3880.,  4316.,  4752.,  5560.,  6032.,  6504.,
      6976.,  7964.,  8472.,  8980.,  9488.,  10656., 11200., 11744., 12288.,
      4356.,  4936.,  5516.,  6096.,  7048.,  7664.,  8280.,  8896.,  10028.,
      10680., 11332., 11984., 13296., 13984., 14672., 15360., 6147.,  6630.,
      7113.,  7596.,  8502.,  9012.,  9522.,  10032., 11073., 11610., 12147.,
      12684., 13860., 14424., 14988., 15552., 7407.,  7998.,  8589.,  9180.,
      10194., 10812., 11430., 12048., 13197., 13842., 14487., 15132., 16416.,
      17088., 17760., 18432., 2148.,  2472.,  2796.,  3120.,  3912.,  4272.,
      4632.,  4992.,  5964.,  6360.,  6756.,  7152.,  8304.,  8736.,  9168.,
      9600.,  3444.,  3912.,  4380.,  4848.,  5784.,  6288.,  6792.,  7296.,
      8412.,  8952.,  9492.,  10032., 11328., 11904., 12480., 13056., 2547.,
      3030.,  3513.,  3996.,  4758.,  5268.,  5778.,  6288.,  7185.,  7722.,
      8259.,  8796.,  9828.,  10392., 10956., 11520., 3231.,  3822.,  4413.,
      5004.,  5874.,  6492.,  7110.,  7728.,  8733.,  9378.,  10023., 10668.,
      11808., 12480., 13152., 13824., 1899.,  2118.,  2337.,  2556.,  3054.,
      3300.,  3546.,  3792.,  4425.,  4698.,  4971.,  5244.,  6012.,  6312.,
      6612.,  6912.,  3627.,  3894.,  4161.,  4428.,  5118.,  5412.,  5706.,
      6000.,  6825.,  7146.,  7467.,  7788.,  8748.,  9096.,  9444.,  9792.,
      4887.,  5262.,  5637.,  6012.,  6810.,  7212.,  7614.,  8016.,  8949.,
      9378.,  9807.,  10236., 11304., 11760., 12216., 12672., 6276.,  6888.,
      7500.,  8112.,  9192.,  9840.,  10488., 11136., 12396., 13080., 13764.,
      14448., 15888., 16608., 17328., 18048., 7572.,  8328.,  9084.,  9840.,
      11064., 11856., 12648., 13440., 14844., 15672., 16500., 17328., 18912.,
      19776., 20640., 21504., 1179.,  1446.,  1713.,  1980.,  2526.,  2820.,
      3114.,  3408.,  4089.,  4410.,  4731.,  5052.,  5868.,  6216.,  6564.,
      6912.,  1863.,  2238.,  2613.,  2988.,  3642.,  4044.,  4446.,  4848.,
      5637.,  6066.,  6495.,  6924.,  7848.,  8304.,  8760.,  9216.,  2547.,
      3030.,  3513.,  3996.,  4758.,  5268.,  5778.,  6288.,  7185.,  7722.,
      8259.,  8796.,  9828.,  10392., 10956., 11520., 4563.,  4998.,  5433.,
      5868.,  6726.,  7188.,  7650.,  8112.,  9105.,  9594.,  10083., 10572.,
      11700., 12216., 12732., 13248., 5823.,  6366.,  6909.,  7452.,  8418.,
      8988.,  9558.,  10128., 11229., 11826., 12423., 13020., 14256., 14880.,
      15504., 16128., 3684.,  4008.,  4332.,  4656.,  5448.,  5808.,  6168.,
      6528.,  7500.,  7896.,  8292.,  8688.,  9840.,  10272., 10704., 11136.,
      4980.,  5448.,  5916.,  6384.,  7320.,  7824.,  8328.,  8832.,  9948.,
      10488., 11028., 11568., 12864., 13440., 14016., 14592., 3267.,  3702.,
      4137.,  4572.,  5286.,  5748.,  6210.,  6672.,  7521.,  8010.,  8499.,
      8988.,  9972.,  10488., 11004., 11520., 3951.,  4494.,  5037.,  5580.,
      6402.,  6972.,  7542.,  8112.,  9069.,  9666.,  10263., 10860., 11952.,
      12576., 13200., 13824., 1179.,  1446.,  1713.,  1980.,  2526.,  2820.,
      3114.,  3408.,  4089.,  4410.,  4731.,  5052.,  5868.,  6216.,  6564.,
      6912.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow7Stride4, VALID3x14x14x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7756.,  8056.,  8356.,  8656.,  9304.,  9616.,  9928.,  10240., 10948.,
      11272., 11596., 11920., 12688., 13024., 13360., 13696., 8956.,  9304.,
      9652.,  10000., 10696., 11056., 11416., 11776., 12532., 12904., 13276.,
      13648., 14464., 14848., 15232., 15616., 10156., 10552., 10948., 11344.,
      12088., 12496., 12904., 13312., 14116., 14536., 14956., 15376., 16240.,
      16672., 17104., 17536., 11356., 11800., 12244., 12688., 13480., 13936.,
      14392., 14848., 15700., 16168., 16636., 17104., 18016., 18496., 18976.,
      19456., 6220.,  6520.,  6820.,  7120.,  7768.,  8080.,  8392.,  8704.,
      9412.,  9736.,  10060., 10384., 11152., 11488., 11824., 12160., 7420.,
      7768.,  8116.,  8464.,  9160.,  9520.,  9880.,  10240., 10996., 11368.,
      11740., 12112., 12928., 13312., 13696., 14080., 8620.,  9016.,  9412.,
      9808.,  10552., 10960., 11368., 11776., 12580., 13000., 13420., 13840.,
      14704., 15136., 15568., 16000., 10668., 11064., 11460., 11856., 12600.,
      13008., 13416., 13824., 14628., 15048., 15468., 15888., 16752., 17184.,
      17616., 18048., 11868., 12312., 12756., 13200., 13992., 14448., 14904.,
      15360., 16212., 16680., 17148., 17616., 18528., 19008., 19488., 19968.,
      7756.,  8056.,  8356.,  8656.,  9304.,  9616.,  9928.,  10240., 10948.,
      11272., 11596., 11920., 12688., 13024., 13360., 13696., 8956.,  9304.,
      9652.,  10000., 10696., 11056., 11416., 11776., 12532., 12904., 13276.,
      13648., 14464., 14848., 15232., 15616., 10156., 10552., 10948., 11344.,
      12088., 12496., 12904., 13312., 14116., 14536., 14956., 15376., 16240.,
      16672., 17104., 17536., 11356., 11800., 12244., 12688., 13480., 13936.,
      14392., 14848., 15700., 16168., 16636., 17104., 18016., 18496., 18976.,
      19456., 6220.,  6520.,  6820.,  7120.,  7768.,  8080.,  8392.,  8704.,
      9412.,  9736.,  10060., 10384., 11152., 11488., 11824., 12160., 8268.,
      8568.,  8868.,  9168.,  9816.,  10128., 10440., 10752., 11460., 11784.,
      12108., 12432., 13200., 13536., 13872., 14208., 9468.,  9816.,  10164.,
      10512., 11208., 11568., 11928., 12288., 13044., 13416., 13788., 14160.,
      14976., 15360., 15744., 16128., 10668., 11064., 11460., 11856., 12600.,
      13008., 13416., 13824., 14628., 15048., 15468., 15888., 16752., 17184.,
      17616., 18048., 11868., 12312., 12756., 13200., 13992., 14448., 14904.,
      15360., 16212., 16680., 17148., 17616., 18528., 19008., 19488., 19968.,
      7756.,  8056.,  8356.,  8656.,  9304.,  9616.,  9928.,  10240., 10948.,
      11272., 11596., 11920., 12688., 13024., 13360., 13696., 8956.,  9304.,
      9652.,  10000., 10696., 11056., 11416., 11776., 12532., 12904., 13276.,
      13648., 14464., 14848., 15232., 15616., 10156., 10552., 10948., 11344.,
      12088., 12496., 12904., 13312., 14116., 14536., 14956., 15376., 16240.,
      16672., 17104., 17536., 10156., 10552., 10948., 11344., 12088., 12496.,
      12904., 13312., 14116., 14536., 14956., 15376., 16240., 16672., 17104.,
      17536., 11356., 11800., 12244., 12688., 13480., 13936., 14392., 14848.,
      15700., 16168., 16636., 17104., 18016., 18496., 18976., 19456., 8268.,
      8568.,  8868.,  9168.,  9816.,  10128., 10440., 10752., 11460., 11784.,
      12108., 12432., 13200., 13536., 13872., 14208., 9468.,  9816.,  10164.,
      10512., 11208., 11568., 11928., 12288., 13044., 13416., 13788., 14160.,
      14976., 15360., 15744., 16128., 10668., 11064., 11460., 11856., 12600.,
      13008., 13416., 13824., 14628., 15048., 15468., 15888., 16752., 17184.,
      17616., 18048., 11868., 12312., 12756., 13200., 13992., 14448., 14904.,
      15360., 16212., 16680., 17148., 17616., 18528., 19008., 19488., 19968.,
      7756.,  8056.,  8356.,  8656.,  9304.,  9616.,  9928.,  10240., 10948.,
      11272., 11596., 11920., 12688., 13024., 13360., 13696., 7756.,  8056.,
      8356.,  8656.,  9304.,  9616.,  9928.,  10240., 10948., 11272., 11596.,
      11920., 12688., 13024., 13360., 13696., 8956.,  9304.,  9652.,  10000.,
      10696., 11056., 11416., 11776., 12532., 12904., 13276., 13648., 14464.,
      14848., 15232., 15616., 10156., 10552., 10948., 11344., 12088., 12496.,
      12904., 13312., 14116., 14536., 14956., 15376., 16240., 16672., 17104.,
      17536., 11356., 11800., 12244., 12688., 13480., 13936., 14392., 14848.,
      15700., 16168., 16636., 17104., 18016., 18496., 18976., 19456., 8268.,
      8568.,  8868.,  9168.,  9816.,  10128., 10440., 10752., 11460., 11784.,
      12108., 12432., 13200., 13536., 13872., 14208., 9468.,  9816.,  10164.,
      10512., 11208., 11568., 11928., 12288., 13044., 13416., 13788., 14160.,
      14976., 15360., 15744., 16128., 10668., 11064., 11460., 11856., 12600.,
      13008., 13416., 13824., 14628., 15048., 15468., 15888., 16752., 17184.,
      17616., 18048., 8620.,  9016.,  9412.,  9808.,  10552., 10960., 11368.,
      11776., 12580., 13000., 13420., 13840., 14704., 15136., 15568., 16000.,
      9820.,  10264., 10708., 11152., 11944., 12400., 12856., 13312., 14164.,
      14632., 15100., 15568., 16480., 16960., 17440., 17920., 7756.,  8056.,
      8356.,  8656.,  9304.,  9616.,  9928.,  10240., 10948., 11272., 11596.,
      11920., 12688., 13024., 13360., 13696., 8956.,  9304.,  9652.,  10000.,
      10696., 11056., 11416., 11776., 12532., 12904., 13276., 13648., 14464.,
      14848., 15232., 15616., 10156., 10552., 10948., 11344., 12088., 12496.,
      12904., 13312., 14116., 14536., 14956., 15376., 16240., 16672., 17104.,
      17536., 11356., 11800., 12244., 12688., 13480., 13936., 14392., 14848.,
      15700., 16168., 16636., 17104., 18016., 18496., 18976., 19456., 8268.,
      8568.,  8868.,  9168.,  9816.,  10128., 10440., 10752., 11460., 11784.,
      12108., 12432., 13200., 13536., 13872., 14208., 6220.,  6520.,  6820.,
      7120.,  7768.,  8080.,  8392.,  8704.,  9412.,  9736.,  10060., 10384.,
      11152., 11488., 11824., 12160., 7420.,  7768.,  8116.,  8464.,  9160.,
      9520.,  9880.,  10240., 10996., 11368., 11740., 12112., 12928., 13312.,
      13696., 14080., 8620.,  9016.,  9412.,  9808.,  10552., 10960., 11368.,
      11776., 12580., 13000., 13420., 13840., 14704., 15136., 15568., 16000.,
      9820.,  10264., 10708., 11152., 11944., 12400., 12856., 13312., 14164.,
      14632., 15100., 15568., 16480., 16960., 17440., 17920., 7756.,  8056.,
      8356.,  8656.,  9304.,  9616.,  9928.,  10240., 10948., 11272., 11596.,
      11920., 12688., 13024., 13360., 13696., 8956.,  9304.,  9652.,  10000.,
      10696., 11056., 11416., 11776., 12532., 12904., 13276., 13648., 14464.,
      14848., 15232., 15616., 10156., 10552., 10948., 11344., 12088., 12496.,
      12904., 13312., 14116., 14536., 14956., 15376., 16240., 16672., 17104.,
      17536.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}