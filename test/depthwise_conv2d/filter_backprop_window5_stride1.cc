/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_depthwise_conv2d_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/depthwise_conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::DefaultBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;
using GTestTypePairs = sycldnn::types::ToGTestTypes<SNNTypePairs>::type;

template <typename Pair>
using FilterBackpropWindow5Stride1 =
    sycldnn::depthwise_conv2d::WindowStrideTest<Pair, 5, 1>;
TYPED_TEST_SUITE(FilterBackpropWindow5Stride1, GTestTypePairs);
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5432.,  6940.,  8500.,  7180.,  5816.,  7990.,  10100., 12245., 10250.,
      8230.,  10740., 13470., 16206., 13470., 10740., 8230.,  10250., 12245.,
      10100., 7990.,  5816.,  7180.,  8500.,  6940.,  5432.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      58.,  68.,  78.,  88.,  98.,  118., 128., 138., 148.,
      158., 178., 188., 198., 208., 218., 238., 248., 258.,
      268., 278., 298., 308., 318., 328., 338.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10680., 10864., 13640., 13880., 16700., 17000., 14100., 14360., 11416.,
      11632., 15690., 15980., 19825., 20200., 24025., 24490., 20100., 20500.,
      16130., 16460., 21060., 21480., 26400., 26940., 31746., 32412., 26370.,
      26940., 21012., 21480., 16050., 16460., 19975., 20500., 23845., 24490.,
      19650., 20200., 15530., 15980., 11256., 11632., 13880., 14360., 16412.,
      17000., 13380., 13880., 10456., 10864.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      98.,  116., 114., 136., 130., 156., 146., 176., 162., 196.,
      194., 236., 210., 256., 226., 276., 242., 296., 258., 316.,
      290., 356., 306., 376., 322., 396., 338., 416., 354., 436.,
      386., 476., 402., 496., 418., 516., 434., 536., 450., 556.,
      482., 596., 498., 616., 514., 636., 530., 656., 546., 676.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21176., 21360., 21544., 21728., 27040., 27280., 27520., 27760., 33100.,
      33400., 33700., 34000., 27940., 28200., 28460., 28720., 22616., 22832.,
      23048., 23264., 31090., 31380., 31670., 31960., 39275., 39650., 40025.,
      40400., 47585., 48050., 48515., 48980., 39800., 40200., 40600., 41000.,
      31930., 32260., 32590., 32920., 41700., 42120., 42540., 42960., 52260.,
      52800., 53340., 53880., 62826., 63492., 64158., 64824., 52170., 52740.,
      53310., 53880., 41556., 42024., 42492., 42960., 31690., 32100., 32510.,
      32920., 39425., 39950., 40475., 41000., 47045., 47690., 48335., 48980.,
      38750., 39300., 39850., 40400., 30610., 31060., 31510., 31960., 22136.,
      22512., 22888., 23264., 27280., 27760., 28240., 28720., 32236., 32824.,
      33412., 34000., 26260., 26760., 27260., 27760., 20504., 20912., 21320.,
      21728.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      178.,  196.,  214.,  232.,  206.,  228.,  250.,  272.,  234.,  260.,
      286.,  312.,  262.,  292.,  322.,  352.,  290.,  324.,  358.,  392.,
      346.,  388.,  430.,  472.,  374.,  420.,  466.,  512.,  402.,  452.,
      502.,  552.,  430.,  484.,  538.,  592.,  458.,  516.,  574.,  632.,
      514.,  580.,  646.,  712.,  542.,  612.,  682.,  752.,  570.,  644.,
      718.,  792.,  598.,  676.,  754.,  832.,  626.,  708.,  790.,  872.,
      682.,  772.,  862.,  952.,  710.,  804.,  898.,  992.,  738.,  836.,
      934.,  1032., 766.,  868.,  970.,  1072., 794.,  900.,  1006., 1112.,
      850.,  964.,  1078., 1192., 878.,  996.,  1114., 1232., 906.,  1028.,
      1150., 1272., 934.,  1060., 1186., 1312., 962.,  1092., 1222., 1352.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20560., 21728., 26300., 27760., 32248., 34000., 27260., 28720., 22096.,
      23264., 30500., 31960., 38575., 40400., 46790., 48980., 39175., 41000.,
      31460., 32920., 41208., 42960., 51690., 53880., 62196., 64824., 51690.,
      53880., 41208., 42960., 31460., 32920., 39175., 41000., 46790., 48980.,
      38575., 40400., 30500., 31960., 22096., 23264., 27260., 28720., 32248.,
      34000., 26300., 27760., 20560., 21728.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      180., 232.,  212., 272.,  244.,  312.,  276.,  352.,  308.,  392.,
      372., 472.,  404., 512.,  436.,  552.,  468.,  592.,  500.,  632.,
      564., 712.,  596., 752.,  628.,  792.,  660.,  832.,  692.,  872.,
      756., 952.,  788., 992.,  820.,  1032., 852.,  1072., 884.,  1112.,
      948., 1192., 980., 1232., 1012., 1272., 1044., 1312., 1076., 1352.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8256.,  8608.,  9424.,  9792.,  12524., 12984., 14080., 14560., 16816.,
      17392., 18760., 19360., 14916., 15416., 16600., 17120., 13312., 13728.,
      14736., 15168., 14104., 14664., 15852., 16432., 20681., 21406., 22962.,
      23712., 27144., 28044., 29958., 30888., 23879., 24654., 26288., 27088.,
      21064., 21704., 23068., 23728., 20032., 20720., 22104., 22816., 28730.,
      29588., 31352., 32240., 37336., 38376., 40508., 41584., 29118., 29972.,
      31740., 32624., 21600., 22256., 23672., 24352., 20520., 21192., 22524.,
      23216., 24525., 25358., 26998., 27856., 28320., 29324., 31262., 32296.,
      23019., 23838., 25428., 26272., 18392., 19016., 20268., 20912., 16704.,
      17312., 18384., 19008., 20812., 21560., 22880., 23648., 24688., 25584.,
      27144., 28064., 21540., 22264., 23544., 24288., 19072., 19616., 20624.,
      21184.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      328.,  360.,  428.,  464.,  384.,  424.,  500.,  544.,  440.,  488.,
      572.,  624.,  496.,  552.,  644.,  704.,  552.,  616.,  716.,  784.,
      664.,  744.,  860.,  944.,  720.,  808.,  932.,  1024., 776.,  872.,
      1004., 1104., 832.,  936.,  1076., 1184., 888.,  1000., 1148., 1264.,
      1000., 1128., 1292., 1424., 1056., 1192., 1364., 1504., 1112., 1256.,
      1436., 1584., 1168., 1320., 1508., 1664., 1224., 1384., 1580., 1744.,
      1336., 1512., 1724., 1904., 1392., 1576., 1796., 1984., 1448., 1640.,
      1868., 2064., 1504., 1704., 1940., 2144., 1560., 1768., 2012., 2224.,
      1672., 1896., 2156., 2384., 1728., 1960., 2228., 2464., 1784., 2024.,
      2300., 2544., 1840., 2088., 2372., 2624., 1896., 2152., 2444., 2704.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8736.,  9088.,  9440.,  9792.,  10672., 11040., 11408., 11776., 12364.,
      12824., 13284., 13744., 14880., 15360., 15840., 16320., 15648., 16224.,
      16800., 17376., 18744., 19344., 19944., 20544., 12756., 13256., 13756.,
      14256., 15400., 15920., 16440., 16960., 10592., 11008., 11424., 11840.,
      12784., 13216., 13648., 14080., 14592., 15152., 15712., 16272., 17428.,
      18008., 18588., 19168., 19965., 20690., 21415., 22140., 23670., 24420.,
      25170., 25920., 24716., 25616., 26516., 27416., 29290., 30220., 31150.,
      32080., 20231., 21006., 21781., 22556., 24128., 24928., 25728., 26528.,
      16912., 17552., 18192., 18832., 20132., 20792., 21452., 22112., 18640.,
      19328., 20016., 20704., 22120., 22832., 23544., 24256., 25946., 26804.,
      27662., 28520., 30328., 31216., 32104., 32992., 32672., 33712., 34752.,
      35792., 37956., 39032., 40108., 41184., 23974., 24828., 25682., 26536.,
      28292., 29176., 30060., 30944., 16944., 17600., 18256., 18912., 20296.,
      20976., 21656., 22336., 20144., 20816., 21488., 22160., 23492., 24184.,
      24876., 25568., 24537., 25370., 26203., 27036., 28690., 29548., 30406.,
      31264., 28244., 29248., 30252., 31256., 33202., 34236., 35270., 36304.,
      23075., 23894., 24713., 25532., 27100., 27944., 28788., 29632., 19520.,
      20144., 20768., 21392., 22612., 23256., 23900., 24544., 16160., 16768.,
      17376., 17984., 19120., 19744., 20368., 20992., 20332., 21080., 21828.,
      22576., 24000., 24768., 25536., 26304., 23904., 24800., 25696., 26592.,
      28280., 29200., 30120., 31040., 19892., 20616., 21340., 22064., 23432.,
      24176., 24920., 25664., 17376., 17920., 18464., 19008., 20080., 20640.,
      21200., 21760.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      624.,  656.,  688.,  720.,  820.,  856.,  892.,  928.,  728.,  768.,
      808.,  848.,  956.,  1000., 1044., 1088., 832.,  880.,  928.,  976.,
      1092., 1144., 1196., 1248., 936.,  992.,  1048., 1104., 1228., 1288.,
      1348., 1408., 1040., 1104., 1168., 1232., 1364., 1432., 1500., 1568.,
      1248., 1328., 1408., 1488., 1636., 1720., 1804., 1888., 1352., 1440.,
      1528., 1616., 1772., 1864., 1956., 2048., 1456., 1552., 1648., 1744.,
      1908., 2008., 2108., 2208., 1560., 1664., 1768., 1872., 2044., 2152.,
      2260., 2368., 1664., 1776., 1888., 2000., 2180., 2296., 2412., 2528.,
      1872., 2000., 2128., 2256., 2452., 2584., 2716., 2848., 1976., 2112.,
      2248., 2384., 2588., 2728., 2868., 3008., 2080., 2224., 2368., 2512.,
      2724., 2872., 3020., 3168., 2184., 2336., 2488., 2640., 2860., 3016.,
      3172., 3328., 2288., 2448., 2608., 2768., 2996., 3160., 3324., 3488.,
      2496., 2672., 2848., 3024., 3268., 3448., 3628., 3808., 2600., 2784.,
      2968., 3152., 3404., 3592., 3780., 3968., 2704., 2896., 3088., 3280.,
      3540., 3736., 3932., 4128., 2808., 3008., 3208., 3408., 3676., 3880.,
      4084., 4288., 2912., 3120., 3328., 3536., 3812., 4024., 4236., 4448.,
      3120., 3344., 3568., 3792., 4084., 4312., 4540., 4768., 3224., 3456.,
      3688., 3920., 4220., 4456., 4692., 4928., 3328., 3568., 3808., 4048.,
      4356., 4600., 4844., 5088., 3432., 3680., 3928., 4176., 4492., 4744.,
      4996., 5248., 3536., 3792., 4048., 4304., 4628., 4888., 5148., 5408.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14288., 15168., 16080., 17024., 15364., 16496., 17668., 18880., 17016.,
      18400., 19832., 21312., 14660., 15856., 17092., 18368., 12624., 13632.,
      14672., 15744., 13796., 14992., 16228., 17504., 18629., 20156., 21733.,
      23360., 24022., 25880., 27798., 29776., 22373., 23964., 25605., 27296.,
      21092., 22416., 23780., 25184., 21112., 22496., 23928., 25408., 31206.,
      32936., 34726., 36576., 41908., 43984., 46132., 48352., 31206., 32936.,
      34726., 36576., 21112., 22496., 23928., 25408., 21092., 22416., 23780.,
      25184., 22373., 23964., 25605., 27296., 24022., 25880., 27798., 29776.,
      18629., 20156., 21733., 23360., 13796., 14992., 16228., 17504., 12624.,
      13632., 14672., 15744., 14660., 15856., 17092., 18368., 17016., 18400.,
      19832., 21312., 15364., 16496., 17668., 18880., 14288., 15168., 16080.,
      17024.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      628.,  720.,  820.,  928.,  740.,  848.,  964.,  1088., 852.,  976.,
      1108., 1248., 964.,  1104., 1252., 1408., 1076., 1232., 1396., 1568.,
      1300., 1488., 1684., 1888., 1412., 1616., 1828., 2048., 1524., 1744.,
      1972., 2208., 1636., 1872., 2116., 2368., 1748., 2000., 2260., 2528.,
      1972., 2256., 2548., 2848., 2084., 2384., 2692., 3008., 2196., 2512.,
      2836., 3168., 2308., 2640., 2980., 3328., 2420., 2768., 3124., 3488.,
      2644., 3024., 3412., 3808., 2756., 3152., 3556., 3968., 2868., 3280.,
      3700., 4128., 2980., 3408., 3844., 4288., 3092., 3536., 3988., 4448.,
      3316., 3792., 4276., 4768., 3428., 3920., 4420., 4928., 3540., 4048.,
      4564., 5088., 3652., 4176., 4708., 5248., 3764., 4304., 4852., 5408.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13680., 14112., 15040., 15488., 16464., 16928., 17952., 18432., 14532.,
      15048., 16200., 16736., 17948., 18504., 19776., 20352., 15752., 16368.,
      17728., 18368., 19800., 20464., 21968., 22656., 12724., 13256., 14392.,
      14944., 16140., 16712., 17968., 18560., 10608., 11040., 11968., 12416.,
      13392., 13856., 14880., 15360., 17916., 18504., 19648., 20256., 21460.,
      22088., 23352., 24000., 20601., 21322., 22798., 23544., 25095., 25866.,
      27492., 28288., 23618., 24492., 26280., 27184., 29062., 29996., 31964.,
      32928., 20053., 20810., 22314., 23096., 24675., 25482., 27136., 27968.,
      17756., 18376., 19616., 20256., 21556., 22216., 23576., 24256., 17064.,
      17776., 19168., 19904., 21368., 22128., 23664., 24448., 25654., 26508.,
      28252., 29136., 30970., 31884., 33808., 34752., 34668., 35688., 37760.,
      38816., 40996., 42088., 44376., 45504., 24318., 25164., 26852., 27728.,
      29506., 30412., 32280., 33216., 15720., 16368., 17696., 18368., 19768.,
      20464., 21936., 22656., 18076., 18760., 20064., 20768., 22132., 22856.,
      24280., 25024., 21921., 22730., 24310., 25144., 26799., 27658., 29388.,
      30272., 25970., 26924., 28760., 29744., 31670., 32684., 34700., 35744.,
      21629., 22410., 23890., 24696., 26251., 27082., 28712., 29568., 18940.,
      19528., 20672., 21280., 22484., 23112., 24376., 25024., 16368., 16928.,
      17984., 18560., 19664., 20256., 21408., 22016., 16708., 17352., 18632.,
      19296., 20636., 21320., 22720., 23424., 17416., 18160., 19648., 20416.,
      21976., 22768., 24400., 25216., 14324., 14920., 16120., 16736., 17996.,
      18632., 19952., 20608., 12656., 13088., 14016., 14464., 15440., 15904.,
      16928., 17408.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1196., 1256.,  1376., 1440.,  1572., 1640., 1784., 1856., 1404.,  1480.,
      1616., 1696.,  1844., 1928.,  2088., 2176., 1612., 1704., 1856.,  1952.,
      2116., 2216.,  2392., 2496.,  1820., 1928., 2096., 2208., 2388.,  2504.,
      2696., 2816.,  2028., 2152.,  2336., 2464., 2660., 2792., 3000.,  3136.,
      2444., 2600.,  2816., 2976.,  3204., 3368., 3608., 3776., 2652.,  2824.,
      3056., 3232.,  3476., 3656.,  3912., 4096., 2860., 3048., 3296.,  3488.,
      3748., 3944.,  4216., 4416.,  3068., 3272., 3536., 3744., 4020.,  4232.,
      4520., 4736.,  3276., 3496.,  3776., 4000., 4292., 4520., 4824.,  5056.,
      3692., 3944.,  4256., 4512.,  4836., 5096., 5432., 5696., 3900.,  4168.,
      4496., 4768.,  5108., 5384.,  5736., 6016., 4108., 4392., 4736.,  5024.,
      5380., 5672.,  6040., 6336.,  4316., 4616., 4976., 5280., 5652.,  5960.,
      6344., 6656.,  4524., 4840.,  5216., 5536., 5924., 6248., 6648.,  6976.,
      4940., 5288.,  5696., 6048.,  6468., 6824., 7256., 7616., 5148.,  5512.,
      5936., 6304.,  6740., 7112.,  7560., 7936., 5356., 5736., 6176.,  6560.,
      7012., 7400.,  7864., 8256.,  5564., 5960., 6416., 6816., 7284.,  7688.,
      8168., 8576.,  5772., 6184.,  6656., 7072., 7556., 7976., 8472.,  8896.,
      6188., 6632.,  7136., 7584.,  8100., 8552., 9080., 9536., 6396.,  6856.,
      7376., 7840.,  8372., 8840.,  9384., 9856., 6604., 7080., 7616.,  8096.,
      8644., 9128.,  9688., 10176., 6812., 7304., 7856., 8352., 8916.,  9416.,
      9992., 10496., 7020., 7528.,  8096., 8608., 9188., 9704., 10296., 10816.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11056., 11488., 11920., 12352., 13248., 13696., 14144., 14592., 15568.,
      16032., 16496., 16960., 18016., 18496., 18976., 19456., 14084., 14600.,
      15116., 15632., 16760., 17296., 17832., 18368., 19596., 20152., 20708.,
      21264., 22592., 23168., 23744., 24320., 17320., 17936., 18552., 19168.,
      20480., 21120., 21760., 22400., 23832., 24496., 25160., 25824., 27376.,
      28064., 28752., 29440., 11988., 12520., 13052., 13584., 14664., 15216.,
      15768., 16320., 17500., 18072., 18644., 19216., 20496., 21088., 21680.,
      22272., 9008.,  9440.,  9872.,  10304., 11200., 11648., 12096., 12544.,
      13520., 13984., 14448., 14912., 15968., 16448., 16928., 17408., 15276.,
      15864., 16452., 17040., 18208., 18816., 19424., 20032., 21300., 21928.,
      22556., 23184., 24552., 25200., 25848., 26496., 18785., 19506., 20227.,
      20948., 22450., 23196., 23942., 24688., 26315., 27086., 27857., 28628.,
      30380., 31176., 31972., 32768., 22170., 23044., 23918., 24792., 26568.,
      27472., 28376., 29280., 31206., 32140., 33074., 34008., 36084., 37048.,
      38012., 38976., 18357., 19114., 19871., 20628., 22086., 22868., 23650.,
      24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640.,
      17612., 18232., 18852., 19472., 20672., 21312., 21952., 22592., 23892.,
      24552., 25212., 25872., 27272., 27952., 28632., 29312., 16136., 16848.,
      17560., 18272., 19680., 20416., 21152., 21888., 23416., 24176., 24936.,
      25696., 27344., 28128., 28912., 29696., 22230., 23084., 23938., 24792.,
      26564., 27448., 28332., 29216., 31138., 32052., 32966., 33880., 35952.,
      36896., 37840., 38784., 28380., 29400., 30420., 31440., 33504., 34560.,
      35616., 36672., 38916., 40008., 41100., 42192., 44616., 45744., 46872.,
      48000., 19310., 20156., 21002., 21848., 23516., 24392., 25268., 26144.,
      27962., 28868., 29774., 30680., 32648., 33584., 34520., 35456., 14536.,
      15184., 15832., 16480., 17824., 18496., 19168., 19840., 21304., 22000.,
      22696., 23392., 24976., 25696., 26416., 27136., 19212., 19896., 20580.,
      21264., 22528., 23232., 23936., 24640., 26004., 26728., 27452., 28176.,
      29640., 30384., 31128., 31872., 20505., 21314., 22123., 22932., 24490.,
      25324., 26158., 26992., 28675., 29534., 30393., 31252., 33060., 33944.,
      34828., 35712., 21674., 22628., 23582., 24536., 26328., 27312., 28296.,
      29280., 31222., 32236., 33250., 34264., 36356., 37400., 38444., 39488.,
      17453., 18234., 19015., 19796., 21246., 22052., 22858., 23664., 25239.,
      26070., 26901., 27732., 29432., 30288., 31144., 32000., 17324., 17912.,
      18500., 19088., 20256., 20864., 21472., 22080., 23348., 23976., 24604.,
      25232., 26600., 27248., 27896., 28544., 12208., 12768., 13328., 13888.,
      14912., 15488., 16064., 16640., 17744., 18336., 18928., 19520., 20704.,
      21312., 21920., 22528., 16260., 16904., 17548., 18192., 19448., 20112.,
      20776., 21440., 22796., 23480., 24164., 24848., 26304., 27008., 27712.,
      28416., 20520., 21264., 22008., 22752., 24192., 24960., 25728., 26496.,
      28056., 28848., 29640., 30432., 32112., 32928., 33744., 34560., 13076.,
      13672., 14268., 14864., 16008., 16624., 17240., 17856., 19100., 19736.,
      20372., 21008., 22352., 23008., 23664., 24320., 9008.,  9440.,  9872.,
      10304., 11200., 11648., 12096., 12544., 13520., 13984., 14448., 14912.,
      15968., 16448., 16928., 17408.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2332.,  2392.,  2452.,  2512.,  2688.,  2752.,  2816.,  2880.,  3076.,
      3144.,  3212.,  3280.,  3496.,  3568.,  3640.,  3712.,  2732.,  2808.,
      2884.,  2960.,  3152.,  3232.,  3312.,  3392.,  3604.,  3688.,  3772.,
      3856.,  4088.,  4176.,  4264.,  4352.,  3132.,  3224.,  3316.,  3408.,
      3616.,  3712.,  3808.,  3904.,  4132.,  4232.,  4332.,  4432.,  4680.,
      4784.,  4888.,  4992.,  3532.,  3640.,  3748.,  3856.,  4080.,  4192.,
      4304.,  4416.,  4660.,  4776.,  4892.,  5008.,  5272.,  5392.,  5512.,
      5632.,  3932.,  4056.,  4180.,  4304.,  4544.,  4672.,  4800.,  4928.,
      5188.,  5320.,  5452.,  5584.,  5864.,  6000.,  6136.,  6272.,  4732.,
      4888.,  5044.,  5200.,  5472.,  5632.,  5792.,  5952.,  6244.,  6408.,
      6572.,  6736.,  7048.,  7216.,  7384.,  7552.,  5132.,  5304.,  5476.,
      5648.,  5936.,  6112.,  6288.,  6464.,  6772.,  6952.,  7132.,  7312.,
      7640.,  7824.,  8008.,  8192.,  5532.,  5720.,  5908.,  6096.,  6400.,
      6592.,  6784.,  6976.,  7300.,  7496.,  7692.,  7888.,  8232.,  8432.,
      8632.,  8832.,  5932.,  6136.,  6340.,  6544.,  6864.,  7072.,  7280.,
      7488.,  7828.,  8040.,  8252.,  8464.,  8824.,  9040.,  9256.,  9472.,
      6332.,  6552.,  6772.,  6992.,  7328.,  7552.,  7776.,  8000.,  8356.,
      8584.,  8812.,  9040.,  9416.,  9648.,  9880.,  10112., 7132.,  7384.,
      7636.,  7888.,  8256.,  8512.,  8768.,  9024.,  9412.,  9672.,  9932.,
      10192., 10600., 10864., 11128., 11392., 7532.,  7800.,  8068.,  8336.,
      8720.,  8992.,  9264.,  9536.,  9940.,  10216., 10492., 10768., 11192.,
      11472., 11752., 12032., 7932.,  8216.,  8500.,  8784.,  9184.,  9472.,
      9760.,  10048., 10468., 10760., 11052., 11344., 11784., 12080., 12376.,
      12672., 8332.,  8632.,  8932.,  9232.,  9648.,  9952.,  10256., 10560.,
      10996., 11304., 11612., 11920., 12376., 12688., 13000., 13312., 8732.,
      9048.,  9364.,  9680.,  10112., 10432., 10752., 11072., 11524., 11848.,
      12172., 12496., 12968., 13296., 13624., 13952., 9532.,  9880.,  10228.,
      10576., 11040., 11392., 11744., 12096., 12580., 12936., 13292., 13648.,
      14152., 14512., 14872., 15232., 9932.,  10296., 10660., 11024., 11504.,
      11872., 12240., 12608., 13108., 13480., 13852., 14224., 14744., 15120.,
      15496., 15872., 10332., 10712., 11092., 11472., 11968., 12352., 12736.,
      13120., 13636., 14024., 14412., 14800., 15336., 15728., 16120., 16512.,
      10732., 11128., 11524., 11920., 12432., 12832., 13232., 13632., 14164.,
      14568., 14972., 15376., 15928., 16336., 16744., 17152., 11132., 11544.,
      11956., 12368., 12896., 13312., 13728., 14144., 14692., 15112., 15532.,
      15952., 16520., 16944., 17368., 17792., 11932., 12376., 12820., 13264.,
      13824., 14272., 14720., 15168., 15748., 16200., 16652., 17104., 17704.,
      18160., 18616., 19072., 12332., 12792., 13252., 13712., 14288., 14752.,
      15216., 15680., 16276., 16744., 17212., 17680., 18296., 18768., 19240.,
      19712., 12732., 13208., 13684., 14160., 14752., 15232., 15712., 16192.,
      16804., 17288., 17772., 18256., 18888., 19376., 19864., 20352., 13132.,
      13624., 14116., 14608., 15216., 15712., 16208., 16704., 17332., 17832.,
      18332., 18832., 19480., 19984., 20488., 20992., 13532., 14040., 14548.,
      15056., 15680., 16192., 16704., 17216., 17860., 18376., 18892., 19408.,
      20072., 20592., 21112., 21632.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9230.,  11284., 13398., 11620., 9790.,  13550., 16415., 19320., 16625.,
      13900., 18185., 21882., 25585., 21882., 18185., 13900., 16625., 19320.,
      16415., 13550., 9790.,  11620., 13398., 11284., 9230.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      151., 172., 193., 214., 235., 298., 319., 340., 361.,
      382., 445., 466., 487., 508., 529., 592., 613., 634.,
      655., 676., 739., 760., 781., 802., 823.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18190., 18460., 22232., 22568., 26390., 26796., 22880., 23240., 19270.,
      19580., 26675., 27100., 32305., 32830., 38010., 38640., 32695., 33250.,
      27325., 27800., 35755., 36370., 43008., 43764., 50267., 51170., 42972.,
      43764., 35695., 36370., 27200., 27800., 32515., 33250., 37765., 38640.,
      32065., 32830., 26450., 27100., 19030., 19580., 22568., 23240., 25998.,
      26796., 21872., 22568., 17870., 18460.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      269.,  302.,  305.,  344.,  341.,  386.,  377.,  428.,  413.,  470.,
      521.,  596.,  557.,  638.,  593.,  680.,  629.,  722.,  665.,  764.,
      773.,  890.,  809.,  932.,  845.,  974.,  881.,  1016., 917.,  1058.,
      1025., 1184., 1061., 1226., 1097., 1268., 1133., 1310., 1169., 1352.,
      1277., 1478., 1313., 1520., 1349., 1562., 1385., 1604., 1421., 1646.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13838., 14108., 14378., 14648., 18016., 18352., 18688., 19024., 22294.,
      22700., 23106., 23512., 20568., 20928., 21288., 21648., 18902., 19212.,
      19522., 19832., 23485., 23910., 24335., 24760., 29909., 30434., 30959.,
      31484., 36350., 36980., 37610., 38240., 32835., 33390., 33945., 34500.,
      29471., 29946., 30421., 30896., 34287., 34902., 35517., 36132., 43020.,
      43776., 44532., 45288., 51631., 52534., 53437., 54340., 45984., 46776.,
      47568., 48360., 40635., 41310., 41985., 42660., 38824., 39424., 40024.,
      40624., 48935., 49670., 50405., 51140., 58911., 59786., 60661., 61536.,
      52741., 53506., 54271., 55036., 46874., 47524., 48174., 48824., 37510.,
      38060., 38610., 39160., 44464., 45136., 45808., 46480., 51198., 51996.,
      52794., 53592., 43048., 43744., 44440., 45136., 35150., 35740., 36330.,
      36920.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      505.,  538.,  571.,  604.,  571.,  610.,  649.,  688.,  637.,  682.,
      727.,  772.,  703.,  754.,  805.,  856.,  769.,  826.,  883.,  940.,
      967.,  1042., 1117., 1192., 1033., 1114., 1195., 1276., 1099., 1186.,
      1273., 1360., 1165., 1258., 1351., 1444., 1231., 1330., 1429., 1528.,
      1429., 1546., 1663., 1780., 1495., 1618., 1741., 1864., 1561., 1690.,
      1819., 1948., 1627., 1762., 1897., 2032., 1693., 1834., 1975., 2116.,
      1891., 2050., 2209., 2368., 1957., 2122., 2287., 2452., 2023., 2194.,
      2365., 2536., 2089., 2266., 2443., 2620., 2155., 2338., 2521., 2704.,
      2353., 2554., 2755., 2956., 2419., 2626., 2833., 3040., 2485., 2698.,
      2911., 3124., 2551., 2770., 2989., 3208., 2617., 2842., 3067., 3292.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13460., 14648., 17560., 19024., 21772., 23512., 20120., 21648., 18516.,
      19832., 21931., 23480., 27206., 29052., 32641., 34784., 29582., 31428.,
      26659., 28208., 28974., 30628., 36916., 38888., 45010., 47300., 36916.,
      38888., 28974., 30628., 26659., 28208., 29582., 31428., 32641., 34784.,
      27206., 29052., 21931., 23480., 18516., 19832., 20120., 21648., 21772.,
      23512., 17560., 19024., 13460., 14648.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      502.,  604.,  574.,  688.,  646.,  772.,  718.,  856.,  790.,  940.,
      1006., 1192., 1078., 1276., 1150., 1360., 1222., 1444., 1294., 1528.,
      1510., 1780., 1582., 1864., 1654., 1948., 1726., 2032., 1798., 2116.,
      2014., 2368., 2086., 2452., 2158., 2536., 2230., 2620., 2302., 2704.,
      2518., 2956., 2590., 3040., 2662., 3124., 2734., 3208., 2806., 3292.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14880., 15400., 16468., 17008., 18600., 19248., 20608., 21280., 22280.,
      23064., 24708., 25520., 19832., 20528., 21968., 22688., 17744., 18344.,
      19588., 20208., 20829., 21590., 23134., 23920., 25104., 25996., 27870.,
      28792., 29433., 30466., 32660., 33728., 26020., 26908., 28786., 29704.,
      23145., 23878., 25450., 26208., 24108., 24924., 26618., 27464., 31908.,
      32872., 34920., 35920., 39744., 40868., 43258., 44424., 32156., 33128.,
      35168., 36176., 25140., 25948., 27650., 28488., 21039., 21830., 23344.,
      24160., 25212., 26140., 27978., 28936., 29391., 30466., 32618., 33728.,
      24816., 25740., 27582., 28536., 20827., 21590., 23132., 23920., 17392.,
      18088., 19364., 20080., 22856., 23664., 25184., 26016., 28280., 29208.,
      30964., 31920., 24344., 25136., 26608., 27424., 20896., 21544., 22740.,
      23408.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      944.,  1004., 1142., 1208., 1076., 1148., 1298., 1376., 1208., 1292.,
      1454., 1544., 1340., 1436., 1610., 1712., 1472., 1580., 1766., 1880.,
      1868., 2012., 2234., 2384., 2000., 2156., 2390., 2552., 2132., 2300.,
      2546., 2720., 2264., 2444., 2702., 2888., 2396., 2588., 2858., 3056.,
      2792., 3020., 3326., 3560., 2924., 3164., 3482., 3728., 3056., 3308.,
      3638., 3896., 3188., 3452., 3794., 4064., 3320., 3596., 3950., 4232.,
      3716., 4028., 4418., 4736., 3848., 4172., 4574., 4904., 3980., 4316.,
      4730., 5072., 4112., 4460., 4886., 5240., 4244., 4604., 5042., 5408.,
      4640., 5036., 5510., 5912., 4772., 5180., 5666., 6080., 4904., 5324.,
      5822., 6248., 5036., 5468., 5978., 6416., 5168., 5612., 6134., 6584.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13880., 14400., 14920., 15440., 16524., 17064., 17604., 18144., 18248.,
      18896., 19544., 20192., 21600., 22272., 22944., 23616., 22272., 23056.,
      23840., 24624., 26332., 27144., 27956., 28768., 21432., 22128., 22824.,
      23520., 25040., 25760., 26480., 27200., 21576., 22176., 22776., 23376.,
      24732., 25352., 25972., 26592., 20865., 21626., 22387., 23148., 24618.,
      25404., 26190., 26976., 27940., 28832., 29724., 30616., 32418., 33340.,
      34262., 35184., 30697., 31730., 32763., 33796., 35964., 37032., 38100.,
      39168., 25872., 26760., 27648., 28536., 30414., 31332., 32250., 33168.,
      22517., 23250., 23983., 24716., 26334., 27092., 27850., 28608., 19816.,
      20632., 21448., 22264., 23974., 24820., 25666., 26512., 27140., 28104.,
      29068., 30032., 32104., 33104., 34104., 35104., 35100., 36224., 37348.,
      38472., 40934., 42100., 43266., 44432., 28716., 29688., 30660., 31632.,
      33744., 34752., 35760., 36768., 23872., 24680., 25488., 26296., 28094.,
      28932., 29770., 30608., 17927., 18718., 19509., 20300., 21808., 22624.,
      23440., 24256., 23768., 24696., 25624., 26552., 28374., 29332., 30290.,
      31248., 31083., 32158., 33233., 34308., 36478., 37588., 38698., 39808.,
      27332., 28256., 29180., 30104., 31938., 32892., 33846., 34800., 20923.,
      21686., 22449., 23212., 24740., 25528., 26316., 27104., 15976., 16672.,
      17368., 18064., 19324., 20040., 20756., 21472., 19240., 20048., 20856.,
      21664., 23168., 24000., 24832., 25664., 24912., 25840., 26768., 27696.,
      29484., 30440., 31396., 32352., 20632., 21424., 22216., 23008., 24496.,
      25312., 26128., 26944., 17592., 18240., 18888., 19536., 20748., 21416.,
      22084., 22752.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1828.,  1888.,  1948.,  2008.,  2218.,  2284.,  2350.,  2416.,  2080.,
      2152.,  2224.,  2296.,  2518.,  2596.,  2674.,  2752.,  2332.,  2416.,
      2500.,  2584.,  2818.,  2908.,  2998.,  3088.,  2584.,  2680.,  2776.,
      2872.,  3118.,  3220.,  3322.,  3424.,  2836.,  2944.,  3052.,  3160.,
      3418.,  3532.,  3646.,  3760.,  3592.,  3736.,  3880.,  4024.,  4318.,
      4468.,  4618.,  4768.,  3844.,  4000.,  4156.,  4312.,  4618.,  4780.,
      4942.,  5104.,  4096.,  4264.,  4432.,  4600.,  4918.,  5092.,  5266.,
      5440.,  4348.,  4528.,  4708.,  4888.,  5218.,  5404.,  5590.,  5776.,
      4600.,  4792.,  4984.,  5176.,  5518.,  5716.,  5914.,  6112.,  5356.,
      5584.,  5812.,  6040.,  6418.,  6652.,  6886.,  7120.,  5608.,  5848.,
      6088.,  6328.,  6718.,  6964.,  7210.,  7456.,  5860.,  6112.,  6364.,
      6616.,  7018.,  7276.,  7534.,  7792.,  6112.,  6376.,  6640.,  6904.,
      7318.,  7588.,  7858.,  8128.,  6364.,  6640.,  6916.,  7192.,  7618.,
      7900.,  8182.,  8464.,  7120.,  7432.,  7744.,  8056.,  8518.,  8836.,
      9154.,  9472.,  7372.,  7696.,  8020.,  8344.,  8818.,  9148.,  9478.,
      9808.,  7624.,  7960.,  8296.,  8632.,  9118.,  9460.,  9802.,  10144.,
      7876.,  8224.,  8572.,  8920.,  9418.,  9772.,  10126., 10480., 8128.,
      8488.,  8848.,  9208.,  9718.,  10084., 10450., 10816., 8884.,  9280.,
      9676.,  10072., 10618., 11020., 11422., 11824., 9136.,  9544.,  9952.,
      10360., 10918., 11332., 11746., 12160., 9388.,  9808.,  10228., 10648.,
      11218., 11644., 12070., 12496., 9640.,  10072., 10504., 10936., 11518.,
      11956., 12394., 12832., 9892.,  10336., 10780., 11224., 11818., 12268.,
      12718., 13168.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19012., 20048., 21124., 22240., 21304., 22624., 23992., 25408., 24044.,
      25648., 27308., 29024., 18808., 20192., 21624., 23104., 14020., 15184.,
      16388., 17632., 17629., 19116., 20653., 22240., 21510., 23320., 25190.,
      27120., 26031., 28164., 30367., 32640., 22822., 24632., 26502., 28432.,
      20157., 21644., 23181., 24768., 25126., 26808., 28550., 30352., 35540.,
      37584., 39700., 41888., 46562., 48968., 51458., 54032., 35540., 37584.,
      39700., 41888., 25126., 26808., 28550., 30352., 20157., 21644., 23181.,
      24768., 22822., 24632., 26502., 28432., 26031., 28164., 30367., 32640.,
      21510., 23320., 25190., 27120., 17629., 19116., 20653., 22240., 14020.,
      15184., 16388., 17632., 18808., 20192., 21624., 23104., 24044., 25648.,
      27308., 29024., 21304., 22624., 23992., 25408., 19012., 20048., 21124.,
      22240.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1822.,  2008.,  2206.,  2416.,  2086.,  2296.,  2518.,  2752.,  2350.,
      2584.,  2830.,  3088.,  2614.,  2872.,  3142.,  3424.,  2878.,  3160.,
      3454.,  3760.,  3670.,  4024.,  4390.,  4768.,  3934.,  4312.,  4702.,
      5104.,  4198.,  4600.,  5014.,  5440.,  4462.,  4888.,  5326.,  5776.,
      4726.,  5176.,  5638.,  6112.,  5518.,  6040.,  6574.,  7120.,  5782.,
      6328.,  6886.,  7456.,  6046.,  6616.,  7198.,  7792.,  6310.,  6904.,
      7510.,  8128.,  6574.,  7192.,  7822.,  8464.,  7366.,  8056.,  8758.,
      9472.,  7630.,  8344.,  9070.,  9808.,  7894.,  8632.,  9382.,  10144.,
      8158.,  8920.,  9694.,  10480., 8422.,  9208.,  10006., 10816., 9214.,
      10072., 10942., 11824., 9478.,  10360., 11254., 12160., 9742.,  10648.,
      11566., 12496., 10006., 10936., 11878., 12832., 10270., 11224., 12190.,
      13168.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15500., 16008., 17040., 17568., 18660., 19208., 20360., 20928., 18296.,
      18928., 20272., 20928., 22344., 23024., 24512., 25216., 21460., 22232.,
      23872., 24672., 26396., 27224., 29032., 29888., 18904., 19568., 21008.,
      21696., 23208., 23920., 25504., 26240., 17772., 18312., 19568., 20128.,
      21444., 22024., 23400., 24000., 19873., 20602., 21990., 22744., 24207.,
      24986., 26524., 27328., 29106., 29964., 31672., 32560., 34358., 35276.,
      37164., 38112., 30703., 31710., 33782., 34824., 37001., 38078., 40360.,
      41472., 23866., 24716., 26496., 27376., 29246., 30156., 32116., 33056.,
      18905., 19578., 21086., 21784., 23367., 24090., 25748., 26496., 19658.,
      20492., 22160., 23024., 24782., 25676., 27524., 28448., 28356., 29352.,
      31384., 32416., 34556., 35624., 37872., 38976., 39334., 40516., 42952.,
      44176., 46738., 48004., 50692., 52000., 30452., 31464., 33544., 34592.,
      36780., 37864., 40160., 41280., 23578., 24396., 26144., 26992., 28830.,
      29708., 31636., 32544., 18085., 18874., 20330., 21144., 22675., 23514.,
      25120., 25984., 22826., 23756., 25520., 26480., 28334., 29324., 31268.,
      32288., 31515., 32606., 34722., 35848., 38069., 39230., 41556., 42752.,
      28914., 29836., 31608., 32560., 34422., 35404., 37356., 38368., 19933.,
      20666., 22114., 22872., 24395., 25178., 26776., 27584., 12268., 12872.,
      14000., 14624., 15812., 16456., 17704., 18368., 14968., 15664., 17008.,
      17728., 19144., 19888., 21376., 22144., 19380., 20184., 21792., 22624.,
      24316., 25176., 26952., 27840., 16728., 17392., 18704., 19392., 20776.,
      21488., 22944., 23680., 15500., 16008., 17040., 17568., 18660., 19208.,
      20360., 20928.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3530.,  3644.,  3896.,  4016.,  4286.,  4412.,  4700.,  4832.,  4034.,
      4172.,  4448.,  4592.,  4886.,  5036.,  5348.,  5504.,  4538.,  4700.,
      5000.,  5168.,  5486.,  5660.,  5996.,  6176.,  5042.,  5228.,  5552.,
      5744.,  6086.,  6284.,  6644.,  6848.,  5546.,  5756.,  6104.,  6320.,
      6686.,  6908.,  7292.,  7520.,  7058.,  7340.,  7760.,  8048.,  8486.,
      8780.,  9236.,  9536.,  7562.,  7868.,  8312.,  8624.,  9086.,  9404.,
      9884.,  10208., 8066.,  8396.,  8864.,  9200.,  9686.,  10028., 10532.,
      10880., 8570.,  8924.,  9416.,  9776.,  10286., 10652., 11180., 11552.,
      9074.,  9452.,  9968.,  10352., 10886., 11276., 11828., 12224., 10586.,
      11036., 11624., 12080., 12686., 13148., 13772., 14240., 11090., 11564.,
      12176., 12656., 13286., 13772., 14420., 14912., 11594., 12092., 12728.,
      13232., 13886., 14396., 15068., 15584., 12098., 12620., 13280., 13808.,
      14486., 15020., 15716., 16256., 12602., 13148., 13832., 14384., 15086.,
      15644., 16364., 16928., 14114., 14732., 15488., 16112., 16886., 17516.,
      18308., 18944., 14618., 15260., 16040., 16688., 17486., 18140., 18956.,
      19616., 15122., 15788., 16592., 17264., 18086., 18764., 19604., 20288.,
      15626., 16316., 17144., 17840., 18686., 19388., 20252., 20960., 16130.,
      16844., 17696., 18416., 19286., 20012., 20900., 21632., 17642., 18428.,
      19352., 20144., 21086., 21884., 22844., 23648., 18146., 18956., 19904.,
      20720., 21686., 22508., 23492., 24320., 18650., 19484., 20456., 21296.,
      22286., 23132., 24140., 24992., 19154., 20012., 21008., 21872., 22886.,
      23756., 24788., 25664., 19658., 20540., 21560., 22448., 23486., 24380.,
      25436., 26336.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15196., 15704., 16212., 16720., 17808., 18336., 18864., 19392., 20580.,
      21128., 21676., 22224., 23512., 24080., 24648., 25216., 16056., 16688.,
      17320., 17952., 19280., 19936., 20592., 21248., 22696., 23376., 24056.,
      24736., 26304., 27008., 27712., 28416., 17956., 18728., 19500., 20272.,
      21856., 22656., 23456., 24256., 25980., 26808., 27636., 28464., 30328.,
      31184., 32040., 32896., 15320., 15984., 16648., 17312., 18672., 19360.,
      20048., 20736., 22216., 22928., 23640., 24352., 25952., 26688., 27424.,
      28160., 13948., 14488., 15028., 15568., 16688., 17248., 17808., 18368.,
      19588., 20168., 20748., 21328., 22648., 23248., 23848., 24448., 17449.,
      18178., 18907., 19636., 21082., 21836., 22590., 23344., 24915., 25694.,
      26473., 27252., 28948., 29752., 30556., 31360., 23498., 24356., 25214.,
      26072., 27768., 28656., 29544., 30432., 32278., 33196., 34114., 35032.,
      37028., 37976., 38924., 39872., 24495., 25502., 26509., 27516., 29530.,
      30572., 31614., 32656., 34845., 35922., 36999., 38076., 40440., 41552.,
      42664., 43776., 20322., 21172., 22022., 22872., 24592., 25472., 26352.,
      27232., 29102., 30012., 30922., 31832., 33852., 34792., 35732., 36672.,
      16785., 17458., 18131., 18804., 20226., 20924., 21622., 22320., 23867.,
      24590., 25313., 26036., 27708., 28456., 29204., 29952., 18770., 19604.,
      20438., 21272., 22976., 23840., 24704., 25568., 27422., 28316., 29210.,
      30104., 32108., 33032., 33956., 34880., 23972., 24968., 25964., 26960.,
      28968., 30000., 31032., 32064., 34252., 35320., 36388., 37456., 39824.,
      40928., 42032., 43136., 31662., 32844., 34026., 35208., 37576., 38800.,
      40024., 41248., 43826., 45092., 46358., 47624., 50412., 51720., 53028.,
      54336., 23988., 25000., 26012., 27024., 29048., 30096., 31144., 32192.,
      34396., 35480., 36564., 37648., 40032., 41152., 42272., 43392., 19778.,
      20596., 21414., 22232., 23920., 24768., 25616., 26464., 28302., 29180.,
      30058., 30936., 32924., 33832., 34740., 35648., 19189., 19978., 20767.,
      21556., 23078., 23892., 24706., 25520., 27167., 28006., 28845., 29684.,
      31456., 32320., 33184., 34048., 20914., 21844., 22774., 23704., 25504.,
      26464., 27424., 28384., 30334., 31324., 32314., 33304., 35404., 36424.,
      37444., 38464., 26099., 27190., 28281., 29372., 31454., 32580., 33706.,
      34832., 37089., 38250., 39411., 40572., 43004., 44200., 45396., 46592.,
      25098., 26020., 26942., 27864., 29624., 30576., 31528., 32480., 34390.,
      35372., 36354., 37336., 39396., 40408., 41420., 42432., 17181., 17914.,
      18647., 19380., 20814., 21572., 22330., 23088., 24647., 25430., 26213.,
      26996., 28680., 29488., 30296., 31104., 17596., 18200., 18804., 19408.,
      20592., 21216., 21840., 22464., 23748., 24392., 25036., 25680., 27064.,
      27728., 28392., 29056., 17144., 17840., 18536., 19232., 20624., 21344.,
      22064., 22784., 24296., 25040., 25784., 26528., 28160., 28928., 29696.,
      30464., 18244., 19048., 19852., 20656., 22272., 23104., 23936., 24768.,
      26524., 27384., 28244., 29104., 31000., 31888., 32776., 33664., 15320.,
      15984., 16648., 17312., 18672., 19360., 20048., 20736., 22216., 22928.,
      23640., 24352., 25952., 26688., 27424., 28160., 15196., 15704., 16212.,
      16720., 17808., 18336., 18864., 19392., 20580., 21128., 21676., 22224.,
      23512., 24080., 24648., 25216.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6946.,  7060.,  7174.,  7288.,  7672.,  7792.,  7912.,  8032.,  8446.,
      8572.,  8698.,  8824.,  9268.,  9400.,  9532.,  9664.,  7930.,  8068.,
      8206.,  8344.,  8752.,  8896.,  9040.,  9184.,  9622.,  9772.,  9922.,
      10072., 10540., 10696., 10852., 11008., 8914.,  9076.,  9238.,  9400.,
      9832.,  10000., 10168., 10336., 10798., 10972., 11146., 11320., 11812.,
      11992., 12172., 12352., 9898.,  10084., 10270., 10456., 10912., 11104.,
      11296., 11488., 11974., 12172., 12370., 12568., 13084., 13288., 13492.,
      13696., 10882., 11092., 11302., 11512., 11992., 12208., 12424., 12640.,
      13150., 13372., 13594., 13816., 14356., 14584., 14812., 15040., 13834.,
      14116., 14398., 14680., 15232., 15520., 15808., 16096., 16678., 16972.,
      17266., 17560., 18172., 18472., 18772., 19072., 14818., 15124., 15430.,
      15736., 16312., 16624., 16936., 17248., 17854., 18172., 18490., 18808.,
      19444., 19768., 20092., 20416., 15802., 16132., 16462., 16792., 17392.,
      17728., 18064., 18400., 19030., 19372., 19714., 20056., 20716., 21064.,
      21412., 21760., 16786., 17140., 17494., 17848., 18472., 18832., 19192.,
      19552., 20206., 20572., 20938., 21304., 21988., 22360., 22732., 23104.,
      17770., 18148., 18526., 18904., 19552., 19936., 20320., 20704., 21382.,
      21772., 22162., 22552., 23260., 23656., 24052., 24448., 20722., 21172.,
      21622., 22072., 22792., 23248., 23704., 24160., 24910., 25372., 25834.,
      26296., 27076., 27544., 28012., 28480., 21706., 22180., 22654., 23128.,
      23872., 24352., 24832., 25312., 26086., 26572., 27058., 27544., 28348.,
      28840., 29332., 29824., 22690., 23188., 23686., 24184., 24952., 25456.,
      25960., 26464., 27262., 27772., 28282., 28792., 29620., 30136., 30652.,
      31168., 23674., 24196., 24718., 25240., 26032., 26560., 27088., 27616.,
      28438., 28972., 29506., 30040., 30892., 31432., 31972., 32512., 24658.,
      25204., 25750., 26296., 27112., 27664., 28216., 28768., 29614., 30172.,
      30730., 31288., 32164., 32728., 33292., 33856., 27610., 28228., 28846.,
      29464., 30352., 30976., 31600., 32224., 33142., 33772., 34402., 35032.,
      35980., 36616., 37252., 37888., 28594., 29236., 29878., 30520., 31432.,
      32080., 32728., 33376., 34318., 34972., 35626., 36280., 37252., 37912.,
      38572., 39232., 29578., 30244., 30910., 31576., 32512., 33184., 33856.,
      34528., 35494., 36172., 36850., 37528., 38524., 39208., 39892., 40576.,
      30562., 31252., 31942., 32632., 33592., 34288., 34984., 35680., 36670.,
      37372., 38074., 38776., 39796., 40504., 41212., 41920., 31546., 32260.,
      32974., 33688., 34672., 35392., 36112., 36832., 37846., 38572., 39298.,
      40024., 41068., 41800., 42532., 43264., 34498., 35284., 36070., 36856.,
      37912., 38704., 39496., 40288., 41374., 42172., 42970., 43768., 44884.,
      45688., 46492., 47296., 35482., 36292., 37102., 37912., 38992., 39808.,
      40624., 41440., 42550., 43372., 44194., 45016., 46156., 46984., 47812.,
      48640., 36466., 37300., 38134., 38968., 40072., 40912., 41752., 42592.,
      43726., 44572., 45418., 46264., 47428., 48280., 49132., 49984., 37450.,
      38308., 39166., 40024., 41152., 42016., 42880., 43744., 44902., 45772.,
      46642., 47512., 48700., 49576., 50452., 51328., 38434., 39316., 40198.,
      41080., 42232., 43120., 44008., 44896., 46078., 46972., 47866., 48760.,
      49972., 50872., 51772., 52672.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14452., 17136., 19888., 17584., 15220., 21185., 24920., 28700., 25200.,
      21665., 28398., 33208., 38024., 33208., 28398., 21665., 25200., 28700.,
      24920., 21185., 15220., 17584., 19888., 17136., 14452.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      308.,  344.,  380.,  416.,  452.,  596.,  632.,  668.,  704.,
      740.,  884.,  920.,  956.,  992.,  1028., 1172., 1208., 1244.,
      1280., 1316., 1460., 1496., 1532., 1568., 1604.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10484., 10856., 12320., 12768., 14160., 14688., 12292., 12768., 10436.,
      10856., 17593., 18178., 20468., 21168., 23300., 24120., 20097., 20832.,
      16957., 17602., 25614., 26460., 29568., 30576., 33400., 34576., 28630.,
      29680., 24006., 24924., 25801., 26626., 29708., 30688., 33476., 34616.,
      28665., 29680., 24013., 24898., 29684., 30440., 34272., 35168., 38736.,
      39776., 33348., 34272., 28100., 28904.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      564.,  616.,  628.,  688.,  692.,  760.,  756.,  832.,  820.,  904.,
      1076., 1192., 1140., 1264., 1204., 1336., 1268., 1408., 1332., 1480.,
      1588., 1768., 1652., 1840., 1716., 1912., 1780., 1984., 1844., 2056.,
      2100., 2344., 2164., 2416., 2228., 2488., 2292., 2560., 2356., 2632.,
      2612., 2920., 2676., 2992., 2740., 3064., 2804., 3136., 2868., 3208.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14836., 15208., 15580., 15952., 17024., 17472., 17920., 18368., 19088.,
      19616., 20144., 20672., 16044., 16520., 16996., 17472., 13156., 13576.,
      13996., 14416., 22697., 23282., 23867., 24452., 25900., 26600., 27300.,
      28000., 28884., 29704., 30524., 31344., 24227., 24962., 25697., 26432.,
      19829., 20474., 21119., 21764., 32334., 33180., 34026., 34872., 36624.,
      37632., 38640., 39648., 40536., 41712., 42888., 44064., 33810., 34860.,
      35910., 36960., 27510., 28428., 29346., 30264., 26585., 27410., 28235.,
      29060., 29764., 30744., 31724., 32704., 32532., 33672., 34812., 35952.,
      26747., 27762., 28777., 29792., 21413., 22298., 23183., 24068., 28276.,
      29032., 29788., 30544., 31808., 32704., 33600., 34496., 34960., 36000.,
      37040., 38080., 29036., 29960., 30884., 31808., 23524., 24328., 25132.,
      25936.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1076., 1128., 1180., 1232., 1196., 1256., 1316., 1376., 1316., 1384.,
      1452., 1520., 1436., 1512., 1588., 1664., 1556., 1640., 1724., 1808.,
      2036., 2152., 2268., 2384., 2156., 2280., 2404., 2528., 2276., 2408.,
      2540., 2672., 2396., 2536., 2676., 2816., 2516., 2664., 2812., 2960.,
      2996., 3176., 3356., 3536., 3116., 3304., 3492., 3680., 3236., 3432.,
      3628., 3824., 3356., 3560., 3764., 3968., 3476., 3688., 3900., 4112.,
      3956., 4200., 4444., 4688., 4076., 4328., 4580., 4832., 4196., 4456.,
      4716., 4976., 4316., 4584., 4852., 5120., 4436., 4712., 4988., 5264.,
      4916., 5224., 5532., 5840., 5036., 5352., 5668., 5984., 5156., 5480.,
      5804., 6128., 5276., 5608., 5940., 6272., 5396., 5736., 6076., 6416.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20152., 21712., 23716., 25536., 27296., 29376., 23716., 25536., 20152.,
      21712., 24230., 25988., 28637., 30688., 33096., 35440., 28861., 30912.,
      24614., 26372., 36372., 38328., 42742., 45024., 49136., 51744., 42742.,
      45024., 36372., 38328., 24614., 26372., 28861., 30912., 33096., 35440.,
      28637., 30688., 24230., 25988., 20152., 21712., 23716., 25536., 27296.,
      29376., 23716., 25536., 20152., 21712.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1064., 1232., 1192., 1376., 1320., 1520., 1448., 1664., 1576., 1808.,
      2088., 2384., 2216., 2528., 2344., 2672., 2472., 2816., 2600., 2960.,
      3112., 3536., 3240., 3680., 3368., 3824., 3496., 3968., 3624., 4112.,
      4136., 4688., 4264., 4832., 4392., 4976., 4520., 5120., 4648., 5264.,
      5160., 5840., 5288., 5984., 5416., 6128., 5544., 6272., 5672., 6416.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28832., 29552., 31160., 31904., 33124., 33992., 35840., 36736., 37184.,
      38208., 40288., 41344., 31276., 32200., 33992., 34944., 25664., 26480.,
      27992., 28832., 24664., 25420., 27382., 28168., 28581., 29498., 31752.,
      32704., 32336., 33424., 35960., 37088., 27167., 28154., 30338., 31360.,
      22240., 23116., 24958., 25864., 36528., 37416., 39636., 40560., 42294.,
      43372., 45920., 47040., 47840., 49120., 51984., 53312., 40418., 41580.,
      44044., 45248., 33312., 34344., 36420., 37488., 25336., 26188., 28054.,
      28936., 28917., 29946., 32088., 33152., 32208., 33424., 35832., 37088.,
      26607., 27706., 29778., 30912., 21376., 22348., 24094., 25096., 28832.,
      29552., 31160., 31904., 33124., 33992., 35840., 36736., 37184., 38208.,
      40288., 41344., 31276., 32200., 33992., 34944., 25664., 26480., 27992.,
      28832.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2032.,  2128.,  2360.,  2464.,  2272.,  2384.,  2632.,  2752.,  2512.,
      2640.,  2904.,  3040.,  2752.,  2896.,  3176.,  3328.,  2992.,  3152.,
      3448.,  3616.,  3952.,  4176.,  4536.,  4768.,  4192.,  4432.,  4808.,
      5056.,  4432.,  4688.,  5080.,  5344.,  4672.,  4944.,  5352.,  5632.,
      4912.,  5200.,  5624.,  5920.,  5872.,  6224.,  6712.,  7072.,  6112.,
      6480.,  6984.,  7360.,  6352.,  6736.,  7256.,  7648.,  6592.,  6992.,
      7528.,  7936.,  6832.,  7248.,  7800.,  8224.,  7792.,  8272.,  8888.,
      9376.,  8032.,  8528.,  9160.,  9664.,  8272.,  8784.,  9432.,  9952.,
      8512.,  9040.,  9704.,  10240., 8752.,  9296.,  9976.,  10528., 9712.,
      10320., 11064., 11680., 9952.,  10576., 11336., 11968., 10192., 10832.,
      11608., 12256., 10432., 11088., 11880., 12544., 10672., 11344., 12152.,
      12832.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27760., 28480., 29200., 29920., 31624., 32368., 33112., 33856., 30436.,
      31304., 32172., 33040., 34944., 35840., 36736., 37632., 32384., 33408.,
      34432., 35456., 37536., 38592., 39648., 40704., 24892., 25816., 26740.,
      27664., 29400., 30352., 31304., 32256., 18256., 19072., 19888., 20704.,
      22120., 22960., 23800., 24640., 29372., 30128., 30884., 31640., 33626.,
      34412., 35198., 35984., 32501., 33418., 34335., 35252., 37464., 38416.,
      39368., 40320., 34912., 36000., 37088., 38176., 40584., 41712., 42840.,
      43968., 26915., 27902., 28889., 29876., 31878., 32900., 33922., 34944.,
      19796., 20672., 21548., 22424., 24050., 24956., 25862., 26768., 34536.,
      35424., 36312., 37200., 39564., 40488., 41412., 42336., 38262., 39340.,
      40418., 41496., 44128., 45248., 46368., 47488., 41152., 42432., 43712.,
      44992., 47856., 49184., 50512., 51840., 31738., 32900., 34062., 35224.,
      37604., 38808., 40012., 41216., 23352., 24384., 25416., 26448., 28380.,
      29448., 30516., 31584., 32924., 33776., 34628., 35480., 37562., 38444.,
      39326., 40208., 36197., 37226., 38255., 39284., 41608., 42672., 43736.,
      44800., 38624., 39840., 41056., 42272., 44808., 46064., 47320., 48576.,
      29715., 30814., 31913., 33012., 35126., 36260., 37394., 38528., 21812.,
      22784., 23756., 24728., 26450., 27452., 28454., 29456., 27760., 28480.,
      29200., 29920., 31624., 32368., 33112., 33856., 30436., 31304., 32172.,
      33040., 34944., 35840., 36736., 37632., 32384., 33408., 34432., 35456.,
      37536., 38592., 39648., 40704., 24892., 25816., 26740., 27664., 29400.,
      30352., 31304., 32256., 18256., 19072., 19888., 20704., 22120., 22960.,
      23800., 24640.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3968.,  4064.,  4160.,  4256.,  4616.,  4720.,  4824.,  4928.,  4432.,
      4544.,  4656.,  4768.,  5144.,  5264.,  5384.,  5504.,  4896.,  5024.,
      5152.,  5280.,  5672.,  5808.,  5944.,  6080.,  5360.,  5504.,  5648.,
      5792.,  6200.,  6352.,  6504.,  6656.,  5824.,  5984.,  6144.,  6304.,
      6728.,  6896.,  7064.,  7232.,  7680.,  7904.,  8128.,  8352.,  8840.,
      9072.,  9304.,  9536.,  8144.,  8384.,  8624.,  8864.,  9368.,  9616.,
      9864.,  10112., 8608.,  8864.,  9120.,  9376.,  9896.,  10160., 10424.,
      10688., 9072.,  9344.,  9616.,  9888.,  10424., 10704., 10984., 11264.,
      9536.,  9824.,  10112., 10400., 10952., 11248., 11544., 11840., 11392.,
      11744., 12096., 12448., 13064., 13424., 13784., 14144., 11856., 12224.,
      12592., 12960., 13592., 13968., 14344., 14720., 12320., 12704., 13088.,
      13472., 14120., 14512., 14904., 15296., 12784., 13184., 13584., 13984.,
      14648., 15056., 15464., 15872., 13248., 13664., 14080., 14496., 15176.,
      15600., 16024., 16448., 15104., 15584., 16064., 16544., 17288., 17776.,
      18264., 18752., 15568., 16064., 16560., 17056., 17816., 18320., 18824.,
      19328., 16032., 16544., 17056., 17568., 18344., 18864., 19384., 19904.,
      16496., 17024., 17552., 18080., 18872., 19408., 19944., 20480., 16960.,
      17504., 18048., 18592., 19400., 19952., 20504., 21056., 18816., 19424.,
      20032., 20640., 21512., 22128., 22744., 23360., 19280., 19904., 20528.,
      21152., 22040., 22672., 23304., 23936., 19744., 20384., 21024., 21664.,
      22568., 23216., 23864., 24512., 20208., 20864., 21520., 22176., 23096.,
      23760., 24424., 25088., 20672., 21344., 22016., 22688., 23624., 24304.,
      24984., 25664.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6136.,  6880.,  7672.,  8512.,  7980.,  8848.,  9772.,  10752., 9888.,
      10880., 11936., 13056., 7980.,  8848.,  9772.,  10752., 6136.,  6880.,
      7672.,  8512.,  7670.,  8600.,  9590.,  10640., 9975.,  11060., 12215.,
      13440., 12360., 13600., 14920., 16320., 9975.,  11060., 12215., 13440.,
      7670.,  8600.,  9590.,  10640., 9204.,  10320., 11508., 12768., 11970.,
      13272., 14658., 16128., 14832., 16320., 17904., 19584., 11970., 13272.,
      14658., 16128., 9204.,  10320., 11508., 12768., 7670.,  8600.,  9590.,
      10640., 9975.,  11060., 12215., 13440., 12360., 13600., 14920., 16320.,
      9975.,  11060., 12215., 13440., 7670.,  8600.,  9590.,  10640., 6136.,
      6880.,  7672.,  8512.,  7980.,  8848.,  9772.,  10752., 9888.,  10880.,
      11936., 13056., 7980.,  8848.,  9772.,  10752., 6136.,  6880.,  7672.,
      8512.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3944.,  4256.,  4584.,  4928.,  4424.,  4768.,  5128.,  5504.,  4904.,
      5280.,  5672.,  6080.,  5384.,  5792.,  6216.,  6656.,  5864.,  6304.,
      6760.,  7232.,  7784.,  8352.,  8936.,  9536.,  8264.,  8864.,  9480.,
      10112., 8744.,  9376.,  10024., 10688., 9224.,  9888.,  10568., 11264.,
      9704.,  10400., 11112., 11840., 11624., 12448., 13288., 14144., 12104.,
      12960., 13832., 14720., 12584., 13472., 14376., 15296., 13064., 13984.,
      14920., 15872., 13544., 14496., 15464., 16448., 15464., 16544., 17640.,
      18752., 15944., 17056., 18184., 19328., 16424., 17568., 18728., 19904.,
      16904., 18080., 19272., 20480., 17384., 18592., 19816., 21056., 19304.,
      20640., 21992., 23360., 19784., 21152., 22536., 23936., 20264., 21664.,
      23080., 24512., 20744., 22176., 23624., 25088., 21224., 22688., 24168.,
      25664.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4328.,  4592.,  5280.,  5568.,  6328.,  6640.,  7472.,  7808.,  5868.,
      6232.,  7064.,  7456.,  8372.,  8792.,  9792.,  10240., 7520.,  8000.,
      8960.,  9472.,  10528., 11072., 12224., 12800., 5884.,  6360.,  7208.,
      7712.,  8644.,  9176.,  10192., 10752., 4904.,  5360.,  6112.,  6592.,
      7416.,  7920.,  8816.,  9344.,  5410.,  5740.,  6600.,  6960.,  7910.,
      8300.,  9340.,  9760.,  7335.,  7790.,  8830.,  9320.,  10465., 10990.,
      12240., 12800., 9400.,  10000., 11200., 11840., 13160., 13840., 15280.,
      16000., 7355.,  7950.,  9010.,  9640.,  10805., 11470., 12740., 13440.,
      6130.,  6700.,  7640.,  8240.,  9270.,  9900.,  11020., 11680., 6492.,
      6888.,  7920.,  8352.,  9492.,  9960.,  11208., 11712., 8802.,  9348.,
      10596., 11184., 12558., 13188., 14688., 15360., 11280., 12000., 13440.,
      14208., 15792., 16608., 18336., 19200., 8826.,  9540.,  10812., 11568.,
      12966., 13764., 15288., 16128., 7356.,  8040.,  9168.,  9888.,  11124.,
      11880., 13224., 14016., 5410.,  5740.,  6600.,  6960.,  7910.,  8300.,
      9340.,  9760.,  7335.,  7790.,  8830.,  9320.,  10465., 10990., 12240.,
      12800., 9400.,  10000., 11200., 11840., 13160., 13840., 15280., 16000.,
      7355.,  7950.,  9010.,  9640.,  10805., 11470., 12740., 13440., 6130.,
      6700.,  7640.,  8240.,  9270.,  9900.,  11020., 11680., 4328.,  4592.,
      5280.,  5568.,  6328.,  6640.,  7472.,  7808.,  5868.,  6232.,  7064.,
      7456.,  8372.,  8792.,  9792.,  10240., 7520.,  8000.,  8960.,  9472.,
      10528., 11072., 12224., 12800., 5884.,  6360.,  7208.,  7712.,  8644.,
      9176.,  10192., 10752., 4904.,  5360.,  6112.,  6592.,  7416.,  7920.,
      8816.,  9344.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7704.,  7888.,  8320.,  8512.,  8968.,  9168.,  9648.,  9856.,  8632.,
      8848.,  9312.,  9536.,  10024., 10256., 10768., 11008., 9560.,  9808.,
      10304., 10560., 11080., 11344., 11888., 12160., 10488., 10768., 11296.,
      11584., 12136., 12432., 13008., 13312., 11416., 11728., 12288., 12608.,
      13192., 13520., 14128., 14464., 15128., 15568., 16256., 16704., 17416.,
      17872., 18608., 19072., 16056., 16528., 17248., 17728., 18472., 18960.,
      19728., 20224., 16984., 17488., 18240., 18752., 19528., 20048., 20848.,
      21376., 17912., 18448., 19232., 19776., 20584., 21136., 21968., 22528.,
      18840., 19408., 20224., 20800., 21640., 22224., 23088., 23680., 22552.,
      23248., 24192., 24896., 25864., 26576., 27568., 28288., 23480., 24208.,
      25184., 25920., 26920., 27664., 28688., 29440., 24408., 25168., 26176.,
      26944., 27976., 28752., 29808., 30592., 25336., 26128., 27168., 27968.,
      29032., 29840., 30928., 31744., 26264., 27088., 28160., 28992., 30088.,
      30928., 32048., 32896., 29976., 30928., 32128., 33088., 34312., 35280.,
      36528., 37504., 30904., 31888., 33120., 34112., 35368., 36368., 37648.,
      38656., 31832., 32848., 34112., 35136., 36424., 37456., 38768., 39808.,
      32760., 33808., 35104., 36160., 37480., 38544., 39888., 40960., 33688.,
      34768., 36096., 37184., 38536., 39632., 41008., 42112., 37400., 38608.,
      40064., 41280., 42760., 43984., 45488., 46720., 38328., 39568., 41056.,
      42304., 43816., 45072., 46608., 47872., 39256., 40528., 42048., 43328.,
      44872., 46160., 47728., 49024., 40184., 41488., 43040., 44352., 45928.,
      47248., 48848., 50176., 41112., 42448., 44032., 45376., 46984., 48336.,
      49968., 51328.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2760.,  3024.,  3288.,  3552.,  4128.,  4416.,  4704.,  4992.,  5688.,
      6000.,  6312.,  6624.,  7440.,  7776.,  8112.,  8448.,  3692.,  4056.,
      4420.,  4784.,  5544.,  5936.,  6328.,  6720.,  7620.,  8040.,  8460.,
      8880.,  9920.,  10368., 10816., 11264., 4832.,  5312.,  5792.,  6272.,
      7168.,  7680.,  8192.,  8704.,  9760.,  10304., 10848., 11392., 12608.,
      13184., 13760., 14336., 3740.,  4216.,  4692.,  5168.,  5976.,  6480.,
      6984.,  7488.,  8436.,  8968.,  9500.,  10032., 11120., 11680., 12240.,
      12800., 4488.,  4944.,  5400.,  5856.,  6624.,  7104.,  7584.,  8064.,
      8952.,  9456.,  9960.,  10464., 11472., 12000., 12528., 13056., 3450.,
      3780.,  4110.,  4440.,  5160.,  5520.,  5880.,  6240.,  7110.,  7500.,
      7890.,  8280.,  9300.,  9720.,  10140., 10560., 4615.,  5070.,  5525.,
      5980.,  6930.,  7420.,  7910.,  8400.,  9525.,  10050., 10575., 11100.,
      12400., 12960., 13520., 14080., 6040.,  6640.,  7240.,  7840.,  8960.,
      9600.,  10240., 10880., 12200., 12880., 13560., 14240., 15760., 16480.,
      17200., 17920., 4675.,  5270.,  5865.,  6460.,  7470.,  8100.,  8730.,
      9360.,  10545., 11210., 11875., 12540., 13900., 14600., 15300., 16000.,
      5610.,  6180.,  6750.,  7320.,  8280.,  8880.,  9480.,  10080., 11190.,
      11820., 12450., 13080., 14340., 15000., 15660., 16320., 4140.,  4536.,
      4932.,  5328.,  6192.,  6624.,  7056.,  7488.,  8532.,  9000.,  9468.,
      9936.,  11160., 11664., 12168., 12672., 5538.,  6084.,  6630.,  7176.,
      8316.,  8904.,  9492.,  10080., 11430., 12060., 12690., 13320., 14880.,
      15552., 16224., 16896., 7248.,  7968.,  8688.,  9408.,  10752., 11520.,
      12288., 13056., 14640., 15456., 16272., 17088., 18912., 19776., 20640.,
      21504., 5610.,  6324.,  7038.,  7752.,  8964.,  9720.,  10476., 11232.,
      12654., 13452., 14250., 15048., 16680., 17520., 18360., 19200., 6732.,
      7416.,  8100.,  8784.,  9936.,  10656., 11376., 12096., 13428., 14184.,
      14940., 15696., 17208., 18000., 18792., 19584., 3450.,  3780.,  4110.,
      4440.,  5160.,  5520.,  5880.,  6240.,  7110.,  7500.,  7890.,  8280.,
      9300.,  9720.,  10140., 10560., 4615.,  5070.,  5525.,  5980.,  6930.,
      7420.,  7910.,  8400.,  9525.,  10050., 10575., 11100., 12400., 12960.,
      13520., 14080., 6040.,  6640.,  7240.,  7840.,  8960.,  9600.,  10240.,
      10880., 12200., 12880., 13560., 14240., 15760., 16480., 17200., 17920.,
      4675.,  5270.,  5865.,  6460.,  7470.,  8100.,  8730.,  9360.,  10545.,
      11210., 11875., 12540., 13900., 14600., 15300., 16000., 5610.,  6180.,
      6750.,  7320.,  8280.,  8880.,  9480.,  10080., 11190., 11820., 12450.,
      13080., 14340., 15000., 15660., 16320., 2760.,  3024.,  3288.,  3552.,
      4128.,  4416.,  4704.,  4992.,  5688.,  6000.,  6312.,  6624.,  7440.,
      7776.,  8112.,  8448.,  3692.,  4056.,  4420.,  4784.,  5544.,  5936.,
      6328.,  6720.,  7620.,  8040.,  8460.,  8880.,  9920.,  10368., 10816.,
      11264., 4832.,  5312.,  5792.,  6272.,  7168.,  7680.,  8192.,  8704.,
      9760.,  10304., 10848., 11392., 12608., 13184., 13760., 14336., 3740.,
      4216.,  4692.,  5168.,  5976.,  6480.,  6984.,  7488.,  8436.,  8968.,
      9500.,  10032., 11120., 11680., 12240., 12800., 4488.,  4944.,  5400.,
      5856.,  6624.,  7104.,  7584.,  8064.,  8952.,  9456.,  9960.,  10464.,
      11472., 12000., 12528., 13056.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5240.,  5424.,  5608.,  5792.,  6208.,  6400.,  6592.,  6784.,  7240.,
      7440.,  7640.,  7840.,  8336.,  8544.,  8752.,  8960.,  6040.,  6256.,
      6472.,  6688.,  7136.,  7360.,  7584.,  7808.,  8296.,  8528.,  8760.,
      8992.,  9520.,  9760.,  10000., 10240., 6840.,  7088.,  7336.,  7584.,
      8064.,  8320.,  8576.,  8832.,  9352.,  9616.,  9880.,  10144., 10704.,
      10976., 11248., 11520., 7640.,  7920.,  8200.,  8480.,  8992.,  9280.,
      9568.,  9856.,  10408., 10704., 11000., 11296., 11888., 12192., 12496.,
      12800., 8440.,  8752.,  9064.,  9376.,  9920.,  10240., 10560., 10880.,
      11464., 11792., 12120., 12448., 13072., 13408., 13744., 14080., 5240.,
      5424.,  5608.,  5792.,  6208.,  6400.,  6592.,  6784.,  7240.,  7440.,
      7640.,  7840.,  8336.,  8544.,  8752.,  8960.,  6040.,  6256.,  6472.,
      6688.,  7136.,  7360.,  7584.,  7808.,  8296.,  8528.,  8760.,  8992.,
      9520.,  9760.,  10000., 10240., 6840.,  7088.,  7336.,  7584.,  8064.,
      8320.,  8576.,  8832.,  9352.,  9616.,  9880.,  10144., 10704., 10976.,
      11248., 11520., 7640.,  7920.,  8200.,  8480.,  8992.,  9280.,  9568.,
      9856.,  10408., 10704., 11000., 11296., 11888., 12192., 12496., 12800.,
      8440.,  8752.,  9064.,  9376.,  9920.,  10240., 10560., 10880., 11464.,
      11792., 12120., 12448., 13072., 13408., 13744., 14080., 5240.,  5424.,
      5608.,  5792.,  6208.,  6400.,  6592.,  6784.,  7240.,  7440.,  7640.,
      7840.,  8336.,  8544.,  8752.,  8960.,  6040.,  6256.,  6472.,  6688.,
      7136.,  7360.,  7584.,  7808.,  8296.,  8528.,  8760.,  8992.,  9520.,
      9760.,  10000., 10240., 6840.,  7088.,  7336.,  7584.,  8064.,  8320.,
      8576.,  8832.,  9352.,  9616.,  9880.,  10144., 10704., 10976., 11248.,
      11520., 7640.,  7920.,  8200.,  8480.,  8992.,  9280.,  9568.,  9856.,
      10408., 10704., 11000., 11296., 11888., 12192., 12496., 12800., 8440.,
      8752.,  9064.,  9376.,  9920.,  10240., 10560., 10880., 11464., 11792.,
      12120., 12448., 13072., 13408., 13744., 14080., 5240.,  5424.,  5608.,
      5792.,  6208.,  6400.,  6592.,  6784.,  7240.,  7440.,  7640.,  7840.,
      8336.,  8544.,  8752.,  8960.,  6040.,  6256.,  6472.,  6688.,  7136.,
      7360.,  7584.,  7808.,  8296.,  8528.,  8760.,  8992.,  9520.,  9760.,
      10000., 10240., 6840.,  7088.,  7336.,  7584.,  8064.,  8320.,  8576.,
      8832.,  9352.,  9616.,  9880.,  10144., 10704., 10976., 11248., 11520.,
      7640.,  7920.,  8200.,  8480.,  8992.,  9280.,  9568.,  9856.,  10408.,
      10704., 11000., 11296., 11888., 12192., 12496., 12800., 8440.,  8752.,
      9064.,  9376.,  9920.,  10240., 10560., 10880., 11464., 11792., 12120.,
      12448., 13072., 13408., 13744., 14080., 5240.,  5424.,  5608.,  5792.,
      6208.,  6400.,  6592.,  6784.,  7240.,  7440.,  7640.,  7840.,  8336.,
      8544.,  8752.,  8960.,  6040.,  6256.,  6472.,  6688.,  7136.,  7360.,
      7584.,  7808.,  8296.,  8528.,  8760.,  8992.,  9520.,  9760.,  10000.,
      10240., 6840.,  7088.,  7336.,  7584.,  8064.,  8320.,  8576.,  8832.,
      9352.,  9616.,  9880.,  10144., 10704., 10976., 11248., 11520., 7640.,
      7920.,  8200.,  8480.,  8992.,  9280.,  9568.,  9856.,  10408., 10704.,
      11000., 11296., 11888., 12192., 12496., 12800., 8440.,  8752.,  9064.,
      9376.,  9920.,  10240., 10560., 10880., 11464., 11792., 12120., 12448.,
      13072., 13408., 13744., 14080.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9730.,  12350., 15035., 12650., 10210., 13260., 16710., 20202., 16890.,
      13548., 16982., 21280., 25585., 21280., 16982., 13548., 16890., 20202.,
      16710., 13260., 10210., 12650., 15035., 12350., 9730.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      207., 228., 249., 270., 291., 333., 354., 375., 396.,
      417., 459., 480., 501., 522., 543., 585., 606., 627.,
      648., 669., 711., 732., 753., 774., 795.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19170., 19460., 24325., 24700., 29605., 30070., 24900., 25300., 20090.,
      20420., 26100., 26520., 32880., 33420., 39738., 40404., 33210., 33780.,
      26628., 27096., 33390., 33964., 41825., 42560., 50267., 51170., 41790.,
      42560., 33334., 33964., 26532., 27096., 33060., 33780., 39522., 40404.,
      32670., 33420., 25908., 26520., 19890., 20420., 24625., 25300., 29245.,
      30070., 24000., 24700., 18890., 19460.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      369.,  414.,  405.,  456.,  441.,  498.,  477.,  540.,  513.,  582.,
      585.,  666.,  621.,  708.,  657.,  750.,  693.,  792.,  729.,  834.,
      801.,  918.,  837.,  960.,  873.,  1002., 909.,  1044., 945.,  1086.,
      1017., 1170., 1053., 1212., 1089., 1254., 1125., 1296., 1161., 1338.,
      1233., 1422., 1269., 1464., 1305., 1506., 1341., 1548., 1377., 1590.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13986., 14276., 14566., 14856., 19987., 20362., 20737., 21112., 26105.,
      26570., 27035., 27500., 22648., 23048., 23448., 23848., 19242., 19572.,
      19902., 20232., 21572., 21992., 22412., 22832., 30020., 30560., 31100.,
      31640., 38490., 39156., 39822., 40488., 32954., 33524., 34094., 34664.,
      27572., 28040., 28508., 28976., 29854., 30428., 31002., 31576., 40803.,
      41538., 42273., 43008., 51631., 52534., 53437., 54340., 43770., 44540.,
      45310., 46080., 36214., 36844., 37474., 38104., 32788., 33352., 33916.,
      34480., 45176., 45896., 46616., 47336., 57426., 58308., 59190., 60072.,
      48846., 49596., 50346., 51096., 40580., 41192., 41804., 42416., 39250.,
      39780., 40310., 40840., 48575., 49250., 49925., 50600., 57665., 58490.,
      59315., 60140., 47300., 48000., 48700., 49400., 37210., 37780., 38350.,
      38920.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      693.,  738.,  783.,  828.,  759.,  810.,  861.,  912.,  825.,  882.,
      939.,  996.,  891.,  954.,  1017., 1080., 957.,  1026., 1095., 1164.,
      1089., 1170., 1251., 1332., 1155., 1242., 1329., 1416., 1221., 1314.,
      1407., 1500., 1287., 1386., 1485., 1584., 1353., 1458., 1563., 1668.,
      1485., 1602., 1719., 1836., 1551., 1674., 1797., 1920., 1617., 1746.,
      1875., 2004., 1683., 1818., 1953., 2088., 1749., 1890., 2031., 2172.,
      1881., 2034., 2187., 2340., 1947., 2106., 2265., 2424., 2013., 2178.,
      2343., 2508., 2079., 2250., 2421., 2592., 2145., 2322., 2499., 2676.,
      2277., 2466., 2655., 2844., 2343., 2538., 2733., 2928., 2409., 2610.,
      2811., 3012., 2475., 2682., 2889., 3096., 2541., 2754., 2967., 3180.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13668., 14856., 19563., 21112., 25590., 27500., 22235., 23848., 18916.,
      20232., 19000., 20400., 26402., 28184., 33972., 36136., 29042., 30824.,
      24248., 25648., 24844., 26328., 34849., 36736., 45010., 47300., 34849.,
      36736., 24844., 26328., 24248., 25648., 29042., 30824., 33972., 36136.,
      26402., 28184., 19000., 20400., 18916., 20232., 22235., 23848., 25590.,
      27500., 19563., 21112., 13668., 14856.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      702.,  828.,  774.,  912.,  846.,  996.,  918.,  1080., 990.,  1164.,
      1134., 1332., 1206., 1416., 1278., 1500., 1350., 1584., 1422., 1668.,
      1566., 1836., 1638., 1920., 1710., 2004., 1782., 2088., 1854., 2172.,
      1998., 2340., 2070., 2424., 2142., 2508., 2214., 2592., 2286., 2676.,
      2430., 2844., 2502., 2928., 2574., 3012., 2646., 3096., 2718., 3180.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14744., 15304., 16460., 17040., 20289., 21014., 22530., 23280., 25704.,
      26604., 28470., 29400., 21871., 22646., 24240., 25040., 18504., 19144.,
      20476., 21136., 17600., 18288., 19736., 20448., 23850., 24708., 26552.,
      27440., 30040., 31080., 33308., 34384., 25422., 26276., 28124., 29008.,
      21472., 22128., 23608., 24288., 21560., 22296., 23860., 24624., 30695.,
      31618., 33602., 34560., 39744., 40868., 43258., 44424., 31073., 32002.,
      33980., 34944., 23112., 23832., 25412., 26160., 20896., 21616., 23032.,
      23776., 25506., 26404., 28208., 29136., 29992., 31080., 33260., 34384.,
      24710., 25604., 27412., 28336., 20160., 20848., 22296., 23008., 19000.,
      19656., 20972., 21648., 23817., 24630., 26250., 27088., 28440., 29420.,
      31334., 32344., 24695., 25494., 27064., 27888., 21608., 22216., 23452.,
      24080.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1320., 1404., 1566., 1656., 1452., 1548., 1722., 1824., 1584., 1692.,
      1878., 1992., 1716., 1836., 2034., 2160., 1848., 1980., 2190., 2328.,
      2112., 2268., 2502., 2664., 2244., 2412., 2658., 2832., 2376., 2556.,
      2814., 3000., 2508., 2700., 2970., 3168., 2640., 2844., 3126., 3336.,
      2904., 3132., 3438., 3672., 3036., 3276., 3594., 3840., 3168., 3420.,
      3750., 4008., 3300., 3564., 3906., 4176., 3432., 3708., 4062., 4344.,
      3696., 3996., 4374., 4680., 3828., 4140., 4530., 4848., 3960., 4284.,
      4686., 5016., 4092., 4428., 4842., 5184., 4224., 4572., 4998., 5352.,
      4488., 4860., 5310., 5688., 4620., 5004., 5466., 5856., 4752., 5148.,
      5622., 6024., 4884., 5292., 5778., 6192., 5016., 5436., 5934., 6360.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14592., 15152., 15712., 16272., 17492., 18072., 18652., 19232., 20461.,
      21186., 21911., 22636., 24214., 24964., 25714., 26464., 25676., 26576.,
      27476., 28376., 30282., 31212., 32142., 33072., 22615., 23390., 24165.,
      24940., 26560., 27360., 28160., 28960., 20752., 21392., 22032., 22672.,
      24036., 24696., 25356., 26016., 21200., 21888., 22576., 23264., 24680.,
      25392., 26104., 26816., 25658., 26516., 27374., 28232., 30072., 30960.,
      31848., 32736., 29600., 30640., 31680., 32720., 34948., 36024., 37100.,
      38176., 22790., 23644., 24498., 25352., 27204., 28088., 28972., 29856.,
      17712., 18368., 19024., 19680., 21192., 21872., 22552., 23232., 19856.,
      20592., 21328., 22064., 23660., 24424., 25188., 25952., 27763., 28686.,
      29609., 30532., 32582., 33540., 34498., 35456., 35100., 36224., 37348.,
      38472., 40934., 42100., 43266., 44432., 26593., 27522., 28451., 29380.,
      31412., 32376., 33340., 34304., 19904., 20624., 21344., 22064., 23708.,
      24456., 25204., 25952., 20848., 21568., 22288., 23008., 24456., 25200.,
      25944., 26688., 25858., 26756., 27654., 28552., 30400., 31328., 32256.,
      33184., 30224., 31312., 32400., 33488., 35700., 36824., 37948., 39072.,
      24846., 25740., 26634., 27528., 29324., 30248., 31172., 32096., 21200.,
      21888., 22576., 23264., 24680., 25392., 26104., 26816., 17632., 18288.,
      18944., 19600., 20916., 21592., 22268., 22944., 22117., 22930., 23743.,
      24556., 26190., 27028., 27866., 28704., 25948., 26928., 27908., 28888.,
      30810., 31820., 32830., 33840., 21327., 22126., 22925., 23724., 25272.,
      26096., 26920., 27744., 18288., 18896., 19504., 20112., 21316., 21944.,
      22572., 23200.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2556.,  2640.,  2724.,  2808.,  3042.,  3132.,  3222.,  3312.,  2808.,
      2904.,  3000.,  3096.,  3342.,  3444.,  3546.,  3648.,  3060.,  3168.,
      3276.,  3384.,  3642.,  3756.,  3870.,  3984.,  3312.,  3432.,  3552.,
      3672.,  3942.,  4068.,  4194.,  4320.,  3564.,  3696.,  3828.,  3960.,
      4242.,  4380.,  4518.,  4656.,  4068.,  4224.,  4380.,  4536.,  4842.,
      5004.,  5166.,  5328.,  4320.,  4488.,  4656.,  4824.,  5142.,  5316.,
      5490.,  5664.,  4572.,  4752.,  4932.,  5112.,  5442.,  5628.,  5814.,
      6000.,  4824.,  5016.,  5208.,  5400.,  5742.,  5940.,  6138.,  6336.,
      5076.,  5280.,  5484.,  5688.,  6042.,  6252.,  6462.,  6672.,  5580.,
      5808.,  6036.,  6264.,  6642.,  6876.,  7110.,  7344.,  5832.,  6072.,
      6312.,  6552.,  6942.,  7188.,  7434.,  7680.,  6084.,  6336.,  6588.,
      6840.,  7242.,  7500.,  7758.,  8016.,  6336.,  6600.,  6864.,  7128.,
      7542.,  7812.,  8082.,  8352.,  6588.,  6864.,  7140.,  7416.,  7842.,
      8124.,  8406.,  8688.,  7092.,  7392.,  7692.,  7992.,  8442.,  8748.,
      9054.,  9360.,  7344.,  7656.,  7968.,  8280.,  8742.,  9060.,  9378.,
      9696.,  7596.,  7920.,  8244.,  8568.,  9042.,  9372.,  9702.,  10032.,
      7848.,  8184.,  8520.,  8856.,  9342.,  9684.,  10026., 10368., 8100.,
      8448.,  8796.,  9144.,  9642.,  9996.,  10350., 10704., 8604.,  8976.,
      9348.,  9720.,  10242., 10620., 10998., 11376., 8856.,  9240.,  9624.,
      10008., 10542., 10932., 11322., 11712., 9108.,  9504.,  9900.,  10296.,
      10842., 11244., 11646., 12048., 9360.,  9768.,  10176., 10584., 11142.,
      11556., 11970., 12384., 9612.,  10032., 10452., 10872., 11442., 11868.,
      12294., 12720.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19204., 20368., 21572., 22816., 21469., 22956., 24493., 26080., 24262.,
      26072., 27942., 29872., 20445., 21996., 23597., 25248., 17028., 18320.,
      19652., 21024., 17208., 18656., 20152., 21696., 21878., 23688., 25558.,
      27488., 27220., 29392., 31636., 33952., 24246., 26056., 27926., 29856.,
      21816., 23264., 24760., 26304., 24044., 25648., 27308., 29024., 34991.,
      36996., 39071., 41216., 46562., 48968., 51458., 54032., 34991., 36996.,
      39071., 41216., 24044., 25648., 27308., 29024., 21816., 23264., 24760.,
      26304., 24246., 26056., 27926., 29856., 27220., 29392., 31636., 33952.,
      21878., 23688., 25558., 27488., 17208., 18656., 20152., 21696., 17028.,
      18320., 19652., 21024., 20445., 21996., 23597., 25248., 24262., 26072.,
      27942., 29872., 21469., 22956., 24493., 26080., 19204., 20368., 21572.,
      22816.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2574.,  2808.,  3054.,  3312.,  2838.,  3096.,  3366.,  3648.,  3102.,
      3384.,  3678.,  3984.,  3366.,  3672.,  3990.,  4320.,  3630.,  3960.,
      4302.,  4656.,  4158.,  4536.,  4926.,  5328.,  4422.,  4824.,  5238.,
      5664.,  4686.,  5112.,  5550.,  6000.,  4950.,  5400.,  5862.,  6336.,
      5214.,  5688.,  6174.,  6672.,  5742.,  6264.,  6798.,  7344.,  6006.,
      6552.,  7110.,  7680.,  6270.,  6840.,  7422.,  8016.,  6534.,  7128.,
      7734.,  8352.,  6798.,  7416.,  8046.,  8688.,  7326.,  7992.,  8670.,
      9360.,  7590.,  8280.,  8982.,  9696.,  7854.,  8568.,  9294.,  10032.,
      8118.,  8856.,  9606.,  10368., 8382.,  9144.,  9918.,  10704., 8910.,
      9720.,  10542., 11376., 9174.,  10008., 10854., 11712., 9438.,  10296.,
      11166., 12048., 9702.,  10584., 11478., 12384., 9966.,  10872., 11790.,
      12720.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17852., 18440., 19648., 20256., 21524., 22152., 23480., 24128., 20521.,
      21242., 22766., 23512., 25111., 25882., 27556., 28352., 23458., 24332.,
      26152., 27056., 28966., 29900., 31900., 32864., 20677., 21434., 22986.,
      23768., 25395., 26202., 27904., 28736., 19228., 19848., 21152., 21792.,
      23156., 23816., 25240., 25920., 24232., 24944., 26336., 27072., 28536.,
      29296., 30832., 31616., 26070., 26924., 28700., 29584., 31450., 32364.,
      34320., 35264., 28460., 29480., 31616., 32672., 34916., 36008., 38360.,
      39488., 22878., 23724., 25508., 26384., 28258., 29164., 31128., 32064.,
      19176., 19824., 21280., 21952., 23480., 24176., 25776., 26496., 19380.,
      20184., 21792., 22624., 24316., 25176., 26952., 27840., 29131., 30110.,
      32146., 33160., 35301., 36350., 38596., 39680., 39334., 40516., 42952.,
      44176., 46738., 48004., 50692., 52000., 29375., 30366., 32390., 33416.,
      35545., 36606., 38840., 39936., 21460., 22232., 23872., 24672., 26396.,
      27224., 29032., 29888., 19432., 20208., 21664., 22464., 23992., 24816.,
      26416., 27264., 24454., 25388., 27212., 28176., 30090., 31084., 33088.,
      34112., 29772., 30888., 33056., 34208., 36484., 37672., 40056., 41280.,
      25038., 25964., 27732., 28688., 30546., 31532., 33480., 34496., 22184.,
      22896., 24288., 25024., 26488., 27248., 28784., 29568., 19196., 19848.,
      21120., 21792., 23124., 23816., 25208., 25920., 20153., 20922., 22462.,
      23256., 24871., 25690., 27380., 28224., 21378., 22284., 24072., 25008.,
      26886., 27852., 29820., 30816., 17109., 17850., 19290., 20056., 21571.,
      22362., 23952., 24768., 14428., 14984., 16096., 16672., 17844., 18440.,
      19672., 20288.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4986.,  5148.,  5448.,  5616.,  5934.,  6108.,  6444.,  6624.,  5490.,
      5676.,  6000.,  6192.,  6534.,  6732.,  7092.,  7296.,  5994.,  6204.,
      6552.,  6768.,  7134.,  7356.,  7740.,  7968.,  6498.,  6732.,  7104.,
      7344.,  7734.,  7980.,  8388.,  8640.,  7002.,  7260.,  7656.,  7920.,
      8334.,  8604.,  9036.,  9312.,  8010.,  8316.,  8760.,  9072.,  9534.,
      9852.,  10332., 10656., 8514.,  8844.,  9312.,  9648.,  10134., 10476.,
      10980., 11328., 9018.,  9372.,  9864.,  10224., 10734., 11100., 11628.,
      12000., 9522.,  9900.,  10416., 10800., 11334., 11724., 12276., 12672.,
      10026., 10428., 10968., 11376., 11934., 12348., 12924., 13344., 11034.,
      11484., 12072., 12528., 13134., 13596., 14220., 14688., 11538., 12012.,
      12624., 13104., 13734., 14220., 14868., 15360., 12042., 12540., 13176.,
      13680., 14334., 14844., 15516., 16032., 12546., 13068., 13728., 14256.,
      14934., 15468., 16164., 16704., 13050., 13596., 14280., 14832., 15534.,
      16092., 16812., 17376., 14058., 14652., 15384., 15984., 16734., 17340.,
      18108., 18720., 14562., 15180., 15936., 16560., 17334., 17964., 18756.,
      19392., 15066., 15708., 16488., 17136., 17934., 18588., 19404., 20064.,
      15570., 16236., 17040., 17712., 18534., 19212., 20052., 20736., 16074.,
      16764., 17592., 18288., 19134., 19836., 20700., 21408., 17082., 17820.,
      18696., 19440., 20334., 21084., 21996., 22752., 17586., 18348., 19248.,
      20016., 20934., 21708., 22644., 23424., 18090., 18876., 19800., 20592.,
      21534., 22332., 23292., 24096., 18594., 19404., 20352., 21168., 22134.,
      22956., 23940., 24768., 19098., 19932., 20904., 21744., 22734., 23580.,
      24588., 25440.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14764., 15352., 15940., 16528., 17696., 18304., 18912., 19520., 20788.,
      21416., 22044., 22672., 24040., 24688., 25336., 25984., 18753., 19474.,
      20195., 20916., 22386., 23132., 23878., 24624., 26219., 26990., 27761.,
      28532., 30252., 31048., 31844., 32640., 22490., 23364., 24238., 25112.,
      26824., 27728., 28632., 29536., 31398., 32332., 33266., 34200., 36212.,
      37176., 38140., 39104., 16661., 17418., 18175., 18932., 20358., 21140.,
      21922., 22704., 24255., 25062., 25869., 26676., 28352., 29184., 30016.,
      30848., 14028., 14648., 15268., 15888., 17088., 17728., 18368., 19008.,
      20308., 20968., 21628., 22288., 23688., 24368., 25048., 25728., 20232.,
      20944., 21656., 22368., 23776., 24512., 25248., 25984., 27512., 28272.,
      29032., 29792., 31440., 32224., 33008., 33792., 21974., 22828., 23682.,
      24536., 26308., 27192., 28076., 28960., 30882., 31796., 32710., 33624.,
      35696., 36640., 37584., 38528., 23772., 24792., 25812., 26832., 28896.,
      29952., 31008., 32064., 34308., 35400., 36492., 37584., 40008., 41136.,
      42264., 43392., 19054., 19900., 20746., 21592., 23260., 24136., 25012.,
      25888., 27706., 28612., 29518., 30424., 32392., 33328., 34264., 35200.,
      18632., 19280., 19928., 20576., 21920., 22592., 23264., 23936., 25400.,
      26096., 26792., 27488., 29072., 29792., 30512., 31232., 18244., 19048.,
      19852., 20656., 22272., 23104., 23936., 24768., 26524., 27384., 28244.,
      29104., 31000., 31888., 32776., 33664., 25027., 26006., 26985., 27964.,
      29998., 31012., 32026., 33040., 35249., 36298., 37347., 38396., 40780.,
      41864., 42948., 44032., 31662., 32844., 34026., 35208., 37576., 38800.,
      40024., 41248., 43826., 45092., 46358., 47624., 50412., 51720., 53028.,
      54336., 22367., 23358., 24349., 25340., 27274., 28300., 29326., 30352.,
      32461., 33522., 34583., 35644., 37928., 39024., 40120., 41216., 17956.,
      18728., 19500., 20272., 21856., 22656., 23456., 24256., 25980., 26808.,
      27636., 28464., 30328., 31184., 32040., 32896., 21832., 22608., 23384.,
      24160., 25632., 26432., 27232., 28032., 29624., 30448., 31272., 32096.,
      33808., 34656., 35504., 36352., 24358., 25292., 26226., 27160., 29012.,
      29976., 30940., 31904., 33906., 34900., 35894., 36888., 39040., 40064.,
      41088., 42112., 26684., 27800., 28916., 30032., 32192., 33344., 34496.,
      35648., 37988., 39176., 40364., 41552., 44072., 45296., 46520., 47744.,
      21182., 22108., 23034., 23960., 25708., 26664., 27620., 28576., 30474.,
      31460., 32446., 33432., 35480., 36496., 37512., 38528., 20232., 20944.,
      21656., 22368., 23776., 24512., 25248., 25984., 27512., 28272., 29032.,
      29792., 31440., 32224., 33008., 33792., 14316., 14968., 15620., 16272.,
      17504., 18176., 18848., 19520., 20852., 21544., 22236., 22928., 24360.,
      25072., 25784., 26496., 19057., 19826., 20595., 21364., 22882., 23676.,
      24470., 25264., 26907., 27726., 28545., 29364., 31132., 31976., 32820.,
      33664., 23802., 24708., 25614., 26520., 28264., 29200., 30136., 31072.,
      32966., 33932., 34898., 35864., 37908., 38904., 39900., 40896., 16133.,
      16874., 17615., 18356., 19766., 20532., 21298., 22064., 23599., 24390.,
      25181., 25972., 27632., 28448., 29264., 30080., 12428., 12984., 13540.,
      14096., 15232., 15808., 16384., 16960., 18196., 18792., 19388., 19984.,
      21320., 21936., 22552., 23168.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9810.,  9972.,  10134., 10296., 10728., 10896., 11064., 11232., 11694.,
      11868., 12042., 12216., 12708., 12888., 13068., 13248., 10794., 10980.,
      11166., 11352., 11808., 12000., 12192., 12384., 12870., 13068., 13266.,
      13464., 13980., 14184., 14388., 14592., 11778., 11988., 12198., 12408.,
      12888., 13104., 13320., 13536., 14046., 14268., 14490., 14712., 15252.,
      15480., 15708., 15936., 12762., 12996., 13230., 13464., 13968., 14208.,
      14448., 14688., 15222., 15468., 15714., 15960., 16524., 16776., 17028.,
      17280., 13746., 14004., 14262., 14520., 15048., 15312., 15576., 15840.,
      16398., 16668., 16938., 17208., 17796., 18072., 18348., 18624., 15714.,
      16020., 16326., 16632., 17208., 17520., 17832., 18144., 18750., 19068.,
      19386., 19704., 20340., 20664., 20988., 21312., 16698., 17028., 17358.,
      17688., 18288., 18624., 18960., 19296., 19926., 20268., 20610., 20952.,
      21612., 21960., 22308., 22656., 17682., 18036., 18390., 18744., 19368.,
      19728., 20088., 20448., 21102., 21468., 21834., 22200., 22884., 23256.,
      23628., 24000., 18666., 19044., 19422., 19800., 20448., 20832., 21216.,
      21600., 22278., 22668., 23058., 23448., 24156., 24552., 24948., 25344.,
      19650., 20052., 20454., 20856., 21528., 21936., 22344., 22752., 23454.,
      23868., 24282., 24696., 25428., 25848., 26268., 26688., 21618., 22068.,
      22518., 22968., 23688., 24144., 24600., 25056., 25806., 26268., 26730.,
      27192., 27972., 28440., 28908., 29376., 22602., 23076., 23550., 24024.,
      24768., 25248., 25728., 26208., 26982., 27468., 27954., 28440., 29244.,
      29736., 30228., 30720., 23586., 24084., 24582., 25080., 25848., 26352.,
      26856., 27360., 28158., 28668., 29178., 29688., 30516., 31032., 31548.,
      32064., 24570., 25092., 25614., 26136., 26928., 27456., 27984., 28512.,
      29334., 29868., 30402., 30936., 31788., 32328., 32868., 33408., 25554.,
      26100., 26646., 27192., 28008., 28560., 29112., 29664., 30510., 31068.,
      31626., 32184., 33060., 33624., 34188., 34752., 27522., 28116., 28710.,
      29304., 30168., 30768., 31368., 31968., 32862., 33468., 34074., 34680.,
      35604., 36216., 36828., 37440., 28506., 29124., 29742., 30360., 31248.,
      31872., 32496., 33120., 34038., 34668., 35298., 35928., 36876., 37512.,
      38148., 38784., 29490., 30132., 30774., 31416., 32328., 32976., 33624.,
      34272., 35214., 35868., 36522., 37176., 38148., 38808., 39468., 40128.,
      30474., 31140., 31806., 32472., 33408., 34080., 34752., 35424., 36390.,
      37068., 37746., 38424., 39420., 40104., 40788., 41472., 31458., 32148.,
      32838., 33528., 34488., 35184., 35880., 36576., 37566., 38268., 38970.,
      39672., 40692., 41400., 42108., 42816., 33426., 34164., 34902., 35640.,
      36648., 37392., 38136., 38880., 39918., 40668., 41418., 42168., 43236.,
      43992., 44748., 45504., 34410., 35172., 35934., 36696., 37728., 38496.,
      39264., 40032., 41094., 41868., 42642., 43416., 44508., 45288., 46068.,
      46848., 35394., 36180., 36966., 37752., 38808., 39600., 40392., 41184.,
      42270., 43068., 43866., 44664., 45780., 46584., 47388., 48192., 36378.,
      37188., 37998., 38808., 39888., 40704., 41520., 42336., 43446., 44268.,
      45090., 45912., 47052., 47880., 48708., 49536., 37362., 38196., 39030.,
      39864., 40968., 41808., 42648., 43488., 44622., 45468., 46314., 47160.,
      48324., 49176., 50028., 50880.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16525., 20090., 23730., 20510., 17225., 22490., 27174., 31906., 27426.,
      22910., 28770., 34594., 40425., 34594., 28770., 22910., 27426., 31906.,
      27174., 22490., 17225., 20510., 23730., 20090., 16525.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      537.,  582.,  627.,  672.,  717.,  852.,  897.,  942.,  987.,
      1032., 1167., 1212., 1257., 1302., 1347., 1482., 1527., 1572.,
      1617., 1662., 1797., 1842., 1887., 1932., 1977.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11569., 11994., 14503., 15028., 17454., 18084., 15569., 16124., 13751.,
      14226., 17485., 18100., 21720., 22476., 25917., 26820., 22892., 23684.,
      19993., 20668., 23996., 24836., 29567., 30596., 35017., 36242., 30677.,
      31748., 26550., 27460., 23107., 23932., 28692., 29700., 34135., 35332.,
      30136., 31180., 26367., 27252., 24843., 25618., 31051., 31996., 37124.,
      38244., 32997., 33972., 29089., 29914.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      993.,  1074., 1074., 1164., 1155., 1254., 1236., 1344., 1317., 1434.,
      1560., 1704., 1641., 1794., 1722., 1884., 1803., 1974., 1884., 2064.,
      2127., 2334., 2208., 2424., 2289., 2514., 2370., 2604., 2451., 2694.,
      2694., 2964., 2775., 3054., 2856., 3144., 2937., 3234., 3018., 3324.,
      3261., 3594., 3342., 3684., 3423., 3774., 3504., 3864., 3585., 3954.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14457., 14882., 15307., 15732., 17921., 18446., 18971., 19496., 21286.,
      21916., 22546., 23176., 20279., 20834., 21389., 21944., 17299., 17774.,
      18249., 18724., 20275., 20890., 21505., 22120., 25404., 26160., 26916.,
      27672., 30323., 31226., 32129., 33032., 28416., 29208., 30000., 30792.,
      24207., 24882., 25557., 26232., 27248., 28088., 28928., 29768., 34105.,
      35134., 36163., 37192., 40585., 41810., 43035., 44260., 37435., 38506.,
      39577., 40648., 31710., 32620., 33530., 34440., 23117., 23942., 24767.,
      25592., 29176., 30184., 31192., 32200., 34817., 36014., 37211., 38408.,
      30108., 31152., 32196., 33240., 25993., 26878., 27763., 28648., 21263.,
      22038., 22813., 23588., 27685., 28630., 29575., 30520., 33704., 34824.,
      35944., 37064., 29627., 30602., 31577., 32552., 26121., 26946., 27771.,
      28596.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1905., 1986., 2067., 2148., 2058., 2148., 2238., 2328., 2211., 2310.,
      2409., 2508., 2364., 2472., 2580., 2688., 2517., 2634., 2751., 2868.,
      2976., 3120., 3264., 3408., 3129., 3282., 3435., 3588., 3282., 3444.,
      3606., 3768., 3435., 3606., 3777., 3948., 3588., 3768., 3948., 4128.,
      4047., 4254., 4461., 4668., 4200., 4416., 4632., 4848., 4353., 4578.,
      4803., 5028., 4506., 4740., 4974., 5208., 4659., 4902., 5145., 5388.,
      5118., 5388., 5658., 5928., 5271., 5550., 5829., 6108., 5424., 5712.,
      6000., 6288., 5577., 5874., 6171., 6468., 5730., 6036., 6342., 6648.,
      6189., 6522., 6855., 7188., 6342., 6684., 7026., 7368., 6495., 6846.,
      7197., 7548., 6648., 7008., 7368., 7728., 6801., 7170., 7539., 7908.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20233., 21812., 23950., 25832., 27839., 30024., 24606., 26488., 21497.,
      23076., 23566., 25320., 29292., 31384., 35210., 37640., 31836., 33928.,
      28574., 30328., 32639., 34568., 41354., 43656., 50225., 52900., 41354.,
      43656., 32639., 34568., 28574., 30328., 31836., 33928., 35210., 37640.,
      29292., 31384., 23566., 25320., 21497., 23076., 24606., 26488., 27839.,
      30024., 23950., 25832., 20233., 21812.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1905., 2148., 2067., 2328., 2229., 2508., 2391., 2688., 2553., 2868.,
      3039., 3408., 3201., 3588., 3363., 3768., 3525., 3948., 3687., 4128.,
      4173., 4668., 4335., 4848., 4497., 5028., 4659., 5208., 4821., 5388.,
      5307., 5928., 5469., 6108., 5631., 6288., 5793., 6468., 5955., 6648.,
      6441., 7188., 6603., 7368., 6765., 7548., 6927., 7728., 7089., 7908.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28121., 28882., 30422., 31208., 30944., 31836., 33718., 34640., 33845.,
      34878., 37092., 38160., 28612., 29500., 31450., 32368., 23573., 24306.,
      25938., 26696., 23084., 23900., 25730., 26576., 28116., 29080., 31304.,
      32304., 33264., 34388., 36994., 38160., 30444., 31416., 33696., 34704.,
      26900., 27708., 29610., 30448., 29457., 30398., 32448., 33424., 38644.,
      39764., 42246., 43408., 47873., 49186., 52086., 53448., 40864., 42004.,
      44530., 45712., 32325., 33278., 35380., 36368., 24744., 25660., 27454.,
      28400., 29564., 30648., 32816., 33936., 34340., 35604., 38134., 39440.,
      28820., 29912., 32072., 33200., 23952., 24860., 26662., 27600., 20413.,
      21234., 22778., 23624., 27256., 28220., 30094., 31088., 34081., 35198.,
      37392., 38544., 30300., 31260., 33138., 34128., 27129., 27922., 29494.,
      30312.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3657.,  3810.,  4134.,  4296.,  3963.,  4134.,  4476.,  4656.,  4269.,
      4458.,  4818.,  5016.,  4575.,  4782.,  5160.,  5376.,  4881.,  5106.,
      5502.,  5736.,  5799.,  6078.,  6528.,  6816.,  6105.,  6402.,  6870.,
      7176.,  6411.,  6726.,  7212.,  7536.,  6717.,  7050.,  7554.,  7896.,
      7023.,  7374.,  7896.,  8256.,  7941.,  8346.,  8922.,  9336.,  8247.,
      8670.,  9264.,  9696.,  8553.,  8994.,  9606.,  10056., 8859.,  9318.,
      9948.,  10416., 9165.,  9642.,  10290., 10776., 10083., 10614., 11316.,
      11856., 10389., 10938., 11658., 12216., 10695., 11262., 12000., 12576.,
      11001., 11586., 12342., 12936., 11307., 11910., 12684., 13296., 12225.,
      12882., 13710., 14376., 12531., 13206., 14052., 14736., 12837., 13530.,
      14394., 15096., 13143., 13854., 14736., 15456., 13449., 14178., 15078.,
      15816.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24761., 25522., 26283., 27044., 28570., 29356., 30142., 30928., 27268.,
      28160., 29052., 29944., 31826., 32748., 33670., 34592., 29537., 30570.,
      31603., 32636., 34844., 35912., 36980., 38048., 26512., 27400., 28288.,
      29176., 31134., 32052., 32970., 33888., 24589., 25322., 26055., 26788.,
      28462., 29220., 29978., 30736., 22760., 23576., 24392., 25208., 26934.,
      27780., 28626., 29472., 30372., 31336., 32300., 33264., 35368., 36368.,
      37368., 38368., 33660., 34784., 35908., 37032., 39542., 40708., 41874.,
      43040., 29260., 30232., 31204., 32176., 34384., 35392., 36400., 37408.,
      25152., 25960., 26768., 27576., 29454., 30292., 31130., 31968., 24245.,
      25186., 26127., 27068., 29104., 30080., 31056., 32032., 32456., 33576.,
      34696., 35816., 38274., 39436., 40598., 41760., 41185., 42498., 43811.,
      45124., 48026., 49388., 50750., 52112., 35212., 36352., 37492., 38632.,
      41158., 42340., 43522., 44704., 28817., 29770., 30723., 31676., 33804.,
      34792., 35780., 36768., 21628., 22544., 23460., 24376., 26186., 27132.,
      28078., 29024., 28476., 29560., 30644., 31728., 33920., 35040., 36160.,
      37280., 36696., 37960., 39224., 40488., 43090., 44396., 45702., 47008.,
      33060., 34152., 35244., 36336., 38568., 39696., 40824., 41952., 27028.,
      27936., 28844., 29752., 31650., 32588., 33526., 34464., 19077., 19898.,
      20719., 21540., 23078., 23924., 24770., 25616., 23468., 24432., 25396.,
      26360., 28218., 29212., 30206., 31200., 30181., 31298., 32415., 33532.,
      35744., 36896., 38048., 39200., 25720., 26680., 27640., 28600., 30470.,
      31460., 32450., 33440., 22745., 23538., 24331., 25124., 26682., 27500.,
      28318., 29136.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7161.,  7314.,  7467.,  7620.,  8106.,  8268.,  8430.,  8592.,  7755.,
      7926.,  8097.,  8268.,  8772.,  8952.,  9132.,  9312.,  8349.,  8538.,
      8727.,  8916.,  9438.,  9636.,  9834.,  10032., 8943.,  9150.,  9357.,
      9564.,  10104., 10320., 10536., 10752., 9537.,  9762.,  9987.,  10212.,
      10770., 11004., 11238., 11472., 11319., 11598., 11877., 12156., 12768.,
      13056., 13344., 13632., 11913., 12210., 12507., 12804., 13434., 13740.,
      14046., 14352., 12507., 12822., 13137., 13452., 14100., 14424., 14748.,
      15072., 13101., 13434., 13767., 14100., 14766., 15108., 15450., 15792.,
      13695., 14046., 14397., 14748., 15432., 15792., 16152., 16512., 15477.,
      15882., 16287., 16692., 17430., 17844., 18258., 18672., 16071., 16494.,
      16917., 17340., 18096., 18528., 18960., 19392., 16665., 17106., 17547.,
      17988., 18762., 19212., 19662., 20112., 17259., 17718., 18177., 18636.,
      19428., 19896., 20364., 20832., 17853., 18330., 18807., 19284., 20094.,
      20580., 21066., 21552., 19635., 20166., 20697., 21228., 22092., 22632.,
      23172., 23712., 20229., 20778., 21327., 21876., 22758., 23316., 23874.,
      24432., 20823., 21390., 21957., 22524., 23424., 24000., 24576., 25152.,
      21417., 22002., 22587., 23172., 24090., 24684., 25278., 25872., 22011.,
      22614., 23217., 23820., 24756., 25368., 25980., 26592., 23793., 24450.,
      25107., 25764., 26754., 27420., 28086., 28752., 24387., 25062., 25737.,
      26412., 27420., 28104., 28788., 29472., 24981., 25674., 26367., 27060.,
      28086., 28788., 29490., 30192., 25575., 26286., 26997., 27708., 28752.,
      29472., 30192., 30912., 26169., 26898., 27627., 28356., 29418., 30156.,
      30894., 31632.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7385.,  8100.,  8865.,  9680.,  6910.,  7800.,  8750.,  9760.,  6995.,
      8060.,  9195.,  10400., 5342.,  6264.,  7246.,  8288.,  4569.,  5348.,
      6177.,  7056.,  6910.,  7800.,  8750.,  9760.,  10756., 11824., 12964.,
      14176., 10154., 11432., 12794., 14240., 7140.,  8240.,  9412.,  10656.,
      5342.,  6264.,  7246.,  8288.,  6995.,  8060.,  9195.,  10400., 10154.,
      11432., 12794., 14240., 14833., 16324., 17913., 19600., 10154., 11432.,
      12794., 14240., 6995.,  8060.,  9195.,  10400., 5342.,  6264.,  7246.,
      8288.,  7140.,  8240.,  9412.,  10656., 10154., 11432., 12794., 14240.,
      10756., 11824., 12964., 14176., 6910.,  7800.,  8750.,  9760.,  4569.,
      5348.,  6177.,  7056.,  5342.,  6264.,  7246.,  8288.,  6995.,  8060.,
      9195.,  10400., 6910.,  7800.,  8750.,  9760.,  7385.,  8100.,  8865.,
      9680.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7161.,  7620.,  8097.,  8592.,  7773.,  8268.,  8781.,  9312.,  8385.,
      8916.,  9465.,  10032., 8997.,  9564.,  10149., 10752., 9609.,  10212.,
      10833., 11472., 11445., 12156., 12885., 13632., 12057., 12804., 13569.,
      14352., 12669., 13452., 14253., 15072., 13281., 14100., 14937., 15792.,
      13893., 14748., 15621., 16512., 15729., 16692., 17673., 18672., 16341.,
      17340., 18357., 19392., 16953., 17988., 19041., 20112., 17565., 18636.,
      19725., 20832., 18177., 19284., 20409., 21552., 20013., 21228., 22461.,
      23712., 20625., 21876., 23145., 24432., 21237., 22524., 23829., 25152.,
      21849., 23172., 24513., 25872., 22461., 23820., 25197., 26592., 24297.,
      25764., 27249., 28752., 24909., 26412., 27933., 29472., 25521., 27060.,
      28617., 30192., 26133., 27708., 29301., 30912., 26745., 28356., 29985.,
      31632.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5881.,  6226.,  6934.,  7304.,  8087.,  8482.,  9340.,  9760.,  5122.,
      5532.,  6392.,  6832.,  7782.,  8252.,  9292.,  9792.,  5623.,  6118.,
      7142.,  7672.,  8801.,  9366.,  10600., 11200., 5130.,  5532.,  6400.,
      6832.,  7790.,  8252.,  9300.,  9792.,  4977.,  5298.,  5998.,  6344.,
      7119.,  7490.,  8340.,  8736.,  5274.,  5724.,  6608.,  7088.,  8062.,
      8572.,  9636.,  10176., 8292.,  8808.,  9848.,  10400., 11548., 12136.,
      13392., 14016., 7510.,  8116.,  9352.,  10000., 11362., 12052., 13540.,
      14272., 5748.,  6248.,  7304.,  7840.,  9004.,  9576.,  10848., 11456.,
      5130.,  5532.,  6400.,  6832.,  7790.,  8252.,  9300.,  9792.,  5775.,
      6310.,  7358.,  7928.,  9081.,  9686.,  10944., 11584., 7518.,  8148.,
      9392.,  10064., 11434., 12148., 13644., 14400., 11281., 12002., 13446.,
      14216., 15807., 16626., 18364., 19232., 7510.,  8116.,  9352.,  10000.,
      11362., 12052., 13540., 14272., 5623.,  6118.,  7142.,  7672.,  8801.,
      9366.,  10600., 11200., 5970.,  6460.,  7400.,  7920.,  8950.,  9500.,
      10620., 11200., 6036.,  6600.,  7688.,  8288.,  9484.,  10120., 11424.,
      12096., 7518.,  8148.,  9392.,  10064., 11434., 12148., 13644., 14400.,
      8292.,  8808.,  9848.,  10400., 11548., 12136., 13392., 14016., 5122.,
      5532.,  6392.,  6832.,  7782.,  8252.,  9292.,  9792.,  6881.,  7314.,
      8126.,  8584.,  9471.,  9954.,  10916., 11424., 5970.,  6460.,  7400.,
      7920.,  8950.,  9500.,  10620., 11200., 5775.,  6310.,  7358.,  7928.,
      9081.,  9686.,  10944., 11584., 5274.,  5724.,  6608.,  7088.,  8062.,
      8572.,  9636.,  10176., 5881.,  6226.,  6934.,  7304.,  8087.,  8482.,
      9340.,  9760.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14025., 14322., 14934., 15240., 15879., 16194., 16860., 17184., 15213.,
      15546., 16194., 16536., 17211., 17562., 18264., 18624., 16401., 16770.,
      17454., 17832., 18543., 18930., 19668., 20064., 17589., 17994., 18714.,
      19128., 19875., 20298., 21072., 21504., 18777., 19218., 19974., 20424.,
      21207., 21666., 22476., 22944., 22341., 22890., 23754., 24312., 25203.,
      25770., 26688., 27264., 23529., 24114., 25014., 25608., 26535., 27138.,
      28092., 28704., 24717., 25338., 26274., 26904., 27867., 28506., 29496.,
      30144., 25905., 26562., 27534., 28200., 29199., 29874., 30900., 31584.,
      27093., 27786., 28794., 29496., 30531., 31242., 32304., 33024., 30657.,
      31458., 32574., 33384., 34527., 35346., 36516., 37344., 31845., 32682.,
      33834., 34680., 35859., 36714., 37920., 38784., 33033., 33906., 35094.,
      35976., 37191., 38082., 39324., 40224., 34221., 35130., 36354., 37272.,
      38523., 39450., 40728., 41664., 35409., 36354., 37614., 38568., 39855.,
      40818., 42132., 43104., 38973., 40026., 41394., 42456., 43851., 44922.,
      46344., 47424., 40161., 41250., 42654., 43752., 45183., 46290., 47748.,
      48864., 41349., 42474., 43914., 45048., 46515., 47658., 49152., 50304.,
      42537., 43698., 45174., 46344., 47847., 49026., 50556., 51744., 43725.,
      44922., 46434., 47640., 49179., 50394., 51960., 53184., 47289., 48594.,
      50214., 51528., 53175., 54498., 56172., 57504., 48477., 49818., 51474.,
      52824., 54507., 55866., 57576., 58944., 49665., 51042., 52734., 54120.,
      55839., 57234., 58980., 60384., 50853., 52266., 53994., 55416., 57171.,
      58602., 60384., 61824., 52041., 53490., 55254., 56712., 58503., 59970.,
      61788., 63264.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3609.,  3954.,  4299.,  4644.,  5306.,  5676.,  6046.,  6416.,  7203.,
      7598.,  7993.,  8388.,  9300.,  9720.,  10140., 10560., 3082.,  3492.,
      3902.,  4312.,  5112.,  5552.,  5992.,  6432.,  7382.,  7852.,  8322.,
      8792.,  9892.,  10392., 10892., 11392., 4927.,  5422.,  5917.,  6412.,
      7354.,  7884.,  8414.,  8944.,  10061., 10626., 11191., 11756., 13048.,
      13648., 14248., 14848., 3202.,  3604.,  4006.,  4408.,  5200.,  5632.,
      6064.,  6496.,  7438.,  7900.,  8362.,  8824.,  9916.,  10408., 10900.,
      11392., 3073.,  3394.,  3715.,  4036.,  4674.,  5020.,  5366.,  5712.,
      6475.,  6846.,  7217.,  7588.,  8476.,  8872.,  9268.,  9664.,  3378.,
      3828.,  4278.,  4728.,  5568.,  6048.,  6528.,  7008.,  7998.,  8508.,
      9018.,  9528.,  10668., 11208., 11748., 12288., 5412.,  5928.,  6444.,
      6960.,  7944.,  8496.,  9048.,  9600.,  10764., 11352., 11940., 12528.,
      13872., 14496., 15120., 15744., 4782.,  5388.,  5994.,  6600.,  7752.,
      8400.,  9048.,  9696.,  11058., 11748., 12438., 13128., 14700., 15432.,
      16164., 16896., 5012.,  5512.,  6012.,  6512.,  7480.,  8016.,  8552.,
      9088.,  10236., 10808., 11380., 11952., 13280., 13888., 14496., 15104.,
      3202.,  3604.,  4006.,  4408.,  5200.,  5632.,  6064.,  6496.,  7438.,
      7900.,  8362.,  8824.,  9916.,  10408., 10900., 11392., 5351.,  5886.,
      6421.,  6956.,  7938.,  8508.,  9078.,  9648.,  10805., 11410., 12015.,
      12620., 13952., 14592., 15232., 15872., 4806.,  5436.,  6066.,  6696.,
      7872.,  8544.,  9216.,  9888.,  11274., 11988., 12702., 13416., 15012.,
      15768., 16524., 17280., 7249.,  7970.,  8691.,  9412.,  10762., 11532.,
      12302., 13072., 14667., 15486., 16305., 17124., 18964., 19832., 20700.,
      21568., 4782.,  5388.,  5994.,  6600.,  7752.,  8400.,  9048.,  9696.,
      11058., 11748., 12438., 13128., 14700., 15432., 16164., 16896., 4927.,
      5422.,  5917.,  6412.,  7354.,  7884.,  8414.,  8944.,  10061., 10626.,
      11191., 11756., 13048., 13648., 14248., 14848., 3802.,  4292.,  4782.,
      5272.,  6152.,  6672.,  7192.,  7712.,  8742.,  9292.,  9842.,  10392.,
      11572., 12152., 12732., 13312., 5844.,  6408.,  6972.,  7536.,  8568.,
      9168.,  9768.,  10368., 11580., 12216., 12852., 13488., 14880., 15552.,
      16224., 16896., 4806.,  5436.,  6066.,  6696.,  7872.,  8544.,  9216.,
      9888.,  11274., 11988., 12702., 13416., 15012., 15768., 16524., 17280.,
      5412.,  5928.,  6444.,  6960.,  7944.,  8496.,  9048.,  9600.,  10764.,
      11352., 11940., 12528., 13872., 14496., 15120., 15744., 3082.,  3492.,
      3902.,  4312.,  5112.,  5552.,  5992.,  6432.,  7382.,  7852.,  8322.,
      8792.,  9892.,  10392., 10892., 11392., 4209.,  4642.,  5075.,  5508.,
      6258.,  6716.,  7174.,  7632.,  8507.,  8990.,  9473.,  9956.,  10956.,
      11464., 11972., 12480., 3802.,  4292.,  4782.,  5272.,  6152.,  6672.,
      7192.,  7712.,  8742.,  9292.,  9842.,  10392., 11572., 12152., 12732.,
      13312., 5351.,  5886.,  6421.,  6956.,  7938.,  8508.,  9078.,  9648.,
      10805., 11410., 12015., 12620., 13952., 14592., 15232., 15872., 3378.,
      3828.,  4278.,  4728.,  5568.,  6048.,  6528.,  7008.,  7998.,  8508.,
      9018.,  9528.,  10668., 11208., 11748., 12288., 3609.,  3954.,  4299.,
      4644.,  5306.,  5676.,  6046.,  6416.,  7203.,  7598.,  7993.,  8388.,
      9300.,  9720.,  10140., 10560.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19433., 19730., 20027., 20324., 21114., 21420., 21726., 22032., 22867.,
      23182., 23497., 23812., 24692., 25016., 25340., 25664., 21261., 21594.,
      21927., 22260., 23086., 23428., 23770., 24112., 24983., 25334., 25685.,
      26036., 26952., 27312., 27672., 28032., 23089., 23458., 23827., 24196.,
      25058., 25436., 25814., 26192., 27099., 27486., 27873., 28260., 29212.,
      29608., 30004., 30400., 24917., 25322., 25727., 26132., 27030., 27444.,
      27858., 28272., 29215., 29638., 30061., 30484., 31472., 31904., 32336.,
      32768., 26745., 27186., 27627., 28068., 29002., 29452., 29902., 30352.,
      31331., 31790., 32249., 32708., 33732., 34200., 34668., 35136., 32229.,
      32778., 33327., 33876., 34918., 35476., 36034., 36592., 37679., 38246.,
      38813., 39380., 40512., 41088., 41664., 42240., 34057., 34642., 35227.,
      35812., 36890., 37484., 38078., 38672., 39795., 40398., 41001., 41604.,
      42772., 43384., 43996., 44608., 35885., 36506., 37127., 37748., 38862.,
      39492., 40122., 40752., 41911., 42550., 43189., 43828., 45032., 45680.,
      46328., 46976., 37713., 38370., 39027., 39684., 40834., 41500., 42166.,
      42832., 44027., 44702., 45377., 46052., 47292., 47976., 48660., 49344.,
      39541., 40234., 40927., 41620., 42806., 43508., 44210., 44912., 46143.,
      46854., 47565., 48276., 49552., 50272., 50992., 51712., 45025., 45826.,
      46627., 47428., 48722., 49532., 50342., 51152., 52491., 53310., 54129.,
      54948., 56332., 57160., 57988., 58816., 46853., 47690., 48527., 49364.,
      50694., 51540., 52386., 53232., 54607., 55462., 56317., 57172., 58592.,
      59456., 60320., 61184., 48553., 49298., 50043., 50788., 52026., 52780.,
      53534., 54288., 55571., 56334., 57097., 57860., 59188., 59960., 60732.,
      61504., 35917., 36570., 37223., 37876., 39022., 39684., 40346., 41008.,
      42199., 42870., 43541., 44212., 45448., 46128., 46808., 47488., 25329.,
      25890., 26451., 27012., 28066., 28636., 29206., 29776., 30875., 31454.,
      32033., 32612., 33756., 34344., 34932., 35520., 30813., 31482., 32151.,
      32820., 33982., 34660., 35338., 36016., 37223., 37910., 38597., 39284.,
      40536., 41232., 41928., 42624., 32641., 33346., 34051., 34756., 35954.,
      36668., 37382., 38096., 39339., 40062., 40785., 41508., 42796., 43528.,
      44260., 44992., 24101., 24714., 25327., 25940., 27046., 27668., 28290.,
      28912., 30063., 30694., 31325., 31956., 33152., 33792., 34432., 35072.,
      17609., 18130., 18651., 19172., 20186., 20716., 21246., 21776., 22835.,
      23374., 23913., 24452., 25556., 26104., 26652., 27200., 13165., 13594.,
      14023., 14452., 15374., 15812., 16250., 16688., 17655., 18102., 18549.,
      18996., 20008., 20464., 20920., 21376., 18649., 19186., 19723., 20260.,
      21290., 21836., 22382., 22928., 24003., 24558., 25113., 25668., 26788.,
      27352., 27916., 28480., 20477., 21050., 21623., 22196., 23262., 23844.,
      24426., 25008., 26119., 26710., 27301., 27892., 29048., 29648., 30248.,
      30848., 18081., 18562., 19043., 19524., 20498., 20988., 21478., 21968.,
      22987., 23486., 23985., 24484., 25548., 26056., 26564., 27072., 17733.,
      18122., 18511., 18900., 19782., 20180., 20578., 20976., 21903., 22310.,
      22717., 23124., 24096., 24512., 24928., 25344., 19433., 19730., 20027.,
      20324., 21114., 21420., 21726., 22032., 22867., 23182., 23497., 23812.,
      24692., 25016., 25340., 25664.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25865., 30520., 35260., 31080., 26825., 35166., 41272., 47432., 41608.,
      35742., 44947., 52528., 60116., 52528., 44947., 35742., 41608., 47432.,
      41272., 35166., 26825., 31080., 35260., 30520., 25865.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1090., 1168., 1246., 1324., 1402., 1714., 1792., 1870., 1948.,
      2026., 2338., 2416., 2494., 2572., 2650., 2962., 3040., 3118.,
      3196., 3274., 3586., 3664., 3742., 3820., 3898.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19465., 20050., 22708., 23408., 25924., 26744., 22449., 23184., 19021.,
      19666., 28590., 29436., 33152., 34160., 37624., 38800., 32438., 33488.,
      27366., 28284., 38627., 39782., 44548., 45920., 50284., 51880., 43155.,
      44576., 36239., 37478., 33870., 35004., 38864., 40208., 43640., 45200.,
      37254., 38640., 31110., 32316., 32809., 33874., 37604., 38864., 42180.,
      43640., 36001., 37296., 30061., 31186.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2054., 2180., 2198., 2336., 2342., 2492., 2486., 2648., 2630., 2804.,
      3206., 3428., 3350., 3584., 3494., 3740., 3638., 3896., 3782., 4052.,
      4358., 4676., 4502., 4832., 4646., 4988., 4790., 5144., 4934., 5300.,
      5510., 5924., 5654., 6080., 5798., 6236., 5942., 6392., 6086., 6548.,
      6662., 7172., 6806., 7328., 6950., 7484., 7094., 7640., 7238., 7796.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18953., 19538., 20123., 20708., 21420., 22120., 22820., 23520., 23636.,
      24456., 25276., 26096., 19523., 20258., 20993., 21728., 15701., 16346.,
      16991., 17636., 27726., 28572., 29418., 30264., 31248., 32256., 33264.,
      34272., 34392., 35568., 36744., 37920., 28434., 29484., 30534., 31584.,
      22902., 23820., 24738., 25656., 38275., 39430., 40585., 41740., 42924.,
      44296., 45668., 47040., 47004., 48600., 50196., 51792., 38745., 40166.,
      41587., 43008., 31111., 32350., 33589., 34828., 42414., 43548., 44682.,
      45816., 47712., 49056., 50400., 51744., 52440., 54000., 55560., 57120.,
      43554., 44940., 46326., 47712., 35286., 36492., 37698., 38904., 34217.,
      35282., 36347., 37412., 38108., 39368., 40628., 41888., 41428., 42888.,
      44348., 45808., 33971., 35266., 36561., 37856., 27125., 28250., 29375.,
      30500.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3982.,  4108.,  4234.,  4360.,  4258.,  4396.,  4534.,  4672.,  4534.,
      4684.,  4834.,  4984.,  4810.,  4972.,  5134.,  5296.,  5086.,  5260.,
      5434.,  5608.,  6190.,  6412.,  6634.,  6856.,  6466.,  6700.,  6934.,
      7168.,  6742.,  6988.,  7234.,  7480.,  7018.,  7276.,  7534.,  7792.,
      7294.,  7564.,  7834.,  8104.,  8398.,  8716.,  9034.,  9352.,  8674.,
      9004.,  9334.,  9664.,  8950.,  9292.,  9634.,  9976.,  9226.,  9580.,
      9934.,  10288., 9502.,  9868.,  10234., 10600., 10606., 11020., 11434.,
      11848., 10882., 11308., 11734., 12160., 11158., 11596., 12034., 12472.,
      11434., 11884., 12334., 12784., 11710., 12172., 12634., 13096., 12814.,
      13324., 13834., 14344., 13090., 13612., 14134., 14656., 13366., 13900.,
      14434., 14968., 13642., 14188., 14734., 15280., 13918., 14476., 15034.,
      15592.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21734., 23588., 25837., 28000., 30024., 32496., 26285., 28448., 22502.,
      24356., 29844., 31992., 35350., 37856., 40944., 43808., 35798., 38304.,
      30612., 32760., 46018., 48460., 54047., 56896., 62104., 65360., 54047.,
      56896., 46018., 48460., 30612., 32760., 35798., 38304., 40944., 43808.,
      35350., 37856., 29844., 31992., 22502., 24356., 26285., 28448., 30024.,
      32496., 25837., 28000., 21734., 23588.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3964.,  4360.,  4252.,  4672.,  4540.,  4984.,  4828.,  5296.,  5116.,
      5608.,  6268.,  6856.,  6556.,  7168.,  6844.,  7480.,  7132.,  7792.,
      7420.,  8104.,  8572.,  9352.,  8860.,  9664.,  9148.,  9976.,  9436.,
      10288., 9724.,  10600., 10876., 11848., 11164., 12160., 11452., 12472.,
      11740., 12784., 12028., 13096., 13180., 14344., 13468., 14656., 13756.,
      14968., 14044., 15280., 14332., 15592.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29656., 30412., 32182., 32968., 34181., 35098., 37128., 38080., 38480.,
      39568., 41848., 42976., 32319., 33306., 35266., 36288., 26464., 27340.,
      28990., 29896., 27312., 28200., 30420., 31344., 31542., 32620., 35168.,
      36288., 35552., 36832., 39696., 41024., 29666., 30828., 33292., 34496.,
      24096., 25128., 27204., 28272., 41000., 42116., 44690., 45848., 47159.,
      48510., 51464., 52864., 52976., 54576., 57896., 59552., 44373., 45822.,
      48678., 50176., 36224., 37508., 39914., 41240., 37104., 38184., 40596.,
      41712., 42518., 43820., 46592., 47936., 47584., 49120., 52240., 53824.,
      39746., 41132., 43820., 45248., 32352., 33576., 35844., 37104., 33304.,
      34252., 36214., 37192., 37989., 39130., 41384., 42560., 42320., 43664.,
      46200., 47584., 35231., 36442., 38626., 39872., 28576., 29644., 31486.,
      32584.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7688.,  7928.,  8468.,  8720.,  8240.,  8504.,  9068.,  9344.,  8792.,
      9080.,  9668.,  9968.,  9344.,  9656.,  10268., 10592., 9896.,  10232.,
      10868., 11216., 12104., 12536., 13268., 13712., 12656., 13112., 13868.,
      14336., 13208., 13688., 14468., 14960., 13760., 14264., 15068., 15584.,
      14312., 14840., 15668., 16208., 16520., 17144., 18068., 18704., 17072.,
      17720., 18668., 19328., 17624., 18296., 19268., 19952., 18176., 18872.,
      19868., 20576., 18728., 19448., 20468., 21200., 20936., 21752., 22868.,
      23696., 21488., 22328., 23468., 24320., 22040., 22904., 24068., 24944.,
      22592., 23480., 24668., 25568., 23144., 24056., 25268., 26192., 25352.,
      26360., 27668., 28688., 25904., 26936., 28268., 29312., 26456., 27512.,
      28868., 29936., 27008., 28088., 29468., 30560., 27560., 28664., 30068.,
      31184.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29372., 30128., 30884., 31640., 33626., 34412., 35198., 35984., 32501.,
      33418., 34335., 35252., 37464., 38416., 39368., 40320., 34912., 36000.,
      37088., 38176., 40584., 41712., 42840., 43968., 26915., 27902., 28889.,
      29876., 31878., 32900., 33922., 34944., 19796., 20672., 21548., 22424.,
      24050., 24956., 25862., 26768., 34536., 35424., 36312., 37200., 39564.,
      40488., 41412., 42336., 38262., 39340., 40418., 41496., 44128., 45248.,
      46368., 47488., 41152., 42432., 43712., 44992., 47856., 49184., 50512.,
      51840., 31738., 32900., 34062., 35224., 37604., 38808., 40012., 41216.,
      23352., 24384., 25416., 26448., 28380., 29448., 30516., 31584., 43252.,
      44368., 45484., 46600., 49438., 50596., 51754., 52912., 47719., 49070.,
      50421., 51772., 54936., 56336., 57736., 59136., 51104., 52704., 54304.,
      55904., 59352., 61008., 62664., 64320., 39361., 40810., 42259., 43708.,
      46578., 48076., 49574., 51072., 28924., 30208., 31492., 32776., 35110.,
      36436., 37762., 39088., 41640., 42720., 43800., 44880., 47436., 48552.,
      49668., 50784., 45654., 46956., 48258., 49560., 52416., 53760., 55104.,
      56448., 48576., 50112., 51648., 53184., 56304., 57888., 59472., 61056.,
      37338., 38724., 40110., 41496., 44100., 45528., 46956., 48384., 27384.,
      28608., 29832., 31056., 33180., 34440., 35700., 36960., 36476., 37424.,
      38372., 39320., 41498., 42476., 43454., 44432., 39893., 41034., 42175.,
      43316., 45752., 46928., 48104., 49280., 42336., 43680., 45024., 46368.,
      49032., 50416., 51800., 53184., 32515., 33726., 34937., 36148., 38374.,
      39620., 40866., 42112., 23828., 24896., 25964., 27032., 28850., 29948.,
      31046., 32144.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15136., 15376., 15616., 15856., 16684., 16936., 17188., 17440., 16216.,
      16480., 16744., 17008., 17860., 18136., 18412., 18688., 17296., 17584.,
      17872., 18160., 19036., 19336., 19636., 19936., 18376., 18688., 19000.,
      19312., 20212., 20536., 20860., 21184., 19456., 19792., 20128., 20464.,
      21388., 21736., 22084., 22432., 23776., 24208., 24640., 25072., 26092.,
      26536., 26980., 27424., 24856., 25312., 25768., 26224., 27268., 27736.,
      28204., 28672., 25936., 26416., 26896., 27376., 28444., 28936., 29428.,
      29920., 27016., 27520., 28024., 28528., 29620., 30136., 30652., 31168.,
      28096., 28624., 29152., 29680., 30796., 31336., 31876., 32416., 32416.,
      33040., 33664., 34288., 35500., 36136., 36772., 37408., 33496., 34144.,
      34792., 35440., 36676., 37336., 37996., 38656., 34576., 35248., 35920.,
      36592., 37852., 38536., 39220., 39904., 35656., 36352., 37048., 37744.,
      39028., 39736., 40444., 41152., 36736., 37456., 38176., 38896., 40204.,
      40936., 41668., 42400., 41056., 41872., 42688., 43504., 44908., 45736.,
      46564., 47392., 42136., 42976., 43816., 44656., 46084., 46936., 47788.,
      48640., 43216., 44080., 44944., 45808., 47260., 48136., 49012., 49888.,
      44296., 45184., 46072., 46960., 48436., 49336., 50236., 51136., 45376.,
      46288., 47200., 48112., 49612., 50536., 51460., 52384., 49696., 50704.,
      51712., 52720., 54316., 55336., 56356., 57376., 50776., 51808., 52840.,
      53872., 55492., 56536., 57580., 58624., 51856., 52912., 53968., 55024.,
      56668., 57736., 58804., 59872., 52936., 54016., 55096., 56176., 57844.,
      58936., 60028., 61120., 54016., 55120., 56224., 57328., 59020., 60136.,
      61252., 62368.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7670.,  8600.,  9590.,  10640., 9975.,  11060., 12215., 13440., 12360.,
      13600., 14920., 16320., 9975.,  11060., 12215., 13440., 7670.,  8600.,
      9590.,  10640., 9204.,  10320., 11508., 12768., 11970., 13272., 14658.,
      16128., 14832., 16320., 17904., 19584., 11970., 13272., 14658., 16128.,
      9204.,  10320., 11508., 12768., 10738., 12040., 13426., 14896., 13965.,
      15484., 17101., 18816., 17304., 19040., 20888., 22848., 13965., 15484.,
      17101., 18816., 10738., 12040., 13426., 14896., 9204.,  10320., 11508.,
      12768., 11970., 13272., 14658., 16128., 14832., 16320., 17904., 19584.,
      11970., 13272., 14658., 16128., 9204.,  10320., 11508., 12768., 7670.,
      8600.,  9590.,  10640., 9975.,  11060., 12215., 13440., 12360., 13600.,
      14920., 16320., 9975.,  11060., 12215., 13440., 7670.,  8600.,  9590.,
      10640.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15100., 15856., 16636., 17440., 16204., 17008., 17836., 18688., 17308.,
      18160., 19036., 19936., 18412., 19312., 20236., 21184., 19516., 20464.,
      21436., 22432., 23932., 25072., 26236., 27424., 25036., 26224., 27436.,
      28672., 26140., 27376., 28636., 29920., 27244., 28528., 29836., 31168.,
      28348., 29680., 31036., 32416., 32764., 34288., 35836., 37408., 33868.,
      35440., 37036., 38656., 34972., 36592., 38236., 39904., 36076., 37744.,
      39436., 41152., 37180., 38896., 40636., 42400., 41596., 43504., 45436.,
      47392., 42700., 44656., 46636., 48640., 43804., 45808., 47836., 49888.,
      44908., 46960., 49036., 51136., 46012., 48112., 50236., 52384., 50428.,
      52720., 55036., 57376., 51532., 53872., 56236., 58624., 52636., 55024.,
      57436., 59872., 53740., 56176., 58636., 61120., 54844., 57328., 59836.,
      62368.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5410.,  5740.,  6600.,  6960.,  7910.,  8300.,  9340.,  9760.,  7335.,
      7790.,  8830.,  9320.,  10465., 10990., 12240., 12800., 9400.,  10000.,
      11200., 11840., 13160., 13840., 15280., 16000., 7355.,  7950.,  9010.,
      9640.,  10805., 11470., 12740., 13440., 6130.,  6700.,  7640.,  8240.,
      9270.,  9900.,  11020., 11680., 6492.,  6888.,  7920.,  8352.,  9492.,
      9960.,  11208., 11712., 8802.,  9348.,  10596., 11184., 12558., 13188.,
      14688., 15360., 11280., 12000., 13440., 14208., 15792., 16608., 18336.,
      19200., 8826.,  9540.,  10812., 11568., 12966., 13764., 15288., 16128.,
      7356.,  8040.,  9168.,  9888.,  11124., 11880., 13224., 14016., 7574.,
      8036.,  9240.,  9744.,  11074., 11620., 13076., 13664., 10269., 10906.,
      12362., 13048., 14651., 15386., 17136., 17920., 13160., 14000., 15680.,
      16576., 18424., 19376., 21392., 22400., 10297., 11130., 12614., 13496.,
      15127., 16058., 17836., 18816., 8582.,  9380.,  10696., 11536., 12978.,
      13860., 15428., 16352., 6492.,  6888.,  7920.,  8352.,  9492.,  9960.,
      11208., 11712., 8802.,  9348.,  10596., 11184., 12558., 13188., 14688.,
      15360., 11280., 12000., 13440., 14208., 15792., 16608., 18336., 19200.,
      8826.,  9540.,  10812., 11568., 12966., 13764., 15288., 16128., 7356.,
      8040.,  9168.,  9888.,  11124., 11880., 13224., 14016., 5410.,  5740.,
      6600.,  6960.,  7910.,  8300.,  9340.,  9760.,  7335.,  7790.,  8830.,
      9320.,  10465., 10990., 12240., 12800., 9400.,  10000., 11200., 11840.,
      13160., 13840., 15280., 16000., 7355.,  7950.,  9010.,  9640.,  10805.,
      11470., 12740., 13440., 6130.,  6700.,  7640.,  8240.,  9270.,  9900.,
      11020., 11680.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29732., 30200., 31232., 31712., 32780., 33272., 34376., 34880., 31892.,
      32408., 33488., 34016., 35132., 35672., 36824., 37376., 34052., 34616.,
      35744., 36320., 37484., 38072., 39272., 39872., 36212., 36824., 38000.,
      38624., 39836., 40472., 41720., 42368., 38372., 39032., 40256., 40928.,
      42188., 42872., 44168., 44864., 47012., 47864., 49280., 50144., 51596.,
      52472., 53960., 54848., 49172., 50072., 51536., 52448., 53948., 54872.,
      56408., 57344., 51332., 52280., 53792., 54752., 56300., 57272., 58856.,
      59840., 53492., 54488., 56048., 57056., 58652., 59672., 61304., 62336.,
      55652., 56696., 58304., 59360., 61004., 62072., 63752., 64832., 24868.,
      25592., 26880., 27616., 28940., 29688., 31048., 31808., 27028., 27800.,
      29136., 29920., 31292., 32088., 33496., 34304., 29188., 30008., 31392.,
      32224., 33644., 34488., 35944., 36800., 31348., 32216., 33648., 34528.,
      35996., 36888., 38392., 39296., 33508., 34424., 35904., 36832., 38348.,
      39288., 40840., 41792., 19108., 19704., 20864., 21472., 22668., 23288.,
      24520., 25152., 21268., 21912., 23120., 23776., 25020., 25688., 26968.,
      27648., 23428., 24120., 25376., 26080., 27372., 28088., 29416., 30144.,
      25588., 26328., 27632., 28384., 29724., 30488., 31864., 32640., 27748.,
      28536., 29888., 30688., 32076., 32888., 34312., 35136., 29732., 30200.,
      31232., 31712., 32780., 33272., 34376., 34880., 31892., 32408., 33488.,
      34016., 35132., 35672., 36824., 37376., 34052., 34616., 35744., 36320.,
      37484., 38072., 39272., 39872., 36212., 36824., 38000., 38624., 39836.,
      40472., 41720., 42368., 38372., 39032., 40256., 40928., 42188., 42872.,
      44168., 44864.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3450.,  3780.,  4110.,  4440.,  5160.,  5520.,  5880.,  6240.,  7110.,
      7500.,  7890.,  8280.,  9300.,  9720.,  10140., 10560., 4615.,  5070.,
      5525.,  5980.,  6930.,  7420.,  7910.,  8400.,  9525.,  10050., 10575.,
      11100., 12400., 12960., 13520., 14080., 6040.,  6640.,  7240.,  7840.,
      8960.,  9600.,  10240., 10880., 12200., 12880., 13560., 14240., 15760.,
      16480., 17200., 17920., 4675.,  5270.,  5865.,  6460.,  7470.,  8100.,
      8730.,  9360.,  10545., 11210., 11875., 12540., 13900., 14600., 15300.,
      16000., 5610.,  6180.,  6750.,  7320.,  8280.,  8880.,  9480.,  10080.,
      11190., 11820., 12450., 13080., 14340., 15000., 15660., 16320., 4140.,
      4536.,  4932.,  5328.,  6192.,  6624.,  7056.,  7488.,  8532.,  9000.,
      9468.,  9936.,  11160., 11664., 12168., 12672., 5538.,  6084.,  6630.,
      7176.,  8316.,  8904.,  9492.,  10080., 11430., 12060., 12690., 13320.,
      14880., 15552., 16224., 16896., 7248.,  7968.,  8688.,  9408.,  10752.,
      11520., 12288., 13056., 14640., 15456., 16272., 17088., 18912., 19776.,
      20640., 21504., 5610.,  6324.,  7038.,  7752.,  8964.,  9720.,  10476.,
      11232., 12654., 13452., 14250., 15048., 16680., 17520., 18360., 19200.,
      6732.,  7416.,  8100.,  8784.,  9936.,  10656., 11376., 12096., 13428.,
      14184., 14940., 15696., 17208., 18000., 18792., 19584., 4830.,  5292.,
      5754.,  6216.,  7224.,  7728.,  8232.,  8736.,  9954.,  10500., 11046.,
      11592., 13020., 13608., 14196., 14784., 6461.,  7098.,  7735.,  8372.,
      9702.,  10388., 11074., 11760., 13335., 14070., 14805., 15540., 17360.,
      18144., 18928., 19712., 8456.,  9296.,  10136., 10976., 12544., 13440.,
      14336., 15232., 17080., 18032., 18984., 19936., 22064., 23072., 24080.,
      25088., 6545.,  7378.,  8211.,  9044.,  10458., 11340., 12222., 13104.,
      14763., 15694., 16625., 17556., 19460., 20440., 21420., 22400., 7854.,
      8652.,  9450.,  10248., 11592., 12432., 13272., 14112., 15666., 16548.,
      17430., 18312., 20076., 21000., 21924., 22848., 4140.,  4536.,  4932.,
      5328.,  6192.,  6624.,  7056.,  7488.,  8532.,  9000.,  9468.,  9936.,
      11160., 11664., 12168., 12672., 5538.,  6084.,  6630.,  7176.,  8316.,
      8904.,  9492.,  10080., 11430., 12060., 12690., 13320., 14880., 15552.,
      16224., 16896., 7248.,  7968.,  8688.,  9408.,  10752., 11520., 12288.,
      13056., 14640., 15456., 16272., 17088., 18912., 19776., 20640., 21504.,
      5610.,  6324.,  7038.,  7752.,  8964.,  9720.,  10476., 11232., 12654.,
      13452., 14250., 15048., 16680., 17520., 18360., 19200., 6732.,  7416.,
      8100.,  8784.,  9936.,  10656., 11376., 12096., 13428., 14184., 14940.,
      15696., 17208., 18000., 18792., 19584., 3450.,  3780.,  4110.,  4440.,
      5160.,  5520.,  5880.,  6240.,  7110.,  7500.,  7890.,  8280.,  9300.,
      9720.,  10140., 10560., 4615.,  5070.,  5525.,  5980.,  6930.,  7420.,
      7910.,  8400.,  9525.,  10050., 10575., 11100., 12400., 12960., 13520.,
      14080., 6040.,  6640.,  7240.,  7840.,  8960.,  9600.,  10240., 10880.,
      12200., 12880., 13560., 14240., 15760., 16480., 17200., 17920., 4675.,
      5270.,  5865.,  6460.,  7470.,  8100.,  8730.,  9360.,  10545., 11210.,
      11875., 12540., 13900., 14600., 15300., 16000., 5610.,  6180.,  6750.,
      7320.,  8280.,  8880.,  9480.,  10080., 11190., 11820., 12450., 13080.,
      14340., 15000., 15660., 16320.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6260.,  6472.,  6684.,  6896.,  7456.,  7680.,  7904.,  8128.,  8748.,
      8984.,  9220.,  9456.,  10136., 10384., 10632., 10880., 7460.,  7720.,
      7980.,  8240.,  8848.,  9120.,  9392.,  9664.,  10332., 10616., 10900.,
      11184., 11912., 12208., 12504., 12800., 8660.,  8968.,  9276.,  9584.,
      10240., 10560., 10880., 11200., 11916., 12248., 12580., 12912., 13688.,
      14032., 14376., 14720., 9860.,  10216., 10572., 10928., 11632., 12000.,
      12368., 12736., 13500., 13880., 14260., 14640., 15464., 15856., 16248.,
      16640., 11060., 11464., 11868., 12272., 13024., 13440., 13856., 14272.,
      15084., 15512., 15940., 16368., 17240., 17680., 18120., 18560., 9460.,
      9800.,  10140., 10480., 11168., 11520., 11872., 12224., 12972., 13336.,
      13700., 14064., 14872., 15248., 15624., 16000., 10660., 11048., 11436.,
      11824., 12560., 12960., 13360., 13760., 14556., 14968., 15380., 15792.,
      16648., 17072., 17496., 17920., 11860., 12296., 12732., 13168., 13952.,
      14400., 14848., 15296., 16140., 16600., 17060., 17520., 18424., 18896.,
      19368., 19840., 13060., 13544., 14028., 14512., 15344., 15840., 16336.,
      16832., 17724., 18232., 18740., 19248., 20200., 20720., 21240., 21760.,
      14260., 14792., 15324., 15856., 16736., 17280., 17824., 18368., 19308.,
      19864., 20420., 20976., 21976., 22544., 23112., 23680., 6260.,  6472.,
      6684.,  6896.,  7456.,  7680.,  7904.,  8128.,  8748.,  8984.,  9220.,
      9456.,  10136., 10384., 10632., 10880., 7460.,  7720.,  7980.,  8240.,
      8848.,  9120.,  9392.,  9664.,  10332., 10616., 10900., 11184., 11912.,
      12208., 12504., 12800., 8660.,  8968.,  9276.,  9584.,  10240., 10560.,
      10880., 11200., 11916., 12248., 12580., 12912., 13688., 14032., 14376.,
      14720., 9860.,  10216., 10572., 10928., 11632., 12000., 12368., 12736.,
      13500., 13880., 14260., 14640., 15464., 15856., 16248., 16640., 11060.,
      11464., 11868., 12272., 13024., 13440., 13856., 14272., 15084., 15512.,
      15940., 16368., 17240., 17680., 18120., 18560., 9460.,  9800.,  10140.,
      10480., 11168., 11520., 11872., 12224., 12972., 13336., 13700., 14064.,
      14872., 15248., 15624., 16000., 10660., 11048., 11436., 11824., 12560.,
      12960., 13360., 13760., 14556., 14968., 15380., 15792., 16648., 17072.,
      17496., 17920., 11860., 12296., 12732., 13168., 13952., 14400., 14848.,
      15296., 16140., 16600., 17060., 17520., 18424., 18896., 19368., 19840.,
      13060., 13544., 14028., 14512., 15344., 15840., 16336., 16832., 17724.,
      18232., 18740., 19248., 20200., 20720., 21240., 21760., 14260., 14792.,
      15324., 15856., 16736., 17280., 17824., 18368., 19308., 19864., 20420.,
      20976., 21976., 22544., 23112., 23680., 6260.,  6472.,  6684.,  6896.,
      7456.,  7680.,  7904.,  8128.,  8748.,  8984.,  9220.,  9456.,  10136.,
      10384., 10632., 10880., 7460.,  7720.,  7980.,  8240.,  8848.,  9120.,
      9392.,  9664.,  10332., 10616., 10900., 11184., 11912., 12208., 12504.,
      12800., 8660.,  8968.,  9276.,  9584.,  10240., 10560., 10880., 11200.,
      11916., 12248., 12580., 12912., 13688., 14032., 14376., 14720., 9860.,
      10216., 10572., 10928., 11632., 12000., 12368., 12736., 13500., 13880.,
      14260., 14640., 15464., 15856., 16248., 16640., 11060., 11464., 11868.,
      12272., 13024., 13440., 13856., 14272., 15084., 15512., 15940., 16368.,
      17240., 17680., 18120., 18560.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15780., 19950., 24198., 20310., 16356., 20426., 25690., 31003., 25900.,
      20762., 25264., 31640., 38024., 31640., 25264., 20762., 25900., 31003.,
      25690., 20426., 16356., 20310., 24198., 19950., 15780.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      500.,  536.,  572.,  608.,  644.,  716.,  752.,  788.,  824.,
      860.,  932.,  968.,  1004., 1040., 1076., 1148., 1184., 1220.,
      1256., 1292., 1364., 1400., 1436., 1472., 1508.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10788., 11208., 14656., 15196., 18546., 19212., 15794., 16364., 13108.,
      13576., 15318., 15892., 20565., 21300., 25775., 26678., 21782., 22552.,
      17918., 18548., 20208., 20960., 26864., 27824., 33400., 34576., 28040.,
      29040., 22896., 23712., 19534., 20276., 26343., 27288., 33011., 34166.,
      27808., 28788., 22838., 23636., 20612., 21320., 28072., 28972., 35394.,
      36492., 29946., 30876., 24724., 25480.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      916.,  1000., 980.,  1072., 1044., 1144., 1108., 1216., 1172., 1288.,
      1300., 1432., 1364., 1504., 1428., 1576., 1492., 1648., 1556., 1720.,
      1684., 1864., 1748., 1936., 1812., 2008., 1876., 2080., 1940., 2152.,
      2068., 2296., 2132., 2368., 2196., 2440., 2260., 2512., 2324., 2584.,
      2452., 2728., 2516., 2800., 2580., 2872., 2644., 2944., 2708., 3016.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14820., 15240., 15660., 16080., 19300., 19840., 20380., 20920., 23626.,
      24292., 24958., 25624., 19690., 20260., 20830., 21400., 16084., 16552.,
      17020., 17488., 19886., 20460., 21034., 21608., 25931., 26666., 27401.,
      28136., 31703., 32606., 33509., 34412., 26474., 27244., 28014., 28784.,
      21702., 22332., 22962., 23592., 25648., 26400., 27152., 27904., 33312.,
      34272., 35232., 36192., 40536., 41712., 42888., 44064., 33768., 34768.,
      35768., 36768., 27632., 28448., 29264., 30080., 20470., 21212., 21954.,
      22696., 27293., 28238., 29183., 30128., 33635., 34790., 35945., 37100.,
      28332., 29312., 30292., 31272., 23694., 24492., 25290., 26088., 18820.,
      19528., 20236., 20944., 25804., 26704., 27604., 28504., 32314., 33412.,
      34510., 35608., 27666., 28596., 29526., 30456., 23668., 24424., 25180.,
      25936.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1748., 1832., 1916., 2000., 1868., 1960., 2052., 2144., 1988., 2088.,
      2188., 2288., 2108., 2216., 2324., 2432., 2228., 2344., 2460., 2576.,
      2468., 2600., 2732., 2864., 2588., 2728., 2868., 3008., 2708., 2856.,
      3004., 3152., 2828., 2984., 3140., 3296., 2948., 3112., 3276., 3440.,
      3188., 3368., 3548., 3728., 3308., 3496., 3684., 3872., 3428., 3624.,
      3820., 4016., 3548., 3752., 3956., 4160., 3668., 3880., 4092., 4304.,
      3908., 4136., 4364., 4592., 4028., 4264., 4500., 4736., 4148., 4392.,
      4636., 4880., 4268., 4520., 4772., 5024., 4388., 4648., 4908., 5168.,
      4628., 4904., 5180., 5456., 4748., 5032., 5316., 5600., 4868., 5160.,
      5452., 5744., 4988., 5288., 5588., 5888., 5108., 5416., 5724., 6032.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17016., 18448., 22810., 24632., 28788., 31000., 23994., 25816., 19320.,
      20752., 20364., 21928., 28197., 30184., 36226., 38636., 30957., 32944.,
      25804., 27368., 27552., 29248., 38264., 40416., 49136., 51744., 38264.,
      40416., 27552., 29248., 25804., 27368., 30957., 32944., 36226., 38636.,
      28197., 30184., 20364., 21928., 19320., 20752., 23994., 25816., 28788.,
      31000., 22810., 24632., 17016., 18448.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1768., 2000., 1896., 2144., 2024., 2288., 2152., 2432., 2280., 2576.,
      2536., 2864., 2664., 3008., 2792., 3152., 2920., 3296., 3048., 3440.,
      3304., 3728., 3432., 3872., 3560., 4016., 3688., 4160., 3816., 4304.,
      4072., 4592., 4200., 4736., 4328., 4880., 4456., 5024., 4584., 5168.,
      4840., 5456., 4968., 5600., 5096., 5744., 5224., 5888., 5352., 6032.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21312., 22000., 23512., 24224., 26650., 27508., 29432., 30320., 31960.,
      33000., 35324., 36400., 25310., 26164., 28092., 28976., 19296., 19952.,
      21496., 22176., 20280., 21016., 22740., 23504., 27375., 28298., 30482.,
      31440., 34464., 35588., 38218., 39384., 29177., 30106., 32284., 33248.,
      24520., 25240., 26980., 27728., 26880., 27712., 29600., 30464., 37400.,
      38448., 40832., 41920., 47840., 49120., 51984., 53312., 37768., 38832.,
      41200., 42304., 28416., 29248., 31136., 32000., 23912., 24728., 26372.,
      27216., 29211., 30234., 32318., 33376., 34344., 35588., 38098., 39384.,
      28165., 29194., 31272., 32336., 22776., 23576., 25236., 26064., 19712.,
      20464., 21912., 22688., 25866., 26804., 28648., 29616., 31864., 33000.,
      35228., 36400., 27982., 28916., 30764., 31728., 24864., 25584., 27064.,
      27808.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3376.,  3536.,  3832.,  4000.,  3616.,  3792.,  4104.,  4288.,  3856.,
      4048.,  4376.,  4576.,  4096.,  4304.,  4648.,  4864.,  4336.,  4560.,
      4920.,  5152.,  4816.,  5072.,  5464.,  5728.,  5056.,  5328.,  5736.,
      6016.,  5296.,  5584.,  6008.,  6304.,  5536.,  5840.,  6280.,  6592.,
      5776.,  6096.,  6552.,  6880.,  6256.,  6608.,  7096.,  7456.,  6496.,
      6864.,  7368.,  7744.,  6736.,  7120.,  7640.,  8032.,  6976.,  7376.,
      7912.,  8320.,  7216.,  7632.,  8184.,  8608.,  7696.,  8144.,  8728.,
      9184.,  7936.,  8400.,  9000.,  9472.,  8176.,  8656.,  9272.,  9760.,
      8416.,  8912.,  9544.,  10048., 8656.,  9168.,  9816.,  10336., 9136.,
      9680.,  10360., 10912., 9376.,  9936.,  10632., 11200., 9616.,  10192.,
      10904., 11488., 9856.,  10448., 11176., 11776., 10096., 10704., 11448.,
      12064.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19408., 20096., 20784., 21472., 23016., 23728., 24440., 25152., 24538.,
      25396., 26254., 27112., 29048., 29936., 30824., 31712., 29088., 30128.,
      31168., 32208., 34500., 35576., 36652., 37728., 24358., 25212., 26066.,
      26920., 28804., 29688., 30572., 31456., 21296., 21952., 22608., 23264.,
      24776., 25456., 26136., 26816., 23440., 24176., 24912., 25648., 27308.,
      28072., 28836., 29600., 28483., 29406., 30329., 31252., 33382., 34340.,
      35298., 36256., 32988., 34112., 35236., 36360., 38918., 40084., 41250.,
      42416., 25425., 26354., 27283., 28212., 30324., 31288., 32252., 33216.,
      19648., 20368., 21088., 21808., 23516., 24264., 25012., 25760., 24256.,
      25088., 25920., 26752., 28640., 29504., 30368., 31232., 33048., 34096.,
      35144., 36192., 38592., 39680., 40768., 41856., 41152., 42432., 43712.,
      44992., 47856., 49184., 50512., 51840., 31208., 32272., 33336., 34400.,
      36752., 37856., 38960., 40064., 23232., 24064., 24896., 25728., 27616.,
      28480., 29344., 30208., 23456., 24272., 25088., 25904., 27580., 28424.,
      29268., 30112., 29559., 30582., 31605., 32628., 34778., 35836., 36894.,
      37952., 34932., 36176., 37420., 38664., 41246., 42532., 43818., 45104.,
      29637., 30666., 31695., 32724., 34856., 35920., 36984., 38048., 26320.,
      27120., 27920., 28720., 30444., 31272., 32100., 32928., 18960., 19712.,
      20464., 21216., 22696., 23472., 24248., 25024., 24746., 25684., 26622.,
      27560., 29448., 30416., 31384., 32352., 29824., 30960., 32096., 33232.,
      35492., 36664., 37836., 39008., 24694., 25628., 26562., 27496., 29332.,
      30296., 31260., 32224., 21360., 22080., 22800., 23520., 24968., 25712.,
      26456., 27200.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6592.,  6752.,  6912.,  7072.,  7496.,  7664.,  7832.,  8000.,  7056.,
      7232.,  7408.,  7584.,  8024.,  8208.,  8392.,  8576.,  7520.,  7712.,
      7904.,  8096.,  8552.,  8752.,  8952.,  9152.,  7984.,  8192.,  8400.,
      8608.,  9080.,  9296.,  9512.,  9728.,  8448.,  8672.,  8896.,  9120.,
      9608.,  9840.,  10072., 10304., 9376.,  9632.,  9888.,  10144., 10664.,
      10928., 11192., 11456., 9840.,  10112., 10384., 10656., 11192., 11472.,
      11752., 12032., 10304., 10592., 10880., 11168., 11720., 12016., 12312.,
      12608., 10768., 11072., 11376., 11680., 12248., 12560., 12872., 13184.,
      11232., 11552., 11872., 12192., 12776., 13104., 13432., 13760., 12160.,
      12512., 12864., 13216., 13832., 14192., 14552., 14912., 12624., 12992.,
      13360., 13728., 14360., 14736., 15112., 15488., 13088., 13472., 13856.,
      14240., 14888., 15280., 15672., 16064., 13552., 13952., 14352., 14752.,
      15416., 15824., 16232., 16640., 14016., 14432., 14848., 15264., 15944.,
      16368., 16792., 17216., 14944., 15392., 15840., 16288., 17000., 17456.,
      17912., 18368., 15408., 15872., 16336., 16800., 17528., 18000., 18472.,
      18944., 15872., 16352., 16832., 17312., 18056., 18544., 19032., 19520.,
      16336., 16832., 17328., 17824., 18584., 19088., 19592., 20096., 16800.,
      17312., 17824., 18336., 19112., 19632., 20152., 20672., 17728., 18272.,
      18816., 19360., 20168., 20720., 21272., 21824., 18192., 18752., 19312.,
      19872., 20696., 21264., 21832., 22400., 18656., 19232., 19808., 20384.,
      21224., 21808., 22392., 22976., 19120., 19712., 20304., 20896., 21752.,
      22352., 22952., 23552., 19584., 20192., 20800., 21408., 22280., 22896.,
      23512., 24128.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4856.,  5600.,  6392.,  7232.,  5446.,  6376.,  7366.,  8416.,  6516.,
      7632.,  8820.,  10080., 5702.,  6632.,  7622.,  8672.,  5368.,  6112.,
      6904.,  7744.,  8908.,  9776.,  10700., 11680., 8471.,  9556.,  10711.,
      11936., 8690.,  9992.,  11378., 12848., 6583.,  7668.,  8823.,  10048.,
      5068.,  5936.,  6860.,  7840.,  6816.,  7808.,  8864.,  9984.,  10504.,
      11744., 13064., 14464., 14832., 16320., 17904., 19584., 10504., 11744.,
      13064., 14464., 6816.,  7808.,  8864.,  9984.,  5068.,  5936.,  6860.,
      7840.,  6583.,  7668.,  8823.,  10048., 8690.,  9992.,  11378., 12848.,
      8471.,  9556.,  10711., 11936., 8908.,  9776.,  10700., 11680., 5368.,
      6112.,  6904.,  7744.,  5702.,  6632.,  7622.,  8672.,  6516.,  7632.,
      8820.,  10080., 5446.,  6376.,  7366.,  8416.,  4856.,  5600.,  6392.,
      7232.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6632.,  7072.,  7528.,  8000.,  7112.,  7584.,  8072.,  8576.,  7592.,
      8096.,  8616.,  9152.,  8072.,  8608.,  9160.,  9728.,  8552.,  9120.,
      9704.,  10304., 9512.,  10144., 10792., 11456., 9992.,  10656., 11336.,
      12032., 10472., 11168., 11880., 12608., 10952., 11680., 12424., 13184.,
      11432., 12192., 12968., 13760., 12392., 13216., 14056., 14912., 12872.,
      13728., 14600., 15488., 13352., 14240., 15144., 16064., 13832., 14752.,
      15688., 16640., 14312., 15264., 16232., 17216., 15272., 16288., 17320.,
      18368., 15752., 16800., 17864., 18944., 16232., 17312., 18408., 19520.,
      16712., 17824., 18952., 20096., 17192., 18336., 19496., 20672., 18152.,
      19360., 20584., 21824., 18632., 19872., 21128., 22400., 19112., 20384.,
      21672., 22976., 19592., 20896., 22216., 23552., 20072., 21408., 22760.,
      24128.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3432.,  3760.,  4448.,  4800.,  5560.,  5936.,  6768.,  7168.,  5462.,
      5868.,  6748.,  7184.,  8154.,  8620.,  9680.,  10176., 8044.,  8552.,
      9600.,  10144., 11300., 11880., 13144., 13760., 5310.,  5740.,  6596.,
      7056.,  8002.,  8492.,  9528.,  10048., 3944.,  4272.,  4960.,  5312.,
      6072.,  6448.,  7280.,  7680.,  6836.,  7256.,  8096.,  8544.,  9468.,
      9944.,  10952., 11456., 6523.,  7022.,  8082.,  8616.,  9781.,  10350.,
      11620., 12224., 6982.,  7588.,  8840.,  9488.,  10866., 11556., 13060.,
      13792., 5775.,  6286.,  7302.,  7848.,  8969.,  9550.,  10776., 11392.,
      6164.,  6552.,  7360.,  7776.,  8668.,  9112.,  10088., 10560., 5472.,
      5952.,  6912.,  7424.,  8480.,  9024.,  10176., 10752., 8008.,  8592.,
      9808.,  10432., 11768., 12432., 13888., 14592., 11280., 12000., 13440.,
      14208., 15792., 16608., 18336., 19200., 7464.,  8080.,  9264.,  9920.,
      11224., 11920., 13344., 14080., 5472.,  5952.,  6912.,  7424.,  8480.,
      9024.,  10176., 10752., 6996.,  7448.,  8320.,  8800.,  9756.,  10264.,
      11304., 11840., 6739.,  7278.,  8362.,  8936.,  10125., 10734., 12028.,
      12672., 7126.,  7780.,  9048.,  9744.,  11138., 11876., 13396., 14176.,
      6119.,  6670.,  7710.,  8296.,  9441.,  10062., 11312., 11968., 6836.,
      7256.,  8096.,  8544.,  9468.,  9944.,  10952., 11456., 4776.,  5168.,
      5920.,  6336.,  7160.,  7600.,  8496.,  8960.,  6550.,  7020.,  7964.,
      8464.,  9498.,  10028., 11152., 11712., 8876.,  9448.,  10560., 11168.,
      12388., 13032., 14360., 15040., 5886.,  6380.,  7300.,  7824.,  8834.,
      9388.,  10488., 11072., 4264.,  4656.,  5408.,  5824.,  6648.,  7088.,
      7984.,  8448.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12952., 13264., 13824., 14144., 14728., 15056., 15664., 16000., 13880.,
      14224., 14816., 15168., 15784., 16144., 16784., 17152., 14808., 15184.,
      15808., 16192., 16840., 17232., 17904., 18304., 15736., 16144., 16800.,
      17216., 17896., 18320., 19024., 19456., 16664., 17104., 17792., 18240.,
      18952., 19408., 20144., 20608., 18520., 19024., 19776., 20288., 21064.,
      21584., 22384., 22912., 19448., 19984., 20768., 21312., 22120., 22672.,
      23504., 24064., 20376., 20944., 21760., 22336., 23176., 23760., 24624.,
      25216., 21304., 21904., 22752., 23360., 24232., 24848., 25744., 26368.,
      22232., 22864., 23744., 24384., 25288., 25936., 26864., 27520., 24088.,
      24784., 25728., 26432., 27400., 28112., 29104., 29824., 25016., 25744.,
      26720., 27456., 28456., 29200., 30224., 30976., 25944., 26704., 27712.,
      28480., 29512., 30288., 31344., 32128., 26872., 27664., 28704., 29504.,
      30568., 31376., 32464., 33280., 27800., 28624., 29696., 30528., 31624.,
      32464., 33584., 34432., 29656., 30544., 31680., 32576., 33736., 34640.,
      35824., 36736., 30584., 31504., 32672., 33600., 34792., 35728., 36944.,
      37888., 31512., 32464., 33664., 34624., 35848., 36816., 38064., 39040.,
      32440., 33424., 34656., 35648., 36904., 37904., 39184., 40192., 33368.,
      34384., 35648., 36672., 37960., 38992., 40304., 41344., 35224., 36304.,
      37632., 38720., 40072., 41168., 42544., 43648., 36152., 37264., 38624.,
      39744., 41128., 42256., 43664., 44800., 37080., 38224., 39616., 40768.,
      42184., 43344., 44784., 45952., 38008., 39184., 40608., 41792., 43240.,
      44432., 45904., 47104., 38936., 40144., 41600., 42816., 44296., 45520.,
      47024., 48256.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3336.,  3664.,  3992.,  4320.,  4960.,  5312.,  5664.,  6016.,  6776.,
      7152.,  7528.,  7904.,  8784.,  9184.,  9584.,  9984.,  3894.,  4300.,
      4706.,  5112.,  5956.,  6392.,  6828.,  7264.,  8258.,  8724.,  9190.,
      9656.,  10800., 11296., 11792., 12288., 5148.,  5656.,  6164.,  6672.,
      7648.,  8192.,  8736.,  9280.,  10436., 11016., 11596., 12176., 13512.,
      14128., 14744., 15360., 2670.,  3100.,  3530.,  3960.,  4732.,  5192.,
      5652.,  6112.,  7034.,  7524.,  8014.,  8504.,  9576.,  10096., 10616.,
      11136., 3336.,  3664.,  3992.,  4320.,  4960.,  5312.,  5664.,  6016.,
      6776.,  7152.,  7528.,  7904.,  8784.,  9184.,  9584.,  9984.,  4228.,
      4648.,  5068.,  5488.,  6272.,  6720.,  7168.,  7616.,  8540.,  9016.,
      9492.,  9968.,  11032., 11536., 12040., 12544., 4675.,  5174.,  5673.,
      6172.,  7182.,  7716.,  8250.,  8784.,  9969.,  10538., 11107., 11676.,
      13036., 13640., 14244., 14848., 6126.,  6732.,  7338.,  7944.,  9096.,
      9744.,  10392., 11040., 12402., 13092., 13782., 14472., 16044., 16776.,
      17508., 18240., 3167.,  3678.,  4189.,  4700.,  5610.,  6156.,  6702.,
      7248.,  8333.,  8914.,  9495.,  10076., 11336., 11952., 12568., 13184.,
      3940.,  4328.,  4716.,  5104.,  5856.,  6272.,  6688.,  7104.,  7996.,
      8440.,  8884.,  9328.,  10360., 10832., 11304., 11776., 4832.,  5312.,
      5792.,  6272.,  7168.,  7680.,  8192.,  8704.,  9760.,  10304., 10848.,
      11392., 12608., 13184., 13760., 14336., 5576.,  6160.,  6744.,  7328.,
      8496.,  9120.,  9744.,  10368., 11736., 12400., 13064., 13728., 15296.,
      16000., 16704., 17408., 7248.,  7968.,  8688.,  9408.,  10752., 11520.,
      12288., 13056., 14640., 15456., 16272., 17088., 18912., 19776., 20640.,
      21504., 3944.,  4560.,  5176.,  5792.,  6864.,  7520.,  8176.,  8832.,
      10104., 10800., 11496., 12192., 13664., 14400., 15136., 15872., 4832.,
      5312.,  5792.,  6272.,  7168.,  7680.,  8192.,  8704.,  9760.,  10304.,
      10848., 11392., 12608., 13184., 13760., 14336., 4516.,  4968.,  5420.,
      5872.,  6688.,  7168.,  7648.,  8128.,  9084.,  9592.,  10100., 10608.,
      11704., 12240., 12776., 13312., 5099.,  5638.,  6177.,  6716.,  7766.,
      8340.,  8914.,  9488.,  10713., 11322., 11931., 12540., 13940., 14584.,
      15228., 15872., 6558.,  7212.,  7866.,  8520.,  9720.,  10416., 11112.,
      11808., 13218., 13956., 14694., 15432., 17052., 17832., 18612., 19392.,
      3463.,  4014.,  4565.,  5116.,  6066.,  6652.,  7238.,  7824.,  8949.,
      9570.,  10191., 10812., 12112., 12768., 13424., 14080., 4228.,  4648.,
      5068.,  5488.,  6272.,  6720.,  7168.,  7616.,  8540.,  9016.,  9492.,
      9968.,  11032., 11536., 12040., 12544., 3912.,  4304.,  4696.,  5088.,
      5792.,  6208.,  6624.,  7040.,  7864.,  8304.,  8744.,  9184.,  10128.,
      10592., 11056., 11520., 4470.,  4940.,  5410.,  5880.,  6788.,  7288.,
      7788.,  8288.,  9346.,  9876.,  10406., 10936., 12144., 12704., 13264.,
      13824., 5724.,  6296.,  6868.,  7440.,  8480.,  9088.,  9696.,  10304.,
      11524., 12168., 12812., 13456., 14856., 15536., 16216., 16896., 3246.,
      3740.,  4234.,  4728.,  5564.,  6088.,  6612.,  7136.,  8122.,  8676.,
      9230.,  9784.,  10920., 11504., 12088., 12672., 3912.,  4304.,  4696.,
      5088.,  5792.,  6208.,  6624.,  7040.,  7864.,  8304.,  8744.,  9184.,
      10128., 10592., 11056., 11520.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25592., 25904., 26216., 26528., 27328., 27648., 27968., 28288., 29128.,
      29456., 29784., 30112., 30992., 31328., 31664., 32000., 27416., 27760.,
      28104., 28448., 29280., 29632., 29984., 30336., 31208., 31568., 31928.,
      32288., 33200., 33568., 33936., 34304., 29240., 29616., 29992., 30368.,
      31232., 31616., 32000., 32384., 33288., 33680., 34072., 34464., 35408.,
      35808., 36208., 36608., 31064., 31472., 31880., 32288., 33184., 33600.,
      34016., 34432., 35368., 35792., 36216., 36640., 37616., 38048., 38480.,
      38912., 32888., 33328., 33768., 34208., 35136., 35584., 36032., 36480.,
      37448., 37904., 38360., 38816., 39824., 40288., 40752., 41216., 36536.,
      37040., 37544., 38048., 39040., 39552., 40064., 40576., 41608., 42128.,
      42648., 43168., 44240., 44768., 45296., 45824., 38360., 38896., 39432.,
      39968., 40992., 41536., 42080., 42624., 43688., 44240., 44792., 45344.,
      46448., 47008., 47568., 48128., 40184., 40752., 41320., 41888., 42944.,
      43520., 44096., 44672., 45768., 46352., 46936., 47520., 48656., 49248.,
      49840., 50432., 42008., 42608., 43208., 43808., 44896., 45504., 46112.,
      46720., 47848., 48464., 49080., 49696., 50864., 51488., 52112., 52736.,
      43832., 44464., 45096., 45728., 46848., 47488., 48128., 48768., 49928.,
      50576., 51224., 51872., 53072., 53728., 54384., 55040., 47480., 48176.,
      48872., 49568., 50752., 51456., 52160., 52864., 54088., 54800., 55512.,
      56224., 57488., 58208., 58928., 59648., 34840., 35440., 36040., 36640.,
      37728., 38336., 38944., 39552., 40680., 41296., 41912., 42528., 43696.,
      44320., 44944., 45568., 24248., 24752., 25256., 25760., 26752., 27264.,
      27776., 28288., 29320., 29840., 30360., 30880., 31952., 32480., 33008.,
      33536., 26072., 26608., 27144., 27680., 28704., 29248., 29792., 30336.,
      31400., 31952., 32504., 33056., 34160., 34720., 35280., 35840., 27896.,
      28464., 29032., 29600., 30656., 31232., 31808., 32384., 33480., 34064.,
      34648., 35232., 36368., 36960., 37552., 38144., 31544., 32176., 32808.,
      33440., 34560., 35200., 35840., 36480., 37640., 38288., 38936., 39584.,
      40784., 41440., 42096., 42752., 23000., 23536., 24072., 24608., 25632.,
      26176., 26720., 27264., 28328., 28880., 29432., 29984., 31088., 31648.,
      32208., 32768., 16504., 16944., 17384., 17824., 18752., 19200., 19648.,
      20096., 21064., 21520., 21976., 22432., 23440., 23904., 24368., 24832.,
      18328., 18800., 19272., 19744., 20704., 21184., 21664., 22144., 23144.,
      23632., 24120., 24608., 25648., 26144., 26640., 27136., 20152., 20656.,
      21160., 21664., 22656., 23168., 23680., 24192., 25224., 25744., 26264.,
      26784., 27856., 28384., 28912., 29440., 23800., 24368., 24936., 25504.,
      26560., 27136., 27712., 28288., 29384., 29968., 30552., 31136., 32272.,
      32864., 33456., 34048., 19352., 19824., 20296., 20768., 21728., 22208.,
      22688., 23168., 24168., 24656., 25144., 25632., 26672., 27168., 27664.,
      28160., 16952., 17328., 17704., 18080., 18944., 19328., 19712., 20096.,
      21000., 21392., 21784., 22176., 23120., 23520., 23920., 24320., 18776.,
      19184., 19592., 20000., 20896., 21312., 21728., 22144., 23080., 23504.,
      23928., 24352., 25328., 25760., 26192., 26624., 20600., 21040., 21480.,
      21920., 22848., 23296., 23744., 24192., 25160., 25616., 26072., 26528.,
      27536., 28000., 28464., 28928.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26795., 32466., 38227., 32970., 27635., 34650., 41797., 49000., 42091.,
      35140., 42820., 51464., 60116., 51464., 42820., 35140., 42091., 49000.,
      41797., 34650., 27635., 32970., 38227., 32466., 26795.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1298., 1376., 1454., 1532., 1610., 1844., 1922., 2000., 2078.,
      2156., 2390., 2468., 2546., 2624., 2702., 2936., 3014., 3092.,
      3170., 3248., 3482., 3560., 3638., 3716., 3794.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19759., 20374., 24240., 24996., 28703., 29606., 25084., 25876., 21571.,
      22246., 27180., 28020., 33221., 34250., 39175., 40400., 34087., 35158.,
      29178., 30088., 35196., 36296., 42832., 44176., 50284., 51880., 43552.,
      44944., 37100., 38280., 30667., 31752., 37547., 38870., 44208., 45776.,
      38517., 39882., 33137., 34292., 28763., 29798., 35496., 36756., 42003.,
      43494., 36884., 38180., 32079., 33174.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2446., 2596., 2590., 2752., 2734., 2908., 2878., 3064., 3022., 3220.,
      3454., 3688., 3598., 3844., 3742., 4000., 3886., 4156., 4030., 4312.,
      4462., 4780., 4606., 4936., 4750., 5092., 4894., 5248., 5038., 5404.,
      5470., 5872., 5614., 6028., 5758., 6184., 5902., 6340., 6046., 6496.,
      6478., 6964., 6622., 7120., 6766., 7276., 6910., 7432., 7054., 7588.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18487., 19102., 19717., 20332., 22380., 23136., 23892., 24648., 26039.,
      26942., 27845., 28748., 23904., 24696., 25488., 26280., 19939., 20614.,
      21289., 21964., 25040., 25880., 26720., 27560., 30661., 31690., 32719.,
      33748., 35909., 37134., 38359., 39584., 32671., 33742., 34813., 35884.,
      27302., 28212., 29122., 30032., 32748., 33848., 34948., 36048., 40160.,
      41504., 42848., 44192., 47004., 48600., 50196., 51792., 42320., 43712.,
      45104., 46496., 35260., 36440., 37620., 38800., 34521., 35606., 36691.,
      37776., 43051., 44374., 45697., 47020., 51008., 52576., 54144., 55712.,
      46549., 47914., 49279., 50644., 39263., 40418., 41573., 42728., 28843.,
      29878., 30913., 31948., 36260., 37520., 38780., 40040., 43091., 44582.,
      46073., 47564., 37080., 38376., 39672., 40968., 31831., 32926., 34021.,
      35116.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4742.,  4892.,  5042.,  5192.,  5018.,  5180.,  5342.,  5504.,  5294.,
      5468.,  5642.,  5816.,  5570.,  5756.,  5942.,  6128.,  5846.,  6044.,
      6242.,  6440.,  6674.,  6908.,  7142.,  7376.,  6950.,  7196.,  7442.,
      7688.,  7226.,  7484.,  7742.,  8000.,  7502.,  7772.,  8042.,  8312.,
      7778.,  8060.,  8342.,  8624.,  8606.,  8924.,  9242.,  9560.,  8882.,
      9212.,  9542.,  9872.,  9158.,  9500.,  9842.,  10184., 9434.,  9788.,
      10142., 10496., 9710.,  10076., 10442., 10808., 10538., 10940., 11342.,
      11744., 10814., 11228., 11642., 12056., 11090., 11516., 11942., 12368.,
      11366., 11804., 12242., 12680., 11642., 12092., 12542., 12992., 12470.,
      12956., 13442., 13928., 12746., 13244., 13742., 14240., 13022., 13532.,
      14042., 14552., 13298., 13820., 14342., 14864., 13574., 14108., 14642.,
      15176.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22638., 24492., 27044., 29256., 31682., 34252., 28036., 30248., 24462.,
      26316., 28981., 31080., 35914., 38420., 43071., 45984., 38626., 41132.,
      34269., 36368., 41064., 43408., 51504., 54304., 62104., 65360., 51504.,
      54304., 41064., 43408., 34269., 36368., 38626., 41132., 43071., 45984.,
      35914., 38420., 28981., 31080., 24462., 26316., 28036., 30248., 31682.,
      34252., 27044., 29256., 22638., 24492.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4748.,  5192.,  5036.,  5504.,  5324.,  5816.,  5612.,  6128.,  5900.,
      6440.,  6764.,  7376.,  7052.,  7688.,  7340.,  8000.,  7628.,  8312.,
      7916.,  8624.,  8780.,  9560.,  9068.,  9872.,  9356.,  10184., 9644.,
      10496., 9932.,  10808., 10796., 11744., 11084., 12056., 11372., 12368.,
      11660., 12680., 11948., 12992., 12812., 13928., 13100., 14240., 13388.,
      14552., 13676., 14864., 13964., 15176.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29356., 30172., 31882., 32728., 32452., 33416., 35496., 36496., 35616.,
      36740., 39178., 40344., 30012., 30984., 33120., 34128., 24628., 25436.,
      27218., 28056., 25789., 26730., 28800., 29776., 31220., 32340., 34846.,
      36008., 36701., 38014., 40942., 42304., 33104., 34244., 36794., 37976.,
      28865., 29818., 31940., 32928., 33632., 34768., 37128., 38304., 43344.,
      44704., 47552., 48960., 52976., 54576., 57896., 59552., 44784., 46176.,
      49056., 50496., 35200., 36368., 38760., 39968., 33187., 34298., 36518.,
      37664., 40024., 41348., 44034., 45400., 46767., 48318., 51456., 53056.,
      41812., 43156., 45886., 47272., 34567., 35690., 37962., 39120., 26148.,
      27164., 29058., 30104., 33876., 35080., 37368., 38608., 41480., 42884.,
      45554., 47000., 36236., 37448., 39728., 40976., 31724., 32732., 34634.,
      35672.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9208.,  9496.,  10084., 10384., 9760.,  10072., 10684., 11008., 10312.,
      10648., 11284., 11632., 10864., 11224., 11884., 12256., 11416., 11800.,
      12484., 12880., 13072., 13528., 14284., 14752., 13624., 14104., 14884.,
      15376., 14176., 14680., 15484., 16000., 14728., 15256., 16084., 16624.,
      15280., 15832., 16684., 17248., 16936., 17560., 18484., 19120., 17488.,
      18136., 19084., 19744., 18040., 18712., 19684., 20368., 18592., 19288.,
      20284., 20992., 19144., 19864., 20884., 21616., 20800., 21592., 22684.,
      23488., 21352., 22168., 23284., 24112., 21904., 22744., 23884., 24736.,
      22456., 23320., 24484., 25360., 23008., 23896., 25084., 25984., 24664.,
      25624., 26884., 27856., 25216., 26200., 27484., 28480., 25768., 26776.,
      28084., 29104., 26320., 27352., 28684., 29728., 26872., 27928., 29284.,
      30352.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27176., 27992., 28808., 29624., 31430., 32276., 33122., 33968., 30212.,
      31176., 32140., 33104., 35304., 36304., 37304., 38304., 32988., 34112.,
      35236., 36360., 38918., 40084., 41250., 42416., 29228., 30200., 31172.,
      32144., 34384., 35392., 36400., 37408., 26624., 27432., 28240., 29048.,
      30942., 31780., 32618., 33456., 28045., 28986., 29927., 30868., 32944.,
      33920., 34896., 35872., 36424., 37544., 38664., 39784., 42290., 43452.,
      44614., 45776., 40345., 41658., 42971., 44284., 47242., 48604., 49966.,
      51328., 34412., 35552., 36692., 37832., 40406., 41588., 42770., 43952.,
      28937., 29890., 30843., 31796., 33964., 34952., 35940., 36928., 32400.,
      33536., 34672., 35808., 38264., 39440., 40616., 41792., 41616., 42976.,
      44336., 45696., 48640., 50048., 51456., 52864., 51104., 52704., 54304.,
      55904., 59352., 61008., 62664., 64320., 42800., 44192., 45584., 46976.,
      49952., 51392., 52832., 54272., 34352., 35520., 36688., 37856., 40344.,
      41552., 42760., 43968., 28591., 29702., 30813., 31924., 34130., 35276.,
      36422., 37568., 36676., 38000., 39324., 40648., 43310., 44676., 46042.,
      47408., 45903., 47454., 49005., 50556., 53696., 55296., 56896., 58496.,
      42664., 44008., 45352., 46696., 49426., 50812., 52198., 53584., 34283.,
      35406., 36529., 37652., 39950., 41108., 42266., 43424., 24976., 25992.,
      27008., 28024., 29934., 30980., 32026., 33072., 30836., 32040., 33244.,
      34448., 36760., 38000., 39240., 40480., 38804., 40208., 41612., 43016.,
      45758., 47204., 48650., 50096., 34332., 35544., 36756., 37968., 40320.,
      41568., 42816., 44064., 31720., 32728., 33736., 34744., 36742., 37780.,
      38818., 39856.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18128., 18416., 18704., 18992., 19868., 20168., 20468., 20768., 19208.,
      19520., 19832., 20144., 21044., 21368., 21692., 22016., 20288., 20624.,
      20960., 21296., 22220., 22568., 22916., 23264., 21368., 21728., 22088.,
      22448., 23396., 23768., 24140., 24512., 22448., 22832., 23216., 23600.,
      24572., 24968., 25364., 25760., 25688., 26144., 26600., 27056., 28100.,
      28568., 29036., 29504., 26768., 27248., 27728., 28208., 29276., 29768.,
      30260., 30752., 27848., 28352., 28856., 29360., 30452., 30968., 31484.,
      32000., 28928., 29456., 29984., 30512., 31628., 32168., 32708., 33248.,
      30008., 30560., 31112., 31664., 32804., 33368., 33932., 34496., 33248.,
      33872., 34496., 35120., 36332., 36968., 37604., 38240., 34328., 34976.,
      35624., 36272., 37508., 38168., 38828., 39488., 35408., 36080., 36752.,
      37424., 38684., 39368., 40052., 40736., 36488., 37184., 37880., 38576.,
      39860., 40568., 41276., 41984., 37568., 38288., 39008., 39728., 41036.,
      41768., 42500., 43232., 40808., 41600., 42392., 43184., 44564., 45368.,
      46172., 46976., 41888., 42704., 43520., 44336., 45740., 46568., 47396.,
      48224., 42968., 43808., 44648., 45488., 46916., 47768., 48620., 49472.,
      44048., 44912., 45776., 46640., 48092., 48968., 49844., 50720., 45128.,
      46016., 46904., 47792., 49268., 50168., 51068., 51968., 48368., 49328.,
      50288., 51248., 52796., 53768., 54740., 55712., 49448., 50432., 51416.,
      52400., 53972., 54968., 55964., 56960., 50528., 51536., 52544., 53552.,
      55148., 56168., 57188., 58208., 51608., 52640., 53672., 54704., 56324.,
      57368., 58412., 59456., 52688., 53744., 54800., 55856., 57500., 58568.,
      59636., 60704.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9750.,  10680., 11670., 12720., 8884.,  10000., 11188., 12448., 8690.,
      9992.,  11378., 12848., 6580.,  7696.,  8884.,  10144., 5398.,  6328.,
      7318.,  8368.,  8855.,  9940.,  11095., 12320., 13202., 14504., 15890.,
      17360., 12173., 13692., 15309., 17024., 8690.,  9992.,  11378., 12848.,
      6455.,  7540.,  8695.,  9920.,  8520.,  9760.,  11080., 12480., 12144.,
      13632., 15216., 16896., 17304., 19040., 20888., 22848., 12144., 13632.,
      15216., 16896., 8520.,  9760.,  11080., 12480., 6455.,  7540.,  8695.,
      9920.,  8690.,  9992.,  11378., 12848., 12173., 13692., 15309., 17024.,
      13202., 14504., 15890., 17360., 8855.,  9940.,  11095., 12320., 5398.,
      6328.,  7318.,  8368.,  6580.,  7696.,  8884.,  10144., 8690.,  9992.,
      11378., 12848., 8884.,  10000., 11188., 12448., 9750.,  10680., 11670.,
      12720.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18140., 18992., 19868., 20768., 19244., 20144., 21068., 22016., 20348.,
      21296., 22268., 23264., 21452., 22448., 23468., 24512., 22556., 23600.,
      24668., 25760., 25868., 27056., 28268., 29504., 26972., 28208., 29468.,
      30752., 28076., 29360., 30668., 32000., 29180., 30512., 31868., 33248.,
      30284., 31664., 33068., 34496., 33596., 35120., 36668., 38240., 34700.,
      36272., 37868., 39488., 35804., 37424., 39068., 40736., 36908., 38576.,
      40268., 41984., 38012., 39728., 41468., 43232., 41324., 43184., 45068.,
      46976., 42428., 44336., 46268., 48224., 43532., 45488., 47468., 49472.,
      44636., 46640., 48668., 50720., 45740., 47792., 49868., 51968., 49052.,
      51248., 53468., 55712., 50156., 52400., 54668., 56960., 51260., 53552.,
      55868., 58208., 52364., 54704., 57068., 59456., 53468., 55856., 58268.,
      60704.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7562.,  8012.,  8912.,  9392.,  10382., 10892., 11972., 12512., 6532.,
      7048.,  8120.,  8672.,  9852.,  10440., 11728., 12352., 6982.,  7588.,
      8840.,  9488.,  10866., 11556., 13060., 13792., 6388.,  6888.,  7944.,
      8480.,  9644.,  10216., 11488., 12096., 6362.,  6764.,  7616.,  8048.,
      8990.,  9452.,  10484., 10976., 6647.,  7182.,  8238.,  8808.,  9969.,
      10574., 11840., 12480., 10126., 10756., 12016., 12688., 14074., 14788.,
      16300., 17056., 9001.,  9722.,  11190., 11960., 13575., 14394., 16156.,
      17024., 6982.,  7588.,  8840.,  9488.,  10866., 11556., 13060., 13792.,
      6303.,  6798.,  7830.,  8360.,  9497.,  10062., 11304., 11904., 6840.,
      7440.,  8640.,  9280.,  10600., 11280., 12720., 13440., 8976.,  9696.,
      11136., 11904., 13488., 14304., 16032., 16896., 13160., 14000., 15680.,
      16576., 18424., 19376., 21392., 22400., 8976.,  9696.,  11136., 11904.,
      13488., 14304., 16032., 16896., 6840.,  7440.,  8640.,  9280.,  10600.,
      11280., 12720., 13440., 6723.,  7278.,  8346.,  8936.,  10109., 10734.,
      12012., 12672., 7126.,  7780.,  9048.,  9744.,  11138., 11876., 13396.,
      14176., 9005.,  9754.,  11226., 12024., 13643., 14490., 16256., 17152.,
      10126., 10756., 12016., 12688., 14074., 14788., 16300., 17056., 6507.,
      7022.,  8066.,  8616.,  9765.,  10350., 11604., 12224., 7610.,  8108.,
      9056.,  9584.,  10622., 11180., 12308., 12896., 6948.,  7528.,  8632.,
      9248.,  10460., 11112., 12432., 13120., 7126.,  7780.,  9048.,  9744.,
      11138., 11876., 13396., 14176., 6676.,  7240.,  8328.,  8928.,  10124.,
      10760., 12064., 12736., 7562.,  8012.,  8912.,  9392.,  10382., 10892.,
      11972., 12512.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35716., 36280., 37408., 37984., 39148., 39736., 40936., 41536., 37876.,
      38488., 39664., 40288., 41500., 42136., 43384., 44032., 40036., 40696.,
      41920., 42592., 43852., 44536., 45832., 46528., 42196., 42904., 44176.,
      44896., 46204., 46936., 48280., 49024., 44356., 45112., 46432., 47200.,
      48556., 49336., 50728., 51520., 50836., 51736., 53200., 54112., 55612.,
      56536., 58072., 59008., 52996., 53944., 55456., 56416., 57964., 58936.,
      60520., 61504., 43764., 44632., 46064., 46944., 48412., 49304., 50808.,
      51712., 35556., 36344., 37696., 38496., 39884., 40696., 42120., 42944.,
      28372., 29080., 30352., 31072., 32380., 33112., 34456., 35200., 34852.,
      35704., 37120., 37984., 39436., 40312., 41800., 42688., 37012., 37912.,
      39376., 40288., 41788., 42712., 44248., 45184., 30852., 31672., 33056.,
      33888., 35308., 36152., 37608., 38464., 25716., 26456., 27760., 28512.,
      29852., 30616., 31992., 32768., 21604., 22264., 23488., 24160., 25420.,
      26104., 27400., 28096., 28084., 28888., 30256., 31072., 32476., 33304.,
      34744., 35584., 30244., 31096., 32512., 33376., 34828., 35704., 37192.,
      38080., 27156., 27928., 29264., 30048., 31420., 32216., 33624., 34432.,
      25092., 25784., 27040., 27744., 29036., 29752., 31080., 31808., 24052.,
      24664., 25840., 26464., 27676., 28312., 29560., 30208., 30532., 31288.,
      32608., 33376., 34732., 35512., 36904., 37696., 32692., 33496., 34864.,
      35680., 37084., 37912., 39352., 40192., 32676., 33400., 34688., 35424.,
      36748., 37496., 38856., 39616., 33684., 34328., 35536., 36192., 37436.,
      38104., 39384., 40064., 35716., 36280., 37408., 37984., 39148., 39736.,
      40936., 41536.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4722.,  5172.,  5622.,  6072.,  6912.,  7392.,  7872.,  8352.,  9342.,
      9852.,  10362., 10872., 12012., 12552., 13092., 13632., 3876.,  4392.,
      4908.,  5424.,  6408.,  6960.,  7512.,  8064.,  9228.,  9816.,  10404.,
      10992., 12336., 12960., 13584., 14208., 6126.,  6732.,  7338.,  7944.,
      9096.,  9744.,  10392., 11040., 12402., 13092., 13782., 14472., 16044.,
      16776., 17508., 18240., 3988.,  4488.,  4988.,  5488.,  6456.,  6992.,
      7528.,  8064.,  9212.,  9784.,  10356., 10928., 12256., 12864., 13472.,
      14080., 4034.,  4436.,  4838.,  5240.,  6032.,  6464.,  6896.,  7328.,
      8270.,  8732.,  9194.,  9656.,  10748., 11240., 11732., 12224., 4279.,
      4814.,  5349.,  5884.,  6882.,  7452.,  8022.,  8592.,  9765.,  10370.,
      10975., 11580., 12928., 13568., 14208., 14848., 6534.,  7164.,  7794.,
      8424.,  9600.,  10272., 10944., 11616., 13002., 13716., 14430., 15144.,
      16740., 17496., 18252., 19008., 5729.,  6450.,  7171.,  7892.,  9258.,
      10028., 10798., 11568., 13179., 13998., 14817., 15636., 17492., 18360.,
      19228., 20096., 6126.,  6732.,  7338.,  7944.,  9096.,  9744.,  10392.,
      11040., 12402., 13092., 13782., 14472., 16044., 16776., 17508., 18240.,
      3983.,  4478.,  4973.,  5468.,  6426.,  6956.,  7486.,  8016.,  9149.,
      9714.,  10279., 10844., 12152., 12752., 13352., 13952., 6040.,  6640.,
      7240.,  7840.,  8960.,  9600.,  10240., 10880., 12200., 12880., 13560.,
      14240., 15760., 16480., 17200., 17920., 5712.,  6432.,  7152.,  7872.,
      9216.,  9984.,  10752., 11520., 13104., 13920., 14736., 15552., 17376.,
      18240., 19104., 19968., 8456.,  9296.,  10136., 10976., 12544., 13440.,
      14336., 15232., 17080., 18032., 18984., 19936., 22064., 23072., 24080.,
      25088., 5712.,  6432.,  7152.,  7872.,  9216.,  9984.,  10752., 11520.,
      13104., 13920., 14736., 15552., 17376., 18240., 19104., 19968., 6040.,
      6640.,  7240.,  7840.,  8960.,  9600.,  10240., 10880., 12200., 12880.,
      13560., 14240., 15760., 16480., 17200., 17920., 4283.,  4838.,  5393.,
      5948.,  6950.,  7540.,  8130.,  8720.,  9897.,  10522., 11147., 11772.,
      13124., 13784., 14444., 15104., 6558.,  7212.,  7866.,  8520.,  9720.,
      10416., 11112., 11808., 13218., 13956., 14694., 15432., 17052., 17832.,
      18612., 19392., 5741.,  6490.,  7239.,  7988.,  9366.,  10164., 10962.,
      11760., 13383., 14230., 15077., 15924., 17792., 18688., 19584., 20480.,
      6534.,  7164.,  7794.,  8424.,  9600.,  10272., 10944., 11616., 13002.,
      13716., 14430., 15144., 16740., 17496., 18252., 19008., 3859.,  4374.,
      4889.,  5404.,  6366.,  6916.,  7466.,  8016.,  9153.,  9738.,  10323.,
      10908., 12220., 12840., 13460., 14080., 4898.,  5396.,  5894.,  6392.,
      7280.,  7808.,  8336.,  8864.,  9902.,  10460., 11018., 11576., 12764.,
      13352., 13940., 14528., 4708.,  5288.,  5868.,  6448.,  7496.,  8112.,
      8728.,  9344.,  10572., 11224., 11876., 12528., 13936., 14624., 15312.,
      16000., 6558.,  7212.,  7866.,  8520.,  9720.,  10416., 11112., 11808.,
      13218., 13956., 14694., 15432., 17052., 17832., 18612., 19392., 4308.,
      4872.,  5436.,  6000.,  7032.,  7632.,  8232.,  8832.,  10044., 10680.,
      11316., 11952., 13344., 14016., 14688., 15360., 4722.,  5172.,  5622.,
      6072.,  6912.,  7392.,  7872.,  8352.,  9342.,  9852.,  10362., 10872.,
      12012., 12552., 13092., 13632.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9940.,  10248., 10556., 10864., 11520., 11840., 12160., 12480., 13196.,
      13528., 13860., 14192., 14968., 15312., 15656., 16000., 8004.,  8296.,
      8588.,  8880.,  9520.,  9824.,  10128., 10432., 11132., 11448., 11764.,
      12080., 12840., 13168., 13496., 13824., 7092.,  7368.,  7644.,  7920.,
      8544.,  8832.,  9120.,  9408.,  10092., 10392., 10692., 10992., 11736.,
      12048., 12360., 12672., 8292.,  8616.,  8940.,  9264.,  9936.,  10272.,
      10608., 10944., 11676., 12024., 12372., 12720., 13512., 13872., 14232.,
      14592., 9492.,  9864.,  10236., 10608., 11328., 11712., 12096., 12480.,
      13260., 13656., 14052., 14448., 15288., 15696., 16104., 16512., 12004.,
      12456., 12908., 13360., 14160., 14624., 15088., 15552., 16412., 16888.,
      17364., 17840., 18760., 19248., 19736., 20224., 13140., 13576., 14012.,
      14448., 15232., 15680., 16128., 16576., 17420., 17880., 18340., 18800.,
      19704., 20176., 20648., 21120., 8068.,  8424.,  8780.,  9136.,  9840.,
      10208., 10576., 10944., 11708., 12088., 12468., 12848., 13672., 14064.,
      14456., 14848., 7156.,  7496.,  7836.,  8176.,  8864.,  9216.,  9568.,
      9920.,  10668., 11032., 11396., 11760., 12568., 12944., 13320., 13696.,
      7268.,  7592.,  7916.,  8240.,  8912.,  9248.,  9584.,  9920.,  10652.,
      11000., 11348., 11696., 12488., 12848., 13208., 13568., 8756.,  9160.,
      9564.,  9968.,  10720., 11136., 11552., 11968., 12780., 13208., 13636.,
      14064., 14936., 15376., 15816., 16256., 8868.,  9256.,  9644.,  10032.,
      10768., 11168., 11568., 11968., 12764., 13176., 13588., 14000., 14856.,
      15280., 15704., 16128., 9940.,  10248., 10556., 10864., 11520., 11840.,
      12160., 12480., 13196., 13528., 13860., 14192., 14968., 15312., 15656.,
      16000., 8004.,  8296.,  8588.,  8880.,  9520.,  9824.,  10128., 10432.,
      11132., 11448., 11764., 12080., 12840., 13168., 13496., 13824., 7092.,
      7368.,  7644.,  7920.,  8544.,  8832.,  9120.,  9408.,  10092., 10392.,
      10692., 10992., 11736., 12048., 12360., 12672., 10692., 11112., 11532.,
      11952., 12720., 13152., 13584., 14016., 14844., 15288., 15732., 16176.,
      17064., 17520., 17976., 18432., 11892., 12360., 12828., 13296., 14112.,
      14592., 15072., 15552., 16428., 16920., 17412., 17904., 18840., 19344.,
      19848., 20352., 12004., 12456., 12908., 13360., 14160., 14624., 15088.,
      15552., 16412., 16888., 17364., 17840., 18760., 19248., 19736., 20224.,
      13140., 13576., 14012., 14448., 15232., 15680., 16128., 16576., 17420.,
      17880., 18340., 18800., 19704., 20176., 20648., 21120., 8068.,  8424.,
      8780.,  9136.,  9840.,  10208., 10576., 10944., 11708., 12088., 12468.,
      12848., 13672., 14064., 14456., 14848., 8468.,  8840.,  9212.,  9584.,
      10304., 10688., 11072., 11456., 12236., 12632., 13028., 13424., 14264.,
      14672., 15080., 15488., 9668.,  10088., 10508., 10928., 11696., 12128.,
      12560., 12992., 13820., 14264., 14708., 15152., 16040., 16496., 16952.,
      17408., 8756.,  9160.,  9564.,  9968.,  10720., 11136., 11552., 11968.,
      12780., 13208., 13636., 14064., 14936., 15376., 15816., 16256., 8868.,
      9256.,  9644.,  10032., 10768., 11168., 11568., 11968., 12764., 13176.,
      13588., 14000., 14856., 15280., 15704., 16128., 9940.,  10248., 10556.,
      10864., 11520., 11840., 12160., 12480., 13196., 13528., 13860., 14192.,
      14968., 15312., 15656., 16000.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7950.,  9464.,  11016., 9688.,  8334.,  11467., 13552., 15668., 13720.,
      11755., 17000., 19936., 22880., 19936., 17000., 11755., 13720., 15668.,
      13552., 11467., 8334.,  9688.,  11016., 9464.,  7950.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2632., 2768., 2904., 3040., 3176., 3720., 3856., 3992., 4128.,
      4264., 4808., 4944., 5080., 5216., 5352., 5896., 6032., 6168.,
      6304., 6440., 6984., 7120., 7256., 7392., 7528.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9678.,  10140., 11200., 11760., 12664., 13328., 10710., 11312., 8838.,
      9372.,  10451., 11030., 12068., 12768., 13612., 14440., 11459., 12208.,
      9407.,  10070., 15208., 15952., 17472., 18368., 19616., 20672., 16520.,
      17472., 13576., 14416., 11555., 12278., 13132., 14000., 14572., 15592.,
      12075., 12992., 9743.,  10550., 13134., 13788., 15008., 15792., 16760.,
      17680., 14070., 14896., 11526., 12252.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5032.,  5264.,  5288.,  5536.,  5544.,  5808.,  5800.,  6080.,  6056.,
      6352.,  7080.,  7440.,  7336.,  7712.,  7592.,  7984.,  7848.,  8256.,
      8104.,  8528.,  9128.,  9616.,  9384.,  9888.,  9640.,  10160., 9896.,
      10432., 10152., 10704., 11176., 11792., 11432., 12064., 11688., 12336.,
      11944., 12608., 12200., 12880., 13224., 13968., 13480., 14240., 13736.,
      14512., 13992., 14784., 14248., 15056.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9198.,  9660.,  10122., 10584., 10192., 10752., 11312., 11872., 10968.,
      11632., 12296., 12960., 8498.,  9100.,  9702.,  10304., 6294.,  6828.,
      7362.,  7896.,  11491., 12070., 12649., 13228., 12684., 13384., 14084.,
      14784., 13596., 14424., 15252., 16080., 10521., 11270., 12019., 12768.,
      7783.,  8446.,  9109.,  9772.,  14696., 15440., 16184., 16928., 16128.,
      17024., 17920., 18816., 17184., 18240., 19296., 20352., 13272., 14224.,
      15176., 16128., 9800.,  10640., 11480., 12320., 14227., 14950., 15673.,
      16396., 15540., 16408., 17276., 18144., 16476., 17496., 18516., 19536.,
      12705., 13622., 14539., 15456., 9367.,  10174., 10981., 11788., 12846.,
      13500., 14154., 14808., 14000., 14784., 15568., 16352., 14808., 15728.,
      16648., 17568., 11410., 12236., 13062., 13888., 8406.,  9132.,  9858.,
      10584.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9832.,  10064., 10296., 10528., 10328., 10576., 10824., 11072., 10824.,
      11088., 11352., 11616., 11320., 11600., 11880., 12160., 11816., 12112.,
      12408., 12704., 13800., 14160., 14520., 14880., 14296., 14672., 15048.,
      15424., 14792., 15184., 15576., 15968., 15288., 15696., 16104., 16512.,
      15784., 16208., 16632., 17056., 17768., 18256., 18744., 19232., 18264.,
      18768., 19272., 19776., 18760., 19280., 19800., 20320., 19256., 19792.,
      20328., 20864., 19752., 20304., 20856., 21408., 21736., 22352., 22968.,
      23584., 22232., 22864., 23496., 24128., 22728., 23376., 24024., 24672.,
      23224., 23888., 24552., 25216., 23720., 24400., 25080., 25760., 25704.,
      26448., 27192., 27936., 26200., 26960., 27720., 28480., 26696., 27472.,
      28248., 29024., 27192., 27984., 28776., 29568., 27688., 28496., 29304.,
      30112.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11796., 12984., 14070., 15456., 16368., 17952., 14070., 15456., 11796.,
      12984., 8194.,  9580.,  10031., 11648., 11928., 13776., 10255., 11872.,
      8578.,  9964.,  15728., 17312., 18760., 20608., 21824., 23936., 18760.,
      20608., 15728., 17312., 8578.,  9964.,  10255., 11872., 11928., 13776.,
      10031., 11648., 8194.,  9580.,  11796., 12984., 14070., 15456., 16368.,
      17952., 14070., 15456., 11796., 12984.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9808.,  10528., 10320., 11072., 10832., 11616., 11344., 12160., 11856.,
      12704., 13904., 14880., 14416., 15424., 14928., 15968., 15440., 16512.,
      15952., 17056., 18000., 19232., 18512., 19776., 19024., 20320., 19536.,
      20864., 20048., 21408., 22096., 23584., 22608., 24128., 23120., 24672.,
      23632., 25216., 24144., 25760., 26192., 27936., 26704., 28480., 27216.,
      29024., 27728., 29568., 28240., 30112.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10416., 10920., 12180., 12720., 12054., 12684., 14112., 14784., 13536.,
      14304., 15888., 16704., 10626., 11340., 12684., 13440., 7968.,  8616.,
      9732.,  10416., 11240., 11780., 13202., 13784., 13111., 13790., 15400.,
      16128., 14832., 15664., 17448., 18336., 11669., 12446., 13958., 14784.,
      8768.,  9476.,  10730., 11480., 13888., 14560., 16240., 16960., 16072.,
      16912., 18816., 19712., 18048., 19072., 21184., 22272., 14168., 15120.,
      16912., 17920., 10624., 11488., 12976., 13888., 13064., 13700., 15218.,
      15896., 15015., 15806., 17528., 18368., 16752., 17712., 19624., 20640.,
      13125., 14014., 15638., 16576., 9824.,  10628., 11978., 12824., 10416.,
      10920., 12180., 12720., 12054., 12684., 14112., 14784., 13536., 14304.,
      15888., 16704., 10626., 11340., 12684., 13440., 7968.,  8616.,  9732.,
      10416.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19168., 19616., 20592., 21056., 20160., 20640., 21648., 22144., 21152.,
      21664., 22704., 23232., 22144., 22688., 23760., 24320., 23136., 23712.,
      24816., 25408., 27104., 27808., 29040., 29760., 28096., 28832., 30096.,
      30848., 29088., 29856., 31152., 31936., 30080., 30880., 32208., 33024.,
      31072., 31904., 33264., 34112., 35040., 36000., 37488., 38464., 36032.,
      37024., 38544., 39552., 37024., 38048., 39600., 40640., 38016., 39072.,
      40656., 41728., 39008., 40096., 41712., 42816., 42976., 44192., 45936.,
      47168., 43968., 45216., 46992., 48256., 44960., 46240., 48048., 49344.,
      45952., 47264., 49104., 50432., 46944., 48288., 50160., 51520., 50912.,
      52384., 54384., 55872., 51904., 53408., 55440., 56960., 52896., 54432.,
      56496., 58048., 53888., 55456., 57552., 59136., 54880., 56480., 58608.,
      60224.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8040.,  8544.,  9048.,  9552.,  10764., 11304., 11844., 12384., 9654.,
      10284., 10914., 11544., 12960., 13632., 14304., 14976., 10944., 11712.,
      12480., 13248., 14832., 15648., 16464., 17280., 8442.,  9156.,  9870.,
      10584., 11940., 12696., 13452., 14208., 6840.,  7488.,  8136.,  8784.,
      9948.,  10632., 11316., 12000., 8628.,  9168.,  9708.,  10248., 11614.,
      12196., 12778., 13360., 10439., 11118., 11797., 12476., 14072., 14800.,
      15528., 16256., 11936., 12768., 13600., 14432., 16216., 17104., 17992.,
      18880., 9217.,  9994.,  10771., 11548., 13074., 13900., 14726., 15552.,
      7484.,  8192.,  8900.,  9608.,  10918., 11668., 12418., 13168., 10720.,
      11392., 12064., 12736., 14352., 15072., 15792., 16512., 12872., 13712.,
      14552., 15392., 17280., 18176., 19072., 19968., 14592., 15616., 16640.,
      17664., 19776., 20864., 21952., 23040., 11256., 12208., 13160., 14112.,
      15920., 16928., 17936., 18944., 9120.,  9984.,  10848., 11712., 13264.,
      14176., 15088., 16000., 10132., 10768., 11404., 12040., 13502., 14180.,
      14858., 15536., 12087., 12878., 13669., 14460., 16168., 17008., 17848.,
      18688., 13600., 14560., 15520., 16480., 18392., 19408., 20424., 21440.,
      10481., 11370., 12259., 13148., 14786., 15724., 16662., 17600., 8476.,
      9280.,  10084., 10888., 12294., 13140., 13986., 14832., 8040.,  8544.,
      9048.,  9552.,  10764., 11304., 11844., 12384., 9654.,  10284., 10914.,
      11544., 12960., 13632., 14304., 14976., 10944., 11712., 12480., 13248.,
      14832., 15648., 16464., 17280., 8442.,  9156.,  9870.,  10584., 11940.,
      12696., 13452., 14208., 6840.,  7488.,  8136.,  8784.,  9948.,  10632.,
      11316., 12000.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15360., 15808., 16256., 16704., 17680., 18144., 18608., 19072., 16288.,
      16768., 17248., 17728., 18736., 19232., 19728., 20224., 17216., 17728.,
      18240., 18752., 19792., 20320., 20848., 21376., 18144., 18688., 19232.,
      19776., 20848., 21408., 21968., 22528., 19072., 19648., 20224., 20800.,
      21904., 22496., 23088., 23680., 11264., 11712., 12160., 12608., 13584.,
      14048., 14512., 14976., 12192., 12672., 13152., 13632., 14640., 15136.,
      15632., 16128., 13120., 13632., 14144., 14656., 15696., 16224., 16752.,
      17280., 14048., 14592., 15136., 15680., 16752., 17312., 17872., 18432.,
      14976., 15552., 16128., 16704., 17808., 18400., 18992., 19584., 15360.,
      15808., 16256., 16704., 17680., 18144., 18608., 19072., 16288., 16768.,
      17248., 17728., 18736., 19232., 19728., 20224., 17216., 17728., 18240.,
      18752., 19792., 20320., 20848., 21376., 18144., 18688., 19232., 19776.,
      20848., 21408., 21968., 22528., 19072., 19648., 20224., 20800., 21904.,
      22496., 23088., 23680., 11264., 11712., 12160., 12608., 13584., 14048.,
      14512., 14976., 12192., 12672., 13152., 13632., 14640., 15136., 15632.,
      16128., 13120., 13632., 14144., 14656., 15696., 16224., 16752., 17280.,
      14048., 14592., 15136., 15680., 16752., 17312., 17872., 18432., 14976.,
      15552., 16128., 16704., 17808., 18400., 18992., 19584., 15360., 15808.,
      16256., 16704., 17680., 18144., 18608., 19072., 16288., 16768., 17248.,
      17728., 18736., 19232., 19728., 20224., 17216., 17728., 18240., 18752.,
      19792., 20320., 20848., 21376., 18144., 18688., 19232., 19776., 20848.,
      21408., 21968., 22528., 19072., 19648., 20224., 20800., 21904., 22496.,
      23088., 23680.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9204.,  10320., 11508., 12768., 11970., 13272., 14658., 16128., 14832.,
      16320., 17904., 19584., 11970., 13272., 14658., 16128., 9204.,  10320.,
      11508., 12768., 10738., 12040., 13426., 14896., 13965., 15484., 17101.,
      18816., 17304., 19040., 20888., 22848., 13965., 15484., 17101., 18816.,
      10738., 12040., 13426., 14896., 12272., 13760., 15344., 17024., 15960.,
      17696., 19544., 21504., 19776., 21760., 23872., 26112., 15960., 17696.,
      19544., 21504., 12272., 13760., 15344., 17024., 10738., 12040., 13426.,
      14896., 13965., 15484., 17101., 18816., 17304., 19040., 20888., 22848.,
      13965., 15484., 17101., 18816., 10738., 12040., 13426., 14896., 9204.,
      10320., 11508., 12768., 11970., 13272., 14658., 16128., 14832., 16320.,
      17904., 19584., 11970., 13272., 14658., 16128., 9204.,  10320., 11508.,
      12768.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37840., 39232., 40656., 42112., 39824., 41280., 42768., 44288., 41808.,
      43328., 44880., 46464., 43792., 45376., 46992., 48640., 45776., 47424.,
      49104., 50816., 25552., 26944., 28368., 29824., 27536., 28992., 30480.,
      32000., 29520., 31040., 32592., 34176., 31504., 33088., 34704., 36352.,
      33488., 35136., 36816., 38528., 21456., 22848., 24272., 25728., 23440.,
      24896., 26384., 27904., 25424., 26944., 28496., 30080., 27408., 28992.,
      30608., 32256., 29392., 31040., 32720., 34432., 25552., 26944., 28368.,
      29824., 27536., 28992., 30480., 32000., 29520., 31040., 32592., 34176.,
      31504., 33088., 34704., 36352., 33488., 35136., 36816., 38528., 37840.,
      39232., 40656., 42112., 39824., 41280., 42768., 44288., 41808., 43328.,
      44880., 46464., 43792., 45376., 46992., 48640., 45776., 47424., 49104.,
      50816.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6492.,  6888.,  7920.,  8352.,  9492.,  9960.,  11208., 11712., 8802.,
      9348.,  10596., 11184., 12558., 13188., 14688., 15360., 11280., 12000.,
      13440., 14208., 15792., 16608., 18336., 19200., 8826.,  9540.,  10812.,
      11568., 12966., 13764., 15288., 16128., 7356.,  8040.,  9168.,  9888.,
      11124., 11880., 13224., 14016., 7574.,  8036.,  9240.,  9744.,  11074.,
      11620., 13076., 13664., 10269., 10906., 12362., 13048., 14651., 15386.,
      17136., 17920., 13160., 14000., 15680., 16576., 18424., 19376., 21392.,
      22400., 10297., 11130., 12614., 13496., 15127., 16058., 17836., 18816.,
      8582.,  9380.,  10696., 11536., 12978., 13860., 15428., 16352., 8656.,
      9184.,  10560., 11136., 12656., 13280., 14944., 15616., 11736., 12464.,
      14128., 14912., 16744., 17584., 19584., 20480., 15040., 16000., 17920.,
      18944., 21056., 22144., 24448., 25600., 11768., 12720., 14416., 15424.,
      17288., 18352., 20384., 21504., 9808.,  10720., 12224., 13184., 14832.,
      15840., 17632., 18688., 7574.,  8036.,  9240.,  9744.,  11074., 11620.,
      13076., 13664., 10269., 10906., 12362., 13048., 14651., 15386., 17136.,
      17920., 13160., 14000., 15680., 16576., 18424., 19376., 21392., 22400.,
      10297., 11130., 12614., 13496., 15127., 16058., 17836., 18816., 8582.,
      9380.,  10696., 11536., 12978., 13860., 15428., 16352., 6492.,  6888.,
      7920.,  8352.,  9492.,  9960.,  11208., 11712., 8802.,  9348.,  10596.,
      11184., 12558., 13188., 14688., 15360., 11280., 12000., 13440., 14208.,
      15792., 16608., 18336., 19200., 8826.,  9540.,  10812., 11568., 12966.,
      13764., 15288., 16128., 7356.,  8040.,  9168.,  9888.,  11124., 11880.,
      13224., 14016.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15408., 15776., 16640., 17024., 17936., 18336., 19296., 19712., 17264.,
      17696., 18624., 19072., 20048., 20512., 21536., 22016., 19120., 19616.,
      20608., 21120., 22160., 22688., 23776., 24320., 20976., 21536., 22592.,
      23168., 24272., 24864., 26016., 26624., 22832., 23456., 24576., 25216.,
      26384., 27040., 28256., 28928., 7216.,  7584.,  8448.,  8832.,  9744.,
      10144., 11104., 11520., 9072.,  9504.,  10432., 10880., 11856., 12320.,
      13344., 13824., 10928., 11424., 12416., 12928., 13968., 14496., 15584.,
      16128., 12784., 13344., 14400., 14976., 16080., 16672., 17824., 18432.,
      14640., 15264., 16384., 17024., 18192., 18848., 20064., 20736., 15408.,
      15776., 16640., 17024., 17936., 18336., 19296., 19712., 17264., 17696.,
      18624., 19072., 20048., 20512., 21536., 22016., 19120., 19616., 20608.,
      21120., 22160., 22688., 23776., 24320., 20976., 21536., 22592., 23168.,
      24272., 24864., 26016., 26624., 22832., 23456., 24576., 25216., 26384.,
      27040., 28256., 28928., 7216.,  7584.,  8448.,  8832.,  9744.,  10144.,
      11104., 11520., 9072.,  9504.,  10432., 10880., 11856., 12320., 13344.,
      13824., 10928., 11424., 12416., 12928., 13968., 14496., 15584., 16128.,
      12784., 13344., 14400., 14976., 16080., 16672., 17824., 18432., 14640.,
      15264., 16384., 17024., 18192., 18848., 20064., 20736., 15408., 15776.,
      16640., 17024., 17936., 18336., 19296., 19712., 17264., 17696., 18624.,
      19072., 20048., 20512., 21536., 22016., 19120., 19616., 20608., 21120.,
      22160., 22688., 23776., 24320., 20976., 21536., 22592., 23168., 24272.,
      24864., 26016., 26624., 22832., 23456., 24576., 25216., 26384., 27040.,
      28256., 28928.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4140.,  4536.,  4932.,  5328.,  6192.,  6624.,  7056.,  7488.,  8532.,
      9000.,  9468.,  9936.,  11160., 11664., 12168., 12672., 5538.,  6084.,
      6630.,  7176.,  8316.,  8904.,  9492.,  10080., 11430., 12060., 12690.,
      13320., 14880., 15552., 16224., 16896., 7248.,  7968.,  8688.,  9408.,
      10752., 11520., 12288., 13056., 14640., 15456., 16272., 17088., 18912.,
      19776., 20640., 21504., 5610.,  6324.,  7038.,  7752.,  8964.,  9720.,
      10476., 11232., 12654., 13452., 14250., 15048., 16680., 17520., 18360.,
      19200., 6732.,  7416.,  8100.,  8784.,  9936.,  10656., 11376., 12096.,
      13428., 14184., 14940., 15696., 17208., 18000., 18792., 19584., 4830.,
      5292.,  5754.,  6216.,  7224.,  7728.,  8232.,  8736.,  9954.,  10500.,
      11046., 11592., 13020., 13608., 14196., 14784., 6461.,  7098.,  7735.,
      8372.,  9702.,  10388., 11074., 11760., 13335., 14070., 14805., 15540.,
      17360., 18144., 18928., 19712., 8456.,  9296.,  10136., 10976., 12544.,
      13440., 14336., 15232., 17080., 18032., 18984., 19936., 22064., 23072.,
      24080., 25088., 6545.,  7378.,  8211.,  9044.,  10458., 11340., 12222.,
      13104., 14763., 15694., 16625., 17556., 19460., 20440., 21420., 22400.,
      7854.,  8652.,  9450.,  10248., 11592., 12432., 13272., 14112., 15666.,
      16548., 17430., 18312., 20076., 21000., 21924., 22848., 5520.,  6048.,
      6576.,  7104.,  8256.,  8832.,  9408.,  9984.,  11376., 12000., 12624.,
      13248., 14880., 15552., 16224., 16896., 7384.,  8112.,  8840.,  9568.,
      11088., 11872., 12656., 13440., 15240., 16080., 16920., 17760., 19840.,
      20736., 21632., 22528., 9664.,  10624., 11584., 12544., 14336., 15360.,
      16384., 17408., 19520., 20608., 21696., 22784., 25216., 26368., 27520.,
      28672., 7480.,  8432.,  9384.,  10336., 11952., 12960., 13968., 14976.,
      16872., 17936., 19000., 20064., 22240., 23360., 24480., 25600., 8976.,
      9888.,  10800., 11712., 13248., 14208., 15168., 16128., 17904., 18912.,
      19920., 20928., 22944., 24000., 25056., 26112., 4830.,  5292.,  5754.,
      6216.,  7224.,  7728.,  8232.,  8736.,  9954.,  10500., 11046., 11592.,
      13020., 13608., 14196., 14784., 6461.,  7098.,  7735.,  8372.,  9702.,
      10388., 11074., 11760., 13335., 14070., 14805., 15540., 17360., 18144.,
      18928., 19712., 8456.,  9296.,  10136., 10976., 12544., 13440., 14336.,
      15232., 17080., 18032., 18984., 19936., 22064., 23072., 24080., 25088.,
      6545.,  7378.,  8211.,  9044.,  10458., 11340., 12222., 13104., 14763.,
      15694., 16625., 17556., 19460., 20440., 21420., 22400., 7854.,  8652.,
      9450.,  10248., 11592., 12432., 13272., 14112., 15666., 16548., 17430.,
      18312., 20076., 21000., 21924., 22848., 4140.,  4536.,  4932.,  5328.,
      6192.,  6624.,  7056.,  7488.,  8532.,  9000.,  9468.,  9936.,  11160.,
      11664., 12168., 12672., 5538.,  6084.,  6630.,  7176.,  8316.,  8904.,
      9492.,  10080., 11430., 12060., 12690., 13320., 14880., 15552., 16224.,
      16896., 7248.,  7968.,  8688.,  9408.,  10752., 11520., 12288., 13056.,
      14640., 15456., 16272., 17088., 18912., 19776., 20640., 21504., 5610.,
      6324.,  7038.,  7752.,  8964.,  9720.,  10476., 11232., 12654., 13452.,
      14250., 15048., 16680., 17520., 18360., 19200., 6732.,  7416.,  8100.,
      8784.,  9936.,  10656., 11376., 12096., 13428., 14184., 14940., 15696.,
      17208., 18000., 18792., 19584.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10480., 10848., 11216., 11584., 12416., 12800., 13184., 13568., 14480.,
      14880., 15280., 15680., 16672., 17088., 17504., 17920., 12080., 12512.,
      12944., 13376., 14272., 14720., 15168., 15616., 16592., 17056., 17520.,
      17984., 19040., 19520., 20000., 20480., 13680., 14176., 14672., 15168.,
      16128., 16640., 17152., 17664., 18704., 19232., 19760., 20288., 21408.,
      21952., 22496., 23040., 15280., 15840., 16400., 16960., 17984., 18560.,
      19136., 19712., 20816., 21408., 22000., 22592., 23776., 24384., 24992.,
      25600., 16880., 17504., 18128., 18752., 19840., 20480., 21120., 21760.,
      22928., 23584., 24240., 24896., 26144., 26816., 27488., 28160., 10480.,
      10848., 11216., 11584., 12416., 12800., 13184., 13568., 14480., 14880.,
      15280., 15680., 16672., 17088., 17504., 17920., 12080., 12512., 12944.,
      13376., 14272., 14720., 15168., 15616., 16592., 17056., 17520., 17984.,
      19040., 19520., 20000., 20480., 13680., 14176., 14672., 15168., 16128.,
      16640., 17152., 17664., 18704., 19232., 19760., 20288., 21408., 21952.,
      22496., 23040., 15280., 15840., 16400., 16960., 17984., 18560., 19136.,
      19712., 20816., 21408., 22000., 22592., 23776., 24384., 24992., 25600.,
      16880., 17504., 18128., 18752., 19840., 20480., 21120., 21760., 22928.,
      23584., 24240., 24896., 26144., 26816., 27488., 28160., 10480., 10848.,
      11216., 11584., 12416., 12800., 13184., 13568., 14480., 14880., 15280.,
      15680., 16672., 17088., 17504., 17920., 12080., 12512., 12944., 13376.,
      14272., 14720., 15168., 15616., 16592., 17056., 17520., 17984., 19040.,
      19520., 20000., 20480., 13680., 14176., 14672., 15168., 16128., 16640.,
      17152., 17664., 18704., 19232., 19760., 20288., 21408., 21952., 22496.,
      23040., 15280., 15840., 16400., 16960., 17984., 18560., 19136., 19712.,
      20816., 21408., 22000., 22592., 23776., 24384., 24992., 25600., 16880.,
      17504., 18128., 18752., 19840., 20480., 21120., 21760., 22928., 23584.,
      24240., 24896., 26144., 26816., 27488., 28160., 10480., 10848., 11216.,
      11584., 12416., 12800., 13184., 13568., 14480., 14880., 15280., 15680.,
      16672., 17088., 17504., 17920., 12080., 12512., 12944., 13376., 14272.,
      14720., 15168., 15616., 16592., 17056., 17520., 17984., 19040., 19520.,
      20000., 20480., 13680., 14176., 14672., 15168., 16128., 16640., 17152.,
      17664., 18704., 19232., 19760., 20288., 21408., 21952., 22496., 23040.,
      15280., 15840., 16400., 16960., 17984., 18560., 19136., 19712., 20816.,
      21408., 22000., 22592., 23776., 24384., 24992., 25600., 16880., 17504.,
      18128., 18752., 19840., 20480., 21120., 21760., 22928., 23584., 24240.,
      24896., 26144., 26816., 27488., 28160., 10480., 10848., 11216., 11584.,
      12416., 12800., 13184., 13568., 14480., 14880., 15280., 15680., 16672.,
      17088., 17504., 17920., 12080., 12512., 12944., 13376., 14272., 14720.,
      15168., 15616., 16592., 17056., 17520., 17984., 19040., 19520., 20000.,
      20480., 13680., 14176., 14672., 15168., 16128., 16640., 17152., 17664.,
      18704., 19232., 19760., 20288., 21408., 21952., 22496., 23040., 15280.,
      15840., 16400., 16960., 17984., 18560., 19136., 19712., 20816., 21408.,
      22000., 22592., 23776., 24384., 24992., 25600., 16880., 17504., 18128.,
      18752., 19840., 20480., 21120., 21760., 22928., 23584., 24240., 24896.,
      26144., 26816., 27488., 28160.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11144., 14916., 18748., 16308., 13896., 16114., 21128., 26215., 22634.,
      19106., 21372., 28130., 34970., 28130., 21372., 19106., 22634., 26215.,
      21128., 16114., 13896., 16308., 18748., 14916., 11144.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4350., 4428., 4506., 4584., 4662., 4818., 4896., 4974., 5052.,
      5130., 5286., 5364., 5442., 5520., 5598., 5754., 5832., 5910.,
      5988., 6066., 6222., 6300., 6378., 6456., 6534.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11368., 12112., 14728., 15688., 17940., 19128., 15116., 16136., 12584.,
      13424., 14350., 15332., 18495., 19728., 22515., 24014., 19160., 20436.,
      16182., 17220., 18604., 19704., 24680., 26052., 30646., 32308., 24398.,
      25796., 18588., 19704., 16198., 17220., 19585., 20852., 22839., 24366.,
      18610., 19888., 14798., 15812., 13512., 14384., 17080., 18152., 20532.,
      21816., 17212., 18280., 14248., 15088.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8214.,  8700.,  8358.,  8856.,  8502.,  9012.,  8646.,  9168.,  8790.,
      9324.,  9078.,  9636.,  9222.,  9792.,  9366.,  9948.,  9510.,  10104.,
      9654.,  10260., 9942.,  10572., 10086., 10728., 10230., 10884., 10374.,
      11040., 10518., 11196., 10806., 11508., 10950., 11664., 11094., 11820.,
      11238., 11976., 11382., 12132., 11670., 12444., 11814., 12600., 11958.,
      12756., 12102., 12912., 12246., 13068.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10824., 11568., 12312., 13056., 14544., 15504., 16464., 17424., 17796.,
      18984., 20172., 21360., 14652., 15672., 16692., 17712., 12264., 13104.,
      13944., 14784., 15270., 16252., 17234., 18216., 18861., 20094., 21327.,
      22560., 21963., 23462., 24961., 26460., 17940., 19216., 20492., 21768.,
      14910., 15948., 16986., 18024., 16076., 17176., 18276., 19376., 21684.,
      23056., 24428., 25800., 26798., 28460., 30122., 31784., 20998., 22396.,
      23794., 25192., 16380., 17496., 18612., 19728., 14478., 15500., 16522.,
      17544., 18607., 19874., 21141., 22408., 22231., 23758., 25285., 26812.,
      18694., 19972., 21250., 22528., 16262., 17276., 18290., 19304., 12744.,
      13616., 14488., 15360., 15552., 16624., 17696., 18768., 17956., 19240.,
      20524., 21808., 14636., 15704., 16772., 17840., 12264., 13104., 13944.,
      14784.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15942., 16428., 16914., 17400., 16218., 16716., 17214., 17712., 16494.,
      17004., 17514., 18024., 16770., 17292., 17814., 18336., 17046., 17580.,
      18114., 18648., 17598., 18156., 18714., 19272., 17874., 18444., 19014.,
      19584., 18150., 18732., 19314., 19896., 18426., 19020., 19614., 20208.,
      18702., 19308., 19914., 20520., 19254., 19884., 20514., 21144., 19530.,
      20172., 20814., 21456., 19806., 20460., 21114., 21768., 20082., 20748.,
      21414., 22080., 20358., 21036., 21714., 22392., 20910., 21612., 22314.,
      23016., 21186., 21900., 22614., 23328., 21462., 22188., 22914., 23640.,
      21738., 22476., 23214., 23952., 22014., 22764., 23514., 24264., 22566.,
      23340., 24114., 24888., 22842., 23628., 24414., 25200., 23118., 23916.,
      24714., 25512., 23394., 24204., 25014., 25824., 23670., 24492., 25314.,
      26136.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12400., 13920., 14548., 16464., 16872., 19184., 13684., 15632., 10736.,
      12320., 12268., 14216., 15821., 18272., 19666., 22620., 17205., 19688.,
      15020., 17032., 19688., 22000., 27198., 30088., 35036., 38504., 27198.,
      30088., 19688., 22000., 15020., 17032., 17205., 19688., 19666., 22620.,
      15821., 18272., 12268., 14216., 10736., 12320., 13684., 15632., 16872.,
      19184., 14548., 16464., 12400., 13920.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16284., 17400., 16572., 17712., 16860., 18024., 17148., 18336., 17436.,
      18648., 18012., 19272., 18300., 19584., 18588., 19896., 18876., 20208.,
      19164., 20520., 19740., 21144., 20028., 21456., 20316., 21768., 20604.,
      22080., 20892., 22392., 21468., 23016., 21756., 23328., 22044., 23640.,
      22332., 23952., 22620., 24264., 23196., 24888., 23484., 25200., 23772.,
      25512., 24060., 25824., 24348., 26136.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10624., 11360., 12912., 13696., 13412., 14344., 16320., 17312., 16208.,
      17360., 19736., 20960., 13484., 14472., 16456., 17504., 11584., 12384.,
      14000., 14848., 16040., 16984., 18916., 19920., 18339., 19514., 21982.,
      23232., 20744., 22180., 25154., 26680., 16637., 17866., 20344., 21648.,
      13560., 14552., 16564., 17616., 15744., 16848., 19144., 20320., 22302.,
      23676., 26584., 28048., 28968., 30648., 34132., 35920., 22026., 23452.,
      26340., 27856., 16352., 17488., 19816., 21024., 12696., 13656., 15636.,
      16656., 16367., 17546., 20010., 21264., 20112., 21540., 24458., 25976.,
      17641., 18842., 21252., 22528., 16296., 17240., 19172., 20176., 11136.,
      11872., 13424., 14208., 12868., 13768., 15712., 16672., 14736., 15824.,
      18136., 19296., 12140., 13064., 14984., 15968., 10368., 11104., 12656.,
      13440.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31608., 32568., 33828., 34800., 32160., 33144., 34428., 35424., 32712.,
      33720., 35028., 36048., 33264., 34296., 35628., 36672., 33816., 34872.,
      36228., 37296., 34920., 36024., 37428., 38544., 35472., 36600., 38028.,
      39168., 36024., 37176., 38628., 39792., 36576., 37752., 39228., 40416.,
      37128., 38328., 39828., 41040., 38232., 39480., 41028., 42288., 38784.,
      40056., 41628., 42912., 39336., 40632., 42228., 43536., 39888., 41208.,
      42828., 44160., 40440., 41784., 43428., 44784., 41544., 42936., 44628.,
      46032., 42096., 43512., 45228., 46656., 42648., 44088., 45828., 47280.,
      43200., 44664., 46428., 47904., 43752., 45240., 47028., 48528., 44856.,
      46392., 48228., 49776., 45408., 46968., 48828., 50400., 45960., 47544.,
      49428., 51024., 46512., 48120., 50028., 51648., 47064., 48696., 50628.,
      52272.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9248.,  9984.,  10720., 11456., 13008., 13792., 14576., 15360., 13028.,
      13960., 14892., 15824., 17824., 18816., 19808., 20800., 16416., 17568.,
      18720., 19872., 22248., 23472., 24696., 25920., 12220., 13208., 14196.,
      15184., 17144., 18192., 19240., 20288., 10080., 10880., 11680., 12480.,
      14096., 14944., 15792., 16640., 13216., 14160., 15104., 16048., 18012.,
      19016., 20020., 21024., 15919., 17094., 18269., 19444., 21978., 23228.,
      24478., 25728., 18292., 19728., 21164., 22600., 25614., 27140., 28666.,
      30192., 14861., 16090., 17319., 18548., 21016., 22320., 23624., 24928.,
      13968., 14960., 15952., 16944., 18956., 20008., 21060., 22112., 13616.,
      14720., 15824., 16928., 19256., 20432., 21608., 22784., 19006., 20380.,
      21754., 23128., 26104., 27568., 29032., 30496., 24000., 25680., 27360.,
      29040., 32556., 34344., 36132., 37920., 17442., 18868., 20294., 21720.,
      24604., 26120., 27636., 29152., 14032., 15168., 16304., 17440., 19800.,
      21008., 22216., 23424., 13552., 14512., 15472., 16432., 18412., 19432.,
      20452., 21472., 15203., 16382., 17561., 18740., 21230., 22484., 23738.,
      24992., 16524., 17952., 19380., 20808., 23718., 25236., 26754., 28272.,
      13729., 14930., 16131., 17332., 19724., 21000., 22276., 23552., 13728.,
      14672., 15616., 16560., 18524., 19528., 20532., 21536., 9248.,  9984.,
      10720., 11456., 13008., 13792., 14576., 15360., 12484., 13384., 14284.,
      15184., 17152., 18112., 19072., 20032., 15584., 16672., 17760., 18848.,
      21160., 22320., 23480., 24640., 11132., 12056., 12980., 13904., 15800.,
      16784., 17768., 18752., 8736.,  9472.,  10208., 10944., 12496., 13280.,
      14064., 14848.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22832., 23280., 23728., 24176., 25212., 25672., 26132., 26592., 23912.,
      24384., 24856., 25328., 26388., 26872., 27356., 27840., 24992., 25488.,
      25984., 26480., 27564., 28072., 28580., 29088., 26072., 26592., 27112.,
      27632., 28740., 29272., 29804., 30336., 27152., 27696., 28240., 28784.,
      29916., 30472., 31028., 31584., 29312., 29904., 30496., 31088., 32268.,
      32872., 33476., 34080., 30392., 31008., 31624., 32240., 33444., 34072.,
      34700., 35328., 31472., 32112., 32752., 33392., 34620., 35272., 35924.,
      36576., 32552., 33216., 33880., 34544., 35796., 36472., 37148., 37824.,
      33632., 34320., 35008., 35696., 36972., 37672., 38372., 39072., 35792.,
      36528., 37264., 38000., 39324., 40072., 40820., 41568., 36872., 37632.,
      38392., 39152., 40500., 41272., 42044., 42816., 37952., 38736., 39520.,
      40304., 41676., 42472., 43268., 44064., 39032., 39840., 40648., 41456.,
      42852., 43672., 44492., 45312., 40112., 40944., 41776., 42608., 44028.,
      44872., 45716., 46560., 42272., 43152., 44032., 44912., 46380., 47272.,
      48164., 49056., 43352., 44256., 45160., 46064., 47556., 48472., 49388.,
      50304., 44432., 45360., 46288., 47216., 48732., 49672., 50612., 51552.,
      38216., 39040., 39864., 40688., 42100., 42936., 43772., 44608., 33024.,
      33744., 34464., 35184., 36492., 37224., 37956., 38688., 35184., 35952.,
      36720., 37488., 38844., 39624., 40404., 41184., 36264., 37056., 37848.,
      38640., 40020., 40824., 41628., 42432., 37344., 38160., 38976., 39792.,
      41196., 42024., 42852., 43680., 33176., 33888., 34600., 35312., 36612.,
      37336., 38060., 38784., 30032., 30640., 31248., 31856., 33052., 33672.,
      34292., 34912.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10224., 11712., 13296., 14976., 11148., 13008., 14988., 17088., 13032.,
      15264., 17640., 20160., 11148., 13008., 14988., 17088., 10224., 11712.,
      13296., 14976., 17580., 19376., 21292., 23328., 17295., 19572., 21999.,
      24576., 18306., 21064., 24002., 27120., 14031., 16340., 18799., 21408.,
      10860., 12720., 14700., 16800., 14376., 16544., 18856., 21312., 22674.,
      25400., 28306., 31392., 32412., 35696., 39196., 42912., 22674., 25400.,
      28306., 31392., 14376., 16544., 18856., 21312., 10860., 12720., 14700.,
      16800., 14031., 16340., 18799., 21408., 18306., 21064., 24002., 27120.,
      17295., 19572., 21999., 24576., 17580., 19376., 21292., 23328., 10224.,
      11712., 13296., 14976., 11148., 13008., 14988., 17088., 13032., 15264.,
      17640., 20160., 11148., 13008., 14988., 17088., 10224., 11712., 13296.,
      14976.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23004., 24176., 25372., 26592., 24108., 25328., 26572., 27840., 25212.,
      26480., 27772., 29088., 26316., 27632., 28972., 30336., 27420., 28784.,
      30172., 31584., 29628., 31088., 32572., 34080., 30732., 32240., 33772.,
      35328., 31836., 33392., 34972., 36576., 32940., 34544., 36172., 37824.,
      34044., 35696., 37372., 39072., 36252., 38000., 39772., 41568., 37356.,
      39152., 40972., 42816., 38460., 40304., 42172., 44064., 39564., 41456.,
      43372., 45312., 40668., 42608., 44572., 46560., 42876., 44912., 46972.,
      49056., 43980., 46064., 48172., 50304., 45084., 47216., 49372., 51552.,
      38764., 40688., 42636., 44608., 33468., 35184., 36924., 38688., 35676.,
      37488., 39324., 41184., 36780., 38640., 40524., 42432., 37884., 39792.,
      41724., 43680., 33612., 35312., 37036., 38784., 30364., 31856., 33372.,
      34912.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8208.,  8928.,  10368., 11136., 12720., 13536., 15264., 16128., 12012.,
      12888., 14712., 15648., 17652., 18648., 20832., 21888., 16920., 18000.,
      20160., 21312., 23688., 24912., 27504., 28800., 11196., 12120., 13896.,
      14880., 16836., 17880., 20016., 21120., 8208.,  8928.,  10368., 11136.,
      12720., 13536., 15264., 16128., 13684., 14552., 16320., 17248., 19196.,
      20184., 22312., 23360., 13947., 15006., 17274., 18408., 20901., 22110.,
      24828., 26112., 15718., 17028., 19736., 21136., 24114., 25604., 28852.,
      30432., 13199., 14334., 16558., 17768., 20217., 21502., 24176., 25536.,
      13844., 14744., 16544., 17504., 19484., 20504., 22664., 23744., 11640.,
      12688., 14816., 15936., 18280., 19472., 22032., 23296., 17474., 18756.,
      21460., 22832., 25806., 27268., 30512., 32064., 24964., 26552., 29760.,
      31456., 34988., 36792., 40648., 42560., 16506., 17860., 20492., 21936.,
      24838., 26372., 29544., 31168., 12152., 13200., 15328., 16448., 18792.,
      19984., 22544., 23808., 14356., 15256., 17056., 18016., 19996., 21016.,
      23176., 24256., 13875., 14974., 17234., 18408., 20893., 22142., 24852.,
      26176., 14646., 16004., 18664., 20112., 23042., 24580., 27780., 29408.,
      12327., 13470., 15654., 16872., 19281., 20574., 23208., 24576., 13684.,
      14552., 16320., 17248., 19196., 20184., 22312., 23360., 8208.,  8928.,
      10368., 11136., 12720., 13536., 15264., 16128., 12012., 12888., 14712.,
      15648., 17652., 18648., 20832., 21888., 16920., 18000., 20160., 21312.,
      23688., 24912., 27504., 28800., 11196., 12120., 13896., 14880., 16836.,
      17880., 20016., 21120., 8208.,  8928.,  10368., 11136., 12720., 13536.,
      15264., 16128.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10052., 10424., 11104., 11488., 12204., 12600., 13352., 13760., 9588.,
      9944.,  10608., 10976., 11676., 12056., 12792., 13184., 9636.,  9976.,
      10624., 10976., 11660., 12024., 12744., 13120., 10772., 11160., 11856.,
      12256., 12988., 13400., 14168., 14592., 11908., 12344., 13088., 13536.,
      14316., 14776., 15592., 16064., 7396.,  7800.,  8512.,  8928.,  9676.,
      10104., 10888., 11328., 7956.,  8344.,  9040.,  9440.,  10172., 10584.,
      11352., 11776., 9028.,  9400.,  10080., 10464., 11180., 11576., 12328.,
      12736., 8564.,  8920.,  9584.,  9952.,  10652., 11032., 11768., 12160.,
      8612.,  8952.,  9600.,  9952.,  10636., 11000., 11720., 12096., 6148.,
      6456.,  7072.,  7392.,  8044.,  8376.,  9064.,  9408.,  7284.,  7640.,
      8304.,  8672.,  9372.,  9752.,  10488., 10880., 8420.,  8824.,  9536.,
      9952.,  10700., 11128., 11912., 12352., 8980.,  9368.,  10064., 10464.,
      11196., 11608., 12376., 12800., 10052., 10424., 11104., 11488., 12204.,
      12600., 13352., 13760., 9636.,  9976.,  10624., 10976., 11660., 12024.,
      12744., 13120., 10772., 11160., 11856., 12256., 12988., 13400., 14168.,
      14592., 11908., 12344., 13088., 13536., 14316., 14776., 15592., 16064.,
      9396.,  9816.,  10544., 10976., 11740., 12184., 12984., 13440., 7396.,
      7800.,  8512.,  8928.,  9676.,  10104., 10888., 11328., 9028.,  9400.,
      10080., 10464., 11180., 11576., 12328., 12736., 8564.,  8920.,  9584.,
      9952.,  10652., 11032., 11768., 12160., 8612.,  8952.,  9600.,  9952.,
      10636., 11000., 11720., 12096., 7124.,  7448.,  8080.,  8416.,  9084.,
      9432.,  10136., 10496., 6148.,  6456.,  7072.,  7392.,  8044.,  8376.,
      9064.,  9408.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7248.,  7968.,  8688.,  9408.,  10752., 11520., 12288., 13056., 14640.,
      15456., 16272., 17088., 18912., 19776., 20640., 21504., 8364.,  9240.,
      10116., 10992., 12744., 13680., 14616., 15552., 17604., 18600., 19596.,
      20592., 22944., 24000., 25056., 26112., 10872., 11952., 13032., 14112.,
      16128., 17280., 18432., 19584., 21960., 23184., 24408., 25632., 28368.,
      29664., 30960., 32256., 5916.,  6840.,  7764.,  8688.,  10296., 11280.,
      12264., 13248., 15156., 16200., 17244., 18288., 20496., 21600., 22704.,
      23808., 7248.,  7968.,  8688.,  9408.,  10752., 11520., 12288., 13056.,
      14640., 15456., 16272., 17088., 18912., 19776., 20640., 21504., 8772.,
      9640.,  10508., 11376., 13024., 13952., 14880., 15808., 17756., 18744.,
      19732., 20720., 22968., 24016., 25064., 26112., 10099., 11158., 12217.,
      13276., 15430., 16564., 17698., 18832., 21361., 22570., 23779., 24988.,
      27892., 29176., 30460., 31744., 13230., 14540., 15850., 17160., 19640.,
      21040., 22440., 23840., 26770., 28260., 29750., 31240., 34620., 36200.,
      37780., 39360., 7375.,  8510.,  9645.,  10780., 12770., 13980., 15190.,
      16400., 18765., 20050., 21335., 22620., 25360., 26720., 28080., 29440.,
      9060.,  9960.,  10860., 11760., 13440., 14400., 15360., 16320., 18300.,
      19320., 20340., 21360., 23640., 24720., 25800., 26880., 10584., 11632.,
      12680., 13728., 15712., 16832., 17952., 19072., 21416., 22608., 23800.,
      24992., 27696., 28960., 30224., 31488., 12258., 13540., 14822., 16104.,
      18700., 20072., 21444., 22816., 25862., 27324., 28786., 30248., 33744.,
      35296., 36848., 38400., 16020., 17608., 19196., 20784., 23776., 25472.,
      27168., 28864., 32396., 34200., 36004., 37808., 41880., 43792., 45704.,
      47616., 8586.,  9940.,  11294., 12648., 15028., 16472., 17916., 19360.,
      22190., 23724., 25258., 26792., 30072., 31696., 33320., 34944., 10584.,
      11632., 12680., 13728., 15712., 16832., 17952., 19072., 21416., 22608.,
      23800., 24992., 27696., 28960., 30224., 31488., 9060.,  9960.,  10860.,
      11760., 13440., 14400., 15360., 16320., 18300., 19320., 20340., 21360.,
      23640., 24720., 25800., 26880., 10523., 11622., 12721., 13820., 16014.,
      17188., 18362., 19536., 22105., 23354., 24603., 25852., 28796., 30120.,
      31444., 32768., 13662., 15020., 16378., 17736., 20264., 21712., 23160.,
      24608., 27586., 29124., 30662., 32200., 35628., 37256., 38884., 40512.,
      7127.,  8270.,  9413.,  10556., 12554., 13772., 14990., 16208., 18581.,
      19874., 21167., 22460., 25208., 26576., 27944., 29312., 8772.,  9640.,
      10508., 11376., 13024., 13952., 14880., 15808., 17756., 18744., 19732.,
      20720., 22968., 24016., 25064., 26112., 7248.,  7968.,  8688.,  9408.,
      10752., 11520., 12288., 13056., 14640., 15456., 16272., 17088., 18912.,
      19776., 20640., 21504., 8364.,  9240.,  10116., 10992., 12744., 13680.,
      14616., 15552., 17604., 18600., 19596., 20592., 22944., 24000., 25056.,
      26112., 10872., 11952., 13032., 14112., 16128., 17280., 18432., 19584.,
      21960., 23184., 24408., 25632., 28368., 29664., 30960., 32256., 5916.,
      6840.,  7764.,  8688.,  10296., 11280., 12264., 13248., 15156., 16200.,
      17244., 18288., 20496., 21600., 22704., 23808., 7248.,  7968.,  8688.,
      9408.,  10752., 11520., 12288., 13056., 14640., 15456., 16272., 17088.,
      18912., 19776., 20640., 21504.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11796., 12168., 12540., 12912., 13632., 14016., 14400., 14784., 15564.,
      15960., 16356., 16752., 17592., 18000., 18408., 18816., 9860.,  10216.,
      10572., 10928., 11632., 12000., 12368., 12736., 13500., 13880., 14260.,
      14640., 15464., 15856., 16248., 16640., 8948.,  9288.,  9628.,  9968.,
      10656., 11008., 11360., 11712., 12460., 12824., 13188., 13552., 14360.,
      14736., 15112., 15488., 10148., 10536., 10924., 11312., 12048., 12448.,
      12848., 13248., 14044., 14456., 14868., 15280., 16136., 16560., 16984.,
      17408., 11348., 11784., 12220., 12656., 13440., 13888., 14336., 14784.,
      15628., 16088., 16548., 17008., 17912., 18384., 18856., 19328., 8500.,
      8904.,  9308.,  9712.,  10464., 10880., 11296., 11712., 12524., 12952.,
      13380., 13808., 14680., 15120., 15560., 16000., 8612.,  9000.,  9388.,
      9776.,  10512., 10912., 11312., 11712., 12508., 12920., 13332., 13744.,
      14600., 15024., 15448., 15872., 9748.,  10120., 10492., 10864., 11584.,
      11968., 12352., 12736., 13516., 13912., 14308., 14704., 15544., 15952.,
      16360., 16768., 7812.,  8168.,  8524.,  8880.,  9584.,  9952.,  10320.,
      10688., 11452., 11832., 12212., 12592., 13416., 13808., 14200., 14592.,
      6900.,  7240.,  7580.,  7920.,  8608.,  8960.,  9312.,  9664.,  10412.,
      10776., 11140., 11504., 12312., 12688., 13064., 13440., 8148.,  8456.,
      8764.,  9072.,  9728.,  10048., 10368., 10688., 11404., 11736., 12068.,
      12400., 13176., 13520., 13864., 14208., 9348.,  9704.,  10060., 10416.,
      11120., 11488., 11856., 12224., 12988., 13368., 13748., 14128., 14952.,
      15344., 15736., 16128., 10548., 10952., 11356., 11760., 12512., 12928.,
      13344., 13760., 14572., 15000., 15428., 15856., 16728., 17168., 17608.,
      18048., 10660., 11048., 11436., 11824., 12560., 12960., 13360., 13760.,
      14556., 14968., 15380., 15792., 16648., 17072., 17496., 17920., 11796.,
      12168., 12540., 12912., 13632., 14016., 14400., 14784., 15564., 15960.,
      16356., 16752., 17592., 18000., 18408., 18816., 8948.,  9288.,  9628.,
      9968.,  10656., 11008., 11360., 11712., 12460., 12824., 13188., 13552.,
      14360., 14736., 15112., 15488., 10148., 10536., 10924., 11312., 12048.,
      12448., 12848., 13248., 14044., 14456., 14868., 15280., 16136., 16560.,
      16984., 17408., 11348., 11784., 12220., 12656., 13440., 13888., 14336.,
      14784., 15628., 16088., 16548., 17008., 17912., 18384., 18856., 19328.,
      9412.,  9832.,  10252., 10672., 11440., 11872., 12304., 12736., 13564.,
      14008., 14452., 14896., 15784., 16240., 16696., 17152., 8500.,  8904.,
      9308.,  9712.,  10464., 10880., 11296., 11712., 12524., 12952., 13380.,
      13808., 14680., 15120., 15560., 16000., 9748.,  10120., 10492., 10864.,
      11584., 11968., 12352., 12736., 13516., 13912., 14308., 14704., 15544.,
      15952., 16360., 16768., 7812.,  8168.,  8524.,  8880.,  9584.,  9952.,
      10320., 10688., 11452., 11832., 12212., 12592., 13416., 13808., 14200.,
      14592., 6900.,  7240.,  7580.,  7920.,  8608.,  8960.,  9312.,  9664.,
      10412., 10776., 11140., 11504., 12312., 12688., 13064., 13440., 7012.,
      7336.,  7660.,  7984.,  8656.,  8992.,  9328.,  9664.,  10396., 10744.,
      11092., 11440., 12232., 12592., 12952., 13312., 8148.,  8456.,  8764.,
      9072.,  9728.,  10048., 10368., 10688., 11404., 11736., 12068., 12400.,
      13176., 13520., 13864., 14208.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13314., 15724., 18762., 15996., 13714., 19480., 23585., 28578., 25367.,
      22450., 29215., 35942., 43775., 35942., 29215., 22450., 25367., 28578.,
      23585., 19480., 13714., 15996., 18762., 15724., 13314.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11253., 11424., 11595., 11766., 11937., 12450., 12621., 12792., 12963.,
      13134., 13647., 13818., 13989., 14160., 14331., 14844., 15015., 15186.,
      15357., 15528., 16041., 16212., 16383., 16554., 16725.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17474., 18436., 19608., 20760., 22250., 23604., 17968., 19128., 14826.,
      15812., 18407., 19632., 21495., 22946., 25320., 27012., 21737., 23182.,
      18949., 20164., 24741., 26206., 30584., 32332., 37341., 39390., 30412.,
      32172., 24369., 25854., 19854., 21124., 22733., 24238., 25737., 27492.,
      21639., 23138., 17700., 18960., 15994., 16964., 19688., 20856., 23730.,
      25108., 21120., 22296., 17890., 18884.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21651., 22506., 21975., 22848., 22299., 23190., 22623., 23532., 22947.,
      23874., 23919., 24900., 24243., 25242., 24567., 25584., 24891., 25926.,
      25215., 26268., 26187., 27294., 26511., 27636., 26835., 27978., 27159.,
      28320., 27483., 28662., 28455., 29688., 28779., 30030., 29103., 30372.,
      29427., 30714., 29751., 31056., 30723., 32082., 31047., 32424., 31371.,
      32766., 31695., 33108., 32019., 33450.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15074., 16036., 16998., 17960., 17136., 18288., 19440., 20592., 19754.,
      21108., 22462., 23816., 16632., 17792., 18952., 20112., 14074., 15060.,
      16046., 17032., 18629., 19854., 21079., 22304., 23331., 24782., 26233.,
      27684., 25940., 27632., 29324., 31016., 20621., 22066., 23511., 24956.,
      17035., 18250., 19465., 20680., 21713., 23178., 24643., 26108., 26428.,
      28176., 29924., 31672., 32665., 34714., 36763., 38812., 26168., 27928.,
      29688., 31448., 20949., 22434., 23919., 25404., 19174., 20444., 21714.,
      22984., 23033., 24538., 26043., 27548., 27159., 28914., 30669., 32424.,
      23795., 25294., 26793., 28292., 18140., 19400., 20660., 21920., 15050.,
      16020., 16990., 17960., 17536., 18704., 19872., 21040., 20770., 22148.,
      23526., 24904., 18216., 19392., 20568., 21744., 14850., 15844., 16838.,
      17832.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16015., 16486., 16957., 17428., 16517., 17006., 17495., 17984., 17019.,
      17526., 18033., 18540., 17521., 18046., 18571., 19096., 18023., 18566.,
      19109., 19652., 19529., 20126., 20723., 21320., 20031., 20646., 21261.,
      21876., 20533., 21166., 21799., 22432., 21035., 21686., 22337., 22988.,
      21537., 22206., 22875., 23544., 17539., 18134., 18729., 19324., 15673.,
      16222., 16771., 17320., 16175., 16742., 17309., 17876., 16677., 17262.,
      17847., 18432., 17179., 17782., 18385., 18988., 14717., 15246., 15775.,
      16304., 13619., 14102., 14585., 15068., 14121., 14622., 15123., 15624.,
      14623., 15142., 15661., 16180., 15125., 15662., 16199., 16736., 16631.,
      17222., 17813., 18404., 17133., 17742., 18351., 18960., 17635., 18262.,
      18889., 19516., 18137., 18782., 19427., 20072., 18639., 19302., 19965.,
      20628.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19452., 21384., 21896., 24240., 23716., 26472., 18760., 21104., 14876.,
      16840., 15265., 17696., 18450., 21380., 21987., 25416., 19114., 22044.,
      16937., 19400., 25290., 28220., 32924., 36440., 41846., 45948., 32924.,
      36440., 25290., 28220., 16937., 19400., 19114., 22044., 21987., 25416.,
      18450., 21380., 15265., 17696., 14876., 16840., 18760., 21104., 23716.,
      26472., 21896., 24240., 19452., 21384.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19938., 21204., 20586., 21888., 21234., 22572., 21882., 23256., 22530.,
      23940., 24474., 25992., 25122., 26676., 25770., 27360., 26418., 28044.,
      27066., 28728., 23378., 24892., 21594., 23016., 22242., 23700., 22890.,
      24384., 23538., 25068., 21386., 22768., 20370., 21660., 21018., 22344.,
      21666., 23028., 22314., 23712., 24258., 25764., 24906., 26448., 25554.,
      27132., 26202., 27816., 26850., 28500.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15440., 16376., 18284., 19280., 17304., 18448., 20768., 21984., 19080.,
      20424., 23164., 24592., 15528., 16688., 19024., 20256., 12800., 13784.,
      15740., 16784., 18171., 19330., 21742., 22976., 24104., 25508., 28402.,
      29896., 25655., 27302., 30712., 32464., 20004., 21428., 24334., 25848.,
      16095., 17298., 19730., 21008., 20540., 21940., 24870., 26360., 26524.,
      28216., 31720., 33520., 34472., 36460., 40566., 42680., 26660., 28376.,
      31888., 33712., 20468., 21908., 24830., 26360., 16849., 18034., 20516.,
      21776., 20940., 22356., 25302., 26808., 26457., 28134., 31578., 33360.,
      24456., 25892., 28818., 30344., 17973., 19170., 21576., 22848., 13216.,
      14136., 16124., 17104., 15672., 16784., 19136., 20320., 19352., 20680.,
      23436., 24848., 17576., 18704., 21040., 22240., 15440., 16376., 18284.,
      19280.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      38952., 39876., 41466., 42408., 40212., 41172., 42798., 43776., 41472.,
      42468., 44130., 45144., 42732., 43764., 45462., 46512., 43992., 45060.,
      46794., 47880., 47772., 48948., 50790., 51984., 49032., 50244., 52122.,
      53352., 50292., 51540., 53454., 54720., 51552., 52836., 54786., 56088.,
      52812., 54132., 56118., 57456., 45584., 46756., 48594., 49784., 42108.,
      43188., 44934., 46032., 43368., 44484., 46266., 47400., 44628., 45780.,
      47598., 48768., 45888., 47076., 48930., 50136., 41732., 42772., 44478.,
      45536., 39792., 40740., 42354., 43320., 41052., 42036., 43686., 44688.,
      42312., 43332., 45018., 46056., 43572., 44628., 46350., 47424., 47352.,
      48516., 50346., 51528., 48612., 49812., 51678., 52896., 49872., 51108.,
      53010., 54264., 51132., 52404., 54342., 55632., 52392., 53700., 55674.,
      57000.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13144., 14080., 15016., 15952., 17908., 18904., 19900., 20896., 14680.,
      15824., 16968., 18112., 20480., 21696., 22912., 24128., 16336., 17680.,
      19024., 20368., 23140., 24568., 25996., 27424., 14888., 16048., 17208.,
      18368., 20752., 21984., 23216., 24448., 13768., 14752., 15736., 16720.,
      18724., 19768., 20812., 21856., 14703., 15862., 17021., 18180., 20618.,
      21852., 23086., 24320., 19764., 21168., 22572., 23976., 26894., 28388.,
      29882., 31376., 21215., 22862., 24509., 26156., 29592., 31344., 33096.,
      34848., 17592., 19016., 20440., 21864., 24818., 26332., 27846., 29360.,
      15819., 17022., 18225., 19428., 21926., 23204., 24482., 25760., 17120.,
      18520., 19920., 21320., 24250., 25740., 27230., 28720., 21308., 23000.,
      24692., 26384., 29896., 31696., 33496., 35296., 27916., 29904., 31892.,
      33880., 37994., 40108., 42222., 44336., 21780., 23496., 25212., 26928.,
      30464., 32288., 34112., 35936., 17992., 19432., 20872., 22312., 25282.,
      26812., 28342., 29872., 15073., 16258., 17443., 18628., 21084., 22344.,
      23604., 24864., 17392., 18808., 20224., 21640., 24586., 26092., 27598.,
      29104., 20965., 22642., 24319., 25996., 29438., 31220., 33002., 34784.,
      19924., 21360., 22796., 24232., 27182., 28708., 30234., 31760., 15101.,
      16298., 17495., 18692., 21144., 22416., 23688., 24960., 13320., 14240.,
      15160., 16080., 18020., 19000., 19980., 20960., 14136., 15248., 16360.,
      17472., 19808., 20992., 22176., 23360., 16512., 17840., 19168., 20496.,
      23252., 24664., 26076., 27488., 14344., 15472., 16600., 17728., 20080.,
      21280., 22480., 23680., 13144., 14080., 15016., 15952., 17908., 18904.,
      19900., 20896.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15156., 15696., 16236., 16776., 17862., 18420., 18978., 19536., 16104.,
      16680., 17256., 17832., 18954., 19548., 20142., 20736., 17052., 17664.,
      18276., 18888., 20046., 20676., 21306., 21936., 17424., 18008., 18592.,
      19176., 20306., 20908., 21510., 22112., 18308., 18864., 19420., 19976.,
      21078., 21652., 22226., 22800., 17504., 18104., 18704., 19304., 20450.,
      21068., 21686., 22304., 18452., 19088., 19724., 20360., 21542., 22196.,
      22850., 23504., 19400., 20072., 20744., 21416., 22634., 23324., 24014.,
      24704., 17212., 17856., 18500., 19144., 20334., 20996., 21658., 22320.,
      15536., 16152., 16768., 17384., 18546., 19180., 19814., 20448., 13580.,
      14112., 14644., 15176., 16254., 16804., 17354., 17904., 13952., 14456.,
      14960., 15464., 16514., 17036., 17558., 18080., 14900., 15440., 15980.,
      16520., 17606., 18164., 18722., 19280., 15848., 16424., 17000., 17576.,
      18698., 19292., 19886., 20480., 16796., 17408., 18020., 18632., 19790.,
      20420., 21050., 21680., 15928., 16520., 17112., 17704., 18842., 19452.,
      20062., 20672., 13740., 14304., 14868., 15432., 16542., 17124., 17706.,
      18288., 12064., 12600., 13136., 13672., 14754., 15308., 15862., 16416.,
      10900., 11408., 11916., 12424., 13478., 14004., 14530., 15056., 10248.,
      10728., 11208., 11688., 12714., 13212., 13710., 14208., 13092., 13680.,
      14268., 14856., 15990., 16596., 17202., 17808., 14040., 14664., 15288.,
      15912., 17082., 17724., 18366., 19008., 13900., 14496., 15092., 15688.,
      16830., 17444., 18058., 18672., 14272., 14840., 15408., 15976., 17090.,
      17676., 18262., 18848., 15156., 15696., 16236., 16776., 17862., 18420.,
      18978., 19536.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16652., 18416., 20300., 22304., 17320., 19488., 21800., 24256., 17540.,
      20112., 22852., 25760., 13256., 15456., 17800., 20288., 10860., 12720.,
      14700., 16800., 17799., 20036., 22423., 24960., 26290., 29000., 31890.,
      34960., 25853., 29068., 32493., 36128., 18610., 21352., 24274., 27376.,
      13927., 16228., 18679., 21280., 18610., 21352., 24274., 27376., 26332.,
      29616., 33116., 36832., 38086., 41944., 46054., 50416., 26332., 29616.,
      33116., 36832., 18610., 21352., 24274., 27376., 13927., 16228., 18679.,
      21280., 18610., 21352., 24274., 27376., 25853., 29068., 32493., 36128.,
      26290., 29000., 31890., 34960., 17799., 20036., 22423., 24960., 10860.,
      12720., 14700., 16800., 13256., 15456., 17800., 20288., 17540., 20112.,
      22852., 25760., 17320., 19488., 21800., 24256., 16652., 18416., 20300.,
      22304.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      50394., 52104., 53850., 55632., 52914., 54696., 56514., 58368., 55434.,
      57288., 59178., 61104., 49122., 50920., 52754., 54624., 43322., 45064.,
      46842., 48656., 43074., 44904., 46770., 48672., 45594., 47496., 49434.,
      51408., 48114., 50088., 52098., 54144., 43338., 45256., 47210., 49200.,
      39074., 40936., 42834., 44768., 29354., 31048., 32778., 34544., 27138.,
      28776., 30450., 32160., 29658., 31368., 33114., 34896., 32178., 33960.,
      35778., 37632., 34698., 36552., 38442., 40368., 34322., 36136., 37986.,
      39872., 33642., 35400., 37194., 39024., 33474., 35176., 36914., 38688.,
      33818., 35464., 37146., 38864., 34674., 36264., 37890., 39552., 42234.,
      44040., 45882., 47760., 44754., 46632., 48546., 50496., 46122., 47944.,
      49802., 51696., 48002., 49768., 51570., 53408., 50394., 52104., 53850.,
      55632.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13028., 13880., 15632., 16544., 18476., 19448., 21560., 22592., 13448.,
      14512., 16656., 17792., 20152., 21360., 23936., 25216., 14620., 15880.,
      18400., 19744., 22516., 23944., 26968., 28480., 13864., 14960., 17136.,
      18304., 20696., 21936., 24544., 25856., 14276., 15224., 17072., 18080.,
      20108., 21176., 23384., 24512., 13163., 14222., 16410., 17544., 19957.,
      21166., 23804., 25088., 20070., 21380., 24024., 25424., 28338., 29828.,
      33012., 34592., 19461., 21018., 24154., 25816., 29267., 31034., 34800.,
      36672., 15710., 17060., 19760., 21200., 24170., 25700., 28940., 30560.,
      14867., 16014., 18306., 19528., 22045., 23342., 26084., 27456., 14766.,
      16068., 18720., 20112., 23034., 24516., 27708., 29280., 19308., 20888.,
      24072., 25760., 29268., 31064., 34896., 36800., 28930., 30796., 34536.,
      36528., 40646., 42764., 47260., 49504., 19708., 21304., 24504., 26208.,
      29732., 31544., 35392., 37312., 15710., 17060., 19760., 21200., 24170.,
      25700., 28940., 30560., 13623., 14702., 16902., 18056., 20481., 21710.,
      24360., 25664., 14766., 16068., 18720., 20112., 23034., 24516., 27708.,
      29280., 18921., 20474., 23582., 25240., 28663., 30426., 34164., 36032.,
      20070., 21380., 24024., 25424., 28338., 29828., 33012., 34592., 13695.,
      14798., 17006., 18184., 20617., 21870., 24528., 25856., 13924., 14776.,
      16528., 17440., 19372., 20344., 22456., 23488., 12904., 13936., 16048.,
      17152., 19480., 20656., 23200., 24448., 13948., 15176., 17664., 18976.,
      21716., 23112., 26104., 27584., 12776., 13808., 15920., 17024., 19352.,
      20528., 23072., 24320., 13028., 13880., 15632., 16544., 18476., 19448.,
      21560., 22592.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14414., 14900., 15896., 16400., 17450., 17972., 19076., 19616., 16310.,
      16868., 17936., 18512., 19634., 20228., 21404., 22016., 18206., 18836.,
      19976., 20624., 21818., 22484., 23732., 24416., 19526., 20164., 21312.,
      21968., 23170., 23844., 25100., 25792., 21294., 21876., 22968., 23568.,
      24714., 25332., 26532., 27168., 13926., 14468., 15520., 16080., 17186.,
      17764., 18924., 19520., 13710., 14260., 15320., 15888., 17002., 17588.,
      18756., 19360., 14006., 14564., 15632., 16208., 17330., 17924., 19100.,
      19712., 12766., 13332., 14408., 14992., 16122., 16724., 17908., 18528.,
      12038., 12612., 13696., 14288., 15426., 16036., 17228., 17856., 11838.,
      12372., 13416., 13968., 15066., 15636., 16788., 17376., 12582., 13060.,
      14048., 14544., 15586., 16100., 17196., 17728., 14414., 14900., 15896.,
      16400., 17450., 17972., 19076., 19616., 16310., 16868., 17936., 18512.,
      19634., 20228., 21404., 22016., 18206., 18836., 19976., 20624., 21818.,
      22484., 23732., 24416., 15894., 16420., 17456., 18000., 19090., 19652.,
      20796., 21376., 14654., 15188., 16232., 16784., 17882., 18452., 19604.,
      20192., 13926., 14468., 15520., 16080., 17186., 17764., 18924., 19520.,
      13710., 14260., 15320., 15888., 17002., 17588., 18756., 19360., 14006.,
      14564., 15632., 16208., 17330., 17924., 19100., 19712., 11822., 12404.,
      13496., 14096., 15242., 15860., 17060., 17696., 12118., 12708., 13808.,
      14416., 15570., 16196., 17404., 18048., 11838., 12372., 13416., 13968.,
      15066., 15636., 16788., 17376., 12582., 13060., 14048., 14544., 15586.,
      16100., 17196., 17728., 14414., 14900., 15896., 16400., 17450., 17972.,
      19076., 19616.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8500.,  9352.,  10204., 11056., 12688., 13600., 14512., 15424., 17356.,
      18328., 19300., 20272., 22504., 23536., 24568., 25600., 8552.,  9616.,
      10680., 11744., 13744., 14880., 16016., 17152., 19512., 20720., 21928.,
      23136., 25856., 27136., 28416., 29696., 12684., 13944., 15204., 16464.,
      18816., 20160., 21504., 22848., 25620., 27048., 28476., 29904., 33096.,
      34608., 36120., 37632., 8840.,  9936.,  11032., 12128., 14160., 15328.,
      16496., 17664., 20056., 21296., 22536., 23776., 26528., 27840., 29152.,
      30464., 9364.,  10312., 11260., 12208., 13936., 14944., 15952., 16960.,
      18988., 20056., 21124., 22192., 24520., 25648., 26776., 27904., 8723.,
      9782.,  10841., 11900., 13958., 15092., 16226., 17360., 19793., 21002.,
      22211., 23420., 26228., 27512., 28796., 30080., 13102., 14412., 15722.,
      17032., 19512., 20912., 22312., 23712., 26642., 28132., 29622., 31112.,
      34492., 36072., 37652., 39232., 12789., 14346., 15903., 17460., 20406.,
      22068., 23730., 25392., 28863., 30630., 32397., 34164., 38160., 40032.,
      41904., 43776., 13398., 14748., 16098., 17448., 19968., 21408., 22848.,
      24288., 27258., 28788., 30318., 31848., 35268., 36888., 38508., 40128.,
      9707.,  10854., 12001., 13148., 15294., 16516., 17738., 18960., 21481.,
      22778., 24075., 25372., 28268., 29640., 31012., 32384., 13222., 14524.,
      15826., 17128., 19600., 20992., 22384., 23776., 26698., 28180., 29662.,
      31144., 34516., 36088., 37660., 39232., 12428., 14008., 15588., 17168.,
      20152., 21840., 23528., 25216., 28740., 30536., 32332., 34128., 38192.,
      40096., 42000., 43904., 18810., 20676., 22542., 24408., 27912., 29904.,
      31896., 33888., 38022., 40140., 42258., 44376., 49140., 51384., 53628.,
      55872., 12828., 14424., 16020., 17616., 20616., 22320., 24024., 25728.,
      29268., 31080., 32892., 34704., 38784., 40704., 42624., 44544., 13398.,
      14748., 16098., 17448., 19968., 21408., 22848., 24288., 27258., 28788.,
      30318., 31848., 35268., 36888., 38508., 40128., 8055.,  9134.,  10213.,
      11292., 13322., 14476., 15630., 16784., 19189., 20418., 21647., 22876.,
      25656., 26960., 28264., 29568., 13222., 14524., 15826., 17128., 19600.,
      20992., 22384., 23776., 26698., 28180., 29662., 31144., 34516., 36088.,
      37660., 39232., 11969., 13522., 15075., 16628., 19522., 21180., 22838.,
      24496., 27915., 29678., 31441., 33204., 37148., 39016., 40884., 42752.,
      13102., 14412., 15722., 17032., 19512., 20912., 22312., 23712., 26642.,
      28132., 29622., 31112., 34492., 36072., 37652., 39232., 8591.,  9694.,
      10797., 11900., 13954., 15132., 16310., 17488., 19917., 21170., 22423.,
      23676., 26480., 27808., 29136., 30464., 8756.,  9608.,  10460., 11312.,
      12944., 13856., 14768., 15680., 17612., 18584., 19556., 20528., 22760.,
      23792., 24824., 25856., 8008.,  9040.,  10072., 11104., 13072., 14176.,
      15280., 16384., 18712., 19888., 21064., 22240., 24928., 26176., 27424.,
      28672., 12396., 13624., 14852., 16080., 18400., 19712., 21024., 22336.,
      25076., 26472., 27868., 29264., 32424., 33904., 35384., 36864., 8264.,
      9296.,  10328., 11360., 13328., 14432., 15536., 16640., 18968., 20144.,
      21320., 22496., 25184., 26432., 27680., 28928., 8500.,  9352.,  10204.,
      11056., 12688., 13600., 14512., 15424., 17356., 18328., 19300., 20272.,
      22504., 23536., 24568., 25600.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11446., 11932., 12418., 12904., 13880., 14384., 14888., 15392., 16458.,
      16980., 17502., 18024., 19180., 19720., 20260., 20800., 13118., 13676.,
      14234., 14792., 15840., 16416., 16992., 17568., 18706., 19300., 19894.,
      20488., 21716., 22328., 22940., 23552., 14790., 15420., 16050., 16680.,
      17800., 18448., 19096., 19744., 20954., 21620., 22286., 22952., 24252.,
      24936., 25620., 26304., 15374., 16012., 16650., 17288., 18416., 19072.,
      19728., 20384., 21602., 22276., 22950., 23624., 24932., 25624., 26316.,
      27008., 16918., 17500., 18082., 18664., 19736., 20336., 20936., 21536.,
      22698., 23316., 23934., 24552., 25804., 26440., 27076., 27712., 12462.,
      13004., 13546., 14088., 15120., 15680., 16240., 16800., 17922., 18500.,
      19078., 19656., 20868., 21464., 22060., 22656., 14070., 14620., 15170.,
      15720., 16760., 17328., 17896., 18464., 19594., 20180., 20766., 21352.,
      22572., 23176., 23780., 24384., 12606., 13164., 13722., 14280., 15328.,
      15904., 16480., 17056., 18194., 18788., 19382., 19976., 21204., 21816.,
      22428., 23040., 12166., 12732., 13298., 13864., 14920., 15504., 16088.,
      16672., 17818., 18420., 19022., 19624., 20860., 21480., 22100., 22720.,
      12750., 13324., 13898., 14472., 15536., 16128., 16720., 17312., 18466.,
      19076., 19686., 20296., 21540., 22168., 22796., 23424., 10342., 10876.,
      11410., 11944., 12968., 13520., 14072., 14624., 15738., 16308., 16878.,
      17448., 18652., 19240., 19828., 20416., 9838.,  10316., 10794., 11272.,
      12240., 12736., 13232., 13728., 14786., 15300., 15814., 16328., 17476.,
      18008., 18540., 19072., 11446., 11932., 12418., 12904., 13880., 14384.,
      14888., 15392., 16458., 16980., 17502., 18024., 19180., 19720., 20260.,
      20800., 13118., 13676., 14234., 14792., 15840., 16416., 16992., 17568.,
      18706., 19300., 19894., 20488., 21716., 22328., 22940., 23552., 14790.,
      15420., 16050., 16680., 17800., 18448., 19096., 19744., 20954., 21620.,
      22286., 22952., 24252., 24936., 25620., 26304., 12318., 12844., 13370.,
      13896., 14912., 15456., 16000., 16544., 17650., 18212., 18774., 19336.,
      20532., 21112., 21692., 22272., 11878., 12412., 12946., 13480., 14504.,
      15056., 15608., 16160., 17274., 17844., 18414., 18984., 20188., 20776.,
      21364., 21952., 12462., 13004., 13546., 14088., 15120., 15680., 16240.,
      16800., 17922., 18500., 19078., 19656., 20868., 21464., 22060., 22656.,
      14070., 14620., 15170., 15720., 16760., 17328., 17896., 18464., 19594.,
      20180., 20766., 21352., 22572., 23176., 23780., 24384., 12606., 13164.,
      13722., 14280., 15328., 15904., 16480., 17056., 18194., 18788., 19382.,
      19976., 21204., 21816., 22428., 23040., 14358., 14940., 15522., 16104.,
      17176., 17776., 18376., 18976., 20138., 20756., 21374., 21992., 23244.,
      23880., 24516., 25152., 12894., 13484., 14074., 14664., 15744., 16352.,
      16960., 17568., 18738., 19364., 19990., 20616., 21876., 22520., 23164.,
      23808., 10342., 10876., 11410., 11944., 12968., 13520., 14072., 14624.,
      15738., 16308., 16878., 17448., 18652., 19240., 19828., 20416., 9838.,
      10316., 10794., 11272., 12240., 12736., 13232., 13728., 14786., 15300.,
      15814., 16328., 17476., 18008., 18540., 19072., 11446., 11932., 12418.,
      12904., 13880., 14384., 14888., 15392., 16458., 16980., 17502., 18024.,
      19180., 19720., 20260., 20800.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16284., 19152., 22032., 19152., 16284., 22659., 26712., 30804., 26880.,
      22947., 35082., 41160., 47256., 41160., 35082., 22947., 26880., 30804.,
      26712., 22659., 16284., 19152., 22032., 19152., 16284.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22716., 23016., 23316., 23616., 23916., 25116., 25416., 25716., 26016.,
      26316., 27516., 27816., 28116., 28416., 28716., 29916., 30216., 30516.,
      30816., 31116., 32316., 32616., 32916., 33216., 33516.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22812., 23928., 26208., 27552., 29424., 31008., 24780., 26208., 20364.,
      21624., 22443., 23718., 25900., 27440., 29196., 31016., 24563., 26208.,
      20151., 21606., 32490., 34068., 37408., 39312., 42088., 44336., 35490.,
      37520., 29202., 30996., 21339., 22758., 24276., 25984., 26956., 28968.,
      22267., 24080., 17895., 19494., 22812., 23928., 26208., 27552., 29424.,
      31008., 24780., 26208., 20364., 21624.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      44124., 45432., 44700., 46032., 45276., 46632., 45852., 47232., 46428.,
      47832., 48732., 50232., 49308., 50832., 49884., 51432., 50460., 52032.,
      51036., 52632., 53340., 55032., 53916., 55632., 54492., 56232., 55068.,
      56832., 55644., 57432., 35420., 36792., 35996., 37392., 36572., 37992.,
      37148., 38592., 37724., 39192., 21596., 22648., 22172., 23248., 22748.,
      23848., 23324., 24448., 23900., 25048.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22044., 23160., 24276., 25392., 24192., 25536., 26880., 28224., 25776.,
      27360., 28944., 30528., 19908., 21336., 22764., 24192., 14700., 15960.,
      17220., 18480., 25275., 26550., 27825., 29100., 27860., 29400., 30940.,
      32480., 29820., 31640., 33460., 35280., 23065., 24710., 26355., 28000.,
      17055., 18510., 19965., 21420., 31242., 32820., 34398., 35976., 34384.,
      36288., 38192., 40096., 36744., 38992., 41240., 43488., 28406., 30436.,
      32466., 34496., 20994., 22788., 24582., 26376., 28011., 29430., 30849.,
      32268., 30716., 32424., 34132., 35840., 32700., 34712., 36724., 38736.,
      25249., 27062., 28875., 30688., 18639., 20238., 21837., 23436., 22044.,
      23160., 24276., 25392., 24192., 25536., 26880., 28224., 25776., 27360.,
      28944., 30528., 19908., 21336., 22764., 24192., 14700., 15960., 17220.,
      18480.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26780., 27576., 28372., 29168., 27396., 28216., 29036., 29856., 28012.,
      28856., 29700., 30544., 28628., 29496., 30364., 31232., 29244., 30136.,
      31028., 31920., 17628., 18360., 19092., 19824., 18244., 19000., 19756.,
      20512., 18860., 19640., 20420., 21200., 19476., 20280., 21084., 21888.,
      20092., 20920., 21748., 22576., 12572., 13240., 13908., 14576., 13188.,
      13880., 14572., 15264., 13804., 14520., 15236., 15952., 14420., 15160.,
      15900., 16640., 15036., 15800., 16564., 17328., 11612., 12216., 12820.,
      13424., 12228., 12856., 13484., 14112., 12844., 13496., 14148., 14800.,
      13460., 14136., 14812., 15488., 14076., 14776., 15476., 16176., 14748.,
      15288., 15828., 16368., 15364., 15928., 16492., 17056., 15980., 16568.,
      17156., 17744., 16596., 17208., 17820., 18432., 17212., 17848., 18484.,
      19120.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23592., 25968., 28140., 30912., 32736., 35904., 28140., 30912., 23592.,
      25968., 17394., 20364., 21399., 24864., 25560., 29520., 22071., 25536.,
      18546., 21516., 35388., 38952., 42210., 46368., 49104., 53856., 42210.,
      46368., 35388., 38952., 18546., 21516., 22071., 25536., 25560., 29520.,
      21399., 24864., 17394., 20364., 23592., 25968., 28140., 30912., 32736.,
      35904., 28140., 30912., 23592., 25968.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      46712., 48880., 47864., 50080., 49016., 51280., 50168., 52480., 51320.,
      53680., 41592., 43632., 42744., 44832., 43896., 46032., 45048., 47232.,
      46200., 48432., 40568., 42480., 41720., 43680., 42872., 44880., 44024.,
      46080., 45176., 47280., 27256., 29040., 28408., 30240., 29560., 31440.,
      30712., 32640., 31864., 33840., 18040., 19696., 19192., 20896., 20344.,
      22096., 21496., 23296., 22648., 24496.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20832., 21840., 24360., 25440., 24108., 25368., 28224., 29568., 27072.,
      28608., 31776., 33408., 21252., 22680., 25368., 26880., 15936., 17232.,
      19464., 20832., 23304., 24420., 27426., 28632., 27279., 28686., 32088.,
      33600., 30960., 32688., 36456., 38304., 24381., 25998., 29190., 30912.,
      18336., 19812., 22458., 24024., 31248., 32760., 36540., 38160., 36162.,
      38052., 42336., 44352., 40608., 42912., 47664., 50112., 31878., 34020.,
      38052., 40320., 23904., 25848., 29196., 31248., 28776., 30180., 33474.,
      34968., 32991., 34734., 38472., 40320., 36720., 38832., 42984., 45216.,
      28749., 30702., 34230., 36288., 21504., 23268., 26202., 28056., 20832.,
      21840., 24360., 25440., 24108., 25368., 28224., 29568., 27072., 28608.,
      31776., 33408., 21252., 22680., 25368., 26880., 15936., 17232., 19464.,
      20832.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21200., 21744., 22952., 23520., 22432., 23024., 24280., 24896., 23664.,
      24304., 25608., 26272., 24896., 25584., 26936., 27648., 26128., 26864.,
      28264., 29024., 16976., 17648., 18984., 19680., 18208., 18928., 20312.,
      21056., 19440., 20208., 21640., 22432., 20672., 21488., 22968., 23808.,
      21904., 22768., 24296., 25184., 16848., 17648., 19112., 19936., 18080.,
      18928., 20440., 21312., 19312., 20208., 21768., 22688., 20544., 21488.,
      23096., 24064., 21776., 22768., 24424., 25440., 14928., 15600., 16936.,
      17632., 16160., 16880., 18264., 19008., 17392., 18160., 19592., 20384.,
      18624., 19440., 20920., 21760., 19856., 20720., 22248., 23136., 21200.,
      21744., 22952., 23520., 22432., 23024., 24280., 24896., 23664., 24304.,
      25608., 26272., 24896., 25584., 26936., 27648., 26128., 26864., 28264.,
      29024.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16080., 17088., 18096., 19104., 21528., 22608., 23688., 24768., 19308.,
      20568., 21828., 23088., 25920., 27264., 28608., 29952., 21888., 23424.,
      24960., 26496., 29664., 31296., 32928., 34560., 16884., 18312., 19740.,
      21168., 23880., 25392., 26904., 28416., 13680., 14976., 16272., 17568.,
      19896., 21264., 22632., 24000., 17844., 18960., 20076., 21192., 24078.,
      25284., 26490., 27696., 21663., 23070., 24477., 25884., 29256., 30768.,
      32280., 33792., 24864., 26592., 28320., 30048., 33816., 35664., 37512.,
      39360., 19209., 20826., 22443., 24060., 27282., 29004., 30726., 32448.,
      15612., 17088., 18564., 20040., 22806., 24372., 25938., 27504., 24120.,
      25632., 27144., 28656., 32292., 33912., 35532., 37152., 28962., 30852.,
      32742., 34632., 38880., 40896., 42912., 44928., 32832., 35136., 37440.,
      39744., 44496., 46944., 49392., 51840., 25326., 27468., 29610., 31752.,
      35820., 38088., 40356., 42624., 20520., 22464., 24408., 26352., 29844.,
      31896., 33948., 36000., 22356., 23760., 25164., 26568., 29742., 31236.,
      32730., 34224., 26607., 28350., 30093., 31836., 35544., 37392., 39240.,
      41088., 29856., 31968., 34080., 36192., 40344., 42576., 44808., 47040.,
      23001., 24954., 26907., 28860., 32418., 34476., 36534., 38592., 18588.,
      20352., 22116., 23880., 26934., 28788., 30642., 32496., 16080., 17088.,
      18096., 19104., 21528., 22608., 23688., 24768., 19308., 20568., 21828.,
      23088., 25920., 27264., 28608., 29952., 21888., 23424., 24960., 26496.,
      29664., 31296., 32928., 34560., 16884., 18312., 19740., 21168., 23880.,
      25392., 26904., 28416., 13680., 14976., 16272., 17568., 19896., 21264.,
      22632., 24000.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19328., 19872., 20416., 20960., 22296., 22864., 23432., 24000., 20720.,
      21312., 21904., 22496., 23880., 24496., 25112., 25728., 22112., 22752.,
      23392., 24032., 25464., 26128., 26792., 27456., 23504., 24192., 24880.,
      25568., 27048., 27760., 28472., 29184., 24896., 25632., 26368., 27104.,
      28632., 29392., 30152., 30912., 18944., 19616., 20288., 20960., 22424.,
      23120., 23816., 24512., 20336., 21056., 21776., 22496., 24008., 24752.,
      25496., 26240., 21728., 22496., 23264., 24032., 25592., 26384., 27176.,
      27968., 23120., 23936., 24752., 25568., 27176., 28016., 28856., 29696.,
      24512., 25376., 26240., 27104., 28760., 29648., 30536., 31424., 26752.,
      27552., 28352., 29152., 30744., 31568., 32392., 33216., 28144., 28992.,
      29840., 30688., 32328., 33200., 34072., 34944., 29536., 30432., 31328.,
      32224., 33912., 34832., 35752., 36672., 30928., 31872., 32816., 33760.,
      35496., 36464., 37432., 38400., 32320., 33312., 34304., 35296., 37080.,
      38096., 39112., 40128., 14848., 15520., 16192., 16864., 18328., 19024.,
      19720., 20416., 16240., 16960., 17680., 18400., 19912., 20656., 21400.,
      22144., 17632., 18400., 19168., 19936., 21496., 22288., 23080., 23872.,
      19024., 19840., 20656., 21472., 23080., 23920., 24760., 25600., 20416.,
      21280., 22144., 23008., 24664., 25552., 26440., 27328., 19328., 19872.,
      20416., 20960., 22296., 22864., 23432., 24000., 20720., 21312., 21904.,
      22496., 23880., 24496., 25112., 25728., 22112., 22752., 23392., 24032.,
      25464., 26128., 26792., 27456., 23504., 24192., 24880., 25568., 27048.,
      27760., 28472., 29184., 24896., 25632., 26368., 27104., 28632., 29392.,
      30152., 30912.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18408., 20640., 23016., 25536., 23940., 26544., 29316., 32256., 29664.,
      32640., 35808., 39168., 23940., 26544., 29316., 32256., 18408., 20640.,
      23016., 25536., 23010., 25800., 28770., 31920., 29925., 33180., 36645.,
      40320., 37080., 40800., 44760., 48960., 29925., 33180., 36645., 40320.,
      23010., 25800., 28770., 31920., 27612., 30960., 34524., 38304., 35910.,
      39816., 43974., 48384., 44496., 48960., 53712., 58752., 35910., 39816.,
      43974., 48384., 27612., 30960., 34524., 38304., 23010., 25800., 28770.,
      31920., 29925., 33180., 36645., 40320., 37080., 40800., 44760., 48960.,
      29925., 33180., 36645., 40320., 23010., 25800., 28770., 31920., 18408.,
      20640., 23016., 25536., 23940., 26544., 29316., 32256., 29664., 32640.,
      35808., 39168., 23940., 26544., 29316., 32256., 18408., 20640., 23016.,
      25536.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17720., 18912., 20152., 21440., 20184., 21472., 22808., 24192., 22648.,
      24032., 25464., 26944., 25112., 26592., 28120., 29696., 27576., 29152.,
      30776., 32448., 11576., 12768., 14008., 15296., 14040., 15328., 16664.,
      18048., 16504., 17888., 19320., 20800., 18968., 20448., 21976., 23552.,
      21432., 23008., 24632., 26304., 17720., 18912., 20152., 21440., 20184.,
      21472., 22808., 24192., 22648., 24032., 25464., 26944., 25112., 26592.,
      28120., 29696., 27576., 29152., 30776., 32448., 11576., 12768., 14008.,
      15296., 14040., 15328., 16664., 18048., 16504., 17888., 19320., 20800.,
      18968., 20448., 21976., 23552., 21432., 23008., 24632., 26304., 17720.,
      18912., 20152., 21440., 20184., 21472., 22808., 24192., 22648., 24032.,
      25464., 26944., 25112., 26592., 28120., 29696., 27576., 29152., 30776.,
      32448.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12984., 13776., 15840., 16704., 18984., 19920., 22416., 23424., 17604.,
      18696., 21192., 22368., 25116., 26376., 29376., 30720., 22560., 24000.,
      26880., 28416., 31584., 33216., 36672., 38400., 17652., 19080., 21624.,
      23136., 25932., 27528., 30576., 32256., 14712., 16080., 18336., 19776.,
      22248., 23760., 26448., 28032., 16230., 17220., 19800., 20880., 23730.,
      24900., 28020., 29280., 22005., 23370., 26490., 27960., 31395., 32970.,
      36720., 38400., 28200., 30000., 33600., 35520., 39480., 41520., 45840.,
      48000., 22065., 23850., 27030., 28920., 32415., 34410., 38220., 40320.,
      18390., 20100., 22920., 24720., 27810., 29700., 33060., 35040., 19476.,
      20664., 23760., 25056., 28476., 29880., 33624., 35136., 26406., 28044.,
      31788., 33552., 37674., 39564., 44064., 46080., 33840., 36000., 40320.,
      42624., 47376., 49824., 55008., 57600., 26478., 28620., 32436., 34704.,
      38898., 41292., 45864., 48384., 22068., 24120., 27504., 29664., 33372.,
      35640., 39672., 42048., 16230., 17220., 19800., 20880., 23730., 24900.,
      28020., 29280., 22005., 23370., 26490., 27960., 31395., 32970., 36720.,
      38400., 28200., 30000., 33600., 35520., 39480., 41520., 45840., 48000.,
      22065., 23850., 27030., 28920., 32415., 34410., 38220., 40320., 18390.,
      20100., 22920., 24720., 27810., 29700., 33060., 35040., 12984., 13776.,
      15840., 16704., 18984., 19920., 22416., 23424., 17604., 18696., 21192.,
      22368., 25116., 26376., 29376., 30720., 22560., 24000., 26880., 28416.,
      31584., 33216., 36672., 38400., 17652., 19080., 21624., 23136., 25932.,
      27528., 30576., 32256., 14712., 16080., 18336., 19776., 22248., 23760.,
      26448., 28032.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23112., 23664., 24960., 25536., 26904., 27504., 28944., 29568., 25896.,
      26544., 27936., 28608., 30072., 30768., 32304., 33024., 28680., 29424.,
      30912., 31680., 33240., 34032., 35664., 36480., 31464., 32304., 33888.,
      34752., 36408., 37296., 39024., 39936., 34248., 35184., 36864., 37824.,
      39576., 40560., 42384., 43392., 10824., 11376., 12672., 13248., 14616.,
      15216., 16656., 17280., 13608., 14256., 15648., 16320., 17784., 18480.,
      20016., 20736., 16392., 17136., 18624., 19392., 20952., 21744., 23376.,
      24192., 19176., 20016., 21600., 22464., 24120., 25008., 26736., 27648.,
      21960., 22896., 24576., 25536., 27288., 28272., 30096., 31104., 23112.,
      23664., 24960., 25536., 26904., 27504., 28944., 29568., 25896., 26544.,
      27936., 28608., 30072., 30768., 32304., 33024., 28680., 29424., 30912.,
      31680., 33240., 34032., 35664., 36480., 31464., 32304., 33888., 34752.,
      36408., 37296., 39024., 39936., 34248., 35184., 36864., 37824., 39576.,
      40560., 42384., 43392., 10824., 11376., 12672., 13248., 14616., 15216.,
      16656., 17280., 13608., 14256., 15648., 16320., 17784., 18480., 20016.,
      20736., 16392., 17136., 18624., 19392., 20952., 21744., 23376., 24192.,
      19176., 20016., 21600., 22464., 24120., 25008., 26736., 27648., 21960.,
      22896., 24576., 25536., 27288., 28272., 30096., 31104., 23112., 23664.,
      24960., 25536., 26904., 27504., 28944., 29568., 25896., 26544., 27936.,
      28608., 30072., 30768., 32304., 33024., 28680., 29424., 30912., 31680.,
      33240., 34032., 35664., 36480., 31464., 32304., 33888., 34752., 36408.,
      37296., 39024., 39936., 34248., 35184., 36864., 37824., 39576., 40560.,
      42384., 43392.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8280.,  9072.,  9864.,  10656., 12384., 13248., 14112., 14976., 17064.,
      18000., 18936., 19872., 22320., 23328., 24336., 25344., 11076., 12168.,
      13260., 14352., 16632., 17808., 18984., 20160., 22860., 24120., 25380.,
      26640., 29760., 31104., 32448., 33792., 14496., 15936., 17376., 18816.,
      21504., 23040., 24576., 26112., 29280., 30912., 32544., 34176., 37824.,
      39552., 41280., 43008., 11220., 12648., 14076., 15504., 17928., 19440.,
      20952., 22464., 25308., 26904., 28500., 30096., 33360., 35040., 36720.,
      38400., 13464., 14832., 16200., 17568., 19872., 21312., 22752., 24192.,
      26856., 28368., 29880., 31392., 34416., 36000., 37584., 39168., 10350.,
      11340., 12330., 13320., 15480., 16560., 17640., 18720., 21330., 22500.,
      23670., 24840., 27900., 29160., 30420., 31680., 13845., 15210., 16575.,
      17940., 20790., 22260., 23730., 25200., 28575., 30150., 31725., 33300.,
      37200., 38880., 40560., 42240., 18120., 19920., 21720., 23520., 26880.,
      28800., 30720., 32640., 36600., 38640., 40680., 42720., 47280., 49440.,
      51600., 53760., 14025., 15810., 17595., 19380., 22410., 24300., 26190.,
      28080., 31635., 33630., 35625., 37620., 41700., 43800., 45900., 48000.,
      16830., 18540., 20250., 21960., 24840., 26640., 28440., 30240., 33570.,
      35460., 37350., 39240., 43020., 45000., 46980., 48960., 12420., 13608.,
      14796., 15984., 18576., 19872., 21168., 22464., 25596., 27000., 28404.,
      29808., 33480., 34992., 36504., 38016., 16614., 18252., 19890., 21528.,
      24948., 26712., 28476., 30240., 34290., 36180., 38070., 39960., 44640.,
      46656., 48672., 50688., 21744., 23904., 26064., 28224., 32256., 34560.,
      36864., 39168., 43920., 46368., 48816., 51264., 56736., 59328., 61920.,
      64512., 16830., 18972., 21114., 23256., 26892., 29160., 31428., 33696.,
      37962., 40356., 42750., 45144., 50040., 52560., 55080., 57600., 20196.,
      22248., 24300., 26352., 29808., 31968., 34128., 36288., 40284., 42552.,
      44820., 47088., 51624., 54000., 56376., 58752., 10350., 11340., 12330.,
      13320., 15480., 16560., 17640., 18720., 21330., 22500., 23670., 24840.,
      27900., 29160., 30420., 31680., 13845., 15210., 16575., 17940., 20790.,
      22260., 23730., 25200., 28575., 30150., 31725., 33300., 37200., 38880.,
      40560., 42240., 18120., 19920., 21720., 23520., 26880., 28800., 30720.,
      32640., 36600., 38640., 40680., 42720., 47280., 49440., 51600., 53760.,
      14025., 15810., 17595., 19380., 22410., 24300., 26190., 28080., 31635.,
      33630., 35625., 37620., 41700., 43800., 45900., 48000., 16830., 18540.,
      20250., 21960., 24840., 26640., 28440., 30240., 33570., 35460., 37350.,
      39240., 43020., 45000., 46980., 48960., 8280.,  9072.,  9864.,  10656.,
      12384., 13248., 14112., 14976., 17064., 18000., 18936., 19872., 22320.,
      23328., 24336., 25344., 11076., 12168., 13260., 14352., 16632., 17808.,
      18984., 20160., 22860., 24120., 25380., 26640., 29760., 31104., 32448.,
      33792., 14496., 15936., 17376., 18816., 21504., 23040., 24576., 26112.,
      29280., 30912., 32544., 34176., 37824., 39552., 41280., 43008., 11220.,
      12648., 14076., 15504., 17928., 19440., 20952., 22464., 25308., 26904.,
      28500., 30096., 33360., 35040., 36720., 38400., 13464., 14832., 16200.,
      17568., 19872., 21312., 22752., 24192., 26856., 28368., 29880., 31392.,
      34416., 36000., 37584., 39168.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15720., 16272., 16824., 17376., 18624., 19200., 19776., 20352., 21720.,
      22320., 22920., 23520., 25008., 25632., 26256., 26880., 18120., 18768.,
      19416., 20064., 21408., 22080., 22752., 23424., 24888., 25584., 26280.,
      26976., 28560., 29280., 30000., 30720., 20520., 21264., 22008., 22752.,
      24192., 24960., 25728., 26496., 28056., 28848., 29640., 30432., 32112.,
      32928., 33744., 34560., 22920., 23760., 24600., 25440., 26976., 27840.,
      28704., 29568., 31224., 32112., 33000., 33888., 35664., 36576., 37488.,
      38400., 25320., 26256., 27192., 28128., 29760., 30720., 31680., 32640.,
      34392., 35376., 36360., 37344., 39216., 40224., 41232., 42240., 15720.,
      16272., 16824., 17376., 18624., 19200., 19776., 20352., 21720., 22320.,
      22920., 23520., 25008., 25632., 26256., 26880., 18120., 18768., 19416.,
      20064., 21408., 22080., 22752., 23424., 24888., 25584., 26280., 26976.,
      28560., 29280., 30000., 30720., 20520., 21264., 22008., 22752., 24192.,
      24960., 25728., 26496., 28056., 28848., 29640., 30432., 32112., 32928.,
      33744., 34560., 22920., 23760., 24600., 25440., 26976., 27840., 28704.,
      29568., 31224., 32112., 33000., 33888., 35664., 36576., 37488., 38400.,
      25320., 26256., 27192., 28128., 29760., 30720., 31680., 32640., 34392.,
      35376., 36360., 37344., 39216., 40224., 41232., 42240., 15720., 16272.,
      16824., 17376., 18624., 19200., 19776., 20352., 21720., 22320., 22920.,
      23520., 25008., 25632., 26256., 26880., 18120., 18768., 19416., 20064.,
      21408., 22080., 22752., 23424., 24888., 25584., 26280., 26976., 28560.,
      29280., 30000., 30720., 20520., 21264., 22008., 22752., 24192., 24960.,
      25728., 26496., 28056., 28848., 29640., 30432., 32112., 32928., 33744.,
      34560., 22920., 23760., 24600., 25440., 26976., 27840., 28704., 29568.,
      31224., 32112., 33000., 33888., 35664., 36576., 37488., 38400., 25320.,
      26256., 27192., 28128., 29760., 30720., 31680., 32640., 34392., 35376.,
      36360., 37344., 39216., 40224., 41232., 42240., 15720., 16272., 16824.,
      17376., 18624., 19200., 19776., 20352., 21720., 22320., 22920., 23520.,
      25008., 25632., 26256., 26880., 18120., 18768., 19416., 20064., 21408.,
      22080., 22752., 23424., 24888., 25584., 26280., 26976., 28560., 29280.,
      30000., 30720., 20520., 21264., 22008., 22752., 24192., 24960., 25728.,
      26496., 28056., 28848., 29640., 30432., 32112., 32928., 33744., 34560.,
      22920., 23760., 24600., 25440., 26976., 27840., 28704., 29568., 31224.,
      32112., 33000., 33888., 35664., 36576., 37488., 38400., 25320., 26256.,
      27192., 28128., 29760., 30720., 31680., 32640., 34392., 35376., 36360.,
      37344., 39216., 40224., 41232., 42240., 15720., 16272., 16824., 17376.,
      18624., 19200., 19776., 20352., 21720., 22320., 22920., 23520., 25008.,
      25632., 26256., 26880., 18120., 18768., 19416., 20064., 21408., 22080.,
      22752., 23424., 24888., 25584., 26280., 26976., 28560., 29280., 30000.,
      30720., 20520., 21264., 22008., 22752., 24192., 24960., 25728., 26496.,
      28056., 28848., 29640., 30432., 32112., 32928., 33744., 34560., 22920.,
      23760., 24600., 25440., 26976., 27840., 28704., 29568., 31224., 32112.,
      33000., 33888., 35664., 36576., 37488., 38400., 25320., 26256., 27192.,
      28128., 29760., 30720., 31680., 32640., 34392., 35376., 36360., 37344.,
      39216., 40224., 41232., 42240.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12926., 16648., 20437., 17548., 14718., 19060., 24694., 30422., 26034.,
      21716., 27210., 35450., 43775., 35450., 27210., 21716., 26034., 30422.,
      24694., 19060., 14718., 17548., 20437., 16648., 12926.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11637., 11808., 11979., 12150., 12321., 12663., 12834., 13005., 13176.,
      13347., 13689., 13860., 14031., 14202., 14373., 14715., 14886., 15057.,
      15228., 15399., 15741., 15912., 16083., 16254., 16425.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15262., 16220., 18717., 19920., 22067., 23530., 18426., 19672., 15174.,
      16188., 17100., 18248., 21716., 23148., 26214., 27948., 22194., 23652.,
      18652., 19816., 23026., 24372., 30269., 31956., 37341., 39390., 30132.,
      31860., 23466., 24852., 19356., 20552., 23248., 24740., 26974., 28780.,
      22238., 23756., 17996., 19208., 15502., 16476., 19297., 20504., 22971.,
      24426., 19790., 21008., 17014., 17980.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22383., 23274., 22707., 23616., 23031., 23958., 23355., 24300., 23679.,
      24642., 24327., 25326., 24651., 25668., 24975., 26010., 25299., 26352.,
      25623., 26694., 26271., 27378., 26595., 27720., 26919., 28062., 27243.,
      28404., 27567., 28746., 28215., 29430., 28539., 29772., 28863., 30114.,
      29187., 30456., 29511., 30798., 30159., 31482., 30483., 31824., 30807.,
      32166., 31131., 32508., 31455., 32850.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13630., 14588., 15546., 16504., 17351., 18554., 19757., 20960., 20591.,
      22054., 23517., 24980., 17046., 18292., 19538., 20784., 14486., 15500.,
      16514., 17528., 18780., 19928., 21076., 22224., 22320., 23752., 25184.,
      26616., 25318., 27052., 28786., 30520., 19922., 21380., 22838., 24296.,
      15756., 16920., 18084., 19248., 20418., 21764., 23110., 24456., 26883.,
      28570., 30257., 31944., 32665., 34714., 36763., 38812., 25672., 27400.,
      29128., 30856., 20106., 21492., 22878., 24264., 18380., 19576., 20772.,
      21968., 23244., 24736., 26228., 27720., 27502., 29308., 31114., 32920.,
      22862., 24380., 25898., 27416., 19484., 20696., 21908., 23120., 15054.,
      16028., 17002., 17976., 18379., 19586., 20793., 22000., 21255., 22710.,
      24165., 25620., 17530., 18748., 19966., 21184., 14854., 15820., 16786.,
      17752.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16931., 17438., 17945., 18452., 17433., 17958., 18483., 19008., 17935.,
      18478., 19021., 19564., 18437., 18998., 19559., 20120., 18939., 19518.,
      20097., 20676., 19943., 20558., 21173., 21788., 20445., 21078., 21711.,
      22344., 20947., 21598., 22249., 22900., 18569., 19174., 19779., 20384.,
      16447., 17006., 17565., 18124., 17451., 18046., 18641., 19236., 17953.,
      18566., 19179., 19792., 18455., 19086., 19717., 20348., 16589., 17174.,
      17759., 18344., 14979., 15518., 16057., 16596., 15983., 16558., 17133.,
      17708., 16485., 17078., 17671., 18264., 16987., 17598., 18209., 18820.,
      15633., 16198., 16763., 17328., 14535., 15054., 15573., 16092., 15539.,
      16094., 16649., 17204., 16041., 16614., 17187., 17760., 16543., 17134.,
      17725., 18316., 17045., 17654., 18263., 18872., 17547., 18174., 18801.,
      19428.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16812., 18744., 18977., 21408., 21474., 24404., 17905., 20400., 14636.,
      16696., 14760., 17104., 18726., 21656., 23068., 26584., 20406., 23368.,
      18088., 20496., 23716., 26472., 32579., 36008., 41846., 45948., 32579.,
      36008., 23716., 26472., 18088., 20496., 20406., 23368., 23068., 26584.,
      18726., 21656., 14760., 17104., 14636., 16696., 17905., 20400., 21474.,
      24404., 18977., 21408., 16812., 18744.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21402., 22740., 22050., 23424., 22698., 24108., 23346., 24792., 23994.,
      25476., 25290., 26844., 25938., 27528., 26586., 28212., 24290., 25824.,
      22250., 23692., 23546., 25060., 24194., 25744., 24842., 26428., 23058.,
      24552., 21530., 22932., 22826., 24300., 23474., 24984., 24122., 25668.,
      22850., 24304., 21834., 23196., 23130., 24564., 23778., 25248., 24426.,
      25932., 25074., 26616., 25722., 27300.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13976., 14936., 16884., 17904., 16551., 17730., 20186., 21440., 19248.,
      20676., 23610., 25128., 16081., 17314., 19780., 21088., 13928., 14936.,
      16964., 18032., 19424., 20560., 22888., 24096., 21686., 23084., 26016.,
      27504., 24088., 25784., 29284., 31088., 19394., 20844., 23756., 25296.,
      15936., 17104., 19464., 20704., 19352., 20680., 23436., 24848., 26849.,
      28486., 31938., 33680., 34472., 36460., 40566., 42680., 26031., 27718.,
      31120., 32912., 19080., 20424., 23164., 24592., 16320., 17488., 19912.,
      21152., 20830., 22252., 25256., 26768., 25480., 27192., 30740., 32560.,
      21802., 23244., 26164., 27696., 19424., 20560., 22888., 24096., 15736.,
      16728., 18772., 19824., 17279., 18466., 20978., 22240., 19008., 20420.,
      23370., 24872., 15753., 16930., 19356., 20608., 13640., 14552., 16484.,
      17456.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41808., 42804., 44466., 45480., 43068., 44100., 45798., 46848., 44328.,
      45396., 47130., 48216., 45588., 46692., 48462., 49584., 46848., 47988.,
      49794., 50952., 49368., 50580., 52458., 53688., 50628., 51876., 53790.,
      55056., 51888., 53172., 55122., 56424., 47388., 48580., 50438., 51648.,
      43400., 44500., 46266., 47384., 45920., 47092., 48930., 50120., 47180.,
      48388., 50262., 51488., 48440., 49684., 51594., 52856., 44964., 46116.,
      47934., 49104., 42000., 43060., 44786., 45864., 44520., 45652., 47450.,
      48600., 45780., 46948., 48782., 49968., 47040., 48244., 50114., 51336.,
      44588., 45700., 47478., 48608., 42648., 43668., 45354., 46392., 45168.,
      46260., 48018., 49128., 46428., 47556., 49350., 50496., 47688., 48852.,
      50682., 51864., 48948., 50148., 52014., 53232., 50208., 51444., 53346.,
      54600.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12656., 13616., 14576., 15536., 17516., 18536., 19556., 20576., 16563.,
      17742., 18921., 20100., 22606., 23860., 25114., 26368., 20172., 21600.,
      23028., 24456., 27398., 28916., 30434., 31952., 14769., 16002., 17235.,
      18468., 20908., 22216., 23524., 24832., 11872., 12880., 13888., 14896.,
      16924., 17992., 19060., 20128., 15568., 16704., 17840., 18976., 21336.,
      22544., 23752., 24960., 18390., 19788., 21186., 22584., 25584., 27072.,
      28560., 30048., 20880., 22576., 24272., 25968., 29500., 31304., 33108.,
      34912., 17402., 18852., 20302., 21752., 24660., 26200., 27740., 29280.,
      17008., 18176., 19344., 20512., 22904., 24144., 25384., 26624., 16512.,
      17840., 19168., 20496., 23252., 24664., 26076., 27488., 22429., 24066.,
      25703., 27340., 30838., 32580., 34322., 36064., 27916., 29904., 31892.,
      33880., 37994., 40108., 42222., 44336., 20263., 21950., 23637., 25324.,
      28704., 30496., 32288., 34080., 16336., 17680., 19024., 20368., 23140.,
      24568., 25996., 27424., 16496., 17664., 18832., 20000., 22392., 23632.,
      24872., 26112., 18990., 20412., 21834., 23256., 26280., 27792., 29304.,
      30816., 21216., 22928., 24640., 26352., 29900., 31720., 33540., 35360.,
      17266., 18708., 20150., 21592., 24492., 26024., 27556., 29088., 16592.,
      17728., 18864., 20000., 22360., 23568., 24776., 25984., 12048., 13040.,
      14032., 15024., 17036., 18088., 19140., 20192., 15867., 17054., 18241.,
      19428., 21942., 23204., 24466., 25728., 19580., 20992., 22404., 23816.,
      26742., 28244., 29746., 31248., 13689., 14866., 16043., 17220., 19604.,
      20856., 22108., 23360., 10624., 11536., 12448., 13360., 15292., 16264.,
      17236., 18208.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16060., 16544., 17028., 17512., 18542., 19044., 19546., 20048., 17008.,
      17528., 18048., 18568., 19634., 20172., 20710., 21248., 17956., 18512.,
      19068., 19624., 20726., 21300., 21874., 22448., 18904., 19496., 20088.,
      20680., 21818., 22428., 23038., 23648., 19852., 20480., 21108., 21736.,
      22910., 23556., 24202., 24848., 14964., 15536., 16108., 16680., 17798.,
      18388., 18978., 19568., 15912., 16520., 17128., 17736., 18890., 19516.,
      20142., 20768., 16860., 17504., 18148., 18792., 19982., 20644., 21306.,
      21968., 16208., 16824., 17440., 18056., 19218., 19852., 20486., 21120.,
      16068., 16656., 17244., 17832., 18966., 19572., 20178., 20784., 13228.,
      13760., 14292., 14824., 15902., 16452., 17002., 17552., 14176., 14744.,
      15312., 15880., 16994., 17580., 18166., 18752., 15124., 15728., 16332.,
      16936., 18086., 18708., 19330., 19952., 15496., 16072., 16648., 17224.,
      18346., 18940., 19534., 20128., 16380., 16928., 17476., 18024., 19118.,
      19684., 20250., 20816., 18276., 18896., 19516., 20136., 21302., 21940.,
      22578., 23216., 16600., 17192., 17784., 18376., 19514., 20124., 20734.,
      21344., 15436., 16000., 16564., 17128., 18238., 18820., 19402., 19984.,
      12736., 13272., 13808., 14344., 15426., 15980., 16534., 17088., 10548.,
      11056., 11564., 12072., 13126., 13652., 14178., 14704., 12444., 13024.,
      13604., 14184., 15310., 15908., 16506., 17104., 11792., 12344., 12896.,
      13448., 14546., 15116., 15686., 16256., 11652., 12176., 12700., 13224.,
      14294., 14836., 15378., 15920., 12600., 13160., 13720., 14280., 15386.,
      15964., 16542., 17120., 13548., 14144., 14740., 15336., 16478., 17092.,
      17706., 18320.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12428., 14256., 16204., 18272., 13639., 15940., 18391., 20992., 16050.,
      18824., 21778., 24912., 13991., 16324., 18807., 21440., 13132., 15024.,
      17036., 19168., 21032., 23200., 25512., 27968., 21154., 23896., 26818.,
      29920., 22652., 25968., 29500., 33248., 17154., 19928., 22882., 26016.,
      13032., 15264., 17640., 20160., 17540., 20112., 22852., 25760., 27005.,
      30220., 33645., 37280., 38086., 41944., 46054., 50416., 27005., 30220.,
      33645., 37280., 17540., 20112., 22852., 25760., 13032., 15264., 17640.,
      20160., 17154., 19928., 22882., 26016., 22652., 25968., 29500., 33248.,
      21154., 23896., 26818., 29920., 21032., 23200., 25512., 27968., 13132.,
      15024., 17036., 19168., 13991., 16324., 18807., 21440., 16050., 18824.,
      21778., 24912., 13639., 15940., 18391., 20992., 12428., 14256., 16204.,
      18272.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      38954., 40552., 42186., 43856., 41474., 43144., 44850., 46592., 43994.,
      45736., 47514., 49328., 46514., 48328., 50178., 52064., 49034., 50920.,
      52842., 54800., 38970., 40744., 42554., 44400., 41490., 43336., 45218.,
      47136., 44010., 45928., 47882., 49872., 40770., 42632., 44530., 46464.,
      38042., 39848., 41690., 43568., 30026., 31720., 33450., 35216., 32546.,
      34312., 36114., 37952., 35066., 36904., 38778., 40688., 32850., 34632.,
      36450., 38304., 31146., 32872., 34634., 36432., 36186., 38056., 39962.,
      41904., 36018., 37832., 39682., 41568., 36362., 38120., 39914., 41744.,
      35170., 36872., 38610., 40384., 34490., 36136., 37818., 39536., 39530.,
      41320., 43146., 45008., 40386., 42120., 43890., 45696., 41754., 43432.,
      45146., 46896., 44274., 46024., 47810., 49632., 46794., 48616., 50474.,
      52368.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10516., 11416., 13216., 14176., 16156., 17176., 19336., 20416., 15043.,
      16142., 18418., 19592., 22093., 23342., 26068., 27392., 20886., 22244.,
      24936., 26384., 29346., 30884., 34116., 35744., 14103., 15278., 17510.,
      18760., 21217., 22542., 25224., 26624., 10676., 11608., 13440., 14432.,
      16444., 17496., 19688., 20800., 16248., 17296., 19424., 20544., 22888.,
      24080., 26640., 27904., 16722., 18020., 20740., 22128., 25118., 26596.,
      29856., 31424., 18724., 20344., 23584., 25312., 28876., 30712., 34600.,
      36544., 15914., 17316., 19996., 21488., 24438., 26020., 29240., 30912.,
      17080., 18192., 20384., 21568., 23976., 25232., 27856., 29184., 13948.,
      15176., 17664., 18976., 21716., 23112., 26104., 27584., 20505., 22010.,
      25166., 26776., 30247., 31962., 35748., 37568., 28930., 30796., 34536.,
      36528., 40646., 42764., 47260., 49504., 19413., 21018., 24106., 25816.,
      29219., 31034., 34752., 36672., 14620., 15880., 18400., 19744., 22516.,
      23944., 26968., 28480., 16760., 17808., 19936., 21056., 23400., 24592.,
      27152., 28416., 16578., 17860., 20564., 21936., 24910., 26372., 29616.,
      31168., 18052., 19640., 22848., 24544., 28076., 29880., 33736., 35648.,
      15098., 16452., 19084., 20528., 23430., 24964., 28136., 29760., 16248.,
      17296., 19424., 20544., 22888., 24080., 26640., 27904., 10004., 10904.,
      12704., 13664., 15644., 16664., 18824., 19904., 14643., 15726., 17986.,
      19144., 21629., 22862., 25572., 26880., 20726., 22052., 24712., 26128.,
      29058., 30564., 33764., 35360., 13543., 14670., 16854., 18056., 20465.,
      21742., 24376., 25728., 9844.,  10712., 12480., 13408., 15356., 16344.,
      18472., 19520.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16798., 17236., 18184., 18640., 19642., 20116., 21172., 21664., 18694.,
      19204., 20224., 20752., 21826., 22372., 23500., 24064., 20590., 21172.,
      22264., 22864., 24010., 24628., 25828., 26464., 19862., 20452., 21552.,
      22160., 23314., 23940., 25148., 25792., 19646., 20244., 21352., 21968.,
      23130., 23764., 24980., 25632., 9870.,  10356., 11352., 11856., 12906.,
      13428., 14532., 15072., 11766., 12324., 13392., 13968., 15090., 15684.,
      16860., 17472., 13662., 14292., 15432., 16080., 17274., 17940., 19188.,
      19872., 12358., 12932., 14016., 14608., 15746., 16356., 17548., 18176.,
      12078., 12596., 13624., 14160., 15242., 15796., 16932., 17504., 11134.,
      11668., 12712., 13264., 14362., 14932., 16084., 16672., 13030., 13636.,
      14752., 15376., 16546., 17188., 18412., 19072., 14926., 15604., 16792.,
      17488., 18730., 19444., 20740., 21472., 15094., 15652., 16720., 17296.,
      18418., 19012., 20188., 20800., 16798., 17236., 18184., 18640., 19642.,
      20116., 21172., 21664., 20590., 21172., 22264., 22864., 24010., 24628.,
      25828., 26464., 19862., 20452., 21552., 22160., 23314., 23940., 25148.,
      25792., 19646., 20244., 21352., 21968., 23130., 23764., 24980., 25632.,
      14246., 14788., 15840., 16400., 17506., 18084., 19244., 19840., 9870.,
      10356., 11352., 11856., 12906., 13428., 14532., 15072., 13662., 14292.,
      15432., 16080., 17274., 17940., 19188., 19872., 12358., 12932., 14016.,
      14608., 15746., 16356., 17548., 18176., 12078., 12596., 13624., 14160.,
      15242., 15796., 16932., 17504., 11350., 11876., 12912., 13456., 14546.,
      15108., 16252., 16832., 11134., 11668., 12712., 13264., 14362., 14932.,
      16084., 16672.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9060.,  9960.,  10860., 11760., 13440., 14400., 15360., 16320., 18300.,
      19320., 20340., 21360., 23640., 24720., 25800., 26880., 10523., 11622.,
      12721., 13820., 16014., 17188., 18362., 19536., 22105., 23354., 24603.,
      25852., 28796., 30120., 31444., 32768., 13662., 15020., 16378., 17736.,
      20264., 21712., 23160., 24608., 27586., 29124., 30662., 32200., 35628.,
      37256., 38884., 40512., 7671.,  8846.,  10021., 11196., 13226., 14476.,
      15726., 16976., 19381., 20706., 22031., 23356., 26136., 27536., 28936.,
      30336., 9348.,  10280., 11212., 12144., 13856., 14848., 15840., 16832.,
      18844., 19896., 20948., 22000., 24312., 25424., 26536., 27648., 10584.,
      11632., 12680., 13728., 15712., 16832., 17952., 19072., 21416., 22608.,
      23800., 24992., 27696., 28960., 30224., 31488., 12530., 13828., 15126.,
      16424., 19036., 20424., 21812., 23200., 26262., 27740., 29218., 30696.,
      34208., 35776., 37344., 38912., 16308., 17928., 19548., 21168., 24192.,
      25920., 27648., 29376., 32940., 34776., 36612., 38448., 42552., 44496.,
      46440., 48384., 9146.,  10548., 11950., 13352., 15780., 17272., 18764.,
      20256., 23134., 24716., 26298., 27880., 31208., 32880., 34552., 36224.,
      11160., 12272., 13384., 14496., 16544., 17728., 18912., 20096., 22504.,
      23760., 25016., 26272., 29040., 30368., 31696., 33024., 12396., 13624.,
      14852., 16080., 18400., 19712., 21024., 22336., 25076., 26472., 27868.,
      29264., 32424., 33904., 35384., 36864., 14417., 15922., 17427., 18932.,
      21970., 23580., 25190., 26800., 30363., 32078., 33793., 35508., 39596.,
      41416., 43236., 45056., 18810., 20676., 22542., 24408., 27912., 29904.,
      31896., 33888., 38022., 40140., 42258., 44376., 49140., 51384., 53628.,
      55872., 10341., 11946., 13551., 15156., 17958., 19668., 21378., 23088.,
      26415., 28230., 30045., 31860., 35712., 37632., 39552., 41472., 12684.,
      13944., 15204., 16464., 18816., 20160., 21504., 22848., 25620., 27048.,
      28476., 29904., 33096., 34608., 36120., 37632., 10584., 11632., 12680.,
      13728., 15712., 16832., 17952., 19072., 21416., 22608., 23800., 24992.,
      27696., 28960., 30224., 31488., 12258., 13540., 14822., 16104., 18700.,
      20072., 21444., 22816., 25862., 27324., 28786., 30248., 33744., 35296.,
      36848., 38400., 16020., 17608., 19196., 20784., 23776., 25472., 27168.,
      28864., 32396., 34200., 36004., 37808., 41880., 43792., 45704., 47616.,
      8586.,  9940.,  11294., 12648., 15028., 16472., 17916., 19360., 22190.,
      23724., 25258., 26792., 30072., 31696., 33320., 34944., 10584., 11632.,
      12680., 13728., 15712., 16832., 17952., 19072., 21416., 22608., 23800.,
      24992., 27696., 28960., 30224., 31488., 9060.,  9960.,  10860., 11760.,
      13440., 14400., 15360., 16320., 18300., 19320., 20340., 21360., 23640.,
      24720., 25800., 26880., 10251., 11334., 12417., 13500., 15678., 16836.,
      17994., 19152., 21705., 22938., 24171., 25404., 28332., 29640., 30948.,
      32256., 13374., 14700., 16026., 17352., 19848., 21264., 22680., 24096.,
      27042., 28548., 30054., 31560., 34956., 36552., 38148., 39744., 7111.,
      8238.,  9365.,  10492., 12474., 13676., 14878., 16080., 18437., 19714.,
      20991., 22268., 25000., 26352., 27704., 29056., 8772.,  9640.,  10508.,
      11376., 13024., 13952., 14880., 15808., 17756., 18744., 19732., 20720.,
      22968., 24016., 25064., 26112.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13190., 13628., 14066., 14504., 15432., 15888., 16344., 16800., 17818.,
      18292., 18766., 19240., 20348., 20840., 21332., 21824., 14862., 15372.,
      15882., 16392., 17392., 17920., 18448., 18976., 20066., 20612., 21158.,
      21704., 22884., 23448., 24012., 24576., 16534., 17116., 17698., 18280.,
      19352., 19952., 20552., 21152., 22314., 22932., 23550., 24168., 25420.,
      26056., 26692., 27328., 17118., 17708., 18298., 18888., 19968., 20576.,
      21184., 21792., 22962., 23588., 24214., 24840., 26100., 26744., 27388.,
      28032., 18726., 19324., 19922., 20520., 21608., 22224., 22840., 23456.,
      24634., 25268., 25902., 26536., 27804., 28456., 29108., 29760., 11574.,
      12060., 12546., 13032., 14008., 14512., 15016., 15520., 16586., 17108.,
      17630., 18152., 19308., 19848., 20388., 20928., 13246., 13804., 14362.,
      14920., 15968., 16544., 17120., 17696., 18834., 19428., 20022., 20616.,
      21844., 22456., 23068., 23680., 14918., 15548., 16178., 16808., 17928.,
      18576., 19224., 19872., 21082., 21748., 22414., 23080., 24380., 25064.,
      25748., 26432., 10318., 10892., 11466., 12040., 13104., 13696., 14288.,
      14880., 16034., 16644., 17254., 17864., 19108., 19736., 20364., 20992.,
      7766.,  8284.,  8802.,  9320.,  10328., 10864., 11400., 11936., 13034.,
      13588., 14142., 14696., 15884., 16456., 17028., 17600., 9958.,  10492.,
      11026., 11560., 12584., 13136., 13688., 14240., 15354., 15924., 16494.,
      17064., 18268., 18856., 19444., 20032., 11630., 12236., 12842., 13448.,
      14544., 15168., 15792., 16416., 17602., 18244., 18886., 19528., 20804.,
      21464., 22124., 22784., 13302., 13980., 14658., 15336., 16504., 17200.,
      17896., 18592., 19850., 20564., 21278., 21992., 23340., 24072., 24804.,
      25536., 11710., 12268., 12826., 13384., 14432., 15008., 15584., 16160.,
      17298., 17892., 18486., 19080., 20308., 20920., 21532., 22144., 13190.,
      13628., 14066., 14504., 15432., 15888., 16344., 16800., 17818., 18292.,
      18766., 19240., 20348., 20840., 21332., 21824., 16534., 17116., 17698.,
      18280., 19352., 19952., 20552., 21152., 22314., 22932., 23550., 24168.,
      25420., 26056., 26692., 27328., 17118., 17708., 18298., 18888., 19968.,
      20576., 21184., 21792., 22962., 23588., 24214., 24840., 26100., 26744.,
      27388., 28032., 18726., 19324., 19922., 20520., 21608., 22224., 22840.,
      23456., 24634., 25268., 25902., 26536., 27804., 28456., 29108., 29760.,
      14126., 14668., 15210., 15752., 16784., 17344., 17904., 18464., 19586.,
      20164., 20742., 21320., 22532., 23128., 23724., 24320., 11574., 12060.,
      12546., 13032., 14008., 14512., 15016., 15520., 16586., 17108., 17630.,
      18152., 19308., 19848., 20388., 20928., 14918., 15548., 16178., 16808.,
      17928., 18576., 19224., 19872., 21082., 21748., 22414., 23080., 24380.,
      25064., 25748., 26432., 10318., 10892., 11466., 12040., 13104., 13696.,
      14288., 14880., 16034., 16644., 17254., 17864., 19108., 19736., 20364.,
      20992., 7766.,  8284.,  8802.,  9320.,  10328., 10864., 11400., 11936.,
      13034., 13588., 14142., 14696., 15884., 16456., 17028., 17600., 8350.,
      8876.,  9402.,  9928.,  10944., 11488., 12032., 12576., 13682., 14244.,
      14806., 15368., 16564., 17144., 17724., 18304., 9958.,  10492., 11026.,
      11560., 12584., 13136., 13688., 14240., 15354., 15924., 16494., 17064.,
      18268., 18856., 19444., 20032.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15562., 19032., 23175., 20068., 17502., 21144., 26558., 32884., 29234.,
      25892., 31031., 39060., 48230., 39060., 31031., 25892., 29234., 32884.,
      26558., 21144., 17502., 20068., 23175., 19032., 15562.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30258., 30636., 31014., 31392., 31770., 32904., 33282., 33660., 34038.,
      34416., 35550., 35928., 36306., 36684., 37062., 38196., 38574., 38952.,
      39330., 39708., 40842., 41220., 41598., 41976., 42354.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20734., 21908., 23855., 25264., 27507., 29166., 22445., 23848., 18576.,
      19740., 20001., 21360., 24660., 26300., 30069., 32008., 26320., 27972.,
      23109., 24488., 26653., 28302., 33979., 35944., 42254., 44556., 34205.,
      36168., 27147., 28782., 22371., 23880., 25832., 27620., 29411., 31496.,
      23796., 25564., 19223., 20688., 17932., 19196., 22459., 23944., 27381.,
      29102., 23689., 25136., 20526., 21716.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28678., 29540., 27423., 28248., 28152., 29004., 28881., 29760., 29610.,
      30516., 28213., 29072., 27342., 28164., 28071., 28920., 28800., 29676.,
      29529., 30432., 25508., 26300., 21757., 22448., 19350., 20004., 20079.,
      20760., 20808., 21516., 19987., 20712., 17836., 18524., 15813., 16464.,
      16542., 17220., 17271., 17976., 16834., 17556., 15067., 15752., 13428.,
      14076., 14157., 14832., 14886., 15588.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17350., 18524., 19698., 20872., 20541., 21950., 23359., 24768., 24267.,
      25926., 27585., 29244., 20255., 21658., 23061., 24464., 17908., 19072.,
      20236., 21400., 18739., 20098., 21457., 22816., 25056., 26696., 28336.,
      29976., 29207., 31146., 33085., 35024., 23788., 25440., 27092., 28744.,
      20071., 21450., 22829., 24208., 23401., 25050., 26699., 28348., 29449.,
      31414., 33379., 35344., 37022., 39324., 41626., 43928., 29455., 31418.,
      33381., 35344., 23411., 25046., 26681., 28316., 21057., 22566., 24075.,
      25584., 25716., 27504., 29292., 31080., 31585., 33670., 35755., 37840.,
      27488., 29256., 31024., 32792., 21141., 22606., 24071., 25536., 17064.,
      18328., 19592., 20856., 20361., 21846., 23331., 24816., 24625., 26346.,
      28067., 29788., 20779., 22226., 23673., 25120., 17430., 18620., 19810.,
      21000.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31534., 32396., 33258., 34120., 28357., 29182., 30007., 30832., 29084.,
      29936., 30788., 31640., 29811., 30690., 31569., 32448., 30538., 31444.,
      32350., 33256., 25679., 26538., 27397., 28256., 23270., 24092., 24914.,
      25736., 23997., 24846., 25695., 26544., 24724., 25600., 26476., 27352.,
      25451., 26354., 27257., 28160., 19504., 20296., 21088., 21880., 15495.,
      16186., 16877., 17568., 14110., 14764., 15418., 16072., 14837., 15518.,
      16199., 16880., 15564., 16272., 16980., 17688., 15889., 16614., 17339.,
      18064., 15016., 15704., 16392., 17080., 14399., 15050., 15701., 16352.,
      15126., 15804., 16482., 17160., 15853., 16558., 17263., 17968., 16946.,
      17668., 18390., 19112., 16841., 17526., 18211., 18896., 16992., 17640.,
      18288., 18936., 17719., 18394., 19069., 19744., 18446., 19148., 19850.,
      20552.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22747., 25000., 24970., 27744., 27677., 31004., 21658., 24528., 16715.,
      19128., 17162., 20000., 21668., 25144., 27166., 31312., 24468., 28040.,
      21914., 24912., 28637., 32028., 38174., 42256., 49139., 53912., 38174.,
      42256., 28637., 32028., 21914., 24912., 24468., 28040., 27166., 31312.,
      21668., 25144., 17162., 20000., 16715., 19128., 21658., 24528., 27677.,
      31004., 24970., 27744., 22747., 25000.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      56627., 59080., 54117., 56496., 55575., 58008., 57033., 59520., 58491.,
      61032., 55697., 58144., 53955., 56328., 55413., 57840., 56871., 59352.,
      58329., 60864., 50287., 52600., 42785., 44896., 37971., 40008., 39429.,
      41520., 40887., 43032., 39245., 41424., 34943., 37048., 30897., 32928.,
      32355., 34440., 33813., 35952., 32939., 35112., 29405., 31504., 26127.,
      28152., 27585., 29664., 29043., 31176.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18069., 19158., 21380., 22544., 19980., 21300., 24062., 25472., 22829.,
      24410., 27746., 29432., 18456., 19796., 22666., 24096., 15817., 16918.,
      19352., 20528., 18384., 19668., 22370., 23744., 26116., 27688., 31008.,
      32688., 29492., 31388., 35386., 37408., 23564., 25192., 28616., 30352.,
      19176., 20532., 23418., 24864., 23265., 24922., 28310., 30072., 30912.,
      32892., 36966., 39072., 40669., 42982., 47764., 50224., 31044., 33020.,
      37098., 39200., 23389., 25018., 28402., 30136., 20772., 22324., 25334.,
      26976., 25980., 27816., 31416., 33360., 33424., 35548., 39766., 42016.,
      30948., 32744., 36288., 38192., 21852., 23316., 26222., 27776., 15585.,
      16822., 19280., 20592., 18548., 19988., 22886., 24416., 22993., 24634.,
      28006., 29752., 20064., 21428., 24210., 25664., 18069., 19158., 21380.,
      22544.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25989., 26662., 28116., 28816., 23539., 24202., 25646., 26336., 24993.,
      25710., 27208., 27952., 26447., 27218., 28770., 29568., 27901., 28726.,
      30332., 31184., 25223., 26082., 27722., 28608., 23541., 24390., 26020.,
      26896., 24995., 25898., 27582., 28512., 26449., 27406., 29144., 30128.,
      27903., 28914., 30706., 31744., 24137., 25118., 26880., 27888., 20855.,
      21762., 23450., 24384., 18085., 18918., 20532., 21392., 17683., 18506.,
      20110., 20960., 17537., 18350., 19944., 20784., 20043., 20954., 22646.,
      23584., 19897., 20798., 22480., 23408., 18663., 19490., 21098., 21952.,
      19029., 19846., 21444., 22288., 19651., 20458., 22046., 22880., 22925.,
      23830., 25516., 26448., 23547., 24442., 26118., 27040., 23849., 24670.,
      26272., 27120., 24663., 25410., 26938., 27712., 25989., 26662., 28116.,
      28816.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16009., 17098., 18187., 19276., 21628., 22792., 23956., 25120., 16816.,
      18136., 19456., 20776., 23610., 25020., 26430., 27840., 19277., 20858.,
      22439., 24020., 27374., 29060., 30746., 32432., 16788., 18128., 19468.,
      20808., 23678., 25108., 26538., 27968., 15397., 16498., 17599., 18700.,
      21080., 22256., 23432., 24608., 16156., 17440., 18724., 20008., 22822.,
      24196., 25570., 26944., 22020., 23592., 25164., 26736., 30128., 31808.,
      33488., 35168., 24032., 25928., 27824., 29720., 33742., 35764., 37786.,
      39808., 20092., 21720., 23348., 24976., 28424., 30160., 31896., 33632.,
      17188., 18544., 19900., 21256., 24142., 25588., 27034., 28480., 20137.,
      21794., 23451., 25108., 28554., 30316., 32078., 33840., 25284., 27264.,
      29244., 31224., 35346., 37452., 39558., 41664., 32945., 35258., 37571.,
      39884., 44684., 47144., 49604., 52064., 25008., 26984., 28960., 30936.,
      35038., 37140., 39242., 41344., 19837., 21466., 23095., 24724., 28126.,
      29860., 31594., 33328., 19832., 21384., 22936., 24488., 27586., 29228.,
      30870., 32512., 22316., 24152., 25988., 27824., 31512., 33456., 35400.,
      37344., 27092., 29216., 31340., 33464., 37730., 39980., 42230., 44480.,
      25828., 27624., 29420., 31216., 34832., 36736., 38640., 40544., 18368.,
      19832., 21296., 22760., 25738., 27292., 28846., 30400., 18541., 19778.,
      21015., 22252., 24768., 26080., 27392., 28704., 18568., 20008., 21448.,
      22888., 25874., 27404., 28934., 30464., 19609., 21250., 22891., 24532.,
      27962., 29708., 31454., 33200., 16876., 18240., 19604., 20968., 23862.,
      25316., 26770., 28224., 16009., 17098., 18187., 19276., 21628., 22792.,
      23956., 25120.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21545., 22218., 22891., 23564., 25068., 25768., 26468., 27168., 19343.,
      20006., 20669., 21332., 22826., 23516., 24206., 24896., 20789., 21506.,
      22223., 22940., 24488., 25232., 25976., 26720., 22235., 23006., 23777.,
      24548., 26150., 26948., 27746., 28544., 23681., 24506., 25331., 26156.,
      27812., 28664., 29516., 30368., 22259., 23118., 23977., 24836., 26526.,
      27412., 28298., 29184., 21593., 22442., 23291., 24140., 25820., 26696.,
      27572., 28448., 23039., 23942., 24845., 25748., 27482., 28412., 29342.,
      30272., 24485., 25442., 26399., 27356., 29144., 30128., 31112., 32096.,
      25931., 26942., 27953., 28964., 30806., 31844., 32882., 33920., 26493.,
      27474., 28455., 29436., 31248., 32256., 33264., 34272., 26787., 27694.,
      28601., 29508., 31246., 32180., 33114., 34048., 28105., 28938., 29771.,
      30604., 32268., 33128., 33988., 34848., 25903., 26726., 27549., 28372.,
      30026., 30876., 31726., 32576., 24213., 25026., 25839., 26652., 28296.,
      29136., 29976., 30816., 24903., 25814., 26725., 27636., 29378., 30316.,
      31254., 32192., 23213., 24114., 25015., 25916., 27648., 28576., 29504.,
      30432., 19411., 20238., 21065., 21892., 23550., 24404., 25258., 26112.,
      18745., 19562., 20379., 21196., 22844., 23688., 24532., 25376., 18591.,
      19398., 20205., 21012., 22650., 23484., 24318., 25152., 20817., 21722.,
      22627., 23532., 25268., 26200., 27132., 28064., 20663., 21558., 22453.,
      23348., 25074., 25996., 26918., 27840., 19933., 20754., 21575., 22396.,
      24048., 24896., 25744., 26592., 20227., 20974., 21721., 22468., 24046.,
      24820., 25594., 26368., 21545., 22218., 22891., 23564., 25068., 25768.,
      26468., 27168.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19443., 21484., 23675., 26016., 19850., 22440., 25210., 28160., 21073.,
      24244., 27625., 31216., 15818., 18536., 21434., 24512., 13651., 15980.,
      18459., 21088., 19850., 22440., 25210., 28160., 31020., 34192., 37580.,
      41184., 30606., 34424., 38494., 42816., 21292., 24528., 27980., 31648.,
      15818., 18536., 21434., 24512., 21073., 24244., 27625., 31216., 30606.,
      34424., 38494., 42816., 44603., 49100., 53891., 58976., 30606., 34424.,
      38494., 42816., 21073., 24244., 27625., 31216., 15818., 18536., 21434.,
      24512., 21292., 24528., 27980., 31648., 30606., 34424., 38494., 42816.,
      31020., 34192., 37580., 41184., 19850., 22440., 25210., 28160., 13651.,
      15980., 18459., 21088., 15818., 18536., 21434., 24512., 21073., 24244.,
      27625., 31216., 19850., 22440., 25210., 28160., 19443., 21484., 23675.,
      26016.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20083., 21452., 22875., 24352., 17231., 18580., 19983., 21440., 18539.,
      19932., 21379., 22880., 21447., 22948., 24503., 26112., 24355., 25964.,
      27627., 29344., 19895., 21444., 23047., 24704., 18579., 20108., 21691.,
      23328., 20655., 22228., 23855., 25536., 23563., 25244., 26979., 28768.,
      26471., 28260., 30103., 32000., 23995., 25660., 27379., 29152., 21527.,
      23044., 24615., 26240., 20083., 21452., 22875., 24352., 17231., 18580.,
      19983., 21440., 18539., 19932., 21379., 22880., 25407., 27060., 28767.,
      30528., 23067., 24700., 26387., 28128., 19895., 21444., 23047., 24704.,
      18579., 20108., 21691., 23328., 20655., 22228., 23855., 25536., 28291.,
      30124., 32011., 33952., 27487., 29300., 31167., 33088., 23995., 25660.,
      27379., 29152., 21527., 23044., 24615., 26240., 20083., 21452., 22875.,
      24352.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16111., 17094., 19190., 20248., 22569., 23702., 26248., 27456., 15550.,
      16788., 19360., 20688., 23530., 24948., 28060., 29568., 17233., 18754.,
      21838., 23464., 26863., 28594., 32308., 34144., 15734., 17012., 19640.,
      21008., 23906., 25364., 28532., 30080., 15703., 16774., 18974., 20120.,
      22545., 23766., 26416., 27712., 15334., 16596., 19208., 20560., 23442.,
      24884., 28036., 29568., 24252., 25784., 28920., 30560., 34020., 35768.,
      39552., 41408., 22858., 24700., 28416., 30384., 34478., 36572., 41044.,
      43264., 17484., 19032., 22184., 23840., 27316., 29080., 32880., 34752.,
      15734., 17012., 19640., 21008., 23906., 25364., 28532., 30080., 17273.,
      18818., 21942., 23592., 27031., 28786., 32540., 34400., 22882., 24732.,
      28472., 30448., 34566., 36668., 41164., 43392., 34039., 36214., 40582.,
      42904., 47713., 50182., 55432., 58048., 22858., 24700., 28416., 30384.,
      34478., 36572., 41044., 43264., 17233., 18754., 21838., 23464., 26863.,
      28594., 32308., 34144., 16846., 18196., 20912., 22352., 25338., 26868.,
      30124., 31744., 17676., 19256., 22472., 24160., 27700., 29496., 33360.,
      35264., 22882., 24732., 28472., 30448., 34566., 36668., 41164., 43392.,
      24252., 25784., 28920., 30560., 34020., 35768., 39552., 41408., 15550.,
      16788., 19360., 20688., 23530., 24948., 28060., 29568., 19783., 20966.,
      23278., 24536., 27073., 28406., 31168., 32576., 16846., 18196., 20912.,
      22352., 25338., 26868., 30124., 31744., 17273., 18818., 21942., 23592.,
      27031., 28786., 32540., 34400., 15334., 16596., 19208., 20560., 23442.,
      24884., 28036., 29568., 16111., 17094., 19190., 20248., 22569., 23702.,
      26248., 27456.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25791., 26406., 27798., 28440., 29913., 30582., 32136., 32832., 21387.,
      21982., 23354., 23976., 25429., 26078., 27612., 28288., 21143., 21782.,
      23198., 23864., 25361., 26054., 27632., 28352., 24035., 24782., 26306.,
      27080., 28685., 29486., 31172., 32000., 26927., 27782., 29414., 30296.,
      32009., 32918., 34712., 35648., 17811., 18606., 20178., 21000., 22653.,
      23502., 25236., 26112., 16479., 17254., 18806., 19608., 21241., 22070.,
      23784., 24640., 17771., 18590., 20186., 21032., 22709., 23582., 25340.,
      26240., 20663., 21590., 23294., 24248., 26033., 27014., 28880., 29888.,
      23555., 24590., 26402., 27464., 29357., 30446., 32420., 33536., 22567.,
      23478., 25166., 26104., 27873., 28838., 30688., 31680., 23155., 23918.,
      25458., 26248., 27869., 28686., 30388., 31232., 25791., 26406., 27798.,
      28440., 29913., 30582., 32136., 32832., 21387., 21982., 23354., 23976.,
      25429., 26078., 27612., 28288., 21143., 21782., 23198., 23864., 25361.,
      26054., 27632., 28352., 26171., 27070., 28746., 29672., 31429., 32382.,
      34220., 35200., 22791., 23670., 25326., 26232., 27969., 28902., 30720.,
      31680., 17811., 18606., 20178., 21000., 22653., 23502., 25236., 26112.,
      16479., 17254., 18806., 19608., 21241., 22070., 23784., 24640., 17771.,
      18590., 20186., 21032., 22709., 23582., 25340., 26240., 24335., 25414.,
      27270., 28376., 30313., 31446., 33464., 34624., 24027., 25086., 26922.,
      28008., 29925., 31038., 33036., 34176., 22567., 23478., 25166., 26104.,
      27873., 28838., 30688., 31680., 23155., 23918., 25458., 26248., 27869.,
      28686., 30388., 31232., 25791., 26406., 27798., 28440., 29913., 30582.,
      32136., 32832.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10087., 11070., 12053., 13036., 14986., 16044., 17102., 18160., 20485.,
      21618., 22751., 23884., 26584., 27792., 29000., 30208., 9766.,  11004.,
      12242., 13480., 15888., 17216., 18544., 19872., 22730., 24148., 25566.,
      26984., 30292., 31800., 33308., 34816., 15153., 16674., 18195., 19716.,
      22594., 24220., 25846., 27472., 30875., 32606., 34337., 36068., 39996.,
      41832., 43668., 45504., 10318., 11596., 12874., 14152., 16600., 17968.,
      19336., 20704., 23602., 25060., 26518., 27976., 31324., 32872., 34420.,
      35968., 10303., 11374., 12445., 13516., 15554., 16700., 17846., 18992.,
      21405., 22626., 23847., 25068., 27856., 29152., 30448., 31744., 9662.,
      10924., 12186., 13448., 15880., 17232., 18584., 19936., 22818., 24260.,
      25702., 27144., 30476., 32008., 33540., 35072., 15580., 17112., 18644.,
      20176., 23112., 24752., 26392., 28032., 31508., 33256., 35004., 36752.,
      40768., 42624., 44480., 46336., 14626., 16468., 18310., 20152., 23632.,
      25600., 27568., 29536., 33646., 35740., 37834., 39928., 44668., 46888.,
      49108., 51328., 15468., 17016., 18564., 20112., 23064., 24720., 26376.,
      28032., 31524., 33288., 35052., 36816., 40848., 42720., 44592., 46464.,
      10318., 11596., 12874., 14152., 16600., 17968., 19336., 20704., 23602.,
      25060., 26518., 27976., 31324., 32872., 34420., 35968., 15689., 17234.,
      18779., 20324., 23226., 24876., 26526., 28176., 31603., 33358., 35113.,
      36868., 40820., 42680., 44540., 46400., 14506., 16356., 18206., 20056.,
      23544., 25520., 27496., 29472., 33590., 35692., 37794., 39896., 44644.,
      46872., 49100., 51328., 21839., 24014., 26189., 28364., 32442., 34764.,
      37086., 39408., 44221., 46690., 49159., 51628., 57176., 59792., 62408.,
      65024., 14626., 16468., 18310., 20152., 23632., 25600., 27568., 29536.,
      33646., 35740., 37834., 39928., 44668., 46888., 49108., 51328., 15153.,
      16674., 18195., 19716., 22594., 24220., 25846., 27472., 30875., 32606.,
      34337., 36068., 39996., 41832., 43668., 45504., 10262., 11612., 12962.,
      14312., 16832., 18272., 19712., 21152., 24122., 25652., 27182., 28712.,
      32132., 33752., 35372., 36992., 16268., 17848., 19428., 21008., 23992.,
      25680., 27368., 29056., 32580., 34376., 36172., 37968., 42032., 43936.,
      45840., 47744., 14506., 16356., 18206., 20056., 23544., 25520., 27496.,
      29472., 33590., 35692., 37794., 39896., 44644., 46872., 49100., 51328.,
      15580., 17112., 18644., 20176., 23112., 24752., 26392., 28032., 31508.,
      33256., 35004., 36752., 40768., 42624., 44480., 46336., 9766.,  11004.,
      12242., 13480., 15888., 17216., 18544., 19872., 22730., 24148., 25566.,
      26984., 30292., 31800., 33308., 34816., 12207., 13390., 14573., 15756.,
      17906., 19164., 20422., 21680., 24205., 25538., 26871., 28204., 31104.,
      32512., 33920., 35328., 10262., 11612., 12962., 14312., 16832., 18272.,
      19712., 21152., 24122., 25652., 27182., 28712., 32132., 33752., 35372.,
      36992., 15689., 17234., 18779., 20324., 23226., 24876., 26526., 28176.,
      31603., 33358., 35113., 36868., 40820., 42680., 44540., 46400., 9662.,
      10924., 12186., 13448., 15880., 17232., 18584., 19936., 22818., 24260.,
      25702., 27144., 30476., 32008., 33540., 35072., 10087., 11070., 12053.,
      13036., 14986., 16044., 17102., 18160., 20485., 21618., 22751., 23884.,
      26584., 27792., 29000., 30208.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18967., 19582., 20197., 20812., 22186., 22828., 23470., 24112., 25621.,
      26290., 26959., 27628., 29272., 29968., 30664., 31360., 15299., 15894.,
      16489., 17084., 18438., 19060., 19682., 20304., 21793., 22442., 23091.,
      23740., 25364., 26040., 26716., 27392., 15791., 16430., 17069., 17708.,
      19106., 19772., 20438., 21104., 22637., 23330., 24023., 24716., 26384.,
      27104., 27824., 28544., 18395., 19142., 19889., 20636., 22142., 22916.,
      23690., 24464., 26105., 26906., 27707., 28508., 30284., 31112., 31940.,
      32768., 20999., 21854., 22709., 23564., 25178., 26060., 26942., 27824.,
      29573., 30482., 31391., 32300., 34184., 35120., 36056., 36992., 18187.,
      18982., 19777., 20572., 22126., 22948., 23770., 24592., 26281., 27130.,
      27979., 28828., 30652., 31528., 32404., 33280., 20663., 21438., 22213.,
      22988., 24522., 25324., 26126., 26928., 28597., 29426., 30255., 31084.,
      32888., 33744., 34600., 35456., 20131., 20950., 21769., 22588., 24166.,
      25012., 25858., 26704., 28417., 29290., 30163., 31036., 32884., 33784.,
      34684., 35584., 22735., 23662., 24589., 25516., 27202., 28156., 29110.,
      30064., 31885., 32866., 33847., 34828., 36784., 37792., 38800., 39808.,
      25339., 26374., 27409., 28444., 30238., 31300., 32362., 33424., 35353.,
      36442., 37531., 38620., 40684., 41800., 42916., 44032., 18367., 19278.,
      20189., 21100., 22770., 23708., 24646., 25584., 27389., 28354., 29319.,
      30284., 32224., 33216., 34208., 35200., 16619., 17382., 18145., 18908.,
      20430., 21220., 22010., 22800., 24457., 25274., 26091., 26908., 28700.,
      29544., 30388., 31232., 18967., 19582., 20197., 20812., 22186., 22828.,
      23470., 24112., 25621., 26290., 26959., 27628., 29272., 29968., 30664.,
      31360., 15299., 15894., 16489., 17084., 18438., 19060., 19682., 20304.,
      21793., 22442., 23091., 23740., 25364., 26040., 26716., 27392., 15791.,
      16430., 17069., 17708., 19106., 19772., 20438., 21104., 22637., 23330.,
      24023., 24716., 26384., 27104., 27824., 28544., 20467., 21366., 22265.,
      23164., 24822., 25748., 26674., 27600., 29393., 30346., 31299., 32252.,
      34180., 35160., 36140., 37120., 18847., 19726., 20605., 21484., 23122.,
      24028., 24934., 25840., 27613., 28546., 29479., 30412., 32320., 33280.,
      34240., 35200., 18187., 18982., 19777., 20572., 22126., 22948., 23770.,
      24592., 26281., 27130., 27979., 28828., 30652., 31528., 32404., 33280.,
      20663., 21438., 22213., 22988., 24522., 25324., 26126., 26928., 28597.,
      29426., 30255., 31084., 32888., 33744., 34600., 35456., 20131., 20950.,
      21769., 22588., 24166., 25012., 25858., 26704., 28417., 29290., 30163.,
      31036., 32884., 33784., 34684., 35584., 27879., 28958., 30037., 31116.,
      32954., 34060., 35166., 36272., 38245., 39378., 40511., 41644., 43752.,
      44912., 46072., 47232., 24211., 25270., 26329., 27388., 29206., 30292.,
      31378., 32464., 34417., 35530., 36643., 37756., 39844., 40984., 42124.,
      43264., 18367., 19278., 20189., 21100., 22770., 23708., 24646., 25584.,
      27389., 28354., 29319., 30284., 32224., 33216., 34208., 35200., 16619.,
      17382., 18145., 18908., 20430., 21220., 22010., 22800., 24457., 25274.,
      26091., 26908., 28700., 29544., 30388., 31232., 18967., 19582., 20197.,
      20812., 22186., 22828., 23470., 24112., 25621., 26290., 26959., 27628.,
      29272., 29968., 30664., 31360.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19659., 23072., 26484., 22960., 19467., 26010., 30520., 35032., 30408.,
      25818., 42633., 50008., 57404., 50008., 42633., 25818., 30408., 35032.,
      30520., 26010., 19467., 22960., 26484., 23072., 19659.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      43566., 44232., 44898., 45564., 46230., 33278., 33944., 34610., 35276.,
      35942., 25038., 25704., 26370., 27036., 27702., 30366., 31032., 31698.,
      32364., 33030., 35694., 36360., 37026., 37692., 38358.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28587., 30006., 32788., 34496., 36748., 38760., 30891., 32704., 25335.,
      26934., 26538., 28212., 30352., 32368., 33896., 36272., 28210., 30352.,
      22866., 24756., 38265., 40146., 43988., 46256., 49412., 52088., 41601.,
      44016., 34173., 36306., 25578., 27156., 29344., 31248., 32872., 35120.,
      27426., 29456., 22290., 24084., 26091., 27414., 29988., 31584., 33676.,
      35560., 28315., 30016., 23223., 24726.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35458., 36316., 36498., 37392., 37538., 38468., 38578., 39544., 39618.,
      40620., 21250., 21884., 22290., 22960., 23330., 24036., 24370., 25112.,
      25410., 26188., 16258., 16924., 17298., 18000., 18338., 19076., 19378.,
      20152., 20418., 21228., 24578., 25532., 25618., 26608., 26658., 27684.,
      27698., 28760., 28738., 29836., 32898., 34140., 33938., 35216., 34978.,
      36292., 36018., 37368., 37058., 38444.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28011., 29430., 30849., 32268., 30716., 32424., 34132., 35840., 32700.,
      34712., 36724., 38736., 25249., 27062., 28875., 30688., 18639., 20238.,
      21837., 23436., 33066., 34740., 36414., 38088., 36288., 38304., 40320.,
      42336., 38664., 41040., 43416., 45792., 29862., 32004., 34146., 36288.,
      22050., 23940., 25830., 27720., 37209., 39090., 40971., 42852., 40908.,
      43176., 45444., 47712., 43668., 46344., 49020., 51696., 33747., 36162.,
      38577., 40992., 24933., 27066., 29199., 31332., 31242., 32820., 34398.,
      35976., 34384., 36288., 38192., 40096., 36744., 38992., 41240., 43488.,
      28406., 30436., 32466., 34496., 20994., 22788., 24582., 26376., 26187.,
      27510., 28833., 30156., 28812., 30408., 32004., 33600., 30780., 32664.,
      34548., 36432., 23793., 25494., 27195., 28896., 17583., 19086., 20589.,
      22092.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      38826., 39684., 40542., 41400., 39846., 40740., 41634., 42528., 40866.,
      41796., 42726., 43656., 41886., 42852., 43818., 44784., 42906., 43908.,
      44910., 45912., 18826., 19460., 20094., 20728., 19846., 20516., 21186.,
      21856., 20866., 21572., 22278., 22984., 21886., 22628., 23370., 24112.,
      22906., 23684., 24462., 25240., 17002., 17668., 18334., 19000., 18022.,
      18724., 19426., 20128., 19042., 19780., 20518., 21256., 20062., 20836.,
      21610., 22384., 21082., 21892., 22702., 23512., 25162., 26116., 27070.,
      28024., 26182., 27172., 28162., 29152., 27202., 28228., 29254., 30280.,
      28222., 29284., 30346., 31408., 29242., 30340., 31438., 32536., 33322.,
      34564., 35806., 37048., 34342., 35620., 36898., 38176., 35362., 36676.,
      37990., 39304., 36382., 37732., 39082., 40432., 37402., 38788., 40174.,
      41560.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27954., 30828., 33383., 36736., 38872., 42704., 33383., 36736., 27954.,
      30828., 21564., 25128., 26082., 30240., 30672., 35424., 26082., 30240.,
      21564., 25128., 39750., 43812., 47453., 52192., 55240., 60656., 47453.,
      52192., 39750., 43812., 21564., 25128., 26082., 30240., 30672., 35424.,
      26082., 30240., 21564., 25128., 27954., 30828., 33383., 36736., 38872.,
      42704., 33383., 36736., 27954., 30828.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      34036., 36024., 36116., 38176., 38196., 40328., 40276., 42480., 42356.,
      44632., 28148., 30200., 30228., 32352., 32308., 34504., 34388., 36656.,
      36468., 38808., 26356., 28472., 28436., 30624., 30516., 32776., 32596.,
      34928., 34676., 37080., 28660., 30840., 30740., 32992., 32820., 35144.,
      34900., 37296., 36980., 39448., 34036., 36024., 36116., 38176., 38196.,
      40328., 40276., 42480., 42356., 44632.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25128., 26340., 29442., 30744., 29183., 30702., 34216., 35840., 32880.,
      34736., 38632., 40608., 25837., 27566., 30870., 32704., 19392., 20964.,
      23706., 25368., 31248., 32760., 36540., 38160., 36162., 38052., 42336.,
      44352., 40608., 42912., 47664., 50112., 31878., 34020., 38052., 40320.,
      23904., 25848., 29196., 31248., 35544., 37260., 41622., 43464., 41237.,
      43386., 48328., 50624., 46416., 49040., 54520., 57312., 36463., 38906.,
      43554., 46144., 27360., 29580., 33438., 35784., 31248., 32760., 36540.,
      38160., 36162., 38052., 42336., 44352., 40608., 42912., 47664., 50112.,
      31878., 34020., 38052., 40320., 23904., 25848., 29196., 31248., 25128.,
      26340., 29442., 30744., 29183., 30702., 34216., 35840., 32880., 34736.,
      38632., 40608., 25837., 27566., 30870., 32704., 19392., 20964., 23706.,
      25368.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      38488., 39400., 41404., 42352., 40528., 41512., 43588., 44608., 42568.,
      43624., 45772., 46864., 44608., 45736., 47956., 49120., 46648., 47848.,
      50140., 51376., 26648., 27624., 29692., 30704., 28688., 29736., 31876.,
      32960., 30728., 31848., 34060., 35216., 32768., 33960., 36244., 37472.,
      34808., 36072., 38428., 39728., 23000., 24040., 26172., 27248., 25040.,
      26152., 28356., 29504., 27080., 28264., 30540., 31760., 29120., 30376.,
      32724., 34016., 31160., 32488., 34908., 36272., 27544., 28648., 30844.,
      31984., 29584., 30760., 33028., 34240., 31624., 32872., 35212., 36496.,
      33664., 34984., 37396., 38752., 35704., 37096., 39580., 41008., 38488.,
      39400., 41404., 42352., 40528., 41512., 43588., 44608., 42568., 43624.,
      45772., 46864., 44608., 45736., 47956., 49120., 46648., 47848., 50140.,
      51376.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19348., 20560., 21772., 22984., 25966., 27268., 28570., 29872., 23311.,
      24830., 26349., 27868., 31352., 32976., 34600., 36224., 26528., 28384.,
      30240., 32096., 35992., 37968., 39944., 41920., 20473., 22202., 23931.,
      25660., 28994., 30828., 32662., 34496., 16604., 18176., 19748., 21320.,
      24182., 25844., 27506., 29168., 24120., 25632., 27144., 28656., 32292.,
      33912., 35532., 37152., 28962., 30852., 32742., 34632., 38880., 40896.,
      42912., 44928., 32832., 35136., 37440., 39744., 44496., 46944., 49392.,
      51840., 25326., 27468., 29610., 31752., 35820., 38088., 40356., 42624.,
      20520., 22464., 24408., 26352., 29844., 31896., 33948., 36000., 27388.,
      29104., 30820., 32536., 36730., 38572., 40414., 42256., 32965., 35114.,
      37263., 39412., 44312., 46608., 48904., 51200., 37472., 40096., 42720.,
      45344., 50824., 53616., 56408., 59200., 28915., 31358., 33801., 36244.,
      40934., 43524., 46114., 48704., 23444., 25664., 27884., 30104., 34130.,
      36476., 38822., 41168., 24120., 25632., 27144., 28656., 32292., 33912.,
      35532., 37152., 28962., 30852., 32742., 34632., 38880., 40896., 42912.,
      44928., 32832., 35136., 37440., 39744., 44496., 46944., 49392., 51840.,
      25326., 27468., 29610., 31752., 35820., 38088., 40356., 42624., 20520.,
      22464., 24408., 26352., 29844., 31896., 33948., 36000., 19348., 20560.,
      21772., 22984., 25966., 27268., 28570., 29872., 23311., 24830., 26349.,
      27868., 31352., 32976., 34600., 36224., 26528., 28384., 30240., 32096.,
      35992., 37968., 39944., 41920., 20473., 22202., 23931., 25660., 28994.,
      30828., 32662., 34496., 16604., 18176., 19748., 21320., 24182., 25844.,
      27506., 29168.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31008., 31920., 32832., 33744., 35780., 36728., 37676., 38624., 32968.,
      33952., 34936., 35920., 38028., 39048., 40068., 41088., 34928., 35984.,
      37040., 38096., 40276., 41368., 42460., 43552., 36888., 38016., 39144.,
      40272., 42524., 43688., 44852., 46016., 38848., 40048., 41248., 42448.,
      44772., 46008., 47244., 48480., 23648., 24624., 25600., 26576., 28676.,
      29688., 30700., 31712., 25608., 26656., 27704., 28752., 30924., 32008.,
      33092., 34176., 27568., 28688., 29808., 30928., 33172., 34328., 35484.,
      36640., 29528., 30720., 31912., 33104., 35420., 36648., 37876., 39104.,
      31488., 32752., 34016., 35280., 37668., 38968., 40268., 41568., 32672.,
      33712., 34752., 35792., 37956., 39032., 40108., 41184., 34632., 35744.,
      36856., 37968., 40204., 41352., 42500., 43648., 36592., 37776., 38960.,
      40144., 42452., 43672., 44892., 46112., 38552., 39808., 41064., 42320.,
      44700., 45992., 47284., 48576., 40512., 41840., 43168., 44496., 46948.,
      48312., 49676., 51040., 25312., 26416., 27520., 28624., 30852., 31992.,
      33132., 34272., 27272., 28448., 29624., 30800., 33100., 34312., 35524.,
      36736., 29232., 30480., 31728., 32976., 35348., 36632., 37916., 39200.,
      31192., 32512., 33832., 35152., 37596., 38952., 40308., 41664., 33152.,
      34544., 35936., 37328., 39844., 41272., 42700., 44128., 31008., 31920.,
      32832., 33744., 35780., 36728., 37676., 38624., 32968., 33952., 34936.,
      35920., 38028., 39048., 40068., 41088., 34928., 35984., 37040., 38096.,
      40276., 41368., 42460., 43552., 36888., 38016., 39144., 40272., 42524.,
      43688., 44852., 46016., 38848., 40048., 41248., 42448., 44772., 46008.,
      47244., 48480.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3330.,  4680.,  6210.,  7920.,  5205.,  6780.,  8565.,  10560., 8280.,
      10080., 12120., 14400., 5205.,  6780.,  8565.,  10560., 3330.,  4680.,
      6210.,  7920.,  3996.,  5616.,  7452.,  9504.,  6246.,  8136.,  10278.,
      12672., 9936.,  12096., 14544., 17280., 6246.,  8136.,  10278., 12672.,
      3996.,  5616.,  7452.,  9504.,  4662.,  6552.,  8694.,  11088., 7287.,
      9492.,  11991., 14784., 11592., 14112., 16968., 20160., 7287.,  9492.,
      11991., 14784., 4662.,  6552.,  8694.,  11088., 3996.,  5616.,  7452.,
      9504.,  6246.,  8136.,  10278., 12672., 9936.,  12096., 14544., 17280.,
      6246.,  8136.,  10278., 12672., 3996.,  5616.,  7452.,  9504.,  3330.,
      4680.,  6210.,  7920.,  5205.,  6780.,  8565.,  10560., 8280.,  10080.,
      12120., 14400., 5205.,  6780.,  8565.,  10560., 3330.,  4680.,  6210.,
      7920.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27828., 29648., 31540., 33504., 31908., 33872., 35908., 38016., 35988.,
      38096., 40276., 42528., 40068., 42320., 44644., 47040., 44148., 46544.,
      49012., 51552., 20532., 22480., 24500., 26592., 24612., 26704., 28868.,
      31104., 28692., 30928., 33236., 35616., 32772., 35152., 37604., 40128.,
      36852., 39376., 41972., 44640., 27828., 29648., 31540., 33504., 31908.,
      33872., 35908., 38016., 35988., 38096., 40276., 42528., 40068., 42320.,
      44644., 47040., 44148., 46544., 49012., 51552., 20532., 22480., 24500.,
      26592., 24612., 26704., 28868., 31104., 28692., 30928., 33236., 35616.,
      32772., 35152., 37604., 40128., 36852., 39376., 41972., 44640., 27828.,
      29648., 31540., 33504., 31908., 33872., 35908., 38016., 35988., 38096.,
      40276., 42528., 40068., 42320., 44644., 47040., 44148., 46544., 49012.,
      51552.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3270.,  3780.,  4920.,  5520.,  6930.,  7620.,  9300.,  10080., 3045.,
      3690.,  5130.,  5880.,  7635.,  8490.,  10560., 11520., 5160.,  6000.,
      7680.,  8640.,  10680., 11760., 14160., 15360., 3105.,  3930.,  5430.,
      6360.,  8175.,  9210.,  11340., 12480., 4470.,  5220.,  6600.,  7440.,
      9090.,  10020., 11940., 12960., 3924.,  4536.,  5904.,  6624.,  8316.,
      9144.,  11160., 12096., 3654.,  4428.,  6156.,  7056.,  9162.,  10188.,
      12672., 13824., 6192.,  7200.,  9216.,  10368., 12816., 14112., 16992.,
      18432., 3726.,  4716.,  6516.,  7632.,  9810.,  11052., 13608., 14976.,
      5364.,  6264.,  7920.,  8928.,  10908., 12024., 14328., 15552., 4578.,
      5292.,  6888.,  7728.,  9702.,  10668., 13020., 14112., 4263.,  5166.,
      7182.,  8232.,  10689., 11886., 14784., 16128., 7224.,  8400.,  10752.,
      12096., 14952., 16464., 19824., 21504., 4347.,  5502.,  7602.,  8904.,
      11445., 12894., 15876., 17472., 6258.,  7308.,  9240.,  10416., 12726.,
      14028., 16716., 18144., 3924.,  4536.,  5904.,  6624.,  8316.,  9144.,
      11160., 12096., 3654.,  4428.,  6156.,  7056.,  9162.,  10188., 12672.,
      13824., 6192.,  7200.,  9216.,  10368., 12816., 14112., 16992., 18432.,
      3726.,  4716.,  6516.,  7632.,  9810.,  11052., 13608., 14976., 5364.,
      6264.,  7920.,  8928.,  10908., 12024., 14328., 15552., 3270.,  3780.,
      4920.,  5520.,  6930.,  7620.,  9300.,  10080., 3045.,  3690.,  5130.,
      5880.,  7635.,  8490.,  10560., 11520., 5160.,  6000.,  7680.,  8640.,
      10680., 11760., 14160., 15360., 3105.,  3930.,  5430.,  6360.,  8175.,
      9210.,  11340., 12480., 4470.,  5220.,  6600.,  7440.,  9090.,  10020.,
      11940., 12960.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31340., 32104., 33920., 34720., 36644., 37480., 39512., 40384., 35260.,
      36168., 38128., 39072., 41140., 42120., 44296., 45312., 39180., 40232.,
      42336., 43424., 45636., 46760., 49080., 50240., 43100., 44296., 46544.,
      47776., 50132., 51400., 53864., 55168., 47020., 48360., 50752., 52128.,
      54628., 56040., 58648., 60096., 16620., 17512., 19456., 20384., 22436.,
      23400., 25560., 26560., 20540., 21576., 23664., 24736., 26932., 28040.,
      30344., 31488., 24460., 25640., 27872., 29088., 31428., 32680., 35128.,
      36416., 28380., 29704., 32080., 33440., 35924., 37320., 39912., 41344.,
      32300., 33768., 36288., 37792., 40420., 41960., 44696., 46272., 31340.,
      32104., 33920., 34720., 36644., 37480., 39512., 40384., 35260., 36168.,
      38128., 39072., 41140., 42120., 44296., 45312., 39180., 40232., 42336.,
      43424., 45636., 46760., 49080., 50240., 43100., 44296., 46544., 47776.,
      50132., 51400., 53864., 55168., 47020., 48360., 50752., 52128., 54628.,
      56040., 58648., 60096., 16620., 17512., 19456., 20384., 22436., 23400.,
      25560., 26560., 20540., 21576., 23664., 24736., 26932., 28040., 30344.,
      31488., 24460., 25640., 27872., 29088., 31428., 32680., 35128., 36416.,
      28380., 29704., 32080., 33440., 35924., 37320., 39912., 41344., 32300.,
      33768., 36288., 37792., 40420., 41960., 44696., 46272., 31340., 32104.,
      33920., 34720., 36644., 37480., 39512., 40384., 35260., 36168., 38128.,
      39072., 41140., 42120., 44296., 45312., 39180., 40232., 42336., 43424.,
      45636., 46760., 49080., 50240., 43100., 44296., 46544., 47776., 50132.,
      51400., 53864., 55168., 47020., 48360., 50752., 52128., 54628., 56040.,
      58648., 60096.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,   1020.,  1530.,  2040.,  3000.,  3600.,  4200.,  4800.,  6210.,
      6900.,  7590.,  8280.,  10140., 10920., 11700., 12480., 645.,   1290.,
      1935.,  2580.,  3750.,  4500.,  5250.,  6000.,  7695.,  8550.,  9405.,
      10260., 12480., 13440., 14400., 15360., 840.,   1680.,  2520.,  3360.,
      4800.,  5760.,  6720.,  7680.,  9720.,  10800., 11880., 12960., 15600.,
      16800., 18000., 19200., 825.,   1650.,  2475.,  3300.,  4650.,  5580.,
      6510.,  7440.,  9315.,  10350., 11385., 12420., 14820., 15960., 17100.,
      18240., 750.,   1500.,  2250.,  3000.,  4200.,  5040.,  5880.,  6720.,
      8370.,  9300.,  10230., 11160., 13260., 14280., 15300., 16320., 612.,
      1224.,  1836.,  2448.,  3600.,  4320.,  5040.,  5760.,  7452.,  8280.,
      9108.,  9936.,  12168., 13104., 14040., 14976., 774.,   1548.,  2322.,
      3096.,  4500.,  5400.,  6300.,  7200.,  9234.,  10260., 11286., 12312.,
      14976., 16128., 17280., 18432., 1008.,  2016.,  3024.,  4032.,  5760.,
      6912.,  8064.,  9216.,  11664., 12960., 14256., 15552., 18720., 20160.,
      21600., 23040., 990.,   1980.,  2970.,  3960.,  5580.,  6696.,  7812.,
      8928.,  11178., 12420., 13662., 14904., 17784., 19152., 20520., 21888.,
      900.,   1800.,  2700.,  3600.,  5040.,  6048.,  7056.,  8064.,  10044.,
      11160., 12276., 13392., 15912., 17136., 18360., 19584., 714.,   1428.,
      2142.,  2856.,  4200.,  5040.,  5880.,  6720.,  8694.,  9660.,  10626.,
      11592., 14196., 15288., 16380., 17472., 903.,   1806.,  2709.,  3612.,
      5250.,  6300.,  7350.,  8400.,  10773., 11970., 13167., 14364., 17472.,
      18816., 20160., 21504., 1176.,  2352.,  3528.,  4704.,  6720.,  8064.,
      9408.,  10752., 13608., 15120., 16632., 18144., 21840., 23520., 25200.,
      26880., 1155.,  2310.,  3465.,  4620.,  6510.,  7812.,  9114.,  10416.,
      13041., 14490., 15939., 17388., 20748., 22344., 23940., 25536., 1050.,
      2100.,  3150.,  4200.,  5880.,  7056.,  8232.,  9408.,  11718., 13020.,
      14322., 15624., 18564., 19992., 21420., 22848., 612.,   1224.,  1836.,
      2448.,  3600.,  4320.,  5040.,  5760.,  7452.,  8280.,  9108.,  9936.,
      12168., 13104., 14040., 14976., 774.,   1548.,  2322.,  3096.,  4500.,
      5400.,  6300.,  7200.,  9234.,  10260., 11286., 12312., 14976., 16128.,
      17280., 18432., 1008.,  2016.,  3024.,  4032.,  5760.,  6912.,  8064.,
      9216.,  11664., 12960., 14256., 15552., 18720., 20160., 21600., 23040.,
      990.,   1980.,  2970.,  3960.,  5580.,  6696.,  7812.,  8928.,  11178.,
      12420., 13662., 14904., 17784., 19152., 20520., 21888., 900.,   1800.,
      2700.,  3600.,  5040.,  6048.,  7056.,  8064.,  10044., 11160., 12276.,
      13392., 15912., 17136., 18360., 19584., 510.,   1020.,  1530.,  2040.,
      3000.,  3600.,  4200.,  4800.,  6210.,  6900.,  7590.,  8280.,  10140.,
      10920., 11700., 12480., 645.,   1290.,  1935.,  2580.,  3750.,  4500.,
      5250.,  6000.,  7695.,  8550.,  9405.,  10260., 12480., 13440., 14400.,
      15360., 840.,   1680.,  2520.,  3360.,  4800.,  5760.,  6720.,  7680.,
      9720.,  10800., 11880., 12960., 15600., 16800., 18000., 19200., 825.,
      1650.,  2475.,  3300.,  4650.,  5580.,  6510.,  7440.,  9315.,  10350.,
      11385., 12420., 14820., 15960., 17100., 18240., 750.,   1500.,  2250.,
      3000.,  4200.,  5040.,  5880.,  6720.,  8370.,  9300.,  10230., 11160.,
      13260., 14280., 15300., 16320.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2844.,  3096.,  3348.,  3600.,  4320.,  4608.,  4896.,  5184.,  6084.,
      6408.,  6732.,  7056.,  8136.,  8496.,  8856.,  9216.,  4140.,  4536.,
      4932.,  5328.,  6192.,  6624.,  7056.,  7488.,  8532.,  9000.,  9468.,
      9936.,  11160., 11664., 12168., 12672., 5436.,  5976.,  6516.,  7056.,
      8064.,  8640.,  9216.,  9792.,  10980., 11592., 12204., 12816., 14184.,
      14832., 15480., 16128., 6732.,  7416.,  8100.,  8784.,  9936.,  10656.,
      11376., 12096., 13428., 14184., 14940., 15696., 17208., 18000., 18792.,
      19584., 8028.,  8856.,  9684.,  10512., 11808., 12672., 13536., 14400.,
      15876., 16776., 17676., 18576., 20232., 21168., 22104., 23040., 2844.,
      3096.,  3348.,  3600.,  4320.,  4608.,  4896.,  5184.,  6084.,  6408.,
      6732.,  7056.,  8136.,  8496.,  8856.,  9216.,  4140.,  4536.,  4932.,
      5328.,  6192.,  6624.,  7056.,  7488.,  8532.,  9000.,  9468.,  9936.,
      11160., 11664., 12168., 12672., 5436.,  5976.,  6516.,  7056.,  8064.,
      8640.,  9216.,  9792.,  10980., 11592., 12204., 12816., 14184., 14832.,
      15480., 16128., 6732.,  7416.,  8100.,  8784.,  9936.,  10656., 11376.,
      12096., 13428., 14184., 14940., 15696., 17208., 18000., 18792., 19584.,
      8028.,  8856.,  9684.,  10512., 11808., 12672., 13536., 14400., 15876.,
      16776., 17676., 18576., 20232., 21168., 22104., 23040., 2844.,  3096.,
      3348.,  3600.,  4320.,  4608.,  4896.,  5184.,  6084.,  6408.,  6732.,
      7056.,  8136.,  8496.,  8856.,  9216.,  4140.,  4536.,  4932.,  5328.,
      6192.,  6624.,  7056.,  7488.,  8532.,  9000.,  9468.,  9936.,  11160.,
      11664., 12168., 12672., 5436.,  5976.,  6516.,  7056.,  8064.,  8640.,
      9216.,  9792.,  10980., 11592., 12204., 12816., 14184., 14832., 15480.,
      16128., 6732.,  7416.,  8100.,  8784.,  9936.,  10656., 11376., 12096.,
      13428., 14184., 14940., 15696., 17208., 18000., 18792., 19584., 8028.,
      8856.,  9684.,  10512., 11808., 12672., 13536., 14400., 15876., 16776.,
      17676., 18576., 20232., 21168., 22104., 23040., 2844.,  3096.,  3348.,
      3600.,  4320.,  4608.,  4896.,  5184.,  6084.,  6408.,  6732.,  7056.,
      8136.,  8496.,  8856.,  9216.,  4140.,  4536.,  4932.,  5328.,  6192.,
      6624.,  7056.,  7488.,  8532.,  9000.,  9468.,  9936.,  11160., 11664.,
      12168., 12672., 5436.,  5976.,  6516.,  7056.,  8064.,  8640.,  9216.,
      9792.,  10980., 11592., 12204., 12816., 14184., 14832., 15480., 16128.,
      6732.,  7416.,  8100.,  8784.,  9936.,  10656., 11376., 12096., 13428.,
      14184., 14940., 15696., 17208., 18000., 18792., 19584., 8028.,  8856.,
      9684.,  10512., 11808., 12672., 13536., 14400., 15876., 16776., 17676.,
      18576., 20232., 21168., 22104., 23040., 2844.,  3096.,  3348.,  3600.,
      4320.,  4608.,  4896.,  5184.,  6084.,  6408.,  6732.,  7056.,  8136.,
      8496.,  8856.,  9216.,  4140.,  4536.,  4932.,  5328.,  6192.,  6624.,
      7056.,  7488.,  8532.,  9000.,  9468.,  9936.,  11160., 11664., 12168.,
      12672., 5436.,  5976.,  6516.,  7056.,  8064.,  8640.,  9216.,  9792.,
      10980., 11592., 12204., 12816., 14184., 14832., 15480., 16128., 6732.,
      7416.,  8100.,  8784.,  9936.,  10656., 11376., 12096., 13428., 14184.,
      14940., 15696., 17208., 18000., 18792., 19584., 8028.,  8856.,  9684.,
      10512., 11808., 12672., 13536., 14400., 15876., 16776., 17676., 18576.,
      20232., 21168., 22104., 23040.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15948., 20586., 25362., 21474., 17676., 20670., 27390., 34257., 29460.,
      24750., 28272., 37704., 47256., 37704., 28272., 24750., 29460., 34257.,
      27390., 20670., 17676., 21474., 25362., 20586., 15948.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24060., 24360., 24660., 24960., 25260., 25860., 26160., 26460., 26760.,
      27060., 27660., 27960., 28260., 28560., 28860., 29460., 29760., 30060.,
      30360., 30660., 31260., 31560., 31860., 32160., 32460.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19276., 20408., 23392., 24788., 27478., 29156., 22262., 23652., 17532.,
      18616., 19682., 20956., 25519., 27100., 31309., 33218., 26578., 28168.,
      22362., 23612., 25008., 26496., 33616., 35472., 42088., 44336., 33432.,
      35312., 25392., 26880., 20554., 21948., 24965., 26696., 29209., 31298.,
      23888., 25628., 19202., 20572., 15980., 17208., 20952., 22468., 25798.,
      27620., 22414., 23924., 19612., 20792.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      46716., 48120., 47292., 48720., 47868., 49320., 48444., 49920., 49020.,
      50520., 50172., 51720., 50748., 52320., 51324., 52920., 51900., 53520.,
      52476., 54120., 53628., 55320., 54204., 55920., 54780., 56520., 55356.,
      57120., 55932., 57720., 57084., 58920., 57660., 59520., 58236., 60120.,
      58812., 60720., 59388., 61320., 60540., 62520., 61116., 63120., 61692.,
      63720., 62268., 64320., 62844., 64920.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17900., 19032., 20164., 21296., 21644., 23040., 24436., 25832., 24926.,
      26604., 28282., 29960., 20702., 22092., 23482., 24872., 17756., 18840.,
      19924., 21008., 20938., 22212., 23486., 24760., 25393., 26974., 28555.,
      30136., 29349., 31258., 33167., 35076., 23534., 25124., 26714., 28304.,
      19154., 20404., 21654., 22904., 22160., 23648., 25136., 26624., 29792.,
      31648., 33504., 35360., 36744., 38992., 41240., 43488., 28504., 30384.,
      32264., 34144., 21904., 23392., 24880., 26368., 19426., 20820., 22214.,
      23608., 25063., 26794., 28525., 30256., 30057., 32146., 34235., 36324.,
      25556., 27296., 29036., 30776., 22634., 24004., 25374., 26744., 16492.,
      17720., 18948., 20176., 20740., 22256., 23772., 25288., 24430., 26252.,
      28074., 29896., 19894., 21404., 22914., 24424., 16732., 17912., 19092.,
      20272.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22268., 23032., 23796., 24560., 22884., 23672., 24460., 25248., 23500.,
      24312., 25124., 25936., 20724., 21496., 22268., 23040., 18204., 18936.,
      19668., 20400., 19436., 20216., 20996., 21776., 20052., 20856., 21660.,
      22464., 20668., 21496., 22324., 23152., 18404., 19192., 19980., 20768.,
      16396., 17144., 17892., 18640., 17628., 18424., 19220., 20016., 16388.,
      17144., 17900., 18656., 15404., 16120., 16836., 17552., 13652., 14328.,
      15004., 15680., 12156., 12792., 13428., 14064., 13388., 14072., 14756.,
      15440., 12660., 13304., 13948., 14592., 12188., 12792., 13396., 14000.,
      12804., 13432., 14060., 14688., 13420., 14072., 14724., 15376., 14652.,
      15352., 16052., 16752., 14436., 15096., 15756., 16416., 14476., 15096.,
      15716., 16336., 15092., 15736., 16380., 17024., 15708., 16376., 17044.,
      17712.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20328., 22704., 22350., 25320., 24924., 28488., 19758., 22728., 14952.,
      17328., 18084., 20856., 23151., 26616., 28806., 32964., 25287., 28752.,
      22116., 24888., 27360., 30528., 37992., 41952., 49104., 53856., 37992.,
      41952., 27360., 30528., 22116., 24888., 25287., 28752., 28806., 32964.,
      23151., 26616., 18084., 20856., 14952., 17328., 19758., 22728., 24924.,
      28488., 22350., 25320., 20328., 22704.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      44216., 46320., 45368., 47520., 46520., 48720., 44216., 46336., 42168.,
      44208., 44472., 46608., 45624., 47808., 46776., 49008., 44984., 47136.,
      43448., 45520., 45752., 47920., 40888., 42976., 36280., 38288., 35000.,
      36928., 33976., 35824., 36280., 38224., 31928., 33792., 27832., 29616.,
      28984., 30816., 30136., 32016., 32440., 34416., 28600., 30496., 25016.,
      26832., 26168., 28032., 27320., 29232.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18048., 19152., 21576., 22752., 19950., 21276., 24264., 25680., 22152.,
      23736., 27252., 28944., 18522., 19836., 22740., 24144., 16224., 17232.,
      19560., 20640., 22632., 23880., 26556., 27888., 25197., 26718., 30102.,
      31728., 28128., 29964., 34014., 35976., 22539., 24078., 27444., 29088.,
      18456., 19656., 22380., 23664., 22464., 24000., 27168., 28800., 31464.,
      33360., 37344., 39360., 40608., 42912., 47664., 50112., 30648., 32592.,
      36528., 38592., 22464., 24000., 27168., 28800., 19704., 21192., 24012.,
      25584., 25425., 27246., 30810., 32736., 31224., 33420., 37686., 40008.,
      27471., 29310., 32856., 34800., 25512., 26952., 29820., 31344., 17472.,
      18768., 21192., 22560., 20382., 21948., 24984., 26640., 23400., 25272.,
      28884., 30864., 19146., 20700., 23652., 25296., 16416., 17616., 19944.,
      21216.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19728., 20336., 21608., 22240., 20960., 21616., 22936., 23616., 22192.,
      22896., 24264., 24992., 20032., 20720., 22072., 22784., 18128., 18800.,
      20136., 20832., 20592., 21360., 22792., 23584., 21824., 22640., 24120.,
      24960., 23056., 23920., 25448., 26336., 21408., 22256., 23768., 24640.,
      20016., 20848., 22344., 23200., 22480., 23408., 25000., 25952., 20000.,
      20848., 22360., 23232., 18032., 18800., 20232., 21024., 16896., 17648.,
      19064., 19840., 16016., 16752., 18152., 18912., 18480., 19312., 20808.,
      21664., 17024., 17776., 19192., 19968., 16080., 16752., 18088., 18784.,
      17312., 18032., 19416., 20160., 18544., 19312., 20744., 21536., 21008.,
      21872., 23400., 24288., 20576., 21360., 22808., 23616., 20656., 21360.,
      22728., 23456., 21888., 22640., 24056., 24832., 23120., 23920., 25384.,
      26208.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13104., 14208., 15312., 16416., 18744., 19920., 21096., 22272., 17934.,
      19260., 20586., 21912., 24840., 26256., 27672., 29088., 22752., 24336.,
      25920., 27504., 30924., 32616., 34308., 36000., 15666., 16980., 18294.,
      19608., 22380., 23784., 25188., 26592., 11856., 12864., 13872., 14880.,
      17112., 18192., 19272., 20352., 18288., 19536., 20784., 22032., 24708.,
      26040., 27372., 28704., 20841., 22362., 23883., 25404., 28818., 30444.,
      32070., 33696., 23316., 25152., 26988., 28824., 32850., 34812., 36774.,
      38736., 18483., 20022., 21561., 23100., 26364., 28008., 29652., 31296.,
      17280., 18480., 19680., 20880., 23508., 24792., 26076., 27360., 18816.,
      20352., 21888., 23424., 26592., 28224., 29856., 31488., 26088., 27984.,
      29880., 31776., 35808., 37824., 39840., 41856., 32832., 35136., 37440.,
      39744., 44496., 46944., 49392., 51840., 23640., 25584., 27528., 29472.,
      33360., 35424., 37488., 39552., 18816., 20352., 21888., 23424., 26592.,
      28224., 29856., 31488., 21024., 22512., 24000., 25488., 28404., 29976.,
      31548., 33120., 24069., 25890., 27711., 29532., 33198., 35124., 37050.,
      38976., 26460., 28656., 30852., 33048., 37338., 39660., 41982., 44304.,
      21519., 23358., 25197., 27036., 30552., 32496., 34440., 36384., 20784.,
      22224., 23664., 25104., 27972., 29496., 31020., 32544., 15600., 16896.,
      18192., 19488., 22008., 23376., 24744., 26112., 21246., 22812., 24378.,
      25944., 29112., 30768., 32424., 34080., 26496., 28368., 30240., 32112.,
      35820., 37800., 39780., 41760., 18594., 20148., 21702., 23256., 26268.,
      27912., 29556., 31200., 14352., 15552., 16752., 17952., 20376., 21648.,
      22920., 24192.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20416., 21024., 21632., 22240., 23640., 24272., 24904., 25536., 21808.,
      22464., 23120., 23776., 25224., 25904., 26584., 27264., 23200., 23904.,
      24608., 25312., 26808., 27536., 28264., 28992., 21968., 22656., 23344.,
      24032., 25512., 26224., 26936., 27648., 21248., 21920., 22592., 23264.,
      24728., 25424., 26120., 26816., 24032., 24800., 25568., 26336., 27896.,
      28688., 29480., 30272., 25424., 26240., 27056., 27872., 29480., 30320.,
      31160., 32000., 26816., 27680., 28544., 29408., 31064., 31952., 32840.,
      33728., 26608., 27456., 28304., 29152., 30792., 31664., 32536., 33408.,
      26912., 27744., 28576., 29408., 31032., 31888., 32744., 33600., 29696.,
      30624., 31552., 32480., 34200., 35152., 36104., 37056., 23792., 24640.,
      25488., 26336., 27976., 28848., 29720., 30592., 18912., 19680., 20448.,
      21216., 22776., 23568., 24360., 25152., 19728., 20480., 21232., 21984.,
      23528., 24304., 25080., 25856., 21056., 21792., 22528., 23264., 24792.,
      25552., 26312., 27072., 23840., 24672., 25504., 26336., 27960., 28816.,
      29672., 30528., 19984., 20736., 21488., 22240., 23784., 24560., 25336.,
      26112., 17152., 17824., 18496., 19168., 20632., 21328., 22024., 22720.,
      18544., 19264., 19984., 20704., 22216., 22960., 23704., 24448., 19936.,
      20704., 21472., 22240., 23800., 24592., 25384., 26176., 22720., 23584.,
      24448., 25312., 26968., 27856., 28744., 29632., 20912., 21696., 22480.,
      23264., 24840., 25648., 26456., 27264., 20128., 20832., 21536., 22240.,
      23736., 24464., 25192., 25920., 21520., 22272., 23024., 23776., 25320.,
      26096., 26872., 27648., 22912., 23712., 24512., 25312., 26904., 27728.,
      28552., 29376.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14568., 16800., 19176., 21696., 16338., 19128., 22098., 25248., 19548.,
      22896., 26460., 30240., 17106., 19896., 22866., 26016., 16104., 18336.,
      20712., 23232., 26724., 29328., 32100., 35040., 25413., 28668., 32133.,
      35808., 26070., 29976., 34134., 38544., 19749., 23004., 26469., 30144.,
      15204., 17808., 20580., 23520., 20448., 23424., 26592., 29952., 31512.,
      35232., 39192., 43392., 44496., 48960., 53712., 58752., 31512., 35232.,
      39192., 43392., 20448., 23424., 26592., 29952., 15204., 17808., 20580.,
      23520., 19749., 23004., 26469., 30144., 26070., 29976., 34134., 38544.,
      25413., 28668., 32133., 35808., 26724., 29328., 32100., 35040., 16104.,
      18336., 20712., 23232., 17106., 19896., 22866., 26016., 19548., 22896.,
      26460., 30240., 16338., 19128., 22098., 25248., 14568., 16800., 19176.,
      21696.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15416., 16608., 17848., 19136., 17880., 19168., 20504., 21888., 20344.,
      21728., 23160., 24640., 16728., 18016., 19352., 20736., 13880., 15072.,
      16312., 17600., 18808., 20192., 21624., 23104., 21272., 22752., 24280.,
      25856., 23736., 25312., 26936., 28608., 21656., 23136., 24664., 26240.,
      20344., 21728., 23160., 24640., 25272., 26848., 28472., 30144., 20120.,
      21600., 23128., 24704., 15736., 17120., 18552., 20032., 15192., 16480.,
      17816., 19200., 15416., 16608., 17848., 19136., 20344., 21728., 23160.,
      24640., 16728., 18016., 19352., 20736., 13880., 15072., 16312., 17600.,
      16344., 17632., 18968., 20352., 18808., 20192., 21624., 23104., 23736.,
      25312., 26936., 28608., 21656., 23136., 24664., 26240., 20344., 21728.,
      23160., 24640., 22808., 24288., 25816., 27392., 25272., 26848., 28472.,
      30144.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10296., 11280., 13344., 14400., 16680., 17808., 20304., 21504., 16386.,
      17604., 20244., 21552., 24462., 25860., 29040., 30528., 24132., 25656.,
      28800., 30432., 33900., 35640., 39432., 41280., 15930., 17220., 19788.,
      21168., 24006., 25476., 28584., 30144., 11832., 12816., 14880., 15936.,
      18216., 19344., 21840., 23040., 20508., 21768., 24288., 25632., 28404.,
      29832., 32856., 34368., 19569., 21066., 24246., 25848., 29343., 31050.,
      34860., 36672., 20946., 22764., 26520., 28464., 32598., 34668., 39180.,
      41376., 17325., 18858., 21906., 23544., 26907., 28650., 32328., 34176.,
      18492., 19656., 22080., 23328., 26004., 27336., 30264., 31680., 16416.,
      17856., 20736., 22272., 25440., 27072., 30528., 32256., 24024., 25776.,
      29424., 31296., 35304., 37296., 41664., 43776., 33840., 36000., 40320.,
      42624., 47376., 49824., 55008., 57600., 22392., 24240., 27792., 29760.,
      33672., 35760., 40032., 42240., 16416., 17856., 20736., 22272., 25440.,
      27072., 30528., 32256., 20988., 22344., 24960., 26400., 29268., 30792.,
      33912., 35520., 20217., 21834., 25086., 26808., 30375., 32202., 36084.,
      38016., 21378., 23340., 27144., 29232., 33414., 35628., 40188., 42528.,
      18357., 20010., 23130., 24888., 28323., 30186., 33936., 35904., 20508.,
      21768., 24288., 25632., 28404., 29832., 32856., 34368., 14328., 15504.,
      17760., 19008., 21480., 22800., 25488., 26880., 19650., 21060., 23892.,
      25392., 28494., 30084., 33456., 35136., 26628., 28344., 31680., 33504.,
      37164., 39096., 43080., 45120., 17658., 19140., 21900., 23472., 26502.,
      28164., 31464., 33216., 12792., 13968., 16224., 17472., 19944., 21264.,
      23952., 25344.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18504., 19056., 20352., 20928., 22296., 22896., 24336., 24960., 21288.,
      21936., 23328., 24000., 25464., 26160., 27696., 28416., 24072., 24816.,
      26304., 27072., 28632., 29424., 31056., 31872., 18984., 19632., 21024.,
      21696., 23160., 23856., 25392., 26112., 15432., 15984., 17280., 17856.,
      19224., 19824., 21264., 21888., 21000., 21744., 23232., 24000., 25560.,
      26352., 27984., 28800., 23784., 24624., 26208., 27072., 28728., 29616.,
      31344., 32256., 26568., 27504., 29184., 30144., 31896., 32880., 34704.,
      35712., 24552., 25392., 26976., 27840., 29496., 30384., 32112., 33024.,
      24072., 24816., 26304., 27072., 28632., 29424., 31056., 31872., 29640.,
      30576., 32256., 33216., 34968., 35952., 37776., 38784., 21480., 22320.,
      23904., 24768., 26424., 27312., 29040., 29952., 14856., 15600., 17088.,
      17856., 19416., 20208., 21840., 22656., 15912., 16560., 17952., 18624.,
      20088., 20784., 22320., 23040., 18504., 19056., 20352., 20928., 22296.,
      22896., 24336., 24960., 24072., 24816., 26304., 27072., 28632., 29424.,
      31056., 31872., 18984., 19632., 21024., 21696., 23160., 23856., 25392.,
      26112., 15432., 15984., 17280., 17856., 19224., 19824., 21264., 21888.,
      18216., 18864., 20256., 20928., 22392., 23088., 24624., 25344., 21000.,
      21744., 23232., 24000., 25560., 26352., 27984., 28800., 26568., 27504.,
      29184., 30144., 31896., 32880., 34704., 35712., 24552., 25392., 26976.,
      27840., 29496., 30384., 32112., 33024., 24072., 24816., 26304., 27072.,
      28632., 29424., 31056., 31872., 26856., 27696., 29280., 30144., 31800.,
      32688., 34416., 35328., 29640., 30576., 32256., 33216., 34968., 35952.,
      37776., 38784.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10008., 10992., 11976., 12960., 14880., 15936., 16992., 18048., 20328.,
      21456., 22584., 23712., 26352., 27552., 28752., 29952., 11682., 12900.,
      14118., 15336., 17868., 19176., 20484., 21792., 24774., 26172., 27570.,
      28968., 32400., 33888., 35376., 36864., 15444., 16968., 18492., 20016.,
      22944., 24576., 26208., 27840., 31308., 33048., 34788., 36528., 40536.,
      42384., 44232., 46080., 8010.,  9300.,  10590., 11880., 14196., 15576.,
      16956., 18336., 21102., 22572., 24042., 25512., 28728., 30288., 31848.,
      33408., 10008., 10992., 11976., 12960., 14880., 15936., 16992., 18048.,
      20328., 21456., 22584., 23712., 26352., 27552., 28752., 29952., 12684.,
      13944., 15204., 16464., 18816., 20160., 21504., 22848., 25620., 27048.,
      28476., 29904., 33096., 34608., 36120., 37632., 14025., 15522., 17019.,
      18516., 21546., 23148., 24750., 26352., 29907., 31614., 33321., 35028.,
      39108., 40920., 42732., 44544., 18378., 20196., 22014., 23832., 27288.,
      29232., 31176., 33120., 37206., 39276., 41346., 43416., 48132., 50328.,
      52524., 54720., 9501.,  11034., 12567., 14100., 16830., 18468., 20106.,
      21744., 24999., 26742., 28485., 30228., 34008., 35856., 37704., 39552.,
      11820., 12984., 14148., 15312., 17568., 18816., 20064., 21312., 23988.,
      25320., 26652., 27984., 31080., 32496., 33912., 35328., 14496., 15936.,
      17376., 18816., 21504., 23040., 24576., 26112., 29280., 30912., 32544.,
      34176., 37824., 39552., 41280., 43008., 16728., 18480., 20232., 21984.,
      25488., 27360., 29232., 31104., 35208., 37200., 39192., 41184., 45888.,
      48000., 50112., 52224., 21744., 23904., 26064., 28224., 32256., 34560.,
      36864., 39168., 43920., 46368., 48816., 51264., 56736., 59328., 61920.,
      64512., 11832., 13680., 15528., 17376., 20592., 22560., 24528., 26496.,
      30312., 32400., 34488., 36576., 40992., 43200., 45408., 47616., 14496.,
      15936., 17376., 18816., 21504., 23040., 24576., 26112., 29280., 30912.,
      32544., 34176., 37824., 39552., 41280., 43008., 13548., 14904., 16260.,
      17616., 20064., 21504., 22944., 24384., 27252., 28776., 30300., 31824.,
      35112., 36720., 38328., 39936., 15297., 16914., 18531., 20148., 23298.,
      25020., 26742., 28464., 32139., 33966., 35793., 37620., 41820., 43752.,
      45684., 47616., 19674., 21636., 23598., 25560., 29160., 31248., 33336.,
      35424., 39654., 41868., 44082., 46296., 51156., 53496., 55836., 58176.,
      10389., 12042., 13695., 15348., 18198., 19956., 21714., 23472., 26847.,
      28710., 30573., 32436., 36336., 38304., 40272., 42240., 12684., 13944.,
      15204., 16464., 18816., 20160., 21504., 22848., 25620., 27048., 28476.,
      29904., 33096., 34608., 36120., 37632., 11736., 12912., 14088., 15264.,
      17376., 18624., 19872., 21120., 23592., 24912., 26232., 27552., 30384.,
      31776., 33168., 34560., 13410., 14820., 16230., 17640., 20364., 21864.,
      23364., 24864., 28038., 29628., 31218., 32808., 36432., 38112., 39792.,
      41472., 17172., 18888., 20604., 22320., 25440., 27264., 29088., 30912.,
      34572., 36504., 38436., 40368., 44568., 46608., 48648., 50688., 9738.,
      11220., 12702., 14184., 16692., 18264., 19836., 21408., 24366., 26028.,
      27690., 29352., 32760., 34512., 36264., 38016., 11736., 12912., 14088.,
      15264., 17376., 18624., 19872., 21120., 23592., 24912., 26232., 27552.,
      30384., 31776., 33168., 34560.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12648., 13200., 13752., 14304., 15552., 16128., 16704., 17280., 18648.,
      19248., 19848., 20448., 21936., 22560., 23184., 23808., 15048., 15696.,
      16344., 16992., 18336., 19008., 19680., 20352., 21816., 22512., 23208.,
      23904., 25488., 26208., 26928., 27648., 17448., 18192., 18936., 19680.,
      21120., 21888., 22656., 23424., 24984., 25776., 26568., 27360., 29040.,
      29856., 30672., 31488., 16584., 17232., 17880., 18528., 19872., 20544.,
      21216., 21888., 23352., 24048., 24744., 25440., 27024., 27744., 28464.,
      29184., 18792., 19344., 19896., 20448., 21696., 22272., 22848., 23424.,
      24792., 25392., 25992., 26592., 28080., 28704., 29328., 29952., 23592.,
      24336., 25080., 25824., 27264., 28032., 28800., 29568., 31128., 31920.,
      32712., 33504., 35184., 36000., 36816., 37632., 25992., 26832., 27672.,
      28512., 30048., 30912., 31776., 32640., 34296., 35184., 36072., 36960.,
      38736., 39648., 40560., 41472., 28392., 29328., 30264., 31200., 32832.,
      33792., 34752., 35712., 37464., 38448., 39432., 40416., 42288., 43296.,
      44304., 45312., 21384., 22224., 23064., 23904., 25440., 26304., 27168.,
      28032., 29688., 30576., 31464., 32352., 34128., 35040., 35952., 36864.,
      17448., 18192., 18936., 19680., 21120., 21888., 22656., 23424., 24984.,
      25776., 26568., 27360., 29040., 29856., 30672., 31488., 22248., 23184.,
      24120., 25056., 26688., 27648., 28608., 29568., 31320., 32304., 33288.,
      34272., 36144., 37152., 38160., 39168., 15240., 16080., 16920., 17760.,
      19296., 20160., 21024., 21888., 23544., 24432., 25320., 26208., 27984.,
      28896., 29808., 30720., 11304., 12048., 12792., 13536., 14976., 15744.,
      16512., 17280., 18840., 19632., 20424., 21216., 22896., 23712., 24528.,
      25344., 10440., 11088., 11736., 12384., 13728., 14400., 15072., 15744.,
      17208., 17904., 18600., 19296., 20880., 21600., 22320., 23040., 12648.,
      13200., 13752., 14304., 15552., 16128., 16704., 17280., 18648., 19248.,
      19848., 20448., 21936., 22560., 23184., 23808., 17448., 18192., 18936.,
      19680., 21120., 21888., 22656., 23424., 24984., 25776., 26568., 27360.,
      29040., 29856., 30672., 31488., 16584., 17232., 17880., 18528., 19872.,
      20544., 21216., 21888., 23352., 24048., 24744., 25440., 27024., 27744.,
      28464., 29184., 18792., 19344., 19896., 20448., 21696., 22272., 22848.,
      23424., 24792., 25392., 25992., 26592., 28080., 28704., 29328., 29952.,
      21192., 21840., 22488., 23136., 24480., 25152., 25824., 26496., 27960.,
      28656., 29352., 30048., 31632., 32352., 33072., 33792., 23592., 24336.,
      25080., 25824., 27264., 28032., 28800., 29568., 31128., 31920., 32712.,
      33504., 35184., 36000., 36816., 37632., 28392., 29328., 30264., 31200.,
      32832., 33792., 34752., 35712., 37464., 38448., 39432., 40416., 42288.,
      43296., 44304., 45312., 21384., 22224., 23064., 23904., 25440., 26304.,
      27168., 28032., 29688., 30576., 31464., 32352., 34128., 35040., 35952.,
      36864., 17448., 18192., 18936., 19680., 21120., 21888., 22656., 23424.,
      24984., 25776., 26568., 27360., 29040., 29856., 30672., 31488., 19848.,
      20688., 21528., 22368., 23904., 24768., 25632., 26496., 28152., 29040.,
      29928., 30816., 32592., 33504., 34416., 35328., 22248., 23184., 24120.,
      25056., 26688., 27648., 28608., 29568., 31320., 32304., 33288., 34272.,
      36144., 37152., 38160., 39168.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19953., 23830., 27817., 24286., 20713., 24806., 30687., 37216., 33489.,
      29284., 37324., 46808., 57404., 46808., 37324., 29284., 33489., 37216.,
      30687., 24806., 20713., 24286., 27817., 23830., 19953.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45054., 41624., 38322., 38988., 39654., 37812., 34766., 31848., 32514.,
      33180., 31722., 29060., 26526., 27192., 27858., 29856., 30522., 31188.,
      31854., 32520., 34518., 35184., 35850., 36516., 37182.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27805., 29314., 31248., 33036., 34637., 36722., 28532., 30300., 23097.,
      24562., 24828., 26572., 29727., 31806., 34845., 37248., 30693., 32738.,
      26374., 28072., 31796., 33720., 40176., 42480., 49412., 52088., 40032.,
      42320., 31684., 33592., 24921., 26600., 29489., 31490., 33592., 35904.,
      28847., 30814., 24171., 25804., 20129., 21586., 25784., 27516., 31657.,
      33650., 28252., 29964., 25373., 26786.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37594., 38524., 32618., 33456., 29754., 30564., 30794., 31640., 31834.,
      32716., 27594., 28392., 23386., 24092., 20906., 21584., 21946., 22660.,
      22986., 23736., 22714., 23508., 20490., 21256., 18394., 19132., 19434.,
      20208., 20474., 21284., 23594., 24512., 24634., 25588., 25674., 26664.,
      26714., 27740., 27754., 28816., 30874., 32044., 31914., 33120., 32954.,
      34196., 33994., 35272., 35034., 36348.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25013., 26522., 28031., 29540., 28612., 30400., 32188., 33976., 31797.,
      33882., 35967., 38052., 27360., 29128., 30896., 32664., 23353., 24818.,
      26283., 27748., 26376., 28120., 29864., 31608., 34015., 36094., 38173.,
      40252., 37431., 39834., 42237., 44640., 31149., 33194., 35239., 37284.,
      25962., 27660., 29358., 31056., 28260., 30184., 32108., 34032., 35296.,
      37600., 39904., 42208., 43668., 46344., 49020., 51696., 35120., 37408.,
      39696., 41984., 28276., 30184., 32092., 34000., 22435., 24114., 25793.,
      27472., 28113., 30114., 32115., 34116., 34792., 37104., 39416., 41728.,
      32271., 34238., 36205., 38172., 25621., 27254., 28887., 30520., 18097.,
      19554., 21011., 22468., 22860., 24592., 26324., 28056., 28233., 30226.,
      32219., 34212., 25096., 26808., 28520., 30232., 23317., 24730., 26143.,
      27556.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      40978., 41908., 42838., 43768., 34190., 35028., 35866., 36704., 31562.,
      32372., 33182., 33992., 32582., 33428., 34274., 35120., 33602., 34484.,
      35366., 36248., 26230., 27028., 27826., 28624., 20978., 21684., 22390.,
      23096., 19118., 19796., 20474., 21152., 20138., 20852., 21566., 22280.,
      21158., 21908., 22658., 23408., 21594., 22388., 23182., 23976., 20246.,
      21012., 21778., 22544., 19154., 19892., 20630., 21368., 20174., 20948.,
      21722., 22496., 21194., 22004., 22814., 23624., 24254., 25172., 26090.,
      27008., 25274., 26228., 27182., 28136., 26294., 27284., 28274., 29264.,
      27314., 28340., 29366., 30392., 28334., 29396., 30458., 31520., 31394.,
      32564., 33734., 34904., 32414., 33620., 34826., 36032., 33434., 34676.,
      35918., 37160., 34454., 35732., 37010., 38288., 35474., 36788., 38102.,
      39416.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29514., 32388., 31308., 34776., 33606., 37668., 26252., 29752., 19850.,
      22756., 22559., 26008., 27006., 31164., 31517., 36352., 28230., 32388.,
      24599., 28048., 32664., 36528., 43248., 47904., 55240., 60656., 43248.,
      47904., 32664., 36528., 24599., 28048., 28230., 32388., 31517., 36352.,
      27006., 31164., 22559., 26008., 19850., 22756., 26252., 29752., 33606.,
      37668., 31308., 34776., 29514., 32388.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      38308., 40440., 34372., 36448., 32548., 34632., 34628., 36784., 36708.,
      38936., 35588., 37840., 32420., 34616., 29508., 31648., 30244., 32392.,
      31108., 33264., 33956., 36264., 32772., 35088., 30628., 32888., 28740.,
      30944., 27108., 29256., 30596., 32896., 32676., 35048., 34052., 36432.,
      32932., 35256., 31620., 33824., 34980., 37208., 37060., 39360., 38820.,
      41128., 38468., 40720., 38308., 40440.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25380., 26772., 29694., 31176., 27084., 28728., 32280., 34032., 29184.,
      31116., 35262., 37320., 24308., 25944., 29536., 31280., 20540., 21876.,
      24886., 26312., 26599., 28286., 31728., 33520., 35964., 37980., 42138.,
      44280., 37127., 39450., 44314., 46784., 29808., 31788., 35982., 38088.,
      23635., 25262., 28764., 30496., 27136., 29008., 32920., 34912., 35760.,
      38016., 42720., 45120., 46416., 49040., 54520., 57312., 35952., 38208.,
      42912., 45312., 27584., 29456., 33368., 35360., 22265., 23982., 27394.,
      29216., 28392., 30444., 34566., 36744., 36637., 39002., 43824., 46336.,
      35772., 37788., 41946., 44088., 26501., 28158., 31630., 33392., 17644.,
      19124., 21990., 23560., 22012., 23768., 27240., 29104., 27576., 29580.,
      33654., 35784., 25668., 27384., 30864., 32688., 25380., 26772., 29694.,
      31176.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      42792., 43848., 45996., 47088., 37024., 38024., 40116., 41152., 35416.,
      36424., 38524., 39568., 37456., 38536., 40708., 41824., 39496., 40648.,
      42892., 44080., 35184., 36360., 38628., 39840., 30952., 32072., 34284.,
      35440., 27232., 28296., 30452., 31552., 26648., 27720., 29884., 30992.,
      26320., 27400., 29572., 30688., 29816., 31048., 33372., 34640., 29488.,
      30728., 33060., 34336., 27304., 28488., 30764., 31984., 25632., 26760.,
      28980., 30144., 24472., 25544., 27708., 28816., 29248., 30472., 32788.,
      34048., 31288., 32584., 34972., 36304., 31984., 33288., 35684., 37024.,
      31848., 33096., 35436., 36720., 31392., 32520., 34740., 35904., 36040.,
      37192., 39436., 40624., 38080., 39304., 41620., 42880., 39544., 40776.,
      43100., 44368., 40944., 42120., 44388., 45600., 42792., 43848., 45996.,
      47088.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20664., 22056., 23448., 24840., 27762., 29244., 30726., 32208., 21708.,
      23352., 24996., 26640., 30168., 31920., 33672., 35424., 24308., 26240.,
      28172., 30104., 34226., 36284., 38342., 40400., 21252., 22888., 24524.,
      26160., 29680., 31424., 33168., 34912., 19008., 20344., 21680., 23016.,
      25882., 27308., 28734., 30160., 21591., 23278., 24965., 26652., 30112.,
      31904., 33696., 35488., 29048., 31064., 33080., 35096., 39254., 41396.,
      43538., 45680., 29851., 32174., 34497., 36820., 41678., 44148., 46618.,
      49088., 24996., 26976., 28956., 30936., 35106., 37212., 39318., 41424.,
      21227., 22854., 24481., 26108., 29556., 31288., 33020., 34752., 22704.,
      24576., 26448., 28320., 32232., 34224., 36216., 38208., 28816., 31072.,
      33328., 35584., 40288., 42688., 45088., 47488., 37472., 40096., 42720.,
      45344., 50824., 53616., 56408., 59200., 28688., 30944., 33200., 35456.,
      40160., 42560., 44960., 47360., 23088., 24960., 26832., 28704., 32616.,
      34608., 36600., 38592., 21309., 23026., 24743., 26460., 29926., 31748.,
      33570., 35392., 24012., 26064., 28116., 30168., 34314., 36492., 38670.,
      40848., 29437., 31802., 34167., 36532., 41360., 43872., 46384., 48896.,
      29176., 31192., 33208., 35224., 39382., 41524., 43666., 45808., 21137.,
      22794., 24451., 26108., 29562., 31324., 33086., 34848., 21008., 22488.,
      23968., 25448., 28458., 30028., 31598., 33168., 21788., 23544., 25300.,
      27056., 30600., 32464., 34328., 36192., 23452., 25456., 27460., 29464.,
      33562., 35692., 37822., 39952., 20724., 22440., 24156., 25872., 29376.,
      31200., 33024., 34848., 20664., 22056., 23448., 24840., 27762., 29244.,
      30726., 32208.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35888., 36944., 38000., 39056., 41236., 42328., 43420., 44512., 30552.,
      31552., 32552., 33552., 35676., 36712., 37748., 38784., 29376., 30384.,
      31392., 32400., 34532., 35576., 36620., 37664., 31336., 32416., 33496.,
      34576., 36780., 37896., 39012., 40128., 33296., 34448., 35600., 36752.,
      39028., 40216., 41404., 42592., 30792., 31968., 33144., 34320., 36620.,
      37832., 39044., 40256., 28528., 29648., 30768., 31888., 34132., 35288.,
      36444., 37600., 27288., 28352., 29416., 30480., 32668., 33768., 34868.,
      35968., 28160., 29232., 30304., 31376., 33572., 34680., 35788., 36896.,
      29544., 30624., 31704., 32784., 34988., 36104., 37220., 38336., 34336.,
      35568., 36800., 38032., 40388., 41656., 42924., 44192., 35720., 36960.,
      38200., 39440., 41804., 43080., 44356., 45632., 37552., 38736., 39920.,
      41104., 43412., 44632., 45852., 47072., 32216., 33344., 34472., 35600.,
      37852., 39016., 40180., 41344., 27904., 28976., 30048., 31120., 33316.,
      34424., 35532., 36640., 31160., 32384., 33608., 34832., 37180., 38440.,
      39700., 40960., 33120., 34416., 35712., 37008., 39428., 40760., 42092.,
      43424., 32456., 33760., 35064., 36368., 38796., 40136., 41476., 42816.,
      30192., 31440., 32688., 33936., 36308., 37592., 38876., 40160., 27352.,
      28480., 29608., 30736., 32988., 34152., 35316., 36480., 30480., 31632.,
      32784., 33936., 36212., 37400., 38588., 39776., 32440., 33664., 34888.,
      36112., 38460., 39720., 40980., 42240., 33312., 34544., 35776., 37008.,
      39364., 40632., 41900., 43168., 34120., 35296., 36472., 37648., 39948.,
      41160., 42372., 43584., 35888., 36944., 38000., 39056., 41236., 42328.,
      43420., 44512.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6306.,  7656.,  9186.,  10896., 4764.,  6384.,  8220.,  10272., 4662.,
      6552.,  8694.,  11088., 4956.,  6576.,  8412.,  10464., 6114.,  7464.,
      8994.,  10704., 4725.,  6300.,  8085.,  10080., 8790.,  10680., 12822.,
      15216., 6519.,  8724.,  11223., 14016., 4662.,  6552.,  8694.,  11088.,
      4821.,  6396.,  8181.,  10176., 4440.,  6240.,  8280.,  10560., 6480.,
      8640.,  11088., 13824., 11592., 14112., 16968., 20160., 6480.,  8640.,
      11088., 13824., 4440.,  6240.,  8280.,  10560., 4821.,  6396.,  8181.,
      10176., 4662.,  6552.,  8694.,  11088., 6519.,  8724.,  11223., 14016.,
      8790.,  10680., 12822., 15216., 4725.,  6300.,  8085.,  10080., 6114.,
      7464.,  8994.,  10704., 4956.,  6576.,  8412.,  10464., 4662.,  6552.,
      8694.,  11088., 4764.,  6384.,  8220.,  10272., 6306.,  7656.,  9186.,
      10896.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36436., 38544., 40724., 42976., 28996., 30992., 33060., 35200., 26228.,
      28176., 30196., 32288., 28964., 30992., 33092., 35264., 33044., 35216.,
      37460., 39776., 33508., 35856., 38276., 40768., 29140., 31376., 33684.,
      36064., 24964., 27024., 29156., 31360., 25268., 27280., 29364., 31520.,
      26660., 28688., 30788., 32960., 35700., 38032., 40436., 42912., 36772.,
      39056., 41412., 43840., 36436., 38544., 40724., 42976., 28996., 30992.,
      33060., 35200., 26228., 28176., 30196., 32288., 37124., 39440., 41828.,
      44288., 37556., 39952., 42420., 44960., 33508., 35856., 38276., 40768.,
      29140., 31376., 33684., 36064., 24964., 27024., 29156., 31360., 30740.,
      32912., 35156., 37472., 34820., 37136., 39524., 41984., 35700., 38032.,
      40436., 42912., 36772., 39056., 41412., 43840., 36436., 38544., 40724.,
      42976.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3966.,  4596.,  5856.,  6576.,  8106.,  8916.,  10716., 11616., 2700.,
      3432.,  4920.,  5760.,  7572.,  8520.,  10656., 11712., 5298.,  6156.,
      7896.,  8880.,  10998., 12108., 14604., 15840., 2892.,  3624.,  5112.,
      5952.,  7764.,  8712.,  10848., 11904., 3774.,  4404.,  5664.,  6384.,
      7914.,  8724.,  10524., 11424., 2901.,  3642.,  5130.,  5976.,  7779.,
      8730.,  10848., 11904., 5514.,  6396.,  8160.,  9168.,  11310., 12444.,
      14964., 16224., 3915.,  4926.,  6978.,  8136.,  10629., 11934., 14868.,
      16320., 5298.,  6156.,  7896.,  8880.,  10998., 12108., 14604., 15840.,
      2877.,  3594.,  5058.,  5880.,  7659.,  8586.,  10680., 11712., 5160.,
      6000.,  7680.,  8640.,  10680., 11760., 14160., 15360., 3888.,  4896.,
      6912.,  8064.,  10512., 11808., 14688., 16128., 7224.,  8400.,  10752.,
      12096., 14952., 16464., 19824., 21504., 3888.,  4896.,  6912.,  8064.,
      10512., 11808., 14688., 16128., 5160.,  6000.,  7680.,  8640.,  10680.,
      11760., 14160., 15360., 2889.,  3642.,  5118.,  5976.,  7767.,  8730.,
      10836., 11904., 5538.,  6444.,  8232.,  9264.,  11430., 12588., 15132.,
      16416., 3927.,  4974.,  7038.,  8232.,  10737., 12078., 15024., 16512.,
      5514.,  6396.,  8160.,  9168.,  11310., 12444., 14964., 16224., 2673.,
      3402.,  4854.,  5688.,  7455.,  8394.,  10476., 11520., 3774.,  4404.,
      5664.,  6384.,  7914.,  8724.,  10524., 11424., 3132.,  3912.,  5448.,
      6336.,  8196.,  9192.,  11376., 12480., 5538.,  6444.,  8232.,  9264.,
      11430., 12588., 15132., 16416., 2940.,  3720.,  5256.,  6144.,  8004.,
      9000.,  11184., 12288., 3966.,  4596.,  5856.,  6576.,  8106.,  8916.,
      10716., 11616.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41100., 42152., 44256., 45344., 47556., 48680., 51000., 52160., 30428.,
      31368., 33360., 34336., 36436., 37448., 39656., 40704., 24940., 25832.,
      27776., 28704., 30756., 31720., 33880., 34880., 26236., 27208., 29232.,
      30240., 32372., 33416., 35656., 36736., 30156., 31272., 33440., 34592.,
      36868., 38056., 40440., 41664., 30908., 32200., 34544., 35872., 38324.,
      39688., 42248., 43648., 26380., 27560., 29792., 31008., 33348., 34600.,
      37048., 38336., 22300., 23304., 25360., 26400., 28564., 29640., 31912.,
      33024., 22956., 23912., 25920., 26912., 29028., 30056., 32280., 33344.,
      25724., 26696., 28720., 29728., 31860., 32904., 35144., 36224., 35308.,
      36584., 38912., 40224., 42660., 44008., 46552., 47936., 37500., 38728.,
      41008., 42272., 44660., 45960., 48456., 49792., 41100., 42152., 44256.,
      45344., 47556., 48680., 51000., 52160., 30428., 31368., 33360., 34336.,
      36436., 37448., 39656., 40704., 24940., 25832., 27776., 28704., 30756.,
      31720., 33880., 34880., 34076., 35336., 37648., 38944., 41364., 42696.,
      45224., 46592., 34860., 36200., 38592., 39968., 42468., 43880., 46488.,
      47936., 30908., 32200., 34544., 35872., 38324., 39688., 42248., 43648.,
      26380., 27560., 29792., 31008., 33348., 34600., 37048., 38336., 22300.,
      23304., 25360., 26400., 28564., 29640., 31912., 33024., 29644., 30760.,
      32928., 34080., 36356., 37544., 39928., 41152., 33564., 34824., 37136.,
      38432., 40852., 42184., 44712., 46080., 35308., 36584., 38912., 40224.,
      42660., 44008., 46552., 47936., 37500., 38728., 41008., 42272., 44660.,
      45960., 48456., 49792., 41100., 42152., 44256., 45344., 47556., 48680.,
      51000., 52160.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      630.,   1260.,  1890.,  2520.,  3600.,  4320.,  5040.,  5760.,  7290.,
      8100.,  8910.,  9720.,  11700., 12600., 13500., 14400., 732.,   1464.,
      2196.,  2928.,  4200.,  5040.,  5880.,  6720.,  8532.,  9480.,  10428.,
      11376., 13728., 14784., 15840., 16896., 858.,   1716.,  2574.,  3432.,
      4920.,  5904.,  6888.,  7872.,  9990.,  11100., 12210., 13320., 16068.,
      17304., 18540., 19776., 732.,   1464.,  2196.,  2928.,  4200.,  5040.,
      5880.,  6720.,  8532.,  9480.,  10428., 11376., 13728., 14784., 15840.,
      16896., 630.,   1260.,  1890.,  2520.,  3600.,  4320.,  5040.,  5760.,
      7290.,  8100.,  8910.,  9720.,  11700., 12600., 13500., 14400., 741.,
      1482.,  2223.,  2964.,  4230.,  5076.,  5922.,  6768.,  8559.,  9510.,
      10461., 11412., 13728., 14784., 15840., 16896., 882.,   1764.,  2646.,
      3528.,  5040.,  6048.,  7056.,  8064.,  10206., 11340., 12474., 13608.,
      16380., 17640., 18900., 20160., 1011.,  2022.,  3033.,  4044.,  5790.,
      6948.,  8106.,  9264.,  11745., 13050., 14355., 15660., 18876., 20328.,
      21780., 23232., 858.,   1716.,  2574.,  3432.,  4920.,  5904.,  6888.,
      7872.,  9990.,  11100., 12210., 13320., 16068., 17304., 18540., 19776.,
      717.,   1434.,  2151.,  2868.,  4110.,  4932.,  5754.,  6576.,  8343.,
      9270.,  10197., 11124., 13416., 14448., 15480., 16512., 840.,   1680.,
      2520.,  3360.,  4800.,  5760.,  6720.,  7680.,  9720.,  10800., 11880.,
      12960., 15600., 16800., 18000., 19200., 1008.,  2016.,  3024.,  4032.,
      5760.,  6912.,  8064.,  9216.,  11664., 12960., 14256., 15552., 18720.,
      20160., 21600., 23040., 1176.,  2352.,  3528.,  4704.,  6720.,  8064.,
      9408.,  10752., 13608., 15120., 16632., 18144., 21840., 23520., 25200.,
      26880., 1008.,  2016.,  3024.,  4032.,  5760.,  6912.,  8064.,  9216.,
      11664., 12960., 14256., 15552., 18720., 20160., 21600., 23040., 840.,
      1680.,  2520.,  3360.,  4800.,  5760.,  6720.,  7680.,  9720.,  10800.,
      11880., 12960., 15600., 16800., 18000., 19200., 753.,   1506.,  2259.,
      3012.,  4290.,  5148.,  6006.,  6864.,  8667.,  9630.,  10593., 11556.,
      13884., 14952., 16020., 17088., 906.,   1812.,  2718.,  3624.,  5160.,
      6192.,  7224.,  8256.,  10422., 11580., 12738., 13896., 16692., 17976.,
      19260., 20544., 1047.,  2094.,  3141.,  4188.,  5970.,  7164.,  8358.,
      9552.,  12069., 13410., 14751., 16092., 19344., 20832., 22320., 23808.,
      882.,   1764.,  2646.,  3528.,  5040.,  6048.,  7056.,  8064.,  10206.,
      11340., 12474., 13608., 16380., 17640., 18900., 20160., 729.,   1458.,
      2187.,  2916.,  4170.,  5004.,  5838.,  6672.,  8451.,  9390.,  10329.,
      11268., 13572., 14616., 15660., 16704., 630.,   1260.,  1890.,  2520.,
      3600.,  4320.,  5040.,  5760.,  7290.,  8100.,  8910.,  9720.,  11700.,
      12600., 13500., 14400., 780.,   1560.,  2340.,  3120.,  4440.,  5328.,
      6216.,  7104.,  8964.,  9960.,  10956., 11952., 14352., 15456., 16560.,
      17664., 906.,   1812.,  2718.,  3624.,  5160.,  6192.,  7224.,  8256.,
      10422., 11580., 12738., 13896., 16692., 17976., 19260., 20544., 780.,
      1560.,  2340.,  3120.,  4440.,  5328.,  6216.,  7104.,  8964.,  9960.,
      10956., 11952., 14352., 15456., 16560., 17664., 630.,   1260.,  1890.,
      2520.,  3600.,  4320.,  5040.,  5760.,  7290.,  8100.,  8910.,  9720.,
      11700., 12600., 13500., 14400.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      33020., 34072., 35124., 36176., 38272., 39360., 40448., 41536., 43812.,
      44936., 46060., 47184., 49640., 50800., 51960., 53120., 24076., 25016.,
      25956., 26896., 28880., 29856., 30832., 31808., 33972., 34984., 35996.,
      37008., 39352., 40400., 41448., 42496., 21340., 22232., 23124., 24016.,
      25952., 26880., 27808., 28736., 30852., 31816., 32780., 33744., 36040.,
      37040., 38040., 39040., 23852., 24824., 25796., 26768., 28784., 29792.,
      30800., 31808., 34004., 35048., 36092., 37136., 39512., 40592., 41672.,
      42752., 27452., 28568., 29684., 30800., 32960., 34112., 35264., 36416.,
      38756., 39944., 41132., 42320., 44840., 46064., 47288., 48512., 32876.,
      34168., 35460., 36752., 39088., 40416., 41744., 43072., 45588., 46952.,
      48316., 49680., 52376., 53776., 55176., 56576., 36220., 37400., 38580.,
      39760., 41984., 43200., 44416., 45632., 48036., 49288., 50540., 51792.,
      54376., 55664., 56952., 58240., 24140., 25144., 26148., 27152., 29200.,
      30240., 31280., 32320., 34548., 35624., 36700., 37776., 40184., 41296.,
      42408., 43520., 21404., 22360., 23316., 24272., 26272., 27264., 28256.,
      29248., 31428., 32456., 33484., 34512., 36872., 37936., 39000., 40064.,
      22828., 23800., 24772., 25744., 27760., 28768., 29776., 30784., 32980.,
      34024., 35068., 36112., 38488., 39568., 40648., 41728., 29404., 30680.,
      31956., 33232., 35552., 36864., 38176., 39488., 41988., 43336., 44684.,
      46032., 48712., 50096., 51480., 52864., 29740., 30968., 32196., 33424.,
      35696., 36960., 38224., 39488., 41940., 43240., 44540., 45840., 48472.,
      49808., 51144., 52480., 33020., 34072., 35124., 36176., 38272., 39360.,
      40448., 41536., 43812., 44936., 46060., 47184., 49640., 50800., 51960.,
      53120., 24076., 25016., 25956., 26896., 28880., 29856., 30832., 31808.,
      33972., 34984., 35996., 37008., 39352., 40400., 41448., 42496., 21340.,
      22232., 23124., 24016., 25952., 26880., 27808., 28736., 30852., 31816.,
      32780., 33744., 36040., 37040., 38040., 39040., 31052., 32312., 33572.,
      34832., 37136., 38432., 39728., 41024., 43508., 44840., 46172., 47504.,
      50168., 51536., 52904., 54272., 32540., 33880., 35220., 36560., 38944.,
      40320., 41696., 43072., 45636., 47048., 48460., 49872., 52616., 54064.,
      55512., 56960., 32876., 34168., 35460., 36752., 39088., 40416., 41744.,
      43072., 45588., 46952., 48316., 49680., 52376., 53776., 55176., 56576.,
      36220., 37400., 38580., 39760., 41984., 43200., 44416., 45632., 48036.,
      49288., 50540., 51792., 54376., 55664., 56952., 58240., 24140., 25144.,
      26148., 27152., 29200., 30240., 31280., 32320., 34548., 35624., 36700.,
      37776., 40184., 41296., 42408., 43520., 26428., 27544., 28660., 29776.,
      31936., 33088., 34240., 35392., 37732., 38920., 40108., 41296., 43816.,
      45040., 46264., 47488., 30028., 31288., 32548., 33808., 36112., 37408.,
      38704., 40000., 42484., 43816., 45148., 46480., 49144., 50512., 51880.,
      53248., 29404., 30680., 31956., 33232., 35552., 36864., 38176., 39488.,
      41988., 43336., 44684., 46032., 48712., 50096., 51480., 52864., 29740.,
      30968., 32196., 33424., 35696., 36960., 38224., 39488., 41940., 43240.,
      44540., 45840., 48472., 49808., 51144., 52480., 33020., 34072., 35124.,
      36176., 38272., 39360., 40448., 41536., 43812., 44936., 46060., 47184.,
      49640., 50800., 51960., 53120.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9738., 11592., 13464., 11592., 9738.,  7185.,  8736., 10332., 8904.,
      7473., 12984., 15456., 17952., 15456., 12984., 7473., 8904.,  10332.,
      8736., 7185.,  9738.,  11592., 13464., 11592., 9738.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19032., 20208., 21384., 22560., 23736., 28440., 29616., 30792., 31968.,
      33144., 37848., 39024., 40200., 41376., 42552., 47256., 48432., 49608.,
      50784., 51960., 56664., 57840., 59016., 60192., 61368.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29034., 30420., 33600., 35280., 37992., 39984., 32130., 33936., 26514.,
      28116., 31353., 33090., 36204., 38304., 40836., 43320., 34377., 36624.,
      28221., 30210., 45624., 47856., 52416., 55104., 58848., 62016., 49560.,
      52416., 40728., 43248., 34665., 36834., 39396., 42000., 43716., 46776.,
      36225., 38976., 29229., 31650., 39402., 41364., 45024., 47376., 50280.,
      53040., 42210., 44688., 34578., 36756.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15096., 15792., 15864., 16608., 16632., 17424., 17400., 18240., 18168.,
      19056., 10488., 11184., 11256., 12000., 12024., 12816., 12792., 13632.,
      13560., 14448., 8952.,  9648.,  9720.,  10464., 10488., 11280., 11256.,
      12096., 12024., 12912., 10488., 11184., 11256., 12000., 12024., 12816.,
      12792., 13632., 13560., 14448., 15096., 15792., 15864., 16608., 16632.,
      17424., 17400., 18240., 18168., 19056.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27594., 28980., 30366., 31752., 30576., 32256., 33936., 35616., 32904.,
      34896., 36888., 38880., 25494., 27300., 29106., 30912., 18882., 20484.,
      22086., 23688., 34473., 36210., 37947., 39684., 38052., 40152., 42252.,
      44352., 40788., 43272., 45756., 48240., 31563., 33810., 36057., 38304.,
      23349., 25338., 27327., 29316., 44088., 46320., 48552., 50784., 48384.,
      51072., 53760., 56448., 51552., 54720., 57888., 61056., 39816., 42672.,
      45528., 48384., 29400., 31920., 34440., 36960., 42681., 44850., 47019.,
      49188., 46620., 49224., 51828., 54432., 49428., 52488., 55548., 58608.,
      38115., 40866., 43617., 46368., 28101., 30522., 32943., 35364., 38538.,
      40500., 42462., 44424., 42000., 44352., 46704., 49056., 44424., 47184.,
      49944., 52704., 34230., 36708., 39186., 41664., 25218., 27396., 29574.,
      31752.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12216., 12912., 13608., 14304., 12936., 13680., 14424., 15168., 13656.,
      14448., 15240., 16032., 14376., 15216., 16056., 16896., 15096., 15984.,
      16872., 17760., 9144.,  9840.,  10536., 11232., 9864.,  10608., 11352.,
      12096., 10584., 11376., 12168., 12960., 11304., 12144., 12984., 13824.,
      12024., 12912., 13800., 14688., 12216., 12912., 13608., 14304., 12936.,
      13680., 14424., 15168., 13656., 14448., 15240., 16032., 14376., 15216.,
      16056., 16896., 15096., 15984., 16872., 17760., 9144.,  9840.,  10536.,
      11232., 9864.,  10608., 11352., 12096., 10584., 11376., 12168., 12960.,
      11304., 12144., 12984., 13824., 12024., 12912., 13800., 14688., 12216.,
      12912., 13608., 14304., 12936., 13680., 14424., 15168., 13656., 14448.,
      15240., 16032., 14376., 15216., 16056., 16896., 15096., 15984., 16872.,
      17760.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7740.,  9576.,  9954.,  12096., 12240., 14688., 9954.,  12096., 7740.,
      9576.,  9030.,  11172., 11613., 14112., 14280., 17136., 11613., 14112.,
      9030.,  11172., 10320., 12768., 13272., 16128., 16320., 19584., 13272.,
      16128., 10320., 12768., 9030.,  11172., 11613., 14112., 14280., 17136.,
      11613., 14112., 9030.,  11172., 7740.,  9576.,  9954.,  12096., 12240.,
      14688., 9954.,  12096., 7740.,  9576.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      43760., 46432., 46320., 49088., 48880., 51744., 51440., 54400., 54000.,
      57056., 34544., 37216., 37104., 39872., 39664., 42528., 42224., 45184.,
      44784., 47840., 31472., 34144., 34032., 36800., 36592., 39456., 39152.,
      42112., 41712., 44768., 34544., 37216., 37104., 39872., 39664., 42528.,
      42224., 45184., 44784., 47840., 43760., 46432., 46320., 49088., 48880.,
      51744., 51440., 54400., 54000., 57056.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5616.,  6264.,  8028.,  8784.,  7506.,  8388.,  10512., 11520., 9504.,
      10656., 13104., 14400., 7542.,  8676.,  10836., 12096., 6336.,  7416.,
      9324.,  10512., 6552.,  7308.,  9366.,  10248., 8757.,  9786.,  12264.,
      13440., 11088., 12432., 15288., 16800., 8799.,  10122., 12642., 14112.,
      7392.,  8652.,  10878., 12264., 7488.,  8352.,  10704., 11712., 10008.,
      11184., 14016., 15360., 12672., 14208., 17472., 19200., 10056., 11568.,
      14448., 16128., 8448.,  9888.,  12432., 14016., 6552.,  7308.,  9366.,
      10248., 8757.,  9786.,  12264., 13440., 11088., 12432., 15288., 16800.,
      8799.,  10122., 12642., 14112., 7392.,  8652.,  10878., 12264., 5616.,
      6264.,  8028.,  8784.,  7506.,  8388.,  10512., 11520., 9504.,  10656.,
      13104., 14400., 7542.,  8676.,  10836., 12096., 6336.,  7416.,  9324.,
      10512.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12192., 12768., 14160., 14784., 13632., 14304., 15792., 16512., 15072.,
      15840., 17424., 18240., 16512., 17376., 19056., 19968., 17952., 18912.,
      20688., 21696., 6048.,  6624.,  8016.,  8640.,  7488.,  8160.,  9648.,
      10368., 8928.,  9696.,  11280., 12096., 10368., 11232., 12912., 13824.,
      11808., 12768., 14544., 15552., 12192., 12768., 14160., 14784., 13632.,
      14304., 15792., 16512., 15072., 15840., 17424., 18240., 16512., 17376.,
      19056., 19968., 17952., 18912., 20688., 21696., 6048.,  6624.,  8016.,
      8640.,  7488.,  8160.,  9648.,  10368., 8928.,  9696.,  11280., 12096.,
      10368., 11232., 12912., 13824., 11808., 12768., 14544., 15552., 12192.,
      12768., 14160., 14784., 13632., 14304., 15792., 16512., 15072., 15840.,
      17424., 18240., 16512., 17376., 19056., 19968., 17952., 18912., 20688.,
      21696.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3672.,  4320.,  4968.,  5616.,  7236.,  7992.,  8748.,  9504.,  4914.,
      5796.,  6678.,  7560.,  9648.,  10656., 11664., 12672., 6336.,  7488.,
      8640.,  9792.,  12240., 13536., 14832., 16128., 5022.,  6156.,  7290.,
      8424.,  10620., 11880., 13140., 14400., 5832.,  6912.,  7992.,  9072.,
      11124., 12312., 13500., 14688., 4284.,  5040.,  5796.,  6552.,  8442.,
      9324.,  10206., 11088., 5733.,  6762.,  7791.,  8820.,  11256., 12432.,
      13608., 14784., 7392.,  8736.,  10080., 11424., 14280., 15792., 17304.,
      18816., 5859.,  7182.,  8505.,  9828.,  12390., 13860., 15330., 16800.,
      6804.,  8064.,  9324.,  10584., 12978., 14364., 15750., 17136., 4896.,
      5760.,  6624.,  7488.,  9648.,  10656., 11664., 12672., 6552.,  7728.,
      8904.,  10080., 12864., 14208., 15552., 16896., 8448.,  9984.,  11520.,
      13056., 16320., 18048., 19776., 21504., 6696.,  8208.,  9720.,  11232.,
      14160., 15840., 17520., 19200., 7776.,  9216.,  10656., 12096., 14832.,
      16416., 18000., 19584., 4284.,  5040.,  5796.,  6552.,  8442.,  9324.,
      10206., 11088., 5733.,  6762.,  7791.,  8820.,  11256., 12432., 13608.,
      14784., 7392.,  8736.,  10080., 11424., 14280., 15792., 17304., 18816.,
      5859.,  7182.,  8505.,  9828.,  12390., 13860., 15330., 16800., 6804.,
      8064.,  9324.,  10584., 12978., 14364., 15750., 17136., 3672.,  4320.,
      4968.,  5616.,  7236.,  7992.,  8748.,  9504.,  4914.,  5796.,  6678.,
      7560.,  9648.,  10656., 11664., 12672., 6336.,  7488.,  8640.,  9792.,
      12240., 13536., 14832., 16128., 5022.,  6156.,  7290.,  8424.,  10620.,
      11880., 13140., 14400., 5832.,  6912.,  7992.,  9072.,  11124., 12312.,
      13500., 14688.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8448.,  9024.,  9600.,  10176., 11568., 12192., 12816., 13440., 9696.,
      10368., 11040., 11712., 13200., 13920., 14640., 15360., 10944., 11712.,
      12480., 13248., 14832., 15648., 16464., 17280., 12192., 13056., 13920.,
      14784., 16464., 17376., 18288., 19200., 13440., 14400., 15360., 16320.,
      18096., 19104., 20112., 21120., 8448.,  9024.,  9600.,  10176., 11568.,
      12192., 12816., 13440., 9696.,  10368., 11040., 11712., 13200., 13920.,
      14640., 15360., 10944., 11712., 12480., 13248., 14832., 15648., 16464.,
      17280., 12192., 13056., 13920., 14784., 16464., 17376., 18288., 19200.,
      13440., 14400., 15360., 16320., 18096., 19104., 20112., 21120., 8448.,
      9024.,  9600.,  10176., 11568., 12192., 12816., 13440., 9696.,  10368.,
      11040., 11712., 13200., 13920., 14640., 15360., 10944., 11712., 12480.,
      13248., 14832., 15648., 16464., 17280., 12192., 13056., 13920., 14784.,
      16464., 17376., 18288., 19200., 13440., 14400., 15360., 16320., 18096.,
      19104., 20112., 21120., 8448.,  9024.,  9600.,  10176., 11568., 12192.,
      12816., 13440., 9696.,  10368., 11040., 11712., 13200., 13920., 14640.,
      15360., 10944., 11712., 12480., 13248., 14832., 15648., 16464., 17280.,
      12192., 13056., 13920., 14784., 16464., 17376., 18288., 19200., 13440.,
      14400., 15360., 16320., 18096., 19104., 20112., 21120., 8448.,  9024.,
      9600.,  10176., 11568., 12192., 12816., 13440., 9696.,  10368., 11040.,
      11712., 13200., 13920., 14640., 15360., 10944., 11712., 12480., 13248.,
      14832., 15648., 16464., 17280., 12192., 13056., 13920., 14784., 16464.,
      17376., 18288., 19200., 13440., 14400., 15360., 16320., 18096., 19104.,
      20112., 21120.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3996.,  5616.,  7452.,  9504.,  6246.,  8136.,  10278., 12672., 9936.,
      12096., 14544., 17280., 6246.,  8136.,  10278., 12672., 3996.,  5616.,
      7452.,  9504.,  4662.,  6552.,  8694.,  11088., 7287.,  9492.,  11991.,
      14784., 11592., 14112., 16968., 20160., 7287.,  9492.,  11991., 14784.,
      4662.,  6552.,  8694.,  11088., 5328.,  7488.,  9936.,  12672., 8328.,
      10848., 13704., 16896., 13248., 16128., 19392., 23040., 8328.,  10848.,
      13704., 16896., 5328.,  7488.,  9936.,  12672., 4662.,  6552.,  8694.,
      11088., 7287.,  9492.,  11991., 14784., 11592., 14112., 16968., 20160.,
      7287.,  9492.,  11991., 14784., 4662.,  6552.,  8694.,  11088., 3996.,
      5616.,  7452.,  9504.,  6246.,  8136.,  10278., 12672., 9936.,  12096.,
      14544., 17280., 6246.,  8136.,  10278., 12672., 3996.,  5616.,  7452.,
      9504.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6000.,  7104.,  8304.,  9600.,  8880.,  10176., 11568., 13056., 11760.,
      13248., 14832., 16512., 14640., 16320., 18096., 19968., 17520., 19392.,
      21360., 23424., 6000.,  7104.,  8304.,  9600.,  8880.,  10176., 11568.,
      13056., 11760., 13248., 14832., 16512., 14640., 16320., 18096., 19968.,
      17520., 19392., 21360., 23424., 6000.,  7104.,  8304.,  9600.,  8880.,
      10176., 11568., 13056., 11760., 13248., 14832., 16512., 14640., 16320.,
      18096., 19968., 17520., 19392., 21360., 23424., 6000.,  7104.,  8304.,
      9600.,  8880.,  10176., 11568., 13056., 11760., 13248., 14832., 16512.,
      14640., 16320., 18096., 19968., 17520., 19392., 21360., 23424., 6000.,
      7104.,  8304.,  9600.,  8880.,  10176., 11568., 13056., 11760., 13248.,
      14832., 16512., 14640., 16320., 18096., 19968., 17520., 19392., 21360.,
      23424.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3924.,  4536.,  5904.,  6624.,  8316.,  9144.,  11160., 12096., 3654.,
      4428.,  6156.,  7056.,  9162.,  10188., 12672., 13824., 6192.,  7200.,
      9216.,  10368., 12816., 14112., 16992., 18432., 3726.,  4716.,  6516.,
      7632.,  9810.,  11052., 13608., 14976., 5364.,  6264.,  7920.,  8928.,
      10908., 12024., 14328., 15552., 4578.,  5292.,  6888.,  7728.,  9702.,
      10668., 13020., 14112., 4263.,  5166.,  7182.,  8232.,  10689., 11886.,
      14784., 16128., 7224.,  8400.,  10752., 12096., 14952., 16464., 19824.,
      21504., 4347.,  5502.,  7602.,  8904.,  11445., 12894., 15876., 17472.,
      6258.,  7308.,  9240.,  10416., 12726., 14028., 16716., 18144., 5232.,
      6048.,  7872.,  8832.,  11088., 12192., 14880., 16128., 4872.,  5904.,
      8208.,  9408.,  12216., 13584., 16896., 18432., 8256.,  9600.,  12288.,
      13824., 17088., 18816., 22656., 24576., 4968.,  6288.,  8688.,  10176.,
      13080., 14736., 18144., 19968., 7152.,  8352.,  10560., 11904., 14544.,
      16032., 19104., 20736., 4578.,  5292.,  6888.,  7728.,  9702.,  10668.,
      13020., 14112., 4263.,  5166.,  7182.,  8232.,  10689., 11886., 14784.,
      16128., 7224.,  8400.,  10752., 12096., 14952., 16464., 19824., 21504.,
      4347.,  5502.,  7602.,  8904.,  11445., 12894., 15876., 17472., 6258.,
      7308.,  9240.,  10416., 12726., 14028., 16716., 18144., 3924.,  4536.,
      5904.,  6624.,  8316.,  9144.,  11160., 12096., 3654.,  4428.,  6156.,
      7056.,  9162.,  10188., 12672., 13824., 6192.,  7200.,  9216.,  10368.,
      12816., 14112., 16992., 18432., 3726.,  4716.,  6516.,  7632.,  9810.,
      11052., 13608., 14976., 5364.,  6264.,  7920.,  8928.,  10908., 12024.,
      14328., 15552.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6288.,  6624.,  7680.,  8064.,  9264.,  9696.,  11040., 11520., 8784.,
      9312.,  10560., 11136., 12528., 13152., 14688., 15360., 11280., 12000.,
      13440., 14208., 15792., 16608., 18336., 19200., 13776., 14688., 16320.,
      17280., 19056., 20064., 21984., 23040., 16272., 17376., 19200., 20352.,
      22320., 23520., 25632., 26880., 6288.,  6624.,  7680.,  8064.,  9264.,
      9696.,  11040., 11520., 8784.,  9312.,  10560., 11136., 12528., 13152.,
      14688., 15360., 11280., 12000., 13440., 14208., 15792., 16608., 18336.,
      19200., 13776., 14688., 16320., 17280., 19056., 20064., 21984., 23040.,
      16272., 17376., 19200., 20352., 22320., 23520., 25632., 26880., 6288.,
      6624.,  7680.,  8064.,  9264.,  9696.,  11040., 11520., 8784.,  9312.,
      10560., 11136., 12528., 13152., 14688., 15360., 11280., 12000., 13440.,
      14208., 15792., 16608., 18336., 19200., 13776., 14688., 16320., 17280.,
      19056., 20064., 21984., 23040., 16272., 17376., 19200., 20352., 22320.,
      23520., 25632., 26880., 6288.,  6624.,  7680.,  8064.,  9264.,  9696.,
      11040., 11520., 8784.,  9312.,  10560., 11136., 12528., 13152., 14688.,
      15360., 11280., 12000., 13440., 14208., 15792., 16608., 18336., 19200.,
      13776., 14688., 16320., 17280., 19056., 20064., 21984., 23040., 16272.,
      17376., 19200., 20352., 22320., 23520., 25632., 26880., 6288.,  6624.,
      7680.,  8064.,  9264.,  9696.,  11040., 11520., 8784.,  9312.,  10560.,
      11136., 12528., 13152., 14688., 15360., 11280., 12000., 13440., 14208.,
      15792., 16608., 18336., 19200., 13776., 14688., 16320., 17280., 19056.,
      20064., 21984., 23040., 16272., 17376., 19200., 20352., 22320., 23520.,
      25632., 26880.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, SAME3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      612.,   1224.,  1836.,  2448.,  3600.,  4320.,  5040.,  5760.,  7452.,
      8280.,  9108.,  9936.,  12168., 13104., 14040., 14976., 774.,   1548.,
      2322.,  3096.,  4500.,  5400.,  6300.,  7200.,  9234.,  10260., 11286.,
      12312., 14976., 16128., 17280., 18432., 1008.,  2016.,  3024.,  4032.,
      5760.,  6912.,  8064.,  9216.,  11664., 12960., 14256., 15552., 18720.,
      20160., 21600., 23040., 990.,   1980.,  2970.,  3960.,  5580.,  6696.,
      7812.,  8928.,  11178., 12420., 13662., 14904., 17784., 19152., 20520.,
      21888., 900.,   1800.,  2700.,  3600.,  5040.,  6048.,  7056.,  8064.,
      10044., 11160., 12276., 13392., 15912., 17136., 18360., 19584., 714.,
      1428.,  2142.,  2856.,  4200.,  5040.,  5880.,  6720.,  8694.,  9660.,
      10626., 11592., 14196., 15288., 16380., 17472., 903.,   1806.,  2709.,
      3612.,  5250.,  6300.,  7350.,  8400.,  10773., 11970., 13167., 14364.,
      17472., 18816., 20160., 21504., 1176.,  2352.,  3528.,  4704.,  6720.,
      8064.,  9408.,  10752., 13608., 15120., 16632., 18144., 21840., 23520.,
      25200., 26880., 1155.,  2310.,  3465.,  4620.,  6510.,  7812.,  9114.,
      10416., 13041., 14490., 15939., 17388., 20748., 22344., 23940., 25536.,
      1050.,  2100.,  3150.,  4200.,  5880.,  7056.,  8232.,  9408.,  11718.,
      13020., 14322., 15624., 18564., 19992., 21420., 22848., 816.,   1632.,
      2448.,  3264.,  4800.,  5760.,  6720.,  7680.,  9936.,  11040., 12144.,
      13248., 16224., 17472., 18720., 19968., 1032.,  2064.,  3096.,  4128.,
      6000.,  7200.,  8400.,  9600.,  12312., 13680., 15048., 16416., 19968.,
      21504., 23040., 24576., 1344.,  2688.,  4032.,  5376.,  7680.,  9216.,
      10752., 12288., 15552., 17280., 19008., 20736., 24960., 26880., 28800.,
      30720., 1320.,  2640.,  3960.,  5280.,  7440.,  8928.,  10416., 11904.,
      14904., 16560., 18216., 19872., 23712., 25536., 27360., 29184., 1200.,
      2400.,  3600.,  4800.,  6720.,  8064.,  9408.,  10752., 13392., 14880.,
      16368., 17856., 21216., 22848., 24480., 26112., 714.,   1428.,  2142.,
      2856.,  4200.,  5040.,  5880.,  6720.,  8694.,  9660.,  10626., 11592.,
      14196., 15288., 16380., 17472., 903.,   1806.,  2709.,  3612.,  5250.,
      6300.,  7350.,  8400.,  10773., 11970., 13167., 14364., 17472., 18816.,
      20160., 21504., 1176.,  2352.,  3528.,  4704.,  6720.,  8064.,  9408.,
      10752., 13608., 15120., 16632., 18144., 21840., 23520., 25200., 26880.,
      1155.,  2310.,  3465.,  4620.,  6510.,  7812.,  9114.,  10416., 13041.,
      14490., 15939., 17388., 20748., 22344., 23940., 25536., 1050.,  2100.,
      3150.,  4200.,  5880.,  7056.,  8232.,  9408.,  11718., 13020., 14322.,
      15624., 18564., 19992., 21420., 22848., 612.,   1224.,  1836.,  2448.,
      3600.,  4320.,  5040.,  5760.,  7452.,  8280.,  9108.,  9936.,  12168.,
      13104., 14040., 14976., 774.,   1548.,  2322.,  3096.,  4500.,  5400.,
      6300.,  7200.,  9234.,  10260., 11286., 12312., 14976., 16128., 17280.,
      18432., 1008.,  2016.,  3024.,  4032.,  5760.,  6912.,  8064.,  9216.,
      11664., 12960., 14256., 15552., 18720., 20160., 21600., 23040., 990.,
      1980.,  2970.,  3960.,  5580.,  6696.,  7812.,  8928.,  11178., 12420.,
      13662., 14904., 17784., 19152., 20520., 21888., 900.,   1800.,  2700.,
      3600.,  5040.,  6048.,  7056.,  8064.,  10044., 11160., 12276., 13392.,
      15912., 17136., 18360., 19584.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride1, VALID3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3792.,  4128.,  4464.,  4800.,  5760.,  6144.,  6528.,  6912.,  8112.,
      8544.,  8976.,  9408.,  10848., 11328., 11808., 12288., 5520.,  6048.,
      6576.,  7104.,  8256.,  8832.,  9408.,  9984.,  11376., 12000., 12624.,
      13248., 14880., 15552., 16224., 16896., 7248.,  7968.,  8688.,  9408.,
      10752., 11520., 12288., 13056., 14640., 15456., 16272., 17088., 18912.,
      19776., 20640., 21504., 8976.,  9888.,  10800., 11712., 13248., 14208.,
      15168., 16128., 17904., 18912., 19920., 20928., 22944., 24000., 25056.,
      26112., 10704., 11808., 12912., 14016., 15744., 16896., 18048., 19200.,
      21168., 22368., 23568., 24768., 26976., 28224., 29472., 30720., 3792.,
      4128.,  4464.,  4800.,  5760.,  6144.,  6528.,  6912.,  8112.,  8544.,
      8976.,  9408.,  10848., 11328., 11808., 12288., 5520.,  6048.,  6576.,
      7104.,  8256.,  8832.,  9408.,  9984.,  11376., 12000., 12624., 13248.,
      14880., 15552., 16224., 16896., 7248.,  7968.,  8688.,  9408.,  10752.,
      11520., 12288., 13056., 14640., 15456., 16272., 17088., 18912., 19776.,
      20640., 21504., 8976.,  9888.,  10800., 11712., 13248., 14208., 15168.,
      16128., 17904., 18912., 19920., 20928., 22944., 24000., 25056., 26112.,
      10704., 11808., 12912., 14016., 15744., 16896., 18048., 19200., 21168.,
      22368., 23568., 24768., 26976., 28224., 29472., 30720., 3792.,  4128.,
      4464.,  4800.,  5760.,  6144.,  6528.,  6912.,  8112.,  8544.,  8976.,
      9408.,  10848., 11328., 11808., 12288., 5520.,  6048.,  6576.,  7104.,
      8256.,  8832.,  9408.,  9984.,  11376., 12000., 12624., 13248., 14880.,
      15552., 16224., 16896., 7248.,  7968.,  8688.,  9408.,  10752., 11520.,
      12288., 13056., 14640., 15456., 16272., 17088., 18912., 19776., 20640.,
      21504., 8976.,  9888.,  10800., 11712., 13248., 14208., 15168., 16128.,
      17904., 18912., 19920., 20928., 22944., 24000., 25056., 26112., 10704.,
      11808., 12912., 14016., 15744., 16896., 18048., 19200., 21168., 22368.,
      23568., 24768., 26976., 28224., 29472., 30720., 3792.,  4128.,  4464.,
      4800.,  5760.,  6144.,  6528.,  6912.,  8112.,  8544.,  8976.,  9408.,
      10848., 11328., 11808., 12288., 5520.,  6048.,  6576.,  7104.,  8256.,
      8832.,  9408.,  9984.,  11376., 12000., 12624., 13248., 14880., 15552.,
      16224., 16896., 7248.,  7968.,  8688.,  9408.,  10752., 11520., 12288.,
      13056., 14640., 15456., 16272., 17088., 18912., 19776., 20640., 21504.,
      8976.,  9888.,  10800., 11712., 13248., 14208., 15168., 16128., 17904.,
      18912., 19920., 20928., 22944., 24000., 25056., 26112., 10704., 11808.,
      12912., 14016., 15744., 16896., 18048., 19200., 21168., 22368., 23568.,
      24768., 26976., 28224., 29472., 30720., 3792.,  4128.,  4464.,  4800.,
      5760.,  6144.,  6528.,  6912.,  8112.,  8544.,  8976.,  9408.,  10848.,
      11328., 11808., 12288., 5520.,  6048.,  6576.,  7104.,  8256.,  8832.,
      9408.,  9984.,  11376., 12000., 12624., 13248., 14880., 15552., 16224.,
      16896., 7248.,  7968.,  8688.,  9408.,  10752., 11520., 12288., 13056.,
      14640., 15456., 16272., 17088., 18912., 19776., 20640., 21504., 8976.,
      9888.,  10800., 11712., 13248., 14208., 15168., 16128., 17904., 18912.,
      19920., 20928., 22944., 24000., 25056., 26112., 10704., 11808., 12912.,
      14016., 15744., 16896., 18048., 19200., 21168., 22368., 23568., 24768.,
      26976., 28224., 29472., 30720.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding,
                                 max_input_val);
}