/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_depthwise_conv2d_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/depthwise_conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::DefaultBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;
using GTestTypePairs = sycldnn::types::ToGTestTypes<SNNTypePairs>::type;

template <typename Pair>
using ForwardWindow5Stride2 =
    sycldnn::depthwise_conv2d::WindowStrideTest<Pair, 5, 2>;
TYPED_TEST_SUITE(ForwardWindow5Stride2, GTestTypePairs);
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1755., 3080.,  3620.,  2205., 4420., 7325., 7975., 4660.,
      7360., 11875., 12525., 7180., 3213., 4940., 5180., 2799.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {7325., 7975., 11875., 12525.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3429.,  3510.,  6010.,  6160.,  7060.,  7240.,  4293.,  4410.,
      8600.,  8840.,  14225., 14650., 15475., 15950., 9020.,  9320.,
      14270., 14720., 22975., 23750., 24225., 25050., 13850., 14360.,
      6093.,  6426.,  9310.,  9880.,  9760.,  10360., 5229.,  5598.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14225., 14650., 15475., 15950.,
                                         22975., 23750., 24225., 25050.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6777.,  6858.,  6939.,  7020.,  11870., 12020., 12170., 12320.,
      13940., 14120., 14300., 14480., 8469.,  8586.,  8703.,  8820.,
      16960., 17200., 17440., 17680., 28025., 28450., 28875., 29300.,
      30475., 30950., 31425., 31900., 17740., 18040., 18340., 18640.,
      28090., 28540., 28990., 29440., 45175., 45950., 46725., 47500.,
      47625., 48450., 49275., 50100., 27190., 27700., 28210., 28720.,
      11853., 12186., 12519., 12852., 18050., 18620., 19190., 19760.,
      18920., 19520., 20120., 20720., 10089., 10458., 10827., 11196.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28025., 28450., 28875., 29300., 30475., 30950., 31425., 31900.,
      45175., 45950., 46725., 47500., 47625., 48450., 49275., 50100.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6525.,  7020.,  11495., 12320., 13595., 14480., 8289.,  8820.,
      16795., 17680., 27825., 29300., 30325., 31900., 17695., 18640.,
      28135., 29440., 45325., 47500., 47825., 50100., 27355., 28720.,
      12033., 12852., 18395., 19760., 19295., 20720., 10341., 11196.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {27825., 29300., 30325., 31900.,
                                         45325., 47500., 47825., 50100.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3681.,  3834.,  4278.,  4440.,  7025.,  7310.,  8084.,  8384.,
      8861.,  9206.,  10040., 10400., 5537.,  5762.,  6270.,  6504.,
      13157., 13622., 14528., 15008., 20905., 21666., 23126., 23912.,
      20045., 20778., 22210., 22968., 10997., 11390., 12168., 12576.,
      17369., 17870., 18812., 19328., 23845., 24666., 26186., 27032.,
      19913., 20706., 22198., 23016., 8009.,  8438.,  9252.,  9696.,
      6897.,  7170.,  7758.,  8040.,  9617.,  10038., 10924., 11360.,
      9949.,  10302., 11120., 11488., 5553.,  5706.,  6102.,  6264.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20905., 21666., 23126., 23912., 20045., 20778., 22210., 22968.,
      23845., 24666., 26186., 27032., 19913., 20706., 22198., 23016.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4521.,  4674.,  4827.,  4980.,  5450.,  5612.,  5774.,  5936.,  8837.,
      9122.,  9407.,  9692.,  10492., 10792., 11092., 11392., 10657., 11002.,
      11347., 11692., 12552., 12912., 13272., 13632., 7265.,  7490.,  7715.,
      7940.,  8466.,  8700.,  8934.,  9168.,  13689., 14154., 14619., 15084.,
      16032., 16512., 16992., 17472., 24857., 25618., 26379., 27140., 28698.,
      29484., 30270., 31056., 20861., 21594., 22327., 23060., 24590., 25348.,
      26106., 26864., 10849., 11242., 11635., 12028., 12920., 13328., 13736.,
      14144., 15421., 15922., 16423., 16924., 17908., 18424., 18940., 19456.,
      22741., 23562., 24383., 25204., 26822., 27668., 28514., 29360., 20793.,
      21586., 22379., 23172., 24762., 25580., 26398., 27216., 14053., 14482.,
      14911., 15340., 16268., 16712., 17156., 17600., 7825.,  8098.,  8371.,
      8644.,  9218.,  9500.,  9782.,  10064., 9021.,  9442.,  9863.,  10284.,
      11172., 11608., 12044., 12480., 7961.,  8314.,  8667.,  9020.,  9840.,
      10208., 10576., 10944., 5001.,  5154.,  5307.,  5460.,  5898.,  6060.,
      6222.,  6384.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056.,
      20861., 21594., 22327., 23060., 24590., 25348., 26106., 26864.,
      22741., 23562., 24383., 25204., 26822., 27668., 28514., 29360.,
      20793., 21586., 22379., 23172., 24762., 25580., 26398., 27216.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4977.,  5492.,  6025.,  6576.,  8023.,  8860.,  9727.,  10624.,
      9263.,  10092., 10951., 11840., 6777.,  7300.,  7841.,  8400.,
      14959., 15852., 16775., 17728., 19401., 20804., 22257., 23760.,
      15633., 16980., 18377., 19824., 8711.,  9468.,  10255., 11072.,
      16727., 17692., 18687., 19712., 23233., 24756., 26329., 27952.,
      19401., 20804., 22257., 23760., 8303.,  9068.,  9863.,  10688.,
      11001., 11652., 12321., 13008., 17007., 18028., 19079., 20160.,
      15431., 16380., 17359., 18368., 7745.,  8212.,  8697.,  9200.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19401., 20804., 22257., 23760., 15633., 16980., 18377., 19824.,
      23233., 24756., 26329., 27952., 19401., 20804., 22257., 23760.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8697.,  8930.,  9462.,  9704.,  10263., 10514., 11100., 11360., 10371.,
      10734., 11582., 11960., 12853., 13246., 14184., 14592., 9275.,  9630.,
      10470., 10840., 11725., 12110., 13040., 13440., 6393.,  6642.,  7174.,
      7432.,  7991.,  8258.,  8844.,  9120.,  13707., 14174., 15094., 15576.,
      16541., 17038., 18048., 18560., 22649., 23378., 24854., 25608., 27159.,
      27938., 29564., 30368., 18753., 19426., 20846., 21544., 23039., 23762.,
      25332., 26080., 12171., 12558., 13414., 13816., 14717., 15134., 16080.,
      16512., 16147., 16686., 17678., 18232., 19269., 19838., 20920., 21504.,
      22513., 23362., 24958., 25832., 27503., 28402., 30148., 31072., 22649.,
      23378., 24854., 25608., 27159., 27938., 29564., 30368., 13395., 13790.,
      14654., 15064., 15973., 16398., 17352., 17792., 10585., 10930., 11558.,
      11912., 12567., 12930., 13612., 13984., 14307., 14878., 15886., 16472.,
      17525., 18126., 19224., 19840., 11739., 12238., 13174., 13688., 14669.,
      15198., 16224., 16768., 7641.,  7874.,  8374.,  8616.,  9143.,  9394.,
      9948.,  10208.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368.,
      18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080.,
      22513., 23362., 24958., 25832., 27503., 28402., 30148., 31072.,
      22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8649.,  8882.,  9115.,  9348.,  9850.,  10092., 10334., 10576., 11123.,
      11374., 11625., 11876., 12468., 12728., 12988., 13248., 8091.,  8454.,
      8817.,  9180.,  9986.,  10364., 10742., 11120., 12001., 12394., 12787.,
      13180., 14136., 14544., 14952., 15360., 10003., 10358., 10713., 11068.,
      11866., 12236., 12606., 12976., 13849., 14234., 14619., 15004., 15952.,
      16352., 16752., 17152., 5561.,  5810.,  6059.,  6308.,  6794.,  7052.,
      7310.,  7568.,  8099.,  8366.,  8633.,  8900.,  9476.,  9752.,  10028.,
      10304., 10371., 10838., 11305., 11772., 12682., 13164., 13646., 14128.,
      15113., 15610., 16107., 16604., 17664., 18176., 18688., 19200., 20761.,
      21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974.,
      29753., 30532., 32212., 33016., 33820., 34624., 15073., 15746., 16419.,
      17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228.,
      25852., 26600., 27348., 28096., 10131., 10518., 10905., 11292., 12090.,
      12492., 12894., 13296., 14169., 14586., 15003., 15420., 16368., 16800.,
      17232., 17664., 14667., 15206., 15745., 16284., 17266., 17820., 18374.,
      18928., 19985., 20554., 21123., 21692., 22824., 23408., 23992., 24576.,
      18321., 19170., 20019., 20868., 22418., 23292., 24166., 25040., 26715.,
      27614., 28513., 29412., 31212., 32136., 33060., 33984., 20761., 21490.,
      22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753.,
      30532., 32212., 33016., 33820., 34624., 8475.,  8870.,  9265.,  9660.,
      10466., 10876., 11286., 11696., 12577., 13002., 13427., 13852., 14808.,
      15248., 15688., 16128., 7705.,  8050.,  8395.,  8740.,  9322.,  9676.,
      10030., 10384., 11011., 11374., 11737., 12100., 12772., 13144., 13516.,
      13888., 14539., 15110., 15681., 16252., 17234., 17820., 18406., 18992.,
      20049., 20650., 21251., 21852., 22984., 23600., 24216., 24832., 9987.,
      10486., 10985., 11484., 12394., 12908., 13422., 13936., 14921., 15450.,
      15979., 16508., 17568., 18112., 18656., 19200., 8649.,  8882.,  9115.,
      9348.,  9850.,  10092., 10334., 10576., 11123., 11374., 11625., 11876.,
      12468., 12728., 12988., 13248.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640.,
      28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624.,
      15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560.,
      22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096.,
      18321., 19170., 20019., 20868., 22418., 23292., 24166., 25040.,
      26715., 27614., 28513., 29412., 31212., 32136., 33060., 33984.,
      20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640.,
      28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2666.,  3670.,  4210.,  2541., 6620., 8550., 9200., 5350.,
      10940., 13750., 14400., 8230., 4670., 5710., 5950., 3207.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {8225., 8875., 13425., 14075.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5206.,  5332.,  7160.,  7340.,  8210.,  8420.,  4947.,  5082.,
      12870., 13240., 16600., 17100., 17850., 18400., 10355., 10700.,
      21190., 21880., 26600., 27500., 27850., 28800., 15875., 16460.,
      8830.,  9340.,  10760., 11420., 11210., 11900., 5991.,  6414.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15975., 16450., 17225., 17750.,
                                         25975., 26850., 27225., 28150.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10286., 10412., 10538., 10664., 14140., 14320., 14500., 14680.,
      16210., 16420., 16630., 16840., 9759.,  9894.,  10029., 10164.,
      25370., 25740., 26110., 26480., 32700., 33200., 33700., 34200.,
      35150., 35700., 36250., 36800., 20365., 20710., 21055., 21400.,
      41690., 42380., 43070., 43760., 52300., 53200., 54100., 55000.,
      54750., 55700., 56650., 57600., 31165., 31750., 32335., 32920.,
      17150., 17660., 18170., 18680., 20860., 21520., 22180., 22840.,
      21730., 22420., 23110., 23800., 11559., 11982., 12405., 12828.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31475., 31950., 32425., 32900., 33925., 34450., 34975., 35500.,
      51075., 51950., 52825., 53700., 53525., 54450., 55375., 56300.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9980.,  10664., 13795., 14680., 15895., 16840., 9597.,  10164.,
      25220., 26480., 32575., 34200., 35075., 36800., 20365., 21400.,
      41860., 43760., 52575., 55000., 55075., 57600., 31405., 32920.,
      17468., 18680., 21295., 22840., 22195., 23800., 11865., 12828.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {31325., 32900., 33825., 35500.,
                                         51325., 53700., 53825., 56300.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5384.,  5624.,  6228.,  6480.,  8621.,  8966.,  9800.,  10160.,
      10457., 10862., 11756., 12176., 6453.,  6714.,  7258.,  7528.,
      12088., 12552., 13564., 14048., 19119., 19774., 21128., 21808.,
      21715., 22470., 23924., 24704., 13303., 13786., 14654., 15152.,
      13496., 14088., 15228., 15840., 18511., 19326., 20840., 21680.,
      21107., 22022., 23636., 24576., 11735., 12314., 13278., 13872.,
      10120., 10360., 10996., 11248., 13445., 13790., 14600., 14960.,
      15185., 15590., 16460., 16880., 8493.,  8754.,  9258.,  9528.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17821., 18426., 19730., 20360., 20417., 21122., 22526., 23256.,
      17213., 17978., 19442., 20232., 19809., 20674., 22238., 23128.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7008.,  7248.,  7488.,  7728.,  8364.,  8616.,  8868.,  9120.,  10689.,
      11034., 11379., 11724., 12584., 12944., 13304., 13664., 12509., 12914.,
      13319., 13724., 14644., 15064., 15484., 15904., 8421.,  8682.,  8943.,
      9204.,  9766.,  10036., 10306., 10576., 11232., 11696., 12160., 12624.,
      13716., 14200., 14684., 15168., 17807., 18462., 19117., 19772., 21224.,
      21904., 22584., 23264., 20595., 21350., 22105., 22860., 24412., 25192.,
      25972., 26752., 13707., 14190., 14673., 15156., 16138., 16636., 17134.,
      17632., 15968., 16560., 17152., 17744., 18964., 19576., 20188., 20800.,
      22575., 23390., 24205., 25020., 26632., 27472., 28312., 29152., 25363.,
      26278., 27193., 28108., 29820., 30760., 31700., 32640., 18667., 19246.,
      19825., 20404., 21482., 22076., 22670., 23264., 7968.,  8208.,  8448.,
      8688.,  9324.,  9576.,  9828.,  10080., 10737., 11082., 11427., 11772.,
      12584., 12944., 13304., 13664., 12365., 12770., 13175., 13580., 14452.,
      14872., 15292., 15712., 8085.,  8346.,  8607.,  8868.,  9414.,  9684.,
      9954.,  10224.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520.,
      19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008.,
      21181., 21946., 22711., 23476., 25038., 25828., 26618., 27408.,
      23969., 24834., 25699., 26564., 28226., 29116., 30006., 30896.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3516.,  4080.,  4668.,  5280.,  8783.,  9612.,  10471., 11360.,
      12455., 13404., 14383., 15392., 8609.,  9204.,  9817.,  10448.,
      8820.,  9744.,  10708., 11712., 16213., 17532., 18901., 20320.,
      21405., 22924., 24493., 26112., 13323., 14260., 15227., 16224.,
      8820.,  9744.,  10708., 11712., 16213., 17532., 18901., 20320.,
      21405., 22924., 24493., 26112., 13323., 14260., 15227., 16224.,
      6812.,  7408.,  8028.,  8672.,  10775., 11580., 12415., 13280.,
      14255., 15180., 16135., 17120., 8121.,  8676.,  9249.,  9840.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13617., 14836., 16105., 17424., 18809., 20228., 21697., 23216.,
      13617., 14836., 16105., 17424., 18809., 20228., 21697., 23216.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4196.,  4408.,  4992.,  5216.,  5836.,  6072.,  6728.,  6976.,  9339.,
      9694.,  10534., 10904., 11789., 12174., 13104., 13504., 12979., 13454.,
      14414., 14904., 15909., 16414., 17464., 17984., 8705.,  9026.,  9630.,
      9960.,  10591., 10930., 11588., 11936., 9116.,  9512.,  10496., 10912.,
      11956., 12392., 13496., 13952., 17381., 18026., 19418., 20088., 21555.,
      22250., 23792., 24512., 22957., 23802., 25394., 26264., 27931., 28826.,
      30568., 31488., 17887., 18454., 19490., 20072., 21153., 21750., 22876.,
      23488., 9116.,  9512.,  10496., 10912., 11956., 12392., 13496., 13952.,
      17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 22957.,
      23802., 25394., 26264., 27931., 28826., 30568., 31488., 17887., 18454.,
      19490., 20072., 21153., 21750., 22876., 23488., 6116.,  6328.,  6912.,
      7136.,  7756.,  7992.,  8648.,  8896.,  10507., 10862., 11654., 12024.,
      12861., 13246., 14128., 14528., 13763., 14238., 15150., 15640., 16597.,
      17102., 18104., 18624., 11121., 11442., 12030., 12360., 12975., 13314.,
      13956., 14304.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024.,
      20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000.,
      14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024.,
      20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5492.,  5704.,  5916.,  6128.,  6688.,  6912.,  7136.,  7360.,  7980.,
      8216.,  8452.,  8688.,  9368.,  9616.,  9864.,  10112., 9875.,  10230.,
      10585., 10940., 11738., 12108., 12478., 12848., 13721., 14106., 14491.,
      14876., 15824., 16224., 16624., 17024., 12939., 13414., 13889., 14364.,
      15282., 15772., 16262., 16752., 17745., 18250., 18755., 19260., 20328.,
      20848., 21368., 21888., 7041.,  7362.,  7683.,  8004.,  8562.,  8892.,
      9222.,  9552.,  10155., 10494., 10833., 11172., 11820., 12168., 12516.,
      12864., 9836.,  10232., 10628., 11024., 12000., 12416., 12832., 13248.,
      14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 16453.,
      17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910.,
      24605., 25300., 26896., 27616., 28336., 29056., 21261., 22106., 22951.,
      23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308.,
      34104., 35024., 35944., 36864., 14215., 14782., 15349., 15916., 16894.,
      17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224.,
      23836., 24448., 9836.,  10232., 10628., 11024., 12000., 12416., 12832.,
      13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176.,
      16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215.,
      23910., 24605., 25300., 26896., 27616., 28336., 29056., 21261., 22106.,
      22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413.,
      32308., 34104., 35024., 35944., 36864., 14215., 14782., 15349., 15916.,
      16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612.,
      23224., 23836., 24448., 4980.,  5192.,  5404.,  5616.,  6176.,  6400.,
      6624.,  6848.,  7468.,  7704.,  7940.,  8176.,  8856.,  9104.,  9352.,
      9600.,  8179.,  8534.,  8889.,  9244.,  10010., 10380., 10750., 11120.,
      11961., 12346., 12731., 13116., 14032., 14432., 14832., 15232., 10987.,
      11462., 11937., 12412., 13298., 13788., 14278., 14768., 15729., 16234.,
      16739., 17244., 18280., 18800., 19320., 19840., 9121.,  9442.,  9763.,
      10084., 10674., 11004., 11334., 11664., 12299., 12638., 12977., 13316.,
      13996., 14344., 14692., 15040.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640.,
      20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152.,
      18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848.,
      26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960.,
      14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640.,
      20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152.,
      18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848.,
      26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3190.,  4310.,  4850.,  5390.,  3213.,
                                         8100.,  10350., 11000., 11650., 6730.,
                                         13500., 16850., 17500., 18150., 10330.,
                                         5770.,  7010.,  7250.,  7490.,  4023.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10025., 10675., 11325.,
                                         16525., 17175., 17825.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6230.,  6380.,  8410.,  8620.,  9460.,  9700.,  10510., 10780.,
      6255.,  6426.,  15750., 16200., 20100., 20700., 21350., 22000.,
      22600., 23300., 13025., 13460., 26150., 27000., 32600., 33700.,
      33850., 35000., 35100., 36300., 19925., 20660., 10910., 11540.,
      13210., 14020., 13660., 14500., 14110., 14980., 7515.,  8046.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19475., 20050., 20725., 21350.,
                                         21975., 22650., 31975., 33050.,
                                         33225., 34350., 34475., 35650.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3350.,  3500.,  3650.,  3800.,  5218.,  5428.,  5638.,  5848.,  6136.,
      6376.,  6616.,  6856.,  7054.,  7324.,  7594.,  7864.,  4275.,  4446.,
      4617.,  4788.,  11850., 12300., 12750., 13200., 16688., 17288., 17888.,
      18488., 17986., 18636., 19286., 19936., 19284., 19984., 20684., 21384.,
      11151., 11586., 12021., 12456., 22010., 22860., 23710., 24560., 25700.,
      26672., 27644., 28616., 24054., 24948., 25842., 26736., 24264., 25144.,
      26024., 26904., 14219., 14762., 15305., 15848., 21190., 21820., 22450.,
      23080., 18570., 19252., 19934., 20616., 13424., 14008., 14592., 15176.,
      11670., 12220., 12770., 13320., 5859.,  6198.,  6537.,  6876.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16039., 16614., 17189., 17764., 17337., 17962., 18587., 19212.,
      18635., 19310., 19985., 20660., 26907., 27918., 28929., 29940.,
      24749., 25682., 26615., 27548., 23615., 24470., 25325., 26180.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12028., 12760., 16295., 17240., 18395., 19400., 20495., 21560.,
      12213., 12852., 30980., 32400., 39575., 41400., 42075., 44000.,
      44575., 46600., 25705., 26920., 51780., 54000., 52287., 54856.,
      43523., 45936., 40775., 43160., 22993., 24424., 21628., 23080.,
      19027., 20616., 13783., 15176., 11995., 13320., 6081.,  6876.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {38325., 40100., 40825., 42700.,
                                         43325., 45300., 57053., 59700.,
                                         47777., 50268., 39525., 41860.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6360.,  6648.,  7300.,  7600.,  9977.,  10382., 11276., 11696., 11813.,
      12278., 13232., 13712., 13649., 14174., 15188., 15728., 8285.,  8618.,
      9234.,  9576.,  14872., 15368., 16412., 16928., 22935., 23534., 24832.,
      25456., 21627., 22262., 23596., 24256., 24223., 24958., 26392., 27152.,
      13627., 14098., 14954., 15440., 17272., 18056., 19388., 20192., 17407.,
      18238., 19768., 20624., 15715., 16454., 17892., 18656., 17223., 17998.,
      19472., 20272., 10355., 10850., 11730., 12240., 18200., 18680., 19556.,
      20048., 15905., 16422., 17404., 17936., 11629., 12078., 12992., 13456.,
      10745., 11190., 12100., 12560., 5733.,  6018.,  6546.,  6840.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21701., 22314., 23626., 24264., 20329., 20914., 22198., 22808.,
      22925., 23610., 24994., 25704., 19565., 20474., 22082., 23016.,
      15761., 16514., 17966., 18744., 15925., 16650., 18074., 18824.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8400.,  8688.,  8976.,  9264.,  9948.,  10248., 10548., 10848., 12573.,
      12978., 13383., 13788., 14708., 15128., 15548., 15968., 14393., 14858.,
      15323., 15788., 16768., 17248., 17728., 18208., 16213., 16738., 17263.,
      17788., 18828., 19368., 19908., 20448., 10733., 11066., 11399., 11732.,
      12366., 12708., 13050., 13392., 13184., 13680., 14176., 14672., 15796.,
      16312., 16828., 17344., 20631., 21230., 21829., 22428., 23824., 24448.,
      25072., 25696., 19771., 20406., 21041., 21676., 23108., 23768., 24428.,
      25088., 22559., 23294., 24029., 24764., 26296., 27056., 27816., 28576.,
      15135., 15606., 16077., 16548., 17518., 18004., 18490., 18976., 24352.,
      25136., 25920., 26704., 28116., 28920., 29724., 30528., 23167., 23998.,
      24829., 25660., 27288., 28144., 29000., 29856., 17571., 18310., 19049.,
      19788., 21324., 22088., 22852., 23616., 18247., 19022., 19797., 20572.,
      22144., 22944., 23744., 24544., 10615., 11110., 11605., 12100., 13094.,
      13604., 14114., 14624., 15184., 15664., 16144., 16624., 17500., 17992.,
      18484., 18976., 13437., 13954., 14471., 14988., 15972., 16504., 17036.,
      17568., 11353., 11802., 12251., 12700., 13616., 14080., 14544., 15008.,
      11893., 12338., 12783., 13228., 14140., 14600., 15060., 15520., 9453.,
      9738.,  10023., 10308., 10878., 11172., 11466., 11760.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19301., 19914., 20527., 21140., 22550., 23188., 23826., 24464.,
      18377., 18962., 19547., 20132., 21514., 22124., 22734., 23344.,
      21165., 21850., 22535., 23220., 24702., 25412., 26122., 26832.,
      28557., 29466., 30375., 31284., 32990., 33924., 34858., 35792.,
      18801., 19554., 20307., 21060., 22610., 23388., 24166., 24944.,
      16853., 17578., 18303., 19028., 20550., 21300., 22050., 22800.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5468.,  6128.,  6812.,  7520.,  11495., 12444., 13423., 14432., 13759.,
      14700., 15671., 16672., 17047., 17980., 18943., 19936., 7985.,  8532.,
      9097.,  9680.,  15796., 16912., 18068., 19264., 25637., 27100., 28613.,
      30176., 22445., 23916., 25437., 27008., 20213., 21628., 23093., 24608.,
      10515., 11300., 12115., 12960., 19060., 20240., 21460., 22720., 20213.,
      21628., 23093., 24608., 21117., 22540., 24013., 25536., 18181., 19612.,
      21093., 22624., 9091.,  9924.,  10787., 11680., 15036., 15856., 16700.,
      17568., 13455., 14412., 15399., 16416., 10919., 11868., 12847., 13856.,
      9855.,  10732., 11639., 12576., 5545.,  6020.,  6513.,  7024.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23105., 24532., 26009., 27536., 21961., 23396., 24881., 26416.,
      21073., 22516., 24009., 25552., 21073., 22516., 24009., 25552.,
      19865., 21252., 22689., 24176., 18977., 20372., 21817., 23312.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6980.,  7288.,  7968.,  8288.,  9004.,  9336.,  10088., 10432., 13107.,
      13582., 14542., 15032., 16037., 16542., 17592., 18112., 14059., 14526.,
      15478., 15960., 16957., 17454., 18496., 19008., 17059., 17518., 18462.,
      18936., 19925., 20414., 21448., 21952., 9041.,  9314.,  9870.,  10152.,
      10735., 11026., 11636., 11936., 15708., 16296., 17472., 18080., 19316.,
      19944., 21240., 21888., 26357., 27146., 28682., 29496., 31107., 31946.,
      33632., 34496., 27645., 28442., 29986., 30808., 32427., 33274., 34968.,
      35840., 22725., 23466., 24954., 25720., 27283., 28074., 29712., 30528.,
      9863.,  10278., 11162., 11592., 12521., 12966., 13940., 14400., 23196.,
      23848., 25088., 25760., 27060., 27752., 29112., 29824., 22725., 23466.,
      24954., 25720., 27283., 28074., 29712., 30528., 19917., 20666., 22162.,
      22936., 24507., 25306., 26952., 27776., 17621., 18378., 19882., 20664.,
      22243., 23050., 24704., 25536., 11063., 11526., 12458., 12936., 13913.,
      14406., 15428., 15936., 13124., 13560., 14368., 14816., 15660., 16120.,
      17000., 17472., 11619., 12126., 13070., 13592., 14581., 15118., 16152.,
      16704., 11163., 11662., 12598., 13112., 14093., 14622., 15648., 16192.,
      9619.,  10046., 10910., 11352., 12261., 12718., 13672., 14144., 7585.,
      7826.,  8334.,  8584.,  9119.,  9378.,  9940.,  10208.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23633., 24386., 25886., 26664., 28239., 29042., 30692., 31520.,
      24921., 25682., 27190., 27976., 29559., 30370., 32028., 32864.,
      26721., 27490., 29006., 29800., 31391., 32210., 33876., 34720.,
      26721., 27490., 29006., 29800., 31391., 32210., 33876., 34720.,
      19753., 20466., 21926., 22664., 24199., 24962., 26572., 27360.,
      17457., 18178., 19646., 20392., 21935., 22706., 24324., 25120.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7892.,  8200.,  8508.,  8816.,  9472.,  9792.,  10112., 10432., 11148.,
      11480., 11812., 12144., 12920., 13264., 13608., 13952., 12683., 13158.,
      13633., 14108., 15026., 15516., 16006., 16496., 17489., 17994., 18499.,
      19004., 20072., 20592., 21112., 21632., 10499., 10966., 11433., 11900.,
      12810., 13292., 13774., 14256., 15241., 15738., 16235., 16732., 17792.,
      18304., 18816., 19328., 12411., 12870., 13329., 13788., 14690., 15164.,
      15638., 16112., 17089., 17578., 18067., 18556., 19608., 20112., 20616.,
      21120., 5713.,  5986.,  6259.,  6532.,  7042.,  7324.,  7606.,  7888.,
      8443.,  8734.,  9025.,  9316.,  9916.,  10216., 10516., 10816., 12588.,
      13176., 13764., 14352., 15520., 16128., 16736., 17344., 18612., 19240.,
      19868., 20496., 21864., 22512., 23160., 23808., 19925., 20714., 21503.,
      22292., 23782., 24596., 25410., 26224., 27839., 28678., 29517., 30356.,
      32096., 32960., 33824., 34688., 20445., 21242., 22039., 22836., 24334.,
      25156., 25978., 26800., 28423., 29270., 30117., 30964., 32712., 33584.,
      34456., 35328., 16805., 17546., 18287., 19028., 20470., 21236., 22002.,
      22768., 24335., 25126., 25917., 26708., 28400., 29216., 30032., 30848.,
      8559.,  8974.,  9389.,  9804.,  10630., 11060., 11490., 11920., 12821.,
      13266., 13711., 14156., 15132., 15592., 16052., 16512., 18284., 18936.,
      19588., 20240., 21472., 22144., 22816., 23488., 24820., 25512., 26204.,
      26896., 28328., 29040., 29752., 30464., 16805., 17546., 18287., 19028.,
      20470., 21236., 22002., 22768., 24335., 25126., 25917., 26708., 28400.,
      29216., 30032., 30848., 17325., 18074., 18823., 19572., 21022., 21796.,
      22570., 23344., 24919., 25718., 26517., 27316., 29016., 29840., 30664.,
      31488., 18869., 19626., 20383., 21140., 22598., 23380., 24162., 24944.,
      26527., 27334., 28141., 28948., 30656., 31488., 32320., 33152., 10911.,
      11374., 11837., 12300., 13174., 13652., 14130., 14608., 15557., 16050.,
      16543., 17036., 18060., 18568., 19076., 19584., 10580., 11016., 11452.,
      11888., 12672., 13120., 13568., 14016., 14860., 15320., 15780., 16240.,
      17144., 17616., 18088., 18560., 11787., 12294., 12801., 13308., 14226.,
      14748., 15270., 15792., 16785., 17322., 17859., 18396., 19464., 20016.,
      20568., 21120., 11395., 11894., 12393., 12892., 13802., 14316., 14830.,
      15344., 16329., 16858., 17387., 17916., 18976., 19520., 20064., 20608.,
      8891.,  9318.,  9745.,  10172., 11010., 11452., 11894., 12336., 13249.,
      13706., 14163., 14620., 15608., 16080., 16552., 17024., 5713.,  5954.,
      6195.,  6436.,  6946.,  7196.,  7446.,  7696.,  8251.,  8510.,  8769.,
      9028.,  9628.,  9896.,  10164., 10432.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17585., 18338., 19091., 19844., 21298., 22076., 22854., 23632., 25211.,
      26014., 26817., 27620., 29324., 30152., 30980., 31808., 18105., 18866.,
      19627., 20388., 21850., 22636., 23422., 24208., 25795., 26606., 27417.,
      28228., 29940., 30776., 31612., 32448., 19649., 20418., 21187., 21956.,
      23426., 24220., 25014., 25808., 27403., 28222., 29041., 29860., 31580.,
      32424., 33268., 34112., 19649., 20418., 21187., 21956., 23426., 24220.,
      25014., 25808., 27403., 28222., 29041., 29860., 31580., 32424., 33268.,
      34112., 16009., 16722., 17435., 18148., 19562., 20300., 21038., 21776.,
      23315., 24078., 24841., 25604., 27268., 28056., 28844., 29632., 17553.,
      18274., 18995., 19716., 21138., 21884., 22630., 23376., 24923., 25694.,
      26465., 27236., 28908., 29704., 30500., 31296.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3008., 5100.,  5720.,  3404., 5890., 9600., 10250., 5920.,
      8830., 14150., 14800., 8440., 3780., 5780., 6020.,  3240.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {7325., 7975., 11875., 12525.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5866.,  6016.,  9930.,  10200., 11130., 11440., 6610.,  6808.,
      11435., 11780., 18600., 19200., 19850., 20500., 11435., 11840.,
      17105., 17660., 27350., 28300., 28600., 29600., 16265., 16880.,
      7164.,  7560.,  10885., 11560., 11335., 12040., 6048.,  6480.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14225., 14650., 15475., 15950.,
                                         22975., 23750., 24225., 25050.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11582., 11732., 11882., 12032., 19590., 19860., 20130., 20400.,
      21950., 22260., 22570., 22880., 13022., 13220., 13418., 13616.,
      22525., 22870., 23215., 23560., 36600., 37200., 37800., 38400.,
      39050., 39700., 40350., 41000., 22465., 22870., 23275., 23680.,
      33655., 34210., 34765., 35320., 53750., 54700., 55650., 56600.,
      56200., 57200., 58200., 59200., 31915., 32530., 33145., 33760.,
      13932., 14328., 14724., 15120., 21095., 21770., 22445., 23120.,
      21965., 22670., 23375., 24080., 11664., 12096., 12528., 12960.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28025., 28450., 28875., 29300., 30475., 30950., 31425., 31900.,
      45175., 45950., 46725., 47500., 47625., 48450., 49275., 50100.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11348., 12032., 19260., 20400., 21660., 22880., 12884., 13616.,
      22465., 23560., 36575., 38400., 39075., 41000., 22525., 23680.,
      33805., 35320., 54075., 56600., 56575., 59200., 32185., 33760.,
      14175., 15120., 21545., 23120., 22445., 24080., 11979., 12960.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {27825., 29300., 30325., 31900.,
                                         45325., 47500., 47825., 50100.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7816.,  8104.,  8788.,  9088.,  14256., 14776., 15940., 16480.,
      16672., 17272., 18516., 19136., 10088., 10472., 11220., 11616.,
      13343., 13826., 14750., 15248., 23271., 24062., 25552., 26368.,
      24971., 25734., 27196., 27984., 11679., 12090., 12886., 13312.,
      12947., 13466., 14426., 14960., 18531., 19382., 20932., 21808.,
      17159., 17982., 19504., 20352., 8179.,  8626.,  9458.,  9920.,
      8559.,  8766.,  9288.,  9504.,  13915., 14290., 15130., 15520.,
      15655., 16090., 16990., 17440., 8703.,  8982.,  9504.,  9792.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20905., 21666., 23126., 23912., 20045., 20778., 22210., 22968.,
      23845., 24666., 26186., 27032., 19913., 20706., 22198., 23016.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8560.,  8848.,  9136.,  9424.,  10108., 10408., 10708., 11008., 15768.,
      16288., 16808., 17328., 18540., 19080., 19620., 20160., 18216., 18816.,
      19416., 20016., 21308., 21928., 22548., 23168., 12624., 13008., 13392.,
      13776., 14620., 15016., 15412., 15808., 12763., 13246., 13729., 14212.,
      15178., 15676., 16174., 16672., 21495., 22286., 23077., 23868., 25456.,
      26272., 27088., 27904., 22619., 23382., 24145., 24908., 26468., 27256.,
      28044., 28832., 12707., 13118., 13529., 13940., 14850., 15276., 15702.,
      16128., 13471., 13990., 14509., 15028., 16030., 16564., 17098., 17632.,
      24499., 25350., 26201., 27052., 28700., 29576., 30452., 31328., 23575.,
      24398., 25221., 26044., 27664., 28512., 29360., 30208., 10791., 11238.,
      11685., 12132., 13078., 13540., 14002., 14464., 6735.,  6942.,  7149.,
      7356.,  7864.,  8080.,  8296.,  8512.,  11391., 11766., 12141., 12516.,
      13358., 13748., 14138., 14528., 13019., 13454., 13889., 14324., 15226.,
      15676., 16126., 16576., 8487.,  8766.,  9045.,  9324.,  9888.,  10176.,
      10464., 10752.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056.,
      20861., 21594., 22327., 23060., 24590., 25348., 26106., 26864.,
      22741., 23562., 24383., 25204., 26822., 27668., 28514., 29360.,
      20793., 21586., 22379., 23172., 24762., 25580., 26398., 27216.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8860.,  9552.,  10268., 11008., 18180., 19312., 20484., 21696.,
      19044., 20208., 21412., 22656., 11516., 12240., 12988., 13760.,
      12003., 12932., 13891., 14880., 19013., 20476., 21989., 23552.,
      20365., 21772., 23229., 24736., 9563.,  10356., 11179., 12032.,
      11083., 11956., 12859., 13792., 18621., 20076., 21581., 23136.,
      19013., 20476., 21989., 23552., 10691., 11492., 12323., 13184.,
      6645.,  7164.,  7701.,  8256.,  11715., 12580., 13475., 14400.,
      12827., 13748., 14699., 15680., 6685.,  7212.,  7757.,  8320.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19401., 20804., 22257., 23760., 15633., 16980., 18377., 19824.,
      23233., 24756., 26329., 27952., 19401., 20804., 22257., 23760.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8324.,  8632.,  9312.,  9632.,  10348., 10680., 11432., 11776., 16076.,
      16584., 17744., 18272., 19492., 20040., 21320., 21888., 17260., 17800.,
      18992., 19552., 20804., 21384., 22696., 23296., 12676., 13048., 13856.,
      14240., 15084., 15480., 16360., 16768., 13391., 13894., 14850., 15368.,
      16369., 16902., 17948., 18496., 22069., 22858., 24394., 25208., 26819.,
      27658., 29344., 30208., 20221., 20954., 22434., 23192., 24747., 25530.,
      27160., 27968., 10767., 11190., 12082., 12520., 13457., 13910., 14892.,
      15360., 10583., 11030., 11930., 12392., 13337., 13814., 14804., 15296.,
      21805., 22586., 24114., 24920., 26523., 27354., 29032., 29888., 22069.,
      22858., 24394., 25208., 26819., 27658., 29344., 30208., 10967., 11398.,
      12298., 12744., 13689., 14150., 15140., 15616., 5333.,  5546.,  6042.,
      6264.,  6787.,  7018.,  7568.,  7808.,  11815., 12230., 13082., 13512.,
      14409., 14854., 15796., 16256., 14495., 14966., 15874., 16360., 17313.,
      17814., 18812., 19328., 8277.,  8570.,  9130.,  9432.,  10019., 10330.,
      10944., 11264.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368.,
      18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080.,
      22513., 23362., 24958., 25832., 27503., 28402., 30148., 31072.,
      22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6996.,  7304.,  7612.,  7920.,  8576.,  8896.,  9216.,  9536.,  10252.,
      10584., 10916., 11248., 12024., 12368., 12712., 13056., 12252., 12760.,
      13268., 13776., 14864., 15392., 15920., 16448., 17636., 18184., 18732.,
      19280., 20568., 21136., 21704., 22272., 13052., 13592., 14132., 14672.,
      15792., 16352., 16912., 17472., 18692., 19272., 19852., 20432., 21752.,
      22352., 22952., 23552., 9108.,  9480.,  9852.,  10224., 10944., 11328.,
      11712., 12096., 12876., 13272., 13668., 14064., 14904., 15312., 15720.,
      16128., 13543., 14046., 14549., 15052., 15998., 16516., 17034., 17552.,
      18573., 19106., 19639., 20172., 21268., 21816., 22364., 22912., 18517.,
      19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270.,
      28109., 28948., 30688., 31552., 32416., 33280., 16925., 17658., 18391.,
      19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740.,
      28424., 29232., 30040., 30848., 9335.,  9758.,  10181., 10604., 11438.,
      11876., 12314., 12752., 13661., 14114., 14567., 15020., 16004., 16472.,
      16940., 17408., 11567., 12014., 12461., 12908., 13798., 14260., 14722.,
      15184., 16149., 16626., 17103., 17580., 18620., 19112., 19604., 20096.,
      20045., 20826., 21607., 22388., 23870., 24676., 25482., 26288., 27895.,
      28726., 29557., 30388., 32120., 32976., 33832., 34688., 18517., 19306.,
      20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109.,
      28948., 30688., 31552., 32416., 33280., 9727.,  10158., 10589., 11020.,
      11862., 12308., 12754., 13200., 14117., 14578., 15039., 15500., 16492.,
      16968., 17444., 17920., 4757.,  4970.,  5183.,  5396.,  5846.,  6068.,
      6290.,  6512.,  7007.,  7238.,  7469.,  7700.,  8240.,  8480.,  8720.,
      8960.,  9455.,  9870.,  10285., 10700., 11526., 11956., 12386., 12816.,
      13717., 14162., 14607., 15052., 16028., 16488., 16948., 17408., 11175.,
      11646., 12117., 12588., 13470., 13956., 14442., 14928., 15885., 16386.,
      16887., 17388., 18420., 18936., 19452., 19968., 6789.,  7082.,  7375.,
      7668.,  8230.,  8532.,  8834.,  9136.,  9743.,  10054., 10365., 10676.,
      11328., 11648., 11968., 12288.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640.,
      28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624.,
      15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560.,
      22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096.,
      18321., 19170., 20019., 20868., 22418., 23292., 24166., 25040.,
      26715., 27614., 28513., 29412., 31212., 32136., 33060., 33984.,
      20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640.,
      28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4532.,  6000.,  6620.,  3914., 8780., 11150., 11800., 6790.,
      13100., 16350., 17000., 9670., 5486., 6670.,  6910.,  3711.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {8225., 8875., 13425., 14075.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8832.,  9064.,  11680., 12000., 12880., 13240., 7600.,  7828.,
      17030., 17560., 21600., 22300., 22850., 23600., 13115., 13580.,
      25350., 26200., 31600., 32700., 32850., 34000., 18635., 19340.,
      10366., 10972., 12560., 13340., 13010., 13820., 6927.,  7422.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15975., 16450., 17225., 17750.,
                                         25975., 26850., 27225., 28150.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5912.,  6144.,  6376.,  6608.,  8832.,  9152.,  9472.,  9792.,
      10040., 10400., 10760., 11120., 6012.,  6240.,  6468.,  6696.,
      13818., 14348., 14878., 15408., 19076., 19776., 20476., 21176.,
      20374., 21124., 21874., 22624., 11685., 12150., 12615., 13080.,
      21946., 22796., 23646., 24496., 29460., 30560., 31660., 32760.,
      30758., 31908., 33058., 34208., 17365., 18070., 18775., 19480.,
      20126., 20732., 21338., 21944., 24340., 25120., 25900., 26680.,
      25210., 26020., 26830., 27640., 13359., 13854., 14349., 14844.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31475., 31950., 32425., 32900., 33925., 34450., 34975., 35500.,
      51075., 51950., 52825., 53700., 53525., 54450., 55375., 56300.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17168., 18128., 22760., 24000., 25160., 26480., 14864., 15656.,
      12548., 13616., 16975., 18360., 19475., 20960., 11293., 12184.,
      18436., 19632., 24175., 25720., 26675., 28320., 15421., 16408.,
      8252.,  8888.,  10495., 11320., 11395., 12280., 6249.,  6780.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {31325., 32900., 33825., 35500.,
                                         51325., 53700., 53825., 56300.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11360., 11808., 12752., 13216., 17060., 17680., 18944., 19584.,
      19476., 20176., 21520., 22240., 11684., 12128., 12936., 13392.,
      18424., 18952., 20028., 20576., 23807., 24542., 25976., 26736.,
      26403., 27238., 28772., 29632., 14695., 15226., 16142., 16688.,
      13688., 14344., 15548., 16224., 19615., 20510., 22104., 23024.,
      22211., 23206., 24900., 25920., 12615., 13242., 14254., 14896.,
      16072., 16504., 17332., 17776., 20405., 20990., 22040., 22640.,
      22145., 22790., 23900., 24560., 12093., 12498., 13146., 13560.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17821., 18426., 19730., 20360., 20417., 21122., 22526., 23256.,
      17213., 17978., 19442., 20232., 19809., 20674., 22238., 23128.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12864., 13312., 13760., 14208., 15184., 15648., 16112., 16576., 18844.,
      19464., 20084., 20704., 22016., 22656., 23296., 23936., 21292., 21992.,
      22692., 23392., 24784., 25504., 26224., 26944., 14604., 15048., 15492.,
      15936., 16840., 17296., 17752., 18208., 16672., 17200., 17728., 18256.,
      19412., 19960., 20508., 21056., 21983., 22718., 23453., 24188., 25720.,
      26480., 27240., 28000., 24771., 25606., 26441., 27276., 28908., 29768.,
      30628., 31488., 16443., 16974., 17505., 18036., 19066., 19612., 20158.,
      20704., 17312., 17968., 18624., 19280., 20564., 21240., 21916., 22592.,
      23679., 24574., 25469., 26364., 28056., 28976., 29896., 30816., 26467.,
      27462., 28457., 29452., 31244., 32264., 33284., 34304., 16283., 16910.,
      17537., 18164., 19290., 19932., 20574., 21216., 13536., 13968., 14400.,
      14832., 15660., 16104., 16548., 16992., 17249., 17834., 18419., 19004.,
      20056., 20656., 21256., 21856., 18877., 19522., 20167., 20812., 21924.,
      22584., 23244., 23904., 12069., 12474., 12879., 13284., 13974., 14388.,
      14802., 15216.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520.,
      19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008.,
      21181., 21946., 22711., 23476., 25038., 25828., 26618., 27408.,
      23969., 24834., 25699., 26564., 28226., 29116., 30006., 30896.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13552., 14400., 15280., 16192., 19820., 21024., 22268., 23552.,
      24652., 26016., 27420., 28864., 14708., 15552., 16420., 17312.,
      15348., 16400., 17492., 18624., 22005., 23484., 25013., 26592.,
      27197., 28876., 30605., 32384., 15595., 16628., 17691., 18784.,
      15348., 16400., 17492., 18624., 22005., 23484., 25013., 26592.,
      27197., 28876., 30605., 32384., 15595., 16628., 17691., 18784.,
      10780., 11504., 12252., 13024., 15415., 16380., 17375., 18400.,
      18895., 19980., 21095., 22240., 10521., 11172., 11841., 12528.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13617., 14836., 16105., 17424., 18809., 20228., 21697., 23216.,
      13617., 14836., 16105., 17424., 18809., 20228., 21697., 23216.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12464., 12832., 13696., 14080., 14992., 15392., 16352., 16768., 18516.,
      19096., 20328., 20928., 22220., 22840., 24192., 24832., 23412., 24152.,
      25544., 26304., 27756., 28536., 30048., 30848., 16636., 17128., 18056.,
      18560., 19524., 20040., 21040., 21568., 15900., 16424., 17536., 18080.,
      19252., 19816., 21048., 21632., 22661., 23466., 25018., 25848., 27475.,
      28330., 30032., 30912., 28237., 29242., 30994., 32024., 33851., 34906.,
      36808., 37888., 18239., 18902., 20034., 20712., 21889., 22582., 23804.,
      24512., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632.,
      22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 28237.,
      29242., 30994., 32024., 33851., 34906., 36808., 37888., 18239., 18902.,
      20034., 20712., 21889., 22582., 23804., 24512., 9828.,  10168., 10880.,
      11232., 11980., 12344., 13128., 13504., 13483., 13998., 14950., 15480.,
      16477., 17022., 18064., 18624., 16739., 17374., 18446., 19096., 20213.,
      20878., 22040., 22720., 9681.,  10098., 10782., 11208., 11919., 12354.,
      13092., 13536.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024.,
      20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000.,
      14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024.,
      20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9200.,  9568.,  9936.,  10304., 11136., 11520., 11904., 12288., 13200.,
      13600., 14000., 14400., 15392., 15808., 16224., 16640., 13988., 14568.,
      15148., 15728., 16888., 17488., 18088., 18688., 19948., 20568., 21188.,
      21808., 23168., 23808., 24448., 25088., 17988., 18728., 19468., 20208.,
      21528., 22288., 23048., 23808., 25228., 26008., 26788., 27568., 29088.,
      29888., 30688., 31488., 11788., 12280., 12772., 13264., 14104., 14608.,
      15112., 15616., 16516., 17032., 17548., 18064., 19024., 19552., 20080.,
      20608., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344.,
      18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 18661.,
      19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558.,
      28413., 29268., 31024., 31904., 32784., 33664., 23469., 24474., 25479.,
      26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276.,
      38232., 39312., 40392., 41472., 14823., 15486., 16149., 16812., 17886.,
      18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080.,
      25788., 26496., 13036., 13560., 14084., 14608., 15712., 16256., 16800.,
      17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296.,
      18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703.,
      27558., 28413., 29268., 31024., 31904., 32784., 33664., 23469., 24474.,
      25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221.,
      36276., 38232., 39312., 40392., 41472., 14823., 15486., 16149., 16812.,
      17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372.,
      25080., 25788., 26496., 8180.,  8520.,  8860.,  9200.,  9888.,  10240.,
      10592., 10944., 11692., 12056., 12420., 12784., 13592., 13968., 14344.,
      14720., 11923., 12438., 12953., 13468., 14394., 14924., 15454., 15984.,
      16985., 17530., 18075., 18620., 19696., 20256., 20816., 21376., 14731.,
      15366., 16001., 16636., 17682., 18332., 18982., 19632., 20753., 21418.,
      22083., 22748., 23944., 24624., 25304., 25984., 10241., 10658., 11075.,
      11492., 12178., 12604., 13030., 13456., 14187., 14622., 15057., 15492.,
      16268., 16712., 17156., 17600.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640.,
      20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152.,
      18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848.,
      26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960.,
      14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640.,
      20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152.,
      18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848.,
      26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {5500.,  7180.,  7800.,  8420.,  4934.,
                                         10800., 13600., 14250., 14900., 8530.,
                                         16200., 20100., 20750., 21400., 12130.,
                                         6790.,  8210.,  8450.,  8690.,  4653.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10025., 10675., 11325.,
                                         16525., 17175., 17825.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10720., 11000., 13980., 14360., 15180., 15600., 16380., 16840.,
      9580.,  9868.,  20950., 21600., 26350., 27200., 27600., 28500.,
      28850., 29800., 16475., 17060., 31350., 32400., 38850., 40200.,
      40100., 41500., 41350., 42800., 23375., 24260., 12830., 13580.,
      15460., 16420., 15910., 16900., 16360., 17380., 8685.,  9306.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19475., 20050., 20725., 21350.,
                                         21975., 22650., 31975., 33050.,
                                         33225., 34350., 34475., 35650.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7080.,  7360.,  7640.,  7920.,  10428., 10808., 11188., 11568., 11636.,
      12056., 12476., 12896., 12844., 13304., 13764., 14224., 7608.,  7896.,
      8184.,  8472.,  16930., 17580., 18230., 18880., 23178., 24028., 24878.,
      25728., 24476., 25376., 26276., 27176., 25774., 26724., 27674., 28624.,
      14701., 15286., 15871., 16456., 20178., 20972., 21766., 22560., 26750.,
      27652., 28554., 29456., 27664., 28488., 29312., 30136., 25058., 25868.,
      26678., 27488., 13481., 13982., 14483., 14984., 11854., 12348., 12842.,
      13336., 9800.,  10312., 10824., 11336., 7214.,  7628.,  8042.,  8456.,
      6740.,  7120.,  7500.,  7880.,  3309.,  3546.,  3783.,  4020.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16039., 16614., 17189., 17764., 17337., 17962., 18587., 19212.,
      18635., 19310., 19985., 20660., 26907., 27918., 28929., 29940.,
      24749., 25682., 26615., 27548., 23615., 24470., 25325., 26180.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20944., 22000., 27360., 28720., 29760., 31200., 32160., 33680.,
      18824., 19736., 41380., 43200., 52075., 54400., 54575., 57000.,
      57075., 59600., 32605., 34120., 38628., 40736., 38547., 40976.,
      32343., 34616., 30875., 33120., 17221., 18568., 12156., 13336.,
      10087., 11336., 7403.,  8456.,  6895.,  7880.,  3429.,  4020.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {38325., 40100., 40825., 42700.,
                                         43325., 45300., 57053., 59700.,
                                         47777., 50268., 39525., 41860.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9728.,  10144., 11056., 11488., 13340., 13824., 14952., 15456., 14668.,
      15168., 16312., 16832., 17084., 17664., 18888., 19488., 10844., 11216.,
      11952., 12336., 17608., 18248., 19436., 20096., 18955., 19734., 21212.,
      22016., 18927., 19742., 21256., 22096., 21523., 22438., 24052., 24992.,
      12087., 12666., 13630., 14224., 15144., 15816., 17036., 17728., 20787.,
      21478., 22868., 23584., 22935., 23534., 24832., 25456., 21627., 22262.,
      23596., 24256., 12207., 12618., 13414., 13840., 12584., 13048., 13908.,
      14384., 11485., 11982., 12944., 13456., 9769.,  10198., 11092., 11536.,
      10165., 10590., 11480., 11920., 5433.,  5706.,  6222.,  6504.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21701., 22314., 23626., 24264., 20329., 20914., 22198., 22808.,
      22925., 23610., 24994., 25704., 19565., 20474., 22082., 23016.,
      15761., 16514., 17966., 18744., 15925., 16650., 18074., 18824.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11936., 12352., 12768., 13184., 14128., 14560., 14992., 15424., 13076.,
      13560., 14044., 14528., 15704., 16208., 16712., 17216., 13412., 13912.,
      14412., 14912., 16104., 16624., 17144., 17664., 15860., 16440., 17020.,
      17600., 18872., 19472., 20072., 20672., 10692., 11064., 11436., 11808.,
      12640., 13024., 13408., 13792., 17744., 18384., 19024., 19664., 20932.,
      21592., 22252., 22912., 21451., 22230., 23009., 23788., 25364., 26168.,
      26972., 27776., 23151., 23966., 24781., 25596., 27208., 28048., 28888.,
      29728., 25939., 26854., 27769., 28684., 30396., 31336., 32276., 33216.,
      19115., 19694., 20273., 20852., 21930., 22524., 23118., 23712., 15344.,
      16016., 16688., 17360., 18660., 19352., 20044., 20736., 18547., 19238.,
      19929., 20620., 22108., 22824., 23540., 24256., 20631., 21230., 21829.,
      22428., 23824., 24448., 25072., 25696., 19771., 20406., 21041., 21676.,
      23108., 23768., 24428., 25088., 13379., 13790., 14201., 14612., 15522.,
      15948., 16374., 16800., 12672., 13136., 13600., 14064., 14924., 15400.,
      15876., 16352., 16137., 16634., 17131., 17628., 18592., 19104., 19616.,
      20128., 10981., 11410., 11839., 12268., 13164., 13608., 14052., 14496.,
      9985.,  10410., 10835., 11260., 12152., 12592., 13032., 13472., 5025.,
      5298.,  5571.,  5844.,  6402.,  6684.,  6966.,  7248.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19301., 19914., 20527., 21140., 22550., 23188., 23826., 24464.,
      18377., 18962., 19547., 20132., 21514., 22124., 22734., 23344.,
      21165., 21850., 22535., 23220., 24702., 25412., 26122., 26832.,
      28557., 29466., 30375., 31284., 32990., 33924., 34858., 35792.,
      18801., 19554., 20307., 21060., 22610., 23388., 24166., 24944.,
      16853., 17578., 18303., 19028., 20550., 21300., 22050., 22800.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14256., 15168., 16112., 17088., 19292., 20480., 21708., 22976., 15996.,
      17152., 18348., 19584., 14812., 16000., 17228., 18496., 8420.,  9120.,
      9844.,  10592., 13844., 14992., 16180., 17408., 17357., 18860., 20413.,
      22016., 18005., 19516., 21077., 22688., 20893., 22348., 23853., 25408.,
      13643., 14452., 15291., 16160., 14036., 15248., 16500., 17792., 20893.,
      22348., 23853., 25408., 25637., 27100., 28613., 30176., 22445., 23916.,
      25437., 27008., 11963., 12820., 13707., 14624., 14044., 14832., 15644.,
      16480., 14855., 15772., 16719., 17696., 14879., 15788., 16727., 17696.,
      17015., 17980., 18975., 20000., 9681.,  10260., 10857., 11472.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23105., 24532., 26009., 27536., 21961., 23396., 24881., 26416.,
      21073., 22516., 24009., 25552., 21073., 22516., 24009., 25552.,
      19865., 21252., 22689., 24176., 18977., 20372., 21817., 23312.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14320., 14752., 15680., 16128., 17104., 17568., 18592., 19072., 16452.,
      17016., 18232., 18816., 20092., 20696., 22032., 22656., 13476., 14008.,
      15192., 15744., 16988., 17560., 18864., 19456., 14660., 15224., 16440.,
      17024., 18300., 18904., 20240., 20864., 11884., 12232., 13016., 13376.,
      14196., 14568., 15424., 15808., 14332., 14952., 16160., 16800., 18068.,
      18728., 20056., 20736., 19485., 20314., 21890., 22744., 24395., 25274.,
      27000., 27904., 20261., 21098., 22682., 23544., 25203., 26090., 27824.,
      28736., 21485., 22266., 23794., 24600., 26203., 27034., 28712., 29568.,
      18143., 18582., 19490., 19944., 20897., 21366., 22364., 22848., 15676.,
      16360., 17632., 18336., 19668., 20392., 21784., 22528., 21485., 22266.,
      23794., 24600., 26203., 27034., 28712., 29568., 26357., 27146., 28682.,
      29496., 31107., 31946., 33632., 34496., 27645., 28442., 29986., 30808.,
      32427., 33274., 34968., 35840., 14735., 15222., 16178., 16680., 17681.,
      18198., 19244., 19776., 12196., 12600., 13376., 13792., 14604., 15032.,
      15880., 16320., 17019., 17486., 18390., 18872., 19821., 20318., 21312.,
      21824., 13491., 13950., 14846., 15320., 16261., 16750., 17736., 18240.,
      14123., 14638., 15590., 16120., 17117., 17662., 18704., 19264., 8073.,
      8418.,  9030.,  9384.,  10023., 10386., 11052., 11424.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23633., 24386., 25886., 26664., 28239., 29042., 30692., 31520.,
      24921., 25682., 27190., 27976., 29559., 30370., 32028., 32864.,
      26721., 27490., 29006., 29800., 31391., 32210., 33876., 34720.,
      26721., 27490., 29006., 29800., 31391., 32210., 33876., 34720.,
      19753., 20466., 21926., 22664., 24199., 24962., 26572., 27360.,
      17457., 18178., 19646., 20392., 21935., 22706., 24324., 25120.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312.,
      15776., 16240., 16704., 17760., 18240., 18720., 19200., 13460., 14024.,
      14588., 15152., 16296., 16880., 17464., 18048., 19292., 19896., 20500.,
      21104., 22448., 23072., 23696., 24320., 14196., 14728., 15260., 15792.,
      16904., 17456., 18008., 18560., 19772., 20344., 20916., 21488., 22800.,
      23392., 23984., 24576., 14996., 15560., 16124., 16688., 17832., 18416.,
      19000., 19584., 20828., 21432., 22036., 22640., 23984., 24608., 25232.,
      25856., 8572.,  8920.,  9268.,  9616.,  10312., 10672., 11032., 11392.,
      12148., 12520., 12892., 13264., 14080., 14464., 14848., 15232., 15436.,
      16056., 16676., 17296., 18496., 19136., 19776., 20416., 21716., 22376.,
      23036., 23696., 25096., 25776., 26456., 27136., 20477., 21306., 22135.,
      22964., 24494., 25348., 26202., 27056., 28711., 29590., 30469., 31348.,
      33128., 34032., 34936., 35840., 19973., 20810., 21647., 22484., 24022.,
      24884., 25746., 26608., 28271., 29158., 30045., 30932., 32720., 33632.,
      34544., 35456., 16333., 17114., 17895., 18676., 20158., 20964., 21770.,
      22576., 24183., 25014., 25845., 26676., 28408., 29264., 30120., 30976.,
      12807., 13246., 13685., 14124., 14974., 15428., 15882., 16336., 17261.,
      17730., 18199., 18668., 19668., 20152., 20636., 21120., 17036., 17720.,
      18404., 19088., 20352., 21056., 21760., 22464., 23828., 24552., 25276.,
      26000., 27464., 28208., 28952., 29696., 16333., 17114., 17895., 18676.,
      20158., 20964., 21770., 22576., 24183., 25014., 25845., 26676., 28408.,
      29264., 30120., 30976., 19925., 20714., 21503., 22292., 23782., 24596.,
      25410., 26224., 27839., 28678., 29517., 30356., 32096., 32960., 33824.,
      34688., 20445., 21242., 22039., 22836., 24334., 25156., 25978., 26800.,
      28423., 29270., 30117., 30964., 32712., 33584., 34456., 35328., 10039.,
      10526., 11013., 11500., 12398., 12900., 13402., 13904., 14877., 15394.,
      15911., 16428., 17476., 18008., 18540., 19072., 9780.,  10184., 10588.,
      10992., 11744., 12160., 12576., 12992., 13804., 14232., 14660., 15088.,
      15960., 16400., 16840., 17280., 12899., 13366., 13833., 14300., 15178.,
      15660., 16142., 16624., 17577., 18074., 18571., 19068., 20096., 20608.,
      21120., 21632., 10459., 10918., 11377., 11836., 12706., 13180., 13654.,
      14128., 15073., 15562., 16051., 16540., 17560., 18064., 18568., 19072.,
      12179., 12694., 13209., 13724., 14650., 15180., 15710., 16240., 17241.,
      17786., 18331., 18876., 19952., 20512., 21072., 21632., 8633.,  8978.,
      9323.,  9668.,  10282., 10636., 10990., 11344., 12003., 12366., 12729.,
      13092., 13796., 14168., 14540., 14912.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17585., 18338., 19091., 19844., 21298., 22076., 22854., 23632., 25211.,
      26014., 26817., 27620., 29324., 30152., 30980., 31808., 18105., 18866.,
      19627., 20388., 21850., 22636., 23422., 24208., 25795., 26606., 27417.,
      28228., 29940., 30776., 31612., 32448., 19649., 20418., 21187., 21956.,
      23426., 24220., 25014., 25808., 27403., 28222., 29041., 29860., 31580.,
      32424., 33268., 34112., 19649., 20418., 21187., 21956., 23426., 24220.,
      25014., 25808., 27403., 28222., 29041., 29860., 31580., 32424., 33268.,
      34112., 16009., 16722., 17435., 18148., 19562., 20300., 21038., 21776.,
      23315., 24078., 24841., 25604., 27268., 28056., 28844., 29632., 17553.,
      18274., 18995., 19716., 21138., 21884., 22630., 23376., 24923., 25694.,
      26465., 27236., 28908., 29704., 30500., 31296.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3008.,  5100.,  5720.,  3404.,  5890.,
                                         9600.,  10250., 5920.,  8830.,  14150.,
                                         14800., 8440.,  11770., 18700., 19350.,
                                         10960., 4914.,  7460.,  7700.,  4122.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {7325.,  7975.,  11875.,
                                         12525., 16425., 17075.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5866.,  6016.,  9930.,  10200., 11130., 11440., 6610.,  6808.,
      11435., 11780., 18600., 19200., 19850., 20500., 11435., 11840.,
      17105., 17660., 27350., 28300., 28600., 29600., 16265., 16880.,
      22775., 23540., 36100., 37400., 37350., 38700., 21095., 21920.,
      9306.,  9828.,  14035., 14920., 14485., 15400., 7686.,  8244.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14225., 14650., 15475., 15950.,
                                         22975., 23750., 24225., 25050.,
                                         31725., 32850., 32975., 34150.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4094.,  4244.,  4394.,  4544.,  7430.,  7700.,  7970.,  8240.,  8638.,
      8948.,  9258.,  9568.,  5214.,  5412.,  5610.,  5808.,  9661.,  10006.,
      10351., 10696., 16376., 16976., 17576., 18176., 17674., 18324., 18974.,
      19624., 10177., 10582., 10987., 11392., 15415., 15970., 16525., 17080.,
      25462., 26412., 27362., 28312., 26760., 27760., 28760., 29760., 15147.,
      15762., 16377., 16992., 17201., 17838., 18475., 19112., 27636., 28680.,
      29724., 30768., 27846., 28876., 29906., 30936., 16085., 16718., 17351.,
      17984., 11050., 11444., 11838., 12232., 14129., 14758., 15387., 16016.,
      12375., 12970., 13565., 14160., 6174.,  6540.,  6906.,  7272.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11833., 12258., 12683., 13108., 13131., 13606., 14081., 14556.,
      20919., 21694., 22469., 23244., 22217., 23042., 23867., 24692.,
      30005., 31130., 32255., 33380., 31303., 32478., 33653., 34828.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11348., 12032., 19260., 20400., 21660., 22880., 12884., 13616.,
      22465., 23560., 36575., 38400., 39075., 41000., 22525., 23680.,
      33805., 35320., 54075., 56600., 56575., 59200., 32185., 33760.,
      32857., 34536., 48023., 50736., 45275., 47960., 25333., 26944.,
      11291., 12232., 14533., 16016., 12745., 14160., 6423.,  7272.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24689., 26100., 21301., 22684.,
                                         17869., 19340., 17041., 18484.,
                                         23849., 25380., 25581., 27084.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7816.,  8104.,  8788.,  9088.,  14256., 14776., 15940., 16480., 16672.,
      17272., 18516., 19136., 10088., 10472., 11220., 11616., 13343., 13826.,
      14750., 15248., 23271., 24062., 25552., 26368., 24971., 25734., 27196.,
      27984., 11679., 12090., 12886., 13312., 12947., 13466., 14426., 14960.,
      18531., 19382., 20932., 21808., 17159., 17982., 19504., 20352., 8179.,
      8626.,  9458.,  9920.,  11655., 12082., 12950., 13392., 19999., 20718.,
      22136., 22880., 21507., 22262., 23716., 24496., 13127., 13610., 14478.,
      14976., 9835.,  10166., 10812., 11152., 13039., 13578., 14582., 15136.,
      12155., 12690., 13690., 14240., 6363.,  6702.,  7284.,  7632.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20905., 21666., 23126., 23912., 20045., 20778., 22210., 22968.,
      23845., 24666., 26186., 27032., 19913., 20706., 22198., 23016.,
      19617., 20498., 22078., 22984., 20805., 21658., 23210., 24088.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8560.,  8848.,  9136.,  9424.,  10108., 10408., 10708., 11008., 15768.,
      16288., 16808., 17328., 18540., 19080., 19620., 20160., 18216., 18816.,
      19416., 20016., 21308., 21928., 22548., 23168., 12624., 13008., 13392.,
      13776., 14620., 15016., 15412., 15808., 12763., 13246., 13729., 14212.,
      15178., 15676., 16174., 16672., 21495., 22286., 23077., 23868., 25456.,
      26272., 27088., 27904., 22619., 23382., 24145., 24908., 26468., 27256.,
      28044., 28832., 12707., 13118., 13529., 13940., 14850., 15276., 15702.,
      16128., 13471., 13990., 14509., 15028., 16030., 16564., 17098., 17632.,
      24499., 25350., 26201., 27052., 28700., 29576., 30452., 31328., 23575.,
      24398., 25221., 26044., 27664., 28512., 29360., 30208., 10791., 11238.,
      11685., 12132., 13078., 13540., 14002., 14464., 12515., 12942., 13369.,
      13796., 14706., 15148., 15590., 16032., 19631., 20350., 21069., 21788.,
      23304., 24048., 24792., 25536., 20307., 21062., 21817., 22572., 24124.,
      24904., 25684., 26464., 13483., 13966., 14449., 14932., 15914., 16412.,
      16910., 17408., 8395.,  8726.,  9057.,  9388.,  10020., 10360., 10700.,
      11040., 13315., 13854., 14393., 14932., 15938., 16492., 17046., 17600.,
      13855., 14390., 14925., 15460., 16462., 17012., 17562., 18112., 10659.,
      10998., 11337., 11676., 12300., 12648., 12996., 13344.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056.,
      20861., 21594., 22327., 23060., 24590., 25348., 26106., 26864.,
      22741., 23562., 24383., 25204., 26822., 27668., 28514., 29360.,
      20793., 21586., 22379., 23172., 24762., 25580., 26398., 27216.,
      22673., 23554., 24435., 25316., 26994., 27900., 28806., 29712.,
      22773., 23626., 24479., 25332., 26982., 27860., 28738., 29616.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8860.,  9552.,  10268., 11008., 18180., 19312., 20484., 21696., 19044.,
      20208., 21412., 22656., 11516., 12240., 12988., 13760., 12003., 12932.,
      13891., 14880., 19013., 20476., 21989., 23552., 20365., 21772., 23229.,
      24736., 9563.,  10356., 11179., 12032., 11083., 11956., 12859., 13792.,
      18621., 20076., 21581., 23136., 19013., 20476., 21989., 23552., 10691.,
      11492., 12323., 13184., 9395.,  10212., 11059., 11936., 16885., 18268.,
      19701., 21184., 18621., 20076., 21581., 23136., 11115., 11988., 12891.,
      13824., 7405.,  7916.,  8445.,  8992.,  10859., 11668., 12507., 13376.,
      11715., 12580., 13475., 14400., 6741.,  7260.,  7797.,  8352.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19401., 20804., 22257., 23760., 15633., 16980., 18377., 19824.,
      23233., 24756., 26329., 27952., 19401., 20804., 22257., 23760.,
      23097., 24612., 26177., 27792., 23233., 24756., 26329., 27952.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8324.,  8632.,  9312.,  9632.,  10348., 10680., 11432., 11776., 16076.,
      16584., 17744., 18272., 19492., 20040., 21320., 21888., 17260., 17800.,
      18992., 19552., 20804., 21384., 22696., 23296., 12676., 13048., 13856.,
      14240., 15084., 15480., 16360., 16768., 13391., 13894., 14850., 15368.,
      16369., 16902., 17948., 18496., 22069., 22858., 24394., 25208., 26819.,
      27658., 29344., 30208., 20221., 20954., 22434., 23192., 24747., 25530.,
      27160., 27968., 10767., 11190., 12082., 12520., 13457., 13910., 14892.,
      15360., 10583., 11030., 11930., 12392., 13337., 13814., 14804., 15296.,
      21805., 22586., 24114., 24920., 26523., 27354., 29032., 29888., 22069.,
      22858., 24394., 25208., 26819., 27658., 29344., 30208., 10967., 11398.,
      12298., 12744., 13689., 14150., 15140., 15616., 10335., 10726., 11570.,
      11976., 12865., 13286., 14220., 14656., 18917., 19626., 21082., 21816.,
      23347., 24106., 25712., 26496., 21805., 22586., 24114., 24920., 26523.,
      27354., 29032., 29888., 13791., 14294., 15266., 15784., 16801., 17334.,
      18396., 18944., 5325.,  5530.,  6018.,  6232.,  6747.,  6970.,  7512.,
      7744.,  9647.,  10006., 10802., 11176., 12017., 12406., 13292., 13696.,
      11815., 12230., 13082., 13512., 14409., 14854., 15796., 16256., 9933.,
      10218., 10770., 11064., 11643., 11946., 12552., 12864.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368.,
      18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080.,
      22513., 23362., 24958., 25832., 27503., 28402., 30148., 31072.,
      22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368.,
      22761., 23602., 25190., 26056., 27719., 28610., 30348., 31264.,
      22513., 23362., 24958., 25832., 27503., 28402., 30148., 31072.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6996.,  7304.,  7612.,  7920.,  8576.,  8896.,  9216.,  9536.,  10252.,
      10584., 10916., 11248., 12024., 12368., 12712., 13056., 12252., 12760.,
      13268., 13776., 14864., 15392., 15920., 16448., 17636., 18184., 18732.,
      19280., 20568., 21136., 21704., 22272., 13052., 13592., 14132., 14672.,
      15792., 16352., 16912., 17472., 18692., 19272., 19852., 20432., 21752.,
      22352., 22952., 23552., 9108.,  9480.,  9852.,  10224., 10944., 11328.,
      11712., 12096., 12876., 13272., 13668., 14064., 14904., 15312., 15720.,
      16128., 13543., 14046., 14549., 15052., 15998., 16516., 17034., 17552.,
      18573., 19106., 19639., 20172., 21268., 21816., 22364., 22912., 18517.,
      19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270.,
      28109., 28948., 30688., 31552., 32416., 33280., 16925., 17658., 18391.,
      19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740.,
      28424., 29232., 30040., 30848., 9335.,  9758.,  10181., 10604., 11438.,
      11876., 12314., 12752., 13661., 14114., 14567., 15020., 16004., 16472.,
      16940., 17408., 11567., 12014., 12461., 12908., 13798., 14260., 14722.,
      15184., 16149., 16626., 17103., 17580., 18620., 19112., 19604., 20096.,
      20045., 20826., 21607., 22388., 23870., 24676., 25482., 26288., 27895.,
      28726., 29557., 30388., 32120., 32976., 33832., 34688., 18517., 19306.,
      20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109.,
      28948., 30688., 31552., 32416., 33280., 9727.,  10158., 10589., 11020.,
      11862., 12308., 12754., 13200., 14117., 14578., 15039., 15500., 16492.,
      16968., 17444., 17920., 10615., 11006., 11397., 11788., 12622., 13028.,
      13434., 13840., 14749., 15170., 15591., 16012., 16996., 17432., 17868.,
      18304., 16389., 17098., 17807., 18516., 19926., 20660., 21394., 22128.,
      23663., 24422., 25181., 25940., 27600., 28384., 29168., 29952., 20045.,
      20826., 21607., 22388., 23870., 24676., 25482., 26288., 27895., 28726.,
      29557., 30388., 32120., 32976., 33832., 34688., 11207., 11710., 12213.,
      12716., 13630., 14148., 14666., 15184., 16173., 16706., 17239., 17772.,
      18836., 19384., 19932., 20480., 3213.,  3418.,  3623.,  3828.,  4270.,
      4484.,  4698.,  4912.,  5399.,  5622.,  5845.,  6068.,  6600.,  6832.,
      7064.,  7296.,  8759.,  9118.,  9477.,  9836.,  10606., 10980., 11354.,
      11728., 12573., 12962., 13351., 13740., 14660., 15064., 15468., 15872.,
      9455.,  9870.,  10285., 10700., 11526., 11956., 12386., 12816., 13717.,
      14162., 14607., 15052., 16028., 16488., 16948., 17408., 8061.,  8346.,
      8631.,  8916.,  9470.,  9764.,  10058., 10352., 10951., 11254., 11557.,
      11860., 12504., 12816., 13128., 13440.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195.,
      28974., 29753., 30532., 32212., 33016., 33820., 34624., 15073., 15746.,
      16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505.,
      24228., 25852., 26600., 27348., 28096., 18321., 19170., 20019., 20868.,
      22418., 23292., 24166., 25040., 26715., 27614., 28513., 29412., 31212.,
      32136., 33060., 33984., 20761., 21490., 22219., 22948., 24378., 25132.,
      25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820.,
      34624., 20873., 21714., 22555., 23396., 24938., 25804., 26670., 27536.,
      29203., 30094., 30985., 31876., 33668., 34584., 35500., 36416., 18321.,
      19170., 20019., 20868., 22418., 23292., 24166., 25040., 26715., 27614.,
      28513., 29412., 31212., 32136., 33060., 33984.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {4532.,  6000.,  6620.,  3914.,  8780.,
                                         11150., 11800., 6790.,  13100., 16350.,
                                         17000., 9670.,  17420., 21550., 22200.,
                                         12550., 7118.,  8590.,  8830.,  4719.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {8225.,  8875.,  13425.,
                                         14075., 18625., 19275.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8832.,  9064.,  11680., 12000., 12880., 13240., 7600.,  7828.,
      17030., 17560., 21600., 22300., 22850., 23600., 13115., 13580.,
      25350., 26200., 31600., 32700., 32850., 34000., 18635., 19340.,
      33670., 34840., 41600., 43100., 42850., 44400., 24155., 25100.,
      13438., 14236., 16160., 17180., 16610., 17660., 8799.,  9438.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15975., 16450., 17225., 17750.,
                                         25975., 26850., 27225., 28150.,
                                         35975., 37250., 37225., 38550.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5912.,  6144.,  6376.,  6608.,  8832.,  9152.,  9472.,  9792.,  10040.,
      10400., 10760., 11120., 6012.,  6240.,  6468.,  6696.,  13818., 14348.,
      14878., 15408., 19076., 19776., 20476., 21176., 20374., 21124., 21874.,
      22624., 11685., 12150., 12615., 13080., 21946., 22796., 23646., 24496.,
      29460., 30560., 31660., 32760., 30758., 31908., 33058., 34208., 17365.,
      18070., 18775., 19480., 21370., 22028., 22686., 23344., 26148., 27008.,
      27868., 28728., 27446., 28356., 29266., 30176., 14725., 15286., 15847.,
      16408., 5086.,  5372.,  5658.,  5944.,  6340.,  6720.,  7100.,  7480.,
      7210.,  7620.,  8030.,  8440.,  3519.,  3774.,  4029.,  4284.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13235., 13710., 14185., 14660., 14533., 15058., 15583., 16108.,
      23619., 24494., 25369., 26244., 24917., 25842., 26767., 27692.,
      26003., 26958., 27913., 28868., 27301., 28306., 29311., 30316.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17168., 18128., 22760., 24000., 25160., 26480., 14864., 15656.,
      12548., 13616., 16975., 18360., 19475., 20960., 11293., 12184.,
      18436., 19632., 24175., 25720., 26675., 28320., 15421., 16408.,
      12548., 13616., 16975., 18360., 19475., 20960., 11293., 12184.,
      3644.,  4152.,  4895.,  5560.,  5795.,  6520.,  3081.,  3516.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {31325., 32900., 33825., 35500.,
                                         51325., 53700., 53825., 56300.,
                                         42525., 45060., 45025., 47660.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11360., 11808., 12752., 13216., 17060., 17680., 18944., 19584., 19476.,
      20176., 21520., 22240., 11684., 12128., 12936., 13392., 18424., 18952.,
      20028., 20576., 23807., 24542., 25976., 26736., 26403., 27238., 28772.,
      29632., 14695., 15226., 16142., 16688., 13688., 14344., 15548., 16224.,
      19615., 20510., 22104., 23024., 22211., 23206., 24900., 25920., 12615.,
      13242., 14254., 14896., 18424., 18952., 20028., 20576., 23807., 24542.,
      25976., 26736., 26403., 27238., 28772., 29632., 14695., 15226., 16142.,
      16688., 6984.,  7288.,  7988.,  8304.,  9365.,  9790.,  10680., 11120.,
      11105., 11590., 12540., 13040., 5853.,  6162.,  6714.,  7032.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17821., 18426., 19730., 20360., 20417., 21122., 22526., 23256.,
      17213., 17978., 19442., 20232., 19809., 20674., 22238., 23128.,
      17821., 18426., 19730., 20360., 20417., 21122., 22526., 23256.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12864., 13312., 13760., 14208., 15184., 15648., 16112., 16576., 18844.,
      19464., 20084., 20704., 22016., 22656., 23296., 23936., 21292., 21992.,
      22692., 23392., 24784., 25504., 26224., 26944., 14604., 15048., 15492.,
      15936., 16840., 17296., 17752., 18208., 16672., 17200., 17728., 18256.,
      19412., 19960., 20508., 21056., 21983., 22718., 23453., 24188., 25720.,
      26480., 27240., 28000., 24771., 25606., 26441., 27276., 28908., 29768.,
      30628., 31488., 16443., 16974., 17505., 18036., 19066., 19612., 20158.,
      20704., 17312., 17968., 18624., 19280., 20564., 21240., 21916., 22592.,
      23679., 24574., 25469., 26364., 28056., 28976., 29896., 30816., 26467.,
      27462., 28457., 29452., 31244., 32264., 33284., 34304., 16283., 16910.,
      17537., 18164., 19290., 19932., 20574., 21216., 16672., 17200., 17728.,
      18256., 19412., 19960., 20508., 21056., 21983., 22718., 23453., 24188.,
      25720., 26480., 27240., 28000., 24771., 25606., 26441., 27276., 28908.,
      29768., 30628., 31488., 16443., 16974., 17505., 18036., 19066., 19612.,
      20158., 20704., 7776.,  8080.,  8384.,  8688.,  9388.,  9704.,  10020.,
      10336., 9665.,  10090., 10515., 10940., 11832., 12272., 12712., 13152.,
      11293., 11778., 12263., 12748., 13700., 14200., 14700., 15200., 5829.,
      6138.,  6447.,  6756.,  7350.,  7668.,  7986.,  8304.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520.,
      19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008.,
      21181., 21946., 22711., 23476., 25038., 25828., 26618., 27408.,
      23969., 24834., 25699., 26564., 28226., 29116., 30006., 30896.,
      16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520.,
      19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13552., 14400., 15280., 16192., 19820., 21024., 22268., 23552., 24652.,
      26016., 27420., 28864., 14708., 15552., 16420., 17312., 15348., 16400.,
      17492., 18624., 22005., 23484., 25013., 26592., 27197., 28876., 30605.,
      32384., 15595., 16628., 17691., 18784., 15348., 16400., 17492., 18624.,
      22005., 23484., 25013., 26592., 27197., 28876., 30605., 32384., 15595.,
      16628., 17691., 18784., 15348., 16400., 17492., 18624., 22005., 23484.,
      25013., 26592., 27197., 28876., 30605., 32384., 15595., 16628., 17691.,
      18784., 10780., 11504., 12252., 13024., 15415., 16380., 17375., 18400.,
      18895., 19980., 21095., 22240., 10521., 11172., 11841., 12528.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13617., 14836., 16105., 17424., 18809., 20228., 21697., 23216.,
      13617., 14836., 16105., 17424., 18809., 20228., 21697., 23216.,
      13617., 14836., 16105., 17424., 18809., 20228., 21697., 23216.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12464., 12832., 13696., 14080., 14992., 15392., 16352., 16768., 18516.,
      19096., 20328., 20928., 22220., 22840., 24192., 24832., 23412., 24152.,
      25544., 26304., 27756., 28536., 30048., 30848., 16636., 17128., 18056.,
      18560., 19524., 20040., 21040., 21568., 15900., 16424., 17536., 18080.,
      19252., 19816., 21048., 21632., 22661., 23466., 25018., 25848., 27475.,
      28330., 30032., 30912., 28237., 29242., 30994., 32024., 33851., 34906.,
      36808., 37888., 18239., 18902., 20034., 20712., 21889., 22582., 23804.,
      24512., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632.,
      22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 28237.,
      29242., 30994., 32024., 33851., 34906., 36808., 37888., 18239., 18902.,
      20034., 20712., 21889., 22582., 23804., 24512., 15900., 16424., 17536.,
      18080., 19252., 19816., 21048., 21632., 22661., 23466., 25018., 25848.,
      27475., 28330., 30032., 30912., 28237., 29242., 30994., 32024., 33851.,
      34906., 36808., 37888., 18239., 18902., 20034., 20712., 21889., 22582.,
      23804., 24512., 9828.,  10168., 10880., 11232., 11980., 12344., 13128.,
      13504., 13483., 13998., 14950., 15480., 16477., 17022., 18064., 18624.,
      16739., 17374., 18446., 19096., 20213., 20878., 22040., 22720., 9681.,
      10098., 10782., 11208., 11919., 12354., 13092., 13536.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024.,
      20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000.,
      14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024.,
      20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000.,
      14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024.,
      20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9200.,  9568.,  9936.,  10304., 11136., 11520., 11904., 12288., 13200.,
      13600., 14000., 14400., 15392., 15808., 16224., 16640., 13988., 14568.,
      15148., 15728., 16888., 17488., 18088., 18688., 19948., 20568., 21188.,
      21808., 23168., 23808., 24448., 25088., 17988., 18728., 19468., 20208.,
      21528., 22288., 23048., 23808., 25228., 26008., 26788., 27568., 29088.,
      29888., 30688., 31488., 11788., 12280., 12772., 13264., 14104., 14608.,
      15112., 15616., 16516., 17032., 17548., 18064., 19024., 19552., 20080.,
      20608., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344.,
      18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 18661.,
      19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558.,
      28413., 29268., 31024., 31904., 32784., 33664., 23469., 24474., 25479.,
      26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276.,
      38232., 39312., 40392., 41472., 14823., 15486., 16149., 16812., 17886.,
      18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080.,
      25788., 26496., 13036., 13560., 14084., 14608., 15712., 16256., 16800.,
      17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296.,
      18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703.,
      27558., 28413., 29268., 31024., 31904., 32784., 33664., 23469., 24474.,
      25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221.,
      36276., 38232., 39312., 40392., 41472., 14823., 15486., 16149., 16812.,
      17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372.,
      25080., 25788., 26496., 13036., 13560., 14084., 14608., 15712., 16256.,
      16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712.,
      23296., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072.,
      26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 23469.,
      24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166.,
      35221., 36276., 38232., 39312., 40392., 41472., 14823., 15486., 16149.,
      16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148.,
      24372., 25080., 25788., 26496., 8180.,  8520.,  8860.,  9200.,  9888.,
      10240., 10592., 10944., 11692., 12056., 12420., 12784., 13592., 13968.,
      14344., 14720., 11923., 12438., 12953., 13468., 14394., 14924., 15454.,
      15984., 16985., 17530., 18075., 18620., 19696., 20256., 20816., 21376.,
      14731., 15366., 16001., 16636., 17682., 18332., 18982., 19632., 20753.,
      21418., 22083., 22748., 23944., 24624., 25304., 25984., 10241., 10658.,
      11075., 11492., 12178., 12604., 13030., 13456., 14187., 14622., 15057.,
      15492., 16268., 16712., 17156., 17600.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011.,
      20606., 21201., 21796., 23292., 23912., 24532., 25152., 18857., 19602.,
      20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009.,
      28804., 30500., 31320., 32140., 32960., 14049., 14594., 15139., 15684.,
      16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292.,
      23912., 24532., 25152., 18857., 19602., 20347., 21092., 22538., 23308.,
      24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140.,
      32960., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640.,
      20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 18857.,
      19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214.,
      28009., 28804., 30500., 31320., 32140., 32960.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5500.,  7180.,  7800.,  8420.,  4934.,  10800., 13600., 14250., 14900.,
      8530.,  16200., 20100., 20750., 21400., 12130., 21600., 26600., 27250.,
      27900., 15730., 8830.,  10610., 10850., 11090., 5913.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10025., 10675., 11325., 16525., 17175.,
                                         17825., 23025., 23675., 24325.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10720., 11000., 13980., 14360., 15180., 15600., 16380., 16840., 9580.,
      9868.,  20950., 21600., 26350., 27200., 27600., 28500., 28850., 29800.,
      16475., 17060., 31350., 32400., 38850., 40200., 40100., 41500., 41350.,
      42800., 23375., 24260., 41750., 43200., 51350., 53200., 52600., 54500.,
      53850., 55800., 30275., 31460., 16670., 17660., 19960., 21220., 20410.,
      21700., 20860., 22180., 11025., 11826.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19475., 20050., 20725., 21350., 21975., 22650., 31975., 33050., 33225.,
      34350., 34475., 35650., 44475., 46050., 45725., 47350., 46975., 48650.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7080.,  7360.,  7640.,  7920.,  10428., 10808., 11188., 11568., 11636.,
      12056., 12476., 12896., 12844., 13304., 13764., 14224., 7608.,  7896.,
      8184.,  8472.,  16930., 17580., 18230., 18880., 23178., 24028., 24878.,
      25728., 24476., 25376., 26276., 27176., 25774., 26724., 27674., 28624.,
      14701., 15286., 15871., 16456., 20178., 20972., 21766., 22560., 26750.,
      27652., 28554., 29456., 27664., 28488., 29312., 30136., 25058., 25868.,
      26678., 27488., 13481., 13982., 14483., 14984., 15490., 16172., 16854.,
      17536., 15282., 16044., 16806., 17568., 13124., 13808., 14492., 15176.,
      13078., 13748., 14418., 15088., 7141.,  7558.,  7975.,  8392.,  8542.,
      8764.,  8986.,  9208.,  10820., 11120., 11420., 11720., 11690., 12020.,
      12350., 12680., 12560., 12920., 13280., 13640., 6849.,  7074.,  7299.,
      7524.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16039., 16614., 17189., 17764., 17337., 17962., 18587., 19212., 18635.,
      19310., 19985., 20660., 26907., 27918., 28929., 29940., 24749., 25682.,
      26615., 27548., 23615., 24470., 25325., 26180., 24655., 25526., 26397.,
      27268., 19425., 20218., 21011., 21804., 15219., 15934., 16649., 17364.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20944., 22000., 27360., 28720., 29760., 31200., 32160., 33680., 18824.,
      19736., 41380., 43200., 52075., 54400., 54575., 57000., 57075., 59600.,
      32605., 34120., 38628., 40736., 38547., 40976., 32343., 34616., 30875.,
      33120., 17221., 18568., 27684., 29568., 30267., 32416., 29183., 31176.,
      30275., 32240., 17197., 18376., 8572.,  9208.,  10895., 11720., 11795.,
      12680., 12695., 13640., 6957.,  7524.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      38325., 40100., 40825., 42700., 43325., 45300., 57053., 59700., 47777.,
      50268., 39525., 41860., 33413., 35780., 29257., 31468., 26125., 28180.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9728.,  10144., 11056., 11488., 13340., 13824., 14952., 15456., 14668.,
      15168., 16312., 16832., 17084., 17664., 18888., 19488., 10844., 11216.,
      11952., 12336., 17608., 18248., 19436., 20096., 18955., 19734., 21212.,
      22016., 18927., 19742., 21256., 22096., 21523., 22438., 24052., 24992.,
      12087., 12666., 13630., 14224., 15144., 15816., 17036., 17728., 20787.,
      21478., 22868., 23584., 22935., 23534., 24832., 25456., 21627., 22262.,
      23596., 24256., 12207., 12618., 13414., 13840., 19720., 20552., 21932.,
      22784., 22235., 23222., 24908., 25920., 17407., 18238., 19768., 20624.,
      15715., 16454., 17892., 18656., 8935.,  9370.,  10190., 10640., 16712.,
      17144., 17972., 18416., 21205., 21790., 22840., 23440., 15905., 16422.,
      17404., 17936., 11629., 12078., 12992., 13456., 4833.,  5082.,  5574.,
      5832.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21701., 22314., 23626., 24264., 20329., 20914., 22198., 22808., 22925.,
      23610., 24994., 25704., 19565., 20474., 22082., 23016., 15761., 16514.,
      17966., 18744., 15925., 16650., 18074., 18824., 24469., 25290., 26810.,
      27656., 20537., 21330., 22822., 23640., 17629., 18394., 19858., 20648.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11936., 12352., 12768., 13184., 14128., 14560., 14992., 15424., 13076.,
      13560., 14044., 14528., 15704., 16208., 16712., 17216., 13412., 13912.,
      14412., 14912., 16104., 16624., 17144., 17664., 15860., 16440., 17020.,
      17600., 18872., 19472., 20072., 20672., 10692., 11064., 11436., 11808.,
      12640., 13024., 13408., 13792., 17744., 18384., 19024., 19664., 20932.,
      21592., 22252., 22912., 21451., 22230., 23009., 23788., 25364., 26168.,
      26972., 27776., 23151., 23966., 24781., 25596., 27208., 28048., 28888.,
      29728., 25939., 26854., 27769., 28684., 30396., 31336., 32276., 33216.,
      19115., 19694., 20273., 20852., 21930., 22524., 23118., 23712., 15344.,
      16016., 16688., 17360., 18660., 19352., 20044., 20736., 18547., 19238.,
      19929., 20620., 22108., 22824., 23540., 24256., 20631., 21230., 21829.,
      22428., 23824., 24448., 25072., 25696., 19771., 20406., 21041., 21676.,
      23108., 23768., 24428., 25088., 13379., 13790., 14201., 14612., 15522.,
      15948., 16374., 16800., 22800., 23632., 24464., 25296., 26756., 27608.,
      28460., 29312., 30875., 31862., 32849., 33836., 35620., 36632., 37644.,
      38656., 23167., 23998., 24829., 25660., 27288., 28144., 29000., 29856.,
      17571., 18310., 19049., 19788., 21324., 22088., 22852., 23616., 8859.,
      9294.,  9729.,  10164., 11098., 11548., 11998., 12448., 13792., 14224.,
      14656., 15088., 15916., 16360., 16804., 17248., 17569., 18154., 18739.,
      19324., 20376., 20976., 21576., 22176., 13437., 13954., 14471., 14988.,
      15972., 16504., 17036., 17568., 11353., 11802., 12251., 12700., 13616.,
      14080., 14544., 15008., 8457.,  8706.,  8955.,  9204.,  9738.,  9996.,
      10254., 10512.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19301., 19914., 20527., 21140., 22550., 23188., 23826., 24464., 18377.,
      18962., 19547., 20132., 21514., 22124., 22734., 23344., 21165., 21850.,
      22535., 23220., 24702., 25412., 26122., 26832., 28557., 29466., 30375.,
      31284., 32990., 33924., 34858., 35792., 18801., 19554., 20307., 21060.,
      22610., 23388., 24166., 24944., 16853., 17578., 18303., 19028., 20550.,
      21300., 22050., 22800., 23605., 24426., 25247., 26068., 27686., 28532.,
      29378., 30224., 21657., 22450., 23243., 24036., 25626., 26444., 27262.,
      28080., 21757., 22522., 23287., 24052., 25614., 26404., 27194., 27984.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14256., 15168., 16112., 17088., 19292., 20480., 21708., 22976., 15996.,
      17152., 18348., 19584., 14812., 16000., 17228., 18496., 8420.,  9120.,
      9844.,  10592., 13844., 14992., 16180., 17408., 17357., 18860., 20413.,
      22016., 18005., 19516., 21077., 22688., 20893., 22348., 23853., 25408.,
      13643., 14452., 15291., 16160., 14036., 15248., 16500., 17792., 20893.,
      22348., 23853., 25408., 25637., 27100., 28613., 30176., 22445., 23916.,
      25437., 27008., 11963., 12820., 13707., 14624., 19476., 20624., 21812.,
      23040., 22445., 23916., 25437., 27008., 20213., 21628., 23093., 24608.,
      21117., 22540., 24013., 25536., 12267., 13108., 13979., 14880., 12060.,
      12784., 13532., 14304., 17015., 17980., 18975., 20000., 13455., 14412.,
      15399., 16416., 10919., 11868., 12847., 13856., 4641.,  5172.,  5721.,
      6288.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23105., 24532., 26009., 27536., 21961., 23396., 24881., 26416., 21073.,
      22516., 24009., 25552., 21073., 22516., 24009., 25552., 19865., 21252.,
      22689., 24176., 18977., 20372., 21817., 23312., 18977., 20372., 21817.,
      23312., 17641., 19108., 20625., 22192., 16241., 17716., 19241., 20816.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14320., 14752., 15680., 16128., 17104., 17568., 18592., 19072., 16452.,
      17016., 18232., 18816., 20092., 20696., 22032., 22656., 13476., 14008.,
      15192., 15744., 16988., 17560., 18864., 19456., 14660., 15224., 16440.,
      17024., 18300., 18904., 20240., 20864., 11884., 12232., 13016., 13376.,
      14196., 14568., 15424., 15808., 14332., 14952., 16160., 16800., 18068.,
      18728., 20056., 20736., 19485., 20314., 21890., 22744., 24395., 25274.,
      27000., 27904., 20261., 21098., 22682., 23544., 25203., 26090., 27824.,
      28736., 21485., 22266., 23794., 24600., 26203., 27034., 28712., 29568.,
      18143., 18582., 19490., 19944., 20897., 21366., 22364., 22848., 15676.,
      16360., 17632., 18336., 19668., 20392., 21784., 22528., 21485., 22266.,
      23794., 24600., 26203., 27034., 28712., 29568., 26357., 27146., 28682.,
      29496., 31107., 31946., 33632., 34496., 27645., 28442., 29986., 30808.,
      32427., 33274., 34968., 35840., 14735., 15222., 16178., 16680., 17681.,
      18198., 19244., 19776., 19452., 20072., 21280., 21920., 23188., 23848.,
      25176., 25856., 27645., 28442., 29986., 30808., 32427., 33274., 34968.,
      35840., 22725., 23466., 24954., 25720., 27283., 28074., 29712., 30528.,
      19917., 20666., 22162., 22936., 24507., 25306., 26952., 27776., 11263.,
      11734., 12674., 13160., 14145., 14646., 15676., 16192., 10340., 10680.,
      11392., 11744., 12492., 12856., 13640., 14016., 14123., 14638., 15590.,
      16120., 17117., 17662., 18704., 19264., 11619., 12126., 13070., 13592.,
      14581., 15118., 16152., 16704., 11163., 11662., 12598., 13112., 14093.,
      14622., 15648., 16192., 7257.,  7554.,  8118.,  8424.,  9015.,  9330.,
      9948.,  10272.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23633., 24386., 25886., 26664., 28239., 29042., 30692., 31520., 24921.,
      25682., 27190., 27976., 29559., 30370., 32028., 32864., 26721., 27490.,
      29006., 29800., 31391., 32210., 33876., 34720., 26721., 27490., 29006.,
      29800., 31391., 32210., 33876., 34720., 19753., 20466., 21926., 22664.,
      24199., 24962., 26572., 27360., 17457., 18178., 19646., 20392., 21935.,
      22706., 24324., 25120., 17457., 18178., 19646., 20392., 21935., 22706.,
      24324., 25120., 18297., 19090., 20630., 21448., 23063., 23906., 25596.,
      26464., 19073., 19874., 21422., 22248., 23871., 24722., 26420., 27296.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312.,
      15776., 16240., 16704., 17760., 18240., 18720., 19200., 13460., 14024.,
      14588., 15152., 16296., 16880., 17464., 18048., 19292., 19896., 20500.,
      21104., 22448., 23072., 23696., 24320., 14196., 14728., 15260., 15792.,
      16904., 17456., 18008., 18560., 19772., 20344., 20916., 21488., 22800.,
      23392., 23984., 24576., 14996., 15560., 16124., 16688., 17832., 18416.,
      19000., 19584., 20828., 21432., 22036., 22640., 23984., 24608., 25232.,
      25856., 8572.,  8920.,  9268.,  9616.,  10312., 10672., 11032., 11392.,
      12148., 12520., 12892., 13264., 14080., 14464., 14848., 15232., 15436.,
      16056., 16676., 17296., 18496., 19136., 19776., 20416., 21716., 22376.,
      23036., 23696., 25096., 25776., 26456., 27136., 20477., 21306., 22135.,
      22964., 24494., 25348., 26202., 27056., 28711., 29590., 30469., 31348.,
      33128., 34032., 34936., 35840., 19973., 20810., 21647., 22484., 24022.,
      24884., 25746., 26608., 28271., 29158., 30045., 30932., 32720., 33632.,
      34544., 35456., 16333., 17114., 17895., 18676., 20158., 20964., 21770.,
      22576., 24183., 25014., 25845., 26676., 28408., 29264., 30120., 30976.,
      12807., 13246., 13685., 14124., 14974., 15428., 15882., 16336., 17261.,
      17730., 18199., 18668., 19668., 20152., 20636., 21120., 17036., 17720.,
      18404., 19088., 20352., 21056., 21760., 22464., 23828., 24552., 25276.,
      26000., 27464., 28208., 28952., 29696., 16333., 17114., 17895., 18676.,
      20158., 20964., 21770., 22576., 24183., 25014., 25845., 26676., 28408.,
      29264., 30120., 30976., 19925., 20714., 21503., 22292., 23782., 24596.,
      25410., 26224., 27839., 28678., 29517., 30356., 32096., 32960., 33824.,
      34688., 20445., 21242., 22039., 22836., 24334., 25156., 25978., 26800.,
      28423., 29270., 30117., 30964., 32712., 33584., 34456., 35328., 10039.,
      10526., 11013., 11500., 12398., 12900., 13402., 13904., 14877., 15394.,
      15911., 16428., 17476., 18008., 18540., 19072., 15436., 16056., 16676.,
      17296., 18496., 19136., 19776., 20416., 21716., 22376., 23036., 23696.,
      25096., 25776., 26456., 27136., 20445., 21242., 22039., 22836., 24334.,
      25156., 25978., 26800., 28423., 29270., 30117., 30964., 32712., 33584.,
      34456., 35328., 16805., 17546., 18287., 19028., 20470., 21236., 22002.,
      22768., 24335., 25126., 25917., 26708., 28400., 29216., 30032., 30848.,
      17325., 18074., 18823., 19572., 21022., 21796., 22570., 23344., 24919.,
      25718., 26517., 27316., 29016., 29840., 30664., 31488., 11303., 11774.,
      12245., 12716., 13598., 14084., 14570., 15056., 16013., 16514., 17015.,
      17516., 18548., 19064., 19580., 20096., 8180.,  8520.,  8860.,  9200.,
      9888.,  10240., 10592., 10944., 11692., 12056., 12420., 12784., 13592.,
      13968., 14344., 14720., 12179., 12694., 13209., 13724., 14650., 15180.,
      15710., 16240., 17241., 17786., 18331., 18876., 19952., 20512., 21072.,
      21632., 11787., 12294., 12801., 13308., 14226., 14748., 15270., 15792.,
      16785., 17322., 17859., 18396., 19464., 20016., 20568., 21120., 11395.,
      11894., 12393., 12892., 13802., 14316., 14830., 15344., 16329., 16858.,
      17387., 17916., 18976., 19520., 20064., 20608., 7049.,  7346.,  7643.,
      7940.,  8506.,  8812.,  9118.,  9424.,  10035., 10350., 10665., 10980.,
      11636., 11960., 12284., 12608.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17585., 18338., 19091., 19844., 21298., 22076., 22854., 23632., 25211.,
      26014., 26817., 27620., 29324., 30152., 30980., 31808., 18105., 18866.,
      19627., 20388., 21850., 22636., 23422., 24208., 25795., 26606., 27417.,
      28228., 29940., 30776., 31612., 32448., 19649., 20418., 21187., 21956.,
      23426., 24220., 25014., 25808., 27403., 28222., 29041., 29860., 31580.,
      32424., 33268., 34112., 19649., 20418., 21187., 21956., 23426., 24220.,
      25014., 25808., 27403., 28222., 29041., 29860., 31580., 32424., 33268.,
      34112., 16009., 16722., 17435., 18148., 19562., 20300., 21038., 21776.,
      23315., 24078., 24841., 25604., 27268., 28056., 28844., 29632., 17553.,
      18274., 18995., 19716., 21138., 21884., 22630., 23376., 24923., 25694.,
      26465., 27236., 28908., 29704., 30500., 31296., 17553., 18274., 18995.,
      19716., 21138., 21884., 22630., 23376., 24923., 25694., 26465., 27236.,
      28908., 29704., 30500., 31296., 21209., 22002., 22795., 23588., 25082.,
      25900., 26718., 27536., 29155., 29998., 30841., 31684., 33428., 34296.,
      35164., 36032., 20705., 21506., 22307., 23108., 24610., 25436., 26262.,
      27088., 28715., 29566., 30417., 31268., 33020., 33896., 34772., 35648.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1755.,  3080.,  3620.,  2205.,  4420.,  7325.,  7975.,  4660.,
      7360.,  11875., 12525., 7180.,  3213.,  4940.,  5180.,  2799.,
      10134., 16310., 16850., 9702.,  14710., 23250., 23900., 13480.,
      17650., 27800., 28450., 16000., 7182.,  10820., 11060., 5886.,
      18513., 29540., 30080., 17199., 25000., 39175., 39825., 22300.,
      27940., 43725., 44375., 24820., 11151., 16700., 16940., 8973.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {7325.,  7975.,  11875., 12525.,
                                         23250., 23900., 27800., 28450.,
                                         39175., 39825., 43725., 44375.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3429.,  3510.,  6010.,  6160.,  7060.,  7240.,  4293.,  4410.,  8600.,
      8840.,  14225., 14650., 15475., 15950., 9020.,  9320.,  14270., 14720.,
      22975., 23750., 24225., 25050., 13850., 14360., 6093.,  6426.,  9310.,
      9880.,  9760.,  10360., 5229.,  5598.,  19746., 20268., 31735., 32620.,
      32785., 33700., 18846., 19404., 28445., 29420., 44850., 46500., 46100.,
      47800., 25925., 26960., 34115., 35300., 53600., 55600., 54850., 56900.,
      30755., 32000., 13590., 14364., 20335., 21640., 20785., 22120., 10962.,
      11772., 36063., 37026., 57460., 59080., 58510., 60160., 33399., 34398.,
      42018., 43600., 57427., 59918., 47925., 50210., 26318., 27704., 17992.,
      19016., 22657., 24218., 18275., 19630., 9644.,  10472., 3039.,  3358.,
      3072.,  3448.,  3010.,  3160.,  1719.,  1818.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14225., 14650., 15475., 15950., 22975., 23750., 24225., 25050.,
      44850., 46500., 46100., 47800., 53600., 55600., 54850., 56900.,
      57427., 59918., 47925., 50210., 22657., 24218., 18275., 19630.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1977.,  2058.,  2139.,  2220.,  3742.,  3892.,  4042.,  4192.,  4660.,
      4840.,  5020.,  5200.,  2901.,  3018.,  3135.,  3252.,  6784.,  7024.,
      7264.,  7504.,  11833., 12258., 12683., 13108., 13131., 13606., 14081.,
      14556., 7692.,  7992.,  8292.,  8592.,  12538., 12988., 13438., 13888.,
      20919., 21694., 22469., 23244., 22217., 23042., 23867., 24692., 12662.,
      13172., 13682., 14192., 11853., 12186., 12519., 12852., 18050., 18620.,
      19190., 19760., 18920., 19520., 20120., 20720., 10089., 10458., 10827.,
      11196., 11386., 11780., 12174., 12568., 19321., 19950., 20579., 21208.,
      19151., 19746., 20341., 20936., 11854., 12220., 12586., 12952., 12587.,
      13050., 13513., 13976., 16882., 17636., 18390., 19144., 15556., 16296.,
      17036., 17776., 8127.,  8586.,  9045.,  9504.,  6949.,  7238.,  7527.,
      7816.,  11248., 11712., 12176., 12640., 12482., 12932., 13382., 13832.,
      7337.,  7622.,  7907.,  8192.,  7398.,  7596.,  7794.,  7992.,  11525.,
      11870., 12215., 12560., 12395., 12770., 13145., 13520., 6714.,  6948.,
      7182.,  7416.,  11259., 11646., 12033., 12420., 19348., 20008., 20668.,
      21328., 20266., 20956., 21646., 22336., 11911., 12334., 12757., 13180.,
      18646., 19332., 20018., 20704., 28331., 29414., 30497., 31580., 27197.,
      28202., 29207., 30212., 15730., 16348., 16966., 17584., 15568., 16080.,
      16592., 17104., 19113., 19906., 20699., 21492., 14907., 15622., 16337.,
      17052., 7772.,  8216.,  8660.,  9104.,  4351.,  4542.,  4733.,  4924.,
      5384.,  5632.,  5880.,  6128.,  5870.,  6020.,  6170.,  6320.,  3339.,
      3438.,  3537.,  3636.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11833., 12258., 12683., 13108., 13131., 13606., 14081., 14556.,
      20919., 21694., 22469., 23244., 22217., 23042., 23867., 24692.,
      16882., 17636., 18390., 19144., 15556., 16296., 17036., 17776.,
      11248., 11712., 12176., 12640., 12482., 12932., 13382., 13832.,
      28331., 29414., 30497., 31580., 27197., 28202., 29207., 30212.,
      19113., 19906., 20699., 21492., 14907., 15622., 16337., 17052.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6525.,  7020.,  11495., 12320., 13595., 14480., 8289.,  8820.,  16795.,
      17680., 27825., 29300., 30325., 31900., 17695., 18640., 28135., 29440.,
      45325., 47500., 47825., 50100., 27355., 28720., 12033., 12852., 18395.,
      19760., 19295., 20720., 10341., 11196., 26871., 27992., 39393., 41176.,
      36245., 37960., 20883., 21912., 17061., 18392., 24563., 26696., 24375.,
      26480., 13489., 14752., 16625., 17608., 26703., 28256., 29075., 30600.,
      17005., 17920., 7443.,  7992.,  11645., 12560., 12545., 13520., 6831.,
      7416.,  29169., 30276., 47195., 49040., 49295., 51200., 28485., 29628.,
      38063., 39840., 52277., 55068., 44025., 46660., 24643., 26224., 19707.,
      21136., 26257., 28468., 23125., 25180., 12799., 14032., 4389.,  4924.,
      5407.,  6128.,  5795.,  6320.,  3321.,  3636.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27825., 29300., 30325., 31900., 45325., 47500., 47825., 50100.,
      24563., 26696., 24375., 26480., 26703., 28256., 29075., 30600.,
      52277., 55068., 44025., 46660., 26257., 28468., 23125., 25180.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3681.,  3834.,  4278.,  4440.,  7025.,  7310.,  8084.,  8384.,  8861.,
      9206.,  10040., 10400., 5537.,  5762.,  6270.,  6504.,  13157., 13622.,
      14528., 15008., 20905., 21666., 23126., 23912., 20045., 20778., 22210.,
      22968., 10997., 11390., 12168., 12576., 17369., 17870., 18812., 19328.,
      23845., 24666., 26186., 27032., 19913., 20706., 22198., 23016., 8009.,
      8438.,  9252.,  9696.,  6897.,  7170.,  7758.,  8040.,  9617.,  10038.,
      10924., 11360., 9949.,  10302., 11120., 11488., 5553.,  5706.,  6102.,
      6264.,  8995.,  9326.,  9948.,  10288., 15719., 16258., 17286., 17840.,
      16467., 17002., 18026., 18576., 10515., 10854., 11476., 11824., 12795.,
      13258., 14162., 14640., 18331., 19110., 20588., 21392., 18303., 19118.,
      20632., 21472., 10139., 10658., 11562., 12096., 12911., 13410., 14350.,
      14864., 21783., 22622., 24160., 25024., 20347., 21094., 22540., 23312.,
      11375., 11802., 12614., 13056., 14499., 14886., 15588., 15984., 22615.,
      23290., 24430., 25120., 17315., 17922., 18994., 19616., 7187.,  7518.,
      8092.,  8432.,  4773.,  4962.,  5442.,  5640.,  8861.,  9206.,  10040.,
      10400., 10697., 11102., 11996., 12416., 6597.,  6858.,  7402.,  7672.,
      12689., 13150., 14052., 14528., 20045., 20778., 22210., 22968., 20209.,
      20914., 22318., 23048., 12417., 12870., 13708., 14176., 15365., 15862.,
      16800., 17312., 19913., 20706., 22198., 23016., 17005., 17770., 19234.,
      20024., 9429.,  9918.,  10792., 11296., 6997.,  7242.,  7802.,  8056.,
      9949.,  10302., 11120., 11488., 11305., 11590., 12340., 12640., 6453.,
      6642.,  7074.,  7272.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20905., 21666., 23126., 23912., 20045., 20778., 22210., 22968.,
      23845., 24666., 26186., 27032., 19913., 20706., 22198., 23016.,
      18331., 19110., 20588., 21392., 18303., 19118., 20632., 21472.,
      21783., 22622., 24160., 25024., 20347., 21094., 22540., 23312.,
      20045., 20778., 22210., 22968., 20209., 20914., 22318., 23048.,
      19913., 20706., 22198., 23016., 17005., 17770., 19234., 20024.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4521.,  4674.,  4827.,  4980.,  5450.,  5612.,  5774.,  5936.,  8837.,
      9122.,  9407.,  9692.,  10492., 10792., 11092., 11392., 10657., 11002.,
      11347., 11692., 12552., 12912., 13272., 13632., 7265.,  7490.,  7715.,
      7940.,  8466.,  8700.,  8934.,  9168.,  13689., 14154., 14619., 15084.,
      16032., 16512., 16992., 17472., 24857., 25618., 26379., 27140., 28698.,
      29484., 30270., 31056., 20861., 21594., 22327., 23060., 24590., 25348.,
      26106., 26864., 10849., 11242., 11635., 12028., 12920., 13328., 13736.,
      14144., 15421., 15922., 16423., 16924., 17908., 18424., 18940., 19456.,
      22741., 23562., 24383., 25204., 26822., 27668., 28514., 29360., 20793.,
      21586., 22379., 23172., 24762., 25580., 26398., 27216., 14053., 14482.,
      14911., 15340., 16268., 16712., 17156., 17600., 7825.,  8098.,  8371.,
      8644.,  9218.,  9500.,  9782.,  10064., 9021.,  9442.,  9863.,  10284.,
      11172., 11608., 12044., 12480., 7961.,  8314.,  8667.,  9020.,  9840.,
      10208., 10576., 10944., 5001.,  5154.,  5307.,  5460.,  5898.,  6060.,
      6222.,  6384.,  10363., 10694., 11025., 11356., 12004., 12344., 12684.,
      13024., 14835., 15374., 15913., 16452., 17506., 18060., 18614., 19168.,
      14543., 15078., 15613., 16148., 17198., 17748., 18298., 18848., 8403.,
      8742.,  9081.,  9420.,  10060., 10408., 10756., 11104., 12199., 12662.,
      13125., 13588., 14534., 15012., 15490., 15968., 20587., 21366., 22145.,
      22924., 24500., 25304., 26108., 26912., 22287., 23102., 23917., 24732.,
      26344., 27184., 28024., 28864., 16687., 17206., 17725., 18244., 19262.,
      19796., 20330., 20864., 13931., 14430., 14929., 15428., 16410., 16924.,
      17438., 17952., 23591., 24430., 25269., 26108., 27744., 28608., 29472.,
      30336., 22603., 23350., 24097., 24844., 26388., 27160., 27932., 28704.,
      12083., 12510., 12937., 13364., 14290., 14732., 15174., 15616., 12035.,
      12422., 12809., 13196., 13884., 14280., 14676., 15072., 19531., 20206.,
      20881., 21556., 22698., 23388., 24078., 24768., 15399., 16006., 16613.,
      17220., 18294., 18916., 19538., 20160., 9755.,  10086., 10417., 10748.,
      11364., 11704., 12044., 12384., 5645.,  5834.,  6023.,  6212.,  6718.,
      6916.,  7114.,  7312.,  10657., 11002., 11347., 11692., 12552., 12912.,
      13272., 13632., 12477., 12882., 13287., 13692., 14612., 15032., 15452.,
      15872., 8325.,  8586.,  8847.,  9108.,  9670.,  9940.,  10210., 10480.,
      15317., 15778., 16239., 16700., 17644., 18120., 18596., 19072., 20861.,
      21594., 22327., 23060., 24590., 25348., 26106., 26864., 18913., 19618.,
      20323., 21028., 22530., 23260., 23990., 24720., 12605., 13058., 13511.,
      13964., 14916., 15384., 15852., 16320., 13977., 14474., 14971., 15468.,
      16448., 16960., 17472., 17984., 20793., 21586., 22379., 23172., 24762.,
      25580., 26398., 27216., 20893., 21658., 22423., 23188., 24750., 25540.,
      26330., 27120., 15809., 16298., 16787., 17276., 18264., 18768., 19272.,
      19776., 6773.,  7018.,  7263.,  7508.,  8054.,  8308.,  8562.,  8816.,
      7961.,  8314.,  8667.,  9020.,  9840.,  10208., 10576., 10944., 8949.,
      9234.,  9519.,  9804.,  10556., 10856., 11156., 11456., 5997.,  6186.,
      6375.,  6564.,  7038.,  7236.,  7434.,  7632.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 20861.,
      21594., 22327., 23060., 24590., 25348., 26106., 26864., 22741., 23562.,
      24383., 25204., 26822., 27668., 28514., 29360., 20793., 21586., 22379.,
      23172., 24762., 25580., 26398., 27216., 20587., 21366., 22145., 22924.,
      24500., 25304., 26108., 26912., 22287., 23102., 23917., 24732., 26344.,
      27184., 28024., 28864., 23591., 24430., 25269., 26108., 27744., 28608.,
      29472., 30336., 22603., 23350., 24097., 24844., 26388., 27160., 27932.,
      28704., 20861., 21594., 22327., 23060., 24590., 25348., 26106., 26864.,
      18913., 19618., 20323., 21028., 22530., 23260., 23990., 24720., 20793.,
      21586., 22379., 23172., 24762., 25580., 26398., 27216., 20893., 21658.,
      22423., 23188., 24750., 25540., 26330., 27120.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4977.,  5492.,  6025.,  6576.,  8023.,  8860.,  9727.,  10624., 9263.,
      10092., 10951., 11840., 6777.,  7300.,  7841.,  8400.,  14959., 15852.,
      16775., 17728., 19401., 20804., 22257., 23760., 15633., 16980., 18377.,
      19824., 8711.,  9468.,  10255., 11072., 16727., 17692., 18687., 19712.,
      23233., 24756., 26329., 27952., 19401., 20804., 22257., 23760., 8303.,
      9068.,  9863.,  10688., 11001., 11652., 12321., 13008., 17007., 18028.,
      19079., 20160., 15431., 16380., 17359., 18368., 7745.,  8212.,  8697.,
      9200.,  4213.,  4700.,  5205.,  5728.,  8515.,  9348.,  10211., 11104.,
      11099., 11988., 12907., 13856., 7837.,  8396.,  8973.,  9568.,  13211.,
      14100., 15019., 15968., 17261., 18636., 20061., 21536., 16885., 18268.,
      19701., 21184., 10131., 10948., 11795., 12672., 17539., 18500., 19491.,
      20512., 22117., 23612., 25157., 26752., 17261., 18636., 20061., 21536.,
      8379.,  9140.,  9931.,  10752., 12189., 12876., 13581., 14304., 17915.,
      18932., 19979., 21056., 13459., 14340., 15251., 16192., 5765.,  6204.,
      6661.,  7136.,  3705.,  4164.,  4641.,  5136.,  9263.,  10092., 10951.,
      11840., 12935., 13884., 14863., 15872., 8897.,  9492.,  10105., 10736.,
      9607.,  10428., 11279., 12160., 15633., 16980., 18377., 19824., 18393.,
      19812., 21281., 22800., 11551., 12428., 13335., 14272., 14959., 15852.,
      16775., 17728., 19401., 20804., 22257., 23760., 15633., 16980., 18377.,
      19824., 8711.,  9468.,  10255., 11072., 12289., 12948., 13625., 14320.,
      15431., 16380., 17359., 18368., 11999., 12812., 13655., 14528., 4041.,
      4452.,  4881.,  5328.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19401., 20804., 22257., 23760., 15633., 16980., 18377., 19824.,
      23233., 24756., 26329., 27952., 19401., 20804., 22257., 23760.,
      17261., 18636., 20061., 21536., 16885., 18268., 19701., 21184.,
      22117., 23612., 25157., 26752., 17261., 18636., 20061., 21536.,
      15633., 16980., 18377., 19824., 18393., 19812., 21281., 22800.,
      19401., 20804., 22257., 23760., 15633., 16980., 18377., 19824.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8697.,  8930.,  9462.,  9704.,  10263., 10514., 11100., 11360., 10371.,
      10734., 11582., 11960., 12853., 13246., 14184., 14592., 9275.,  9630.,
      10470., 10840., 11725., 12110., 13040., 13440., 6393.,  6642.,  7174.,
      7432.,  7991.,  8258.,  8844.,  9120.,  13707., 14174., 15094., 15576.,
      16541., 17038., 18048., 18560., 22649., 23378., 24854., 25608., 27159.,
      27938., 29564., 30368., 18753., 19426., 20846., 21544., 23039., 23762.,
      25332., 26080., 12171., 12558., 13414., 13816., 14717., 15134., 16080.,
      16512., 16147., 16686., 17678., 18232., 19269., 19838., 20920., 21504.,
      22513., 23362., 24958., 25832., 27503., 28402., 30148., 31072., 22649.,
      23378., 24854., 25608., 27159., 27938., 29564., 30368., 13395., 13790.,
      14654., 15064., 15973., 16398., 17352., 17792., 10585., 10930., 11558.,
      11912., 12567., 12930., 13612., 13984., 14307., 14878., 15886., 16472.,
      17525., 18126., 19224., 19840., 11739., 12238., 13174., 13688., 14669.,
      15198., 16224., 16768., 7641.,  7874.,  8374.,  8616.,  9143.,  9394.,
      9948.,  10208., 6173.,  6378.,  6882.,  7096.,  7627.,  7850.,  8408.,
      8640.,  9567.,  9926.,  10770., 11144., 12033., 12422., 13356., 13760.,
      11095., 11510., 12410., 12840., 13785., 14230., 15220., 15680., 7453.,
      7738.,  8306.,  8600.,  9195.,  9498.,  10120., 10432., 12775., 13238.,
      14154., 14632., 15593., 16086., 17092., 17600., 20189., 20890., 22338.,
      23064., 24587., 25338., 26936., 27712., 18917., 19626., 21082., 21816.,
      23347., 24106., 25712., 26496., 13927., 14374., 15290., 15752., 16713.,
      17190., 18196., 18688., 16239., 16774., 17762., 18312., 19345., 19910.,
      20988., 21568., 22101., 22922., 24490., 25336., 26979., 27850., 29568.,
      30464., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712.,
      12527., 12918., 13778., 14184., 15089., 15510., 16460., 16896., 11645.,
      12026., 12690., 13080., 13771., 14170., 14888., 15296., 14335., 14902.,
      15906., 16488., 17537., 18134., 19228., 19840., 10167., 10598., 11466.,
      11912., 12825., 13286., 14244., 14720., 7037.,  7242.,  7714.,  7928.,
      8427.,  8650.,  9176.,  9408.,  4161.,  4338.,  4814.,  5000.,  5503.,
      5698.,  6228.,  6432.,  9275.,  9630.,  10470., 10840., 11725., 12110.,
      13040., 13440., 12915., 13390., 14350., 14840., 15845., 16350., 17400.,
      17920., 8513.,  8834.,  9438.,  9768.,  10399., 10738., 11396., 11744.,
      12291., 12686., 13534., 13944., 14837., 15262., 16200., 16640., 18753.,
      19426., 20846., 21544., 23039., 23762., 25332., 26080., 19593., 20338.,
      21830., 22600., 24167., 24962., 26604., 27424., 15683., 16190., 17166.,
      17688., 18709., 19246., 20312., 20864., 13707., 14174., 15094., 15576.,
      16541., 17038., 18048., 18560., 22649., 23378., 24854., 25608., 27159.,
      27938., 29564., 30368., 18753., 19426., 20846., 21544., 23039., 23762.,
      25332., 26080., 12171., 12558., 13414., 13816., 14717., 15134., 16080.,
      16512., 10593., 10946., 11582., 11944., 12607., 12978., 13668., 14048.,
      11739., 12238., 13174., 13688., 14669., 15198., 16224., 16768., 9619.,
      9982.,  10782., 11160., 12005., 12398., 13288., 13696., 6945.,  7122.,
      7566.,  7752.,  8223.,  8418.,  8916.,  9120.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 18753.,
      19426., 20846., 21544., 23039., 23762., 25332., 26080., 22513., 23362.,
      24958., 25832., 27503., 28402., 30148., 31072., 22649., 23378., 24854.,
      25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064.,
      24587., 25338., 26936., 27712., 18917., 19626., 21082., 21816., 23347.,
      24106., 25712., 26496., 22101., 22922., 24490., 25336., 26979., 27850.,
      29568., 30464., 20189., 20890., 22338., 23064., 24587., 25338., 26936.,
      27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080.,
      19593., 20338., 21830., 22600., 24167., 24962., 26604., 27424., 22649.,
      23378., 24854., 25608., 27159., 27938., 29564., 30368., 18753., 19426.,
      20846., 21544., 23039., 23762., 25332., 26080.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8649.,  8882.,  9115.,  9348.,  9850.,  10092., 10334., 10576., 11123.,
      11374., 11625., 11876., 12468., 12728., 12988., 13248., 8091.,  8454.,
      8817.,  9180.,  9986.,  10364., 10742., 11120., 12001., 12394., 12787.,
      13180., 14136., 14544., 14952., 15360., 10003., 10358., 10713., 11068.,
      11866., 12236., 12606., 12976., 13849., 14234., 14619., 15004., 15952.,
      16352., 16752., 17152., 5561.,  5810.,  6059.,  6308.,  6794.,  7052.,
      7310.,  7568.,  8099.,  8366.,  8633.,  8900.,  9476.,  9752.,  10028.,
      10304., 10371., 10838., 11305., 11772., 12682., 13164., 13646., 14128.,
      15113., 15610., 16107., 16604., 17664., 18176., 18688., 19200., 20761.,
      21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974.,
      29753., 30532., 32212., 33016., 33820., 34624., 15073., 15746., 16419.,
      17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228.,
      25852., 26600., 27348., 28096., 10131., 10518., 10905., 11292., 12090.,
      12492., 12894., 13296., 14169., 14586., 15003., 15420., 16368., 16800.,
      17232., 17664., 14667., 15206., 15745., 16284., 17266., 17820., 18374.,
      18928., 19985., 20554., 21123., 21692., 22824., 23408., 23992., 24576.,
      18321., 19170., 20019., 20868., 22418., 23292., 24166., 25040., 26715.,
      27614., 28513., 29412., 31212., 32136., 33060., 33984., 20761., 21490.,
      22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753.,
      30532., 32212., 33016., 33820., 34624., 8475.,  8870.,  9265.,  9660.,
      10466., 10876., 11286., 11696., 12577., 13002., 13427., 13852., 14808.,
      15248., 15688., 16128., 7705.,  8050.,  8395.,  8740.,  9322.,  9676.,
      10030., 10384., 11011., 11374., 11737., 12100., 12772., 13144., 13516.,
      13888., 14539., 15110., 15681., 16252., 17234., 17820., 18406., 18992.,
      20049., 20650., 21251., 21852., 22984., 23600., 24216., 24832., 9987.,
      10486., 10985., 11484., 12394., 12908., 13422., 13936., 14921., 15450.,
      15979., 16508., 17568., 18112., 18656., 19200., 8649.,  8882.,  9115.,
      9348.,  9850.,  10092., 10334., 10576., 11123., 11374., 11625., 11876.,
      12468., 12728., 12988., 13248., 6445.,  6650.,  6855.,  7060.,  7534.,
      7748.,  7962.,  8176.,  8695.,  8918.,  9141.,  9364.,  9928.,  10160.,
      10392., 10624., 8535.,  8894.,  9253.,  9612.,  10414., 10788., 11162.,
      11536., 12413., 12802., 13191., 13580., 14532., 14936., 15340., 15744.,
      11535., 11950., 12365., 12780., 13638., 14068., 14498., 14928., 15861.,
      16306., 16751., 17196., 18204., 18664., 19124., 19584., 6365.,  6650.,
      6935.,  7220.,  7742.,  8036.,  8330.,  8624.,  9191.,  9494.,  9797.,
      10100., 10712., 11024., 11336., 11648., 10815., 11278., 11741., 12204.,
      13110., 13588., 14066., 14544., 15525., 16018., 16511., 17004., 18060.,
      18568., 19076., 19584., 16893., 17594., 18295., 18996., 20398., 21124.,
      21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560.,
      30336., 16389., 17098., 17807., 18516., 19926., 20660., 21394., 22128.,
      23663., 24422., 25181., 25940., 27600., 28384., 29168., 29952., 11535.,
      11982., 12429., 12876., 13734., 14196., 14658., 15120., 16053., 16530.,
      17007., 17484., 18492., 18984., 19476., 19968., 13063., 13598., 14133.,
      14668., 15646., 16196., 16746., 17296., 18349., 18914., 19479., 20044.,
      21172., 21752., 22332., 22912., 18549., 19370., 20191., 21012., 22534.,
      23380., 24226., 25072., 26719., 27590., 28461., 29332., 31104., 32000.,
      32896., 33792., 16893., 17594., 18295., 18996., 20398., 21124., 21850.,
      22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336.,
      8791.,  9182.,  9573.,  9964.,  10766., 11172., 11578., 11984., 12861.,
      13282., 13703., 14124., 15076., 15512., 15948., 16384., 8509.,  8890.,
      9271.,  9652.,  10270., 10660., 11050., 11440., 12103., 12502., 12901.,
      13300., 14008., 14416., 14824., 15232., 12807., 13374., 13941., 14508.,
      15486., 16068., 16650., 17232., 18285., 18882., 19479., 20076., 21204.,
      21816., 22428., 23040., 9215.,  9646.,  10077., 10508., 11350., 11796.,
      12242., 12688., 13605., 14066., 14527., 14988., 15980., 16456., 16932.,
      17408., 6445.,  6650.,  6855.,  7060.,  7534.,  7748.,  7962.,  8176.,
      8695.,  8918.,  9141.,  9364.,  9928.,  10160., 10392., 10624., 5265.,
      5442.,  5619.,  5796.,  6242.,  6428.,  6614.,  6800.,  7291.,  7486.,
      7681.,  7876.,  8412.,  8616.,  8820.,  9024.,  10003., 10358., 10713.,
      11068., 11866., 12236., 12606., 12976., 13849., 14234., 14619., 15004.,
      15952., 16352., 16752., 17152., 13067., 13542., 14017., 14492., 15410.,
      15900., 16390., 16880., 17873., 18378., 18883., 19388., 20456., 20976.,
      21496., 22016., 7169.,  7490.,  7811.,  8132.,  8690.,  9020.,  9350.,
      9680.,  10283., 10622., 10961., 11300., 11948., 12296., 12644., 12992.,
      12219., 12614., 13009., 13404., 14242., 14652., 15062., 15472., 16385.,
      16810., 17235., 17660., 18648., 19088., 19528., 19968., 15073., 15746.,
      16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505.,
      24228., 25852., 26600., 27348., 28096., 18729., 19474., 20219., 20964.,
      22410., 23180., 23950., 24720., 26291., 27086., 27881., 28676., 30372.,
      31192., 32012., 32832., 12939., 13446., 13953., 14460., 15378., 15900.,
      16422., 16944., 17937., 18474., 19011., 19548., 20616., 21168., 21720.,
      22272., 10371., 10838., 11305., 11772., 12682., 13164., 13646., 14128.,
      15113., 15610., 16107., 16604., 17664., 18176., 18688., 19200., 20761.,
      21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974.,
      29753., 30532., 32212., 33016., 33820., 34624., 15073., 15746., 16419.,
      17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228.,
      25852., 26600., 27348., 28096., 10131., 10518., 10905., 11292., 12090.,
      12492., 12894., 13296., 14169., 14586., 15003., 15420., 16368., 16800.,
      17232., 17664., 9249.,  9602.,  9955.,  10308., 10898., 11260., 11622.,
      11984., 12619., 12990., 13361., 13732., 14412., 14792., 15172., 15552.,
      9987.,  10486., 10985., 11484., 12394., 12908., 13422., 13936., 14921.,
      15450., 15979., 16508., 17568., 18112., 18656., 19200., 10491., 10854.,
      11217., 11580., 12354., 12732., 13110., 13488., 14337., 14730., 15123.,
      15516., 16440., 16848., 17256., 17664., 5265.,  5442.,  5619.,  5796.,
      6242.,  6428.,  6614.,  6800.,  7291.,  7486.,  7681.,  7876.,  8412.,
      8616.,  8820.,  9024.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195.,
      28974., 29753., 30532., 32212., 33016., 33820., 34624., 15073., 15746.,
      16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505.,
      24228., 25852., 26600., 27348., 28096., 18321., 19170., 20019., 20868.,
      22418., 23292., 24166., 25040., 26715., 27614., 28513., 29412., 31212.,
      32136., 33060., 33984., 20761., 21490., 22219., 22948., 24378., 25132.,
      25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820.,
      34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576.,
      24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 16389.,
      17098., 17807., 18516., 19926., 20660., 21394., 22128., 23663., 24422.,
      25181., 25940., 27600., 28384., 29168., 29952., 18549., 19370., 20191.,
      21012., 22534., 23380., 24226., 25072., 26719., 27590., 28461., 29332.,
      31104., 32000., 32896., 33792., 16893., 17594., 18295., 18996., 20398.,
      21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784.,
      29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862.,
      20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096.,
      18729., 19474., 20219., 20964., 22410., 23180., 23950., 24720., 26291.,
      27086., 27881., 28676., 30372., 31192., 32012., 32832., 20761., 21490.,
      22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753.,
      30532., 32212., 33016., 33820., 34624., 15073., 15746., 16419., 17092.,
      18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852.,
      26600., 27348., 28096.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2666.,  3670.,  4210.,  2541.,  6620.,  8550.,  9200.,  5350.,
      10940., 13750., 14400., 8230.,  4670.,  5710.,  5950.,  3207.,
      15098., 18790., 19330., 11109., 21740., 26750., 27400., 15430.,
      26060., 31950., 32600., 18310., 10382., 12430., 12670., 6735.,
      27530., 33910., 34450., 19677., 36860., 44950., 45600., 25510.,
      41180., 50150., 50800., 28390., 16094., 19150., 19390., 10263.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {8225.,  8875.,  13425., 14075.,
                                         26425., 27075., 31625., 32275.,
                                         44625., 45275., 49825., 50475.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5206.,  5332.,  7160.,  7340.,  8210.,  8420.,  4947.,  5082.,  12870.,
      13240., 16600., 17100., 17850., 18400., 10355., 10700., 21190., 21880.,
      26600., 27500., 27850., 28800., 15875., 16460., 8830.,  9340.,  10760.,
      11420., 11210., 11900., 5991.,  6414.,  29398., 30196., 36560., 37580.,
      37610., 38660., 21579., 22218., 41990., 43480., 51600., 53500., 52850.,
      54800., 29675., 30860., 50310., 52120., 61600., 63900., 62850., 65200.,
      35195., 36620., 19582., 20764., 23360., 24860., 23810., 25340., 12543.,
      13470., 30038., 30996., 37160., 38380., 38210., 39460., 21699., 22458.,
      15814., 16888., 19400., 20780., 20650., 22080., 10979., 11852., 12870.,
      13240., 16600., 17100., 17850., 18400., 10355., 10700., 5758.,  6076.,
      7160.,  7580.,  7610.,  8060.,  4119.,  4398.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15975., 16450., 17225., 17750., 25975., 26850., 27225., 28150.,
      50975., 52850., 52225., 54150., 60975., 63250., 62225., 64550.,
      18775., 20130., 20025., 21430., 15975., 16450., 17225., 17750.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2862.,  2988.,  3114.,  3240.,  4540.,  4720.,  4900.,  5080.,  5458.,
      5668.,  5878.,  6088.,  3359.,  3494.,  3629.,  3764.,  9754.,  10124.,
      10494., 10864., 13884., 14384., 14884., 15384., 15182., 15732., 16282.,
      16832., 8845.,  9190.,  9535.,  9880.,  17882., 18572., 19262., 19952.,
      24268., 25168., 26068., 26968., 25566., 26516., 27466., 28416., 14525.,
      15110., 15695., 16280., 17150., 17660., 18170., 18680., 20860., 21520.,
      22180., 22840., 21730., 22420., 23110., 23800., 11559., 11982., 12405.,
      12828., 13198., 13484., 13770., 14056., 16548., 16928., 17308., 17688.,
      17466., 17876., 18286., 18696., 9879.,  10134., 10389., 10644., 8506.,
      8972.,  9438.,  9904.,  11572., 12192., 12812., 13432., 12870., 13540.,
      14210., 14880., 6965.,  7382.,  7799.,  8216.,  13818., 14348., 14878.,
      15408., 19076., 19776., 20476., 21176., 20374., 21124., 21874., 22624.,
      11685., 12150., 12615., 13080., 14174., 14588., 15002., 15416., 17380.,
      17920., 18460., 19000., 18250., 18820., 19390., 19960., 9759.,  10110.,
      10461., 10812., 12270., 12716., 13162., 13608., 18572., 19152., 19732.,
      20312., 19490., 20100., 20710., 21320., 12047., 12422., 12797., 13172.,
      12378., 12940., 13502., 14064., 15660., 16400., 17140., 17880., 16958.,
      17748., 18538., 19328., 8925.,  9414.,  9903.,  10392., 9754.,  10124.,
      10494., 10864., 13884., 14384., 14884., 15384., 15182., 15732., 16282.,
      16832., 8845.,  9190.,  9535.,  9880.,  11198., 11516., 11834., 12152.,
      13900., 14320., 14740., 15160., 14770., 15220., 15670., 16120., 7959.,
      8238.,  8517.,  8796.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13235., 13710., 14185., 14660., 14533., 15058., 15583., 16108.,
      23619., 24494., 25369., 26244., 24917., 25842., 26767., 27692.,
      10923., 11518., 12113., 12708., 12221., 12866., 13511., 14156.,
      18427., 19102., 19777., 20452., 19725., 20450., 21175., 21900.,
      15011., 15726., 16441., 17156., 16309., 17074., 17839., 18604.,
      13235., 13710., 14185., 14660., 14533., 15058., 15583., 16108.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9980.,  10664., 13795., 14680., 15895., 16840., 9597.,  10164., 25220.,
      26480., 32575., 34200., 35075., 36800., 20365., 21400., 41860., 43760.,
      52575., 55000., 55075., 57600., 31405., 32920., 17468., 18680., 21295.,
      22840., 22195., 23800., 11865., 12828., 16380., 17384., 21395., 22680.,
      23495., 24840., 13677., 14484., 19972., 21424., 25775., 27640., 28275.,
      30240., 15997., 17176., 33540., 35120., 42575., 44600., 45075., 47200.,
      25885., 27160., 14396., 15416., 17695., 19000., 18595., 19960., 9993.,
      10812., 27900., 29224., 35395., 37080., 37495., 39240., 21597., 22644.,
      19844., 21488., 25375., 27480., 27875., 30080., 15469., 16792., 25220.,
      26480., 32575., 34200., 35075., 36800., 20365., 21400., 11324., 12152.,
      14095., 15160., 14995., 16120., 8121.,  8796.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31325., 32900., 33825., 35500., 51325., 53700., 53825., 56300.,
      24525., 26340., 27025., 28940., 41325., 43300., 43825., 45900.,
      24125., 26180., 26625., 28780., 31325., 32900., 33825., 35500.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5384.,  5624.,  6228.,  6480.,  8621.,  8966.,  9800.,  10160., 10457.,
      10862., 11756., 12176., 6453.,  6714.,  7258.,  7528.,  12088., 12552.,
      13564., 14048., 19119., 19774., 21128., 21808., 21715., 22470., 23924.,
      24704., 13303., 13786., 14654., 15152., 13496., 14088., 15228., 15840.,
      18511., 19326., 20840., 21680., 21107., 22022., 23636., 24576., 11735.,
      12314., 13278., 13872., 10120., 10360., 10996., 11248., 13445., 13790.,
      14600., 14960., 15185., 15590., 16460., 16880., 8493.,  8754.,  9258.,
      9528.,  13000., 13304., 13972., 14288., 16957., 17382., 18296., 18736.,
      18793., 19278., 20252., 20752., 10853., 11162., 11754., 12072., 13688.,
      14344., 15548., 16224., 19615., 20510., 22104., 23024., 22211., 23206.,
      24900., 25920., 12615., 13242., 14254., 14896., 18424., 18952., 20028.,
      20576., 23807., 24542., 25976., 26736., 26403., 27238., 28772., 29632.,
      14695., 15226., 16142., 16688., 6984.,  7288.,  7988.,  8304.,  9365.,
      9790.,  10680., 11120., 11105., 11590., 12540., 13040., 5853.,  6162.,
      6714.,  7032.,  9352.,  9720.,  10452., 10832., 15309., 15814., 16808.,
      17328., 17145., 17710., 18764., 19344., 10901., 11258., 11898., 12264.,
      13496., 14088., 15228., 15840., 18511., 19326., 20840., 21680., 21107.,
      22022., 23636., 24576., 11735., 12314., 13278., 13872., 12088., 12552.,
      13564., 14048., 19119., 19774., 21128., 21808., 21715., 22470., 23924.,
      24704., 13303., 13786., 14654., 15152., 8968.,  9336.,  10100., 10480.,
      11685., 12190., 13160., 13680., 13425., 13990., 15020., 15600., 7053.,
      7410.,  8010.,  8376.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17821., 18426., 19730., 20360., 20417., 21122., 22526., 23256.,
      17213., 17978., 19442., 20232., 19809., 20674., 22238., 23128.,
      18317., 19162., 20706., 21576., 20913., 21858., 23502., 24472.,
      22509., 23194., 24578., 25288., 25105., 25890., 27374., 28184.,
      17213., 17978., 19442., 20232., 19809., 20674., 22238., 23128.,
      17821., 18426., 19730., 20360., 20417., 21122., 22526., 23256.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7008.,  7248.,  7488.,  7728.,  8364.,  8616.,  8868.,  9120.,  10689.,
      11034., 11379., 11724., 12584., 12944., 13304., 13664., 12509., 12914.,
      13319., 13724., 14644., 15064., 15484., 15904., 8421.,  8682.,  8943.,
      9204.,  9766.,  10036., 10306., 10576., 11232., 11696., 12160., 12624.,
      13716., 14200., 14684., 15168., 17807., 18462., 19117., 19772., 21224.,
      21904., 22584., 23264., 20595., 21350., 22105., 22860., 24412., 25192.,
      25972., 26752., 13707., 14190., 14673., 15156., 16138., 16636., 17134.,
      17632., 15968., 16560., 17152., 17744., 18964., 19576., 20188., 20800.,
      22575., 23390., 24205., 25020., 26632., 27472., 28312., 29152., 25363.,
      26278., 27193., 28108., 29820., 30760., 31700., 32640., 18667., 19246.,
      19825., 20404., 21482., 22076., 22670., 23264., 7968.,  8208.,  8448.,
      8688.,  9324.,  9576.,  9828.,  10080., 10737., 11082., 11427., 11772.,
      12584., 12944., 13304., 13664., 12365., 12770., 13175., 13580., 14452.,
      14872., 15292., 15712., 8085.,  8346.,  8607.,  8868.,  9414.,  9684.,
      9954.,  10224., 10912., 11216., 11520., 11824., 12524., 12840., 13156.,
      13472., 13969., 14394., 14819., 15244., 16184., 16624., 17064., 17504.,
      15789., 16274., 16759., 17244., 18244., 18744., 19244., 19744., 8981.,
      9290.,  9599.,  9908.,  10518., 10836., 11154., 11472., 17312., 17968.,
      18624., 19280., 20564., 21240., 21916., 22592., 23679., 24574., 25469.,
      26364., 28056., 28976., 29896., 30816., 26467., 27462., 28457., 29452.,
      31244., 32264., 33284., 34304., 16283., 16910., 17537., 18164., 19290.,
      19932., 20574., 21216., 16672., 17200., 17728., 18256., 19412., 19960.,
      20508., 21056., 21983., 22718., 23453., 24188., 25720., 26480., 27240.,
      28000., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488.,
      16443., 16974., 17505., 18036., 19066., 19612., 20158., 20704., 7776.,
      8080.,  8384.,  8688.,  9388.,  9704.,  10020., 10336., 9665.,  10090.,
      10515., 10940., 11832., 12272., 12712., 13152., 11293., 11778., 12263.,
      12748., 13700., 14200., 14700., 15200., 5829.,  6138.,  6447.,  6756.,
      7350.,  7668.,  7986.,  8304.,  8672.,  9040.,  9408.,  9776.,  10540.,
      10920., 11300., 11680., 13665., 14170., 14675., 15180., 16200., 16720.,
      17240., 17760., 15485., 16050., 16615., 17180., 18260., 18840., 19420.,
      20000., 9029.,  9386.,  9743.,  10100., 10758., 11124., 11490., 11856.,
      15968., 16560., 17152., 17744., 18964., 19576., 20188., 20800., 22575.,
      23390., 24205., 25020., 26632., 27472., 28312., 29152., 25363., 26278.,
      27193., 28108., 29820., 30760., 31700., 32640., 18667., 19246., 19825.,
      20404., 21482., 22076., 22670., 23264., 11232., 11696., 12160., 12624.,
      13716., 14200., 14684., 15168., 17807., 18462., 19117., 19772., 21224.,
      21904., 22584., 23264., 20595., 21350., 22105., 22860., 24412., 25192.,
      25972., 26752., 13707., 14190., 14673., 15156., 16138., 16636., 17134.,
      17632., 9632.,  10000., 10368., 10736., 11500., 11880., 12260., 12640.,
      13201., 13706., 14211., 14716., 15688., 16208., 16728., 17248., 14829.,
      15394., 15959., 16524., 17556., 18136., 18716., 19296., 11253., 11610.,
      11967., 12324., 12966., 13332., 13698., 14064.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 19201.,
      19906., 20611., 21316., 22818., 23548., 24278., 25008., 21181., 21946.,
      22711., 23476., 25038., 25828., 26618., 27408., 23969., 24834., 25699.,
      26564., 28226., 29116., 30006., 30896., 22285., 23130., 23975., 24820.,
      26462., 27332., 28202., 29072., 25073., 26018., 26963., 27908., 29650.,
      30620., 31590., 32560., 20589., 21274., 21959., 22644., 24126., 24836.,
      25546., 26256., 23377., 24162., 24947., 25732., 27314., 28124., 28934.,
      29744., 21181., 21946., 22711., 23476., 25038., 25828., 26618., 27408.,
      23969., 24834., 25699., 26564., 28226., 29116., 30006., 30896., 16413.,
      17018., 17623., 18228., 19630., 20260., 20890., 21520., 19201., 19906.,
      20611., 21316., 22818., 23548., 24278., 25008.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3516.,  4080.,  4668.,  5280.,  8783.,  9612.,  10471., 11360., 12455.,
      13404., 14383., 15392., 8609.,  9204.,  9817.,  10448., 8820.,  9744.,
      10708., 11712., 16213., 17532., 18901., 20320., 21405., 22924., 24493.,
      26112., 13323., 14260., 15227., 16224., 8820.,  9744.,  10708., 11712.,
      16213., 17532., 18901., 20320., 21405., 22924., 24493., 26112., 13323.,
      14260., 15227., 16224., 6812.,  7408.,  8028.,  8672.,  10775., 11580.,
      12415., 13280., 14255., 15180., 16135., 17120., 8121.,  8676.,  9249.,
      9840.,  12604., 13296., 14012., 14752., 17775., 18764., 19783., 20832.,
      21447., 22556., 23695., 24864., 12801., 13492., 14201., 14928., 15348.,
      16400., 17492., 18624., 22005., 23484., 25013., 26592., 27197., 28876.,
      30605., 32384., 15595., 16628., 17691., 18784., 15348., 16400., 17492.,
      18624., 22005., 23484., 25013., 26592., 27197., 28876., 30605., 32384.,
      15595., 16628., 17691., 18784., 10780., 11504., 12252., 13024., 15415.,
      16380., 17375., 18400., 18895., 19980., 21095., 22240., 10521., 11172.,
      11841., 12528., 3516.,  4080.,  4668.,  5280.,  8783.,  9612.,  10471.,
      11360., 12455., 13404., 14383., 15392., 8609.,  9204.,  9817.,  10448.,
      8820.,  9744.,  10708., 11712., 16213., 17532., 18901., 20320., 21405.,
      22924., 24493., 26112., 13323., 14260., 15227., 16224., 8820.,  9744.,
      10708., 11712., 16213., 17532., 18901., 20320., 21405., 22924., 24493.,
      26112., 13323., 14260., 15227., 16224., 6812.,  7408.,  8028.,  8672.,
      10775., 11580., 12415., 13280., 14255., 15180., 16135., 17120., 8121.,
      8676.,  9249.,  9840.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13617., 14836., 16105., 17424., 18809., 20228., 21697., 23216.,
      13617., 14836., 16105., 17424., 18809., 20228., 21697., 23216.,
      19409., 20788., 22217., 23696., 24601., 26180., 27809., 29488.,
      19409., 20788., 22217., 23696., 24601., 26180., 27809., 29488.,
      13617., 14836., 16105., 17424., 18809., 20228., 21697., 23216.,
      13617., 14836., 16105., 17424., 18809., 20228., 21697., 23216.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4196.,  4408.,  4992.,  5216.,  5836.,  6072.,  6728.,  6976.,  9339.,
      9694.,  10534., 10904., 11789., 12174., 13104., 13504., 12979., 13454.,
      14414., 14904., 15909., 16414., 17464., 17984., 8705.,  9026.,  9630.,
      9960.,  10591., 10930., 11588., 11936., 9116.,  9512.,  10496., 10912.,
      11956., 12392., 13496., 13952., 17381., 18026., 19418., 20088., 21555.,
      22250., 23792., 24512., 22957., 23802., 25394., 26264., 27931., 28826.,
      30568., 31488., 17887., 18454., 19490., 20072., 21153., 21750., 22876.,
      23488., 9116.,  9512.,  10496., 10912., 11956., 12392., 13496., 13952.,
      17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 22957.,
      23802., 25394., 26264., 27931., 28826., 30568., 31488., 17887., 18454.,
      19490., 20072., 21153., 21750., 22876., 23488., 6116.,  6328.,  6912.,
      7136.,  7756.,  7992.,  8648.,  8896.,  10507., 10862., 11654., 12024.,
      12861., 13246., 14128., 14528., 13763., 14238., 15150., 15640., 16597.,
      17102., 18104., 18624., 11121., 11442., 12030., 12360., 12975., 13314.,
      13956., 14304., 12004., 12344., 13056., 13408., 14156., 14520., 15304.,
      15680., 16923., 17438., 18438., 18968., 20013., 20558., 21648., 22208.,
      20563., 21198., 22318., 22968., 24133., 24798., 26008., 26688., 12897.,
      13314., 14014., 14440., 15167., 15602., 16356., 16800., 15900., 16424.,
      17536., 18080., 19252., 19816., 21048., 21632., 22661., 23466., 25018.,
      25848., 27475., 28330., 30032., 30912., 28237., 29242., 30994., 32024.,
      33851., 34906., 36808., 37888., 18239., 18902., 20034., 20712., 21889.,
      22582., 23804., 24512., 15900., 16424., 17536., 18080., 19252., 19816.,
      21048., 21632., 22661., 23466., 25018., 25848., 27475., 28330., 30032.,
      30912., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888.,
      18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512., 9828.,
      10168., 10880., 11232., 11980., 12344., 13128., 13504., 13483., 13998.,
      14950., 15480., 16477., 17022., 18064., 18624., 16739., 17374., 18446.,
      19096., 20213., 20878., 22040., 22720., 9681.,  10098., 10782., 11208.,
      11919., 12354., 13092., 13536., 4196.,  4408.,  4992.,  5216.,  5836.,
      6072.,  6728.,  6976.,  9339.,  9694.,  10534., 10904., 11789., 12174.,
      13104., 13504., 12979., 13454., 14414., 14904., 15909., 16414., 17464.,
      17984., 8705.,  9026.,  9630.,  9960.,  10591., 10930., 11588., 11936.,
      9116.,  9512.,  10496., 10912., 11956., 12392., 13496., 13952., 17381.,
      18026., 19418., 20088., 21555., 22250., 23792., 24512., 22957., 23802.,
      25394., 26264., 27931., 28826., 30568., 31488., 17887., 18454., 19490.,
      20072., 21153., 21750., 22876., 23488., 9116.,  9512.,  10496., 10912.,
      11956., 12392., 13496., 13952., 17381., 18026., 19418., 20088., 21555.,
      22250., 23792., 24512., 22957., 23802., 25394., 26264., 27931., 28826.,
      30568., 31488., 17887., 18454., 19490., 20072., 21153., 21750., 22876.,
      23488., 6116.,  6328.,  6912.,  7136.,  7756.,  7992.,  8648.,  8896.,
      10507., 10862., 11654., 12024., 12861., 13246., 14128., 14528., 13763.,
      14238., 15150., 15640., 16597., 17102., 18104., 18624., 11121., 11442.,
      12030., 12360., 12975., 13314., 13956., 14304.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 20169.,
      20914., 22406., 23176., 24743., 25538., 27180., 28000., 14593., 15138.,
      16430., 17000., 18367., 18962., 20404., 21024., 20169., 20914., 22406.,
      23176., 24743., 25538., 27180., 28000., 19873., 20578., 22030., 22760.,
      24287., 25042., 26644., 27424., 25449., 26354., 28006., 28936., 30663.,
      31618., 33420., 34400., 19873., 20578., 22030., 22760., 24287., 25042.,
      26644., 27424., 25449., 26354., 28006., 28936., 30663., 31618., 33420.,
      34400., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024.,
      20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 14593.,
      15138., 16430., 17000., 18367., 18962., 20404., 21024., 20169., 20914.,
      22406., 23176., 24743., 25538., 27180., 28000.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5492.,  5704.,  5916.,  6128.,  6688.,  6912.,  7136.,  7360.,  7980.,
      8216.,  8452.,  8688.,  9368.,  9616.,  9864.,  10112., 9875.,  10230.,
      10585., 10940., 11738., 12108., 12478., 12848., 13721., 14106., 14491.,
      14876., 15824., 16224., 16624., 17024., 12939., 13414., 13889., 14364.,
      15282., 15772., 16262., 16752., 17745., 18250., 18755., 19260., 20328.,
      20848., 21368., 21888., 7041.,  7362.,  7683.,  8004.,  8562.,  8892.,
      9222.,  9552.,  10155., 10494., 10833., 11172., 11820., 12168., 12516.,
      12864., 9836.,  10232., 10628., 11024., 12000., 12416., 12832., 13248.,
      14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 16453.,
      17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910.,
      24605., 25300., 26896., 27616., 28336., 29056., 21261., 22106., 22951.,
      23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308.,
      34104., 35024., 35944., 36864., 14215., 14782., 15349., 15916., 16894.,
      17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224.,
      23836., 24448., 9836.,  10232., 10628., 11024., 12000., 12416., 12832.,
      13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176.,
      16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215.,
      23910., 24605., 25300., 26896., 27616., 28336., 29056., 21261., 22106.,
      22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413.,
      32308., 34104., 35024., 35944., 36864., 14215., 14782., 15349., 15916.,
      16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612.,
      23224., 23836., 24448., 4980.,  5192.,  5404.,  5616.,  6176.,  6400.,
      6624.,  6848.,  7468.,  7704.,  7940.,  8176.,  8856.,  9104.,  9352.,
      9600.,  8179.,  8534.,  8889.,  9244.,  10010., 10380., 10750., 11120.,
      11961., 12346., 12731., 13116., 14032., 14432., 14832., 15232., 10987.,
      11462., 11937., 12412., 13298., 13788., 14278., 14768., 15729., 16234.,
      16739., 17244., 18280., 18800., 19320., 19840., 9121.,  9442.,  9763.,
      10084., 10674., 11004., 11334., 11664., 12299., 12638., 12977., 13316.,
      13996., 14344., 14692., 15040., 8692.,  9032.,  9372.,  9712.,  10400.,
      10752., 11104., 11456., 12204., 12568., 12932., 13296., 14104., 14480.,
      14856., 15232., 12595., 13110., 13625., 14140., 15098., 15628., 16158.,
      16688., 17721., 18266., 18811., 19356., 20464., 21024., 21584., 22144.,
      15659., 16294., 16929., 17564., 18642., 19292., 19942., 20592., 21745.,
      22410., 23075., 23740., 24968., 25648., 26328., 27008., 9185.,  9602.,
      10019., 10436., 11090., 11516., 11942., 12368., 13067., 13502., 13937.,
      14372., 15116., 15560., 16004., 16448., 13036., 13560., 14084., 14608.,
      15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544.,
      22128., 22712., 23296., 18661., 19466., 20271., 21076., 22582., 23412.,
      24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784.,
      33664., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280.,
      33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 14823.,
      15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069., 21762.,
      22455., 23148., 24372., 25080., 25788., 26496., 13036., 13560., 14084.,
      14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240.,
      21544., 22128., 22712., 23296., 18661., 19466., 20271., 21076., 22582.,
      23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904.,
      32784., 33664., 23469., 24474., 25479., 26484., 28190., 29220., 30250.,
      31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472.,
      14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069.,
      21762., 22455., 23148., 24372., 25080., 25788., 26496., 8180.,  8520.,
      8860.,  9200.,  9888.,  10240., 10592., 10944., 11692., 12056., 12420.,
      12784., 13592., 13968., 14344., 14720., 11923., 12438., 12953., 13468.,
      14394., 14924., 15454., 15984., 16985., 17530., 18075., 18620., 19696.,
      20256., 20816., 21376., 14731., 15366., 16001., 16636., 17682., 18332.,
      18982., 19632., 20753., 21418., 22083., 22748., 23944., 24624., 25304.,
      25984., 10241., 10658., 11075., 11492., 12178., 12604., 13030., 13456.,
      14187., 14622., 15057., 15492., 16268., 16712., 17156., 17600., 5492.,
      5704.,  5916.,  6128.,  6688.,  6912.,  7136.,  7360.,  7980.,  8216.,
      8452.,  8688.,  9368.,  9616.,  9864.,  10112., 9875.,  10230., 10585.,
      10940., 11738., 12108., 12478., 12848., 13721., 14106., 14491., 14876.,
      15824., 16224., 16624., 17024., 12939., 13414., 13889., 14364., 15282.,
      15772., 16262., 16752., 17745., 18250., 18755., 19260., 20328., 20848.,
      21368., 21888., 7041.,  7362.,  7683.,  8004.,  8562.,  8892.,  9222.,
      9552.,  10155., 10494., 10833., 11172., 11820., 12168., 12516., 12864.,
      9836.,  10232., 10628., 11024., 12000., 12416., 12832., 13248., 14324.,
      14760., 15196., 15632., 16808., 17264., 17720., 18176., 16453., 17098.,
      17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605.,
      25300., 26896., 27616., 28336., 29056., 21261., 22106., 22951., 23796.,
      25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104.,
      35024., 35944., 36864., 14215., 14782., 15349., 15916., 16894., 17476.,
      18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224., 23836.,
      24448., 9836.,  10232., 10628., 11024., 12000., 12416., 12832., 13248.,
      14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 16453.,
      17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910.,
      24605., 25300., 26896., 27616., 28336., 29056., 21261., 22106., 22951.,
      23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308.,
      34104., 35024., 35944., 36864., 14215., 14782., 15349., 15916., 16894.,
      17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224.,
      23836., 24448., 4980.,  5192.,  5404.,  5616.,  6176.,  6400.,  6624.,
      6848.,  7468.,  7704.,  7940.,  8176.,  8856.,  9104.,  9352.,  9600.,
      8179.,  8534.,  8889.,  9244.,  10010., 10380., 10750., 11120., 11961.,
      12346., 12731., 13116., 14032., 14432., 14832., 15232., 10987., 11462.,
      11937., 12412., 13298., 13788., 14278., 14768., 15729., 16234., 16739.,
      17244., 18280., 18800., 19320., 19840., 9121.,  9442.,  9763.,  10084.,
      10674., 11004., 11334., 11664., 12299., 12638., 12977., 13316., 13996.,
      14344., 14692., 15040.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011.,
      20606., 21201., 21796., 23292., 23912., 24532., 25152., 18857., 19602.,
      20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009.,
      28804., 30500., 31320., 32140., 32960., 14049., 14594., 15139., 15684.,
      16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292.,
      23912., 24532., 25152., 18857., 19602., 20347., 21092., 22538., 23308.,
      24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140.,
      32960., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968.,
      23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 21065.,
      21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862.,
      31817., 32772., 34628., 35608., 36588., 37568., 16257., 16962., 17667.,
      18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764.,
      27420., 28200., 28980., 29760., 21065., 21970., 22875., 23780., 25386.,
      26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608.,
      36588., 37568., 14049., 14594., 15139., 15684., 16930., 17500., 18070.,
      18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152.,
      18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419.,
      27214., 28009., 28804., 30500., 31320., 32140., 32960., 14049., 14594.,
      15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201.,
      21796., 23292., 23912., 24532., 25152., 18857., 19602., 20347., 21092.,
      22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500.,
      31320., 32140., 32960.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3190.,  4310.,  4850.,  5390.,  3213.,  8100.,  10350., 11000., 11650.,
      6730.,  13500., 16850., 17500., 18150., 10330., 5770.,  7010.,  7250.,
      7490.,  4023.,  18730., 23210., 23750., 24290., 13923., 27000., 33100.,
      33750., 34400., 19330., 32400., 39600., 40250., 40900., 22930., 12910.,
      15410., 15650., 15890., 8433.,  34270., 42110., 42650., 43190., 24633.,
      45900., 55850., 56500., 57150., 31930., 51300., 62350., 63000., 63650.,
      35530., 20050., 23810., 24050., 24290., 12843.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10025., 10675., 11325., 16525., 17175., 17825., 32775., 33425., 34075.,
      39275., 39925., 40575., 55525., 56175., 56825., 62025., 62675., 63325.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6230.,  6380.,  8410.,  8620.,  9460.,  9700.,  10510., 10780., 6255.,
      6426.,  15750., 16200., 20100., 20700., 21350., 22000., 22600., 23300.,
      13025., 13460., 26150., 27000., 26456., 27428., 22074., 22968., 20700.,
      21580., 11669., 12212., 10910., 11540., 9626.,  10308., 7004.,  7588.,
      6110.,  6660.,  3099.,  3438.,  8822.,  9044.,  11560., 11860., 12610.,
      12940., 13660., 14020., 8037.,  8262.,  18870., 19440., 23850., 24600.,
      25100., 25900., 26350., 27200., 15095., 15620., 17494., 18208., 21950.,
      22880., 23200., 24180., 19586., 20488., 9387.,  9892.,  5406.,  5852.,
      6560.,  7140.,  7010.,  7620.,  5156.,  5668.,  2009.,  2274.,  11414.,
      11708., 14710., 15100., 15760., 16180., 16810., 17260., 9819.,  10098.,
      21990., 22680., 27600., 28500., 28850., 29800., 30100., 31100., 17165.,
      17780., 15750., 16456., 16484., 17308., 15750., 16560., 17000., 17860.,
      9473.,  10004., 4254.,  4644.,  3814.,  4228.,  3560.,  3940.,  4010.,
      4420.,  2007.,  2262.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19475., 20050., 20725., 21350., 21975., 22650., 28839., 29850., 24201.,
      25134., 20075., 20930., 23225., 23950., 24475., 25250., 25725., 26550.,
      21325., 22230., 22575., 23530., 21329., 22270., 26975., 27850., 28225.,
      29150., 29475., 30450., 17971., 18834., 15125., 15910., 16375., 17210.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3350.,  3500.,  3650.,  3800.,  5218.,  5428.,  5638.,  5848.,  6136.,
      6376.,  6616.,  6856.,  7054.,  7324.,  7594.,  7864.,  4275.,  4446.,
      4617.,  4788.,  11850., 12300., 12750., 13200., 16688., 17288., 17888.,
      18488., 17986., 18636., 19286., 19936., 19284., 19984., 20684., 21384.,
      11151., 11586., 12021., 12456., 22010., 22860., 23710., 24560., 25700.,
      26672., 27644., 28616., 24054., 24948., 25842., 26736., 24264., 25144.,
      26024., 26904., 14219., 14762., 15305., 15848., 21190., 21820., 22450.,
      23080., 18570., 19252., 19934., 20616., 13424., 14008., 14592., 15176.,
      11670., 12220., 12770., 13320., 5859.,  6198.,  6537.,  6876.,  5390.,
      5612.,  5834.,  6056.,  7972.,  8272.,  8572.,  8872.,  8890.,  9220.,
      9550.,  9880.,  9808.,  10168., 10528., 10888., 5865.,  6090.,  6315.,
      6540.,  14898., 15468., 16038., 16608., 20582., 21332., 22082., 22832.,
      21880., 22680., 23480., 24280., 23178., 24028., 24878., 25728., 13281.,
      13806., 14331., 14856., 18146., 18860., 19574., 20288., 25562., 26492.,
      27422., 28352., 26860., 27840., 28820., 29800., 26750., 27652., 28554.,
      29456., 15965., 16470., 16975., 17480., 10366., 10812., 11258., 11704.,
      12540., 13120., 13700., 14280., 13410., 14020., 14630., 15240., 9800.,
      10312., 10824., 11336., 3753.,  4018.,  4283.,  4548.,  7430.,  7724.,
      8018.,  8312.,  10726., 11116., 11506., 11896., 11644., 12064., 12484.,
      12904., 12562., 13012., 13462., 13912., 7455.,  7734.,  8013.,  8292.,
      17946., 18636., 19326., 20016., 24476., 25376., 26276., 27176., 25774.,
      26724., 27674., 28624., 27072., 28072., 29072., 30072., 15411., 16026.,
      16641., 17256., 19786., 20492., 21198., 21904., 27664., 28488., 29312.,
      30136., 25058., 25868., 26678., 27488., 26356., 27216., 28076., 28936.,
      14191., 14722., 15253., 15784., 8118.,  8508.,  8898.,  9288.,  7214.,
      7628.,  8042.,  8456.,  6740.,  7120.,  7500.,  7880.,  7610.,  8020.,
      8430.,  8840.,  3759.,  4014.,  4269.,  4524.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16039., 16614., 17189., 17764., 17337., 17962., 18587., 19212., 18635.,
      19310., 19985., 20660., 26907., 27918., 28929., 29940., 24749., 25682.,
      26615., 27548., 23615., 24470., 25325., 26180., 19933., 20658., 21383.,
      22108., 21231., 22006., 22781., 23556., 22529., 23354., 24179., 25004.,
      24913., 25818., 26723., 27628., 26211., 27166., 28121., 29076., 26677.,
      27618., 28559., 29500., 23827., 24702., 25577., 26452., 25125., 26050.,
      26975., 27900., 26423., 27398., 28373., 29348., 27079., 27942., 28805.,
      29668., 24409., 25194., 25979., 26764., 25707., 26542., 27377., 28212.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12028., 12760., 16295., 17240., 18395., 19400., 20495., 21560., 12213.,
      12852., 30980., 32400., 39575., 41400., 42075., 44000., 44575., 46600.,
      25705., 26920., 51780., 54000., 52287., 54856., 43523., 45936., 40775.,
      43160., 22993., 24424., 21628., 23080., 19027., 20616., 13783., 15176.,
      11995., 13320., 6081.,  6876.,  17212., 18088., 22595., 23720., 24695.,
      25880., 26795., 28040., 15777., 16524., 37220., 38880., 47075., 49200.,
      49575., 51800., 52075., 54400., 29845., 31240., 34468., 36416., 43275.,
      45760., 45775., 48360., 38547., 40976., 18429., 19784., 10620., 11704.,
      12895., 14280., 13795., 15240., 10087., 11336., 3901.,  4548.,  22396.,
      23416., 28895., 30200., 30995., 32360., 33095., 34520., 19341., 20196.,
      43460., 45360., 54575., 57000., 57075., 59600., 59575., 62200., 33985.,
      35560., 30980., 32912., 32343., 34616., 30875., 33120., 33375., 35720.,
      18601., 20008., 8316.,  9288.,  7403.,  8456.,  6895.,  7880.,  7795.,
      8840.,  3897.,  4524.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      38325., 40100., 40825., 42700., 43325., 45300., 57053., 59700., 47777.,
      50268., 39525., 41860., 45825., 47900., 48325., 50500., 50825., 53100.,
      42025., 44460., 44525., 47060., 42033., 44540., 53325., 55700., 55825.,
      58300., 58325., 60900., 35317., 37668., 29625., 31820., 32125., 34420.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6360.,  6648.,  7300.,  7600.,  9977.,  10382., 11276., 11696., 11813.,
      12278., 13232., 13712., 13649., 14174., 15188., 15728., 8285.,  8618.,
      9234.,  9576.,  14872., 15368., 16412., 16928., 22935., 23534., 24832.,
      25456., 21627., 22262., 23596., 24256., 24223., 24958., 26392., 27152.,
      13627., 14098., 14954., 15440., 17272., 18056., 19388., 20192., 17407.,
      18238., 19768., 20624., 15715., 16454., 17892., 18656., 17223., 17998.,
      19472., 20272., 10355., 10850., 11730., 12240., 18200., 18680., 19556.,
      20048., 15905., 16422., 17404., 17936., 11629., 12078., 12992., 13456.,
      10745., 11190., 12100., 12560., 5733.,  6018.,  6546.,  6840.,  10440.,
      10872., 11668., 12112., 15485., 16070., 17144., 17744., 13353., 13870.,
      14876., 15408., 12245., 12694., 13632., 14096., 7433.,  7682.,  8214.,
      8472.,  20584., 21192., 22348., 22976., 26819., 27654., 29188., 30048.,
      22375., 23182., 24688., 25520., 18955., 19734., 21212., 22016., 9247.,
      9706.,  10550., 11024., 13000., 13640., 14828., 15488., 19819., 20694.,
      22268., 23168., 20495., 21342., 22888., 23760., 20787., 21478., 22868.,
      23584., 13271., 13626., 14366., 14736., 9608.,  9976.,  10740., 11120.,
      12485., 12990., 13960., 14480., 14225., 14790., 15820., 16400., 11485.,
      11982., 12944., 13456., 4977.,  5242.,  5750.,  6024.,  7608.,  7928.,
      8612.,  8944.,  12993., 13438., 14372., 14832., 14829., 15334., 16328.,
      16848., 16665., 17230., 18284., 18864., 10613., 10970., 11610., 11976.,
      13624., 14216., 15356., 15968., 18927., 19742., 21256., 22096., 21523.,
      22438., 24052., 24992., 24119., 25134., 26848., 27888., 13507., 14146.,
      15170., 15824., 14872., 15368., 16412., 16928., 22935., 23534., 24832.,
      25456., 21627., 22262., 23596., 24256., 24223., 24958., 26392., 27152.,
      13627., 14098., 14954., 15440., 9592.,  9976.,  10756., 11152., 9769.,
      10198., 11092., 11536., 10165., 10590., 11480., 11920., 11905., 12390.,
      13340., 13840., 6333.,  6642.,  7194.,  7512.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21701., 22314., 23626., 24264., 20329., 20914., 22198., 22808., 22925.,
      23610., 24994., 25704., 19565., 20474., 22082., 23016., 15761., 16514.,
      17966., 18744., 15925., 16650., 18074., 18824., 25521., 26306., 27790.,
      28600., 24469., 25290., 26810., 27656., 20537., 21330., 22822., 23640.,
      18521., 19346., 20870., 21720., 20029., 20890., 22450., 23336., 20385.,
      21154., 22622., 23416., 17629., 18394., 19858., 20648., 20225., 21090.,
      22654., 23544., 22821., 23786., 25450., 26440., 21701., 22314., 23626.,
      24264., 20329., 20914., 22198., 22808., 22925., 23610., 24994., 25704.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8400.,  8688.,  8976.,  9264.,  9948.,  10248., 10548., 10848., 12573.,
      12978., 13383., 13788., 14708., 15128., 15548., 15968., 14393., 14858.,
      15323., 15788., 16768., 17248., 17728., 18208., 16213., 16738., 17263.,
      17788., 18828., 19368., 19908., 20448., 10733., 11066., 11399., 11732.,
      12366., 12708., 13050., 13392., 13184., 13680., 14176., 14672., 15796.,
      16312., 16828., 17344., 20631., 21230., 21829., 22428., 23824., 24448.,
      25072., 25696., 19771., 20406., 21041., 21676., 23108., 23768., 24428.,
      25088., 22559., 23294., 24029., 24764., 26296., 27056., 27816., 28576.,
      15135., 15606., 16077., 16548., 17518., 18004., 18490., 18976., 24352.,
      25136., 25920., 26704., 28116., 28920., 29724., 30528., 23167., 23998.,
      24829., 25660., 27288., 28144., 29000., 29856., 17571., 18310., 19049.,
      19788., 21324., 22088., 22852., 23616., 18247., 19022., 19797., 20572.,
      22144., 22944., 23744., 24544., 10615., 11110., 11605., 12100., 13094.,
      13604., 14114., 14624., 15184., 15664., 16144., 16624., 17500., 17992.,
      18484., 18976., 13437., 13954., 14471., 14988., 15972., 16504., 17036.,
      17568., 11353., 11802., 12251., 12700., 13616., 14080., 14544., 15008.,
      11893., 12338., 12783., 13228., 14140., 14600., 15060., 15520., 9453.,
      9738.,  10023., 10308., 10878., 11172., 11466., 11760., 12576., 13008.,
      13440., 13872., 14700., 15144., 15588., 16032., 18033., 18618., 19203.,
      19788., 20888., 21488., 22088., 22688., 16141., 16658., 17175., 17692.,
      18724., 19256., 19788., 20320., 12201., 12650., 13099., 13548., 14512.,
      14976., 15440., 15904., 6041.,  6290.,  6539.,  6788.,  7338.,  7596.,
      7854.,  8112.,  19120., 19728., 20336., 20944., 22180., 22808., 23436.,
      24064., 25347., 26182., 27017., 27852., 29484., 30344., 31204., 32064.,
      22375., 23182., 23989., 24796., 26400., 27232., 28064., 28896., 21451.,
      22230., 23009., 23788., 25364., 26168., 26972., 27776., 15603., 16062.,
      16521., 16980., 17938., 18412., 18886., 19360., 14672., 15312., 15952.,
      16592., 17860., 18520., 19180., 19840., 21035., 21910., 22785., 23660.,
      25332., 26232., 27132., 28032., 20111., 20958., 21805., 22652., 24296.,
      25168., 26040., 26912., 18547., 19238., 19929., 20620., 22108., 22824.,
      23540., 24256., 13515., 13870., 14225., 14580., 15434., 15804., 16174.,
      16544., 9888.,  10256., 10624., 10992., 11756., 12136., 12516., 12896.,
      13521., 14026., 14531., 15036., 16008., 16528., 17048., 17568., 15149.,
      15714., 16279., 16844., 17876., 18456., 19036., 19616., 16137., 16634.,
      17131., 17628., 18592., 19104., 19616., 20128., 5657.,  5922.,  6187.,
      6452.,  7002.,  7276.,  7550.,  7824.,  7280.,  7600.,  7920.,  8240.,
      8956.,  9288.,  9620.,  9952.,  11909., 12354., 12799., 13244., 14204.,
      14664., 15124., 15584., 13729., 14234., 14739., 15244., 16264., 16784.,
      17304., 17824., 15549., 16114., 16679., 17244., 18324., 18904., 19484.,
      20064., 9221.,  9578.,  9935.,  10292., 10950., 11316., 11682., 12048.,
      16224., 16816., 17408., 18000., 19220., 19832., 20444., 21056., 23151.,
      23966., 24781., 25596., 27208., 28048., 28888., 29728., 25939., 26854.,
      27769., 28684., 30396., 31336., 32276., 33216., 28727., 29742., 30757.,
      31772., 33584., 34624., 35664., 36704., 20871., 21510., 22149., 22788.,
      23926., 24580., 25234., 25888., 13184., 13680., 14176., 14672., 15796.,
      16312., 16828., 17344., 20631., 21230., 21829., 22428., 23824., 24448.,
      25072., 25696., 19771., 20406., 21041., 21676., 23108., 23768., 24428.,
      25088., 22559., 23294., 24029., 24764., 26296., 27056., 27816., 28576.,
      15135., 15606., 16077., 16548., 17518., 18004., 18490., 18976., 13424.,
      13808., 14192., 14576., 15356., 15752., 16148., 16544., 10981., 11410.,
      11839., 12268., 13164., 13608., 14052., 14496., 9985.,  10410., 10835.,
      11260., 12152., 12592., 13032., 13472., 11613., 12098., 12583., 13068.,
      14020., 14520., 15020., 15520., 6021.,  6330.,  6639.,  6948.,  7542.,
      7860.,  8178.,  8496.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19301., 19914., 20527., 21140., 22550., 23188., 23826., 24464., 18377.,
      18962., 19547., 20132., 21514., 22124., 22734., 23344., 21165., 21850.,
      22535., 23220., 24702., 25412., 26122., 26832., 28557., 29466., 30375.,
      31284., 32990., 33924., 34858., 35792., 18801., 19554., 20307., 21060.,
      22610., 23388., 24166., 24944., 16853., 17578., 18303., 19028., 20550.,
      21300., 22050., 22800., 23953., 24738., 25523., 26308., 27890., 28700.,
      29510., 30320., 23605., 24426., 25247., 26068., 27686., 28532., 29378.,
      30224., 21657., 22450., 23243., 24036., 25626., 26444., 27262., 28080.,
      19641., 20466., 21291., 22116., 23738., 24588., 25438., 26288., 20317.,
      21178., 22039., 22900., 24558., 25444., 26330., 27216., 18817., 19586.,
      20355., 21124., 22690., 23484., 24278., 25072., 21757., 22522., 23287.,
      24052., 25614., 26404., 27194., 27984., 24545., 25410., 26275., 27140.,
      28802., 29692., 30582., 31472., 27333., 28298., 29263., 30228., 31990.,
      32980., 33970., 34960., 19301., 19914., 20527., 21140., 22550., 23188.,
      23826., 24464., 18377., 18962., 19547., 20132., 21514., 22124., 22734.,
      23344., 21165., 21850., 22535., 23220., 24702., 25412., 26122., 26832.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5468.,  6128.,  6812.,  7520.,  11495., 12444., 13423., 14432., 13759.,
      14700., 15671., 16672., 17047., 17980., 18943., 19936., 7985.,  8532.,
      9097.,  9680.,  15796., 16912., 18068., 19264., 25637., 27100., 28613.,
      30176., 22445., 23916., 25437., 27008., 20213., 21628., 23093., 24608.,
      10515., 11300., 12115., 12960., 19060., 20240., 21460., 22720., 20213.,
      21628., 23093., 24608., 21117., 22540., 24013., 25536., 18181., 19612.,
      21093., 22624., 9091.,  9924.,  10787., 11680., 15036., 15856., 16700.,
      17568., 13455., 14412., 15399., 16416., 10919., 11868., 12847., 13856.,
      9855.,  10732., 11639., 12576., 5545.,  6020.,  6513.,  7024.,  11836.,
      12528., 13244., 13984., 16815., 17804., 18823., 19872., 16519., 17500.,
      18511., 19552., 17247., 18220., 19223., 20256., 10313., 10884., 11473.,
      12080., 15700., 16784., 17908., 19072., 21117., 22540., 24013., 25536.,
      18181., 19612., 21093., 22624., 17357., 18860., 20413., 22016., 9307.,
      10196., 11115., 12064., 13844., 14992., 16180., 17408., 17357., 18860.,
      20413., 22016., 18005., 19516., 21077., 22688., 20893., 22348., 23853.,
      25408., 13643., 14452., 15291., 16160., 8988.,  9712.,  10460., 11232.,
      12439., 13308., 14207., 15136., 15855., 16780., 17735., 18720., 14855.,
      15772., 16719., 17696., 7425.,  7924.,  8441.,  8976.,  13084., 13808.,
      14556., 15328., 12791., 13692., 14623., 15584., 10447., 11340., 12263.,
      13216., 11495., 12444., 13423., 14432., 8033.,  8628.,  9241.,  9872.,
      11892., 13072., 14292., 15552., 18005., 19516., 21077., 22688., 20893.,
      22348., 23853., 25408., 25637., 27100., 28613., 30176., 12579., 13444.,
      14339., 15264., 15796., 16912., 18068., 19264., 25637., 27100., 28613.,
      30176., 22445., 23916., 25437., 27008., 20213., 21628., 23093., 24608.,
      10515., 11300., 12115., 12960., 12540., 13296., 14076., 14880., 14879.,
      15788., 16727., 17696., 17015., 17980., 18975., 20000., 13455., 14412.,
      15399., 16416., 5465.,  5988.,  6529.,  7088.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23105., 24532., 26009., 27536., 21961., 23396., 24881., 26416., 21073.,
      22516., 24009., 25552., 21073., 22516., 24009., 25552., 19865., 21252.,
      22689., 24176., 18977., 20372., 21817., 23312., 19865., 21252., 22689.,
      24176., 18977., 20372., 21817., 23312., 17641., 19108., 20625., 22192.,
      17641., 19108., 20625., 22192., 16241., 17716., 19241., 20816., 19193.,
      20676., 22209., 23792., 16241., 17716., 19241., 20816., 19193., 20676.,
      22209., 23792., 23105., 24532., 26009., 27536., 23105., 24532., 26009.,
      27536., 21961., 23396., 24881., 26416., 21073., 22516., 24009., 25552.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6980.,  7288.,  7968.,  8288.,  9004.,  9336.,  10088., 10432., 13107.,
      13582., 14542., 15032., 16037., 16542., 17592., 18112., 14059., 14526.,
      15478., 15960., 16957., 17454., 18496., 19008., 17059., 17518., 18462.,
      18936., 19925., 20414., 21448., 21952., 9041.,  9314.,  9870.,  10152.,
      10735., 11026., 11636., 11936., 15708., 16296., 17472., 18080., 19316.,
      19944., 21240., 21888., 26357., 27146., 28682., 29496., 31107., 31946.,
      33632., 34496., 27645., 28442., 29986., 30808., 32427., 33274., 34968.,
      35840., 22725., 23466., 24954., 25720., 27283., 28074., 29712., 30528.,
      9863.,  10278., 11162., 11592., 12521., 12966., 13940., 14400., 23196.,
      23848., 25088., 25760., 27060., 27752., 29112., 29824., 22725., 23466.,
      24954., 25720., 27283., 28074., 29712., 30528., 19917., 20666., 22162.,
      22936., 24507., 25306., 26952., 27776., 17621., 18378., 19882., 20664.,
      22243., 23050., 24704., 25536., 11063., 11526., 12458., 12936., 13913.,
      14406., 15428., 15936., 13124., 13560., 14368., 14816., 15660., 16120.,
      17000., 17472., 11619., 12126., 13070., 13592., 14581., 15118., 16152.,
      16704., 11163., 11662., 12598., 13112., 14093., 14622., 15648., 16192.,
      9619.,  10046., 10910., 11352., 12261., 12718., 13672., 14144., 7585.,
      7826.,  8334.,  8584.,  9119.,  9378.,  9940.,  10208., 12004., 12344.,
      13056., 13408., 14156., 14520., 15304., 15680., 17051., 17566., 18566.,
      19096., 20141., 20686., 21776., 22336., 16979., 17486., 18478., 19000.,
      20037., 20574., 21656., 22208., 14859., 15358., 16342., 16856., 17885.,
      18414., 19488., 20032., 7529.,  7826.,  8406.,  8712.,  9319.,  9634.,
      10268., 10592., 17084., 17640., 18784., 19360., 20564., 21160., 22424.,
      23040., 19917., 20666., 22162., 22936., 24507., 25306., 26952., 27776.,
      17621., 18378., 19882., 20664., 22243., 23050., 24704., 25536., 19485.,
      20314., 21890., 22744., 24395., 25274., 27000., 27904., 13487., 14006.,
      14994., 15528., 16561., 17110., 18188., 18752., 14332., 14952., 16160.,
      16800., 18068., 18728., 20056., 20736., 19485., 20314., 21890., 22744.,
      24395., 25274., 27000., 27904., 20261., 21098., 22682., 23544., 25203.,
      26090., 27824., 28736., 21485., 22266., 23794., 24600., 26203., 27034.,
      28712., 29568., 18143., 18582., 19490., 19944., 20897., 21366., 22364.,
      22848., 8292.,  8632.,  9344.,  9696.,  10444., 10808., 11592., 11968.,
      11211., 11630., 12486., 12920., 13821., 14270., 15216., 15680., 14403.,
      14878., 15790., 16280., 17237., 17742., 18744., 19264., 17019., 17486.,
      18390., 18872., 19821., 20318., 21312., 21824., 6713.,  6978.,  7510.,
      7784.,  8343.,  8626.,  9212.,  9504.,  10884., 11256., 12000., 12384.,
      13164., 13560., 14376., 14784., 10627., 11054., 11966., 12408., 13365.,
      13822., 14824., 15296., 10555., 10974., 11878., 12312., 13261., 13710.,
      14704., 15168., 13107., 13582., 14542., 15032., 16037., 16542., 17592.,
      18112., 9089.,  9410.,  10014., 10344., 10975., 11314., 11972., 12320.,
      15004., 15656., 16896., 17568., 18868., 19560., 20920., 21632., 20261.,
      21098., 22682., 23544., 25203., 26090., 27824., 28736., 21485., 22266.,
      23794., 24600., 26203., 27034., 28712., 29568., 26357., 27146., 28682.,
      29496., 31107., 31946., 33632., 34496., 18007., 18502., 19466., 19976.,
      20985., 21510., 22564., 23104., 15708., 16296., 17472., 18080., 19316.,
      19944., 21240., 21888., 26357., 27146., 28682., 29496., 31107., 31946.,
      33632., 34496., 27645., 28442., 29986., 30808., 32427., 33274., 34968.,
      35840., 22725., 23466., 24954., 25720., 27283., 28074., 29712., 30528.,
      9863.,  10278., 11162., 11592., 12521., 12966., 13940., 14400., 14340.,
      14712., 15456., 15840., 16620., 17016., 17832., 18240., 13491., 13950.,
      14846., 15320., 16261., 16750., 17736., 18240., 14123., 14638., 15590.,
      16120., 17117., 17662., 18704., 19264., 11619., 12126., 13070., 13592.,
      14581., 15118., 16152., 16704., 6353.,  6642.,  7198.,  7496.,  8079.,
      8386.,  8996.,  9312.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23633., 24386., 25886., 26664., 28239., 29042., 30692., 31520., 24921.,
      25682., 27190., 27976., 29559., 30370., 32028., 32864., 26721., 27490.,
      29006., 29800., 31391., 32210., 33876., 34720., 26721., 27490., 29006.,
      29800., 31391., 32210., 33876., 34720., 19753., 20466., 21926., 22664.,
      24199., 24962., 26572., 27360., 17457., 18178., 19646., 20392., 21935.,
      22706., 24324., 25120., 19753., 20466., 21926., 22664., 24199., 24962.,
      26572., 27360., 17457., 18178., 19646., 20392., 21935., 22706., 24324.,
      25120., 18297., 19090., 20630., 21448., 23063., 23906., 25596., 26464.,
      18297., 19090., 20630., 21448., 23063., 23906., 25596., 26464., 19073.,
      19874., 21422., 22248., 23871., 24722., 26420., 27296., 20361., 21170.,
      22726., 23560., 25191., 26050., 27756., 28640., 19073., 19874., 21422.,
      22248., 23871., 24722., 26420., 27296., 20361., 21170., 22726., 23560.,
      25191., 26050., 27756., 28640., 23633., 24386., 25886., 26664., 28239.,
      29042., 30692., 31520., 23633., 24386., 25886., 26664., 28239., 29042.,
      30692., 31520., 24921., 25682., 27190., 27976., 29559., 30370., 32028.,
      32864., 26721., 27490., 29006., 29800., 31391., 32210., 33876., 34720.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7892.,  8200.,  8508.,  8816.,  9472.,  9792.,  10112., 10432., 11148.,
      11480., 11812., 12144., 12920., 13264., 13608., 13952., 12683., 13158.,
      13633., 14108., 15026., 15516., 16006., 16496., 17489., 17994., 18499.,
      19004., 20072., 20592., 21112., 21632., 10499., 10966., 11433., 11900.,
      12810., 13292., 13774., 14256., 15241., 15738., 16235., 16732., 17792.,
      18304., 18816., 19328., 12411., 12870., 13329., 13788., 14690., 15164.,
      15638., 16112., 17089., 17578., 18067., 18556., 19608., 20112., 20616.,
      21120., 5713.,  5986.,  6259.,  6532.,  7042.,  7324.,  7606.,  7888.,
      8443.,  8734.,  9025.,  9316.,  9916.,  10216., 10516., 10816., 12588.,
      13176., 13764., 14352., 15520., 16128., 16736., 17344., 18612., 19240.,
      19868., 20496., 21864., 22512., 23160., 23808., 19925., 20714., 21503.,
      22292., 23782., 24596., 25410., 26224., 27839., 28678., 29517., 30356.,
      32096., 32960., 33824., 34688., 20445., 21242., 22039., 22836., 24334.,
      25156., 25978., 26800., 28423., 29270., 30117., 30964., 32712., 33584.,
      34456., 35328., 16805., 17546., 18287., 19028., 20470., 21236., 22002.,
      22768., 24335., 25126., 25917., 26708., 28400., 29216., 30032., 30848.,
      8559.,  8974.,  9389.,  9804.,  10630., 11060., 11490., 11920., 12821.,
      13266., 13711., 14156., 15132., 15592., 16052., 16512., 18284., 18936.,
      19588., 20240., 21472., 22144., 22816., 23488., 24820., 25512., 26204.,
      26896., 28328., 29040., 29752., 30464., 16805., 17546., 18287., 19028.,
      20470., 21236., 22002., 22768., 24335., 25126., 25917., 26708., 28400.,
      29216., 30032., 30848., 17325., 18074., 18823., 19572., 21022., 21796.,
      22570., 23344., 24919., 25718., 26517., 27316., 29016., 29840., 30664.,
      31488., 18869., 19626., 20383., 21140., 22598., 23380., 24162., 24944.,
      26527., 27334., 28141., 28948., 30656., 31488., 32320., 33152., 10911.,
      11374., 11837., 12300., 13174., 13652., 14130., 14608., 15557., 16050.,
      16543., 17036., 18060., 18568., 19076., 19584., 10580., 11016., 11452.,
      11888., 12672., 13120., 13568., 14016., 14860., 15320., 15780., 16240.,
      17144., 17616., 18088., 18560., 11787., 12294., 12801., 13308., 14226.,
      14748., 15270., 15792., 16785., 17322., 17859., 18396., 19464., 20016.,
      20568., 21120., 11395., 11894., 12393., 12892., 13802., 14316., 14830.,
      15344., 16329., 16858., 17387., 17916., 18976., 19520., 20064., 20608.,
      8891.,  9318.,  9745.,  10172., 11010., 11452., 11894., 12336., 13249.,
      13706., 14163., 14620., 15608., 16080., 16552., 17024., 5713.,  5954.,
      6195.,  6436.,  6946.,  7196.,  7446.,  7696.,  8251.,  8510.,  8769.,
      9028.,  9628.,  9896.,  10164., 10432., 8692.,  9032.,  9372.,  9712.,
      10400., 10752., 11104., 11456., 12204., 12568., 12932., 13296., 14104.,
      14480., 14856., 15232., 12339., 12854., 13369., 13884., 14842., 15372.,
      15902., 16432., 17465., 18010., 18555., 19100., 20208., 20768., 21328.,
      21888., 12203., 12710., 13217., 13724., 14674., 15196., 15718., 16240.,
      17265., 17802., 18339., 18876., 19976., 20528., 21080., 21632., 12067.,
      12566., 13065., 13564., 14506., 15020., 15534., 16048., 17065., 17594.,
      18123., 18652., 19744., 20288., 20832., 21376., 7273.,  7570.,  7867.,
      8164.,  8698.,  9004.,  9310.,  9616.,  10195., 10510., 10825., 11140.,
      11764., 12088., 12412., 12736., 13836., 14392., 14948., 15504., 16640.,
      17216., 17792., 18368., 19604., 20200., 20796., 21392., 22728., 23344.,
      23960., 24576., 17325., 18074., 18823., 19572., 21022., 21796., 22570.,
      23344., 24919., 25718., 26517., 27316., 29016., 29840., 30664., 31488.,
      18869., 19626., 20383., 21140., 22598., 23380., 24162., 24944., 26527.,
      27334., 28141., 28948., 30656., 31488., 32320., 33152., 20477., 21306.,
      22135., 22964., 24494., 25348., 26202., 27056., 28711., 29590., 30469.,
      31348., 33128., 34032., 34936., 35840., 11607., 12126., 12645., 13164.,
      14094., 14628., 15162., 15696., 16701., 17250., 17799., 18348., 19428.,
      19992., 20556., 21120., 15436., 16056., 16676., 17296., 18496., 19136.,
      19776., 20416., 21716., 22376., 23036., 23696., 25096., 25776., 26456.,
      27136., 20477., 21306., 22135., 22964., 24494., 25348., 26202., 27056.,
      28711., 29590., 30469., 31348., 33128., 34032., 34936., 35840., 19973.,
      20810., 21647., 22484., 24022., 24884., 25746., 26608., 28271., 29158.,
      30045., 30932., 32720., 33632., 34544., 35456., 16333., 17114., 17895.,
      18676., 20158., 20964., 21770., 22576., 24183., 25014., 25845., 26676.,
      28408., 29264., 30120., 30976., 12807., 13246., 13685., 14124., 14974.,
      15428., 15882., 16336., 17261., 17730., 18199., 18668., 19668., 20152.,
      20636., 21120., 8180.,  8520.,  8860.,  9200.,  9888.,  10240., 10592.,
      10944., 11692., 12056., 12420., 12784., 13592., 13968., 14344., 14720.,
      8499.,  8918.,  9337.,  9756.,  10586., 11020., 11454., 11888., 12793.,
      13242., 13691., 14140., 15120., 15584., 16048., 16512., 11243., 11718.,
      12193., 12668., 13554., 14044., 14534., 15024., 15985., 16490., 16995.,
      17500., 18536., 19056., 19576., 20096., 12899., 13366., 13833., 14300.,
      15178., 15660., 16142., 16624., 17577., 18074., 18571., 19068., 20096.,
      20608., 21120., 21632., 5993.,  6258.,  6523.,  6788.,  7322.,  7596.,
      7870.,  8144.,  8723.,  9006.,  9289.,  9572.,  10196., 10488., 10780.,
      11072., 9492.,  9864.,  10236., 10608., 11328., 11712., 12096., 12480.,
      13260., 13656., 14052., 14448., 15288., 15696., 16104., 16512., 11867.,
      12294., 12721., 13148., 14018., 14460., 14902., 15344., 16289., 16746.,
      17203., 17660., 18680., 19152., 19624., 20096., 11731., 12150., 12569.,
      12988., 13850., 14284., 14718., 15152., 16089., 16538., 16987., 17436.,
      18448., 18912., 19376., 19840., 12683., 13158., 13633., 14108., 15026.,
      15516., 16006., 16496., 17489., 17994., 18499., 19004., 20072., 20592.,
      21112., 21632., 6785.,  7106.,  7427.,  7748.,  8306.,  8636.,  8966.,
      9296.,  9899.,  10238., 10577., 10916., 11564., 11912., 12260., 12608.,
      16236., 16888., 17540., 18192., 19424., 20096., 20768., 21440., 22772.,
      23464., 24156., 24848., 26280., 26992., 27704., 28416., 19973., 20810.,
      21647., 22484., 24022., 24884., 25746., 26608., 28271., 29158., 30045.,
      30932., 32720., 33632., 34544., 35456., 16333., 17114., 17895., 18676.,
      20158., 20964., 21770., 22576., 24183., 25014., 25845., 26676., 28408.,
      29264., 30120., 30976., 19925., 20714., 21503., 22292., 23782., 24596.,
      25410., 26224., 27839., 28678., 29517., 30356., 32096., 32960., 33824.,
      34688., 12479., 12974., 13469., 13964., 14870., 15380., 15890., 16400.,
      17381., 17906., 18431., 18956., 20012., 20552., 21092., 21632., 12588.,
      13176., 13764., 14352., 15520., 16128., 16736., 17344., 18612., 19240.,
      19868., 20496., 21864., 22512., 23160., 23808., 19925., 20714., 21503.,
      22292., 23782., 24596., 25410., 26224., 27839., 28678., 29517., 30356.,
      32096., 32960., 33824., 34688., 20445., 21242., 22039., 22836., 24334.,
      25156., 25978., 26800., 28423., 29270., 30117., 30964., 32712., 33584.,
      34456., 35328., 16805., 17546., 18287., 19028., 20470., 21236., 22002.,
      22768., 24335., 25126., 25917., 26708., 28400., 29216., 30032., 30848.,
      8559.,  8974.,  9389.,  9804.,  10630., 11060., 11490., 11920., 12821.,
      13266., 13711., 14156., 15132., 15592., 16052., 16512., 11028., 11400.,
      11772., 12144., 12864., 13248., 13632., 14016., 14796., 15192., 15588.,
      15984., 16824., 17232., 17640., 18048., 10459., 10918., 11377., 11836.,
      12706., 13180., 13654., 14128., 15073., 15562., 16051., 16540., 17560.,
      18064., 18568., 19072., 12179., 12694., 13209., 13724., 14650., 15180.,
      15710., 16240., 17241., 17786., 18331., 18876., 19952., 20512., 21072.,
      21632., 11787., 12294., 12801., 13308., 14226., 14748., 15270., 15792.,
      16785., 17322., 17859., 18396., 19464., 20016., 20568., 21120., 7297.,
      7586.,  7875.,  8164.,  8722.,  9020.,  9318.,  9616.,  10219., 10526.,
      10833., 11140., 11788., 12104., 12420., 12736.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17585., 18338., 19091., 19844., 21298., 22076., 22854., 23632., 25211.,
      26014., 26817., 27620., 29324., 30152., 30980., 31808., 18105., 18866.,
      19627., 20388., 21850., 22636., 23422., 24208., 25795., 26606., 27417.,
      28228., 29940., 30776., 31612., 32448., 19649., 20418., 21187., 21956.,
      23426., 24220., 25014., 25808., 27403., 28222., 29041., 29860., 31580.,
      32424., 33268., 34112., 19649., 20418., 21187., 21956., 23426., 24220.,
      25014., 25808., 27403., 28222., 29041., 29860., 31580., 32424., 33268.,
      34112., 16009., 16722., 17435., 18148., 19562., 20300., 21038., 21776.,
      23315., 24078., 24841., 25604., 27268., 28056., 28844., 29632., 17553.,
      18274., 18995., 19716., 21138., 21884., 22630., 23376., 24923., 25694.,
      26465., 27236., 28908., 29704., 30500., 31296., 16009., 16722., 17435.,
      18148., 19562., 20300., 21038., 21776., 23315., 24078., 24841., 25604.,
      27268., 28056., 28844., 29632., 17553., 18274., 18995., 19716., 21138.,
      21884., 22630., 23376., 24923., 25694., 26465., 27236., 28908., 29704.,
      30500., 31296., 21209., 22002., 22795., 23588., 25082., 25900., 26718.,
      27536., 29155., 29998., 30841., 31684., 33428., 34296., 35164., 36032.,
      21209., 22002., 22795., 23588., 25082., 25900., 26718., 27536., 29155.,
      29998., 30841., 31684., 33428., 34296., 35164., 36032., 20705., 21506.,
      22307., 23108., 24610., 25436., 26262., 27088., 28715., 29566., 30417.,
      31268., 33020., 33896., 34772., 35648., 17129., 17938., 18747., 19556.,
      21066., 21900., 22734., 23568., 25203., 26062., 26921., 27780., 29540.,
      30424., 31308., 32192., 20705., 21506., 22307., 23108., 24610., 25436.,
      26262., 27088., 28715., 29566., 30417., 31268., 33020., 33896., 34772.,
      35648., 17129., 17938., 18747., 19556., 21066., 21900., 22734., 23568.,
      25203., 26062., 26921., 27780., 29540., 30424., 31308., 32192., 17585.,
      18338., 19091., 19844., 21298., 22076., 22854., 23632., 25211., 26014.,
      26817., 27620., 29324., 30152., 30980., 31808., 17585., 18338., 19091.,
      19844., 21298., 22076., 22854., 23632., 25211., 26014., 26817., 27620.,
      29324., 30152., 30980., 31808., 18105., 18866., 19627., 20388., 21850.,
      22636., 23422., 24208., 25795., 26606., 27417., 28228., 29940., 30776.,
      31612., 32448., 19649., 20418., 21187., 21956., 23426., 24220., 25014.,
      25808., 27403., 28222., 29041., 29860., 31580., 32424., 33268., 34112.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3008.,  5100.,  5720.,  3404.,  5890.,  9600.,  10250., 5920.,
      8830.,  14150., 14800., 8440.,  3780.,  5780.,  6020.,  3240.,
      14096., 22460., 23080., 13148., 17650., 27800., 28450., 16000.,
      20590., 32350., 33000., 18520., 8316.,  12500., 12740., 6768.,
      25184., 39820., 40440., 22892., 29410., 46000., 46650., 26080.,
      32350., 50550., 51200., 28600., 12852., 19220., 19460., 10296.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {7325.,  7975.,  11875., 12525.,
                                         25525., 26175., 30075., 30725.,
                                         43725., 44375., 48275., 48925.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5866.,  6016.,  9930.,  10200., 11130., 11440., 6610.,  6808.,  11435.,
      11780., 18600., 19200., 19850., 20500., 11435., 11840., 17105., 17660.,
      27350., 28300., 28600., 29600., 16265., 16880., 7164.,  7560.,  10885.,
      11560., 11335., 12040., 6048.,  6480.,  7658.,  7968.,  11274., 11768.,
      11130., 11600., 6418.,  6712.,  8515.,  8804.,  13664., 14128., 14850.,
      15300., 8675.,  8960.,  13865., 14300., 22350., 23100., 23600., 24400.,
      13505., 14000., 5940.,  6264.,  9085.,  9640.,  9535.,  10120., 5112.,
      5472.,  12778., 13248., 17226., 17944., 14330., 14960., 8146.,  8536.,
      8347.,  8772.,  11736., 12384., 11450., 12020., 6491.,  6848.,  10625.,
      10940., 17350., 17900., 18600., 19200., 10745., 11120., 4716.,  4968.,
      7285.,  7720.,  7735.,  8200.,  4176.,  4464.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14225., 14650., 15475., 15950., 22975., 23750., 24225., 25050.,
      49225., 51050., 50475., 52350., 57975., 60150., 59225., 61450.,
      22657., 24218., 18275., 19630., 13487., 14118., 14225., 14650.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4094.,  4244.,  4394.,  4544.,  7430.,  7700.,  7970.,  8240.,  8638.,
      8948.,  9258.,  9568.,  5214.,  5412.,  5610.,  5808.,  9661.,  10006.,
      10351., 10696., 16376., 16976., 17576., 18176., 17674., 18324., 18974.,
      19624., 10177., 10582., 10987., 11392., 15415., 15970., 16525., 17080.,
      25462., 26412., 27362., 28312., 26760., 27760., 28760., 29760., 15147.,
      15762., 16377., 16992., 13932., 14328., 14724., 15120., 21095., 21770.,
      22445., 23120., 21965., 22670., 23375., 24080., 11664., 12096., 12528.,
      12960., 10590., 10900., 11210., 11520., 14502., 14996., 15490., 15984.,
      13086., 13556., 14026., 14496., 7294.,  7588.,  7882.,  8176.,  6949.,
      7238.,  7527.,  7816.,  11248., 11712., 12176., 12640., 12482., 12932.,
      13382., 13832., 7337.,  7622.,  7907.,  8192.,  12127., 12562., 12997.,
      13432., 20270., 21020., 21770., 22520., 21568., 22368., 23168., 23968.,
      12307., 12802., 13297., 13792., 11556., 11880., 12204., 12528., 17615.,
      18170., 18725., 19280., 18485., 19070., 19655., 20240., 9864.,  10224.,
      10584., 10944., 15550., 16020., 16490., 16960., 26694., 27412., 28130.,
      28848., 23934., 24564., 25194., 25824., 13214., 13604., 13994., 14384.,
      9549.,  9974.,  10399., 10824., 11816., 12464., 13112., 13760., 10170.,
      10740., 11310., 11880., 5457.,  5814.,  6171.,  6528.,  8839.,  9154.,
      9469.,  9784.,  15078., 15628., 16178., 16728., 16376., 16976., 17576.,
      18176., 9467.,  9842.,  10217., 10592., 9180.,  9432.,  9684.,  9936.,
      14135., 14570., 15005., 15440., 15005., 15470., 15935., 16400., 8064.,
      8352.,  8640.,  8928.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11833., 12258., 12683., 13108., 13131., 13606., 14081., 14556.,
      20919., 21694., 22469., 23244., 22217., 23042., 23867., 24692.,
      10865., 11474., 12083., 12692., 10819., 11414., 12009., 12604.,
      15727., 16302., 16877., 17452., 17025., 17650., 18275., 18900.,
      19113., 19906., 20699., 21492., 14907., 15622., 16337., 17052.,
      10919., 11422., 11925., 12428., 11833., 12258., 12683., 13108.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11348., 12032., 19260., 20400., 21660., 22880., 12884., 13616., 22465.,
      23560., 36575., 38400., 39075., 41000., 22525., 23680., 33805., 35320.,
      54075., 56600., 56575., 59200., 32185., 33760., 14175., 15120., 21545.,
      23120., 22445., 24080., 11979., 12960., 14932., 15936., 21948., 23536.,
      21660., 23200., 12500., 13424., 16625., 17608., 26703., 28256., 29075.,
      30600., 17005., 17920., 27325., 28600., 44075., 46200., 46575., 48800.,
      26665., 28000., 11727., 12528., 17945., 19280., 18845., 20240., 10107.,
      10944., 25172., 26496., 33852., 35888., 28060., 29920., 15956., 17072.,
      16289., 17544., 22847., 24768., 22275., 24040., 12637., 13696., 20845.,
      21880., 34075., 35800., 36575., 38400., 21145., 22240., 9279.,  9936.,
      14345., 15440., 15245., 16400., 8235.,  8928.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27825., 29300., 30325., 31900., 45325., 47500., 47825., 50100.,
      22433., 24276., 23525., 25340., 35325., 37100., 37825., 39700.,
      26257., 28468., 23125., 25180., 25837., 27468., 27825., 29300.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7816.,  8104.,  8788.,  9088.,  14256., 14776., 15940., 16480., 16672.,
      17272., 18516., 19136., 10088., 10472., 11220., 11616., 13343., 13826.,
      14750., 15248., 23271., 24062., 25552., 26368., 24971., 25734., 27196.,
      27984., 11679., 12090., 12886., 13312., 12947., 13466., 14426., 14960.,
      18531., 19382., 20932., 21808., 17159., 17982., 19504., 20352., 8179.,
      8626.,  9458.,  9920.,  8559.,  8766.,  9288.,  9504.,  13915., 14290.,
      15130., 15520., 15655., 16090., 16990., 17440., 8703.,  8982.,  9504.,
      9792.,  11336., 11688., 12436., 12800., 16496., 17080., 18308., 18912.,
      16288., 16888., 18132., 18752., 9448.,  9832.,  10580., 10976., 12911.,
      13410., 14350., 14864., 21783., 22622., 24160., 25024., 20347., 21094.,
      22540., 23312., 11375., 11802., 12614., 13056., 16547., 17018., 17930.,
      18416., 26195., 27030., 28564., 29424., 21751., 22558., 24064., 24896.,
      9923.,  10386., 11234., 11712., 6303.,  6558.,  7128.,  7392.,  9835.,
      10290., 11210., 11680., 9655.,  10042., 10894., 11296., 5167.,  5366.,
      5808.,  6016.,  13320., 13736., 14548., 14976., 23856., 24504., 25796.,
      26464., 22304., 22904., 24148., 24768., 12648., 13032., 13780., 14176.,
      12223., 12738., 13694., 14224., 17159., 17982., 19504., 20352., 16811.,
      17606., 19100., 19920., 9599.,  10106., 10998., 11520., 11699., 12122.,
      12986., 13424., 21507., 22262., 23716., 24496., 23271., 24062., 25552.,
      26368., 14227., 14706., 15570., 16064., 7887.,  8190.,  8808.,  9120.,
      12155., 12690., 13690., 14240., 11527., 12058., 13054., 13600., 5407.,
      5718.,  6272.,  6592.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20905., 21666., 23126., 23912., 20045., 20778., 22210., 22968.,
      23845., 24666., 26186., 27032., 19913., 20706., 22198., 23016.,
      16857., 17666., 19174., 20008., 18109., 18954., 20498., 21368.,
      22805., 23610., 25114., 25944., 23993., 24770., 26246., 27048.,
      19913., 20706., 22198., 23016., 17005., 17770., 19234., 20024.,
      20805., 21658., 23210., 24088., 20905., 21666., 23126., 23912.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8560.,  8848.,  9136.,  9424.,  10108., 10408., 10708., 11008., 15768.,
      16288., 16808., 17328., 18540., 19080., 19620., 20160., 18216., 18816.,
      19416., 20016., 21308., 21928., 22548., 23168., 12624., 13008., 13392.,
      13776., 14620., 15016., 15412., 15808., 12763., 13246., 13729., 14212.,
      15178., 15676., 16174., 16672., 21495., 22286., 23077., 23868., 25456.,
      26272., 27088., 27904., 22619., 23382., 24145., 24908., 26468., 27256.,
      28044., 28832., 12707., 13118., 13529., 13940., 14850., 15276., 15702.,
      16128., 13471., 13990., 14509., 15028., 16030., 16564., 17098., 17632.,
      24499., 25350., 26201., 27052., 28700., 29576., 30452., 31328., 23575.,
      24398., 25221., 26044., 27664., 28512., 29360., 30208., 10791., 11238.,
      11685., 12132., 13078., 13540., 14002., 14464., 6735.,  6942.,  7149.,
      7356.,  7864.,  8080.,  8296.,  8512.,  11391., 11766., 12141., 12516.,
      13358., 13748., 14138., 14528., 13019., 13454., 13889., 14324., 15226.,
      15676., 16126., 16576., 8487.,  8766.,  9045.,  9324.,  9888.,  10176.,
      10464., 10752., 9392.,  9744.,  10096., 10448., 11196., 11560., 11924.,
      12288., 17112., 17696., 18280., 18864., 20140., 20744., 21348., 21952.,
      18472., 19072., 19672., 20272., 21564., 22184., 22804., 23424., 15440.,
      15824., 16208., 16592., 17436., 17832., 18228., 18624., 13931., 14430.,
      14929., 15428., 16410., 16924., 17438., 17952., 23591., 24430., 25269.,
      26108., 27744., 28608., 29472., 30336., 22603., 23350., 24097., 24844.,
      26388., 27160., 27932., 28704., 12083., 12510., 12937., 13364., 14290.,
      14732., 15174., 15616., 14575., 15046., 15517., 15988., 16942., 17428.,
      17914., 18400., 24483., 25318., 26153., 26988., 28620., 29480., 30340.,
      31200., 21511., 22318., 23125., 23932., 25536., 26368., 27200., 28032.,
      14263., 14726., 15189., 15652., 16614., 17092., 17570., 18048., 7295.,
      7550.,  7805.,  8060.,  8616.,  8880.,  9144.,  9408.,  10319., 10774.,
      11229., 11684., 12606., 13076., 13546., 14016., 8235.,  8622.,  9009.,
      9396.,  10250., 10652., 11054., 11456., 4567.,  4766.,  4965.,  5164.,
      5648.,  5856.,  6064.,  6272.,  11248., 11664., 12080., 12496., 13308.,
      13736., 14164., 14592., 20504., 21152., 21800., 22448., 23788., 24456.,
      25124., 25792., 19240., 19840., 20440., 21040., 22332., 22952., 23572.,
      24192., 13648., 14032., 14416., 14800., 15644., 16040., 16436., 16832.,
      14587., 15102., 15617., 16132., 17130., 17660., 18190., 18720., 23575.,
      24398., 25221., 26044., 27664., 28512., 29360., 30208., 20603., 21398.,
      22193., 22988., 24580., 25400., 26220., 27040., 12547., 13054., 13561.,
      14068., 15074., 15596., 16118., 16640., 11071., 11494., 11917., 12340.,
      13246., 13684., 14122., 14560., 20307., 21062., 21817., 22572., 24124.,
      24904., 25684., 26464., 21495., 22286., 23077., 23868., 25456., 26272.,
      27088., 27904., 14663., 15142., 15621., 16100., 17078., 17572., 18066.,
      18560., 7343.,  7646.,  7949.,  8252.,  8856.,  9168.,  9480.,  9792.,
      13855., 14390., 14925., 15460., 16462., 17012., 17562., 18112., 14907.,
      15438., 15969., 16500., 17498., 18044., 18590., 19136., 8007.,  8318.,
      8629.,  8940.,  9536.,  9856.,  10176., 10496.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 20861.,
      21594., 22327., 23060., 24590., 25348., 26106., 26864., 22741., 23562.,
      24383., 25204., 26822., 27668., 28514., 29360., 20793., 21586., 22379.,
      23172., 24762., 25580., 26398., 27216., 21833., 22642., 23451., 24260.,
      25866., 26700., 27534., 28368., 21997., 22842., 23687., 24532., 26174.,
      27044., 27914., 28784., 21701., 22506., 23311., 24116., 25718., 26548.,
      27378., 28208., 21801., 22578., 23355., 24132., 25706., 26508., 27310.,
      28112., 20793., 21586., 22379., 23172., 24762., 25580., 26398., 27216.,
      20893., 21658., 22423., 23188., 24750., 25540., 26330., 27120., 22773.,
      23626., 24479., 25332., 26982., 27860., 28738., 29616., 24857., 25618.,
      26379., 27140., 28698., 29484., 30270., 31056.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8860.,  9552.,  10268., 11008., 18180., 19312., 20484., 21696., 19044.,
      20208., 21412., 22656., 11516., 12240., 12988., 13760., 12003., 12932.,
      13891., 14880., 19013., 20476., 21989., 23552., 20365., 21772., 23229.,
      24736., 9563.,  10356., 11179., 12032., 11083., 11956., 12859., 13792.,
      18621., 20076., 21581., 23136., 19013., 20476., 21989., 23552., 10691.,
      11492., 12323., 13184., 6645.,  7164.,  7701.,  8256.,  11715., 12580.,
      13475., 14400., 12827., 13748., 14699., 15680., 6685.,  7212.,  7757.,
      8320.,  12828., 13648., 14492., 15360., 16516., 17776., 19076., 20416.,
      15780., 17008., 18276., 19584., 9724.,  10448., 11196., 11968., 17539.,
      18500., 19491., 20512., 22117., 23612., 25157., 26752., 17261., 18636.,
      20061., 21536., 8379.,  9140.,  9931.,  10752., 16171., 17140., 18139.,
      19168., 24861., 26412., 28013., 29664., 22117., 23612., 25157., 26752.,
      11107., 11940., 12803., 13696., 9813.,  10428., 11061., 11712., 16355.,
      17380., 18435., 19520., 17915., 18932., 19979., 21056., 10045., 10604.,
      11181., 11776., 8860.,  9552.,  10268., 11008., 18180., 19312., 20484.,
      21696., 19044., 20208., 21412., 22656., 11516., 12240., 12988., 13760.,
      12003., 12932., 13891., 14880., 19013., 20476., 21989., 23552., 20365.,
      21772., 23229., 24736., 9563.,  10356., 11179., 12032., 11083., 11956.,
      12859., 13792., 18621., 20076., 21581., 23136., 19013., 20476., 21989.,
      23552., 10691., 11492., 12323., 13184., 6645.,  7164.,  7701.,  8256.,
      11715., 12580., 13475., 14400., 12827., 13748., 14699., 15680., 6685.,
      7212.,  7757.,  8320.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19401., 20804., 22257., 23760., 15633., 16980., 18377., 19824.,
      23233., 24756., 26329., 27952., 19401., 20804., 22257., 23760.,
      19433., 20868., 22353., 23888., 22897., 24340., 25833., 27376.,
      19105., 20596., 22137., 23728., 19433., 20868., 22353., 23888.,
      19401., 20804., 22257., 23760., 15633., 16980., 18377., 19824.,
      23233., 24756., 26329., 27952., 19401., 20804., 22257., 23760.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8324.,  8632.,  9312.,  9632.,  10348., 10680., 11432., 11776., 16076.,
      16584., 17744., 18272., 19492., 20040., 21320., 21888., 17260., 17800.,
      18992., 19552., 20804., 21384., 22696., 23296., 12676., 13048., 13856.,
      14240., 15084., 15480., 16360., 16768., 13391., 13894., 14850., 15368.,
      16369., 16902., 17948., 18496., 22069., 22858., 24394., 25208., 26819.,
      27658., 29344., 30208., 20221., 20954., 22434., 23192., 24747., 25530.,
      27160., 27968., 10767., 11190., 12082., 12520., 13457., 13910., 14892.,
      15360., 10583., 11030., 11930., 12392., 13337., 13814., 14804., 15296.,
      21805., 22586., 24114., 24920., 26523., 27354., 29032., 29888., 22069.,
      22858., 24394., 25208., 26819., 27658., 29344., 30208., 10967., 11398.,
      12298., 12744., 13689., 14150., 15140., 15616., 5333.,  5546.,  6042.,
      6264.,  6787.,  7018.,  7568.,  7808.,  11815., 12230., 13082., 13512.,
      14409., 14854., 15796., 16256., 14495., 14966., 15874., 16360., 17313.,
      17814., 18812., 19328., 8277.,  8570.,  9130.,  9432.,  10019., 10330.,
      10944., 11264., 12036., 12472., 13280., 13728., 14572., 15032., 15912.,
      16384., 18764., 19400., 20688., 21344., 22692., 23368., 24776., 25472.,
      16812., 17416., 18672., 19296., 20612., 21256., 22632., 23296., 13188.,
      13560., 14368., 14752., 15596., 15992., 16872., 17280., 16239., 16774.,
      17762., 18312., 19345., 19910., 20988., 21568., 22101., 22922., 24490.,
      25336., 26979., 27850., 29568., 30464., 20189., 20890., 22338., 23064.,
      24587., 25338., 26936., 27712., 12527., 12918., 13778., 14184., 15089.,
      15510., 16460., 16896., 16567., 17110., 18106., 18664., 19705., 20278.,
      21364., 21952., 23949., 24826., 26450., 27352., 29051., 29978., 31752.,
      32704., 22101., 22922., 24490., 25336., 26979., 27850., 29568., 30464.,
      15863., 16326., 17258., 17736., 18713., 19206., 20228., 20736., 9525.,
      9834.,  10426., 10744., 11363., 11690., 12336., 12672., 14791., 15366.,
      16378., 16968., 18025., 18630., 19732., 20352., 14335., 14902., 15906.,
      16488., 17537., 18134., 19228., 19840., 8821.,  9146.,  9738.,  10072.,
      10691., 11034., 11680., 12032., 8324.,  8632.,  9312.,  9632.,  10348.,
      10680., 11432., 11776., 16076., 16584., 17744., 18272., 19492., 20040.,
      21320., 21888., 17260., 17800., 18992., 19552., 20804., 21384., 22696.,
      23296., 12676., 13048., 13856., 14240., 15084., 15480., 16360., 16768.,
      13391., 13894., 14850., 15368., 16369., 16902., 17948., 18496., 22069.,
      22858., 24394., 25208., 26819., 27658., 29344., 30208., 20221., 20954.,
      22434., 23192., 24747., 25530., 27160., 27968., 10767., 11190., 12082.,
      12520., 13457., 13910., 14892., 15360., 10583., 11030., 11930., 12392.,
      13337., 13814., 14804., 15296., 21805., 22586., 24114., 24920., 26523.,
      27354., 29032., 29888., 22069., 22858., 24394., 25208., 26819., 27658.,
      29344., 30208., 10967., 11398., 12298., 12744., 13689., 14150., 15140.,
      15616., 5333.,  5546.,  6042.,  6264.,  6787.,  7018.,  7568.,  7808.,
      11815., 12230., 13082., 13512., 14409., 14854., 15796., 16256., 14495.,
      14966., 15874., 16360., 17313., 17814., 18812., 19328., 8277.,  8570.,
      9130.,  9432.,  10019., 10330., 10944., 11264.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 18753.,
      19426., 20846., 21544., 23039., 23762., 25332., 26080., 22513., 23362.,
      24958., 25832., 27503., 28402., 30148., 31072., 22649., 23378., 24854.,
      25608., 27159., 27938., 29564., 30368., 20633., 21394., 22902., 23688.,
      25271., 26082., 27740., 28576., 22945., 23714., 25230., 26024., 27615.,
      28434., 30100., 30944., 24529., 25346., 26910., 27752., 29391., 30258.,
      31972., 32864., 20633., 21394., 22902., 23688., 25271., 26082., 27740.,
      28576., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368.,
      18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 22513.,
      23362., 24958., 25832., 27503., 28402., 30148., 31072., 22649., 23378.,
      24854., 25608., 27159., 27938., 29564., 30368.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6996.,  7304.,  7612.,  7920.,  8576.,  8896.,  9216.,  9536.,  10252.,
      10584., 10916., 11248., 12024., 12368., 12712., 13056., 12252., 12760.,
      13268., 13776., 14864., 15392., 15920., 16448., 17636., 18184., 18732.,
      19280., 20568., 21136., 21704., 22272., 13052., 13592., 14132., 14672.,
      15792., 16352., 16912., 17472., 18692., 19272., 19852., 20432., 21752.,
      22352., 22952., 23552., 9108.,  9480.,  9852.,  10224., 10944., 11328.,
      11712., 12096., 12876., 13272., 13668., 14064., 14904., 15312., 15720.,
      16128., 13543., 14046., 14549., 15052., 15998., 16516., 17034., 17552.,
      18573., 19106., 19639., 20172., 21268., 21816., 22364., 22912., 18517.,
      19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270.,
      28109., 28948., 30688., 31552., 32416., 33280., 16925., 17658., 18391.,
      19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740.,
      28424., 29232., 30040., 30848., 9335.,  9758.,  10181., 10604., 11438.,
      11876., 12314., 12752., 13661., 14114., 14567., 15020., 16004., 16472.,
      16940., 17408., 11567., 12014., 12461., 12908., 13798., 14260., 14722.,
      15184., 16149., 16626., 17103., 17580., 18620., 19112., 19604., 20096.,
      20045., 20826., 21607., 22388., 23870., 24676., 25482., 26288., 27895.,
      28726., 29557., 30388., 32120., 32976., 33832., 34688., 18517., 19306.,
      20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109.,
      28948., 30688., 31552., 32416., 33280., 9727.,  10158., 10589., 11020.,
      11862., 12308., 12754., 13200., 14117., 14578., 15039., 15500., 16492.,
      16968., 17444., 17920., 4757.,  4970.,  5183.,  5396.,  5846.,  6068.,
      6290.,  6512.,  7007.,  7238.,  7469.,  7700.,  8240.,  8480.,  8720.,
      8960.,  9455.,  9870.,  10285., 10700., 11526., 11956., 12386., 12816.,
      13717., 14162., 14607., 15052., 16028., 16488., 16948., 17408., 11175.,
      11646., 12117., 12588., 13470., 13956., 14442., 14928., 15885., 16386.,
      16887., 17388., 18420., 18936., 19452., 19968., 6789.,  7082.,  7375.,
      7668.,  8230.,  8532.,  8834.,  9136.,  9743.,  10054., 10365., 10676.,
      11328., 11648., 11968., 12288., 10196., 10632., 11068., 11504., 12288.,
      12736., 13184., 13632., 14476., 14936., 15396., 15856., 16760., 17232.,
      17704., 18176., 15452., 16088., 16724., 17360., 18576., 19232., 19888.,
      20544., 21860., 22536., 23212., 23888., 25304., 26000., 26696., 27392.,
      14140., 14744., 15348., 15952., 17136., 17760., 18384., 19008., 20292.,
      20936., 21580., 22224., 23608., 24272., 24936., 25600., 10132., 10504.,
      10876., 11248., 11968., 12352., 12736., 13120., 13900., 14296., 14692.,
      15088., 15928., 16336., 16744., 17152., 13063., 13598., 14133., 14668.,
      15646., 16196., 16746., 17296., 18349., 18914., 19479., 20044., 21172.,
      21752., 22332., 22912., 18549., 19370., 20191., 21012., 22534., 23380.,
      24226., 25072., 26719., 27590., 28461., 29332., 31104., 32000., 32896.,
      33792., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576.,
      24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 8791.,
      9182.,  9573.,  9964.,  10766., 11172., 11578., 11984., 12861., 13282.,
      13703., 14124., 15076., 15512., 15948., 16384., 13199., 13742., 14285.,
      14828., 15814., 16372., 16930., 17488., 18549., 19122., 19695., 20268.,
      21404., 21992., 22580., 23168., 20141., 21018., 21895., 22772., 24350.,
      25252., 26154., 27056., 28759., 29686., 30613., 31540., 33368., 34320.,
      35272., 36224., 18549., 19370., 20191., 21012., 22534., 23380., 24226.,
      25072., 26719., 27590., 28461., 29332., 31104., 32000., 32896., 33792.,
      11295., 11758., 12221., 12684., 13558., 14036., 14514., 14992., 15941.,
      16434., 16927., 17420., 18444., 18952., 19460., 19968., 6901.,  7210.,
      7519.,  7828.,  8374.,  8692.,  9010.,  9328.,  9919.,  10246., 10573.,
      10900., 11536., 11872., 12208., 12544., 13199., 13774., 14349., 14924.,
      15910., 16500., 17090., 17680., 18741., 19346., 19951., 20556., 21692.,
      22312., 22932., 23552., 12807., 13374., 13941., 14508., 15486., 16068.,
      16650., 17232., 18285., 18882., 19479., 20076., 21204., 21816., 22428.,
      23040., 7845.,  8170.,  8495.,  8820.,  9414.,  9748.,  10082., 10416.,
      11055., 11398., 11741., 12084., 12768., 13120., 13472., 13824., 6996.,
      7304.,  7612.,  7920.,  8576.,  8896.,  9216.,  9536.,  10252., 10584.,
      10916., 11248., 12024., 12368., 12712., 13056., 12252., 12760., 13268.,
      13776., 14864., 15392., 15920., 16448., 17636., 18184., 18732., 19280.,
      20568., 21136., 21704., 22272., 13052., 13592., 14132., 14672., 15792.,
      16352., 16912., 17472., 18692., 19272., 19852., 20432., 21752., 22352.,
      22952., 23552., 9108.,  9480.,  9852.,  10224., 10944., 11328., 11712.,
      12096., 12876., 13272., 13668., 14064., 14904., 15312., 15720., 16128.,
      13543., 14046., 14549., 15052., 15998., 16516., 17034., 17552., 18573.,
      19106., 19639., 20172., 21268., 21816., 22364., 22912., 18517., 19306.,
      20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109.,
      28948., 30688., 31552., 32416., 33280., 16925., 17658., 18391., 19124.,
      20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424.,
      29232., 30040., 30848., 9335.,  9758.,  10181., 10604., 11438., 11876.,
      12314., 12752., 13661., 14114., 14567., 15020., 16004., 16472., 16940.,
      17408., 11567., 12014., 12461., 12908., 13798., 14260., 14722., 15184.,
      16149., 16626., 17103., 17580., 18620., 19112., 19604., 20096., 20045.,
      20826., 21607., 22388., 23870., 24676., 25482., 26288., 27895., 28726.,
      29557., 30388., 32120., 32976., 33832., 34688., 18517., 19306., 20095.,
      20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948.,
      30688., 31552., 32416., 33280., 9727.,  10158., 10589., 11020., 11862.,
      12308., 12754., 13200., 14117., 14578., 15039., 15500., 16492., 16968.,
      17444., 17920., 4757.,  4970.,  5183.,  5396.,  5846.,  6068.,  6290.,
      6512.,  7007.,  7238.,  7469.,  7700.,  8240.,  8480.,  8720.,  8960.,
      9455.,  9870.,  10285., 10700., 11526., 11956., 12386., 12816., 13717.,
      14162., 14607., 15052., 16028., 16488., 16948., 17408., 11175., 11646.,
      12117., 12588., 13470., 13956., 14442., 14928., 15885., 16386., 16887.,
      17388., 18420., 18936., 19452., 19968., 6789.,  7082.,  7375.,  7668.,
      8230.,  8532.,  8834.,  9136.,  9743.,  10054., 10365., 10676., 11328.,
      11648., 11968., 12288.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195.,
      28974., 29753., 30532., 32212., 33016., 33820., 34624., 15073., 15746.,
      16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505.,
      24228., 25852., 26600., 27348., 28096., 18321., 19170., 20019., 20868.,
      22418., 23292., 24166., 25040., 26715., 27614., 28513., 29412., 31212.,
      32136., 33060., 33984., 20761., 21490., 22219., 22948., 24378., 25132.,
      25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820.,
      34624., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800.,
      24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 19265.,
      20034., 20803., 21572., 23042., 23836., 24630., 25424., 27019., 27838.,
      28657., 29476., 31196., 32040., 32884., 33728., 22385., 23202., 24019.,
      24836., 26354., 27196., 28038., 28880., 30523., 31390., 32257., 33124.,
      34892., 35784., 36676., 37568., 16697., 17458., 18219., 18980., 20442.,
      21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368.,
      30204., 31040., 20761., 21490., 22219., 22948., 24378., 25132., 25886.,
      26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624.,
      15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059.,
      22782., 23505., 24228., 25852., 26600., 27348., 28096., 18321., 19170.,
      20019., 20868., 22418., 23292., 24166., 25040., 26715., 27614., 28513.,
      29412., 31212., 32136., 33060., 33984., 20761., 21490., 22219., 22948.,
      24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212.,
      33016., 33820., 34624.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4532.,  6000.,  6620.,  3914.,  8780.,  11150., 11800., 6790.,
      13100., 16350., 17000., 9670.,  5486.,  6670.,  6910.,  3711.,
      20916., 25840., 26460., 15050., 26060., 31950., 32600., 18310.,
      30380., 37150., 37800., 21190., 12014., 14350., 14590., 7743.,
      37300., 45680., 46300., 26186., 43340., 52750., 53400., 29830.,
      47660., 57950., 58600., 32710., 18542., 22030., 22270., 11775.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {8225.,  8875.,  13425., 14075.,
                                         29025., 29675., 34225., 34875.,
                                         49825., 50475., 55025., 55675.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8832.,  9064.,  11680., 12000., 12880., 13240., 7600.,  7828.,  17030.,
      17560., 21600., 22300., 22850., 23600., 13115., 13580., 25350., 26200.,
      31600., 32700., 32850., 34000., 18635., 19340., 10366., 10972., 12560.,
      13340., 13010., 13820., 6927.,  7422.,  8832.,  9064.,  11680., 12000.,
      12880., 13240., 7600.,  7828.,  17030., 17560., 21600., 22300., 22850.,
      23600., 13115., 13580., 25350., 26200., 31600., 32700., 32850., 34000.,
      18635., 19340., 10366., 10972., 12560., 13340., 13010., 13820., 6927.,
      7422.,  8832.,  9064.,  11680., 12000., 12880., 13240., 7600.,  7828.,
      17030., 17560., 21600., 22300., 22850., 23600., 13115., 13580., 25350.,
      26200., 31600., 32700., 32850., 34000., 18635., 19340., 10366., 10972.,
      12560., 13340., 13010., 13820., 6927.,  7422.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15975., 16450., 17225., 17750., 25975., 26850., 27225., 28150.,
      15975., 16450., 17225., 17750., 25975., 26850., 27225., 28150.,
      15975., 16450., 17225., 17750., 25975., 26850., 27225., 28150.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5912.,  6144.,  6376.,  6608.,  8832.,  9152.,  9472.,  9792.,  10040.,
      10400., 10760., 11120., 6012.,  6240.,  6468.,  6696.,  13818., 14348.,
      14878., 15408., 19076., 19776., 20476., 21176., 20374., 21124., 21874.,
      22624., 11685., 12150., 12615., 13080., 21946., 22796., 23646., 24496.,
      29460., 30560., 31660., 32760., 30758., 31908., 33058., 34208., 17365.,
      18070., 18775., 19480., 20126., 20732., 21338., 21944., 24340., 25120.,
      25900., 26680., 25210., 26020., 26830., 27640., 13359., 13854., 14349.,
      14844., 5912.,  6144.,  6376.,  6608.,  8832.,  9152.,  9472.,  9792.,
      10040., 10400., 10760., 11120., 6012.,  6240.,  6468.,  6696.,  13818.,
      14348., 14878., 15408., 19076., 19776., 20476., 21176., 20374., 21124.,
      21874., 22624., 11685., 12150., 12615., 13080., 21946., 22796., 23646.,
      24496., 29460., 30560., 31660., 32760., 30758., 31908., 33058., 34208.,
      17365., 18070., 18775., 19480., 20126., 20732., 21338., 21944., 24340.,
      25120., 25900., 26680., 25210., 26020., 26830., 27640., 13359., 13854.,
      14349., 14844., 5912.,  6144.,  6376.,  6608.,  8832.,  9152.,  9472.,
      9792.,  10040., 10400., 10760., 11120., 6012.,  6240.,  6468.,  6696.,
      13818., 14348., 14878., 15408., 19076., 19776., 20476., 21176., 20374.,
      21124., 21874., 22624., 11685., 12150., 12615., 13080., 21946., 22796.,
      23646., 24496., 29460., 30560., 31660., 32760., 30758., 31908., 33058.,
      34208., 17365., 18070., 18775., 19480., 20126., 20732., 21338., 21944.,
      24340., 25120., 25900., 26680., 25210., 26020., 26830., 27640., 13359.,
      13854., 14349., 14844.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13235., 13710., 14185., 14660., 14533., 15058., 15583., 16108.,
      23619., 24494., 25369., 26244., 24917., 25842., 26767., 27692.,
      13235., 13710., 14185., 14660., 14533., 15058., 15583., 16108.,
      23619., 24494., 25369., 26244., 24917., 25842., 26767., 27692.,
      13235., 13710., 14185., 14660., 14533., 15058., 15583., 16108.,
      23619., 24494., 25369., 26244., 24917., 25842., 26767., 27692.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17168., 18128., 22760., 24000., 25160., 26480., 14864., 15656., 12548.,
      13616., 16975., 18360., 19475., 20960., 11293., 12184., 18436., 19632.,
      24175., 25720., 26675., 28320., 15421., 16408., 8252.,  8888.,  10495.,
      11320., 11395., 12280., 6249.,  6780.,  17168., 18128., 22760., 24000.,
      25160., 26480., 14864., 15656., 12548., 13616., 16975., 18360., 19475.,
      20960., 11293., 12184., 18436., 19632., 24175., 25720., 26675., 28320.,
      15421., 16408., 8252.,  8888.,  10495., 11320., 11395., 12280., 6249.,
      6780.,  17168., 18128., 22760., 24000., 25160., 26480., 14864., 15656.,
      12548., 13616., 16975., 18360., 19475., 20960., 11293., 12184., 18436.,
      19632., 24175., 25720., 26675., 28320., 15421., 16408., 8252.,  8888.,
      10495., 11320., 11395., 12280., 6249.,  6780.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31325., 32900., 33825., 35500., 51325., 53700., 53825., 56300.,
      31325., 32900., 33825., 35500., 51325., 53700., 53825., 56300.,
      31325., 32900., 33825., 35500., 51325., 53700., 53825., 56300.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11360., 11808., 12752., 13216., 17060., 17680., 18944., 19584., 19476.,
      20176., 21520., 22240., 11684., 12128., 12936., 13392., 18424., 18952.,
      20028., 20576., 23807., 24542., 25976., 26736., 26403., 27238., 28772.,
      29632., 14695., 15226., 16142., 16688., 13688., 14344., 15548., 16224.,
      19615., 20510., 22104., 23024., 22211., 23206., 24900., 25920., 12615.,
      13242., 14254., 14896., 16072., 16504., 17332., 17776., 20405., 20990.,
      22040., 22640., 22145., 22790., 23900., 24560., 12093., 12498., 13146.,
      13560., 11360., 11808., 12752., 13216., 17060., 17680., 18944., 19584.,
      19476., 20176., 21520., 22240., 11684., 12128., 12936., 13392., 18424.,
      18952., 20028., 20576., 23807., 24542., 25976., 26736., 26403., 27238.,
      28772., 29632., 14695., 15226., 16142., 16688., 13688., 14344., 15548.,
      16224., 19615., 20510., 22104., 23024., 22211., 23206., 24900., 25920.,
      12615., 13242., 14254., 14896., 16072., 16504., 17332., 17776., 20405.,
      20990., 22040., 22640., 22145., 22790., 23900., 24560., 12093., 12498.,
      13146., 13560., 11360., 11808., 12752., 13216., 17060., 17680., 18944.,
      19584., 19476., 20176., 21520., 22240., 11684., 12128., 12936., 13392.,
      18424., 18952., 20028., 20576., 23807., 24542., 25976., 26736., 26403.,
      27238., 28772., 29632., 14695., 15226., 16142., 16688., 13688., 14344.,
      15548., 16224., 19615., 20510., 22104., 23024., 22211., 23206., 24900.,
      25920., 12615., 13242., 14254., 14896., 16072., 16504., 17332., 17776.,
      20405., 20990., 22040., 22640., 22145., 22790., 23900., 24560., 12093.,
      12498., 13146., 13560.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17821., 18426., 19730., 20360., 20417., 21122., 22526., 23256.,
      17213., 17978., 19442., 20232., 19809., 20674., 22238., 23128.,
      17821., 18426., 19730., 20360., 20417., 21122., 22526., 23256.,
      17213., 17978., 19442., 20232., 19809., 20674., 22238., 23128.,
      17821., 18426., 19730., 20360., 20417., 21122., 22526., 23256.,
      17213., 17978., 19442., 20232., 19809., 20674., 22238., 23128.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12864., 13312., 13760., 14208., 15184., 15648., 16112., 16576., 18844.,
      19464., 20084., 20704., 22016., 22656., 23296., 23936., 21292., 21992.,
      22692., 23392., 24784., 25504., 26224., 26944., 14604., 15048., 15492.,
      15936., 16840., 17296., 17752., 18208., 16672., 17200., 17728., 18256.,
      19412., 19960., 20508., 21056., 21983., 22718., 23453., 24188., 25720.,
      26480., 27240., 28000., 24771., 25606., 26441., 27276., 28908., 29768.,
      30628., 31488., 16443., 16974., 17505., 18036., 19066., 19612., 20158.,
      20704., 17312., 17968., 18624., 19280., 20564., 21240., 21916., 22592.,
      23679., 24574., 25469., 26364., 28056., 28976., 29896., 30816., 26467.,
      27462., 28457., 29452., 31244., 32264., 33284., 34304., 16283., 16910.,
      17537., 18164., 19290., 19932., 20574., 21216., 13536., 13968., 14400.,
      14832., 15660., 16104., 16548., 16992., 17249., 17834., 18419., 19004.,
      20056., 20656., 21256., 21856., 18877., 19522., 20167., 20812., 21924.,
      22584., 23244., 23904., 12069., 12474., 12879., 13284., 13974., 14388.,
      14802., 15216., 12864., 13312., 13760., 14208., 15184., 15648., 16112.,
      16576., 18844., 19464., 20084., 20704., 22016., 22656., 23296., 23936.,
      21292., 21992., 22692., 23392., 24784., 25504., 26224., 26944., 14604.,
      15048., 15492., 15936., 16840., 17296., 17752., 18208., 16672., 17200.,
      17728., 18256., 19412., 19960., 20508., 21056., 21983., 22718., 23453.,
      24188., 25720., 26480., 27240., 28000., 24771., 25606., 26441., 27276.,
      28908., 29768., 30628., 31488., 16443., 16974., 17505., 18036., 19066.,
      19612., 20158., 20704., 17312., 17968., 18624., 19280., 20564., 21240.,
      21916., 22592., 23679., 24574., 25469., 26364., 28056., 28976., 29896.,
      30816., 26467., 27462., 28457., 29452., 31244., 32264., 33284., 34304.,
      16283., 16910., 17537., 18164., 19290., 19932., 20574., 21216., 13536.,
      13968., 14400., 14832., 15660., 16104., 16548., 16992., 17249., 17834.,
      18419., 19004., 20056., 20656., 21256., 21856., 18877., 19522., 20167.,
      20812., 21924., 22584., 23244., 23904., 12069., 12474., 12879., 13284.,
      13974., 14388., 14802., 15216., 12864., 13312., 13760., 14208., 15184.,
      15648., 16112., 16576., 18844., 19464., 20084., 20704., 22016., 22656.,
      23296., 23936., 21292., 21992., 22692., 23392., 24784., 25504., 26224.,
      26944., 14604., 15048., 15492., 15936., 16840., 17296., 17752., 18208.,
      16672., 17200., 17728., 18256., 19412., 19960., 20508., 21056., 21983.,
      22718., 23453., 24188., 25720., 26480., 27240., 28000., 24771., 25606.,
      26441., 27276., 28908., 29768., 30628., 31488., 16443., 16974., 17505.,
      18036., 19066., 19612., 20158., 20704., 17312., 17968., 18624., 19280.,
      20564., 21240., 21916., 22592., 23679., 24574., 25469., 26364., 28056.,
      28976., 29896., 30816., 26467., 27462., 28457., 29452., 31244., 32264.,
      33284., 34304., 16283., 16910., 17537., 18164., 19290., 19932., 20574.,
      21216., 13536., 13968., 14400., 14832., 15660., 16104., 16548., 16992.,
      17249., 17834., 18419., 19004., 20056., 20656., 21256., 21856., 18877.,
      19522., 20167., 20812., 21924., 22584., 23244., 23904., 12069., 12474.,
      12879., 13284., 13974., 14388., 14802., 15216.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 19201.,
      19906., 20611., 21316., 22818., 23548., 24278., 25008., 21181., 21946.,
      22711., 23476., 25038., 25828., 26618., 27408., 23969., 24834., 25699.,
      26564., 28226., 29116., 30006., 30896., 16413., 17018., 17623., 18228.,
      19630., 20260., 20890., 21520., 19201., 19906., 20611., 21316., 22818.,
      23548., 24278., 25008., 21181., 21946., 22711., 23476., 25038., 25828.,
      26618., 27408., 23969., 24834., 25699., 26564., 28226., 29116., 30006.,
      30896., 16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520.,
      19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 21181.,
      21946., 22711., 23476., 25038., 25828., 26618., 27408., 23969., 24834.,
      25699., 26564., 28226., 29116., 30006., 30896.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13552., 14400., 15280., 16192., 19820., 21024., 22268., 23552., 24652.,
      26016., 27420., 28864., 14708., 15552., 16420., 17312., 15348., 16400.,
      17492., 18624., 22005., 23484., 25013., 26592., 27197., 28876., 30605.,
      32384., 15595., 16628., 17691., 18784., 15348., 16400., 17492., 18624.,
      22005., 23484., 25013., 26592., 27197., 28876., 30605., 32384., 15595.,
      16628., 17691., 18784., 10780., 11504., 12252., 13024., 15415., 16380.,
      17375., 18400., 18895., 19980., 21095., 22240., 10521., 11172., 11841.,
      12528., 13552., 14400., 15280., 16192., 19820., 21024., 22268., 23552.,
      24652., 26016., 27420., 28864., 14708., 15552., 16420., 17312., 15348.,
      16400., 17492., 18624., 22005., 23484., 25013., 26592., 27197., 28876.,
      30605., 32384., 15595., 16628., 17691., 18784., 15348., 16400., 17492.,
      18624., 22005., 23484., 25013., 26592., 27197., 28876., 30605., 32384.,
      15595., 16628., 17691., 18784., 10780., 11504., 12252., 13024., 15415.,
      16380., 17375., 18400., 18895., 19980., 21095., 22240., 10521., 11172.,
      11841., 12528., 13552., 14400., 15280., 16192., 19820., 21024., 22268.,
      23552., 24652., 26016., 27420., 28864., 14708., 15552., 16420., 17312.,
      15348., 16400., 17492., 18624., 22005., 23484., 25013., 26592., 27197.,
      28876., 30605., 32384., 15595., 16628., 17691., 18784., 15348., 16400.,
      17492., 18624., 22005., 23484., 25013., 26592., 27197., 28876., 30605.,
      32384., 15595., 16628., 17691., 18784., 10780., 11504., 12252., 13024.,
      15415., 16380., 17375., 18400., 18895., 19980., 21095., 22240., 10521.,
      11172., 11841., 12528.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13617., 14836., 16105., 17424., 18809., 20228., 21697., 23216.,
      13617., 14836., 16105., 17424., 18809., 20228., 21697., 23216.,
      13617., 14836., 16105., 17424., 18809., 20228., 21697., 23216.,
      13617., 14836., 16105., 17424., 18809., 20228., 21697., 23216.,
      13617., 14836., 16105., 17424., 18809., 20228., 21697., 23216.,
      13617., 14836., 16105., 17424., 18809., 20228., 21697., 23216.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12464., 12832., 13696., 14080., 14992., 15392., 16352., 16768., 18516.,
      19096., 20328., 20928., 22220., 22840., 24192., 24832., 23412., 24152.,
      25544., 26304., 27756., 28536., 30048., 30848., 16636., 17128., 18056.,
      18560., 19524., 20040., 21040., 21568., 15900., 16424., 17536., 18080.,
      19252., 19816., 21048., 21632., 22661., 23466., 25018., 25848., 27475.,
      28330., 30032., 30912., 28237., 29242., 30994., 32024., 33851., 34906.,
      36808., 37888., 18239., 18902., 20034., 20712., 21889., 22582., 23804.,
      24512., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632.,
      22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 28237.,
      29242., 30994., 32024., 33851., 34906., 36808., 37888., 18239., 18902.,
      20034., 20712., 21889., 22582., 23804., 24512., 9828.,  10168., 10880.,
      11232., 11980., 12344., 13128., 13504., 13483., 13998., 14950., 15480.,
      16477., 17022., 18064., 18624., 16739., 17374., 18446., 19096., 20213.,
      20878., 22040., 22720., 9681.,  10098., 10782., 11208., 11919., 12354.,
      13092., 13536., 12464., 12832., 13696., 14080., 14992., 15392., 16352.,
      16768., 18516., 19096., 20328., 20928., 22220., 22840., 24192., 24832.,
      23412., 24152., 25544., 26304., 27756., 28536., 30048., 30848., 16636.,
      17128., 18056., 18560., 19524., 20040., 21040., 21568., 15900., 16424.,
      17536., 18080., 19252., 19816., 21048., 21632., 22661., 23466., 25018.,
      25848., 27475., 28330., 30032., 30912., 28237., 29242., 30994., 32024.,
      33851., 34906., 36808., 37888., 18239., 18902., 20034., 20712., 21889.,
      22582., 23804., 24512., 15900., 16424., 17536., 18080., 19252., 19816.,
      21048., 21632., 22661., 23466., 25018., 25848., 27475., 28330., 30032.,
      30912., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888.,
      18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512., 9828.,
      10168., 10880., 11232., 11980., 12344., 13128., 13504., 13483., 13998.,
      14950., 15480., 16477., 17022., 18064., 18624., 16739., 17374., 18446.,
      19096., 20213., 20878., 22040., 22720., 9681.,  10098., 10782., 11208.,
      11919., 12354., 13092., 13536., 12464., 12832., 13696., 14080., 14992.,
      15392., 16352., 16768., 18516., 19096., 20328., 20928., 22220., 22840.,
      24192., 24832., 23412., 24152., 25544., 26304., 27756., 28536., 30048.,
      30848., 16636., 17128., 18056., 18560., 19524., 20040., 21040., 21568.,
      15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632., 22661.,
      23466., 25018., 25848., 27475., 28330., 30032., 30912., 28237., 29242.,
      30994., 32024., 33851., 34906., 36808., 37888., 18239., 18902., 20034.,
      20712., 21889., 22582., 23804., 24512., 15900., 16424., 17536., 18080.,
      19252., 19816., 21048., 21632., 22661., 23466., 25018., 25848., 27475.,
      28330., 30032., 30912., 28237., 29242., 30994., 32024., 33851., 34906.,
      36808., 37888., 18239., 18902., 20034., 20712., 21889., 22582., 23804.,
      24512., 9828.,  10168., 10880., 11232., 11980., 12344., 13128., 13504.,
      13483., 13998., 14950., 15480., 16477., 17022., 18064., 18624., 16739.,
      17374., 18446., 19096., 20213., 20878., 22040., 22720., 9681.,  10098.,
      10782., 11208., 11919., 12354., 13092., 13536.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 20169.,
      20914., 22406., 23176., 24743., 25538., 27180., 28000., 14593., 15138.,
      16430., 17000., 18367., 18962., 20404., 21024., 20169., 20914., 22406.,
      23176., 24743., 25538., 27180., 28000., 14593., 15138., 16430., 17000.,
      18367., 18962., 20404., 21024., 20169., 20914., 22406., 23176., 24743.,
      25538., 27180., 28000., 14593., 15138., 16430., 17000., 18367., 18962.,
      20404., 21024., 20169., 20914., 22406., 23176., 24743., 25538., 27180.,
      28000., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024.,
      20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 14593.,
      15138., 16430., 17000., 18367., 18962., 20404., 21024., 20169., 20914.,
      22406., 23176., 24743., 25538., 27180., 28000.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9200.,  9568.,  9936.,  10304., 11136., 11520., 11904., 12288., 13200.,
      13600., 14000., 14400., 15392., 15808., 16224., 16640., 13988., 14568.,
      15148., 15728., 16888., 17488., 18088., 18688., 19948., 20568., 21188.,
      21808., 23168., 23808., 24448., 25088., 17988., 18728., 19468., 20208.,
      21528., 22288., 23048., 23808., 25228., 26008., 26788., 27568., 29088.,
      29888., 30688., 31488., 11788., 12280., 12772., 13264., 14104., 14608.,
      15112., 15616., 16516., 17032., 17548., 18064., 19024., 19552., 20080.,
      20608., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344.,
      18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 18661.,
      19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558.,
      28413., 29268., 31024., 31904., 32784., 33664., 23469., 24474., 25479.,
      26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276.,
      38232., 39312., 40392., 41472., 14823., 15486., 16149., 16812., 17886.,
      18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080.,
      25788., 26496., 13036., 13560., 14084., 14608., 15712., 16256., 16800.,
      17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296.,
      18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703.,
      27558., 28413., 29268., 31024., 31904., 32784., 33664., 23469., 24474.,
      25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221.,
      36276., 38232., 39312., 40392., 41472., 14823., 15486., 16149., 16812.,
      17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372.,
      25080., 25788., 26496., 8180.,  8520.,  8860.,  9200.,  9888.,  10240.,
      10592., 10944., 11692., 12056., 12420., 12784., 13592., 13968., 14344.,
      14720., 11923., 12438., 12953., 13468., 14394., 14924., 15454., 15984.,
      16985., 17530., 18075., 18620., 19696., 20256., 20816., 21376., 14731.,
      15366., 16001., 16636., 17682., 18332., 18982., 19632., 20753., 21418.,
      22083., 22748., 23944., 24624., 25304., 25984., 10241., 10658., 11075.,
      11492., 12178., 12604., 13030., 13456., 14187., 14622., 15057., 15492.,
      16268., 16712., 17156., 17600., 9200.,  9568.,  9936.,  10304., 11136.,
      11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808.,
      16224., 16640., 13988., 14568., 15148., 15728., 16888., 17488., 18088.,
      18688., 19948., 20568., 21188., 21808., 23168., 23808., 24448., 25088.,
      17988., 18728., 19468., 20208., 21528., 22288., 23048., 23808., 25228.,
      26008., 26788., 27568., 29088., 29888., 30688., 31488., 11788., 12280.,
      12772., 13264., 14104., 14608., 15112., 15616., 16516., 17032., 17548.,
      18064., 19024., 19552., 20080., 20608., 13036., 13560., 14084., 14608.,
      15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544.,
      22128., 22712., 23296., 18661., 19466., 20271., 21076., 22582., 23412.,
      24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784.,
      33664., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280.,
      33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 14823.,
      15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069., 21762.,
      22455., 23148., 24372., 25080., 25788., 26496., 13036., 13560., 14084.,
      14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240.,
      21544., 22128., 22712., 23296., 18661., 19466., 20271., 21076., 22582.,
      23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904.,
      32784., 33664., 23469., 24474., 25479., 26484., 28190., 29220., 30250.,
      31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472.,
      14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069.,
      21762., 22455., 23148., 24372., 25080., 25788., 26496., 8180.,  8520.,
      8860.,  9200.,  9888.,  10240., 10592., 10944., 11692., 12056., 12420.,
      12784., 13592., 13968., 14344., 14720., 11923., 12438., 12953., 13468.,
      14394., 14924., 15454., 15984., 16985., 17530., 18075., 18620., 19696.,
      20256., 20816., 21376., 14731., 15366., 16001., 16636., 17682., 18332.,
      18982., 19632., 20753., 21418., 22083., 22748., 23944., 24624., 25304.,
      25984., 10241., 10658., 11075., 11492., 12178., 12604., 13030., 13456.,
      14187., 14622., 15057., 15492., 16268., 16712., 17156., 17600., 9200.,
      9568.,  9936.,  10304., 11136., 11520., 11904., 12288., 13200., 13600.,
      14000., 14400., 15392., 15808., 16224., 16640., 13988., 14568., 15148.,
      15728., 16888., 17488., 18088., 18688., 19948., 20568., 21188., 21808.,
      23168., 23808., 24448., 25088., 17988., 18728., 19468., 20208., 21528.,
      22288., 23048., 23808., 25228., 26008., 26788., 27568., 29088., 29888.,
      30688., 31488., 11788., 12280., 12772., 13264., 14104., 14608., 15112.,
      15616., 16516., 17032., 17548., 18064., 19024., 19552., 20080., 20608.,
      13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344., 18548.,
      19112., 19676., 20240., 21544., 22128., 22712., 23296., 18661., 19466.,
      20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413.,
      29268., 31024., 31904., 32784., 33664., 23469., 24474., 25479., 26484.,
      28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232.,
      39312., 40392., 41472., 14823., 15486., 16149., 16812., 17886., 18564.,
      19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080., 25788.,
      26496., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344.,
      18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 18661.,
      19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558.,
      28413., 29268., 31024., 31904., 32784., 33664., 23469., 24474., 25479.,
      26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276.,
      38232., 39312., 40392., 41472., 14823., 15486., 16149., 16812., 17886.,
      18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080.,
      25788., 26496., 8180.,  8520.,  8860.,  9200.,  9888.,  10240., 10592.,
      10944., 11692., 12056., 12420., 12784., 13592., 13968., 14344., 14720.,
      11923., 12438., 12953., 13468., 14394., 14924., 15454., 15984., 16985.,
      17530., 18075., 18620., 19696., 20256., 20816., 21376., 14731., 15366.,
      16001., 16636., 17682., 18332., 18982., 19632., 20753., 21418., 22083.,
      22748., 23944., 24624., 25304., 25984., 10241., 10658., 11075., 11492.,
      12178., 12604., 13030., 13456., 14187., 14622., 15057., 15492., 16268.,
      16712., 17156., 17600.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011.,
      20606., 21201., 21796., 23292., 23912., 24532., 25152., 18857., 19602.,
      20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009.,
      28804., 30500., 31320., 32140., 32960., 14049., 14594., 15139., 15684.,
      16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292.,
      23912., 24532., 25152., 18857., 19602., 20347., 21092., 22538., 23308.,
      24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140.,
      32960., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640.,
      20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 18857.,
      19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214.,
      28009., 28804., 30500., 31320., 32140., 32960., 14049., 14594., 15139.,
      15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796.,
      23292., 23912., 24532., 25152., 18857., 19602., 20347., 21092., 22538.,
      23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320.,
      32140., 32960., 14049., 14594., 15139., 15684., 16930., 17500., 18070.,
      18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152.,
      18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419.,
      27214., 28009., 28804., 30500., 31320., 32140., 32960., 14049., 14594.,
      15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201.,
      21796., 23292., 23912., 24532., 25152., 18857., 19602., 20347., 21092.,
      22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500.,
      31320., 32140., 32960.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5500.,  7180.,  7800.,  8420.,  4934.,  10800., 13600., 14250., 14900.,
      8530.,  16200., 20100., 20750., 21400., 12130., 6790.,  8210.,  8450.,
      8690.,  4653.,  25980., 31980., 32600., 33220., 18854., 20368., 24880.,
      25530., 21188., 10002., 9384.,  11540., 12190., 10408., 5026.,  1894.,
      2450.,  2690.,  2930.,  1629.,  13692., 17100., 17720., 18340., 10502.,
      19440., 24000., 24650., 25300., 14290., 24840., 30500., 31150., 31800.,
      17890., 10054., 12050., 12290., 12530., 6669.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10025., 10675., 11325., 16525., 17175., 17825., 36025., 36675., 34125.,
      16285., 16935., 15665., 20425., 21075., 21725., 26925., 27575., 28225.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10720., 11000., 13980., 14360., 15180., 15600., 16380., 16840., 9580.,
      9868.,  20950., 21600., 26350., 27200., 27600., 28500., 28850., 29800.,
      16475., 17060., 19574., 20368., 19586., 20488., 16484., 17308., 15750.,
      16560., 8783.,  9284.,  6174.,  6668.,  5156.,  5668.,  3814.,  4228.,
      3560.,  3940.,  1773.,  2010.,  18656., 19192., 23580., 24280., 24780.,
      25520., 25980., 26760., 14956., 15436., 17494., 18208., 21950., 22880.,
      23200., 24180., 19586., 20488., 9387.,  9892.,  12022., 12624., 15250.,
      16040., 16500., 17340., 15446., 16208., 8095.,  8516.,  3614.,  3788.,
      4660.,  4900.,  5110.,  5380.,  5560.,  5860.,  3069.,  3258.,  20448.,
      21112., 21404., 22168., 19980., 20720., 21180., 21960., 12076., 12556.,
      13014., 13664., 14094., 14848., 14000., 14740., 15250., 16040., 8507.,
      8996.,  15222., 15760., 18914., 19528., 20100., 20700., 21350., 22000.,
      12335., 12740., 6686.,  7052.,  8260.,  8740.,  8710.,  9220.,  9160.,
      9700.,  4941.,  5274.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19475., 20050., 20725., 21350., 21975., 22650., 28839., 29850., 24201.,
      25134., 20075., 20930., 29475., 30450., 30725., 31750., 28839., 29850.,
      16375., 17210., 17625., 18510., 17019., 17890., 17971., 18834., 15125.,
      15910., 16375., 17210., 15111., 15834., 14825., 15470., 16075., 16770.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7080.,  7360.,  7640.,  7920.,  10428., 10808., 11188., 11568., 11636.,
      12056., 12476., 12896., 12844., 13304., 13764., 14224., 7608.,  7896.,
      8184.,  8472.,  16930., 17580., 18230., 18880., 23178., 24028., 24878.,
      25728., 24476., 25376., 26276., 27176., 25774., 26724., 27674., 28624.,
      14701., 15286., 15871., 16456., 20178., 20972., 21766., 22560., 26750.,
      27652., 28554., 29456., 27664., 28488., 29312., 30136., 25058., 25868.,
      26678., 27488., 13481., 13982., 14483., 14984., 11854., 12348., 12842.,
      13336., 9800.,  10312., 10824., 11336., 7214.,  7628.,  8042.,  8456.,
      6740.,  7120.,  7500.,  7880.,  3309.,  3546.,  3783.,  4020.,  14504.,
      15040., 15576., 16112., 20092., 20792., 21492., 22192., 21300., 22040.,
      22780., 23520., 22508., 23288., 24068., 24848., 13048., 13528., 14008.,
      14488., 18146., 18860., 19574., 20288., 25562., 26492., 27422., 28352.,
      26860., 27840., 28820., 29800., 26750., 27652., 28554., 29456., 15965.,
      16470., 16975., 17480., 13458., 14060., 14662., 15264., 17166., 17956.,
      18746., 19536., 18464., 19304., 20144., 20984., 15282., 16044., 16806.,
      17568., 7065.,  7486.,  7907.,  8328.,  7054.,  7228.,  7402.,  7576.,
      9080.,  9320.,  9560.,  9800.,  9950.,  10220., 10490., 10760., 10820.,
      11120., 11420., 11720., 5949.,  6138.,  6327.,  6516.,  17960., 18624.,
      19288., 19952., 22844., 23608., 24372., 25136., 22964., 23704., 24444.,
      25184., 24172., 24952., 25732., 26512., 14456., 14936., 15416., 15896.,
      17442., 18092., 18742., 19392., 17194., 17948., 18702., 19456., 15868.,
      16608., 17348., 18088., 17166., 17956., 18746., 19536., 9101.,  9590.,
      10079., 10568., 11730., 12268., 12806., 13344., 15454., 16068., 16682.,
      17296., 16688., 17288., 17888., 18488., 17986., 18636., 19286., 19936.,
      10441., 10846., 11251., 11656., 13006., 13372., 13738., 14104., 16040.,
      16520., 17000., 17480., 16910., 17420., 17930., 18440., 17780., 18320.,
      18860., 19400., 9549.,  9882.,  10215., 10548.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16039., 16614., 17189., 17764., 17337., 17962., 18587., 19212., 18635.,
      19310., 19985., 20660., 26907., 27918., 28929., 29940., 24749., 25682.,
      26615., 27548., 23615., 24470., 25325., 26180., 26423., 27398., 28373.,
      29348., 27721., 28746., 29771., 30796., 26907., 27918., 28929., 29940.,
      25707., 26542., 27377., 28212., 27005., 27890., 28775., 29660., 24655.,
      25526., 26397., 27268., 27079., 27942., 28805., 29668., 24409., 25194.,
      25979., 26764., 25707., 26542., 27377., 28212., 14075., 14798., 15521.,
      16244., 12429., 13074., 13719., 14364., 13727., 14422., 15117., 15812.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20944., 22000., 27360., 28720., 29760., 31200., 32160., 33680., 18824.,
      19736., 41380., 43200., 52075., 54400., 54575., 57000., 57075., 59600.,
      32605., 34120., 38628., 40736., 38547., 40976., 32343., 34616., 30875.,
      33120., 17221., 18568., 12156., 13336., 10087., 11336., 7403.,  8456.,
      6895.,  7880.,  3429.,  4020.,  36816., 38384., 46560., 48560., 48960.,
      51040., 51360., 53520., 29576., 30872., 34468., 36416., 43275., 45760.,
      45775., 48360., 38547., 40976., 18429., 19784., 23524., 25248., 29875.,
      32080., 32375., 34680., 30267., 32416., 15845., 17032., 7036.,  7576.,
      9095.,  9800.,  9995.,  10760., 10895., 11720., 6021.,  6516.,  40400.,
      42224., 42208., 44336., 39360., 41440., 41760., 43920., 23816., 25112.,
      25508., 27328., 27563., 29696., 27375., 29480., 29875., 32080., 16669.,
      17992., 29924., 31520., 37203., 39056., 39575., 41400., 42075., 44000.,
      24325., 25480., 13180., 14104., 16295., 17480., 17195., 18440., 18095.,
      19400., 9765.,  10548.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      38325., 40100., 40825., 42700., 43325., 45300., 57053., 59700., 47777.,
      50268., 39525., 41860., 58325., 60900., 60825., 63500., 57053., 59700.,
      32125., 34420., 34625., 37020., 33413., 35780., 35317., 37668., 29625.,
      31820., 32125., 34420., 29597., 31668., 29025., 30940., 31525., 33540.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9728.,  10144., 11056., 11488., 13340., 13824., 14952., 15456., 14668.,
      15168., 16312., 16832., 17084., 17664., 18888., 19488., 10844., 11216.,
      11952., 12336., 17608., 18248., 19436., 20096., 18955., 19734., 21212.,
      22016., 18927., 19742., 21256., 22096., 21523., 22438., 24052., 24992.,
      12087., 12666., 13630., 14224., 15144., 15816., 17036., 17728., 20787.,
      21478., 22868., 23584., 22935., 23534., 24832., 25456., 21627., 22262.,
      23596., 24256., 12207., 12618., 13414., 13840., 12584., 13048., 13908.,
      14384., 11485., 11982., 12944., 13456., 9769.,  10198., 11092., 11536.,
      10165., 10590., 11480., 11920., 5433.,  5706.,  6222.,  6504.,  19840.,
      20384., 21424., 21984., 25884., 26624., 28008., 28768., 21260., 21952.,
      23288., 24000., 17660., 18304., 19592., 20256., 8796.,  9168.,  9904.,
      10288., 13000., 13640., 14828., 15488., 19819., 20694., 22268., 23168.,
      20495., 21342., 22888., 23760., 20787., 21478., 22868., 23584., 13271.,
      13626., 14366., 14736., 15656., 16328., 17548., 18240., 21523., 22438.,
      24052., 24992., 24119., 25134., 26848., 27888., 22235., 23222., 24908.,
      25920., 11471., 12042., 12998., 13584., 13736., 14072., 14804., 15152.,
      17725., 18190., 19120., 19600., 19465., 19990., 20980., 21520., 21205.,
      21790., 22840., 23440., 11673., 12042., 12654., 13032., 9728.,  10144.,
      11056., 11488., 13340., 13824., 14952., 15456., 14668., 15168., 16312.,
      16832., 17084., 17664., 18888., 19488., 10844., 11216., 11952., 12336.,
      17608., 18248., 19436., 20096., 18955., 19734., 21212., 22016., 18927.,
      19742., 21256., 22096., 21523., 22438., 24052., 24992., 12087., 12666.,
      13630., 14224., 15144., 15816., 17036., 17728., 20787., 21478., 22868.,
      23584., 22935., 23534., 24832., 25456., 21627., 22262., 23596., 24256.,
      12207., 12618., 13414., 13840., 12584., 13048., 13908., 14384., 11485.,
      11982., 12944., 13456., 9769.,  10198., 11092., 11536., 10165., 10590.,
      11480., 11920., 5433.,  5706.,  6222.,  6504.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21701., 22314., 23626., 24264., 20329., 20914., 22198., 22808., 22925.,
      23610., 24994., 25704., 19565., 20474., 22082., 23016., 15761., 16514.,
      17966., 18744., 15925., 16650., 18074., 18824., 22821., 23786., 25450.,
      26440., 23049., 24050., 25750., 26776., 19565., 20474., 22082., 23016.,
      22925., 23610., 24994., 25704., 25521., 26306., 27790., 28600., 24469.,
      25290., 26810., 27656., 21701., 22314., 23626., 24264., 20329., 20914.,
      22198., 22808., 22925., 23610., 24994., 25704., 19565., 20474., 22082.,
      23016., 15761., 16514., 17966., 18744., 15925., 16650., 18074., 18824.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11936., 12352., 12768., 13184., 14128., 14560., 14992., 15424., 13076.,
      13560., 14044., 14528., 15704., 16208., 16712., 17216., 13412., 13912.,
      14412., 14912., 16104., 16624., 17144., 17664., 15860., 16440., 17020.,
      17600., 18872., 19472., 20072., 20672., 10692., 11064., 11436., 11808.,
      12640., 13024., 13408., 13792., 17744., 18384., 19024., 19664., 20932.,
      21592., 22252., 22912., 21451., 22230., 23009., 23788., 25364., 26168.,
      26972., 27776., 23151., 23966., 24781., 25596., 27208., 28048., 28888.,
      29728., 25939., 26854., 27769., 28684., 30396., 31336., 32276., 33216.,
      19115., 19694., 20273., 20852., 21930., 22524., 23118., 23712., 15344.,
      16016., 16688., 17360., 18660., 19352., 20044., 20736., 18547., 19238.,
      19929., 20620., 22108., 22824., 23540., 24256., 20631., 21230., 21829.,
      22428., 23824., 24448., 25072., 25696., 19771., 20406., 21041., 21676.,
      23108., 23768., 24428., 25088., 13379., 13790., 14201., 14612., 15522.,
      15948., 16374., 16800., 12672., 13136., 13600., 14064., 14924., 15400.,
      15876., 16352., 16137., 16634., 17131., 17628., 18592., 19104., 19616.,
      20128., 10981., 11410., 11839., 12268., 13164., 13608., 14052., 14496.,
      9985.,  10410., 10835., 11260., 12152., 12592., 13032., 13472., 5025.,
      5298.,  5571.,  5844.,  6402.,  6684.,  6966.,  7248.,  17696., 18240.,
      18784., 19328., 20400., 20960., 21520., 22080., 23572., 24312., 25052.,
      25792., 27224., 27984., 28744., 29504., 20260., 20952., 21644., 22336.,
      23720., 24432., 25144., 25856., 18996., 19640., 20284., 20928., 22264.,
      22928., 23592., 24256., 14788., 15160., 15532., 15904., 16736., 17120.,
      17504., 17888., 14672., 15312., 15952., 16592., 17860., 18520., 19180.,
      19840., 21035., 21910., 22785., 23660., 25332., 26232., 27132., 28032.,
      20111., 20958., 21805., 22652., 24296., 25168., 26040., 26912., 18547.,
      19238., 19929., 20620., 22108., 22824., 23540., 24256., 13515., 13870.,
      14225., 14580., 15434., 15804., 16174., 16544., 18416., 19088., 19760.,
      20432., 21732., 22424., 23116., 23808., 25939., 26854., 27769., 28684.,
      30396., 31336., 32276., 33216., 28727., 29742., 30757., 31772., 33584.,
      34624., 35664., 36704., 30875., 31862., 32849., 33836., 35620., 36632.,
      37644., 38656., 15843., 16414., 16985., 17556., 18626., 19212., 19798.,
      20384., 11008., 11344., 11680., 12016., 12748., 13096., 13444., 13792.,
      14313., 14778., 15243., 15708., 16640., 17120., 17600., 18080., 15941.,
      16466., 16991., 17516., 18508., 19048., 19588., 20128., 17569., 18154.,
      18739., 19324., 20376., 20976., 21576., 22176., 11265., 11634., 12003.,
      12372., 13026., 13404., 13782., 14160., 11936., 12352., 12768., 13184.,
      14128., 14560., 14992., 15424., 13076., 13560., 14044., 14528., 15704.,
      16208., 16712., 17216., 13412., 13912., 14412., 14912., 16104., 16624.,
      17144., 17664., 15860., 16440., 17020., 17600., 18872., 19472., 20072.,
      20672., 10692., 11064., 11436., 11808., 12640., 13024., 13408., 13792.,
      17744., 18384., 19024., 19664., 20932., 21592., 22252., 22912., 21451.,
      22230., 23009., 23788., 25364., 26168., 26972., 27776., 23151., 23966.,
      24781., 25596., 27208., 28048., 28888., 29728., 25939., 26854., 27769.,
      28684., 30396., 31336., 32276., 33216., 19115., 19694., 20273., 20852.,
      21930., 22524., 23118., 23712., 15344., 16016., 16688., 17360., 18660.,
      19352., 20044., 20736., 18547., 19238., 19929., 20620., 22108., 22824.,
      23540., 24256., 20631., 21230., 21829., 22428., 23824., 24448., 25072.,
      25696., 19771., 20406., 21041., 21676., 23108., 23768., 24428., 25088.,
      13379., 13790., 14201., 14612., 15522., 15948., 16374., 16800., 12672.,
      13136., 13600., 14064., 14924., 15400., 15876., 16352., 16137., 16634.,
      17131., 17628., 18592., 19104., 19616., 20128., 10981., 11410., 11839.,
      12268., 13164., 13608., 14052., 14496., 9985.,  10410., 10835., 11260.,
      12152., 12592., 13032., 13472., 5025.,  5298.,  5571.,  5844.,  6402.,
      6684.,  6966.,  7248.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19301., 19914., 20527., 21140., 22550., 23188., 23826., 24464., 18377.,
      18962., 19547., 20132., 21514., 22124., 22734., 23344., 21165., 21850.,
      22535., 23220., 24702., 25412., 26122., 26832., 28557., 29466., 30375.,
      31284., 32990., 33924., 34858., 35792., 18801., 19554., 20307., 21060.,
      22610., 23388., 24166., 24944., 16853., 17578., 18303., 19028., 20550.,
      21300., 22050., 22800., 27333., 28298., 29263., 30228., 31990., 32980.,
      33970., 34960., 29545., 30546., 31547., 32548., 34346., 35372., 36398.,
      37424., 28557., 29466., 30375., 31284., 32990., 33924., 34858., 35792.,
      21165., 21850., 22535., 23220., 24702., 25412., 26122., 26832., 23953.,
      24738., 25523., 26308., 27890., 28700., 29510., 30320., 23605., 24426.,
      25247., 26068., 27686., 28532., 29378., 30224., 19301., 19914., 20527.,
      21140., 22550., 23188., 23826., 24464., 18377., 18962., 19547., 20132.,
      21514., 22124., 22734., 23344., 21165., 21850., 22535., 23220., 24702.,
      25412., 26122., 26832., 28557., 29466., 30375., 31284., 32990., 33924.,
      34858., 35792., 18801., 19554., 20307., 21060., 22610., 23388., 24166.,
      24944., 16853., 17578., 18303., 19028., 20550., 21300., 22050., 22800.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14256., 15168., 16112., 17088., 19292., 20480., 21708., 22976., 15996.,
      17152., 18348., 19584., 14812., 16000., 17228., 18496., 8420.,  9120.,
      9844.,  10592., 13844., 14992., 16180., 17408., 17357., 18860., 20413.,
      22016., 18005., 19516., 21077., 22688., 20893., 22348., 23853., 25408.,
      13643., 14452., 15291., 16160., 14036., 15248., 16500., 17792., 20893.,
      22348., 23853., 25408., 25637., 27100., 28613., 30176., 22445., 23916.,
      25437., 27008., 11963., 12820., 13707., 14624., 14044., 14832., 15644.,
      16480., 14855., 15772., 16719., 17696., 14879., 15788., 16727., 17696.,
      17015., 17980., 18975., 20000., 9681.,  10260., 10857., 11472., 14256.,
      15168., 16112., 17088., 19292., 20480., 21708., 22976., 15996., 17152.,
      18348., 19584., 14812., 16000., 17228., 18496., 8420.,  9120.,  9844.,
      10592., 13844., 14992., 16180., 17408., 17357., 18860., 20413., 22016.,
      18005., 19516., 21077., 22688., 20893., 22348., 23853., 25408., 13643.,
      14452., 15291., 16160., 14036., 15248., 16500., 17792., 20893., 22348.,
      23853., 25408., 25637., 27100., 28613., 30176., 22445., 23916., 25437.,
      27008., 11963., 12820., 13707., 14624., 14044., 14832., 15644., 16480.,
      14855., 15772., 16719., 17696., 14879., 15788., 16727., 17696., 17015.,
      17980., 18975., 20000., 9681.,  10260., 10857., 11472., 14256., 15168.,
      16112., 17088., 19292., 20480., 21708., 22976., 15996., 17152., 18348.,
      19584., 14812., 16000., 17228., 18496., 8420.,  9120.,  9844.,  10592.,
      13844., 14992., 16180., 17408., 17357., 18860., 20413., 22016., 18005.,
      19516., 21077., 22688., 20893., 22348., 23853., 25408., 13643., 14452.,
      15291., 16160., 14036., 15248., 16500., 17792., 20893., 22348., 23853.,
      25408., 25637., 27100., 28613., 30176., 22445., 23916., 25437., 27008.,
      11963., 12820., 13707., 14624., 14044., 14832., 15644., 16480., 14855.,
      15772., 16719., 17696., 14879., 15788., 16727., 17696., 17015., 17980.,
      18975., 20000., 9681.,  10260., 10857., 11472.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23105., 24532., 26009., 27536., 21961., 23396., 24881., 26416., 21073.,
      22516., 24009., 25552., 21073., 22516., 24009., 25552., 19865., 21252.,
      22689., 24176., 18977., 20372., 21817., 23312., 23105., 24532., 26009.,
      27536., 21961., 23396., 24881., 26416., 21073., 22516., 24009., 25552.,
      21073., 22516., 24009., 25552., 19865., 21252., 22689., 24176., 18977.,
      20372., 21817., 23312., 23105., 24532., 26009., 27536., 21961., 23396.,
      24881., 26416., 21073., 22516., 24009., 25552., 21073., 22516., 24009.,
      25552., 19865., 21252., 22689., 24176., 18977., 20372., 21817., 23312.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14320., 14752., 15680., 16128., 17104., 17568., 18592., 19072., 16452.,
      17016., 18232., 18816., 20092., 20696., 22032., 22656., 13476., 14008.,
      15192., 15744., 16988., 17560., 18864., 19456., 14660., 15224., 16440.,
      17024., 18300., 18904., 20240., 20864., 11884., 12232., 13016., 13376.,
      14196., 14568., 15424., 15808., 14332., 14952., 16160., 16800., 18068.,
      18728., 20056., 20736., 19485., 20314., 21890., 22744., 24395., 25274.,
      27000., 27904., 20261., 21098., 22682., 23544., 25203., 26090., 27824.,
      28736., 21485., 22266., 23794., 24600., 26203., 27034., 28712., 29568.,
      18143., 18582., 19490., 19944., 20897., 21366., 22364., 22848., 15676.,
      16360., 17632., 18336., 19668., 20392., 21784., 22528., 21485., 22266.,
      23794., 24600., 26203., 27034., 28712., 29568., 26357., 27146., 28682.,
      29496., 31107., 31946., 33632., 34496., 27645., 28442., 29986., 30808.,
      32427., 33274., 34968., 35840., 14735., 15222., 16178., 16680., 17681.,
      18198., 19244., 19776., 12196., 12600., 13376., 13792., 14604., 15032.,
      15880., 16320., 17019., 17486., 18390., 18872., 19821., 20318., 21312.,
      21824., 13491., 13950., 14846., 15320., 16261., 16750., 17736., 18240.,
      14123., 14638., 15590., 16120., 17117., 17662., 18704., 19264., 8073.,
      8418.,  9030.,  9384.,  10023., 10386., 11052., 11424., 14320., 14752.,
      15680., 16128., 17104., 17568., 18592., 19072., 16452., 17016., 18232.,
      18816., 20092., 20696., 22032., 22656., 13476., 14008., 15192., 15744.,
      16988., 17560., 18864., 19456., 14660., 15224., 16440., 17024., 18300.,
      18904., 20240., 20864., 11884., 12232., 13016., 13376., 14196., 14568.,
      15424., 15808., 14332., 14952., 16160., 16800., 18068., 18728., 20056.,
      20736., 19485., 20314., 21890., 22744., 24395., 25274., 27000., 27904.,
      20261., 21098., 22682., 23544., 25203., 26090., 27824., 28736., 21485.,
      22266., 23794., 24600., 26203., 27034., 28712., 29568., 18143., 18582.,
      19490., 19944., 20897., 21366., 22364., 22848., 15676., 16360., 17632.,
      18336., 19668., 20392., 21784., 22528., 21485., 22266., 23794., 24600.,
      26203., 27034., 28712., 29568., 26357., 27146., 28682., 29496., 31107.,
      31946., 33632., 34496., 27645., 28442., 29986., 30808., 32427., 33274.,
      34968., 35840., 14735., 15222., 16178., 16680., 17681., 18198., 19244.,
      19776., 12196., 12600., 13376., 13792., 14604., 15032., 15880., 16320.,
      17019., 17486., 18390., 18872., 19821., 20318., 21312., 21824., 13491.,
      13950., 14846., 15320., 16261., 16750., 17736., 18240., 14123., 14638.,
      15590., 16120., 17117., 17662., 18704., 19264., 8073.,  8418.,  9030.,
      9384.,  10023., 10386., 11052., 11424., 14320., 14752., 15680., 16128.,
      17104., 17568., 18592., 19072., 16452., 17016., 18232., 18816., 20092.,
      20696., 22032., 22656., 13476., 14008., 15192., 15744., 16988., 17560.,
      18864., 19456., 14660., 15224., 16440., 17024., 18300., 18904., 20240.,
      20864., 11884., 12232., 13016., 13376., 14196., 14568., 15424., 15808.,
      14332., 14952., 16160., 16800., 18068., 18728., 20056., 20736., 19485.,
      20314., 21890., 22744., 24395., 25274., 27000., 27904., 20261., 21098.,
      22682., 23544., 25203., 26090., 27824., 28736., 21485., 22266., 23794.,
      24600., 26203., 27034., 28712., 29568., 18143., 18582., 19490., 19944.,
      20897., 21366., 22364., 22848., 15676., 16360., 17632., 18336., 19668.,
      20392., 21784., 22528., 21485., 22266., 23794., 24600., 26203., 27034.,
      28712., 29568., 26357., 27146., 28682., 29496., 31107., 31946., 33632.,
      34496., 27645., 28442., 29986., 30808., 32427., 33274., 34968., 35840.,
      14735., 15222., 16178., 16680., 17681., 18198., 19244., 19776., 12196.,
      12600., 13376., 13792., 14604., 15032., 15880., 16320., 17019., 17486.,
      18390., 18872., 19821., 20318., 21312., 21824., 13491., 13950., 14846.,
      15320., 16261., 16750., 17736., 18240., 14123., 14638., 15590., 16120.,
      17117., 17662., 18704., 19264., 8073.,  8418.,  9030.,  9384.,  10023.,
      10386., 11052., 11424.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23633., 24386., 25886., 26664., 28239., 29042., 30692., 31520., 24921.,
      25682., 27190., 27976., 29559., 30370., 32028., 32864., 26721., 27490.,
      29006., 29800., 31391., 32210., 33876., 34720., 26721., 27490., 29006.,
      29800., 31391., 32210., 33876., 34720., 19753., 20466., 21926., 22664.,
      24199., 24962., 26572., 27360., 17457., 18178., 19646., 20392., 21935.,
      22706., 24324., 25120., 23633., 24386., 25886., 26664., 28239., 29042.,
      30692., 31520., 24921., 25682., 27190., 27976., 29559., 30370., 32028.,
      32864., 26721., 27490., 29006., 29800., 31391., 32210., 33876., 34720.,
      26721., 27490., 29006., 29800., 31391., 32210., 33876., 34720., 19753.,
      20466., 21926., 22664., 24199., 24962., 26572., 27360., 17457., 18178.,
      19646., 20392., 21935., 22706., 24324., 25120., 23633., 24386., 25886.,
      26664., 28239., 29042., 30692., 31520., 24921., 25682., 27190., 27976.,
      29559., 30370., 32028., 32864., 26721., 27490., 29006., 29800., 31391.,
      32210., 33876., 34720., 26721., 27490., 29006., 29800., 31391., 32210.,
      33876., 34720., 19753., 20466., 21926., 22664., 24199., 24962., 26572.,
      27360., 17457., 18178., 19646., 20392., 21935., 22706., 24324., 25120.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312.,
      15776., 16240., 16704., 17760., 18240., 18720., 19200., 13460., 14024.,
      14588., 15152., 16296., 16880., 17464., 18048., 19292., 19896., 20500.,
      21104., 22448., 23072., 23696., 24320., 14196., 14728., 15260., 15792.,
      16904., 17456., 18008., 18560., 19772., 20344., 20916., 21488., 22800.,
      23392., 23984., 24576., 14996., 15560., 16124., 16688., 17832., 18416.,
      19000., 19584., 20828., 21432., 22036., 22640., 23984., 24608., 25232.,
      25856., 8572.,  8920.,  9268.,  9616.,  10312., 10672., 11032., 11392.,
      12148., 12520., 12892., 13264., 14080., 14464., 14848., 15232., 15436.,
      16056., 16676., 17296., 18496., 19136., 19776., 20416., 21716., 22376.,
      23036., 23696., 25096., 25776., 26456., 27136., 20477., 21306., 22135.,
      22964., 24494., 25348., 26202., 27056., 28711., 29590., 30469., 31348.,
      33128., 34032., 34936., 35840., 19973., 20810., 21647., 22484., 24022.,
      24884., 25746., 26608., 28271., 29158., 30045., 30932., 32720., 33632.,
      34544., 35456., 16333., 17114., 17895., 18676., 20158., 20964., 21770.,
      22576., 24183., 25014., 25845., 26676., 28408., 29264., 30120., 30976.,
      12807., 13246., 13685., 14124., 14974., 15428., 15882., 16336., 17261.,
      17730., 18199., 18668., 19668., 20152., 20636., 21120., 17036., 17720.,
      18404., 19088., 20352., 21056., 21760., 22464., 23828., 24552., 25276.,
      26000., 27464., 28208., 28952., 29696., 16333., 17114., 17895., 18676.,
      20158., 20964., 21770., 22576., 24183., 25014., 25845., 26676., 28408.,
      29264., 30120., 30976., 19925., 20714., 21503., 22292., 23782., 24596.,
      25410., 26224., 27839., 28678., 29517., 30356., 32096., 32960., 33824.,
      34688., 20445., 21242., 22039., 22836., 24334., 25156., 25978., 26800.,
      28423., 29270., 30117., 30964., 32712., 33584., 34456., 35328., 10039.,
      10526., 11013., 11500., 12398., 12900., 13402., 13904., 14877., 15394.,
      15911., 16428., 17476., 18008., 18540., 19072., 9780.,  10184., 10588.,
      10992., 11744., 12160., 12576., 12992., 13804., 14232., 14660., 15088.,
      15960., 16400., 16840., 17280., 12899., 13366., 13833., 14300., 15178.,
      15660., 16142., 16624., 17577., 18074., 18571., 19068., 20096., 20608.,
      21120., 21632., 10459., 10918., 11377., 11836., 12706., 13180., 13654.,
      14128., 15073., 15562., 16051., 16540., 17560., 18064., 18568., 19072.,
      12179., 12694., 13209., 13724., 14650., 15180., 15710., 16240., 17241.,
      17786., 18331., 18876., 19952., 20512., 21072., 21632., 8633.,  8978.,
      9323.,  9668.,  10282., 10636., 10990., 11344., 12003., 12366., 12729.,
      13092., 13796., 14168., 14540., 14912., 10800., 11232., 11664., 12096.,
      12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760.,
      18240., 18720., 19200., 13460., 14024., 14588., 15152., 16296., 16880.,
      17464., 18048., 19292., 19896., 20500., 21104., 22448., 23072., 23696.,
      24320., 14196., 14728., 15260., 15792., 16904., 17456., 18008., 18560.,
      19772., 20344., 20916., 21488., 22800., 23392., 23984., 24576., 14996.,
      15560., 16124., 16688., 17832., 18416., 19000., 19584., 20828., 21432.,
      22036., 22640., 23984., 24608., 25232., 25856., 8572.,  8920.,  9268.,
      9616.,  10312., 10672., 11032., 11392., 12148., 12520., 12892., 13264.,
      14080., 14464., 14848., 15232., 15436., 16056., 16676., 17296., 18496.,
      19136., 19776., 20416., 21716., 22376., 23036., 23696., 25096., 25776.,
      26456., 27136., 20477., 21306., 22135., 22964., 24494., 25348., 26202.,
      27056., 28711., 29590., 30469., 31348., 33128., 34032., 34936., 35840.,
      19973., 20810., 21647., 22484., 24022., 24884., 25746., 26608., 28271.,
      29158., 30045., 30932., 32720., 33632., 34544., 35456., 16333., 17114.,
      17895., 18676., 20158., 20964., 21770., 22576., 24183., 25014., 25845.,
      26676., 28408., 29264., 30120., 30976., 12807., 13246., 13685., 14124.,
      14974., 15428., 15882., 16336., 17261., 17730., 18199., 18668., 19668.,
      20152., 20636., 21120., 17036., 17720., 18404., 19088., 20352., 21056.,
      21760., 22464., 23828., 24552., 25276., 26000., 27464., 28208., 28952.,
      29696., 16333., 17114., 17895., 18676., 20158., 20964., 21770., 22576.,
      24183., 25014., 25845., 26676., 28408., 29264., 30120., 30976., 19925.,
      20714., 21503., 22292., 23782., 24596., 25410., 26224., 27839., 28678.,
      29517., 30356., 32096., 32960., 33824., 34688., 20445., 21242., 22039.,
      22836., 24334., 25156., 25978., 26800., 28423., 29270., 30117., 30964.,
      32712., 33584., 34456., 35328., 10039., 10526., 11013., 11500., 12398.,
      12900., 13402., 13904., 14877., 15394., 15911., 16428., 17476., 18008.,
      18540., 19072., 9780.,  10184., 10588., 10992., 11744., 12160., 12576.,
      12992., 13804., 14232., 14660., 15088., 15960., 16400., 16840., 17280.,
      12899., 13366., 13833., 14300., 15178., 15660., 16142., 16624., 17577.,
      18074., 18571., 19068., 20096., 20608., 21120., 21632., 10459., 10918.,
      11377., 11836., 12706., 13180., 13654., 14128., 15073., 15562., 16051.,
      16540., 17560., 18064., 18568., 19072., 12179., 12694., 13209., 13724.,
      14650., 15180., 15710., 16240., 17241., 17786., 18331., 18876., 19952.,
      20512., 21072., 21632., 8633.,  8978.,  9323.,  9668.,  10282., 10636.,
      10990., 11344., 12003., 12366., 12729., 13092., 13796., 14168., 14540.,
      14912., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336.,
      15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200., 13460.,
      14024., 14588., 15152., 16296., 16880., 17464., 18048., 19292., 19896.,
      20500., 21104., 22448., 23072., 23696., 24320., 14196., 14728., 15260.,
      15792., 16904., 17456., 18008., 18560., 19772., 20344., 20916., 21488.,
      22800., 23392., 23984., 24576., 14996., 15560., 16124., 16688., 17832.,
      18416., 19000., 19584., 20828., 21432., 22036., 22640., 23984., 24608.,
      25232., 25856., 8572.,  8920.,  9268.,  9616.,  10312., 10672., 11032.,
      11392., 12148., 12520., 12892., 13264., 14080., 14464., 14848., 15232.,
      15436., 16056., 16676., 17296., 18496., 19136., 19776., 20416., 21716.,
      22376., 23036., 23696., 25096., 25776., 26456., 27136., 20477., 21306.,
      22135., 22964., 24494., 25348., 26202., 27056., 28711., 29590., 30469.,
      31348., 33128., 34032., 34936., 35840., 19973., 20810., 21647., 22484.,
      24022., 24884., 25746., 26608., 28271., 29158., 30045., 30932., 32720.,
      33632., 34544., 35456., 16333., 17114., 17895., 18676., 20158., 20964.,
      21770., 22576., 24183., 25014., 25845., 26676., 28408., 29264., 30120.,
      30976., 12807., 13246., 13685., 14124., 14974., 15428., 15882., 16336.,
      17261., 17730., 18199., 18668., 19668., 20152., 20636., 21120., 17036.,
      17720., 18404., 19088., 20352., 21056., 21760., 22464., 23828., 24552.,
      25276., 26000., 27464., 28208., 28952., 29696., 16333., 17114., 17895.,
      18676., 20158., 20964., 21770., 22576., 24183., 25014., 25845., 26676.,
      28408., 29264., 30120., 30976., 19925., 20714., 21503., 22292., 23782.,
      24596., 25410., 26224., 27839., 28678., 29517., 30356., 32096., 32960.,
      33824., 34688., 20445., 21242., 22039., 22836., 24334., 25156., 25978.,
      26800., 28423., 29270., 30117., 30964., 32712., 33584., 34456., 35328.,
      10039., 10526., 11013., 11500., 12398., 12900., 13402., 13904., 14877.,
      15394., 15911., 16428., 17476., 18008., 18540., 19072., 9780.,  10184.,
      10588., 10992., 11744., 12160., 12576., 12992., 13804., 14232., 14660.,
      15088., 15960., 16400., 16840., 17280., 12899., 13366., 13833., 14300.,
      15178., 15660., 16142., 16624., 17577., 18074., 18571., 19068., 20096.,
      20608., 21120., 21632., 10459., 10918., 11377., 11836., 12706., 13180.,
      13654., 14128., 15073., 15562., 16051., 16540., 17560., 18064., 18568.,
      19072., 12179., 12694., 13209., 13724., 14650., 15180., 15710., 16240.,
      17241., 17786., 18331., 18876., 19952., 20512., 21072., 21632., 8633.,
      8978.,  9323.,  9668.,  10282., 10636., 10990., 11344., 12003., 12366.,
      12729., 13092., 13796., 14168., 14540., 14912.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17585., 18338., 19091., 19844., 21298., 22076., 22854., 23632., 25211.,
      26014., 26817., 27620., 29324., 30152., 30980., 31808., 18105., 18866.,
      19627., 20388., 21850., 22636., 23422., 24208., 25795., 26606., 27417.,
      28228., 29940., 30776., 31612., 32448., 19649., 20418., 21187., 21956.,
      23426., 24220., 25014., 25808., 27403., 28222., 29041., 29860., 31580.,
      32424., 33268., 34112., 19649., 20418., 21187., 21956., 23426., 24220.,
      25014., 25808., 27403., 28222., 29041., 29860., 31580., 32424., 33268.,
      34112., 16009., 16722., 17435., 18148., 19562., 20300., 21038., 21776.,
      23315., 24078., 24841., 25604., 27268., 28056., 28844., 29632., 17553.,
      18274., 18995., 19716., 21138., 21884., 22630., 23376., 24923., 25694.,
      26465., 27236., 28908., 29704., 30500., 31296., 17585., 18338., 19091.,
      19844., 21298., 22076., 22854., 23632., 25211., 26014., 26817., 27620.,
      29324., 30152., 30980., 31808., 18105., 18866., 19627., 20388., 21850.,
      22636., 23422., 24208., 25795., 26606., 27417., 28228., 29940., 30776.,
      31612., 32448., 19649., 20418., 21187., 21956., 23426., 24220., 25014.,
      25808., 27403., 28222., 29041., 29860., 31580., 32424., 33268., 34112.,
      19649., 20418., 21187., 21956., 23426., 24220., 25014., 25808., 27403.,
      28222., 29041., 29860., 31580., 32424., 33268., 34112., 16009., 16722.,
      17435., 18148., 19562., 20300., 21038., 21776., 23315., 24078., 24841.,
      25604., 27268., 28056., 28844., 29632., 17553., 18274., 18995., 19716.,
      21138., 21884., 22630., 23376., 24923., 25694., 26465., 27236., 28908.,
      29704., 30500., 31296., 17585., 18338., 19091., 19844., 21298., 22076.,
      22854., 23632., 25211., 26014., 26817., 27620., 29324., 30152., 30980.,
      31808., 18105., 18866., 19627., 20388., 21850., 22636., 23422., 24208.,
      25795., 26606., 27417., 28228., 29940., 30776., 31612., 32448., 19649.,
      20418., 21187., 21956., 23426., 24220., 25014., 25808., 27403., 28222.,
      29041., 29860., 31580., 32424., 33268., 34112., 19649., 20418., 21187.,
      21956., 23426., 24220., 25014., 25808., 27403., 28222., 29041., 29860.,
      31580., 32424., 33268., 34112., 16009., 16722., 17435., 18148., 19562.,
      20300., 21038., 21776., 23315., 24078., 24841., 25604., 27268., 28056.,
      28844., 29632., 17553., 18274., 18995., 19716., 21138., 21884., 22630.,
      23376., 24923., 25694., 26465., 27236., 28908., 29704., 30500., 31296.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3008.,  5100.,  5720.,  3404.,  5890.,  9600.,  10250., 5920.,  8830.,
      14150., 14800., 8440.,  11770., 18700., 19350., 10960., 4914.,  7460.,
      7700.,  4122.,  16868., 26800., 27420., 15584., 20590., 32350., 33000.,
      18520., 23530., 36900., 37550., 21040., 26470., 41450., 42100., 23560.,
      10584., 15860., 16100., 8532.,  30728., 48500., 49120., 27764., 35290.,
      55100., 55750., 31120., 38230., 59650., 60300., 33640., 41170., 64200.,
      64850., 36160., 16254., 24260., 24500., 12942.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7325.,  7975.,  11875., 12525., 16425., 17075., 30075., 30725., 34625.,
      35275., 39175., 39825., 52825., 53475., 57375., 58025., 61925., 62575.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5866.,  6016.,  9930.,  10200., 11130., 11440., 6610.,  6808.,  11435.,
      11780., 18600., 19200., 19850., 20500., 11435., 11840., 17105., 17660.,
      27350., 28300., 28600., 29600., 16265., 16880., 16631., 17268., 24324.,
      25368., 22950., 23980., 12839., 13472., 5722.,  6116.,  7379.,  8008.,
      6485.,  7080.,  3270.,  3636.,  8170.,  8392.,  13530., 13920., 14730.,
      15160., 8626.,  8896.,  13865., 14300., 22350., 23100., 23600., 24400.,
      13505., 14000., 19535., 20180., 31100., 32200., 32350., 33500., 18335.,
      19040., 13685., 14284., 18346., 19284., 15500., 16360., 8573.,  9104.,
      3824.,  4144.,  4121.,  4584.,  3035.,  3400.,  1476.,  1704.,  10474.,
      10768., 17130., 17640., 18330., 18880., 10642., 10984., 16295., 16820.,
      26100., 27000., 27350., 28300., 15575., 16160., 21965., 22700., 28706.,
      29828., 24324., 25368., 12149., 12752., 11507., 12068., 14416., 15248.,
      12594., 13348., 6227.,  6656.,  2694.,  2940.,  2911.,  3208.,  2849.,
      3048.,  1602.,  1692.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14225., 14650., 15475., 15950., 22975., 23750., 24225., 25050., 31725.,
      32850., 32975., 34150., 17975., 18550., 19225., 19850., 26725., 27650.,
      27975., 28950., 26451., 27534., 22325., 23330., 21725., 22450., 22975.,
      23750., 30475., 31550., 31725., 32850., 19961., 20938., 16859., 17758.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4094.,  4244.,  4394.,  4544.,  7430.,  7700.,  7970.,  8240.,  8638.,
      8948.,  9258.,  9568.,  5214.,  5412.,  5610.,  5808.,  9661.,  10006.,
      10351., 10696., 16376., 16976., 17576., 18176., 17674., 18324., 18974.,
      19624., 10177., 10582., 10987., 11392., 15415., 15970., 16525., 17080.,
      25462., 26412., 27362., 28312., 26760., 27760., 28760., 29760., 15147.,
      15762., 16377., 16992., 17201., 17838., 18475., 19112., 27636., 28680.,
      29724., 30768., 27846., 28876., 29906., 30936., 16085., 16718., 17351.,
      17984., 11050., 11444., 11838., 12232., 14129., 14758., 15387., 16016.,
      12375., 12970., 13565., 14160., 6174.,  6540.,  6906.,  7272.,  6326.,
      6548.,  6770.,  6992.,  11054., 11444., 11834., 12224., 12262., 12692.,
      13122., 13552., 7254.,  7524.,  7794.,  8064.,  12127., 12562., 12997.,
      13432., 20270., 21020., 21770., 22520., 21568., 22368., 23168., 23968.,
      12307., 12802., 13297., 13792., 17881., 18526., 19171., 19816., 29356.,
      30456., 31556., 32656., 30654., 31804., 32954., 34104., 17277., 17982.,
      18687., 19392., 17235., 17834., 18433., 19032., 28714., 29652., 30590.,
      31528., 26044., 26904., 27764., 28624., 13927., 14458., 14989., 15520.,
      7328.,  7648.,  7968.,  8288.,  7779.,  8242.,  8705.,  9168.,  5705.,
      6070.,  6435.,  6800.,  2724.,  2952.,  3180.,  3408.,  8558.,  8852.,
      9146.,  9440.,  14678., 15188., 15698., 16208., 15886., 16436., 16986.,
      17536., 9294.,  9636.,  9978.,  10320., 14593., 15118., 15643., 16168.,
      24164., 25064., 25964., 26864., 25462., 26412., 27362., 28312., 14437.,
      15022., 15607., 16192., 20347., 21082., 21817., 22552., 29282., 30404.,
      31526., 32648., 27636., 28680., 29724., 30768., 15375., 15978., 16581.,
      17184., 18805., 19366., 19927., 20488., 21600., 22432., 23264., 24096.,
      16882., 17636., 18390., 19144., 7417.,  7846.,  8275.,  8704.,  5142.,
      5388.,  5634.,  5880.,  5525.,  5822.,  6119.,  6416.,  5499.,  5698.,
      5897.,  6096.,  3114.,  3204.,  3294.,  3384.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11833., 12258., 12683., 13108., 13131., 13606., 14081., 14556., 20919.,
      21694., 22469., 23244., 22217., 23042., 23867., 24692., 30005., 31130.,
      32255., 33380., 31303., 32478., 33653., 34828., 15727., 16302., 16877.,
      17452., 17025., 17650., 18275., 18900., 24813., 25738., 26663., 27588.,
      26111., 27086., 28061., 29036., 28331., 29414., 30497., 31580., 27197.,
      28202., 29207., 30212., 19621., 20346., 21071., 21796., 20919., 21694.,
      22469., 23244., 28707., 29782., 30857., 31932., 30005., 31130., 32255.,
      33380., 28385., 29362., 30339., 31316., 29299., 30198., 31097., 31996.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11348., 12032., 19260., 20400., 21660., 22880., 12884., 13616., 13441.,
      14344., 19679., 21120., 17571., 18984., 7933.,  8704.,  12493., 13432.,
      19259., 20760., 19711., 21184., 10681., 11488., 13081., 13928., 19799.,
      21168., 19675., 21080., 11509., 12352., 5083.,  5576.,  6789.,  7568.,
      6345.,  7120.,  3351.,  3816.,  15956., 16784., 26460., 27840., 22716.,
      24048., 11284., 12032., 11197., 12088., 18475., 19960., 17391., 18848.,
      9001.,  9824.,  14089., 15016., 23175., 24720., 24651., 26168., 14309.,
      15168., 12565., 13464., 17571., 18984., 15975., 17360., 9313.,  10144.,
      4103.,  4576.,  4881.,  5584.,  4245.,  4880.,  2259.,  2640.,  11540.,
      12320., 19260., 20560., 19164., 20480., 10452., 11216., 10873., 11752.,
      17975., 19440., 19259., 20760., 10837., 11712., 17605., 18520., 22931.,
      24328., 19799., 21168., 10129., 10912., 12817., 13768., 17391., 18848.,
      16819., 18248., 9037.,  9856.,  3891.,  4344.,  5021.,  5648.,  5409.,
      5968.,  3087.,  3384.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24689., 26100., 21301., 22684., 17869., 19340., 17041., 18484., 23849.,
      25380., 25581., 27084., 20925., 22380., 18561., 19988., 19225., 20740.,
      19421., 20908., 21301., 22684., 18425., 19780., 17225., 18660., 17869.,
      19340., 21925., 23420., 23849., 25380., 18561., 19988., 16709., 18108.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7816.,  8104.,  8788.,  9088.,  14256., 14776., 15940., 16480., 16672.,
      17272., 18516., 19136., 10088., 10472., 11220., 11616., 13343., 13826.,
      14750., 15248., 23271., 24062., 25552., 26368., 24971., 25734., 27196.,
      27984., 11679., 12090., 12886., 13312., 12947., 13466., 14426., 14960.,
      18531., 19382., 20932., 21808., 17159., 17982., 19504., 20352., 8179.,
      8626.,  9458.,  9920.,  11655., 12082., 12950., 13392., 19999., 20718.,
      22136., 22880., 21507., 22262., 23716., 24496., 13127., 13610., 14478.,
      14976., 9835.,  10166., 10812., 11152., 13039., 13578., 14582., 15136.,
      12155., 12690., 13690., 14240., 6363.,  6702.,  7284.,  7632.,  12280.,
      12712., 13540., 13984., 21504., 22264., 23668., 24448., 19952., 20664.,
      22020., 22752., 11224., 11624., 12388., 12800., 16547., 17018., 17930.,
      18416., 26195., 27030., 28564., 29424., 21751., 22558., 24064., 24896.,
      9923.,  10386., 11234., 11712., 11543., 12050., 12998., 13520., 19407.,
      20302., 21896., 22816., 20083., 20950., 22516., 23408., 11543., 12042.,
      12926., 13440., 14155., 14634., 15554., 16048., 24971., 25734., 27196.,
      27984., 23599., 24334., 25768., 26528., 13099., 13570., 14426., 14912.,
      7895.,  8206.,  8832.,  9152.,  9299.,  9762.,  10690., 11168., 8095.,
      8490.,  9350.,  9760.,  4263.,  4518.,  5016.,  5280.,  11176., 11560.,
      12340., 12736., 20752., 21432., 22756., 23456., 22336., 23032., 24372.,
      25088., 13896., 14312., 15092., 15520., 11303., 11762., 12662., 13136.,
      18303., 19118., 20632., 21472., 18531., 19382., 20932., 21808., 9703.,
      10218., 11118., 11648., 13979., 14474., 15410., 15920., 20347., 21094.,
      22540., 23312., 19999., 20718., 22136., 22880., 11707., 12130., 12938.,
      13376., 18191., 18722., 19694., 20240., 21751., 22558., 24064., 24896.,
      18331., 19110., 20588., 21392., 8719.,  9178.,  10022., 10496., 7491.,
      7782.,  8388.,  8688.,  9655.,  10042., 10894., 11296., 10499., 10818.,
      11602., 11936., 6003.,  6174.,  6588.,  6768.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20905., 21666., 23126., 23912., 20045., 20778., 22210., 22968., 23845.,
      24666., 26186., 27032., 19913., 20706., 22198., 23016., 19617., 20498.,
      22078., 22984., 20805., 21658., 23210., 24088., 22805., 23610., 25114.,
      25944., 23993., 24770., 26246., 27048., 19601., 20466., 22030., 22920.,
      17717., 18554., 20090., 20952., 20045., 20778., 22210., 22968., 20209.,
      20914., 22318., 23048., 24897., 25682., 27166., 27976., 23845., 24666.,
      26186., 27032., 18109., 18954., 20498., 21368., 19617., 20498., 22078.,
      22984., 23993., 24770., 26246., 27048., 26205., 26954., 28402., 29176.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8560.,  8848.,  9136.,  9424.,  10108., 10408., 10708., 11008., 15768.,
      16288., 16808., 17328., 18540., 19080., 19620., 20160., 18216., 18816.,
      19416., 20016., 21308., 21928., 22548., 23168., 12624., 13008., 13392.,
      13776., 14620., 15016., 15412., 15808., 12763., 13246., 13729., 14212.,
      15178., 15676., 16174., 16672., 21495., 22286., 23077., 23868., 25456.,
      26272., 27088., 27904., 22619., 23382., 24145., 24908., 26468., 27256.,
      28044., 28832., 12707., 13118., 13529., 13940., 14850., 15276., 15702.,
      16128., 13471., 13990., 14509., 15028., 16030., 16564., 17098., 17632.,
      24499., 25350., 26201., 27052., 28700., 29576., 30452., 31328., 23575.,
      24398., 25221., 26044., 27664., 28512., 29360., 30208., 10791., 11238.,
      11685., 12132., 13078., 13540., 14002., 14464., 12515., 12942., 13369.,
      13796., 14706., 15148., 15590., 16032., 19631., 20350., 21069., 21788.,
      23304., 24048., 24792., 25536., 20307., 21062., 21817., 22572., 24124.,
      24904., 25684., 26464., 13483., 13966., 14449., 14932., 15914., 16412.,
      16910., 17408., 8395.,  8726.,  9057.,  9388.,  10020., 10360., 10700.,
      11040., 13315., 13854., 14393., 14932., 15938., 16492., 17046., 17600.,
      13855., 14390., 14925., 15460., 16462., 17012., 17562., 18112., 10659.,
      10998., 11337., 11676., 12300., 12648., 12996., 13344., 12736., 13168.,
      13600., 14032., 14860., 15304., 15748., 16192., 23112., 23872., 24632.,
      25392., 26844., 27624., 28404., 29184., 21848., 22560., 23272., 23984.,
      25388., 26120., 26852., 27584., 11808., 12208., 12608., 13008., 13868.,
      14280., 14692., 15104., 14575., 15046., 15517., 15988., 16942., 17428.,
      17914., 18400., 24483., 25318., 26153., 26988., 28620., 29480., 30340.,
      31200., 21511., 22318., 23125., 23932., 25536., 26368., 27200., 28032.,
      14263., 14726., 15189., 15652., 16614., 17092., 17570., 18048., 14259.,
      14766., 15273., 15780., 16770., 17292., 17814., 18336., 23391., 24286.,
      25181., 26076., 27768., 28688., 29608., 30528., 22467., 23334., 24201.,
      25068., 26732., 27624., 28516., 29408., 14395., 14894., 15393., 15892.,
      16890., 17404., 17918., 18432., 12855., 13334., 13813., 14292., 15254.,
      15748., 16242., 16736., 22619., 23382., 24145., 24908., 26468., 27256.,
      28044., 28832., 21695., 22430., 23165., 23900., 25432., 26192., 26952.,
      27712., 14463., 14934., 15405., 15876., 16846., 17332., 17818., 18304.,
      8887.,  9198.,  9509.,  9820.,  10432., 10752., 11072., 11392., 12823.,
      13286., 13749., 14212., 15142., 15620., 16098., 16576., 8691.,  9086.,
      9481.,  9876.,  10738., 11148., 11558., 11968., 4239.,  4494.,  4749.,
      5004.,  5544.,  5808.,  6072.,  6336.,  10064., 10448., 10832., 11216.,
      11996., 12392., 12788., 13184., 18872., 19552., 20232., 20912., 22284.,
      22984., 23684., 24384., 19720., 20416., 21112., 21808., 23196., 23912.,
      24628., 25344., 14064., 14480., 14896., 15312., 16188., 16616., 17044.,
      17472., 11779., 12238., 12697., 13156., 14098., 14572., 15046., 15520.,
      22287., 23102., 23917., 24732., 26344., 27184., 28024., 28864., 24499.,
      25350., 26201., 27052., 28700., 29576., 30452., 31328., 14795., 15310.,
      15825., 16340., 17354., 17884., 18414., 18944., 14535., 15030., 15525.,
      16020., 16998., 17508., 18018., 18528., 22603., 23350., 24097., 24844.,
      26388., 27160., 27932., 28704., 19631., 20350., 21069., 21788., 23304.,
      24048., 24792., 25536., 11727., 12150., 12573., 12996., 13918., 14356.,
      14794., 15232., 16267., 16798., 17329., 17860., 18874., 19420., 19966.,
      20512., 21511., 22318., 23125., 23932., 25536., 26368., 27200., 28032.,
      20587., 21366., 22145., 22924., 24500., 25304., 26108., 26912., 14931.,
      15390., 15849., 16308., 17266., 17740., 18214., 18688., 8355.,  8646.,
      8937.,  9228.,  9820.,  10120., 10420., 10720., 8235.,  8622.,  9009.,
      9396.,  10250., 10652., 11054., 11456., 8199.,  8518.,  8837.,  9156.,
      9942.,  10276., 10610., 10944., 5499.,  5670.,  5841.,  6012.,  6468.,
      6648.,  6828.,  7008.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 20861.,
      21594., 22327., 23060., 24590., 25348., 26106., 26864., 22741., 23562.,
      24383., 25204., 26822., 27668., 28514., 29360., 20793., 21586., 22379.,
      23172., 24762., 25580., 26398., 27216., 22673., 23554., 24435., 25316.,
      26994., 27900., 28806., 29712., 22773., 23626., 24479., 25332., 26982.,
      27860., 28738., 29616., 21701., 22506., 23311., 24116., 25718., 26548.,
      27378., 28208., 21801., 22578., 23355., 24132., 25706., 26508., 27310.,
      28112., 23681., 24546., 25411., 26276., 27938., 28828., 29718., 30608.,
      25829., 26666., 27503., 28340., 29974., 30836., 31698., 32560., 20861.,
      21594., 22327., 23060., 24590., 25348., 26106., 26864., 18913., 19618.,
      20323., 21028., 22530., 23260., 23990., 24720., 23089., 23874., 24659.,
      25444., 27026., 27836., 28646., 29456., 22741., 23562., 24383., 25204.,
      26822., 27668., 28514., 29360., 21997., 22842., 23687., 24532., 26174.,
      27044., 27914., 28784., 22673., 23554., 24435., 25316., 26994., 27900.,
      28806., 29712., 21801., 22578., 23355., 24132., 25706., 26508., 27310.,
      28112., 23949., 24698., 25447., 26196., 27742., 28516., 29290., 30064.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8860.,  9552.,  10268., 11008., 18180., 19312., 20484., 21696., 19044.,
      20208., 21412., 22656., 11516., 12240., 12988., 13760., 12003., 12932.,
      13891., 14880., 19013., 20476., 21989., 23552., 20365., 21772., 23229.,
      24736., 9563.,  10356., 11179., 12032., 11083., 11956., 12859., 13792.,
      18621., 20076., 21581., 23136., 19013., 20476., 21989., 23552., 10691.,
      11492., 12323., 13184., 9395.,  10212., 11059., 11936., 16885., 18268.,
      19701., 21184., 18621., 20076., 21581., 23136., 11115., 11988., 12891.,
      13824., 7405.,  7916.,  8445.,  8992.,  10859., 11668., 12507., 13376.,
      11715., 12580., 13475., 14400., 6741.,  7260.,  7797.,  8352.,  16892.,
      17744., 18620., 19520., 21668., 23024., 24420., 25856., 16516., 17776.,
      19076., 20416., 8092.,  8784.,  9500.,  10240., 16171., 17140., 18139.,
      19168., 24861., 26412., 28013., 29664., 22117., 23612., 25157., 26752.,
      11107., 11940., 12803., 13696., 12883., 13732., 14611., 15520., 21589.,
      23068., 24597., 26176., 24861., 26412., 28013., 29664., 14347., 15252.,
      16187., 17152., 10491., 11348., 12235., 13152., 20365., 21772., 23229.,
      24736., 21589., 23068., 24597., 26176., 12403., 13316., 14259., 15232.,
      9029.,  9628.,  10245., 10880., 12339., 13252., 14195., 15168., 12875.,
      13780., 14715., 15680., 7341.,  7884.,  8445.,  9024.,  10076., 10832.,
      11612., 12416., 17156., 18416., 19716., 21056., 17188., 18416., 19684.,
      20992., 10044., 10704., 11388., 12096., 9395.,  10212., 11059., 11936.,
      16885., 18268., 19701., 21184., 18621., 20076., 21581., 23136., 11115.,
      11988., 12891., 13824., 13211., 14100., 15019., 15968., 17261., 18636.,
      20061., 21536., 16885., 18268., 19701., 21184., 10131., 10948., 11795.,
      12672., 17539., 18500., 19491., 20512., 22117., 23612., 25157., 26752.,
      17261., 18636., 20061., 21536., 8379.,  9140.,  9931.,  10752., 12189.,
      12876., 13581., 14304., 17915., 18932., 19979., 21056., 13459., 14340.,
      15251., 16192., 5765.,  6204.,  6661.,  7136.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19401., 20804., 22257., 23760., 15633., 16980., 18377., 19824., 23233.,
      24756., 26329., 27952., 19401., 20804., 22257., 23760., 23097., 24612.,
      26177., 27792., 23233., 24756., 26329., 27952., 19105., 20596., 22137.,
      23728., 19433., 20868., 22353., 23888., 18393., 19812., 21281., 22800.,
      19105., 20596., 22137., 23728., 15633., 16980., 18377., 19824., 18393.,
      19812., 21281., 22800., 23097., 24612., 26177., 27792., 23233., 24756.,
      26329., 27952., 22897., 24340., 25833., 27376., 23097., 24612., 26177.,
      27792., 19433., 20868., 22353., 23888., 22897., 24340., 25833., 27376.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8324.,  8632.,  9312.,  9632.,  10348., 10680., 11432., 11776., 16076.,
      16584., 17744., 18272., 19492., 20040., 21320., 21888., 17260., 17800.,
      18992., 19552., 20804., 21384., 22696., 23296., 12676., 13048., 13856.,
      14240., 15084., 15480., 16360., 16768., 13391., 13894., 14850., 15368.,
      16369., 16902., 17948., 18496., 22069., 22858., 24394., 25208., 26819.,
      27658., 29344., 30208., 20221., 20954., 22434., 23192., 24747., 25530.,
      27160., 27968., 10767., 11190., 12082., 12520., 13457., 13910., 14892.,
      15360., 10583., 11030., 11930., 12392., 13337., 13814., 14804., 15296.,
      21805., 22586., 24114., 24920., 26523., 27354., 29032., 29888., 22069.,
      22858., 24394., 25208., 26819., 27658., 29344., 30208., 10967., 11398.,
      12298., 12744., 13689., 14150., 15140., 15616., 10335., 10726., 11570.,
      11976., 12865., 13286., 14220., 14656., 18917., 19626., 21082., 21816.,
      23347., 24106., 25712., 26496., 21805., 22586., 24114., 24920., 26523.,
      27354., 29032., 29888., 13791., 14294., 15266., 15784., 16801., 17334.,
      18396., 18944., 5325.,  5530.,  6018.,  6232.,  6747.,  6970.,  7512.,
      7744.,  9647.,  10006., 10802., 11176., 12017., 12406., 13292., 13696.,
      11815., 12230., 13082., 13512., 14409., 14854., 15796., 16256., 9933.,
      10218., 10770., 11064., 11643., 11946., 12552., 12864., 15012., 15480.,
      16320., 16800., 17676., 18168., 19080., 19584., 21292., 22024., 23408.,
      24160., 25604., 26376., 27880., 28672., 18764., 19400., 20688., 21344.,
      22692., 23368., 24776., 25472., 12004., 12344., 13120., 13472., 14284.,
      14648., 15496., 15872., 16567., 17110., 18106., 18664., 19705., 20278.,
      21364., 21952., 23949., 24826., 26450., 27352., 29051., 29978., 31752.,
      32704., 22101., 22922., 24490., 25336., 26979., 27850., 29568., 30464.,
      15863., 16326., 17258., 17736., 18713., 19206., 20228., 20736., 13183.,
      13606., 14482., 14920., 15841., 16294., 17260., 17728., 22085., 22890.,
      24442., 25272., 26899., 27754., 29456., 30336., 23949., 24826., 26450.,
      27352., 29051., 29978., 31752., 32704., 16127., 16662., 17666., 18216.,
      19265., 19830., 20924., 21504., 11463., 11894., 12778., 13224., 14153.,
      14614., 15588., 16064., 20221., 20954., 22434., 23192., 24747., 25530.,
      27160., 27968., 22085., 22890., 24442., 25272., 26899., 27754., 29456.,
      30336., 14279., 14822., 15834., 16392., 17449., 18022., 19124., 19712.,
      8997.,  9290.,  9866.,  10168., 10771., 11082., 11712., 12032., 14039.,
      14502., 15402., 15880., 16825., 17318., 18308., 18816., 11535., 11990.,
      12882., 13352., 14289., 14774., 15756., 16256., 6501.,  6810.,  7386.,
      7704.,  8307.,  8634.,  9264.,  9600.,  8644.,  9016.,  9760.,  10144.,
      10924., 11320., 12136., 12544., 19020., 19656., 20944., 21600., 22948.,
      23624., 25032., 25728., 18604., 19208., 20464., 21088., 22404., 23048.,
      24424., 25088., 9796.,  10104., 10848., 11168., 11948., 12280., 13096.,
      13440., 10335., 10726., 11570., 11976., 12865., 13286., 14220., 14656.,
      18917., 19626., 21082., 21816., 23347., 24106., 25712., 26496., 21805.,
      22586., 24114., 24920., 26523., 27354., 29032., 29888., 13791., 14294.,
      15266., 15784., 16801., 17334., 18396., 18944., 12775., 13238., 14154.,
      14632., 15593., 16086., 17092., 17600., 20189., 20890., 22338., 23064.,
      24587., 25338., 26936., 27712., 18917., 19626., 21082., 21816., 23347.,
      24106., 25712., 26496., 13927., 14374., 15290., 15752., 16713., 17190.,
      18196., 18688., 16239., 16774., 17762., 18312., 19345., 19910., 20988.,
      21568., 22101., 22922., 24490., 25336., 26979., 27850., 29568., 30464.,
      20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 12527.,
      12918., 13778., 14184., 15089., 15510., 16460., 16896., 11645., 12026.,
      12690., 13080., 13771., 14170., 14888., 15296., 14335., 14902., 15906.,
      16488., 17537., 18134., 19228., 19840., 10167., 10598., 11466., 11912.,
      12825., 13286., 14244., 14720., 7037.,  7242.,  7714.,  7928.,  8427.,
      8650.,  9176.,  9408.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 18753.,
      19426., 20846., 21544., 23039., 23762., 25332., 26080., 22513., 23362.,
      24958., 25832., 27503., 28402., 30148., 31072., 22649., 23378., 24854.,
      25608., 27159., 27938., 29564., 30368., 22761., 23602., 25190., 26056.,
      27719., 28610., 30348., 31264., 22513., 23362., 24958., 25832., 27503.,
      28402., 30148., 31072., 24529., 25346., 26910., 27752., 29391., 30258.,
      31972., 32864., 20633., 21394., 22902., 23688., 25271., 26082., 27740.,
      28576., 19593., 20338., 21830., 22600., 24167., 24962., 26604., 27424.,
      24529., 25346., 26910., 27752., 29391., 30258., 31972., 32864., 18753.,
      19426., 20846., 21544., 23039., 23762., 25332., 26080., 19593., 20338.,
      21830., 22600., 24167., 24962., 26604., 27424., 22761., 23602., 25190.,
      26056., 27719., 28610., 30348., 31264., 22513., 23362., 24958., 25832.,
      27503., 28402., 30148., 31072., 22945., 23714., 25230., 26024., 27615.,
      28434., 30100., 30944., 22761., 23602., 25190., 26056., 27719., 28610.,
      30348., 31264., 20633., 21394., 22902., 23688., 25271., 26082., 27740.,
      28576., 22945., 23714., 25230., 26024., 27615., 28434., 30100., 30944.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6996.,  7304.,  7612.,  7920.,  8576.,  8896.,  9216.,  9536.,  10252.,
      10584., 10916., 11248., 12024., 12368., 12712., 13056., 12252., 12760.,
      13268., 13776., 14864., 15392., 15920., 16448., 17636., 18184., 18732.,
      19280., 20568., 21136., 21704., 22272., 13052., 13592., 14132., 14672.,
      15792., 16352., 16912., 17472., 18692., 19272., 19852., 20432., 21752.,
      22352., 22952., 23552., 9108.,  9480.,  9852.,  10224., 10944., 11328.,
      11712., 12096., 12876., 13272., 13668., 14064., 14904., 15312., 15720.,
      16128., 13543., 14046., 14549., 15052., 15998., 16516., 17034., 17552.,
      18573., 19106., 19639., 20172., 21268., 21816., 22364., 22912., 18517.,
      19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270.,
      28109., 28948., 30688., 31552., 32416., 33280., 16925., 17658., 18391.,
      19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740.,
      28424., 29232., 30040., 30848., 9335.,  9758.,  10181., 10604., 11438.,
      11876., 12314., 12752., 13661., 14114., 14567., 15020., 16004., 16472.,
      16940., 17408., 11567., 12014., 12461., 12908., 13798., 14260., 14722.,
      15184., 16149., 16626., 17103., 17580., 18620., 19112., 19604., 20096.,
      20045., 20826., 21607., 22388., 23870., 24676., 25482., 26288., 27895.,
      28726., 29557., 30388., 32120., 32976., 33832., 34688., 18517., 19306.,
      20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109.,
      28948., 30688., 31552., 32416., 33280., 9727.,  10158., 10589., 11020.,
      11862., 12308., 12754., 13200., 14117., 14578., 15039., 15500., 16492.,
      16968., 17444., 17920., 10615., 11006., 11397., 11788., 12622., 13028.,
      13434., 13840., 14749., 15170., 15591., 16012., 16996., 17432., 17868.,
      18304., 16389., 17098., 17807., 18516., 19926., 20660., 21394., 22128.,
      23663., 24422., 25181., 25940., 27600., 28384., 29168., 29952., 20045.,
      20826., 21607., 22388., 23870., 24676., 25482., 26288., 27895., 28726.,
      29557., 30388., 32120., 32976., 33832., 34688., 11207., 11710., 12213.,
      12716., 13630., 14148., 14666., 15184., 16173., 16706., 17239., 17772.,
      18836., 19384., 19932., 20480., 3213.,  3418.,  3623.,  3828.,  4270.,
      4484.,  4698.,  4912.,  5399.,  5622.,  5845.,  6068.,  6600.,  6832.,
      7064.,  7296.,  8759.,  9118.,  9477.,  9836.,  10606., 10980., 11354.,
      11728., 12573., 12962., 13351., 13740., 14660., 15064., 15468., 15872.,
      9455.,  9870.,  10285., 10700., 11526., 11956., 12386., 12816., 13717.,
      14162., 14607., 15052., 16028., 16488., 16948., 17408., 8061.,  8346.,
      8631.,  8916.,  9470.,  9764.,  10058., 10352., 10951., 11254., 11557.,
      11860., 12504., 12816., 13128., 13440., 10996., 11464., 11932., 12400.,
      13216., 13696., 14176., 14656., 15532., 16024., 16516., 17008., 17944.,
      18448., 18952., 19456., 17852., 18584., 19316., 20048., 21360., 22112.,
      22864., 23616., 25028., 25800., 26572., 27344., 28856., 29648., 30440.,
      31232., 15452., 16088., 16724., 17360., 18576., 19232., 19888., 20544.,
      21860., 22536., 23212., 23888., 25304., 26000., 26696., 27392., 7796.,
      8136.,  8476.,  8816.,  9504.,  9856.,  10208., 10560., 11308., 11672.,
      12036., 12400., 13208., 13584., 13960., 14336., 13199., 13742., 14285.,
      14828., 15814., 16372., 16930., 17488., 18549., 19122., 19695., 20268.,
      21404., 21992., 22580., 23168., 20141., 21018., 21895., 22772., 24350.,
      25252., 26154., 27056., 28759., 29686., 30613., 31540., 33368., 34320.,
      35272., 36224., 18549., 19370., 20191., 21012., 22534., 23380., 24226.,
      25072., 26719., 27590., 28461., 29332., 31104., 32000., 32896., 33792.,
      11295., 11758., 12221., 12684., 13558., 14036., 14514., 14992., 15941.,
      16434., 16927., 17420., 18444., 18952., 19460., 19968., 10135., 10558.,
      10981., 11404., 12270., 12708., 13146., 13584., 14525., 14978., 15431.,
      15884., 16900., 17368., 17836., 18304., 18533., 19338., 20143., 20948.,
      22454., 23284., 24114., 24944., 26575., 27430., 28285., 29140., 30896.,
      31776., 32656., 33536., 20141., 21018., 21895., 22772., 24350., 25252.,
      26154., 27056., 28759., 29686., 30613., 31540., 33368., 34320., 35272.,
      36224., 11751., 12286., 12821., 13356., 14302., 14852., 15402., 15952.,
      16973., 17538., 18103., 18668., 19764., 20344., 20924., 21504., 10271.,
      10702., 11133., 11564., 12438., 12884., 13330., 13776., 14725., 15186.,
      15647., 16108., 17132., 17608., 18084., 18560., 16925., 17658., 18391.,
      19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740.,
      28424., 29232., 30040., 30848., 18533., 19338., 20143., 20948., 22454.,
      23284., 24114., 24944., 26575., 27430., 28285., 29140., 30896., 31776.,
      32656., 33536., 12143., 12686., 13229., 13772., 14726., 15284., 15842.,
      16400., 17429., 18002., 18575., 19148., 20252., 20840., 21428., 22016.,
      6885.,  7178.,  7471.,  7764.,  8294.,  8596.,  8898.,  9200.,  9775.,
      10086., 10397., 10708., 11328., 11648., 11968., 12288., 10783., 11246.,
      11709., 12172., 13046., 13524., 14002., 14480., 15429., 15922., 16415.,
      16908., 17932., 18440., 18948., 19456., 10391., 10846., 11301., 11756.,
      12622., 13092., 13562., 14032., 14973., 15458., 15943., 16428., 17444.,
      17944., 18444., 18944., 7317.,  7626.,  7935.,  8244.,  8822.,  9140.,
      9458.,  9776.,  10399., 10726., 11053., 11380., 12048., 12384., 12720.,
      13056., 9620.,  9992.,  10364., 10736., 11456., 11840., 12224., 12608.,
      13388., 13784., 14180., 14576., 15416., 15824., 16232., 16640., 16988.,
      17624., 18260., 18896., 20112., 20768., 21424., 22080., 23396., 24072.,
      24748., 25424., 26840., 27536., 28232., 28928., 14652., 15256., 15860.,
      16464., 17648., 18272., 18896., 19520., 20804., 21448., 22092., 22736.,
      24120., 24784., 25448., 26112., 7508.,  7816.,  8124.,  8432.,  9088.,
      9408.,  9728.,  10048., 10764., 11096., 11428., 11760., 12536., 12880.,
      13224., 13568., 10615., 11006., 11397., 11788., 12622., 13028., 13434.,
      13840., 14749., 15170., 15591., 16012., 16996., 17432., 17868., 18304.,
      16389., 17098., 17807., 18516., 19926., 20660., 21394., 22128., 23663.,
      24422., 25181., 25940., 27600., 28384., 29168., 29952., 20045., 20826.,
      21607., 22388., 23870., 24676., 25482., 26288., 27895., 28726., 29557.,
      30388., 32120., 32976., 33832., 34688., 11207., 11710., 12213., 12716.,
      13630., 14148., 14666., 15184., 16173., 16706., 17239., 17772., 18836.,
      19384., 19932., 20480., 10815., 11278., 11741., 12204., 13110., 13588.,
      14066., 14544., 15525., 16018., 16511., 17004., 18060., 18568., 19076.,
      19584., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576.,
      24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 16389.,
      17098., 17807., 18516., 19926., 20660., 21394., 22128., 23663., 24422.,
      25181., 25940., 27600., 28384., 29168., 29952., 11535., 11982., 12429.,
      12876., 13734., 14196., 14658., 15120., 16053., 16530., 17007., 17484.,
      18492., 18984., 19476., 19968., 13063., 13598., 14133., 14668., 15646.,
      16196., 16746., 17296., 18349., 18914., 19479., 20044., 21172., 21752.,
      22332., 22912., 18549., 19370., 20191., 21012., 22534., 23380., 24226.,
      25072., 26719., 27590., 28461., 29332., 31104., 32000., 32896., 33792.,
      16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103.,
      24854., 25605., 26356., 28008., 28784., 29560., 30336., 8791.,  9182.,
      9573.,  9964.,  10766., 11172., 11578., 11984., 12861., 13282., 13703.,
      14124., 15076., 15512., 15948., 16384., 8509.,  8890.,  9271.,  9652.,
      10270., 10660., 11050., 11440., 12103., 12502., 12901., 13300., 14008.,
      14416., 14824., 15232., 12807., 13374., 13941., 14508., 15486., 16068.,
      16650., 17232., 18285., 18882., 19479., 20076., 21204., 21816., 22428.,
      23040., 9215.,  9646.,  10077., 10508., 11350., 11796., 12242., 12688.,
      13605., 14066., 14527., 14988., 15980., 16456., 16932., 17408., 6445.,
      6650.,  6855.,  7060.,  7534.,  7748.,  7962.,  8176.,  8695.,  8918.,
      9141.,  9364.,  9928.,  10160., 10392., 10624.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195.,
      28974., 29753., 30532., 32212., 33016., 33820., 34624., 15073., 15746.,
      16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505.,
      24228., 25852., 26600., 27348., 28096., 18321., 19170., 20019., 20868.,
      22418., 23292., 24166., 25040., 26715., 27614., 28513., 29412., 31212.,
      32136., 33060., 33984., 20761., 21490., 22219., 22948., 24378., 25132.,
      25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820.,
      34624., 20873., 21714., 22555., 23396., 24938., 25804., 26670., 27536.,
      29203., 30094., 30985., 31876., 33668., 34584., 35500., 36416., 18321.,
      19170., 20019., 20868., 22418., 23292., 24166., 25040., 26715., 27614.,
      28513., 29412., 31212., 32136., 33060., 33984., 22385., 23202., 24019.,
      24836., 26354., 27196., 28038., 28880., 30523., 31390., 32257., 33124.,
      34892., 35784., 36676., 37568., 16697., 17458., 18219., 18980., 20442.,
      21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368.,
      30204., 31040., 18729., 19474., 20219., 20964., 22410., 23180., 23950.,
      24720., 26291., 27086., 27881., 28676., 30372., 31192., 32012., 32832.,
      22385., 23202., 24019., 24836., 26354., 27196., 28038., 28880., 30523.,
      31390., 32257., 33124., 34892., 35784., 36676., 37568., 15073., 15746.,
      16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505.,
      24228., 25852., 26600., 27348., 28096., 18729., 19474., 20219., 20964.,
      22410., 23180., 23950., 24720., 26291., 27086., 27881., 28676., 30372.,
      31192., 32012., 32832., 20873., 21714., 22555., 23396., 24938., 25804.,
      26670., 27536., 29203., 30094., 30985., 31876., 33668., 34584., 35500.,
      36416., 18321., 19170., 20019., 20868., 22418., 23292., 24166., 25040.,
      26715., 27614., 28513., 29412., 31212., 32136., 33060., 33984., 19265.,
      20034., 20803., 21572., 23042., 23836., 24630., 25424., 27019., 27838.,
      28657., 29476., 31196., 32040., 32884., 33728., 20873., 21714., 22555.,
      23396., 24938., 25804., 26670., 27536., 29203., 30094., 30985., 31876.,
      33668., 34584., 35500., 36416., 16697., 17458., 18219., 18980., 20442.,
      21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368.,
      30204., 31040., 19265., 20034., 20803., 21572., 23042., 23836., 24630.,
      25424., 27019., 27838., 28657., 29476., 31196., 32040., 32884., 33728.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4532.,  6000.,  6620.,  3914.,  8780.,  11150., 11800., 6790.,  13100.,
      16350., 17000., 9670.,  17420., 21550., 22200., 12550., 7118.,  8590.,
      8830.,  4719.,  25012., 30800., 31420., 17834., 30380., 37150., 37800.,
      21190., 13196., 16110., 16760., 9094.,  6252.,  7870.,  8520.,  4678.,
      2222.,  2830.,  3070.,  1695.,  12724., 15920., 16540., 9482.,  17420.,
      21550., 22200., 12550., 21740., 26750., 27400., 15430., 26060., 31950.,
      32600., 18310., 10382., 12430., 12670., 6735.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8225.,  8875.,  13425., 14075., 18625., 19275., 34225., 34875., 24705.,
      25355., 10065., 10715., 18625., 19275., 23825., 24475., 29025., 29675.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8832.,  9064.,  11680., 12000., 12880., 13240., 7600.,  7828.,  17030.,
      17560., 21600., 22300., 22850., 23600., 13115., 13580., 25350., 26200.,
      31600., 32700., 32850., 34000., 18635., 19340., 12678., 13336., 16000.,
      16860., 17250., 18160., 9563.,  10124., 2686.,  2972.,  3360.,  3740.,
      3810.,  4220.,  1887.,  2142.,  16768., 17256., 21280., 21920., 22480.,
      23160., 12976., 13396., 25350., 26200., 31600., 32700., 32850., 34000.,
      18635., 19340., 12678., 13336., 16000., 16860., 17250., 18160., 9563.,
      10124., 10246., 10712., 13200., 13820., 14450., 15120., 8171.,  8588.,
      4222.,  4444.,  5360.,  5660.,  5810.,  6140.,  3183.,  3390.,  24704.,
      25448., 30880., 31840., 32080., 33080., 18352., 18964., 12678., 13336.,
      16000., 16860., 17250., 18160., 9563.,  10124., 10246., 10712., 13200.,
      13820., 14450., 15120., 8171.,  8588.,  17030., 17560., 21600., 22300.,
      22850., 23600., 13115., 13580., 7294.,  7708.,  8960.,  9500.,  9410.,
      9980.,  5055.,  5406.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15975., 16450., 17225., 17750., 25975., 26850., 27225., 28150., 21575.,
      22530., 22825., 23830., 25975., 26850., 27225., 28150., 21575., 22530.,
      22825., 23830., 12375., 13090., 13625., 14390., 21575., 22530., 22825.,
      23830., 12375., 13090., 13625., 14390., 15975., 16450., 17225., 17750.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5912.,  6144.,  6376.,  6608.,  8832.,  9152.,  9472.,  9792.,  10040.,
      10400., 10760., 11120., 6012.,  6240.,  6468.,  6696.,  13818., 14348.,
      14878., 15408., 19076., 19776., 20476., 21176., 20374., 21124., 21874.,
      22624., 11685., 12150., 12615., 13080., 21946., 22796., 23646., 24496.,
      29460., 30560., 31660., 32760., 30758., 31908., 33058., 34208., 17365.,
      18070., 18775., 19480., 21370., 22028., 22686., 23344., 26148., 27008.,
      27868., 28728., 27446., 28356., 29266., 30176., 14725., 15286., 15847.,
      16408., 5086.,  5372.,  5658.,  5944.,  6340.,  6720.,  7100.,  7480.,
      7210.,  7620.,  8030.,  8440.,  3519.,  3774.,  4029.,  4284.,  13336.,
      13824., 14312., 14800., 18496., 19136., 19776., 20416., 19704., 20384.,
      21064., 21744., 11452., 11872., 12292., 12712., 21946., 22796., 23646.,
      24496., 29460., 30560., 31660., 32760., 30758., 31908., 33058., 34208.,
      17365., 18070., 18775., 19480., 21370., 22028., 22686., 23344., 26148.,
      27008., 27868., 28728., 27446., 28356., 29266., 30176., 14725., 15286.,
      15847., 16408., 8506.,  8972.,  9438.,  9904.,  11572., 12192., 12812.,
      13432., 12870., 13540., 14210., 14880., 6965.,  7382.,  7799.,  8216.,
      8222.,  8444.,  8666.,  8888.,  10420., 10720., 11020., 11320., 11290.,
      11620., 11950., 12280., 6159.,  6366.,  6573.,  6780.,  20760., 21504.,
      22248., 22992., 28160., 29120., 30080., 31040., 29368., 30368., 31368.,
      32368., 16892., 17504., 18116., 18728., 21370., 22028., 22686., 23344.,
      26148., 27008., 27868., 28728., 27446., 28356., 29266., 30176., 14725.,
      15286., 15847., 16408., 8506.,  8972.,  9438.,  9904.,  11572., 12192.,
      12812., 13432., 12870., 13540., 14210., 14880., 6965.,  7382.,  7799.,
      8216.,  13818., 14348., 14878., 15408., 19076., 19776., 20476., 21176.,
      20374., 21124., 21874., 22624., 11685., 12150., 12615., 13080., 14174.,
      14588., 15002., 15416., 17380., 17920., 18460., 19000., 18250., 18820.,
      19390., 19960., 9759.,  10110., 10461., 10812.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13235., 13710., 14185., 14660., 14533., 15058., 15583., 16108., 23619.,
      24494., 25369., 26244., 24917., 25842., 26767., 27692., 26003., 26958.,
      27913., 28868., 27301., 28306., 29311., 30316., 23619., 24494., 25369.,
      26244., 24917., 25842., 26767., 27692., 26003., 26958., 27913., 28868.,
      27301., 28306., 29311., 30316., 15011., 15726., 16441., 17156., 16309.,
      17074., 17839., 18604., 26003., 26958., 27913., 28868., 27301., 28306.,
      29311., 30316., 15011., 15726., 16441., 17156., 16309., 17074., 17839.,
      18604., 13235., 13710., 14185., 14660., 14533., 15058., 15583., 16108.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17168., 18128., 22760., 24000., 25160., 26480., 14864., 15656., 12548.,
      13616., 16975., 18360., 19475., 20960., 11293., 12184., 18436., 19632.,
      24175., 25720., 26675., 28320., 15421., 16408., 12548., 13616., 16975.,
      18360., 19475., 20960., 11293., 12184., 3644.,  4152.,  4895.,  5560.,
      5795.,  6520.,  3081.,  3516.,  12048., 13008., 16360., 17600., 18760.,
      20080., 11024., 11816., 18436., 19632., 24175., 25720., 26675., 28320.,
      15421., 16408., 12548., 13616., 16975., 18360., 19475., 20960., 11293.,
      12184., 18436., 19632., 24175., 25720., 26675., 28320., 15421., 16408.,
      8252.,  8888.,  10495., 11320., 11395., 12280., 6249.,  6780.,  17168.,
      18128., 22760., 24000., 25160., 26480., 14864., 15656., 12548., 13616.,
      16975., 18360., 19475., 20960., 11293., 12184., 18436., 19632., 24175.,
      25720., 26675., 28320., 15421., 16408., 12548., 13616., 16975., 18360.,
      19475., 20960., 11293., 12184., 3644.,  4152.,  4895.,  5560.,  5795.,
      6520.,  3081.,  3516.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31325., 32900., 33825., 35500., 51325., 53700., 53825., 56300., 42525.,
      45060., 45025., 47660., 51325., 53700., 53825., 56300., 42525., 45060.,
      45025., 47660., 24125., 26180., 26625., 28780., 42525., 45060., 45025.,
      47660., 24125., 26180., 26625., 28780., 31325., 32900., 33825., 35500.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11360., 11808., 12752., 13216., 17060., 17680., 18944., 19584., 19476.,
      20176., 21520., 22240., 11684., 12128., 12936., 13392., 18424., 18952.,
      20028., 20576., 23807., 24542., 25976., 26736., 26403., 27238., 28772.,
      29632., 14695., 15226., 16142., 16688., 13688., 14344., 15548., 16224.,
      19615., 20510., 22104., 23024., 22211., 23206., 24900., 25920., 12615.,
      13242., 14254., 14896., 18424., 18952., 20028., 20576., 23807., 24542.,
      25976., 26736., 26403., 27238., 28772., 29632., 14695., 15226., 16142.,
      16688., 6984.,  7288.,  7988.,  8304.,  9365.,  9790.,  10680., 11120.,
      11105., 11590., 12540., 13040., 5853.,  6162.,  6714.,  7032.,  17504.,
      17952., 18896., 19360., 22692., 23312., 24576., 25216., 25108., 25808.,
      27152., 27872., 14244., 14688., 15496., 15952., 13688., 14344., 15548.,
      16224., 19615., 20510., 22104., 23024., 22211., 23206., 24900., 25920.,
      12615., 13242., 14254., 14896., 18424., 18952., 20028., 20576., 23807.,
      24542., 25976., 26736., 26403., 27238., 28772., 29632., 14695., 15226.,
      16142., 16688., 13688., 14344., 15548., 16224., 19615., 20510., 22104.,
      23024., 22211., 23206., 24900., 25920., 12615., 13242., 14254., 14896.,
      16072., 16504., 17332., 17776., 20405., 20990., 22040., 22640., 22145.,
      22790., 23900., 24560., 12093., 12498., 13146., 13560., 11360., 11808.,
      12752., 13216., 17060., 17680., 18944., 19584., 19476., 20176., 21520.,
      22240., 11684., 12128., 12936., 13392., 18424., 18952., 20028., 20576.,
      23807., 24542., 25976., 26736., 26403., 27238., 28772., 29632., 14695.,
      15226., 16142., 16688., 13688., 14344., 15548., 16224., 19615., 20510.,
      22104., 23024., 22211., 23206., 24900., 25920., 12615., 13242., 14254.,
      14896., 18424., 18952., 20028., 20576., 23807., 24542., 25976., 26736.,
      26403., 27238., 28772., 29632., 14695., 15226., 16142., 16688., 6984.,
      7288.,  7988.,  8304.,  9365.,  9790.,  10680., 11120., 11105., 11590.,
      12540., 13040., 5853.,  6162.,  6714.,  7032.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17821., 18426., 19730., 20360., 20417., 21122., 22526., 23256., 17213.,
      17978., 19442., 20232., 19809., 20674., 22238., 23128., 17821., 18426.,
      19730., 20360., 20417., 21122., 22526., 23256., 17213., 17978., 19442.,
      20232., 19809., 20674., 22238., 23128., 17821., 18426., 19730., 20360.,
      20417., 21122., 22526., 23256., 17213., 17978., 19442., 20232., 19809.,
      20674., 22238., 23128., 17821., 18426., 19730., 20360., 20417., 21122.,
      22526., 23256., 17213., 17978., 19442., 20232., 19809., 20674., 22238.,
      23128., 17821., 18426., 19730., 20360., 20417., 21122., 22526., 23256.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12864., 13312., 13760., 14208., 15184., 15648., 16112., 16576., 18844.,
      19464., 20084., 20704., 22016., 22656., 23296., 23936., 21292., 21992.,
      22692., 23392., 24784., 25504., 26224., 26944., 14604., 15048., 15492.,
      15936., 16840., 17296., 17752., 18208., 16672., 17200., 17728., 18256.,
      19412., 19960., 20508., 21056., 21983., 22718., 23453., 24188., 25720.,
      26480., 27240., 28000., 24771., 25606., 26441., 27276., 28908., 29768.,
      30628., 31488., 16443., 16974., 17505., 18036., 19066., 19612., 20158.,
      20704., 17312., 17968., 18624., 19280., 20564., 21240., 21916., 22592.,
      23679., 24574., 25469., 26364., 28056., 28976., 29896., 30816., 26467.,
      27462., 28457., 29452., 31244., 32264., 33284., 34304., 16283., 16910.,
      17537., 18164., 19290., 19932., 20574., 21216., 16672., 17200., 17728.,
      18256., 19412., 19960., 20508., 21056., 21983., 22718., 23453., 24188.,
      25720., 26480., 27240., 28000., 24771., 25606., 26441., 27276., 28908.,
      29768., 30628., 31488., 16443., 16974., 17505., 18036., 19066., 19612.,
      20158., 20704., 7776.,  8080.,  8384.,  8688.,  9388.,  9704.,  10020.,
      10336., 9665.,  10090., 10515., 10940., 11832., 12272., 12712., 13152.,
      11293., 11778., 12263., 12748., 13700., 14200., 14700., 15200., 5829.,
      6138.,  6447.,  6756.,  7350.,  7668.,  7986.,  8304.,  14912., 15360.,
      15808., 16256., 17232., 17696., 18160., 18624., 19868., 20488., 21108.,
      21728., 23040., 23680., 24320., 24960., 22316., 23016., 23716., 24416.,
      25808., 26528., 27248., 27968., 15628., 16072., 16516., 16960., 17864.,
      18320., 18776., 19232., 17312., 17968., 18624., 19280., 20564., 21240.,
      21916., 22592., 23679., 24574., 25469., 26364., 28056., 28976., 29896.,
      30816., 26467., 27462., 28457., 29452., 31244., 32264., 33284., 34304.,
      16283., 16910., 17537., 18164., 19290., 19932., 20574., 21216., 16672.,
      17200., 17728., 18256., 19412., 19960., 20508., 21056., 21983., 22718.,
      23453., 24188., 25720., 26480., 27240., 28000., 24771., 25606., 26441.,
      27276., 28908., 29768., 30628., 31488., 16443., 16974., 17505., 18036.,
      19066., 19612., 20158., 20704., 17312., 17968., 18624., 19280., 20564.,
      21240., 21916., 22592., 23679., 24574., 25469., 26364., 28056., 28976.,
      29896., 30816., 26467., 27462., 28457., 29452., 31244., 32264., 33284.,
      34304., 16283., 16910., 17537., 18164., 19290., 19932., 20574., 21216.,
      13536., 13968., 14400., 14832., 15660., 16104., 16548., 16992., 17249.,
      17834., 18419., 19004., 20056., 20656., 21256., 21856., 18877., 19522.,
      20167., 20812., 21924., 22584., 23244., 23904., 12069., 12474., 12879.,
      13284., 13974., 14388., 14802., 15216., 12864., 13312., 13760., 14208.,
      15184., 15648., 16112., 16576., 18844., 19464., 20084., 20704., 22016.,
      22656., 23296., 23936., 21292., 21992., 22692., 23392., 24784., 25504.,
      26224., 26944., 14604., 15048., 15492., 15936., 16840., 17296., 17752.,
      18208., 16672., 17200., 17728., 18256., 19412., 19960., 20508., 21056.,
      21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 24771.,
      25606., 26441., 27276., 28908., 29768., 30628., 31488., 16443., 16974.,
      17505., 18036., 19066., 19612., 20158., 20704., 17312., 17968., 18624.,
      19280., 20564., 21240., 21916., 22592., 23679., 24574., 25469., 26364.,
      28056., 28976., 29896., 30816., 26467., 27462., 28457., 29452., 31244.,
      32264., 33284., 34304., 16283., 16910., 17537., 18164., 19290., 19932.,
      20574., 21216., 16672., 17200., 17728., 18256., 19412., 19960., 20508.,
      21056., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000.,
      24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488., 16443.,
      16974., 17505., 18036., 19066., 19612., 20158., 20704., 7776.,  8080.,
      8384.,  8688.,  9388.,  9704.,  10020., 10336., 9665.,  10090., 10515.,
      10940., 11832., 12272., 12712., 13152., 11293., 11778., 12263., 12748.,
      13700., 14200., 14700., 15200., 5829.,  6138.,  6447.,  6756.,  7350.,
      7668.,  7986.,  8304.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 19201.,
      19906., 20611., 21316., 22818., 23548., 24278., 25008., 21181., 21946.,
      22711., 23476., 25038., 25828., 26618., 27408., 23969., 24834., 25699.,
      26564., 28226., 29116., 30006., 30896., 16413., 17018., 17623., 18228.,
      19630., 20260., 20890., 21520., 19201., 19906., 20611., 21316., 22818.,
      23548., 24278., 25008., 21181., 21946., 22711., 23476., 25038., 25828.,
      26618., 27408., 23969., 24834., 25699., 26564., 28226., 29116., 30006.,
      30896., 16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520.,
      19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 21181.,
      21946., 22711., 23476., 25038., 25828., 26618., 27408., 23969., 24834.,
      25699., 26564., 28226., 29116., 30006., 30896., 16413., 17018., 17623.,
      18228., 19630., 20260., 20890., 21520., 19201., 19906., 20611., 21316.,
      22818., 23548., 24278., 25008., 21181., 21946., 22711., 23476., 25038.,
      25828., 26618., 27408., 23969., 24834., 25699., 26564., 28226., 29116.,
      30006., 30896., 16413., 17018., 17623., 18228., 19630., 20260., 20890.,
      21520., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13552., 14400., 15280., 16192., 19820., 21024., 22268., 23552., 24652.,
      26016., 27420., 28864., 14708., 15552., 16420., 17312., 15348., 16400.,
      17492., 18624., 22005., 23484., 25013., 26592., 27197., 28876., 30605.,
      32384., 15595., 16628., 17691., 18784., 15348., 16400., 17492., 18624.,
      22005., 23484., 25013., 26592., 27197., 28876., 30605., 32384., 15595.,
      16628., 17691., 18784., 15348., 16400., 17492., 18624., 22005., 23484.,
      25013., 26592., 27197., 28876., 30605., 32384., 15595., 16628., 17691.,
      18784., 10780., 11504., 12252., 13024., 15415., 16380., 17375., 18400.,
      18895., 19980., 21095., 22240., 10521., 11172., 11841., 12528., 13552.,
      14400., 15280., 16192., 19820., 21024., 22268., 23552., 24652., 26016.,
      27420., 28864., 14708., 15552., 16420., 17312., 15348., 16400., 17492.,
      18624., 22005., 23484., 25013., 26592., 27197., 28876., 30605., 32384.,
      15595., 16628., 17691., 18784., 15348., 16400., 17492., 18624., 22005.,
      23484., 25013., 26592., 27197., 28876., 30605., 32384., 15595., 16628.,
      17691., 18784., 15348., 16400., 17492., 18624., 22005., 23484., 25013.,
      26592., 27197., 28876., 30605., 32384., 15595., 16628., 17691., 18784.,
      10780., 11504., 12252., 13024., 15415., 16380., 17375., 18400., 18895.,
      19980., 21095., 22240., 10521., 11172., 11841., 12528., 13552., 14400.,
      15280., 16192., 19820., 21024., 22268., 23552., 24652., 26016., 27420.,
      28864., 14708., 15552., 16420., 17312., 15348., 16400., 17492., 18624.,
      22005., 23484., 25013., 26592., 27197., 28876., 30605., 32384., 15595.,
      16628., 17691., 18784., 15348., 16400., 17492., 18624., 22005., 23484.,
      25013., 26592., 27197., 28876., 30605., 32384., 15595., 16628., 17691.,
      18784., 15348., 16400., 17492., 18624., 22005., 23484., 25013., 26592.,
      27197., 28876., 30605., 32384., 15595., 16628., 17691., 18784., 10780.,
      11504., 12252., 13024., 15415., 16380., 17375., 18400., 18895., 19980.,
      21095., 22240., 10521., 11172., 11841., 12528.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13617., 14836., 16105., 17424., 18809., 20228., 21697., 23216., 13617.,
      14836., 16105., 17424., 18809., 20228., 21697., 23216., 13617., 14836.,
      16105., 17424., 18809., 20228., 21697., 23216., 13617., 14836., 16105.,
      17424., 18809., 20228., 21697., 23216., 13617., 14836., 16105., 17424.,
      18809., 20228., 21697., 23216., 13617., 14836., 16105., 17424., 18809.,
      20228., 21697., 23216., 13617., 14836., 16105., 17424., 18809., 20228.,
      21697., 23216., 13617., 14836., 16105., 17424., 18809., 20228., 21697.,
      23216., 13617., 14836., 16105., 17424., 18809., 20228., 21697., 23216.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12464., 12832., 13696., 14080., 14992., 15392., 16352., 16768., 18516.,
      19096., 20328., 20928., 22220., 22840., 24192., 24832., 23412., 24152.,
      25544., 26304., 27756., 28536., 30048., 30848., 16636., 17128., 18056.,
      18560., 19524., 20040., 21040., 21568., 15900., 16424., 17536., 18080.,
      19252., 19816., 21048., 21632., 22661., 23466., 25018., 25848., 27475.,
      28330., 30032., 30912., 28237., 29242., 30994., 32024., 33851., 34906.,
      36808., 37888., 18239., 18902., 20034., 20712., 21889., 22582., 23804.,
      24512., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632.,
      22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 28237.,
      29242., 30994., 32024., 33851., 34906., 36808., 37888., 18239., 18902.,
      20034., 20712., 21889., 22582., 23804., 24512., 15900., 16424., 17536.,
      18080., 19252., 19816., 21048., 21632., 22661., 23466., 25018., 25848.,
      27475., 28330., 30032., 30912., 28237., 29242., 30994., 32024., 33851.,
      34906., 36808., 37888., 18239., 18902., 20034., 20712., 21889., 22582.,
      23804., 24512., 9828.,  10168., 10880., 11232., 11980., 12344., 13128.,
      13504., 13483., 13998., 14950., 15480., 16477., 17022., 18064., 18624.,
      16739., 17374., 18446., 19096., 20213., 20878., 22040., 22720., 9681.,
      10098., 10782., 11208., 11919., 12354., 13092., 13536., 12464., 12832.,
      13696., 14080., 14992., 15392., 16352., 16768., 18516., 19096., 20328.,
      20928., 22220., 22840., 24192., 24832., 23412., 24152., 25544., 26304.,
      27756., 28536., 30048., 30848., 16636., 17128., 18056., 18560., 19524.,
      20040., 21040., 21568., 15900., 16424., 17536., 18080., 19252., 19816.,
      21048., 21632., 22661., 23466., 25018., 25848., 27475., 28330., 30032.,
      30912., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888.,
      18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512., 15900.,
      16424., 17536., 18080., 19252., 19816., 21048., 21632., 22661., 23466.,
      25018., 25848., 27475., 28330., 30032., 30912., 28237., 29242., 30994.,
      32024., 33851., 34906., 36808., 37888., 18239., 18902., 20034., 20712.,
      21889., 22582., 23804., 24512., 15900., 16424., 17536., 18080., 19252.,
      19816., 21048., 21632., 22661., 23466., 25018., 25848., 27475., 28330.,
      30032., 30912., 28237., 29242., 30994., 32024., 33851., 34906., 36808.,
      37888., 18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512.,
      9828.,  10168., 10880., 11232., 11980., 12344., 13128., 13504., 13483.,
      13998., 14950., 15480., 16477., 17022., 18064., 18624., 16739., 17374.,
      18446., 19096., 20213., 20878., 22040., 22720., 9681.,  10098., 10782.,
      11208., 11919., 12354., 13092., 13536., 12464., 12832., 13696., 14080.,
      14992., 15392., 16352., 16768., 18516., 19096., 20328., 20928., 22220.,
      22840., 24192., 24832., 23412., 24152., 25544., 26304., 27756., 28536.,
      30048., 30848., 16636., 17128., 18056., 18560., 19524., 20040., 21040.,
      21568., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632.,
      22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 28237.,
      29242., 30994., 32024., 33851., 34906., 36808., 37888., 18239., 18902.,
      20034., 20712., 21889., 22582., 23804., 24512., 15900., 16424., 17536.,
      18080., 19252., 19816., 21048., 21632., 22661., 23466., 25018., 25848.,
      27475., 28330., 30032., 30912., 28237., 29242., 30994., 32024., 33851.,
      34906., 36808., 37888., 18239., 18902., 20034., 20712., 21889., 22582.,
      23804., 24512., 15900., 16424., 17536., 18080., 19252., 19816., 21048.,
      21632., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912.,
      28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 18239.,
      18902., 20034., 20712., 21889., 22582., 23804., 24512., 9828.,  10168.,
      10880., 11232., 11980., 12344., 13128., 13504., 13483., 13998., 14950.,
      15480., 16477., 17022., 18064., 18624., 16739., 17374., 18446., 19096.,
      20213., 20878., 22040., 22720., 9681.,  10098., 10782., 11208., 11919.,
      12354., 13092., 13536.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 20169.,
      20914., 22406., 23176., 24743., 25538., 27180., 28000., 14593., 15138.,
      16430., 17000., 18367., 18962., 20404., 21024., 20169., 20914., 22406.,
      23176., 24743., 25538., 27180., 28000., 14593., 15138., 16430., 17000.,
      18367., 18962., 20404., 21024., 20169., 20914., 22406., 23176., 24743.,
      25538., 27180., 28000., 14593., 15138., 16430., 17000., 18367., 18962.,
      20404., 21024., 20169., 20914., 22406., 23176., 24743., 25538., 27180.,
      28000., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024.,
      20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 14593.,
      15138., 16430., 17000., 18367., 18962., 20404., 21024., 20169., 20914.,
      22406., 23176., 24743., 25538., 27180., 28000., 14593., 15138., 16430.,
      17000., 18367., 18962., 20404., 21024., 20169., 20914., 22406., 23176.,
      24743., 25538., 27180., 28000., 14593., 15138., 16430., 17000., 18367.,
      18962., 20404., 21024., 20169., 20914., 22406., 23176., 24743., 25538.,
      27180., 28000., 14593., 15138., 16430., 17000., 18367., 18962., 20404.,
      21024., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9200.,  9568.,  9936.,  10304., 11136., 11520., 11904., 12288., 13200.,
      13600., 14000., 14400., 15392., 15808., 16224., 16640., 13988., 14568.,
      15148., 15728., 16888., 17488., 18088., 18688., 19948., 20568., 21188.,
      21808., 23168., 23808., 24448., 25088., 17988., 18728., 19468., 20208.,
      21528., 22288., 23048., 23808., 25228., 26008., 26788., 27568., 29088.,
      29888., 30688., 31488., 11788., 12280., 12772., 13264., 14104., 14608.,
      15112., 15616., 16516., 17032., 17548., 18064., 19024., 19552., 20080.,
      20608., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344.,
      18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 18661.,
      19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558.,
      28413., 29268., 31024., 31904., 32784., 33664., 23469., 24474., 25479.,
      26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276.,
      38232., 39312., 40392., 41472., 14823., 15486., 16149., 16812., 17886.,
      18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080.,
      25788., 26496., 13036., 13560., 14084., 14608., 15712., 16256., 16800.,
      17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296.,
      18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703.,
      27558., 28413., 29268., 31024., 31904., 32784., 33664., 23469., 24474.,
      25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221.,
      36276., 38232., 39312., 40392., 41472., 14823., 15486., 16149., 16812.,
      17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372.,
      25080., 25788., 26496., 13036., 13560., 14084., 14608., 15712., 16256.,
      16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712.,
      23296., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072.,
      26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 23469.,
      24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166.,
      35221., 36276., 38232., 39312., 40392., 41472., 14823., 15486., 16149.,
      16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148.,
      24372., 25080., 25788., 26496., 8180.,  8520.,  8860.,  9200.,  9888.,
      10240., 10592., 10944., 11692., 12056., 12420., 12784., 13592., 13968.,
      14344., 14720., 11923., 12438., 12953., 13468., 14394., 14924., 15454.,
      15984., 16985., 17530., 18075., 18620., 19696., 20256., 20816., 21376.,
      14731., 15366., 16001., 16636., 17682., 18332., 18982., 19632., 20753.,
      21418., 22083., 22748., 23944., 24624., 25304., 25984., 10241., 10658.,
      11075., 11492., 12178., 12604., 13030., 13456., 14187., 14622., 15057.,
      15492., 16268., 16712., 17156., 17600., 9200.,  9568.,  9936.,  10304.,
      11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392.,
      15808., 16224., 16640., 13988., 14568., 15148., 15728., 16888., 17488.,
      18088., 18688., 19948., 20568., 21188., 21808., 23168., 23808., 24448.,
      25088., 17988., 18728., 19468., 20208., 21528., 22288., 23048., 23808.,
      25228., 26008., 26788., 27568., 29088., 29888., 30688., 31488., 11788.,
      12280., 12772., 13264., 14104., 14608., 15112., 15616., 16516., 17032.,
      17548., 18064., 19024., 19552., 20080., 20608., 13036., 13560., 14084.,
      14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240.,
      21544., 22128., 22712., 23296., 18661., 19466., 20271., 21076., 22582.,
      23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904.,
      32784., 33664., 23469., 24474., 25479., 26484., 28190., 29220., 30250.,
      31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472.,
      14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069.,
      21762., 22455., 23148., 24372., 25080., 25788., 26496., 13036., 13560.,
      14084., 14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676.,
      20240., 21544., 22128., 22712., 23296., 18661., 19466., 20271., 21076.,
      22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024.,
      31904., 32784., 33664., 23469., 24474., 25479., 26484., 28190., 29220.,
      30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392.,
      41472., 14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920.,
      21069., 21762., 22455., 23148., 24372., 25080., 25788., 26496., 13036.,
      13560., 14084., 14608., 15712., 16256., 16800., 17344., 18548., 19112.,
      19676., 20240., 21544., 22128., 22712., 23296., 18661., 19466., 20271.,
      21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268.,
      31024., 31904., 32784., 33664., 23469., 24474., 25479., 26484., 28190.,
      29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312.,
      40392., 41472., 14823., 15486., 16149., 16812., 17886., 18564., 19242.,
      19920., 21069., 21762., 22455., 23148., 24372., 25080., 25788., 26496.,
      8180.,  8520.,  8860.,  9200.,  9888.,  10240., 10592., 10944., 11692.,
      12056., 12420., 12784., 13592., 13968., 14344., 14720., 11923., 12438.,
      12953., 13468., 14394., 14924., 15454., 15984., 16985., 17530., 18075.,
      18620., 19696., 20256., 20816., 21376., 14731., 15366., 16001., 16636.,
      17682., 18332., 18982., 19632., 20753., 21418., 22083., 22748., 23944.,
      24624., 25304., 25984., 10241., 10658., 11075., 11492., 12178., 12604.,
      13030., 13456., 14187., 14622., 15057., 15492., 16268., 16712., 17156.,
      17600., 9200.,  9568.,  9936.,  10304., 11136., 11520., 11904., 12288.,
      13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 13988.,
      14568., 15148., 15728., 16888., 17488., 18088., 18688., 19948., 20568.,
      21188., 21808., 23168., 23808., 24448., 25088., 17988., 18728., 19468.,
      20208., 21528., 22288., 23048., 23808., 25228., 26008., 26788., 27568.,
      29088., 29888., 30688., 31488., 11788., 12280., 12772., 13264., 14104.,
      14608., 15112., 15616., 16516., 17032., 17548., 18064., 19024., 19552.,
      20080., 20608., 13036., 13560., 14084., 14608., 15712., 16256., 16800.,
      17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296.,
      18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703.,
      27558., 28413., 29268., 31024., 31904., 32784., 33664., 23469., 24474.,
      25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221.,
      36276., 38232., 39312., 40392., 41472., 14823., 15486., 16149., 16812.,
      17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372.,
      25080., 25788., 26496., 13036., 13560., 14084., 14608., 15712., 16256.,
      16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712.,
      23296., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072.,
      26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 23469.,
      24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166.,
      35221., 36276., 38232., 39312., 40392., 41472., 14823., 15486., 16149.,
      16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148.,
      24372., 25080., 25788., 26496., 13036., 13560., 14084., 14608., 15712.,
      16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128.,
      22712., 23296., 18661., 19466., 20271., 21076., 22582., 23412., 24242.,
      25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664.,
      23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111.,
      34166., 35221., 36276., 38232., 39312., 40392., 41472., 14823., 15486.,
      16149., 16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455.,
      23148., 24372., 25080., 25788., 26496., 8180.,  8520.,  8860.,  9200.,
      9888.,  10240., 10592., 10944., 11692., 12056., 12420., 12784., 13592.,
      13968., 14344., 14720., 11923., 12438., 12953., 13468., 14394., 14924.,
      15454., 15984., 16985., 17530., 18075., 18620., 19696., 20256., 20816.,
      21376., 14731., 15366., 16001., 16636., 17682., 18332., 18982., 19632.,
      20753., 21418., 22083., 22748., 23944., 24624., 25304., 25984., 10241.,
      10658., 11075., 11492., 12178., 12604., 13030., 13456., 14187., 14622.,
      15057., 15492., 16268., 16712., 17156., 17600.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011.,
      20606., 21201., 21796., 23292., 23912., 24532., 25152., 18857., 19602.,
      20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009.,
      28804., 30500., 31320., 32140., 32960., 14049., 14594., 15139., 15684.,
      16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292.,
      23912., 24532., 25152., 18857., 19602., 20347., 21092., 22538., 23308.,
      24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140.,
      32960., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640.,
      20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 18857.,
      19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214.,
      28009., 28804., 30500., 31320., 32140., 32960., 14049., 14594., 15139.,
      15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796.,
      23292., 23912., 24532., 25152., 18857., 19602., 20347., 21092., 22538.,
      23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320.,
      32140., 32960., 14049., 14594., 15139., 15684., 16930., 17500., 18070.,
      18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152.,
      18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419.,
      27214., 28009., 28804., 30500., 31320., 32140., 32960., 14049., 14594.,
      15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201.,
      21796., 23292., 23912., 24532., 25152., 18857., 19602., 20347., 21092.,
      22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500.,
      31320., 32140., 32960., 14049., 14594., 15139., 15684., 16930., 17500.,
      18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532.,
      25152., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848.,
      26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 14049.,
      14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606.,
      21201., 21796., 23292., 23912., 24532., 25152., 18857., 19602., 20347.,
      21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804.,
      30500., 31320., 32140., 32960., 14049., 14594., 15139., 15684., 16930.,
      17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912.,
      24532., 25152., 18857., 19602., 20347., 21092., 22538., 23308., 24078.,
      24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5500.,  7180.,  7800.,  8420.,  4934.,  10800., 13600., 14250., 14900.,
      8530.,  16200., 20100., 20750., 21400., 12130., 21600., 26600., 27250.,
      27900., 15730., 8830.,  10610., 10850., 11090., 5913.,  19068., 23460.,
      24080., 19708., 9406.,  9384.,  11540., 12190., 10408., 5026.,  8640.,
      11000., 11650., 12300., 7090.,  14040., 17500., 18150., 18800., 10690.,
      5974.,  7250.,  7490.,  7730.,  4149.,  23932., 29500., 30120., 30740.,
      17462., 30240., 37000., 31378., 26268., 13042., 14136., 17260., 14198.,
      11648., 5506.,  8272.,  10320., 9818.,  9828.,  5650.,  3118.,  3890.,
      4130.,  4370.,  2385.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10025., 10675., 11325., 16525., 17175., 17825., 23025., 23675., 24325.,
      16285., 16935., 15665., 9345.,  9995.,  10005., 13925., 14575., 15225.,
      33425., 34075., 34725., 25205., 23295., 19209., 11865., 11235., 9709.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10720., 11000., 13980., 14360., 15180., 15600., 16380., 16840., 9580.,
      9868.,  20950., 21600., 26350., 27200., 27600., 28500., 28850., 29800.,
      16475., 17060., 19574., 20368., 19586., 20488., 16484., 17308., 15750.,
      16560., 8783.,  9284.,  14102., 14784., 15446., 16208., 14904., 15588.,
      15450., 16120., 8771.,  9188.,  4382.,  4604.,  5560.,  5860.,  6010.,
      6340.,  6460.,  6820.,  3537.,  3762.,  16800., 17400., 21180., 21960.,
      22380., 23200., 18716., 19448., 9068.,  9468.,  12022., 12624., 15250.,
      16040., 16500., 17340., 15446., 16208., 8095.,  8516.,  16790., 17280.,
      21350., 22000., 22600., 23300., 23850., 24600., 13715., 14180., 21046.,
      21808., 22074., 22968., 20700., 21580., 21950., 22880., 12359., 12932.,
      7710.,  8236.,  7004.,  7588.,  6110.,  6660.,  6560.,  7140.,  3333.,
      3690.,  14688., 15096., 18780., 19320., 19980., 20560., 21180., 21800.,
      12268., 12652., 25110., 25920., 31350., 32400., 26456., 27428., 22074.,
      22968., 10979., 11492., 14518., 15216., 18250., 19160., 15916., 16748.,
      14094., 14848., 7127.,  7556.,  14166., 14752., 17950., 18720., 18176.,
      18868., 18914., 19528., 10955., 11300., 5918.,  6236.,  7360.,  7780.,
      7810.,  8260.,  8260.,  8740.,  4473.,  4770.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19475., 20050., 20725., 21350., 21975., 22650., 28839., 29850., 24201.,
      25134., 20075., 20930., 17019., 17890., 14941., 15734., 13375., 14090.,
      16375., 17210., 17625., 18510., 17019., 17890., 16075., 16770., 17325.,
      18070., 17999., 18730., 26975., 27850., 28225., 29150., 29475., 30450.,
      24475., 25250., 25725., 26550., 26975., 27850., 22575., 23530., 21329.,
      22270., 17971., 18834., 15875., 16690., 15909., 16710., 15111., 15834.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7080.,  7360.,  7640.,  7920.,  10428., 10808., 11188., 11568., 11636.,
      12056., 12476., 12896., 12844., 13304., 13764., 14224., 7608.,  7896.,
      8184.,  8472.,  16930., 17580., 18230., 18880., 23178., 24028., 24878.,
      25728., 24476., 25376., 26276., 27176., 25774., 26724., 27674., 28624.,
      14701., 15286., 15871., 16456., 20178., 20972., 21766., 22560., 26750.,
      27652., 28554., 29456., 27664., 28488., 29312., 30136., 25058., 25868.,
      26678., 27488., 13481., 13982., 14483., 14984., 15490., 16172., 16854.,
      17536., 15282., 16044., 16806., 17568., 13124., 13808., 14492., 15176.,
      13078., 13748., 14418., 15088., 7141.,  7558.,  7975.,  8392.,  8542.,
      8764.,  8986.,  9208.,  10820., 11120., 11420., 11720., 11690., 12020.,
      12350., 12680., 12560., 12920., 13280., 13640., 6849.,  7074.,  7299.,
      7524.,  16872., 17472., 18072., 18672., 24172., 24952., 25732., 26512.,
      25380., 26200., 27020., 27840., 25180., 25912., 26644., 27376., 15432.,
      15832., 16232., 16632., 13458., 14060., 14662., 15264., 17166., 17956.,
      18746., 19536., 18464., 19304., 20144., 20984., 15282., 16044., 16806.,
      17568., 7065.,  7486.,  7907.,  8328.,  12866., 13356., 13846., 14336.,
      17986., 18636., 19286., 19936., 19284., 19984., 20684., 21384., 20582.,
      21332., 22082., 22832., 11861., 12326., 12791., 13256., 19058., 19820.,
      20582., 21344., 24054., 24948., 25842., 26736., 24264., 25144., 26024.,
      26904., 25562., 26492., 27422., 28352., 14929., 15502., 16075., 16648.,
      14894., 15420., 15946., 16472., 13424., 14008., 14592., 15176., 11670.,
      12220., 12770., 13320., 12540., 13120., 13700., 14280., 6309.,  6666.,
      7023.,  7380.,  10792., 11200., 11608., 12016., 15260., 15800., 16340.,
      16880., 16468., 17048., 17628., 18208., 17676., 18296., 18916., 19536.,
      10328., 10712., 11096., 11480., 20994., 21804., 22614., 23424., 28370.,
      29420., 30470., 31520., 25700., 26672., 27644., 28616., 24054., 24948.,
      25842., 26736., 13509., 14022., 14535., 15048., 22450., 23148., 23846.,
      24544., 27654., 28564., 29474., 30384., 21912., 22744., 23576., 24408.,
      17194., 17948., 18702., 19456., 7681.,  8110.,  8539.,  8968.,  11618.,
      12204., 12790., 13376., 15674., 16444., 17214., 17984., 15052., 15744.,
      16436., 17128., 15454., 16068., 16682., 17296., 9021.,  9366.,  9711.,
      10056., 11518., 11836., 12154., 12472., 14300., 14720., 15140., 15560.,
      15170., 15620., 16070., 16520., 16040., 16520., 17000., 17480., 8649.,
      8946.,  9243.,  9540.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16039., 16614., 17189., 17764., 17337., 17962., 18587., 19212., 18635.,
      19310., 19985., 20660., 26907., 27918., 28929., 29940., 24749., 25682.,
      26615., 27548., 23615., 24470., 25325., 26180., 24655., 25526., 26397.,
      27268., 19425., 20218., 21011., 21804., 15219., 15934., 16649., 17364.,
      25707., 26542., 27377., 28212., 27005., 27890., 28775., 29660., 24655.,
      25526., 26397., 27268., 13727., 14422., 15117., 15812., 15025., 15770.,
      16515., 17260., 15235., 15966., 16697., 17428., 23827., 24702., 25577.,
      26452., 25125., 26050., 26975., 27900., 26423., 27398., 28373., 29348.,
      21231., 22006., 22781., 23556., 22529., 23354., 24179., 25004., 23827.,
      24702., 25577., 26452., 26211., 27166., 28121., 29076., 26677., 27618.,
      28559., 29500., 27079., 27942., 28805., 29668., 17815., 18630., 19445.,
      20260., 16745., 17546., 18347., 19148., 14075., 14798., 15521., 16244.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20944., 22000., 27360., 28720., 29760., 31200., 32160., 33680., 18824.,
      19736., 41380., 43200., 52075., 54400., 54575., 57000., 57075., 59600.,
      32605., 34120., 38628., 40736., 38547., 40976., 32343., 34616., 30875.,
      33120., 17221., 18568., 27684., 29568., 30267., 32416., 29183., 31176.,
      30275., 32240., 17197., 18376., 8572.,  9208.,  10895., 11720., 11795.,
      12680., 12695., 13640., 6957.,  7524.,  33104., 34800., 41760., 43920.,
      44160., 46400., 36832., 38896., 17800., 18936., 23524., 25248., 29875.,
      32080., 32375., 34680., 30267., 32416., 15845., 17032., 33060., 34560.,
      42075., 44000., 44575., 46600., 47075., 49200., 27085., 28360., 41572.,
      43616., 43523., 45936., 40775., 43160., 43275., 45760., 24373., 25864.,
      15228., 16472., 13783., 15176., 11995., 13320., 12895., 14280., 6549.,
      7380.,  28880., 30192., 36960., 38640., 39360., 41120., 41760., 43600.,
      24200., 25304., 49700., 51840., 62075., 64800., 52287., 54856., 43523.,
      45936., 21613., 22984., 28516., 30432., 35875., 38320., 31207., 33496.,
      27563., 29696., 13909., 15112., 27812., 29504., 35275., 37440., 35727.,
      37736., 37203., 39056., 21565., 22600., 11644., 12472., 14495., 15560.,
      15395., 16520., 16295., 17480., 8829.,  9540.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      38325., 40100., 40825., 42700., 43325., 45300., 57053., 59700., 47777.,
      50268., 39525., 41860., 33413., 35780., 29257., 31468., 26125., 28180.,
      32125., 34420., 34625., 37020., 33413., 35780., 31525., 33540., 34025.,
      36140., 35373., 37460., 53325., 55700., 55825., 58300., 58325., 60900.,
      48325., 50500., 50825., 53100., 53325., 55700., 44525., 47060., 42033.,
      44540., 35317., 37668., 31125., 33380., 31193., 33420., 29597., 31668.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9728.,  10144., 11056., 11488., 13340., 13824., 14952., 15456., 14668.,
      15168., 16312., 16832., 17084., 17664., 18888., 19488., 10844., 11216.,
      11952., 12336., 17608., 18248., 19436., 20096., 18955., 19734., 21212.,
      22016., 18927., 19742., 21256., 22096., 21523., 22438., 24052., 24992.,
      12087., 12666., 13630., 14224., 15144., 15816., 17036., 17728., 20787.,
      21478., 22868., 23584., 22935., 23534., 24832., 25456., 21627., 22262.,
      23596., 24256., 12207., 12618., 13414., 13840., 19720., 20552., 21932.,
      22784., 22235., 23222., 24908., 25920., 17407., 18238., 19768., 20624.,
      15715., 16454., 17892., 18656., 8935.,  9370.,  10190., 10640., 16712.,
      17144., 17972., 18416., 21205., 21790., 22840., 23440., 15905., 16422.,
      17404., 17936., 11629., 12078., 12992., 13456., 4833.,  5082.,  5574.,
      5832.,  10496., 10912., 11824., 12256., 17084., 17664., 18888., 19488.,
      19500., 20160., 21464., 22144., 20508., 21120., 22376., 23008., 13180.,
      13520., 14224., 14576., 15656., 16328., 17548., 18240., 21523., 22438.,
      24052., 24992., 24119., 25134., 26848., 27888., 22235., 23222., 24908.,
      25920., 11471., 12042., 12998., 13584., 16520., 16968., 17964., 18432.,
      21627., 22262., 23596., 24256., 24223., 24958., 26392., 27152., 26819.,
      27654., 29188., 30048., 15047., 15578., 16494., 17040., 11880., 12488.,
      13644., 14272., 15715., 16454., 17892., 18656., 17223., 17998., 19472.,
      20272., 19819., 20694., 22268., 23168., 11775., 12330., 13270., 13840.,
      12648., 13048., 13844., 14256., 11629., 12078., 12992., 13456., 10745.,
      11190., 12100., 12560., 12485., 12990., 13960., 14480., 6633.,  6954.,
      7518.,  7848.,  14208., 14752., 15792., 16352., 20508., 21120., 22376.,
      23008., 22540., 23104., 24312., 24896., 21052., 21632., 22856., 23456.,
      11996., 12368., 13104., 13488., 19720., 20552., 21932., 22784., 22235.,
      23222., 24908., 25920., 17407., 18238., 19768., 20624., 15715., 16454.,
      17892., 18656., 8935.,  9370.,  10190., 10640., 20584., 21192., 22348.,
      22976., 26819., 27654., 29188., 30048., 22375., 23182., 24688., 25520.,
      18955., 19734., 21212., 22016., 9247.,  9706.,  10550., 11024., 13000.,
      13640., 14828., 15488., 19819., 20694., 22268., 23168., 20495., 21342.,
      22888., 23760., 20787., 21478., 22868., 23584., 13271., 13626., 14366.,
      14736., 9608.,  9976.,  10740., 11120., 12485., 12990., 13960., 14480.,
      14225., 14790., 15820., 16400., 11485., 11982., 12944., 13456., 4977.,
      5242.,  5750.,  6024.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      21701., 22314., 23626., 24264., 20329., 20914., 22198., 22808., 22925.,
      23610., 24994., 25704., 19565., 20474., 22082., 23016., 15761., 16514.,
      17966., 18744., 15925., 16650., 18074., 18824., 24469., 25290., 26810.,
      27656., 20537., 21330., 22822., 23640., 17629., 18394., 19858., 20648.,
      22925., 23610., 24994., 25704., 25521., 26306., 27790., 28600., 24469.,
      25290., 26810., 27656., 15925., 16650., 18074., 18824., 18521., 19346.,
      20870., 21720., 20029., 20890., 22450., 23336., 17629., 18394., 19858.,
      20648., 20225., 21090., 22654., 23544., 22821., 23786., 25450., 26440.,
      24469., 25290., 26810., 27656., 20537., 21330., 22822., 23640., 17629.,
      18394., 19858., 20648., 20029., 20890., 22450., 23336., 20385., 21154.,
      22622., 23416., 21701., 22314., 23626., 24264., 22821., 23786., 25450.,
      26440., 23049., 24050., 25750., 26776., 19565., 20474., 22082., 23016.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11936., 12352., 12768., 13184., 14128., 14560., 14992., 15424., 13076.,
      13560., 14044., 14528., 15704., 16208., 16712., 17216., 13412., 13912.,
      14412., 14912., 16104., 16624., 17144., 17664., 15860., 16440., 17020.,
      17600., 18872., 19472., 20072., 20672., 10692., 11064., 11436., 11808.,
      12640., 13024., 13408., 13792., 17744., 18384., 19024., 19664., 20932.,
      21592., 22252., 22912., 21451., 22230., 23009., 23788., 25364., 26168.,
      26972., 27776., 23151., 23966., 24781., 25596., 27208., 28048., 28888.,
      29728., 25939., 26854., 27769., 28684., 30396., 31336., 32276., 33216.,
      19115., 19694., 20273., 20852., 21930., 22524., 23118., 23712., 15344.,
      16016., 16688., 17360., 18660., 19352., 20044., 20736., 18547., 19238.,
      19929., 20620., 22108., 22824., 23540., 24256., 20631., 21230., 21829.,
      22428., 23824., 24448., 25072., 25696., 19771., 20406., 21041., 21676.,
      23108., 23768., 24428., 25088., 13379., 13790., 14201., 14612., 15522.,
      15948., 16374., 16800., 22800., 23632., 24464., 25296., 26756., 27608.,
      28460., 29312., 30875., 31862., 32849., 33836., 35620., 36632., 37644.,
      38656., 23167., 23998., 24829., 25660., 27288., 28144., 29000., 29856.,
      17571., 18310., 19049., 19788., 21324., 22088., 22852., 23616., 8859.,
      9294.,  9729.,  10164., 11098., 11548., 11998., 12448., 13792., 14224.,
      14656., 15088., 15916., 16360., 16804., 17248., 17569., 18154., 18739.,
      19324., 20376., 20976., 21576., 22176., 13437., 13954., 14471., 14988.,
      15972., 16504., 17036., 17568., 11353., 11802., 12251., 12700., 13616.,
      14080., 14544., 15008., 8457.,  8706.,  8955.,  9204.,  9738.,  9996.,
      10254., 10512., 9888.,  10304., 10720., 11136., 12080., 12512., 12944.,
      13376., 15860., 16440., 17020., 17600., 18872., 19472., 20072., 20672.,
      18308., 18968., 19628., 20288., 21640., 22320., 23000., 23680., 18068.,
      18680., 19292., 19904., 21208., 21840., 22472., 23104., 13348., 13688.,
      14028., 14368., 15168., 15520., 15872., 16224., 18416., 19088., 19760.,
      20432., 21732., 22424., 23116., 23808., 25939., 26854., 27769., 28684.,
      30396., 31336., 32276., 33216., 28727., 29742., 30757., 31772., 33584.,
      34624., 35664., 36704., 30875., 31862., 32849., 33836., 35620., 36632.,
      37644., 38656., 15843., 16414., 16985., 17556., 18626., 19212., 19798.,
      20384., 14736., 15184., 15632., 16080., 17156., 17624., 18092., 18560.,
      19771., 20406., 21041., 21676., 23108., 23768., 24428., 25088., 22559.,
      23294., 24029., 24764., 26296., 27056., 27816., 28576., 25347., 26182.,
      27017., 27852., 29484., 30344., 31204., 32064., 16891., 17422., 17953.,
      18484., 19514., 20060., 20606., 21152., 16048., 16656., 17264., 17872.,
      19108., 19736., 20364., 20992., 17571., 18310., 19049., 19788., 21324.,
      22088., 22852., 23616., 18247., 19022., 19797., 20572., 22144., 22944.,
      23744., 24544., 21035., 21910., 22785., 23660., 25332., 26232., 27132.,
      28032., 12371., 12926., 13481., 14036., 15090., 15660., 16230., 16800.,
      10816., 11216., 11616., 12016., 12812., 13224., 13636., 14048., 11353.,
      11802., 12251., 12700., 13616., 14080., 14544., 15008., 11893., 12338.,
      12783., 13228., 14140., 14600., 15060., 15520., 13521., 14026., 14531.,
      15036., 16008., 16528., 17048., 17568., 10449., 10770., 11091., 11412.,
      12018., 12348., 12678., 13008., 13600., 14144., 14688., 15232., 16304.,
      16864., 17424., 17984., 18068., 18680., 19292., 19904., 21208., 21840.,
      22472., 23104., 19876., 20440., 21004., 21568., 22824., 23408., 23992.,
      24576., 18676., 19256., 19836., 20416., 21688., 22288., 22888., 23488.,
      12996., 13368., 13740., 14112., 14944., 15328., 15712., 16096., 22800.,
      23632., 24464., 25296., 26756., 27608., 28460., 29312., 30875., 31862.,
      32849., 33836., 35620., 36632., 37644., 38656., 23167., 23998., 24829.,
      25660., 27288., 28144., 29000., 29856., 17571., 18310., 19049., 19788.,
      21324., 22088., 22852., 23616., 8859.,  9294.,  9729.,  10164., 11098.,
      11548., 11998., 12448., 19120., 19728., 20336., 20944., 22180., 22808.,
      23436., 24064., 25347., 26182., 27017., 27852., 29484., 30344., 31204.,
      32064., 22375., 23182., 23989., 24796., 26400., 27232., 28064., 28896.,
      21451., 22230., 23009., 23788., 25364., 26168., 26972., 27776., 15603.,
      16062., 16521., 16980., 17938., 18412., 18886., 19360., 14672., 15312.,
      15952., 16592., 17860., 18520., 19180., 19840., 21035., 21910., 22785.,
      23660., 25332., 26232., 27132., 28032., 20111., 20958., 21805., 22652.,
      24296., 25168., 26040., 26912., 18547., 19238., 19929., 20620., 22108.,
      22824., 23540., 24256., 13515., 13870., 14225., 14580., 15434., 15804.,
      16174., 16544., 9888.,  10256., 10624., 10992., 11756., 12136., 12516.,
      12896., 13521., 14026., 14531., 15036., 16008., 16528., 17048., 17568.,
      15149., 15714., 16279., 16844., 17876., 18456., 19036., 19616., 16137.,
      16634., 17131., 17628., 18592., 19104., 19616., 20128., 5657.,  5922.,
      6187.,  6452.,  7002.,  7276.,  7550.,  7824.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19301., 19914., 20527., 21140., 22550., 23188., 23826., 24464., 18377.,
      18962., 19547., 20132., 21514., 22124., 22734., 23344., 21165., 21850.,
      22535., 23220., 24702., 25412., 26122., 26832., 28557., 29466., 30375.,
      31284., 32990., 33924., 34858., 35792., 18801., 19554., 20307., 21060.,
      22610., 23388., 24166., 24944., 16853., 17578., 18303., 19028., 20550.,
      21300., 22050., 22800., 23605., 24426., 25247., 26068., 27686., 28532.,
      29378., 30224., 21657., 22450., 23243., 24036., 25626., 26444., 27262.,
      28080., 21757., 22522., 23287., 24052., 25614., 26404., 27194., 27984.,
      21165., 21850., 22535., 23220., 24702., 25412., 26122., 26832., 23953.,
      24738., 25523., 26308., 27890., 28700., 29510., 30320., 23605., 24426.,
      25247., 26068., 27686., 28532., 29378., 30224., 16853., 17578., 18303.,
      19028., 20550., 21300., 22050., 22800., 19641., 20466., 21291., 22116.,
      23738., 24588., 25438., 26288., 20317., 21178., 22039., 22900., 24558.,
      25444., 26330., 27216., 21757., 22522., 23287., 24052., 25614., 26404.,
      27194., 27984., 24545., 25410., 26275., 27140., 28802., 29692., 30582.,
      31472., 27333., 28298., 29263., 30228., 31990., 32980., 33970., 34960.,
      23605., 24426., 25247., 26068., 27686., 28532., 29378., 30224., 21657.,
      22450., 23243., 24036., 25626., 26444., 27262., 28080., 21757., 22522.,
      23287., 24052., 25614., 26404., 27194., 27984., 20317., 21178., 22039.,
      22900., 24558., 25444., 26330., 27216., 18817., 19586., 20355., 21124.,
      22690., 23484., 24278., 25072., 19301., 19914., 20527., 21140., 22550.,
      23188., 23826., 24464., 27333., 28298., 29263., 30228., 31990., 32980.,
      33970., 34960., 29545., 30546., 31547., 32548., 34346., 35372., 36398.,
      37424., 28557., 29466., 30375., 31284., 32990., 33924., 34858., 35792.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14256., 15168., 16112., 17088., 19292., 20480., 21708., 22976., 15996.,
      17152., 18348., 19584., 14812., 16000., 17228., 18496., 8420.,  9120.,
      9844.,  10592., 13844., 14992., 16180., 17408., 17357., 18860., 20413.,
      22016., 18005., 19516., 21077., 22688., 20893., 22348., 23853., 25408.,
      13643., 14452., 15291., 16160., 14036., 15248., 16500., 17792., 20893.,
      22348., 23853., 25408., 25637., 27100., 28613., 30176., 22445., 23916.,
      25437., 27008., 11963., 12820., 13707., 14624., 19476., 20624., 21812.,
      23040., 22445., 23916., 25437., 27008., 20213., 21628., 23093., 24608.,
      21117., 22540., 24013., 25536., 12267., 13108., 13979., 14880., 12060.,
      12784., 13532., 14304., 17015., 17980., 18975., 20000., 13455., 14412.,
      15399., 16416., 10919., 11868., 12847., 13856., 4641.,  5172.,  5721.,
      6288.,  11696., 12608., 13552., 14528., 14812., 16000., 17228., 18496.,
      17020., 18304., 19628., 20992., 20444., 21760., 23116., 24512., 13476.,
      14240., 15028., 15840., 14036., 15248., 16500., 17792., 20893., 22348.,
      23853., 25408., 25637., 27100., 28613., 30176., 22445., 23916., 25437.,
      27008., 11963., 12820., 13707., 14624., 19476., 20624., 21812., 23040.,
      22445., 23916., 25437., 27008., 20213., 21628., 23093., 24608., 21117.,
      22540., 24013., 25536., 12267., 13108., 13979., 14880., 15700., 16784.,
      17908., 19072., 21117., 22540., 24013., 25536., 18181., 19612., 21093.,
      22624., 17357., 18860., 20413., 22016., 9307.,  10196., 11115., 12064.,
      10972., 11760., 12572., 13408., 10919., 11868., 12847., 13856., 9855.,
      10732., 11639., 12576., 12439., 13308., 14207., 15136., 7281.,  7764.,
      8265.,  8784.,  13104., 14144., 15216., 16320., 20444., 21760., 23116.,
      24512., 24892., 26240., 27628., 29056., 21340., 22656., 24012., 25408.,
      11556., 12320., 13108., 13920., 19476., 20624., 21812., 23040., 22445.,
      23916., 25437., 27008., 20213., 21628., 23093., 24608., 21117., 22540.,
      24013., 25536., 12267., 13108., 13979., 14880., 15700., 16784., 17908.,
      19072., 21117., 22540., 24013., 25536., 18181., 19612., 21093., 22624.,
      17357., 18860., 20413., 22016., 9307.,  10196., 11115., 12064., 13844.,
      14992., 16180., 17408., 17357., 18860., 20413., 22016., 18005., 19516.,
      21077., 22688., 20893., 22348., 23853., 25408., 13643., 14452., 15291.,
      16160., 8988.,  9712.,  10460., 11232., 12439., 13308., 14207., 15136.,
      15855., 16780., 17735., 18720., 14855., 15772., 16719., 17696., 7425.,
      7924.,  8441.,  8976.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23105., 24532., 26009., 27536., 21961., 23396., 24881., 26416., 21073.,
      22516., 24009., 25552., 21073., 22516., 24009., 25552., 19865., 21252.,
      22689., 24176., 18977., 20372., 21817., 23312., 18977., 20372., 21817.,
      23312., 17641., 19108., 20625., 22192., 16241., 17716., 19241., 20816.,
      21073., 22516., 24009., 25552., 19865., 21252., 22689., 24176., 18977.,
      20372., 21817., 23312., 18977., 20372., 21817., 23312., 17641., 19108.,
      20625., 22192., 16241., 17716., 19241., 20816., 16241., 17716., 19241.,
      20816., 19193., 20676., 22209., 23792., 23105., 24532., 26009., 27536.,
      18977., 20372., 21817., 23312., 17641., 19108., 20625., 22192., 16241.,
      17716., 19241., 20816., 16241., 17716., 19241., 20816., 19193., 20676.,
      22209., 23792., 23105., 24532., 26009., 27536., 23105., 24532., 26009.,
      27536., 21961., 23396., 24881., 26416., 21073., 22516., 24009., 25552.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14320., 14752., 15680., 16128., 17104., 17568., 18592., 19072., 16452.,
      17016., 18232., 18816., 20092., 20696., 22032., 22656., 13476., 14008.,
      15192., 15744., 16988., 17560., 18864., 19456., 14660., 15224., 16440.,
      17024., 18300., 18904., 20240., 20864., 11884., 12232., 13016., 13376.,
      14196., 14568., 15424., 15808., 14332., 14952., 16160., 16800., 18068.,
      18728., 20056., 20736., 19485., 20314., 21890., 22744., 24395., 25274.,
      27000., 27904., 20261., 21098., 22682., 23544., 25203., 26090., 27824.,
      28736., 21485., 22266., 23794., 24600., 26203., 27034., 28712., 29568.,
      18143., 18582., 19490., 19944., 20897., 21366., 22364., 22848., 15676.,
      16360., 17632., 18336., 19668., 20392., 21784., 22528., 21485., 22266.,
      23794., 24600., 26203., 27034., 28712., 29568., 26357., 27146., 28682.,
      29496., 31107., 31946., 33632., 34496., 27645., 28442., 29986., 30808.,
      32427., 33274., 34968., 35840., 14735., 15222., 16178., 16680., 17681.,
      18198., 19244., 19776., 19452., 20072., 21280., 21920., 23188., 23848.,
      25176., 25856., 27645., 28442., 29986., 30808., 32427., 33274., 34968.,
      35840., 22725., 23466., 24954., 25720., 27283., 28074., 29712., 30528.,
      19917., 20666., 22162., 22936., 24507., 25306., 26952., 27776., 11263.,
      11734., 12674., 13160., 14145., 14646., 15676., 16192., 10340., 10680.,
      11392., 11744., 12492., 12856., 13640., 14016., 14123., 14638., 15590.,
      16120., 17117., 17662., 18704., 19264., 11619., 12126., 13070., 13592.,
      14581., 15118., 16152., 16704., 11163., 11662., 12598., 13112., 14093.,
      14622., 15648., 16192., 7257.,  7554.,  8118.,  8424.,  9015.,  9330.,
      9948.,  10272., 10224., 10656., 11584., 12032., 13008., 13472., 14496.,
      14976., 14660., 15224., 16440., 17024., 18300., 18904., 20240., 20864.,
      18468., 19128., 20440., 21120., 22492., 23192., 24624., 25344., 20676.,
      21368., 22712., 23424., 24828., 25560., 27024., 27776., 17836., 18248.,
      19096., 19520., 20404., 20840., 21760., 22208., 15676., 16360., 17632.,
      18336., 19668., 20392., 21784., 22528., 21485., 22266., 23794., 24600.,
      26203., 27034., 28712., 29568., 26357., 27146., 28682., 29496., 31107.,
      31946., 33632., 34496., 27645., 28442., 29986., 30808., 32427., 33274.,
      34968., 35840., 14735., 15222., 16178., 16680., 17681., 18198., 19244.,
      19776., 19452., 20072., 21280., 21920., 23188., 23848., 25176., 25856.,
      27645., 28442., 29986., 30808., 32427., 33274., 34968., 35840., 22725.,
      23466., 24954., 25720., 27283., 28074., 29712., 30528., 19917., 20666.,
      22162., 22936., 24507., 25306., 26952., 27776., 11263., 11734., 12674.,
      13160., 14145., 14646., 15676., 16192., 17084., 17640., 18784., 19360.,
      20564., 21160., 22424., 23040., 19917., 20666., 22162., 22936., 24507.,
      25306., 26952., 27776., 17621., 18378., 19882., 20664., 22243., 23050.,
      24704., 25536., 19485., 20314., 21890., 22744., 24395., 25274., 27000.,
      27904., 13487., 14006., 14994., 15528., 16561., 17110., 18188., 18752.,
      10148., 10552., 11328., 11744., 12556., 12984., 13832., 14272., 11163.,
      11662., 12598., 13112., 14093., 14622., 15648., 16192., 9619.,  10046.,
      10910., 11352., 12261., 12718., 13672., 14144., 11211., 11630., 12486.,
      12920., 13821., 14270., 15216., 15680., 9513.,  9762.,  10278., 10536.,
      11079., 11346., 11916., 12192., 13936., 14496., 15552., 16128., 17232.,
      17824., 18976., 19584., 20676., 21368., 22712., 23424., 24828., 25560.,
      27024., 27776., 24932., 25656., 27032., 27776., 29212., 29976., 31472.,
      32256., 25540., 26232., 27576., 28288., 29692., 30424., 31888., 32640.,
      13996., 14408., 15256., 15680., 16564., 17000., 17920., 18368., 19452.,
      20072., 21280., 21920., 23188., 23848., 25176., 25856., 27645., 28442.,
      29986., 30808., 32427., 33274., 34968., 35840., 22725., 23466., 24954.,
      25720., 27283., 28074., 29712., 30528., 19917., 20666., 22162., 22936.,
      24507., 25306., 26952., 27776., 11263., 11734., 12674., 13160., 14145.,
      14646., 15676., 16192., 17084., 17640., 18784., 19360., 20564., 21160.,
      22424., 23040., 19917., 20666., 22162., 22936., 24507., 25306., 26952.,
      27776., 17621., 18378., 19882., 20664., 22243., 23050., 24704., 25536.,
      19485., 20314., 21890., 22744., 24395., 25274., 27000., 27904., 13487.,
      14006., 14994., 15528., 16561., 17110., 18188., 18752., 14332., 14952.,
      16160., 16800., 18068., 18728., 20056., 20736., 19485., 20314., 21890.,
      22744., 24395., 25274., 27000., 27904., 20261., 21098., 22682., 23544.,
      25203., 26090., 27824., 28736., 21485., 22266., 23794., 24600., 26203.,
      27034., 28712., 29568., 18143., 18582., 19490., 19944., 20897., 21366.,
      22364., 22848., 8292.,  8632.,  9344.,  9696.,  10444., 10808., 11592.,
      11968., 11211., 11630., 12486., 12920., 13821., 14270., 15216., 15680.,
      14403., 14878., 15790., 16280., 17237., 17742., 18744., 19264., 17019.,
      17486., 18390., 18872., 19821., 20318., 21312., 21824., 6713.,  6978.,
      7510.,  7784.,  8343.,  8626.,  9212.,  9504.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23633., 24386., 25886., 26664., 28239., 29042., 30692., 31520., 24921.,
      25682., 27190., 27976., 29559., 30370., 32028., 32864., 26721., 27490.,
      29006., 29800., 31391., 32210., 33876., 34720., 26721., 27490., 29006.,
      29800., 31391., 32210., 33876., 34720., 19753., 20466., 21926., 22664.,
      24199., 24962., 26572., 27360., 17457., 18178., 19646., 20392., 21935.,
      22706., 24324., 25120., 17457., 18178., 19646., 20392., 21935., 22706.,
      24324., 25120., 18297., 19090., 20630., 21448., 23063., 23906., 25596.,
      26464., 19073., 19874., 21422., 22248., 23871., 24722., 26420., 27296.,
      26721., 27490., 29006., 29800., 31391., 32210., 33876., 34720., 19753.,
      20466., 21926., 22664., 24199., 24962., 26572., 27360., 17457., 18178.,
      19646., 20392., 21935., 22706., 24324., 25120., 17457., 18178., 19646.,
      20392., 21935., 22706., 24324., 25120., 18297., 19090., 20630., 21448.,
      23063., 23906., 25596., 26464., 19073., 19874., 21422., 22248., 23871.,
      24722., 26420., 27296., 19073., 19874., 21422., 22248., 23871., 24722.,
      26420., 27296., 20361., 21170., 22726., 23560., 25191., 26050., 27756.,
      28640., 23633., 24386., 25886., 26664., 28239., 29042., 30692., 31520.,
      17457., 18178., 19646., 20392., 21935., 22706., 24324., 25120., 18297.,
      19090., 20630., 21448., 23063., 23906., 25596., 26464., 19073., 19874.,
      21422., 22248., 23871., 24722., 26420., 27296., 19073., 19874., 21422.,
      22248., 23871., 24722., 26420., 27296., 20361., 21170., 22726., 23560.,
      25191., 26050., 27756., 28640., 23633., 24386., 25886., 26664., 28239.,
      29042., 30692., 31520., 23633., 24386., 25886., 26664., 28239., 29042.,
      30692., 31520., 24921., 25682., 27190., 27976., 29559., 30370., 32028.,
      32864., 26721., 27490., 29006., 29800., 31391., 32210., 33876., 34720.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, SAME3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312.,
      15776., 16240., 16704., 17760., 18240., 18720., 19200., 13460., 14024.,
      14588., 15152., 16296., 16880., 17464., 18048., 19292., 19896., 20500.,
      21104., 22448., 23072., 23696., 24320., 14196., 14728., 15260., 15792.,
      16904., 17456., 18008., 18560., 19772., 20344., 20916., 21488., 22800.,
      23392., 23984., 24576., 14996., 15560., 16124., 16688., 17832., 18416.,
      19000., 19584., 20828., 21432., 22036., 22640., 23984., 24608., 25232.,
      25856., 8572.,  8920.,  9268.,  9616.,  10312., 10672., 11032., 11392.,
      12148., 12520., 12892., 13264., 14080., 14464., 14848., 15232., 15436.,
      16056., 16676., 17296., 18496., 19136., 19776., 20416., 21716., 22376.,
      23036., 23696., 25096., 25776., 26456., 27136., 20477., 21306., 22135.,
      22964., 24494., 25348., 26202., 27056., 28711., 29590., 30469., 31348.,
      33128., 34032., 34936., 35840., 19973., 20810., 21647., 22484., 24022.,
      24884., 25746., 26608., 28271., 29158., 30045., 30932., 32720., 33632.,
      34544., 35456., 16333., 17114., 17895., 18676., 20158., 20964., 21770.,
      22576., 24183., 25014., 25845., 26676., 28408., 29264., 30120., 30976.,
      12807., 13246., 13685., 14124., 14974., 15428., 15882., 16336., 17261.,
      17730., 18199., 18668., 19668., 20152., 20636., 21120., 17036., 17720.,
      18404., 19088., 20352., 21056., 21760., 22464., 23828., 24552., 25276.,
      26000., 27464., 28208., 28952., 29696., 16333., 17114., 17895., 18676.,
      20158., 20964., 21770., 22576., 24183., 25014., 25845., 26676., 28408.,
      29264., 30120., 30976., 19925., 20714., 21503., 22292., 23782., 24596.,
      25410., 26224., 27839., 28678., 29517., 30356., 32096., 32960., 33824.,
      34688., 20445., 21242., 22039., 22836., 24334., 25156., 25978., 26800.,
      28423., 29270., 30117., 30964., 32712., 33584., 34456., 35328., 10039.,
      10526., 11013., 11500., 12398., 12900., 13402., 13904., 14877., 15394.,
      15911., 16428., 17476., 18008., 18540., 19072., 15436., 16056., 16676.,
      17296., 18496., 19136., 19776., 20416., 21716., 22376., 23036., 23696.,
      25096., 25776., 26456., 27136., 20445., 21242., 22039., 22836., 24334.,
      25156., 25978., 26800., 28423., 29270., 30117., 30964., 32712., 33584.,
      34456., 35328., 16805., 17546., 18287., 19028., 20470., 21236., 22002.,
      22768., 24335., 25126., 25917., 26708., 28400., 29216., 30032., 30848.,
      17325., 18074., 18823., 19572., 21022., 21796., 22570., 23344., 24919.,
      25718., 26517., 27316., 29016., 29840., 30664., 31488., 11303., 11774.,
      12245., 12716., 13598., 14084., 14570., 15056., 16013., 16514., 17015.,
      17516., 18548., 19064., 19580., 20096., 8180.,  8520.,  8860.,  9200.,
      9888.,  10240., 10592., 10944., 11692., 12056., 12420., 12784., 13592.,
      13968., 14344., 14720., 12179., 12694., 13209., 13724., 14650., 15180.,
      15710., 16240., 17241., 17786., 18331., 18876., 19952., 20512., 21072.,
      21632., 11787., 12294., 12801., 13308., 14226., 14748., 15270., 15792.,
      16785., 17322., 17859., 18396., 19464., 20016., 20568., 21120., 11395.,
      11894., 12393., 12892., 13802., 14316., 14830., 15344., 16329., 16858.,
      17387., 17916., 18976., 19520., 20064., 20608., 7049.,  7346.,  7643.,
      7940.,  8506.,  8812.,  9118.,  9424.,  10035., 10350., 10665., 10980.,
      11636., 11960., 12284., 12608., 10800., 11232., 11664., 12096., 12992.,
      13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240.,
      18720., 19200., 14996., 15560., 16124., 16688., 17832., 18416., 19000.,
      19584., 20828., 21432., 22036., 22640., 23984., 24608., 25232., 25856.,
      16884., 17544., 18204., 18864., 20104., 20784., 21464., 22144., 23484.,
      24184., 24884., 25584., 27024., 27744., 28464., 29184., 15636., 16328.,
      17020., 17712., 18984., 19696., 20408., 21120., 22492., 23224., 23956.,
      24688., 26160., 26912., 27664., 28416., 12220., 12632., 13044., 13456.,
      14216., 14640., 15064., 15488., 16308., 16744., 17180., 17616., 18496.,
      18944., 19392., 19840., 17036., 17720., 18404., 19088., 20352., 21056.,
      21760., 22464., 23828., 24552., 25276., 26000., 27464., 28208., 28952.,
      29696., 16333., 17114., 17895., 18676., 20158., 20964., 21770., 22576.,
      24183., 25014., 25845., 26676., 28408., 29264., 30120., 30976., 19925.,
      20714., 21503., 22292., 23782., 24596., 25410., 26224., 27839., 28678.,
      29517., 30356., 32096., 32960., 33824., 34688., 20445., 21242., 22039.,
      22836., 24334., 25156., 25978., 26800., 28423., 29270., 30117., 30964.,
      32712., 33584., 34456., 35328., 10039., 10526., 11013., 11500., 12398.,
      12900., 13402., 13904., 14877., 15394., 15911., 16428., 17476., 18008.,
      18540., 19072., 15436., 16056., 16676., 17296., 18496., 19136., 19776.,
      20416., 21716., 22376., 23036., 23696., 25096., 25776., 26456., 27136.,
      20445., 21242., 22039., 22836., 24334., 25156., 25978., 26800., 28423.,
      29270., 30117., 30964., 32712., 33584., 34456., 35328., 16805., 17546.,
      18287., 19028., 20470., 21236., 22002., 22768., 24335., 25126., 25917.,
      26708., 28400., 29216., 30032., 30848., 17325., 18074., 18823., 19572.,
      21022., 21796., 22570., 23344., 24919., 25718., 26517., 27316., 29016.,
      29840., 30664., 31488., 11303., 11774., 12245., 12716., 13598., 14084.,
      14570., 15056., 16013., 16514., 17015., 17516., 18548., 19064., 19580.,
      20096., 13836., 14392., 14948., 15504., 16640., 17216., 17792., 18368.,
      19604., 20200., 20796., 21392., 22728., 23344., 23960., 24576., 17325.,
      18074., 18823., 19572., 21022., 21796., 22570., 23344., 24919., 25718.,
      26517., 27316., 29016., 29840., 30664., 31488., 18869., 19626., 20383.,
      21140., 22598., 23380., 24162., 24944., 26527., 27334., 28141., 28948.,
      30656., 31488., 32320., 33152., 20477., 21306., 22135., 22964., 24494.,
      25348., 26202., 27056., 28711., 29590., 30469., 31348., 33128., 34032.,
      34936., 35840., 11607., 12126., 12645., 13164., 14094., 14628., 15162.,
      15696., 16701., 17250., 17799., 18348., 19428., 19992., 20556., 21120.,
      9780.,  10184., 10588., 10992., 11744., 12160., 12576., 12992., 13804.,
      14232., 14660., 15088., 15960., 16400., 16840., 17280., 11395., 11894.,
      12393., 12892., 13802., 14316., 14830., 15344., 16329., 16858., 17387.,
      17916., 18976., 19520., 20064., 20608., 8891.,  9318.,  9745.,  10172.,
      11010., 11452., 11894., 12336., 13249., 13706., 14163., 14620., 15608.,
      16080., 16552., 17024., 8499.,  8918.,  9337.,  9756.,  10586., 11020.,
      11454., 11888., 12793., 13242., 13691., 14140., 15120., 15584., 16048.,
      16512., 7513.,  7762.,  8011.,  8260.,  8778.,  9036.,  9294.,  9552.,
      10115., 10382., 10649., 10916., 11524., 11800., 12076., 12352., 14000.,
      14560., 15120., 15680., 16704., 17280., 17856., 18432., 19536., 20128.,
      20720., 21312., 22496., 23104., 23712., 24320., 15636., 16328., 17020.,
      17712., 18984., 19696., 20408., 21120., 22492., 23224., 23956., 24688.,
      26160., 26912., 27664., 28416., 18484., 19208., 19932., 20656., 21960.,
      22704., 23448., 24192., 25596., 26360., 27124., 27888., 29392., 30176.,
      30960., 31744., 18196., 18888., 19580., 20272., 21544., 22256., 22968.,
      23680., 25052., 25784., 26516., 27248., 28720., 29472., 30224., 30976.,
      8636.,  9048.,  9460.,  9872.,  10632., 11056., 11480., 11904., 12724.,
      13160., 13596., 14032., 14912., 15360., 15808., 16256., 15436., 16056.,
      16676., 17296., 18496., 19136., 19776., 20416., 21716., 22376., 23036.,
      23696., 25096., 25776., 26456., 27136., 20445., 21242., 22039., 22836.,
      24334., 25156., 25978., 26800., 28423., 29270., 30117., 30964., 32712.,
      33584., 34456., 35328., 16805., 17546., 18287., 19028., 20470., 21236.,
      22002., 22768., 24335., 25126., 25917., 26708., 28400., 29216., 30032.,
      30848., 17325., 18074., 18823., 19572., 21022., 21796., 22570., 23344.,
      24919., 25718., 26517., 27316., 29016., 29840., 30664., 31488., 11303.,
      11774., 12245., 12716., 13598., 14084., 14570., 15056., 16013., 16514.,
      17015., 17516., 18548., 19064., 19580., 20096., 13836., 14392., 14948.,
      15504., 16640., 17216., 17792., 18368., 19604., 20200., 20796., 21392.,
      22728., 23344., 23960., 24576., 17325., 18074., 18823., 19572., 21022.,
      21796., 22570., 23344., 24919., 25718., 26517., 27316., 29016., 29840.,
      30664., 31488., 18869., 19626., 20383., 21140., 22598., 23380., 24162.,
      24944., 26527., 27334., 28141., 28948., 30656., 31488., 32320., 33152.,
      20477., 21306., 22135., 22964., 24494., 25348., 26202., 27056., 28711.,
      29590., 30469., 31348., 33128., 34032., 34936., 35840., 11607., 12126.,
      12645., 13164., 14094., 14628., 15162., 15696., 16701., 17250., 17799.,
      18348., 19428., 19992., 20556., 21120., 15436., 16056., 16676., 17296.,
      18496., 19136., 19776., 20416., 21716., 22376., 23036., 23696., 25096.,
      25776., 26456., 27136., 20477., 21306., 22135., 22964., 24494., 25348.,
      26202., 27056., 28711., 29590., 30469., 31348., 33128., 34032., 34936.,
      35840., 19973., 20810., 21647., 22484., 24022., 24884., 25746., 26608.,
      28271., 29158., 30045., 30932., 32720., 33632., 34544., 35456., 16333.,
      17114., 17895., 18676., 20158., 20964., 21770., 22576., 24183., 25014.,
      25845., 26676., 28408., 29264., 30120., 30976., 12807., 13246., 13685.,
      14124., 14974., 15428., 15882., 16336., 17261., 17730., 18199., 18668.,
      19668., 20152., 20636., 21120., 8180.,  8520.,  8860.,  9200.,  9888.,
      10240., 10592., 10944., 11692., 12056., 12420., 12784., 13592., 13968.,
      14344., 14720., 8499.,  8918.,  9337.,  9756.,  10586., 11020., 11454.,
      11888., 12793., 13242., 13691., 14140., 15120., 15584., 16048., 16512.,
      11243., 11718., 12193., 12668., 13554., 14044., 14534., 15024., 15985.,
      16490., 16995., 17500., 18536., 19056., 19576., 20096., 12899., 13366.,
      13833., 14300., 15178., 15660., 16142., 16624., 17577., 18074., 18571.,
      19068., 20096., 20608., 21120., 21632., 5993.,  6258.,  6523.,  6788.,
      7322.,  7596.,  7870.,  8144.,  8723.,  9006.,  9289.,  9572.,  10196.,
      10488., 10780., 11072.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2, VALID3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17585., 18338., 19091., 19844., 21298., 22076., 22854., 23632., 25211.,
      26014., 26817., 27620., 29324., 30152., 30980., 31808., 18105., 18866.,
      19627., 20388., 21850., 22636., 23422., 24208., 25795., 26606., 27417.,
      28228., 29940., 30776., 31612., 32448., 19649., 20418., 21187., 21956.,
      23426., 24220., 25014., 25808., 27403., 28222., 29041., 29860., 31580.,
      32424., 33268., 34112., 19649., 20418., 21187., 21956., 23426., 24220.,
      25014., 25808., 27403., 28222., 29041., 29860., 31580., 32424., 33268.,
      34112., 16009., 16722., 17435., 18148., 19562., 20300., 21038., 21776.,
      23315., 24078., 24841., 25604., 27268., 28056., 28844., 29632., 17553.,
      18274., 18995., 19716., 21138., 21884., 22630., 23376., 24923., 25694.,
      26465., 27236., 28908., 29704., 30500., 31296., 17553., 18274., 18995.,
      19716., 21138., 21884., 22630., 23376., 24923., 25694., 26465., 27236.,
      28908., 29704., 30500., 31296., 21209., 22002., 22795., 23588., 25082.,
      25900., 26718., 27536., 29155., 29998., 30841., 31684., 33428., 34296.,
      35164., 36032., 20705., 21506., 22307., 23108., 24610., 25436., 26262.,
      27088., 28715., 29566., 30417., 31268., 33020., 33896., 34772., 35648.,
      19649., 20418., 21187., 21956., 23426., 24220., 25014., 25808., 27403.,
      28222., 29041., 29860., 31580., 32424., 33268., 34112., 16009., 16722.,
      17435., 18148., 19562., 20300., 21038., 21776., 23315., 24078., 24841.,
      25604., 27268., 28056., 28844., 29632., 17553., 18274., 18995., 19716.,
      21138., 21884., 22630., 23376., 24923., 25694., 26465., 27236., 28908.,
      29704., 30500., 31296., 17553., 18274., 18995., 19716., 21138., 21884.,
      22630., 23376., 24923., 25694., 26465., 27236., 28908., 29704., 30500.,
      31296., 21209., 22002., 22795., 23588., 25082., 25900., 26718., 27536.,
      29155., 29998., 30841., 31684., 33428., 34296., 35164., 36032., 20705.,
      21506., 22307., 23108., 24610., 25436., 26262., 27088., 28715., 29566.,
      30417., 31268., 33020., 33896., 34772., 35648., 20705., 21506., 22307.,
      23108., 24610., 25436., 26262., 27088., 28715., 29566., 30417., 31268.,
      33020., 33896., 34772., 35648., 17129., 17938., 18747., 19556., 21066.,
      21900., 22734., 23568., 25203., 26062., 26921., 27780., 29540., 30424.,
      31308., 32192., 17585., 18338., 19091., 19844., 21298., 22076., 22854.,
      23632., 25211., 26014., 26817., 27620., 29324., 30152., 30980., 31808.,
      17553., 18274., 18995., 19716., 21138., 21884., 22630., 23376., 24923.,
      25694., 26465., 27236., 28908., 29704., 30500., 31296., 21209., 22002.,
      22795., 23588., 25082., 25900., 26718., 27536., 29155., 29998., 30841.,
      31684., 33428., 34296., 35164., 36032., 20705., 21506., 22307., 23108.,
      24610., 25436., 26262., 27088., 28715., 29566., 30417., 31268., 33020.,
      33896., 34772., 35648., 20705., 21506., 22307., 23108., 24610., 25436.,
      26262., 27088., 28715., 29566., 30417., 31268., 33020., 33896., 34772.,
      35648., 17129., 17938., 18747., 19556., 21066., 21900., 22734., 23568.,
      25203., 26062., 26921., 27780., 29540., 30424., 31308., 32192., 17585.,
      18338., 19091., 19844., 21298., 22076., 22854., 23632., 25211., 26014.,
      26817., 27620., 29324., 30152., 30980., 31808., 17585., 18338., 19091.,
      19844., 21298., 22076., 22854., 23632., 25211., 26014., 26817., 27620.,
      29324., 30152., 30980., 31808., 18105., 18866., 19627., 20388., 21850.,
      22636., 23422., 24208., 25795., 26606., 27417., 28228., 29940., 30776.,
      31612., 32448., 19649., 20418., 21187., 21956., 23426., 24220., 25014.,
      25808., 27403., 28222., 29041., 29860., 31580., 32424., 33268., 34112.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}