/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_depthwise_conv2d_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/depthwise_conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::DefaultBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;
using GTestTypePairs = sycldnn::types::ToGTestTypes<SNNTypePairs>::type;


template <typename Pair>
using ForwardWindow5Stride1 =
    sycldnn::depthwise_conv2d::WindowStrideTest<Pair, 5, 1>;
TYPED_TEST_SUITE(ForwardWindow5Stride1, GTestTypePairs);
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1554., 2142., 2760., 3030., 2460., 1869., 2636., 3564., 4510., 4820., 3860., 2894., 3850., 5140., 6425., 6750., 5350., 3970., 5110., 6760., 8375., 8700., 6850., 5050., 3632., 4756., 5830., 6040., 4700., 3422., 2292., 2958., 3570., 3690., 2820., 2013.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {6425., 6750., 8375., 8700.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3036.,  3108.,  4182.,  4284.,  5385.,  5520.,  5910.,  6060.,  4794.,  4920.,  3639.,  3738.,  5140.,  5272.,  6944.,  7128.,  8780.,  9020.,  9380.,  9640.,  7504.,  7720.,  5620.,  5788.,  7490.,  7700.,  9990., 10280., 12475., 12850., 13100., 13500., 10370., 10700.,  7685.,  7940.,  9920., 10220., 13110., 13520., 16225., 16750., 16850., 17400., 13250., 13700.,  9755., 10100.,  6988.,  7264.,  9136.,  9512., 11180., 11660., 11580., 12080.,  8992.,  9400.,  6532.,  6844.,  4350.,  4584.,  5598.,  5916.,  6735.,  7140.,  6960.,  7380.,  5298.,  5640.,  3765.,  4026.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12475., 12850., 13100., 13500., 16225., 16750., 16850., 17400.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6000.,  6072.,  6144.,  6216.,  8262.,  8364.,  8466.,  8568., 10635., 10770., 10905., 11040., 11670., 11820., 11970., 12120.,  9462.,  9588.,  9714.,  9840.,  7179.,  7278.,  7377.,  7476., 10148., 10280., 10412., 10544., 13704., 13888., 14072., 14256., 17320., 17560., 17800., 18040., 18500., 18760., 19020., 19280., 14792., 15008., 15224., 15440., 11072., 11240., 11408., 11576., 14770., 14980., 15190., 15400., 19690., 19980., 20270., 20560., 24575., 24950., 25325., 25700., 25800., 26200., 26600., 27000., 20410., 20740., 21070., 21400., 15115., 15370., 15625., 15880., 19540., 19840., 20140., 20440., 25810., 26220., 26630., 27040., 31925., 32450., 32975., 33500., 33150., 33700., 34250., 34800., 26050., 26500., 26950., 27400., 19165., 19510., 19855., 20200., 13700., 13976., 14252., 14528., 17896., 18272., 18648., 19024., 21880., 22360., 22840., 23320., 22660., 23160., 23660., 24160., 17576., 17984., 18392., 18800., 12752., 13064., 13376., 13688.,  8466.,  8700.,  8934.,  9168., 10878., 11196., 11514., 11832., 13065., 13470., 13875., 14280., 13500., 13920., 14340., 14760., 10254., 10596., 10938., 11280.,  7269.,  7530.,  7791.,  8052.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24575., 24950., 25325., 25700., 25800., 26200., 26600., 27000., 31925., 32450., 32975., 33500., 33150., 33700., 34250., 34800.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5739.,  6216.,  7932.,  8568., 10245., 11040., 11295., 12120.,  9180.,  9840.,  6981.,  7476.,  9896., 10544., 13392., 14256., 16960., 18040., 18160., 19280., 14544., 15440., 10904., 11576., 14575., 15400., 19460., 20560., 24325., 25700., 25575., 27000., 20260., 21400., 15025., 15880., 19435., 20440., 25700., 27040., 31825., 33500., 33075., 34800., 26020., 27400., 19165., 20200., 13712., 14528., 17936., 19024., 21960., 23320., 22760., 24160., 17680., 18800., 12848., 13688.,  8547.,  9168., 11004., 11832., 13245., 14280., 13695., 14760., 10428., 11280.,  7413.,  8052.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24325., 25700., 25575., 27000., 31825., 33500., 33075., 34800.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3279.,  3414.,  3840.,  3984.,  4408.,  4600.,  5156.,  5360.,  6347.,  6602.,  7346.,  7616.,  7265.,  7550.,  8324.,  8624.,  5896.,  6136.,  6756.,  7008.,  4621.,  4810.,  5282.,  5480.,  6868.,  7120.,  7768.,  8032.,  9024.,  9376., 10224., 10592., 12660., 13120., 14224., 14704., 13868., 14368., 15512., 16032., 11072., 11488., 12400., 12832.,  8492.,  8816.,  9504.,  9840., 11465., 11870., 12716., 13136., 14808., 15368., 16476., 17056., 20213., 20938., 22362., 23112., 21511., 22286., 23760., 24560., 16904., 17544., 18716., 19376., 12723., 13218., 14098., 14608., 14285., 14806., 15768., 16304., 16936., 17608., 18828., 19520., 22433., 23266., 24798., 25656., 22387., 23206., 24724., 25568., 16920., 17544., 18700., 19344., 12951., 13434., 14302., 14800., 13956., 14432., 15256., 15744., 17344., 17952., 18992., 19616., 24356., 25104., 26416., 27184., 25340., 26064., 27352., 28096., 16448., 16992., 17968., 18528., 11836., 12256., 12992., 13424., 12987., 13382., 14092., 14496., 14344., 14840., 15732., 16240., 15519., 16122., 17190., 17808., 13509., 14078., 15112., 15696.,  8152.,  8568.,  9332.,  9760.,  5673.,  5994.,  6558.,  6888.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20213., 20938., 22362., 23112., 21511., 22286., 23760., 24560., 22433., 23266., 24798., 25656., 22387., 23206., 24724., 25568.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3991.,  4126.,  4261.,  4396.,  4848.,  4992.,  5136.,  5280.,  5616.,  5808.,  6000.,  6192.,  6780.,  6984.,  7188.,  7392.,  7895.,  8150.,  8405.,  8660.,  9430.,  9700.,  9970., 10240.,  8805.,  9090.,  9375.,  9660., 10460., 10760., 11060., 11360.,  8416.,  8656.,  8896.,  9136.,  9804., 10056., 10308., 10560.,  6109.,  6298.,  6487.,  6676.,  7166.,  7364.,  7562.,  7760.,  7468.,  7720.,  7972.,  8224.,  8872.,  9136.,  9400.,  9664., 10080., 10432., 10784., 11136., 12016., 12384., 12752., 13120., 13916., 14376., 14836., 15296., 16448., 16928., 17408., 17888., 15140., 15640., 16140., 16640., 17832., 18352., 18872., 19392., 14048., 14464., 14880., 15296., 16304., 16736., 17168., 17600., 10644., 10968., 11292., 11616., 12400., 12736., 13072., 13408., 11901., 12306., 12711., 13116., 14004., 14424., 14844., 15264., 16064., 16624., 17184., 17744., 18932., 19512., 20092., 20672., 21845., 22570., 23295., 24020., 25542., 26292., 27042., 27792., 23239., 24014., 24789., 25564., 27136., 27936., 28736., 29536., 20880., 21520., 22160., 22800., 24100., 24760., 25420., 26080., 15863., 16358., 16853., 17348., 18342., 18852., 19362., 19872., 16913., 17434., 17955., 18476., 19480., 20016., 20552., 21088., 18928., 19600., 20272., 20944., 22244., 22936., 23628., 24320., 23361., 24194., 25027., 25860., 27490., 28348., 29206., 30064., 22131., 22950., 23769., 24588., 26204., 27048., 27892., 28736., 16320., 16944., 17568., 18192., 19476., 20120., 20764., 21408., 13259., 13742., 14225., 14708., 15690., 16188., 16686., 17184., 12524., 13000., 13476., 13952., 14792., 15280., 15768., 16256., 15392., 16000., 16608., 17216., 18288., 18912., 19536., 20160., 21468., 22216., 22964., 23712., 25056., 25824., 26592., 27360., 22436., 23160., 23884., 24608., 25928., 26672., 27416., 28160., 14944., 15488., 16032., 16576., 17584., 18144., 18704., 19264., 12116., 12536., 12956., 13376., 14160., 14592., 15024., 15456., 10923., 11318., 11713., 12108., 12804., 13208., 13612., 14016., 13088., 13584., 14080., 14576., 15468., 15976., 16484., 16992., 14755., 15358., 15961., 16564., 17634., 18252., 18870., 19488., 13969., 14538., 15107., 15676., 16712., 17296., 17880., 18464., 11088., 11504., 11920., 12336., 13116., 13544., 13972., 14400., 10065., 10386., 10707., 11028., 11634., 11964., 12294., 12624.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21845., 22570., 23295., 24020., 25542., 26292., 27042., 27792., 23239., 24014., 24789., 25564., 27136., 27936., 28736., 29536., 23361., 24194., 25027., 25860., 27490., 28348., 29206., 30064., 22131., 22950., 23769., 24588., 26204., 27048., 27892., 28736.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6285.,  6828.,  7389.,  7968.,  8476.,  9200.,  9948., 10720., 10123., 11028., 11963., 12928., 10103., 11004., 11935., 12896.,  7980.,  8688.,  9420., 10176.,  6033.,  6548.,  7081.,  7632.,  7796.,  8480.,  9188.,  9920., 10672., 11584., 12528., 13504., 15884., 17024., 18204., 19424., 17724., 18880., 20076., 21312., 14896., 15808., 16752., 17728., 12228., 12896., 13588., 14304., 15223., 16060., 16927., 17824., 20404., 21520., 22676., 23872., 22433., 23828., 25273., 26768., 21637., 23068., 24549., 26080., 16036., 17168., 18340., 19552., 10755., 11588., 12451., 13344., 12799., 13740., 14711., 15712., 15572., 16784., 18036., 19328., 18041., 19524., 21057., 22640., 17181., 18636., 20141., 21696., 12484., 13584., 14724., 15904.,  9163.,  9972., 10811., 11680., 10180., 10944., 11732., 12544., 12912., 13888., 14896., 15936., 18172., 19360., 20588., 21856., 19372., 20512., 21692., 22912., 12144., 12992., 13872., 14784.,  9044.,  9664., 10308., 10976., 10317., 10892., 11485., 12096., 11548., 12272., 13020., 13792., 12939., 13812., 14715., 15648., 11799., 12668., 13567., 14496.,  7276.,  7920.,  8588.,  9280.,  5361.,  5844.,  6345.,  6864.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22433., 23828., 25273., 26768., 21637., 23068., 24549., 26080., 18041., 19524., 21057., 22640., 17181., 18636., 20141., 21696.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7701.,  7962.,  8522.,  8792.,  9379.,  9658., 10272., 10560., 10884., 11256., 12000., 12384., 13164., 13560., 14376., 14784., 15271., 15702., 16618., 17064., 18025., 18486., 19492., 19968., 13443., 13870., 14782., 15224., 16181., 16638., 17640., 18112.,  9668., 10008., 10752., 11104., 11884., 12248., 13064., 13440.,  6193.,  6434.,  6958.,  7208.,  7759.,  8018.,  8596.,  8864.,  7740.,  8040.,  8712.,  9024.,  9732., 10056., 10800., 11136., 10224., 10656., 11584., 12032., 13008., 13472., 14496., 14976., 14036., 14552., 15720., 16256., 17484., 18040., 19328., 19904., 15396., 15928., 17112., 17664., 18908., 19480., 20784., 21376., 14384., 14816., 15808., 16256., 17296., 17760., 18848., 19328., 12364., 12680., 13432., 13760., 14548., 14888., 15712., 16064., 13267., 13678., 14542., 14968., 15877., 16318., 17272., 17728., 18780., 19368., 20544., 21152., 22388., 23016., 24312., 24960., 21297., 22018., 23486., 24232., 25775., 26546., 28164., 28960., 21461., 22218., 23722., 24504., 26083., 26890., 28544., 29376., 19548., 20168., 21408., 22048., 23348., 24008., 25368., 26048., 15415., 15878., 16810., 17288., 18265., 18758., 19780., 20288., 15483., 15998., 16966., 17496., 18509., 19054., 20112., 20672., 18748., 19432., 20704., 21408., 22740., 23464., 24856., 25600., 23177., 23986., 25542., 26376., 28007., 28866., 30572., 31456., 23277., 24058., 25586., 26392., 27995., 28826., 30504., 31360., 15548., 16136., 17344., 17952., 19220., 19848., 21176., 21824., 10207., 10646., 11554., 12008., 12961., 13430., 14428., 14912., 10908., 11336., 12104., 12544., 13348., 13800., 14640., 15104., 12848., 13408., 14400., 14976., 16016., 16608., 17696., 18304., 15988., 16632., 17832., 18496., 19756., 20440., 21760., 22464., 16388., 16984., 18136., 18752., 19964., 20600., 21872., 22528.,  9904., 10336., 11200., 11648., 12560., 13024., 13984., 14464.,  8044.,  8360.,  9016.,  9344., 10036., 10376., 11104., 11456.,  7757.,  8026.,  8578.,  8856.,  9435.,  9722., 10328., 10624.,  9316.,  9656., 10368., 10720., 11468., 11832., 12616., 12992., 10927., 11350., 12210., 12648., 13553., 14006., 14956., 15424., 10955., 11374., 12230., 12664., 13565., 14014., 14960., 15424.,  9060.,  9368., 10016., 10336., 11020., 11352., 12072., 12416.,  8745.,  8994.,  9510.,  9768., 10311., 10578., 11148., 11424.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21297., 22018., 23486., 24232., 25775., 26546., 28164., 28960., 21461., 22218., 23722., 24504., 26083., 26890., 28544., 29376., 23177., 23986., 25542., 26376., 28007., 28866., 30572., 31456., 23277., 24058., 25586., 26392., 27995., 28826., 30504., 31360.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7653.,  7914.,  8175.,  8436.,  8966.,  9236.,  9506.,  9776., 10351., 10630., 10909., 11188., 11808., 12096., 12384., 12672.,  9492.,  9864., 10236., 10608., 11328., 11712., 12096., 12480., 13260., 13656., 14052., 14448., 15288., 15696., 16104., 16512., 11935., 12366., 12797., 13228., 14102., 14548., 14994., 15440., 16389., 16850., 17311., 17772., 18796., 19272., 19748., 20224., 10331., 10758., 11185., 11612., 12482., 12924., 13366., 13808., 14753., 15210., 15667., 16124., 17144., 17616., 18088., 18560.,  6516.,  6856.,  7196.,  7536.,  8224.,  8576.,  8928.,  9280., 10028., 10392., 10756., 11120., 11928., 12304., 12680., 13056.,  4145.,  4386.,  4627.,  4868.,  5346.,  5596.,  5846.,  6096.,  6619.,  6878.,  7137.,  7396.,  7964.,  8232.,  8500.,  8768.,  8140.,  8440.,  8740.,  9040.,  9688., 10000., 10312., 10624., 11332., 11656., 11980., 12304., 13072., 13408., 13744., 14080., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200., 12516., 13032., 13548., 14064., 15160., 15696., 16232., 16768., 17964., 18520., 19076., 19632., 20928., 21504., 22080., 22656., 12404., 12936., 13468., 14000., 15112., 15664., 16216., 16768., 17980., 18552., 19124., 19696., 21008., 21600., 22192., 22784., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200.,  9564.,  9880., 10196., 10512., 11176., 11504., 11832., 12160., 12884., 13224., 13564., 13904., 14688., 15040., 15392., 15744.,  9291.,  9702., 10113., 10524., 11378., 11804., 12230., 12656., 13585., 14026., 14467., 14908., 15912., 16368., 16824., 17280., 14636., 15224., 15812., 16400., 17568., 18176., 18784., 19392., 20660., 21288., 21916., 22544., 23912., 24560., 25208., 25856., 17041., 17762., 18483., 19204., 20626., 21372., 22118., 22864., 24411., 25182., 25953., 26724., 28396., 29192., 29988., 30784., 18357., 19114., 19871., 20628., 22086., 22868., 23650., 24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640., 17868., 18488., 19108., 19728., 20928., 21568., 22208., 22848., 24148., 24808., 25468., 26128., 27528., 28208., 28888., 29568., 11423., 11886., 12349., 12812., 13686., 14164., 14642., 15120., 16069., 16562., 17055., 17548., 18572., 19080., 19588., 20096., 15155., 15670., 16185., 16700., 17658., 18188., 18718., 19248., 20281., 20826., 21371., 21916., 23024., 23584., 24144., 24704., 17036., 17720., 18404., 19088., 20352., 21056., 21760., 22464., 23828., 24552., 25276., 26000., 27464., 28208., 28952., 29696., 18665., 19474., 20283., 21092., 22602., 23436., 24270., 25104., 26739., 27598., 28457., 29316., 31076., 31960., 32844., 33728., 19917., 20698., 21479., 22260., 23742., 24548., 25354., 26160., 27767., 28598., 29429., 30260., 31992., 32848., 33704., 34560., 15020., 15608., 16196., 16784., 17952., 18560., 19168., 19776., 21044., 21672., 22300., 22928., 24296., 24944., 25592., 26240.,  9223.,  9662., 10101., 10540., 11390., 11844., 12298., 12752., 13677., 14146., 14615., 15084., 16084., 16568., 17052., 17536., 10060., 10488., 10916., 11344., 12120., 12560., 13000., 13440., 14276., 14728., 15180., 15632., 16528., 16992., 17456., 17920., 11952., 12512., 13072., 13632., 14656., 15232., 15808., 16384., 17488., 18080., 18672., 19264., 20448., 21056., 21664., 22272., 16484., 17128., 17772., 18416., 19640., 20304., 20968., 21632., 22956., 23640., 24324., 25008., 26432., 27136., 27840., 28544., 15284., 15880., 16476., 17072., 18248., 18864., 19480., 20096., 21372., 22008., 22644., 23280., 24656., 25312., 25968., 26624.,  8752.,  9184.,  9616., 10048., 10944., 11392., 11840., 12288., 13264., 13728., 14192., 14656., 15712., 16192., 16672., 17152.,  7260.,  7576.,  7892.,  8208.,  8872.,  9200.,  9528.,  9856., 10580., 10920., 11260., 11600., 12384., 12736., 13088., 13440.,  4429.,  4698.,  4967.,  5236.,  5742.,  6020.,  6298.,  6576.,  7127.,  7414.,  7701.,  7988.,  8584.,  8880.,  9176.,  9472.,  8180.,  8520.,  8860.,  9200.,  9888., 10240., 10592., 10944., 11692., 12056., 12420., 12784., 13592., 13968., 14344., 14720., 11767., 12190., 12613., 13036., 13870., 14308., 14746., 15184., 16093., 16546., 16999., 17452., 18436., 18904., 19372., 19840., 10035., 10454., 10873., 11292., 12122., 12556., 12990., 13424., 14329., 14778., 15227., 15676., 16656., 17120., 17584., 18048.,  7764.,  8072.,  8380.,  8688.,  9344.,  9664.,  9984., 10304., 11020., 11352., 11684., 12016., 12792., 13136., 13480., 13824.,  7001.,  7250.,  7499.,  7748.,  8266.,  8524.,  8782.,  9040.,  9603.,  9870., 10137., 10404., 11012., 11288., 11564., 11840.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17041., 17762., 18483., 19204., 20626., 21372., 22118., 22864., 24411., 25182., 25953., 26724., 28396., 29192., 29988., 30784., 18357., 19114., 19871., 20628., 22086., 22868., 23650., 24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640., 18665., 19474., 20283., 21092., 22602., 23436., 24270., 25104., 26739., 27598., 28457., 29316., 31076., 31960., 32844., 33728., 19917., 20698., 21479., 22260., 23742., 24548., 25354., 26160., 27767., 28598., 29429., 30260., 31992., 32848., 33704., 34560.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1755.,  2404.,  3080.,  3350.,  3620.,  2920.,  2205.,  3008.,  4048.,  5100.,  5410.,  5720.,  4560.,  3404.,  4420.,  5880.,  7325.,  7650.,  7975.,  6300.,  4660.,  5890.,  7770.,  9600.,  9925., 10250.,  8050.,  5920.,  4190.,  5472.,  6690.,  6900.,  7110.,  5520.,  4010.,  2646.,  3406.,  4100.,  4220.,  4340.,  3310.,  2358.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7325.,  7650.,  7975.,  9600.,  9925., 10250.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3429.,  3510.,  4694.,  4808.,  6010.,  6160.,  6535.,  6700.,  7060.,  7240.,  5690.,  5840.,  4293.,  4410.,  5866.,  6016.,  7888.,  8096.,  9930., 10200., 10530., 10820., 11130., 11440.,  8864.,  9120.,  6610.,  6808.,  8600.,  8840., 11430., 11760., 14225., 14650., 14850., 15300., 15475., 15950., 12210., 12600.,  9020.,  9320., 11435., 11780., 15070., 15540., 18600., 19200., 19225., 19850., 19850., 20500., 15570., 16100., 11435., 11840.,  8062.,  8380., 10512., 10944., 12830., 13380., 13230., 13800., 13630., 14220., 10560., 11040.,  7654.,  8020.,  5022.,  5292.,  6446.,  6812.,  7735.,  8200.,  7960.,  8440.,  8185.,  8680.,  6218.,  6620.,  4410.,  4716.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14225., 14650., 14850., 15300., 15475., 15950., 18600., 19200., 19225., 19850., 19850., 20500.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6777.,  6858.,  6939.,  7020.,  9274.,  9388.,  9502.,  9616., 11870., 12020., 12170., 12320., 12905., 13070., 13235., 13400., 13940., 14120., 14300., 14480., 11230., 11380., 11530., 11680.,  8469.,  8586.,  8703.,  8820., 11582., 11732., 11882., 12032., 15568., 15776., 15984., 16192., 19590., 19860., 20130., 20400., 20770., 21060., 21350., 21640., 21950., 22260., 22570., 22880., 17472., 17728., 17984., 18240., 13022., 13220., 13418., 13616., 16960., 17200., 17440., 17680., 22530., 22860., 23190., 23520., 28025., 28450., 28875., 29300., 29250., 29700., 30150., 30600., 30475., 30950., 31425., 31900., 24030., 24420., 24810., 25200., 17740., 18040., 18340., 18640., 22525., 22870., 23215., 23560., 29670., 30140., 30610., 31080., 36600., 37200., 37800., 38400., 37825., 38450., 39075., 39700., 39050., 39700., 40350., 41000., 30610., 31140., 31670., 32200., 22465., 22870., 23275., 23680., 15806., 16124., 16442., 16760., 20592., 21024., 21456., 21888., 25110., 25660., 26210., 26760., 25890., 26460., 27030., 27600., 26670., 27260., 27850., 28440., 20640., 21120., 21600., 22080., 14942., 15308., 15674., 16040.,  9774., 10044., 10314., 10584., 12526., 12892., 13258., 13624., 15005., 15470., 15935., 16400., 15440., 15920., 16400., 16880., 15875., 16370., 16865., 17360., 12034., 12436., 12838., 13240.,  8514.,  8820.,  9126.,  9432.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {28025., 28450., 28875., 29300., 29250., 29700., 30150., 30600., 30475., 30950., 31425., 31900., 36600., 37200., 37800., 38400., 37825., 38450., 39075., 39700., 39050., 39700., 40350., 41000.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6525.,  7020.,  8956.,  9616., 11495., 12320., 12545., 13400., 13595., 14480., 10972., 11680.,  8289.,  8820., 11348., 12032., 15280., 16192., 19260., 20400., 20460., 21640., 21660., 22880., 17264., 18240., 12884., 13616., 16795., 17680., 22340., 23520., 27825., 29300., 29075., 30600., 30325., 31900., 23940., 25200., 17695., 18640., 22465., 23560., 29620., 31080., 36575., 38400., 37825., 39700., 39075., 41000., 30660., 32200., 22525., 23680., 15860., 16760., 20688., 21888., 25260., 26760., 26060., 27600., 26860., 28440., 20816., 22080., 15092., 16040.,  9891., 10584., 12700., 13624., 15245., 16400., 15695., 16880., 16145., 17360., 12268., 13240.,  8703.,  9432.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {27825., 29300., 29075., 30600., 30325., 31900., 36575., 38400., 37825., 39700., 39075., 41000.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3681.,  3834.,  4278.,  4440.,  4896.,  5112.,  5692.,  5920.,  7025.,  7310.,  8084.,  8384.,  7943.,  8258.,  9062.,  9392.,  8861.,  9206., 10040., 10400.,  7128.,  7416.,  8084.,  8384.,  5537.,  5762.,  6270.,  6504.,  7816.,  8104.,  8788.,  9088., 10192., 10592., 11488., 11904., 14256., 14776., 15940., 16480., 15464., 16024., 17228., 17808., 16672., 17272., 18516., 19136., 13232., 13728., 14720., 15232., 10088., 10472., 11220., 11616., 13157., 13622., 14528., 15008., 16904., 17544., 18732., 19392., 20905., 21666., 23126., 23912., 20347., 21094., 22540., 23312., 20045., 20778., 22210., 22968., 15248., 15816., 16916., 17504., 10997., 11390., 12168., 12576., 13343., 13826., 14750., 15248., 17104., 17768., 18980., 19664., 23271., 24062., 25552., 26368., 23993., 24770., 26246., 27048., 24971., 25734., 27196., 27984., 20088., 20680., 21804., 22416., 11679., 12090., 12886., 13312., 15352., 15784., 16564., 17008., 19792., 20384., 21408., 22016., 20640., 21336., 22596., 23312., 18296., 18968., 20204., 20896., 16208., 16856., 18068., 18736., 10864., 11360., 12288., 12800.,  6040.,  6376.,  7028.,  7376.,  9075.,  9414., 10068., 10416., 11624., 12088., 12948., 13424., 11527., 12058., 13054., 13600., 10285., 10782., 11744., 12256.,  9299.,  9762., 10690., 11168.,  6144.,  6488.,  7180.,  7536.,  3363.,  3582.,  4044.,  4272.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20905., 21666., 23126., 23912., 20347., 21094., 22540., 23312., 20045., 20778., 22210., 22968., 23271., 24062., 25552., 26368., 23993., 24770., 26246., 27048., 24971., 25734., 27196., 27984.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4521.,  4674.,  4827.,  4980.,  5450.,  5612.,  5774.,  5936.,  6312.,  6528.,  6744.,  6960.,  7572.,  7800.,  8028.,  8256.,  8837.,  9122.,  9407.,  9692., 10492., 10792., 11092., 11392.,  9747., 10062., 10377., 10692., 11522., 11852., 12182., 12512., 10657., 11002., 11347., 11692., 12552., 12912., 13272., 13632., 10064., 10352., 10640., 10928., 11644., 11944., 12244., 12544.,  7265.,  7490.,  7715.,  7940.,  8466.,  8700.,  8934.,  9168.,  8560.,  8848.,  9136.,  9424., 10108., 10408., 10708., 11008., 11472., 11872., 12272., 12672., 13600., 14016., 14432., 14848., 15768., 16288., 16808., 17328., 18540., 19080., 19620., 20160., 16992., 17552., 18112., 18672., 19924., 20504., 21084., 21664., 18216., 18816., 19416., 20016., 21308., 21928., 22548., 23168., 16752., 17248., 17744., 18240., 19328., 19840., 20352., 20864., 12624., 13008., 13392., 13776., 14620., 15016., 15412., 15808., 13689., 14154., 14619., 15084., 16032., 16512., 16992., 17472., 18384., 19024., 19664., 20304., 21572., 22232., 22892., 23552., 24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 22603., 23350., 24097., 24844., 26388., 27160., 27932., 28704., 20861., 21594., 22327., 23060., 24590., 25348., 26106., 26864., 15336., 15904., 16472., 17040., 18268., 18856., 19444., 20032., 10849., 11242., 11635., 12028., 12920., 13328., 13736., 14144., 12763., 13246., 13729., 14212., 15178., 15676., 16174., 16672., 16584., 17248., 17912., 18576., 19868., 20552., 21236., 21920., 21495., 22286., 23077., 23868., 25456., 26272., 27088., 27904., 21801., 22578., 23355., 24132., 25706., 26508., 27310., 28112., 22619., 23382., 24145., 24908., 26468., 27256., 28044., 28832., 19616., 20208., 20800., 21392., 22644., 23256., 23868., 24480., 12707., 13118., 13529., 13940., 14850., 15276., 15702., 16128., 13056., 13488., 13920., 14352., 15148., 15592., 16036., 16480., 17488., 18080., 18672., 19264., 20320., 20928., 21536., 22144., 18312., 19008., 19704., 20400., 21692., 22408., 23124., 23840., 16720., 17392., 18064., 18736., 20004., 20696., 21388., 22080., 15640., 16288., 16936., 17584., 18828., 19496., 20164., 20832., 12272., 12768., 13264., 13760., 14720., 15232., 15744., 16256., 10208., 10544., 10880., 11216., 11916., 12264., 12612., 12960.,  8403.,  8742.,  9081.,  9420., 10060., 10408., 10756., 11104., 12288., 12752., 13216., 13680., 14540., 15016., 15492., 15968., 14907., 15438., 15969., 16500., 17498., 18044., 18590., 19136., 15657., 16154., 16651., 17148., 18112., 18624., 19136., 19648., 12823., 13286., 13749., 14212., 15142., 15620., 16098., 16576.,  7528.,  7872.,  8216.,  8560.,  9268.,  9624.,  9980., 10336.,  3243.,  3462.,  3681.,  3900.,  4404.,  4632.,  4860.,  5088.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 22603., 23350., 24097., 24844., 26388., 27160., 27932., 28704., 20861., 21594., 22327., 23060., 24590., 25348., 26106., 26864., 21495., 22286., 23077., 23868., 25456., 26272., 27088., 27904., 21801., 22578., 23355., 24132., 25706., 26508., 27310., 28112., 22619., 23382., 24145., 24908., 26468., 27256., 28044., 28832.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4977.,  5492.,  6025.,  6576.,  5484.,  6128.,  6796.,  7488.,  8023.,  8860.,  9727., 10624.,  8515.,  9348., 10211., 11104.,  9263., 10092., 10951., 11840.,  8012.,  8688.,  9388., 10112.,  6777.,  7300.,  7841.,  8400.,  8860.,  9552., 10268., 11008., 11600., 12480., 13392., 14336., 18180., 19312., 20484., 21696., 20532., 21680., 22868., 24096., 19044., 20208., 21412., 22656., 15248., 16192., 17168., 18176., 11516., 12240., 12988., 13760., 14959., 15852., 16775., 17728., 17556., 18704., 19892., 21120., 19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824., 12020., 13072., 14164., 15296.,  8711.,  9468., 10255., 11072., 12003., 12932., 13891., 14880., 14372., 15568., 16804., 18080., 19013., 20476., 21989., 23552., 19433., 20868., 22353., 23888., 20365., 21772., 23229., 24736., 16836., 17936., 19076., 20256.,  9563., 10356., 11179., 12032., 12780., 13520., 14284., 15072., 16272., 17216., 18192., 19200., 16948., 18096., 19284., 20512., 15332., 16432., 17572., 18752., 14228., 15280., 16372., 17504., 10000., 10816., 11664., 12544.,  6028.,  6608.,  7212.,  7840.,  9021.,  9612., 10221., 10848., 12124., 12912., 13724., 14560., 12827., 13748., 14699., 15680., 12455., 13372., 14319., 15296., 12339., 13252., 14195., 15168.,  8828.,  9520., 10236., 10976.,  5541.,  6012.,  6501.,  7008.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824., 19013., 20476., 21989., 23552., 19433., 20868., 22353., 23888., 20365., 21772., 23229., 24736.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8697.,  8930.,  9462.,  9704., 10263., 10514., 11100., 11360.,  8564.,  8856.,  9520.,  9824., 10524., 10840., 11576., 11904., 10371., 10734., 11582., 11960., 12853., 13246., 14184., 14592.,  9567.,  9926., 10770., 11144., 12033., 12422., 13356., 13760.,  9275.,  9630., 10470., 10840., 11725., 12110., 13040., 13440.,  8228.,  8536.,  9248.,  9568., 10316., 10648., 11432., 11776.,  6393.,  6642.,  7174.,  7432.,  7991.,  8258.,  8844.,  9120.,  8324.,  8632.,  9312.,  9632., 10348., 10680., 11432., 11776., 10320., 10720., 11616., 12032., 12976., 13408., 14400., 14848., 16076., 16584., 17744., 18272., 19492., 20040., 21320., 21888., 18460., 18984., 20160., 20704., 21940., 22504., 23800., 24384., 17260., 17800., 18992., 19552., 20804., 21384., 22696., 23296., 16080., 16544., 17568., 18048., 19120., 19616., 20736., 21248., 12676., 13048., 13856., 14240., 15084., 15480., 16360., 16768., 13707., 14174., 15094., 15576., 16541., 17038., 18048., 18560., 17660., 18280., 19488., 20128., 21396., 22056., 23384., 24064., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 15180., 15720., 16880., 17440., 18660., 19240., 20520., 21120., 12171., 12558., 13414., 13816., 14717., 15134., 16080., 16512., 13391., 13894., 14850., 15368., 16369., 16902., 17948., 18496., 19180., 19848., 21104., 21792., 23108., 23816., 25192., 25920., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208., 20633., 21394., 22902., 23688., 25271., 26082., 27740., 28576., 20221., 20954., 22434., 23192., 24747., 25530., 27160., 27968., 18108., 18696., 19904., 20512., 21780., 22408., 23736., 24384., 10767., 11190., 12082., 12520., 13457., 13910., 14892., 15360., 11524., 11928., 12672., 13088., 13868., 14296., 15112., 15552., 13968., 14496., 15456., 16000., 17008., 17568., 18624., 19200., 13836., 14440., 15600., 16224., 17444., 18088., 19368., 20032., 12700., 13256., 14368., 14944., 16116., 16712., 17944., 18560., 12588., 13096., 14160., 14688., 15812., 16360., 17544., 18112., 10256., 10656., 11488., 11904., 12784., 13216., 14144., 14592.,  8964.,  9240.,  9856., 10144., 10796., 11096., 11784., 12096.,  7453.,  7738.,  8306.,  8600.,  9195.,  9498., 10120., 10432., 11428., 11832., 12608., 13024., 13836., 14264., 15112., 15552., 14495., 14966., 15874., 16360., 17313., 17814., 18812., 19328., 16059., 16526., 17430., 17912., 18861., 19358., 20352., 20864., 14039., 14502., 15402., 15880., 16825., 17318., 18308., 18816.,  8788.,  9144.,  9840., 10208., 10940., 11320., 12088., 12480.,  4509.,  4746.,  5250.,  5496.,  6027.,  6282.,  6840.,  7104.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208., 20633., 21394., 22902., 23688., 25271., 26082., 27740., 28576., 20221., 20954., 22434., 23192., 24747., 25530., 27160., 27968.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8649.,  8882.,  9115.,  9348.,  9850., 10092., 10334., 10576., 11123., 11374., 11625., 11876., 12468., 12728., 12988., 13248.,  7492.,  7784.,  8076.,  8368.,  9008.,  9312.,  9616.,  9920., 10620., 10936., 11252., 11568., 12328., 12656., 12984., 13312.,  8091.,  8454.,  8817.,  9180.,  9986., 10364., 10742., 11120., 12001., 12394., 12787., 13180., 14136., 14544., 14952., 15360.,  8535.,  8894.,  9253.,  9612., 10414., 10788., 11162., 11536., 12413., 12802., 13191., 13580., 14532., 14936., 15340., 15744., 10003., 10358., 10713., 11068., 11866., 12236., 12606., 12976., 13849., 14234., 14619., 15004., 15952., 16352., 16752., 17152.,  7764.,  8072.,  8380.,  8688.,  9344.,  9664.,  9984., 10304., 11020., 11352., 11684., 12016., 12792., 13136., 13480., 13824.,  5561.,  5810.,  6059.,  6308.,  6794.,  7052.,  7310.,  7568.,  8099.,  8366.,  8633.,  8900.,  9476.,  9752., 10028., 10304.,  6996.,  7304.,  7612.,  7920.,  8576.,  8896.,  9216.,  9536., 10252., 10584., 10916., 11248., 12024., 12368., 12712., 13056.,  7952.,  8352.,  8752.,  9152., 10016., 10432., 10848., 11264., 12208., 12640., 13072., 13504., 14528., 14976., 15424., 15872., 12252., 12760., 13268., 13776., 14864., 15392., 15920., 16448., 17636., 18184., 18732., 19280., 20568., 21136., 21704., 22272., 14188., 14712., 15236., 15760., 16864., 17408., 17952., 18496., 19700., 20264., 20828., 21392., 22696., 23280., 23864., 24448., 13052., 13592., 14132., 14672., 15792., 16352., 16912., 17472., 18692., 19272., 19852., 20432., 21752., 22352., 22952., 23552., 11600., 12064., 12528., 12992., 13920., 14400., 14880., 15360., 16368., 16864., 17360., 17856., 18944., 19456., 19968., 20480.,  9108.,  9480.,  9852., 10224., 10944., 11328., 11712., 12096., 12876., 13272., 13668., 14064., 14904., 15312., 15720., 16128., 10371., 10838., 11305., 11772., 12682., 13164., 13646., 14128., 15113., 15610., 16107., 16604., 17664., 18176., 18688., 19200., 15436., 16056., 16676., 17296., 18496., 19136., 19776., 20416., 21716., 22376., 23036., 23696., 25096., 25776., 26456., 27136., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 12284., 12824., 13364., 13904., 15024., 15584., 16144., 16704., 17924., 18504., 19084., 19664., 20984., 21584., 22184., 22784., 10131., 10518., 10905., 11292., 12090., 12492., 12894., 13296., 14169., 14586., 15003., 15420., 16368., 16800., 17232., 17664., 13543., 14046., 14549., 15052., 15998., 16516., 17034., 17552., 18573., 19106., 19639., 20172., 21268., 21816., 22364., 22912., 18684., 19352., 20020., 20688., 21936., 22624., 23312., 24000., 25348., 26056., 26764., 27472., 28920., 29648., 30376., 31104., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 16925., 17658., 18391., 19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424., 29232., 30040., 30848., 16556., 17144., 17732., 18320., 19488., 20096., 20704., 21312., 22580., 23208., 23836., 24464., 25832., 26480., 27128., 27776.,  9335.,  9758., 10181., 10604., 11438., 11876., 12314., 12752., 13661., 14114., 14567., 15020., 16004., 16472., 16940., 17408., 11060., 11464., 11868., 12272., 13024., 13440., 13856., 14272., 15084., 15512., 15940., 16368., 17240., 17680., 18120., 18560., 13200., 13728., 14256., 14784., 15776., 16320., 16864., 17408., 18480., 19040., 19600., 20160., 21312., 21888., 22464., 23040., 13244., 13848., 14452., 15056., 16240., 16864., 17488., 18112., 19396., 20040., 20684., 21328., 22712., 23376., 24040., 24704., 13068., 13624., 14180., 14736., 15872., 16448., 17024., 17600., 18836., 19432., 20028., 20624., 21960., 22576., 23192., 23808., 14940., 15448., 15956., 16464., 17552., 18080., 18608., 19136., 20324., 20872., 21420., 21968., 23256., 23824., 24392., 24960., 10512., 10912., 11312., 11712., 12576., 12992., 13408., 13824., 14768., 15200., 15632., 16064., 17088., 17536., 17984., 18432.,  7348.,  7624.,  7900.,  8176.,  8800.,  9088.,  9376.,  9664., 10348., 10648., 10948., 11248., 11992., 12304., 12616., 12928.,  6365.,  6650.,  6935.,  7220.,  7742.,  8036.,  8330.,  8624.,  9191.,  9494.,  9797., 10100., 10712., 11024., 11336., 11648.,  9780., 10184., 10588., 10992., 11744., 12160., 12576., 12992., 13804., 14232., 14660., 15088., 15960., 16400., 16840., 17280., 11175., 11646., 12117., 12588., 13470., 13956., 14442., 14928., 15885., 16386., 16887., 17388., 18420., 18936., 19452., 19968., 12515., 12982., 13449., 13916., 14794., 15276., 15758., 16240., 17193., 17690., 18187., 18684., 19712., 20224., 20736., 21248., 10783., 11246., 11709., 12172., 13046., 13524., 14002., 14480., 15429., 15922., 16415., 16908., 17932., 18440., 18948., 19456.,  8452.,  8808.,  9164.,  9520., 10224., 10592., 10960., 11328., 12092., 12472., 12852., 13232., 14056., 14448., 14840., 15232.,  5453.,  5690.,  5927.,  6164.,  6670.,  6916.,  7162.,  7408.,  7959.,  8214.,  8469.,  8724.,  9320.,  9584.,  9848., 10112.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 16925., 17658., 18391., 19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424., 29232., 30040., 30848.};
  const std::array<int, 4> in_shape = {{ 1, 6, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1956.,  2666.,  3400.,  3670.,  3940.,  4210.,  3380.,  2541.,  3380.,  4532.,  5690.,  6000.,  6310.,  6620.,  5260.,  3914.,  4990.,  6620.,  8225.,  8550.,  8875.,  9200.,  7250.,  5350.,  6670.,  8780., 10825., 11150., 11475., 11800.,  9250.,  6790.,  4748.,  6188.,  7550.,  7760.,  7970.,  8180.,  6340.,  4598.,  3000.,  3854.,  4630.,  4750.,  4870.,  4990.,  3800.,  2703.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8225.,  8550.,  8875.,  9200., 10825., 11150., 11475., 11800.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3822.,  3912.,  5206.,  5332.,  6635.,  6800.,  7160.,  7340.,  7685.,  7880.,  8210.,  8420.,  6586.,  6760.,  4947.,  5082.,  6592.,  6760.,  8832.,  9064., 11080., 11380., 11680., 12000., 12280., 12620., 12880., 13240., 10224., 10520.,  7600.,  7828.,  9710.,  9980., 12870., 13240., 15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 14050., 14500., 10355., 10700., 12950., 13340., 17030., 17560., 20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600., 17890., 18500., 13115., 13580.,  9136.,  9496., 11888., 12376., 14480., 15100., 14880., 15520., 15280., 15940., 15680., 16360., 12128., 12680.,  8776.,  9196.,  5694.,  6000.,  7294.,  7708.,  8735.,  9260.,  8960.,  9500.,  9185.,  9740.,  9410.,  9980.,  7138.,  7600.,  5055.,  5406.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7554.,  7644.,  7734.,  7824., 10286., 10412., 10538., 10664., 13105., 13270., 13435., 13600., 14140., 14320., 14500., 14680., 15175., 15370., 15565., 15760., 16210., 16420., 16630., 16840., 12998., 13172., 13346., 13520.,  9759.,  9894., 10029., 10164., 13016., 13184., 13352., 13520., 17432., 17664., 17896., 18128., 21860., 22160., 22460., 22760., 23040., 23360., 23680., 24000., 24220., 24560., 24900., 25240., 25400., 25760., 26120., 26480., 20152., 20448., 20744., 21040., 14972., 15200., 15428., 15656., 19150., 19420., 19690., 19960., 25370., 25740., 26110., 26480., 31475., 31950., 32425., 32900., 32700., 33200., 33700., 34200., 33925., 34450., 34975., 35500., 35150., 35700., 36250., 36800., 27650., 28100., 28550., 29000., 20365., 20710., 21055., 21400., 25510., 25900., 26290., 26680., 33530., 34060., 34590., 35120., 41275., 41950., 42625., 43300., 42500., 43200., 43900., 44600., 43725., 44450., 45175., 45900., 44950., 45700., 46450., 47200., 35170., 35780., 36390., 37000., 25765., 26230., 26695., 27160., 17912., 18272., 18632., 18992., 23288., 23776., 24264., 24752., 28340., 28960., 29580., 30200., 29120., 29760., 30400., 31040., 29900., 30560., 31220., 31880., 30680., 31360., 32040., 32720., 23704., 24256., 24808., 25360., 17132., 17552., 17972., 18392., 11082., 11388., 11694., 12000., 14174., 14588., 15002., 15416., 16945., 17470., 17995., 18520., 17380., 17920., 18460., 19000., 17815., 18370., 18925., 19480., 18250., 18820., 19390., 19960., 13814., 14276., 14738., 15200.,  9759., 10110., 10461., 10812.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {31475., 31950., 32425., 32900., 32700., 33200., 33700., 34200., 33925., 34450., 34975., 35500., 35150., 35700., 36250., 36800., 41275., 41950., 42625., 43300., 42500., 43200., 43900., 44600., 43725., 44450., 45175., 45900., 44950., 45700., 46450., 47200.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7311.,  7824.,  9980., 10664., 12745., 13600., 13795., 14680., 14845., 15760., 15895., 16840., 12764., 13520.,  9597., 10164., 12800., 13520., 17168., 18128., 21560., 22760., 22760., 24000., 23960., 25240., 25160., 26480., 19984., 21040., 14864., 15656., 19015., 19960., 25220., 26480., 31325., 32900., 32575., 34200., 33825., 35500., 35075., 36800., 27620., 29000., 20365., 21400., 25495., 26680., 33540., 35120., 41325., 43300., 42575., 44600., 43825., 45900., 45075., 47200., 35300., 37000., 25885., 27160., 18008., 18992., 23440., 24752., 28560., 30200., 29360., 31040., 30160., 31880., 30960., 32720., 23952., 25360., 17336., 18392., 11235., 12000., 14396., 15416., 17245., 18520., 17695., 19000., 18145., 19480., 18595., 19960., 14108., 15200.,  9993., 10812.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {31325., 32900., 32575., 34200., 33825., 35500., 35075., 36800., 41325., 43300., 42575., 44600., 43825., 45900., 45075., 47200.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4083.,  4254.,  4716.,  4896.,  5384.,  5624.,  6228.,  6480.,  7703.,  8018.,  8822.,  9152.,  8621.,  8966.,  9800., 10160.,  9539.,  9914., 10778., 11168., 10457., 10862., 11756., 12176.,  8360.,  8696.,  9412.,  9760.,  6453.,  6714.,  7258.,  7528.,  8764.,  9088.,  9808., 10144., 11360., 11808., 12752., 13216., 15852., 16432., 17656., 18256., 17060., 17680., 18944., 19584., 18268., 18928., 20232., 20912., 19476., 20176., 21520., 22240., 15392., 15968., 17040., 17632., 11684., 12128., 12936., 13392.,  9281.,  9614., 10388., 10736., 12088., 12552., 13564., 14048., 17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 17304., 17928., 19084., 19728., 13303., 13786., 14654., 15152., 14129., 14510., 15332., 15728., 18424., 18952., 20028., 20576., 22509., 23194., 24578., 25288., 23807., 24542., 25976., 26736., 25105., 25890., 27374., 28184., 26403., 27238., 28772., 29632., 20312., 21000., 22220., 22928., 14695., 15226., 16142., 16688.,  7468.,  7792.,  8464.,  8800.,  9568., 10016., 10896., 11360., 12508., 13088., 14232., 14832., 13556., 14176., 15360., 16000., 14604., 15264., 16488., 17168., 15652., 16352., 17616., 18336., 12064., 12640., 13648., 14240.,  8884.,  9328., 10088., 10544.,  5355.,  5574.,  6108.,  6336.,  6984.,  7288.,  7988.,  8304.,  8495.,  8890.,  9750., 10160.,  9365.,  9790., 10680., 11120., 10235., 10690., 11610., 12080., 11105., 11590., 12540., 13040.,  8360.,  8760.,  9508.,  9920.,  5853.,  6162.,  6714.,  7032.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 22509., 23194., 24578., 25288., 23807., 24542., 25976., 26736., 25105., 25890., 27374., 28184., 26403., 27238., 28772., 29632.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5051.,  5222.,  5393.,  5564.,  6052.,  6232.,  6412.,  6592.,  7008.,  7248.,  7488.,  7728.,  8364.,  8616.,  8868.,  9120.,  9779., 10094., 10409., 10724., 11554., 11884., 12214., 12544., 10689., 11034., 11379., 11724., 12584., 12944., 13304., 13664., 11599., 11974., 12349., 12724., 13614., 14004., 14394., 14784., 12509., 12914., 13319., 13724., 14644., 15064., 15484., 15904., 11712., 12048., 12384., 12720., 13484., 13832., 14180., 14528.,  8421.,  8682.,  8943.,  9204.,  9766., 10036., 10306., 10576.,  9652.,  9976., 10300., 10624., 11344., 11680., 12016., 12352., 12864., 13312., 13760., 14208., 15184., 15648., 16112., 16576., 17620., 18200., 18780., 19360., 20632., 21232., 21832., 22432., 18844., 19464., 20084., 20704., 22016., 22656., 23296., 23936., 20068., 20728., 21388., 22048., 23400., 24080., 24760., 25440., 21292., 21992., 22692., 23392., 24784., 25504., 26224., 26944., 19456., 20032., 20608., 21184., 22352., 22944., 23536., 24128., 14604., 15048., 15492., 15936., 16840., 17296., 17752., 18208.,  8629.,  8962.,  9295.,  9628., 10444., 10792., 11140., 11488., 11232., 11696., 12160., 12624., 13716., 14200., 14684., 15168., 16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 17088., 17712., 18336., 18960., 20244., 20888., 21532., 22176., 13707., 14190., 14673., 15156., 16138., 16636., 17134., 17632., 12133., 12514., 12895., 13276., 14140., 14536., 14932., 15328., 16672., 17200., 17728., 18256., 19412., 19960., 20508., 21056., 20589., 21274., 21959., 22644., 24126., 24836., 25546., 26256., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 23377., 24162., 24947., 25732., 27314., 28124., 28934., 29744., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488., 20992., 21680., 22368., 23056., 24404., 25112., 25820., 26528., 16443., 16974., 17505., 18036., 19066., 19612., 20158., 20704.,  7380.,  7704.,  8028.,  8352.,  9040.,  9376.,  9712., 10048., 10752., 11200., 11648., 12096., 13008., 13472., 13936., 14400., 14580., 15160., 15740., 16320., 17496., 18096., 18696., 19296., 15612., 16232., 16852., 17472., 18688., 19328., 19968., 20608., 16644., 17304., 17964., 18624., 19880., 20560., 21240., 21920., 17676., 18376., 19076., 19776., 21072., 21792., 22512., 23232., 14848., 15424., 16000., 16576., 17616., 18208., 18800., 19392., 13100., 13544., 13988., 14432., 15240., 15696., 16152., 16608.,  6331.,  6550.,  6769.,  6988.,  7508.,  7736.,  7964.,  8192.,  7776.,  8080.,  8384.,  8688.,  9388.,  9704., 10020., 10336.,  8851.,  9246.,  9641., 10036., 10898., 11308., 11718., 12128.,  9665., 10090., 10515., 10940., 11832., 12272., 12712., 13152., 10479., 10934., 11389., 11844., 12766., 13236., 13706., 14176., 11293., 11778., 12263., 12748., 13700., 14200., 14700., 15200.,  8192.,  8592.,  8992.,  9392., 10156., 10568., 10980., 11392.,  5829.,  6138.,  6447.,  6756.,  7350.,  7668.,  7986.,  8304.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 20589., 21274., 21959., 22644., 24126., 24836., 25546., 26256., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 23377., 24162., 24947., 25732., 27314., 28124., 28934., 29744., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2325.,  2748.,  3189.,  3648.,  3516.,  4080.,  4668.,  5280.,  6947.,  7716.,  8515.,  9344.,  8783.,  9612., 10471., 11360., 10619., 11508., 12427., 13376., 12455., 13404., 14383., 15392., 10476., 11248., 12044., 12864.,  8609.,  9204.,  9817., 10448.,  9860., 10496., 11156., 11840., 13552., 14400., 15280., 16192., 17404., 18528., 19692., 20896., 19820., 21024., 22268., 23552., 22236., 23520., 24844., 26208., 24652., 26016., 27420., 28864., 19568., 20672., 21808., 22976., 14708., 15552., 16420., 17312.,  6247.,  6940.,  7663.,  8416.,  8820.,  9744., 10708., 11712., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 17220., 18448., 19716., 21024., 13323., 14260., 15227., 16224., 11335., 12124., 12943., 13792., 15348., 16400., 17492., 18624., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 21188., 22544., 23940., 25376., 15595., 16628., 17691., 18784.,  5780.,  6368.,  6980.,  7616.,  7984.,  8768.,  9584., 10432., 12332., 13376., 14460., 15584., 14428., 15552., 16716., 17920., 16524., 17728., 18972., 20256., 18620., 19904., 21228., 22592., 15024., 16064., 17136., 18240., 11716., 12512., 13332., 14176.,  7917.,  8460.,  9021.,  9600., 10780., 11504., 12252., 13024., 13675., 14580., 15515., 16480., 15415., 16380., 17375., 18400., 17155., 18180., 19235., 20320., 18895., 19980., 21095., 22240., 14604., 15472., 16364., 17280., 10521., 11172., 11841., 12528.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2973.,  3114.,  3554.,  3704.,  4171.,  4330.,  4824.,  4992.,  4196.,  4408.,  4992.,  5216.,  5836.,  6072.,  6728.,  6976.,  7519.,  7814.,  8594.,  8904.,  9729., 10054., 10924., 11264.,  9339.,  9694., 10534., 10904., 11789., 12174., 13104., 13504., 11159., 11574., 12474., 12904., 13849., 14294., 15284., 15744., 12979., 13454., 14414., 14904., 15909., 16414., 17464., 17984., 11524., 11928., 12736., 13152., 13996., 14424., 15304., 15744.,  8705.,  9026.,  9630.,  9960., 10591., 10930., 11588., 11936.,  8844.,  9096.,  9720.,  9984., 10644., 10920., 11616., 11904., 12464., 12832., 13696., 14080., 14992., 15392., 16352., 16768., 16068., 16568., 17720., 18240., 19452., 19992., 21264., 21824., 18516., 19096., 20328., 20928., 22220., 22840., 24192., 24832., 20964., 21624., 22936., 23616., 24988., 25688., 27120., 27840., 23412., 24152., 25544., 26304., 27756., 28536., 30048., 30848., 21488., 22112., 23296., 23936., 25168., 25824., 27104., 27776., 16636., 17128., 18056., 18560., 19524., 20040., 21040., 21568.,  5699.,  5966.,  6686.,  6968.,  7733.,  8030.,  8840.,  9152.,  9116.,  9512., 10496., 10912., 11956., 12392., 13496., 13952., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 20796., 21512., 22848., 23584., 24980., 25736., 27192., 27968., 17887., 18454., 19490., 20072., 21153., 21750., 22876., 23488., 11683., 12046., 12862., 13240., 14101., 14494., 15400., 15808., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 24508., 25352., 26816., 27680., 29204., 30088., 31672., 32576., 18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512.,  5356.,  5608.,  6200.,  6464.,  7092.,  7368.,  8032.,  8320.,  8304.,  8672.,  9472.,  9856., 10704., 11104., 12000., 12416., 13156., 13656., 14712., 15232., 16348., 16888., 18064., 18624., 15220., 15800., 16936., 17536., 18732., 19352., 20608., 21248., 17284., 17944., 19160., 19840., 21116., 21816., 23152., 23872., 19348., 20088., 21384., 22144., 23500., 24280., 25696., 26496., 16496., 17120., 18176., 18816., 19920., 20576., 21728., 22400., 14748., 15240., 16072., 16576., 17444., 17960., 18864., 19392.,  7597.,  7834.,  8354.,  8600.,  9147.,  9402.,  9976., 10240.,  9828., 10168., 10880., 11232., 11980., 12344., 13128., 13504., 11855., 12310., 13202., 13672., 14609., 15094., 16076., 16576., 13483., 13998., 14950., 15480., 16477., 17022., 18064., 18624., 15111., 15686., 16698., 17288., 18345., 18950., 20052., 20672., 16739., 17374., 18446., 19096., 20213., 20878., 22040., 22720., 12740., 13272., 14144., 14688., 15596., 16152., 17096., 17664.,  9681., 10098., 10782., 11208., 11919., 12354., 13092., 13536.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4461.,  4602.,  4743.,  4884.,  5294.,  5444.,  5594.,  5744.,  6199.,  6358.,  6517.,  6676.,  7176.,  7344.,  7512.,  7680.,  5492.,  5704.,  5916.,  6128.,  6688.,  6912.,  7136.,  7360.,  7980.,  8216.,  8452.,  8688.,  9368.,  9616.,  9864., 10112.,  8343.,  8638.,  8933.,  9228.,  9966., 10276., 10586., 10896., 11709., 12034., 12359., 12684., 13572., 13912., 14252., 14592.,  9875., 10230., 10585., 10940., 11738., 12108., 12478., 12848., 13721., 14106., 14491., 14876., 15824., 16224., 16624., 17024., 11407., 11822., 12237., 12652., 13510., 13940., 14370., 14800., 15733., 16178., 16623., 17068., 18076., 18536., 18996., 19456., 12939., 13414., 13889., 14364., 15282., 15772., 16262., 16752., 17745., 18250., 18755., 19260., 20328., 20848., 21368., 21888., 10164., 10568., 10972., 11376., 12128., 12544., 12960., 13376., 14188., 14616., 15044., 15472., 16344., 16784., 17224., 17664.,  7041.,  7362.,  7683.,  8004.,  8562.,  8892.,  9222.,  9552., 10155., 10494., 10833., 11172., 11820., 12168., 12516., 12864.,  5788.,  6040.,  6292.,  6544.,  7144.,  7408.,  7672.,  7936.,  8596.,  8872.,  9148.,  9424., 10144., 10432., 10720., 11008.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 11988., 12488., 12988., 13488., 14568., 15088., 15608., 16128., 17308., 17848., 18388., 18928., 20208., 20768., 21328., 21888., 13988., 14568., 15148., 15728., 16888., 17488., 18088., 18688., 19948., 20568., 21188., 21808., 23168., 23808., 24448., 25088., 15988., 16648., 17308., 17968., 19208., 19888., 20568., 21248., 22588., 23288., 23988., 24688., 26128., 26848., 27568., 28288., 17988., 18728., 19468., 20208., 21528., 22288., 23048., 23808., 25228., 26008., 26788., 27568., 29088., 29888., 30688., 31488., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 11788., 12280., 12772., 13264., 14104., 14608., 15112., 15616., 16516., 17032., 17548., 18064., 19024., 19552., 20080., 20608.,  7099.,  7366.,  7633.,  7900.,  8610.,  8892.,  9174.,  9456., 10241., 10538., 10835., 11132., 11992., 12304., 12616., 12928.,  9836., 10232., 10628., 11024., 12000., 12416., 12832., 13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 18220., 18936., 19652., 20368., 21664., 22400., 23136., 23872., 25268., 26024., 26780., 27536., 29032., 29808., 30584., 31360., 14215., 14782., 15349., 15916., 16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224., 23836., 24448.,  8731.,  9094.,  9457.,  9820., 10626., 11004., 11382., 11760., 12641., 13034., 13427., 13820., 14776., 15184., 15592., 16000., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 21420., 22264., 23108., 23952., 25376., 26240., 27104., 27968., 29492., 30376., 31260., 32144., 33768., 34672., 35576., 36480., 14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080., 25788., 26496.,  6812.,  7064.,  7316.,  7568.,  8168.,  8432.,  8696.,  8960.,  9620.,  9896., 10172., 10448., 11168., 11456., 11744., 12032.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 13012., 13512., 14012., 14512., 15592., 16112., 16632., 17152., 18332., 18872., 19412., 19952., 21232., 21792., 22352., 22912., 15012., 15592., 16172., 16752., 17912., 18512., 19112., 19712., 20972., 21592., 22212., 22832., 24192., 24832., 25472., 26112., 17012., 17672., 18332., 18992., 20232., 20912., 21592., 22272., 23612., 24312., 25012., 25712., 27152., 27872., 28592., 29312., 19012., 19752., 20492., 21232., 22552., 23312., 24072., 24832., 26252., 27032., 27812., 28592., 30112., 30912., 31712., 32512., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 12812., 13304., 13796., 14288., 15128., 15632., 16136., 16640., 17540., 18056., 18572., 19088., 20048., 20576., 21104., 21632.,  5165.,  5402.,  5639.,  5876.,  6350.,  6596.,  6842.,  7088.,  7607.,  7862.,  8117.,  8372.,  8936.,  9200.,  9464.,  9728.,  8180.,  8520.,  8860.,  9200.,  9888., 10240., 10592., 10944., 11692., 12056., 12420., 12784., 13592., 13968., 14344., 14720., 10519., 10974., 11429., 11884., 12750., 13220., 13690., 14160., 15101., 15586., 16071., 16556., 17572., 18072., 18572., 19072., 11923., 12438., 12953., 13468., 14394., 14924., 15454., 15984., 16985., 17530., 18075., 18620., 19696., 20256., 20816., 21376., 13327., 13902., 14477., 15052., 16038., 16628., 17218., 17808., 18869., 19474., 20079., 20684., 21820., 22440., 23060., 23680., 14731., 15366., 16001., 16636., 17682., 18332., 18982., 19632., 20753., 21418., 22083., 22748., 23944., 24624., 25304., 25984., 13364., 13896., 14428., 14960., 15840., 16384., 16928., 17472., 18412., 18968., 19524., 20080., 21080., 21648., 22216., 22784., 10241., 10658., 11075., 11492., 12178., 12604., 13030., 13456., 14187., 14622., 15057., 15492., 16268., 16712., 17156., 17600.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472.};
  const std::array<int, 4> in_shape = {{ 1, 6, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1554.,  2142.,  2760.,  3030.,  2460.,  1869.,  2636.,  3564.,  4510.,  4820.,  3860.,  2894.,  3850.,  5140.,  6425.,  6750.,  5350.,  3970.,  5110.,  6760.,  8375.,  8700.,  6850.,  5050.,  6370.,  8380., 10325., 10650.,  8350.,  6130.,  4460.,  5812.,  7090.,  7300.,  5660.,  4106.,  2778.,  3570.,  4290.,  4410.,  3360.,  2391.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6425.,  6750.,  8375.,  8700., 10325., 10650.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3036.,  3108.,  4182.,  4284.,  5385.,  5520.,  5910.,  6060.,  4794.,  4920.,  3639.,  3738.,  5140.,  5272.,  6944.,  7128.,  8780.,  9020.,  9380.,  9640.,  7504.,  7720.,  5620.,  5788.,  7490.,  7700.,  9990., 10280., 12475., 12850., 13100., 13500., 10370., 10700.,  7685.,  7940.,  9920., 10220., 13110., 13520., 16225., 16750., 16850., 17400., 13250., 13700.,  9755., 10100., 12350., 12740., 16230., 16760., 19975., 20650., 20600., 21300., 16130., 16700., 11825., 12260.,  8572.,  8920., 11152., 11624., 13580., 14180., 13980., 14600., 10816., 11320.,  7828.,  8212.,  5268.,  5556.,  6750.,  7140.,  8085.,  8580.,  8310.,  8820.,  6306.,  6720.,  4467.,  4782.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12475., 12850., 13100., 13500., 16225., 16750., 16850., 17400., 19975., 20650., 20600., 21300.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6000.,  6072.,  6144.,  6216.,  8262.,  8364.,  8466.,  8568., 10635., 10770., 10905., 11040., 11670., 11820., 11970., 12120.,  9462.,  9588.,  9714.,  9840.,  7179.,  7278.,  7377.,  7476., 10148., 10280., 10412., 10544., 13704., 13888., 14072., 14256., 17320., 17560., 17800., 18040., 18500., 18760., 19020., 19280., 14792., 15008., 15224., 15440., 11072., 11240., 11408., 11576., 14770., 14980., 15190., 15400., 19690., 19980., 20270., 20560., 24575., 24950., 25325., 25700., 25800., 26200., 26600., 27000., 20410., 20740., 21070., 21400., 15115., 15370., 15625., 15880., 19540., 19840., 20140., 20440., 25810., 26220., 26630., 27040., 31925., 32450., 32975., 33500., 33150., 33700., 34250., 34800., 26050., 26500., 26950., 27400., 19165., 19510., 19855., 20200., 24310., 24700., 25090., 25480., 31930., 32460., 32990., 33520., 39275., 39950., 40625., 41300., 40500., 41200., 41900., 42600., 31690., 32260., 32830., 33400., 23215., 23650., 24085., 24520., 16796., 17144., 17492., 17840., 21832., 22304., 22776., 23248., 26560., 27160., 27760., 28360., 27340., 27960., 28580., 29200., 21128., 21632., 22136., 22640., 15272., 15656., 16040., 16424., 10248., 10536., 10824., 11112., 13110., 13500., 13890., 14280., 15675., 16170., 16665., 17160., 16110., 16620., 17130., 17640., 12198., 12612., 13026., 13440.,  8619.,  8934.,  9249.,  9564.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24575., 24950., 25325., 25700., 25800., 26200., 26600., 27000., 31925., 32450., 32975., 33500., 33150., 33700., 34250., 34800., 39275., 39950., 40625., 41300., 40500., 41200., 41900., 42600.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5739.,  6216.,  7932.,  8568., 10245., 11040., 11295., 12120.,  9180.,  9840.,  6981.,  7476.,  9896., 10544., 13392., 14256., 16960., 18040., 18160., 19280., 14544., 15440., 10904., 11576., 14575., 15400., 19460., 20560., 24325., 25700., 25575., 27000., 20260., 21400., 15025., 15880., 19435., 20440., 25700., 27040., 31825., 33500., 33075., 34800., 26020., 27400., 19165., 20200., 24295., 25480., 31940., 33520., 39325., 41300., 40575., 42600., 31780., 33400., 23305., 24520., 16880., 17840., 21968., 23248., 26760., 28360., 27560., 29200., 21328., 22640., 15440., 16424., 10383., 11112., 13308., 14280., 15945., 17160., 16395., 17640., 12444., 13440.,  8817.,  9564.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24325., 25700., 25575., 27000., 31825., 33500., 33075., 34800., 39325., 41300., 40575., 42600.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3279.,  3414.,  3840.,  3984.,  4408.,  4600.,  5156.,  5360.,  6347.,  6602.,  7346.,  7616.,  7265.,  7550.,  8324.,  8624.,  5896.,  6136.,  6756.,  7008.,  4621.,  4810.,  5282.,  5480.,  6868.,  7120.,  7768.,  8032.,  9024.,  9376., 10224., 10592., 12660., 13120., 14224., 14704., 13868., 14368., 15512., 16032., 11072., 11488., 12400., 12832.,  8492.,  8816.,  9504.,  9840., 11465., 11870., 12716., 13136., 14808., 15368., 16476., 17056., 20213., 20938., 22362., 23112., 21511., 22286., 23760., 24560., 16904., 17544., 18716., 19376., 12723., 13218., 14098., 14608., 14285., 14806., 15768., 16304., 16936., 17608., 18828., 19520., 22433., 23266., 24798., 25656., 22387., 23206., 24724., 25568., 16920., 17544., 18700., 19344., 12951., 13434., 14302., 14800., 14929., 15438., 16388., 16912., 18680., 19336., 20540., 21216., 26061., 26874., 28386., 29224., 27295., 28094., 29592., 30416., 17960., 18568., 19708., 20336., 12923., 13394., 14250., 14736., 13300., 13728., 14504., 14944., 14720., 15264., 16240., 16800., 16500., 17168., 18400., 19088., 14668., 15312., 16520., 17184.,  9216.,  9696., 10608., 11104.,  6700.,  7072.,  7760.,  8144.,  7655.,  7966.,  8592.,  8912.,  8312.,  8696.,  9476.,  9872.,  8899.,  9362., 10290., 10768.,  8169.,  8598.,  9492.,  9936.,  5128.,  5432.,  6084.,  6400.,  3573.,  3810.,  4290.,  4536.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20213., 20938., 22362., 23112., 21511., 22286., 23760., 24560., 22433., 23266., 24798., 25656., 22387., 23206., 24724., 25568., 26061., 26874., 28386., 29224., 27295., 28094., 29592., 30416.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3991.,  4126.,  4261.,  4396.,  4848.,  4992.,  5136.,  5280.,  5616.,  5808.,  6000.,  6192.,  6780.,  6984.,  7188.,  7392.,  7895.,  8150.,  8405.,  8660.,  9430.,  9700.,  9970., 10240.,  8805.,  9090.,  9375.,  9660., 10460., 10760., 11060., 11360.,  8416.,  8656.,  8896.,  9136.,  9804., 10056., 10308., 10560.,  6109.,  6298.,  6487.,  6676.,  7166.,  7364.,  7562.,  7760.,  7468.,  7720.,  7972.,  8224.,  8872.,  9136.,  9400.,  9664., 10080., 10432., 10784., 11136., 12016., 12384., 12752., 13120., 13916., 14376., 14836., 15296., 16448., 16928., 17408., 17888., 15140., 15640., 16140., 16640., 17832., 18352., 18872., 19392., 14048., 14464., 14880., 15296., 16304., 16736., 17168., 17600., 10644., 10968., 11292., 11616., 12400., 12736., 13072., 13408., 11901., 12306., 12711., 13116., 14004., 14424., 14844., 15264., 16064., 16624., 17184., 17744., 18932., 19512., 20092., 20672., 21845., 22570., 23295., 24020., 25542., 26292., 27042., 27792., 23239., 24014., 24789., 25564., 27136., 27936., 28736., 29536., 20880., 21520., 22160., 22800., 24100., 24760., 25420., 26080., 15863., 16358., 16853., 17348., 18342., 18852., 19362., 19872., 16913., 17434., 17955., 18476., 19480., 20016., 20552., 21088., 18928., 19600., 20272., 20944., 22244., 22936., 23628., 24320., 23361., 24194., 25027., 25860., 27490., 28348., 29206., 30064., 22131., 22950., 23769., 24588., 26204., 27048., 27892., 28736., 16320., 16944., 17568., 18192., 19476., 20120., 20764., 21408., 13259., 13742., 14225., 14708., 15690., 16188., 16686., 17184., 13605., 14114., 14623., 15132., 16124., 16648., 17172., 17696., 17056., 17712., 18368., 19024., 20308., 20984., 21660., 22336., 23725., 24538., 25351., 26164., 27774., 28612., 29450., 30288., 25055., 25854., 26653., 27452., 29048., 29872., 30696., 31520., 17904., 18512., 19120., 19728., 20996., 21624., 22252., 22880., 14239., 14710., 15181., 15652., 16622., 17108., 17594., 18080., 11516., 11944., 12372., 12800., 13592., 14032., 14472., 14912., 13792., 14336., 14880., 15424., 16432., 16992., 17552., 18112., 16076., 16744., 17412., 18080., 19344., 20032., 20720., 21408., 15508., 16152., 16796., 17440., 18680., 19344., 20008., 20672., 12320., 12800., 13280., 13760., 14704., 15200., 15696., 16192., 11108., 11480., 11852., 12224., 12960., 13344., 13728., 14112.,  8791.,  9102.,  9413.,  9724., 10336., 10656., 10976., 11296., 12912., 13296., 13680., 14064., 14844., 15240., 15636., 16032., 12663., 13126., 13589., 14052., 14982., 15460., 15938., 16416., 10341., 10770., 11199., 11628., 12524., 12968., 13412., 13856.,  5408.,  5712.,  6016.,  6320.,  6988.,  7304.,  7620.,  7936.,  3645.,  3882.,  4119.,  4356.,  4878.,  5124.,  5370.,  5616.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21845., 22570., 23295., 24020., 25542., 26292., 27042., 27792., 23239., 24014., 24789., 25564., 27136., 27936., 28736., 29536., 23361., 24194., 25027., 25860., 27490., 28348., 29206., 30064., 22131., 22950., 23769., 24588., 26204., 27048., 27892., 28736., 23725., 24538., 25351., 26164., 27774., 28612., 29450., 30288., 25055., 25854., 26653., 27452., 29048., 29872., 30696., 31520.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6285.,  6828.,  7389.,  7968.,  8476.,  9200.,  9948., 10720., 10123., 11028., 11963., 12928., 10103., 11004., 11935., 12896.,  7980.,  8688.,  9420., 10176.,  6033.,  6548.,  7081.,  7632.,  7796.,  8480.,  9188.,  9920., 10672., 11584., 12528., 13504., 15884., 17024., 18204., 19424., 17724., 18880., 20076., 21312., 14896., 15808., 16752., 17728., 12228., 12896., 13588., 14304., 15223., 16060., 16927., 17824., 20404., 21520., 22676., 23872., 22433., 23828., 25273., 26768., 21637., 23068., 24549., 26080., 16036., 17168., 18340., 19552., 10755., 11588., 12451., 13344., 12799., 13740., 14711., 15712., 15572., 16784., 18036., 19328., 18041., 19524., 21057., 22640., 17181., 18636., 20141., 21696., 12484., 13584., 14724., 15904.,  9163.,  9972., 10811., 11680., 12039., 12956., 13903., 14880., 15476., 16656., 17876., 19136., 21457., 22900., 24393., 25936., 23157., 24572., 26037., 27552., 15076., 16144., 17252., 18400., 11155., 11940., 12755., 13600., 10916., 11584., 12276., 12992., 12272., 13120., 14000., 14912., 14812., 15904., 17036., 18208., 14028., 15136., 16284., 17472.,  9328., 10176., 11056., 11968.,  7348.,  8000.,  8676.,  9376.,  8549.,  9148.,  9765., 10400.,  9980., 10736., 11516., 12320., 11539., 12452., 13395., 14368., 11679., 12588., 13527., 14496.,  8140.,  8816.,  9516., 10240.,  5961.,  6468.,  6993.,  7536.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22433., 23828., 25273., 26768., 21637., 23068., 24549., 26080., 18041., 19524., 21057., 22640., 17181., 18636., 20141., 21696., 21457., 22900., 24393., 25936., 23157., 24572., 26037., 27552.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7701.,  7962.,  8522.,  8792.,  9379.,  9658., 10272., 10560., 10884., 11256., 12000., 12384., 13164., 13560., 14376., 14784., 15271., 15702., 16618., 17064., 18025., 18486., 19492., 19968., 13443., 13870., 14782., 15224., 16181., 16638., 17640., 18112.,  9668., 10008., 10752., 11104., 11884., 12248., 13064., 13440.,  6193.,  6434.,  6958.,  7208.,  7759.,  8018.,  8596.,  8864.,  7740.,  8040.,  8712.,  9024.,  9732., 10056., 10800., 11136., 10224., 10656., 11584., 12032., 13008., 13472., 14496., 14976., 14036., 14552., 15720., 16256., 17484., 18040., 19328., 19904., 15396., 15928., 17112., 17664., 18908., 19480., 20784., 21376., 14384., 14816., 15808., 16256., 17296., 17760., 18848., 19328., 12364., 12680., 13432., 13760., 14548., 14888., 15712., 16064., 13267., 13678., 14542., 14968., 15877., 16318., 17272., 17728., 18780., 19368., 20544., 21152., 22388., 23016., 24312., 24960., 21297., 22018., 23486., 24232., 25775., 26546., 28164., 28960., 21461., 22218., 23722., 24504., 26083., 26890., 28544., 29376., 19548., 20168., 21408., 22048., 23348., 24008., 25368., 26048., 15415., 15878., 16810., 17288., 18265., 18758., 19780., 20288., 15483., 15998., 16966., 17496., 18509., 19054., 20112., 20672., 18748., 19432., 20704., 21408., 22740., 23464., 24856., 25600., 23177., 23986., 25542., 26376., 28007., 28866., 30572., 31456., 23277., 24058., 25586., 26392., 27995., 28826., 30504., 31360., 15548., 16136., 17344., 17952., 19220., 19848., 21176., 21824., 10207., 10646., 11554., 12008., 12961., 13430., 14428., 14912., 12963., 13454., 14398., 14904., 15893., 16414., 17448., 17984., 16028., 16680., 17920., 18592., 19892., 20584., 21944., 22656., 20321., 21090., 22606., 23400., 24991., 25810., 27476., 28320., 21445., 22186., 23674., 24440., 26003., 26794., 28432., 29248., 15644., 16200., 17376., 17952., 19188., 19784., 21080., 21696., 12167., 12582., 13466., 13896., 14825., 15270., 16244., 16704.,  8892.,  9224.,  9896., 10240., 10948., 11304., 12048., 12416., 10672., 11104., 11968., 12416., 13328., 13792., 14752., 15232., 13460., 14008., 15112., 15680., 16844., 17432., 18656., 19264., 13924., 14488., 15608., 16192., 17372., 17976., 19216., 19840., 11440., 11872., 12736., 13184., 14096., 14560., 15520., 16000., 10764., 11112., 11800., 12160., 12884., 13256., 14016., 14400.,  8805.,  9098.,  9674.,  9976., 10579., 10890., 11520., 11840., 13316., 13688., 14432., 14816., 15596., 15992., 16808., 17216., 13719., 14182., 15082., 15560., 16505., 16998., 17988., 18496., 12211., 12670., 13566., 14040., 14981., 15470., 16456., 16960.,  7172.,  7512.,  8192.,  8544.,  9260.,  9624., 10376., 10752.,  5313.,  5586.,  6126.,  6408.,  6975.,  7266.,  7860.,  8160.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21297., 22018., 23486., 24232., 25775., 26546., 28164., 28960., 21461., 22218., 23722., 24504., 26083., 26890., 28544., 29376., 23177., 23986., 25542., 26376., 28007., 28866., 30572., 31456., 23277., 24058., 25586., 26392., 27995., 28826., 30504., 31360., 20321., 21090., 22606., 23400., 24991., 25810., 27476., 28320., 21445., 22186., 23674., 24440., 26003., 26794., 28432., 29248.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7653.,  7914.,  8175.,  8436.,  8966.,  9236.,  9506.,  9776., 10351., 10630., 10909., 11188., 11808., 12096., 12384., 12672.,  9492.,  9864., 10236., 10608., 11328., 11712., 12096., 12480., 13260., 13656., 14052., 14448., 15288., 15696., 16104., 16512., 11935., 12366., 12797., 13228., 14102., 14548., 14994., 15440., 16389., 16850., 17311., 17772., 18796., 19272., 19748., 20224., 10331., 10758., 11185., 11612., 12482., 12924., 13366., 13808., 14753., 15210., 15667., 16124., 17144., 17616., 18088., 18560.,  6516.,  6856.,  7196.,  7536.,  8224.,  8576.,  8928.,  9280., 10028., 10392., 10756., 11120., 11928., 12304., 12680., 13056.,  4145.,  4386.,  4627.,  4868.,  5346.,  5596.,  5846.,  6096.,  6619.,  6878.,  7137.,  7396.,  7964.,  8232.,  8500.,  8768.,  8140.,  8440.,  8740.,  9040.,  9688., 10000., 10312., 10624., 11332., 11656., 11980., 12304., 13072., 13408., 13744., 14080., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200., 12516., 13032., 13548., 14064., 15160., 15696., 16232., 16768., 17964., 18520., 19076., 19632., 20928., 21504., 22080., 22656., 12404., 12936., 13468., 14000., 15112., 15664., 16216., 16768., 17980., 18552., 19124., 19696., 21008., 21600., 22192., 22784., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200.,  9564.,  9880., 10196., 10512., 11176., 11504., 11832., 12160., 12884., 13224., 13564., 13904., 14688., 15040., 15392., 15744.,  9291.,  9702., 10113., 10524., 11378., 11804., 12230., 12656., 13585., 14026., 14467., 14908., 15912., 16368., 16824., 17280., 14636., 15224., 15812., 16400., 17568., 18176., 18784., 19392., 20660., 21288., 21916., 22544., 23912., 24560., 25208., 25856., 17041., 17762., 18483., 19204., 20626., 21372., 22118., 22864., 24411., 25182., 25953., 26724., 28396., 29192., 29988., 30784., 18357., 19114., 19871., 20628., 22086., 22868., 23650., 24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640., 17868., 18488., 19108., 19728., 20928., 21568., 22208., 22848., 24148., 24808., 25468., 26128., 27528., 28208., 28888., 29568., 11423., 11886., 12349., 12812., 13686., 14164., 14642., 15120., 16069., 16562., 17055., 17548., 18572., 19080., 19588., 20096., 15155., 15670., 16185., 16700., 17658., 18188., 18718., 19248., 20281., 20826., 21371., 21916., 23024., 23584., 24144., 24704., 17036., 17720., 18404., 19088., 20352., 21056., 21760., 22464., 23828., 24552., 25276., 26000., 27464., 28208., 28952., 29696., 18665., 19474., 20283., 21092., 22602., 23436., 24270., 25104., 26739., 27598., 28457., 29316., 31076., 31960., 32844., 33728., 19917., 20698., 21479., 22260., 23742., 24548., 25354., 26160., 27767., 28598., 29429., 30260., 31992., 32848., 33704., 34560., 15020., 15608., 16196., 16784., 17952., 18560., 19168., 19776., 21044., 21672., 22300., 22928., 24296., 24944., 25592., 26240.,  9223.,  9662., 10101., 10540., 11390., 11844., 12298., 12752., 13677., 14146., 14615., 15084., 16084., 16568., 17052., 17536., 11675., 12166., 12657., 13148., 14082., 14588., 15094., 15600., 16609., 17130., 17651., 18172., 19256., 19792., 20328., 20864., 14188., 14840., 15492., 16144., 17376., 18048., 18720., 19392., 20724., 21416., 22108., 22800., 24232., 24944., 25656., 26368., 19137., 19906., 20675., 21444., 22914., 23708., 24502., 25296., 26891., 27710., 28529., 29348., 31068., 31912., 32756., 33600., 18341., 19082., 19823., 20564., 22006., 22772., 23538., 24304., 25871., 26662., 27453., 28244., 29936., 30752., 31568., 32384., 12172., 12728., 13284., 13840., 14976., 15552., 16128., 16704., 17940., 18536., 19132., 19728., 21064., 21680., 22296., 22912.,  9071.,  9486.,  9901., 10316., 11142., 11572., 12002., 12432., 13333., 13778., 14223., 14668., 15644., 16104., 16564., 17024.,  6636.,  6968.,  7300.,  7632.,  8312.,  8656.,  9000.,  9344., 10084., 10440., 10796., 11152., 11952., 12320., 12688., 13056., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200., 15620., 16168., 16716., 17264., 18392., 18960., 19528., 20096., 21324., 21912., 22500., 23088., 24416., 25024., 25632., 26240., 14484., 15048., 15612., 16176., 17320., 17904., 18488., 19072., 20316., 20920., 21524., 22128., 23472., 24096., 24720., 25344., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200.,  9084.,  9432.,  9780., 10128., 10824., 11184., 11544., 11904., 12660., 13032., 13404., 13776., 14592., 14976., 15360., 15744.,  7013.,  7306.,  7599.,  7892.,  8422.,  8724.,  9026.,  9328.,  9903., 10214., 10525., 10836., 11456., 11776., 12096., 12416., 11028., 11400., 11772., 12144., 12864., 13248., 13632., 14016., 14796., 15192., 15588., 15984., 16824., 17232., 17640., 18048., 10655., 11118., 11581., 12044., 12918., 13396., 13874., 14352., 15301., 15794., 16287., 16780., 17804., 18312., 18820., 19328.,  9947., 10406., 10865., 11324., 12194., 12668., 13142., 13616., 14561., 15050., 15539., 16028., 17048., 17552., 18056., 18560.,  8564.,  8904.,  9244.,  9584., 10272., 10624., 10976., 11328., 12076., 12440., 12804., 13168., 13976., 14352., 14728., 15104.,  6257.,  6530.,  6803.,  7076.,  7618.,  7900.,  8182.,  8464.,  9051.,  9342.,  9633.,  9924., 10556., 10856., 11156., 11456.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17041., 17762., 18483., 19204., 20626., 21372., 22118., 22864., 24411., 25182., 25953., 26724., 28396., 29192., 29988., 30784., 18357., 19114., 19871., 20628., 22086., 22868., 23650., 24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640., 18665., 19474., 20283., 21092., 22602., 23436., 24270., 25104., 26739., 27598., 28457., 29316., 31076., 31960., 32844., 33728., 19917., 20698., 21479., 22260., 23742., 24548., 25354., 26160., 27767., 28598., 29429., 30260., 31992., 32848., 33704., 34560., 19137., 19906., 20675., 21444., 22914., 23708., 24502., 25296., 26891., 27710., 28529., 29348., 31068., 31912., 32756., 33600., 18341., 19082., 19823., 20564., 22006., 22772., 23538., 24304., 25871., 26662., 27453., 28244., 29936., 30752., 31568., 32384.};
  const std::array<int, 4> in_shape = {{ 1, 7, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1755.,  2404.,  3080.,  3350.,  3620.,  2920.,  2205.,  3008.,  4048.,  5100.,  5410.,  5720.,  4560.,  3404.,  4420.,  5880.,  7325.,  7650.,  7975.,  6300.,  4660.,  5890.,  7770.,  9600.,  9925., 10250.,  8050.,  5920.,  7360.,  9660., 11875., 12200., 12525.,  9800.,  7180.,  5156.,  6704.,  8160.,  8370.,  8580.,  6640.,  4808.,  3213.,  4120.,  4940.,  5060.,  5180.,  3940.,  2799.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7325.,  7650.,  7975.,  9600.,  9925., 10250., 11875., 12200., 12525.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3429.,  3510.,  4694.,  4808.,  6010.,  6160.,  6535.,  6700.,  7060.,  7240.,  5690.,  5840.,  4293.,  4410.,  5866.,  6016.,  7888.,  8096.,  9930., 10200., 10530., 10820., 11130., 11440.,  8864.,  9120.,  6610.,  6808.,  8600.,  8840., 11430., 11760., 14225., 14650., 14850., 15300., 15475., 15950., 12210., 12600.,  9020.,  9320., 11435., 11780., 15070., 15540., 18600., 19200., 19225., 19850., 19850., 20500., 15570., 16100., 11435., 11840., 14270., 14720., 18710., 19320., 22975., 23750., 23600., 24400., 24225., 25050., 18930., 19600., 13850., 14360.,  9910., 10312., 12864., 13408., 15630., 16320., 16030., 16740., 16430., 17160., 12688., 13280.,  9166.,  9616.,  6093.,  6426.,  7790.,  8240.,  9310.,  9880.,  9535., 10120.,  9760., 10360.,  7394.,  7880.,  5229.,  5598.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14225., 14650., 14850., 15300., 15475., 15950., 18600., 19200., 19225., 19850., 19850., 20500., 22975., 23750., 23600., 24400., 24225., 25050.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6777.,  6858.,  6939.,  7020.,  9274.,  9388.,  9502.,  9616., 11870., 12020., 12170., 12320., 12905., 13070., 13235., 13400., 13940., 14120., 14300., 14480., 11230., 11380., 11530., 11680.,  8469.,  8586.,  8703.,  8820., 11582., 11732., 11882., 12032., 15568., 15776., 15984., 16192., 19590., 19860., 20130., 20400., 20770., 21060., 21350., 21640., 21950., 22260., 22570., 22880., 17472., 17728., 17984., 18240., 13022., 13220., 13418., 13616., 16960., 17200., 17440., 17680., 22530., 22860., 23190., 23520., 28025., 28450., 28875., 29300., 29250., 29700., 30150., 30600., 30475., 30950., 31425., 31900., 24030., 24420., 24810., 25200., 17740., 18040., 18340., 18640., 22525., 22870., 23215., 23560., 29670., 30140., 30610., 31080., 36600., 37200., 37800., 38400., 37825., 38450., 39075., 39700., 39050., 39700., 40350., 41000., 30610., 31140., 31670., 32200., 22465., 22870., 23275., 23680., 28090., 28540., 28990., 29440., 36810., 37420., 38030., 38640., 45175., 45950., 46725., 47500., 46400., 47200., 48000., 48800., 47625., 48450., 49275., 50100., 37190., 37860., 38530., 39200., 27190., 27700., 28210., 28720., 19418., 19820., 20222., 20624., 25184., 25728., 26272., 26816., 30570., 31260., 31950., 32640., 31350., 32060., 32770., 33480., 32130., 32860., 33590., 34320., 24784., 25376., 25968., 26560., 17882., 18332., 18782., 19232., 11853., 12186., 12519., 12852., 15130., 15580., 16030., 16480., 18050., 18620., 19190., 19760., 18485., 19070., 19655., 20240., 18920., 19520., 20120., 20720., 14302., 14788., 15274., 15760., 10089., 10458., 10827., 11196.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {28025., 28450., 28875., 29300., 29250., 29700., 30150., 30600., 30475., 30950., 31425., 31900., 36600., 37200., 37800., 38400., 37825., 38450., 39075., 39700., 39050., 39700., 40350., 41000., 45175., 45950., 46725., 47500., 46400., 47200., 48000., 48800., 47625., 48450., 49275., 50100.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6525.,  7020.,  8956.,  9616., 11495., 12320., 12545., 13400., 13595., 14480., 10972., 11680.,  8289.,  8820., 11348., 12032., 15280., 16192., 19260., 20400., 20460., 21640., 21660., 22880., 17264., 18240., 12884., 13616., 16795., 17680., 22340., 23520., 27825., 29300., 29075., 30600., 30325., 31900., 23940., 25200., 17695., 18640., 22465., 23560., 29620., 31080., 36575., 38400., 37825., 39700., 39075., 41000., 30660., 32200., 22525., 23680., 28135., 29440., 36900., 38640., 45325., 47500., 46575., 48800., 47825., 50100., 37380., 39200., 27355., 28720., 19556., 20624., 25392., 26816., 30860., 32640., 31660., 33480., 32460., 34320., 25072., 26560., 18116., 19232., 12033., 12852., 15388., 16480., 18395., 19760., 18845., 20240., 19295., 20720., 14620., 15760., 10341., 11196.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {27825., 29300., 29075., 30600., 30325., 31900., 36575., 38400., 37825., 39700., 39075., 41000., 45325., 47500., 46575., 48800., 47825., 50100.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3681.,  3834.,  4278.,  4440.,  4896.,  5112.,  5692.,  5920.,  7025.,  7310.,  8084.,  8384.,  7943.,  8258.,  9062.,  9392.,  8861.,  9206., 10040., 10400.,  7128.,  7416.,  8084.,  8384.,  5537.,  5762.,  6270.,  6504.,  7816.,  8104.,  8788.,  9088., 10192., 10592., 11488., 11904., 14256., 14776., 15940., 16480., 15464., 16024., 17228., 17808., 16672., 17272., 18516., 19136., 13232., 13728., 14720., 15232., 10088., 10472., 11220., 11616., 13157., 13622., 14528., 15008., 16904., 17544., 18732., 19392., 20905., 21666., 23126., 23912., 20347., 21094., 22540., 23312., 20045., 20778., 22210., 22968., 15248., 15816., 16916., 17504., 10997., 11390., 12168., 12576., 13343., 13826., 14750., 15248., 17104., 17768., 18980., 19664., 23271., 24062., 25552., 26368., 23993., 24770., 26246., 27048., 24971., 25734., 27196., 27984., 20088., 20680., 21804., 22416., 11679., 12090., 12886., 13312., 17369., 17870., 18812., 19328., 22424., 23112., 24348., 25056., 23845., 24666., 26186., 27032., 21751., 22558., 24064., 24896., 19913., 20706., 22198., 23016., 13664., 14280., 15428., 16064.,  8009.,  8438.,  9252.,  9696.,  9712., 10120., 10876., 11296., 12336., 12896., 13888., 14464., 13576., 14232., 15452., 16128., 12512., 13144., 14340., 14992., 11704., 12312., 13484., 14112.,  8272.,  8736.,  9632., 10112.,  5328.,  5640.,  6268.,  6592.,  6897.,  7170.,  7758.,  8040.,  8896.,  9272., 10044., 10432.,  9617., 10038., 10924., 11360.,  9655., 10042., 10894., 11296.,  9949., 10302., 11120., 11488.,  7608.,  7864.,  8468.,  8736.,  5553.,  5706.,  6102.,  6264.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20905., 21666., 23126., 23912., 20347., 21094., 22540., 23312., 20045., 20778., 22210., 22968., 23271., 24062., 25552., 26368., 23993., 24770., 26246., 27048., 24971., 25734., 27196., 27984., 23845., 24666., 26186., 27032., 21751., 22558., 24064., 24896., 19913., 20706., 22198., 23016.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4521.,  4674.,  4827.,  4980.,  5450.,  5612.,  5774.,  5936.,  6312.,  6528.,  6744.,  6960.,  7572.,  7800.,  8028.,  8256.,  8837.,  9122.,  9407.,  9692., 10492., 10792., 11092., 11392.,  9747., 10062., 10377., 10692., 11522., 11852., 12182., 12512., 10657., 11002., 11347., 11692., 12552., 12912., 13272., 13632., 10064., 10352., 10640., 10928., 11644., 11944., 12244., 12544.,  7265.,  7490.,  7715.,  7940.,  8466.,  8700.,  8934.,  9168.,  8560.,  8848.,  9136.,  9424., 10108., 10408., 10708., 11008., 11472., 11872., 12272., 12672., 13600., 14016., 14432., 14848., 15768., 16288., 16808., 17328., 18540., 19080., 19620., 20160., 16992., 17552., 18112., 18672., 19924., 20504., 21084., 21664., 18216., 18816., 19416., 20016., 21308., 21928., 22548., 23168., 16752., 17248., 17744., 18240., 19328., 19840., 20352., 20864., 12624., 13008., 13392., 13776., 14620., 15016., 15412., 15808., 13689., 14154., 14619., 15084., 16032., 16512., 16992., 17472., 18384., 19024., 19664., 20304., 21572., 22232., 22892., 23552., 24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 22603., 23350., 24097., 24844., 26388., 27160., 27932., 28704., 20861., 21594., 22327., 23060., 24590., 25348., 26106., 26864., 15336., 15904., 16472., 17040., 18268., 18856., 19444., 20032., 10849., 11242., 11635., 12028., 12920., 13328., 13736., 14144., 12763., 13246., 13729., 14212., 15178., 15676., 16174., 16672., 16584., 17248., 17912., 18576., 19868., 20552., 21236., 21920., 21495., 22286., 23077., 23868., 25456., 26272., 27088., 27904., 21801., 22578., 23355., 24132., 25706., 26508., 27310., 28112., 22619., 23382., 24145., 24908., 26468., 27256., 28044., 28832., 19616., 20208., 20800., 21392., 22644., 23256., 23868., 24480., 12707., 13118., 13529., 13940., 14850., 15276., 15702., 16128., 15421., 15922., 16423., 16924., 17908., 18424., 18940., 19456., 20928., 21616., 22304., 22992., 24308., 25016., 25724., 26432., 22741., 23562., 24383., 25204., 26822., 27668., 28514., 29360., 21511., 22318., 23125., 23932., 25536., 26368., 27200., 28032., 20793., 21586., 22379., 23172., 24762., 25580., 26398., 27216., 17752., 18368., 18984., 19600., 20876., 21512., 22148., 22784., 14053., 14482., 14911., 15340., 16268., 16712., 17156., 17600.,  9608., 10016., 10424., 10832., 11604., 12024., 12444., 12864., 13616., 14176., 14736., 15296., 16320., 16896., 17472., 18048., 17536., 18192., 18848., 19504., 20756., 21432., 22108., 22784., 18504., 19136., 19768., 20400., 21628., 22280., 22932., 23584., 15888., 16496., 17104., 17712., 18916., 19544., 20172., 20800.,  9936., 10400., 10864., 11328., 12256., 12736., 13216., 13696.,  5224.,  5536.,  5848.,  6160.,  6836.,  7160.,  7484.,  7808.,  7825.,  8098.,  8371.,  8644.,  9218.,  9500.,  9782., 10064.,  9736., 10112., 10488., 10864., 11636., 12024., 12412., 12800.,  9021.,  9442.,  9863., 10284., 11172., 11608., 12044., 12480.,  8235.,  8622.,  9009.,  9396., 10250., 10652., 11054., 11456.,  7961.,  8314.,  8667.,  9020.,  9840., 10208., 10576., 10944.,  6064.,  6320.,  6576.,  6832.,  7452.,  7720.,  7988.,  8256.,  5001.,  5154.,  5307.,  5460.,  5898.,  6060.,  6222.,  6384.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 22603., 23350., 24097., 24844., 26388., 27160., 27932., 28704., 20861., 21594., 22327., 23060., 24590., 25348., 26106., 26864., 21495., 22286., 23077., 23868., 25456., 26272., 27088., 27904., 21801., 22578., 23355., 24132., 25706., 26508., 27310., 28112., 22619., 23382., 24145., 24908., 26468., 27256., 28044., 28832., 22741., 23562., 24383., 25204., 26822., 27668., 28514., 29360., 21511., 22318., 23125., 23932., 25536., 26368., 27200., 28032., 20793., 21586., 22379., 23172., 24762., 25580., 26398., 27216.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4977.,  5492.,  6025.,  6576.,  5484.,  6128.,  6796.,  7488.,  8023.,  8860.,  9727., 10624.,  8515.,  9348., 10211., 11104.,  9263., 10092., 10951., 11840.,  8012.,  8688.,  9388., 10112.,  6777.,  7300.,  7841.,  8400.,  8860.,  9552., 10268., 11008., 11600., 12480., 13392., 14336., 18180., 19312., 20484., 21696., 20532., 21680., 22868., 24096., 19044., 20208., 21412., 22656., 15248., 16192., 17168., 18176., 11516., 12240., 12988., 13760., 14959., 15852., 16775., 17728., 17556., 18704., 19892., 21120., 19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824., 12020., 13072., 14164., 15296.,  8711.,  9468., 10255., 11072., 12003., 12932., 13891., 14880., 14372., 15568., 16804., 18080., 19013., 20476., 21989., 23552., 19433., 20868., 22353., 23888., 20365., 21772., 23229., 24736., 16836., 17936., 19076., 20256.,  9563., 10356., 11179., 12032., 16727., 17692., 18687., 19712., 21428., 22672., 23956., 25280., 23233., 24756., 26329., 27952., 22117., 23612., 25157., 26752., 19401., 20804., 22257., 23760., 13652., 14736., 15860., 17024.,  8303.,  9068.,  9863., 10688., 10268., 11024., 11804., 12608., 13520., 14528., 15568., 16640., 16836., 18096., 19396., 20736., 16820., 18096., 19412., 20768., 16228., 17456., 18724., 20032., 12432., 13376., 14352., 15360.,  9084.,  9744., 10428., 11136., 11001., 11652., 12321., 13008., 14604., 15472., 16364., 17280., 17007., 18028., 19079., 20160., 17915., 18932., 19979., 21056., 15431., 16380., 17359., 18368., 11436., 12144., 12876., 13632.,  7745.,  8212.,  8697.,  9200.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824., 19013., 20476., 21989., 23552., 19433., 20868., 22353., 23888., 20365., 21772., 23229., 24736., 23233., 24756., 26329., 27952., 22117., 23612., 25157., 26752., 19401., 20804., 22257., 23760.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8697.,  8930.,  9462.,  9704., 10263., 10514., 11100., 11360.,  8564.,  8856.,  9520.,  9824., 10524., 10840., 11576., 11904., 10371., 10734., 11582., 11960., 12853., 13246., 14184., 14592.,  9567.,  9926., 10770., 11144., 12033., 12422., 13356., 13760.,  9275.,  9630., 10470., 10840., 11725., 12110., 13040., 13440.,  8228.,  8536.,  9248.,  9568., 10316., 10648., 11432., 11776.,  6393.,  6642.,  7174.,  7432.,  7991.,  8258.,  8844.,  9120.,  8324.,  8632.,  9312.,  9632., 10348., 10680., 11432., 11776., 10320., 10720., 11616., 12032., 12976., 13408., 14400., 14848., 16076., 16584., 17744., 18272., 19492., 20040., 21320., 21888., 18460., 18984., 20160., 20704., 21940., 22504., 23800., 24384., 17260., 17800., 18992., 19552., 20804., 21384., 22696., 23296., 16080., 16544., 17568., 18048., 19120., 19616., 20736., 21248., 12676., 13048., 13856., 14240., 15084., 15480., 16360., 16768., 13707., 14174., 15094., 15576., 16541., 17038., 18048., 18560., 17660., 18280., 19488., 20128., 21396., 22056., 23384., 24064., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 15180., 15720., 16880., 17440., 18660., 19240., 20520., 21120., 12171., 12558., 13414., 13816., 14717., 15134., 16080., 16512., 13391., 13894., 14850., 15368., 16369., 16902., 17948., 18496., 19180., 19848., 21104., 21792., 23108., 23816., 25192., 25920., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208., 20633., 21394., 22902., 23688., 25271., 26082., 27740., 28576., 20221., 20954., 22434., 23192., 24747., 25530., 27160., 27968., 18108., 18696., 19904., 20512., 21780., 22408., 23736., 24384., 10767., 11190., 12082., 12520., 13457., 13910., 14892., 15360., 16147., 16686., 17678., 18232., 19269., 19838., 20920., 21504., 20700., 21416., 22720., 23456., 24820., 25576., 27000., 27776., 22513., 23362., 24958., 25832., 27503., 28402., 30148., 31072., 22101., 22922., 24490., 25336., 26979., 27850., 29568., 30464., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 17388., 17960., 19152., 19744., 20996., 21608., 22920., 23552., 13395., 13790., 14654., 15064., 15973., 16398., 17352., 17792.,  9812., 10232., 10992., 11424., 12220., 12664., 13496., 13952., 14032., 14624., 15648., 16256., 17328., 17952., 19072., 19712., 19644., 20360., 21632., 22368., 23700., 24456., 25848., 26624., 21644., 22376., 23664., 24416., 25764., 26536., 27944., 28736., 18460., 19144., 20384., 21088., 22388., 23112., 24472., 25216., 12432., 12960., 13920., 14464., 15472., 16032., 17088., 17664.,  7828.,  8184.,  8880.,  9248.,  9980., 10360., 11128., 11520., 10585., 10930., 11558., 11912., 12567., 12930., 13612., 13984., 13748., 14232., 15088., 15584., 16476., 16984., 17912., 18432., 14307., 14878., 15886., 16472., 17525., 18126., 19224., 19840., 14335., 14902., 15906., 16488., 17537., 18134., 19228., 19840., 11739., 12238., 13174., 13688., 14669., 15198., 16224., 16768.,  9124.,  9496., 10208., 10592., 11340., 11736., 12520., 12928.,  7641.,  7874.,  8374.,  8616.,  9143.,  9394.,  9948., 10208.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208., 20633., 21394., 22902., 23688., 25271., 26082., 27740., 28576., 20221., 20954., 22434., 23192., 24747., 25530., 27160., 27968., 22513., 23362., 24958., 25832., 27503., 28402., 30148., 31072., 22101., 22922., 24490., 25336., 26979., 27850., 29568., 30464., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8649.,  8882.,  9115.,  9348.,  9850., 10092., 10334., 10576., 11123., 11374., 11625., 11876., 12468., 12728., 12988., 13248.,  7492.,  7784.,  8076.,  8368.,  9008.,  9312.,  9616.,  9920., 10620., 10936., 11252., 11568., 12328., 12656., 12984., 13312.,  8091.,  8454.,  8817.,  9180.,  9986., 10364., 10742., 11120., 12001., 12394., 12787., 13180., 14136., 14544., 14952., 15360.,  8535.,  8894.,  9253.,  9612., 10414., 10788., 11162., 11536., 12413., 12802., 13191., 13580., 14532., 14936., 15340., 15744., 10003., 10358., 10713., 11068., 11866., 12236., 12606., 12976., 13849., 14234., 14619., 15004., 15952., 16352., 16752., 17152.,  7764.,  8072.,  8380.,  8688.,  9344.,  9664.,  9984., 10304., 11020., 11352., 11684., 12016., 12792., 13136., 13480., 13824.,  5561.,  5810.,  6059.,  6308.,  6794.,  7052.,  7310.,  7568.,  8099.,  8366.,  8633.,  8900.,  9476.,  9752., 10028., 10304.,  6996.,  7304.,  7612.,  7920.,  8576.,  8896.,  9216.,  9536., 10252., 10584., 10916., 11248., 12024., 12368., 12712., 13056.,  7952.,  8352.,  8752.,  9152., 10016., 10432., 10848., 11264., 12208., 12640., 13072., 13504., 14528., 14976., 15424., 15872., 12252., 12760., 13268., 13776., 14864., 15392., 15920., 16448., 17636., 18184., 18732., 19280., 20568., 21136., 21704., 22272., 14188., 14712., 15236., 15760., 16864., 17408., 17952., 18496., 19700., 20264., 20828., 21392., 22696., 23280., 23864., 24448., 13052., 13592., 14132., 14672., 15792., 16352., 16912., 17472., 18692., 19272., 19852., 20432., 21752., 22352., 22952., 23552., 11600., 12064., 12528., 12992., 13920., 14400., 14880., 15360., 16368., 16864., 17360., 17856., 18944., 19456., 19968., 20480.,  9108.,  9480.,  9852., 10224., 10944., 11328., 11712., 12096., 12876., 13272., 13668., 14064., 14904., 15312., 15720., 16128., 10371., 10838., 11305., 11772., 12682., 13164., 13646., 14128., 15113., 15610., 16107., 16604., 17664., 18176., 18688., 19200., 15436., 16056., 16676., 17296., 18496., 19136., 19776., 20416., 21716., 22376., 23036., 23696., 25096., 25776., 26456., 27136., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 12284., 12824., 13364., 13904., 15024., 15584., 16144., 16704., 17924., 18504., 19084., 19664., 20984., 21584., 22184., 22784., 10131., 10518., 10905., 11292., 12090., 12492., 12894., 13296., 14169., 14586., 15003., 15420., 16368., 16800., 17232., 17664., 13543., 14046., 14549., 15052., 15998., 16516., 17034., 17552., 18573., 19106., 19639., 20172., 21268., 21816., 22364., 22912., 18684., 19352., 20020., 20688., 21936., 22624., 23312., 24000., 25348., 26056., 26764., 27472., 28920., 29648., 30376., 31104., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 16925., 17658., 18391., 19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424., 29232., 30040., 30848., 16556., 17144., 17732., 18320., 19488., 20096., 20704., 21312., 22580., 23208., 23836., 24464., 25832., 26480., 27128., 27776.,  9335.,  9758., 10181., 10604., 11438., 11876., 12314., 12752., 13661., 14114., 14567., 15020., 16004., 16472., 16940., 17408., 14667., 15206., 15745., 16284., 17266., 17820., 18374., 18928., 19985., 20554., 21123., 21692., 22824., 23408., 23992., 24576., 17836., 18552., 19268., 19984., 21280., 22016., 22752., 23488., 24884., 25640., 26396., 27152., 28648., 29424., 30200., 30976., 18321., 19170., 20019., 20868., 22418., 23292., 24166., 25040., 26715., 27614., 28513., 29412., 31212., 32136., 33060., 33984., 18549., 19370., 20191., 21012., 22534., 23380., 24226., 25072., 26719., 27590., 28461., 29332., 31104., 32000., 32896., 33792., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 13596., 14168., 14740., 15312., 16464., 17056., 17648., 18240., 19492., 20104., 20716., 21328., 22680., 23312., 23944., 24576.,  8475.,  8870.,  9265.,  9660., 10466., 10876., 11286., 11696., 12577., 13002., 13427., 13852., 14808., 15248., 15688., 16128., 10948., 11368., 11788., 12208., 12976., 13408., 13840., 14272., 15100., 15544., 15988., 16432., 17320., 17776., 18232., 18688., 14800., 15392., 15984., 16576., 17632., 18240., 18848., 19456., 20592., 21216., 21840., 22464., 23680., 24320., 24960., 25600., 18604., 19320., 20036., 20752., 22048., 22784., 23520., 24256., 25652., 26408., 27164., 27920., 29416., 30192., 30968., 31744., 20540., 21272., 22004., 22736., 24048., 24800., 25552., 26304., 27716., 28488., 29260., 30032., 31544., 32336., 33128., 33920., 16268., 16952., 17636., 18320., 19584., 20288., 20992., 21696., 23060., 23784., 24508., 25232., 26696., 27440., 28184., 28928., 12176., 12704., 13232., 13760., 14752., 15296., 15840., 16384., 17456., 18016., 18576., 19136., 20288., 20864., 21440., 22016.,  8324.,  8680.,  9036.,  9392., 10096., 10464., 10832., 11200., 11964., 12344., 12724., 13104., 13928., 14320., 14712., 15104.,  7705.,  8050.,  8395.,  8740.,  9322.,  9676., 10030., 10384., 11011., 11374., 11737., 12100., 12772., 13144., 13516., 13888., 11780., 12264., 12748., 13232., 14064., 14560., 15056., 15552., 16444., 16952., 17460., 17968., 18920., 19440., 19960., 20480., 14539., 15110., 15681., 16252., 17234., 17820., 18406., 18992., 20049., 20650., 21251., 21852., 22984., 23600., 24216., 24832., 12807., 13374., 13941., 14508., 15486., 16068., 16650., 17232., 18285., 18882., 19479., 20076., 21204., 21816., 22428., 23040.,  9987., 10486., 10985., 11484., 12394., 12908., 13422., 13936., 14921., 15450., 15979., 16508., 17568., 18112., 18656., 19200.,  8340.,  8712.,  9084.,  9456., 10176., 10560., 10944., 11328., 12108., 12504., 12900., 13296., 14136., 14544., 14952., 15360.,  8649.,  8882.,  9115.,  9348.,  9850., 10092., 10334., 10576., 11123., 11374., 11625., 11876., 12468., 12728., 12988., 13248.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 16925., 17658., 18391., 19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424., 29232., 30040., 30848., 18321., 19170., 20019., 20868., 22418., 23292., 24166., 25040., 26715., 27614., 28513., 29412., 31212., 32136., 33060., 33984., 18549., 19370., 20191., 21012., 22534., 23380., 24226., 25072., 26719., 27590., 28461., 29332., 31104., 32000., 32896., 33792., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1956.,  2666.,  3400.,  3670.,  3940.,  4210.,  3380.,  2541.,  3380.,  4532.,  5690.,  6000.,  6310.,  6620.,  5260.,  3914.,  4990.,  6620.,  8225.,  8550.,  8875.,  9200.,  7250.,  5350.,  6670.,  8780., 10825., 11150., 11475., 11800.,  9250.,  6790.,  8350., 10940., 13425., 13750., 14075., 14400., 11250.,  8230.,  5852.,  7596.,  9230.,  9440.,  9650.,  9860.,  7620.,  5510.,  3648.,  4670.,  5590.,  5710.,  5830.,  5950.,  4520.,  3207.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8225.,  8550.,  8875.,  9200., 10825., 11150., 11475., 11800., 13425., 13750., 14075., 14400.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3822.,  3912.,  5206.,  5332.,  6635.,  6800.,  7160.,  7340.,  7685.,  7880.,  8210.,  8420.,  6586.,  6760.,  4947.,  5082.,  6592.,  6760.,  8832.,  9064., 11080., 11380., 11680., 12000., 12280., 12620., 12880., 13240., 10224., 10520.,  7600.,  7828.,  9710.,  9980., 12870., 13240., 15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 14050., 14500., 10355., 10700., 12950., 13340., 17030., 17560., 20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600., 17890., 18500., 13115., 13580., 16190., 16700., 21190., 21880., 25975., 26850., 26600., 27500., 27225., 28150., 27850., 28800., 21730., 22500., 15875., 16460., 11248., 11704., 14576., 15192., 17680., 18460., 18080., 18880., 18480., 19300., 18880., 19720., 14560., 15240., 10504., 11020.,  6918.,  7296.,  8830.,  9340., 10535., 11180., 10760., 11420., 10985., 11660., 11210., 11900.,  8482.,  9040.,  5991.,  6414.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600., 25975., 26850., 26600., 27500., 27225., 28150., 27850., 28800.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7554.,  7644.,  7734.,  7824., 10286., 10412., 10538., 10664., 13105., 13270., 13435., 13600., 14140., 14320., 14500., 14680., 15175., 15370., 15565., 15760., 16210., 16420., 16630., 16840., 12998., 13172., 13346., 13520.,  9759.,  9894., 10029., 10164., 13016., 13184., 13352., 13520., 17432., 17664., 17896., 18128., 21860., 22160., 22460., 22760., 23040., 23360., 23680., 24000., 24220., 24560., 24900., 25240., 25400., 25760., 26120., 26480., 20152., 20448., 20744., 21040., 14972., 15200., 15428., 15656., 19150., 19420., 19690., 19960., 25370., 25740., 26110., 26480., 31475., 31950., 32425., 32900., 32700., 33200., 33700., 34200., 33925., 34450., 34975., 35500., 35150., 35700., 36250., 36800., 27650., 28100., 28550., 29000., 20365., 20710., 21055., 21400., 25510., 25900., 26290., 26680., 33530., 34060., 34590., 35120., 41275., 41950., 42625., 43300., 42500., 43200., 43900., 44600., 43725., 44450., 45175., 45900., 44950., 45700., 46450., 47200., 35170., 35780., 36390., 37000., 25765., 26230., 26695., 27160., 31870., 32380., 32890., 33400., 41690., 42380., 43070., 43760., 51075., 51950., 52825., 53700., 52300., 53200., 54100., 55000., 53525., 54450., 55375., 56300., 54750., 55700., 56650., 57600., 42690., 43460., 44230., 45000., 31165., 31750., 32335., 32920., 22040., 22496., 22952., 23408., 28536., 29152., 29768., 30384., 34580., 35360., 36140., 36920., 35360., 36160., 36960., 37760., 36140., 36960., 37780., 38600., 36920., 37760., 38600., 39440., 28440., 29120., 29800., 30480., 20492., 21008., 21524., 22040., 13458., 13836., 14214., 14592., 17150., 17660., 18170., 18680., 20425., 21070., 21715., 22360., 20860., 21520., 22180., 22840., 21295., 21970., 22645., 23320., 21730., 22420., 23110., 23800., 16406., 16964., 17522., 18080., 11559., 11982., 12405., 12828.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {31475., 31950., 32425., 32900., 32700., 33200., 33700., 34200., 33925., 34450., 34975., 35500., 35150., 35700., 36250., 36800., 41275., 41950., 42625., 43300., 42500., 43200., 43900., 44600., 43725., 44450., 45175., 45900., 44950., 45700., 46450., 47200., 51075., 51950., 52825., 53700., 52300., 53200., 54100., 55000., 53525., 54450., 55375., 56300., 54750., 55700., 56650., 57600.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7311.,  7824.,  9980., 10664., 12745., 13600., 13795., 14680., 14845., 15760., 15895., 16840., 12764., 13520.,  9597., 10164., 12800., 13520., 17168., 18128., 21560., 22760., 22760., 24000., 23960., 25240., 25160., 26480., 19984., 21040., 14864., 15656., 19015., 19960., 25220., 26480., 31325., 32900., 32575., 34200., 33825., 35500., 35075., 36800., 27620., 29000., 20365., 21400., 25495., 26680., 33540., 35120., 41325., 43300., 42575., 44600., 43825., 45900., 45075., 47200., 35300., 37000., 25885., 27160., 31975., 33400., 41860., 43760., 51325., 53700., 52575., 55000., 53825., 56300., 55075., 57600., 42980., 45000., 31405., 32920., 22232., 23408., 28816., 30384., 34960., 36920., 35760., 37760., 36560., 38600., 37360., 39440., 28816., 30480., 20792., 22040., 13683., 14592., 17468., 18680., 20845., 22360., 21295., 22840., 21745., 23320., 22195., 23800., 16796., 18080., 11865., 12828.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {31325., 32900., 32575., 34200., 33825., 35500., 35075., 36800., 41325., 43300., 42575., 44600., 43825., 45900., 45075., 47200., 51325., 53700., 52575., 55000., 53825., 56300., 55075., 57600.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4083.,  4254.,  4716.,  4896.,  5384.,  5624.,  6228.,  6480.,  7703.,  8018.,  8822.,  9152.,  8621.,  8966.,  9800., 10160.,  9539.,  9914., 10778., 11168., 10457., 10862., 11756., 12176.,  8360.,  8696.,  9412.,  9760.,  6453.,  6714.,  7258.,  7528.,  8764.,  9088.,  9808., 10144., 11360., 11808., 12752., 13216., 15852., 16432., 17656., 18256., 17060., 17680., 18944., 19584., 18268., 18928., 20232., 20912., 19476., 20176., 21520., 22240., 15392., 15968., 17040., 17632., 11684., 12128., 12936., 13392.,  9281.,  9614., 10388., 10736., 12088., 12552., 13564., 14048., 17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 17304., 17928., 19084., 19728., 13303., 13786., 14654., 15152., 14129., 14510., 15332., 15728., 18424., 18952., 20028., 20576., 22509., 23194., 24578., 25288., 23807., 24542., 25976., 26736., 25105., 25890., 27374., 28184., 26403., 27238., 28772., 29632., 20312., 21000., 22220., 22928., 14695., 15226., 16142., 16688., 10529., 10958., 11828., 12272., 13496., 14088., 15228., 15840., 17213., 17978., 19442., 20232., 18511., 19326., 20840., 21680., 19809., 20674., 22238., 23128., 21107., 22022., 23636., 24576., 16152., 16904., 18188., 18960., 11735., 12314., 13278., 13872.,  6316.,  6640.,  7312.,  7648.,  8032.,  8480.,  9360.,  9824., 11612., 12192., 13336., 13936., 12660., 13280., 14464., 15104., 13708., 14368., 15592., 16272., 14756., 15456., 16720., 17440., 11552., 12128., 13136., 13728.,  8756.,  9200.,  9960., 10416.,  7611.,  7782.,  8268.,  8448., 10120., 10360., 10996., 11248., 12575., 12890., 13670., 14000., 13445., 13790., 14600., 14960., 14315., 14690., 15530., 15920., 15185., 15590., 16460., 16880., 11752., 12088., 12772., 13120.,  8493.,  8754.,  9258.,  9528.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 22509., 23194., 24578., 25288., 23807., 24542., 25976., 26736., 25105., 25890., 27374., 28184., 26403., 27238., 28772., 29632., 17213., 17978., 19442., 20232., 18511., 19326., 20840., 21680., 19809., 20674., 22238., 23128., 21107., 22022., 23636., 24576.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5051.,  5222.,  5393.,  5564.,  6052.,  6232.,  6412.,  6592.,  7008.,  7248.,  7488.,  7728.,  8364.,  8616.,  8868.,  9120.,  9779., 10094., 10409., 10724., 11554., 11884., 12214., 12544., 10689., 11034., 11379., 11724., 12584., 12944., 13304., 13664., 11599., 11974., 12349., 12724., 13614., 14004., 14394., 14784., 12509., 12914., 13319., 13724., 14644., 15064., 15484., 15904., 11712., 12048., 12384., 12720., 13484., 13832., 14180., 14528.,  8421.,  8682.,  8943.,  9204.,  9766., 10036., 10306., 10576.,  9652.,  9976., 10300., 10624., 11344., 11680., 12016., 12352., 12864., 13312., 13760., 14208., 15184., 15648., 16112., 16576., 17620., 18200., 18780., 19360., 20632., 21232., 21832., 22432., 18844., 19464., 20084., 20704., 22016., 22656., 23296., 23936., 20068., 20728., 21388., 22048., 23400., 24080., 24760., 25440., 21292., 21992., 22692., 23392., 24784., 25504., 26224., 26944., 19456., 20032., 20608., 21184., 22352., 22944., 23536., 24128., 14604., 15048., 15492., 15936., 16840., 17296., 17752., 18208.,  8629.,  8962.,  9295.,  9628., 10444., 10792., 11140., 11488., 11232., 11696., 12160., 12624., 13716., 14200., 14684., 15168., 16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 17088., 17712., 18336., 18960., 20244., 20888., 21532., 22176., 13707., 14190., 14673., 15156., 16138., 16636., 17134., 17632., 12133., 12514., 12895., 13276., 14140., 14536., 14932., 15328., 16672., 17200., 17728., 18256., 19412., 19960., 20508., 21056., 20589., 21274., 21959., 22644., 24126., 24836., 25546., 26256., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 23377., 24162., 24947., 25732., 27314., 28124., 28934., 29744., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488., 20992., 21680., 22368., 23056., 24404., 25112., 25820., 26528., 16443., 16974., 17505., 18036., 19066., 19612., 20158., 20704., 11029., 11458., 11887., 12316., 13228., 13672., 14116., 14560., 15968., 16560., 17152., 17744., 18964., 19576., 20188., 20800., 21181., 21946., 22711., 23476., 25038., 25828., 26618., 27408., 22575., 23390., 24205., 25020., 26632., 27472., 28312., 29152., 23969., 24834., 25699., 26564., 28226., 29116., 30006., 30896., 25363., 26278., 27193., 28108., 29820., 30760., 31700., 32640., 22848., 23600., 24352., 25104., 26516., 27288., 28060., 28832., 18667., 19246., 19825., 20404., 21482., 22076., 22670., 23264.,  8148.,  8472.,  8796.,  9120.,  9808., 10144., 10480., 10816.,  9728., 10176., 10624., 11072., 11984., 12448., 12912., 13376., 12788., 13368., 13948., 14528., 15704., 16304., 16904., 17504., 13820., 14440., 15060., 15680., 16896., 17536., 18176., 18816., 14852., 15512., 16172., 16832., 18088., 18768., 19448., 20128., 15884., 16584., 17284., 17984., 19280., 20000., 20720., 21440., 11776., 12352., 12928., 13504., 14544., 15136., 15728., 16320.,  8748.,  9192.,  9636., 10080., 10888., 11344., 11800., 12256.,  5771.,  5942.,  6113.,  6284.,  6756.,  6936.,  7116.,  7296.,  7968.,  8208.,  8448.,  8688.,  9324.,  9576.,  9828., 10080.,  9923., 10238., 10553., 10868., 11650., 11980., 12310., 12640., 10737., 11082., 11427., 11772., 12584., 12944., 13304., 13664., 11551., 11926., 12301., 12676., 13518., 13908., 14298., 14688., 12365., 12770., 13175., 13580., 14452., 14872., 15292., 15712.,  9920., 10256., 10592., 10928., 11628., 11976., 12324., 12672.,  8085.,  8346.,  8607.,  8868.,  9414.,  9684.,  9954., 10224.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 20589., 21274., 21959., 22644., 24126., 24836., 25546., 26256., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 23377., 24162., 24947., 25732., 27314., 28124., 28934., 29744., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488., 21181., 21946., 22711., 23476., 25038., 25828., 26618., 27408., 22575., 23390., 24205., 25020., 26632., 27472., 28312., 29152., 23969., 24834., 25699., 26564., 28226., 29116., 30006., 30896., 25363., 26278., 27193., 28108., 29820., 30760., 31700., 32640.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2325.,  2748.,  3189.,  3648.,  3516.,  4080.,  4668.,  5280.,  6947.,  7716.,  8515.,  9344.,  8783.,  9612., 10471., 11360., 10619., 11508., 12427., 13376., 12455., 13404., 14383., 15392., 10476., 11248., 12044., 12864.,  8609.,  9204.,  9817., 10448.,  9860., 10496., 11156., 11840., 13552., 14400., 15280., 16192., 17404., 18528., 19692., 20896., 19820., 21024., 22268., 23552., 22236., 23520., 24844., 26208., 24652., 26016., 27420., 28864., 19568., 20672., 21808., 22976., 14708., 15552., 16420., 17312.,  6247.,  6940.,  7663.,  8416.,  8820.,  9744., 10708., 11712., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 17220., 18448., 19716., 21024., 13323., 14260., 15227., 16224., 11335., 12124., 12943., 13792., 15348., 16400., 17492., 18624., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 21188., 22544., 23940., 25376., 15595., 16628., 17691., 18784.,  6247.,  6940.,  7663.,  8416.,  8820.,  9744., 10708., 11712., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 17220., 18448., 19716., 21024., 13323., 14260., 15227., 16224.,  8084.,  8672.,  9284.,  9920., 11056., 11840., 12656., 13504., 14124., 15168., 16252., 17376., 16220., 17344., 18508., 19712., 18316., 19520., 20764., 22048., 20412., 21696., 23020., 24384., 16048., 17088., 18160., 19264., 11972., 12768., 13588., 14432.,  4749.,  5196.,  5661.,  6144.,  6812.,  7408.,  8028.,  8672.,  9035.,  9780., 10555., 11360., 10775., 11580., 12415., 13280., 12515., 13380., 14275., 15200., 14255., 15180., 16135., 17120., 11148., 11888., 12652., 13440.,  8121.,  8676.,  9249.,  9840.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2973.,  3114.,  3554.,  3704.,  4171.,  4330.,  4824.,  4992.,  4196.,  4408.,  4992.,  5216.,  5836.,  6072.,  6728.,  6976.,  7519.,  7814.,  8594.,  8904.,  9729., 10054., 10924., 11264.,  9339.,  9694., 10534., 10904., 11789., 12174., 13104., 13504., 11159., 11574., 12474., 12904., 13849., 14294., 15284., 15744., 12979., 13454., 14414., 14904., 15909., 16414., 17464., 17984., 11524., 11928., 12736., 13152., 13996., 14424., 15304., 15744.,  8705.,  9026.,  9630.,  9960., 10591., 10930., 11588., 11936.,  8844.,  9096.,  9720.,  9984., 10644., 10920., 11616., 11904., 12464., 12832., 13696., 14080., 14992., 15392., 16352., 16768., 16068., 16568., 17720., 18240., 19452., 19992., 21264., 21824., 18516., 19096., 20328., 20928., 22220., 22840., 24192., 24832., 20964., 21624., 22936., 23616., 24988., 25688., 27120., 27840., 23412., 24152., 25544., 26304., 27756., 28536., 30048., 30848., 21488., 22112., 23296., 23936., 25168., 25824., 27104., 27776., 16636., 17128., 18056., 18560., 19524., 20040., 21040., 21568.,  5699.,  5966.,  6686.,  6968.,  7733.,  8030.,  8840.,  9152.,  9116.,  9512., 10496., 10912., 11956., 12392., 13496., 13952., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 20796., 21512., 22848., 23584., 24980., 25736., 27192., 27968., 17887., 18454., 19490., 20072., 21153., 21750., 22876., 23488., 11683., 12046., 12862., 13240., 14101., 14494., 15400., 15808., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 24508., 25352., 26816., 27680., 29204., 30088., 31672., 32576., 18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512.,  5699.,  5966.,  6686.,  6968.,  7733.,  8030.,  8840.,  9152.,  9116.,  9512., 10496., 10912., 11956., 12392., 13496., 13952., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 20796., 21512., 22848., 23584., 24980., 25736., 27192., 27968., 17887., 18454., 19490., 20072., 21153., 21750., 22876., 23488.,  7916.,  8168.,  8760.,  9024.,  9652.,  9928., 10592., 10880., 10352., 10720., 11520., 11904., 12752., 13152., 14048., 14464., 12644., 13144., 14200., 14720., 15836., 16376., 17552., 18112., 14708., 15288., 16424., 17024., 18220., 18840., 20096., 20736., 16772., 17432., 18648., 19328., 20604., 21304., 22640., 23360., 18836., 19576., 20872., 21632., 22988., 23768., 25184., 25984., 14448., 15072., 16128., 16768., 17872., 18528., 19680., 20352., 11164., 11656., 12488., 12992., 13860., 14376., 15280., 15808.,  3405.,  3546.,  3970.,  4120.,  4571.,  4730.,  5208.,  5376.,  6116.,  6328.,  6912.,  7136.,  7756.,  7992.,  8648.,  8896.,  8879.,  9174.,  9906., 10216., 10993., 11318., 12140., 12480., 10507., 10862., 11654., 12024., 12861., 13246., 14128., 14528., 12135., 12550., 13402., 13832., 14729., 15174., 16116., 16576., 13763., 14238., 15150., 15640., 16597., 17102., 18104., 18624., 12100., 12504., 13248., 13664., 14444., 14872., 15688., 16128., 11121., 11442., 12030., 12360., 12975., 13314., 13956., 14304.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4461.,  4602.,  4743.,  4884.,  5294.,  5444.,  5594.,  5744.,  6199.,  6358.,  6517.,  6676.,  7176.,  7344.,  7512.,  7680.,  5492.,  5704.,  5916.,  6128.,  6688.,  6912.,  7136.,  7360.,  7980.,  8216.,  8452.,  8688.,  9368.,  9616.,  9864., 10112.,  8343.,  8638.,  8933.,  9228.,  9966., 10276., 10586., 10896., 11709., 12034., 12359., 12684., 13572., 13912., 14252., 14592.,  9875., 10230., 10585., 10940., 11738., 12108., 12478., 12848., 13721., 14106., 14491., 14876., 15824., 16224., 16624., 17024., 11407., 11822., 12237., 12652., 13510., 13940., 14370., 14800., 15733., 16178., 16623., 17068., 18076., 18536., 18996., 19456., 12939., 13414., 13889., 14364., 15282., 15772., 16262., 16752., 17745., 18250., 18755., 19260., 20328., 20848., 21368., 21888., 10164., 10568., 10972., 11376., 12128., 12544., 12960., 13376., 14188., 14616., 15044., 15472., 16344., 16784., 17224., 17664.,  7041.,  7362.,  7683.,  8004.,  8562.,  8892.,  9222.,  9552., 10155., 10494., 10833., 11172., 11820., 12168., 12516., 12864.,  5788.,  6040.,  6292.,  6544.,  7144.,  7408.,  7672.,  7936.,  8596.,  8872.,  9148.,  9424., 10144., 10432., 10720., 11008.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 11988., 12488., 12988., 13488., 14568., 15088., 15608., 16128., 17308., 17848., 18388., 18928., 20208., 20768., 21328., 21888., 13988., 14568., 15148., 15728., 16888., 17488., 18088., 18688., 19948., 20568., 21188., 21808., 23168., 23808., 24448., 25088., 15988., 16648., 17308., 17968., 19208., 19888., 20568., 21248., 22588., 23288., 23988., 24688., 26128., 26848., 27568., 28288., 17988., 18728., 19468., 20208., 21528., 22288., 23048., 23808., 25228., 26008., 26788., 27568., 29088., 29888., 30688., 31488., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 11788., 12280., 12772., 13264., 14104., 14608., 15112., 15616., 16516., 17032., 17548., 18064., 19024., 19552., 20080., 20608.,  7099.,  7366.,  7633.,  7900.,  8610.,  8892.,  9174.,  9456., 10241., 10538., 10835., 11132., 11992., 12304., 12616., 12928.,  9836., 10232., 10628., 11024., 12000., 12416., 12832., 13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 18220., 18936., 19652., 20368., 21664., 22400., 23136., 23872., 25268., 26024., 26780., 27536., 29032., 29808., 30584., 31360., 14215., 14782., 15349., 15916., 16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224., 23836., 24448.,  8731.,  9094.,  9457.,  9820., 10626., 11004., 11382., 11760., 12641., 13034., 13427., 13820., 14776., 15184., 15592., 16000., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 21420., 22264., 23108., 23952., 25376., 26240., 27104., 27968., 29492., 30376., 31260., 32144., 33768., 34672., 35576., 36480., 14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080., 25788., 26496.,  7099.,  7366.,  7633.,  7900.,  8610.,  8892.,  9174.,  9456., 10241., 10538., 10835., 11132., 11992., 12304., 12616., 12928.,  9836., 10232., 10628., 11024., 12000., 12416., 12832., 13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 18220., 18936., 19652., 20368., 21664., 22400., 23136., 23872., 25268., 26024., 26780., 27536., 29032., 29808., 30584., 31360., 14215., 14782., 15349., 15916., 16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224., 23836., 24448.,  5788.,  6040.,  6292.,  6544.,  7144.,  7408.,  7672.,  7936.,  8596.,  8872.,  9148.,  9424., 10144., 10432., 10720., 11008.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 11988., 12488., 12988., 13488., 14568., 15088., 15608., 16128., 17308., 17848., 18388., 18928., 20208., 20768., 21328., 21888., 13988., 14568., 15148., 15728., 16888., 17488., 18088., 18688., 19948., 20568., 21188., 21808., 23168., 23808., 24448., 25088., 15988., 16648., 17308., 17968., 19208., 19888., 20568., 21248., 22588., 23288., 23988., 24688., 26128., 26848., 27568., 28288., 17988., 18728., 19468., 20208., 21528., 22288., 23048., 23808., 25228., 26008., 26788., 27568., 29088., 29888., 30688., 31488., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 11788., 12280., 12772., 13264., 14104., 14608., 15112., 15616., 16516., 17032., 17548., 18064., 19024., 19552., 20080., 20608.,  3021.,  3162.,  3303.,  3444.,  3822.,  3972.,  4122.,  4272.,  4695.,  4854.,  5013.,  5172.,  5640.,  5808.,  5976.,  6144.,  4980.,  5192.,  5404.,  5616.,  6176.,  6400.,  6624.,  6848.,  7468.,  7704.,  7940.,  8176.,  8856.,  9104.,  9352.,  9600.,  6775.,  7070.,  7365.,  7660.,  8366.,  8676.,  8986.,  9296., 10077., 10402., 10727., 11052., 11908., 12248., 12588., 12928.,  8179.,  8534.,  8889.,  9244., 10010., 10380., 10750., 11120., 11961., 12346., 12731., 13116., 14032., 14432., 14832., 15232.,  9583.,  9998., 10413., 10828., 11654., 12084., 12514., 12944., 13845., 14290., 14735., 15180., 16156., 16616., 17076., 17536., 10987., 11462., 11937., 12412., 13298., 13788., 14278., 14768., 15729., 16234., 16739., 17244., 18280., 18800., 19320., 19840., 10164., 10568., 10972., 11376., 12128., 12544., 12960., 13376., 14188., 14616., 15044., 15472., 16344., 16784., 17224., 17664.,  9121.,  9442.,  9763., 10084., 10674., 11004., 11334., 11664., 12299., 12638., 12977., 13316., 13996., 14344., 14692., 15040.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1554.,  2142.,  2760.,  3030.,  2460.,  1869.,  2636.,  3564.,  4510.,  4820.,  3860.,  2894.,  3850.,  5140.,  6425.,  6750.,  5350.,  3970.,  5110.,  6760.,  8375.,  8700.,  6850.,  5050.,  6370.,  8380., 10325., 10650.,  8350.,  6130.,  7630., 10000., 12275., 12600.,  9850.,  7210.,  5288.,  6868.,  8350.,  8560.,  6620.,  4790.,  3264.,  4182.,  5010.,  5130.,  3900.,  2769.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6425.,  6750.,  8375.,  8700., 10325., 10650., 12275., 12600.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3036.,  3108.,  4182.,  4284.,  5385.,  5520.,  5910.,  6060.,  4794.,  4920.,  3639.,  3738.,  5140.,  5272.,  6944.,  7128.,  8780.,  9020.,  9380.,  9640.,  7504.,  7720.,  5620.,  5788.,  7490.,  7700.,  9990., 10280., 12475., 12850., 13100., 13500., 10370., 10700.,  7685.,  7940.,  9920., 10220., 13110., 13520., 16225., 16750., 16850., 17400., 13250., 13700.,  9755., 10100., 12350., 12740., 16230., 16760., 19975., 20650., 20600., 21300., 16130., 16700., 11825., 12260., 14780., 15260., 19350., 20000., 23725., 24550., 24350., 25200., 19010., 19700., 13895., 14420., 10156., 10576., 13168., 13736., 15980., 16700., 16380., 17120., 12640., 13240.,  9124.,  9580.,  6186.,  6528.,  7902.,  8364.,  9435., 10020.,  9660., 10260.,  7314.,  7800.,  5169.,  5538.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12475., 12850., 13100., 13500., 16225., 16750., 16850., 17400., 19975., 20650., 20600., 21300., 23725., 24550., 24350., 25200.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6000.,  6072.,  6144.,  6216.,  8262.,  8364.,  8466.,  8568., 10635., 10770., 10905., 11040., 11670., 11820., 11970., 12120.,  9462.,  9588.,  9714.,  9840.,  7179.,  7278.,  7377.,  7476., 10148., 10280., 10412., 10544., 13704., 13888., 14072., 14256., 17320., 17560., 17800., 18040., 18500., 18760., 19020., 19280., 14792., 15008., 15224., 15440., 11072., 11240., 11408., 11576., 14770., 14980., 15190., 15400., 19690., 19980., 20270., 20560., 24575., 24950., 25325., 25700., 25800., 26200., 26600., 27000., 20410., 20740., 21070., 21400., 15115., 15370., 15625., 15880., 19540., 19840., 20140., 20440., 25810., 26220., 26630., 27040., 31925., 32450., 32975., 33500., 33150., 33700., 34250., 34800., 26050., 26500., 26950., 27400., 19165., 19510., 19855., 20200., 24310., 24700., 25090., 25480., 31930., 32460., 32990., 33520., 39275., 39950., 40625., 41300., 40500., 41200., 41900., 42600., 31690., 32260., 32830., 33400., 23215., 23650., 24085., 24520., 29080., 29560., 30040., 30520., 38050., 38700., 39350., 40000., 46625., 47450., 48275., 49100., 47850., 48700., 49550., 50400., 37330., 38020., 38710., 39400., 27265., 27790., 28315., 28840., 19892., 20312., 20732., 21152., 25768., 26336., 26904., 27472., 31240., 31960., 32680., 33400., 32020., 32760., 33500., 34240., 24680., 25280., 25880., 26480., 17792., 18248., 18704., 19160., 12030., 12372., 12714., 13056., 15342., 15804., 16266., 16728., 18285., 18870., 19455., 20040., 18720., 19320., 19920., 20520., 14142., 14628., 15114., 15600.,  9969., 10338., 10707., 11076.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24575., 24950., 25325., 25700., 25800., 26200., 26600., 27000., 31925., 32450., 32975., 33500., 33150., 33700., 34250., 34800., 39275., 39950., 40625., 41300., 40500., 41200., 41900., 42600., 46625., 47450., 48275., 49100., 47850., 48700., 49550., 50400.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5739.,  6216.,  7932.,  8568., 10245., 11040., 11295., 12120.,  9180.,  9840.,  6981.,  7476.,  9896., 10544., 13392., 14256., 16960., 18040., 18160., 19280., 14544., 15440., 10904., 11576., 14575., 15400., 19460., 20560., 24325., 25700., 25575., 27000., 20260., 21400., 15025., 15880., 19435., 20440., 25700., 27040., 31825., 33500., 33075., 34800., 26020., 27400., 19165., 20200., 24295., 25480., 31940., 33520., 39325., 41300., 40575., 42600., 31780., 33400., 23305., 24520., 29155., 30520., 38180., 40000., 46825., 49100., 48075., 50400., 37540., 39400., 27445., 28840., 20048., 21152., 26000., 27472., 31560., 33400., 32360., 34240., 24976., 26480., 18032., 19160., 12219., 13056., 15612., 16728., 18645., 20040., 19095., 20520., 14460., 15600., 10221., 11076.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24325., 25700., 25575., 27000., 31825., 33500., 33075., 34800., 39325., 41300., 40575., 42600., 46825., 49100., 48075., 50400.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3279.,  3414.,  3840.,  3984.,  4408.,  4600.,  5156.,  5360.,  6347.,  6602.,  7346.,  7616.,  7265.,  7550.,  8324.,  8624.,  5896.,  6136.,  6756.,  7008.,  4621.,  4810.,  5282.,  5480.,  6868.,  7120.,  7768.,  8032.,  9024.,  9376., 10224., 10592., 12660., 13120., 14224., 14704., 13868., 14368., 15512., 16032., 11072., 11488., 12400., 12832.,  8492.,  8816.,  9504.,  9840., 11465., 11870., 12716., 13136., 14808., 15368., 16476., 17056., 20213., 20938., 22362., 23112., 21511., 22286., 23760., 24560., 16904., 17544., 18716., 19376., 12723., 13218., 14098., 14608., 14285., 14806., 15768., 16304., 16936., 17608., 18828., 19520., 22433., 23266., 24798., 25656., 22387., 23206., 24724., 25568., 16920., 17544., 18700., 19344., 12951., 13434., 14302., 14800., 14929., 15438., 16388., 16912., 18680., 19336., 20540., 21216., 26061., 26874., 28386., 29224., 27295., 28094., 29592., 30416., 17960., 18568., 19708., 20336., 12923., 13394., 14250., 14736., 15317., 15814., 16752., 17264., 17352., 17992., 19180., 19840., 19705., 20498., 21990., 22808., 18123., 18902., 20380., 21184., 11832., 12424., 13548., 14160.,  8543.,  9002.,  9846., 10320.,  8292.,  8672.,  9400.,  9792.,  9024.,  9504., 10416., 10912., 10948., 11536., 12688., 13296., 10396., 10960., 12088., 12672.,  7104.,  7520.,  8368.,  8800.,  5404.,  5728.,  6368.,  6704.,  6163.,  6390.,  6932.,  7168.,  7400.,  7672.,  8340.,  8624.,  8679.,  9002.,  9790., 10128.,  9229.,  9518., 10272., 10576.,  7224.,  7416.,  7956.,  8160.,  5313.,  5466.,  5862.,  6024.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20213., 20938., 22362., 23112., 21511., 22286., 23760., 24560., 22433., 23266., 24798., 25656., 22387., 23206., 24724., 25568., 26061., 26874., 28386., 29224., 27295., 28094., 29592., 30416., 19705., 20498., 21990., 22808., 18123., 18902., 20380., 21184.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3991.,  4126.,  4261.,  4396.,  4848.,  4992.,  5136.,  5280.,  5616.,  5808.,  6000.,  6192.,  6780.,  6984.,  7188.,  7392.,  7895.,  8150.,  8405.,  8660.,  9430.,  9700.,  9970., 10240.,  8805.,  9090.,  9375.,  9660., 10460., 10760., 11060., 11360.,  8416.,  8656.,  8896.,  9136.,  9804., 10056., 10308., 10560.,  6109.,  6298.,  6487.,  6676.,  7166.,  7364.,  7562.,  7760.,  7468.,  7720.,  7972.,  8224.,  8872.,  9136.,  9400.,  9664., 10080., 10432., 10784., 11136., 12016., 12384., 12752., 13120., 13916., 14376., 14836., 15296., 16448., 16928., 17408., 17888., 15140., 15640., 16140., 16640., 17832., 18352., 18872., 19392., 14048., 14464., 14880., 15296., 16304., 16736., 17168., 17600., 10644., 10968., 11292., 11616., 12400., 12736., 13072., 13408., 11901., 12306., 12711., 13116., 14004., 14424., 14844., 15264., 16064., 16624., 17184., 17744., 18932., 19512., 20092., 20672., 21845., 22570., 23295., 24020., 25542., 26292., 27042., 27792., 23239., 24014., 24789., 25564., 27136., 27936., 28736., 29536., 20880., 21520., 22160., 22800., 24100., 24760., 25420., 26080., 15863., 16358., 16853., 17348., 18342., 18852., 19362., 19872., 16913., 17434., 17955., 18476., 19480., 20016., 20552., 21088., 18928., 19600., 20272., 20944., 22244., 22936., 23628., 24320., 23361., 24194., 25027., 25860., 27490., 28348., 29206., 30064., 22131., 22950., 23769., 24588., 26204., 27048., 27892., 28736., 16320., 16944., 17568., 18192., 19476., 20120., 20764., 21408., 13259., 13742., 14225., 14708., 15690., 16188., 16686., 17184., 13605., 14114., 14623., 15132., 16124., 16648., 17172., 17696., 17056., 17712., 18368., 19024., 20308., 20984., 21660., 22336., 23725., 24538., 25351., 26164., 27774., 28612., 29450., 30288., 25055., 25854., 26653., 27452., 29048., 29872., 30696., 31520., 17904., 18512., 19120., 19728., 20996., 21624., 22252., 22880., 14239., 14710., 15181., 15652., 16622., 17108., 17594., 18080., 13881., 14378., 14875., 15372., 16352., 16864., 17376., 17888., 17232., 17872., 18512., 19152., 20420., 21080., 21740., 22400., 20505., 21298., 22091., 22884., 24474., 25292., 26110., 26928., 20299., 21078., 21857., 22636., 24212., 25016., 25820., 26624., 17440., 18032., 18624., 19216., 20468., 21080., 21692., 22304., 14707., 15166., 15625., 16084., 17042., 17516., 17990., 18464.,  9996., 10376., 10756., 11136., 11880., 12272., 12664., 13056., 14240., 14720., 15200., 15680., 16624., 17120., 17616., 18112., 15292., 15880., 16468., 17056., 18240., 18848., 19456., 20064., 13188., 13752., 14316., 14880., 16040., 16624., 17208., 17792.,  7648.,  8064.,  8480.,  8896.,  9776., 10208., 10640., 11072.,  5492.,  5816.,  6140.,  6464.,  7152.,  7488.,  7824.,  8160.,  6147.,  6374.,  6601.,  6828.,  7356.,  7592.,  7828.,  8064.,  6592.,  6864.,  7136.,  7408.,  8076.,  8360.,  8644.,  8928.,  6987.,  7310.,  7633.,  7956.,  8746.,  9084.,  9422.,  9760.,  7225.,  7514.,  7803.,  8092.,  8848.,  9152.,  9456.,  9760.,  5872.,  6064.,  6256.,  6448.,  7004.,  7208.,  7412.,  7616.,  4905.,  5058.,  5211.,  5364.,  5802.,  5964.,  6126.,  6288.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21845., 22570., 23295., 24020., 25542., 26292., 27042., 27792., 23239., 24014., 24789., 25564., 27136., 27936., 28736., 29536., 23361., 24194., 25027., 25860., 27490., 28348., 29206., 30064., 22131., 22950., 23769., 24588., 26204., 27048., 27892., 28736., 23725., 24538., 25351., 26164., 27774., 28612., 29450., 30288., 25055., 25854., 26653., 27452., 29048., 29872., 30696., 31520., 20505., 21298., 22091., 22884., 24474., 25292., 26110., 26928., 20299., 21078., 21857., 22636., 24212., 25016., 25820., 26624.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6285.,  6828.,  7389.,  7968.,  8476.,  9200.,  9948., 10720., 10123., 11028., 11963., 12928., 10103., 11004., 11935., 12896.,  7980.,  8688.,  9420., 10176.,  6033.,  6548.,  7081.,  7632.,  7796.,  8480.,  9188.,  9920., 10672., 11584., 12528., 13504., 15884., 17024., 18204., 19424., 17724., 18880., 20076., 21312., 14896., 15808., 16752., 17728., 12228., 12896., 13588., 14304., 15223., 16060., 16927., 17824., 20404., 21520., 22676., 23872., 22433., 23828., 25273., 26768., 21637., 23068., 24549., 26080., 16036., 17168., 18340., 19552., 10755., 11588., 12451., 13344., 12799., 13740., 14711., 15712., 15572., 16784., 18036., 19328., 18041., 19524., 21057., 22640., 17181., 18636., 20141., 21696., 12484., 13584., 14724., 15904.,  9163.,  9972., 10811., 11680., 12039., 12956., 13903., 14880., 15476., 16656., 17876., 19136., 21457., 22900., 24393., 25936., 23157., 24572., 26037., 27552., 15076., 16144., 17252., 18400., 11155., 11940., 12755., 13600., 14863., 15756., 16679., 17632., 17428., 18576., 19764., 20992., 21097., 22564., 24081., 25648., 20813., 22316., 23869., 25472., 14468., 15632., 16836., 18080., 10971., 11860., 12779., 13728.,  9796., 10560., 11348., 12160., 11376., 12352., 13360., 14400., 15548., 16800., 18092., 19424., 16044., 17312., 18620., 19968., 12016., 12992., 14000., 15040.,  9556., 10304., 11076., 11872., 10621., 11244., 11885., 12544., 13532., 14320., 15132., 15968., 16539., 17492., 18475., 19488., 17959., 18908., 19887., 20896., 14124., 14832., 15564., 16320., 10401., 10932., 11481., 12048.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22433., 23828., 25273., 26768., 21637., 23068., 24549., 26080., 18041., 19524., 21057., 22640., 17181., 18636., 20141., 21696., 21457., 22900., 24393., 25936., 23157., 24572., 26037., 27552., 21097., 22564., 24081., 25648., 20813., 22316., 23869., 25472.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7701.,  7962.,  8522.,  8792.,  9379.,  9658., 10272., 10560., 10884., 11256., 12000., 12384., 13164., 13560., 14376., 14784., 15271., 15702., 16618., 17064., 18025., 18486., 19492., 19968., 13443., 13870., 14782., 15224., 16181., 16638., 17640., 18112.,  9668., 10008., 10752., 11104., 11884., 12248., 13064., 13440.,  6193.,  6434.,  6958.,  7208.,  7759.,  8018.,  8596.,  8864.,  7740.,  8040.,  8712.,  9024.,  9732., 10056., 10800., 11136., 10224., 10656., 11584., 12032., 13008., 13472., 14496., 14976., 14036., 14552., 15720., 16256., 17484., 18040., 19328., 19904., 15396., 15928., 17112., 17664., 18908., 19480., 20784., 21376., 14384., 14816., 15808., 16256., 17296., 17760., 18848., 19328., 12364., 12680., 13432., 13760., 14548., 14888., 15712., 16064., 13267., 13678., 14542., 14968., 15877., 16318., 17272., 17728., 18780., 19368., 20544., 21152., 22388., 23016., 24312., 24960., 21297., 22018., 23486., 24232., 25775., 26546., 28164., 28960., 21461., 22218., 23722., 24504., 26083., 26890., 28544., 29376., 19548., 20168., 21408., 22048., 23348., 24008., 25368., 26048., 15415., 15878., 16810., 17288., 18265., 18758., 19780., 20288., 15483., 15998., 16966., 17496., 18509., 19054., 20112., 20672., 18748., 19432., 20704., 21408., 22740., 23464., 24856., 25600., 23177., 23986., 25542., 26376., 28007., 28866., 30572., 31456., 23277., 24058., 25586., 26392., 27995., 28826., 30504., 31360., 15548., 16136., 17344., 17952., 19220., 19848., 21176., 21824., 10207., 10646., 11554., 12008., 12961., 13430., 14428., 14912., 12963., 13454., 14398., 14904., 15893., 16414., 17448., 17984., 16028., 16680., 17920., 18592., 19892., 20584., 21944., 22656., 20321., 21090., 22606., 23400., 24991., 25810., 27476., 28320., 21445., 22186., 23674., 24440., 26003., 26794., 28432., 29248., 15644., 16200., 17376., 17952., 19188., 19784., 21080., 21696., 12167., 12582., 13466., 13896., 14825., 15270., 16244., 16704., 13515., 13982., 14902., 15384., 16349., 16846., 17856., 18368., 17404., 18024., 19232., 19872., 21140., 21800., 23128., 23808., 22137., 22930., 24470., 25288., 26903., 27746., 29436., 30304., 23325., 24154., 25730., 26584., 28235., 29114., 30840., 31744., 21500., 22152., 23424., 24096., 25428., 26120., 27512., 28224., 17839., 18358., 19346., 19880., 20913., 21462., 22540., 23104., 11164., 11592., 12360., 12800., 13604., 14056., 14896., 15360., 15920., 16480., 17472., 18048., 19088., 19680., 20768., 21376., 18868., 19576., 20840., 21568., 22892., 23640., 25024., 25792., 17796., 18520., 19800., 20544., 21884., 22648., 24048., 24832., 11568., 12128., 13120., 13696., 14736., 15328., 16416., 17024.,  8940.,  9384., 10168., 10624., 11444., 11912., 12768., 13248.,  9341.,  9658., 10258., 10584., 11211., 11546., 12200., 12544., 11172., 11576., 12352., 12768., 13580., 14008., 14856., 15296., 12927., 13430., 14370., 14888., 15873., 16406., 17436., 17984., 13979., 14478., 15414., 15928., 16909., 17438., 18464., 19008., 11428., 11800., 12512., 12896., 13644., 14040., 14824., 15232.,  9561.,  9858., 10422., 10728., 11319., 11634., 12252., 12576.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21297., 22018., 23486., 24232., 25775., 26546., 28164., 28960., 21461., 22218., 23722., 24504., 26083., 26890., 28544., 29376., 23177., 23986., 25542., 26376., 28007., 28866., 30572., 31456., 23277., 24058., 25586., 26392., 27995., 28826., 30504., 31360., 20321., 21090., 22606., 23400., 24991., 25810., 27476., 28320., 21445., 22186., 23674., 24440., 26003., 26794., 28432., 29248., 22137., 22930., 24470., 25288., 26903., 27746., 29436., 30304., 23325., 24154., 25730., 26584., 28235., 29114., 30840., 31744.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7653.,  7914.,  8175.,  8436.,  8966.,  9236.,  9506.,  9776., 10351., 10630., 10909., 11188., 11808., 12096., 12384., 12672.,  9492.,  9864., 10236., 10608., 11328., 11712., 12096., 12480., 13260., 13656., 14052., 14448., 15288., 15696., 16104., 16512., 11935., 12366., 12797., 13228., 14102., 14548., 14994., 15440., 16389., 16850., 17311., 17772., 18796., 19272., 19748., 20224., 10331., 10758., 11185., 11612., 12482., 12924., 13366., 13808., 14753., 15210., 15667., 16124., 17144., 17616., 18088., 18560.,  6516.,  6856.,  7196.,  7536.,  8224.,  8576.,  8928.,  9280., 10028., 10392., 10756., 11120., 11928., 12304., 12680., 13056.,  4145.,  4386.,  4627.,  4868.,  5346.,  5596.,  5846.,  6096.,  6619.,  6878.,  7137.,  7396.,  7964.,  8232.,  8500.,  8768.,  8140.,  8440.,  8740.,  9040.,  9688., 10000., 10312., 10624., 11332., 11656., 11980., 12304., 13072., 13408., 13744., 14080., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200., 12516., 13032., 13548., 14064., 15160., 15696., 16232., 16768., 17964., 18520., 19076., 19632., 20928., 21504., 22080., 22656., 12404., 12936., 13468., 14000., 15112., 15664., 16216., 16768., 17980., 18552., 19124., 19696., 21008., 21600., 22192., 22784., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200.,  9564.,  9880., 10196., 10512., 11176., 11504., 11832., 12160., 12884., 13224., 13564., 13904., 14688., 15040., 15392., 15744.,  9291.,  9702., 10113., 10524., 11378., 11804., 12230., 12656., 13585., 14026., 14467., 14908., 15912., 16368., 16824., 17280., 14636., 15224., 15812., 16400., 17568., 18176., 18784., 19392., 20660., 21288., 21916., 22544., 23912., 24560., 25208., 25856., 17041., 17762., 18483., 19204., 20626., 21372., 22118., 22864., 24411., 25182., 25953., 26724., 28396., 29192., 29988., 30784., 18357., 19114., 19871., 20628., 22086., 22868., 23650., 24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640., 17868., 18488., 19108., 19728., 20928., 21568., 22208., 22848., 24148., 24808., 25468., 26128., 27528., 28208., 28888., 29568., 11423., 11886., 12349., 12812., 13686., 14164., 14642., 15120., 16069., 16562., 17055., 17548., 18572., 19080., 19588., 20096., 15155., 15670., 16185., 16700., 17658., 18188., 18718., 19248., 20281., 20826., 21371., 21916., 23024., 23584., 24144., 24704., 17036., 17720., 18404., 19088., 20352., 21056., 21760., 22464., 23828., 24552., 25276., 26000., 27464., 28208., 28952., 29696., 18665., 19474., 20283., 21092., 22602., 23436., 24270., 25104., 26739., 27598., 28457., 29316., 31076., 31960., 32844., 33728., 19917., 20698., 21479., 22260., 23742., 24548., 25354., 26160., 27767., 28598., 29429., 30260., 31992., 32848., 33704., 34560., 15020., 15608., 16196., 16784., 17952., 18560., 19168., 19776., 21044., 21672., 22300., 22928., 24296., 24944., 25592., 26240.,  9223.,  9662., 10101., 10540., 11390., 11844., 12298., 12752., 13677., 14146., 14615., 15084., 16084., 16568., 17052., 17536., 11675., 12166., 12657., 13148., 14082., 14588., 15094., 15600., 16609., 17130., 17651., 18172., 19256., 19792., 20328., 20864., 14188., 14840., 15492., 16144., 17376., 18048., 18720., 19392., 20724., 21416., 22108., 22800., 24232., 24944., 25656., 26368., 19137., 19906., 20675., 21444., 22914., 23708., 24502., 25296., 26891., 27710., 28529., 29348., 31068., 31912., 32756., 33600., 18341., 19082., 19823., 20564., 22006., 22772., 23538., 24304., 25871., 26662., 27453., 28244., 29936., 30752., 31568., 32384., 12172., 12728., 13284., 13840., 14976., 15552., 16128., 16704., 17940., 18536., 19132., 19728., 21064., 21680., 22296., 22912.,  9071.,  9486.,  9901., 10316., 11142., 11572., 12002., 12432., 13333., 13778., 14223., 14668., 15644., 16104., 16564., 17024., 10243., 10710., 11177., 11644., 12554., 13036., 13518., 14000., 14985., 15482., 15979., 16476., 17536., 18048., 18560., 19072., 15436., 16056., 16676., 17296., 18496., 19136., 19776., 20416., 21716., 22376., 23036., 23696., 25096., 25776., 26456., 27136., 20697., 21490., 22283., 23076., 24570., 25388., 26206., 27024., 28643., 29486., 30329., 31172., 32916., 33784., 34652., 35520., 19965., 20794., 21623., 22452., 23982., 24836., 25690., 26544., 28199., 29078., 29957., 30836., 32616., 33520., 34424., 35328., 16620., 17272., 17924., 18576., 19808., 20480., 21152., 21824., 23156., 23848., 24540., 25232., 26664., 27376., 28088., 28800., 12119., 12638., 13157., 13676., 14606., 15140., 15674., 16208., 17213., 17762., 18311., 18860., 19940., 20504., 21068., 21632., 11596., 12024., 12452., 12880., 13656., 14096., 14536., 14976., 15812., 16264., 16716., 17168., 18064., 18528., 18992., 19456., 16048., 16608., 17168., 17728., 18752., 19328., 19904., 20480., 21584., 22176., 22768., 23360., 24544., 25152., 25760., 26368., 18084., 18792., 19500., 20208., 21496., 22224., 22952., 23680., 25068., 25816., 26564., 27312., 28800., 29568., 30336., 31104., 17972., 18696., 19420., 20144., 21448., 22192., 22936., 23680., 25084., 25848., 26612., 27376., 28880., 29664., 30448., 31232., 14000., 14560., 15120., 15680., 16704., 17280., 17856., 18432., 19536., 20128., 20720., 21312., 22496., 23104., 23712., 24320.,  9948., 10392., 10836., 11280., 12072., 12528., 12984., 13440., 14292., 14760., 15228., 15696., 16608., 17088., 17568., 18048.,  8573.,  8890.,  9207.,  9524., 10078., 10404., 10730., 11056., 11655., 11990., 12325., 12660., 13304., 13648., 13992., 14336.,  9780., 10184., 10588., 10992., 11744., 12160., 12576., 12992., 13804., 14232., 14660., 15088., 15960., 16400., 16840., 17280., 10567., 11070., 11573., 12076., 12990., 13508., 14026., 14544., 15533., 16066., 16599., 17132., 18196., 18744., 19292., 19840., 10883., 11382., 11881., 12380., 13290., 13804., 14318., 14832., 15817., 16346., 16875., 17404., 18464., 19008., 19552., 20096.,  9364.,  9736., 10108., 10480., 11200., 11584., 11968., 12352., 13132., 13528., 13924., 14320., 15160., 15568., 15976., 16384.,  8585.,  8882.,  9179.,  9476., 10042., 10348., 10654., 10960., 11571., 11886., 12201., 12516., 13172., 13496., 13820., 14144.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17041., 17762., 18483., 19204., 20626., 21372., 22118., 22864., 24411., 25182., 25953., 26724., 28396., 29192., 29988., 30784., 18357., 19114., 19871., 20628., 22086., 22868., 23650., 24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640., 18665., 19474., 20283., 21092., 22602., 23436., 24270., 25104., 26739., 27598., 28457., 29316., 31076., 31960., 32844., 33728., 19917., 20698., 21479., 22260., 23742., 24548., 25354., 26160., 27767., 28598., 29429., 30260., 31992., 32848., 33704., 34560., 19137., 19906., 20675., 21444., 22914., 23708., 24502., 25296., 26891., 27710., 28529., 29348., 31068., 31912., 32756., 33600., 18341., 19082., 19823., 20564., 22006., 22772., 23538., 24304., 25871., 26662., 27453., 28244., 29936., 30752., 31568., 32384., 20697., 21490., 22283., 23076., 24570., 25388., 26206., 27024., 28643., 29486., 30329., 31172., 32916., 33784., 34652., 35520., 19965., 20794., 21623., 22452., 23982., 24836., 25690., 26544., 28199., 29078., 29957., 30836., 32616., 33520., 34424., 35328.};
  const std::array<int, 4> in_shape = {{ 1, 8, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1755.,  2404.,  3080.,  3350.,  3620.,  2920.,  2205.,  3008.,  4048.,  5100.,  5410.,  5720.,  4560.,  3404.,  4420.,  5880.,  7325.,  7650.,  7975.,  6300.,  4660.,  5890.,  7770.,  9600.,  9925., 10250.,  8050.,  5920.,  7360.,  9660., 11875., 12200., 12525.,  9800.,  7180.,  8830., 11550., 14150., 14475., 14800., 11550.,  8440.,  6122.,  7936.,  9630.,  9840., 10050.,  7760.,  5606.,  3780.,  4834.,  5780.,  5900.,  6020.,  4570.,  3240.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7325.,  7650.,  7975.,  9600.,  9925., 10250., 11875., 12200., 12525., 14150., 14475., 14800.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3429.,  3510.,  4694.,  4808.,  6010.,  6160.,  6535.,  6700.,  7060.,  7240.,  5690.,  5840.,  4293.,  4410.,  5866.,  6016.,  7888.,  8096.,  9930., 10200., 10530., 10820., 11130., 11440.,  8864.,  9120.,  6610.,  6808.,  8600.,  8840., 11430., 11760., 14225., 14650., 14850., 15300., 15475., 15950., 12210., 12600.,  9020.,  9320., 11435., 11780., 15070., 15540., 18600., 19200., 19225., 19850., 19850., 20500., 15570., 16100., 11435., 11840., 14270., 14720., 18710., 19320., 22975., 23750., 23600., 24400., 24225., 25050., 18930., 19600., 13850., 14360., 17105., 17660., 22350., 23100., 27350., 28300., 27975., 28950., 28600., 29600., 22290., 23100., 16265., 16880., 11758., 12244., 15216., 15872., 18430., 19260., 18830., 19680., 19230., 20100., 14816., 15520., 10678., 11212.,  7164.,  7560.,  9134.,  9668., 10885., 11560., 11110., 11800., 11335., 12040.,  8570.,  9140.,  6048.,  6480.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14225., 14650., 14850., 15300., 15475., 15950., 18600., 19200., 19225., 19850., 19850., 20500., 22975., 23750., 23600., 24400., 24225., 25050., 27350., 28300., 27975., 28950., 28600., 29600.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6777.,  6858.,  6939.,  7020.,  9274.,  9388.,  9502.,  9616., 11870., 12020., 12170., 12320., 12905., 13070., 13235., 13400., 13940., 14120., 14300., 14480., 11230., 11380., 11530., 11680.,  8469.,  8586.,  8703.,  8820., 11582., 11732., 11882., 12032., 15568., 15776., 15984., 16192., 19590., 19860., 20130., 20400., 20770., 21060., 21350., 21640., 21950., 22260., 22570., 22880., 17472., 17728., 17984., 18240., 13022., 13220., 13418., 13616., 16960., 17200., 17440., 17680., 22530., 22860., 23190., 23520., 28025., 28450., 28875., 29300., 29250., 29700., 30150., 30600., 30475., 30950., 31425., 31900., 24030., 24420., 24810., 25200., 17740., 18040., 18340., 18640., 22525., 22870., 23215., 23560., 29670., 30140., 30610., 31080., 36600., 37200., 37800., 38400., 37825., 38450., 39075., 39700., 39050., 39700., 40350., 41000., 30610., 31140., 31670., 32200., 22465., 22870., 23275., 23680., 28090., 28540., 28990., 29440., 36810., 37420., 38030., 38640., 45175., 45950., 46725., 47500., 46400., 47200., 48000., 48800., 47625., 48450., 49275., 50100., 37190., 37860., 38530., 39200., 27190., 27700., 28210., 28720., 33655., 34210., 34765., 35320., 43950., 44700., 45450., 46200., 53750., 54700., 55650., 56600., 54975., 55950., 56925., 57900., 56200., 57200., 58200., 59200., 43770., 44580., 45390., 46200., 31915., 32530., 33145., 33760., 23030., 23516., 24002., 24488., 29776., 30432., 31088., 31744., 36030., 36860., 37690., 38520., 36810., 37660., 38510., 39360., 37590., 38460., 39330., 40200., 28928., 29632., 30336., 31040., 20822., 21356., 21890., 22424., 13932., 14328., 14724., 15120., 17734., 18268., 18802., 19336., 21095., 21770., 22445., 23120., 21530., 22220., 22910., 23600., 21965., 22670., 23375., 24080., 16570., 17140., 17710., 18280., 11664., 12096., 12528., 12960.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {28025., 28450., 28875., 29300., 29250., 29700., 30150., 30600., 30475., 30950., 31425., 31900., 36600., 37200., 37800., 38400., 37825., 38450., 39075., 39700., 39050., 39700., 40350., 41000., 45175., 45950., 46725., 47500., 46400., 47200., 48000., 48800., 47625., 48450., 49275., 50100., 53750., 54700., 55650., 56600., 54975., 55950., 56925., 57900., 56200., 57200., 58200., 59200.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6525.,  7020.,  8956.,  9616., 11495., 12320., 12545., 13400., 13595., 14480., 10972., 11680.,  8289.,  8820., 11348., 12032., 15280., 16192., 19260., 20400., 20460., 21640., 21660., 22880., 17264., 18240., 12884., 13616., 16795., 17680., 22340., 23520., 27825., 29300., 29075., 30600., 30325., 31900., 23940., 25200., 17695., 18640., 22465., 23560., 29620., 31080., 36575., 38400., 37825., 39700., 39075., 41000., 30660., 32200., 22525., 23680., 28135., 29440., 36900., 38640., 45325., 47500., 46575., 48800., 47825., 50100., 37380., 39200., 27355., 28720., 33805., 35320., 44180., 46200., 54075., 56600., 55325., 57900., 56575., 59200., 44100., 46200., 32185., 33760., 23252., 24488., 30096., 31744., 36460., 38520., 37260., 39360., 38060., 40200., 29328., 31040., 21140., 22424., 14175., 15120., 18076., 19336., 21545., 23120., 21995., 23600., 22445., 24080., 16972., 18280., 11979., 12960.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {27825., 29300., 29075., 30600., 30325., 31900., 36575., 38400., 37825., 39700., 39075., 41000., 45325., 47500., 46575., 48800., 47825., 50100., 54075., 56600., 55325., 57900., 56575., 59200.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3681.,  3834.,  4278.,  4440.,  4896.,  5112.,  5692.,  5920.,  7025.,  7310.,  8084.,  8384.,  7943.,  8258.,  9062.,  9392.,  8861.,  9206., 10040., 10400.,  7128.,  7416.,  8084.,  8384.,  5537.,  5762.,  6270.,  6504.,  7816.,  8104.,  8788.,  9088., 10192., 10592., 11488., 11904., 14256., 14776., 15940., 16480., 15464., 16024., 17228., 17808., 16672., 17272., 18516., 19136., 13232., 13728., 14720., 15232., 10088., 10472., 11220., 11616., 13157., 13622., 14528., 15008., 16904., 17544., 18732., 19392., 20905., 21666., 23126., 23912., 20347., 21094., 22540., 23312., 20045., 20778., 22210., 22968., 15248., 15816., 16916., 17504., 10997., 11390., 12168., 12576., 13343., 13826., 14750., 15248., 17104., 17768., 18980., 19664., 23271., 24062., 25552., 26368., 23993., 24770., 26246., 27048., 24971., 25734., 27196., 27984., 20088., 20680., 21804., 22416., 11679., 12090., 12886., 13312., 17369., 17870., 18812., 19328., 22424., 23112., 24348., 25056., 23845., 24666., 26186., 27032., 21751., 22558., 24064., 24896., 19913., 20706., 22198., 23016., 13664., 14280., 15428., 16064.,  8009.,  8438.,  9252.,  9696., 12947., 13466., 14426., 14960., 16480., 17192., 18452., 19184., 18531., 19382., 20932., 21808., 17717., 18554., 20090., 20952., 17159., 17982., 19504., 20352., 12360., 13000., 14172., 14832.,  8179.,  8626.,  9458.,  9920.,  7912.,  8296.,  9028.,  9424., 10000., 10528., 11488., 12032., 12912., 13528., 14708., 15344., 13128., 13720., 14876., 15488., 13600., 14168., 15300., 15888., 10800., 11232., 12096., 12544.,  8456.,  8744.,  9348.,  9648.,  8559.,  8766.,  9288.,  9504., 11288., 11576., 12260., 12560., 13915., 14290., 15130., 15520., 14785., 15190., 16060., 16480., 15655., 16090., 16990., 17440., 12080., 12440., 13148., 13520.,  8703.,  8982.,  9504.,  9792.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20905., 21666., 23126., 23912., 20347., 21094., 22540., 23312., 20045., 20778., 22210., 22968., 23271., 24062., 25552., 26368., 23993., 24770., 26246., 27048., 24971., 25734., 27196., 27984., 23845., 24666., 26186., 27032., 21751., 22558., 24064., 24896., 19913., 20706., 22198., 23016., 18531., 19382., 20932., 21808., 17717., 18554., 20090., 20952., 17159., 17982., 19504., 20352.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4521.,  4674.,  4827.,  4980.,  5450.,  5612.,  5774.,  5936.,  6312.,  6528.,  6744.,  6960.,  7572.,  7800.,  8028.,  8256.,  8837.,  9122.,  9407.,  9692., 10492., 10792., 11092., 11392.,  9747., 10062., 10377., 10692., 11522., 11852., 12182., 12512., 10657., 11002., 11347., 11692., 12552., 12912., 13272., 13632., 10064., 10352., 10640., 10928., 11644., 11944., 12244., 12544.,  7265.,  7490.,  7715.,  7940.,  8466.,  8700.,  8934.,  9168.,  8560.,  8848.,  9136.,  9424., 10108., 10408., 10708., 11008., 11472., 11872., 12272., 12672., 13600., 14016., 14432., 14848., 15768., 16288., 16808., 17328., 18540., 19080., 19620., 20160., 16992., 17552., 18112., 18672., 19924., 20504., 21084., 21664., 18216., 18816., 19416., 20016., 21308., 21928., 22548., 23168., 16752., 17248., 17744., 18240., 19328., 19840., 20352., 20864., 12624., 13008., 13392., 13776., 14620., 15016., 15412., 15808., 13689., 14154., 14619., 15084., 16032., 16512., 16992., 17472., 18384., 19024., 19664., 20304., 21572., 22232., 22892., 23552., 24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 22603., 23350., 24097., 24844., 26388., 27160., 27932., 28704., 20861., 21594., 22327., 23060., 24590., 25348., 26106., 26864., 15336., 15904., 16472., 17040., 18268., 18856., 19444., 20032., 10849., 11242., 11635., 12028., 12920., 13328., 13736., 14144., 12763., 13246., 13729., 14212., 15178., 15676., 16174., 16672., 16584., 17248., 17912., 18576., 19868., 20552., 21236., 21920., 21495., 22286., 23077., 23868., 25456., 26272., 27088., 27904., 21801., 22578., 23355., 24132., 25706., 26508., 27310., 28112., 22619., 23382., 24145., 24908., 26468., 27256., 28044., 28832., 19616., 20208., 20800., 21392., 22644., 23256., 23868., 24480., 12707., 13118., 13529., 13940., 14850., 15276., 15702., 16128., 15421., 15922., 16423., 16924., 17908., 18424., 18940., 19456., 20928., 21616., 22304., 22992., 24308., 25016., 25724., 26432., 22741., 23562., 24383., 25204., 26822., 27668., 28514., 29360., 21511., 22318., 23125., 23932., 25536., 26368., 27200., 28032., 20793., 21586., 22379., 23172., 24762., 25580., 26398., 27216., 17752., 18368., 18984., 19600., 20876., 21512., 22148., 22784., 14053., 14482., 14911., 15340., 16268., 16712., 17156., 17600., 13471., 13990., 14509., 15028., 16030., 16564., 17098., 17632., 19128., 19840., 20552., 21264., 22604., 23336., 24068., 24800., 24499., 25350., 26201., 27052., 28700., 29576., 30452., 31328., 25829., 26666., 27503., 28340., 29974., 30836., 31698., 32560., 23575., 24398., 25221., 26044., 27664., 28512., 29360., 30208., 17936., 18576., 19216., 19856., 21156., 21816., 22476., 23136., 10791., 11238., 11685., 12132., 13078., 13540., 14002., 14464.,  9744., 10128., 10512., 10896., 11644., 12040., 12436., 12832., 11792., 12320., 12848., 13376., 14368., 14912., 15456., 16000., 13176., 13792., 14408., 15024., 16236., 16872., 17508., 18144., 12608., 13200., 13792., 14384., 15572., 16184., 16796., 17408., 12552., 13120., 13688., 14256., 15420., 16008., 16596., 17184.,  9648., 10080., 10512., 10944., 11840., 12288., 12736., 13184.,  7920.,  8208.,  8496.,  8784.,  9436.,  9736., 10036., 10336.,  6735.,  6942.,  7149.,  7356.,  7864.,  8080.,  8296.,  8512.,  9232.,  9520.,  9808., 10096., 10780., 11080., 11380., 11680., 11391., 11766., 12141., 12516., 13358., 13748., 14138., 14528., 12205., 12610., 13015., 13420., 14292., 14712., 15132., 15552., 13019., 13454., 13889., 14324., 15226., 15676., 16126., 16576., 10424., 10784., 11144., 11504., 12228., 12600., 12972., 13344.,  8487.,  8766.,  9045.,  9324.,  9888., 10176., 10464., 10752.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 22603., 23350., 24097., 24844., 26388., 27160., 27932., 28704., 20861., 21594., 22327., 23060., 24590., 25348., 26106., 26864., 21495., 22286., 23077., 23868., 25456., 26272., 27088., 27904., 21801., 22578., 23355., 24132., 25706., 26508., 27310., 28112., 22619., 23382., 24145., 24908., 26468., 27256., 28044., 28832., 22741., 23562., 24383., 25204., 26822., 27668., 28514., 29360., 21511., 22318., 23125., 23932., 25536., 26368., 27200., 28032., 20793., 21586., 22379., 23172., 24762., 25580., 26398., 27216., 24499., 25350., 26201., 27052., 28700., 29576., 30452., 31328., 25829., 26666., 27503., 28340., 29974., 30836., 31698., 32560., 23575., 24398., 25221., 26044., 27664., 28512., 29360., 30208.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4977.,  5492.,  6025.,  6576.,  5484.,  6128.,  6796.,  7488.,  8023.,  8860.,  9727., 10624.,  8515.,  9348., 10211., 11104.,  9263., 10092., 10951., 11840.,  8012.,  8688.,  9388., 10112.,  6777.,  7300.,  7841.,  8400.,  8860.,  9552., 10268., 11008., 11600., 12480., 13392., 14336., 18180., 19312., 20484., 21696., 20532., 21680., 22868., 24096., 19044., 20208., 21412., 22656., 15248., 16192., 17168., 18176., 11516., 12240., 12988., 13760., 14959., 15852., 16775., 17728., 17556., 18704., 19892., 21120., 19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824., 12020., 13072., 14164., 15296.,  8711.,  9468., 10255., 11072., 12003., 12932., 13891., 14880., 14372., 15568., 16804., 18080., 19013., 20476., 21989., 23552., 19433., 20868., 22353., 23888., 20365., 21772., 23229., 24736., 16836., 17936., 19076., 20256.,  9563., 10356., 11179., 12032., 16727., 17692., 18687., 19712., 21428., 22672., 23956., 25280., 23233., 24756., 26329., 27952., 22117., 23612., 25157., 26752., 19401., 20804., 22257., 23760., 13652., 14736., 15860., 17024.,  8303.,  9068.,  9863., 10688., 11083., 11956., 12859., 13792., 14788., 15952., 17156., 18400., 18621., 20076., 21581., 23136., 19105., 20596., 22137., 23728., 19013., 20476., 21989., 23552., 14628., 15760., 16932., 18144., 10691., 11492., 12323., 13184., 11276., 11984., 12716., 13472., 14992., 15936., 16912., 17920., 17812., 18992., 20212., 21472., 19076., 20272., 21508., 22784., 16948., 18096., 19284., 20512., 12880., 13760., 14672., 15616.,  9196.,  9808., 10444., 11104.,  6645.,  7164.,  7701.,  8256.,  9148.,  9840., 10556., 11296., 11715., 12580., 13475., 14400., 13455., 14380., 15335., 16320., 12827., 13748., 14699., 15680.,  9692., 10416., 11164., 11936.,  6685.,  7212.,  7757.,  8320.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824., 19013., 20476., 21989., 23552., 19433., 20868., 22353., 23888., 20365., 21772., 23229., 24736., 23233., 24756., 26329., 27952., 22117., 23612., 25157., 26752., 19401., 20804., 22257., 23760., 18621., 20076., 21581., 23136., 19105., 20596., 22137., 23728., 19013., 20476., 21989., 23552.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8697.,  8930.,  9462.,  9704., 10263., 10514., 11100., 11360.,  8564.,  8856.,  9520.,  9824., 10524., 10840., 11576., 11904., 10371., 10734., 11582., 11960., 12853., 13246., 14184., 14592.,  9567.,  9926., 10770., 11144., 12033., 12422., 13356., 13760.,  9275.,  9630., 10470., 10840., 11725., 12110., 13040., 13440.,  8228.,  8536.,  9248.,  9568., 10316., 10648., 11432., 11776.,  6393.,  6642.,  7174.,  7432.,  7991.,  8258.,  8844.,  9120.,  8324.,  8632.,  9312.,  9632., 10348., 10680., 11432., 11776., 10320., 10720., 11616., 12032., 12976., 13408., 14400., 14848., 16076., 16584., 17744., 18272., 19492., 20040., 21320., 21888., 18460., 18984., 20160., 20704., 21940., 22504., 23800., 24384., 17260., 17800., 18992., 19552., 20804., 21384., 22696., 23296., 16080., 16544., 17568., 18048., 19120., 19616., 20736., 21248., 12676., 13048., 13856., 14240., 15084., 15480., 16360., 16768., 13707., 14174., 15094., 15576., 16541., 17038., 18048., 18560., 17660., 18280., 19488., 20128., 21396., 22056., 23384., 24064., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 15180., 15720., 16880., 17440., 18660., 19240., 20520., 21120., 12171., 12558., 13414., 13816., 14717., 15134., 16080., 16512., 13391., 13894., 14850., 15368., 16369., 16902., 17948., 18496., 19180., 19848., 21104., 21792., 23108., 23816., 25192., 25920., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208., 20633., 21394., 22902., 23688., 25271., 26082., 27740., 28576., 20221., 20954., 22434., 23192., 24747., 25530., 27160., 27968., 18108., 18696., 19904., 20512., 21780., 22408., 23736., 24384., 10767., 11190., 12082., 12520., 13457., 13910., 14892., 15360., 16147., 16686., 17678., 18232., 19269., 19838., 20920., 21504., 20700., 21416., 22720., 23456., 24820., 25576., 27000., 27776., 22513., 23362., 24958., 25832., 27503., 28402., 30148., 31072., 22101., 22922., 24490., 25336., 26979., 27850., 29568., 30464., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 17388., 17960., 19152., 19744., 20996., 21608., 22920., 23552., 13395., 13790., 14654., 15064., 15973., 16398., 17352., 17792., 10583., 11030., 11930., 12392., 13337., 13814., 14804., 15296., 15436., 16072., 17296., 17952., 19236., 19912., 21256., 21952., 21805., 22586., 24114., 24920., 26523., 27354., 29032., 29888., 24529., 25346., 26910., 27752., 29391., 30258., 31972., 32864., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208., 16732., 17352., 18592., 19232., 20532., 21192., 22552., 23232., 10967., 11398., 12298., 12744., 13689., 14150., 15140., 15616., 11108., 11480., 12192., 12576., 13324., 13720., 14504., 14912., 14480., 15008., 15968., 16512., 17520., 18080., 19136., 19712., 15532., 16168., 17360., 18016., 19268., 19944., 21256., 21952., 15996., 16648., 17856., 18528., 19796., 20488., 21816., 22528., 13836., 14440., 15600., 16224., 17444., 18088., 19368., 20032., 10832., 11296., 12192., 12672., 13616., 14112., 15104., 15616.,  9124.,  9432., 10080., 10400., 11084., 11416., 12136., 12480.,  5333.,  5546.,  6042.,  6264.,  6787.,  7018.,  7568.,  7808.,  8644.,  8952.,  9632.,  9952., 10668., 11000., 11752., 12096., 11815., 12230., 13082., 13512., 14409., 14854., 15796., 16256., 13443., 13918., 14830., 15320., 16277., 16782., 17784., 18304., 14495., 14966., 15874., 16360., 17313., 17814., 18812., 19328., 13044., 13432., 14160., 14560., 15324., 15736., 16536., 16960.,  8277.,  8570.,  9130.,  9432., 10019., 10330., 10944., 11264.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208., 20633., 21394., 22902., 23688., 25271., 26082., 27740., 28576., 20221., 20954., 22434., 23192., 24747., 25530., 27160., 27968., 22513., 23362., 24958., 25832., 27503., 28402., 30148., 31072., 22101., 22922., 24490., 25336., 26979., 27850., 29568., 30464., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 21805., 22586., 24114., 24920., 26523., 27354., 29032., 29888., 24529., 25346., 26910., 27752., 29391., 30258., 31972., 32864., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8649.,  8882.,  9115.,  9348.,  9850., 10092., 10334., 10576., 11123., 11374., 11625., 11876., 12468., 12728., 12988., 13248.,  7492.,  7784.,  8076.,  8368.,  9008.,  9312.,  9616.,  9920., 10620., 10936., 11252., 11568., 12328., 12656., 12984., 13312.,  8091.,  8454.,  8817.,  9180.,  9986., 10364., 10742., 11120., 12001., 12394., 12787., 13180., 14136., 14544., 14952., 15360.,  8535.,  8894.,  9253.,  9612., 10414., 10788., 11162., 11536., 12413., 12802., 13191., 13580., 14532., 14936., 15340., 15744., 10003., 10358., 10713., 11068., 11866., 12236., 12606., 12976., 13849., 14234., 14619., 15004., 15952., 16352., 16752., 17152.,  7764.,  8072.,  8380.,  8688.,  9344.,  9664.,  9984., 10304., 11020., 11352., 11684., 12016., 12792., 13136., 13480., 13824.,  5561.,  5810.,  6059.,  6308.,  6794.,  7052.,  7310.,  7568.,  8099.,  8366.,  8633.,  8900.,  9476.,  9752., 10028., 10304.,  6996.,  7304.,  7612.,  7920.,  8576.,  8896.,  9216.,  9536., 10252., 10584., 10916., 11248., 12024., 12368., 12712., 13056.,  7952.,  8352.,  8752.,  9152., 10016., 10432., 10848., 11264., 12208., 12640., 13072., 13504., 14528., 14976., 15424., 15872., 12252., 12760., 13268., 13776., 14864., 15392., 15920., 16448., 17636., 18184., 18732., 19280., 20568., 21136., 21704., 22272., 14188., 14712., 15236., 15760., 16864., 17408., 17952., 18496., 19700., 20264., 20828., 21392., 22696., 23280., 23864., 24448., 13052., 13592., 14132., 14672., 15792., 16352., 16912., 17472., 18692., 19272., 19852., 20432., 21752., 22352., 22952., 23552., 11600., 12064., 12528., 12992., 13920., 14400., 14880., 15360., 16368., 16864., 17360., 17856., 18944., 19456., 19968., 20480.,  9108.,  9480.,  9852., 10224., 10944., 11328., 11712., 12096., 12876., 13272., 13668., 14064., 14904., 15312., 15720., 16128., 10371., 10838., 11305., 11772., 12682., 13164., 13646., 14128., 15113., 15610., 16107., 16604., 17664., 18176., 18688., 19200., 15436., 16056., 16676., 17296., 18496., 19136., 19776., 20416., 21716., 22376., 23036., 23696., 25096., 25776., 26456., 27136., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 12284., 12824., 13364., 13904., 15024., 15584., 16144., 16704., 17924., 18504., 19084., 19664., 20984., 21584., 22184., 22784., 10131., 10518., 10905., 11292., 12090., 12492., 12894., 13296., 14169., 14586., 15003., 15420., 16368., 16800., 17232., 17664., 13543., 14046., 14549., 15052., 15998., 16516., 17034., 17552., 18573., 19106., 19639., 20172., 21268., 21816., 22364., 22912., 18684., 19352., 20020., 20688., 21936., 22624., 23312., 24000., 25348., 26056., 26764., 27472., 28920., 29648., 30376., 31104., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 16925., 17658., 18391., 19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424., 29232., 30040., 30848., 16556., 17144., 17732., 18320., 19488., 20096., 20704., 21312., 22580., 23208., 23836., 24464., 25832., 26480., 27128., 27776.,  9335.,  9758., 10181., 10604., 11438., 11876., 12314., 12752., 13661., 14114., 14567., 15020., 16004., 16472., 16940., 17408., 14667., 15206., 15745., 16284., 17266., 17820., 18374., 18928., 19985., 20554., 21123., 21692., 22824., 23408., 23992., 24576., 17836., 18552., 19268., 19984., 21280., 22016., 22752., 23488., 24884., 25640., 26396., 27152., 28648., 29424., 30200., 30976., 18321., 19170., 20019., 20868., 22418., 23292., 24166., 25040., 26715., 27614., 28513., 29412., 31212., 32136., 33060., 33984., 18549., 19370., 20191., 21012., 22534., 23380., 24226., 25072., 26719., 27590., 28461., 29332., 31104., 32000., 32896., 33792., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 13596., 14168., 14740., 15312., 16464., 17056., 17648., 18240., 19492., 20104., 20716., 21328., 22680., 23312., 23944., 24576.,  8475.,  8870.,  9265.,  9660., 10466., 10876., 11286., 11696., 12577., 13002., 13427., 13852., 14808., 15248., 15688., 16128., 11567., 12014., 12461., 12908., 13798., 14260., 14722., 15184., 16149., 16626., 17103., 17580., 18620., 19112., 19604., 20096., 15836., 16472., 17108., 17744., 18960., 19616., 20272., 20928., 22244., 22920., 23596., 24272., 25688., 26384., 27080., 27776., 20045., 20826., 21607., 22388., 23870., 24676., 25482., 26288., 27895., 28726., 29557., 30388., 32120., 32976., 33832., 34688., 22385., 23202., 24019., 24836., 26354., 27196., 28038., 28880., 30523., 31390., 32257., 33124., 34892., 35784., 36676., 37568., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280., 14796., 15416., 16036., 16656., 17856., 18496., 19136., 19776., 21076., 21736., 22396., 23056., 24456., 25136., 25816., 26496.,  9727., 10158., 10589., 11020., 11862., 12308., 12754., 13200., 14117., 14578., 15039., 15500., 16492., 16968., 17444., 17920.,  8724.,  9096.,  9468.,  9840., 10560., 10944., 11328., 11712., 12492., 12888., 13284., 13680., 14520., 14928., 15336., 15744., 13200., 13728., 14256., 14784., 15776., 16320., 16864., 17408., 18480., 19040., 19600., 20160., 21312., 21888., 22464., 23040., 16604., 17240., 17876., 18512., 19728., 20384., 21040., 21696., 23012., 23688., 24364., 25040., 26456., 27152., 27848., 28544., 15468., 16120., 16772., 17424., 18656., 19328., 20000., 20672., 22004., 22696., 23388., 24080., 25512., 26224., 26936., 27648., 13244., 13848., 14452., 15056., 16240., 16864., 17488., 18112., 19396., 20040., 20684., 21328., 22712., 23376., 24040., 24704., 10576., 11040., 11504., 11968., 12896., 13376., 13856., 14336., 15344., 15840., 16336., 16832., 17920., 18432., 18944., 19456., 10196., 10504., 10812., 11120., 11776., 12096., 12416., 12736., 13452., 13784., 14116., 14448., 15224., 15568., 15912., 16256.,  4757.,  4970.,  5183.,  5396.,  5846.,  6068.,  6290.,  6512.,  7007.,  7238.,  7469.,  7700.,  8240.,  8480.,  8720.,  8960.,  7380.,  7688.,  7996.,  8304.,  8960.,  9280.,  9600.,  9920., 10636., 10968., 11300., 11632., 12408., 12752., 13096., 13440.,  9455.,  9870., 10285., 10700., 11526., 11956., 12386., 12816., 13717., 14162., 14607., 15052., 16028., 16488., 16948., 17408., 10859., 11334., 11809., 12284., 13170., 13660., 14150., 14640., 15601., 16106., 16611., 17116., 18152., 18672., 19192., 19712., 11175., 11646., 12117., 12588., 13470., 13956., 14442., 14928., 15885., 16386., 16887., 17388., 18420., 18936., 19452., 19968., 11300., 11688., 12076., 12464., 13200., 13600., 14000., 14400., 15196., 15608., 16020., 16432., 17288., 17712., 18136., 18560.,  6789.,  7082.,  7375.,  7668.,  8230.,  8532.,  8834.,  9136.,  9743., 10054., 10365., 10676., 11328., 11648., 11968., 12288.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 16925., 17658., 18391., 19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424., 29232., 30040., 30848., 18321., 19170., 20019., 20868., 22418., 23292., 24166., 25040., 26715., 27614., 28513., 29412., 31212., 32136., 33060., 33984., 18549., 19370., 20191., 21012., 22534., 23380., 24226., 25072., 26719., 27590., 28461., 29332., 31104., 32000., 32896., 33792., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 20045., 20826., 21607., 22388., 23870., 24676., 25482., 26288., 27895., 28726., 29557., 30388., 32120., 32976., 33832., 34688., 22385., 23202., 24019., 24836., 26354., 27196., 28038., 28880., 30523., 31390., 32257., 33124., 34892., 35784., 36676., 37568., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1956.,  2666.,  3400.,  3670.,  3940.,  4210.,  3380.,  2541.,  3380.,  4532.,  5690.,  6000.,  6310.,  6620.,  5260.,  3914.,  4990.,  6620.,  8225.,  8550.,  8875.,  9200.,  7250.,  5350.,  6670.,  8780., 10825., 11150., 11475., 11800.,  9250.,  6790.,  8350., 10940., 13425., 13750., 14075., 14400., 11250.,  8230., 10030., 13100., 16025., 16350., 16675., 17000., 13250.,  9670.,  6956.,  9004., 10910., 11120., 11330., 11540.,  8900.,  6422.,  4296.,  5486.,  6550.,  6670.,  6790.,  6910.,  5240.,  3711.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8225.,  8550.,  8875.,  9200., 10825., 11150., 11475., 11800., 13425., 13750., 14075., 14400., 16025., 16350., 16675., 17000.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3822.,  3912.,  5206.,  5332.,  6635.,  6800.,  7160.,  7340.,  7685.,  7880.,  8210.,  8420.,  6586.,  6760.,  4947.,  5082.,  6592.,  6760.,  8832.,  9064., 11080., 11380., 11680., 12000., 12280., 12620., 12880., 13240., 10224., 10520.,  7600.,  7828.,  9710.,  9980., 12870., 13240., 15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 14050., 14500., 10355., 10700., 12950., 13340., 17030., 17560., 20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600., 17890., 18500., 13115., 13580., 16190., 16700., 21190., 21880., 25975., 26850., 26600., 27500., 27225., 28150., 27850., 28800., 21730., 22500., 15875., 16460., 19430., 20060., 25350., 26200., 30975., 32050., 31600., 32700., 32225., 33350., 32850., 34000., 25570., 26500., 18635., 19340., 13360., 13912., 17264., 18008., 20880., 21820., 21280., 22240., 21680., 22660., 22080., 23080., 16992., 17800., 12232., 12844.,  8142.,  8592., 10366., 10972., 12335., 13100., 12560., 13340., 12785., 13580., 13010., 13820.,  9826., 10480.,  6927.,  7422.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600., 25975., 26850., 26600., 27500., 27225., 28150., 27850., 28800., 30975., 32050., 31600., 32700., 32225., 33350., 32850., 34000.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2178.,  2268.,  2358.,  2448.,  2862.,  2988.,  3114.,  3240.,  4081.,  4246.,  4411.,  4576.,  4540.,  4720.,  4900.,  5080.,  4999.,  5194.,  5389.,  5584.,  5458.,  5668.,  5878.,  6088.,  4358.,  4532.,  4706.,  4880.,  3359.,  3494.,  3629.,  3764.,  4568.,  4736.,  4904.,  5072.,  5912.,  6144.,  6376.,  6608.,  8228.,  8528.,  8828.,  9128.,  8832.,  9152.,  9472.,  9792.,  9436.,  9776., 10116., 10456., 10040., 10400., 10760., 11120.,  7928.,  8224.,  8520.,  8816.,  6012.,  6240.,  6468.,  6696.,  7630.,  7900.,  8170.,  8440.,  9754., 10124., 10494., 10864., 13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533., 15058., 15583., 16108., 15182., 15732., 16282., 16832., 11842., 12292., 12742., 13192.,  8845.,  9190.,  9535.,  9880., 10918., 11308., 11698., 12088., 13818., 14348., 14878., 15408., 18427., 19102., 19777., 20452., 19076., 19776., 20476., 21176., 19725., 20450., 21175., 21900., 20374., 21124., 21874., 22624., 15778., 16388., 16998., 17608., 11685., 12150., 12615., 13080., 14206., 14716., 15226., 15736., 17882., 18572., 19262., 19952., 23619., 24494., 25369., 26244., 24268., 25168., 26068., 26968., 24917., 25842., 26767., 27692., 25566., 26516., 27466., 28416., 19714., 20484., 21254., 22024., 14525., 15110., 15695., 16280., 17494., 18124., 18754., 19384., 21946., 22796., 23646., 24496., 28811., 29886., 30961., 32036., 29460., 30560., 31660., 32760., 30109., 31234., 32359., 33484., 30758., 31908., 33058., 34208., 23650., 24580., 25510., 26440., 17365., 18070., 18775., 19480., 15032., 15584., 16136., 16688., 18808., 19552., 20296., 21040., 25588., 26528., 27468., 28408., 26112., 27072., 28032., 28992., 26636., 27616., 28596., 29576., 27160., 28160., 29160., 30160., 21080., 21888., 22696., 23504., 15724., 16336., 16948., 17560., 15834., 16284., 16734., 17184., 20126., 20732., 21338., 21944., 23905., 24670., 25435., 26200., 24340., 25120., 25900., 26680., 24775., 25570., 26365., 27160., 25210., 26020., 26830., 27640., 18998., 19652., 20306., 20960., 13359., 13854., 14349., 14844.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533., 15058., 15583., 16108., 15182., 15732., 16282., 16832., 18427., 19102., 19777., 20452., 19076., 19776., 20476., 21176., 19725., 20450., 21175., 21900., 20374., 21124., 21874., 22624., 23619., 24494., 25369., 26244., 24268., 25168., 26068., 26968., 24917., 25842., 26767., 27692., 25566., 26516., 27466., 28416., 28811., 29886., 30961., 32036., 29460., 30560., 31660., 32760., 30109., 31234., 32359., 33484., 30758., 31908., 33058., 34208.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7311.,  7824.,  9980., 10664., 12745., 13600., 13795., 14680., 14845., 15760., 15895., 16840., 12764., 13520.,  9597., 10164., 12800., 13520., 17168., 18128., 21560., 22760., 22760., 24000., 23960., 25240., 25160., 26480., 19984., 21040., 14864., 15656.,  9991., 10744., 13444., 14448., 16925., 18180., 18175., 19480., 19425., 20780., 20675., 22080., 16356., 17480., 12109., 12952.,  9367., 10168., 12548., 13616., 15725., 17060., 16975., 18360., 18225., 19660., 19475., 20960., 15332., 16520., 11293., 12184., 10663., 11512., 14212., 15344., 17725., 19140., 18975., 20440., 20225., 21740., 21475., 23040., 16868., 18120., 12397., 13336., 13879., 14776., 18436., 19632., 22925., 24420., 24175., 25720., 25425., 27020., 26675., 28320., 20964., 22280., 15421., 16408.,  9560., 10160., 12688., 13488., 15760., 16760., 16560., 17600., 17360., 18440., 18160., 19280., 14224., 15120., 10424., 11096.,  6339.,  6816.,  8252.,  8888., 10045., 10840., 10495., 11320., 10945., 11800., 11395., 12280.,  8732.,  9440.,  6249.,  6780.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16925., 18180., 18175., 19480., 19425., 20780., 20675., 22080., 15725., 17060., 16975., 18360., 18225., 19660., 19475., 20960., 17725., 19140., 18975., 20440., 20225., 21740., 21475., 23040., 22925., 24420., 24175., 25720., 25425., 27020., 26675., 28320.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4083.,  4254.,  4716.,  4896.,  5384.,  5624.,  6228.,  6480.,  7703.,  8018.,  8822.,  9152.,  8621.,  8966.,  9800., 10160.,  9539.,  9914., 10778., 11168., 10457., 10862., 11756., 12176.,  8360.,  8696.,  9412.,  9760.,  6453.,  6714.,  7258.,  7528.,  8764.,  9088.,  9808., 10144., 11360., 11808., 12752., 13216., 15852., 16432., 17656., 18256., 17060., 17680., 18944., 19584., 18268., 18928., 20232., 20912., 19476., 20176., 21520., 22240., 15392., 15968., 17040., 17632., 11684., 12128., 12936., 13392.,  9281.,  9614., 10388., 10736., 12088., 12552., 13564., 14048., 17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 17304., 17928., 19084., 19728., 13303., 13786., 14654., 15152., 14129., 14510., 15332., 15728., 18424., 18952., 20028., 20576., 22509., 23194., 24578., 25288., 23807., 24542., 25976., 26736., 25105., 25890., 27374., 28184., 26403., 27238., 28772., 29632., 20312., 21000., 22220., 22928., 14695., 15226., 16142., 16688., 10529., 10958., 11828., 12272., 13496., 14088., 15228., 15840., 17213., 17978., 19442., 20232., 18511., 19326., 20840., 21680., 19809., 20674., 22238., 23128., 21107., 22022., 23636., 24576., 16152., 16904., 18188., 18960., 11735., 12314., 13278., 13872., 10769., 11246., 12164., 12656., 13688., 14344., 15548., 16224., 18317., 19162., 20706., 21576., 19615., 20510., 22104., 23024., 20913., 21858., 23502., 24472., 22211., 23206., 24900., 25920., 17112., 17928., 19276., 20112., 12615., 13242., 14254., 14896.,  9004.,  9328., 10000., 10336., 11616., 12064., 12944., 13408., 17116., 17696., 18840., 19440., 18164., 18784., 19968., 20608., 19212., 19872., 21096., 21776., 20260., 20960., 22224., 22944., 16160., 16736., 17744., 18336., 12468., 12912., 13672., 14128., 12363., 12678., 13308., 13632., 16072., 16504., 17332., 17776., 19535., 20090., 21110., 21680., 20405., 20990., 22040., 22640., 21275., 21890., 22970., 23600., 22145., 22790., 23900., 24560., 16936., 17464., 18340., 18880., 12093., 12498., 13146., 13560.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 22509., 23194., 24578., 25288., 23807., 24542., 25976., 26736., 25105., 25890., 27374., 28184., 26403., 27238., 28772., 29632., 17213., 17978., 19442., 20232., 18511., 19326., 20840., 21680., 19809., 20674., 22238., 23128., 21107., 22022., 23636., 24576., 18317., 19162., 20706., 21576., 19615., 20510., 22104., 23024., 20913., 21858., 23502., 24472., 22211., 23206., 24900., 25920.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5051.,  5222.,  5393.,  5564.,  6052.,  6232.,  6412.,  6592.,  7008.,  7248.,  7488.,  7728.,  8364.,  8616.,  8868.,  9120.,  9779., 10094., 10409., 10724., 11554., 11884., 12214., 12544., 10689., 11034., 11379., 11724., 12584., 12944., 13304., 13664., 11599., 11974., 12349., 12724., 13614., 14004., 14394., 14784., 12509., 12914., 13319., 13724., 14644., 15064., 15484., 15904., 11712., 12048., 12384., 12720., 13484., 13832., 14180., 14528.,  8421.,  8682.,  8943.,  9204.,  9766., 10036., 10306., 10576.,  9652.,  9976., 10300., 10624., 11344., 11680., 12016., 12352., 12864., 13312., 13760., 14208., 15184., 15648., 16112., 16576., 17620., 18200., 18780., 19360., 20632., 21232., 21832., 22432., 18844., 19464., 20084., 20704., 22016., 22656., 23296., 23936., 20068., 20728., 21388., 22048., 23400., 24080., 24760., 25440., 21292., 21992., 22692., 23392., 24784., 25504., 26224., 26944., 19456., 20032., 20608., 21184., 22352., 22944., 23536., 24128., 14604., 15048., 15492., 15936., 16840., 17296., 17752., 18208.,  8629.,  8962.,  9295.,  9628., 10444., 10792., 11140., 11488., 11232., 11696., 12160., 12624., 13716., 14200., 14684., 15168., 16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 17088., 17712., 18336., 18960., 20244., 20888., 21532., 22176., 13707., 14190., 14673., 15156., 16138., 16636., 17134., 17632., 12133., 12514., 12895., 13276., 14140., 14536., 14932., 15328., 16672., 17200., 17728., 18256., 19412., 19960., 20508., 21056., 20589., 21274., 21959., 22644., 24126., 24836., 25546., 26256., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 23377., 24162., 24947., 25732., 27314., 28124., 28934., 29744., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488., 20992., 21680., 22368., 23056., 24404., 25112., 25820., 26528., 16443., 16974., 17505., 18036., 19066., 19612., 20158., 20704., 11029., 11458., 11887., 12316., 13228., 13672., 14116., 14560., 15968., 16560., 17152., 17744., 18964., 19576., 20188., 20800., 21181., 21946., 22711., 23476., 25038., 25828., 26618., 27408., 22575., 23390., 24205., 25020., 26632., 27472., 28312., 29152., 23969., 24834., 25699., 26564., 28226., 29116., 30006., 30896., 25363., 26278., 27193., 28108., 29820., 30760., 31700., 32640., 22848., 23600., 24352., 25104., 26516., 27288., 28060., 28832., 18667., 19246., 19825., 20404., 21482., 22076., 22670., 23264., 13509., 13986., 14463., 14940., 15900., 16392., 16884., 17376., 17312., 17968., 18624., 19280., 20564., 21240., 21916., 22592., 22285., 23130., 23975., 24820., 26462., 27332., 28202., 29072., 23679., 24574., 25469., 26364., 28056., 28976., 29896., 30816., 25073., 26018., 26963., 27908., 29650., 30620., 31590., 32560., 26467., 27462., 28457., 29452., 31244., 32264., 33284., 34304., 22656., 23472., 24288., 25104., 26580., 27416., 28252., 29088., 16283., 16910., 17537., 18164., 19290., 19932., 20574., 21216.,  8404.,  8728.,  9052.,  9376., 10064., 10400., 10736., 11072., 10752., 11200., 11648., 12096., 13008., 13472., 13936., 14400., 15604., 16184., 16764., 17344., 18520., 19120., 19720., 20320., 16636., 17256., 17876., 18496., 19712., 20352., 20992., 21632., 17668., 18328., 18988., 19648., 20904., 21584., 22264., 22944., 18700., 19400., 20100., 20800., 22096., 22816., 23536., 24256., 14848., 15424., 16000., 16576., 17616., 18208., 18800., 19392., 12076., 12520., 12964., 13408., 14216., 14672., 15128., 15584., 10011., 10326., 10641., 10956., 11572., 11896., 12220., 12544., 13536., 13968., 14400., 14832., 15660., 16104., 16548., 16992., 16435., 16990., 17545., 18100., 19122., 19692., 20262., 20832., 17249., 17834., 18419., 19004., 20056., 20656., 21256., 21856., 18063., 18678., 19293., 19908., 20990., 21620., 22250., 22880., 18877., 19522., 20167., 20812., 21924., 22584., 23244., 23904., 14976., 15504., 16032., 16560., 17452., 17992., 18532., 19072., 12069., 12474., 12879., 13284., 13974., 14388., 14802., 15216.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 20589., 21274., 21959., 22644., 24126., 24836., 25546., 26256., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 23377., 24162., 24947., 25732., 27314., 28124., 28934., 29744., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488., 21181., 21946., 22711., 23476., 25038., 25828., 26618., 27408., 22575., 23390., 24205., 25020., 26632., 27472., 28312., 29152., 23969., 24834., 25699., 26564., 28226., 29116., 30006., 30896., 25363., 26278., 27193., 28108., 29820., 30760., 31700., 32640., 22285., 23130., 23975., 24820., 26462., 27332., 28202., 29072., 23679., 24574., 25469., 26364., 28056., 28976., 29896., 30816., 25073., 26018., 26963., 27908., 29650., 30620., 31590., 32560., 26467., 27462., 28457., 29452., 31244., 32264., 33284., 34304.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2325.,  2748.,  3189.,  3648.,  3516.,  4080.,  4668.,  5280.,  6947.,  7716.,  8515.,  9344.,  8783.,  9612., 10471., 11360., 10619., 11508., 12427., 13376., 12455., 13404., 14383., 15392., 10476., 11248., 12044., 12864.,  8609.,  9204.,  9817., 10448.,  9860., 10496., 11156., 11840., 13552., 14400., 15280., 16192., 17404., 18528., 19692., 20896., 19820., 21024., 22268., 23552., 22236., 23520., 24844., 26208., 24652., 26016., 27420., 28864., 19568., 20672., 21808., 22976., 14708., 15552., 16420., 17312.,  6247.,  6940.,  7663.,  8416.,  8820.,  9744., 10708., 11712., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 17220., 18448., 19716., 21024., 13323., 14260., 15227., 16224., 11335., 12124., 12943., 13792., 15348., 16400., 17492., 18624., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 21188., 22544., 23940., 25376., 15595., 16628., 17691., 18784.,  6247.,  6940.,  7663.,  8416.,  8820.,  9744., 10708., 11712., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 17220., 18448., 19716., 21024., 13323., 14260., 15227., 16224., 11335., 12124., 12943., 13792., 15348., 16400., 17492., 18624., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 21188., 22544., 23940., 25376., 15595., 16628., 17691., 18784.,  5780.,  6368.,  6980.,  7616.,  7984.,  8768.,  9584., 10432., 12332., 13376., 14460., 15584., 14428., 15552., 16716., 17920., 16524., 17728., 18972., 20256., 18620., 19904., 21228., 22592., 15024., 16064., 17136., 18240., 11716., 12512., 13332., 14176.,  7917.,  8460.,  9021.,  9600., 10780., 11504., 12252., 13024., 13675., 14580., 15515., 16480., 15415., 16380., 17375., 18400., 17155., 18180., 19235., 20320., 18895., 19980., 21095., 22240., 14604., 15472., 16364., 17280., 10521., 11172., 11841., 12528.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2973.,  3114.,  3554.,  3704.,  4171.,  4330.,  4824.,  4992.,  4196.,  4408.,  4992.,  5216.,  5836.,  6072.,  6728.,  6976.,  7519.,  7814.,  8594.,  8904.,  9729., 10054., 10924., 11264.,  9339.,  9694., 10534., 10904., 11789., 12174., 13104., 13504., 11159., 11574., 12474., 12904., 13849., 14294., 15284., 15744., 12979., 13454., 14414., 14904., 15909., 16414., 17464., 17984., 11524., 11928., 12736., 13152., 13996., 14424., 15304., 15744.,  8705.,  9026.,  9630.,  9960., 10591., 10930., 11588., 11936.,  8844.,  9096.,  9720.,  9984., 10644., 10920., 11616., 11904., 12464., 12832., 13696., 14080., 14992., 15392., 16352., 16768., 16068., 16568., 17720., 18240., 19452., 19992., 21264., 21824., 18516., 19096., 20328., 20928., 22220., 22840., 24192., 24832., 20964., 21624., 22936., 23616., 24988., 25688., 27120., 27840., 23412., 24152., 25544., 26304., 27756., 28536., 30048., 30848., 21488., 22112., 23296., 23936., 25168., 25824., 27104., 27776., 16636., 17128., 18056., 18560., 19524., 20040., 21040., 21568.,  5699.,  5966.,  6686.,  6968.,  7733.,  8030.,  8840.,  9152.,  9116.,  9512., 10496., 10912., 11956., 12392., 13496., 13952., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 20796., 21512., 22848., 23584., 24980., 25736., 27192., 27968., 17887., 18454., 19490., 20072., 21153., 21750., 22876., 23488., 11683., 12046., 12862., 13240., 14101., 14494., 15400., 15808., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 24508., 25352., 26816., 27680., 29204., 30088., 31672., 32576., 18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512.,  5699.,  5966.,  6686.,  6968.,  7733.,  8030.,  8840.,  9152.,  9116.,  9512., 10496., 10912., 11956., 12392., 13496., 13952., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 20796., 21512., 22848., 23584., 24980., 25736., 27192., 27968., 17887., 18454., 19490., 20072., 21153., 21750., 22876., 23488., 11683., 12046., 12862., 13240., 14101., 14494., 15400., 15808., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 24508., 25352., 26816., 27680., 29204., 30088., 31672., 32576., 18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512.,  5356.,  5608.,  6200.,  6464.,  7092.,  7368.,  8032.,  8320.,  8304.,  8672.,  9472.,  9856., 10704., 11104., 12000., 12416., 13156., 13656., 14712., 15232., 16348., 16888., 18064., 18624., 15220., 15800., 16936., 17536., 18732., 19352., 20608., 21248., 17284., 17944., 19160., 19840., 21116., 21816., 23152., 23872., 19348., 20088., 21384., 22144., 23500., 24280., 25696., 26496., 16496., 17120., 18176., 18816., 19920., 20576., 21728., 22400., 14748., 15240., 16072., 16576., 17444., 17960., 18864., 19392.,  7597.,  7834.,  8354.,  8600.,  9147.,  9402.,  9976., 10240.,  9828., 10168., 10880., 11232., 11980., 12344., 13128., 13504., 11855., 12310., 13202., 13672., 14609., 15094., 16076., 16576., 13483., 13998., 14950., 15480., 16477., 17022., 18064., 18624., 15111., 15686., 16698., 17288., 18345., 18950., 20052., 20672., 16739., 17374., 18446., 19096., 20213., 20878., 22040., 22720., 12740., 13272., 14144., 14688., 15596., 16152., 17096., 17664.,  9681., 10098., 10782., 11208., 11919., 12354., 13092., 13536.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4461.,  4602.,  4743.,  4884.,  5294.,  5444.,  5594.,  5744.,  6199.,  6358.,  6517.,  6676.,  7176.,  7344.,  7512.,  7680.,  5492.,  5704.,  5916.,  6128.,  6688.,  6912.,  7136.,  7360.,  7980.,  8216.,  8452.,  8688.,  9368.,  9616.,  9864., 10112.,  8343.,  8638.,  8933.,  9228.,  9966., 10276., 10586., 10896., 11709., 12034., 12359., 12684., 13572., 13912., 14252., 14592.,  9875., 10230., 10585., 10940., 11738., 12108., 12478., 12848., 13721., 14106., 14491., 14876., 15824., 16224., 16624., 17024., 11407., 11822., 12237., 12652., 13510., 13940., 14370., 14800., 15733., 16178., 16623., 17068., 18076., 18536., 18996., 19456., 12939., 13414., 13889., 14364., 15282., 15772., 16262., 16752., 17745., 18250., 18755., 19260., 20328., 20848., 21368., 21888., 10164., 10568., 10972., 11376., 12128., 12544., 12960., 13376., 14188., 14616., 15044., 15472., 16344., 16784., 17224., 17664.,  7041.,  7362.,  7683.,  8004.,  8562.,  8892.,  9222.,  9552., 10155., 10494., 10833., 11172., 11820., 12168., 12516., 12864.,  5788.,  6040.,  6292.,  6544.,  7144.,  7408.,  7672.,  7936.,  8596.,  8872.,  9148.,  9424., 10144., 10432., 10720., 11008.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 11988., 12488., 12988., 13488., 14568., 15088., 15608., 16128., 17308., 17848., 18388., 18928., 20208., 20768., 21328., 21888., 13988., 14568., 15148., 15728., 16888., 17488., 18088., 18688., 19948., 20568., 21188., 21808., 23168., 23808., 24448., 25088., 15988., 16648., 17308., 17968., 19208., 19888., 20568., 21248., 22588., 23288., 23988., 24688., 26128., 26848., 27568., 28288., 17988., 18728., 19468., 20208., 21528., 22288., 23048., 23808., 25228., 26008., 26788., 27568., 29088., 29888., 30688., 31488., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 11788., 12280., 12772., 13264., 14104., 14608., 15112., 15616., 16516., 17032., 17548., 18064., 19024., 19552., 20080., 20608.,  7099.,  7366.,  7633.,  7900.,  8610.,  8892.,  9174.,  9456., 10241., 10538., 10835., 11132., 11992., 12304., 12616., 12928.,  9836., 10232., 10628., 11024., 12000., 12416., 12832., 13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 18220., 18936., 19652., 20368., 21664., 22400., 23136., 23872., 25268., 26024., 26780., 27536., 29032., 29808., 30584., 31360., 14215., 14782., 15349., 15916., 16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224., 23836., 24448.,  8731.,  9094.,  9457.,  9820., 10626., 11004., 11382., 11760., 12641., 13034., 13427., 13820., 14776., 15184., 15592., 16000., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 21420., 22264., 23108., 23952., 25376., 26240., 27104., 27968., 29492., 30376., 31260., 32144., 33768., 34672., 35576., 36480., 14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080., 25788., 26496.,  7099.,  7366.,  7633.,  7900.,  8610.,  8892.,  9174.,  9456., 10241., 10538., 10835., 11132., 11992., 12304., 12616., 12928.,  9836., 10232., 10628., 11024., 12000., 12416., 12832., 13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 18220., 18936., 19652., 20368., 21664., 22400., 23136., 23872., 25268., 26024., 26780., 27536., 29032., 29808., 30584., 31360., 14215., 14782., 15349., 15916., 16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224., 23836., 24448.,  8731.,  9094.,  9457.,  9820., 10626., 11004., 11382., 11760., 12641., 13034., 13427., 13820., 14776., 15184., 15592., 16000., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 21420., 22264., 23108., 23952., 25376., 26240., 27104., 27968., 29492., 30376., 31260., 32144., 33768., 34672., 35576., 36480., 14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080., 25788., 26496.,  6812.,  7064.,  7316.,  7568.,  8168.,  8432.,  8696.,  8960.,  9620.,  9896., 10172., 10448., 11168., 11456., 11744., 12032.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 13012., 13512., 14012., 14512., 15592., 16112., 16632., 17152., 18332., 18872., 19412., 19952., 21232., 21792., 22352., 22912., 15012., 15592., 16172., 16752., 17912., 18512., 19112., 19712., 20972., 21592., 22212., 22832., 24192., 24832., 25472., 26112., 17012., 17672., 18332., 18992., 20232., 20912., 21592., 22272., 23612., 24312., 25012., 25712., 27152., 27872., 28592., 29312., 19012., 19752., 20492., 21232., 22552., 23312., 24072., 24832., 26252., 27032., 27812., 28592., 30112., 30912., 31712., 32512., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 12812., 13304., 13796., 14288., 15128., 15632., 16136., 16640., 17540., 18056., 18572., 19088., 20048., 20576., 21104., 21632.,  5165.,  5402.,  5639.,  5876.,  6350.,  6596.,  6842.,  7088.,  7607.,  7862.,  8117.,  8372.,  8936.,  9200.,  9464.,  9728.,  8180.,  8520.,  8860.,  9200.,  9888., 10240., 10592., 10944., 11692., 12056., 12420., 12784., 13592., 13968., 14344., 14720., 10519., 10974., 11429., 11884., 12750., 13220., 13690., 14160., 15101., 15586., 16071., 16556., 17572., 18072., 18572., 19072., 11923., 12438., 12953., 13468., 14394., 14924., 15454., 15984., 16985., 17530., 18075., 18620., 19696., 20256., 20816., 21376., 13327., 13902., 14477., 15052., 16038., 16628., 17218., 17808., 18869., 19474., 20079., 20684., 21820., 22440., 23060., 23680., 14731., 15366., 16001., 16636., 17682., 18332., 18982., 19632., 20753., 21418., 22083., 22748., 23944., 24624., 25304., 25984., 13364., 13896., 14428., 14960., 15840., 16384., 16928., 17472., 18412., 18968., 19524., 20080., 21080., 21648., 22216., 22784., 10241., 10658., 11075., 11492., 12178., 12604., 13030., 13456., 14187., 14622., 15057., 15492., 16268., 16712., 17156., 17600.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1554.,  2142.,  2760.,  3030.,  2460.,  1869.,  2636.,  3564.,  4510.,  4820.,  3860.,  2894.,  3850.,  5140.,  6425.,  6750.,  5350.,  3970.,  5110.,  6760.,  8375.,  8700.,  6850.,  5050.,  3632.,  4756.,  5830.,  6040.,  4700.,  3422.,  2292.,  2958.,  3570.,  3690.,  2820.,  2013.,  7710., 10134., 12480., 12750., 10020.,  7377.,  9764., 12780., 15670., 15980., 12500.,  9158., 11410., 14860., 18125., 18450., 14350., 10450., 12670., 16480., 20075., 20400., 15850., 11530.,  8600., 11092., 13390., 13600., 10460.,  7526.,  5208.,  6630.,  7890.,  8010.,  6060.,  4281., 13866., 18126., 22200., 22470., 17580., 12885., 16892., 21996., 26830., 27140., 21140., 15422., 18970., 24580., 29825., 30150., 23350., 16930., 20230., 26200., 31775., 32100., 24850., 18010., 13568., 17428., 20950., 21160., 16220., 11630.,  8124., 10302., 12210., 12330.,  9300.,  6549.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6425.,  6750.,  8375.,  8700., 18125., 18450., 20075., 20400., 29825., 30150., 31775., 32100.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3036.,  3108.,  4182.,  4284.,  5385.,  5520.,  5910.,  6060.,  4794.,  4920.,  3639.,  3738.,  5140.,  5272.,  6944.,  7128.,  8780.,  9020.,  9380.,  9640.,  7504.,  7720.,  5620.,  5788.,  7490.,  7700.,  9990., 10280., 12475., 12850., 13100., 13500., 10370., 10700.,  7685.,  7940.,  9920., 10220., 13110., 13520., 16225., 16750., 16850., 17400., 13250., 13700.,  9755., 10100.,  6988.,  7264.,  9136.,  9512., 11180., 11660., 11580., 12080.,  8992.,  9400.,  6532.,  6844.,  4350.,  4584.,  5598.,  5916.,  6735.,  7140.,  6960.,  7380.,  5298.,  5640.,  3765.,  4026., 15024., 15420., 19734., 20268., 24285., 24960., 24810., 25500., 19482., 20040., 14331., 14754., 18964., 19528., 24800., 25560., 30380., 31340., 30980., 31960., 24208., 25000., 17716., 18316., 22070., 22820., 28710., 29720., 34975., 36250., 35600., 36900., 27650., 28700., 20105., 20900., 24500., 25340., 31830., 32960., 38725., 40150., 39350., 40800., 30530., 31700., 22175., 23060., 16492., 17200., 21232., 22184., 25580., 26780., 25980., 27200., 19936., 20920., 14308., 15052.,  9858., 10416., 12510., 13260., 14835., 15780., 15060., 16020., 11346., 12120.,  7977.,  8562., 27012., 27732., 35286., 36252., 43185., 44400., 43710., 44940., 34170., 35160., 25023., 25770., 32788., 33784., 42656., 43992., 51980., 53660., 52580., 54280., 40912., 42280., 29812., 30844., 36650., 37940., 47430., 49160., 57475., 59650., 58100., 60300., 44930., 46700., 32525., 33860., 39080., 40460., 50550., 52400., 61225., 63550., 61850., 64200., 47810., 49700., 34595., 36020., 25996., 27136., 33328., 34856., 39980., 41900., 40380., 42320., 30880., 32440., 22084., 23260., 15366., 16248., 19422., 20604., 22935., 24420., 23160., 24660., 17394., 18600., 12189., 13098.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12475., 12850., 13100., 13500., 16225., 16750., 16850., 17400., 34975., 36250., 35600., 36900., 38725., 40150., 39350., 40800., 57475., 59650., 58100., 60300., 61225., 63550., 61850., 64200.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1776.,  1848.,  1920.,  1992.,  2374.,  2476.,  2578.,  2680.,  3403.,  3538.,  3673.,  3808.,  3862.,  4012.,  4162.,  4312.,  3126.,  3252.,  3378.,  3504.,  2443.,  2542.,  2641.,  2740.,  3620.,  3752.,  3884.,  4016.,  4744.,  4928.,  5112.,  5296.,  6632.,  6872.,  7112.,  7352.,  7236.,  7496.,  7756.,  8016.,  5768.,  5984.,  6200.,  6416.,  4416.,  4584.,  4752.,  4920.,  5938.,  6148.,  6358.,  6568.,  7658.,  7948.,  8238.,  8528., 10431., 10806., 11181., 11556., 11080., 11480., 11880., 12280.,  8698.,  9028.,  9358.,  9688.,  6539.,  6794.,  7049.,  7304.,  8404.,  8704.,  9004.,  9304., 10706., 11116., 11526., 11936., 14325., 14850., 15375., 15900., 14974., 15524., 16074., 16624., 11650., 12100., 12550., 13000.,  8669.,  9014.,  9359.,  9704.,  7556.,  7832.,  8108.,  8384.,  9576.,  9952., 10328., 10704., 13304., 13784., 14264., 14744., 13828., 14328., 14828., 15328., 10856., 11264., 11672., 12080.,  8208.,  8520.,  8832.,  9144.,  8466.,  8700.,  8934.,  9168., 10878., 11196., 11514., 11832., 13065., 13470., 13875., 14280., 13500., 13920., 14340., 14760., 10254., 10596., 10938., 11280.,  7269.,  7530.,  7791.,  8052., 11604., 12000., 12396., 12792., 14614., 15148., 15682., 16216., 19927., 20602., 21277., 21952., 20386., 21076., 21766., 22456., 15942., 16500., 17058., 17616., 11983., 12406., 12829., 13252., 17012., 17576., 18140., 18704., 21448., 22208., 22968., 23728., 28376., 29336., 30296., 31256., 28980., 29960., 30940., 31920., 22472., 23264., 24056., 24848., 16656., 17256., 17856., 18456., 20734., 21484., 22234., 22984., 25946., 26956., 27966., 28976., 31683., 32894., 34105., 35316., 30476., 31648., 32820., 33992., 22954., 23876., 24798., 25720., 16375., 17042., 17709., 18376., 17632., 18280., 18928., 19576., 22082., 22956., 23830., 24704., 28857., 29898., 30939., 31980., 28930., 29932., 30934., 31936., 22578., 23364., 24150., 24936., 17033., 17598., 18163., 18728., 17492., 18008., 18524., 19040., 22184., 22880., 23576., 24272., 22824., 23640., 24456., 25272., 19956., 20728., 21500., 22272., 13864., 14464., 15064., 15664.,  8416.,  8840.,  9264.,  9688.,  8982.,  9348.,  9714., 10080., 11214., 11708., 12202., 12696., 10677., 11238., 11799., 12360.,  9000.,  9512., 10024., 10536.,  5918.,  6308.,  6698.,  7088.,  3273.,  3538.,  3803.,  4068.,  3960.,  4104.,  4248.,  4392.,  5094.,  5292.,  5490.,  5688.,  7075.,  7330.,  7585.,  7840.,  7534.,  7804.,  8074.,  8344.,  5974.,  6196.,  6418.,  6640.,  4563.,  4734.,  4905.,  5076.,  6596.,  6824.,  7052.,  7280.,  8456.,  8768.,  9080.,  9392., 11464., 11864., 12264., 12664., 12068., 12488., 12908., 13328.,  9480.,  9824., 10168., 10512.,  7136.,  7400.,  7664.,  7928.,  9226.,  9556.,  9886., 10216., 11722., 12172., 12622., 13072., 15623., 16198., 16773., 17348., 16272., 16872., 17472., 18072., 12634., 13124., 13614., 14104.,  9379.,  9754., 10129., 10504., 11692., 12112., 12532., 12952., 14770., 15340., 15910., 16480., 19517., 20242., 20967., 21692., 20166., 20916., 21666., 22416., 15586., 16196., 16806., 17416., 11509., 11974., 12439., 12904., 10148., 10520., 10892., 11264., 12776., 13280., 13784., 14288., 17496., 18136., 18776., 19416., 18020., 18680., 19340., 20000., 14056., 14592., 15128., 15664., 10544., 10952., 11360., 11768., 10842., 11148., 11454., 11760., 13854., 14268., 14682., 15096., 16545., 17070., 17595., 18120., 16980., 17520., 18060., 18600., 12846., 13284., 13722., 14160.,  9069.,  9402.,  9735., 10068.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10431., 10806., 11181., 11556., 11080., 11480., 11880., 12280., 14325., 14850., 15375., 15900., 14974., 15524., 16074., 16624., 31683., 32894., 34105., 35316., 30476., 31648., 32820., 33992., 28857., 29898., 30939., 31980., 28930., 29932., 30934., 31936., 15623., 16198., 16773., 17348., 16272., 16872., 17472., 18072., 19517., 20242., 20967., 21692., 20166., 20916., 21666., 22416.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5739.,  6216.,  7932.,  8568., 10245., 11040., 11295., 12120.,  9180.,  9840.,  6981.,  7476.,  9896., 10544., 13392., 14256., 16960., 18040., 18160., 19280., 14544., 15440., 10904., 11576., 14575., 15400., 19460., 20560., 24325., 25700., 25575., 27000., 20260., 21400., 15025., 15880., 16299., 17240., 19556., 20768., 22801., 24284., 21299., 22768., 14756., 15880., 10909., 11752., 11216., 11968., 13072., 14032., 14856., 16024., 13544., 14688.,  8976.,  9840.,  6512.,  7160.,  6691.,  7248.,  7420.,  8120.,  8061.,  8904.,  7039.,  7848.,  4284.,  4880.,  2997.,  3444.,  8403.,  8952., 11388., 12120., 14445., 15360., 15495., 16440., 12444., 13200.,  9357.,  9924., 12968., 13712., 17360., 18352., 21760., 23000., 22960., 24240., 18256., 19280., 13592., 14360., 17815., 18760., 23620., 24880., 26189., 27700., 24431., 25928., 18212., 19384., 12153., 13000., 13651., 14584., 18084., 19328., 19929., 21420., 18811., 20288., 13988., 15144.,  9317., 10152.,  8720.,  9440., 11408., 12368., 12104., 13240., 11176., 12288.,  8080.,  8944.,  5168.,  5784.,  4587.,  5088.,  5884.,  6552.,  5829.,  6600.,  5191.,  5928.,  3580.,  4144.,  2141.,  2532., 11067., 11688., 14844., 15672., 18645., 19680., 19695., 20760., 15708., 16560., 11733., 12372., 16040., 16880., 21328., 22448., 26560., 27960., 27760., 29200., 21968., 23120., 16280., 17144., 12031., 12904., 16004., 17168., 19925., 21380., 21175., 22680., 16676., 17880., 12289., 13192.,  9787., 10648., 13028., 14176., 16225., 17660., 17475., 18960., 13732., 14920., 10093., 10984.,  5648.,  6272.,  7440.,  8272.,  9160., 10200.,  9960., 11040.,  7696.,  8560.,  5552.,  6200.,  2547.,  2928.,  3324.,  3832.,  4045.,  4680.,  4495.,  5160.,  3388.,  3920.,  2373.,  2772.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24325., 25700., 25575., 27000., 22801., 24284., 21299., 22768., 26189., 27700., 24431., 25928., 19929., 21420., 18811., 20288., 19925., 21380., 21175., 22680., 16225., 17660., 17475., 18960.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3279.,  3414.,  3840.,  3984.,  4408.,  4600.,  5156.,  5360.,  6347.,  6602.,  7346.,  7616.,  7265.,  7550.,  8324.,  8624.,  5896.,  6136.,  6756.,  7008.,  4621.,  4810.,  5282.,  5480.,  6868.,  7120.,  7768.,  8032.,  9024.,  9376., 10224., 10592., 12660., 13120., 14224., 14704., 13868., 14368., 15512., 16032., 11072., 11488., 12400., 12832.,  8492.,  8816.,  9504.,  9840., 11465., 11870., 12716., 13136., 14808., 15368., 16476., 17056., 20213., 20938., 22362., 23112., 21511., 22286., 23760., 24560., 16904., 17544., 18716., 19376., 12723., 13218., 14098., 14608., 14285., 14806., 15768., 16304., 16936., 17608., 18828., 19520., 22433., 23266., 24798., 25656., 22387., 23206., 24724., 25568., 16920., 17544., 18700., 19344., 12951., 13434., 14302., 14800., 13956., 14432., 15256., 15744., 17344., 17952., 18992., 19616., 24356., 25104., 26416., 27184., 25340., 26064., 27352., 28096., 16448., 16992., 17968., 18528., 11836., 12256., 12992., 13424., 12987., 13382., 14092., 14496., 14344., 14840., 15732., 16240., 15519., 16122., 17190., 17808., 13509., 14078., 15112., 15696.,  8152.,  8568.,  9332.,  9760.,  5673.,  5994.,  6558.,  6888.,  5463.,  5670.,  6168.,  6384.,  7128.,  7416.,  8068.,  8368., 10019., 10394., 11258., 11648., 10937., 11342., 12236., 12656.,  8744.,  9080.,  9796., 10144.,  6741.,  7002.,  7546.,  7816.,  9844., 10192., 10936., 11296., 12736., 13216., 14192., 14688., 17492., 18112., 19376., 20016., 18700., 19360., 20664., 21344., 14784., 15328., 16368., 16928., 11212., 11632., 12416., 12848., 14753., 15278., 16244., 16784., 18872., 19592., 20860., 21600., 23293., 24154., 25714., 26600., 22735., 23582., 25128., 26000., 17384., 18056., 19260., 19952., 12619., 13106., 13978., 14480., 14117., 14630., 15584., 16112., 18056., 18760., 20012., 20736., 24361., 25202., 26742., 27608., 25083., 25910., 27436., 28288., 19960., 20616., 21804., 22480., 15407., 15882., 16742., 17232., 15652., 16096., 16888., 17344., 20160., 20768., 21808., 22432., 20932., 21648., 22928., 23664., 18588., 19280., 20536., 21248., 13120., 13664., 14640., 15200.,  8156.,  8544.,  9248.,  9648.,  8835.,  9174.,  9828., 10176., 11304., 11768., 12628., 13104., 11127., 11658., 12654., 13200.,  9885., 10382., 11344., 11856.,  6776.,  7160.,  7892.,  8288.,  4017.,  4282.,  4790.,  5064.,  7647.,  7926.,  8496.,  8784.,  9848., 10232., 10980., 11376., 13691., 14186., 15170., 15680., 14609., 15134., 16148., 16688., 11592., 12024., 12836., 13280.,  8861.,  9194.,  9810., 10152., 12820., 13264., 14104., 14560., 16448., 17056., 18160., 18784., 22324., 23104., 24528., 25328., 23532., 24352., 25816., 26656., 18496., 19168., 20336., 21024., 13932., 14448., 15328., 15856., 12473., 12926., 13820., 14288., 16024., 16648., 17820., 18464., 22597., 23402., 24906., 25736., 23895., 24750., 26304., 27184., 18888., 19592., 20828., 21552., 14371., 14914., 15842., 16400., 15677., 16118., 17000., 17456., 20328., 20936., 22092., 22720., 24689., 25474., 26958., 27768., 25987., 26822., 28356., 29216., 19928., 20616., 21836., 22544., 14343., 14874., 15790., 16336.,  8068.,  8416.,  9112.,  9472., 10304., 10784., 11696., 12192., 13092., 13712., 14896., 15536., 14140., 14800., 16024., 16704., 10816., 11360., 12336., 12896.,  7868.,  8288.,  9024.,  9456.,  4875.,  5094.,  5628.,  5856.,  6344.,  6648.,  7348.,  7664.,  7695.,  8090.,  8950.,  9360.,  8565.,  8990.,  9880., 10320.,  6424.,  6776.,  7476.,  7840.,  4473.,  4746.,  5262.,  5544.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20213., 20938., 22362., 23112., 21511., 22286., 23760., 24560., 22433., 23266., 24798., 25656., 22387., 23206., 24724., 25568., 23293., 24154., 25714., 26600., 22735., 23582., 25128., 26000., 24361., 25202., 26742., 27608., 25083., 25910., 27436., 28288., 22597., 23402., 24906., 25736., 23895., 24750., 26304., 27184., 24689., 25474., 26958., 27768., 25987., 26822., 28356., 29216.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3991.,  4126.,  4261.,  4396.,  4848.,  4992.,  5136.,  5280.,  5616.,  5808.,  6000.,  6192.,  6780.,  6984.,  7188.,  7392.,  7895.,  8150.,  8405.,  8660.,  9430.,  9700.,  9970., 10240.,  8805.,  9090.,  9375.,  9660., 10460., 10760., 11060., 11360.,  8416.,  8656.,  8896.,  9136.,  9804., 10056., 10308., 10560.,  6109.,  6298.,  6487.,  6676.,  7166.,  7364.,  7562.,  7760.,  7468.,  7720.,  7972.,  8224.,  8872.,  9136.,  9400.,  9664., 10080., 10432., 10784., 11136., 12016., 12384., 12752., 13120., 13916., 14376., 14836., 15296., 16448., 16928., 17408., 17888., 15140., 15640., 16140., 16640., 17832., 18352., 18872., 19392., 14048., 14464., 14880., 15296., 16304., 16736., 17168., 17600., 10644., 10968., 11292., 11616., 12400., 12736., 13072., 13408., 11901., 12306., 12711., 13116., 14004., 14424., 14844., 15264., 16064., 16624., 17184., 17744., 18932., 19512., 20092., 20672., 21845., 22570., 23295., 24020., 25542., 26292., 27042., 27792., 23239., 24014., 24789., 25564., 27136., 27936., 28736., 29536., 20880., 21520., 22160., 22800., 24100., 24760., 25420., 26080., 15863., 16358., 16853., 17348., 18342., 18852., 19362., 19872., 16913., 17434., 17955., 18476., 19480., 20016., 20552., 21088., 18928., 19600., 20272., 20944., 22244., 22936., 23628., 24320., 23361., 24194., 25027., 25860., 27490., 28348., 29206., 30064., 22131., 22950., 23769., 24588., 26204., 27048., 27892., 28736., 16320., 16944., 17568., 18192., 19476., 20120., 20764., 21408., 13259., 13742., 14225., 14708., 15690., 16188., 16686., 17184., 12524., 13000., 13476., 13952., 14792., 15280., 15768., 16256., 15392., 16000., 16608., 17216., 18288., 18912., 19536., 20160., 21468., 22216., 22964., 23712., 25056., 25824., 26592., 27360., 22436., 23160., 23884., 24608., 25928., 26672., 27416., 28160., 14944., 15488., 16032., 16576., 17584., 18144., 18704., 19264., 12116., 12536., 12956., 13376., 14160., 14592., 15024., 15456., 10923., 11318., 11713., 12108., 12804., 13208., 13612., 14016., 13088., 13584., 14080., 14576., 15468., 15976., 16484., 16992., 14755., 15358., 15961., 16564., 17634., 18252., 18870., 19488., 13969., 14538., 15107., 15676., 16712., 17296., 17880., 18464., 11088., 11504., 11920., 12336., 13116., 13544., 13972., 14400., 10065., 10386., 10707., 11028., 11634., 11964., 12294., 12624.,  6239.,  6446.,  6653.,  6860.,  7384.,  7600.,  7816.,  8032.,  8400.,  8688.,  8976.,  9264.,  9948., 10248., 10548., 10848., 11535., 11910., 12285., 12660., 13550., 13940., 14330., 14720., 12445., 12850., 13255., 13660., 14580., 15000., 15420., 15840., 11456., 11792., 12128., 12464., 13228., 13576., 13924., 14272.,  8229.,  8490.,  8751.,  9012.,  9574.,  9844., 10114., 10384., 10252., 10600., 10948., 11296., 12040., 12400., 12760., 13120., 13792., 14272., 14752., 15232., 16240., 16736., 17232., 17728., 18812., 19432., 20052., 20672., 21984., 22624., 23264., 23904., 20036., 20696., 21356., 22016., 23368., 24048., 24728., 25408., 18272., 18816., 19360., 19904., 21040., 21600., 22160., 22720., 13940., 14360., 14780., 15200., 16080., 16512., 16944., 17376., 15285., 15810., 16335., 16860., 17868., 18408., 18948., 19488., 20448., 21168., 21888., 22608., 23956., 24696., 25436., 26176., 27357., 28218., 29079., 29940., 31598., 32484., 33370., 34256., 25103., 25950., 26797., 27644., 29288., 30160., 31032., 31904., 18736., 19408., 20080., 20752., 22084., 22776., 23468., 24160., 13615., 14102., 14589., 15076., 16062., 16564., 17066., 17568., 13513., 14026., 14539., 15052., 16048., 16576., 17104., 17632., 17552., 18256., 18960., 19664., 20996., 21720., 22444., 23168., 22601., 23442., 24283., 25124., 26762., 27628., 28494., 29360., 22907., 23734., 24561., 25388., 27012., 27864., 28716., 29568., 19296., 19952., 20608., 21264., 22580., 23256., 23932., 24608., 16131., 16606., 17081., 17556., 18530., 19020., 19510., 20000., 13388., 13832., 14276., 14720., 15528., 15984., 16440., 16896., 17952., 18560., 19168., 19776., 20848., 21472., 22096., 22720., 18748., 19464., 20180., 20896., 22208., 22944., 23680., 24416., 17156., 17848., 18540., 19232., 20520., 21232., 21944., 22656., 13408., 13952., 14496., 15040., 16048., 16608., 17168., 17728., 10932., 11320., 11708., 12096., 12848., 13248., 13648., 14048.,  8307.,  8646.,  8985.,  9324.,  9964., 10312., 10660., 11008., 12160., 12624., 13088., 13552., 14412., 14888., 15364., 15840., 14747., 15278., 15809., 16340., 17338., 17884., 18430., 18976., 15497., 15994., 16491., 16988., 17952., 18464., 18976., 19488.,  9904., 10288., 10672., 11056., 11804., 12200., 12596., 12992.,  5273.,  5538.,  5803.,  6068.,  6618.,  6892.,  7166.,  7440.,  8487.,  8766.,  9045.,  9324.,  9920., 10208., 10496., 10784., 11184., 11568., 11952., 12336., 13116., 13512., 13908., 14304., 15175., 15670., 16165., 16660., 17670., 18180., 18690., 19200., 16085., 16610., 17135., 17660., 18700., 19240., 19780., 20320., 14496., 14928., 15360., 15792., 16652., 17096., 17540., 17984., 10349., 10682., 11015., 11348., 11982., 12324., 12666., 13008., 13036., 13480., 13924., 14368., 15208., 15664., 16120., 16576., 17504., 18112., 18720., 19328., 20464., 21088., 21712., 22336., 23708., 24488., 25268., 26048., 27520., 28320., 29120., 29920., 24932., 25752., 26572., 27392., 28904., 29744., 30584., 31424., 22496., 23168., 23840., 24512., 25776., 26464., 27152., 27840., 17236., 17752., 18268., 18784., 19760., 20288., 20816., 21344., 11821., 12274., 12727., 13180., 14116., 14584., 15052., 15520., 15360., 15984., 16608., 17232., 18484., 19128., 19772., 20416., 21413., 22218., 23023., 23828., 25430., 26260., 27090., 27920., 22807., 23662., 24517., 25372., 27024., 27904., 28784., 29664., 18640., 19344., 20048., 20752., 22116., 22840., 23564., 24288., 15015., 15558., 16101., 16644., 17686., 18244., 18802., 19360., 13633., 14074., 14515., 14956., 15880., 16336., 16792., 17248., 18608., 19216., 19824., 20432., 21668., 22296., 22924., 23552., 22801., 23586., 24371., 25156., 26738., 27548., 28358., 29168., 24195., 25030., 25865., 26700., 28332., 29192., 30052., 30912., 20224., 20912., 21600., 22288., 23636., 24344., 25052., 25760., 15995., 16526., 17057., 17588., 18618., 19164., 19710., 20256.,  8044.,  8392.,  8740.,  9088.,  9800., 10160., 10520., 10880., 11680., 12160., 12640., 13120., 14064., 14560., 15056., 15552., 15452., 16072., 16692., 17312., 18528., 19168., 19808., 20448., 16484., 17144., 17804., 18464., 19720., 20400., 21080., 21760., 13920., 14464., 15008., 15552., 16560., 17120., 17680., 18240., 12372., 12792., 13212., 13632., 14416., 14848., 15280., 15712.,  6139.,  6358.,  6577.,  6796.,  7316.,  7544.,  7772.,  8000.,  7520.,  7824.,  8128.,  8432.,  9132.,  9448.,  9764., 10080.,  8531.,  8926.,  9321.,  9716., 10578., 10988., 11398., 11808.,  9345.,  9770., 10195., 10620., 11512., 11952., 12392., 12832.,  6672.,  7024.,  7376.,  7728.,  8444.,  8808.,  9172.,  9536.,  4641.,  4914.,  5187.,  5460.,  6018.,  6300.,  6582.,  6864.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21845., 22570., 23295., 24020., 25542., 26292., 27042., 27792., 23239., 24014., 24789., 25564., 27136., 27936., 28736., 29536., 23361., 24194., 25027., 25860., 27490., 28348., 29206., 30064., 22131., 22950., 23769., 24588., 26204., 27048., 27892., 28736., 27357., 28218., 29079., 29940., 31598., 32484., 33370., 34256., 25103., 25950., 26797., 27644., 29288., 30160., 31032., 31904., 22601., 23442., 24283., 25124., 26762., 27628., 28494., 29360., 22907., 23734., 24561., 25388., 27012., 27864., 28716., 29568., 21413., 22218., 23023., 23828., 25430., 26260., 27090., 27920., 22807., 23662., 24517., 25372., 27024., 27904., 28784., 29664., 22801., 23586., 24371., 25156., 26738., 27548., 28358., 29168., 24195., 25030., 25865., 26700., 28332., 29192., 30052., 30912.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6285.,  6828.,  7389.,  7968.,  8476.,  9200.,  9948., 10720., 10123., 11028., 11963., 12928., 10103., 11004., 11935., 12896.,  7980.,  8688.,  9420., 10176.,  6033.,  6548.,  7081.,  7632.,  7796.,  8480.,  9188.,  9920., 10672., 11584., 12528., 13504., 15884., 17024., 18204., 19424., 17724., 18880., 20076., 21312., 14896., 15808., 16752., 17728., 12228., 12896., 13588., 14304., 15223., 16060., 16927., 17824., 20404., 21520., 22676., 23872., 22433., 23828., 25273., 26768., 21637., 23068., 24549., 26080., 16036., 17168., 18340., 19552., 10755., 11588., 12451., 13344., 12799., 13740., 14711., 15712., 15572., 16784., 18036., 19328., 18041., 19524., 21057., 22640., 17181., 18636., 20141., 21696., 12484., 13584., 14724., 15904.,  9163.,  9972., 10811., 11680., 10180., 10944., 11732., 12544., 12912., 13888., 14896., 15936., 18172., 19360., 20588., 21856., 19372., 20512., 21692., 22912., 12144., 12992., 13872., 14784.,  9044.,  9664., 10308., 10976., 10317., 10892., 11485., 12096., 11548., 12272., 13020., 13792., 12939., 13812., 14715., 15648., 11799., 12668., 13567., 14496.,  7276.,  7920.,  8588.,  9280.,  5361.,  5844.,  6345.,  6864.,  5085.,  5580.,  6093.,  6624.,  7004.,  7664.,  8348.,  9056., 11579., 12468., 13387., 14336., 13415., 14364., 15343., 16352., 11244., 12016., 12812., 13632.,  9185.,  9780., 10393., 11024., 12020., 12704., 13412., 14144., 16304., 17216., 18160., 19136., 20684., 21888., 23132., 24416., 23100., 24384., 25708., 27072., 18352., 19392., 20464., 21568., 13764., 14560., 15380., 16224., 11623., 12508., 13423., 14368., 15476., 16656., 17876., 19136., 18673., 20148., 21673., 23248., 19413., 20924., 22485., 24096., 14948., 16144., 17380., 18656., 10867., 11748., 12659., 13600.,  9583., 10444., 11335., 12256., 12820., 13968., 15156., 16384., 18249., 19684., 21169., 22704., 20269., 21740., 23261., 24832., 16516., 17680., 18884., 20128., 13115., 13972., 14859., 15776., 11972., 12608., 13268., 13952., 16112., 16960., 17840., 18752., 17148., 18208., 19308., 20448., 15852., 16928., 18044., 19200., 11632., 12480., 13360., 14272.,  7636.,  8256.,  8900.,  9568.,  8541.,  9132.,  9741., 10368., 11484., 12272., 13084., 13920., 12027., 12948., 13899., 14880., 11655., 12572., 13519., 14496.,  8492.,  9200.,  9932., 10688.,  5505.,  6004.,  6521.,  7056.,  8621.,  9196.,  9789., 10400., 11036., 11760., 12508., 13280., 17195., 18132., 19099., 20096., 18967., 19900., 20863., 21856., 12076., 12784., 13516., 14272.,  9137.,  9684., 10249., 10832., 14324., 15136., 15972., 16832., 16688., 17728., 18800., 19904., 20172., 21504., 22876., 24288., 19708., 21056., 22444., 23872., 13744., 14784., 15856., 16960., 10564., 11360., 12180., 13024., 10263., 11132., 12031., 12960., 12212., 13328., 14484., 15680., 16833., 18260., 19737., 21264., 17829., 19292., 20805., 22368., 13476., 14608., 15780., 16992., 10659., 11524., 12419., 13344., 13343., 14188., 15063., 15968., 17236., 18320., 19444., 20608., 21273., 22660., 24097., 25584., 23549., 24972., 26445., 27968., 18628., 19728., 20868., 22048., 13931., 14772., 15643., 16544.,  6980.,  7616.,  8276.,  8960.,  9456., 10304., 11184., 12096., 13500., 14624., 15788., 16992., 15596., 16800., 18044., 19328., 12528., 13504., 14512., 15552.,  9684., 10432., 11204., 12000.,  6957.,  7500.,  8061.,  8640.,  9500., 10224., 10972., 11744., 12075., 12980., 13915., 14880., 13815., 14780., 15775., 16800., 10732., 11504., 12300., 13120.,  7761.,  8340.,  8937.,  9552.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22433., 23828., 25273., 26768., 21637., 23068., 24549., 26080., 18041., 19524., 21057., 22640., 17181., 18636., 20141., 21696., 18673., 20148., 21673., 23248., 19413., 20924., 22485., 24096., 18249., 19684., 21169., 22704., 20269., 21740., 23261., 24832., 16833., 18260., 19737., 21264., 17829., 19292., 20805., 22368., 21273., 22660., 24097., 25584., 23549., 24972., 26445., 27968.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7701.,  7962.,  8522.,  8792.,  9379.,  9658., 10272., 10560., 10884., 11256., 12000., 12384., 13164., 13560., 14376., 14784., 15271., 15702., 16618., 17064., 18025., 18486., 19492., 19968., 13443., 13870., 14782., 15224., 16181., 16638., 17640., 18112.,  9668., 10008., 10752., 11104., 11884., 12248., 13064., 13440.,  6193.,  6434.,  6958.,  7208.,  7759.,  8018.,  8596.,  8864.,  7740.,  8040.,  8712.,  9024.,  9732., 10056., 10800., 11136., 10224., 10656., 11584., 12032., 13008., 13472., 14496., 14976., 14036., 14552., 15720., 16256., 17484., 18040., 19328., 19904., 15396., 15928., 17112., 17664., 18908., 19480., 20784., 21376., 14384., 14816., 15808., 16256., 17296., 17760., 18848., 19328., 12364., 12680., 13432., 13760., 14548., 14888., 15712., 16064., 13267., 13678., 14542., 14968., 15877., 16318., 17272., 17728., 18780., 19368., 20544., 21152., 22388., 23016., 24312., 24960., 21297., 22018., 23486., 24232., 25775., 26546., 28164., 28960., 21461., 22218., 23722., 24504., 26083., 26890., 28544., 29376., 19548., 20168., 21408., 22048., 23348., 24008., 25368., 26048., 15415., 15878., 16810., 17288., 18265., 18758., 19780., 20288., 15483., 15998., 16966., 17496., 18509., 19054., 20112., 20672., 18748., 19432., 20704., 21408., 22740., 23464., 24856., 25600., 23177., 23986., 25542., 26376., 28007., 28866., 30572., 31456., 23277., 24058., 25586., 26392., 27995., 28826., 30504., 31360., 15548., 16136., 17344., 17952., 19220., 19848., 21176., 21824., 10207., 10646., 11554., 12008., 12961., 13430., 14428., 14912., 10908., 11336., 12104., 12544., 13348., 13800., 14640., 15104., 12848., 13408., 14400., 14976., 16016., 16608., 17696., 18304., 15988., 16632., 17832., 18496., 19756., 20440., 21760., 22464., 16388., 16984., 18136., 18752., 19964., 20600., 21872., 22528.,  9904., 10336., 11200., 11648., 12560., 13024., 13984., 14464.,  8044.,  8360.,  9016.,  9344., 10036., 10376., 11104., 11456.,  7757.,  8026.,  8578.,  8856.,  9435.,  9722., 10328., 10624.,  9316.,  9656., 10368., 10720., 11468., 11832., 12616., 12992., 10927., 11350., 12210., 12648., 13553., 14006., 14956., 15424., 10955., 11374., 12230., 12664., 13565., 14014., 14960., 15424.,  9060.,  9368., 10016., 10336., 11020., 11352., 12072., 12416.,  8745.,  8994.,  9510.,  9768., 10311., 10578., 11148., 11424.,  5349.,  5562.,  6074.,  6296.,  6835.,  7066.,  7632.,  7872.,  6980.,  7288.,  7968.,  8288.,  9004.,  9336., 10088., 10432., 11031., 11446., 12346., 12776., 13721., 14166., 15156., 15616., 12851., 13326., 14286., 14776., 15781., 16286., 17336., 17856., 11012., 11416., 12224., 12640., 13484., 13912., 14792., 15232.,  8321.,  8642.,  9246.,  9576., 10207., 10546., 11204., 11552., 10044., 10344., 11016., 11328., 12036., 12360., 13104., 13440., 14320., 14752., 15680., 16128., 17104., 17568., 18592., 19072., 18452., 19032., 20264., 20864., 22156., 22776., 24128., 24768., 20900., 21560., 22872., 23552., 24924., 25624., 27056., 27776., 19120., 19680., 20800., 21376., 22544., 23136., 24352., 24960., 15308., 15752., 16632., 17088., 18004., 18472., 19424., 19904., 12163., 12622., 13534., 14008., 14965., 15454., 16456., 16960., 18076., 18728., 19968., 20640., 21940., 22632., 23992., 24704., 24961., 25762., 27310., 28136., 29759., 30610., 32308., 33184., 24101., 24938., 26522., 27384., 29043., 29930., 31664., 32576., 19356., 20040., 21344., 22048., 23412., 24136., 25560., 26304., 15591., 16102., 17082., 17608., 18633., 19174., 20244., 20800., 11179., 11614., 12502., 12952., 13885., 14350., 15328., 15808., 14332., 14952., 16160., 16800., 18068., 18728., 20056., 20736., 18521., 19282., 20790., 21576., 23159., 23970., 25628., 26464., 20221., 21018., 22562., 23384., 25003., 25850., 27544., 28416., 17404., 18056., 19328., 20000., 21332., 22024., 23416., 24128., 13967., 14454., 15410., 15912., 16913., 17430., 18476., 19008.,  9500.,  9800., 10440., 10752., 11428., 11752., 12464., 12800., 13232., 13664., 14528., 14976., 15888., 16352., 17312., 17792., 14068., 14584., 15656., 16192., 17324., 17880., 19072., 19648., 13508., 14040., 15128., 15680., 16828., 17400., 18608., 19200., 10928., 11360., 12224., 12672., 13584., 14048., 15008., 15488.,  9324.,  9640., 10296., 10624., 11316., 11656., 12384., 12736.,  7261.,  7546.,  8114.,  8408.,  9003.,  9306.,  9928., 10240., 11172., 11576., 12352., 12768., 13580., 14008., 14856., 15296., 14175., 14646., 15554., 16040., 16993., 17494., 18492., 19008., 15739., 16206., 17110., 17592., 18541., 19038., 20032., 20544., 10404., 10776., 11488., 11872., 12620., 13016., 13800., 14208.,  5945.,  6210.,  6742.,  7016.,  7575.,  7858.,  8444.,  8736.,  8245.,  8538.,  9130.,  9432., 10051., 10362., 11008., 11328.,  9860., 10232., 10976., 11360., 12140., 12536., 13352., 13760., 15047., 15510., 16458., 16936., 17929., 18422., 19460., 19968., 16803., 17262., 18206., 18680., 19669., 20158., 21192., 21696., 11716., 12056., 12800., 13152., 13932., 14296., 15112., 15488.,  8273.,  8546.,  9102.,  9384.,  9967., 10258., 10868., 11168., 12476., 12904., 13704., 14144., 14980., 15432., 16304., 16768., 15984., 16544., 17600., 18176., 19280., 19872., 21024., 21632., 20372., 21080., 22440., 23168., 24588., 25336., 26816., 27584., 21220., 21944., 23320., 24064., 25500., 26264., 27760., 28544., 20144., 20704., 21824., 22400., 23568., 24160., 25376., 25984., 17100., 17544., 18424., 18880., 19796., 20264., 21216., 21696., 11507., 11950., 12846., 13304., 14245., 14718., 15704., 16192., 16732., 17320., 18496., 19104., 20340., 20968., 22264., 22912., 20305., 21058., 22558., 23336., 24911., 25714., 27364., 28192., 19957., 20746., 22282., 23096., 24707., 25546., 27232., 28096., 14428., 15048., 16288., 16928., 18228., 18888., 20248., 20928., 11095., 11590., 12554., 13064., 14073., 14598., 15652., 16192., 12571., 12990., 13862., 14296., 15213., 15662., 16624., 17088., 16060., 16616., 17760., 18336., 19540., 20136., 21400., 22016., 19497., 20210., 21670., 22408., 23943., 24706., 26316., 27104., 21709., 22458., 23954., 24728., 26299., 27098., 28744., 29568., 19644., 20232., 21440., 22048., 23316., 23944., 25272., 25920., 15615., 16086., 17026., 17512., 18497., 18998., 20028., 20544.,  6684.,  6984.,  7624.,  7936.,  8612.,  8936.,  9648.,  9984., 10160., 10592., 11456., 11904., 12816., 13280., 14240., 14720., 14900., 15480., 16616., 17216., 18412., 19032., 20288., 20928., 16964., 17624., 18840., 19520., 20796., 21496., 22832., 23552., 14640., 15200., 16192., 16768., 17808., 18400., 19488., 20096., 13292., 13736., 14520., 14976., 15796., 16264., 17120., 17600.,  7213.,  7450.,  7970.,  8216.,  8763.,  9018.,  9592.,  9856.,  9316.,  9656., 10368., 10720., 11468., 11832., 12616., 12992., 11215., 11670., 12562., 13032., 13969., 14454., 15436., 15936., 12843., 13358., 14310., 14840., 15837., 16382., 17424., 17984.,  9700., 10136., 10912., 11360., 12172., 12632., 13480., 13952.,  7305.,  7650.,  8262.,  8616.,  9255.,  9618., 10284., 10656.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21297., 22018., 23486., 24232., 25775., 26546., 28164., 28960., 21461., 22218., 23722., 24504., 26083., 26890., 28544., 29376., 23177., 23986., 25542., 26376., 28007., 28866., 30572., 31456., 23277., 24058., 25586., 26392., 27995., 28826., 30504., 31360., 24961., 25762., 27310., 28136., 29759., 30610., 32308., 33184., 24101., 24938., 26522., 27384., 29043., 29930., 31664., 32576., 18521., 19282., 20790., 21576., 23159., 23970., 25628., 26464., 20221., 21018., 22562., 23384., 25003., 25850., 27544., 28416., 20305., 21058., 22558., 23336., 24911., 25714., 27364., 28192., 19957., 20746., 22282., 23096., 24707., 25546., 27232., 28096., 19497., 20210., 21670., 22408., 23943., 24706., 26316., 27104., 21709., 22458., 23954., 24728., 26299., 27098., 28744., 29568.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7653.,  7914.,  8175.,  8436.,  8966.,  9236.,  9506.,  9776., 10351., 10630., 10909., 11188., 11808., 12096., 12384., 12672.,  9492.,  9864., 10236., 10608., 11328., 11712., 12096., 12480., 13260., 13656., 14052., 14448., 15288., 15696., 16104., 16512., 11935., 12366., 12797., 13228., 14102., 14548., 14994., 15440., 16389., 16850., 17311., 17772., 18796., 19272., 19748., 20224., 10331., 10758., 11185., 11612., 12482., 12924., 13366., 13808., 14753., 15210., 15667., 16124., 17144., 17616., 18088., 18560.,  6516.,  6856.,  7196.,  7536.,  8224.,  8576.,  8928.,  9280., 10028., 10392., 10756., 11120., 11928., 12304., 12680., 13056.,  4145.,  4386.,  4627.,  4868.,  5346.,  5596.,  5846.,  6096.,  6619.,  6878.,  7137.,  7396.,  7964.,  8232.,  8500.,  8768.,  8140.,  8440.,  8740.,  9040.,  9688., 10000., 10312., 10624., 11332., 11656., 11980., 12304., 13072., 13408., 13744., 14080., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200., 12516., 13032., 13548., 14064., 15160., 15696., 16232., 16768., 17964., 18520., 19076., 19632., 20928., 21504., 22080., 22656., 12404., 12936., 13468., 14000., 15112., 15664., 16216., 16768., 17980., 18552., 19124., 19696., 21008., 21600., 22192., 22784., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200.,  9564.,  9880., 10196., 10512., 11176., 11504., 11832., 12160., 12884., 13224., 13564., 13904., 14688., 15040., 15392., 15744.,  9291.,  9702., 10113., 10524., 11378., 11804., 12230., 12656., 13585., 14026., 14467., 14908., 15912., 16368., 16824., 17280., 14636., 15224., 15812., 16400., 17568., 18176., 18784., 19392., 20660., 21288., 21916., 22544., 23912., 24560., 25208., 25856., 17041., 17762., 18483., 19204., 20626., 21372., 22118., 22864., 24411., 25182., 25953., 26724., 28396., 29192., 29988., 30784., 18357., 19114., 19871., 20628., 22086., 22868., 23650., 24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640., 17868., 18488., 19108., 19728., 20928., 21568., 22208., 22848., 24148., 24808., 25468., 26128., 27528., 28208., 28888., 29568., 11423., 11886., 12349., 12812., 13686., 14164., 14642., 15120., 16069., 16562., 17055., 17548., 18572., 19080., 19588., 20096., 15155., 15670., 16185., 16700., 17658., 18188., 18718., 19248., 20281., 20826., 21371., 21916., 23024., 23584., 24144., 24704., 17036., 17720., 18404., 19088., 20352., 21056., 21760., 22464., 23828., 24552., 25276., 26000., 27464., 28208., 28952., 29696., 18665., 19474., 20283., 21092., 22602., 23436., 24270., 25104., 26739., 27598., 28457., 29316., 31076., 31960., 32844., 33728., 19917., 20698., 21479., 22260., 23742., 24548., 25354., 26160., 27767., 28598., 29429., 30260., 31992., 32848., 33704., 34560., 15020., 15608., 16196., 16784., 17952., 18560., 19168., 19776., 21044., 21672., 22300., 22928., 24296., 24944., 25592., 26240.,  9223.,  9662., 10101., 10540., 11390., 11844., 12298., 12752., 13677., 14146., 14615., 15084., 16084., 16568., 17052., 17536., 10060., 10488., 10916., 11344., 12120., 12560., 13000., 13440., 14276., 14728., 15180., 15632., 16528., 16992., 17456., 17920., 11952., 12512., 13072., 13632., 14656., 15232., 15808., 16384., 17488., 18080., 18672., 19264., 20448., 21056., 21664., 22272., 16484., 17128., 17772., 18416., 19640., 20304., 20968., 21632., 22956., 23640., 24324., 25008., 26432., 27136., 27840., 28544., 15284., 15880., 16476., 17072., 18248., 18864., 19480., 20096., 21372., 22008., 22644., 23280., 24656., 25312., 25968., 26624.,  8752.,  9184.,  9616., 10048., 10944., 11392., 11840., 12288., 13264., 13728., 14192., 14656., 15712., 16192., 16672., 17152.,  7260.,  7576.,  7892.,  8208.,  8872.,  9200.,  9528.,  9856., 10580., 10920., 11260., 11600., 12384., 12736., 13088., 13440.,  4429.,  4698.,  4967.,  5236.,  5742.,  6020.,  6298.,  6576.,  7127.,  7414.,  7701.,  7988.,  8584.,  8880.,  9176.,  9472.,  8180.,  8520.,  8860.,  9200.,  9888., 10240., 10592., 10944., 11692., 12056., 12420., 12784., 13592., 13968., 14344., 14720., 11767., 12190., 12613., 13036., 13870., 14308., 14746., 15184., 16093., 16546., 16999., 17452., 18436., 18904., 19372., 19840., 10035., 10454., 10873., 11292., 12122., 12556., 12990., 13424., 14329., 14778., 15227., 15676., 16656., 17120., 17584., 18048.,  7764.,  8072.,  8380.,  8688.,  9344.,  9664.,  9984., 10304., 11020., 11352., 11684., 12016., 12792., 13136., 13480., 13824.,  7001.,  7250.,  7499.,  7748.,  8266.,  8524.,  8782.,  9040.,  9603.,  9870., 10137., 10404., 11012., 11288., 11564., 11840.,  6069.,  6282.,  6495.,  6708.,  7190.,  7412.,  7634.,  7856.,  8383.,  8614.,  8845.,  9076.,  9648.,  9888., 10128., 10368.,  7892.,  8200.,  8508.,  8816.,  9472.,  9792., 10112., 10432., 11148., 11480., 11812., 12144., 12920., 13264., 13608., 13952., 11663., 12078., 12493., 12908., 13766., 14196., 14626., 15056., 15989., 16434., 16879., 17324., 18332., 18792., 19252., 19712., 13195., 13670., 14145., 14620., 15538., 16028., 16518., 17008., 18001., 18506., 19011., 19516., 20584., 21104., 21624., 22144., 10164., 10568., 10972., 11376., 12128., 12544., 12960., 13376., 14188., 14616., 15044., 15472., 16344., 16784., 17224., 17664.,  7297.,  7618.,  7939.,  8260.,  8818.,  9148.,  9478.,  9808., 10411., 10750., 11089., 11428., 12076., 12424., 12772., 13120.,  6604.,  6904.,  7204.,  7504.,  8152.,  8464.,  8776.,  9088.,  9796., 10120., 10444., 10768., 11536., 11872., 12208., 12544., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200., 14116., 14696., 15276., 15856., 17016., 17616., 18216., 18816., 20076., 20696., 21316., 21936., 23296., 23936., 24576., 25216., 16116., 16776., 17436., 18096., 19336., 20016., 20696., 21376., 22716., 23416., 24116., 24816., 26256., 26976., 27696., 28416., 14000., 14560., 15120., 15680., 16704., 17280., 17856., 18432., 19536., 20128., 20720., 21312., 22496., 23104., 23712., 24320., 11228., 11672., 12116., 12560., 13352., 13808., 14264., 14720., 15572., 16040., 16508., 16976., 17888., 18368., 18848., 19328., 12155., 12614., 13073., 13532., 14434., 14908., 15382., 15856., 16833., 17322., 17811., 18300., 19352., 19856., 20360., 20864., 16236., 16888., 17540., 18192., 19424., 20096., 20768., 21440., 22772., 23464., 24156., 24848., 26280., 26992., 27704., 28416., 20193., 20994., 21795., 22596., 24098., 24924., 25750., 26576., 28203., 29054., 29905., 30756., 32508., 33384., 34260., 35136., 19461., 20298., 21135., 21972., 23510., 24372., 25234., 26096., 27759., 28646., 29533., 30420., 32208., 33120., 34032., 34944., 15372., 16056., 16740., 17424., 18688., 19392., 20096., 20800., 22164., 22888., 23612., 24336., 25800., 26544., 27288., 28032., 11727., 12238., 12749., 13260., 14182., 14708., 15234., 15760., 16757., 17298., 17839., 18380., 19452., 20008., 20564., 21120., 11747., 12182., 12617., 13052., 13930., 14380., 14830., 15280., 16233., 16698., 17163., 17628., 18656., 19136., 19616., 20096., 15436., 16056., 16676., 17296., 18496., 19136., 19776., 20416., 21716., 22376., 23036., 23696., 25096., 25776., 26456., 27136., 17593., 18354., 19115., 19876., 21338., 22124., 22910., 23696., 25283., 26094., 26905., 27716., 29428., 30264., 31100., 31936., 17885., 18682., 19479., 20276., 21774., 22596., 23418., 24240., 25863., 26710., 27557., 28404., 30152., 31024., 31896., 32768., 16620., 17272., 17924., 18576., 19808., 20480., 21152., 21824., 23156., 23848., 24540., 25232., 26664., 27376., 28088., 28800., 12599., 13086., 13573., 14060., 14958., 15460., 15962., 16464., 17437., 17954., 18471., 18988., 20036., 20568., 21100., 21632.,  6348.,  6648.,  6948.,  7248.,  7896.,  8208.,  8520.,  8832.,  9540.,  9864., 10188., 10512., 11280., 11616., 11952., 12288., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200., 12772., 13288., 13804., 14320., 15416., 15952., 16488., 17024., 18220., 18776., 19332., 19888., 21184., 21760., 22336., 22912., 13684., 14216., 14748., 15280., 16392., 16944., 17496., 18048., 19260., 19832., 20404., 20976., 22288., 22880., 23472., 24064., 12848., 13280., 13712., 14144., 15040., 15488., 15936., 16384., 17360., 17824., 18288., 18752., 19808., 20288., 20768., 21248.,  8796.,  9112.,  9428.,  9744., 10408., 10736., 11064., 11392., 12116., 12456., 12796., 13136., 13920., 14272., 14624., 14976.,  6493.,  6778.,  7063.,  7348.,  7870.,  8164.,  8458.,  8752.,  9319.,  9622.,  9925., 10228., 10840., 11152., 11464., 11776.,  9780., 10184., 10588., 10992., 11744., 12160., 12576., 12992., 13804., 14232., 14660., 15088., 15960., 16400., 16840., 17280., 11047., 11518., 11989., 12460., 13342., 13828., 14314., 14800., 15757., 16258., 16759., 17260., 18292., 18808., 19324., 19840., 12387., 12854., 13321., 13788., 14666., 15148., 15630., 16112., 17065., 17562., 18059., 18556., 19584., 20096., 20608., 21120.,  9364.,  9736., 10108., 10480., 11200., 11584., 11968., 12352., 13132., 13528., 13924., 14320., 15160., 15568., 15976., 16384.,  5481.,  5746.,  6011.,  6276.,  6810.,  7084.,  7358.,  7632.,  8211.,  8494.,  8777.,  9060.,  9684.,  9976., 10268., 10560.,  6661.,  6954.,  7247.,  7540.,  8102.,  8404.,  8706.,  9008.,  9615.,  9926., 10237., 10548., 11200., 11520., 11840., 12160.,  7444.,  7816.,  8188.,  8560.,  9280.,  9664., 10048., 10432., 11212., 11608., 12004., 12400., 13240., 13648., 14056., 14464., 11455., 11918., 12381., 12844., 13750., 14228., 14706., 15184., 16165., 16658., 17151., 17644., 18700., 19208., 19716., 20224., 12923., 13382., 13841., 14300., 15202., 15676., 16150., 16624., 17601., 18090., 18579., 19068., 20120., 20624., 21128., 21632.,  8564.,  8904.,  9244.,  9584., 10272., 10624., 10976., 11328., 12076., 12440., 12804., 13168., 13976., 14352., 14728., 15104.,  6225.,  6498.,  6771.,  7044.,  7554.,  7836.,  8118.,  8400.,  8955.,  9246.,  9537.,  9828., 10428., 10728., 11028., 11328.,  9292.,  9720., 10148., 10576., 11352., 11792., 12232., 12672., 13508., 13960., 14412., 14864., 15760., 16224., 16688., 17152., 14000., 14560., 15120., 15680., 16704., 17280., 17856., 18432., 19536., 20128., 20720., 21312., 22496., 23104., 23712., 24320., 18852., 19560., 20268., 20976., 22264., 22992., 23720., 24448., 25836., 26584., 27332., 28080., 29568., 30336., 31104., 31872., 17716., 18440., 19164., 19888., 21192., 21936., 22680., 23424., 24828., 25592., 26356., 27120., 28624., 29408., 30192., 30976., 14000., 14560., 15120., 15680., 16704., 17280., 17856., 18432., 19536., 20128., 20720., 21312., 22496., 23104., 23712., 24320., 10716., 11160., 11604., 12048., 12840., 13296., 13752., 14208., 15060., 15528., 15996., 16464., 17376., 17856., 18336., 18816., 11883., 12326., 12769., 13212., 14098., 14556., 15014., 15472., 16433., 16906., 17379., 17852., 18888., 19376., 19864., 20352., 16684., 17272., 17860., 18448., 19616., 20224., 20832., 21440., 22708., 23336., 23964., 24592., 25960., 26608., 27256., 27904., 19121., 19874., 20627., 21380., 22834., 23612., 24390., 25168., 26747., 27550., 28353., 29156., 30860., 31688., 32516., 33344., 19413., 20202., 20991., 21780., 23270., 24084., 24898., 25712., 27327., 28166., 29005., 29844., 31584., 32448., 33312., 34176., 15820., 16440., 17060., 17680., 18880., 19520., 20160., 20800., 22100., 22760., 23420., 24080., 25480., 26160., 26840., 27520., 10943., 11438., 11933., 12428., 13334., 13844., 14354., 14864., 15845., 16370., 16895., 17420., 18476., 19016., 19556., 20096., 11475., 11894., 12313., 12732., 13594., 14028., 14462., 14896., 15833., 16282., 16731., 17180., 18192., 18656., 19120., 19584., 13836., 14392., 14948., 15504., 16640., 17216., 17792., 18368., 19604., 20200., 20796., 21392., 22728., 23344., 23960., 24576., 15497., 16210., 16923., 17636., 19050., 19788., 20526., 21264., 22803., 23566., 24329., 25092., 26756., 27544., 28332., 29120., 16813., 17562., 18311., 19060., 20510., 21284., 22058., 22832., 24407., 25206., 26005., 26804., 28504., 29328., 30152., 30976., 15020., 15608., 16196., 16784., 17952., 18560., 19168., 19776., 21044., 21672., 22300., 22928., 24296., 24944., 25592., 26240., 11815., 12286., 12757., 13228., 14110., 14596., 15082., 15568., 16525., 17026., 17527., 18028., 19060., 19576., 20092., 20608.,  7884.,  8184.,  8484.,  8784.,  9432.,  9744., 10056., 10368., 11076., 11400., 11724., 12048., 12816., 13152., 13488., 13824., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200., 14372., 14952., 15532., 16112., 17272., 17872., 18472., 19072., 20332., 20952., 21572., 22192., 23552., 24192., 24832., 25472., 16372., 17032., 17692., 18352., 19592., 20272., 20952., 21632., 22972., 23672., 24372., 25072., 26512., 27232., 27952., 28672., 14000., 14560., 15120., 15680., 16704., 17280., 17856., 18432., 19536., 20128., 20720., 21312., 22496., 23104., 23712., 24320., 11484., 11928., 12372., 12816., 13608., 14064., 14520., 14976., 15828., 16296., 16764., 17232., 18144., 18624., 19104., 19584.,  5421.,  5658.,  5895.,  6132.,  6606.,  6852.,  7098.,  7344.,  7863.,  8118.,  8373.,  8628.,  9192.,  9456.,  9720.,  9984.,  8180.,  8520.,  8860.,  9200.,  9888., 10240., 10592., 10944., 11692., 12056., 12420., 12784., 13592., 13968., 14344., 14720., 10263., 10718., 11173., 11628., 12494., 12964., 13434., 13904., 14845., 15330., 15815., 16300., 17316., 17816., 18316., 18816., 11667., 12182., 12697., 13212., 14138., 14668., 15198., 15728., 16729., 17274., 17819., 18364., 19440., 20000., 20560., 21120., 10964., 11400., 11836., 12272., 13056., 13504., 13952., 14400., 15244., 15704., 16164., 16624., 17528., 18000., 18472., 18944.,  8121.,  8466.,  8811.,  9156.,  9770., 10124., 10478., 10832., 11491., 11854., 12217., 12580., 13284., 13656., 14028., 14400.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17041., 17762., 18483., 19204., 20626., 21372., 22118., 22864., 24411., 25182., 25953., 26724., 28396., 29192., 29988., 30784., 18357., 19114., 19871., 20628., 22086., 22868., 23650., 24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640., 18665., 19474., 20283., 21092., 22602., 23436., 24270., 25104., 26739., 27598., 28457., 29316., 31076., 31960., 32844., 33728., 19917., 20698., 21479., 22260., 23742., 24548., 25354., 26160., 27767., 28598., 29429., 30260., 31992., 32848., 33704., 34560., 20193., 20994., 21795., 22596., 24098., 24924., 25750., 26576., 28203., 29054., 29905., 30756., 32508., 33384., 34260., 35136., 19461., 20298., 21135., 21972., 23510., 24372., 25234., 26096., 27759., 28646., 29533., 30420., 32208., 33120., 34032., 34944., 17593., 18354., 19115., 19876., 21338., 22124., 22910., 23696., 25283., 26094., 26905., 27716., 29428., 30264., 31100., 31936., 17885., 18682., 19479., 20276., 21774., 22596., 23418., 24240., 25863., 26710., 27557., 28404., 30152., 31024., 31896., 32768., 19121., 19874., 20627., 21380., 22834., 23612., 24390., 25168., 26747., 27550., 28353., 29156., 30860., 31688., 32516., 33344., 19413., 20202., 20991., 21780., 23270., 24084., 24898., 25712., 27327., 28166., 29005., 29844., 31584., 32448., 33312., 34176., 15497., 16210., 16923., 17636., 19050., 19788., 20526., 21264., 22803., 23566., 24329., 25092., 26756., 27544., 28332., 29120., 16813., 17562., 18311., 19060., 20510., 21284., 22058., 22832., 24407., 25206., 26005., 26804., 28504., 29328., 30152., 30976.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1755.,  2404.,  3080.,  3350.,  3620.,  2920.,  2205.,  3008.,  4048.,  5100.,  5410.,  5720.,  4560.,  3404.,  4420.,  5880.,  7325.,  7650.,  7975.,  6300.,  4660.,  5890.,  7770.,  9600.,  9925., 10250.,  8050.,  5920.,  4190.,  5472.,  6690.,  6900.,  7110.,  5520.,  4010.,  2646.,  3406.,  4100.,  4220.,  4340.,  3310.,  2358.,  8937., 11728., 14420., 14690., 14960., 11740.,  8631., 11324., 14800., 18120., 18430., 18740., 14640., 10712., 13240., 17220., 20975., 21300., 21625., 16800., 12220., 14710., 19110., 23250., 23575., 23900., 18550., 13480.,  9986., 12864., 15510., 15720., 15930., 12240.,  8798.,  6048.,  7690.,  9140.,  9260.,  9380.,  7090.,  5004., 16119., 21052., 25760., 26030., 26300., 20560., 15057., 19640., 25552., 31140., 31450., 31760., 24720., 18020., 22060., 28560., 34625., 34950., 35275., 27300., 19780., 23530., 30450., 36900., 37225., 37550., 29050., 21040., 15782., 20256., 24330., 24540., 24750., 18960., 13586.,  9450., 11974., 14180., 14300., 14420., 10870.,  7650.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7325.,  7650.,  7975.,  9600.,  9925., 10250., 20975., 21300., 21625., 23250., 23575., 23900., 34625., 34950., 35275., 36900., 37225., 37550.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3429.,  3510.,  4694.,  4808.,  6010.,  6160.,  6535.,  6700.,  7060.,  7240.,  5690.,  5840.,  4293.,  4410.,  5866.,  6016.,  7888.,  8096.,  9930., 10200., 10530., 10820., 11130., 11440.,  8864.,  9120.,  6610.,  6808.,  8600.,  8840., 11430., 11760., 14225., 14650., 14850., 15300., 15475., 15950., 12210., 12600.,  9020.,  9320., 11435., 11780., 15070., 15540., 18600., 19200., 19225., 19850., 19850., 20500., 15570., 16100., 11435., 11840.,  8062.,  8380., 10512., 10944., 12830., 13380., 13230., 13800., 13630., 14220., 10560., 11040.,  7654.,  8020.,  5022.,  5292.,  6446.,  6812.,  7735.,  8200.,  7960.,  8440.,  8185.,  8680.,  6218.,  6620.,  4410.,  4716., 17415., 17874., 22838., 23456., 28060., 28840., 28585., 29380., 29110., 29920., 22826., 23480., 16767., 17262., 15850., 16376., 19696., 20384., 23354., 24208., 21330., 22140., 21930., 22760., 17088., 17760., 12466., 12976., 11722., 12272., 14390., 15112., 16859., 17758., 15500., 16360., 16125., 17010., 12402., 13120.,  8918.,  9464.,  8733.,  9196., 10734., 11340., 12594., 13348., 11875., 12590., 12500., 13240.,  9618., 10220.,  6917.,  7376.,  4558.,  4868.,  5488.,  5888.,  6334.,  6828.,  6030.,  6480.,  6430.,  6900.,  4896.,  5280.,  3478.,  3772.,  1976.,  2112.,  2414.,  2580.,  2849.,  3048.,  3010.,  3160.,  3235.,  3400.,  2522.,  2660.,  1836.,  1944., 10089., 10350., 13334., 13688., 16510., 16960., 17035., 17500., 17560., 18040., 13850., 14240., 10233., 10530., 13546., 13936., 17808., 18336., 21930., 22600., 22530., 23220., 23130., 23840., 18144., 18720., 13330., 13768., 16700., 17240., 21830., 22560., 26725., 27650., 27350., 28300., 27975., 28950., 21810., 22600., 15920., 16520., 19535., 20180., 25470., 26340., 31100., 32200., 31725., 32850., 32350., 33500., 25170., 26100., 18335., 19040., 13342., 13900., 17232., 17984., 20830., 21780., 21230., 22200., 21630., 22620., 16640., 17440., 11974., 12580.,  8082.,  8532., 10286., 10892., 12235., 13000., 12460., 13240., 12685., 13480.,  9578., 10220.,  6750.,  7236.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14225., 14650., 14850., 15300., 15475., 15950., 18600., 19200., 19225., 19850., 19850., 20500., 16859., 17758., 15500., 16360., 16125., 17010., 12594., 13348., 11875., 12590., 12500., 13240., 26725., 27650., 27350., 28300., 27975., 28950., 31100., 32200., 31725., 32850., 32350., 33500.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1977.,  2058.,  2139.,  2220.,  2618.,  2732.,  2846.,  2960.,  3742.,  3892.,  4042.,  4192.,  4201.,  4366.,  4531.,  4696.,  4660.,  4840.,  5020.,  5200.,  3742.,  3892.,  4042.,  4192.,  2901.,  3018.,  3135.,  3252.,  4094.,  4244.,  4394.,  4544.,  5328.,  5536.,  5744.,  5952.,  7430.,  7700.,  7970.,  8240.,  8034.,  8324.,  8614.,  8904.,  8638.,  8948.,  9258.,  9568.,  6848.,  7104.,  7360.,  7616.,  5214.,  5412.,  5610.,  5808.,  6784.,  7024.,  7264.,  7504.,  8706.,  9036.,  9366.,  9696., 11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832., 13131., 13606., 14081., 14556., 10270., 10660., 11050., 11440.,  7692.,  7992.,  8292.,  8592.,  9661., 10006., 10351., 10696., 12262., 12732., 13202., 13672., 16376., 16976., 17576., 18176., 17025., 17650., 18275., 18900., 17674., 18324., 18974., 19624., 13714., 14244., 14774., 15304., 10177., 10582., 10987., 11392.,  8702.,  9020.,  9338.,  9656., 10992., 11424., 11856., 12288., 15254., 15804., 16354., 16904., 15778., 16348., 16918., 17488., 16302., 16892., 17482., 18072., 12768., 13248., 13728., 14208.,  9630.,  9996., 10362., 10728.,  9774., 10044., 10314., 10584., 12526., 12892., 13258., 13624., 15005., 15470., 15935., 16400., 15440., 15920., 16400., 16880., 15875., 16370., 16865., 17360., 12034., 12436., 12838., 13240.,  8514.,  8820.,  9126.,  9432., 13443., 13902., 14361., 14820., 16898., 17516., 18134., 18752., 23020., 23800., 24580., 25360., 23479., 24274., 25069., 25864., 23938., 24748., 25558., 26368., 18694., 19348., 20002., 20656., 14031., 14526., 15021., 15516., 15750., 16276., 16802., 17328., 19248., 19936., 20624., 21312., 25886., 26740., 27594., 28448., 25402., 26212., 27022., 27832., 26006., 26836., 27666., 28496., 20448., 21120., 21792., 22464., 15462., 15972., 16482., 16992., 17070., 17620., 18170., 18720., 21402., 22124., 22846., 23568., 29299., 30198., 31097., 31996., 26044., 26904., 27764., 28624., 26693., 27578., 28463., 29348., 20182., 20900., 21618., 22336., 14282., 14828., 15374., 15920., 12587., 13050., 13513., 13976., 14718., 15324., 15930., 16536., 16882., 17636., 18390., 19144., 14907., 15622., 16337., 17052., 15556., 16296., 17036., 17776., 11594., 12196., 12798., 13400.,  8127.,  8586.,  9045.,  9504.,  5926.,  6236.,  6546.,  6856.,  6608.,  7008.,  7408.,  7808.,  7950.,  8444.,  8938.,  9432.,  7130.,  7580.,  8030.,  8480.,  7654.,  8124.,  8594.,  9064.,  5760.,  6144.,  6528.,  6912.,  4166.,  4460.,  4754.,  5048.,  3816.,  3952.,  4088.,  4224.,  4662.,  4828.,  4994.,  5160.,  5499.,  5698.,  5897.,  6096.,  5870.,  6020.,  6170.,  6320.,  6305.,  6470.,  6635.,  6800.,  4906.,  5044.,  5182.,  5320.,  3564.,  3672.,  3780.,  3888.,  7437.,  7698.,  7959.,  8220.,  9418.,  9772., 10126., 10480., 12922., 13372., 13822., 14272., 13381., 13846., 14311., 14776., 13840., 14320., 14800., 15280., 10862., 11252., 11642., 12032.,  8201.,  8498.,  8795.,  9092., 11534., 11924., 12314., 12704., 14608., 15136., 15664., 16192., 19510., 20180., 20850., 21520., 20114., 20804., 21494., 22184., 20718., 21428., 22138., 22848., 16128., 16704., 17280., 17856., 12014., 12452., 12890., 13328., 15004., 15544., 16084., 16624., 18866., 19596., 20326., 21056., 24813., 25738., 26663., 27588., 25462., 26412., 27362., 28312., 26111., 27086., 28061., 29036., 20110., 20900., 21690., 22480., 14792., 15392., 15992., 16592., 17881., 18526., 19171., 19816., 22422., 23292., 24162., 25032., 29356., 30456., 31556., 32656., 30005., 31130., 32255., 33380., 30654., 31804., 32954., 34104., 23554., 24484., 25414., 26344., 17277., 17982., 18687., 19392., 15182., 15740., 16298., 16856., 18992., 19744., 20496., 21248., 25734., 26684., 27634., 28584., 26258., 27228., 28198., 29168., 26782., 27772., 28762., 29752., 20768., 21568., 22368., 23168., 15470., 16076., 16682., 17288., 15714., 16164., 16614., 17064., 19966., 20572., 21178., 21784., 23705., 24470., 25235., 26000., 24140., 24920., 25700., 26480., 24575., 25370., 26165., 26960., 18514., 19156., 19798., 20440., 13014., 13500., 13986., 14472.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832., 13131., 13606., 14081., 14556., 16376., 16976., 17576., 18176., 17025., 17650., 18275., 18900., 17674., 18324., 18974., 19624., 29299., 30198., 31097., 31996., 26044., 26904., 27764., 28624., 26693., 27578., 28463., 29348., 16882., 17636., 18390., 19144., 14907., 15622., 16337., 17052., 15556., 16296., 17036., 17776., 24813., 25738., 26663., 27588., 25462., 26412., 27362., 28312., 26111., 27086., 28061., 29036., 29356., 30456., 31556., 32656., 30005., 31130., 32255., 33380., 30654., 31804., 32954., 34104.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6525.,  7020.,  8956.,  9616., 11495., 12320., 12545., 13400., 13595., 14480., 10972., 11680.,  8289.,  8820., 11348., 12032., 15280., 16192., 19260., 20400., 20460., 21640., 21660., 22880., 17264., 18240., 12884., 13616., 16795., 17680., 22340., 23520., 24689., 26100., 22931., 24328., 21301., 22684., 15300., 16368.,  9439., 10192., 13441., 14344., 17844., 19048., 19679., 21120., 18561., 19988., 17571., 18984., 12676., 13768.,  7933.,  8704.,  8756.,  9464., 11472., 12416., 12204., 13320., 11276., 12368., 10476., 11544.,  7312.,  8128.,  4340.,  4904.,  4707.,  5208.,  6044.,  6712.,  6029.,  6800.,  5391.,  6128.,  4881.,  5584.,  3244.,  3768.,  1791.,  2136., 13185., 13860., 17596., 18496., 21995., 23120., 23045., 24200., 24095., 25280., 19132., 20080., 14229., 14940., 12884., 13680., 16176., 17216., 19484., 20768., 18060., 19320., 19260., 20560., 15280., 16320., 11348., 12128., 11007., 11872., 13860., 14992., 16709., 18108., 15975., 17360., 17225., 18660., 13572., 14720., 10003., 10864., 10853., 11736., 13844., 15000., 16819., 18248., 16725., 18140., 17975., 19440., 14148., 15320., 10417., 11296.,  6548.,  7176.,  8272.,  9088.,  9964., 10968., 10060., 11040., 10860., 11880.,  8464.,  9280.,  6164.,  6776.,  3479.,  3840.,  4444.,  4904.,  5409.,  5968.,  5795.,  6320.,  6245.,  6800.,  4876.,  5320.,  3555.,  3888., 10821., 11484., 14460., 15344., 18095., 19200., 16649., 17720., 15331., 16368., 11420., 12224.,  7561.,  8132., 10580., 11360., 14128., 15168., 17660., 18960., 17004., 18280., 16476., 17728., 12528., 13504.,  8660.,  9360., 11683., 12592., 15492., 16704., 19225., 20740., 19259., 20760., 19421., 20908., 14980., 16144., 10695., 11536., 14089., 15016., 18676., 19912., 23175., 24720., 23849., 25380., 24651., 26168., 19396., 20584., 14309., 15168.,  9524., 10136., 12624., 13440., 15660., 16680., 16460., 17520., 17260., 18360., 13520., 14400.,  9908., 10568.,  6219.,  6696.,  8092.,  8728.,  9845., 10640., 10295., 11120., 10745., 11600.,  8236.,  8920.,  5895.,  6408.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24689., 26100., 22931., 24328., 21301., 22684., 19679., 21120., 18561., 19988., 17571., 18984., 16709., 18108., 15975., 17360., 17225., 18660., 16819., 18248., 16725., 18140., 17975., 19440., 19225., 20740., 19259., 20760., 19421., 20908., 23175., 24720., 23849., 25380., 24651., 26168.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3681.,  3834.,  4278.,  4440.,  4896.,  5112.,  5692.,  5920.,  7025.,  7310.,  8084.,  8384.,  7943.,  8258.,  9062.,  9392.,  8861.,  9206., 10040., 10400.,  7128.,  7416.,  8084.,  8384.,  5537.,  5762.,  6270.,  6504.,  7816.,  8104.,  8788.,  9088., 10192., 10592., 11488., 11904., 14256., 14776., 15940., 16480., 15464., 16024., 17228., 17808., 16672., 17272., 18516., 19136., 13232., 13728., 14720., 15232., 10088., 10472., 11220., 11616., 13157., 13622., 14528., 15008., 16904., 17544., 18732., 19392., 20905., 21666., 23126., 23912., 20347., 21094., 22540., 23312., 20045., 20778., 22210., 22968., 15248., 15816., 16916., 17504., 10997., 11390., 12168., 12576., 13343., 13826., 14750., 15248., 17104., 17768., 18980., 19664., 23271., 24062., 25552., 26368., 23993., 24770., 26246., 27048., 24971., 25734., 27196., 27984., 20088., 20680., 21804., 22416., 11679., 12090., 12886., 13312., 15352., 15784., 16564., 17008., 19792., 20384., 21408., 22016., 20640., 21336., 22596., 23312., 18296., 18968., 20204., 20896., 16208., 16856., 18068., 18736., 10864., 11360., 12288., 12800.,  6040.,  6376.,  7028.,  7376.,  9075.,  9414., 10068., 10416., 11624., 12088., 12948., 13424., 11527., 12058., 13054., 13600., 10285., 10782., 11744., 12256.,  9299.,  9762., 10690., 11168.,  6144.,  6488.,  7180.,  7536.,  3363.,  3582.,  4044.,  4272.,  9141.,  9474., 10098., 10440., 11696., 12152., 12972., 13440., 16205., 16790., 17864., 18464., 17123., 17738., 18842., 19472., 18041., 18686., 19820., 20480., 14248., 14776., 15684., 16224., 10837., 11242., 11930., 12344., 11288., 11688., 12484., 12896., 13904., 14432., 15456., 16000., 19424., 20088., 21396., 22080., 19544., 20184., 21468., 22128., 20752., 21432., 22756., 23456., 16624., 17184., 18240., 18816., 12856., 13288., 14084., 14528., 14401., 14846., 15732., 16192., 18424., 19016., 20156., 20768., 26205., 26954., 28402., 29176., 23599., 24334., 25768., 26528., 24897., 25682., 27166., 27976., 19136., 19784., 20964., 21632., 13809., 14310., 15196., 15712., 12795., 13258., 14162., 14640., 15296., 15912., 17076., 17712., 18331., 19110., 20588., 21392., 17005., 17770., 19234., 20024., 18303., 19118., 20632., 21472., 13992., 14664., 15868., 16560., 10139., 10658., 11562., 12096.,  7176.,  7528.,  8228.,  8592.,  8400.,  8864.,  9760., 10240., 11152., 11736., 12884., 13488., 10856., 11416., 12540., 13120., 11904., 12504., 13668., 14288.,  9328.,  9824., 10752., 11264.,  7080.,  7464.,  8164.,  8560.,  6759.,  6958.,  7472.,  7680.,  8632.,  8888.,  9540.,  9808., 10499., 10818., 11602., 11936., 11305., 11590., 12340., 12640., 12175., 12490., 13270., 13600.,  9488.,  9752., 10364., 10640.,  6903.,  7110.,  7560.,  7776.,  9033.,  9354.,  9966., 10296., 11584., 12024., 12828., 13280., 17385., 17950., 19004., 19584., 17471., 18002., 19022., 19568., 17813., 18310., 19296., 19808., 14584., 14968., 15732., 16128., 11721., 11986., 12534., 12808., 15400., 15784., 16564., 16960., 20048., 20576., 21600., 22144., 24720., 25400., 26724., 27424., 22280., 22936., 24236., 24912., 20096., 20728., 22004., 22656., 14512., 15008., 16000., 16512.,  9352.,  9704., 10420., 10784., 12125., 12614., 13544., 14048., 15464., 16136., 17356., 18048., 19601., 20466., 22030., 22920., 18531., 19382., 20932., 21808., 17717., 18554., 20090., 20952., 12976., 13640., 14836., 15520.,  8813.,  9294., 10160., 10656., 11543., 12050., 12998., 13520., 14640., 15336., 16580., 17296., 19407., 20302., 21896., 22816., 19617., 20498., 22078., 22984., 20083., 20950., 22516., 23408., 15512., 16200., 17420., 18128., 11543., 12042., 12926., 13440.,  9304.,  9640., 10324., 10672., 11984., 12448., 13344., 13824., 17408., 18008., 19172., 19792., 18456., 19096., 20300., 20960., 19504., 20184., 21428., 22128., 15536., 16096., 17088., 17664., 11960., 12392., 13140., 13584., 12123., 12438., 13068., 13392., 15752., 16184., 17012., 17456., 19135., 19690., 20710., 21280., 20005., 20590., 21640., 22240., 20875., 21490., 22570., 23200., 15968., 16472., 17324., 17840., 11403., 11790., 12420., 12816.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20905., 21666., 23126., 23912., 20347., 21094., 22540., 23312., 20045., 20778., 22210., 22968., 23271., 24062., 25552., 26368., 23993., 24770., 26246., 27048., 24971., 25734., 27196., 27984., 26205., 26954., 28402., 29176., 23599., 24334., 25768., 26528., 24897., 25682., 27166., 27976., 18331., 19110., 20588., 21392., 17005., 17770., 19234., 20024., 18303., 19118., 20632., 21472., 19601., 20466., 22030., 22920., 18531., 19382., 20932., 21808., 17717., 18554., 20090., 20952., 19407., 20302., 21896., 22816., 19617., 20498., 22078., 22984., 20083., 20950., 22516., 23408.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4521.,  4674.,  4827.,  4980.,  5450.,  5612.,  5774.,  5936.,  6312.,  6528.,  6744.,  6960.,  7572.,  7800.,  8028.,  8256.,  8837.,  9122.,  9407.,  9692., 10492., 10792., 11092., 11392.,  9747., 10062., 10377., 10692., 11522., 11852., 12182., 12512., 10657., 11002., 11347., 11692., 12552., 12912., 13272., 13632., 10064., 10352., 10640., 10928., 11644., 11944., 12244., 12544.,  7265.,  7490.,  7715.,  7940.,  8466.,  8700.,  8934.,  9168.,  8560.,  8848.,  9136.,  9424., 10108., 10408., 10708., 11008., 11472., 11872., 12272., 12672., 13600., 14016., 14432., 14848., 15768., 16288., 16808., 17328., 18540., 19080., 19620., 20160., 16992., 17552., 18112., 18672., 19924., 20504., 21084., 21664., 18216., 18816., 19416., 20016., 21308., 21928., 22548., 23168., 16752., 17248., 17744., 18240., 19328., 19840., 20352., 20864., 12624., 13008., 13392., 13776., 14620., 15016., 15412., 15808., 13689., 14154., 14619., 15084., 16032., 16512., 16992., 17472., 18384., 19024., 19664., 20304., 21572., 22232., 22892., 23552., 24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 22603., 23350., 24097., 24844., 26388., 27160., 27932., 28704., 20861., 21594., 22327., 23060., 24590., 25348., 26106., 26864., 15336., 15904., 16472., 17040., 18268., 18856., 19444., 20032., 10849., 11242., 11635., 12028., 12920., 13328., 13736., 14144., 12763., 13246., 13729., 14212., 15178., 15676., 16174., 16672., 16584., 17248., 17912., 18576., 19868., 20552., 21236., 21920., 21495., 22286., 23077., 23868., 25456., 26272., 27088., 27904., 21801., 22578., 23355., 24132., 25706., 26508., 27310., 28112., 22619., 23382., 24145., 24908., 26468., 27256., 28044., 28832., 19616., 20208., 20800., 21392., 22644., 23256., 23868., 24480., 12707., 13118., 13529., 13940., 14850., 15276., 15702., 16128., 13056., 13488., 13920., 14352., 15148., 15592., 16036., 16480., 17488., 18080., 18672., 19264., 20320., 20928., 21536., 22144., 18312., 19008., 19704., 20400., 21692., 22408., 23124., 23840., 16720., 17392., 18064., 18736., 20004., 20696., 21388., 22080., 15640., 16288., 16936., 17584., 18828., 19496., 20164., 20832., 12272., 12768., 13264., 13760., 14720., 15232., 15744., 16256., 10208., 10544., 10880., 11216., 11916., 12264., 12612., 12960.,  8403.,  8742.,  9081.,  9420., 10060., 10408., 10756., 11104., 12288., 12752., 13216., 13680., 14540., 15016., 15492., 15968., 14907., 15438., 15969., 16500., 17498., 18044., 18590., 19136., 15657., 16154., 16651., 17148., 18112., 18624., 19136., 19648., 12823., 13286., 13749., 14212., 15142., 15620., 16098., 16576.,  7528.,  7872.,  8216.,  8560.,  9268.,  9624.,  9980., 10336.,  3243.,  3462.,  3681.,  3900.,  4404.,  4632.,  4860.,  5088., 10141., 10474., 10807., 11140., 11790., 12132., 12474., 12816., 13272., 13728., 14184., 14640., 15492., 15960., 16428., 16896., 17937., 18522., 19107., 19692., 20792., 21392., 21992., 22592., 18847., 19462., 20077., 20692., 21822., 22452., 23082., 23712., 19757., 20402., 21047., 21692., 22852., 23512., 24172., 24832., 17664., 18192., 18720., 19248., 20204., 20744., 21284., 21824., 12565., 12970., 13375., 13780., 14486., 14900., 15314., 15728., 11808., 12208., 12608., 13008., 13804., 14216., 14628., 15040., 13904., 14432., 14960., 15488., 16544., 17088., 17632., 18176., 18536., 19200., 19864., 20528., 21884., 22568., 23252., 23936., 17648., 18288., 18928., 19568., 20900., 21560., 22220., 22880., 18872., 19552., 20232., 20912., 22284., 22984., 23684., 24384., 15792., 16352., 16912., 17472., 18624., 19200., 19776., 20352., 12992., 13424., 13856., 14288., 15180., 15624., 16068., 16512., 12613., 13058., 13503., 13948., 14876., 15336., 15796., 16256., 16608., 17200., 17792., 18384., 19604., 20216., 20828., 21440., 23949., 24698., 25447., 26196., 27742., 28516., 29290., 30064., 21695., 22430., 23165., 23900., 25432., 26192., 26952., 27712., 23089., 23874., 24659., 25444., 27026., 27836., 28646., 29456., 19448., 20096., 20744., 21392., 22700., 23368., 24036., 24704., 15341., 15842., 16343., 16844., 17844., 18360., 18876., 19392., 12199., 12662., 13125., 13588., 14534., 15012., 15490., 15968., 16344., 16960., 17576., 18192., 19436., 20072., 20708., 21344., 20587., 21366., 22145., 22924., 24500., 25304., 26108., 26912., 20893., 21658., 22423., 23188., 24750., 25540., 26330., 27120., 22287., 23102., 23917., 24732., 26344., 27184., 28024., 28864., 20144., 20816., 21488., 22160., 23492., 24184., 24876., 25568., 16687., 17206., 17725., 18244., 19262., 19796., 20330., 20864., 10864., 11216., 11568., 11920., 12636., 13000., 13364., 13728., 11728., 12192., 12656., 13120., 14048., 14528., 15008., 15488., 13784., 14368., 14952., 15536., 16716., 17320., 17924., 18528., 12192., 12752., 13312., 13872., 15028., 15608., 16188., 16768., 13224., 13824., 14424., 15024., 16220., 16840., 17460., 18080.,  9712., 10208., 10704., 11200., 12160., 12672., 13184., 13696.,  7120.,  7504.,  7888.,  8272.,  9020.,  9416.,  9812., 10208.,  5703.,  5902.,  6101.,  6300.,  6800.,  7008.,  7216.,  7424.,  7024.,  7280.,  7536.,  7792.,  8444.,  8712.,  8980.,  9248.,  8199.,  8518.,  8837.,  9156.,  9942., 10276., 10610., 10944.,  8949.,  9234.,  9519.,  9804., 10556., 10856., 11156., 11456.,  9763., 10078., 10393., 10708., 11490., 11820., 12150., 12480.,  7896.,  8160.,  8424.,  8688.,  9316.,  9592.,  9868., 10144.,  6495.,  6702.,  6909.,  7116.,  7608.,  7824.,  8040.,  8256.,  8913.,  9234.,  9555.,  9876., 10514., 10844., 11174., 11504., 10760., 11200., 11640., 12080., 12916., 13368., 13820., 14272., 15453., 16018., 16583., 17148., 18228., 18808., 19388., 19968., 14763., 15294., 15825., 16356., 17402., 17948., 18494., 19040., 14585., 15082., 15579., 16076., 17088., 17600., 18112., 18624., 12080., 12464., 12848., 13232., 14044., 14440., 14836., 15232.,  9353.,  9618.,  9883., 10148., 10714., 10988., 11262., 11536., 12368., 12752., 13136., 13520., 14300., 14696., 15092., 15488., 17232., 17760., 18288., 18816., 19872., 20416., 20960., 21504., 21688., 22368., 23048., 23728., 25100., 25800., 26500., 27200., 19776., 20432., 21088., 21744., 23092., 23768., 24444., 25120., 18376., 19008., 19640., 20272., 21596., 22248., 22900., 23552., 16240., 16736., 17232., 17728., 18816., 19328., 19840., 20352., 13232., 13584., 13936., 14288., 15100., 15464., 15828., 16192., 12625., 13114., 13603., 14092., 15064., 15568., 16072., 16576., 18032., 18704., 19376., 20048., 21348., 22040., 22732., 23424., 23681., 24546., 25411., 26276., 27938., 28828., 29718., 30608., 24499., 25350., 26201., 27052., 28700., 29576., 30452., 31328., 25829., 26666., 27503., 28340., 29974., 30836., 31698., 32560., 19912., 20576., 21240., 21904., 23228., 23912., 24596., 25280., 12537., 13018., 13499., 13980., 14960., 15456., 15952., 16448., 14259., 14766., 15273., 15780., 16770., 17292., 17814., 18336., 18280., 18976., 19672., 20368., 21692., 22408., 23124., 23840., 23391., 24286., 25181., 26076., 27768., 28688., 29608., 30528., 22673., 23554., 24435., 25316., 26994., 27900., 28806., 29712., 22467., 23334., 24201., 25068., 26732., 27624., 28516., 29408., 19584., 20272., 20960., 21648., 22996., 23704., 24412., 25120., 14395., 14894., 15393., 15892., 16890., 17404., 17918., 18432.,  8736.,  9072.,  9408.,  9744., 10444., 10792., 11140., 11488., 11216., 11680., 12144., 12608., 13536., 14016., 14496., 14976., 16040., 16640., 17240., 17840., 19036., 19656., 20276., 20896., 17072., 17712., 18352., 18992., 20228., 20888., 21548., 22208., 18104., 18784., 19464., 20144., 21420., 22120., 22820., 23520., 14384., 14944., 15504., 16064., 17088., 17664., 18240., 18816., 11712., 12144., 12576., 13008., 13804., 14248., 14692., 15136.,  9915., 10230., 10545., 10860., 11476., 11800., 12124., 12448., 13408., 13840., 14272., 14704., 15532., 15976., 16420., 16864., 16275., 16830., 17385., 17940., 18962., 19532., 20102., 20672., 17089., 17674., 18259., 18844., 19896., 20496., 21096., 21696., 17903., 18518., 19133., 19748., 20830., 21460., 22090., 22720., 14216., 14720., 15224., 15728., 16596., 17112., 17628., 18144., 11475., 11862., 12249., 12636., 13308., 13704., 14100., 14496.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 22603., 23350., 24097., 24844., 26388., 27160., 27932., 28704., 20861., 21594., 22327., 23060., 24590., 25348., 26106., 26864., 21495., 22286., 23077., 23868., 25456., 26272., 27088., 27904., 21801., 22578., 23355., 24132., 25706., 26508., 27310., 28112., 22619., 23382., 24145., 24908., 26468., 27256., 28044., 28832., 23949., 24698., 25447., 26196., 27742., 28516., 29290., 30064., 21695., 22430., 23165., 23900., 25432., 26192., 26952., 27712., 23089., 23874., 24659., 25444., 27026., 27836., 28646., 29456., 20587., 21366., 22145., 22924., 24500., 25304., 26108., 26912., 20893., 21658., 22423., 23188., 24750., 25540., 26330., 27120., 22287., 23102., 23917., 24732., 26344., 27184., 28024., 28864., 23681., 24546., 25411., 26276., 27938., 28828., 29718., 30608., 24499., 25350., 26201., 27052., 28700., 29576., 30452., 31328., 25829., 26666., 27503., 28340., 29974., 30836., 31698., 32560., 23391., 24286., 25181., 26076., 27768., 28688., 29608., 30528., 22673., 23554., 24435., 25316., 26994., 27900., 28806., 29712., 22467., 23334., 24201., 25068., 26732., 27624., 28516., 29408.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4977.,  5492.,  6025.,  6576.,  5484.,  6128.,  6796.,  7488.,  8023.,  8860.,  9727., 10624.,  8515.,  9348., 10211., 11104.,  9263., 10092., 10951., 11840.,  8012.,  8688.,  9388., 10112.,  6777.,  7300.,  7841.,  8400.,  8860.,  9552., 10268., 11008., 11600., 12480., 13392., 14336., 18180., 19312., 20484., 21696., 20532., 21680., 22868., 24096., 19044., 20208., 21412., 22656., 15248., 16192., 17168., 18176., 11516., 12240., 12988., 13760., 14959., 15852., 16775., 17728., 17556., 18704., 19892., 21120., 19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824., 12020., 13072., 14164., 15296.,  8711.,  9468., 10255., 11072., 12003., 12932., 13891., 14880., 14372., 15568., 16804., 18080., 19013., 20476., 21989., 23552., 19433., 20868., 22353., 23888., 20365., 21772., 23229., 24736., 16836., 17936., 19076., 20256.,  9563., 10356., 11179., 12032., 12780., 13520., 14284., 15072., 16272., 17216., 18192., 19200., 16948., 18096., 19284., 20512., 15332., 16432., 17572., 18752., 14228., 15280., 16372., 17504., 10000., 10816., 11664., 12544.,  6028.,  6608.,  7212.,  7840.,  9021.,  9612., 10221., 10848., 12124., 12912., 13724., 14560., 12827., 13748., 14699., 15680., 12455., 13372., 14319., 15296., 12339., 13252., 14195., 15168.,  8828.,  9520., 10236., 10976.,  5541.,  6012.,  6501.,  7008., 10713., 11268., 11841., 12432., 14348., 15088., 15852., 16640., 18255., 19244., 20263., 21312., 20091., 21140., 22219., 23328., 18279., 19324., 20399., 21504., 13996., 14832., 15692., 16576.,  9953., 10580., 11225., 11888.,  8700.,  9424., 10172., 10944., 11152., 12096., 13072., 14080., 15780., 17008., 18276., 19584., 17108., 18352., 19636., 20960., 17156., 18416., 19716., 21056., 13776., 14784., 15824., 16896., 10588., 11344., 12124., 12928., 11559., 12412., 13295., 14208., 15284., 16400., 17556., 18752., 22897., 24340., 25833., 27376., 21589., 23068., 24597., 26176., 23097., 24612., 26177., 27792., 18004., 19216., 20468., 21760., 13247., 14156., 15095., 16064., 13211., 14100., 15019., 15968., 14340., 15440., 16580., 17760., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824., 16885., 18268., 19701., 21184., 12900., 13968., 15076., 16224., 10131., 10948., 11795., 12672.,  9676., 10448., 11244., 12064., 11152., 12096., 13072., 14080., 16148., 17328., 18548., 19808., 16580., 17712., 18884., 20096., 18612., 19760., 20948., 22176., 11600., 12480., 13392., 14336.,  8620.,  9296.,  9996., 10720., 12645., 13276., 13925., 14592., 12924., 13680., 14460., 15264., 13459., 14340., 15251., 16192., 11999., 12812., 13655., 14528., 10859., 11668., 12507., 13376.,  6620.,  7216.,  7836.,  8480.,  4941.,  5388.,  5853.,  6336.,  5889.,  6420.,  6969.,  7536.,  7980.,  8688.,  9420., 10176., 12935., 13884., 14863., 15872., 13939., 14884., 15859., 16864., 15199., 16140., 17111., 18112., 12812., 13552., 14316., 15104., 10633., 11172., 11729., 12304., 13916., 14672., 15452., 16256., 18640., 19648., 20688., 21760., 23876., 25200., 26564., 27968., 22644., 23984., 25364., 26784., 21668., 23024., 24420., 25856., 16144., 17216., 18320., 19456., 10940., 11728., 12540., 13376.,  9439., 10252., 11095., 11968., 12756., 13840., 14964., 16128., 18393., 19812., 21281., 22800., 18621., 20076., 21581., 23136., 19105., 20596., 22137., 23728., 14836., 16016., 17236., 18496., 10935., 11804., 12703., 13632., 12883., 13732., 14611., 15520., 17252., 18384., 19556., 20768., 21589., 23068., 24597., 26176., 23097., 24612., 26177., 27792., 24861., 26412., 28013., 29664., 19396., 20624., 21892., 23200., 14347., 15252., 16187., 17152.,  6380.,  6992.,  7628.,  8288.,  8720.,  9536., 10384., 11264., 12916., 14000., 15124., 16288., 15012., 16176., 17380., 18624., 17108., 18352., 19636., 20960., 13776., 14784., 15824., 16896., 10700., 11472., 12268., 13088.,  7437.,  7980.,  8541.,  9120., 10140., 10864., 11612., 12384., 12875., 13780., 14715., 15680., 14615., 15580., 16575., 17600., 16355., 17380., 18435., 19520., 12668., 13488., 14332., 15200.,  9141.,  9756., 10389., 11040.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824., 19013., 20476., 21989., 23552., 19433., 20868., 22353., 23888., 20365., 21772., 23229., 24736., 22897., 24340., 25833., 27376., 21589., 23068., 24597., 26176., 23097., 24612., 26177., 27792., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824., 16885., 18268., 19701., 21184., 18393., 19812., 21281., 22800., 18621., 20076., 21581., 23136., 19105., 20596., 22137., 23728., 21589., 23068., 24597., 26176., 23097., 24612., 26177., 27792., 24861., 26412., 28013., 29664.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8697.,  8930.,  9462.,  9704., 10263., 10514., 11100., 11360.,  8564.,  8856.,  9520.,  9824., 10524., 10840., 11576., 11904., 10371., 10734., 11582., 11960., 12853., 13246., 14184., 14592.,  9567.,  9926., 10770., 11144., 12033., 12422., 13356., 13760.,  9275.,  9630., 10470., 10840., 11725., 12110., 13040., 13440.,  8228.,  8536.,  9248.,  9568., 10316., 10648., 11432., 11776.,  6393.,  6642.,  7174.,  7432.,  7991.,  8258.,  8844.,  9120.,  8324.,  8632.,  9312.,  9632., 10348., 10680., 11432., 11776., 10320., 10720., 11616., 12032., 12976., 13408., 14400., 14848., 16076., 16584., 17744., 18272., 19492., 20040., 21320., 21888., 18460., 18984., 20160., 20704., 21940., 22504., 23800., 24384., 17260., 17800., 18992., 19552., 20804., 21384., 22696., 23296., 16080., 16544., 17568., 18048., 19120., 19616., 20736., 21248., 12676., 13048., 13856., 14240., 15084., 15480., 16360., 16768., 13707., 14174., 15094., 15576., 16541., 17038., 18048., 18560., 17660., 18280., 19488., 20128., 21396., 22056., 23384., 24064., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 15180., 15720., 16880., 17440., 18660., 19240., 20520., 21120., 12171., 12558., 13414., 13816., 14717., 15134., 16080., 16512., 13391., 13894., 14850., 15368., 16369., 16902., 17948., 18496., 19180., 19848., 21104., 21792., 23108., 23816., 25192., 25920., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208., 20633., 21394., 22902., 23688., 25271., 26082., 27740., 28576., 20221., 20954., 22434., 23192., 24747., 25530., 27160., 27968., 18108., 18696., 19904., 20512., 21780., 22408., 23736., 24384., 10767., 11190., 12082., 12520., 13457., 13910., 14892., 15360., 11524., 11928., 12672., 13088., 13868., 14296., 15112., 15552., 13968., 14496., 15456., 16000., 17008., 17568., 18624., 19200., 13836., 14440., 15600., 16224., 17444., 18088., 19368., 20032., 12700., 13256., 14368., 14944., 16116., 16712., 17944., 18560., 12588., 13096., 14160., 14688., 15812., 16360., 17544., 18112., 10256., 10656., 11488., 11904., 12784., 13216., 14144., 14592.,  8964.,  9240.,  9856., 10144., 10796., 11096., 11784., 12096.,  7453.,  7738.,  8306.,  8600.,  9195.,  9498., 10120., 10432., 11428., 11832., 12608., 13024., 13836., 14264., 15112., 15552., 14495., 14966., 15874., 16360., 17313., 17814., 18812., 19328., 16059., 16526., 17430., 17912., 18861., 19358., 20352., 20864., 14039., 14502., 15402., 15880., 16825., 17318., 18308., 18816.,  8788.,  9144.,  9840., 10208., 10940., 11320., 12088., 12480.,  4509.,  4746.,  5250.,  5496.,  6027.,  6282.,  6840.,  7104.,  9889., 10162., 10734., 11016., 11615., 11906., 12532., 12832., 13396., 13784., 14544., 14944., 15740., 16152., 16984., 17408., 16859., 17374., 18374., 18904., 19949., 20494., 21584., 22144., 18679., 19254., 20314., 20904., 22009., 22614., 23764., 24384., 17363., 17934., 18990., 19576., 20677., 21278., 22424., 23040., 15428., 15896., 16768., 17248., 18156., 18648., 19592., 20096., 10593., 10946., 11582., 11944., 12607., 12978., 13668., 14048.,  8996.,  9336., 10048., 10400., 11148., 11512., 12296., 12672., 11920., 12384., 13344., 13824., 14832., 15328., 16384., 16896., 16812., 17416., 18672., 19296., 20612., 21256., 22632., 23296., 17148., 17768., 19040., 19680., 21012., 21672., 23064., 23744., 19020., 19656., 20944., 21600., 22948., 23624., 25032., 25728., 18192., 18720., 19808., 20352., 21488., 22048., 23232., 23808., 12836., 13240., 14080., 14496., 15372., 15800., 16712., 17152., 12067., 12494., 13374., 13816., 14741., 15198., 16168., 16640., 15708., 16296., 17472., 18080., 19316., 19944., 21240., 21888., 22945., 23714., 25230., 26024., 27615., 28434., 30100., 30944., 22085., 22890., 24442., 25272., 26899., 27754., 29456., 30336., 22761., 23602., 25190., 26056., 27719., 28610., 30348., 31264., 19820., 20520., 21840., 22560., 23940., 24680., 26120., 26880., 14947., 15486., 16494., 17048., 18101., 18670., 19768., 20352., 12775., 13238., 14154., 14632., 15593., 16086., 17092., 17600., 17676., 18248., 19408., 20000., 21220., 21832., 23112., 23744., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 18917., 19626., 21082., 21816., 23347., 24106., 25712., 26496., 15388., 15944., 17120., 17696., 18932., 19528., 20824., 21440., 13927., 14374., 15290., 15752., 16713., 17190., 18196., 18688., 12964., 13400., 14176., 14624., 15436., 15896., 16744., 17216., 12944., 13472., 14432., 14976., 15984., 16544., 17600., 18176., 16300., 16936., 18128., 18784., 20036., 20712., 22024., 22720., 15164., 15752., 16896., 17504., 18708., 19336., 20600., 21248., 17164., 17768., 18928., 19552., 20772., 21416., 22696., 23360., 10320., 10784., 11680., 12160., 13104., 13600., 14592., 15104.,  7908.,  8280.,  8992.,  9376., 10124., 10520., 11304., 11712., 10053., 10378., 10986., 11320., 11955., 12298., 12960., 13312.,  9988., 10360., 11104., 11488., 12268., 12664., 13480., 13888., 10167., 10598., 11466., 11912., 12825., 13286., 14244., 14720.,  9619.,  9982., 10782., 11160., 12005., 12398., 13288., 13696.,  9647., 10006., 10802., 11176., 12017., 12406., 13292., 13696.,  8052.,  8312.,  8912.,  9184.,  9820., 10104., 10776., 11072.,  7941.,  8154.,  8634.,  8856.,  9363.,  9594., 10128., 10368.,  6409.,  6658.,  7206.,  7464.,  8039.,  8306.,  8908.,  9184.,  8372.,  8728.,  9456.,  9824., 10588., 10968., 11768., 12160., 12915., 13390., 14350., 14840., 15845., 16350., 17400., 17920., 13135., 13606., 14562., 15048., 16049., 16550., 17596., 18112., 13867., 14334., 15286., 15768., 16765., 17262., 18304., 18816., 12644., 13016., 13792., 14176., 14988., 15384., 16232., 16640.,  9993., 10258., 10806., 11080., 11655., 11938., 12540., 12832., 12228., 12600., 13344., 13728., 14508., 14904., 15720., 16128., 17104., 17632., 18656., 19200., 20272., 20832., 21952., 22528., 22156., 22856., 24208., 24928., 26340., 27080., 28552., 29312., 21468., 22184., 23552., 24288., 25716., 26472., 27960., 28736., 21292., 22024., 23408., 24160., 25604., 26376., 27880., 28672., 19792., 20384., 21536., 22144., 23344., 23968., 25216., 25856., 15556., 15992., 16864., 17312., 18220., 18680., 19624., 20096.,  8891.,  9278., 10118., 10520., 11405., 11822., 12752., 13184., 13244., 13800., 14944., 15520., 16724., 17320., 18584., 19200., 19593., 20338., 21830., 22600., 24167., 24962., 26604., 27424., 21805., 22586., 24114., 24920., 26523., 27354., 29032., 29888., 24529., 25346., 26910., 27752., 29391., 30258., 31972., 32864., 18636., 19304., 20592., 21280., 22628., 23336., 24744., 25472., 12411., 12910., 13878., 14392., 15405., 15934., 16992., 17536., 13183., 13606., 14482., 14920., 15841., 16294., 17260., 17728., 17836., 18440., 19632., 20256., 21508., 22152., 23464., 24128., 22085., 22890., 24442., 25272., 26899., 27754., 29456., 30336., 22761., 23602., 25190., 26056., 27719., 28610., 30348., 31264., 23949., 24826., 26450., 27352., 29051., 29978., 31752., 32704., 21052., 21768., 23104., 23840., 25236., 25992., 27448., 28224., 16127., 16662., 17666., 18216., 19265., 19830., 20924., 21504.,  6020.,  6296.,  6912.,  7200.,  7852.,  8152.,  8840.,  9152.,  9232.,  9632., 10464., 10880., 11760., 12192., 13120., 13568., 14028., 14568., 15664., 16224., 17380., 17960., 19176., 19776., 16092., 16712., 17888., 18528., 19764., 20424., 21720., 22400., 18156., 18856., 20112., 20832., 22148., 22888., 24264., 25024., 15568., 16160., 17184., 17792., 18864., 19488., 20608., 21248., 14020., 14488., 15296., 15776., 16620., 17112., 17992., 18496.,  7405.,  7642.,  8162.,  8408.,  8955.,  9210.,  9784., 10048.,  9572.,  9912., 10624., 10976., 11724., 12088., 12872., 13248., 11535., 11990., 12882., 13352., 14289., 14774., 15756., 16256., 13163., 13678., 14630., 15160., 16157., 16702., 17744., 18304., 14791., 15366., 16378., 16968., 18025., 18630., 19732., 20352., 11220., 11704., 12528., 13024., 13884., 14392., 15288., 15808.,  8493.,  8874.,  9522.,  9912., 10587., 10986., 11688., 12096.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208., 20633., 21394., 22902., 23688., 25271., 26082., 27740., 28576., 20221., 20954., 22434., 23192., 24747., 25530., 27160., 27968., 22945., 23714., 25230., 26024., 27615., 28434., 30100., 30944., 22085., 22890., 24442., 25272., 26899., 27754., 29456., 30336., 22761., 23602., 25190., 26056., 27719., 28610., 30348., 31264., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 18917., 19626., 21082., 21816., 23347., 24106., 25712., 26496., 19593., 20338., 21830., 22600., 24167., 24962., 26604., 27424., 21805., 22586., 24114., 24920., 26523., 27354., 29032., 29888., 24529., 25346., 26910., 27752., 29391., 30258., 31972., 32864., 22085., 22890., 24442., 25272., 26899., 27754., 29456., 30336., 22761., 23602., 25190., 26056., 27719., 28610., 30348., 31264., 23949., 24826., 26450., 27352., 29051., 29978., 31752., 32704.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8649.,  8882.,  9115.,  9348.,  9850., 10092., 10334., 10576., 11123., 11374., 11625., 11876., 12468., 12728., 12988., 13248.,  7492.,  7784.,  8076.,  8368.,  9008.,  9312.,  9616.,  9920., 10620., 10936., 11252., 11568., 12328., 12656., 12984., 13312.,  8091.,  8454.,  8817.,  9180.,  9986., 10364., 10742., 11120., 12001., 12394., 12787., 13180., 14136., 14544., 14952., 15360.,  8535.,  8894.,  9253.,  9612., 10414., 10788., 11162., 11536., 12413., 12802., 13191., 13580., 14532., 14936., 15340., 15744., 10003., 10358., 10713., 11068., 11866., 12236., 12606., 12976., 13849., 14234., 14619., 15004., 15952., 16352., 16752., 17152.,  7764.,  8072.,  8380.,  8688.,  9344.,  9664.,  9984., 10304., 11020., 11352., 11684., 12016., 12792., 13136., 13480., 13824.,  5561.,  5810.,  6059.,  6308.,  6794.,  7052.,  7310.,  7568.,  8099.,  8366.,  8633.,  8900.,  9476.,  9752., 10028., 10304.,  6996.,  7304.,  7612.,  7920.,  8576.,  8896.,  9216.,  9536., 10252., 10584., 10916., 11248., 12024., 12368., 12712., 13056.,  7952.,  8352.,  8752.,  9152., 10016., 10432., 10848., 11264., 12208., 12640., 13072., 13504., 14528., 14976., 15424., 15872., 12252., 12760., 13268., 13776., 14864., 15392., 15920., 16448., 17636., 18184., 18732., 19280., 20568., 21136., 21704., 22272., 14188., 14712., 15236., 15760., 16864., 17408., 17952., 18496., 19700., 20264., 20828., 21392., 22696., 23280., 23864., 24448., 13052., 13592., 14132., 14672., 15792., 16352., 16912., 17472., 18692., 19272., 19852., 20432., 21752., 22352., 22952., 23552., 11600., 12064., 12528., 12992., 13920., 14400., 14880., 15360., 16368., 16864., 17360., 17856., 18944., 19456., 19968., 20480.,  9108.,  9480.,  9852., 10224., 10944., 11328., 11712., 12096., 12876., 13272., 13668., 14064., 14904., 15312., 15720., 16128., 10371., 10838., 11305., 11772., 12682., 13164., 13646., 14128., 15113., 15610., 16107., 16604., 17664., 18176., 18688., 19200., 15436., 16056., 16676., 17296., 18496., 19136., 19776., 20416., 21716., 22376., 23036., 23696., 25096., 25776., 26456., 27136., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 12284., 12824., 13364., 13904., 15024., 15584., 16144., 16704., 17924., 18504., 19084., 19664., 20984., 21584., 22184., 22784., 10131., 10518., 10905., 11292., 12090., 12492., 12894., 13296., 14169., 14586., 15003., 15420., 16368., 16800., 17232., 17664., 13543., 14046., 14549., 15052., 15998., 16516., 17034., 17552., 18573., 19106., 19639., 20172., 21268., 21816., 22364., 22912., 18684., 19352., 20020., 20688., 21936., 22624., 23312., 24000., 25348., 26056., 26764., 27472., 28920., 29648., 30376., 31104., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 16925., 17658., 18391., 19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424., 29232., 30040., 30848., 16556., 17144., 17732., 18320., 19488., 20096., 20704., 21312., 22580., 23208., 23836., 24464., 25832., 26480., 27128., 27776.,  9335.,  9758., 10181., 10604., 11438., 11876., 12314., 12752., 13661., 14114., 14567., 15020., 16004., 16472., 16940., 17408., 11060., 11464., 11868., 12272., 13024., 13440., 13856., 14272., 15084., 15512., 15940., 16368., 17240., 17680., 18120., 18560., 13200., 13728., 14256., 14784., 15776., 16320., 16864., 17408., 18480., 19040., 19600., 20160., 21312., 21888., 22464., 23040., 13244., 13848., 14452., 15056., 16240., 16864., 17488., 18112., 19396., 20040., 20684., 21328., 22712., 23376., 24040., 24704., 13068., 13624., 14180., 14736., 15872., 16448., 17024., 17600., 18836., 19432., 20028., 20624., 21960., 22576., 23192., 23808., 14940., 15448., 15956., 16464., 17552., 18080., 18608., 19136., 20324., 20872., 21420., 21968., 23256., 23824., 24392., 24960., 10512., 10912., 11312., 11712., 12576., 12992., 13408., 13824., 14768., 15200., 15632., 16064., 17088., 17536., 17984., 18432.,  7348.,  7624.,  7900.,  8176.,  8800.,  9088.,  9376.,  9664., 10348., 10648., 10948., 11248., 11992., 12304., 12616., 12928.,  6365.,  6650.,  6935.,  7220.,  7742.,  8036.,  8330.,  8624.,  9191.,  9494.,  9797., 10100., 10712., 11024., 11336., 11648.,  9780., 10184., 10588., 10992., 11744., 12160., 12576., 12992., 13804., 14232., 14660., 15088., 15960., 16400., 16840., 17280., 11175., 11646., 12117., 12588., 13470., 13956., 14442., 14928., 15885., 16386., 16887., 17388., 18420., 18936., 19452., 19968., 12515., 12982., 13449., 13916., 14794., 15276., 15758., 16240., 17193., 17690., 18187., 18684., 19712., 20224., 20736., 21248., 10783., 11246., 11709., 12172., 13046., 13524., 14002., 14480., 15429., 15922., 16415., 16908., 17932., 18440., 18948., 19456.,  8452.,  8808.,  9164.,  9520., 10224., 10592., 10960., 11328., 12092., 12472., 12852., 13232., 14056., 14448., 14840., 15232.,  5453.,  5690.,  5927.,  6164.,  6670.,  6916.,  7162.,  7408.,  7959.,  8214.,  8469.,  8724.,  9320.,  9584.,  9848., 10112.,  6385.,  6658.,  6931.,  7204.,  7746.,  8028.,  8310.,  8592.,  9179.,  9470.,  9761., 10052., 10684., 10984., 11284., 11584.,  9892., 10280., 10668., 11056., 11792., 12192., 12592., 12992., 13788., 14200., 14612., 15024., 15880., 16304., 16728., 17152., 12723., 13238., 13753., 14268., 15226., 15756., 16286., 16816., 17849., 18394., 18939., 19484., 20592., 21152., 21712., 22272., 14255., 14830., 15405., 15980., 16998., 17588., 18178., 18768., 19861., 20466., 21071., 21676., 22844., 23464., 24084., 24704., 13675., 14246., 14817., 15388., 16402., 16988., 17574., 18160., 19249., 19850., 20451., 21052., 22216., 22832., 23448., 24064., 12276., 12744., 13212., 13680., 14496., 14976., 15456., 15936., 16812., 17304., 17796., 18288., 19224., 19728., 20232., 20736.,  9249.,  9602.,  9955., 10308., 10898., 11260., 11622., 11984., 12619., 12990., 13361., 13732., 14412., 14792., 15172., 15552.,  9332.,  9672., 10012., 10352., 11040., 11392., 11744., 12096., 12844., 13208., 13572., 13936., 14744., 15120., 15496., 15872., 11088., 11552., 12016., 12480., 13408., 13888., 14368., 14848., 15856., 16352., 16848., 17344., 18432., 18944., 19456., 19968., 14140., 14744., 15348., 15952., 17136., 17760., 18384., 19008., 20292., 20936., 21580., 22224., 23608., 24272., 24936., 25600., 16076., 16696., 17316., 17936., 19136., 19776., 20416., 21056., 22356., 23016., 23676., 24336., 25736., 26416., 27096., 27776., 16988., 17624., 18260., 18896., 20112., 20768., 21424., 22080., 23396., 24072., 24748., 25424., 26840., 27536., 28232., 28928., 14736., 15264., 15792., 16320., 17312., 17856., 18400., 18944., 20016., 20576., 21136., 21696., 22848., 23424., 24000., 24576.,  9396.,  9800., 10204., 10608., 11360., 11776., 12192., 12608., 13420., 13848., 14276., 14704., 15576., 16016., 16456., 16896.,  9691., 10118., 10545., 10972., 11842., 12284., 12726., 13168., 14113., 14570., 15027., 15484., 16504., 16976., 17448., 17920., 13100., 13688., 14276., 14864., 16032., 16640., 17248., 17856., 19124., 19752., 20380., 21008., 22376., 23024., 23672., 24320., 19265., 20034., 20803., 21572., 23042., 23836., 24630., 25424., 27019., 27838., 28657., 29476., 31196., 32040., 32884., 33728., 18533., 19338., 20143., 20948., 22454., 23284., 24114., 24944., 26575., 27430., 28285., 29140., 30896., 31776., 32656., 33536., 20873., 21714., 22555., 23396., 24938., 25804., 26670., 27536., 29203., 30094., 30985., 31876., 33668., 34584., 35500., 36416., 16284., 16984., 17684., 18384., 19664., 20384., 21104., 21824., 23204., 23944., 24684., 25424., 26904., 27664., 28424., 29184., 11435., 11974., 12513., 13052., 14002., 14556., 15110., 15664., 16689., 17258., 17827., 18396., 19496., 20080., 20664., 21248., 10815., 11278., 11741., 12204., 13110., 13588., 14066., 14544., 15525., 16018., 16511., 17004., 18060., 18568., 19076., 19584., 17308., 17880., 18452., 19024., 20176., 20768., 21360., 21952., 23204., 23816., 24428., 25040., 26392., 27024., 27656., 28288., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 16389., 17098., 17807., 18516., 19926., 20660., 21394., 22128., 23663., 24422., 25181., 25940., 27600., 28384., 29168., 29952., 14220., 14776., 15332., 15888., 17024., 17600., 18176., 18752., 19988., 20584., 21180., 21776., 23112., 23728., 24344., 24960., 11535., 11982., 12429., 12876., 13734., 14196., 14658., 15120., 16053., 16530., 17007., 17484., 18492., 18984., 19476., 19968., 13396., 13832., 14268., 14704., 15488., 15936., 16384., 16832., 17676., 18136., 18596., 19056., 19960., 20432., 20904., 21376., 12176., 12704., 13232., 13760., 14752., 15296., 15840., 16384., 17456., 18016., 18576., 19136., 20288., 20864., 21440., 22016., 14044., 14680., 15316., 15952., 17168., 17824., 18480., 19136., 20452., 21128., 21804., 22480., 23896., 24592., 25288., 25984., 13868., 14456., 15044., 15632., 16800., 17408., 18016., 18624., 19892., 20520., 21148., 21776., 23144., 23792., 24440., 25088., 15804., 16408., 17012., 17616., 18800., 19424., 20048., 20672., 21956., 22600., 23244., 23888., 25272., 25936., 26600., 27264., 11600., 12064., 12528., 12992., 13920., 14400., 14880., 15360., 16368., 16864., 17360., 17856., 18944., 19456., 19968., 20480.,  8724.,  9096.,  9468.,  9840., 10560., 10944., 11328., 11712., 12492., 12888., 13284., 13680., 14520., 14928., 15336., 15744.,  6917.,  7242.,  7567.,  7892.,  8454.,  8788.,  9122.,  9456., 10063., 10406., 10749., 11092., 11744., 12096., 12448., 12800.,  7956.,  8328.,  8700.,  9072.,  9792., 10176., 10560., 10944., 11724., 12120., 12516., 12912., 13752., 14160., 14568., 14976.,  9215.,  9646., 10077., 10508., 11350., 11796., 12242., 12688., 13605., 14066., 14527., 14988., 15980., 16456., 16932., 17408., 10491., 10854., 11217., 11580., 12354., 12732., 13110., 13488., 14337., 14730., 15123., 15516., 16440., 16848., 17256., 17664.,  8759.,  9118.,  9477.,  9836., 10606., 10980., 11354., 11728., 12573., 12962., 13351., 13740., 14660., 15064., 15468., 15872.,  6564.,  6824.,  7084.,  7344.,  7952.,  8224.,  8496.,  8768.,  9436.,  9720., 10004., 10288., 11016., 11312., 11608., 11904.,  6197.,  6410.,  6623.,  6836.,  7318.,  7540.,  7762.,  7984.,  8511.,  8742.,  8973.,  9204.,  9776., 10016., 10256., 10496.,  7129.,  7378.,  7627.,  7876.,  8394.,  8652.,  8910.,  9168.,  9731.,  9998., 10265., 10532., 11140., 11416., 11692., 11968.,  9092.,  9448.,  9804., 10160., 10864., 11232., 11600., 11968., 12732., 13112., 13492., 13872., 14696., 15088., 15480., 15872., 13067., 13542., 14017., 14492., 15410., 15900., 16390., 16880., 17873., 18378., 18883., 19388., 20456., 20976., 21496., 22016., 11463., 11934., 12405., 12876., 13790., 14276., 14762., 15248., 16237., 16738., 17239., 17740., 18804., 19320., 19836., 20352., 10883., 11350., 11817., 12284., 13194., 13676., 14158., 14640., 15625., 16122., 16619., 17116., 18176., 18688., 19200., 19712.,  9364.,  9736., 10108., 10480., 11200., 11584., 11968., 12352., 13132., 13528., 13924., 14320., 15160., 15568., 15976., 16384.,  7625.,  7890.,  8155.,  8420.,  8922.,  9196.,  9470.,  9744., 10291., 10574., 10857., 11140., 11732., 12024., 12316., 12608.,  8596.,  8968.,  9340.,  9712., 10432., 10816., 11200., 11584., 12364., 12760., 13156., 13552., 14392., 14800., 15208., 15616., 13200., 13728., 14256., 14784., 15776., 16320., 16864., 17408., 18480., 19040., 19600., 20160., 21312., 21888., 22464., 23040., 17052., 17752., 18452., 19152., 20432., 21152., 21872., 22592., 23972., 24712., 25452., 26192., 27672., 28432., 29192., 29952., 16940., 17656., 18372., 19088., 20384., 21120., 21856., 22592., 23988., 24744., 25500., 26256., 27752., 28528., 29304., 30080., 17852., 18584., 19316., 20048., 21360., 22112., 22864., 23616., 25028., 25800., 26572., 27344., 28856., 29648., 30440., 31232., 16848., 17440., 18032., 18624., 19680., 20288., 20896., 21504., 22640., 23264., 23888., 24512., 25728., 26368., 27008., 27648., 10708., 11144., 11580., 12016., 12800., 13248., 13696., 14144., 14988., 15448., 15908., 16368., 17272., 17744., 18216., 18688., 10035., 10422., 10809., 11196., 12026., 12428., 12830., 13232., 14137., 14554., 14971., 15388., 16368., 16800., 17232., 17664., 13836., 14392., 14948., 15504., 16640., 17216., 17792., 18368., 19604., 20200., 20796., 21392., 22728., 23344., 23960., 24576., 18729., 19474., 20219., 20964., 22410., 23180., 23950., 24720., 26291., 27086., 27881., 28676., 30372., 31192., 32012., 32832., 20045., 20826., 21607., 22388., 23870., 24676., 25482., 26288., 27895., 28726., 29557., 30388., 32120., 32976., 33832., 34688., 22385., 23202., 24019., 24836., 26354., 27196., 28038., 28880., 30523., 31390., 32257., 33124., 34892., 35784., 36676., 37568., 17020., 17688., 18356., 19024., 20272., 20960., 21648., 22336., 23684., 24392., 25100., 25808., 27256., 27984., 28712., 29440., 10499., 10998., 11497., 11996., 12906., 13420., 13934., 14448., 15433., 15962., 16491., 17020., 18080., 18624., 19168., 19712., 10135., 10558., 10981., 11404., 12270., 12708., 13146., 13584., 14525., 14978., 15431., 15884., 16900., 17368., 17836., 18304., 15036., 15640., 16244., 16848., 18032., 18656., 19280., 19904., 21188., 21832., 22476., 23120., 24504., 25168., 25832., 26496., 18533., 19338., 20143., 20948., 22454., 23284., 24114., 24944., 26575., 27430., 28285., 29140., 30896., 31776., 32656., 33536., 20873., 21714., 22555., 23396., 24938., 25804., 26670., 27536., 29203., 30094., 30985., 31876., 33668., 34584., 35500., 36416., 20141., 21018., 21895., 22772., 24350., 25252., 26154., 27056., 28759., 29686., 30613., 31540., 33368., 34320., 35272., 36224., 16172., 16888., 17604., 18320., 19616., 20352., 21088., 21824., 23220., 23976., 24732., 25488., 26984., 27760., 28536., 29312., 11751., 12286., 12821., 13356., 14302., 14852., 15402., 15952., 16973., 17538., 18103., 18668., 19764., 20344., 20924., 21504.,  7348.,  7624.,  7900.,  8176.,  8800.,  9088.,  9376.,  9664., 10348., 10648., 10948., 11248., 11992., 12304., 12616., 12928., 10000., 10400., 10800., 11200., 12064., 12480., 12896., 13312., 14256., 14688., 15120., 15552., 16576., 17024., 17472., 17920., 13692., 14232., 14772., 15312., 16432., 16992., 17552., 18112., 19332., 19912., 20492., 21072., 22392., 22992., 23592., 24192., 15692., 16312., 16932., 17552., 18752., 19392., 20032., 20672., 21972., 22632., 23292., 23952., 25352., 26032., 26712., 27392., 17692., 18392., 19092., 19792., 21072., 21792., 22512., 23232., 24612., 25352., 26092., 26832., 28312., 29072., 29832., 30592., 14800., 15392., 15984., 16576., 17632., 18240., 18848., 19456., 20592., 21216., 21840., 22464., 23680., 24320., 24960., 25600., 12148., 12616., 13084., 13552., 14368., 14848., 15328., 15808., 16684., 17176., 17668., 18160., 19096., 19600., 20104., 20608.,  5293.,  5530.,  5767.,  6004.,  6478.,  6724.,  6970.,  7216.,  7735.,  7990.,  8245.,  8500.,  9064.,  9328.,  9592.,  9856.,  8180.,  8520.,  8860.,  9200.,  9888., 10240., 10592., 10944., 11692., 12056., 12420., 12784., 13592., 13968., 14344., 14720., 10391., 10846., 11301., 11756., 12622., 13092., 13562., 14032., 14973., 15458., 15943., 16428., 17444., 17944., 18444., 18944., 11795., 12310., 12825., 13340., 14266., 14796., 15326., 15856., 16857., 17402., 17947., 18492., 19568., 20128., 20688., 21248., 13199., 13774., 14349., 14924., 15910., 16500., 17090., 17680., 18741., 19346., 19951., 20556., 21692., 22312., 22932., 23552., 12164., 12648., 13132., 13616., 14448., 14944., 15440., 15936., 16828., 17336., 17844., 18352., 19304., 19824., 20344., 20864.,  9181.,  9562.,  9943., 10324., 10974., 11364., 11754., 12144., 12839., 13238., 13637., 14036., 14776., 15184., 15592., 16000.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 16925., 17658., 18391., 19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424., 29232., 30040., 30848., 19265., 20034., 20803., 21572., 23042., 23836., 24630., 25424., 27019., 27838., 28657., 29476., 31196., 32040., 32884., 33728., 18533., 19338., 20143., 20948., 22454., 23284., 24114., 24944., 26575., 27430., 28285., 29140., 30896., 31776., 32656., 33536., 20873., 21714., 22555., 23396., 24938., 25804., 26670., 27536., 29203., 30094., 30985., 31876., 33668., 34584., 35500., 36416., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 16389., 17098., 17807., 18516., 19926., 20660., 21394., 22128., 23663., 24422., 25181., 25940., 27600., 28384., 29168., 29952., 18729., 19474., 20219., 20964., 22410., 23180., 23950., 24720., 26291., 27086., 27881., 28676., 30372., 31192., 32012., 32832., 20045., 20826., 21607., 22388., 23870., 24676., 25482., 26288., 27895., 28726., 29557., 30388., 32120., 32976., 33832., 34688., 22385., 23202., 24019., 24836., 26354., 27196., 28038., 28880., 30523., 31390., 32257., 33124., 34892., 35784., 36676., 37568., 18533., 19338., 20143., 20948., 22454., 23284., 24114., 24944., 26575., 27430., 28285., 29140., 30896., 31776., 32656., 33536., 20873., 21714., 22555., 23396., 24938., 25804., 26670., 27536., 29203., 30094., 30985., 31876., 33668., 34584., 35500., 36416., 20141., 21018., 21895., 22772., 24350., 25252., 26154., 27056., 28759., 29686., 30613., 31540., 33368., 34320., 35272., 36224.};
  const std::array<int, 4> in_shape = {{ 3, 6, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1956.,  2666.,  3400.,  3670.,  3940.,  4210.,  3380.,  2541.,  3380.,  4532.,  5690.,  6000.,  6310.,  6620.,  5260.,  3914.,  4990.,  6620.,  8225.,  8550.,  8875.,  9200.,  7250.,  5350.,  6670.,  8780., 10825., 11150., 11475., 11800.,  9250.,  6790.,  4748.,  6188.,  7550.,  7760.,  7970.,  8180.,  6340.,  4598.,  3000.,  3854.,  4630.,  4750.,  4870.,  4990.,  3800.,  2703., 10164., 13322., 16360., 16630., 16900., 17170., 13460.,  9885., 12884., 16820., 20570., 20880., 21190., 21500., 16780., 12266., 15070., 19580., 23825., 24150., 24475., 24800., 19250., 13990., 16750., 21740., 26425., 26750., 27075., 27400., 21250., 15430., 11372., 14636., 17630., 17840., 18050., 18260., 14020., 10070.,  6888.,  8750., 10390., 10510., 10630., 10750.,  8120.,  5727., 18372., 23978., 29320., 29590., 29860., 30130., 23540., 17229., 22388., 29108., 35450., 35760., 36070., 36380., 28300., 20618., 25150., 32540., 39425., 39750., 40075., 40400., 31250., 22630., 26830., 34700., 42025., 42350., 42675., 43000., 33250., 24070., 17996., 23084., 27710., 27920., 28130., 28340., 21700., 15542., 10776., 13646., 16150., 16270., 16390., 16510., 12440.,  8751.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8225.,  8550.,  8875.,  9200., 10825., 11150., 11475., 11800., 23825., 24150., 24475., 24800., 26425., 26750., 27075., 27400., 39425., 39750., 40075., 40400., 42025., 42350., 42675., 43000.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3822.,  3912.,  5206.,  5332.,  6635.,  6800.,  7160.,  7340.,  7685.,  7880.,  8210.,  8420.,  6586.,  6760.,  4947.,  5082.,  6592.,  6760.,  8832.,  9064., 11080., 11380., 11680., 12000., 12280., 12620., 12880., 13240., 10224., 10520.,  7600.,  7828.,  9710.,  9980., 12870., 13240., 15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 14050., 14500., 10355., 10700., 12950., 13340., 17030., 17560., 20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600., 17890., 18500., 13115., 13580.,  9136.,  9496., 11888., 12376., 14480., 15100., 14880., 15520., 15280., 15940., 15680., 16360., 12128., 12680.,  8776.,  9196.,  5694.,  6000.,  7294.,  7708.,  8735.,  9260.,  8960.,  9500.,  9185.,  9740.,  9410.,  9980.,  7138.,  7600.,  5055.,  5406., 10782., 11112., 14166., 14612., 17435., 18000., 17960., 18540., 18485., 19080., 19010., 19620., 14906., 15400., 10947., 11322.,  8896.,  9256., 11648., 12136., 14280., 14900., 14880., 15520., 15480., 16140., 16080., 16760., 12528., 13080.,  9136.,  9556.,  7838.,  8252., 10182., 10744., 12375., 13090., 13000., 13740., 13625., 14390., 14250., 15040., 10978., 11620.,  7907.,  8396.,  7814.,  8156., 10246., 10712., 12575., 13170., 13200., 13820., 13825., 14470., 14450., 15120., 11234., 11780.,  8171.,  8588.,  4912.,  5080.,  6512.,  6744.,  8080.,  8380.,  8480.,  8800.,  8880.,  9220.,  9280.,  9640.,  7264.,  7560.,  5320.,  5548.,  3246.,  3408.,  4222.,  4444.,  5135.,  5420.,  5360.,  5660.,  5585.,  5900.,  5810.,  6140.,  4450.,  4720.,  3183.,  3390., 14478., 14856., 19030., 19540., 23435., 24080., 23960., 24620., 24485., 25160., 25010., 25700., 19642., 20200., 14451., 14874., 18880., 19432., 24704., 25448., 30280., 31220., 30880., 31840., 31480., 32460., 32080., 33080., 25072., 25880., 18352., 18964., 13646., 14204., 17734., 18488., 21575., 22530., 22200., 23180., 22825., 23830., 23450., 24480., 18146., 18980., 13139., 13772.,  9782., 10268., 12678., 13336., 15375., 16210., 16000., 16860., 16625., 17510., 17250., 18160., 13282., 14020.,  9563., 10124.,  5296.,  5656.,  6768.,  7256.,  8080.,  8700.,  8480.,  9120.,  8880.,  9540.,  9280.,  9960.,  7008.,  7560.,  4936.,  5356.,  2142.,  2352.,  2686.,  2972.,  3135.,  3500.,  3360.,  3740.,  3585.,  3980.,  3810.,  4220.,  2786.,  3120.,  1887.,  2142.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600., 45975., 47650., 46600., 48300., 47225., 48950., 47850., 49600., 50975., 52850., 51600., 53500., 52225., 54150., 52850., 54800., 47175., 49410., 47800., 50060., 48425., 50710., 49050., 51360., 29775., 31570., 30400., 32220., 31025., 32870., 31650., 33520.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2178.,  2268.,  2358.,  2448.,  2862.,  2988.,  3114.,  3240.,  4081.,  4246.,  4411.,  4576.,  4540.,  4720.,  4900.,  5080.,  4999.,  5194.,  5389.,  5584.,  5458.,  5668.,  5878.,  6088.,  4358.,  4532.,  4706.,  4880.,  3359.,  3494.,  3629.,  3764.,  4568.,  4736.,  4904.,  5072.,  5912.,  6144.,  6376.,  6608.,  8228.,  8528.,  8828.,  9128.,  8832.,  9152.,  9472.,  9792.,  9436.,  9776., 10116., 10456., 10040., 10400., 10760., 11120.,  7928.,  8224.,  8520.,  8816.,  6012.,  6240.,  6468.,  6696.,  7630.,  7900.,  8170.,  8440.,  9754., 10124., 10494., 10864., 13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533., 15058., 15583., 16108., 15182., 15732., 16282., 16832., 11842., 12292., 12742., 13192.,  8845.,  9190.,  9535.,  9880., 10918., 11308., 11698., 12088., 13818., 14348., 14878., 15408., 18427., 19102., 19777., 20452., 19076., 19776., 20476., 21176., 19725., 20450., 21175., 21900., 20374., 21124., 21874., 22624., 15778., 16388., 16998., 17608., 11685., 12150., 12615., 13080.,  9848., 10208., 10568., 10928., 12408., 12896., 13384., 13872., 17204., 17824., 18444., 19064., 17728., 18368., 19008., 19648., 18252., 18912., 19572., 20232., 18776., 19456., 20136., 20816., 14680., 15232., 15784., 16336., 11052., 11472., 11892., 12312., 11082., 11388., 11694., 12000., 14174., 14588., 15002., 15416., 16945., 17470., 17995., 18520., 17380., 17920., 18460., 19000., 17815., 18370., 18925., 19480., 18250., 18820., 19390., 19960., 13814., 14276., 14738., 15200.,  9759., 10110., 10461., 10812.,  9714., 10044., 10374., 10704., 12270., 12716., 13162., 13608., 18113., 18678., 19243., 19808., 18572., 19152., 19732., 20312., 19031., 19626., 20221., 20816., 19490., 20100., 20710., 21320., 15558., 16052., 16546., 17040., 12047., 12422., 12797., 13172., 15128., 15488., 15848., 16208., 19480., 19968., 20456., 20944., 23524., 24144., 24764., 25384., 24128., 24768., 25408., 26048., 24732., 25392., 26052., 26712., 25336., 26016., 26696., 27376., 19448., 20000., 20552., 21104., 14012., 14432., 14852., 15272.,  9886., 10300., 10714., 11128., 12378., 12940., 13502., 14064., 15011., 15726., 16441., 17156., 15660., 16400., 17140., 17880., 16309., 17074., 17839., 18604., 16958., 17748., 18538., 19328., 12674., 13316., 13958., 14600.,  8925.,  9414.,  9903., 10392.,  6838.,  7180.,  7522.,  7864.,  8506.,  8972.,  9438.,  9904., 10923., 11518., 12113., 12708., 11572., 12192., 12812., 13432., 12221., 12866., 13511., 14156., 12870., 13540., 14210., 14880.,  9698., 10244., 10790., 11336.,  6965.,  7382.,  7799.,  8216.,  4664.,  4832.,  5000.,  5168.,  6008.,  6240.,  6472.,  6704.,  8820.,  9120.,  9420.,  9720.,  9344.,  9664.,  9984., 10304.,  9868., 10208., 10548., 10888., 10392., 10752., 11112., 11472.,  8280.,  8576.,  8872.,  9168.,  6380.,  6608.,  6836.,  7064.,  6330.,  6492.,  6654.,  6816.,  8222.,  8444.,  8666.,  8888.,  9985., 10270., 10555., 10840., 10420., 10720., 11020., 11320., 10855., 11170., 11485., 11800., 11290., 11620., 11950., 12280.,  8630.,  8900.,  9170.,  9440.,  6159.,  6366.,  6573.,  6780., 10914., 11292., 11670., 12048., 13742., 14252., 14762., 15272., 18769., 19414., 20059., 20704., 19228., 19888., 20548., 21208., 19687., 20362., 21037., 21712., 20146., 20836., 21526., 22216., 15750., 16308., 16866., 17424., 11839., 12262., 12685., 13108., 16472., 17024., 17576., 18128., 20760., 21504., 22248., 22992., 27556., 28496., 29436., 30376., 28160., 29120., 30080., 31040., 28764., 29744., 30724., 31704., 29368., 30368., 31368., 32368., 22776., 23584., 24392., 25200., 16892., 17504., 18116., 18728., 15214., 15772., 16330., 16888., 19098., 19852., 20606., 21360., 26003., 26958., 27913., 28868., 26652., 27632., 28612., 29592., 27301., 28306., 29311., 30316., 27950., 28980., 30010., 31040., 21698., 22532., 23366., 24200., 16173., 16806., 17439., 18072., 16774., 17260., 17746., 18232., 21370., 22028., 22686., 23344., 25499., 26334., 27169., 28004., 26148., 27008., 27868., 28728., 26797., 27682., 28567., 29452., 27446., 28356., 29266., 30176., 20770., 21508., 22246., 22984., 14725., 15286., 15847., 16408.,  8312.,  8672.,  9032.,  9392., 10360., 10848., 11336., 11824., 12596., 13216., 13836., 14456., 13120., 13760., 14400., 15040., 13644., 14304., 14964., 15624., 14168., 14848., 15528., 16208., 10584., 11136., 11688., 12240.,  7468.,  7888.,  8308.,  8728.,  4074.,  4284.,  4494.,  4704.,  5086.,  5372.,  5658.,  5944.,  5905.,  6270.,  6635.,  7000.,  6340.,  6720.,  7100.,  7480.,  6775.,  7170.,  7565.,  7960.,  7210.,  7620.,  8030.,  8440.,  5238.,  5572.,  5906.,  6240.,  3519.,  3774.,  4029.,  4284.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533., 15058., 15583., 16108., 15182., 15732., 16282., 16832., 18427., 19102., 19777., 20452., 19076., 19776., 20476., 21176., 19725., 20450., 21175., 21900., 20374., 21124., 21874., 22624., 15011., 15726., 16441., 17156., 15660., 16400., 17140., 17880., 16309., 17074., 17839., 18604., 16958., 17748., 18538., 19328., 10923., 11518., 12113., 12708., 11572., 12192., 12812., 13432., 12221., 12866., 13511., 14156., 12870., 13540., 14210., 14880., 26003., 26958., 27913., 28868., 26652., 27632., 28612., 29592., 27301., 28306., 29311., 30316., 27950., 28980., 30010., 31040., 25499., 26334., 27169., 28004., 26148., 27008., 27868., 28728., 26797., 27682., 28567., 29452., 27446., 28356., 29266., 30176.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7311.,  7824.,  9980., 10664., 12745., 13600., 13795., 14680., 14845., 15760., 15895., 16840., 12764., 13520.,  9597., 10164., 12800., 13520., 17168., 18128., 21560., 22760., 22760., 24000., 23960., 25240., 25160., 26480., 19984., 21040., 14864., 15656.,  9991., 10744., 13444., 14448., 16925., 18180., 18175., 19480., 19425., 20780., 20675., 22080., 16356., 17480., 12109., 12952.,  9367., 10168., 12548., 13616., 15725., 17060., 16975., 18360., 18225., 19660., 19475., 20960., 15332., 16520., 11293., 12184.,  5720.,  6320.,  7568.,  8368.,  9360., 10360., 10160., 11200., 10960., 12040., 11760., 12880.,  9104., 10000.,  6584.,  7256.,  2787.,  3168.,  3644.,  4152.,  4445.,  5080.,  4895.,  5560.,  5345.,  6040.,  5795.,  6520.,  4380.,  4960.,  3081.,  3516.,  8943.,  9552., 12028., 12840., 15145., 16160., 16195., 17240., 17245., 18320., 18295., 19400., 14556., 15440., 10845., 11508.,  8960.,  9680., 12048., 13008., 15160., 16360., 16360., 17600., 17560., 18840., 18760., 20080., 14864., 15920., 11024., 11816., 10663., 11512., 14212., 15344., 17725., 19140., 18975., 20440., 20225., 21740., 21475., 23040., 16868., 18120., 12397., 13336., 13879., 14776., 18436., 19632., 22925., 24420., 24175., 25720., 25425., 27020., 26675., 28320., 20964., 22280., 15421., 16408.,  9560., 10160., 12688., 13488., 15760., 16760., 16560., 17600., 17360., 18440., 18160., 19280., 14224., 15120., 10424., 11096.,  6339.,  6816.,  8252.,  8888., 10045., 10840., 10495., 11320., 10945., 11800., 11395., 12280.,  8732.,  9440.,  6249.,  6780.,  7311.,  7824.,  9980., 10664., 12745., 13600., 13795., 14680., 14845., 15760., 15895., 16840., 12764., 13520.,  9597., 10164., 12800., 13520., 17168., 18128., 21560., 22760., 22760., 24000., 23960., 25240., 25160., 26480., 19984., 21040., 14864., 15656.,  9991., 10744., 13444., 14448., 16925., 18180., 18175., 19480., 19425., 20780., 20675., 22080., 16356., 17480., 12109., 12952.,  9367., 10168., 12548., 13616., 15725., 17060., 16975., 18360., 18225., 19660., 19475., 20960., 15332., 16520., 11293., 12184.,  5720.,  6320.,  7568.,  8368.,  9360., 10360., 10160., 11200., 10960., 12040., 11760., 12880.,  9104., 10000.,  6584.,  7256.,  2787.,  3168.,  3644.,  4152.,  4445.,  5080.,  4895.,  5560.,  5345.,  6040.,  5795.,  6520.,  4380.,  4960.,  3081.,  3516.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {31325., 32900., 32575., 34200., 33825., 35500., 35075., 36800., 41325., 43300., 42575., 44600., 43825., 45900., 45075., 47200., 24125., 26180., 25375., 27480., 26625., 28780., 27875., 30080., 24525., 26340., 25775., 27640., 27025., 28940., 28275., 30240., 42525., 45060., 43775., 46360., 45025., 47660., 46275., 48960., 30125., 32420., 31375., 33720., 32625., 35020., 33875., 36320.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4083.,  4254.,  4716.,  4896.,  5384.,  5624.,  6228.,  6480.,  7703.,  8018.,  8822.,  9152.,  8621.,  8966.,  9800., 10160.,  9539.,  9914., 10778., 11168., 10457., 10862., 11756., 12176.,  8360.,  8696.,  9412.,  9760.,  6453.,  6714.,  7258.,  7528.,  8764.,  9088.,  9808., 10144., 11360., 11808., 12752., 13216., 15852., 16432., 17656., 18256., 17060., 17680., 18944., 19584., 18268., 18928., 20232., 20912., 19476., 20176., 21520., 22240., 15392., 15968., 17040., 17632., 11684., 12128., 12936., 13392.,  9281.,  9614., 10388., 10736., 12088., 12552., 13564., 14048., 17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 17304., 17928., 19084., 19728., 13303., 13786., 14654., 15152., 14129., 14510., 15332., 15728., 18424., 18952., 20028., 20576., 22509., 23194., 24578., 25288., 23807., 24542., 25976., 26736., 25105., 25890., 27374., 28184., 26403., 27238., 28772., 29632., 20312., 21000., 22220., 22928., 14695., 15226., 16142., 16688.,  7468.,  7792.,  8464.,  8800.,  9568., 10016., 10896., 11360., 12508., 13088., 14232., 14832., 13556., 14176., 15360., 16000., 14604., 15264., 16488., 17168., 15652., 16352., 17616., 18336., 12064., 12640., 13648., 14240.,  8884.,  9328., 10088., 10544.,  5355.,  5574.,  6108.,  6336.,  6984.,  7288.,  7988.,  8304.,  8495.,  8890.,  9750., 10160.,  9365.,  9790., 10680., 11120., 10235., 10690., 11610., 12080., 11105., 11590., 12540., 13040.,  8360.,  8760.,  9508.,  9920.,  5853.,  6162.,  6714.,  7032.,  7251.,  7518.,  8076.,  8352.,  9352.,  9720., 10452., 10832., 14391., 14866., 15830., 16320., 15309., 15814., 16808., 17328., 16227., 16762., 17786., 18336., 17145., 17710., 18764., 19344., 13864., 14328., 15172., 15648., 10901., 11258., 11898., 12264., 13372., 13696., 14416., 14752., 17504., 17952., 18896., 19360., 21484., 22064., 23288., 23888., 22692., 23312., 24576., 25216., 23900., 24560., 25864., 26544., 25108., 25808., 27152., 27872., 19488., 20064., 21136., 21728., 14244., 14688., 15496., 15952., 10529., 10958., 11828., 12272., 13496., 14088., 15228., 15840., 17213., 17978., 19442., 20232., 18511., 19326., 20840., 21680., 19809., 20674., 22238., 23128., 21107., 22022., 23636., 24576., 16152., 16904., 18188., 18960., 11735., 12314., 13278., 13872., 10769., 11246., 12164., 12656., 13688., 14344., 15548., 16224., 18317., 19162., 20706., 21576., 19615., 20510., 22104., 23024., 20913., 21858., 23502., 24472., 22211., 23206., 24900., 25920., 17112., 17928., 19276., 20112., 12615., 13242., 14254., 14896.,  9004.,  9328., 10000., 10336., 11616., 12064., 12944., 13408., 17116., 17696., 18840., 19440., 18164., 18784., 19968., 20608., 19212., 19872., 21096., 21776., 20260., 20960., 22224., 22944., 16160., 16736., 17744., 18336., 12468., 12912., 13672., 14128., 12363., 12678., 13308., 13632., 16072., 16504., 17332., 17776., 19535., 20090., 21110., 21680., 20405., 20990., 22040., 22640., 21275., 21890., 22970., 23600., 22145., 22790., 23900., 24560., 16936., 17464., 18340., 18880., 12093., 12498., 13146., 13560.,  4083.,  4254.,  4716.,  4896.,  5384.,  5624.,  6228.,  6480.,  7703.,  8018.,  8822.,  9152.,  8621.,  8966.,  9800., 10160.,  9539.,  9914., 10778., 11168., 10457., 10862., 11756., 12176.,  8360.,  8696.,  9412.,  9760.,  6453.,  6714.,  7258.,  7528.,  8764.,  9088.,  9808., 10144., 11360., 11808., 12752., 13216., 15852., 16432., 17656., 18256., 17060., 17680., 18944., 19584., 18268., 18928., 20232., 20912., 19476., 20176., 21520., 22240., 15392., 15968., 17040., 17632., 11684., 12128., 12936., 13392.,  9281.,  9614., 10388., 10736., 12088., 12552., 13564., 14048., 17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 17304., 17928., 19084., 19728., 13303., 13786., 14654., 15152., 14129., 14510., 15332., 15728., 18424., 18952., 20028., 20576., 22509., 23194., 24578., 25288., 23807., 24542., 25976., 26736., 25105., 25890., 27374., 28184., 26403., 27238., 28772., 29632., 20312., 21000., 22220., 22928., 14695., 15226., 16142., 16688.,  7468.,  7792.,  8464.,  8800.,  9568., 10016., 10896., 11360., 12508., 13088., 14232., 14832., 13556., 14176., 15360., 16000., 14604., 15264., 16488., 17168., 15652., 16352., 17616., 18336., 12064., 12640., 13648., 14240.,  8884.,  9328., 10088., 10544.,  5355.,  5574.,  6108.,  6336.,  6984.,  7288.,  7988.,  8304.,  8495.,  8890.,  9750., 10160.,  9365.,  9790., 10680., 11120., 10235., 10690., 11610., 12080., 11105., 11590., 12540., 13040.,  8360.,  8760.,  9508.,  9920.,  5853.,  6162.,  6714.,  7032.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 22509., 23194., 24578., 25288., 23807., 24542., 25976., 26736., 25105., 25890., 27374., 28184., 26403., 27238., 28772., 29632., 17213., 17978., 19442., 20232., 18511., 19326., 20840., 21680., 19809., 20674., 22238., 23128., 21107., 22022., 23636., 24576., 18317., 19162., 20706., 21576., 19615., 20510., 22104., 23024., 20913., 21858., 23502., 24472., 22211., 23206., 24900., 25920., 17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 22509., 23194., 24578., 25288., 23807., 24542., 25976., 26736., 25105., 25890., 27374., 28184., 26403., 27238., 28772., 29632.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5051.,  5222.,  5393.,  5564.,  6052.,  6232.,  6412.,  6592.,  7008.,  7248.,  7488.,  7728.,  8364.,  8616.,  8868.,  9120.,  9779., 10094., 10409., 10724., 11554., 11884., 12214., 12544., 10689., 11034., 11379., 11724., 12584., 12944., 13304., 13664., 11599., 11974., 12349., 12724., 13614., 14004., 14394., 14784., 12509., 12914., 13319., 13724., 14644., 15064., 15484., 15904., 11712., 12048., 12384., 12720., 13484., 13832., 14180., 14528.,  8421.,  8682.,  8943.,  9204.,  9766., 10036., 10306., 10576.,  9652.,  9976., 10300., 10624., 11344., 11680., 12016., 12352., 12864., 13312., 13760., 14208., 15184., 15648., 16112., 16576., 17620., 18200., 18780., 19360., 20632., 21232., 21832., 22432., 18844., 19464., 20084., 20704., 22016., 22656., 23296., 23936., 20068., 20728., 21388., 22048., 23400., 24080., 24760., 25440., 21292., 21992., 22692., 23392., 24784., 25504., 26224., 26944., 19456., 20032., 20608., 21184., 22352., 22944., 23536., 24128., 14604., 15048., 15492., 15936., 16840., 17296., 17752., 18208.,  8629.,  8962.,  9295.,  9628., 10444., 10792., 11140., 11488., 11232., 11696., 12160., 12624., 13716., 14200., 14684., 15168., 16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 17088., 17712., 18336., 18960., 20244., 20888., 21532., 22176., 13707., 14190., 14673., 15156., 16138., 16636., 17134., 17632., 12133., 12514., 12895., 13276., 14140., 14536., 14932., 15328., 16672., 17200., 17728., 18256., 19412., 19960., 20508., 21056., 20589., 21274., 21959., 22644., 24126., 24836., 25546., 26256., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 23377., 24162., 24947., 25732., 27314., 28124., 28934., 29744., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488., 20992., 21680., 22368., 23056., 24404., 25112., 25820., 26528., 16443., 16974., 17505., 18036., 19066., 19612., 20158., 20704.,  7380.,  7704.,  8028.,  8352.,  9040.,  9376.,  9712., 10048., 10752., 11200., 11648., 12096., 13008., 13472., 13936., 14400., 14580., 15160., 15740., 16320., 17496., 18096., 18696., 19296., 15612., 16232., 16852., 17472., 18688., 19328., 19968., 20608., 16644., 17304., 17964., 18624., 19880., 20560., 21240., 21920., 17676., 18376., 19076., 19776., 21072., 21792., 22512., 23232., 14848., 15424., 16000., 16576., 17616., 18208., 18800., 19392., 13100., 13544., 13988., 14432., 15240., 15696., 16152., 16608.,  6331.,  6550.,  6769.,  6988.,  7508.,  7736.,  7964.,  8192.,  7776.,  8080.,  8384.,  8688.,  9388.,  9704., 10020., 10336.,  8851.,  9246.,  9641., 10036., 10898., 11308., 11718., 12128.,  9665., 10090., 10515., 10940., 11832., 12272., 12712., 13152., 10479., 10934., 11389., 11844., 12766., 13236., 13706., 14176., 11293., 11778., 12263., 12748., 13700., 14200., 14700., 15200.,  8192.,  8592.,  8992.,  9392., 10156., 10568., 10980., 11392.,  5829.,  6138.,  6447.,  6756.,  7350.,  7668.,  7986.,  8304.,  7195.,  7462.,  7729.,  7996.,  8580.,  8856.,  9132.,  9408.,  8672.,  9040.,  9408.,  9776., 10540., 10920., 11300., 11680., 12755., 13230., 13705., 14180., 15170., 15660., 16150., 16640., 13665., 14170., 14675., 15180., 16200., 16720., 17240., 17760., 14575., 15110., 15645., 16180., 17230., 17780., 18330., 18880., 15485., 16050., 16615., 17180., 18260., 18840., 19420., 20000., 12352., 12816., 13280., 13744., 14636., 15112., 15588., 16064.,  9029.,  9386.,  9743., 10100., 10758., 11124., 11490., 11856., 10676., 11000., 11324., 11648., 12368., 12704., 13040., 13376., 14912., 15360., 15808., 16256., 17232., 17696., 18160., 18624., 18644., 19224., 19804., 20384., 21656., 22256., 22856., 23456., 19868., 20488., 21108., 21728., 23040., 23680., 24320., 24960., 21092., 21752., 22412., 23072., 24424., 25104., 25784., 26464., 22316., 23016., 23716., 24416., 25808., 26528., 27248., 27968., 19456., 20032., 20608., 21184., 22352., 22944., 23536., 24128., 15628., 16072., 16516., 16960., 17864., 18320., 18776., 19232., 11029., 11458., 11887., 12316., 13228., 13672., 14116., 14560., 15968., 16560., 17152., 17744., 18964., 19576., 20188., 20800., 21181., 21946., 22711., 23476., 25038., 25828., 26618., 27408., 22575., 23390., 24205., 25020., 26632., 27472., 28312., 29152., 23969., 24834., 25699., 26564., 28226., 29116., 30006., 30896., 25363., 26278., 27193., 28108., 29820., 30760., 31700., 32640., 22848., 23600., 24352., 25104., 26516., 27288., 28060., 28832., 18667., 19246., 19825., 20404., 21482., 22076., 22670., 23264., 13509., 13986., 14463., 14940., 15900., 16392., 16884., 17376., 17312., 17968., 18624., 19280., 20564., 21240., 21916., 22592., 22285., 23130., 23975., 24820., 26462., 27332., 28202., 29072., 23679., 24574., 25469., 26364., 28056., 28976., 29896., 30816., 25073., 26018., 26963., 27908., 29650., 30620., 31590., 32560., 26467., 27462., 28457., 29452., 31244., 32264., 33284., 34304., 22656., 23472., 24288., 25104., 26580., 27416., 28252., 29088., 16283., 16910., 17537., 18164., 19290., 19932., 20574., 21216.,  8404.,  8728.,  9052.,  9376., 10064., 10400., 10736., 11072., 10752., 11200., 11648., 12096., 13008., 13472., 13936., 14400., 15604., 16184., 16764., 17344., 18520., 19120., 19720., 20320., 16636., 17256., 17876., 18496., 19712., 20352., 20992., 21632., 17668., 18328., 18988., 19648., 20904., 21584., 22264., 22944., 18700., 19400., 20100., 20800., 22096., 22816., 23536., 24256., 14848., 15424., 16000., 16576., 17616., 18208., 18800., 19392., 12076., 12520., 12964., 13408., 14216., 14672., 15128., 15584., 10011., 10326., 10641., 10956., 11572., 11896., 12220., 12544., 13536., 13968., 14400., 14832., 15660., 16104., 16548., 16992., 16435., 16990., 17545., 18100., 19122., 19692., 20262., 20832., 17249., 17834., 18419., 19004., 20056., 20656., 21256., 21856., 18063., 18678., 19293., 19908., 20990., 21620., 22250., 22880., 18877., 19522., 20167., 20812., 21924., 22584., 23244., 23904., 14976., 15504., 16032., 16560., 17452., 17992., 18532., 19072., 12069., 12474., 12879., 13284., 13974., 14388., 14802., 15216.,  5051.,  5222.,  5393.,  5564.,  6052.,  6232.,  6412.,  6592.,  7008.,  7248.,  7488.,  7728.,  8364.,  8616.,  8868.,  9120.,  9779., 10094., 10409., 10724., 11554., 11884., 12214., 12544., 10689., 11034., 11379., 11724., 12584., 12944., 13304., 13664., 11599., 11974., 12349., 12724., 13614., 14004., 14394., 14784., 12509., 12914., 13319., 13724., 14644., 15064., 15484., 15904., 11712., 12048., 12384., 12720., 13484., 13832., 14180., 14528.,  8421.,  8682.,  8943.,  9204.,  9766., 10036., 10306., 10576.,  9652.,  9976., 10300., 10624., 11344., 11680., 12016., 12352., 12864., 13312., 13760., 14208., 15184., 15648., 16112., 16576., 17620., 18200., 18780., 19360., 20632., 21232., 21832., 22432., 18844., 19464., 20084., 20704., 22016., 22656., 23296., 23936., 20068., 20728., 21388., 22048., 23400., 24080., 24760., 25440., 21292., 21992., 22692., 23392., 24784., 25504., 26224., 26944., 19456., 20032., 20608., 21184., 22352., 22944., 23536., 24128., 14604., 15048., 15492., 15936., 16840., 17296., 17752., 18208.,  8629.,  8962.,  9295.,  9628., 10444., 10792., 11140., 11488., 11232., 11696., 12160., 12624., 13716., 14200., 14684., 15168., 16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 17088., 17712., 18336., 18960., 20244., 20888., 21532., 22176., 13707., 14190., 14673., 15156., 16138., 16636., 17134., 17632., 12133., 12514., 12895., 13276., 14140., 14536., 14932., 15328., 16672., 17200., 17728., 18256., 19412., 19960., 20508., 21056., 20589., 21274., 21959., 22644., 24126., 24836., 25546., 26256., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 23377., 24162., 24947., 25732., 27314., 28124., 28934., 29744., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488., 20992., 21680., 22368., 23056., 24404., 25112., 25820., 26528., 16443., 16974., 17505., 18036., 19066., 19612., 20158., 20704.,  7380.,  7704.,  8028.,  8352.,  9040.,  9376.,  9712., 10048., 10752., 11200., 11648., 12096., 13008., 13472., 13936., 14400., 14580., 15160., 15740., 16320., 17496., 18096., 18696., 19296., 15612., 16232., 16852., 17472., 18688., 19328., 19968., 20608., 16644., 17304., 17964., 18624., 19880., 20560., 21240., 21920., 17676., 18376., 19076., 19776., 21072., 21792., 22512., 23232., 14848., 15424., 16000., 16576., 17616., 18208., 18800., 19392., 13100., 13544., 13988., 14432., 15240., 15696., 16152., 16608.,  6331.,  6550.,  6769.,  6988.,  7508.,  7736.,  7964.,  8192.,  7776.,  8080.,  8384.,  8688.,  9388.,  9704., 10020., 10336.,  8851.,  9246.,  9641., 10036., 10898., 11308., 11718., 12128.,  9665., 10090., 10515., 10940., 11832., 12272., 12712., 13152., 10479., 10934., 11389., 11844., 12766., 13236., 13706., 14176., 11293., 11778., 12263., 12748., 13700., 14200., 14700., 15200.,  8192.,  8592.,  8992.,  9392., 10156., 10568., 10980., 11392.,  5829.,  6138.,  6447.,  6756.,  7350.,  7668.,  7986.,  8304.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 20589., 21274., 21959., 22644., 24126., 24836., 25546., 26256., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 23377., 24162., 24947., 25732., 27314., 28124., 28934., 29744., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488., 21181., 21946., 22711., 23476., 25038., 25828., 26618., 27408., 22575., 23390., 24205., 25020., 26632., 27472., 28312., 29152., 23969., 24834., 25699., 26564., 28226., 29116., 30006., 30896., 25363., 26278., 27193., 28108., 29820., 30760., 31700., 32640., 22285., 23130., 23975., 24820., 26462., 27332., 28202., 29072., 23679., 24574., 25469., 26364., 28056., 28976., 29896., 30816., 25073., 26018., 26963., 27908., 29650., 30620., 31590., 32560., 26467., 27462., 28457., 29452., 31244., 32264., 33284., 34304., 16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 20589., 21274., 21959., 22644., 24126., 24836., 25546., 26256., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 23377., 24162., 24947., 25732., 27314., 28124., 28934., 29744., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2325.,  2748.,  3189.,  3648.,  3516.,  4080.,  4668.,  5280.,  6947.,  7716.,  8515.,  9344.,  8783.,  9612., 10471., 11360., 10619., 11508., 12427., 13376., 12455., 13404., 14383., 15392., 10476., 11248., 12044., 12864.,  8609.,  9204.,  9817., 10448.,  9860., 10496., 11156., 11840., 13552., 14400., 15280., 16192., 17404., 18528., 19692., 20896., 19820., 21024., 22268., 23552., 22236., 23520., 24844., 26208., 24652., 26016., 27420., 28864., 19568., 20672., 21808., 22976., 14708., 15552., 16420., 17312.,  6247.,  6940.,  7663.,  8416.,  8820.,  9744., 10708., 11712., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 17220., 18448., 19716., 21024., 13323., 14260., 15227., 16224., 11335., 12124., 12943., 13792., 15348., 16400., 17492., 18624., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 21188., 22544., 23940., 25376., 15595., 16628., 17691., 18784.,  5780.,  6368.,  6980.,  7616.,  7984.,  8768.,  9584., 10432., 12332., 13376., 14460., 15584., 14428., 15552., 16716., 17920., 16524., 17728., 18972., 20256., 18620., 19904., 21228., 22592., 15024., 16064., 17136., 18240., 11716., 12512., 13332., 14176.,  7917.,  8460.,  9021.,  9600., 10780., 11504., 12252., 13024., 13675., 14580., 15515., 16480., 15415., 16380., 17375., 18400., 17155., 18180., 19235., 20320., 18895., 19980., 21095., 22240., 14604., 15472., 16364., 17280., 10521., 11172., 11841., 12528.,  2325.,  2748.,  3189.,  3648.,  3516.,  4080.,  4668.,  5280.,  6947.,  7716.,  8515.,  9344.,  8783.,  9612., 10471., 11360., 10619., 11508., 12427., 13376., 12455., 13404., 14383., 15392., 10476., 11248., 12044., 12864.,  8609.,  9204.,  9817., 10448.,  9860., 10496., 11156., 11840., 13552., 14400., 15280., 16192., 17404., 18528., 19692., 20896., 19820., 21024., 22268., 23552., 22236., 23520., 24844., 26208., 24652., 26016., 27420., 28864., 19568., 20672., 21808., 22976., 14708., 15552., 16420., 17312.,  6247.,  6940.,  7663.,  8416.,  8820.,  9744., 10708., 11712., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 17220., 18448., 19716., 21024., 13323., 14260., 15227., 16224., 11335., 12124., 12943., 13792., 15348., 16400., 17492., 18624., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 21188., 22544., 23940., 25376., 15595., 16628., 17691., 18784.,  5780.,  6368.,  6980.,  7616.,  7984.,  8768.,  9584., 10432., 12332., 13376., 14460., 15584., 14428., 15552., 16716., 17920., 16524., 17728., 18972., 20256., 18620., 19904., 21228., 22592., 15024., 16064., 17136., 18240., 11716., 12512., 13332., 14176.,  7917.,  8460.,  9021.,  9600., 10780., 11504., 12252., 13024., 13675., 14580., 15515., 16480., 15415., 16380., 17375., 18400., 17155., 18180., 19235., 20320., 18895., 19980., 21095., 22240., 14604., 15472., 16364., 17280., 10521., 11172., 11841., 12528.,  2325.,  2748.,  3189.,  3648.,  3516.,  4080.,  4668.,  5280.,  6947.,  7716.,  8515.,  9344.,  8783.,  9612., 10471., 11360., 10619., 11508., 12427., 13376., 12455., 13404., 14383., 15392., 10476., 11248., 12044., 12864.,  8609.,  9204.,  9817., 10448.,  9860., 10496., 11156., 11840., 13552., 14400., 15280., 16192., 17404., 18528., 19692., 20896., 19820., 21024., 22268., 23552., 22236., 23520., 24844., 26208., 24652., 26016., 27420., 28864., 19568., 20672., 21808., 22976., 14708., 15552., 16420., 17312.,  6247.,  6940.,  7663.,  8416.,  8820.,  9744., 10708., 11712., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 17220., 18448., 19716., 21024., 13323., 14260., 15227., 16224., 11335., 12124., 12943., 13792., 15348., 16400., 17492., 18624., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 21188., 22544., 23940., 25376., 15595., 16628., 17691., 18784.,  5780.,  6368.,  6980.,  7616.,  7984.,  8768.,  9584., 10432., 12332., 13376., 14460., 15584., 14428., 15552., 16716., 17920., 16524., 17728., 18972., 20256., 18620., 19904., 21228., 22592., 15024., 16064., 17136., 18240., 11716., 12512., 13332., 14176.,  7917.,  8460.,  9021.,  9600., 10780., 11504., 12252., 13024., 13675., 14580., 15515., 16480., 15415., 16380., 17375., 18400., 17155., 18180., 19235., 20320., 18895., 19980., 21095., 22240., 14604., 15472., 16364., 17280., 10521., 11172., 11841., 12528.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2973.,  3114.,  3554.,  3704.,  4171.,  4330.,  4824.,  4992.,  4196.,  4408.,  4992.,  5216.,  5836.,  6072.,  6728.,  6976.,  7519.,  7814.,  8594.,  8904.,  9729., 10054., 10924., 11264.,  9339.,  9694., 10534., 10904., 11789., 12174., 13104., 13504., 11159., 11574., 12474., 12904., 13849., 14294., 15284., 15744., 12979., 13454., 14414., 14904., 15909., 16414., 17464., 17984., 11524., 11928., 12736., 13152., 13996., 14424., 15304., 15744.,  8705.,  9026.,  9630.,  9960., 10591., 10930., 11588., 11936.,  8844.,  9096.,  9720.,  9984., 10644., 10920., 11616., 11904., 12464., 12832., 13696., 14080., 14992., 15392., 16352., 16768., 16068., 16568., 17720., 18240., 19452., 19992., 21264., 21824., 18516., 19096., 20328., 20928., 22220., 22840., 24192., 24832., 20964., 21624., 22936., 23616., 24988., 25688., 27120., 27840., 23412., 24152., 25544., 26304., 27756., 28536., 30048., 30848., 21488., 22112., 23296., 23936., 25168., 25824., 27104., 27776., 16636., 17128., 18056., 18560., 19524., 20040., 21040., 21568.,  5699.,  5966.,  6686.,  6968.,  7733.,  8030.,  8840.,  9152.,  9116.,  9512., 10496., 10912., 11956., 12392., 13496., 13952., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 20796., 21512., 22848., 23584., 24980., 25736., 27192., 27968., 17887., 18454., 19490., 20072., 21153., 21750., 22876., 23488., 11683., 12046., 12862., 13240., 14101., 14494., 15400., 15808., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 24508., 25352., 26816., 27680., 29204., 30088., 31672., 32576., 18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512.,  5356.,  5608.,  6200.,  6464.,  7092.,  7368.,  8032.,  8320.,  8304.,  8672.,  9472.,  9856., 10704., 11104., 12000., 12416., 13156., 13656., 14712., 15232., 16348., 16888., 18064., 18624., 15220., 15800., 16936., 17536., 18732., 19352., 20608., 21248., 17284., 17944., 19160., 19840., 21116., 21816., 23152., 23872., 19348., 20088., 21384., 22144., 23500., 24280., 25696., 26496., 16496., 17120., 18176., 18816., 19920., 20576., 21728., 22400., 14748., 15240., 16072., 16576., 17444., 17960., 18864., 19392.,  7597.,  7834.,  8354.,  8600.,  9147.,  9402.,  9976., 10240.,  9828., 10168., 10880., 11232., 11980., 12344., 13128., 13504., 11855., 12310., 13202., 13672., 14609., 15094., 16076., 16576., 13483., 13998., 14950., 15480., 16477., 17022., 18064., 18624., 15111., 15686., 16698., 17288., 18345., 18950., 20052., 20672., 16739., 17374., 18446., 19096., 20213., 20878., 22040., 22720., 12740., 13272., 14144., 14688., 15596., 16152., 17096., 17664.,  9681., 10098., 10782., 11208., 11919., 12354., 13092., 13536.,  2973.,  3114.,  3554.,  3704.,  4171.,  4330.,  4824.,  4992.,  4196.,  4408.,  4992.,  5216.,  5836.,  6072.,  6728.,  6976.,  7519.,  7814.,  8594.,  8904.,  9729., 10054., 10924., 11264.,  9339.,  9694., 10534., 10904., 11789., 12174., 13104., 13504., 11159., 11574., 12474., 12904., 13849., 14294., 15284., 15744., 12979., 13454., 14414., 14904., 15909., 16414., 17464., 17984., 11524., 11928., 12736., 13152., 13996., 14424., 15304., 15744.,  8705.,  9026.,  9630.,  9960., 10591., 10930., 11588., 11936.,  8844.,  9096.,  9720.,  9984., 10644., 10920., 11616., 11904., 12464., 12832., 13696., 14080., 14992., 15392., 16352., 16768., 16068., 16568., 17720., 18240., 19452., 19992., 21264., 21824., 18516., 19096., 20328., 20928., 22220., 22840., 24192., 24832., 20964., 21624., 22936., 23616., 24988., 25688., 27120., 27840., 23412., 24152., 25544., 26304., 27756., 28536., 30048., 30848., 21488., 22112., 23296., 23936., 25168., 25824., 27104., 27776., 16636., 17128., 18056., 18560., 19524., 20040., 21040., 21568.,  5699.,  5966.,  6686.,  6968.,  7733.,  8030.,  8840.,  9152.,  9116.,  9512., 10496., 10912., 11956., 12392., 13496., 13952., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 20796., 21512., 22848., 23584., 24980., 25736., 27192., 27968., 17887., 18454., 19490., 20072., 21153., 21750., 22876., 23488., 11683., 12046., 12862., 13240., 14101., 14494., 15400., 15808., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 24508., 25352., 26816., 27680., 29204., 30088., 31672., 32576., 18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512.,  5356.,  5608.,  6200.,  6464.,  7092.,  7368.,  8032.,  8320.,  8304.,  8672.,  9472.,  9856., 10704., 11104., 12000., 12416., 13156., 13656., 14712., 15232., 16348., 16888., 18064., 18624., 15220., 15800., 16936., 17536., 18732., 19352., 20608., 21248., 17284., 17944., 19160., 19840., 21116., 21816., 23152., 23872., 19348., 20088., 21384., 22144., 23500., 24280., 25696., 26496., 16496., 17120., 18176., 18816., 19920., 20576., 21728., 22400., 14748., 15240., 16072., 16576., 17444., 17960., 18864., 19392.,  7597.,  7834.,  8354.,  8600.,  9147.,  9402.,  9976., 10240.,  9828., 10168., 10880., 11232., 11980., 12344., 13128., 13504., 11855., 12310., 13202., 13672., 14609., 15094., 16076., 16576., 13483., 13998., 14950., 15480., 16477., 17022., 18064., 18624., 15111., 15686., 16698., 17288., 18345., 18950., 20052., 20672., 16739., 17374., 18446., 19096., 20213., 20878., 22040., 22720., 12740., 13272., 14144., 14688., 15596., 16152., 17096., 17664.,  9681., 10098., 10782., 11208., 11919., 12354., 13092., 13536.,  2973.,  3114.,  3554.,  3704.,  4171.,  4330.,  4824.,  4992.,  4196.,  4408.,  4992.,  5216.,  5836.,  6072.,  6728.,  6976.,  7519.,  7814.,  8594.,  8904.,  9729., 10054., 10924., 11264.,  9339.,  9694., 10534., 10904., 11789., 12174., 13104., 13504., 11159., 11574., 12474., 12904., 13849., 14294., 15284., 15744., 12979., 13454., 14414., 14904., 15909., 16414., 17464., 17984., 11524., 11928., 12736., 13152., 13996., 14424., 15304., 15744.,  8705.,  9026.,  9630.,  9960., 10591., 10930., 11588., 11936.,  8844.,  9096.,  9720.,  9984., 10644., 10920., 11616., 11904., 12464., 12832., 13696., 14080., 14992., 15392., 16352., 16768., 16068., 16568., 17720., 18240., 19452., 19992., 21264., 21824., 18516., 19096., 20328., 20928., 22220., 22840., 24192., 24832., 20964., 21624., 22936., 23616., 24988., 25688., 27120., 27840., 23412., 24152., 25544., 26304., 27756., 28536., 30048., 30848., 21488., 22112., 23296., 23936., 25168., 25824., 27104., 27776., 16636., 17128., 18056., 18560., 19524., 20040., 21040., 21568.,  5699.,  5966.,  6686.,  6968.,  7733.,  8030.,  8840.,  9152.,  9116.,  9512., 10496., 10912., 11956., 12392., 13496., 13952., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 20796., 21512., 22848., 23584., 24980., 25736., 27192., 27968., 17887., 18454., 19490., 20072., 21153., 21750., 22876., 23488., 11683., 12046., 12862., 13240., 14101., 14494., 15400., 15808., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 24508., 25352., 26816., 27680., 29204., 30088., 31672., 32576., 18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512.,  5356.,  5608.,  6200.,  6464.,  7092.,  7368.,  8032.,  8320.,  8304.,  8672.,  9472.,  9856., 10704., 11104., 12000., 12416., 13156., 13656., 14712., 15232., 16348., 16888., 18064., 18624., 15220., 15800., 16936., 17536., 18732., 19352., 20608., 21248., 17284., 17944., 19160., 19840., 21116., 21816., 23152., 23872., 19348., 20088., 21384., 22144., 23500., 24280., 25696., 26496., 16496., 17120., 18176., 18816., 19920., 20576., 21728., 22400., 14748., 15240., 16072., 16576., 17444., 17960., 18864., 19392.,  7597.,  7834.,  8354.,  8600.,  9147.,  9402.,  9976., 10240.,  9828., 10168., 10880., 11232., 11980., 12344., 13128., 13504., 11855., 12310., 13202., 13672., 14609., 15094., 16076., 16576., 13483., 13998., 14950., 15480., 16477., 17022., 18064., 18624., 15111., 15686., 16698., 17288., 18345., 18950., 20052., 20672., 16739., 17374., 18446., 19096., 20213., 20878., 22040., 22720., 12740., 13272., 14144., 14688., 15596., 16152., 17096., 17664.,  9681., 10098., 10782., 11208., 11919., 12354., 13092., 13536.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4461.,  4602.,  4743.,  4884.,  5294.,  5444.,  5594.,  5744.,  6199.,  6358.,  6517.,  6676.,  7176.,  7344.,  7512.,  7680.,  5492.,  5704.,  5916.,  6128.,  6688.,  6912.,  7136.,  7360.,  7980.,  8216.,  8452.,  8688.,  9368.,  9616.,  9864., 10112.,  8343.,  8638.,  8933.,  9228.,  9966., 10276., 10586., 10896., 11709., 12034., 12359., 12684., 13572., 13912., 14252., 14592.,  9875., 10230., 10585., 10940., 11738., 12108., 12478., 12848., 13721., 14106., 14491., 14876., 15824., 16224., 16624., 17024., 11407., 11822., 12237., 12652., 13510., 13940., 14370., 14800., 15733., 16178., 16623., 17068., 18076., 18536., 18996., 19456., 12939., 13414., 13889., 14364., 15282., 15772., 16262., 16752., 17745., 18250., 18755., 19260., 20328., 20848., 21368., 21888., 10164., 10568., 10972., 11376., 12128., 12544., 12960., 13376., 14188., 14616., 15044., 15472., 16344., 16784., 17224., 17664.,  7041.,  7362.,  7683.,  8004.,  8562.,  8892.,  9222.,  9552., 10155., 10494., 10833., 11172., 11820., 12168., 12516., 12864.,  5788.,  6040.,  6292.,  6544.,  7144.,  7408.,  7672.,  7936.,  8596.,  8872.,  9148.,  9424., 10144., 10432., 10720., 11008.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 11988., 12488., 12988., 13488., 14568., 15088., 15608., 16128., 17308., 17848., 18388., 18928., 20208., 20768., 21328., 21888., 13988., 14568., 15148., 15728., 16888., 17488., 18088., 18688., 19948., 20568., 21188., 21808., 23168., 23808., 24448., 25088., 15988., 16648., 17308., 17968., 19208., 19888., 20568., 21248., 22588., 23288., 23988., 24688., 26128., 26848., 27568., 28288., 17988., 18728., 19468., 20208., 21528., 22288., 23048., 23808., 25228., 26008., 26788., 27568., 29088., 29888., 30688., 31488., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 11788., 12280., 12772., 13264., 14104., 14608., 15112., 15616., 16516., 17032., 17548., 18064., 19024., 19552., 20080., 20608.,  7099.,  7366.,  7633.,  7900.,  8610.,  8892.,  9174.,  9456., 10241., 10538., 10835., 11132., 11992., 12304., 12616., 12928.,  9836., 10232., 10628., 11024., 12000., 12416., 12832., 13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 18220., 18936., 19652., 20368., 21664., 22400., 23136., 23872., 25268., 26024., 26780., 27536., 29032., 29808., 30584., 31360., 14215., 14782., 15349., 15916., 16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224., 23836., 24448.,  8731.,  9094.,  9457.,  9820., 10626., 11004., 11382., 11760., 12641., 13034., 13427., 13820., 14776., 15184., 15592., 16000., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 21420., 22264., 23108., 23952., 25376., 26240., 27104., 27968., 29492., 30376., 31260., 32144., 33768., 34672., 35576., 36480., 14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080., 25788., 26496.,  6812.,  7064.,  7316.,  7568.,  8168.,  8432.,  8696.,  8960.,  9620.,  9896., 10172., 10448., 11168., 11456., 11744., 12032.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 13012., 13512., 14012., 14512., 15592., 16112., 16632., 17152., 18332., 18872., 19412., 19952., 21232., 21792., 22352., 22912., 15012., 15592., 16172., 16752., 17912., 18512., 19112., 19712., 20972., 21592., 22212., 22832., 24192., 24832., 25472., 26112., 17012., 17672., 18332., 18992., 20232., 20912., 21592., 22272., 23612., 24312., 25012., 25712., 27152., 27872., 28592., 29312., 19012., 19752., 20492., 21232., 22552., 23312., 24072., 24832., 26252., 27032., 27812., 28592., 30112., 30912., 31712., 32512., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 12812., 13304., 13796., 14288., 15128., 15632., 16136., 16640., 17540., 18056., 18572., 19088., 20048., 20576., 21104., 21632.,  5165.,  5402.,  5639.,  5876.,  6350.,  6596.,  6842.,  7088.,  7607.,  7862.,  8117.,  8372.,  8936.,  9200.,  9464.,  9728.,  8180.,  8520.,  8860.,  9200.,  9888., 10240., 10592., 10944., 11692., 12056., 12420., 12784., 13592., 13968., 14344., 14720., 10519., 10974., 11429., 11884., 12750., 13220., 13690., 14160., 15101., 15586., 16071., 16556., 17572., 18072., 18572., 19072., 11923., 12438., 12953., 13468., 14394., 14924., 15454., 15984., 16985., 17530., 18075., 18620., 19696., 20256., 20816., 21376., 13327., 13902., 14477., 15052., 16038., 16628., 17218., 17808., 18869., 19474., 20079., 20684., 21820., 22440., 23060., 23680., 14731., 15366., 16001., 16636., 17682., 18332., 18982., 19632., 20753., 21418., 22083., 22748., 23944., 24624., 25304., 25984., 13364., 13896., 14428., 14960., 15840., 16384., 16928., 17472., 18412., 18968., 19524., 20080., 21080., 21648., 22216., 22784., 10241., 10658., 11075., 11492., 12178., 12604., 13030., 13456., 14187., 14622., 15057., 15492., 16268., 16712., 17156., 17600.,  4461.,  4602.,  4743.,  4884.,  5294.,  5444.,  5594.,  5744.,  6199.,  6358.,  6517.,  6676.,  7176.,  7344.,  7512.,  7680.,  5492.,  5704.,  5916.,  6128.,  6688.,  6912.,  7136.,  7360.,  7980.,  8216.,  8452.,  8688.,  9368.,  9616.,  9864., 10112.,  8343.,  8638.,  8933.,  9228.,  9966., 10276., 10586., 10896., 11709., 12034., 12359., 12684., 13572., 13912., 14252., 14592.,  9875., 10230., 10585., 10940., 11738., 12108., 12478., 12848., 13721., 14106., 14491., 14876., 15824., 16224., 16624., 17024., 11407., 11822., 12237., 12652., 13510., 13940., 14370., 14800., 15733., 16178., 16623., 17068., 18076., 18536., 18996., 19456., 12939., 13414., 13889., 14364., 15282., 15772., 16262., 16752., 17745., 18250., 18755., 19260., 20328., 20848., 21368., 21888., 10164., 10568., 10972., 11376., 12128., 12544., 12960., 13376., 14188., 14616., 15044., 15472., 16344., 16784., 17224., 17664.,  7041.,  7362.,  7683.,  8004.,  8562.,  8892.,  9222.,  9552., 10155., 10494., 10833., 11172., 11820., 12168., 12516., 12864.,  5788.,  6040.,  6292.,  6544.,  7144.,  7408.,  7672.,  7936.,  8596.,  8872.,  9148.,  9424., 10144., 10432., 10720., 11008.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 11988., 12488., 12988., 13488., 14568., 15088., 15608., 16128., 17308., 17848., 18388., 18928., 20208., 20768., 21328., 21888., 13988., 14568., 15148., 15728., 16888., 17488., 18088., 18688., 19948., 20568., 21188., 21808., 23168., 23808., 24448., 25088., 15988., 16648., 17308., 17968., 19208., 19888., 20568., 21248., 22588., 23288., 23988., 24688., 26128., 26848., 27568., 28288., 17988., 18728., 19468., 20208., 21528., 22288., 23048., 23808., 25228., 26008., 26788., 27568., 29088., 29888., 30688., 31488., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 11788., 12280., 12772., 13264., 14104., 14608., 15112., 15616., 16516., 17032., 17548., 18064., 19024., 19552., 20080., 20608.,  7099.,  7366.,  7633.,  7900.,  8610.,  8892.,  9174.,  9456., 10241., 10538., 10835., 11132., 11992., 12304., 12616., 12928.,  9836., 10232., 10628., 11024., 12000., 12416., 12832., 13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 18220., 18936., 19652., 20368., 21664., 22400., 23136., 23872., 25268., 26024., 26780., 27536., 29032., 29808., 30584., 31360., 14215., 14782., 15349., 15916., 16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224., 23836., 24448.,  8731.,  9094.,  9457.,  9820., 10626., 11004., 11382., 11760., 12641., 13034., 13427., 13820., 14776., 15184., 15592., 16000., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 21420., 22264., 23108., 23952., 25376., 26240., 27104., 27968., 29492., 30376., 31260., 32144., 33768., 34672., 35576., 36480., 14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080., 25788., 26496.,  6812.,  7064.,  7316.,  7568.,  8168.,  8432.,  8696.,  8960.,  9620.,  9896., 10172., 10448., 11168., 11456., 11744., 12032.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 13012., 13512., 14012., 14512., 15592., 16112., 16632., 17152., 18332., 18872., 19412., 19952., 21232., 21792., 22352., 22912., 15012., 15592., 16172., 16752., 17912., 18512., 19112., 19712., 20972., 21592., 22212., 22832., 24192., 24832., 25472., 26112., 17012., 17672., 18332., 18992., 20232., 20912., 21592., 22272., 23612., 24312., 25012., 25712., 27152., 27872., 28592., 29312., 19012., 19752., 20492., 21232., 22552., 23312., 24072., 24832., 26252., 27032., 27812., 28592., 30112., 30912., 31712., 32512., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 12812., 13304., 13796., 14288., 15128., 15632., 16136., 16640., 17540., 18056., 18572., 19088., 20048., 20576., 21104., 21632.,  5165.,  5402.,  5639.,  5876.,  6350.,  6596.,  6842.,  7088.,  7607.,  7862.,  8117.,  8372.,  8936.,  9200.,  9464.,  9728.,  8180.,  8520.,  8860.,  9200.,  9888., 10240., 10592., 10944., 11692., 12056., 12420., 12784., 13592., 13968., 14344., 14720., 10519., 10974., 11429., 11884., 12750., 13220., 13690., 14160., 15101., 15586., 16071., 16556., 17572., 18072., 18572., 19072., 11923., 12438., 12953., 13468., 14394., 14924., 15454., 15984., 16985., 17530., 18075., 18620., 19696., 20256., 20816., 21376., 13327., 13902., 14477., 15052., 16038., 16628., 17218., 17808., 18869., 19474., 20079., 20684., 21820., 22440., 23060., 23680., 14731., 15366., 16001., 16636., 17682., 18332., 18982., 19632., 20753., 21418., 22083., 22748., 23944., 24624., 25304., 25984., 13364., 13896., 14428., 14960., 15840., 16384., 16928., 17472., 18412., 18968., 19524., 20080., 21080., 21648., 22216., 22784., 10241., 10658., 11075., 11492., 12178., 12604., 13030., 13456., 14187., 14622., 15057., 15492., 16268., 16712., 17156., 17600.,  4461.,  4602.,  4743.,  4884.,  5294.,  5444.,  5594.,  5744.,  6199.,  6358.,  6517.,  6676.,  7176.,  7344.,  7512.,  7680.,  5492.,  5704.,  5916.,  6128.,  6688.,  6912.,  7136.,  7360.,  7980.,  8216.,  8452.,  8688.,  9368.,  9616.,  9864., 10112.,  8343.,  8638.,  8933.,  9228.,  9966., 10276., 10586., 10896., 11709., 12034., 12359., 12684., 13572., 13912., 14252., 14592.,  9875., 10230., 10585., 10940., 11738., 12108., 12478., 12848., 13721., 14106., 14491., 14876., 15824., 16224., 16624., 17024., 11407., 11822., 12237., 12652., 13510., 13940., 14370., 14800., 15733., 16178., 16623., 17068., 18076., 18536., 18996., 19456., 12939., 13414., 13889., 14364., 15282., 15772., 16262., 16752., 17745., 18250., 18755., 19260., 20328., 20848., 21368., 21888., 10164., 10568., 10972., 11376., 12128., 12544., 12960., 13376., 14188., 14616., 15044., 15472., 16344., 16784., 17224., 17664.,  7041.,  7362.,  7683.,  8004.,  8562.,  8892.,  9222.,  9552., 10155., 10494., 10833., 11172., 11820., 12168., 12516., 12864.,  5788.,  6040.,  6292.,  6544.,  7144.,  7408.,  7672.,  7936.,  8596.,  8872.,  9148.,  9424., 10144., 10432., 10720., 11008.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 11988., 12488., 12988., 13488., 14568., 15088., 15608., 16128., 17308., 17848., 18388., 18928., 20208., 20768., 21328., 21888., 13988., 14568., 15148., 15728., 16888., 17488., 18088., 18688., 19948., 20568., 21188., 21808., 23168., 23808., 24448., 25088., 15988., 16648., 17308., 17968., 19208., 19888., 20568., 21248., 22588., 23288., 23988., 24688., 26128., 26848., 27568., 28288., 17988., 18728., 19468., 20208., 21528., 22288., 23048., 23808., 25228., 26008., 26788., 27568., 29088., 29888., 30688., 31488., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 11788., 12280., 12772., 13264., 14104., 14608., 15112., 15616., 16516., 17032., 17548., 18064., 19024., 19552., 20080., 20608.,  7099.,  7366.,  7633.,  7900.,  8610.,  8892.,  9174.,  9456., 10241., 10538., 10835., 11132., 11992., 12304., 12616., 12928.,  9836., 10232., 10628., 11024., 12000., 12416., 12832., 13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 18220., 18936., 19652., 20368., 21664., 22400., 23136., 23872., 25268., 26024., 26780., 27536., 29032., 29808., 30584., 31360., 14215., 14782., 15349., 15916., 16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224., 23836., 24448.,  8731.,  9094.,  9457.,  9820., 10626., 11004., 11382., 11760., 12641., 13034., 13427., 13820., 14776., 15184., 15592., 16000., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 21420., 22264., 23108., 23952., 25376., 26240., 27104., 27968., 29492., 30376., 31260., 32144., 33768., 34672., 35576., 36480., 14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080., 25788., 26496.,  6812.,  7064.,  7316.,  7568.,  8168.,  8432.,  8696.,  8960.,  9620.,  9896., 10172., 10448., 11168., 11456., 11744., 12032.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 13012., 13512., 14012., 14512., 15592., 16112., 16632., 17152., 18332., 18872., 19412., 19952., 21232., 21792., 22352., 22912., 15012., 15592., 16172., 16752., 17912., 18512., 19112., 19712., 20972., 21592., 22212., 22832., 24192., 24832., 25472., 26112., 17012., 17672., 18332., 18992., 20232., 20912., 21592., 22272., 23612., 24312., 25012., 25712., 27152., 27872., 28592., 29312., 19012., 19752., 20492., 21232., 22552., 23312., 24072., 24832., 26252., 27032., 27812., 28592., 30112., 30912., 31712., 32512., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 12812., 13304., 13796., 14288., 15128., 15632., 16136., 16640., 17540., 18056., 18572., 19088., 20048., 20576., 21104., 21632.,  5165.,  5402.,  5639.,  5876.,  6350.,  6596.,  6842.,  7088.,  7607.,  7862.,  8117.,  8372.,  8936.,  9200.,  9464.,  9728.,  8180.,  8520.,  8860.,  9200.,  9888., 10240., 10592., 10944., 11692., 12056., 12420., 12784., 13592., 13968., 14344., 14720., 10519., 10974., 11429., 11884., 12750., 13220., 13690., 14160., 15101., 15586., 16071., 16556., 17572., 18072., 18572., 19072., 11923., 12438., 12953., 13468., 14394., 14924., 15454., 15984., 16985., 17530., 18075., 18620., 19696., 20256., 20816., 21376., 13327., 13902., 14477., 15052., 16038., 16628., 17218., 17808., 18869., 19474., 20079., 20684., 21820., 22440., 23060., 23680., 14731., 15366., 16001., 16636., 17682., 18332., 18982., 19632., 20753., 21418., 22083., 22748., 23944., 24624., 25304., 25984., 13364., 13896., 14428., 14960., 15840., 16384., 16928., 17472., 18412., 18968., 19524., 20080., 21080., 21648., 22216., 22784., 10241., 10658., 11075., 11492., 12178., 12604., 13030., 13456., 14187., 14622., 15057., 15492., 16268., 16712., 17156., 17600.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472.};
  const std::array<int, 4> in_shape = {{ 3, 6, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1554.,  2142.,  2760.,  3030.,  2460.,  1869.,  2636.,  3564.,  4510.,  4820.,  3860.,  2894.,  3850.,  5140.,  6425.,  6750.,  5350.,  3970.,  5110.,  6760.,  8375.,  8700.,  6850.,  5050.,  6370.,  8380., 10325., 10650.,  8350.,  6130.,  4460.,  5812.,  7090.,  7300.,  5660.,  4106.,  2778.,  3570.,  4290.,  4410.,  3360.,  2391.,  8736., 11466., 14100., 14370., 11280.,  8295., 10952., 14316., 17530., 17840., 13940., 10202., 12670., 16480., 20075., 20400., 15850., 11530., 13930., 18100., 22025., 22350., 17350., 12610., 15190., 19720., 23975., 24300., 18850., 13690., 10256., 13204., 15910., 16120., 12380.,  8894.,  6180.,  7854.,  9330.,  9450.,  7140.,  5037., 15918., 20790., 25440., 25710., 20100., 14721., 19268., 25068., 30550., 30860., 24020., 17510., 21490., 27820., 33725., 34050., 26350., 19090., 22750., 29440., 35675., 36000., 27850., 20170., 24010., 31060., 37625., 37950., 29350., 21250., 16052., 20596., 24730., 24940., 19100., 13682.,  9582., 12138., 14370., 14490., 10920.,  7683.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6425.,  6750.,  8375.,  8700., 10325., 10650., 20075., 20400., 22025., 22350., 23975., 24300., 33725., 34050., 35675., 36000., 37625., 37950.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3036.,  3108.,  4182.,  4284.,  5385.,  5520.,  5910.,  6060.,  4794.,  4920.,  3639.,  3738.,  5140.,  5272.,  6944.,  7128.,  8780.,  9020.,  9380.,  9640.,  7504.,  7720.,  5620.,  5788.,  7490.,  7700.,  9990., 10280., 12475., 12850., 13100., 13500., 10370., 10700.,  7685.,  7940.,  9920., 10220., 13110., 13520., 16225., 16750., 16850., 17400., 13250., 13700.,  9755., 10100., 12350., 12740., 16230., 16760., 19975., 20650., 20600., 21300., 16130., 16700., 11825., 12260.,  8572.,  8920., 11152., 11624., 13580., 14180., 13980., 14600., 10816., 11320.,  7828.,  8212.,  5268.,  5556.,  6750.,  7140.,  8085.,  8580.,  8310.,  8820.,  6306.,  6720.,  4467.,  4782., 17022., 17472., 22326., 22932., 27435., 28200., 27960., 28740., 21930., 22560., 16113., 16590., 21268., 21904., 27776., 28632., 30844., 31860., 28436., 29408., 21104., 21864., 14100., 14644., 15476., 16124., 20054., 20928., 21829., 22870., 20086., 21088., 14658., 15444.,  9567., 10132., 10802., 11348., 13958., 14696., 15019., 15890., 13916., 14748., 10114., 10764.,  6581.,  7044.,  8048.,  8492., 10422., 11024., 11409., 12110., 10946., 11608.,  8130.,  8644.,  5515.,  5876.,  4108.,  4384.,  5296.,  5672.,  5804.,  6220.,  5756.,  6128.,  4384.,  4664.,  3140.,  3324.,  1902.,  1992.,  2526.,  2652.,  3135.,  3300.,  3360.,  3540.,  2610.,  2760.,  1893.,  2010.,  9696.,  9948., 12822., 13164., 15885., 16320., 16410., 16860., 12954., 13320.,  9579.,  9858., 12820., 13192., 16864., 17368., 20780., 21420., 21380., 22040., 16784., 17320., 12340., 12748., 15590., 16100., 20390., 21080., 24975., 25850., 25600., 26500., 19970., 20700., 14585., 15140., 18020., 18620., 23510., 24320., 28725., 29750., 29350., 30400., 22850., 23700., 16655., 17300., 20450., 21140., 26630., 27560., 32475., 33650., 33100., 34300., 25730., 26700., 18725., 19460., 13852., 14440., 17872., 18664., 21580., 22580., 21980., 23000., 16896., 17720., 12148., 12772.,  8328.,  8796., 10590., 11220., 12585., 13380., 12810., 13620.,  9666., 10320.,  6807.,  7302.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12475., 12850., 13100., 13500., 16225., 16750., 16850., 17400., 19975., 20650., 20600., 21300., 21829., 22870., 20086., 21088., 15019., 15890., 13916., 14748., 11409., 12110., 10946., 11608., 24975., 25850., 25600., 26500., 28725., 29750., 29350., 30400., 32475., 33650., 33100., 34300.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1776.,  1848.,  1920.,  1992.,  2374.,  2476.,  2578.,  2680.,  3403.,  3538.,  3673.,  3808.,  3862.,  4012.,  4162.,  4312.,  3126.,  3252.,  3378.,  3504.,  2443.,  2542.,  2641.,  2740.,  3620.,  3752.,  3884.,  4016.,  4744.,  4928.,  5112.,  5296.,  6632.,  6872.,  7112.,  7352.,  7236.,  7496.,  7756.,  8016.,  5768.,  5984.,  6200.,  6416.,  4416.,  4584.,  4752.,  4920.,  5938.,  6148.,  6358.,  6568.,  7658.,  7948.,  8238.,  8528., 10431., 10806., 11181., 11556., 11080., 11480., 11880., 12280.,  8698.,  9028.,  9358.,  9688.,  6539.,  6794.,  7049.,  7304.,  8404.,  8704.,  9004.,  9304., 10706., 11116., 11526., 11936., 14325., 14850., 15375., 15900., 14974., 15524., 16074., 16624., 11650., 12100., 12550., 13000.,  8669.,  9014.,  9359.,  9704., 10870., 11260., 11650., 12040., 13754., 14284., 14814., 15344., 18219., 18894., 19569., 20244., 18868., 19568., 20268., 20968., 14602., 15172., 15742., 16312., 10799., 11234., 11669., 12104.,  9500.,  9848., 10196., 10544., 11976., 12448., 12920., 13392., 16448., 17048., 17648., 18248., 16972., 17592., 18212., 18832., 13256., 13760., 14264., 14768.,  9960., 10344., 10728., 11112., 10248., 10536., 10824., 11112., 13110., 13500., 13890., 14280., 15675., 16170., 16665., 17160., 16110., 16620., 17130., 17640., 12198., 12612., 13026., 13440.,  8619.,  8934.,  9249.,  9564., 13242., 13692., 14142., 14592., 16654., 17260., 17866., 18472., 22681., 23446., 24211., 24976., 23140., 23920., 24700., 25480., 18078., 18708., 19338., 19968., 13573., 14050., 14527., 15004., 19244., 19880., 20516., 21152., 24232., 25088., 25944., 26800., 29888., 30904., 31920., 32936., 28636., 29608., 30580., 31552., 21800., 22560., 23320., 24080., 15752., 16296., 16840., 17384., 17632., 18280., 18928., 19576., 22082., 22956., 23830., 24704., 28857., 29898., 30939., 31980., 28930., 29932., 30934., 31936., 22578., 23364., 24150., 24936., 17033., 17598., 18163., 18728., 18370., 18916., 19462., 20008., 23338., 24076., 24814., 25552., 24239., 25110., 25981., 26852., 21496., 22328., 23160., 23992., 15034., 15684., 16334., 16984.,  9243.,  9706., 10169., 10632., 10660., 11104., 11548., 11992., 13330., 13932., 14534., 15136., 13733., 14434., 15135., 15836., 12270., 12932., 13594., 14256.,  8514.,  9028.,  9542., 10056.,  5293.,  5654.,  6015.,  6376.,  4868.,  5144.,  5420.,  5696.,  5992.,  6368.,  6744.,  7120.,  6712.,  7128.,  7544.,  7960.,  6404.,  6776.,  7148.,  7520.,  4840.,  5120.,  5400.,  5680.,  3600.,  3784.,  3968.,  4152.,  3714.,  3804.,  3894.,  3984.,  4926.,  5052.,  5178.,  5304.,  6105.,  6270.,  6435.,  6600.,  6540.,  6720.,  6900.,  7080.,  5070.,  5220.,  5370.,  5520.,  3669.,  3786.,  3903.,  4020.,  7236.,  7488.,  7740.,  7992.,  9174.,  9516.,  9858., 10200., 12583., 13018., 13453., 13888., 13042., 13492., 13942., 14392., 10246., 10612., 10978., 11344.,  7743.,  8022.,  8301.,  8580., 11060., 11432., 11804., 12176., 14024., 14528., 15032., 15536., 18712., 19352., 19992., 20632., 19316., 19976., 20636., 21296., 15048., 15584., 16120., 16656., 11216., 11624., 12032., 12440., 14158., 14668., 15178., 15688., 17818., 18508., 19198., 19888., 23411., 24286., 25161., 26036., 24060., 24960., 25860., 26760., 18538., 19268., 19998., 20728., 13639., 14194., 14749., 15304., 16624., 17224., 17824., 18424., 20866., 21676., 22486., 23296., 27305., 28330., 29355., 30380., 27954., 29004., 30054., 31104., 21490., 22340., 23190., 24040., 15769., 16414., 17059., 17704., 19090., 19780., 20470., 21160., 23914., 24844., 25774., 26704., 31199., 32374., 33549., 34724., 31848., 33048., 34248., 35448., 24442., 25412., 26382., 27352., 17899., 18634., 19369., 20104., 15980., 16568., 17156., 17744., 19976., 20768., 21560., 22352., 26928., 27928., 28928., 29928., 27452., 28472., 29492., 30512., 21256., 22080., 22904., 23728., 15800., 16424., 17048., 17672., 16188., 16656., 17124., 17592., 20550., 21180., 21810., 22440., 24375., 25170., 25965., 26760., 24810., 25620., 26430., 27240., 18678., 19332., 19986., 20640., 13119., 13614., 14109., 14604.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10431., 10806., 11181., 11556., 11080., 11480., 11880., 12280., 14325., 14850., 15375., 15900., 14974., 15524., 16074., 16624., 18219., 18894., 19569., 20244., 18868., 19568., 20268., 20968., 28857., 29898., 30939., 31980., 28930., 29932., 30934., 31936., 24239., 25110., 25981., 26852., 21496., 22328., 23160., 23992., 13733., 14434., 15135., 15836., 12270., 12932., 13594., 14256., 23411., 24286., 25161., 26036., 24060., 24960., 25860., 26760., 27305., 28330., 29355., 30380., 27954., 29004., 30054., 31104., 31199., 32374., 33549., 34724., 31848., 33048., 34248., 35448.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5739.,  6216.,  7932.,  8568., 10245., 11040., 11295., 12120.,  9180.,  9840.,  6981.,  7476.,  9896., 10544., 13392., 14256., 16960., 18040., 18160., 19280., 14544., 15440., 10904., 11576., 14575., 15400., 19460., 20560., 24325., 25700., 25575., 27000., 20260., 21400., 15025., 15880., 16299., 17240., 19556., 20768., 22801., 24284., 21299., 22768., 14756., 15880., 10909., 11752., 12775., 13704., 15300., 16496., 17821., 19284., 16959., 18408., 11812., 12920.,  8713.,  9544.,  7920.,  8624.,  9168., 10064., 10376., 11464.,  9704., 10768.,  6480.,  7280.,  4688.,  5288.,  3983.,  4456.,  4348.,  4936.,  4681.,  5384.,  4299.,  4968.,  2716.,  3200.,  1905.,  2268., 12399., 13056., 16572., 17448., 20745., 21840., 21795., 22920., 17340., 18240., 12921., 13596., 17576., 18464., 23312., 24496., 25824., 27240., 24016., 25408., 17936., 19024., 11992., 12776., 13651., 14584., 18084., 19328., 19929., 21420., 18811., 20288., 13988., 15144.,  9317., 10152., 11407., 12328., 15108., 16336., 16869., 18340., 16391., 17848., 12324., 13464.,  8401.,  9224., 11083., 11992., 14692., 15904., 17009., 18460., 17171., 18608., 13220., 14344.,  9405., 10216.,  6608.,  7232.,  8720.,  9552., 10184., 11160., 10536., 11488.,  8208.,  8944.,  6000.,  6520.,  3651.,  3984.,  4860.,  5304.,  6045.,  6600.,  6495.,  7080.,  5052.,  5520.,  3669.,  4020., 10035., 10680., 13436., 14296., 16845., 17920., 17895., 19000., 14236., 15120., 10605., 11268.,  9128.,  9872., 12240., 13232., 15360., 16600., 16560., 17840., 13136., 14160.,  9752., 10520.,  9463., 10312., 12612., 13744., 15725., 17140., 16975., 18440., 13348., 14520.,  9817., 10696., 11059., 11896., 14756., 15872., 18425., 19820., 19675., 21120., 15524., 16680., 11461., 12328., 14575., 15400., 19460., 20560., 24325., 25700., 25575., 27000., 20260., 21400., 15025., 15880., 10544., 11216., 13904., 14800., 17160., 18280., 17960., 19120., 14032., 14960., 10256., 10952.,  6711.,  7224.,  8700.,  9384., 10545., 11400., 10995., 11880.,  8412.,  9120.,  6009.,  6540.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24325., 25700., 25575., 27000., 22801., 24284., 21299., 22768., 17821., 19284., 16959., 18408., 19929., 21420., 18811., 20288., 16869., 18340., 16391., 17848., 17009., 18460., 17171., 18608., 15725., 17140., 16975., 18440., 18425., 19820., 19675., 21120., 24325., 25700., 25575., 27000.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3279.,  3414.,  3840.,  3984.,  4408.,  4600.,  5156.,  5360.,  6347.,  6602.,  7346.,  7616.,  7265.,  7550.,  8324.,  8624.,  5896.,  6136.,  6756.,  7008.,  4621.,  4810.,  5282.,  5480.,  6868.,  7120.,  7768.,  8032.,  9024.,  9376., 10224., 10592., 12660., 13120., 14224., 14704., 13868., 14368., 15512., 16032., 11072., 11488., 12400., 12832.,  8492.,  8816.,  9504.,  9840., 11465., 11870., 12716., 13136., 14808., 15368., 16476., 17056., 20213., 20938., 22362., 23112., 21511., 22286., 23760., 24560., 16904., 17544., 18716., 19376., 12723., 13218., 14098., 14608., 14285., 14806., 15768., 16304., 16936., 17608., 18828., 19520., 22433., 23266., 24798., 25656., 22387., 23206., 24724., 25568., 16920., 17544., 18700., 19344., 12951., 13434., 14302., 14800., 14929., 15438., 16388., 16912., 18680., 19336., 20540., 21216., 26061., 26874., 28386., 29224., 27295., 28094., 29592., 30416., 17960., 18568., 19708., 20336., 12923., 13394., 14250., 14736., 13300., 13728., 14504., 14944., 14720., 15264., 16240., 16800., 16500., 17168., 18400., 19088., 14668., 15312., 16520., 17184.,  9216.,  9696., 10608., 11104.,  6700.,  7072.,  7760.,  8144.,  7655.,  7966.,  8592.,  8912.,  8312.,  8696.,  9476.,  9872.,  8899.,  9362., 10290., 10768.,  8169.,  8598.,  9492.,  9936.,  5128.,  5432.,  6084.,  6400.,  3573.,  3810.,  4290.,  4536.,  8739.,  9054.,  9660.,  9984., 11208., 11640., 12436., 12880., 15527., 16082., 17126., 17696., 16445., 17030., 18104., 18704., 13016., 13496., 14356., 14848.,  9921., 10290., 10942., 11320., 14308., 14800., 15688., 16192., 18304., 18976., 20144., 20832., 22628., 23424., 24864., 25680., 21980., 22752., 24168., 24960., 16896., 17504., 18608., 19232., 12348., 12784., 13584., 14032., 14117., 14630., 15584., 16112., 18056., 18760., 20012., 20736., 24361., 25202., 26742., 27608., 25083., 25910., 27436., 28288., 19960., 20616., 21804., 22480., 15407., 15882., 16742., 17232., 17321., 17822., 18764., 19280., 22360., 23048., 24284., 24992., 23637., 24458., 25978., 26824., 21543., 22350., 23856., 24688., 15368., 16008., 17180., 17840.,  9747., 10210., 11058., 11536., 12077., 12566., 13496., 14000., 15400., 16072., 17292., 17984., 17025., 17826., 19326., 20152., 16211., 16998., 18484., 19296., 11800., 12424., 13580., 14224.,  7927.,  8378.,  9214.,  9680.,  6916.,  7264.,  7960.,  8320.,  8768.,  9248., 10160., 10656., 11108., 11664., 12784., 13360., 11324., 11856., 12952., 13504.,  8896.,  9312., 10160., 10592.,  6844.,  7136.,  7744.,  8048.,  7131.,  7302.,  7788.,  7968.,  9480.,  9720., 10356., 10608., 11775., 12090., 12870., 13200., 12645., 12990., 13800., 14160.,  9816., 10104., 10740., 11040.,  7113.,  7338.,  7806.,  8040.,  8631.,  8934.,  9528.,  9840., 11096., 11512., 12292., 12720., 16707., 17242., 18266., 18816., 17625., 18190., 19244., 19824., 14248., 14712., 15556., 16032., 11189., 11546., 12186., 12552., 14452., 14800., 15544., 15904., 18880., 19360., 20336., 20832., 23124., 23744., 25008., 25648., 24332., 24992., 26296., 26976., 18880., 19424., 20464., 21024., 13772., 14192., 14976., 15408., 10433., 10862., 11732., 12176., 13368., 13960., 15100., 15712., 16797., 17562., 19026., 19816., 18095., 18910., 20424., 21264., 13800., 14472., 15676., 16368.,  9963., 10482., 11386., 11920.,  9029.,  9446., 10304., 10736., 11528., 12104., 13228., 13824., 15305., 16050., 17494., 18264., 16603., 17398., 18892., 19712., 12792., 13448., 14636., 15312.,  9423.,  9930., 10822., 11344., 11465., 11870., 12716., 13136., 14808., 15368., 16476., 17056., 20213., 20938., 22362., 23112., 21511., 22286., 23760., 24560., 16904., 17544., 18716., 19376., 12723., 13218., 14098., 14608., 10900., 11296., 12040., 12448., 13952., 14496., 15472., 16032., 19796., 20496., 21760., 22480., 20844., 21584., 22888., 23648., 16512., 17120., 18160., 18784., 12620., 13088., 13872., 14352., 13071., 13422., 14088., 14448., 16920., 17400., 18276., 18768., 20475., 21090., 22170., 22800., 21345., 21990., 23100., 23760., 16296., 16824., 17700., 18240., 11613., 12018., 12666., 13080.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20213., 20938., 22362., 23112., 21511., 22286., 23760., 24560., 22433., 23266., 24798., 25656., 22387., 23206., 24724., 25568., 26061., 26874., 28386., 29224., 27295., 28094., 29592., 30416., 24361., 25202., 26742., 27608., 25083., 25910., 27436., 28288., 23637., 24458., 25978., 26824., 21543., 22350., 23856., 24688., 17025., 17826., 19326., 20152., 16211., 16998., 18484., 19296., 16797., 17562., 19026., 19816., 18095., 18910., 20424., 21264., 15305., 16050., 17494., 18264., 16603., 17398., 18892., 19712., 20213., 20938., 22362., 23112., 21511., 22286., 23760., 24560.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3991.,  4126.,  4261.,  4396.,  4848.,  4992.,  5136.,  5280.,  5616.,  5808.,  6000.,  6192.,  6780.,  6984.,  7188.,  7392.,  7895.,  8150.,  8405.,  8660.,  9430.,  9700.,  9970., 10240.,  8805.,  9090.,  9375.,  9660., 10460., 10760., 11060., 11360.,  8416.,  8656.,  8896.,  9136.,  9804., 10056., 10308., 10560.,  6109.,  6298.,  6487.,  6676.,  7166.,  7364.,  7562.,  7760.,  7468.,  7720.,  7972.,  8224.,  8872.,  9136.,  9400.,  9664., 10080., 10432., 10784., 11136., 12016., 12384., 12752., 13120., 13916., 14376., 14836., 15296., 16448., 16928., 17408., 17888., 15140., 15640., 16140., 16640., 17832., 18352., 18872., 19392., 14048., 14464., 14880., 15296., 16304., 16736., 17168., 17600., 10644., 10968., 11292., 11616., 12400., 12736., 13072., 13408., 11901., 12306., 12711., 13116., 14004., 14424., 14844., 15264., 16064., 16624., 17184., 17744., 18932., 19512., 20092., 20672., 21845., 22570., 23295., 24020., 25542., 26292., 27042., 27792., 23239., 24014., 24789., 25564., 27136., 27936., 28736., 29536., 20880., 21520., 22160., 22800., 24100., 24760., 25420., 26080., 15863., 16358., 16853., 17348., 18342., 18852., 19362., 19872., 16913., 17434., 17955., 18476., 19480., 20016., 20552., 21088., 18928., 19600., 20272., 20944., 22244., 22936., 23628., 24320., 23361., 24194., 25027., 25860., 27490., 28348., 29206., 30064., 22131., 22950., 23769., 24588., 26204., 27048., 27892., 28736., 16320., 16944., 17568., 18192., 19476., 20120., 20764., 21408., 13259., 13742., 14225., 14708., 15690., 16188., 16686., 17184., 13605., 14114., 14623., 15132., 16124., 16648., 17172., 17696., 17056., 17712., 18368., 19024., 20308., 20984., 21660., 22336., 23725., 24538., 25351., 26164., 27774., 28612., 29450., 30288., 25055., 25854., 26653., 27452., 29048., 29872., 30696., 31520., 17904., 18512., 19120., 19728., 20996., 21624., 22252., 22880., 14239., 14710., 15181., 15652., 16622., 17108., 17594., 18080., 11516., 11944., 12372., 12800., 13592., 14032., 14472., 14912., 13792., 14336., 14880., 15424., 16432., 16992., 17552., 18112., 16076., 16744., 17412., 18080., 19344., 20032., 20720., 21408., 15508., 16152., 16796., 17440., 18680., 19344., 20008., 20672., 12320., 12800., 13280., 13760., 14704., 15200., 15696., 16192., 11108., 11480., 11852., 12224., 12960., 13344., 13728., 14112.,  8791.,  9102.,  9413.,  9724., 10336., 10656., 10976., 11296., 12912., 13296., 13680., 14064., 14844., 15240., 15636., 16032., 12663., 13126., 13589., 14052., 14982., 15460., 15938., 16416., 10341., 10770., 11199., 11628., 12524., 12968., 13412., 13856.,  5408.,  5712.,  6016.,  6320.,  6988.,  7304.,  7620.,  7936.,  3645.,  3882.,  4119.,  4356.,  4878.,  5124.,  5370.,  5616.,  9611.,  9926., 10241., 10556., 11188., 11512., 11836., 12160., 12576., 13008., 13440., 13872., 14700., 15144., 15588., 16032., 16995., 17550., 18105., 18660., 19730., 20300., 20870., 21440., 17905., 18490., 19075., 19660., 20760., 21360., 21960., 22560., 16016., 16496., 16976., 17456., 18364., 18856., 19348., 19840., 11409., 11778., 12147., 12516., 13186., 13564., 13942., 14320., 14428., 14920., 15412., 15904., 16792., 17296., 17800., 18304., 19360., 20032., 20704., 21376., 22576., 23264., 23952., 24640., 26092., 26888., 27684., 28480., 29968., 30784., 31600., 32416., 23668., 24440., 25212., 25984., 27448., 28240., 29032., 29824., 17824., 18432., 19040., 19648., 20848., 21472., 22096., 22720., 13124., 13560., 13996., 14432., 15328., 15776., 16224., 16672., 13513., 14026., 14539., 15052., 16048., 16576., 17104., 17632., 17552., 18256., 18960., 19664., 20996., 21720., 22444., 23168., 22601., 23442., 24283., 25124., 26762., 27628., 28494., 29360., 22907., 23734., 24561., 25388., 27012., 27864., 28716., 29568., 19296., 19952., 20608., 21264., 22580., 23256., 23932., 24608., 16131., 16606., 17081., 17556., 18530., 19020., 19510., 20000., 15325., 15826., 16327., 16828., 17812., 18328., 18844., 19360., 20800., 21488., 22176., 22864., 24180., 24888., 25596., 26304., 22453., 23274., 24095., 24916., 26534., 27380., 28226., 29072., 21223., 22030., 22837., 23644., 25248., 26080., 26912., 27744., 17808., 18448., 19088., 19728., 21028., 21688., 22348., 23008., 14039., 14502., 14965., 15428., 16390., 16868., 17346., 17824., 12529., 13018., 13507., 13996., 14968., 15472., 15976., 16480., 17904., 18576., 19248., 19920., 21220., 21912., 22604., 23296., 22817., 23618., 24419., 25220., 26818., 27644., 28470., 29296., 24147., 24934., 25721., 26508., 28092., 28904., 29716., 30528., 18368., 18992., 19616., 20240., 21524., 22168., 22812., 23456., 11435., 11886., 12337., 12788., 13738., 14204., 14670., 15136.,  8812.,  9160.,  9508.,  9856., 10568., 10928., 11288., 11648., 10656., 11136., 11616., 12096., 13040., 13536., 14032., 14528., 11548., 12104., 12660., 13216., 14368., 14944., 15520., 16096., 10980., 11512., 12044., 12576., 13704., 14256., 14808., 15360.,  8160.,  8576.,  8992.,  9408., 10288., 10720., 11152., 11584.,  6356.,  6648.,  6940.,  7232.,  7888.,  8192.,  8496.,  8800.,  5579.,  5750.,  5921.,  6092.,  6564.,  6744.,  6924.,  7104.,  7712.,  7952.,  8192.,  8432.,  9068.,  9320.,  9572.,  9824.,  9603.,  9918., 10233., 10548., 11330., 11660., 11990., 12320., 10417., 10762., 11107., 11452., 12264., 12624., 12984., 13344.,  8400.,  8688.,  8976.,  9264.,  9916., 10216., 10516., 10816.,  6897.,  7122.,  7347.,  7572.,  8082.,  8316.,  8550.,  8784.,  8383.,  8686.,  8989.,  9292.,  9912., 10224., 10536., 10848., 10064., 10480., 10896., 11312., 12124., 12552., 12980., 13408., 14511., 15046., 15581., 16116., 17166., 17716., 18266., 18816., 15421., 15986., 16551., 17116., 18196., 18776., 19356., 19936., 12096., 12560., 13024., 13488., 14380., 14856., 15332., 15808.,  8837.,  9194.,  9551.,  9908., 10566., 10932., 11298., 11664., 11276., 11624., 11972., 12320., 13064., 13424., 13784., 14144., 15840., 16320., 16800., 17280., 18288., 18784., 19280., 19776., 19836., 20456., 21076., 21696., 23008., 23648., 24288., 24928., 21060., 21720., 22380., 23040., 24392., 25072., 25752., 26432., 18272., 18816., 19360., 19904., 21040., 21600., 22160., 22720., 14964., 15384., 15804., 16224., 17104., 17536., 17968., 18400., 10837., 11266., 11695., 12124., 13036., 13480., 13924., 14368., 15712., 16304., 16896., 17488., 18708., 19320., 19932., 20544., 20605., 21370., 22135., 22900., 24462., 25252., 26042., 26832., 21999., 22814., 23629., 24444., 26056., 26896., 27736., 28576., 19760., 20432., 21104., 21776., 23108., 23800., 24492., 25184., 16463., 16982., 17501., 18020., 19038., 19572., 20106., 20640., 11625., 12042., 12459., 12876., 13776., 14208., 14640., 15072., 14864., 15440., 16016., 16592., 17796., 18392., 18988., 19584., 18921., 19666., 20411., 21156., 22698., 23468., 24238., 25008., 20315., 21110., 21905., 22700., 24292., 25112., 25932., 26752., 17248., 17904., 18560., 19216., 20532., 21208., 21884., 22560., 12323., 12830., 13337., 13844., 14850., 15372., 15894., 16416., 11901., 12306., 12711., 13116., 14004., 14424., 14844., 15264., 16064., 16624., 17184., 17744., 18932., 19512., 20092., 20672., 21845., 22570., 23295., 24020., 25542., 26292., 27042., 27792., 23239., 24014., 24789., 25564., 27136., 27936., 28736., 29536., 20880., 21520., 22160., 22800., 24100., 24760., 25420., 26080., 15863., 16358., 16853., 17348., 18342., 18852., 19362., 19872., 10332., 10728., 11124., 11520., 12280., 12688., 13096., 13504., 13280., 13824., 14368., 14912., 15920., 16480., 17040., 17600., 18540., 19240., 19940., 20640., 21936., 22656., 23376., 24096., 19572., 20312., 21052., 21792., 23128., 23888., 24648., 25408., 15520., 16128., 16736., 17344., 18416., 19040., 19664., 20288., 12612., 13080., 13548., 14016., 14848., 15328., 15808., 16288., 10879., 11230., 11581., 11932., 12584., 12944., 13304., 13664., 14672., 15152., 15632., 16112., 16988., 17480., 17972., 18464., 17743., 18358., 18973., 19588., 20670., 21300., 21930., 22560., 18557., 19202., 19847., 20492., 21604., 22264., 22924., 23584., 14720., 15248., 15776., 16304., 17196., 17736., 18276., 18816., 11877., 12282., 12687., 13092., 13782., 14196., 14610., 15024.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21845., 22570., 23295., 24020., 25542., 26292., 27042., 27792., 23239., 24014., 24789., 25564., 27136., 27936., 28736., 29536., 23361., 24194., 25027., 25860., 27490., 28348., 29206., 30064., 22131., 22950., 23769., 24588., 26204., 27048., 27892., 28736., 23725., 24538., 25351., 26164., 27774., 28612., 29450., 30288., 25055., 25854., 26653., 27452., 29048., 29872., 30696., 31520., 22601., 23442., 24283., 25124., 26762., 27628., 28494., 29360., 22907., 23734., 24561., 25388., 27012., 27864., 28716., 29568., 22453., 23274., 24095., 24916., 26534., 27380., 28226., 29072., 21223., 22030., 22837., 23644., 25248., 26080., 26912., 27744., 22817., 23618., 24419., 25220., 26818., 27644., 28470., 29296., 24147., 24934., 25721., 26508., 28092., 28904., 29716., 30528., 20605., 21370., 22135., 22900., 24462., 25252., 26042., 26832., 21999., 22814., 23629., 24444., 26056., 26896., 27736., 28576., 18921., 19666., 20411., 21156., 22698., 23468., 24238., 25008., 20315., 21110., 21905., 22700., 24292., 25112., 25932., 26752., 21845., 22570., 23295., 24020., 25542., 26292., 27042., 27792., 23239., 24014., 24789., 25564., 27136., 27936., 28736., 29536.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6285.,  6828.,  7389.,  7968.,  8476.,  9200.,  9948., 10720., 10123., 11028., 11963., 12928., 10103., 11004., 11935., 12896.,  7980.,  8688.,  9420., 10176.,  6033.,  6548.,  7081.,  7632.,  7796.,  8480.,  9188.,  9920., 10672., 11584., 12528., 13504., 15884., 17024., 18204., 19424., 17724., 18880., 20076., 21312., 14896., 15808., 16752., 17728., 12228., 12896., 13588., 14304., 15223., 16060., 16927., 17824., 20404., 21520., 22676., 23872., 22433., 23828., 25273., 26768., 21637., 23068., 24549., 26080., 16036., 17168., 18340., 19552., 10755., 11588., 12451., 13344., 12799., 13740., 14711., 15712., 15572., 16784., 18036., 19328., 18041., 19524., 21057., 22640., 17181., 18636., 20141., 21696., 12484., 13584., 14724., 15904.,  9163.,  9972., 10811., 11680., 12039., 12956., 13903., 14880., 15476., 16656., 17876., 19136., 21457., 22900., 24393., 25936., 23157., 24572., 26037., 27552., 15076., 16144., 17252., 18400., 11155., 11940., 12755., 13600., 10916., 11584., 12276., 12992., 12272., 13120., 14000., 14912., 14812., 15904., 17036., 18208., 14028., 15136., 16284., 17472.,  9328., 10176., 11056., 11968.,  7348.,  8000.,  8676.,  9376.,  8549.,  9148.,  9765., 10400.,  9980., 10736., 11516., 12320., 11539., 12452., 13395., 14368., 11679., 12588., 13527., 14496.,  8140.,  8816.,  9516., 10240.,  5961.,  6468.,  6993.,  7536.,  9909., 10428., 10965., 11520., 13372., 14064., 14780., 15520., 16899., 17828., 18787., 19776., 18735., 19724., 20743., 21792., 14924., 15728., 16556., 17408., 11257., 11876., 12513., 13168., 10772., 11552., 12356., 13184., 14384., 15424., 16496., 17600., 17388., 18688., 20028., 21408., 17948., 19264., 20620., 22016., 14000., 15040., 16112., 17216., 10340., 11104., 11892., 12704.,  9583., 10444., 11335., 12256., 12820., 13968., 15156., 16384., 18249., 19684., 21169., 22704., 20269., 21740., 23261., 24832., 16516., 17680., 18884., 20128., 13115., 13972., 14859., 15776., 15223., 16060., 16927., 17824., 20404., 21520., 22676., 23872., 22433., 23828., 25273., 26768., 21637., 23068., 24549., 26080., 16036., 17168., 18340., 19552., 10755., 11588., 12451., 13344., 12799., 13740., 14711., 15712., 15572., 16784., 18036., 19328., 18041., 19524., 21057., 22640., 17181., 18636., 20141., 21696., 12484., 13584., 14724., 15904.,  9163.,  9972., 10811., 11680., 10180., 10944., 11732., 12544., 12912., 13888., 14896., 15936., 18172., 19360., 20588., 21856., 19372., 20512., 21692., 22912., 12144., 12992., 13872., 14784.,  9044.,  9664., 10308., 10976., 10317., 10892., 11485., 12096., 11548., 12272., 13020., 13792., 12939., 13812., 14715., 15648., 11799., 12668., 13567., 14496.,  7276.,  7920.,  8588.,  9280.,  5361.,  5844.,  6345.,  6864.,  5085.,  5580.,  6093.,  6624.,  7004.,  7664.,  8348.,  9056., 11579., 12468., 13387., 14336., 13415., 14364., 15343., 16352., 11244., 12016., 12812., 13632.,  9185.,  9780., 10393., 11024., 12020., 12704., 13412., 14144., 16304., 17216., 18160., 19136., 20684., 21888., 23132., 24416., 23100., 24384., 25708., 27072., 18352., 19392., 20464., 21568., 13764., 14560., 15380., 16224., 11623., 12508., 13423., 14368., 15476., 16656., 17876., 19136., 18673., 20148., 21673., 23248., 19413., 20924., 22485., 24096., 14948., 16144., 17380., 18656., 10867., 11748., 12659., 13600.,  9583., 10444., 11335., 12256., 12820., 13968., 15156., 16384., 18249., 19684., 21169., 22704., 20269., 21740., 23261., 24832., 16516., 17680., 18884., 20128., 13115., 13972., 14859., 15776., 15223., 16060., 16927., 17824., 20404., 21520., 22676., 23872., 22433., 23828., 25273., 26768., 21637., 23068., 24549., 26080., 16036., 17168., 18340., 19552., 10755., 11588., 12451., 13344.,  9572., 10304., 11060., 11840., 12656., 13632., 14640., 15680., 15324., 16544., 17804., 19104., 15308., 16544., 17820., 19136., 11760., 12736., 13744., 14784.,  8564.,  9280., 10020., 10784.,  9333.,  9948., 10581., 11232., 12476., 13296., 14140., 15008., 14467., 15428., 16419., 17440., 15375., 16332., 17319., 18336., 11916., 12656., 13420., 14208.,  8665.,  9188.,  9729., 10288.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22433., 23828., 25273., 26768., 21637., 23068., 24549., 26080., 18041., 19524., 21057., 22640., 17181., 18636., 20141., 21696., 21457., 22900., 24393., 25936., 23157., 24572., 26037., 27552., 18249., 19684., 21169., 22704., 20269., 21740., 23261., 24832., 22433., 23828., 25273., 26768., 21637., 23068., 24549., 26080., 18041., 19524., 21057., 22640., 17181., 18636., 20141., 21696., 18673., 20148., 21673., 23248., 19413., 20924., 22485., 24096., 18249., 19684., 21169., 22704., 20269., 21740., 23261., 24832., 22433., 23828., 25273., 26768., 21637., 23068., 24549., 26080.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7701.,  7962.,  8522.,  8792.,  9379.,  9658., 10272., 10560., 10884., 11256., 12000., 12384., 13164., 13560., 14376., 14784., 15271., 15702., 16618., 17064., 18025., 18486., 19492., 19968., 13443., 13870., 14782., 15224., 16181., 16638., 17640., 18112.,  9668., 10008., 10752., 11104., 11884., 12248., 13064., 13440.,  6193.,  6434.,  6958.,  7208.,  7759.,  8018.,  8596.,  8864.,  7740.,  8040.,  8712.,  9024.,  9732., 10056., 10800., 11136., 10224., 10656., 11584., 12032., 13008., 13472., 14496., 14976., 14036., 14552., 15720., 16256., 17484., 18040., 19328., 19904., 15396., 15928., 17112., 17664., 18908., 19480., 20784., 21376., 14384., 14816., 15808., 16256., 17296., 17760., 18848., 19328., 12364., 12680., 13432., 13760., 14548., 14888., 15712., 16064., 13267., 13678., 14542., 14968., 15877., 16318., 17272., 17728., 18780., 19368., 20544., 21152., 22388., 23016., 24312., 24960., 21297., 22018., 23486., 24232., 25775., 26546., 28164., 28960., 21461., 22218., 23722., 24504., 26083., 26890., 28544., 29376., 19548., 20168., 21408., 22048., 23348., 24008., 25368., 26048., 15415., 15878., 16810., 17288., 18265., 18758., 19780., 20288., 15483., 15998., 16966., 17496., 18509., 19054., 20112., 20672., 18748., 19432., 20704., 21408., 22740., 23464., 24856., 25600., 23177., 23986., 25542., 26376., 28007., 28866., 30572., 31456., 23277., 24058., 25586., 26392., 27995., 28826., 30504., 31360., 15548., 16136., 17344., 17952., 19220., 19848., 21176., 21824., 10207., 10646., 11554., 12008., 12961., 13430., 14428., 14912., 12963., 13454., 14398., 14904., 15893., 16414., 17448., 17984., 16028., 16680., 17920., 18592., 19892., 20584., 21944., 22656., 20321., 21090., 22606., 23400., 24991., 25810., 27476., 28320., 21445., 22186., 23674., 24440., 26003., 26794., 28432., 29248., 15644., 16200., 17376., 17952., 19188., 19784., 21080., 21696., 12167., 12582., 13466., 13896., 14825., 15270., 16244., 16704.,  8892.,  9224.,  9896., 10240., 10948., 11304., 12048., 12416., 10672., 11104., 11968., 12416., 13328., 13792., 14752., 15232., 13460., 14008., 15112., 15680., 16844., 17432., 18656., 19264., 13924., 14488., 15608., 16192., 17372., 17976., 19216., 19840., 11440., 11872., 12736., 13184., 14096., 14560., 15520., 16000., 10764., 11112., 11800., 12160., 12884., 13256., 14016., 14400.,  8805.,  9098.,  9674.,  9976., 10579., 10890., 11520., 11840., 13316., 13688., 14432., 14816., 15596., 15992., 16808., 17216., 13719., 14182., 15082., 15560., 16505., 16998., 17988., 18496., 12211., 12670., 13566., 14040., 14981., 15470., 16456., 16960.,  7172.,  7512.,  8192.,  8544.,  9260.,  9624., 10376., 10752.,  5313.,  5586.,  6126.,  6408.,  6975.,  7266.,  7860.,  8160.,  8829.,  9066.,  9602.,  9848., 10411., 10666., 11256., 11520., 12004., 12344., 13056., 13408., 14156., 14520., 15304., 15680., 14975., 15430., 16370., 16840., 17825., 18310., 19340., 19840., 16795., 17310., 18310., 18840., 19885., 20430., 21520., 22080., 14756., 15192., 16032., 16480., 17356., 17816., 18728., 19200., 10393., 10738., 11366., 11720., 12375., 12738., 13420., 13792., 10524., 10920., 11688., 12096., 12900., 13320., 14160., 14592., 15984., 16544., 17600., 18176., 19280., 19872., 21024., 21632., 22516., 23192., 24520., 25216., 26604., 27320., 28768., 29504., 21316., 22008., 23352., 24064., 25468., 26200., 27664., 28416., 17584., 18144., 19264., 19840., 21008., 21600., 22816., 23424., 14636., 15048., 15896., 16320., 17204., 17640., 18560., 19008., 11179., 11614., 12502., 12952., 13885., 14350., 15328., 15808., 14332., 14952., 16160., 16800., 18068., 18728., 20056., 20736., 18521., 19282., 20790., 21576., 23159., 23970., 25628., 26464., 20221., 21018., 22562., 23384., 25003., 25850., 27544., 28416., 17404., 18056., 19328., 20000., 21332., 22024., 23416., 24128., 13967., 14454., 15410., 15912., 16913., 17430., 18476., 19008., 13267., 13678., 14542., 14968., 15877., 16318., 17272., 17728., 18780., 19368., 20544., 21152., 22388., 23016., 24312., 24960., 21297., 22018., 23486., 24232., 25775., 26546., 28164., 28960., 21461., 22218., 23722., 24504., 26083., 26890., 28544., 29376., 19548., 20168., 21408., 22048., 23348., 24008., 25368., 26048., 15415., 15878., 16810., 17288., 18265., 18758., 19780., 20288., 15483., 15998., 16966., 17496., 18509., 19054., 20112., 20672., 18748., 19432., 20704., 21408., 22740., 23464., 24856., 25600., 23177., 23986., 25542., 26376., 28007., 28866., 30572., 31456., 23277., 24058., 25586., 26392., 27995., 28826., 30504., 31360., 15548., 16136., 17344., 17952., 19220., 19848., 21176., 21824., 10207., 10646., 11554., 12008., 12961., 13430., 14428., 14912., 10908., 11336., 12104., 12544., 13348., 13800., 14640., 15104., 12848., 13408., 14400., 14976., 16016., 16608., 17696., 18304., 15988., 16632., 17832., 18496., 19756., 20440., 21760., 22464., 16388., 16984., 18136., 18752., 19964., 20600., 21872., 22528.,  9904., 10336., 11200., 11648., 12560., 13024., 13984., 14464.,  8044.,  8360.,  9016.,  9344., 10036., 10376., 11104., 11456.,  7757.,  8026.,  8578.,  8856.,  9435.,  9722., 10328., 10624.,  9316.,  9656., 10368., 10720., 11468., 11832., 12616., 12992., 10927., 11350., 12210., 12648., 13553., 14006., 14956., 15424., 10955., 11374., 12230., 12664., 13565., 14014., 14960., 15424.,  9060.,  9368., 10016., 10336., 11020., 11352., 12072., 12416.,  8745.,  8994.,  9510.,  9768., 10311., 10578., 11148., 11424.,  5349.,  5562.,  6074.,  6296.,  6835.,  7066.,  7632.,  7872.,  6980.,  7288.,  7968.,  8288.,  9004.,  9336., 10088., 10432., 11031., 11446., 12346., 12776., 13721., 14166., 15156., 15616., 12851., 13326., 14286., 14776., 15781., 16286., 17336., 17856., 11012., 11416., 12224., 12640., 13484., 13912., 14792., 15232.,  8321.,  8642.,  9246.,  9576., 10207., 10546., 11204., 11552., 10044., 10344., 11016., 11328., 12036., 12360., 13104., 13440., 14320., 14752., 15680., 16128., 17104., 17568., 18592., 19072., 18452., 19032., 20264., 20864., 22156., 22776., 24128., 24768., 20900., 21560., 22872., 23552., 24924., 25624., 27056., 27776., 19120., 19680., 20800., 21376., 22544., 23136., 24352., 24960., 15308., 15752., 16632., 17088., 18004., 18472., 19424., 19904., 12163., 12622., 13534., 14008., 14965., 15454., 16456., 16960., 18076., 18728., 19968., 20640., 21940., 22632., 23992., 24704., 24961., 25762., 27310., 28136., 29759., 30610., 32308., 33184., 24101., 24938., 26522., 27384., 29043., 29930., 31664., 32576., 19356., 20040., 21344., 22048., 23412., 24136., 25560., 26304., 15591., 16102., 17082., 17608., 18633., 19174., 20244., 20800., 11179., 11614., 12502., 12952., 13885., 14350., 15328., 15808., 14332., 14952., 16160., 16800., 18068., 18728., 20056., 20736., 18521., 19282., 20790., 21576., 23159., 23970., 25628., 26464., 20221., 21018., 22562., 23384., 25003., 25850., 27544., 28416., 17404., 18056., 19328., 20000., 21332., 22024., 23416., 24128., 13967., 14454., 15410., 15912., 16913., 17430., 18476., 19008., 13267., 13678., 14542., 14968., 15877., 16318., 17272., 17728., 18780., 19368., 20544., 21152., 22388., 23016., 24312., 24960., 21297., 22018., 23486., 24232., 25775., 26546., 28164., 28960., 21461., 22218., 23722., 24504., 26083., 26890., 28544., 29376., 19548., 20168., 21408., 22048., 23348., 24008., 25368., 26048., 15415., 15878., 16810., 17288., 18265., 18758., 19780., 20288.,  9212.,  9608., 10344., 10752., 11524., 11944., 12752., 13184., 13360., 13920., 14912., 15488., 16528., 17120., 18208., 18816., 18452., 19128., 20360., 21056., 22348., 23064., 24416., 25152., 20452., 21144., 22392., 23104., 24412., 25144., 26512., 27264., 14128., 14688., 15680., 16256., 17296., 17888., 18976., 19584.,  9036.,  9448., 10200., 10624., 11412., 11848., 12672., 13120.,  9333.,  9642., 10234., 10552., 11171., 11498., 12144., 12480., 12100., 12536., 13344., 13792., 14636., 15096., 15976., 16448., 12359., 12870., 13818., 14344., 15337., 15878., 16916., 17472., 12387., 12894., 13838., 14360., 15349., 15886., 16920., 17472.,  9540.,  9944., 10688., 11104., 11884., 12312., 13128., 13568.,  7633.,  7922.,  8478.,  8776.,  9359.,  9666., 10276., 10592.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21297., 22018., 23486., 24232., 25775., 26546., 28164., 28960., 21461., 22218., 23722., 24504., 26083., 26890., 28544., 29376., 23177., 23986., 25542., 26376., 28007., 28866., 30572., 31456., 23277., 24058., 25586., 26392., 27995., 28826., 30504., 31360., 20321., 21090., 22606., 23400., 24991., 25810., 27476., 28320., 21445., 22186., 23674., 24440., 26003., 26794., 28432., 29248., 18521., 19282., 20790., 21576., 23159., 23970., 25628., 26464., 20221., 21018., 22562., 23384., 25003., 25850., 27544., 28416., 21297., 22018., 23486., 24232., 25775., 26546., 28164., 28960., 21461., 22218., 23722., 24504., 26083., 26890., 28544., 29376., 23177., 23986., 25542., 26376., 28007., 28866., 30572., 31456., 23277., 24058., 25586., 26392., 27995., 28826., 30504., 31360., 24961., 25762., 27310., 28136., 29759., 30610., 32308., 33184., 24101., 24938., 26522., 27384., 29043., 29930., 31664., 32576., 18521., 19282., 20790., 21576., 23159., 23970., 25628., 26464., 20221., 21018., 22562., 23384., 25003., 25850., 27544., 28416., 21297., 22018., 23486., 24232., 25775., 26546., 28164., 28960., 21461., 22218., 23722., 24504., 26083., 26890., 28544., 29376.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7653.,  7914.,  8175.,  8436.,  8966.,  9236.,  9506.,  9776., 10351., 10630., 10909., 11188., 11808., 12096., 12384., 12672.,  9492.,  9864., 10236., 10608., 11328., 11712., 12096., 12480., 13260., 13656., 14052., 14448., 15288., 15696., 16104., 16512., 11935., 12366., 12797., 13228., 14102., 14548., 14994., 15440., 16389., 16850., 17311., 17772., 18796., 19272., 19748., 20224., 10331., 10758., 11185., 11612., 12482., 12924., 13366., 13808., 14753., 15210., 15667., 16124., 17144., 17616., 18088., 18560.,  6516.,  6856.,  7196.,  7536.,  8224.,  8576.,  8928.,  9280., 10028., 10392., 10756., 11120., 11928., 12304., 12680., 13056.,  4145.,  4386.,  4627.,  4868.,  5346.,  5596.,  5846.,  6096.,  6619.,  6878.,  7137.,  7396.,  7964.,  8232.,  8500.,  8768.,  8140.,  8440.,  8740.,  9040.,  9688., 10000., 10312., 10624., 11332., 11656., 11980., 12304., 13072., 13408., 13744., 14080., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200., 12516., 13032., 13548., 14064., 15160., 15696., 16232., 16768., 17964., 18520., 19076., 19632., 20928., 21504., 22080., 22656., 12404., 12936., 13468., 14000., 15112., 15664., 16216., 16768., 17980., 18552., 19124., 19696., 21008., 21600., 22192., 22784., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200.,  9564.,  9880., 10196., 10512., 11176., 11504., 11832., 12160., 12884., 13224., 13564., 13904., 14688., 15040., 15392., 15744.,  9291.,  9702., 10113., 10524., 11378., 11804., 12230., 12656., 13585., 14026., 14467., 14908., 15912., 16368., 16824., 17280., 14636., 15224., 15812., 16400., 17568., 18176., 18784., 19392., 20660., 21288., 21916., 22544., 23912., 24560., 25208., 25856., 17041., 17762., 18483., 19204., 20626., 21372., 22118., 22864., 24411., 25182., 25953., 26724., 28396., 29192., 29988., 30784., 18357., 19114., 19871., 20628., 22086., 22868., 23650., 24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640., 17868., 18488., 19108., 19728., 20928., 21568., 22208., 22848., 24148., 24808., 25468., 26128., 27528., 28208., 28888., 29568., 11423., 11886., 12349., 12812., 13686., 14164., 14642., 15120., 16069., 16562., 17055., 17548., 18572., 19080., 19588., 20096., 15155., 15670., 16185., 16700., 17658., 18188., 18718., 19248., 20281., 20826., 21371., 21916., 23024., 23584., 24144., 24704., 17036., 17720., 18404., 19088., 20352., 21056., 21760., 22464., 23828., 24552., 25276., 26000., 27464., 28208., 28952., 29696., 18665., 19474., 20283., 21092., 22602., 23436., 24270., 25104., 26739., 27598., 28457., 29316., 31076., 31960., 32844., 33728., 19917., 20698., 21479., 22260., 23742., 24548., 25354., 26160., 27767., 28598., 29429., 30260., 31992., 32848., 33704., 34560., 15020., 15608., 16196., 16784., 17952., 18560., 19168., 19776., 21044., 21672., 22300., 22928., 24296., 24944., 25592., 26240.,  9223.,  9662., 10101., 10540., 11390., 11844., 12298., 12752., 13677., 14146., 14615., 15084., 16084., 16568., 17052., 17536., 11675., 12166., 12657., 13148., 14082., 14588., 15094., 15600., 16609., 17130., 17651., 18172., 19256., 19792., 20328., 20864., 14188., 14840., 15492., 16144., 17376., 18048., 18720., 19392., 20724., 21416., 22108., 22800., 24232., 24944., 25656., 26368., 19137., 19906., 20675., 21444., 22914., 23708., 24502., 25296., 26891., 27710., 28529., 29348., 31068., 31912., 32756., 33600., 18341., 19082., 19823., 20564., 22006., 22772., 23538., 24304., 25871., 26662., 27453., 28244., 29936., 30752., 31568., 32384., 12172., 12728., 13284., 13840., 14976., 15552., 16128., 16704., 17940., 18536., 19132., 19728., 21064., 21680., 22296., 22912.,  9071.,  9486.,  9901., 10316., 11142., 11572., 12002., 12432., 13333., 13778., 14223., 14668., 15644., 16104., 16564., 17024.,  6636.,  6968.,  7300.,  7632.,  8312.,  8656.,  9000.,  9344., 10084., 10440., 10796., 11152., 11952., 12320., 12688., 13056., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200., 15620., 16168., 16716., 17264., 18392., 18960., 19528., 20096., 21324., 21912., 22500., 23088., 24416., 25024., 25632., 26240., 14484., 15048., 15612., 16176., 17320., 17904., 18488., 19072., 20316., 20920., 21524., 22128., 23472., 24096., 24720., 25344., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200.,  9084.,  9432.,  9780., 10128., 10824., 11184., 11544., 11904., 12660., 13032., 13404., 13776., 14592., 14976., 15360., 15744.,  7013.,  7306.,  7599.,  7892.,  8422.,  8724.,  9026.,  9328.,  9903., 10214., 10525., 10836., 11456., 11776., 12096., 12416., 11028., 11400., 11772., 12144., 12864., 13248., 13632., 14016., 14796., 15192., 15588., 15984., 16824., 17232., 17640., 18048., 10655., 11118., 11581., 12044., 12918., 13396., 13874., 14352., 15301., 15794., 16287., 16780., 17804., 18312., 18820., 19328.,  9947., 10406., 10865., 11324., 12194., 12668., 13142., 13616., 14561., 15050., 15539., 16028., 17048., 17552., 18056., 18560.,  8564.,  8904.,  9244.,  9584., 10272., 10624., 10976., 11328., 12076., 12440., 12804., 13168., 13976., 14352., 14728., 15104.,  6257.,  6530.,  6803.,  7076.,  7618.,  7900.,  8182.,  8464.,  9051.,  9342.,  9633.,  9924., 10556., 10856., 11156., 11456.,  5325.,  5562.,  5799.,  6036.,  6542.,  6788.,  7034.,  7280.,  7831.,  8086.,  8341.,  8596.,  9192.,  9456.,  9720.,  9984.,  8692.,  9032.,  9372.,  9712., 10400., 10752., 11104., 11456., 12204., 12568., 12932., 13296., 14104., 14480., 14856., 15232., 11319., 11774., 12229., 12684., 13582., 14052., 14522., 14992., 15965., 16450., 16935., 17420., 18468., 18968., 19468., 19968., 12851., 13366., 13881., 14396., 15354., 15884., 16414., 16944., 17977., 18522., 19067., 19612., 20720., 21280., 21840., 22400., 10964., 11400., 11836., 12272., 13056., 13504., 13952., 14400., 15244., 15704., 16164., 16624., 17528., 18000., 18472., 18944.,  7833.,  8178.,  8523.,  8868.,  9450.,  9804., 10158., 10512., 11139., 11502., 11865., 12228., 12900., 13272., 13644., 14016., 10540., 10936., 11332., 11728., 12472., 12880., 13288., 13696., 14500., 14920., 15340., 15760., 16624., 17056., 17488., 17920., 14000., 14560., 15120., 15680., 16704., 17280., 17856., 18432., 19536., 20128., 20720., 21312., 22496., 23104., 23712., 24320., 17540., 18216., 18892., 19568., 20824., 21520., 22216., 22912., 24268., 24984., 25700., 26416., 27872., 28608., 29344., 30080., 16404., 17096., 17788., 18480., 19752., 20464., 21176., 21888., 23260., 23992., 24724., 25456., 26928., 27680., 28432., 29184., 11952., 12512., 13072., 13632., 14656., 15232., 15808., 16384., 17488., 18080., 18672., 19264., 20448., 21056., 21664., 22272.,  9916., 10328., 10740., 11152., 11912., 12336., 12760., 13184., 14004., 14440., 14876., 15312., 16192., 16640., 17088., 17536., 11747., 12182., 12617., 13052., 13930., 14380., 14830., 15280., 16233., 16698., 17163., 17628., 18656., 19136., 19616., 20096., 15436., 16056., 16676., 17296., 18496., 19136., 19776., 20416., 21716., 22376., 23036., 23696., 25096., 25776., 26456., 27136., 17593., 18354., 19115., 19876., 21338., 22124., 22910., 23696., 25283., 26094., 26905., 27716., 29428., 30264., 31100., 31936., 17885., 18682., 19479., 20276., 21774., 22596., 23418., 24240., 25863., 26710., 27557., 28404., 30152., 31024., 31896., 32768., 16620., 17272., 17924., 18576., 19808., 20480., 21152., 21824., 23156., 23848., 24540., 25232., 26664., 27376., 28088., 28800., 12599., 13086., 13573., 14060., 14958., 15460., 15962., 16464., 17437., 17954., 18471., 18988., 20036., 20568., 21100., 21632.,  9291.,  9702., 10113., 10524., 11378., 11804., 12230., 12656., 13585., 14026., 14467., 14908., 15912., 16368., 16824., 17280., 14636., 15224., 15812., 16400., 17568., 18176., 18784., 19392., 20660., 21288., 21916., 22544., 23912., 24560., 25208., 25856., 17041., 17762., 18483., 19204., 20626., 21372., 22118., 22864., 24411., 25182., 25953., 26724., 28396., 29192., 29988., 30784., 18357., 19114., 19871., 20628., 22086., 22868., 23650., 24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640., 17868., 18488., 19108., 19728., 20928., 21568., 22208., 22848., 24148., 24808., 25468., 26128., 27528., 28208., 28888., 29568., 11423., 11886., 12349., 12812., 13686., 14164., 14642., 15120., 16069., 16562., 17055., 17548., 18572., 19080., 19588., 20096., 15155., 15670., 16185., 16700., 17658., 18188., 18718., 19248., 20281., 20826., 21371., 21916., 23024., 23584., 24144., 24704., 17036., 17720., 18404., 19088., 20352., 21056., 21760., 22464., 23828., 24552., 25276., 26000., 27464., 28208., 28952., 29696., 18665., 19474., 20283., 21092., 22602., 23436., 24270., 25104., 26739., 27598., 28457., 29316., 31076., 31960., 32844., 33728., 19917., 20698., 21479., 22260., 23742., 24548., 25354., 26160., 27767., 28598., 29429., 30260., 31992., 32848., 33704., 34560., 15020., 15608., 16196., 16784., 17952., 18560., 19168., 19776., 21044., 21672., 22300., 22928., 24296., 24944., 25592., 26240.,  9223.,  9662., 10101., 10540., 11390., 11844., 12298., 12752., 13677., 14146., 14615., 15084., 16084., 16568., 17052., 17536., 10060., 10488., 10916., 11344., 12120., 12560., 13000., 13440., 14276., 14728., 15180., 15632., 16528., 16992., 17456., 17920., 11952., 12512., 13072., 13632., 14656., 15232., 15808., 16384., 17488., 18080., 18672., 19264., 20448., 21056., 21664., 22272., 16484., 17128., 17772., 18416., 19640., 20304., 20968., 21632., 22956., 23640., 24324., 25008., 26432., 27136., 27840., 28544., 15284., 15880., 16476., 17072., 18248., 18864., 19480., 20096., 21372., 22008., 22644., 23280., 24656., 25312., 25968., 26624.,  8752.,  9184.,  9616., 10048., 10944., 11392., 11840., 12288., 13264., 13728., 14192., 14656., 15712., 16192., 16672., 17152.,  7260.,  7576.,  7892.,  8208.,  8872.,  9200.,  9528.,  9856., 10580., 10920., 11260., 11600., 12384., 12736., 13088., 13440.,  4429.,  4698.,  4967.,  5236.,  5742.,  6020.,  6298.,  6576.,  7127.,  7414.,  7701.,  7988.,  8584.,  8880.,  9176.,  9472.,  8180.,  8520.,  8860.,  9200.,  9888., 10240., 10592., 10944., 11692., 12056., 12420., 12784., 13592., 13968., 14344., 14720., 11767., 12190., 12613., 13036., 13870., 14308., 14746., 15184., 16093., 16546., 16999., 17452., 18436., 18904., 19372., 19840., 10035., 10454., 10873., 11292., 12122., 12556., 12990., 13424., 14329., 14778., 15227., 15676., 16656., 17120., 17584., 18048.,  7764.,  8072.,  8380.,  8688.,  9344.,  9664.,  9984., 10304., 11020., 11352., 11684., 12016., 12792., 13136., 13480., 13824.,  7001.,  7250.,  7499.,  7748.,  8266.,  8524.,  8782.,  9040.,  9603.,  9870., 10137., 10404., 11012., 11288., 11564., 11840.,  6069.,  6282.,  6495.,  6708.,  7190.,  7412.,  7634.,  7856.,  8383.,  8614.,  8845.,  9076.,  9648.,  9888., 10128., 10368.,  7892.,  8200.,  8508.,  8816.,  9472.,  9792., 10112., 10432., 11148., 11480., 11812., 12144., 12920., 13264., 13608., 13952., 11663., 12078., 12493., 12908., 13766., 14196., 14626., 15056., 15989., 16434., 16879., 17324., 18332., 18792., 19252., 19712., 13195., 13670., 14145., 14620., 15538., 16028., 16518., 17008., 18001., 18506., 19011., 19516., 20584., 21104., 21624., 22144., 10164., 10568., 10972., 11376., 12128., 12544., 12960., 13376., 14188., 14616., 15044., 15472., 16344., 16784., 17224., 17664.,  7297.,  7618.,  7939.,  8260.,  8818.,  9148.,  9478.,  9808., 10411., 10750., 11089., 11428., 12076., 12424., 12772., 13120.,  6604.,  6904.,  7204.,  7504.,  8152.,  8464.,  8776.,  9088.,  9796., 10120., 10444., 10768., 11536., 11872., 12208., 12544., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200., 14116., 14696., 15276., 15856., 17016., 17616., 18216., 18816., 20076., 20696., 21316., 21936., 23296., 23936., 24576., 25216., 16116., 16776., 17436., 18096., 19336., 20016., 20696., 21376., 22716., 23416., 24116., 24816., 26256., 26976., 27696., 28416., 14000., 14560., 15120., 15680., 16704., 17280., 17856., 18432., 19536., 20128., 20720., 21312., 22496., 23104., 23712., 24320., 11228., 11672., 12116., 12560., 13352., 13808., 14264., 14720., 15572., 16040., 16508., 16976., 17888., 18368., 18848., 19328., 12155., 12614., 13073., 13532., 14434., 14908., 15382., 15856., 16833., 17322., 17811., 18300., 19352., 19856., 20360., 20864., 16236., 16888., 17540., 18192., 19424., 20096., 20768., 21440., 22772., 23464., 24156., 24848., 26280., 26992., 27704., 28416., 20193., 20994., 21795., 22596., 24098., 24924., 25750., 26576., 28203., 29054., 29905., 30756., 32508., 33384., 34260., 35136., 19461., 20298., 21135., 21972., 23510., 24372., 25234., 26096., 27759., 28646., 29533., 30420., 32208., 33120., 34032., 34944., 15372., 16056., 16740., 17424., 18688., 19392., 20096., 20800., 22164., 22888., 23612., 24336., 25800., 26544., 27288., 28032., 11727., 12238., 12749., 13260., 14182., 14708., 15234., 15760., 16757., 17298., 17839., 18380., 19452., 20008., 20564., 21120., 11747., 12182., 12617., 13052., 13930., 14380., 14830., 15280., 16233., 16698., 17163., 17628., 18656., 19136., 19616., 20096., 15436., 16056., 16676., 17296., 18496., 19136., 19776., 20416., 21716., 22376., 23036., 23696., 25096., 25776., 26456., 27136., 17593., 18354., 19115., 19876., 21338., 22124., 22910., 23696., 25283., 26094., 26905., 27716., 29428., 30264., 31100., 31936., 17885., 18682., 19479., 20276., 21774., 22596., 23418., 24240., 25863., 26710., 27557., 28404., 30152., 31024., 31896., 32768., 16620., 17272., 17924., 18576., 19808., 20480., 21152., 21824., 23156., 23848., 24540., 25232., 26664., 27376., 28088., 28800., 12599., 13086., 13573., 14060., 14958., 15460., 15962., 16464., 17437., 17954., 18471., 18988., 20036., 20568., 21100., 21632.,  9291.,  9702., 10113., 10524., 11378., 11804., 12230., 12656., 13585., 14026., 14467., 14908., 15912., 16368., 16824., 17280., 14636., 15224., 15812., 16400., 17568., 18176., 18784., 19392., 20660., 21288., 21916., 22544., 23912., 24560., 25208., 25856., 17041., 17762., 18483., 19204., 20626., 21372., 22118., 22864., 24411., 25182., 25953., 26724., 28396., 29192., 29988., 30784., 18357., 19114., 19871., 20628., 22086., 22868., 23650., 24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640., 17868., 18488., 19108., 19728., 20928., 21568., 22208., 22848., 24148., 24808., 25468., 26128., 27528., 28208., 28888., 29568., 11423., 11886., 12349., 12812., 13686., 14164., 14642., 15120., 16069., 16562., 17055., 17548., 18572., 19080., 19588., 20096., 10284., 10680., 11076., 11472., 12216., 12624., 13032., 13440., 14244., 14664., 15084., 15504., 16368., 16800., 17232., 17664., 14000., 14560., 15120., 15680., 16704., 17280., 17856., 18432., 19536., 20128., 20720., 21312., 22496., 23104., 23712., 24320., 17284., 17960., 18636., 19312., 20568., 21264., 21960., 22656., 24012., 24728., 25444., 26160., 27616., 28352., 29088., 29824., 19220., 19912., 20604., 21296., 22568., 23280., 23992., 24704., 26076., 26808., 27540., 28272., 29744., 30496., 31248., 32000., 14000., 14560., 15120., 15680., 16704., 17280., 17856., 18432., 19536., 20128., 20720., 21312., 22496., 23104., 23712., 24320.,  8636.,  9048.,  9460.,  9872., 10632., 11056., 11480., 11904., 12724., 13160., 13596., 14032., 14912., 15360., 15808., 16256.,  7029.,  7338.,  7647.,  7956.,  8502.,  8820.,  9138.,  9456., 10047., 10374., 10701., 11028., 11664., 12000., 12336., 12672., 10580., 11016., 11452., 11888., 12672., 13120., 13568., 14016., 14860., 15320., 15780., 16240., 17144., 17616., 18088., 18560., 13007., 13518., 14029., 14540., 15462., 15988., 16514., 17040., 18037., 18578., 19119., 19660., 20732., 21288., 21844., 22400., 11275., 11782., 12289., 12796., 13714., 14236., 14758., 15280., 16273., 16810., 17347., 17884., 18952., 19504., 20056., 20608.,  8116.,  8520.,  8924.,  9328., 10080., 10496., 10912., 11328., 12140., 12568., 12996., 13424., 14296., 14736., 15176., 15616.,  6785.,  7074.,  7363.,  7652.,  8210.,  8508.,  8806.,  9104.,  9707., 10014., 10321., 10628., 11276., 11592., 11908., 12224.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17041., 17762., 18483., 19204., 20626., 21372., 22118., 22864., 24411., 25182., 25953., 26724., 28396., 29192., 29988., 30784., 18357., 19114., 19871., 20628., 22086., 22868., 23650., 24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640., 18665., 19474., 20283., 21092., 22602., 23436., 24270., 25104., 26739., 27598., 28457., 29316., 31076., 31960., 32844., 33728., 19917., 20698., 21479., 22260., 23742., 24548., 25354., 26160., 27767., 28598., 29429., 30260., 31992., 32848., 33704., 34560., 19137., 19906., 20675., 21444., 22914., 23708., 24502., 25296., 26891., 27710., 28529., 29348., 31068., 31912., 32756., 33600., 18341., 19082., 19823., 20564., 22006., 22772., 23538., 24304., 25871., 26662., 27453., 28244., 29936., 30752., 31568., 32384., 17593., 18354., 19115., 19876., 21338., 22124., 22910., 23696., 25283., 26094., 26905., 27716., 29428., 30264., 31100., 31936., 17885., 18682., 19479., 20276., 21774., 22596., 23418., 24240., 25863., 26710., 27557., 28404., 30152., 31024., 31896., 32768., 17041., 17762., 18483., 19204., 20626., 21372., 22118., 22864., 24411., 25182., 25953., 26724., 28396., 29192., 29988., 30784., 18357., 19114., 19871., 20628., 22086., 22868., 23650., 24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640., 18665., 19474., 20283., 21092., 22602., 23436., 24270., 25104., 26739., 27598., 28457., 29316., 31076., 31960., 32844., 33728., 19917., 20698., 21479., 22260., 23742., 24548., 25354., 26160., 27767., 28598., 29429., 30260., 31992., 32848., 33704., 34560., 20193., 20994., 21795., 22596., 24098., 24924., 25750., 26576., 28203., 29054., 29905., 30756., 32508., 33384., 34260., 35136., 19461., 20298., 21135., 21972., 23510., 24372., 25234., 26096., 27759., 28646., 29533., 30420., 32208., 33120., 34032., 34944., 17593., 18354., 19115., 19876., 21338., 22124., 22910., 23696., 25283., 26094., 26905., 27716., 29428., 30264., 31100., 31936., 17885., 18682., 19479., 20276., 21774., 22596., 23418., 24240., 25863., 26710., 27557., 28404., 30152., 31024., 31896., 32768., 17041., 17762., 18483., 19204., 20626., 21372., 22118., 22864., 24411., 25182., 25953., 26724., 28396., 29192., 29988., 30784., 18357., 19114., 19871., 20628., 22086., 22868., 23650., 24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640.};
  const std::array<int, 4> in_shape = {{ 3, 7, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1755.,  2404.,  3080.,  3350.,  3620.,  2920.,  2205.,  3008.,  4048.,  5100.,  5410.,  5720.,  4560.,  3404.,  4420.,  5880.,  7325.,  7650.,  7975.,  6300.,  4660.,  5890.,  7770.,  9600.,  9925., 10250.,  8050.,  5920.,  7360.,  9660., 11875., 12200., 12525.,  9800.,  7180.,  5156.,  6704.,  8160.,  8370.,  8580.,  6640.,  4808.,  3213.,  4120.,  4940.,  5060.,  5180.,  3940.,  2799., 10134., 13282., 16310., 16580., 16850., 13210.,  9702., 12710., 16592., 20290., 20600., 20910., 16320., 11930., 14710., 19110., 23250., 23575., 23900., 18550., 13480., 16180., 21000., 25525., 25850., 26175., 20300., 14740., 17650., 22890., 27800., 28125., 28450., 22050., 16000., 11918., 15328., 18450., 18660., 18870., 14480., 10394.,  7182.,  9118., 10820., 10940., 11060.,  8350.,  5886., 18513., 24160., 29540., 29810., 30080., 23500., 17199., 22412., 29136., 35480., 35790., 36100., 28080., 20456., 25000., 32340., 39175., 39500., 39825., 30800., 22300., 26470., 34230., 41450., 41775., 42100., 32550., 23560., 27940., 36120., 43725., 44050., 44375., 34300., 24820., 18680., 23952., 28740., 28950., 29160., 22320., 15980., 11151., 14116., 16700., 16820., 16940., 12760.,  8973.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7325.,  7650.,  7975.,  9600.,  9925., 10250., 11875., 12200., 12525., 23250., 23575., 23900., 25525., 25850., 26175., 27800., 28125., 28450., 39175., 39500., 39825., 41450., 41775., 42100., 43725., 44050., 44375.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3429.,  3510.,  4694.,  4808.,  6010.,  6160.,  6535.,  6700.,  7060.,  7240.,  5690.,  5840.,  4293.,  4410.,  5866.,  6016.,  7888.,  8096.,  9930., 10200., 10530., 10820., 11130., 11440.,  8864.,  9120.,  6610.,  6808.,  8600.,  8840., 11430., 11760., 14225., 14650., 14850., 15300., 15475., 15950., 12210., 12600.,  9020.,  9320., 11435., 11780., 15070., 15540., 18600., 19200., 19225., 19850., 19850., 20500., 15570., 16100., 11435., 11840., 14270., 14720., 18710., 19320., 22975., 23750., 23600., 24400., 24225., 25050., 18930., 19600., 13850., 14360.,  9910., 10312., 12864., 13408., 15630., 16320., 16030., 16740., 16430., 17160., 12688., 13280.,  9166.,  9616.,  6093.,  6426.,  7790.,  8240.,  9310.,  9880.,  9535., 10120.,  9760., 10360.,  7394.,  7880.,  5229.,  5598., 13602., 13996., 16838., 17348., 19959., 20588., 17860., 18440., 18385., 18980., 14418., 14900., 10590., 10956., 10794., 11212., 13312., 13856., 15714., 16388., 14330., 14960., 14930., 15580., 11632., 12160.,  8482.,  8884.,  8733.,  9196., 10734., 11340., 12594., 13348., 11875., 12590., 12500., 13240.,  9618., 10220.,  6917.,  7376.,  7664.,  8040.,  9638., 10128., 11529., 12138., 11450., 12020., 12075., 12670.,  9394.,  9880.,  6836.,  7208.,  8515.,  8804., 11102., 11476., 13664., 14128., 14225., 14650., 14850., 15300., 11730., 12100.,  8675.,  8960.,  5950.,  6172.,  7824.,  8128.,  9630., 10020., 10030., 10440., 10430., 10860.,  8128.,  8480.,  5926.,  6196.,  3798.,  3996.,  4910.,  5180.,  5935.,  6280.,  6160.,  6520.,  6385.,  6760.,  4874.,  5180.,  3474.,  3708., 14751., 15138., 19382., 19904., 23860., 24520., 24385., 25060., 24910., 25600., 19562., 20120., 14391., 14814., 18922., 19480., 24752., 25504., 30330., 31280., 30930., 31900., 31530., 32520., 24640., 25440., 18034., 18640., 19234., 19920., 22966., 23848., 26451., 27534., 24324., 25368., 22325., 23330., 17266., 18080., 12494., 13112., 13685., 14284., 16110., 16876., 18346., 19284., 16859., 17758., 15500., 16360., 11922., 12620.,  8573.,  9104., 10056., 10568., 11814., 12464., 13441., 14234., 12594., 13348., 11875., 12590.,  9138.,  9720.,  6572.,  7016.,  5382.,  5744.,  6112.,  6560.,  6766.,  7304.,  6334.,  6828.,  6030.,  6480.,  4592.,  4960.,  3262.,  3544.,  2271.,  2462.,  2542.,  2760.,  2816.,  3064.,  2849.,  3048.,  3010.,  3160.,  2354.,  2480.,  1719.,  1818.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14225., 14650., 14850., 15300., 15475., 15950., 18600., 19200., 19225., 19850., 19850., 20500., 22975., 23750., 23600., 24400., 24225., 25050., 44850., 46500., 45475., 47150., 46100., 47800., 49225., 51050., 49850., 51700., 50475., 52350., 53600., 55600., 54225., 56250., 54850., 56900., 57427., 59918., 52548., 54936., 47925., 50210., 36842., 38868., 33243., 35166., 29900., 31720., 22657., 24218., 20338., 21796., 18275., 19630.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1977.,  2058.,  2139.,  2220.,  2618.,  2732.,  2846.,  2960.,  3742.,  3892.,  4042.,  4192.,  4201.,  4366.,  4531.,  4696.,  4660.,  4840.,  5020.,  5200.,  3742.,  3892.,  4042.,  4192.,  2901.,  3018.,  3135.,  3252.,  4094.,  4244.,  4394.,  4544.,  5328.,  5536.,  5744.,  5952.,  7430.,  7700.,  7970.,  8240.,  8034.,  8324.,  8614.,  8904.,  8638.,  8948.,  9258.,  9568.,  6848.,  7104.,  7360.,  7616.,  5214.,  5412.,  5610.,  5808.,  6784.,  7024.,  7264.,  7504.,  8706.,  9036.,  9366.,  9696., 11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832., 13131., 13606., 14081., 14556., 10270., 10660., 11050., 11440.,  7692.,  7992.,  8292.,  8592.,  9661., 10006., 10351., 10696., 12262., 12732., 13202., 13672., 16376., 16976., 17576., 18176., 17025., 17650., 18275., 18900., 17674., 18324., 18974., 19624., 13714., 14244., 14774., 15304., 10177., 10582., 10987., 11392., 12538., 12988., 13438., 13888., 15818., 16428., 17038., 17648., 20919., 21694., 22469., 23244., 21568., 22368., 23168., 23968., 22217., 23042., 23867., 24692., 17158., 17828., 18498., 19168., 12662., 13172., 13682., 14192., 10970., 11372., 11774., 12176., 13792., 14336., 14880., 15424., 18922., 19612., 20302., 20992., 19446., 20156., 20866., 21576., 19970., 20700., 21430., 22160., 15568., 16160., 16752., 17344., 11674., 12124., 12574., 13024., 11853., 12186., 12519., 12852., 15130., 15580., 16030., 16480., 18050., 18620., 19190., 19760., 18485., 19070., 19655., 20240., 18920., 19520., 20120., 20720., 14302., 14788., 15274., 15760., 10089., 10458., 10827., 11196., 11386., 11780., 12174., 12568., 13710., 14220., 14730., 15240., 19321., 19950., 20579., 21208., 18692., 19272., 19852., 20432., 19151., 19746., 20341., 20936., 15298., 15780., 16262., 16744., 11854., 12220., 12586., 12952., 15346., 15764., 16182., 16600., 19424., 19968., 20512., 21056., 27234., 27908., 28582., 29256., 23934., 24564., 25194., 25824., 24538., 25188., 25838., 26488., 18832., 19360., 19888., 20416., 13554., 13956., 14358., 14760., 12587., 13050., 13513., 13976., 14718., 15324., 15930., 16536., 16882., 17636., 18390., 19144., 14907., 15622., 16337., 17052., 15556., 16296., 17036., 17776., 11594., 12196., 12798., 13400.,  8127.,  8586.,  9045.,  9504.,  7848.,  8224.,  8600.,  8976.,  9058.,  9548., 10038., 10528., 10865., 11474., 12083., 12692., 10170., 10740., 11310., 11880., 10819., 11414., 12009., 12604.,  8126.,  8612.,  9098.,  9584.,  5812.,  6184.,  6556.,  6928.,  6949.,  7238.,  7527.,  7816.,  8518.,  8892.,  9266.,  9640., 11248., 11712., 12176., 12640., 11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832.,  9778., 10148., 10518., 10888.,  7337.,  7622.,  7907.,  8192.,  6110.,  6332.,  6554.,  6776.,  7792.,  8096.,  8400.,  8704., 11062., 11452., 11842., 12232., 11586., 11996., 12406., 12816., 12110., 12540., 12970., 13400.,  9568.,  9920., 10272., 10624.,  7294.,  7564.,  7834.,  8104.,  7398.,  7596.,  7794.,  7992.,  9550.,  9820., 10090., 10360., 11525., 11870., 12215., 12560., 11960., 12320., 12680., 13040., 12395., 12770., 13145., 13520.,  9442.,  9748., 10054., 10360.,  6714.,  6948.,  7182.,  7416., 11259., 11646., 12033., 12420., 14178., 14700., 15222., 15744., 19348., 20008., 20668., 21328., 19807., 20482., 21157., 21832., 20266., 20956., 21646., 22336., 15846., 16404., 16962., 17520., 11911., 12334., 12757., 13180., 16742., 17300., 17858., 18416., 21104., 21856., 22608., 23360., 27966., 28916., 29866., 30816., 28570., 29540., 30510., 31480., 29174., 30164., 31154., 32144., 22624., 23424., 24224., 25024., 16774., 17380., 17986., 18592., 18646., 19332., 20018., 20704., 22010., 22892., 23774., 24656., 28331., 29414., 30497., 31580., 27636., 28680., 29724., 30768., 27197., 28202., 29207., 30212., 21110., 21924., 22738., 23552., 15730., 16348., 16966., 17584., 17235., 17834., 18433., 19032., 21214., 21980., 22746., 23512., 28714., 29652., 30590., 31528., 29299., 30198., 31097., 31996., 26044., 26904., 27764., 28624., 19690., 20388., 21086., 21784., 13927., 14458., 14989., 15520., 15568., 16080., 16592., 17104., 17346., 17996., 18646., 19296., 19113., 19906., 20699., 21492., 16882., 17636., 18390., 19144., 14907., 15622., 16337., 17052., 11102., 11684., 12266., 12848.,  7772.,  8216.,  8660.,  9104.,  7714.,  8076.,  8438.,  8800.,  8064.,  8512.,  8960.,  9408.,  9026.,  9564., 10102., 10640.,  7950.,  8444.,  8938.,  9432.,  7130.,  7580.,  8030.,  8480.,  5360.,  5728.,  6096.,  6464.,  3874.,  4156.,  4438.,  4720.,  4351.,  4542.,  4733.,  4924.,  4866.,  5084.,  5302.,  5520.,  5384.,  5632.,  5880.,  6128.,  5499.,  5698.,  5897.,  6096.,  5870.,  6020.,  6170.,  6320.,  4582.,  4708.,  4834.,  4960.,  3339.,  3438.,  3537.,  3636.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832., 13131., 13606., 14081., 14556., 16376., 16976., 17576., 18176., 17025., 17650., 18275., 18900., 17674., 18324., 18974., 19624., 20919., 21694., 22469., 23244., 21568., 22368., 23168., 23968., 22217., 23042., 23867., 24692., 16882., 17636., 18390., 19144., 14907., 15622., 16337., 17052., 15556., 16296., 17036., 17776., 10865., 11474., 12083., 12692., 10170., 10740., 11310., 11880., 10819., 11414., 12009., 12604., 11248., 11712., 12176., 12640., 11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832., 28331., 29414., 30497., 31580., 27636., 28680., 29724., 30768., 27197., 28202., 29207., 30212., 28714., 29652., 30590., 31528., 29299., 30198., 31097., 31996., 26044., 26904., 27764., 28624., 19113., 19906., 20699., 21492., 16882., 17636., 18390., 19144., 14907., 15622., 16337., 17052.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6525.,  7020.,  8956.,  9616., 11495., 12320., 12545., 13400., 13595., 14480., 10972., 11680.,  8289.,  8820., 11348., 12032., 15280., 16192., 19260., 20400., 20460., 21640., 21660., 22880., 17264., 18240., 12884., 13616., 16795., 17680., 22340., 23520., 27825., 29300., 29075., 30600., 30325., 31900., 23940., 25200., 17695., 18640., 22465., 23560., 29620., 31080., 36575., 38400., 37825., 39700., 39075., 41000., 30660., 32200., 22525., 23680., 28135., 29440., 36900., 38640., 45325., 47500., 46575., 48800., 47825., 50100., 37380., 39200., 27355., 28720., 19556., 20624., 25392., 26816., 30860., 32640., 31660., 33480., 32460., 34320., 25072., 26560., 18116., 19232., 12033., 12852., 15388., 16480., 18395., 19760., 18845., 20240., 19295., 20720., 14620., 15760., 10341., 11196., 26871., 27992., 33244., 34696., 39393., 41176., 35195., 36880., 36245., 37960., 28428., 29800., 20883., 21912., 21204., 22424., 26128., 27712., 30828., 32776., 28060., 29920., 29260., 31160., 22800., 24320., 16628., 17768., 17061., 18392., 20948., 22680., 24563., 26696., 23125., 25180., 24375., 26480., 18756., 20440., 13489., 14752., 14923., 16080., 18756., 20256., 22433., 24276., 22275., 24040., 23525., 25340., 18308., 19760., 13327., 14416., 16625., 17608., 21684., 22952., 26703., 28256., 27825., 29300., 29075., 30600., 22980., 24200., 17005., 17920., 11636., 12344., 15312., 16256., 18860., 20040., 19660., 20880., 20460., 21720., 15952., 16960., 11636., 12392.,  7443.,  7992.,  9628., 10360., 11645., 12560., 12095., 13040., 12545., 13520.,  9580., 10360.,  6831.,  7416., 29169., 30276., 38332., 39808., 47195., 49040., 48245., 50120., 49295., 51200., 38716., 40240., 28485., 29628., 37460., 38960., 49008., 51008., 60060., 62560., 61260., 63800., 62460., 65040., 48816., 50880., 35732., 37280., 38063., 39840., 45412., 47696., 52277., 55068., 48023., 50736., 44025., 46660., 34052., 36160., 24643., 26224., 26965., 28568., 31700., 33752., 36067., 38568., 33093., 35516., 30375., 32720., 23364., 25240., 16801., 18208., 19707., 21136., 23108., 24928., 26257., 28468., 24563., 26696., 23125., 25180., 17796., 19440., 12799., 14032., 10500., 11488., 11888., 13120., 13132., 14608., 12268., 13656., 11660., 12960.,  8880.,  9920.,  6308.,  7088.,  4389.,  4924.,  4892.,  5520.,  5407.,  6128.,  5473.,  6096.,  5795.,  6320.,  4540.,  4960.,  3321.,  3636.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {27825., 29300., 29075., 30600., 30325., 31900., 36575., 38400., 37825., 39700., 39075., 41000., 45325., 47500., 46575., 48800., 47825., 50100., 24563., 26696., 23125., 25180., 24375., 26480., 22433., 24276., 22275., 24040., 23525., 25340., 26703., 28256., 27825., 29300., 29075., 30600., 52277., 55068., 48023., 50736., 44025., 46660., 36067., 38568., 33093., 35516., 30375., 32720., 26257., 28468., 24563., 26696., 23125., 25180.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3681.,  3834.,  4278.,  4440.,  4896.,  5112.,  5692.,  5920.,  7025.,  7310.,  8084.,  8384.,  7943.,  8258.,  9062.,  9392.,  8861.,  9206., 10040., 10400.,  7128.,  7416.,  8084.,  8384.,  5537.,  5762.,  6270.,  6504.,  7816.,  8104.,  8788.,  9088., 10192., 10592., 11488., 11904., 14256., 14776., 15940., 16480., 15464., 16024., 17228., 17808., 16672., 17272., 18516., 19136., 13232., 13728., 14720., 15232., 10088., 10472., 11220., 11616., 13157., 13622., 14528., 15008., 16904., 17544., 18732., 19392., 20905., 21666., 23126., 23912., 20347., 21094., 22540., 23312., 20045., 20778., 22210., 22968., 15248., 15816., 16916., 17504., 10997., 11390., 12168., 12576., 13343., 13826., 14750., 15248., 17104., 17768., 18980., 19664., 23271., 24062., 25552., 26368., 23993., 24770., 26246., 27048., 24971., 25734., 27196., 27984., 20088., 20680., 21804., 22416., 11679., 12090., 12886., 13312., 17369., 17870., 18812., 19328., 22424., 23112., 24348., 25056., 23845., 24666., 26186., 27032., 21751., 22558., 24064., 24896., 19913., 20706., 22198., 23016., 13664., 14280., 15428., 16064.,  8009.,  8438.,  9252.,  9696.,  9712., 10120., 10876., 11296., 12336., 12896., 13888., 14464., 13576., 14232., 15452., 16128., 12512., 13144., 14340., 14992., 11704., 12312., 13484., 14112.,  8272.,  8736.,  9632., 10112.,  5328.,  5640.,  6268.,  6592.,  6897.,  7170.,  7758.,  8040.,  8896.,  9272., 10044., 10432.,  9617., 10038., 10924., 11360.,  9655., 10042., 10894., 11296.,  9949., 10302., 11120., 11488.,  7608.,  7864.,  8468.,  8736.,  5553.,  5706.,  6102.,  6264.,  8995.,  9326.,  9948., 10288., 10888., 11320., 12116., 12560., 15719., 16258., 17286., 17840., 15549., 16054., 17048., 17568., 16467., 17002., 18026., 18576., 13344., 13784., 14604., 15056., 10515., 10854., 11476., 11824., 13488., 13864., 14636., 15024., 17328., 17824., 18816., 19328., 25000., 25624., 26892., 27536., 22304., 22904., 24148., 24768., 23512., 24152., 25436., 26096., 18256., 18784., 19808., 20352., 13328., 13736., 14508., 14928., 12795., 13258., 14162., 14640., 15296., 15912., 17076., 17712., 18331., 19110., 20588., 21392., 17005., 17770., 19234., 20024., 18303., 19118., 20632., 21472., 13992., 14664., 15868., 16560., 10139., 10658., 11562., 12096., 10933., 11414., 12336., 12832., 13192., 13832., 15020., 15680., 16857., 17666., 19174., 20008., 16811., 17606., 19100., 19920., 18109., 18954., 20498., 21368., 13968., 14664., 15892., 16608., 10309., 10846., 11768., 12320., 12911., 13410., 14350., 14864., 16208., 16872., 18084., 18768., 21783., 22622., 24160., 25024., 20905., 21666., 23126., 23912., 20347., 21094., 22540., 23312., 15608., 16200., 17324., 17936., 11375., 11802., 12614., 13056., 11896., 12328., 13108., 13552., 15184., 15776., 16800., 17408., 21600., 22360., 23684., 24464., 21816., 22552., 23852., 24608., 22288., 23000., 24276., 25008., 17840., 18400., 19392., 19968., 13912., 14312., 15028., 15440., 14499., 14886., 15588., 15984., 18728., 19256., 20180., 20720., 22615., 23290., 24430., 25120., 19837., 20478., 21584., 22240., 17315., 17922., 18994., 19616., 12032., 12504., 13324., 13808.,  7187.,  7518.,  8092.,  8432.,  4773.,  4962.,  5442.,  5640.,  6256.,  6520.,  7148.,  7424.,  8861.,  9206., 10040., 10400.,  9779., 10154., 11018., 11408., 10697., 11102., 11996., 12416.,  8552.,  8888.,  9604.,  9952.,  6597.,  6858.,  7402.,  7672.,  9304.,  9640., 10372., 10720., 12048., 12512., 13472., 13952., 16672., 17272., 18516., 19136., 17880., 18520., 19804., 20464., 19088., 19768., 21092., 21792., 15088., 15648., 16704., 17280., 11448., 11880., 12676., 13120., 12689., 13150., 14052., 14528., 14968., 15560., 16700., 17312., 20045., 20778., 22210., 22968., 19999., 20718., 22136., 22880., 20209., 20914., 22318., 23048., 16128., 16712., 17828., 18432., 12417., 12870., 13708., 14176., 14155., 14634., 15554., 16048., 17728., 18344., 19508., 20144., 24971., 25734., 27196., 27984., 26205., 26954., 28402., 29176., 23599., 24334., 25768., 26528., 18152., 18760., 19900., 20528., 13099., 13570., 14426., 14912., 15365., 15862., 16800., 17312., 17416., 18056., 19244., 19904., 19913., 20706., 22198., 23016., 18331., 19110., 20588., 21392., 17005., 17770., 19234., 20024., 13008., 13640., 14804., 15456.,  9429.,  9918., 10792., 11296.,  8640.,  9032.,  9772., 10176.,  9456.,  9952., 10880., 11392., 11704., 12312., 13484., 14112., 11152., 11736., 12884., 13488., 10856., 11416., 12540., 13120.,  8528.,  8992.,  9888., 10368.,  6496.,  6856.,  7532.,  7904.,  6997.,  7242.,  7802.,  8056.,  8464.,  8760.,  9452.,  9760.,  9949., 10302., 11120., 11488., 10499., 10818., 11602., 11936., 11305., 11590., 12340., 12640.,  8840.,  9080.,  9668.,  9920.,  6453.,  6642.,  7074.,  7272.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20905., 21666., 23126., 23912., 20347., 21094., 22540., 23312., 20045., 20778., 22210., 22968., 23271., 24062., 25552., 26368., 23993., 24770., 26246., 27048., 24971., 25734., 27196., 27984., 23845., 24666., 26186., 27032., 21751., 22558., 24064., 24896., 19913., 20706., 22198., 23016., 18331., 19110., 20588., 21392., 17005., 17770., 19234., 20024., 18303., 19118., 20632., 21472., 16857., 17666., 19174., 20008., 16811., 17606., 19100., 19920., 18109., 18954., 20498., 21368., 21783., 22622., 24160., 25024., 20905., 21666., 23126., 23912., 20347., 21094., 22540., 23312., 20045., 20778., 22210., 22968., 19999., 20718., 22136., 22880., 20209., 20914., 22318., 23048., 24971., 25734., 27196., 27984., 26205., 26954., 28402., 29176., 23599., 24334., 25768., 26528., 19913., 20706., 22198., 23016., 18331., 19110., 20588., 21392., 17005., 17770., 19234., 20024.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4521.,  4674.,  4827.,  4980.,  5450.,  5612.,  5774.,  5936.,  6312.,  6528.,  6744.,  6960.,  7572.,  7800.,  8028.,  8256.,  8837.,  9122.,  9407.,  9692., 10492., 10792., 11092., 11392.,  9747., 10062., 10377., 10692., 11522., 11852., 12182., 12512., 10657., 11002., 11347., 11692., 12552., 12912., 13272., 13632., 10064., 10352., 10640., 10928., 11644., 11944., 12244., 12544.,  7265.,  7490.,  7715.,  7940.,  8466.,  8700.,  8934.,  9168.,  8560.,  8848.,  9136.,  9424., 10108., 10408., 10708., 11008., 11472., 11872., 12272., 12672., 13600., 14016., 14432., 14848., 15768., 16288., 16808., 17328., 18540., 19080., 19620., 20160., 16992., 17552., 18112., 18672., 19924., 20504., 21084., 21664., 18216., 18816., 19416., 20016., 21308., 21928., 22548., 23168., 16752., 17248., 17744., 18240., 19328., 19840., 20352., 20864., 12624., 13008., 13392., 13776., 14620., 15016., 15412., 15808., 13689., 14154., 14619., 15084., 16032., 16512., 16992., 17472., 18384., 19024., 19664., 20304., 21572., 22232., 22892., 23552., 24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 22603., 23350., 24097., 24844., 26388., 27160., 27932., 28704., 20861., 21594., 22327., 23060., 24590., 25348., 26106., 26864., 15336., 15904., 16472., 17040., 18268., 18856., 19444., 20032., 10849., 11242., 11635., 12028., 12920., 13328., 13736., 14144., 12763., 13246., 13729., 14212., 15178., 15676., 16174., 16672., 16584., 17248., 17912., 18576., 19868., 20552., 21236., 21920., 21495., 22286., 23077., 23868., 25456., 26272., 27088., 27904., 21801., 22578., 23355., 24132., 25706., 26508., 27310., 28112., 22619., 23382., 24145., 24908., 26468., 27256., 28044., 28832., 19616., 20208., 20800., 21392., 22644., 23256., 23868., 24480., 12707., 13118., 13529., 13940., 14850., 15276., 15702., 16128., 15421., 15922., 16423., 16924., 17908., 18424., 18940., 19456., 20928., 21616., 22304., 22992., 24308., 25016., 25724., 26432., 22741., 23562., 24383., 25204., 26822., 27668., 28514., 29360., 21511., 22318., 23125., 23932., 25536., 26368., 27200., 28032., 20793., 21586., 22379., 23172., 24762., 25580., 26398., 27216., 17752., 18368., 18984., 19600., 20876., 21512., 22148., 22784., 14053., 14482., 14911., 15340., 16268., 16712., 17156., 17600.,  9608., 10016., 10424., 10832., 11604., 12024., 12444., 12864., 13616., 14176., 14736., 15296., 16320., 16896., 17472., 18048., 17536., 18192., 18848., 19504., 20756., 21432., 22108., 22784., 18504., 19136., 19768., 20400., 21628., 22280., 22932., 23584., 15888., 16496., 17104., 17712., 18916., 19544., 20172., 20800.,  9936., 10400., 10864., 11328., 12256., 12736., 13216., 13696.,  5224.,  5536.,  5848.,  6160.,  6836.,  7160.,  7484.,  7808.,  7825.,  8098.,  8371.,  8644.,  9218.,  9500.,  9782., 10064.,  9736., 10112., 10488., 10864., 11636., 12024., 12412., 12800.,  9021.,  9442.,  9863., 10284., 11172., 11608., 12044., 12480.,  8235.,  8622.,  9009.,  9396., 10250., 10652., 11054., 11456.,  7961.,  8314.,  8667.,  9020.,  9840., 10208., 10576., 10944.,  6064.,  6320.,  6576.,  6832.,  7452.,  7720.,  7988.,  8256.,  5001.,  5154.,  5307.,  5460.,  5898.,  6060.,  6222.,  6384., 10363., 10694., 11025., 11356., 12004., 12344., 12684., 13024., 11296., 11728., 12160., 12592., 13420., 13864., 14308., 14752., 14835., 15374., 15913., 16452., 17506., 18060., 18614., 19168., 13633., 14138., 14643., 15148., 16168., 16688., 17208., 17728., 14543., 15078., 15613., 16148., 17198., 17748., 18298., 18848., 11464., 11904., 12344., 12784., 13652., 14104., 14556., 15008.,  8403.,  8742.,  9081.,  9420., 10060., 10408., 10756., 11104., 10856., 11232., 11608., 11984., 12756., 13144., 13532., 13920., 14512., 15008., 15504., 16000., 17024., 17536., 18048., 18560., 21664., 22288., 22912., 23536., 24852., 25496., 26140., 26784., 19240., 19840., 20440., 21040., 22332., 22952., 23572., 24192., 20464., 21104., 21744., 22384., 23716., 24376., 25036., 25696., 17808., 18336., 18864., 19392., 20512., 21056., 21600., 22144., 14472., 14880., 15288., 15696., 16564., 16984., 17404., 17824., 12199., 12662., 13125., 13588., 14534., 15012., 15490., 15968., 16344., 16960., 17576., 18192., 19436., 20072., 20708., 21344., 20587., 21366., 22145., 22924., 24500., 25304., 26108., 26912., 20893., 21658., 22423., 23188., 24750., 25540., 26330., 27120., 22287., 23102., 23917., 24732., 26344., 27184., 28024., 28864., 20144., 20816., 21488., 22160., 23492., 24184., 24876., 25568., 16687., 17206., 17725., 18244., 19262., 19796., 20330., 20864., 15369., 15850., 16331., 16812., 17776., 18272., 18768., 19264., 18128., 18768., 19408., 20048., 21316., 21976., 22636., 23296., 21833., 22642., 23451., 24260., 25866., 26700., 27534., 28368., 20603., 21398., 22193., 22988., 24580., 25400., 26220., 27040., 21997., 22842., 23687., 24532., 26174., 27044., 27914., 28784., 18792., 19488., 20184., 20880., 22236., 22952., 23668., 24384., 13425., 13962., 14499., 15036., 16072., 16624., 17176., 17728., 13931., 14430., 14929., 15428., 16410., 16924., 17438., 17952., 17864., 18528., 19192., 19856., 21148., 21832., 22516., 23200., 23591., 24430., 25269., 26108., 27744., 28608., 29472., 30336., 24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 22603., 23350., 24097., 24844., 26388., 27160., 27932., 28704., 16800., 17392., 17984., 18576., 19828., 20440., 21052., 21664., 12083., 12510., 12937., 13364., 14290., 14732., 15174., 15616., 11264., 11696., 12128., 12560., 13356., 13800., 14244., 14688., 14416., 15008., 15600., 16192., 17248., 17856., 18464., 19072., 20168., 20928., 21688., 22448., 23804., 24584., 25364., 26144., 19600., 20336., 21072., 21808., 23140., 23896., 24652., 25408., 19544., 20256., 20968., 21680., 22988., 23720., 24452., 25184., 15920., 16480., 17040., 17600., 18624., 19200., 19776., 20352., 13600., 14000., 14400., 14800., 15564., 15976., 16388., 16800., 12035., 12422., 12809., 13196., 13884., 14280., 14676., 15072., 16192., 16720., 17248., 17776., 18700., 19240., 19780., 20320., 19531., 20206., 20881., 21556., 22698., 23388., 24078., 24768., 17209., 17850., 18491., 19132., 20240., 20896., 21552., 22208., 15399., 16006., 16613., 17220., 18294., 18916., 19538., 20160., 12008., 12480., 12952., 13424., 14260., 14744., 15228., 15712.,  9755., 10086., 10417., 10748., 11364., 11704., 12044., 12384.,  5645.,  5834.,  6023.,  6212.,  6718.,  6916.,  7114.,  7312.,  7704.,  7968.,  8232.,  8496.,  9156.,  9432.,  9708.,  9984., 10657., 11002., 11347., 11692., 12552., 12912., 13272., 13632., 11567., 11942., 12317., 12692., 13582., 13972., 14362., 14752., 12477., 12882., 13287., 13692., 14612., 15032., 15452., 15872., 11584., 11920., 12256., 12592., 13356., 13704., 14052., 14400.,  8325.,  8586.,  8847.,  9108.,  9670.,  9940., 10210., 10480.,  9952., 10288., 10624., 10960., 11692., 12040., 12388., 12736., 13328., 13792., 14256., 14720., 15712., 16192., 16672., 17152., 18216., 18816., 19416., 20016., 21308., 21928., 22548., 23168., 19440., 20080., 20720., 21360., 22692., 23352., 24012., 24672., 20664., 21344., 22024., 22704., 24076., 24776., 25476., 26176., 18864., 19424., 19984., 20544., 21696., 22272., 22848., 23424., 14272., 14704., 15136., 15568., 16460., 16904., 17348., 17792., 15317., 15778., 16239., 16700., 17644., 18120., 18596., 19072., 16864., 17456., 18048., 18640., 19860., 20472., 21084., 21696., 20861., 21594., 22327., 23060., 24590., 25348., 26106., 26864., 19631., 20350., 21069., 21788., 23304., 24048., 24792., 25536., 18913., 19618., 20323., 21028., 22530., 23260., 23990., 24720., 15544., 16128., 16712., 17296., 18540., 19144., 19748., 20352., 12605., 13058., 13511., 13964., 14916., 15384., 15852., 16320., 12855., 13334., 13813., 14292., 15254., 15748., 16242., 16736., 16088., 16704., 17320., 17936., 19180., 19816., 20452., 21088., 22619., 23382., 24145., 24908., 26468., 27256., 28044., 28832., 23949., 24698., 25447., 26196., 27742., 28516., 29290., 30064., 21695., 22430., 23165., 23900., 25432., 26192., 26952., 27712., 18288., 18896., 19504., 20112., 21380., 22008., 22636., 23264., 14463., 14934., 15405., 15876., 16846., 17332., 17818., 18304., 13977., 14474., 14971., 15468., 16448., 16960., 17472., 17984., 17360., 18000., 18640., 19280., 20548., 21208., 21868., 22528., 20793., 21586., 22379., 23172., 24762., 25580., 26398., 27216., 20587., 21366., 22145., 22924., 24500., 25304., 26108., 26912., 20893., 21658., 22423., 23188., 24750., 25540., 26330., 27120., 18984., 19616., 20248., 20880., 22172., 22824., 23476., 24128., 15809., 16298., 16787., 17276., 18264., 18768., 19272., 19776., 10296., 10688., 11080., 11472., 12228., 12632., 13036., 13440., 14576., 15072., 15568., 16064., 17024., 17536., 18048., 18560., 15888., 16496., 17104., 17712., 18916., 19544., 20172., 20800., 13784., 14368., 14952., 15536., 16716., 17320., 17924., 18528., 12192., 12752., 13312., 13872., 15028., 15608., 16188., 16768.,  8912.,  9376.,  9840., 10304., 11232., 11712., 12192., 12672.,  6488.,  6848.,  7208.,  7568.,  8292.,  8664.,  9036.,  9408.,  6773.,  7018.,  7263.,  7508.,  8054.,  8308.,  8562.,  8816.,  7416.,  7712.,  8008.,  8304.,  8996.,  9304.,  9612.,  9920.,  7961.,  8314.,  8667.,  9020.,  9840., 10208., 10576., 10944.,  8199.,  8518.,  8837.,  9156.,  9942., 10276., 10610., 10944.,  8949.,  9234.,  9519.,  9804., 10556., 10856., 11156., 11456.,  7264.,  7504.,  7744.,  7984.,  8588.,  8840.,  9092.,  9344.,  5997.,  6186.,  6375.,  6564.,  7038.,  7236.,  7434.,  7632.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 22603., 23350., 24097., 24844., 26388., 27160., 27932., 28704., 20861., 21594., 22327., 23060., 24590., 25348., 26106., 26864., 21495., 22286., 23077., 23868., 25456., 26272., 27088., 27904., 21801., 22578., 23355., 24132., 25706., 26508., 27310., 28112., 22619., 23382., 24145., 24908., 26468., 27256., 28044., 28832., 22741., 23562., 24383., 25204., 26822., 27668., 28514., 29360., 21511., 22318., 23125., 23932., 25536., 26368., 27200., 28032., 20793., 21586., 22379., 23172., 24762., 25580., 26398., 27216., 20587., 21366., 22145., 22924., 24500., 25304., 26108., 26912., 20893., 21658., 22423., 23188., 24750., 25540., 26330., 27120., 22287., 23102., 23917., 24732., 26344., 27184., 28024., 28864., 21833., 22642., 23451., 24260., 25866., 26700., 27534., 28368., 20603., 21398., 22193., 22988., 24580., 25400., 26220., 27040., 21997., 22842., 23687., 24532., 26174., 27044., 27914., 28784., 23591., 24430., 25269., 26108., 27744., 28608., 29472., 30336., 24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 22603., 23350., 24097., 24844., 26388., 27160., 27932., 28704., 20861., 21594., 22327., 23060., 24590., 25348., 26106., 26864., 19631., 20350., 21069., 21788., 23304., 24048., 24792., 25536., 18913., 19618., 20323., 21028., 22530., 23260., 23990., 24720., 22619., 23382., 24145., 24908., 26468., 27256., 28044., 28832., 23949., 24698., 25447., 26196., 27742., 28516., 29290., 30064., 21695., 22430., 23165., 23900., 25432., 26192., 26952., 27712., 20793., 21586., 22379., 23172., 24762., 25580., 26398., 27216., 20587., 21366., 22145., 22924., 24500., 25304., 26108., 26912., 20893., 21658., 22423., 23188., 24750., 25540., 26330., 27120.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4977.,  5492.,  6025.,  6576.,  5484.,  6128.,  6796.,  7488.,  8023.,  8860.,  9727., 10624.,  8515.,  9348., 10211., 11104.,  9263., 10092., 10951., 11840.,  8012.,  8688.,  9388., 10112.,  6777.,  7300.,  7841.,  8400.,  8860.,  9552., 10268., 11008., 11600., 12480., 13392., 14336., 18180., 19312., 20484., 21696., 20532., 21680., 22868., 24096., 19044., 20208., 21412., 22656., 15248., 16192., 17168., 18176., 11516., 12240., 12988., 13760., 14959., 15852., 16775., 17728., 17556., 18704., 19892., 21120., 19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824., 12020., 13072., 14164., 15296.,  8711.,  9468., 10255., 11072., 12003., 12932., 13891., 14880., 14372., 15568., 16804., 18080., 19013., 20476., 21989., 23552., 19433., 20868., 22353., 23888., 20365., 21772., 23229., 24736., 16836., 17936., 19076., 20256.,  9563., 10356., 11179., 12032., 16727., 17692., 18687., 19712., 21428., 22672., 23956., 25280., 23233., 24756., 26329., 27952., 22117., 23612., 25157., 26752., 19401., 20804., 22257., 23760., 13652., 14736., 15860., 17024.,  8303.,  9068.,  9863., 10688., 10268., 11024., 11804., 12608., 13520., 14528., 15568., 16640., 16836., 18096., 19396., 20736., 16820., 18096., 19412., 20768., 16228., 17456., 18724., 20032., 12432., 13376., 14352., 15360.,  9084.,  9744., 10428., 11136., 11001., 11652., 12321., 13008., 14604., 15472., 16364., 17280., 17007., 18028., 19079., 20160., 17915., 18932., 19979., 21056., 15431., 16380., 17359., 18368., 11436., 12144., 12876., 13632.,  7745.,  8212.,  8697.,  9200.,  4213.,  4700.,  5205.,  5728.,  5244.,  5872.,  6524.,  7200.,  8515.,  9348., 10211., 11104.,  9263., 10092., 10951., 11840., 11099., 11988., 12907., 13856.,  9436., 10160., 10908., 11680.,  7837.,  8396.,  8973.,  9568.,  9772., 10448., 11148., 11872., 13136., 14016., 14928., 15872., 20532., 21680., 22868., 24096., 19044., 20208., 21412., 22656., 21460., 22704., 23988., 25312., 17104., 18112., 19152., 20224., 12876., 13648., 14444., 15264., 13211., 14100., 15019., 15968., 14340., 15440., 16580., 17760., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824., 16885., 18268., 19701., 21184., 12900., 13968., 15076., 16224., 10131., 10948., 11795., 12672., 11535., 12460., 13415., 14400., 13716., 14864., 16052., 17280., 19433., 20868., 22353., 23888., 20365., 21772., 23229., 24736., 22897., 24340., 25833., 27376., 14900., 16016., 17172., 18368., 10983., 11836., 12719., 13632., 17539., 18500., 19491., 20512., 19236., 20432., 21668., 22944., 22117., 23612., 25157., 26752., 19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 11396., 12432., 13508., 14624.,  8379.,  9140.,  9931., 10752., 11564., 12368., 13196., 14048., 12752., 13760., 14800., 15872., 16820., 18096., 19412., 20768., 16228., 17456., 18724., 20032., 16148., 17328., 18548., 19808., 12368., 13248., 14160., 15104., 10188., 10832., 11500., 12192., 12189., 12876., 13581., 14304., 15004., 15856., 16732., 17632., 17915., 18932., 19979., 21056., 15431., 16380., 17359., 18368., 13459., 14340., 15251., 16192.,  9532., 10160., 10812., 11488.,  5765.,  6204.,  6661.,  7136.,  3705.,  4164.,  4641.,  5136.,  5260.,  5872.,  6508.,  7168.,  9263., 10092., 10951., 11840., 11099., 11988., 12907., 13856., 12935., 13884., 14863., 15872., 10860., 11632., 12428., 13248.,  8897.,  9492., 10105., 10736., 10940., 11600., 12284., 12992., 14928., 15808., 16720., 17664., 19044., 20208., 21412., 22656., 21460., 22704., 23988., 25312., 23876., 25200., 26564., 27968., 18960., 20032., 21136., 22272., 14236., 15056., 15900., 16768.,  9607., 10428., 11279., 12160., 11636., 12688., 13780., 14912., 15633., 16980., 18377., 19824., 16885., 18268., 19701., 21184., 18393., 19812., 21281., 22800., 14868., 16016., 17204., 18432., 11551., 12428., 13335., 14272., 10491., 11348., 12235., 13152., 13572., 14672., 15812., 16992., 20365., 21772., 23229., 24736., 22897., 24340., 25833., 27376., 21589., 23068., 24597., 26176., 16868., 18064., 19300., 20576., 12403., 13316., 14259., 15232., 14959., 15852., 16775., 17728., 17556., 18704., 19892., 21120., 19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824., 12020., 13072., 14164., 15296.,  8711.,  9468., 10255., 11072., 10492., 11280., 12092., 12928., 12240., 13248., 14288., 15360., 16228., 17456., 18724., 20032., 16148., 17328., 18548., 19808., 16580., 17712., 18884., 20096., 13904., 14784., 15696., 16640.,  7452.,  8080.,  8732.,  9408., 12289., 12948., 13625., 14320., 15660., 16496., 17356., 18240., 15431., 16380., 17359., 18368., 13459., 14340., 15251., 16192., 11999., 12812., 13655., 14528.,  7948.,  8560.,  9196.,  9856.,  4041.,  4452.,  4881.,  5328.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824., 19013., 20476., 21989., 23552., 19433., 20868., 22353., 23888., 20365., 21772., 23229., 24736., 23233., 24756., 26329., 27952., 22117., 23612., 25157., 26752., 19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824., 16885., 18268., 19701., 21184., 19433., 20868., 22353., 23888., 20365., 21772., 23229., 24736., 22897., 24340., 25833., 27376., 22117., 23612., 25157., 26752., 19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824., 16885., 18268., 19701., 21184., 18393., 19812., 21281., 22800., 20365., 21772., 23229., 24736., 22897., 24340., 25833., 27376., 21589., 23068., 24597., 26176., 19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8697.,  8930.,  9462.,  9704., 10263., 10514., 11100., 11360.,  8564.,  8856.,  9520.,  9824., 10524., 10840., 11576., 11904., 10371., 10734., 11582., 11960., 12853., 13246., 14184., 14592.,  9567.,  9926., 10770., 11144., 12033., 12422., 13356., 13760.,  9275.,  9630., 10470., 10840., 11725., 12110., 13040., 13440.,  8228.,  8536.,  9248.,  9568., 10316., 10648., 11432., 11776.,  6393.,  6642.,  7174.,  7432.,  7991.,  8258.,  8844.,  9120.,  8324.,  8632.,  9312.,  9632., 10348., 10680., 11432., 11776., 10320., 10720., 11616., 12032., 12976., 13408., 14400., 14848., 16076., 16584., 17744., 18272., 19492., 20040., 21320., 21888., 18460., 18984., 20160., 20704., 21940., 22504., 23800., 24384., 17260., 17800., 18992., 19552., 20804., 21384., 22696., 23296., 16080., 16544., 17568., 18048., 19120., 19616., 20736., 21248., 12676., 13048., 13856., 14240., 15084., 15480., 16360., 16768., 13707., 14174., 15094., 15576., 16541., 17038., 18048., 18560., 17660., 18280., 19488., 20128., 21396., 22056., 23384., 24064., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 15180., 15720., 16880., 17440., 18660., 19240., 20520., 21120., 12171., 12558., 13414., 13816., 14717., 15134., 16080., 16512., 13391., 13894., 14850., 15368., 16369., 16902., 17948., 18496., 19180., 19848., 21104., 21792., 23108., 23816., 25192., 25920., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208., 20633., 21394., 22902., 23688., 25271., 26082., 27740., 28576., 20221., 20954., 22434., 23192., 24747., 25530., 27160., 27968., 18108., 18696., 19904., 20512., 21780., 22408., 23736., 24384., 10767., 11190., 12082., 12520., 13457., 13910., 14892., 15360., 16147., 16686., 17678., 18232., 19269., 19838., 20920., 21504., 20700., 21416., 22720., 23456., 24820., 25576., 27000., 27776., 22513., 23362., 24958., 25832., 27503., 28402., 30148., 31072., 22101., 22922., 24490., 25336., 26979., 27850., 29568., 30464., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 17388., 17960., 19152., 19744., 20996., 21608., 22920., 23552., 13395., 13790., 14654., 15064., 15973., 16398., 17352., 17792.,  9812., 10232., 10992., 11424., 12220., 12664., 13496., 13952., 14032., 14624., 15648., 16256., 17328., 17952., 19072., 19712., 19644., 20360., 21632., 22368., 23700., 24456., 25848., 26624., 21644., 22376., 23664., 24416., 25764., 26536., 27944., 28736., 18460., 19144., 20384., 21088., 22388., 23112., 24472., 25216., 12432., 12960., 13920., 14464., 15472., 16032., 17088., 17664.,  7828.,  8184.,  8880.,  9248.,  9980., 10360., 11128., 11520., 10585., 10930., 11558., 11912., 12567., 12930., 13612., 13984., 13748., 14232., 15088., 15584., 16476., 16984., 17912., 18432., 14307., 14878., 15886., 16472., 17525., 18126., 19224., 19840., 14335., 14902., 15906., 16488., 17537., 18134., 19228., 19840., 11739., 12238., 13174., 13688., 14669., 15198., 16224., 16768.,  9124.,  9496., 10208., 10592., 11340., 11736., 12520., 12928.,  7641.,  7874.,  8374.,  8616.,  9143.,  9394.,  9948., 10208.,  6173.,  6378.,  6882.,  7096.,  7627.,  7850.,  8408.,  8640.,  6820.,  7096.,  7744.,  8032.,  8716.,  9016.,  9736., 10048.,  9567.,  9926., 10770., 11144., 12033., 12422., 13356., 13760.,  9275.,  9630., 10470., 10840., 11725., 12110., 13040., 13440., 11095., 11510., 12410., 12840., 13785., 14230., 15220., 15680.,  9748., 10104., 10864., 11232., 12028., 12408., 13240., 13632.,  7453.,  7738.,  8306.,  8600.,  9195.,  9498., 10120., 10432.,  8628.,  8920.,  9584.,  9888., 10588., 10904., 11640., 11968., 11600., 12000., 12896., 13312., 14256., 14688., 15680., 16128., 18460., 18984., 20160., 20704., 21940., 22504., 23800., 24384., 17260., 17800., 18992., 19552., 20804., 21384., 22696., 23296., 19708., 20328., 21600., 22240., 23572., 24232., 25624., 26304., 18192., 18720., 19808., 20352., 21488., 22048., 23232., 23808., 14324., 14744., 15600., 16032., 16924., 17368., 18296., 18752., 12775., 13238., 14154., 14632., 15593., 16086., 17092., 17600., 17676., 18248., 19408., 20000., 21220., 21832., 23112., 23744., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 18917., 19626., 21082., 21816., 23347., 24106., 25712., 26496., 15388., 15944., 17120., 17696., 18932., 19528., 20824., 21440., 13927., 14374., 15290., 15752., 16713., 17190., 18196., 18688., 15019., 15518., 16470., 16984., 17981., 18510., 19552., 20096., 16124., 16744., 17952., 18592., 19860., 20520., 21848., 22528., 20633., 21394., 22902., 23688., 25271., 26082., 27740., 28576., 20221., 20954., 22434., 23192., 24747., 25530., 27160., 27968., 22945., 23714., 25230., 26024., 27615., 28434., 30100., 30944., 16780., 17384., 18608., 19232., 20516., 21160., 22504., 23168., 12523., 13006., 13958., 14456., 15453., 15966., 17008., 17536., 16239., 16774., 17762., 18312., 19345., 19910., 20988., 21568., 18668., 19336., 20592., 21280., 22596., 23304., 24680., 25408., 22101., 22922., 24490., 25336., 26979., 27850., 29568., 30464., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 15484., 16008., 17152., 17696., 18900., 19464., 20728., 21312., 12527., 12918., 13778., 14184., 15089., 15510., 16460., 16896., 11076., 11544., 12352., 12832., 13676., 14168., 15048., 15552., 15056., 15648., 16672., 17280., 18352., 18976., 20096., 20736., 21644., 22376., 23664., 24416., 25764., 26536., 27944., 28736., 18460., 19144., 20384., 21088., 22388., 23112., 24472., 25216., 16300., 16936., 18128., 18784., 20036., 20712., 22024., 22720., 10832., 11296., 12192., 12672., 13616., 14112., 15104., 15616.,  9028.,  9368., 10048., 10400., 11116., 11480., 12232., 12608., 11645., 12026., 12690., 13080., 13771., 14170., 14888., 15296., 13028., 13496., 14336., 14816., 15692., 16184., 17096., 17600., 14335., 14902., 15906., 16488., 17537., 18134., 19228., 19840., 11739., 12238., 13174., 13688., 14669., 15198., 16224., 16768., 10167., 10598., 11466., 11912., 12825., 13286., 14244., 14720.,  8212.,  8504.,  9136.,  9440., 10108., 10424., 11128., 11456.,  7037.,  7242.,  7714.,  7928.,  8427.,  8650.,  9176.,  9408.,  4161.,  4338.,  4814.,  5000.,  5503.,  5698.,  6228.,  6432.,  5588.,  5848.,  6480.,  6752.,  7420.,  7704.,  8408.,  8704.,  9275.,  9630., 10470., 10840., 11725., 12110., 13040., 13440., 11095., 11510., 12410., 12840., 13785., 14230., 15220., 15680., 12915., 13390., 14350., 14840., 15845., 16350., 17400., 17920., 11268., 11672., 12480., 12896., 13740., 14168., 15048., 15488.,  8513.,  8834.,  9438.,  9768., 10399., 10738., 11396., 11744.,  9444.,  9720., 10368., 10656., 11340., 11640., 12360., 12672., 13392., 13792., 14688., 15104., 16048., 16480., 17472., 17920., 17260., 17800., 18992., 19552., 20804., 21384., 22696., 23296., 19708., 20328., 21600., 22240., 23572., 24232., 25624., 26304., 22156., 22856., 24208., 24928., 26340., 27080., 28552., 29312., 20304., 20896., 22048., 22656., 23856., 24480., 25728., 26368., 15972., 16440., 17344., 17824., 18764., 19256., 20232., 20736., 12291., 12686., 13534., 13944., 14837., 15262., 16200., 16640., 14620., 15144., 16256., 16800., 17972., 18536., 19768., 20352., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 18917., 19626., 21082., 21816., 23347., 24106., 25712., 26496., 19593., 20338., 21830., 22600., 24167., 24962., 26604., 27424., 17708., 18344., 19600., 20256., 21572., 22248., 23624., 24320., 15683., 16190., 17166., 17688., 18709., 19246., 20312., 20864., 11463., 11894., 12778., 13224., 14153., 14614., 15588., 16064., 14092., 14664., 15824., 16416., 17636., 18248., 19528., 20160., 20221., 20954., 22434., 23192., 24747., 25530., 27160., 27968., 22945., 23714., 25230., 26024., 27615., 28434., 30100., 30944., 22085., 22890., 24442., 25272., 26899., 27754., 29456., 30336., 19100., 19784., 21088., 21792., 23156., 23880., 25304., 26048., 14279., 14822., 15834., 16392., 17449., 18022., 19124., 19712., 13707., 14174., 15094., 15576., 16541., 17038., 18048., 18560., 17660., 18280., 19488., 20128., 21396., 22056., 23384., 24064., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 15180., 15720., 16880., 17440., 18660., 19240., 20520., 21120., 12171., 12558., 13414., 13816., 14717., 15134., 16080., 16512., 11764., 12216., 13008., 13472., 14300., 14776., 15640., 16128., 16592., 17184., 18208., 18816., 19888., 20512., 21632., 22272., 18460., 19144., 20384., 21088., 22388., 23112., 24472., 25216., 16300., 16936., 18128., 18784., 20036., 20712., 22024., 22720., 15164., 15752., 16896., 17504., 18708., 19336., 20600., 21248., 12368., 12832., 13728., 14208., 15152., 15648., 16640., 17152.,  6644.,  6968.,  7632.,  7968.,  8668.,  9016.,  9752., 10112., 10593., 10946., 11582., 11944., 12607., 12978., 13668., 14048., 12820., 13272., 14096., 14560., 15420., 15896., 16792., 17280., 11739., 12238., 13174., 13688., 14669., 15198., 16224., 16768., 10167., 10598., 11466., 11912., 12825., 13286., 14244., 14720.,  9619.,  9982., 10782., 11160., 12005., 12398., 13288., 13696.,  7876.,  8152.,  8768.,  9056.,  9708., 10008., 10696., 11008.,  6945.,  7122.,  7566.,  7752.,  8223.,  8418.,  8916.,  9120.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208., 20633., 21394., 22902., 23688., 25271., 26082., 27740., 28576., 20221., 20954., 22434., 23192., 24747., 25530., 27160., 27968., 22513., 23362., 24958., 25832., 27503., 28402., 30148., 31072., 22101., 22922., 24490., 25336., 26979., 27850., 29568., 30464., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 18917., 19626., 21082., 21816., 23347., 24106., 25712., 26496., 20633., 21394., 22902., 23688., 25271., 26082., 27740., 28576., 20221., 20954., 22434., 23192., 24747., 25530., 27160., 27968., 22945., 23714., 25230., 26024., 27615., 28434., 30100., 30944., 22101., 22922., 24490., 25336., 26979., 27850., 29568., 30464., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 18917., 19626., 21082., 21816., 23347., 24106., 25712., 26496., 19593., 20338., 21830., 22600., 24167., 24962., 26604., 27424., 20221., 20954., 22434., 23192., 24747., 25530., 27160., 27968., 22945., 23714., 25230., 26024., 27615., 28434., 30100., 30944., 22085., 22890., 24442., 25272., 26899., 27754., 29456., 30336., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8649.,  8882.,  9115.,  9348.,  9850., 10092., 10334., 10576., 11123., 11374., 11625., 11876., 12468., 12728., 12988., 13248.,  7492.,  7784.,  8076.,  8368.,  9008.,  9312.,  9616.,  9920., 10620., 10936., 11252., 11568., 12328., 12656., 12984., 13312.,  8091.,  8454.,  8817.,  9180.,  9986., 10364., 10742., 11120., 12001., 12394., 12787., 13180., 14136., 14544., 14952., 15360.,  8535.,  8894.,  9253.,  9612., 10414., 10788., 11162., 11536., 12413., 12802., 13191., 13580., 14532., 14936., 15340., 15744., 10003., 10358., 10713., 11068., 11866., 12236., 12606., 12976., 13849., 14234., 14619., 15004., 15952., 16352., 16752., 17152.,  7764.,  8072.,  8380.,  8688.,  9344.,  9664.,  9984., 10304., 11020., 11352., 11684., 12016., 12792., 13136., 13480., 13824.,  5561.,  5810.,  6059.,  6308.,  6794.,  7052.,  7310.,  7568.,  8099.,  8366.,  8633.,  8900.,  9476.,  9752., 10028., 10304.,  6996.,  7304.,  7612.,  7920.,  8576.,  8896.,  9216.,  9536., 10252., 10584., 10916., 11248., 12024., 12368., 12712., 13056.,  7952.,  8352.,  8752.,  9152., 10016., 10432., 10848., 11264., 12208., 12640., 13072., 13504., 14528., 14976., 15424., 15872., 12252., 12760., 13268., 13776., 14864., 15392., 15920., 16448., 17636., 18184., 18732., 19280., 20568., 21136., 21704., 22272., 14188., 14712., 15236., 15760., 16864., 17408., 17952., 18496., 19700., 20264., 20828., 21392., 22696., 23280., 23864., 24448., 13052., 13592., 14132., 14672., 15792., 16352., 16912., 17472., 18692., 19272., 19852., 20432., 21752., 22352., 22952., 23552., 11600., 12064., 12528., 12992., 13920., 14400., 14880., 15360., 16368., 16864., 17360., 17856., 18944., 19456., 19968., 20480.,  9108.,  9480.,  9852., 10224., 10944., 11328., 11712., 12096., 12876., 13272., 13668., 14064., 14904., 15312., 15720., 16128., 10371., 10838., 11305., 11772., 12682., 13164., 13646., 14128., 15113., 15610., 16107., 16604., 17664., 18176., 18688., 19200., 15436., 16056., 16676., 17296., 18496., 19136., 19776., 20416., 21716., 22376., 23036., 23696., 25096., 25776., 26456., 27136., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 12284., 12824., 13364., 13904., 15024., 15584., 16144., 16704., 17924., 18504., 19084., 19664., 20984., 21584., 22184., 22784., 10131., 10518., 10905., 11292., 12090., 12492., 12894., 13296., 14169., 14586., 15003., 15420., 16368., 16800., 17232., 17664., 13543., 14046., 14549., 15052., 15998., 16516., 17034., 17552., 18573., 19106., 19639., 20172., 21268., 21816., 22364., 22912., 18684., 19352., 20020., 20688., 21936., 22624., 23312., 24000., 25348., 26056., 26764., 27472., 28920., 29648., 30376., 31104., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 16925., 17658., 18391., 19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424., 29232., 30040., 30848., 16556., 17144., 17732., 18320., 19488., 20096., 20704., 21312., 22580., 23208., 23836., 24464., 25832., 26480., 27128., 27776.,  9335.,  9758., 10181., 10604., 11438., 11876., 12314., 12752., 13661., 14114., 14567., 15020., 16004., 16472., 16940., 17408., 14667., 15206., 15745., 16284., 17266., 17820., 18374., 18928., 19985., 20554., 21123., 21692., 22824., 23408., 23992., 24576., 17836., 18552., 19268., 19984., 21280., 22016., 22752., 23488., 24884., 25640., 26396., 27152., 28648., 29424., 30200., 30976., 18321., 19170., 20019., 20868., 22418., 23292., 24166., 25040., 26715., 27614., 28513., 29412., 31212., 32136., 33060., 33984., 18549., 19370., 20191., 21012., 22534., 23380., 24226., 25072., 26719., 27590., 28461., 29332., 31104., 32000., 32896., 33792., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 13596., 14168., 14740., 15312., 16464., 17056., 17648., 18240., 19492., 20104., 20716., 21328., 22680., 23312., 23944., 24576.,  8475.,  8870.,  9265.,  9660., 10466., 10876., 11286., 11696., 12577., 13002., 13427., 13852., 14808., 15248., 15688., 16128., 10948., 11368., 11788., 12208., 12976., 13408., 13840., 14272., 15100., 15544., 15988., 16432., 17320., 17776., 18232., 18688., 14800., 15392., 15984., 16576., 17632., 18240., 18848., 19456., 20592., 21216., 21840., 22464., 23680., 24320., 24960., 25600., 18604., 19320., 20036., 20752., 22048., 22784., 23520., 24256., 25652., 26408., 27164., 27920., 29416., 30192., 30968., 31744., 20540., 21272., 22004., 22736., 24048., 24800., 25552., 26304., 27716., 28488., 29260., 30032., 31544., 32336., 33128., 33920., 16268., 16952., 17636., 18320., 19584., 20288., 20992., 21696., 23060., 23784., 24508., 25232., 26696., 27440., 28184., 28928., 12176., 12704., 13232., 13760., 14752., 15296., 15840., 16384., 17456., 18016., 18576., 19136., 20288., 20864., 21440., 22016.,  8324.,  8680.,  9036.,  9392., 10096., 10464., 10832., 11200., 11964., 12344., 12724., 13104., 13928., 14320., 14712., 15104.,  7705.,  8050.,  8395.,  8740.,  9322.,  9676., 10030., 10384., 11011., 11374., 11737., 12100., 12772., 13144., 13516., 13888., 11780., 12264., 12748., 13232., 14064., 14560., 15056., 15552., 16444., 16952., 17460., 17968., 18920., 19440., 19960., 20480., 14539., 15110., 15681., 16252., 17234., 17820., 18406., 18992., 20049., 20650., 21251., 21852., 22984., 23600., 24216., 24832., 12807., 13374., 13941., 14508., 15486., 16068., 16650., 17232., 18285., 18882., 19479., 20076., 21204., 21816., 22428., 23040.,  9987., 10486., 10985., 11484., 12394., 12908., 13422., 13936., 14921., 15450., 15979., 16508., 17568., 18112., 18656., 19200.,  8340.,  8712.,  9084.,  9456., 10176., 10560., 10944., 11328., 12108., 12504., 12900., 13296., 14136., 14544., 14952., 15360.,  8649.,  8882.,  9115.,  9348.,  9850., 10092., 10334., 10576., 11123., 11374., 11625., 11876., 12468., 12728., 12988., 13248.,  6445.,  6650.,  6855.,  7060.,  7534.,  7748.,  7962.,  8176.,  8695.,  8918.,  9141.,  9364.,  9928., 10160., 10392., 10624.,  6580.,  6856.,  7132.,  7408.,  8032.,  8320.,  8608.,  8896.,  9580.,  9880., 10180., 10480., 11224., 11536., 11848., 12160.,  8535.,  8894.,  9253.,  9612., 10414., 10788., 11162., 11536., 12413., 12802., 13191., 13580., 14532., 14936., 15340., 15744., 10003., 10358., 10713., 11068., 11866., 12236., 12606., 12976., 13849., 14234., 14619., 15004., 15952., 16352., 16752., 17152., 11535., 11950., 12365., 12780., 13638., 14068., 14498., 14928., 15861., 16306., 16751., 17196., 18204., 18664., 19124., 19584.,  8964.,  9320.,  9676., 10032., 10736., 11104., 11472., 11840., 12604., 12984., 13364., 13744., 14568., 14960., 15352., 15744.,  6365.,  6650.,  6935.,  7220.,  7742.,  8036.,  8330.,  8624.,  9191.,  9494.,  9797., 10100., 10712., 11024., 11336., 11648.,  6084.,  6376.,  6668.,  6960.,  7600.,  7904.,  8208.,  8512.,  9212.,  9528.,  9844., 10160., 10920., 11248., 11576., 11904.,  8464.,  8864.,  9264.,  9664., 10528., 10944., 11360., 11776., 12720., 13152., 13584., 14016., 15040., 15488., 15936., 16384., 14188., 14712., 15236., 15760., 16864., 17408., 17952., 18496., 19700., 20264., 20828., 21392., 22696., 23280., 23864., 24448., 13052., 13592., 14132., 14672., 15792., 16352., 16912., 17472., 18692., 19272., 19852., 20432., 21752., 22352., 22952., 23552., 15052., 15672., 16292., 16912., 18112., 18752., 19392., 20032., 21332., 21992., 22652., 23312., 24712., 25392., 26072., 26752., 13200., 13728., 14256., 14784., 15776., 16320., 16864., 17408., 18480., 19040., 19600., 20160., 21312., 21888., 22464., 23040., 10308., 10728., 11148., 11568., 12336., 12768., 13200., 13632., 14460., 14904., 15348., 15792., 16680., 17136., 17592., 18048., 10815., 11278., 11741., 12204., 13110., 13588., 14066., 14544., 15525., 16018., 16511., 17004., 18060., 18568., 19076., 19584., 17308., 17880., 18452., 19024., 20176., 20768., 21360., 21952., 23204., 23816., 24428., 25040., 26392., 27024., 27656., 28288., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 16389., 17098., 17807., 18516., 19926., 20660., 21394., 22128., 23663., 24422., 25181., 25940., 27600., 28384., 29168., 29952., 14220., 14776., 15332., 15888., 17024., 17600., 18176., 18752., 19988., 20584., 21180., 21776., 23112., 23728., 24344., 24960., 11535., 11982., 12429., 12876., 13734., 14196., 14658., 15120., 16053., 16530., 17007., 17484., 18492., 18984., 19476., 19968., 15011., 15510., 16009., 16508., 17450., 17964., 18478., 18992., 20009., 20538., 21067., 21596., 22688., 23232., 23776., 24320., 14412., 15032., 15652., 16272., 17472., 18112., 18752., 19392., 20692., 21352., 22012., 22672., 24072., 24752., 25432., 26112., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 16925., 17658., 18391., 19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424., 29232., 30040., 30848., 19265., 20034., 20803., 21572., 23042., 23836., 24630., 25424., 27019., 27838., 28657., 29476., 31196., 32040., 32884., 33728., 15420., 16024., 16628., 17232., 18416., 19040., 19664., 20288., 21572., 22216., 22860., 23504., 24888., 25552., 26216., 26880., 10739., 11222., 11705., 12188., 13082., 13580., 14078., 14576., 15545., 16058., 16571., 17084., 18128., 18656., 19184., 19712., 13063., 13598., 14133., 14668., 15646., 16196., 16746., 17296., 18349., 18914., 19479., 20044., 21172., 21752., 22332., 22912., 15612., 16280., 16948., 17616., 18864., 19552., 20240., 20928., 22276., 22984., 23692., 24400., 25848., 26576., 27304., 28032., 18549., 19370., 20191., 21012., 22534., 23380., 24226., 25072., 26719., 27590., 28461., 29332., 31104., 32000., 32896., 33792., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 11372., 11896., 12420., 12944., 14048., 14592., 15136., 15680., 16884., 17448., 18012., 18576., 19880., 20464., 21048., 21632.,  8791.,  9182.,  9573.,  9964., 10766., 11172., 11578., 11984., 12861., 13282., 13703., 14124., 15076., 15512., 15948., 16384., 12148., 12616., 13084., 13552., 14368., 14848., 15328., 15808., 16684., 17176., 17668., 18160., 19096., 19600., 20104., 20608., 15312., 15904., 16496., 17088., 18144., 18752., 19360., 19968., 21104., 21728., 22352., 22976., 24192., 24832., 25472., 26112., 20540., 21272., 22004., 22736., 24048., 24800., 25552., 26304., 27716., 28488., 29260., 30032., 31544., 32336., 33128., 33920., 16268., 16952., 17636., 18320., 19584., 20288., 20992., 21696., 23060., 23784., 24508., 25232., 26696., 27440., 28184., 28928., 14044., 14680., 15316., 15952., 17168., 17824., 18480., 19136., 20452., 21128., 21804., 22480., 23896., 24592., 25288., 25984., 11600., 12064., 12528., 12992., 13920., 14400., 14880., 15360., 16368., 16864., 17360., 17856., 18944., 19456., 19968., 20480.,  9460.,  9800., 10140., 10480., 11168., 11520., 11872., 12224., 12972., 13336., 13700., 14064., 14872., 15248., 15624., 16000.,  8509.,  8890.,  9271.,  9652., 10270., 10660., 11050., 11440., 12103., 12502., 12901., 13300., 14008., 14416., 14824., 15232., 12916., 13384., 13852., 14320., 15136., 15616., 16096., 16576., 17452., 17944., 18436., 18928., 19864., 20368., 20872., 21376., 12807., 13374., 13941., 14508., 15486., 16068., 16650., 17232., 18285., 18882., 19479., 20076., 21204., 21816., 22428., 23040.,  9987., 10486., 10985., 11484., 12394., 12908., 13422., 13936., 14921., 15450., 15979., 16508., 17568., 18112., 18656., 19200.,  9215.,  9646., 10077., 10508., 11350., 11796., 12242., 12688., 13605., 14066., 14527., 14988., 15980., 16456., 16932., 17408.,  9412.,  9704.,  9996., 10288., 10928., 11232., 11536., 11840., 12540., 12856., 13172., 13488., 14248., 14576., 14904., 15232.,  6445.,  6650.,  6855.,  7060.,  7534.,  7748.,  7962.,  8176.,  8695.,  8918.,  9141.,  9364.,  9928., 10160., 10392., 10624.,  5265.,  5442.,  5619.,  5796.,  6242.,  6428.,  6614.,  6800.,  7291.,  7486.,  7681.,  7876.,  8412.,  8616.,  8820.,  9024.,  6692.,  6952.,  7212.,  7472.,  8080.,  8352.,  8624.,  8896.,  9564.,  9848., 10132., 10416., 11144., 11440., 11736., 12032., 10003., 10358., 10713., 11068., 11866., 12236., 12606., 12976., 13849., 14234., 14619., 15004., 15952., 16352., 16752., 17152., 11535., 11950., 12365., 12780., 13638., 14068., 14498., 14928., 15861., 16306., 16751., 17196., 18204., 18664., 19124., 19584., 13067., 13542., 14017., 14492., 15410., 15900., 16390., 16880., 17873., 18378., 18883., 19388., 20456., 20976., 21496., 22016., 10164., 10568., 10972., 11376., 12128., 12544., 12960., 13376., 14188., 14616., 15044., 15472., 16344., 16784., 17224., 17664.,  7169.,  7490.,  7811.,  8132.,  8690.,  9020.,  9350.,  9680., 10283., 10622., 10961., 11300., 11948., 12296., 12644., 12992.,  6196.,  6472.,  6748.,  7024.,  7648.,  7936.,  8224.,  8512.,  9196.,  9496.,  9796., 10096., 10840., 11152., 11464., 11776., 10000., 10400., 10800., 11200., 12064., 12480., 12896., 13312., 14256., 14688., 15120., 15552., 16576., 17024., 17472., 17920., 13052., 13592., 14132., 14672., 15792., 16352., 16912., 17472., 18692., 19272., 19852., 20432., 21752., 22352., 22952., 23552., 15052., 15672., 16292., 16912., 18112., 18752., 19392., 20032., 21332., 21992., 22652., 23312., 24712., 25392., 26072., 26752., 17052., 17752., 18452., 19152., 20432., 21152., 21872., 22592., 23972., 24712., 25452., 26192., 27672., 28432., 29192., 29952., 14800., 15392., 15984., 16576., 17632., 18240., 18848., 19456., 20592., 21216., 21840., 22464., 23680., 24320., 24960., 25600., 11508., 11976., 12444., 12912., 13728., 14208., 14688., 15168., 16044., 16536., 17028., 17520., 18456., 18960., 19464., 19968., 12219., 12614., 13009., 13404., 14242., 14652., 15062., 15472., 16385., 16810., 17235., 17660., 18648., 19088., 19528., 19968., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 16389., 17098., 17807., 18516., 19926., 20660., 21394., 22128., 23663., 24422., 25181., 25940., 27600., 28384., 29168., 29952., 18729., 19474., 20219., 20964., 22410., 23180., 23950., 24720., 26291., 27086., 27881., 28676., 30372., 31192., 32012., 32832., 16220., 16856., 17492., 18128., 19344., 20000., 20656., 21312., 22628., 23304., 23980., 24656., 26072., 26768., 27464., 28160., 12939., 13446., 13953., 14460., 15378., 15900., 16422., 16944., 17937., 18474., 19011., 19548., 20616., 21168., 21720., 22272., 10271., 10702., 11133., 11564., 12438., 12884., 13330., 13776., 14725., 15186., 15647., 16108., 17132., 17608., 18084., 18560., 12188., 12760., 13332., 13904., 15056., 15648., 16240., 16832., 18084., 18696., 19308., 19920., 21272., 21904., 22536., 23168., 16925., 17658., 18391., 19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424., 29232., 30040., 30848., 19265., 20034., 20803., 21572., 23042., 23836., 24630., 25424., 27019., 27838., 28657., 29476., 31196., 32040., 32884., 33728., 18533., 19338., 20143., 20948., 22454., 23284., 24114., 24944., 26575., 27430., 28285., 29140., 30896., 31776., 32656., 33536., 17420., 18104., 18788., 19472., 20736., 21440., 22144., 22848., 24212., 24936., 25660., 26384., 27848., 28592., 29336., 30080., 12143., 12686., 13229., 13772., 14726., 15284., 15842., 16400., 17429., 18002., 18575., 19148., 20252., 20840., 21428., 22016., 10371., 10838., 11305., 11772., 12682., 13164., 13646., 14128., 15113., 15610., 16107., 16604., 17664., 18176., 18688., 19200., 15436., 16056., 16676., 17296., 18496., 19136., 19776., 20416., 21716., 22376., 23036., 23696., 25096., 25776., 26456., 27136., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 12284., 12824., 13364., 13904., 15024., 15584., 16144., 16704., 17924., 18504., 19084., 19664., 20984., 21584., 22184., 22784., 10131., 10518., 10905., 11292., 12090., 12492., 12894., 13296., 14169., 14586., 15003., 15420., 16368., 16800., 17232., 17664., 12260., 12712., 13164., 13616., 14416., 14880., 15344., 15808., 16668., 17144., 17620., 18096., 19016., 19504., 19992., 20480., 16848., 17440., 18032., 18624., 19680., 20288., 20896., 21504., 22640., 23264., 23888., 24512., 25728., 26368., 27008., 27648., 16268., 16952., 17636., 18320., 19584., 20288., 20992., 21696., 23060., 23784., 24508., 25232., 26696., 27440., 28184., 28928., 14044., 14680., 15316., 15952., 17168., 17824., 18480., 19136., 20452., 21128., 21804., 22480., 23896., 24592., 25288., 25984., 13868., 14456., 15044., 15632., 16800., 17408., 18016., 18624., 19892., 20520., 21148., 21776., 23144., 23792., 24440., 25088., 13136., 13600., 14064., 14528., 15456., 15936., 16416., 16896., 17904., 18400., 18896., 19392., 20480., 20992., 21504., 22016.,  7524.,  7848.,  8172.,  8496.,  9168.,  9504.,  9840., 10176., 10908., 11256., 11604., 11952., 12744., 13104., 13464., 13824.,  9249.,  9602.,  9955., 10308., 10898., 11260., 11622., 11984., 12619., 12990., 13361., 13732., 14412., 14792., 15172., 15552., 10980., 11432., 11884., 12336., 13136., 13600., 14064., 14528., 15388., 15864., 16340., 16816., 17736., 18224., 18712., 19200.,  9987., 10486., 10985., 11484., 12394., 12908., 13422., 13936., 14921., 15450., 15979., 16508., 17568., 18112., 18656., 19200.,  9215.,  9646., 10077., 10508., 11350., 11796., 12242., 12688., 13605., 14066., 14527., 14988., 15980., 16456., 16932., 17408., 10491., 10854., 11217., 11580., 12354., 12732., 13110., 13488., 14337., 14730., 15123., 15516., 16440., 16848., 17256., 17664.,  7476.,  7752.,  8028.,  8304.,  8928.,  9216.,  9504.,  9792., 10476., 10776., 11076., 11376., 12120., 12432., 12744., 13056.,  5265.,  5442.,  5619.,  5796.,  6242.,  6428.,  6614.,  6800.,  7291.,  7486.,  7681.,  7876.,  8412.,  8616.,  8820.,  9024.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 16925., 17658., 18391., 19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424., 29232., 30040., 30848., 18321., 19170., 20019., 20868., 22418., 23292., 24166., 25040., 26715., 27614., 28513., 29412., 31212., 32136., 33060., 33984., 18549., 19370., 20191., 21012., 22534., 23380., 24226., 25072., 26719., 27590., 28461., 29332., 31104., 32000., 32896., 33792., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 16389., 17098., 17807., 18516., 19926., 20660., 21394., 22128., 23663., 24422., 25181., 25940., 27600., 28384., 29168., 29952., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 16925., 17658., 18391., 19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424., 29232., 30040., 30848., 19265., 20034., 20803., 21572., 23042., 23836., 24630., 25424., 27019., 27838., 28657., 29476., 31196., 32040., 32884., 33728., 18549., 19370., 20191., 21012., 22534., 23380., 24226., 25072., 26719., 27590., 28461., 29332., 31104., 32000., 32896., 33792., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 16389., 17098., 17807., 18516., 19926., 20660., 21394., 22128., 23663., 24422., 25181., 25940., 27600., 28384., 29168., 29952., 18729., 19474., 20219., 20964., 22410., 23180., 23950., 24720., 26291., 27086., 27881., 28676., 30372., 31192., 32012., 32832., 16925., 17658., 18391., 19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424., 29232., 30040., 30848., 19265., 20034., 20803., 21572., 23042., 23836., 24630., 25424., 27019., 27838., 28657., 29476., 31196., 32040., 32884., 33728., 18533., 19338., 20143., 20948., 22454., 23284., 24114., 24944., 26575., 27430., 28285., 29140., 30896., 31776., 32656., 33536., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1956.,  2666.,  3400.,  3670.,  3940.,  4210.,  3380.,  2541.,  3380.,  4532.,  5690.,  6000.,  6310.,  6620.,  5260.,  3914.,  4990.,  6620.,  8225.,  8550.,  8875.,  9200.,  7250.,  5350.,  6670.,  8780., 10825., 11150., 11475., 11800.,  9250.,  6790.,  8350., 10940., 13425., 13750., 14075., 14400., 11250.,  8230.,  5852.,  7596.,  9230.,  9440.,  9650.,  9860.,  7620.,  5510.,  3648.,  4670.,  5590.,  5710.,  5830.,  5950.,  4520.,  3207., 11532., 15098., 18520., 18790., 19060., 19330., 15140., 11109., 14468., 18868., 23050., 23360., 23670., 23980., 18700., 13658., 16750., 21740., 26425., 26750., 27075., 27400., 21250., 15430., 18430., 23900., 29025., 29350., 29675., 30000., 23250., 16870., 20110., 26060., 31625., 31950., 32275., 32600., 25250., 18310., 13580., 17452., 20990., 21200., 21410., 21620., 16580., 11894.,  8184., 10382., 12310., 12430., 12550., 12670.,  9560.,  6735., 21108., 27530., 33640., 33910., 34180., 34450., 26900., 19677., 25556., 33204., 40410., 40720., 41030., 41340., 32140., 23402., 28510., 36860., 44625., 44950., 45275., 45600., 35250., 25510., 30190., 39020., 47225., 47550., 47875., 48200., 37250., 26950., 31870., 41180., 49825., 50150., 50475., 50800., 39250., 28390., 21308., 27308., 32750., 32960., 33170., 33380., 25540., 18278., 12720., 16094., 19030., 19150., 19270., 19390., 14600., 10263.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8225.,  8550.,  8875.,  9200., 10825., 11150., 11475., 11800., 13425., 13750., 14075., 14400., 26425., 26750., 27075., 27400., 29025., 29350., 29675., 30000., 31625., 31950., 32275., 32600., 44625., 44950., 45275., 45600., 47225., 47550., 47875., 48200., 49825., 50150., 50475., 50800.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3822.,  3912.,  5206.,  5332.,  6635.,  6800.,  7160.,  7340.,  7685.,  7880.,  8210.,  8420.,  6586.,  6760.,  4947.,  5082.,  6592.,  6760.,  8832.,  9064., 11080., 11380., 11680., 12000., 12280., 12620., 12880., 13240., 10224., 10520.,  7600.,  7828.,  9710.,  9980., 12870., 13240., 15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 14050., 14500., 10355., 10700., 12950., 13340., 17030., 17560., 20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600., 17890., 18500., 13115., 13580., 16190., 16700., 21190., 21880., 25975., 26850., 26600., 27500., 27225., 28150., 27850., 28800., 21730., 22500., 15875., 16460., 11248., 11704., 14576., 15192., 17680., 18460., 18080., 18880., 18480., 19300., 18880., 19720., 14560., 15240., 10504., 11020.,  6918.,  7296.,  8830.,  9340., 10535., 11180., 10760., 11420., 10985., 11660., 11210., 11900.,  8482.,  9040.,  5991.,  6414., 22470., 23064., 29398., 30196., 36035., 37040., 36560., 37580., 37085., 38120., 37610., 38660., 29434., 30280., 21579., 22218., 28096., 28936., 36608., 37736., 44680., 46100., 45280., 46720., 45880., 47340., 46480., 47960., 36208., 37400., 26416., 27316., 32390., 33500., 41990., 43480., 50975., 52850., 51600., 53500., 52225., 54150., 52850., 54800., 40930., 42500., 29675., 30860., 35630., 36860., 46150., 47800., 55975., 58050., 56600., 58700., 57225., 59350., 57850., 60000., 44770., 46500., 32435., 33740., 38870., 40220., 50310., 52120., 60975., 63250., 61600., 63900., 62225., 64550., 62850., 65200., 48610., 50500., 35195., 36620., 26032., 27160., 33392., 34904., 40080., 41980., 40480., 42400., 40880., 42820., 41280., 43240., 31584., 33160., 22600., 23788., 15486., 16368., 19582., 20764., 23135., 24620., 23360., 24860., 23585., 25100., 23810., 25340., 17890., 19120., 12543., 13470., 23070., 23784., 30038., 30996., 36635., 37840., 37160., 38380., 37685., 38920., 38210., 39460., 29754., 30760., 21699., 22458., 17344., 18088., 22400., 23400., 27080., 28340., 27680., 28960., 28280., 29580., 28880., 30200., 22256., 23320., 16048., 16852., 12446., 13244., 15814., 16888., 18775., 20130., 19400., 20780., 20025., 21430., 20650., 22080., 15586., 16740., 10979., 11852.,  9158.,  9692., 11782., 12504., 14175., 15090., 14800., 15740., 15425., 16390., 16050., 17040., 12258., 13060.,  8747.,  9356.,  9710.,  9980., 12870., 13240., 15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 14050., 14500., 10355., 10700.,  7024.,  7288.,  9200.,  9560., 11280., 11740., 11680., 12160., 12080., 12580., 12480., 13000.,  9696., 10120.,  7048.,  7372.,  4470.,  4704.,  5758.,  6076.,  6935.,  7340.,  7160.,  7580.,  7385.,  7820.,  7610.,  8060.,  5794.,  6160.,  4119.,  4398.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600., 25975., 26850., 26600., 27500., 27225., 28150., 27850., 28800., 50975., 52850., 51600., 53500., 52225., 54150., 52850., 54800., 55975., 58050., 56600., 58700., 57225., 59350., 57850., 60000., 60975., 63250., 61600., 63900., 62225., 64550., 62850., 65200., 18775., 20130., 19400., 20780., 20025., 21430., 20650., 22080., 14175., 15090., 14800., 15740., 15425., 16390., 16050., 17040., 15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2178.,  2268.,  2358.,  2448.,  2862.,  2988.,  3114.,  3240.,  4081.,  4246.,  4411.,  4576.,  4540.,  4720.,  4900.,  5080.,  4999.,  5194.,  5389.,  5584.,  5458.,  5668.,  5878.,  6088.,  4358.,  4532.,  4706.,  4880.,  3359.,  3494.,  3629.,  3764.,  4568.,  4736.,  4904.,  5072.,  5912.,  6144.,  6376.,  6608.,  8228.,  8528.,  8828.,  9128.,  8832.,  9152.,  9472.,  9792.,  9436.,  9776., 10116., 10456., 10040., 10400., 10760., 11120.,  7928.,  8224.,  8520.,  8816.,  6012.,  6240.,  6468.,  6696.,  7630.,  7900.,  8170.,  8440.,  9754., 10124., 10494., 10864., 13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533., 15058., 15583., 16108., 15182., 15732., 16282., 16832., 11842., 12292., 12742., 13192.,  8845.,  9190.,  9535.,  9880., 10918., 11308., 11698., 12088., 13818., 14348., 14878., 15408., 18427., 19102., 19777., 20452., 19076., 19776., 20476., 21176., 19725., 20450., 21175., 21900., 20374., 21124., 21874., 22624., 15778., 16388., 16998., 17608., 11685., 12150., 12615., 13080., 14206., 14716., 15226., 15736., 17882., 18572., 19262., 19952., 23619., 24494., 25369., 26244., 24268., 25168., 26068., 26968., 24917., 25842., 26767., 27692., 25566., 26516., 27466., 28416., 19714., 20484., 21254., 22024., 14525., 15110., 15695., 16280., 12440., 12896., 13352., 13808., 15608., 16224., 16840., 17456., 21396., 22176., 22956., 23736., 21920., 22720., 23520., 24320., 22444., 23264., 24084., 24904., 22968., 23808., 24648., 25488., 17880., 18560., 19240., 19920., 13388., 13904., 14420., 14936., 13458., 13836., 14214., 14592., 17150., 17660., 18170., 18680., 20425., 21070., 21715., 22360., 20860., 21520., 22180., 22840., 21295., 21970., 22645., 23320., 21730., 22420., 23110., 23800., 16406., 16964., 17522., 18080., 11559., 11982., 12405., 12828., 10170., 10380., 10590., 10800., 13198., 13484., 13770., 14056., 16089., 16454., 16819., 17184., 16548., 16928., 17308., 17688., 17007., 17402., 17797., 18192., 17466., 17876., 18286., 18696., 13542., 13876., 14210., 14544.,  9879., 10134., 10389., 10644.,  7928.,  8192.,  8456.,  8720., 10136., 10496., 10856., 11216., 12676., 13136., 13596., 14056., 13280., 13760., 14240., 14720., 13884., 14384., 14884., 15384., 14488., 15008., 15528., 16048., 11128., 11552., 11976., 12400.,  8092.,  8416.,  8740.,  9064.,  6838.,  7180.,  7522.,  7864.,  8506.,  8972.,  9438.,  9904., 10923., 11518., 12113., 12708., 11572., 12192., 12812., 13432., 12221., 12866., 13511., 14156., 12870., 13540., 14210., 14880.,  9698., 10244., 10790., 11336.,  6965.,  7382.,  7799.,  8216.,  7630.,  7900.,  8170.,  8440.,  9754., 10124., 10494., 10864., 13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533., 15058., 15583., 16108., 15182., 15732., 16282., 16832., 11842., 12292., 12742., 13192.,  8845.,  9190.,  9535.,  9880., 10918., 11308., 11698., 12088., 13818., 14348., 14878., 15408., 18427., 19102., 19777., 20452., 19076., 19776., 20476., 21176., 19725., 20450., 21175., 21900., 20374., 21124., 21874., 22624., 15778., 16388., 16998., 17608., 11685., 12150., 12615., 13080.,  9848., 10208., 10568., 10928., 12408., 12896., 13384., 13872., 17204., 17824., 18444., 19064., 17728., 18368., 19008., 19648., 18252., 18912., 19572., 20232., 18776., 19456., 20136., 20816., 14680., 15232., 15784., 16336., 11052., 11472., 11892., 12312., 11082., 11388., 11694., 12000., 14174., 14588., 15002., 15416., 16945., 17470., 17995., 18520., 17380., 17920., 18460., 19000., 17815., 18370., 18925., 19480., 18250., 18820., 19390., 19960., 13814., 14276., 14738., 15200.,  9759., 10110., 10461., 10812.,  9714., 10044., 10374., 10704., 12270., 12716., 13162., 13608., 18113., 18678., 19243., 19808., 18572., 19152., 19732., 20312., 19031., 19626., 20221., 20816., 19490., 20100., 20710., 21320., 15558., 16052., 16546., 17040., 12047., 12422., 12797., 13172., 15128., 15488., 15848., 16208., 19480., 19968., 20456., 20944., 23524., 24144., 24764., 25384., 24128., 24768., 25408., 26048., 24732., 25392., 26052., 26712., 25336., 26016., 26696., 27376., 19448., 20000., 20552., 21104., 14012., 14432., 14852., 15272.,  9886., 10300., 10714., 11128., 12378., 12940., 13502., 14064., 15011., 15726., 16441., 17156., 15660., 16400., 17140., 17880., 16309., 17074., 17839., 18604., 16958., 17748., 18538., 19328., 12674., 13316., 13958., 14600.,  8925.,  9414.,  9903., 10392.,  6838.,  7180.,  7522.,  7864.,  8506.,  8972.,  9438.,  9904., 10923., 11518., 12113., 12708., 11572., 12192., 12812., 13432., 12221., 12866., 13511., 14156., 12870., 13540., 14210., 14880.,  9698., 10244., 10790., 11336.,  6965.,  7382.,  7799.,  8216.,  7630.,  7900.,  8170.,  8440.,  9754., 10124., 10494., 10864., 13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533., 15058., 15583., 16108., 15182., 15732., 16282., 16832., 11842., 12292., 12742., 13192.,  8845.,  9190.,  9535.,  9880.,  7256.,  7520.,  7784.,  8048.,  9208.,  9568.,  9928., 10288., 13012., 13472., 13932., 14392., 13536., 14016., 14496., 14976., 14060., 14560., 15060., 15560., 14584., 15104., 15624., 16144., 11480., 11904., 12328., 12752.,  8716.,  9040.,  9364.,  9688.,  8706.,  8940.,  9174.,  9408., 11198., 11516., 11834., 12152., 13465., 13870., 14275., 14680., 13900., 14320., 14740., 15160., 14335., 14770., 15205., 15640., 14770., 15220., 15670., 16120., 11222., 11588., 11954., 12320.,  7959.,  8238.,  8517.,  8796.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533., 15058., 15583., 16108., 15182., 15732., 16282., 16832., 18427., 19102., 19777., 20452., 19076., 19776., 20476., 21176., 19725., 20450., 21175., 21900., 20374., 21124., 21874., 22624., 23619., 24494., 25369., 26244., 24268., 25168., 26068., 26968., 24917., 25842., 26767., 27692., 25566., 26516., 27466., 28416., 10923., 11518., 12113., 12708., 11572., 12192., 12812., 13432., 12221., 12866., 13511., 14156., 12870., 13540., 14210., 14880., 13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533., 15058., 15583., 16108., 15182., 15732., 16282., 16832., 18427., 19102., 19777., 20452., 19076., 19776., 20476., 21176., 19725., 20450., 21175., 21900., 20374., 21124., 21874., 22624., 15011., 15726., 16441., 17156., 15660., 16400., 17140., 17880., 16309., 17074., 17839., 18604., 16958., 17748., 18538., 19328., 10923., 11518., 12113., 12708., 11572., 12192., 12812., 13432., 12221., 12866., 13511., 14156., 12870., 13540., 14210., 14880., 13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533., 15058., 15583., 16108., 15182., 15732., 16282., 16832.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7311.,  7824.,  9980., 10664., 12745., 13600., 13795., 14680., 14845., 15760., 15895., 16840., 12764., 13520.,  9597., 10164., 12800., 13520., 17168., 18128., 21560., 22760., 22760., 24000., 23960., 25240., 25160., 26480., 19984., 21040., 14864., 15656., 19015., 19960., 25220., 26480., 31325., 32900., 32575., 34200., 33825., 35500., 35075., 36800., 27620., 29000., 20365., 21400., 25495., 26680., 33540., 35120., 41325., 43300., 42575., 44600., 43825., 45900., 45075., 47200., 35300., 37000., 25885., 27160., 31975., 33400., 41860., 43760., 51325., 53700., 52575., 55000., 53825., 56300., 55075., 57600., 42980., 45000., 31405., 32920., 22232., 23408., 28816., 30384., 34960., 36920., 35760., 37760., 36560., 38600., 37360., 39440., 28816., 30480., 20792., 22040., 13683., 14592., 17468., 18680., 20845., 22360., 21295., 22840., 21745., 23320., 22195., 23800., 16796., 18080., 11865., 12828., 12351., 13104., 16380., 17384., 20345., 21600., 21395., 22680., 22445., 23760., 23495., 24840., 18524., 19600., 13677., 14484., 13184., 14096., 17424., 18640., 21560., 23080., 22760., 24320., 23960., 25560., 25160., 26800., 19728., 21040., 14480., 15464., 15223., 16312., 19972., 21424., 24525., 26340., 25775., 27640., 27025., 28940., 28275., 30240., 21988., 23560., 15997., 17176., 19015., 19960., 25220., 26480., 31325., 32900., 32575., 34200., 33825., 35500., 35075., 36800., 27620., 29000., 20365., 21400., 25495., 26680., 33540., 35120., 41325., 43300., 42575., 44600., 43825., 45900., 45075., 47200., 35300., 37000., 25885., 27160., 18008., 18992., 23440., 24752., 28560., 30200., 29360., 31040., 30160., 31880., 30960., 32720., 23952., 25360., 17336., 18392., 11235., 12000., 14396., 15416., 17245., 18520., 17695., 19000., 18145., 19480., 18595., 19960., 14108., 15200.,  9993., 10812., 21231., 22224., 27900., 29224., 34345., 36000., 35395., 37080., 36445., 38160., 37495., 39240., 29404., 30800., 21597., 22644., 17408., 18512., 22800., 24272., 27960., 29800., 29160., 31040., 30360., 32280., 31560., 33520., 24592., 26160., 17936., 19112., 15271., 16504., 19844., 21488., 24125., 26180., 25375., 27480., 26625., 28780., 27875., 30080., 21476., 23240., 15469., 16792., 15223., 16312., 19972., 21424., 24525., 26340., 25775., 27640., 27025., 28940., 28275., 30240., 21988., 23560., 15997., 17176., 19015., 19960., 25220., 26480., 31325., 32900., 32575., 34200., 33825., 35500., 35075., 36800., 27620., 29000., 20365., 21400., 13784., 14576., 18064., 19120., 22160., 23480., 22960., 24320., 23760., 25160., 24560., 26000., 19088., 20240., 13880., 14744.,  8787.,  9408., 11324., 12152., 13645., 14680., 14095., 15160., 14545., 15640., 14995., 16120., 11420., 12320.,  8121.,  8796.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {31325., 32900., 32575., 34200., 33825., 35500., 35075., 36800., 41325., 43300., 42575., 44600., 43825., 45900., 45075., 47200., 51325., 53700., 52575., 55000., 53825., 56300., 55075., 57600., 24525., 26340., 25775., 27640., 27025., 28940., 28275., 30240., 31325., 32900., 32575., 34200., 33825., 35500., 35075., 36800., 41325., 43300., 42575., 44600., 43825., 45900., 45075., 47200., 24125., 26180., 25375., 27480., 26625., 28780., 27875., 30080., 24525., 26340., 25775., 27640., 27025., 28940., 28275., 30240., 31325., 32900., 32575., 34200., 33825., 35500., 35075., 36800.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4083.,  4254.,  4716.,  4896.,  5384.,  5624.,  6228.,  6480.,  7703.,  8018.,  8822.,  9152.,  8621.,  8966.,  9800., 10160.,  9539.,  9914., 10778., 11168., 10457., 10862., 11756., 12176.,  8360.,  8696.,  9412.,  9760.,  6453.,  6714.,  7258.,  7528.,  8764.,  9088.,  9808., 10144., 11360., 11808., 12752., 13216., 15852., 16432., 17656., 18256., 17060., 17680., 18944., 19584., 18268., 18928., 20232., 20912., 19476., 20176., 21520., 22240., 15392., 15968., 17040., 17632., 11684., 12128., 12936., 13392.,  9281.,  9614., 10388., 10736., 12088., 12552., 13564., 14048., 17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 17304., 17928., 19084., 19728., 13303., 13786., 14654., 15152., 14129., 14510., 15332., 15728., 18424., 18952., 20028., 20576., 22509., 23194., 24578., 25288., 23807., 24542., 25976., 26736., 25105., 25890., 27374., 28184., 26403., 27238., 28772., 29632., 20312., 21000., 22220., 22928., 14695., 15226., 16142., 16688., 10529., 10958., 11828., 12272., 13496., 14088., 15228., 15840., 17213., 17978., 19442., 20232., 18511., 19326., 20840., 21680., 19809., 20674., 22238., 23128., 21107., 22022., 23636., 24576., 16152., 16904., 18188., 18960., 11735., 12314., 13278., 13872.,  6316.,  6640.,  7312.,  7648.,  8032.,  8480.,  9360.,  9824., 11612., 12192., 13336., 13936., 12660., 13280., 14464., 15104., 13708., 14368., 15592., 16272., 14756., 15456., 16720., 17440., 11552., 12128., 13136., 13728.,  8756.,  9200.,  9960., 10416.,  7611.,  7782.,  8268.,  8448., 10120., 10360., 10996., 11248., 12575., 12890., 13670., 14000., 13445., 13790., 14600., 14960., 14315., 14690., 15530., 15920., 15185., 15590., 16460., 16880., 11752., 12088., 12772., 13120.,  8493.,  8754.,  9258.,  9528.,  9891., 10110., 10620., 10848., 13000., 13304., 13972., 14288., 16039., 16434., 17318., 17728., 16957., 17382., 18296., 18736., 17875., 18330., 19274., 19744., 18793., 19278., 20252., 20752., 14696., 15096., 15876., 16288., 10853., 11162., 11754., 12072.,  9148.,  9472., 10192., 10528., 11872., 12320., 13264., 13728., 15468., 16048., 17272., 17872., 16676., 17296., 18560., 19200., 17884., 18544., 19848., 20528., 19092., 19792., 21136., 21856., 14880., 15456., 16528., 17120., 11044., 11488., 12296., 12752., 10769., 11246., 12164., 12656., 13688., 14344., 15548., 16224., 18317., 19162., 20706., 21576., 19615., 20510., 22104., 23024., 20913., 21858., 23502., 24472., 22211., 23206., 24900., 25920., 17112., 17928., 19276., 20112., 12615., 13242., 14254., 14896.,  9281.,  9614., 10388., 10736., 12088., 12552., 13564., 14048., 17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 17304., 17928., 19084., 19728., 13303., 13786., 14654., 15152., 14129., 14510., 15332., 15728., 18424., 18952., 20028., 20576., 22509., 23194., 24578., 25288., 23807., 24542., 25976., 26736., 25105., 25890., 27374., 28184., 26403., 27238., 28772., 29632., 20312., 21000., 22220., 22928., 14695., 15226., 16142., 16688.,  7468.,  7792.,  8464.,  8800.,  9568., 10016., 10896., 11360., 12508., 13088., 14232., 14832., 13556., 14176., 15360., 16000., 14604., 15264., 16488., 17168., 15652., 16352., 17616., 18336., 12064., 12640., 13648., 14240.,  8884.,  9328., 10088., 10544.,  5355.,  5574.,  6108.,  6336.,  6984.,  7288.,  7988.,  8304.,  8495.,  8890.,  9750., 10160.,  9365.,  9790., 10680., 11120., 10235., 10690., 11610., 12080., 11105., 11590., 12540., 13040.,  8360.,  8760.,  9508.,  9920.,  5853.,  6162.,  6714.,  7032.,  7251.,  7518.,  8076.,  8352.,  9352.,  9720., 10452., 10832., 14391., 14866., 15830., 16320., 15309., 15814., 16808., 17328., 16227., 16762., 17786., 18336., 17145., 17710., 18764., 19344., 13864., 14328., 15172., 15648., 10901., 11258., 11898., 12264., 13372., 13696., 14416., 14752., 17504., 17952., 18896., 19360., 21484., 22064., 23288., 23888., 22692., 23312., 24576., 25216., 23900., 24560., 25864., 26544., 25108., 25808., 27152., 27872., 19488., 20064., 21136., 21728., 14244., 14688., 15496., 15952., 10529., 10958., 11828., 12272., 13496., 14088., 15228., 15840., 17213., 17978., 19442., 20232., 18511., 19326., 20840., 21680., 19809., 20674., 22238., 23128., 21107., 22022., 23636., 24576., 16152., 16904., 18188., 18960., 11735., 12314., 13278., 13872., 10769., 11246., 12164., 12656., 13688., 14344., 15548., 16224., 18317., 19162., 20706., 21576., 19615., 20510., 22104., 23024., 20913., 21858., 23502., 24472., 22211., 23206., 24900., 25920., 17112., 17928., 19276., 20112., 12615., 13242., 14254., 14896.,  9281.,  9614., 10388., 10736., 12088., 12552., 13564., 14048., 17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 17304., 17928., 19084., 19728., 13303., 13786., 14654., 15152., 12460., 12784., 13456., 13792., 16224., 16672., 17552., 18016., 19804., 20384., 21528., 22128., 20852., 21472., 22656., 23296., 21900., 22560., 23784., 24464., 22948., 23648., 24912., 25632., 17696., 18272., 19280., 19872., 12852., 13296., 14056., 14512.,  6939.,  7206.,  7788.,  8064.,  8968.,  9336., 10100., 10480., 10815., 11290., 12230., 12720., 11685., 12190., 13160., 13680., 12555., 13090., 14090., 14640., 13425., 13990., 15020., 15600., 10088., 10552., 11364., 11840.,  7053.,  7410.,  8010.,  8376.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 22509., 23194., 24578., 25288., 23807., 24542., 25976., 26736., 25105., 25890., 27374., 28184., 26403., 27238., 28772., 29632., 17213., 17978., 19442., 20232., 18511., 19326., 20840., 21680., 19809., 20674., 22238., 23128., 21107., 22022., 23636., 24576., 18317., 19162., 20706., 21576., 19615., 20510., 22104., 23024., 20913., 21858., 23502., 24472., 22211., 23206., 24900., 25920., 17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 22509., 23194., 24578., 25288., 23807., 24542., 25976., 26736., 25105., 25890., 27374., 28184., 26403., 27238., 28772., 29632., 17213., 17978., 19442., 20232., 18511., 19326., 20840., 21680., 19809., 20674., 22238., 23128., 21107., 22022., 23636., 24576., 18317., 19162., 20706., 21576., 19615., 20510., 22104., 23024., 20913., 21858., 23502., 24472., 22211., 23206., 24900., 25920., 17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5051.,  5222.,  5393.,  5564.,  6052.,  6232.,  6412.,  6592.,  7008.,  7248.,  7488.,  7728.,  8364.,  8616.,  8868.,  9120.,  9779., 10094., 10409., 10724., 11554., 11884., 12214., 12544., 10689., 11034., 11379., 11724., 12584., 12944., 13304., 13664., 11599., 11974., 12349., 12724., 13614., 14004., 14394., 14784., 12509., 12914., 13319., 13724., 14644., 15064., 15484., 15904., 11712., 12048., 12384., 12720., 13484., 13832., 14180., 14528.,  8421.,  8682.,  8943.,  9204.,  9766., 10036., 10306., 10576.,  9652.,  9976., 10300., 10624., 11344., 11680., 12016., 12352., 12864., 13312., 13760., 14208., 15184., 15648., 16112., 16576., 17620., 18200., 18780., 19360., 20632., 21232., 21832., 22432., 18844., 19464., 20084., 20704., 22016., 22656., 23296., 23936., 20068., 20728., 21388., 22048., 23400., 24080., 24760., 25440., 21292., 21992., 22692., 23392., 24784., 25504., 26224., 26944., 19456., 20032., 20608., 21184., 22352., 22944., 23536., 24128., 14604., 15048., 15492., 15936., 16840., 17296., 17752., 18208.,  8629.,  8962.,  9295.,  9628., 10444., 10792., 11140., 11488., 11232., 11696., 12160., 12624., 13716., 14200., 14684., 15168., 16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 17088., 17712., 18336., 18960., 20244., 20888., 21532., 22176., 13707., 14190., 14673., 15156., 16138., 16636., 17134., 17632., 12133., 12514., 12895., 13276., 14140., 14536., 14932., 15328., 16672., 17200., 17728., 18256., 19412., 19960., 20508., 21056., 20589., 21274., 21959., 22644., 24126., 24836., 25546., 26256., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 23377., 24162., 24947., 25732., 27314., 28124., 28934., 29744., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488., 20992., 21680., 22368., 23056., 24404., 25112., 25820., 26528., 16443., 16974., 17505., 18036., 19066., 19612., 20158., 20704., 11029., 11458., 11887., 12316., 13228., 13672., 14116., 14560., 15968., 16560., 17152., 17744., 18964., 19576., 20188., 20800., 21181., 21946., 22711., 23476., 25038., 25828., 26618., 27408., 22575., 23390., 24205., 25020., 26632., 27472., 28312., 29152., 23969., 24834., 25699., 26564., 28226., 29116., 30006., 30896., 25363., 26278., 27193., 28108., 29820., 30760., 31700., 32640., 22848., 23600., 24352., 25104., 26516., 27288., 28060., 28832., 18667., 19246., 19825., 20404., 21482., 22076., 22670., 23264.,  8148.,  8472.,  8796.,  9120.,  9808., 10144., 10480., 10816.,  9728., 10176., 10624., 11072., 11984., 12448., 12912., 13376., 12788., 13368., 13948., 14528., 15704., 16304., 16904., 17504., 13820., 14440., 15060., 15680., 16896., 17536., 18176., 18816., 14852., 15512., 16172., 16832., 18088., 18768., 19448., 20128., 15884., 16584., 17284., 17984., 19280., 20000., 20720., 21440., 11776., 12352., 12928., 13504., 14544., 15136., 15728., 16320.,  8748.,  9192.,  9636., 10080., 10888., 11344., 11800., 12256.,  5771.,  5942.,  6113.,  6284.,  6756.,  6936.,  7116.,  7296.,  7968.,  8208.,  8448.,  8688.,  9324.,  9576.,  9828., 10080.,  9923., 10238., 10553., 10868., 11650., 11980., 12310., 12640., 10737., 11082., 11427., 11772., 12584., 12944., 13304., 13664., 11551., 11926., 12301., 12676., 13518., 13908., 14298., 14688., 12365., 12770., 13175., 13580., 14452., 14872., 15292., 15712.,  9920., 10256., 10592., 10928., 11628., 11976., 12324., 12672.,  8085.,  8346.,  8607.,  8868.,  9414.,  9684.,  9954., 10224.,  8427.,  8646.,  8865.,  9084.,  9620.,  9848., 10076., 10304., 10912., 11216., 11520., 11824., 12524., 12840., 13156., 13472., 13059., 13454., 13849., 14244., 15154., 15564., 15974., 16384., 13969., 14394., 14819., 15244., 16184., 16624., 17064., 17504., 14879., 15334., 15789., 16244., 17214., 17684., 18154., 18624., 15789., 16274., 16759., 17244., 18244., 18744., 19244., 19744., 13056., 13456., 13856., 14256., 15084., 15496., 15908., 16320.,  8981.,  9290.,  9599.,  9908., 10518., 10836., 11154., 11472.,  8372.,  8696.,  9020.,  9344., 10064., 10400., 10736., 11072., 12864., 13312., 13760., 14208., 15184., 15648., 16112., 16576., 17876., 18456., 19036., 19616., 20888., 21488., 22088., 22688., 19100., 19720., 20340., 20960., 22272., 22912., 23552., 24192., 20324., 20984., 21644., 22304., 23656., 24336., 25016., 25696., 21548., 22248., 22948., 23648., 25040., 25760., 26480., 27200., 20480., 21056., 21632., 22208., 23376., 23968., 24560., 25152., 17420., 17864., 18308., 18752., 19656., 20112., 20568., 21024., 13509., 13986., 14463., 14940., 15900., 16392., 16884., 17376., 17312., 17968., 18624., 19280., 20564., 21240., 21916., 22592., 22285., 23130., 23975., 24820., 26462., 27332., 28202., 29072., 23679., 24574., 25469., 26364., 28056., 28976., 29896., 30816., 25073., 26018., 26963., 27908., 29650., 30620., 31590., 32560., 26467., 27462., 28457., 29452., 31244., 32264., 33284., 34304., 22656., 23472., 24288., 25104., 26580., 27416., 28252., 29088., 16283., 16910., 17537., 18164., 19290., 19932., 20574., 21216.,  8629.,  8962.,  9295.,  9628., 10444., 10792., 11140., 11488., 11232., 11696., 12160., 12624., 13716., 14200., 14684., 15168., 16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 17088., 17712., 18336., 18960., 20244., 20888., 21532., 22176., 13707., 14190., 14673., 15156., 16138., 16636., 17134., 17632., 12133., 12514., 12895., 13276., 14140., 14536., 14932., 15328., 16672., 17200., 17728., 18256., 19412., 19960., 20508., 21056., 20589., 21274., 21959., 22644., 24126., 24836., 25546., 26256., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 23377., 24162., 24947., 25732., 27314., 28124., 28934., 29744., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488., 20992., 21680., 22368., 23056., 24404., 25112., 25820., 26528., 16443., 16974., 17505., 18036., 19066., 19612., 20158., 20704.,  7380.,  7704.,  8028.,  8352.,  9040.,  9376.,  9712., 10048., 10752., 11200., 11648., 12096., 13008., 13472., 13936., 14400., 14580., 15160., 15740., 16320., 17496., 18096., 18696., 19296., 15612., 16232., 16852., 17472., 18688., 19328., 19968., 20608., 16644., 17304., 17964., 18624., 19880., 20560., 21240., 21920., 17676., 18376., 19076., 19776., 21072., 21792., 22512., 23232., 14848., 15424., 16000., 16576., 17616., 18208., 18800., 19392., 13100., 13544., 13988., 14432., 15240., 15696., 16152., 16608.,  6331.,  6550.,  6769.,  6988.,  7508.,  7736.,  7964.,  8192.,  7776.,  8080.,  8384.,  8688.,  9388.,  9704., 10020., 10336.,  8851.,  9246.,  9641., 10036., 10898., 11308., 11718., 12128.,  9665., 10090., 10515., 10940., 11832., 12272., 12712., 13152., 10479., 10934., 11389., 11844., 12766., 13236., 13706., 14176., 11293., 11778., 12263., 12748., 13700., 14200., 14700., 15200.,  8192.,  8592.,  8992.,  9392., 10156., 10568., 10980., 11392.,  5829.,  6138.,  6447.,  6756.,  7350.,  7668.,  7986.,  8304.,  7195.,  7462.,  7729.,  7996.,  8580.,  8856.,  9132.,  9408.,  8672.,  9040.,  9408.,  9776., 10540., 10920., 11300., 11680., 12755., 13230., 13705., 14180., 15170., 15660., 16150., 16640., 13665., 14170., 14675., 15180., 16200., 16720., 17240., 17760., 14575., 15110., 15645., 16180., 17230., 17780., 18330., 18880., 15485., 16050., 16615., 17180., 18260., 18840., 19420., 20000., 12352., 12816., 13280., 13744., 14636., 15112., 15588., 16064.,  9029.,  9386.,  9743., 10100., 10758., 11124., 11490., 11856., 10676., 11000., 11324., 11648., 12368., 12704., 13040., 13376., 14912., 15360., 15808., 16256., 17232., 17696., 18160., 18624., 18644., 19224., 19804., 20384., 21656., 22256., 22856., 23456., 19868., 20488., 21108., 21728., 23040., 23680., 24320., 24960., 21092., 21752., 22412., 23072., 24424., 25104., 25784., 26464., 22316., 23016., 23716., 24416., 25808., 26528., 27248., 27968., 19456., 20032., 20608., 21184., 22352., 22944., 23536., 24128., 15628., 16072., 16516., 16960., 17864., 18320., 18776., 19232., 11029., 11458., 11887., 12316., 13228., 13672., 14116., 14560., 15968., 16560., 17152., 17744., 18964., 19576., 20188., 20800., 21181., 21946., 22711., 23476., 25038., 25828., 26618., 27408., 22575., 23390., 24205., 25020., 26632., 27472., 28312., 29152., 23969., 24834., 25699., 26564., 28226., 29116., 30006., 30896., 25363., 26278., 27193., 28108., 29820., 30760., 31700., 32640., 22848., 23600., 24352., 25104., 26516., 27288., 28060., 28832., 18667., 19246., 19825., 20404., 21482., 22076., 22670., 23264., 13509., 13986., 14463., 14940., 15900., 16392., 16884., 17376., 17312., 17968., 18624., 19280., 20564., 21240., 21916., 22592., 22285., 23130., 23975., 24820., 26462., 27332., 28202., 29072., 23679., 24574., 25469., 26364., 28056., 28976., 29896., 30816., 25073., 26018., 26963., 27908., 29650., 30620., 31590., 32560., 26467., 27462., 28457., 29452., 31244., 32264., 33284., 34304., 22656., 23472., 24288., 25104., 26580., 27416., 28252., 29088., 16283., 16910., 17537., 18164., 19290., 19932., 20574., 21216.,  8629.,  8962.,  9295.,  9628., 10444., 10792., 11140., 11488., 11232., 11696., 12160., 12624., 13716., 14200., 14684., 15168., 16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 17088., 17712., 18336., 18960., 20244., 20888., 21532., 22176., 13707., 14190., 14673., 15156., 16138., 16636., 17134., 17632., 10196., 10520., 10844., 11168., 11856., 12192., 12528., 12864., 13824., 14272., 14720., 15168., 16080., 16544., 17008., 17472., 16884., 17464., 18044., 18624., 19800., 20400., 21000., 21600., 17916., 18536., 19156., 19776., 20992., 21632., 22272., 22912., 18948., 19608., 20268., 20928., 22184., 22864., 23544., 24224., 19980., 20680., 21380., 22080., 23376., 24096., 24816., 25536., 15872., 16448., 17024., 17600., 18640., 19232., 19824., 20416., 12844., 13288., 13732., 14176., 14984., 15440., 15896., 16352.,  6379.,  6646.,  6913.,  7180.,  7748.,  8024.,  8300.,  8576.,  9632., 10000., 10368., 10736., 11500., 11880., 12260., 12640., 12387., 12862., 13337., 13812., 14754., 15244., 15734., 16224., 13201., 13706., 14211., 14716., 15688., 16208., 16728., 17248., 14015., 14550., 15085., 15620., 16622., 17172., 17722., 18272., 14829., 15394., 15959., 16524., 17556., 18136., 18716., 19296., 12608., 13072., 13536., 14000., 14828., 15304., 15780., 16256., 11253., 11610., 11967., 12324., 12966., 13332., 13698., 14064.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 20589., 21274., 21959., 22644., 24126., 24836., 25546., 26256., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 23377., 24162., 24947., 25732., 27314., 28124., 28934., 29744., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488., 21181., 21946., 22711., 23476., 25038., 25828., 26618., 27408., 22575., 23390., 24205., 25020., 26632., 27472., 28312., 29152., 23969., 24834., 25699., 26564., 28226., 29116., 30006., 30896., 25363., 26278., 27193., 28108., 29820., 30760., 31700., 32640., 22285., 23130., 23975., 24820., 26462., 27332., 28202., 29072., 23679., 24574., 25469., 26364., 28056., 28976., 29896., 30816., 25073., 26018., 26963., 27908., 29650., 30620., 31590., 32560., 26467., 27462., 28457., 29452., 31244., 32264., 33284., 34304., 16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 20589., 21274., 21959., 22644., 24126., 24836., 25546., 26256., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 23377., 24162., 24947., 25732., 27314., 28124., 28934., 29744., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488., 21181., 21946., 22711., 23476., 25038., 25828., 26618., 27408., 22575., 23390., 24205., 25020., 26632., 27472., 28312., 29152., 23969., 24834., 25699., 26564., 28226., 29116., 30006., 30896., 25363., 26278., 27193., 28108., 29820., 30760., 31700., 32640., 22285., 23130., 23975., 24820., 26462., 27332., 28202., 29072., 23679., 24574., 25469., 26364., 28056., 28976., 29896., 30816., 25073., 26018., 26963., 27908., 29650., 30620., 31590., 32560., 26467., 27462., 28457., 29452., 31244., 32264., 33284., 34304., 16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2325.,  2748.,  3189.,  3648.,  3516.,  4080.,  4668.,  5280.,  6947.,  7716.,  8515.,  9344.,  8783.,  9612., 10471., 11360., 10619., 11508., 12427., 13376., 12455., 13404., 14383., 15392., 10476., 11248., 12044., 12864.,  8609.,  9204.,  9817., 10448.,  9860., 10496., 11156., 11840., 13552., 14400., 15280., 16192., 17404., 18528., 19692., 20896., 19820., 21024., 22268., 23552., 22236., 23520., 24844., 26208., 24652., 26016., 27420., 28864., 19568., 20672., 21808., 22976., 14708., 15552., 16420., 17312.,  6247.,  6940.,  7663.,  8416.,  8820.,  9744., 10708., 11712., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 17220., 18448., 19716., 21024., 13323., 14260., 15227., 16224., 11335., 12124., 12943., 13792., 15348., 16400., 17492., 18624., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 21188., 22544., 23940., 25376., 15595., 16628., 17691., 18784.,  6247.,  6940.,  7663.,  8416.,  8820.,  9744., 10708., 11712., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 17220., 18448., 19716., 21024., 13323., 14260., 15227., 16224.,  8084.,  8672.,  9284.,  9920., 11056., 11840., 12656., 13504., 14124., 15168., 16252., 17376., 16220., 17344., 18508., 19712., 18316., 19520., 20764., 22048., 20412., 21696., 23020., 24384., 16048., 17088., 18160., 19264., 11972., 12768., 13588., 14432.,  4749.,  5196.,  5661.,  6144.,  6812.,  7408.,  8028.,  8672.,  9035.,  9780., 10555., 11360., 10775., 11580., 12415., 13280., 12515., 13380., 14275., 15200., 14255., 15180., 16135., 17120., 11148., 11888., 12652., 13440.,  8121.,  8676.,  9249.,  9840.,  9333.,  9852., 10389., 10944., 12604., 13296., 14012., 14752., 15939., 16868., 17827., 18816., 17775., 18764., 19783., 20832., 19611., 20660., 21739., 22848., 21447., 22556., 23695., 24864., 17004., 17904., 18828., 19776., 12801., 13492., 14201., 14928.,  6020.,  6656.,  7316.,  8000.,  8432.,  9280., 10160., 11072., 13052., 14176., 15340., 16544., 15468., 16672., 17916., 19200., 17884., 19168., 20492., 21856., 20300., 21664., 23068., 24512., 16496., 17600., 18736., 19904., 12916., 13760., 14628., 15520., 11335., 12124., 12943., 13792., 15348., 16400., 17492., 18624., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 21188., 22544., 23940., 25376., 15595., 16628., 17691., 18784.,  6247.,  6940.,  7663.,  8416.,  8820.,  9744., 10708., 11712., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 17220., 18448., 19716., 21024., 13323., 14260., 15227., 16224., 11335., 12124., 12943., 13792., 15348., 16400., 17492., 18624., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 21188., 22544., 23940., 25376., 15595., 16628., 17691., 18784.,  5780.,  6368.,  6980.,  7616.,  7984.,  8768.,  9584., 10432., 12332., 13376., 14460., 15584., 14428., 15552., 16716., 17920., 16524., 17728., 18972., 20256., 18620., 19904., 21228., 22592., 15024., 16064., 17136., 18240., 11716., 12512., 13332., 14176.,  7917.,  8460.,  9021.,  9600., 10780., 11504., 12252., 13024., 13675., 14580., 15515., 16480., 15415., 16380., 17375., 18400., 17155., 18180., 19235., 20320., 18895., 19980., 21095., 22240., 14604., 15472., 16364., 17280., 10521., 11172., 11841., 12528.,  2325.,  2748.,  3189.,  3648.,  3516.,  4080.,  4668.,  5280.,  6947.,  7716.,  8515.,  9344.,  8783.,  9612., 10471., 11360., 10619., 11508., 12427., 13376., 12455., 13404., 14383., 15392., 10476., 11248., 12044., 12864.,  8609.,  9204.,  9817., 10448.,  9860., 10496., 11156., 11840., 13552., 14400., 15280., 16192., 17404., 18528., 19692., 20896., 19820., 21024., 22268., 23552., 22236., 23520., 24844., 26208., 24652., 26016., 27420., 28864., 19568., 20672., 21808., 22976., 14708., 15552., 16420., 17312.,  6247.,  6940.,  7663.,  8416.,  8820.,  9744., 10708., 11712., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 17220., 18448., 19716., 21024., 13323., 14260., 15227., 16224., 11335., 12124., 12943., 13792., 15348., 16400., 17492., 18624., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 21188., 22544., 23940., 25376., 15595., 16628., 17691., 18784.,  6247.,  6940.,  7663.,  8416.,  8820.,  9744., 10708., 11712., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 17220., 18448., 19716., 21024., 13323., 14260., 15227., 16224.,  8084.,  8672.,  9284.,  9920., 11056., 11840., 12656., 13504., 14124., 15168., 16252., 17376., 16220., 17344., 18508., 19712., 18316., 19520., 20764., 22048., 20412., 21696., 23020., 24384., 16048., 17088., 18160., 19264., 11972., 12768., 13588., 14432.,  4749.,  5196.,  5661.,  6144.,  6812.,  7408.,  8028.,  8672.,  9035.,  9780., 10555., 11360., 10775., 11580., 12415., 13280., 12515., 13380., 14275., 15200., 14255., 15180., 16135., 17120., 11148., 11888., 12652., 13440.,  8121.,  8676.,  9249.,  9840.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2973.,  3114.,  3554.,  3704.,  4171.,  4330.,  4824.,  4992.,  4196.,  4408.,  4992.,  5216.,  5836.,  6072.,  6728.,  6976.,  7519.,  7814.,  8594.,  8904.,  9729., 10054., 10924., 11264.,  9339.,  9694., 10534., 10904., 11789., 12174., 13104., 13504., 11159., 11574., 12474., 12904., 13849., 14294., 15284., 15744., 12979., 13454., 14414., 14904., 15909., 16414., 17464., 17984., 11524., 11928., 12736., 13152., 13996., 14424., 15304., 15744.,  8705.,  9026.,  9630.,  9960., 10591., 10930., 11588., 11936.,  8844.,  9096.,  9720.,  9984., 10644., 10920., 11616., 11904., 12464., 12832., 13696., 14080., 14992., 15392., 16352., 16768., 16068., 16568., 17720., 18240., 19452., 19992., 21264., 21824., 18516., 19096., 20328., 20928., 22220., 22840., 24192., 24832., 20964., 21624., 22936., 23616., 24988., 25688., 27120., 27840., 23412., 24152., 25544., 26304., 27756., 28536., 30048., 30848., 21488., 22112., 23296., 23936., 25168., 25824., 27104., 27776., 16636., 17128., 18056., 18560., 19524., 20040., 21040., 21568.,  5699.,  5966.,  6686.,  6968.,  7733.,  8030.,  8840.,  9152.,  9116.,  9512., 10496., 10912., 11956., 12392., 13496., 13952., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 20796., 21512., 22848., 23584., 24980., 25736., 27192., 27968., 17887., 18454., 19490., 20072., 21153., 21750., 22876., 23488., 11683., 12046., 12862., 13240., 14101., 14494., 15400., 15808., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 24508., 25352., 26816., 27680., 29204., 30088., 31672., 32576., 18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512.,  5699.,  5966.,  6686.,  6968.,  7733.,  8030.,  8840.,  9152.,  9116.,  9512., 10496., 10912., 11956., 12392., 13496., 13952., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 20796., 21512., 22848., 23584., 24980., 25736., 27192., 27968., 17887., 18454., 19490., 20072., 21153., 21750., 22876., 23488.,  7916.,  8168.,  8760.,  9024.,  9652.,  9928., 10592., 10880., 10352., 10720., 11520., 11904., 12752., 13152., 14048., 14464., 12644., 13144., 14200., 14720., 15836., 16376., 17552., 18112., 14708., 15288., 16424., 17024., 18220., 18840., 20096., 20736., 16772., 17432., 18648., 19328., 20604., 21304., 22640., 23360., 18836., 19576., 20872., 21632., 22988., 23768., 25184., 25984., 14448., 15072., 16128., 16768., 17872., 18528., 19680., 20352., 11164., 11656., 12488., 12992., 13860., 14376., 15280., 15808.,  3405.,  3546.,  3970.,  4120.,  4571.,  4730.,  5208.,  5376.,  6116.,  6328.,  6912.,  7136.,  7756.,  7992.,  8648.,  8896.,  8879.,  9174.,  9906., 10216., 10993., 11318., 12140., 12480., 10507., 10862., 11654., 12024., 12861., 13246., 14128., 14528., 12135., 12550., 13402., 13832., 14729., 15174., 16116., 16576., 13763., 14238., 15150., 15640., 16597., 17102., 18104., 18624., 12100., 12504., 13248., 13664., 14444., 14872., 15688., 16128., 11121., 11442., 12030., 12360., 12975., 13314., 13956., 14304.,  8701.,  8938.,  9474.,  9720., 10283., 10538., 11128., 11392., 12004., 12344., 13056., 13408., 14156., 14520., 15304., 15680., 15103., 15558., 16498., 16968., 17953., 18438., 19468., 19968., 16923., 17438., 18438., 18968., 20013., 20558., 21648., 22208., 18743., 19318., 20378., 20968., 22073., 22678., 23828., 24448., 20563., 21198., 22318., 22968., 24133., 24798., 26008., 26688., 18308., 18840., 19776., 20320., 21292., 21848., 22856., 23424., 12897., 13314., 14014., 14440., 15167., 15602., 16356., 16800.,  5260.,  5512.,  6136.,  6400.,  7060.,  7336.,  8032.,  8320.,  8368.,  8736.,  9600.,  9984., 10896., 11296., 12256., 12672., 13508., 14008., 15160., 15680., 16892., 17432., 18704., 19264., 15956., 16536., 17768., 18368., 19660., 20280., 21632., 22272., 18404., 19064., 20376., 21056., 22428., 23128., 24560., 25280., 20852., 21592., 22984., 23744., 25196., 25976., 27488., 28288., 19440., 20064., 21248., 21888., 23120., 23776., 25056., 25728., 17148., 17640., 18568., 19072., 20036., 20552., 21552., 22080., 11683., 12046., 12862., 13240., 14101., 14494., 15400., 15808., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 24508., 25352., 26816., 27680., 29204., 30088., 31672., 32576., 18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512.,  5699.,  5966.,  6686.,  6968.,  7733.,  8030.,  8840.,  9152.,  9116.,  9512., 10496., 10912., 11956., 12392., 13496., 13952., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 20796., 21512., 22848., 23584., 24980., 25736., 27192., 27968., 17887., 18454., 19490., 20072., 21153., 21750., 22876., 23488., 11683., 12046., 12862., 13240., 14101., 14494., 15400., 15808., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 24508., 25352., 26816., 27680., 29204., 30088., 31672., 32576., 18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512.,  5356.,  5608.,  6200.,  6464.,  7092.,  7368.,  8032.,  8320.,  8304.,  8672.,  9472.,  9856., 10704., 11104., 12000., 12416., 13156., 13656., 14712., 15232., 16348., 16888., 18064., 18624., 15220., 15800., 16936., 17536., 18732., 19352., 20608., 21248., 17284., 17944., 19160., 19840., 21116., 21816., 23152., 23872., 19348., 20088., 21384., 22144., 23500., 24280., 25696., 26496., 16496., 17120., 18176., 18816., 19920., 20576., 21728., 22400., 14748., 15240., 16072., 16576., 17444., 17960., 18864., 19392.,  7597.,  7834.,  8354.,  8600.,  9147.,  9402.,  9976., 10240.,  9828., 10168., 10880., 11232., 11980., 12344., 13128., 13504., 11855., 12310., 13202., 13672., 14609., 15094., 16076., 16576., 13483., 13998., 14950., 15480., 16477., 17022., 18064., 18624., 15111., 15686., 16698., 17288., 18345., 18950., 20052., 20672., 16739., 17374., 18446., 19096., 20213., 20878., 22040., 22720., 12740., 13272., 14144., 14688., 15596., 16152., 17096., 17664.,  9681., 10098., 10782., 11208., 11919., 12354., 13092., 13536.,  2973.,  3114.,  3554.,  3704.,  4171.,  4330.,  4824.,  4992.,  4196.,  4408.,  4992.,  5216.,  5836.,  6072.,  6728.,  6976.,  7519.,  7814.,  8594.,  8904.,  9729., 10054., 10924., 11264.,  9339.,  9694., 10534., 10904., 11789., 12174., 13104., 13504., 11159., 11574., 12474., 12904., 13849., 14294., 15284., 15744., 12979., 13454., 14414., 14904., 15909., 16414., 17464., 17984., 11524., 11928., 12736., 13152., 13996., 14424., 15304., 15744.,  8705.,  9026.,  9630.,  9960., 10591., 10930., 11588., 11936.,  8844.,  9096.,  9720.,  9984., 10644., 10920., 11616., 11904., 12464., 12832., 13696., 14080., 14992., 15392., 16352., 16768., 16068., 16568., 17720., 18240., 19452., 19992., 21264., 21824., 18516., 19096., 20328., 20928., 22220., 22840., 24192., 24832., 20964., 21624., 22936., 23616., 24988., 25688., 27120., 27840., 23412., 24152., 25544., 26304., 27756., 28536., 30048., 30848., 21488., 22112., 23296., 23936., 25168., 25824., 27104., 27776., 16636., 17128., 18056., 18560., 19524., 20040., 21040., 21568.,  5699.,  5966.,  6686.,  6968.,  7733.,  8030.,  8840.,  9152.,  9116.,  9512., 10496., 10912., 11956., 12392., 13496., 13952., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 20796., 21512., 22848., 23584., 24980., 25736., 27192., 27968., 17887., 18454., 19490., 20072., 21153., 21750., 22876., 23488., 11683., 12046., 12862., 13240., 14101., 14494., 15400., 15808., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 24508., 25352., 26816., 27680., 29204., 30088., 31672., 32576., 18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512.,  5699.,  5966.,  6686.,  6968.,  7733.,  8030.,  8840.,  9152.,  9116.,  9512., 10496., 10912., 11956., 12392., 13496., 13952., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 20796., 21512., 22848., 23584., 24980., 25736., 27192., 27968., 17887., 18454., 19490., 20072., 21153., 21750., 22876., 23488.,  7916.,  8168.,  8760.,  9024.,  9652.,  9928., 10592., 10880., 10352., 10720., 11520., 11904., 12752., 13152., 14048., 14464., 12644., 13144., 14200., 14720., 15836., 16376., 17552., 18112., 14708., 15288., 16424., 17024., 18220., 18840., 20096., 20736., 16772., 17432., 18648., 19328., 20604., 21304., 22640., 23360., 18836., 19576., 20872., 21632., 22988., 23768., 25184., 25984., 14448., 15072., 16128., 16768., 17872., 18528., 19680., 20352., 11164., 11656., 12488., 12992., 13860., 14376., 15280., 15808.,  3405.,  3546.,  3970.,  4120.,  4571.,  4730.,  5208.,  5376.,  6116.,  6328.,  6912.,  7136.,  7756.,  7992.,  8648.,  8896.,  8879.,  9174.,  9906., 10216., 10993., 11318., 12140., 12480., 10507., 10862., 11654., 12024., 12861., 13246., 14128., 14528., 12135., 12550., 13402., 13832., 14729., 15174., 16116., 16576., 13763., 14238., 15150., 15640., 16597., 17102., 18104., 18624., 12100., 12504., 13248., 13664., 14444., 14872., 15688., 16128., 11121., 11442., 12030., 12360., 12975., 13314., 13956., 14304.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4461.,  4602.,  4743.,  4884.,  5294.,  5444.,  5594.,  5744.,  6199.,  6358.,  6517.,  6676.,  7176.,  7344.,  7512.,  7680.,  5492.,  5704.,  5916.,  6128.,  6688.,  6912.,  7136.,  7360.,  7980.,  8216.,  8452.,  8688.,  9368.,  9616.,  9864., 10112.,  8343.,  8638.,  8933.,  9228.,  9966., 10276., 10586., 10896., 11709., 12034., 12359., 12684., 13572., 13912., 14252., 14592.,  9875., 10230., 10585., 10940., 11738., 12108., 12478., 12848., 13721., 14106., 14491., 14876., 15824., 16224., 16624., 17024., 11407., 11822., 12237., 12652., 13510., 13940., 14370., 14800., 15733., 16178., 16623., 17068., 18076., 18536., 18996., 19456., 12939., 13414., 13889., 14364., 15282., 15772., 16262., 16752., 17745., 18250., 18755., 19260., 20328., 20848., 21368., 21888., 10164., 10568., 10972., 11376., 12128., 12544., 12960., 13376., 14188., 14616., 15044., 15472., 16344., 16784., 17224., 17664.,  7041.,  7362.,  7683.,  8004.,  8562.,  8892.,  9222.,  9552., 10155., 10494., 10833., 11172., 11820., 12168., 12516., 12864.,  5788.,  6040.,  6292.,  6544.,  7144.,  7408.,  7672.,  7936.,  8596.,  8872.,  9148.,  9424., 10144., 10432., 10720., 11008.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 11988., 12488., 12988., 13488., 14568., 15088., 15608., 16128., 17308., 17848., 18388., 18928., 20208., 20768., 21328., 21888., 13988., 14568., 15148., 15728., 16888., 17488., 18088., 18688., 19948., 20568., 21188., 21808., 23168., 23808., 24448., 25088., 15988., 16648., 17308., 17968., 19208., 19888., 20568., 21248., 22588., 23288., 23988., 24688., 26128., 26848., 27568., 28288., 17988., 18728., 19468., 20208., 21528., 22288., 23048., 23808., 25228., 26008., 26788., 27568., 29088., 29888., 30688., 31488., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 11788., 12280., 12772., 13264., 14104., 14608., 15112., 15616., 16516., 17032., 17548., 18064., 19024., 19552., 20080., 20608.,  7099.,  7366.,  7633.,  7900.,  8610.,  8892.,  9174.,  9456., 10241., 10538., 10835., 11132., 11992., 12304., 12616., 12928.,  9836., 10232., 10628., 11024., 12000., 12416., 12832., 13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 18220., 18936., 19652., 20368., 21664., 22400., 23136., 23872., 25268., 26024., 26780., 27536., 29032., 29808., 30584., 31360., 14215., 14782., 15349., 15916., 16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224., 23836., 24448.,  8731.,  9094.,  9457.,  9820., 10626., 11004., 11382., 11760., 12641., 13034., 13427., 13820., 14776., 15184., 15592., 16000., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 21420., 22264., 23108., 23952., 25376., 26240., 27104., 27968., 29492., 30376., 31260., 32144., 33768., 34672., 35576., 36480., 14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080., 25788., 26496.,  7099.,  7366.,  7633.,  7900.,  8610.,  8892.,  9174.,  9456., 10241., 10538., 10835., 11132., 11992., 12304., 12616., 12928.,  9836., 10232., 10628., 11024., 12000., 12416., 12832., 13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 18220., 18936., 19652., 20368., 21664., 22400., 23136., 23872., 25268., 26024., 26780., 27536., 29032., 29808., 30584., 31360., 14215., 14782., 15349., 15916., 16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224., 23836., 24448.,  5788.,  6040.,  6292.,  6544.,  7144.,  7408.,  7672.,  7936.,  8596.,  8872.,  9148.,  9424., 10144., 10432., 10720., 11008.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 11988., 12488., 12988., 13488., 14568., 15088., 15608., 16128., 17308., 17848., 18388., 18928., 20208., 20768., 21328., 21888., 13988., 14568., 15148., 15728., 16888., 17488., 18088., 18688., 19948., 20568., 21188., 21808., 23168., 23808., 24448., 25088., 15988., 16648., 17308., 17968., 19208., 19888., 20568., 21248., 22588., 23288., 23988., 24688., 26128., 26848., 27568., 28288., 17988., 18728., 19468., 20208., 21528., 22288., 23048., 23808., 25228., 26008., 26788., 27568., 29088., 29888., 30688., 31488., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 11788., 12280., 12772., 13264., 14104., 14608., 15112., 15616., 16516., 17032., 17548., 18064., 19024., 19552., 20080., 20608.,  3021.,  3162.,  3303.,  3444.,  3822.,  3972.,  4122.,  4272.,  4695.,  4854.,  5013.,  5172.,  5640.,  5808.,  5976.,  6144.,  4980.,  5192.,  5404.,  5616.,  6176.,  6400.,  6624.,  6848.,  7468.,  7704.,  7940.,  8176.,  8856.,  9104.,  9352.,  9600.,  6775.,  7070.,  7365.,  7660.,  8366.,  8676.,  8986.,  9296., 10077., 10402., 10727., 11052., 11908., 12248., 12588., 12928.,  8179.,  8534.,  8889.,  9244., 10010., 10380., 10750., 11120., 11961., 12346., 12731., 13116., 14032., 14432., 14832., 15232.,  9583.,  9998., 10413., 10828., 11654., 12084., 12514., 12944., 13845., 14290., 14735., 15180., 16156., 16616., 17076., 17536., 10987., 11462., 11937., 12412., 13298., 13788., 14278., 14768., 15729., 16234., 16739., 17244., 18280., 18800., 19320., 19840., 10164., 10568., 10972., 11376., 12128., 12544., 12960., 13376., 14188., 14616., 15044., 15472., 16344., 16784., 17224., 17664.,  9121.,  9442.,  9763., 10084., 10674., 11004., 11334., 11664., 12299., 12638., 12977., 13316., 13996., 14344., 14692., 15040.,  5581.,  5818.,  6055.,  6292.,  6798.,  7044.,  7290.,  7536.,  8087.,  8342.,  8597.,  8852.,  9448.,  9712.,  9976., 10240.,  8692.,  9032.,  9372.,  9712., 10400., 10752., 11104., 11456., 12204., 12568., 12932., 13296., 14104., 14480., 14856., 15232., 11063., 11518., 11973., 12428., 13326., 13796., 14266., 14736., 15709., 16194., 16679., 17164., 18212., 18712., 19212., 19712., 12595., 13110., 13625., 14140., 15098., 15628., 16158., 16688., 17721., 18266., 18811., 19356., 20464., 21024., 21584., 22144., 14127., 14702., 15277., 15852., 16870., 17460., 18050., 18640., 19733., 20338., 20943., 21548., 22716., 23336., 23956., 24576., 15659., 16294., 16929., 17564., 18642., 19292., 19942., 20592., 21745., 22410., 23075., 23740., 24968., 25648., 26328., 27008., 13364., 13896., 14428., 14960., 15840., 16384., 16928., 17472., 18412., 18968., 19524., 20080., 21080., 21648., 22216., 22784.,  9185.,  9602., 10019., 10436., 11090., 11516., 11942., 12368., 13067., 13502., 13937., 14372., 15116., 15560., 16004., 16448.,  6812.,  7064.,  7316.,  7568.,  8168.,  8432.,  8696.,  8960.,  9620.,  9896., 10172., 10448., 11168., 11456., 11744., 12032.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 13012., 13512., 14012., 14512., 15592., 16112., 16632., 17152., 18332., 18872., 19412., 19952., 21232., 21792., 22352., 22912., 15012., 15592., 16172., 16752., 17912., 18512., 19112., 19712., 20972., 21592., 22212., 22832., 24192., 24832., 25472., 26112., 17012., 17672., 18332., 18992., 20232., 20912., 21592., 22272., 23612., 24312., 25012., 25712., 27152., 27872., 28592., 29312., 19012., 19752., 20492., 21232., 22552., 23312., 24072., 24832., 26252., 27032., 27812., 28592., 30112., 30912., 31712., 32512., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 12812., 13304., 13796., 14288., 15128., 15632., 16136., 16640., 17540., 18056., 18572., 19088., 20048., 20576., 21104., 21632.,  8731.,  9094.,  9457.,  9820., 10626., 11004., 11382., 11760., 12641., 13034., 13427., 13820., 14776., 15184., 15592., 16000., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 21420., 22264., 23108., 23952., 25376., 26240., 27104., 27968., 29492., 30376., 31260., 32144., 33768., 34672., 35576., 36480., 14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080., 25788., 26496.,  7099.,  7366.,  7633.,  7900.,  8610.,  8892.,  9174.,  9456., 10241., 10538., 10835., 11132., 11992., 12304., 12616., 12928.,  9836., 10232., 10628., 11024., 12000., 12416., 12832., 13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 18220., 18936., 19652., 20368., 21664., 22400., 23136., 23872., 25268., 26024., 26780., 27536., 29032., 29808., 30584., 31360., 14215., 14782., 15349., 15916., 16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224., 23836., 24448.,  8731.,  9094.,  9457.,  9820., 10626., 11004., 11382., 11760., 12641., 13034., 13427., 13820., 14776., 15184., 15592., 16000., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 21420., 22264., 23108., 23952., 25376., 26240., 27104., 27968., 29492., 30376., 31260., 32144., 33768., 34672., 35576., 36480., 14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080., 25788., 26496.,  6812.,  7064.,  7316.,  7568.,  8168.,  8432.,  8696.,  8960.,  9620.,  9896., 10172., 10448., 11168., 11456., 11744., 12032.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 13012., 13512., 14012., 14512., 15592., 16112., 16632., 17152., 18332., 18872., 19412., 19952., 21232., 21792., 22352., 22912., 15012., 15592., 16172., 16752., 17912., 18512., 19112., 19712., 20972., 21592., 22212., 22832., 24192., 24832., 25472., 26112., 17012., 17672., 18332., 18992., 20232., 20912., 21592., 22272., 23612., 24312., 25012., 25712., 27152., 27872., 28592., 29312., 19012., 19752., 20492., 21232., 22552., 23312., 24072., 24832., 26252., 27032., 27812., 28592., 30112., 30912., 31712., 32512., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 12812., 13304., 13796., 14288., 15128., 15632., 16136., 16640., 17540., 18056., 18572., 19088., 20048., 20576., 21104., 21632.,  5165.,  5402.,  5639.,  5876.,  6350.,  6596.,  6842.,  7088.,  7607.,  7862.,  8117.,  8372.,  8936.,  9200.,  9464.,  9728.,  8180.,  8520.,  8860.,  9200.,  9888., 10240., 10592., 10944., 11692., 12056., 12420., 12784., 13592., 13968., 14344., 14720., 10519., 10974., 11429., 11884., 12750., 13220., 13690., 14160., 15101., 15586., 16071., 16556., 17572., 18072., 18572., 19072., 11923., 12438., 12953., 13468., 14394., 14924., 15454., 15984., 16985., 17530., 18075., 18620., 19696., 20256., 20816., 21376., 13327., 13902., 14477., 15052., 16038., 16628., 17218., 17808., 18869., 19474., 20079., 20684., 21820., 22440., 23060., 23680., 14731., 15366., 16001., 16636., 17682., 18332., 18982., 19632., 20753., 21418., 22083., 22748., 23944., 24624., 25304., 25984., 13364., 13896., 14428., 14960., 15840., 16384., 16928., 17472., 18412., 18968., 19524., 20080., 21080., 21648., 22216., 22784., 10241., 10658., 11075., 11492., 12178., 12604., 13030., 13456., 14187., 14622., 15057., 15492., 16268., 16712., 17156., 17600.,  4461.,  4602.,  4743.,  4884.,  5294.,  5444.,  5594.,  5744.,  6199.,  6358.,  6517.,  6676.,  7176.,  7344.,  7512.,  7680.,  5492.,  5704.,  5916.,  6128.,  6688.,  6912.,  7136.,  7360.,  7980.,  8216.,  8452.,  8688.,  9368.,  9616.,  9864., 10112.,  8343.,  8638.,  8933.,  9228.,  9966., 10276., 10586., 10896., 11709., 12034., 12359., 12684., 13572., 13912., 14252., 14592.,  9875., 10230., 10585., 10940., 11738., 12108., 12478., 12848., 13721., 14106., 14491., 14876., 15824., 16224., 16624., 17024., 11407., 11822., 12237., 12652., 13510., 13940., 14370., 14800., 15733., 16178., 16623., 17068., 18076., 18536., 18996., 19456., 12939., 13414., 13889., 14364., 15282., 15772., 16262., 16752., 17745., 18250., 18755., 19260., 20328., 20848., 21368., 21888., 10164., 10568., 10972., 11376., 12128., 12544., 12960., 13376., 14188., 14616., 15044., 15472., 16344., 16784., 17224., 17664.,  7041.,  7362.,  7683.,  8004.,  8562.,  8892.,  9222.,  9552., 10155., 10494., 10833., 11172., 11820., 12168., 12516., 12864.,  5788.,  6040.,  6292.,  6544.,  7144.,  7408.,  7672.,  7936.,  8596.,  8872.,  9148.,  9424., 10144., 10432., 10720., 11008.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 11988., 12488., 12988., 13488., 14568., 15088., 15608., 16128., 17308., 17848., 18388., 18928., 20208., 20768., 21328., 21888., 13988., 14568., 15148., 15728., 16888., 17488., 18088., 18688., 19948., 20568., 21188., 21808., 23168., 23808., 24448., 25088., 15988., 16648., 17308., 17968., 19208., 19888., 20568., 21248., 22588., 23288., 23988., 24688., 26128., 26848., 27568., 28288., 17988., 18728., 19468., 20208., 21528., 22288., 23048., 23808., 25228., 26008., 26788., 27568., 29088., 29888., 30688., 31488., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 11788., 12280., 12772., 13264., 14104., 14608., 15112., 15616., 16516., 17032., 17548., 18064., 19024., 19552., 20080., 20608.,  7099.,  7366.,  7633.,  7900.,  8610.,  8892.,  9174.,  9456., 10241., 10538., 10835., 11132., 11992., 12304., 12616., 12928.,  9836., 10232., 10628., 11024., 12000., 12416., 12832., 13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 18220., 18936., 19652., 20368., 21664., 22400., 23136., 23872., 25268., 26024., 26780., 27536., 29032., 29808., 30584., 31360., 14215., 14782., 15349., 15916., 16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224., 23836., 24448.,  8731.,  9094.,  9457.,  9820., 10626., 11004., 11382., 11760., 12641., 13034., 13427., 13820., 14776., 15184., 15592., 16000., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 21420., 22264., 23108., 23952., 25376., 26240., 27104., 27968., 29492., 30376., 31260., 32144., 33768., 34672., 35576., 36480., 14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080., 25788., 26496.,  7099.,  7366.,  7633.,  7900.,  8610.,  8892.,  9174.,  9456., 10241., 10538., 10835., 11132., 11992., 12304., 12616., 12928.,  9836., 10232., 10628., 11024., 12000., 12416., 12832., 13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 18220., 18936., 19652., 20368., 21664., 22400., 23136., 23872., 25268., 26024., 26780., 27536., 29032., 29808., 30584., 31360., 14215., 14782., 15349., 15916., 16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224., 23836., 24448.,  5788.,  6040.,  6292.,  6544.,  7144.,  7408.,  7672.,  7936.,  8596.,  8872.,  9148.,  9424., 10144., 10432., 10720., 11008.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 11988., 12488., 12988., 13488., 14568., 15088., 15608., 16128., 17308., 17848., 18388., 18928., 20208., 20768., 21328., 21888., 13988., 14568., 15148., 15728., 16888., 17488., 18088., 18688., 19948., 20568., 21188., 21808., 23168., 23808., 24448., 25088., 15988., 16648., 17308., 17968., 19208., 19888., 20568., 21248., 22588., 23288., 23988., 24688., 26128., 26848., 27568., 28288., 17988., 18728., 19468., 20208., 21528., 22288., 23048., 23808., 25228., 26008., 26788., 27568., 29088., 29888., 30688., 31488., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 11788., 12280., 12772., 13264., 14104., 14608., 15112., 15616., 16516., 17032., 17548., 18064., 19024., 19552., 20080., 20608.,  3021.,  3162.,  3303.,  3444.,  3822.,  3972.,  4122.,  4272.,  4695.,  4854.,  5013.,  5172.,  5640.,  5808.,  5976.,  6144.,  4980.,  5192.,  5404.,  5616.,  6176.,  6400.,  6624.,  6848.,  7468.,  7704.,  7940.,  8176.,  8856.,  9104.,  9352.,  9600.,  6775.,  7070.,  7365.,  7660.,  8366.,  8676.,  8986.,  9296., 10077., 10402., 10727., 11052., 11908., 12248., 12588., 12928.,  8179.,  8534.,  8889.,  9244., 10010., 10380., 10750., 11120., 11961., 12346., 12731., 13116., 14032., 14432., 14832., 15232.,  9583.,  9998., 10413., 10828., 11654., 12084., 12514., 12944., 13845., 14290., 14735., 15180., 16156., 16616., 17076., 17536., 10987., 11462., 11937., 12412., 13298., 13788., 14278., 14768., 15729., 16234., 16739., 17244., 18280., 18800., 19320., 19840., 10164., 10568., 10972., 11376., 12128., 12544., 12960., 13376., 14188., 14616., 15044., 15472., 16344., 16784., 17224., 17664.,  9121.,  9442.,  9763., 10084., 10674., 11004., 11334., 11664., 12299., 12638., 12977., 13316., 13996., 14344., 14692., 15040.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1554.,  2142.,  2760.,  3030.,  2460.,  1869.,  2636.,  3564.,  4510.,  4820.,  3860.,  2894.,  3850.,  5140.,  6425.,  6750.,  5350.,  3970.,  5110.,  6760.,  8375.,  8700.,  6850.,  5050.,  6370.,  8380., 10325., 10650.,  8350.,  6130.,  7630., 10000., 12275., 12600.,  9850.,  7210.,  5288.,  6868.,  8350.,  8560.,  6620.,  4790.,  3264.,  4182.,  5010.,  5130.,  3900.,  2769.,  9762., 12798., 15720., 15990., 12540.,  9213., 12140., 15852., 19390., 19700., 15380., 11246., 13930., 18100., 22025., 22350., 17350., 12610., 15190., 19720., 23975., 24300., 18850., 13690., 16450., 21340., 25925., 26250., 20350., 14770., 17710., 22960., 27875., 28200., 21850., 15850., 11912., 15316., 18430., 18640., 14300., 10262.,  7152.,  9078., 10770., 10890.,  8220.,  5793., 17970., 23454., 28680., 28950., 22620., 16557., 21644., 28140., 34270., 34580., 26900., 19598., 24010., 31060., 37625., 37950., 29350., 21250., 25270., 32680., 39575., 39900., 30850., 22330., 26530., 34300., 41525., 41850., 32350., 23410., 27790., 35920., 43475., 43800., 33850., 24490., 18536., 23764., 28510., 28720., 21980., 15734., 11040., 13974., 16530., 16650., 12540.,  8817.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6425.,  6750.,  8375.,  8700., 10325., 10650., 12275., 12600., 22025., 22350., 23975., 24300., 25925., 26250., 27875., 28200., 37625., 37950., 39575., 39900., 41525., 41850., 43475., 43800.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3036.,  3108.,  4182.,  4284.,  5385.,  5520.,  5910.,  6060.,  4794.,  4920.,  3639.,  3738.,  5140.,  5272.,  6944.,  7128.,  8780.,  9020.,  9380.,  9640.,  7504.,  7720.,  5620.,  5788.,  7490.,  7700.,  9990., 10280., 12475., 12850., 13100., 13500., 10370., 10700.,  7685.,  7940.,  9920., 10220., 13110., 13520., 16225., 16750., 16850., 17400., 13250., 13700.,  9755., 10100., 12350., 12740., 16230., 16760., 19975., 20650., 20600., 21300., 16130., 16700., 11825., 12260., 14780., 15260., 19350., 20000., 23725., 24550., 24350., 25200., 19010., 19700., 13895., 14420., 10156., 10576., 13168., 13736., 15980., 16700., 16380., 17120., 12640., 13240.,  9124.,  9580.,  6186.,  6528.,  7902.,  8364.,  9435., 10020.,  9660., 10260.,  7314.,  7800.,  5169.,  5538., 19020., 19524., 24918., 25596., 27449., 28240., 24966., 25708., 18490., 19064., 12263., 12666., 14548., 15064., 18976., 19672., 20684., 21500., 18916., 19688., 13904., 14504.,  9140.,  9564., 10802., 11348., 13958., 14696., 15019., 15890., 13916., 14748., 10114., 10764.,  6581.,  7044.,  8048.,  8492., 10422., 11024., 11409., 12110., 10946., 11608.,  8130.,  8644.,  5515.,  5876.,  7214.,  7556.,  9446.,  9912., 10999., 11530., 11176., 11668.,  8706.,  9084.,  6369.,  6628.,  8300.,  8540., 11030., 11360., 13725., 14150., 14350., 14800., 11330., 11700.,  8375.,  8660.,  5932.,  6160.,  7792.,  8104.,  9580.,  9980.,  9980., 10400.,  7776.,  8120.,  5668.,  5932.,  3738.,  3936.,  4830.,  5100.,  5835.,  6180.,  6060.,  6420.,  4626.,  4920.,  3297.,  3522., 13692., 14052., 18006., 18492., 22185., 22800., 22710., 23340., 17850., 18360., 13143., 13530., 17428., 17944., 22816., 23512., 27980., 28860., 28580., 29480., 22352., 23080., 16372., 16924., 20450., 21140., 26630., 27560., 32475., 33650., 33100., 34300., 25730., 26700., 18725., 19460., 19744., 20460., 23606., 24528., 27201., 28334., 25074., 26168., 17346., 18180., 12539., 13172., 13790., 14404., 16230., 17016., 18471., 19434., 16984., 17908., 11522., 12220.,  8273.,  8804.,  9756., 10268., 11414., 12064., 12941., 13734., 12094., 12848.,  8258.,  8820.,  5927.,  6356.,  5100.,  5456.,  5744.,  6184.,  6316.,  6844.,  5884.,  6368.,  3936.,  4280.,  2788.,  3052.,  2058.,  2240.,  2270.,  2476.,  2491.,  2724.,  2524.,  2708.,  1938.,  2040.,  1425.,  1506.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12475., 12850., 13100., 13500., 16225., 16750., 16850., 17400., 19975., 20650., 20600., 21300., 23725., 24550., 24350., 25200., 15019., 15890., 13916., 14748., 11409., 12110., 10946., 11608., 10999., 11530., 11176., 11668., 13725., 14150., 14350., 14800., 32475., 33650., 33100., 34300., 27201., 28334., 25074., 26168., 18471., 19434., 16984., 17908., 12941., 13734., 12094., 12848.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1776.,  1848.,  1920.,  1992.,  2374.,  2476.,  2578.,  2680.,  3403.,  3538.,  3673.,  3808.,  3862.,  4012.,  4162.,  4312.,  3126.,  3252.,  3378.,  3504.,  2443.,  2542.,  2641.,  2740.,  3620.,  3752.,  3884.,  4016.,  4744.,  4928.,  5112.,  5296.,  6632.,  6872.,  7112.,  7352.,  7236.,  7496.,  7756.,  8016.,  5768.,  5984.,  6200.,  6416.,  4416.,  4584.,  4752.,  4920.,  5938.,  6148.,  6358.,  6568.,  7658.,  7948.,  8238.,  8528., 10431., 10806., 11181., 11556., 11080., 11480., 11880., 12280.,  8698.,  9028.,  9358.,  9688.,  6539.,  6794.,  7049.,  7304.,  8404.,  8704.,  9004.,  9304., 10706., 11116., 11526., 11936., 14325., 14850., 15375., 15900., 14974., 15524., 16074., 16624., 11650., 12100., 12550., 13000.,  8669.,  9014.,  9359.,  9704., 10870., 11260., 11650., 12040., 13754., 14284., 14814., 15344., 18219., 18894., 19569., 20244., 18868., 19568., 20268., 20968., 14602., 15172., 15742., 16312., 10799., 11234., 11669., 12104., 13336., 13816., 14296., 14776., 16802., 17452., 18102., 18752., 22113., 22938., 23763., 24588., 22762., 23612., 24462., 25312., 17554., 18244., 18934., 19624., 12929., 13454., 13979., 14504., 11444., 11864., 12284., 12704., 14376., 14944., 15512., 16080., 19592., 20312., 21032., 21752., 20116., 20856., 21596., 22336., 15656., 16256., 16856., 17456., 11712., 12168., 12624., 13080., 12030., 12372., 12714., 13056., 15342., 15804., 16266., 16728., 18285., 18870., 19455., 20040., 18720., 19320., 19920., 20520., 14142., 14628., 15114., 15600.,  9969., 10338., 10707., 11076., 14880., 15384., 15888., 16392., 18694., 19372., 20050., 20728., 23323., 24114., 24905., 25696., 21926., 22668., 23410., 24152., 16758., 17332., 17906., 18480., 12219., 12622., 13025., 13428., 15908., 16424., 16940., 17456., 20104., 20800., 21496., 22192., 26792., 27608., 28424., 29240., 26820., 27592., 28364., 29136., 21256., 21856., 22456., 23056., 16320., 16744., 17168., 17592., 18370., 18916., 19462., 20008., 23338., 24076., 24814., 25552., 24239., 25110., 25981., 26852., 21496., 22328., 23160., 23992., 15034., 15684., 16334., 16984.,  9243.,  9706., 10169., 10632., 10660., 11104., 11548., 11992., 13330., 13932., 14534., 15136., 13733., 14434., 15135., 15836., 12270., 12932., 13594., 14256.,  8514.,  9028.,  9542., 10056.,  5293.,  5654.,  6015.,  6376.,  6790.,  7132.,  7474.,  7816.,  8442.,  8908.,  9374.,  9840.,  9627., 10158., 10689., 11220.,  9444.,  9936., 10428., 10920.,  7114.,  7492.,  7870.,  8248.,  5183.,  5442.,  5701.,  5960.,  6760.,  7000.,  7240.,  7480.,  8674.,  9004.,  9334.,  9664., 11729., 12154., 12579., 13004., 12378., 12828., 13278., 13728.,  9682., 10052., 10422., 10792.,  7249.,  7534.,  7819.,  8104.,  6260.,  6488.,  6716.,  6944.,  7976.,  8288.,  8600.,  8912., 11208., 11608., 12008., 12408., 11732., 12152., 12572., 12992.,  9256.,  9600.,  9944., 10288.,  7040.,  7304.,  7568.,  7832.,  7278.,  7476.,  7674.,  7872.,  9390.,  9660.,  9930., 10200., 11325., 11670., 12015., 12360., 11760., 12120., 12480., 12840.,  8958.,  9252.,  9546.,  9840.,  6369.,  6594.,  6819.,  7044., 10512., 10872., 11232., 11592., 13254., 13740., 14226., 14712., 18091., 18706., 19321., 19936., 18550., 19180., 19810., 20440., 14518., 15028., 15538., 16048., 10923., 11310., 11697., 12084., 15524., 16040., 16556., 17072., 19592., 20288., 20984., 21680., 25960., 26840., 27720., 28600., 26564., 27464., 28364., 29264., 20616., 21344., 22072., 22800., 15296., 15848., 16400., 16952., 19090., 19780., 20470., 21160., 23914., 24844., 25774., 26704., 31199., 32374., 33549., 34724., 31848., 33048., 34248., 35448., 24442., 25412., 26382., 27352., 17899., 18634., 19369., 20104., 19444., 20160., 20876., 21592., 22994., 23916., 24838., 25760., 29525., 30658., 31791., 32924., 28830., 29924., 31018., 32112., 21506., 22340., 23174., 24008., 15997., 16630., 17263., 17896., 17622., 18236., 18850., 19464., 21690., 22476., 23262., 24048., 29259., 30222., 31185., 32148., 29844., 30768., 31692., 32616., 19594., 20292., 20990., 21688., 13839., 14370., 14901., 15432., 15544., 16056., 16568., 17080., 17314., 17964., 18614., 19264., 19009., 19802., 20595., 21388., 16778., 17532., 18286., 19040., 10514., 11076., 11638., 12200.,  7329.,  7758.,  8187.,  8616.,  7540.,  7896.,  8252.,  8608.,  7848.,  8288.,  8728.,  9168.,  8648.,  9176.,  9704., 10232.,  7572.,  8056.,  8540.,  9024.,  4648.,  4992.,  5336.,  5680.,  3328.,  3592.,  3856.,  4120.,  3934.,  4116.,  4298.,  4480.,  4334.,  4540.,  4746.,  4952.,  4749.,  4982.,  5215.,  5448.,  4864.,  5048.,  5232.,  5416.,  3774.,  3876.,  3978.,  4080.,  2769.,  2850.,  2931.,  3012.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10431., 10806., 11181., 11556., 11080., 11480., 11880., 12280., 14325., 14850., 15375., 15900., 14974., 15524., 16074., 16624., 18219., 18894., 19569., 20244., 18868., 19568., 20268., 20968., 22113., 22938., 23763., 24588., 22762., 23612., 24462., 25312., 24239., 25110., 25981., 26852., 21496., 22328., 23160., 23992., 13733., 14434., 15135., 15836., 12270., 12932., 13594., 14256.,  9627., 10158., 10689., 11220.,  9444.,  9936., 10428., 10920., 11729., 12154., 12579., 13004., 12378., 12828., 13278., 13728., 31199., 32374., 33549., 34724., 31848., 33048., 34248., 35448., 29525., 30658., 31791., 32924., 28830., 29924., 31018., 32112., 29259., 30222., 31185., 32148., 29844., 30768., 31692., 32616., 19009., 19802., 20595., 21388., 16778., 17532., 18286., 19040.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5739.,  6216.,  7932.,  8568., 10245., 11040., 11295., 12120.,  9180.,  9840.,  6981.,  7476.,  9896., 10544., 13392., 14256., 16960., 18040., 18160., 19280., 14544., 15440., 10904., 11576., 14575., 15400., 19460., 20560., 24325., 25700., 25575., 27000., 20260., 21400., 15025., 15880., 16299., 17240., 19556., 20768., 22801., 24284., 21299., 22768., 14756., 15880., 10909., 11752., 12775., 13704., 15300., 16496., 17821., 19284., 16959., 18408., 11812., 12920.,  8713.,  9544., 11171., 12088., 13604., 14784., 16041., 17484., 15819., 17248., 11428., 12520.,  8437.,  9256.,  6544.,  7200.,  7824.,  8656.,  9096., 10104.,  9064., 10048.,  6544.,  7280.,  4784.,  5336.,  3195.,  3584.,  3836.,  4312.,  4501.,  5064.,  4759.,  5288.,  3708.,  4080.,  2733.,  3012., 16395., 17160., 21756., 22776., 23909., 25120., 21951., 23128., 16348., 17264., 10853., 11508., 13160., 14000., 17488., 18608., 19264., 20600., 18096., 19408., 13520., 14544.,  9048.,  9784., 11407., 12328., 15108., 16336., 16869., 18340., 16391., 17848., 12324., 13464.,  8401.,  9224., 11083., 11992., 14692., 15904., 17009., 18460., 17171., 18608., 13220., 14344.,  9405., 10216., 12679., 13576., 16836., 18032., 20349., 21780., 21151., 22568., 16676., 17784., 12329., 13128., 16195., 17080., 21540., 22720., 26825., 28300., 28075., 29600., 22180., 23400., 16405., 17320., 11600., 12320., 15248., 16208., 18760., 19960., 19560., 20800., 15248., 16240., 11120., 11864.,  7323.,  7872.,  9468., 10200., 11445., 12360., 11895., 12840.,  9084.,  9840.,  6477.,  7044.,  5739.,  6216.,  7932.,  8568., 10245., 11040., 11295., 12120.,  9180.,  9840.,  6981.,  7476.,  9896., 10544., 13392., 14256., 16960., 18040., 18160., 19280., 14544., 15440., 10904., 11576., 14575., 15400., 19460., 20560., 24325., 25700., 25575., 27000., 20260., 21400., 15025., 15880., 16299., 17240., 19556., 20768., 22801., 24284., 21299., 22768., 14756., 15880., 10909., 11752., 12775., 13704., 15300., 16496., 17821., 19284., 16959., 18408., 11812., 12920.,  8713.,  9544., 11171., 12088., 13604., 14784., 16041., 17484., 15819., 17248., 11428., 12520.,  8437.,  9256.,  6544.,  7200.,  7824.,  8656.,  9096., 10104.,  9064., 10048.,  6544.,  7280.,  4784.,  5336.,  3195.,  3584.,  3836.,  4312.,  4501.,  5064.,  4759.,  5288.,  3708.,  4080.,  2733.,  3012.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24325., 25700., 25575., 27000., 22801., 24284., 21299., 22768., 17821., 19284., 16959., 18408., 16041., 17484., 15819., 17248., 16869., 18340., 16391., 17848., 17009., 18460., 17171., 18608., 20349., 21780., 21151., 22568., 26825., 28300., 28075., 29600., 24325., 25700., 25575., 27000., 22801., 24284., 21299., 22768., 17821., 19284., 16959., 18408., 16041., 17484., 15819., 17248.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3279.,  3414.,  3840.,  3984.,  4408.,  4600.,  5156.,  5360.,  6347.,  6602.,  7346.,  7616.,  7265.,  7550.,  8324.,  8624.,  5896.,  6136.,  6756.,  7008.,  4621.,  4810.,  5282.,  5480.,  6868.,  7120.,  7768.,  8032.,  9024.,  9376., 10224., 10592., 12660., 13120., 14224., 14704., 13868., 14368., 15512., 16032., 11072., 11488., 12400., 12832.,  8492.,  8816.,  9504.,  9840., 11465., 11870., 12716., 13136., 14808., 15368., 16476., 17056., 20213., 20938., 22362., 23112., 21511., 22286., 23760., 24560., 16904., 17544., 18716., 19376., 12723., 13218., 14098., 14608., 14285., 14806., 15768., 16304., 16936., 17608., 18828., 19520., 22433., 23266., 24798., 25656., 22387., 23206., 24724., 25568., 16920., 17544., 18700., 19344., 12951., 13434., 14302., 14800., 14929., 15438., 16388., 16912., 18680., 19336., 20540., 21216., 26061., 26874., 28386., 29224., 27295., 28094., 29592., 30416., 17960., 18568., 19708., 20336., 12923., 13394., 14250., 14736., 15317., 15814., 16752., 17264., 17352., 17992., 19180., 19840., 19705., 20498., 21990., 22808., 18123., 18902., 20380., 21184., 11832., 12424., 13548., 14160.,  8543.,  9002.,  9846., 10320.,  8292.,  8672.,  9400.,  9792.,  9024.,  9504., 10416., 10912., 10948., 11536., 12688., 13296., 10396., 10960., 12088., 12672.,  7104.,  7520.,  8368.,  8800.,  5404.,  5728.,  6368.,  6704.,  6163.,  6390.,  6932.,  7168.,  7400.,  7672.,  8340.,  8624.,  8679.,  9002.,  9790., 10128.,  9229.,  9518., 10272., 10576.,  7224.,  7416.,  7956.,  8160.,  5313.,  5466.,  5862.,  6024., 12015., 12438., 13152., 13584., 15288., 15864., 16804., 17392., 18923., 19594., 20754., 21440., 17985., 18622., 19748., 20400., 13832., 14328., 15204., 15712., 10157., 10506., 11138., 11496., 13204., 13648., 14488., 14944., 16960., 17568., 18672., 19296., 23156., 23872., 25232., 25968., 23788., 24480., 25816., 26528., 19136., 19680., 20720., 21280., 14956., 15344., 16096., 16496., 17321., 17822., 18764., 19280., 22360., 23048., 24284., 24992., 23637., 24458., 25978., 26824., 21543., 22350., 23856., 24688., 15368., 16008., 17180., 17840.,  9747., 10210., 11058., 11536., 12077., 12566., 13496., 14000., 15400., 16072., 17292., 17984., 17025., 17826., 19326., 20152., 16211., 16998., 18484., 19296., 11800., 12424., 13580., 14224.,  7927.,  8378.,  9214.,  9680., 10673., 11150., 12068., 12560., 13560., 14216., 15420., 16096., 16813., 17594., 19074., 19880., 17279., 18046., 19512., 20304., 13352., 13960., 15100., 15728.,  9947., 10386., 11210., 11664., 13109., 13574., 14480., 14960., 16840., 17480., 18668., 19328., 22809., 23634., 25158., 26008., 24107., 24982., 26556., 27456., 18872., 19592., 20844., 21584., 14143., 14698., 15638., 16208., 12196., 12640., 13432., 13888., 15552., 16160., 17200., 17824., 21892., 22672., 24016., 24816., 22940., 23760., 25144., 25984., 18112., 18784., 19888., 20576., 13788., 14304., 15136., 15664., 14259., 14646., 15348., 15744., 18408., 18936., 19860., 20400., 22215., 22890., 24030., 24720., 23085., 23790., 24960., 25680., 17592., 18168., 19092., 19680., 12513., 12954., 13638., 14088.,  3279.,  3414.,  3840.,  3984.,  4408.,  4600.,  5156.,  5360.,  6347.,  6602.,  7346.,  7616.,  7265.,  7550.,  8324.,  8624.,  5896.,  6136.,  6756.,  7008.,  4621.,  4810.,  5282.,  5480.,  6868.,  7120.,  7768.,  8032.,  9024.,  9376., 10224., 10592., 12660., 13120., 14224., 14704., 13868., 14368., 15512., 16032., 11072., 11488., 12400., 12832.,  8492.,  8816.,  9504.,  9840., 11465., 11870., 12716., 13136., 14808., 15368., 16476., 17056., 20213., 20938., 22362., 23112., 21511., 22286., 23760., 24560., 16904., 17544., 18716., 19376., 12723., 13218., 14098., 14608., 14285., 14806., 15768., 16304., 16936., 17608., 18828., 19520., 22433., 23266., 24798., 25656., 22387., 23206., 24724., 25568., 16920., 17544., 18700., 19344., 12951., 13434., 14302., 14800., 14929., 15438., 16388., 16912., 18680., 19336., 20540., 21216., 26061., 26874., 28386., 29224., 27295., 28094., 29592., 30416., 17960., 18568., 19708., 20336., 12923., 13394., 14250., 14736., 15317., 15814., 16752., 17264., 17352., 17992., 19180., 19840., 19705., 20498., 21990., 22808., 18123., 18902., 20380., 21184., 11832., 12424., 13548., 14160.,  8543.,  9002.,  9846., 10320.,  8292.,  8672.,  9400.,  9792.,  9024.,  9504., 10416., 10912., 10948., 11536., 12688., 13296., 10396., 10960., 12088., 12672.,  7104.,  7520.,  8368.,  8800.,  5404.,  5728.,  6368.,  6704.,  6163.,  6390.,  6932.,  7168.,  7400.,  7672.,  8340.,  8624.,  8679.,  9002.,  9790., 10128.,  9229.,  9518., 10272., 10576.,  7224.,  7416.,  7956.,  8160.,  5313.,  5466.,  5862.,  6024.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20213., 20938., 22362., 23112., 21511., 22286., 23760., 24560., 22433., 23266., 24798., 25656., 22387., 23206., 24724., 25568., 26061., 26874., 28386., 29224., 27295., 28094., 29592., 30416., 19705., 20498., 21990., 22808., 18123., 18902., 20380., 21184., 23637., 24458., 25978., 26824., 21543., 22350., 23856., 24688., 17025., 17826., 19326., 20152., 16211., 16998., 18484., 19296., 16813., 17594., 19074., 19880., 17279., 18046., 19512., 20304., 22809., 23634., 25158., 26008., 24107., 24982., 26556., 27456., 20213., 20938., 22362., 23112., 21511., 22286., 23760., 24560., 22433., 23266., 24798., 25656., 22387., 23206., 24724., 25568., 26061., 26874., 28386., 29224., 27295., 28094., 29592., 30416., 19705., 20498., 21990., 22808., 18123., 18902., 20380., 21184.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3991.,  4126.,  4261.,  4396.,  4848.,  4992.,  5136.,  5280.,  5616.,  5808.,  6000.,  6192.,  6780.,  6984.,  7188.,  7392.,  7895.,  8150.,  8405.,  8660.,  9430.,  9700.,  9970., 10240.,  8805.,  9090.,  9375.,  9660., 10460., 10760., 11060., 11360.,  8416.,  8656.,  8896.,  9136.,  9804., 10056., 10308., 10560.,  6109.,  6298.,  6487.,  6676.,  7166.,  7364.,  7562.,  7760.,  7468.,  7720.,  7972.,  8224.,  8872.,  9136.,  9400.,  9664., 10080., 10432., 10784., 11136., 12016., 12384., 12752., 13120., 13916., 14376., 14836., 15296., 16448., 16928., 17408., 17888., 15140., 15640., 16140., 16640., 17832., 18352., 18872., 19392., 14048., 14464., 14880., 15296., 16304., 16736., 17168., 17600., 10644., 10968., 11292., 11616., 12400., 12736., 13072., 13408., 11901., 12306., 12711., 13116., 14004., 14424., 14844., 15264., 16064., 16624., 17184., 17744., 18932., 19512., 20092., 20672., 21845., 22570., 23295., 24020., 25542., 26292., 27042., 27792., 23239., 24014., 24789., 25564., 27136., 27936., 28736., 29536., 20880., 21520., 22160., 22800., 24100., 24760., 25420., 26080., 15863., 16358., 16853., 17348., 18342., 18852., 19362., 19872., 16913., 17434., 17955., 18476., 19480., 20016., 20552., 21088., 18928., 19600., 20272., 20944., 22244., 22936., 23628., 24320., 23361., 24194., 25027., 25860., 27490., 28348., 29206., 30064., 22131., 22950., 23769., 24588., 26204., 27048., 27892., 28736., 16320., 16944., 17568., 18192., 19476., 20120., 20764., 21408., 13259., 13742., 14225., 14708., 15690., 16188., 16686., 17184., 13605., 14114., 14623., 15132., 16124., 16648., 17172., 17696., 17056., 17712., 18368., 19024., 20308., 20984., 21660., 22336., 23725., 24538., 25351., 26164., 27774., 28612., 29450., 30288., 25055., 25854., 26653., 27452., 29048., 29872., 30696., 31520., 17904., 18512., 19120., 19728., 20996., 21624., 22252., 22880., 14239., 14710., 15181., 15652., 16622., 17108., 17594., 18080., 13881., 14378., 14875., 15372., 16352., 16864., 17376., 17888., 17232., 17872., 18512., 19152., 20420., 21080., 21740., 22400., 20505., 21298., 22091., 22884., 24474., 25292., 26110., 26928., 20299., 21078., 21857., 22636., 24212., 25016., 25820., 26624., 17440., 18032., 18624., 19216., 20468., 21080., 21692., 22304., 14707., 15166., 15625., 16084., 17042., 17516., 17990., 18464.,  9996., 10376., 10756., 11136., 11880., 12272., 12664., 13056., 14240., 14720., 15200., 15680., 16624., 17120., 17616., 18112., 15292., 15880., 16468., 17056., 18240., 18848., 19456., 20064., 13188., 13752., 14316., 14880., 16040., 16624., 17208., 17792.,  7648.,  8064.,  8480.,  8896.,  9776., 10208., 10640., 11072.,  5492.,  5816.,  6140.,  6464.,  7152.,  7488.,  7824.,  8160.,  6147.,  6374.,  6601.,  6828.,  7356.,  7592.,  7828.,  8064.,  6592.,  6864.,  7136.,  7408.,  8076.,  8360.,  8644.,  8928.,  6987.,  7310.,  7633.,  7956.,  8746.,  9084.,  9422.,  9760.,  7225.,  7514.,  7803.,  8092.,  8848.,  9152.,  9456.,  9760.,  5872.,  6064.,  6256.,  6448.,  7004.,  7208.,  7412.,  7616.,  4905.,  5058.,  5211.,  5364.,  5802.,  5964.,  6126.,  6288., 12983., 13406., 13829., 14252., 14992., 15424., 15856., 16288., 16752., 17328., 17904., 18480., 19452., 20040., 20628., 21216., 22391., 23062., 23733., 24404., 25590., 26276., 26962., 27648., 19653., 20290., 20927., 21564., 22716., 23368., 24020., 24672., 13792., 14288., 14784., 15280., 16204., 16712., 17220., 17728.,  8829.,  9178.,  9527.,  9876., 10526., 10884., 11242., 11600., 11756., 12200., 12644., 13088., 13928., 14384., 14840., 15296., 15456., 16064., 16672., 17280., 18416., 19040., 19664., 20288., 20316., 21032., 21748., 22464., 23872., 24608., 25344., 26080., 20452., 21144., 21836., 22528., 23912., 24624., 25336., 26048., 17760., 18304., 18848., 19392., 20528., 21088., 21648., 22208., 15316., 15704., 16092., 16480., 17328., 17728., 18128., 18528., 15325., 15826., 16327., 16828., 17812., 18328., 18844., 19360., 20800., 21488., 22176., 22864., 24180., 24888., 25596., 26304., 22453., 23274., 24095., 24916., 26534., 27380., 28226., 29072., 21223., 22030., 22837., 23644., 25248., 26080., 26912., 27744., 17808., 18448., 19088., 19728., 21028., 21688., 22348., 23008., 14039., 14502., 14965., 15428., 16390., 16868., 17346., 17824., 12529., 13018., 13507., 13996., 14968., 15472., 15976., 16480., 17904., 18576., 19248., 19920., 21220., 21912., 22604., 23296., 22817., 23618., 24419., 25220., 26818., 27644., 28470., 29296., 24147., 24934., 25721., 26508., 28092., 28904., 29716., 30528., 18368., 18992., 19616., 20240., 21524., 22168., 22812., 23456., 11435., 11886., 12337., 12788., 13738., 14204., 14670., 15136., 13317., 13794., 14271., 14748., 15708., 16200., 16692., 17184., 17056., 17712., 18368., 19024., 20308., 20984., 21660., 22336., 19597., 20378., 21159., 21940., 23518., 24324., 25130., 25936., 19391., 20158., 20925., 21692., 23256., 24048., 24840., 25632., 16880., 17488., 18096., 18704., 19972., 20600., 21228., 21856., 12415., 12854., 13293., 13732., 14670., 15124., 15578., 16032., 13593., 14058., 14523., 14988., 15936., 16416., 16896., 17376., 18256., 18896., 19536., 20176., 21444., 22104., 22764., 23424., 24633., 25458., 26283., 27108., 28730., 29580., 30430., 31280., 26027., 26902., 27777., 28652., 30324., 31224., 32124., 33024., 23200., 23920., 24640., 25360., 26740., 27480., 28220., 28960., 17619., 18174., 18729., 19284., 20338., 20908., 21478., 22048., 11596., 12040., 12484., 12928., 13736., 14192., 14648., 15104., 14880., 15488., 16096., 16704., 17776., 18400., 19024., 19648., 20604., 21384., 22164., 22944., 24320., 25120., 25920., 26720., 21636., 22456., 23276., 24096., 25512., 26352., 27192., 28032., 17120., 17792., 18464., 19136., 20272., 20960., 21648., 22336., 13876., 14392., 14908., 15424., 16304., 16832., 17360., 17888., 11939., 12326., 12713., 13100., 13788., 14184., 14580., 14976., 16064., 16592., 17120., 17648., 18572., 19112., 19652., 20192., 19371., 20046., 20721., 21396., 22538., 23228., 23918., 24608., 20185., 20890., 21595., 22300., 23472., 24192., 24912., 25632., 15984., 16560., 17136., 17712., 18652., 19240., 19828., 20416., 12873., 13314., 13755., 14196., 14922., 15372., 15822., 16272.,  3991.,  4126.,  4261.,  4396.,  4848.,  4992.,  5136.,  5280.,  5616.,  5808.,  6000.,  6192.,  6780.,  6984.,  7188.,  7392.,  7895.,  8150.,  8405.,  8660.,  9430.,  9700.,  9970., 10240.,  8805.,  9090.,  9375.,  9660., 10460., 10760., 11060., 11360.,  8416.,  8656.,  8896.,  9136.,  9804., 10056., 10308., 10560.,  6109.,  6298.,  6487.,  6676.,  7166.,  7364.,  7562.,  7760.,  7468.,  7720.,  7972.,  8224.,  8872.,  9136.,  9400.,  9664., 10080., 10432., 10784., 11136., 12016., 12384., 12752., 13120., 13916., 14376., 14836., 15296., 16448., 16928., 17408., 17888., 15140., 15640., 16140., 16640., 17832., 18352., 18872., 19392., 14048., 14464., 14880., 15296., 16304., 16736., 17168., 17600., 10644., 10968., 11292., 11616., 12400., 12736., 13072., 13408., 11901., 12306., 12711., 13116., 14004., 14424., 14844., 15264., 16064., 16624., 17184., 17744., 18932., 19512., 20092., 20672., 21845., 22570., 23295., 24020., 25542., 26292., 27042., 27792., 23239., 24014., 24789., 25564., 27136., 27936., 28736., 29536., 20880., 21520., 22160., 22800., 24100., 24760., 25420., 26080., 15863., 16358., 16853., 17348., 18342., 18852., 19362., 19872., 16913., 17434., 17955., 18476., 19480., 20016., 20552., 21088., 18928., 19600., 20272., 20944., 22244., 22936., 23628., 24320., 23361., 24194., 25027., 25860., 27490., 28348., 29206., 30064., 22131., 22950., 23769., 24588., 26204., 27048., 27892., 28736., 16320., 16944., 17568., 18192., 19476., 20120., 20764., 21408., 13259., 13742., 14225., 14708., 15690., 16188., 16686., 17184., 13605., 14114., 14623., 15132., 16124., 16648., 17172., 17696., 17056., 17712., 18368., 19024., 20308., 20984., 21660., 22336., 23725., 24538., 25351., 26164., 27774., 28612., 29450., 30288., 25055., 25854., 26653., 27452., 29048., 29872., 30696., 31520., 17904., 18512., 19120., 19728., 20996., 21624., 22252., 22880., 14239., 14710., 15181., 15652., 16622., 17108., 17594., 18080., 13881., 14378., 14875., 15372., 16352., 16864., 17376., 17888., 17232., 17872., 18512., 19152., 20420., 21080., 21740., 22400., 20505., 21298., 22091., 22884., 24474., 25292., 26110., 26928., 20299., 21078., 21857., 22636., 24212., 25016., 25820., 26624., 17440., 18032., 18624., 19216., 20468., 21080., 21692., 22304., 14707., 15166., 15625., 16084., 17042., 17516., 17990., 18464.,  9996., 10376., 10756., 11136., 11880., 12272., 12664., 13056., 14240., 14720., 15200., 15680., 16624., 17120., 17616., 18112., 15292., 15880., 16468., 17056., 18240., 18848., 19456., 20064., 13188., 13752., 14316., 14880., 16040., 16624., 17208., 17792.,  7648.,  8064.,  8480.,  8896.,  9776., 10208., 10640., 11072.,  5492.,  5816.,  6140.,  6464.,  7152.,  7488.,  7824.,  8160.,  6147.,  6374.,  6601.,  6828.,  7356.,  7592.,  7828.,  8064.,  6592.,  6864.,  7136.,  7408.,  8076.,  8360.,  8644.,  8928.,  6987.,  7310.,  7633.,  7956.,  8746.,  9084.,  9422.,  9760.,  7225.,  7514.,  7803.,  8092.,  8848.,  9152.,  9456.,  9760.,  5872.,  6064.,  6256.,  6448.,  7004.,  7208.,  7412.,  7616.,  4905.,  5058.,  5211.,  5364.,  5802.,  5964.,  6126.,  6288.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21845., 22570., 23295., 24020., 25542., 26292., 27042., 27792., 23239., 24014., 24789., 25564., 27136., 27936., 28736., 29536., 23361., 24194., 25027., 25860., 27490., 28348., 29206., 30064., 22131., 22950., 23769., 24588., 26204., 27048., 27892., 28736., 23725., 24538., 25351., 26164., 27774., 28612., 29450., 30288., 25055., 25854., 26653., 27452., 29048., 29872., 30696., 31520., 20505., 21298., 22091., 22884., 24474., 25292., 26110., 26928., 20299., 21078., 21857., 22636., 24212., 25016., 25820., 26624., 22453., 23274., 24095., 24916., 26534., 27380., 28226., 29072., 21223., 22030., 22837., 23644., 25248., 26080., 26912., 27744., 22817., 23618., 24419., 25220., 26818., 27644., 28470., 29296., 24147., 24934., 25721., 26508., 28092., 28904., 29716., 30528., 19597., 20378., 21159., 21940., 23518., 24324., 25130., 25936., 19391., 20158., 20925., 21692., 23256., 24048., 24840., 25632., 24633., 25458., 26283., 27108., 28730., 29580., 30430., 31280., 26027., 26902., 27777., 28652., 30324., 31224., 32124., 33024., 21845., 22570., 23295., 24020., 25542., 26292., 27042., 27792., 23239., 24014., 24789., 25564., 27136., 27936., 28736., 29536., 23361., 24194., 25027., 25860., 27490., 28348., 29206., 30064., 22131., 22950., 23769., 24588., 26204., 27048., 27892., 28736., 23725., 24538., 25351., 26164., 27774., 28612., 29450., 30288., 25055., 25854., 26653., 27452., 29048., 29872., 30696., 31520., 20505., 21298., 22091., 22884., 24474., 25292., 26110., 26928., 20299., 21078., 21857., 22636., 24212., 25016., 25820., 26624.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6285.,  6828.,  7389.,  7968.,  8476.,  9200.,  9948., 10720., 10123., 11028., 11963., 12928., 10103., 11004., 11935., 12896.,  7980.,  8688.,  9420., 10176.,  6033.,  6548.,  7081.,  7632.,  7796.,  8480.,  9188.,  9920., 10672., 11584., 12528., 13504., 15884., 17024., 18204., 19424., 17724., 18880., 20076., 21312., 14896., 15808., 16752., 17728., 12228., 12896., 13588., 14304., 15223., 16060., 16927., 17824., 20404., 21520., 22676., 23872., 22433., 23828., 25273., 26768., 21637., 23068., 24549., 26080., 16036., 17168., 18340., 19552., 10755., 11588., 12451., 13344., 12799., 13740., 14711., 15712., 15572., 16784., 18036., 19328., 18041., 19524., 21057., 22640., 17181., 18636., 20141., 21696., 12484., 13584., 14724., 15904.,  9163.,  9972., 10811., 11680., 12039., 12956., 13903., 14880., 15476., 16656., 17876., 19136., 21457., 22900., 24393., 25936., 23157., 24572., 26037., 27552., 15076., 16144., 17252., 18400., 11155., 11940., 12755., 13600., 14863., 15756., 16679., 17632., 17428., 18576., 19764., 20992., 21097., 22564., 24081., 25648., 20813., 22316., 23869., 25472., 14468., 15632., 16836., 18080., 10971., 11860., 12779., 13728.,  9796., 10560., 11348., 12160., 11376., 12352., 13360., 14400., 15548., 16800., 18092., 19424., 16044., 17312., 18620., 19968., 12016., 12992., 14000., 15040.,  9556., 10304., 11076., 11872., 10621., 11244., 11885., 12544., 13532., 14320., 15132., 15968., 16539., 17492., 18475., 19488., 17959., 18908., 19887., 20896., 14124., 14832., 15564., 16320., 10401., 10932., 11481., 12048.,  6285.,  6828.,  7389.,  7968.,  8476.,  9200.,  9948., 10720., 10123., 11028., 11963., 12928., 10103., 11004., 11935., 12896.,  7980.,  8688.,  9420., 10176.,  6033.,  6548.,  7081.,  7632.,  7796.,  8480.,  9188.,  9920., 10672., 11584., 12528., 13504., 15884., 17024., 18204., 19424., 17724., 18880., 20076., 21312., 14896., 15808., 16752., 17728., 12228., 12896., 13588., 14304., 15223., 16060., 16927., 17824., 20404., 21520., 22676., 23872., 22433., 23828., 25273., 26768., 21637., 23068., 24549., 26080., 16036., 17168., 18340., 19552., 10755., 11588., 12451., 13344., 12799., 13740., 14711., 15712., 15572., 16784., 18036., 19328., 18041., 19524., 21057., 22640., 17181., 18636., 20141., 21696., 12484., 13584., 14724., 15904.,  9163.,  9972., 10811., 11680., 12039., 12956., 13903., 14880., 15476., 16656., 17876., 19136., 21457., 22900., 24393., 25936., 23157., 24572., 26037., 27552., 15076., 16144., 17252., 18400., 11155., 11940., 12755., 13600., 14863., 15756., 16679., 17632., 17428., 18576., 19764., 20992., 21097., 22564., 24081., 25648., 20813., 22316., 23869., 25472., 14468., 15632., 16836., 18080., 10971., 11860., 12779., 13728.,  9796., 10560., 11348., 12160., 11376., 12352., 13360., 14400., 15548., 16800., 18092., 19424., 16044., 17312., 18620., 19968., 12016., 12992., 14000., 15040.,  9556., 10304., 11076., 11872., 10621., 11244., 11885., 12544., 13532., 14320., 15132., 15968., 16539., 17492., 18475., 19488., 17959., 18908., 19887., 20896., 14124., 14832., 15564., 16320., 10401., 10932., 11481., 12048.,  6285.,  6828.,  7389.,  7968.,  8476.,  9200.,  9948., 10720., 10123., 11028., 11963., 12928., 10103., 11004., 11935., 12896.,  7980.,  8688.,  9420., 10176.,  6033.,  6548.,  7081.,  7632.,  7796.,  8480.,  9188.,  9920., 10672., 11584., 12528., 13504., 15884., 17024., 18204., 19424., 17724., 18880., 20076., 21312., 14896., 15808., 16752., 17728., 12228., 12896., 13588., 14304., 15223., 16060., 16927., 17824., 20404., 21520., 22676., 23872., 22433., 23828., 25273., 26768., 21637., 23068., 24549., 26080., 16036., 17168., 18340., 19552., 10755., 11588., 12451., 13344., 12799., 13740., 14711., 15712., 15572., 16784., 18036., 19328., 18041., 19524., 21057., 22640., 17181., 18636., 20141., 21696., 12484., 13584., 14724., 15904.,  9163.,  9972., 10811., 11680., 12039., 12956., 13903., 14880., 15476., 16656., 17876., 19136., 21457., 22900., 24393., 25936., 23157., 24572., 26037., 27552., 15076., 16144., 17252., 18400., 11155., 11940., 12755., 13600., 14863., 15756., 16679., 17632., 17428., 18576., 19764., 20992., 21097., 22564., 24081., 25648., 20813., 22316., 23869., 25472., 14468., 15632., 16836., 18080., 10971., 11860., 12779., 13728.,  9796., 10560., 11348., 12160., 11376., 12352., 13360., 14400., 15548., 16800., 18092., 19424., 16044., 17312., 18620., 19968., 12016., 12992., 14000., 15040.,  9556., 10304., 11076., 11872., 10621., 11244., 11885., 12544., 13532., 14320., 15132., 15968., 16539., 17492., 18475., 19488., 17959., 18908., 19887., 20896., 14124., 14832., 15564., 16320., 10401., 10932., 11481., 12048.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22433., 23828., 25273., 26768., 21637., 23068., 24549., 26080., 18041., 19524., 21057., 22640., 17181., 18636., 20141., 21696., 21457., 22900., 24393., 25936., 23157., 24572., 26037., 27552., 21097., 22564., 24081., 25648., 20813., 22316., 23869., 25472., 22433., 23828., 25273., 26768., 21637., 23068., 24549., 26080., 18041., 19524., 21057., 22640., 17181., 18636., 20141., 21696., 21457., 22900., 24393., 25936., 23157., 24572., 26037., 27552., 21097., 22564., 24081., 25648., 20813., 22316., 23869., 25472., 22433., 23828., 25273., 26768., 21637., 23068., 24549., 26080., 18041., 19524., 21057., 22640., 17181., 18636., 20141., 21696., 21457., 22900., 24393., 25936., 23157., 24572., 26037., 27552., 21097., 22564., 24081., 25648., 20813., 22316., 23869., 25472.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7701.,  7962.,  8522.,  8792.,  9379.,  9658., 10272., 10560., 10884., 11256., 12000., 12384., 13164., 13560., 14376., 14784., 15271., 15702., 16618., 17064., 18025., 18486., 19492., 19968., 13443., 13870., 14782., 15224., 16181., 16638., 17640., 18112.,  9668., 10008., 10752., 11104., 11884., 12248., 13064., 13440.,  6193.,  6434.,  6958.,  7208.,  7759.,  8018.,  8596.,  8864.,  7740.,  8040.,  8712.,  9024.,  9732., 10056., 10800., 11136., 10224., 10656., 11584., 12032., 13008., 13472., 14496., 14976., 14036., 14552., 15720., 16256., 17484., 18040., 19328., 19904., 15396., 15928., 17112., 17664., 18908., 19480., 20784., 21376., 14384., 14816., 15808., 16256., 17296., 17760., 18848., 19328., 12364., 12680., 13432., 13760., 14548., 14888., 15712., 16064., 13267., 13678., 14542., 14968., 15877., 16318., 17272., 17728., 18780., 19368., 20544., 21152., 22388., 23016., 24312., 24960., 21297., 22018., 23486., 24232., 25775., 26546., 28164., 28960., 21461., 22218., 23722., 24504., 26083., 26890., 28544., 29376., 19548., 20168., 21408., 22048., 23348., 24008., 25368., 26048., 15415., 15878., 16810., 17288., 18265., 18758., 19780., 20288., 15483., 15998., 16966., 17496., 18509., 19054., 20112., 20672., 18748., 19432., 20704., 21408., 22740., 23464., 24856., 25600., 23177., 23986., 25542., 26376., 28007., 28866., 30572., 31456., 23277., 24058., 25586., 26392., 27995., 28826., 30504., 31360., 15548., 16136., 17344., 17952., 19220., 19848., 21176., 21824., 10207., 10646., 11554., 12008., 12961., 13430., 14428., 14912., 12963., 13454., 14398., 14904., 15893., 16414., 17448., 17984., 16028., 16680., 17920., 18592., 19892., 20584., 21944., 22656., 20321., 21090., 22606., 23400., 24991., 25810., 27476., 28320., 21445., 22186., 23674., 24440., 26003., 26794., 28432., 29248., 15644., 16200., 17376., 17952., 19188., 19784., 21080., 21696., 12167., 12582., 13466., 13896., 14825., 15270., 16244., 16704., 13515., 13982., 14902., 15384., 16349., 16846., 17856., 18368., 17404., 18024., 19232., 19872., 21140., 21800., 23128., 23808., 22137., 22930., 24470., 25288., 26903., 27746., 29436., 30304., 23325., 24154., 25730., 26584., 28235., 29114., 30840., 31744., 21500., 22152., 23424., 24096., 25428., 26120., 27512., 28224., 17839., 18358., 19346., 19880., 20913., 21462., 22540., 23104., 11164., 11592., 12360., 12800., 13604., 14056., 14896., 15360., 15920., 16480., 17472., 18048., 19088., 19680., 20768., 21376., 18868., 19576., 20840., 21568., 22892., 23640., 25024., 25792., 17796., 18520., 19800., 20544., 21884., 22648., 24048., 24832., 11568., 12128., 13120., 13696., 14736., 15328., 16416., 17024.,  8940.,  9384., 10168., 10624., 11444., 11912., 12768., 13248.,  9341.,  9658., 10258., 10584., 11211., 11546., 12200., 12544., 11172., 11576., 12352., 12768., 13580., 14008., 14856., 15296., 12927., 13430., 14370., 14888., 15873., 16406., 17436., 17984., 13979., 14478., 15414., 15928., 16909., 17438., 18464., 19008., 11428., 11800., 12512., 12896., 13644., 14040., 14824., 15232.,  9561.,  9858., 10422., 10728., 11319., 11634., 12252., 12576.,  7701.,  7962.,  8522.,  8792.,  9379.,  9658., 10272., 10560., 10884., 11256., 12000., 12384., 13164., 13560., 14376., 14784., 15271., 15702., 16618., 17064., 18025., 18486., 19492., 19968., 13443., 13870., 14782., 15224., 16181., 16638., 17640., 18112.,  9668., 10008., 10752., 11104., 11884., 12248., 13064., 13440.,  6193.,  6434.,  6958.,  7208.,  7759.,  8018.,  8596.,  8864.,  7740.,  8040.,  8712.,  9024.,  9732., 10056., 10800., 11136., 10224., 10656., 11584., 12032., 13008., 13472., 14496., 14976., 14036., 14552., 15720., 16256., 17484., 18040., 19328., 19904., 15396., 15928., 17112., 17664., 18908., 19480., 20784., 21376., 14384., 14816., 15808., 16256., 17296., 17760., 18848., 19328., 12364., 12680., 13432., 13760., 14548., 14888., 15712., 16064., 13267., 13678., 14542., 14968., 15877., 16318., 17272., 17728., 18780., 19368., 20544., 21152., 22388., 23016., 24312., 24960., 21297., 22018., 23486., 24232., 25775., 26546., 28164., 28960., 21461., 22218., 23722., 24504., 26083., 26890., 28544., 29376., 19548., 20168., 21408., 22048., 23348., 24008., 25368., 26048., 15415., 15878., 16810., 17288., 18265., 18758., 19780., 20288., 15483., 15998., 16966., 17496., 18509., 19054., 20112., 20672., 18748., 19432., 20704., 21408., 22740., 23464., 24856., 25600., 23177., 23986., 25542., 26376., 28007., 28866., 30572., 31456., 23277., 24058., 25586., 26392., 27995., 28826., 30504., 31360., 15548., 16136., 17344., 17952., 19220., 19848., 21176., 21824., 10207., 10646., 11554., 12008., 12961., 13430., 14428., 14912., 12963., 13454., 14398., 14904., 15893., 16414., 17448., 17984., 16028., 16680., 17920., 18592., 19892., 20584., 21944., 22656., 20321., 21090., 22606., 23400., 24991., 25810., 27476., 28320., 21445., 22186., 23674., 24440., 26003., 26794., 28432., 29248., 15644., 16200., 17376., 17952., 19188., 19784., 21080., 21696., 12167., 12582., 13466., 13896., 14825., 15270., 16244., 16704., 13515., 13982., 14902., 15384., 16349., 16846., 17856., 18368., 17404., 18024., 19232., 19872., 21140., 21800., 23128., 23808., 22137., 22930., 24470., 25288., 26903., 27746., 29436., 30304., 23325., 24154., 25730., 26584., 28235., 29114., 30840., 31744., 21500., 22152., 23424., 24096., 25428., 26120., 27512., 28224., 17839., 18358., 19346., 19880., 20913., 21462., 22540., 23104., 11164., 11592., 12360., 12800., 13604., 14056., 14896., 15360., 15920., 16480., 17472., 18048., 19088., 19680., 20768., 21376., 18868., 19576., 20840., 21568., 22892., 23640., 25024., 25792., 17796., 18520., 19800., 20544., 21884., 22648., 24048., 24832., 11568., 12128., 13120., 13696., 14736., 15328., 16416., 17024.,  8940.,  9384., 10168., 10624., 11444., 11912., 12768., 13248.,  9341.,  9658., 10258., 10584., 11211., 11546., 12200., 12544., 11172., 11576., 12352., 12768., 13580., 14008., 14856., 15296., 12927., 13430., 14370., 14888., 15873., 16406., 17436., 17984., 13979., 14478., 15414., 15928., 16909., 17438., 18464., 19008., 11428., 11800., 12512., 12896., 13644., 14040., 14824., 15232.,  9561.,  9858., 10422., 10728., 11319., 11634., 12252., 12576.,  7701.,  7962.,  8522.,  8792.,  9379.,  9658., 10272., 10560., 10884., 11256., 12000., 12384., 13164., 13560., 14376., 14784., 15271., 15702., 16618., 17064., 18025., 18486., 19492., 19968., 13443., 13870., 14782., 15224., 16181., 16638., 17640., 18112.,  9668., 10008., 10752., 11104., 11884., 12248., 13064., 13440.,  6193.,  6434.,  6958.,  7208.,  7759.,  8018.,  8596.,  8864.,  7740.,  8040.,  8712.,  9024.,  9732., 10056., 10800., 11136., 10224., 10656., 11584., 12032., 13008., 13472., 14496., 14976., 14036., 14552., 15720., 16256., 17484., 18040., 19328., 19904., 15396., 15928., 17112., 17664., 18908., 19480., 20784., 21376., 14384., 14816., 15808., 16256., 17296., 17760., 18848., 19328., 12364., 12680., 13432., 13760., 14548., 14888., 15712., 16064., 13267., 13678., 14542., 14968., 15877., 16318., 17272., 17728., 18780., 19368., 20544., 21152., 22388., 23016., 24312., 24960., 21297., 22018., 23486., 24232., 25775., 26546., 28164., 28960., 21461., 22218., 23722., 24504., 26083., 26890., 28544., 29376., 19548., 20168., 21408., 22048., 23348., 24008., 25368., 26048., 15415., 15878., 16810., 17288., 18265., 18758., 19780., 20288., 15483., 15998., 16966., 17496., 18509., 19054., 20112., 20672., 18748., 19432., 20704., 21408., 22740., 23464., 24856., 25600., 23177., 23986., 25542., 26376., 28007., 28866., 30572., 31456., 23277., 24058., 25586., 26392., 27995., 28826., 30504., 31360., 15548., 16136., 17344., 17952., 19220., 19848., 21176., 21824., 10207., 10646., 11554., 12008., 12961., 13430., 14428., 14912., 12963., 13454., 14398., 14904., 15893., 16414., 17448., 17984., 16028., 16680., 17920., 18592., 19892., 20584., 21944., 22656., 20321., 21090., 22606., 23400., 24991., 25810., 27476., 28320., 21445., 22186., 23674., 24440., 26003., 26794., 28432., 29248., 15644., 16200., 17376., 17952., 19188., 19784., 21080., 21696., 12167., 12582., 13466., 13896., 14825., 15270., 16244., 16704., 13515., 13982., 14902., 15384., 16349., 16846., 17856., 18368., 17404., 18024., 19232., 19872., 21140., 21800., 23128., 23808., 22137., 22930., 24470., 25288., 26903., 27746., 29436., 30304., 23325., 24154., 25730., 26584., 28235., 29114., 30840., 31744., 21500., 22152., 23424., 24096., 25428., 26120., 27512., 28224., 17839., 18358., 19346., 19880., 20913., 21462., 22540., 23104., 11164., 11592., 12360., 12800., 13604., 14056., 14896., 15360., 15920., 16480., 17472., 18048., 19088., 19680., 20768., 21376., 18868., 19576., 20840., 21568., 22892., 23640., 25024., 25792., 17796., 18520., 19800., 20544., 21884., 22648., 24048., 24832., 11568., 12128., 13120., 13696., 14736., 15328., 16416., 17024.,  8940.,  9384., 10168., 10624., 11444., 11912., 12768., 13248.,  9341.,  9658., 10258., 10584., 11211., 11546., 12200., 12544., 11172., 11576., 12352., 12768., 13580., 14008., 14856., 15296., 12927., 13430., 14370., 14888., 15873., 16406., 17436., 17984., 13979., 14478., 15414., 15928., 16909., 17438., 18464., 19008., 11428., 11800., 12512., 12896., 13644., 14040., 14824., 15232.,  9561.,  9858., 10422., 10728., 11319., 11634., 12252., 12576.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21297., 22018., 23486., 24232., 25775., 26546., 28164., 28960., 21461., 22218., 23722., 24504., 26083., 26890., 28544., 29376., 23177., 23986., 25542., 26376., 28007., 28866., 30572., 31456., 23277., 24058., 25586., 26392., 27995., 28826., 30504., 31360., 20321., 21090., 22606., 23400., 24991., 25810., 27476., 28320., 21445., 22186., 23674., 24440., 26003., 26794., 28432., 29248., 22137., 22930., 24470., 25288., 26903., 27746., 29436., 30304., 23325., 24154., 25730., 26584., 28235., 29114., 30840., 31744., 21297., 22018., 23486., 24232., 25775., 26546., 28164., 28960., 21461., 22218., 23722., 24504., 26083., 26890., 28544., 29376., 23177., 23986., 25542., 26376., 28007., 28866., 30572., 31456., 23277., 24058., 25586., 26392., 27995., 28826., 30504., 31360., 20321., 21090., 22606., 23400., 24991., 25810., 27476., 28320., 21445., 22186., 23674., 24440., 26003., 26794., 28432., 29248., 22137., 22930., 24470., 25288., 26903., 27746., 29436., 30304., 23325., 24154., 25730., 26584., 28235., 29114., 30840., 31744., 21297., 22018., 23486., 24232., 25775., 26546., 28164., 28960., 21461., 22218., 23722., 24504., 26083., 26890., 28544., 29376., 23177., 23986., 25542., 26376., 28007., 28866., 30572., 31456., 23277., 24058., 25586., 26392., 27995., 28826., 30504., 31360., 20321., 21090., 22606., 23400., 24991., 25810., 27476., 28320., 21445., 22186., 23674., 24440., 26003., 26794., 28432., 29248., 22137., 22930., 24470., 25288., 26903., 27746., 29436., 30304., 23325., 24154., 25730., 26584., 28235., 29114., 30840., 31744.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7653.,  7914.,  8175.,  8436.,  8966.,  9236.,  9506.,  9776., 10351., 10630., 10909., 11188., 11808., 12096., 12384., 12672.,  9492.,  9864., 10236., 10608., 11328., 11712., 12096., 12480., 13260., 13656., 14052., 14448., 15288., 15696., 16104., 16512., 11935., 12366., 12797., 13228., 14102., 14548., 14994., 15440., 16389., 16850., 17311., 17772., 18796., 19272., 19748., 20224., 10331., 10758., 11185., 11612., 12482., 12924., 13366., 13808., 14753., 15210., 15667., 16124., 17144., 17616., 18088., 18560.,  6516.,  6856.,  7196.,  7536.,  8224.,  8576.,  8928.,  9280., 10028., 10392., 10756., 11120., 11928., 12304., 12680., 13056.,  4145.,  4386.,  4627.,  4868.,  5346.,  5596.,  5846.,  6096.,  6619.,  6878.,  7137.,  7396.,  7964.,  8232.,  8500.,  8768.,  8140.,  8440.,  8740.,  9040.,  9688., 10000., 10312., 10624., 11332., 11656., 11980., 12304., 13072., 13408., 13744., 14080., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200., 12516., 13032., 13548., 14064., 15160., 15696., 16232., 16768., 17964., 18520., 19076., 19632., 20928., 21504., 22080., 22656., 12404., 12936., 13468., 14000., 15112., 15664., 16216., 16768., 17980., 18552., 19124., 19696., 21008., 21600., 22192., 22784., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200.,  9564.,  9880., 10196., 10512., 11176., 11504., 11832., 12160., 12884., 13224., 13564., 13904., 14688., 15040., 15392., 15744.,  9291.,  9702., 10113., 10524., 11378., 11804., 12230., 12656., 13585., 14026., 14467., 14908., 15912., 16368., 16824., 17280., 14636., 15224., 15812., 16400., 17568., 18176., 18784., 19392., 20660., 21288., 21916., 22544., 23912., 24560., 25208., 25856., 17041., 17762., 18483., 19204., 20626., 21372., 22118., 22864., 24411., 25182., 25953., 26724., 28396., 29192., 29988., 30784., 18357., 19114., 19871., 20628., 22086., 22868., 23650., 24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640., 17868., 18488., 19108., 19728., 20928., 21568., 22208., 22848., 24148., 24808., 25468., 26128., 27528., 28208., 28888., 29568., 11423., 11886., 12349., 12812., 13686., 14164., 14642., 15120., 16069., 16562., 17055., 17548., 18572., 19080., 19588., 20096., 15155., 15670., 16185., 16700., 17658., 18188., 18718., 19248., 20281., 20826., 21371., 21916., 23024., 23584., 24144., 24704., 17036., 17720., 18404., 19088., 20352., 21056., 21760., 22464., 23828., 24552., 25276., 26000., 27464., 28208., 28952., 29696., 18665., 19474., 20283., 21092., 22602., 23436., 24270., 25104., 26739., 27598., 28457., 29316., 31076., 31960., 32844., 33728., 19917., 20698., 21479., 22260., 23742., 24548., 25354., 26160., 27767., 28598., 29429., 30260., 31992., 32848., 33704., 34560., 15020., 15608., 16196., 16784., 17952., 18560., 19168., 19776., 21044., 21672., 22300., 22928., 24296., 24944., 25592., 26240.,  9223.,  9662., 10101., 10540., 11390., 11844., 12298., 12752., 13677., 14146., 14615., 15084., 16084., 16568., 17052., 17536., 11675., 12166., 12657., 13148., 14082., 14588., 15094., 15600., 16609., 17130., 17651., 18172., 19256., 19792., 20328., 20864., 14188., 14840., 15492., 16144., 17376., 18048., 18720., 19392., 20724., 21416., 22108., 22800., 24232., 24944., 25656., 26368., 19137., 19906., 20675., 21444., 22914., 23708., 24502., 25296., 26891., 27710., 28529., 29348., 31068., 31912., 32756., 33600., 18341., 19082., 19823., 20564., 22006., 22772., 23538., 24304., 25871., 26662., 27453., 28244., 29936., 30752., 31568., 32384., 12172., 12728., 13284., 13840., 14976., 15552., 16128., 16704., 17940., 18536., 19132., 19728., 21064., 21680., 22296., 22912.,  9071.,  9486.,  9901., 10316., 11142., 11572., 12002., 12432., 13333., 13778., 14223., 14668., 15644., 16104., 16564., 17024., 10243., 10710., 11177., 11644., 12554., 13036., 13518., 14000., 14985., 15482., 15979., 16476., 17536., 18048., 18560., 19072., 15436., 16056., 16676., 17296., 18496., 19136., 19776., 20416., 21716., 22376., 23036., 23696., 25096., 25776., 26456., 27136., 20697., 21490., 22283., 23076., 24570., 25388., 26206., 27024., 28643., 29486., 30329., 31172., 32916., 33784., 34652., 35520., 19965., 20794., 21623., 22452., 23982., 24836., 25690., 26544., 28199., 29078., 29957., 30836., 32616., 33520., 34424., 35328., 16620., 17272., 17924., 18576., 19808., 20480., 21152., 21824., 23156., 23848., 24540., 25232., 26664., 27376., 28088., 28800., 12119., 12638., 13157., 13676., 14606., 15140., 15674., 16208., 17213., 17762., 18311., 18860., 19940., 20504., 21068., 21632., 11596., 12024., 12452., 12880., 13656., 14096., 14536., 14976., 15812., 16264., 16716., 17168., 18064., 18528., 18992., 19456., 16048., 16608., 17168., 17728., 18752., 19328., 19904., 20480., 21584., 22176., 22768., 23360., 24544., 25152., 25760., 26368., 18084., 18792., 19500., 20208., 21496., 22224., 22952., 23680., 25068., 25816., 26564., 27312., 28800., 29568., 30336., 31104., 17972., 18696., 19420., 20144., 21448., 22192., 22936., 23680., 25084., 25848., 26612., 27376., 28880., 29664., 30448., 31232., 14000., 14560., 15120., 15680., 16704., 17280., 17856., 18432., 19536., 20128., 20720., 21312., 22496., 23104., 23712., 24320.,  9948., 10392., 10836., 11280., 12072., 12528., 12984., 13440., 14292., 14760., 15228., 15696., 16608., 17088., 17568., 18048.,  8573.,  8890.,  9207.,  9524., 10078., 10404., 10730., 11056., 11655., 11990., 12325., 12660., 13304., 13648., 13992., 14336.,  9780., 10184., 10588., 10992., 11744., 12160., 12576., 12992., 13804., 14232., 14660., 15088., 15960., 16400., 16840., 17280., 10567., 11070., 11573., 12076., 12990., 13508., 14026., 14544., 15533., 16066., 16599., 17132., 18196., 18744., 19292., 19840., 10883., 11382., 11881., 12380., 13290., 13804., 14318., 14832., 15817., 16346., 16875., 17404., 18464., 19008., 19552., 20096.,  9364.,  9736., 10108., 10480., 11200., 11584., 11968., 12352., 13132., 13528., 13924., 14320., 15160., 15568., 15976., 16384.,  8585.,  8882.,  9179.,  9476., 10042., 10348., 10654., 10960., 11571., 11886., 12201., 12516., 13172., 13496., 13820., 14144.,  7653.,  7914.,  8175.,  8436.,  8966.,  9236.,  9506.,  9776., 10351., 10630., 10909., 11188., 11808., 12096., 12384., 12672.,  9492.,  9864., 10236., 10608., 11328., 11712., 12096., 12480., 13260., 13656., 14052., 14448., 15288., 15696., 16104., 16512., 11935., 12366., 12797., 13228., 14102., 14548., 14994., 15440., 16389., 16850., 17311., 17772., 18796., 19272., 19748., 20224., 10331., 10758., 11185., 11612., 12482., 12924., 13366., 13808., 14753., 15210., 15667., 16124., 17144., 17616., 18088., 18560.,  6516.,  6856.,  7196.,  7536.,  8224.,  8576.,  8928.,  9280., 10028., 10392., 10756., 11120., 11928., 12304., 12680., 13056.,  4145.,  4386.,  4627.,  4868.,  5346.,  5596.,  5846.,  6096.,  6619.,  6878.,  7137.,  7396.,  7964.,  8232.,  8500.,  8768.,  8140.,  8440.,  8740.,  9040.,  9688., 10000., 10312., 10624., 11332., 11656., 11980., 12304., 13072., 13408., 13744., 14080., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200., 12516., 13032., 13548., 14064., 15160., 15696., 16232., 16768., 17964., 18520., 19076., 19632., 20928., 21504., 22080., 22656., 12404., 12936., 13468., 14000., 15112., 15664., 16216., 16768., 17980., 18552., 19124., 19696., 21008., 21600., 22192., 22784., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200.,  9564.,  9880., 10196., 10512., 11176., 11504., 11832., 12160., 12884., 13224., 13564., 13904., 14688., 15040., 15392., 15744.,  9291.,  9702., 10113., 10524., 11378., 11804., 12230., 12656., 13585., 14026., 14467., 14908., 15912., 16368., 16824., 17280., 14636., 15224., 15812., 16400., 17568., 18176., 18784., 19392., 20660., 21288., 21916., 22544., 23912., 24560., 25208., 25856., 17041., 17762., 18483., 19204., 20626., 21372., 22118., 22864., 24411., 25182., 25953., 26724., 28396., 29192., 29988., 30784., 18357., 19114., 19871., 20628., 22086., 22868., 23650., 24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640., 17868., 18488., 19108., 19728., 20928., 21568., 22208., 22848., 24148., 24808., 25468., 26128., 27528., 28208., 28888., 29568., 11423., 11886., 12349., 12812., 13686., 14164., 14642., 15120., 16069., 16562., 17055., 17548., 18572., 19080., 19588., 20096., 15155., 15670., 16185., 16700., 17658., 18188., 18718., 19248., 20281., 20826., 21371., 21916., 23024., 23584., 24144., 24704., 17036., 17720., 18404., 19088., 20352., 21056., 21760., 22464., 23828., 24552., 25276., 26000., 27464., 28208., 28952., 29696., 18665., 19474., 20283., 21092., 22602., 23436., 24270., 25104., 26739., 27598., 28457., 29316., 31076., 31960., 32844., 33728., 19917., 20698., 21479., 22260., 23742., 24548., 25354., 26160., 27767., 28598., 29429., 30260., 31992., 32848., 33704., 34560., 15020., 15608., 16196., 16784., 17952., 18560., 19168., 19776., 21044., 21672., 22300., 22928., 24296., 24944., 25592., 26240.,  9223.,  9662., 10101., 10540., 11390., 11844., 12298., 12752., 13677., 14146., 14615., 15084., 16084., 16568., 17052., 17536., 11675., 12166., 12657., 13148., 14082., 14588., 15094., 15600., 16609., 17130., 17651., 18172., 19256., 19792., 20328., 20864., 14188., 14840., 15492., 16144., 17376., 18048., 18720., 19392., 20724., 21416., 22108., 22800., 24232., 24944., 25656., 26368., 19137., 19906., 20675., 21444., 22914., 23708., 24502., 25296., 26891., 27710., 28529., 29348., 31068., 31912., 32756., 33600., 18341., 19082., 19823., 20564., 22006., 22772., 23538., 24304., 25871., 26662., 27453., 28244., 29936., 30752., 31568., 32384., 12172., 12728., 13284., 13840., 14976., 15552., 16128., 16704., 17940., 18536., 19132., 19728., 21064., 21680., 22296., 22912.,  9071.,  9486.,  9901., 10316., 11142., 11572., 12002., 12432., 13333., 13778., 14223., 14668., 15644., 16104., 16564., 17024., 10243., 10710., 11177., 11644., 12554., 13036., 13518., 14000., 14985., 15482., 15979., 16476., 17536., 18048., 18560., 19072., 15436., 16056., 16676., 17296., 18496., 19136., 19776., 20416., 21716., 22376., 23036., 23696., 25096., 25776., 26456., 27136., 20697., 21490., 22283., 23076., 24570., 25388., 26206., 27024., 28643., 29486., 30329., 31172., 32916., 33784., 34652., 35520., 19965., 20794., 21623., 22452., 23982., 24836., 25690., 26544., 28199., 29078., 29957., 30836., 32616., 33520., 34424., 35328., 16620., 17272., 17924., 18576., 19808., 20480., 21152., 21824., 23156., 23848., 24540., 25232., 26664., 27376., 28088., 28800., 12119., 12638., 13157., 13676., 14606., 15140., 15674., 16208., 17213., 17762., 18311., 18860., 19940., 20504., 21068., 21632., 11596., 12024., 12452., 12880., 13656., 14096., 14536., 14976., 15812., 16264., 16716., 17168., 18064., 18528., 18992., 19456., 16048., 16608., 17168., 17728., 18752., 19328., 19904., 20480., 21584., 22176., 22768., 23360., 24544., 25152., 25760., 26368., 18084., 18792., 19500., 20208., 21496., 22224., 22952., 23680., 25068., 25816., 26564., 27312., 28800., 29568., 30336., 31104., 17972., 18696., 19420., 20144., 21448., 22192., 22936., 23680., 25084., 25848., 26612., 27376., 28880., 29664., 30448., 31232., 14000., 14560., 15120., 15680., 16704., 17280., 17856., 18432., 19536., 20128., 20720., 21312., 22496., 23104., 23712., 24320.,  9948., 10392., 10836., 11280., 12072., 12528., 12984., 13440., 14292., 14760., 15228., 15696., 16608., 17088., 17568., 18048.,  8573.,  8890.,  9207.,  9524., 10078., 10404., 10730., 11056., 11655., 11990., 12325., 12660., 13304., 13648., 13992., 14336.,  9780., 10184., 10588., 10992., 11744., 12160., 12576., 12992., 13804., 14232., 14660., 15088., 15960., 16400., 16840., 17280., 10567., 11070., 11573., 12076., 12990., 13508., 14026., 14544., 15533., 16066., 16599., 17132., 18196., 18744., 19292., 19840., 10883., 11382., 11881., 12380., 13290., 13804., 14318., 14832., 15817., 16346., 16875., 17404., 18464., 19008., 19552., 20096.,  9364.,  9736., 10108., 10480., 11200., 11584., 11968., 12352., 13132., 13528., 13924., 14320., 15160., 15568., 15976., 16384.,  8585.,  8882.,  9179.,  9476., 10042., 10348., 10654., 10960., 11571., 11886., 12201., 12516., 13172., 13496., 13820., 14144.,  7653.,  7914.,  8175.,  8436.,  8966.,  9236.,  9506.,  9776., 10351., 10630., 10909., 11188., 11808., 12096., 12384., 12672.,  9492.,  9864., 10236., 10608., 11328., 11712., 12096., 12480., 13260., 13656., 14052., 14448., 15288., 15696., 16104., 16512., 11935., 12366., 12797., 13228., 14102., 14548., 14994., 15440., 16389., 16850., 17311., 17772., 18796., 19272., 19748., 20224., 10331., 10758., 11185., 11612., 12482., 12924., 13366., 13808., 14753., 15210., 15667., 16124., 17144., 17616., 18088., 18560.,  6516.,  6856.,  7196.,  7536.,  8224.,  8576.,  8928.,  9280., 10028., 10392., 10756., 11120., 11928., 12304., 12680., 13056.,  4145.,  4386.,  4627.,  4868.,  5346.,  5596.,  5846.,  6096.,  6619.,  6878.,  7137.,  7396.,  7964.,  8232.,  8500.,  8768.,  8140.,  8440.,  8740.,  9040.,  9688., 10000., 10312., 10624., 11332., 11656., 11980., 12304., 13072., 13408., 13744., 14080., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200., 12516., 13032., 13548., 14064., 15160., 15696., 16232., 16768., 17964., 18520., 19076., 19632., 20928., 21504., 22080., 22656., 12404., 12936., 13468., 14000., 15112., 15664., 16216., 16768., 17980., 18552., 19124., 19696., 21008., 21600., 22192., 22784., 10800., 11232., 11664., 12096., 12992., 13440., 13888., 14336., 15312., 15776., 16240., 16704., 17760., 18240., 18720., 19200.,  9564.,  9880., 10196., 10512., 11176., 11504., 11832., 12160., 12884., 13224., 13564., 13904., 14688., 15040., 15392., 15744.,  9291.,  9702., 10113., 10524., 11378., 11804., 12230., 12656., 13585., 14026., 14467., 14908., 15912., 16368., 16824., 17280., 14636., 15224., 15812., 16400., 17568., 18176., 18784., 19392., 20660., 21288., 21916., 22544., 23912., 24560., 25208., 25856., 17041., 17762., 18483., 19204., 20626., 21372., 22118., 22864., 24411., 25182., 25953., 26724., 28396., 29192., 29988., 30784., 18357., 19114., 19871., 20628., 22086., 22868., 23650., 24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640., 17868., 18488., 19108., 19728., 20928., 21568., 22208., 22848., 24148., 24808., 25468., 26128., 27528., 28208., 28888., 29568., 11423., 11886., 12349., 12812., 13686., 14164., 14642., 15120., 16069., 16562., 17055., 17548., 18572., 19080., 19588., 20096., 15155., 15670., 16185., 16700., 17658., 18188., 18718., 19248., 20281., 20826., 21371., 21916., 23024., 23584., 24144., 24704., 17036., 17720., 18404., 19088., 20352., 21056., 21760., 22464., 23828., 24552., 25276., 26000., 27464., 28208., 28952., 29696., 18665., 19474., 20283., 21092., 22602., 23436., 24270., 25104., 26739., 27598., 28457., 29316., 31076., 31960., 32844., 33728., 19917., 20698., 21479., 22260., 23742., 24548., 25354., 26160., 27767., 28598., 29429., 30260., 31992., 32848., 33704., 34560., 15020., 15608., 16196., 16784., 17952., 18560., 19168., 19776., 21044., 21672., 22300., 22928., 24296., 24944., 25592., 26240.,  9223.,  9662., 10101., 10540., 11390., 11844., 12298., 12752., 13677., 14146., 14615., 15084., 16084., 16568., 17052., 17536., 11675., 12166., 12657., 13148., 14082., 14588., 15094., 15600., 16609., 17130., 17651., 18172., 19256., 19792., 20328., 20864., 14188., 14840., 15492., 16144., 17376., 18048., 18720., 19392., 20724., 21416., 22108., 22800., 24232., 24944., 25656., 26368., 19137., 19906., 20675., 21444., 22914., 23708., 24502., 25296., 26891., 27710., 28529., 29348., 31068., 31912., 32756., 33600., 18341., 19082., 19823., 20564., 22006., 22772., 23538., 24304., 25871., 26662., 27453., 28244., 29936., 30752., 31568., 32384., 12172., 12728., 13284., 13840., 14976., 15552., 16128., 16704., 17940., 18536., 19132., 19728., 21064., 21680., 22296., 22912.,  9071.,  9486.,  9901., 10316., 11142., 11572., 12002., 12432., 13333., 13778., 14223., 14668., 15644., 16104., 16564., 17024., 10243., 10710., 11177., 11644., 12554., 13036., 13518., 14000., 14985., 15482., 15979., 16476., 17536., 18048., 18560., 19072., 15436., 16056., 16676., 17296., 18496., 19136., 19776., 20416., 21716., 22376., 23036., 23696., 25096., 25776., 26456., 27136., 20697., 21490., 22283., 23076., 24570., 25388., 26206., 27024., 28643., 29486., 30329., 31172., 32916., 33784., 34652., 35520., 19965., 20794., 21623., 22452., 23982., 24836., 25690., 26544., 28199., 29078., 29957., 30836., 32616., 33520., 34424., 35328., 16620., 17272., 17924., 18576., 19808., 20480., 21152., 21824., 23156., 23848., 24540., 25232., 26664., 27376., 28088., 28800., 12119., 12638., 13157., 13676., 14606., 15140., 15674., 16208., 17213., 17762., 18311., 18860., 19940., 20504., 21068., 21632., 11596., 12024., 12452., 12880., 13656., 14096., 14536., 14976., 15812., 16264., 16716., 17168., 18064., 18528., 18992., 19456., 16048., 16608., 17168., 17728., 18752., 19328., 19904., 20480., 21584., 22176., 22768., 23360., 24544., 25152., 25760., 26368., 18084., 18792., 19500., 20208., 21496., 22224., 22952., 23680., 25068., 25816., 26564., 27312., 28800., 29568., 30336., 31104., 17972., 18696., 19420., 20144., 21448., 22192., 22936., 23680., 25084., 25848., 26612., 27376., 28880., 29664., 30448., 31232., 14000., 14560., 15120., 15680., 16704., 17280., 17856., 18432., 19536., 20128., 20720., 21312., 22496., 23104., 23712., 24320.,  9948., 10392., 10836., 11280., 12072., 12528., 12984., 13440., 14292., 14760., 15228., 15696., 16608., 17088., 17568., 18048.,  8573.,  8890.,  9207.,  9524., 10078., 10404., 10730., 11056., 11655., 11990., 12325., 12660., 13304., 13648., 13992., 14336.,  9780., 10184., 10588., 10992., 11744., 12160., 12576., 12992., 13804., 14232., 14660., 15088., 15960., 16400., 16840., 17280., 10567., 11070., 11573., 12076., 12990., 13508., 14026., 14544., 15533., 16066., 16599., 17132., 18196., 18744., 19292., 19840., 10883., 11382., 11881., 12380., 13290., 13804., 14318., 14832., 15817., 16346., 16875., 17404., 18464., 19008., 19552., 20096.,  9364.,  9736., 10108., 10480., 11200., 11584., 11968., 12352., 13132., 13528., 13924., 14320., 15160., 15568., 15976., 16384.,  8585.,  8882.,  9179.,  9476., 10042., 10348., 10654., 10960., 11571., 11886., 12201., 12516., 13172., 13496., 13820., 14144.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17041., 17762., 18483., 19204., 20626., 21372., 22118., 22864., 24411., 25182., 25953., 26724., 28396., 29192., 29988., 30784., 18357., 19114., 19871., 20628., 22086., 22868., 23650., 24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640., 18665., 19474., 20283., 21092., 22602., 23436., 24270., 25104., 26739., 27598., 28457., 29316., 31076., 31960., 32844., 33728., 19917., 20698., 21479., 22260., 23742., 24548., 25354., 26160., 27767., 28598., 29429., 30260., 31992., 32848., 33704., 34560., 19137., 19906., 20675., 21444., 22914., 23708., 24502., 25296., 26891., 27710., 28529., 29348., 31068., 31912., 32756., 33600., 18341., 19082., 19823., 20564., 22006., 22772., 23538., 24304., 25871., 26662., 27453., 28244., 29936., 30752., 31568., 32384., 20697., 21490., 22283., 23076., 24570., 25388., 26206., 27024., 28643., 29486., 30329., 31172., 32916., 33784., 34652., 35520., 19965., 20794., 21623., 22452., 23982., 24836., 25690., 26544., 28199., 29078., 29957., 30836., 32616., 33520., 34424., 35328., 17041., 17762., 18483., 19204., 20626., 21372., 22118., 22864., 24411., 25182., 25953., 26724., 28396., 29192., 29988., 30784., 18357., 19114., 19871., 20628., 22086., 22868., 23650., 24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640., 18665., 19474., 20283., 21092., 22602., 23436., 24270., 25104., 26739., 27598., 28457., 29316., 31076., 31960., 32844., 33728., 19917., 20698., 21479., 22260., 23742., 24548., 25354., 26160., 27767., 28598., 29429., 30260., 31992., 32848., 33704., 34560., 19137., 19906., 20675., 21444., 22914., 23708., 24502., 25296., 26891., 27710., 28529., 29348., 31068., 31912., 32756., 33600., 18341., 19082., 19823., 20564., 22006., 22772., 23538., 24304., 25871., 26662., 27453., 28244., 29936., 30752., 31568., 32384., 20697., 21490., 22283., 23076., 24570., 25388., 26206., 27024., 28643., 29486., 30329., 31172., 32916., 33784., 34652., 35520., 19965., 20794., 21623., 22452., 23982., 24836., 25690., 26544., 28199., 29078., 29957., 30836., 32616., 33520., 34424., 35328., 17041., 17762., 18483., 19204., 20626., 21372., 22118., 22864., 24411., 25182., 25953., 26724., 28396., 29192., 29988., 30784., 18357., 19114., 19871., 20628., 22086., 22868., 23650., 24432., 26015., 26822., 27629., 28436., 30144., 30976., 31808., 32640., 18665., 19474., 20283., 21092., 22602., 23436., 24270., 25104., 26739., 27598., 28457., 29316., 31076., 31960., 32844., 33728., 19917., 20698., 21479., 22260., 23742., 24548., 25354., 26160., 27767., 28598., 29429., 30260., 31992., 32848., 33704., 34560., 19137., 19906., 20675., 21444., 22914., 23708., 24502., 25296., 26891., 27710., 28529., 29348., 31068., 31912., 32756., 33600., 18341., 19082., 19823., 20564., 22006., 22772., 23538., 24304., 25871., 26662., 27453., 28244., 29936., 30752., 31568., 32384., 20697., 21490., 22283., 23076., 24570., 25388., 26206., 27024., 28643., 29486., 30329., 31172., 32916., 33784., 34652., 35520., 19965., 20794., 21623., 22452., 23982., 24836., 25690., 26544., 28199., 29078., 29957., 30836., 32616., 33520., 34424., 35328.};
  const std::array<int, 4> in_shape = {{ 3, 8, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1755.,  2404.,  3080.,  3350.,  3620.,  2920.,  2205.,  3008.,  4048.,  5100.,  5410.,  5720.,  4560.,  3404.,  4420.,  5880.,  7325.,  7650.,  7975.,  6300.,  4660.,  5890.,  7770.,  9600.,  9925., 10250.,  8050.,  5920.,  7360.,  9660., 11875., 12200., 12525.,  9800.,  7180.,  8830., 11550., 14150., 14475., 14800., 11550.,  8440.,  6122.,  7936.,  9630.,  9840., 10050.,  7760.,  5606.,  3780.,  4834.,  5780.,  5900.,  6020.,  4570.,  3240., 11331., 14836., 18200., 18470., 18740., 14680., 10773., 14096., 18384., 22460., 22770., 23080., 18000., 13148., 16180., 21000., 25525., 25850., 26175., 20300., 14740., 17650., 22890., 27800., 28125., 28450., 22050., 16000., 19120., 24780., 30075., 30400., 30725., 23800., 17260., 20590., 26670., 32350., 32675., 33000., 25550., 18520., 13850., 17792., 21390., 21600., 21810., 16720., 11990.,  8316., 10546., 12500., 12620., 12740.,  9610.,  6768., 20907., 27268., 33320., 33590., 33860., 26440., 19341., 25184., 32720., 39820., 40130., 40440., 31440., 22892., 27940., 36120., 43725., 44050., 44375., 34300., 24820., 29410., 38010., 46000., 46325., 46650., 36050., 26080., 30880., 39900., 48275., 48600., 48925., 37800., 27340., 32350., 41790., 50550., 50875., 51200., 39550., 28600., 21578., 27648., 33150., 33360., 33570., 25680., 18374., 12852., 16258., 19220., 19340., 19460., 14650., 10296.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7325.,  7650.,  7975.,  9600.,  9925., 10250., 11875., 12200., 12525., 14150., 14475., 14800., 25525., 25850., 26175., 27800., 28125., 28450., 30075., 30400., 30725., 32350., 32675., 33000., 43725., 44050., 44375., 46000., 46325., 46650., 48275., 48600., 48925., 50550., 50875., 51200.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3429.,  3510.,  4694.,  4808.,  6010.,  6160.,  6535.,  6700.,  7060.,  7240.,  5690.,  5840.,  4293.,  4410.,  5866.,  6016.,  7888.,  8096.,  9930., 10200., 10530., 10820., 11130., 11440.,  8864.,  9120.,  6610.,  6808.,  8600.,  8840., 11430., 11760., 14225., 14650., 14850., 15300., 15475., 15950., 12210., 12600.,  9020.,  9320., 11435., 11780., 15070., 15540., 18600., 19200., 19225., 19850., 19850., 20500., 15570., 16100., 11435., 11840., 14270., 14720., 18710., 19320., 22975., 23750., 23600., 24400., 24225., 25050., 18930., 19600., 13850., 14360., 17105., 17660., 22350., 23100., 27350., 28300., 27975., 28950., 28600., 29600., 22290., 23100., 16265., 16880., 11758., 12244., 15216., 15872., 18430., 19260., 18830., 19680., 19230., 20100., 14816., 15520., 10678., 11212.,  7164.,  7560.,  9134.,  9668., 10885., 11560., 11110., 11800., 11335., 12040.,  8570.,  9140.,  6048.,  6480.,  8189.,  8454., 10006., 10344., 11794., 12208., 10335., 10700., 10860., 11240.,  8570.,  8880.,  6333.,  6570.,  7658.,  7968.,  9488.,  9888., 11274., 11768., 10530., 10980., 11130., 11600.,  8736.,  9120.,  6418.,  6712.,  7664.,  8040.,  9638., 10128., 11529., 12138., 11450., 12020., 12075., 12670.,  9394.,  9880.,  6836.,  7208.,  8515.,  8804., 11102., 11476., 13664., 14128., 14225., 14650., 14850., 15300., 11730., 12100.,  8675.,  8960., 11030., 11360., 14550., 15000., 17975., 18550., 18600., 19200., 19225., 19850., 15090., 15600., 11090., 11480., 13865., 14300., 18190., 18780., 22350., 23100., 22975., 23750., 23600., 24400., 18450., 19100., 13505., 14000.,  9646., 10036., 12528., 13056., 15230., 15900., 15630., 16320., 16030., 16740., 12384., 12960.,  8950.,  9388.,  5940.,  6264.,  7598.,  8036.,  9085.,  9640.,  9310.,  9880.,  9535., 10120.,  7226.,  7700.,  5112.,  5472., 16277., 16726., 19286., 19848., 22186., 22864., 19959., 20588., 17860., 18440., 14010., 14480., 10293., 10650., 12778., 13248., 15056., 15648., 17226., 17944., 15714., 16388., 14330., 14960., 11168., 11680.,  8146.,  8536., 10056., 10568., 11814., 12464., 13441., 14234., 12594., 13348., 11875., 12590.,  9138.,  9720.,  6572.,  7016.,  8347.,  8772., 10078., 10612., 11736., 12384., 11529., 12138., 11450., 12020.,  8914.,  9380.,  6491.,  6848.,  8558.,  8896., 10902., 11320., 13231., 13734., 13664., 14128., 14225., 14650., 11250., 11600.,  8330.,  8600., 10625., 10940., 14030., 14460., 17350., 17900., 17975., 18550., 18600., 19200., 14610., 15100., 10745., 11120.,  7534.,  7828.,  9840., 10240., 12030., 12540., 12430., 12960., 12830., 13380.,  9952., 10400.,  7222.,  7564.,  4716.,  4968.,  6062.,  6404.,  7285.,  7720.,  7510.,  7960.,  7735.,  8200.,  5882.,  6260.,  4176.,  4464.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14225., 14650., 14850., 15300., 15475., 15950., 18600., 19200., 19225., 19850., 19850., 20500., 22975., 23750., 23600., 24400., 24225., 25050., 27350., 28300., 27975., 28950., 28600., 29600., 11529., 12138., 11450., 12020., 12075., 12670., 13664., 14128., 14225., 14650., 14850., 15300., 17975., 18550., 18600., 19200., 19225., 19850., 22350., 23100., 22975., 23750., 23600., 24400., 13441., 14234., 12594., 13348., 11875., 12590., 11736., 12384., 11529., 12138., 11450., 12020., 13231., 13734., 13664., 14128., 14225., 14650., 17350., 17900., 17975., 18550., 18600., 19200.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1977.,  2058.,  2139.,  2220.,  2618.,  2732.,  2846.,  2960.,  3742.,  3892.,  4042.,  4192.,  4201.,  4366.,  4531.,  4696.,  4660.,  4840.,  5020.,  5200.,  3742.,  3892.,  4042.,  4192.,  2901.,  3018.,  3135.,  3252.,  4094.,  4244.,  4394.,  4544.,  5328.,  5536.,  5744.,  5952.,  7430.,  7700.,  7970.,  8240.,  8034.,  8324.,  8614.,  8904.,  8638.,  8948.,  9258.,  9568.,  6848.,  7104.,  7360.,  7616.,  5214.,  5412.,  5610.,  5808.,  6784.,  7024.,  7264.,  7504.,  8706.,  9036.,  9366.,  9696., 11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832., 13131., 13606., 14081., 14556., 10270., 10660., 11050., 11440.,  7692.,  7992.,  8292.,  8592.,  9661., 10006., 10351., 10696., 12262., 12732., 13202., 13672., 16376., 16976., 17576., 18176., 17025., 17650., 18275., 18900., 17674., 18324., 18974., 19624., 13714., 14244., 14774., 15304., 10177., 10582., 10987., 11392., 12538., 12988., 13438., 13888., 15818., 16428., 17038., 17648., 20919., 21694., 22469., 23244., 21568., 22368., 23168., 23968., 22217., 23042., 23867., 24692., 17158., 17828., 18498., 19168., 12662., 13172., 13682., 14192., 15415., 15970., 16525., 17080., 19374., 20124., 20874., 21624., 25462., 26412., 27362., 28312., 26111., 27086., 28061., 29036., 26760., 27760., 28760., 29760., 20602., 21412., 22222., 23032., 15147., 15762., 16377., 16992., 13238., 13724., 14210., 14696., 16592., 17248., 17904., 18560., 22590., 23420., 24250., 25080., 23114., 23964., 24814., 25664., 23638., 24508., 25378., 26248., 18368., 19072., 19776., 20480., 13718., 14252., 14786., 15320., 13932., 14328., 14724., 15120., 17734., 18268., 18802., 19336., 21095., 21770., 22445., 23120., 21530., 22220., 22910., 23600., 21965., 22670., 23375., 24080., 16570., 17140., 17710., 18280., 11664., 12096., 12528., 12960., 10289., 10554., 10819., 11084., 13018., 13356., 13694., 14032., 19654., 20068., 20482., 20896., 16209., 16574., 16939., 17304., 16668., 17048., 17428., 17808., 12926., 13236., 13546., 13856.,  9421.,  9658.,  9895., 10132., 10590., 10900., 11210., 11520., 12432., 12832., 13232., 13632., 14502., 14996., 15490., 15984., 12482., 12932., 13382., 13832., 13086., 13556., 14026., 14496., 10048., 10432., 10816., 11200.,  7294.,  7588.,  7882.,  8176.,  7848.,  8224.,  8600.,  8976.,  9058.,  9548., 10038., 10528., 10865., 11474., 12083., 12692., 10170., 10740., 11310., 11880., 10819., 11414., 12009., 12604.,  8126.,  8612.,  9098.,  9584.,  5812.,  6184.,  6556.,  6928.,  6949.,  7238.,  7527.,  7816.,  8518.,  8892.,  9266.,  9640., 11248., 11712., 12176., 12640., 11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832.,  9778., 10148., 10518., 10888.,  7337.,  7622.,  7907.,  8192.,  9250.,  9580.,  9910., 10240., 11754., 12204., 12654., 13104., 15727., 16302., 16877., 17452., 16376., 16976., 17576., 18176., 17025., 17650., 18275., 18900., 13222., 13732., 14242., 14752.,  9822., 10212., 10602., 10992., 12127., 12562., 12997., 13432., 15310., 15900., 16490., 17080., 20270., 21020., 21770., 22520., 20919., 21694., 22469., 23244., 21568., 22368., 23168., 23968., 16666., 17316., 17966., 18616., 12307., 12802., 13297., 13792., 10646., 11036., 11426., 11816., 13392., 13920., 14448., 14976., 18398., 19068., 19738., 20408., 18922., 19612., 20302., 20992., 19446., 20156., 20866., 21576., 15168., 15744., 16320., 16896., 11382., 11820., 12258., 12696., 11556., 11880., 12204., 12528., 14758., 15196., 15634., 16072., 17615., 18170., 18725., 19280., 18050., 18620., 19190., 19760., 18485., 19070., 19655., 20240., 13978., 14452., 14926., 15400.,  9864., 10224., 10584., 10944., 12969., 13418., 13867., 14316., 14970., 15532., 16094., 16656., 20206., 20884., 21562., 22240., 19321., 19950., 20579., 21208., 18692., 19272., 19852., 20432., 14942., 15412., 15882., 16352., 11589., 11946., 12303., 12660., 15550., 16020., 16490., 16960., 19280., 19872., 20464., 21056., 26694., 27412., 28130., 28848., 27234., 27908., 28582., 29256., 23934., 24564., 25194., 25824., 18368., 18880., 19392., 19904., 13214., 13604., 13994., 14384., 15568., 16080., 16592., 17104., 17346., 17996., 18646., 19296., 19113., 19906., 20699., 21492., 16882., 17636., 18390., 19144., 14907., 15622., 16337., 17052., 11102., 11684., 12266., 12848.,  7772.,  8216.,  8660.,  9104.,  9549.,  9974., 10399., 10824., 10406., 10940., 11474., 12008., 11816., 12464., 13112., 13760., 10865., 11474., 12083., 12692., 10170., 10740., 11310., 11880.,  7634.,  8100.,  8566.,  9032.,  5457.,  5814.,  6171.,  6528.,  7370.,  7708.,  8046.,  8384.,  8586.,  9004.,  9422.,  9840., 10919., 11422., 11925., 12428., 11248., 11712., 12176., 12640., 11833., 12258., 12683., 13108.,  9286.,  9636.,  9986., 10336.,  6982.,  7252.,  7522.,  7792.,  8839.,  9154.,  9469.,  9784., 11246., 11676., 12106., 12536., 15078., 15628., 16178., 16728., 15727., 16302., 16877., 17452., 16376., 16976., 17576., 18176., 12730., 13220., 13710., 14200.,  9467.,  9842., 10217., 10592.,  8054.,  8348.,  8642.,  8936., 10192., 10592., 10992., 11392., 14206., 14716., 15226., 15736., 14730., 15260., 15790., 16320., 15254., 15804., 16354., 16904., 11968., 12416., 12864., 13312.,  9046.,  9388.,  9730., 10072.,  9180.,  9432.,  9684.,  9936., 11782., 12124., 12466., 12808., 14135., 14570., 15005., 15440., 14570., 15020., 15470., 15920., 15005., 15470., 15935., 16400., 11386., 11764., 12142., 12520.,  8064.,  8352.,  8640.,  8928.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832., 13131., 13606., 14081., 14556., 16376., 16976., 17576., 18176., 17025., 17650., 18275., 18900., 17674., 18324., 18974., 19624., 20919., 21694., 22469., 23244., 21568., 22368., 23168., 23968., 22217., 23042., 23867., 24692., 25462., 26412., 27362., 28312., 26111., 27086., 28061., 29036., 26760., 27760., 28760., 29760., 10865., 11474., 12083., 12692., 10170., 10740., 11310., 11880., 10819., 11414., 12009., 12604., 11248., 11712., 12176., 12640., 11833., 12258., 12683., 13108., 12482., 12932., 13382., 13832., 15727., 16302., 16877., 17452., 16376., 16976., 17576., 18176., 17025., 17650., 18275., 18900., 20270., 21020., 21770., 22520., 20919., 21694., 22469., 23244., 21568., 22368., 23168., 23968., 19113., 19906., 20699., 21492., 16882., 17636., 18390., 19144., 14907., 15622., 16337., 17052., 11816., 12464., 13112., 13760., 10865., 11474., 12083., 12692., 10170., 10740., 11310., 11880., 10919., 11422., 11925., 12428., 11248., 11712., 12176., 12640., 11833., 12258., 12683., 13108., 15078., 15628., 16178., 16728., 15727., 16302., 16877., 17452., 16376., 16976., 17576., 18176.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6525.,  7020.,  8956.,  9616., 11495., 12320., 12545., 13400., 13595., 14480., 10972., 11680.,  8289.,  8820., 11348., 12032., 15280., 16192., 19260., 20400., 20460., 21640., 21660., 22880., 17264., 18240., 12884., 13616., 16795., 17680., 22340., 23520., 27825., 29300., 29075., 30600., 30325., 31900., 23940., 25200., 17695., 18640., 22465., 23560., 29620., 31080., 36575., 38400., 37825., 39700., 39075., 41000., 30660., 32200., 22525., 23680., 28135., 29440., 36900., 38640., 45325., 47500., 46575., 48800., 47825., 50100., 37380., 39200., 27355., 28720., 33805., 35320., 44180., 46200., 54075., 56600., 55325., 57900., 56575., 59200., 44100., 46200., 32185., 33760., 23252., 24488., 30096., 31744., 36460., 38520., 37260., 39360., 38060., 40200., 29328., 31040., 21140., 22424., 14175., 15120., 18076., 19336., 21545., 23120., 21995., 23600., 22445., 24080., 16972., 18280., 11979., 12960., 16045., 16908., 19580., 20688., 23063., 24416., 20145., 21400., 21195., 22480., 16732., 17760., 12369., 13140., 14932., 15936., 18480., 19776., 21948., 23536., 20460., 21960., 21660., 23200., 17008., 18240., 12500., 13424., 14923., 16080., 18756., 20256., 22433., 24276., 22275., 24040., 23525., 25340., 18308., 19760., 13327., 14416., 16625., 17608., 21684., 22952., 26703., 28256., 27825., 29300., 29075., 30600., 22980., 24200., 17005., 17920., 21655., 22720., 28580., 30000., 35325., 37100., 36575., 38400., 37825., 39700., 29700., 31200., 21835., 22960., 27325., 28600., 35860., 37560., 44075., 46200., 45325., 47500., 46575., 48800., 36420., 38200., 26665., 28000., 19028., 20072., 24720., 26112., 30060., 31800., 30860., 32640., 31660., 33480., 24464., 25920., 17684., 18776., 11727., 12528., 15004., 16072., 17945., 19280., 18395., 19760., 18845., 20240., 14284., 15400., 10107., 10944., 32221., 33452., 38140., 39696., 43847., 45728., 39393., 41176., 35195., 36880., 27612., 28960., 20289., 21300., 25172., 26496., 29616., 31296., 33852., 35888., 30828., 32776., 28060., 29920., 21872., 23360., 15956., 17072., 19707., 21136., 23108., 24928., 26257., 28468., 24563., 26696., 23125., 25180., 17796., 19440., 12799., 14032., 16289., 17544., 19636., 21224., 22847., 24768., 22433., 24276., 22275., 24040., 17348., 18760., 12637., 13696., 16711., 17792., 21284., 22640., 25837., 27468., 26703., 28256., 27825., 29300., 22020., 23200., 16315., 17200., 20845., 21880., 27540., 28920., 34075., 35800., 35325., 37100., 36575., 38400., 28740., 30200., 21145., 22240., 14804., 15656., 19344., 20480., 23660., 25080., 24460., 25920., 25260., 26760., 19600., 20800., 14228., 15128.,  9279.,  9936., 11932., 12808., 14345., 15440., 14795., 15920., 15245., 16400., 11596., 12520.,  8235.,  8928.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {27825., 29300., 29075., 30600., 30325., 31900., 36575., 38400., 37825., 39700., 39075., 41000., 45325., 47500., 46575., 48800., 47825., 50100., 54075., 56600., 55325., 57900., 56575., 59200., 22433., 24276., 22275., 24040., 23525., 25340., 26703., 28256., 27825., 29300., 29075., 30600., 35325., 37100., 36575., 38400., 37825., 39700., 44075., 46200., 45325., 47500., 46575., 48800., 26257., 28468., 24563., 26696., 23125., 25180., 22847., 24768., 22433., 24276., 22275., 24040., 25837., 27468., 26703., 28256., 27825., 29300., 34075., 35800., 35325., 37100., 36575., 38400.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3681.,  3834.,  4278.,  4440.,  4896.,  5112.,  5692.,  5920.,  7025.,  7310.,  8084.,  8384.,  7943.,  8258.,  9062.,  9392.,  8861.,  9206., 10040., 10400.,  7128.,  7416.,  8084.,  8384.,  5537.,  5762.,  6270.,  6504.,  7816.,  8104.,  8788.,  9088., 10192., 10592., 11488., 11904., 14256., 14776., 15940., 16480., 15464., 16024., 17228., 17808., 16672., 17272., 18516., 19136., 13232., 13728., 14720., 15232., 10088., 10472., 11220., 11616., 13157., 13622., 14528., 15008., 16904., 17544., 18732., 19392., 20905., 21666., 23126., 23912., 20347., 21094., 22540., 23312., 20045., 20778., 22210., 22968., 15248., 15816., 16916., 17504., 10997., 11390., 12168., 12576., 13343., 13826., 14750., 15248., 17104., 17768., 18980., 19664., 23271., 24062., 25552., 26368., 23993., 24770., 26246., 27048., 24971., 25734., 27196., 27984., 20088., 20680., 21804., 22416., 11679., 12090., 12886., 13312., 17369., 17870., 18812., 19328., 22424., 23112., 24348., 25056., 23845., 24666., 26186., 27032., 21751., 22558., 24064., 24896., 19913., 20706., 22198., 23016., 13664., 14280., 15428., 16064.,  8009.,  8438.,  9252.,  9696., 12947., 13466., 14426., 14960., 16480., 17192., 18452., 19184., 18531., 19382., 20932., 21808., 17717., 18554., 20090., 20952., 17159., 17982., 19504., 20352., 12360., 13000., 14172., 14832.,  8179.,  8626.,  9458.,  9920.,  7912.,  8296.,  9028.,  9424., 10000., 10528., 11488., 12032., 12912., 13528., 14708., 15344., 13128., 13720., 14876., 15488., 13600., 14168., 15300., 15888., 10800., 11232., 12096., 12544.,  8456.,  8744.,  9348.,  9648.,  8559.,  8766.,  9288.,  9504., 11288., 11576., 12260., 12560., 13915., 14290., 15130., 15520., 14785., 15190., 16060., 16480., 15655., 16090., 16990., 17440., 12080., 12440., 13148., 13520.,  8703.,  8982.,  9504.,  9792.,  9809., 10074., 10630., 10904., 12576., 12920., 13628., 13984., 19265., 19694., 20612., 21056., 16279., 16674., 17558., 17968., 17197., 17622., 18536., 18976., 13464., 13816., 14548., 14912.,  9937., 10210., 10766., 11048., 11336., 11688., 12436., 12800., 13584., 14048., 15008., 15488., 16496., 17080., 18308., 18912., 15080., 15640., 16844., 17424., 16288., 16888., 18132., 18752., 12720., 13216., 14208., 14720.,  9448.,  9832., 10580., 10976., 10933., 11414., 12336., 12832., 13192., 13832., 15020., 15680., 16857., 17666., 19174., 20008., 16811., 17606., 19100., 19920., 18109., 18954., 20498., 21368., 13968., 14664., 15892., 16608., 10309., 10846., 11768., 12320., 12911., 13410., 14350., 14864., 16208., 16872., 18084., 18768., 21783., 22622., 24160., 25024., 20905., 21666., 23126., 23912., 20347., 21094., 22540., 23312., 15608., 16200., 17324., 17936., 11375., 11802., 12614., 13056., 12521., 12974., 13868., 14336., 16088., 16712., 17884., 18528., 22805., 23610., 25114., 25944., 23271., 24062., 25552., 26368., 23993., 24770., 26246., 27048., 19168., 19784., 20932., 21568., 14873., 15318., 16148., 16608., 16547., 17018., 17930., 18416., 21408., 22056., 23252., 23920., 26195., 27030., 28564., 29424., 23845., 24666., 26186., 27032., 21751., 22558., 24064., 24896., 15560., 16200., 17372., 18032.,  9923., 10386., 11234., 11712.,  9064.,  9448., 10180., 10576., 11536., 12064., 13024., 13568., 14896., 15576., 16820., 17520., 13576., 14232., 15452., 16128., 12512., 13144., 14340., 14992.,  9072.,  9568., 10496., 11008.,  6088.,  6440.,  7108.,  7472.,  6303.,  6558.,  7128.,  7392.,  8152.,  8504.,  9252.,  9616.,  9835., 10290., 11210., 11680.,  9617., 10038., 10924., 11360.,  9655., 10042., 10894., 11296.,  7280.,  7576.,  8220.,  8528.,  5167.,  5366.,  5808.,  6016., 10305., 10682., 11350., 11736., 11808., 12280., 13116., 13600., 16145., 16718., 17780., 18368., 15719., 16258., 17286., 17840., 15549., 16054., 17048., 17568., 12632., 13048., 13844., 14272.,  9985., 10306., 10910., 11240., 13320., 13736., 14548., 14976., 16720., 17248., 18272., 18816., 23856., 24504., 25796., 26464., 25000., 25624., 26892., 27536., 22304., 22904., 24148., 24768., 17328., 17824., 18816., 19328., 12648., 13032., 13780., 14176., 15365., 15862., 16800., 17312., 17416., 18056., 19244., 19904., 19913., 20706., 22198., 23016., 18331., 19110., 20588., 21392., 17005., 17770., 19234., 20024., 13008., 13640., 14804., 15456.,  9429.,  9918., 10792., 11296., 12223., 12738., 13694., 14224., 14032., 14696., 15908., 16592., 17159., 17982., 19504., 20352., 16857., 17666., 19174., 20008., 16811., 17606., 19100., 19920., 12984., 13640., 14828., 15504.,  9599., 10106., 10998., 11520., 12921., 13454., 14428., 14976., 15768., 16456., 17692., 18400., 20805., 21658., 23210., 24088., 21783., 22622., 24160., 25024., 20905., 21666., 23126., 23912., 16224., 16840., 17988., 18624., 12009., 12470., 13316., 13792., 11699., 12122., 12986., 13424., 15072., 15656., 16788., 17392., 21507., 22262., 23716., 24496., 22805., 23610., 25114., 25944., 23271., 24062., 25552., 26368., 18504., 19144., 20316., 20976., 14227., 14706., 15570., 16064., 14056., 14440., 15172., 15568., 18192., 18720., 19680., 20224., 22192., 22872., 24116., 24816., 23240., 23960., 25244., 25984., 20640., 21336., 22596., 23312., 15280., 15840., 16832., 17408., 10376., 10792., 11524., 11952.,  7887.,  8190.,  8808.,  9120., 10136., 10552., 11364., 11792., 12155., 12690., 13690., 14240., 13025., 13590., 14620., 15200., 11527., 12058., 13054., 13600.,  8304.,  8728.,  9500.,  9936.,  5407.,  5718.,  6272.,  6592.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20905., 21666., 23126., 23912., 20347., 21094., 22540., 23312., 20045., 20778., 22210., 22968., 23271., 24062., 25552., 26368., 23993., 24770., 26246., 27048., 24971., 25734., 27196., 27984., 23845., 24666., 26186., 27032., 21751., 22558., 24064., 24896., 19913., 20706., 22198., 23016., 18531., 19382., 20932., 21808., 17717., 18554., 20090., 20952., 17159., 17982., 19504., 20352., 16857., 17666., 19174., 20008., 16811., 17606., 19100., 19920., 18109., 18954., 20498., 21368., 21783., 22622., 24160., 25024., 20905., 21666., 23126., 23912., 20347., 21094., 22540., 23312., 22805., 23610., 25114., 25944., 23271., 24062., 25552., 26368., 23993., 24770., 26246., 27048., 26195., 27030., 28564., 29424., 23845., 24666., 26186., 27032., 21751., 22558., 24064., 24896., 19913., 20706., 22198., 23016., 18331., 19110., 20588., 21392., 17005., 17770., 19234., 20024., 17159., 17982., 19504., 20352., 16857., 17666., 19174., 20008., 16811., 17606., 19100., 19920., 20805., 21658., 23210., 24088., 21783., 22622., 24160., 25024., 20905., 21666., 23126., 23912., 21507., 22262., 23716., 24496., 22805., 23610., 25114., 25944., 23271., 24062., 25552., 26368.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4521.,  4674.,  4827.,  4980.,  5450.,  5612.,  5774.,  5936.,  6312.,  6528.,  6744.,  6960.,  7572.,  7800.,  8028.,  8256.,  8837.,  9122.,  9407.,  9692., 10492., 10792., 11092., 11392.,  9747., 10062., 10377., 10692., 11522., 11852., 12182., 12512., 10657., 11002., 11347., 11692., 12552., 12912., 13272., 13632., 10064., 10352., 10640., 10928., 11644., 11944., 12244., 12544.,  7265.,  7490.,  7715.,  7940.,  8466.,  8700.,  8934.,  9168.,  8560.,  8848.,  9136.,  9424., 10108., 10408., 10708., 11008., 11472., 11872., 12272., 12672., 13600., 14016., 14432., 14848., 15768., 16288., 16808., 17328., 18540., 19080., 19620., 20160., 16992., 17552., 18112., 18672., 19924., 20504., 21084., 21664., 18216., 18816., 19416., 20016., 21308., 21928., 22548., 23168., 16752., 17248., 17744., 18240., 19328., 19840., 20352., 20864., 12624., 13008., 13392., 13776., 14620., 15016., 15412., 15808., 13689., 14154., 14619., 15084., 16032., 16512., 16992., 17472., 18384., 19024., 19664., 20304., 21572., 22232., 22892., 23552., 24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 22603., 23350., 24097., 24844., 26388., 27160., 27932., 28704., 20861., 21594., 22327., 23060., 24590., 25348., 26106., 26864., 15336., 15904., 16472., 17040., 18268., 18856., 19444., 20032., 10849., 11242., 11635., 12028., 12920., 13328., 13736., 14144., 12763., 13246., 13729., 14212., 15178., 15676., 16174., 16672., 16584., 17248., 17912., 18576., 19868., 20552., 21236., 21920., 21495., 22286., 23077., 23868., 25456., 26272., 27088., 27904., 21801., 22578., 23355., 24132., 25706., 26508., 27310., 28112., 22619., 23382., 24145., 24908., 26468., 27256., 28044., 28832., 19616., 20208., 20800., 21392., 22644., 23256., 23868., 24480., 12707., 13118., 13529., 13940., 14850., 15276., 15702., 16128., 15421., 15922., 16423., 16924., 17908., 18424., 18940., 19456., 20928., 21616., 22304., 22992., 24308., 25016., 25724., 26432., 22741., 23562., 24383., 25204., 26822., 27668., 28514., 29360., 21511., 22318., 23125., 23932., 25536., 26368., 27200., 28032., 20793., 21586., 22379., 23172., 24762., 25580., 26398., 27216., 17752., 18368., 18984., 19600., 20876., 21512., 22148., 22784., 14053., 14482., 14911., 15340., 16268., 16712., 17156., 17600., 13471., 13990., 14509., 15028., 16030., 16564., 17098., 17632., 19128., 19840., 20552., 21264., 22604., 23336., 24068., 24800., 24499., 25350., 26201., 27052., 28700., 29576., 30452., 31328., 25829., 26666., 27503., 28340., 29974., 30836., 31698., 32560., 23575., 24398., 25221., 26044., 27664., 28512., 29360., 30208., 17936., 18576., 19216., 19856., 21156., 21816., 22476., 23136., 10791., 11238., 11685., 12132., 13078., 13540., 14002., 14464.,  9744., 10128., 10512., 10896., 11644., 12040., 12436., 12832., 11792., 12320., 12848., 13376., 14368., 14912., 15456., 16000., 13176., 13792., 14408., 15024., 16236., 16872., 17508., 18144., 12608., 13200., 13792., 14384., 15572., 16184., 16796., 17408., 12552., 13120., 13688., 14256., 15420., 16008., 16596., 17184.,  9648., 10080., 10512., 10944., 11840., 12288., 12736., 13184.,  7920.,  8208.,  8496.,  8784.,  9436.,  9736., 10036., 10336.,  6735.,  6942.,  7149.,  7356.,  7864.,  8080.,  8296.,  8512.,  9232.,  9520.,  9808., 10096., 10780., 11080., 11380., 11680., 11391., 11766., 12141., 12516., 13358., 13748., 14138., 14528., 12205., 12610., 13015., 13420., 14292., 14712., 15132., 15552., 13019., 13454., 13889., 14324., 15226., 15676., 16126., 16576., 10424., 10784., 11144., 11504., 12228., 12600., 12972., 13344.,  8487.,  8766.,  9045.,  9324.,  9888., 10176., 10464., 10752.,  8473.,  8738.,  9003.,  9268.,  9850., 10124., 10398., 10672., 10280., 10624., 10968., 11312., 12052., 12408., 12764., 13120., 15765., 16194., 16623., 17052., 17996., 18440., 18884., 19328., 13027., 13422., 13817., 14212., 15122., 15532., 15942., 16352., 13937., 14362., 14787., 15212., 16152., 16592., 17032., 17472., 11408., 11760., 12112., 12464., 13244., 13608., 13972., 14336.,  7825.,  8098.,  8371.,  8644.,  9218.,  9500.,  9782., 10064.,  9392.,  9744., 10096., 10448., 11196., 11560., 11924., 12288., 13072., 13536., 14000., 14464., 15456., 15936., 16416., 16896., 17112., 17696., 18280., 18864., 20140., 20744., 21348., 21952., 17248., 17808., 18368., 18928., 20180., 20760., 21340., 21920., 18472., 19072., 19672., 20272., 21564., 22184., 22804., 23424., 17776., 18272., 18768., 19264., 20352., 20864., 21376., 21888., 15440., 15824., 16208., 16592., 17436., 17832., 18228., 18624., 15369., 15850., 16331., 16812., 17776., 18272., 18768., 19264., 18128., 18768., 19408., 20048., 21316., 21976., 22636., 23296., 21833., 22642., 23451., 24260., 25866., 26700., 27534., 28368., 20603., 21398., 22193., 22988., 24580., 25400., 26220., 27040., 21997., 22842., 23687., 24532., 26174., 27044., 27914., 28784., 18792., 19488., 20184., 20880., 22236., 22952., 23668., 24384., 13425., 13962., 14499., 15036., 16072., 16624., 17176., 17728., 13931., 14430., 14929., 15428., 16410., 16924., 17438., 17952., 17864., 18528., 19192., 19856., 21148., 21832., 22516., 23200., 23591., 24430., 25269., 26108., 27744., 28608., 29472., 30336., 24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 22603., 23350., 24097., 24844., 26388., 27160., 27932., 28704., 16800., 17392., 17984., 18576., 19828., 20440., 21052., 21664., 12083., 12510., 12937., 13364., 14290., 14732., 15174., 15616., 11917., 12370., 12823., 13276., 14212., 14680., 15148., 15616., 15488., 16112., 16736., 17360., 18612., 19256., 19900., 20544., 21701., 22506., 23311., 24116., 25718., 26548., 27378., 28208., 21495., 22286., 23077., 23868., 25456., 26272., 27088., 27904., 21801., 22578., 23355., 24132., 25706., 26508., 27310., 28112., 18520., 19136., 19752., 20368., 21644., 22280., 22916., 23552., 15477., 15922., 16367., 16812., 17756., 18216., 18676., 19136., 14575., 15046., 15517., 15988., 16942., 17428., 17914., 18400., 19832., 20480., 21128., 21776., 23052., 23720., 24388., 25056., 24483., 25318., 26153., 26988., 28620., 29480., 30340., 31200., 22741., 23562., 24383., 25204., 26822., 27668., 28514., 29360., 21511., 22318., 23125., 23932., 25536., 26368., 27200., 28032., 18192., 18832., 19472., 20112., 21412., 22072., 22732., 23392., 14263., 14726., 15189., 15652., 16614., 17092., 17570., 18048.,  8976.,  9360.,  9744., 10128., 10876., 11272., 11668., 12064., 12816., 13344., 13872., 14400., 15392., 15936., 16480., 17024., 17080., 17760., 18440., 19120., 20396., 21096., 21796., 22496., 17536., 18192., 18848., 19504., 20756., 21432., 22108., 22784., 18504., 19136., 19768., 20400., 21628., 22280., 22932., 23584., 12272., 12768., 13264., 13760., 14720., 15232., 15744., 16256.,  7216.,  7568.,  7920.,  8272.,  8988.,  9352.,  9716., 10080.,  7295.,  7550.,  7805.,  8060.,  8616.,  8880.,  9144.,  9408.,  9040.,  9392.,  9744., 10096., 10844., 11208., 11572., 11936., 10319., 10774., 11229., 11684., 12606., 13076., 13546., 14016.,  9021.,  9442.,  9863., 10284., 11172., 11608., 12044., 12480.,  8235.,  8622.,  9009.,  9396., 10250., 10652., 11054., 11456.,  6008.,  6304.,  6600.,  6896.,  7556.,  7864.,  8172.,  8480.,  4567.,  4766.,  4965.,  5164.,  5648.,  5856.,  6064.,  6272., 13449., 13826., 14203., 14580., 15274., 15660., 16046., 16432., 13736., 14208., 14680., 15152., 16020., 16504., 16988., 17472., 16549., 17122., 17695., 18268., 19356., 19944., 20532., 21120., 14835., 15374., 15913., 16452., 17506., 18060., 18614., 19168., 13633., 14138., 14643., 15148., 16168., 16688., 17208., 17728., 10704., 11120., 11536., 11952., 12796., 13224., 13652., 14080.,  7873.,  8194.,  8515.,  8836.,  9458.,  9788., 10118., 10448., 11248., 11664., 12080., 12496., 13308., 13736., 14164., 14592., 14160., 14688., 15216., 15744., 16800., 17344., 17888., 18432., 20504., 21152., 21800., 22448., 23788., 24456., 25124., 25792., 21664., 22288., 22912., 23536., 24852., 25496., 26140., 26784., 19240., 19840., 20440., 21040., 22332., 22952., 23572., 24192., 16752., 17248., 17744., 18240., 19328., 19840., 20352., 20864., 13648., 14032., 14416., 14800., 15644., 16040., 16436., 16832., 13977., 14474., 14971., 15468., 16448., 16960., 17472., 17984., 17360., 18000., 18640., 19280., 20548., 21208., 21868., 22528., 20793., 21586., 22379., 23172., 24762., 25580., 26398., 27216., 20587., 21366., 22145., 22924., 24500., 25304., 26108., 26912., 20893., 21658., 22423., 23188., 24750., 25540., 26330., 27120., 18984., 19616., 20248., 20880., 22172., 22824., 23476., 24128., 15809., 16298., 16787., 17276., 18264., 18768., 19272., 19776., 14587., 15102., 15617., 16132., 17130., 17660., 18190., 18720., 20680., 21344., 22008., 22672., 23964., 24648., 25332., 26016., 23575., 24398., 25221., 26044., 27664., 28512., 29360., 30208., 21833., 22642., 23451., 24260., 25866., 26700., 27534., 28368., 20603., 21398., 22193., 22988., 24580., 25400., 26220., 27040., 17632., 18288., 18944., 19600., 20916., 21592., 22268., 22944., 12547., 13054., 13561., 14068., 15074., 15596., 16118., 16640., 14685., 15218., 15751., 16284., 17300., 17848., 18396., 18944., 17856., 18544., 19232., 19920., 21236., 21944., 22652., 23360., 22773., 23626., 24479., 25332., 26982., 27860., 28738., 29616., 23591., 24430., 25269., 26108., 27744., 28608., 29472., 30336., 24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 18776., 19392., 20008., 20624., 21900., 22536., 23172., 23808., 13829., 14290., 14751., 15212., 16172., 16648., 17124., 17600., 11071., 11494., 11917., 12340., 13246., 13684., 14122., 14560., 14392., 14976., 15560., 16144., 17356., 17960., 18564., 19168., 20307., 21062., 21817., 22572., 24124., 24904., 25684., 26464., 21701., 22506., 23311., 24116., 25718., 26548., 27378., 28208., 21495., 22286., 23077., 23868., 25456., 26272., 27088., 27904., 17936., 18576., 19216., 19856., 21156., 21816., 22476., 23136., 14663., 15142., 15621., 16100., 17078., 17572., 18066., 18560., 11792., 12176., 12560., 12944., 13692., 14088., 14484., 14880., 15888., 16416., 16944., 17472., 18464., 19008., 19552., 20096., 19384., 20064., 20744., 21424., 22700., 23400., 24100., 24800., 20416., 21136., 21856., 22576., 23892., 24632., 25372., 26112., 18312., 19008., 19704., 20400., 21692., 22408., 23124., 23840., 14384., 14944., 15504., 16064., 17088., 17664., 18240., 18816., 11632., 12048., 12464., 12880., 13660., 14088., 14516., 14944.,  7343.,  7646.,  7949.,  8252.,  8856.,  9168.,  9480.,  9792., 10896., 11312., 11728., 12144., 12956., 13384., 13812., 14240., 13855., 14390., 14925., 15460., 16462., 17012., 17562., 18112., 14669., 15234., 15799., 16364., 17396., 17976., 18556., 19136., 14907., 15438., 15969., 16500., 17498., 18044., 18590., 19136., 13048., 13472., 13896., 14320., 15108., 15544., 15980., 16416.,  8007.,  8318.,  8629.,  8940.,  9536.,  9856., 10176., 10496.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 22603., 23350., 24097., 24844., 26388., 27160., 27932., 28704., 20861., 21594., 22327., 23060., 24590., 25348., 26106., 26864., 21495., 22286., 23077., 23868., 25456., 26272., 27088., 27904., 21801., 22578., 23355., 24132., 25706., 26508., 27310., 28112., 22619., 23382., 24145., 24908., 26468., 27256., 28044., 28832., 22741., 23562., 24383., 25204., 26822., 27668., 28514., 29360., 21511., 22318., 23125., 23932., 25536., 26368., 27200., 28032., 20793., 21586., 22379., 23172., 24762., 25580., 26398., 27216., 24499., 25350., 26201., 27052., 28700., 29576., 30452., 31328., 25829., 26666., 27503., 28340., 29974., 30836., 31698., 32560., 23575., 24398., 25221., 26044., 27664., 28512., 29360., 30208., 21833., 22642., 23451., 24260., 25866., 26700., 27534., 28368., 20603., 21398., 22193., 22988., 24580., 25400., 26220., 27040., 21997., 22842., 23687., 24532., 26174., 27044., 27914., 28784., 23591., 24430., 25269., 26108., 27744., 28608., 29472., 30336., 24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 22603., 23350., 24097., 24844., 26388., 27160., 27932., 28704., 21701., 22506., 23311., 24116., 25718., 26548., 27378., 28208., 21495., 22286., 23077., 23868., 25456., 26272., 27088., 27904., 21801., 22578., 23355., 24132., 25706., 26508., 27310., 28112., 24483., 25318., 26153., 26988., 28620., 29480., 30340., 31200., 22741., 23562., 24383., 25204., 26822., 27668., 28514., 29360., 21511., 22318., 23125., 23932., 25536., 26368., 27200., 28032., 20793., 21586., 22379., 23172., 24762., 25580., 26398., 27216., 20587., 21366., 22145., 22924., 24500., 25304., 26108., 26912., 20893., 21658., 22423., 23188., 24750., 25540., 26330., 27120., 23575., 24398., 25221., 26044., 27664., 28512., 29360., 30208., 21833., 22642., 23451., 24260., 25866., 26700., 27534., 28368., 20603., 21398., 22193., 22988., 24580., 25400., 26220., 27040., 22773., 23626., 24479., 25332., 26982., 27860., 28738., 29616., 23591., 24430., 25269., 26108., 27744., 28608., 29472., 30336., 24857., 25618., 26379., 27140., 28698., 29484., 30270., 31056., 20307., 21062., 21817., 22572., 24124., 24904., 25684., 26464., 21701., 22506., 23311., 24116., 25718., 26548., 27378., 28208., 21495., 22286., 23077., 23868., 25456., 26272., 27088., 27904.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4977.,  5492.,  6025.,  6576.,  5484.,  6128.,  6796.,  7488.,  8023.,  8860.,  9727., 10624.,  8515.,  9348., 10211., 11104.,  9263., 10092., 10951., 11840.,  8012.,  8688.,  9388., 10112.,  6777.,  7300.,  7841.,  8400.,  8860.,  9552., 10268., 11008., 11600., 12480., 13392., 14336., 18180., 19312., 20484., 21696., 20532., 21680., 22868., 24096., 19044., 20208., 21412., 22656., 15248., 16192., 17168., 18176., 11516., 12240., 12988., 13760., 14959., 15852., 16775., 17728., 17556., 18704., 19892., 21120., 19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824., 12020., 13072., 14164., 15296.,  8711.,  9468., 10255., 11072., 12003., 12932., 13891., 14880., 14372., 15568., 16804., 18080., 19013., 20476., 21989., 23552., 19433., 20868., 22353., 23888., 20365., 21772., 23229., 24736., 16836., 17936., 19076., 20256.,  9563., 10356., 11179., 12032., 16727., 17692., 18687., 19712., 21428., 22672., 23956., 25280., 23233., 24756., 26329., 27952., 22117., 23612., 25157., 26752., 19401., 20804., 22257., 23760., 13652., 14736., 15860., 17024.,  8303.,  9068.,  9863., 10688., 11083., 11956., 12859., 13792., 14788., 15952., 17156., 18400., 18621., 20076., 21581., 23136., 19105., 20596., 22137., 23728., 19013., 20476., 21989., 23552., 14628., 15760., 16932., 18144., 10691., 11492., 12323., 13184., 11276., 11984., 12716., 13472., 14992., 15936., 16912., 17920., 17812., 18992., 20212., 21472., 19076., 20272., 21508., 22784., 16948., 18096., 19284., 20512., 12880., 13760., 14672., 15616.,  9196.,  9808., 10444., 11104.,  6645.,  7164.,  7701.,  8256.,  9148.,  9840., 10556., 11296., 11715., 12580., 13475., 14400., 13455., 14380., 15335., 16320., 12827., 13748., 14699., 15680.,  9692., 10416., 11164., 11936.,  6685.,  7212.,  7757.,  8320.,  8849.,  9396.,  9961., 10544., 11692., 12400., 13132., 13888., 18487., 19420., 20383., 21376., 16419., 17348., 18307., 19296., 18255., 19244., 20263., 21312., 14540., 15344., 16172., 17024., 10969., 11588., 12225., 12880., 12828., 13648., 14492., 15360., 13776., 14784., 15824., 16896., 16516., 17776., 19076., 20416., 14708., 15920., 17172., 18464., 15780., 17008., 18276., 19584., 12176., 13120., 14096., 15104.,  9724., 10448., 11196., 11968., 11535., 12460., 13415., 14400., 13716., 14864., 16052., 17280., 19433., 20868., 22353., 23888., 20365., 21772., 23229., 24736., 22897., 24340., 25833., 27376., 14900., 16016., 17172., 18368., 10983., 11836., 12719., 13632., 17539., 18500., 19491., 20512., 19236., 20432., 21668., 22944., 22117., 23612., 25157., 26752., 19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 11396., 12432., 13508., 14624.,  8379.,  9140.,  9931., 10752., 12727., 13660., 14623., 15616., 14452., 15632., 16852., 18112., 19105., 20596., 22137., 23728., 19013., 20476., 21989., 23552., 19433., 20868., 22353., 23888., 14932., 16016., 17140., 18304., 12047., 12844., 13671., 14528., 16171., 17140., 18139., 19168., 20228., 21456., 22724., 24032., 24861., 26412., 28013., 29664., 23233., 24756., 26329., 27952., 22117., 23612., 25157., 26752., 16420., 17552., 18724., 19936., 11107., 11940., 12803., 13696.,  8972.,  9680., 10412., 11168., 11920., 12864., 13840., 14848., 17108., 18352., 19636., 20960., 16836., 18096., 19396., 20736., 16820., 18096., 19412., 20768., 13008., 14016., 15056., 16128.,  9580., 10320., 11084., 11872.,  9813., 10428., 11061., 11712., 13116., 13936., 14780., 15648., 16355., 17380., 18435., 19520., 17007., 18028., 19079., 20160., 17915., 18932., 19979., 21056., 13852., 14640., 15452., 16288., 10045., 10604., 11181., 11776.,  4977.,  5492.,  6025.,  6576.,  5484.,  6128.,  6796.,  7488.,  8023.,  8860.,  9727., 10624.,  8515.,  9348., 10211., 11104.,  9263., 10092., 10951., 11840.,  8012.,  8688.,  9388., 10112.,  6777.,  7300.,  7841.,  8400.,  8860.,  9552., 10268., 11008., 11600., 12480., 13392., 14336., 18180., 19312., 20484., 21696., 20532., 21680., 22868., 24096., 19044., 20208., 21412., 22656., 15248., 16192., 17168., 18176., 11516., 12240., 12988., 13760., 14959., 15852., 16775., 17728., 17556., 18704., 19892., 21120., 19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824., 12020., 13072., 14164., 15296.,  8711.,  9468., 10255., 11072., 12003., 12932., 13891., 14880., 14372., 15568., 16804., 18080., 19013., 20476., 21989., 23552., 19433., 20868., 22353., 23888., 20365., 21772., 23229., 24736., 16836., 17936., 19076., 20256.,  9563., 10356., 11179., 12032., 16727., 17692., 18687., 19712., 21428., 22672., 23956., 25280., 23233., 24756., 26329., 27952., 22117., 23612., 25157., 26752., 19401., 20804., 22257., 23760., 13652., 14736., 15860., 17024.,  8303.,  9068.,  9863., 10688., 11083., 11956., 12859., 13792., 14788., 15952., 17156., 18400., 18621., 20076., 21581., 23136., 19105., 20596., 22137., 23728., 19013., 20476., 21989., 23552., 14628., 15760., 16932., 18144., 10691., 11492., 12323., 13184., 11276., 11984., 12716., 13472., 14992., 15936., 16912., 17920., 17812., 18992., 20212., 21472., 19076., 20272., 21508., 22784., 16948., 18096., 19284., 20512., 12880., 13760., 14672., 15616.,  9196.,  9808., 10444., 11104.,  6645.,  7164.,  7701.,  8256.,  9148.,  9840., 10556., 11296., 11715., 12580., 13475., 14400., 13455., 14380., 15335., 16320., 12827., 13748., 14699., 15680.,  9692., 10416., 11164., 11936.,  6685.,  7212.,  7757.,  8320.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824., 19013., 20476., 21989., 23552., 19433., 20868., 22353., 23888., 20365., 21772., 23229., 24736., 23233., 24756., 26329., 27952., 22117., 23612., 25157., 26752., 19401., 20804., 22257., 23760., 18621., 20076., 21581., 23136., 19105., 20596., 22137., 23728., 19013., 20476., 21989., 23552., 19433., 20868., 22353., 23888., 20365., 21772., 23229., 24736., 22897., 24340., 25833., 27376., 22117., 23612., 25157., 26752., 19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 19105., 20596., 22137., 23728., 19013., 20476., 21989., 23552., 19433., 20868., 22353., 23888., 24861., 26412., 28013., 29664., 23233., 24756., 26329., 27952., 22117., 23612., 25157., 26752., 19401., 20804., 22257., 23760., 17261., 18636., 20061., 21536., 15633., 16980., 18377., 19824., 19013., 20476., 21989., 23552., 19433., 20868., 22353., 23888., 20365., 21772., 23229., 24736., 23233., 24756., 26329., 27952., 22117., 23612., 25157., 26752., 19401., 20804., 22257., 23760., 18621., 20076., 21581., 23136., 19105., 20596., 22137., 23728., 19013., 20476., 21989., 23552.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8697.,  8930.,  9462.,  9704., 10263., 10514., 11100., 11360.,  8564.,  8856.,  9520.,  9824., 10524., 10840., 11576., 11904., 10371., 10734., 11582., 11960., 12853., 13246., 14184., 14592.,  9567.,  9926., 10770., 11144., 12033., 12422., 13356., 13760.,  9275.,  9630., 10470., 10840., 11725., 12110., 13040., 13440.,  8228.,  8536.,  9248.,  9568., 10316., 10648., 11432., 11776.,  6393.,  6642.,  7174.,  7432.,  7991.,  8258.,  8844.,  9120.,  8324.,  8632.,  9312.,  9632., 10348., 10680., 11432., 11776., 10320., 10720., 11616., 12032., 12976., 13408., 14400., 14848., 16076., 16584., 17744., 18272., 19492., 20040., 21320., 21888., 18460., 18984., 20160., 20704., 21940., 22504., 23800., 24384., 17260., 17800., 18992., 19552., 20804., 21384., 22696., 23296., 16080., 16544., 17568., 18048., 19120., 19616., 20736., 21248., 12676., 13048., 13856., 14240., 15084., 15480., 16360., 16768., 13707., 14174., 15094., 15576., 16541., 17038., 18048., 18560., 17660., 18280., 19488., 20128., 21396., 22056., 23384., 24064., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 15180., 15720., 16880., 17440., 18660., 19240., 20520., 21120., 12171., 12558., 13414., 13816., 14717., 15134., 16080., 16512., 13391., 13894., 14850., 15368., 16369., 16902., 17948., 18496., 19180., 19848., 21104., 21792., 23108., 23816., 25192., 25920., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208., 20633., 21394., 22902., 23688., 25271., 26082., 27740., 28576., 20221., 20954., 22434., 23192., 24747., 25530., 27160., 27968., 18108., 18696., 19904., 20512., 21780., 22408., 23736., 24384., 10767., 11190., 12082., 12520., 13457., 13910., 14892., 15360., 16147., 16686., 17678., 18232., 19269., 19838., 20920., 21504., 20700., 21416., 22720., 23456., 24820., 25576., 27000., 27776., 22513., 23362., 24958., 25832., 27503., 28402., 30148., 31072., 22101., 22922., 24490., 25336., 26979., 27850., 29568., 30464., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 17388., 17960., 19152., 19744., 20996., 21608., 22920., 23552., 13395., 13790., 14654., 15064., 15973., 16398., 17352., 17792., 10583., 11030., 11930., 12392., 13337., 13814., 14804., 15296., 15436., 16072., 17296., 17952., 19236., 19912., 21256., 21952., 21805., 22586., 24114., 24920., 26523., 27354., 29032., 29888., 24529., 25346., 26910., 27752., 29391., 30258., 31972., 32864., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208., 16732., 17352., 18592., 19232., 20532., 21192., 22552., 23232., 10967., 11398., 12298., 12744., 13689., 14150., 15140., 15616., 11108., 11480., 12192., 12576., 13324., 13720., 14504., 14912., 14480., 15008., 15968., 16512., 17520., 18080., 19136., 19712., 15532., 16168., 17360., 18016., 19268., 19944., 21256., 21952., 15996., 16648., 17856., 18528., 19796., 20488., 21816., 22528., 13836., 14440., 15600., 16224., 17444., 18088., 19368., 20032., 10832., 11296., 12192., 12672., 13616., 14112., 15104., 15616.,  9124.,  9432., 10080., 10400., 11084., 11416., 12136., 12480.,  5333.,  5546.,  6042.,  6264.,  6787.,  7018.,  7568.,  7808.,  8644.,  8952.,  9632.,  9952., 10668., 11000., 11752., 12096., 11815., 12230., 13082., 13512., 14409., 14854., 15796., 16256., 13443., 13918., 14830., 15320., 16277., 16782., 17784., 18304., 14495., 14966., 15874., 16360., 17313., 17814., 18812., 19328., 13044., 13432., 14160., 14560., 15324., 15736., 16536., 16960.,  8277.,  8570.,  9130.,  9432., 10019., 10330., 10944., 11264.,  8217.,  8482.,  9046.,  9320.,  9911., 10194., 10812., 11104., 10676., 11032., 11760., 12128., 12892., 13272., 14072., 14464., 16867., 17326., 18270., 18744., 19733., 20222., 21256., 21760., 15039., 15494., 16434., 16904., 17889., 18374., 19404., 19904., 16859., 17374., 18374., 18904., 19949., 20494., 21584., 22144., 15012., 15448., 16288., 16736., 17612., 18072., 18984., 19456., 10585., 10930., 11558., 11912., 12567., 12930., 13612., 13984., 12036., 12472., 13280., 13728., 14572., 15032., 15912., 16384., 16592., 17120., 18144., 18688., 19760., 20320., 21440., 22016., 18764., 19400., 20688., 21344., 22692., 23368., 24776., 25472., 16988., 17576., 18816., 19424., 20724., 21352., 22712., 23360., 16812., 17416., 18672., 19296., 20612., 21256., 22632., 23296., 14032., 14496., 15520., 16000., 17072., 17568., 18688., 19200., 13188., 13560., 14368., 14752., 15596., 15992., 16872., 17280., 15019., 15518., 16470., 16984., 17981., 18510., 19552., 20096., 16124., 16744., 17952., 18592., 19860., 20520., 21848., 22528., 20633., 21394., 22902., 23688., 25271., 26082., 27740., 28576., 20221., 20954., 22434., 23192., 24747., 25530., 27160., 27968., 22945., 23714., 25230., 26024., 27615., 28434., 30100., 30944., 16780., 17384., 18608., 19232., 20516., 21160., 22504., 23168., 12523., 13006., 13958., 14456., 15453., 15966., 17008., 17536., 16239., 16774., 17762., 18312., 19345., 19910., 20988., 21568., 18668., 19336., 20592., 21280., 22596., 23304., 24680., 25408., 22101., 22922., 24490., 25336., 26979., 27850., 29568., 30464., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 15484., 16008., 17152., 17696., 18900., 19464., 20728., 21312., 12527., 12918., 13778., 14184., 15089., 15510., 16460., 16896., 12275., 12782., 13742., 14264., 15269., 15806., 16856., 17408., 17052., 17704., 18944., 19616., 20916., 21608., 22968., 23680., 24529., 25346., 26910., 27752., 29391., 30258., 31972., 32864., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208., 20633., 21394., 22902., 23688., 25271., 26082., 27740., 28576., 15852., 16424., 17616., 18208., 19460., 20072., 21384., 22016., 12659., 13086., 13982., 14424., 15365., 15822., 16808., 17280., 16567., 17110., 18106., 18664., 19705., 20278., 21364., 21952., 20108., 20808., 22096., 22816., 24164., 24904., 26312., 27072., 23949., 24826., 26450., 27352., 29051., 29978., 31752., 32704., 22513., 23362., 24958., 25832., 27503., 28402., 30148., 31072., 22101., 22922., 24490., 25336., 26979., 27850., 29568., 30464., 20316., 20936., 22176., 22816., 24116., 24776., 26136., 26816., 15863., 16326., 17258., 17736., 18713., 19206., 20228., 20736.,  8548.,  8920.,  9632., 10016., 10764., 11160., 11944., 12352., 12432., 12960., 13920., 14464., 15472., 16032., 17088., 17664., 18156., 18856., 20112., 20832., 22148., 22888., 24264., 25024., 19644., 20360., 21632., 22368., 23700., 24456., 25848., 26624., 21644., 22376., 23664., 24416., 25764., 26536., 27944., 28736., 15056., 15648., 16672., 17280., 18352., 18976., 20096., 20736.,  9764., 10200., 10976., 11424., 12236., 12696., 13544., 14016.,  9525.,  9834., 10426., 10744., 11363., 11690., 12336., 12672., 12356., 12792., 13600., 14048., 14892., 15352., 16232., 16704., 14791., 15366., 16378., 16968., 18025., 18630., 19732., 20352., 14307., 14878., 15886., 16472., 17525., 18126., 19224., 19840., 14335., 14902., 15906., 16488., 17537., 18134., 19228., 19840., 11060., 11512., 12304., 12768., 13596., 14072., 14936., 15424.,  8821.,  9146.,  9738., 10072., 10691., 11034., 11680., 12032.,  8697.,  8930.,  9462.,  9704., 10263., 10514., 11100., 11360.,  8564.,  8856.,  9520.,  9824., 10524., 10840., 11576., 11904., 10371., 10734., 11582., 11960., 12853., 13246., 14184., 14592.,  9567.,  9926., 10770., 11144., 12033., 12422., 13356., 13760.,  9275.,  9630., 10470., 10840., 11725., 12110., 13040., 13440.,  8228.,  8536.,  9248.,  9568., 10316., 10648., 11432., 11776.,  6393.,  6642.,  7174.,  7432.,  7991.,  8258.,  8844.,  9120.,  8324.,  8632.,  9312.,  9632., 10348., 10680., 11432., 11776., 10320., 10720., 11616., 12032., 12976., 13408., 14400., 14848., 16076., 16584., 17744., 18272., 19492., 20040., 21320., 21888., 18460., 18984., 20160., 20704., 21940., 22504., 23800., 24384., 17260., 17800., 18992., 19552., 20804., 21384., 22696., 23296., 16080., 16544., 17568., 18048., 19120., 19616., 20736., 21248., 12676., 13048., 13856., 14240., 15084., 15480., 16360., 16768., 13707., 14174., 15094., 15576., 16541., 17038., 18048., 18560., 17660., 18280., 19488., 20128., 21396., 22056., 23384., 24064., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 15180., 15720., 16880., 17440., 18660., 19240., 20520., 21120., 12171., 12558., 13414., 13816., 14717., 15134., 16080., 16512., 13391., 13894., 14850., 15368., 16369., 16902., 17948., 18496., 19180., 19848., 21104., 21792., 23108., 23816., 25192., 25920., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208., 20633., 21394., 22902., 23688., 25271., 26082., 27740., 28576., 20221., 20954., 22434., 23192., 24747., 25530., 27160., 27968., 18108., 18696., 19904., 20512., 21780., 22408., 23736., 24384., 10767., 11190., 12082., 12520., 13457., 13910., 14892., 15360., 16147., 16686., 17678., 18232., 19269., 19838., 20920., 21504., 20700., 21416., 22720., 23456., 24820., 25576., 27000., 27776., 22513., 23362., 24958., 25832., 27503., 28402., 30148., 31072., 22101., 22922., 24490., 25336., 26979., 27850., 29568., 30464., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 17388., 17960., 19152., 19744., 20996., 21608., 22920., 23552., 13395., 13790., 14654., 15064., 15973., 16398., 17352., 17792., 10583., 11030., 11930., 12392., 13337., 13814., 14804., 15296., 15436., 16072., 17296., 17952., 19236., 19912., 21256., 21952., 21805., 22586., 24114., 24920., 26523., 27354., 29032., 29888., 24529., 25346., 26910., 27752., 29391., 30258., 31972., 32864., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208., 16732., 17352., 18592., 19232., 20532., 21192., 22552., 23232., 10967., 11398., 12298., 12744., 13689., 14150., 15140., 15616., 11108., 11480., 12192., 12576., 13324., 13720., 14504., 14912., 14480., 15008., 15968., 16512., 17520., 18080., 19136., 19712., 15532., 16168., 17360., 18016., 19268., 19944., 21256., 21952., 15996., 16648., 17856., 18528., 19796., 20488., 21816., 22528., 13836., 14440., 15600., 16224., 17444., 18088., 19368., 20032., 10832., 11296., 12192., 12672., 13616., 14112., 15104., 15616.,  9124.,  9432., 10080., 10400., 11084., 11416., 12136., 12480.,  5333.,  5546.,  6042.,  6264.,  6787.,  7018.,  7568.,  7808.,  8644.,  8952.,  9632.,  9952., 10668., 11000., 11752., 12096., 11815., 12230., 13082., 13512., 14409., 14854., 15796., 16256., 13443., 13918., 14830., 15320., 16277., 16782., 17784., 18304., 14495., 14966., 15874., 16360., 17313., 17814., 18812., 19328., 13044., 13432., 14160., 14560., 15324., 15736., 16536., 16960.,  8277.,  8570.,  9130.,  9432., 10019., 10330., 10944., 11264.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208., 20633., 21394., 22902., 23688., 25271., 26082., 27740., 28576., 20221., 20954., 22434., 23192., 24747., 25530., 27160., 27968., 22513., 23362., 24958., 25832., 27503., 28402., 30148., 31072., 22101., 22922., 24490., 25336., 26979., 27850., 29568., 30464., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 21805., 22586., 24114., 24920., 26523., 27354., 29032., 29888., 24529., 25346., 26910., 27752., 29391., 30258., 31972., 32864., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208., 20633., 21394., 22902., 23688., 25271., 26082., 27740., 28576., 20221., 20954., 22434., 23192., 24747., 25530., 27160., 27968., 22945., 23714., 25230., 26024., 27615., 28434., 30100., 30944., 22101., 22922., 24490., 25336., 26979., 27850., 29568., 30464., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 24529., 25346., 26910., 27752., 29391., 30258., 31972., 32864., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208., 20633., 21394., 22902., 23688., 25271., 26082., 27740., 28576., 23949., 24826., 26450., 27352., 29051., 29978., 31752., 32704., 22513., 23362., 24958., 25832., 27503., 28402., 30148., 31072., 22101., 22922., 24490., 25336., 26979., 27850., 29568., 30464., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 20189., 20890., 22338., 23064., 24587., 25338., 26936., 27712., 18753., 19426., 20846., 21544., 23039., 23762., 25332., 26080., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208., 20633., 21394., 22902., 23688., 25271., 26082., 27740., 28576., 20221., 20954., 22434., 23192., 24747., 25530., 27160., 27968., 22513., 23362., 24958., 25832., 27503., 28402., 30148., 31072., 22101., 22922., 24490., 25336., 26979., 27850., 29568., 30464., 22649., 23378., 24854., 25608., 27159., 27938., 29564., 30368., 21805., 22586., 24114., 24920., 26523., 27354., 29032., 29888., 24529., 25346., 26910., 27752., 29391., 30258., 31972., 32864., 22069., 22858., 24394., 25208., 26819., 27658., 29344., 30208.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8649.,  8882.,  9115.,  9348.,  9850., 10092., 10334., 10576., 11123., 11374., 11625., 11876., 12468., 12728., 12988., 13248.,  7492.,  7784.,  8076.,  8368.,  9008.,  9312.,  9616.,  9920., 10620., 10936., 11252., 11568., 12328., 12656., 12984., 13312.,  8091.,  8454.,  8817.,  9180.,  9986., 10364., 10742., 11120., 12001., 12394., 12787., 13180., 14136., 14544., 14952., 15360.,  8535.,  8894.,  9253.,  9612., 10414., 10788., 11162., 11536., 12413., 12802., 13191., 13580., 14532., 14936., 15340., 15744., 10003., 10358., 10713., 11068., 11866., 12236., 12606., 12976., 13849., 14234., 14619., 15004., 15952., 16352., 16752., 17152.,  7764.,  8072.,  8380.,  8688.,  9344.,  9664.,  9984., 10304., 11020., 11352., 11684., 12016., 12792., 13136., 13480., 13824.,  5561.,  5810.,  6059.,  6308.,  6794.,  7052.,  7310.,  7568.,  8099.,  8366.,  8633.,  8900.,  9476.,  9752., 10028., 10304.,  6996.,  7304.,  7612.,  7920.,  8576.,  8896.,  9216.,  9536., 10252., 10584., 10916., 11248., 12024., 12368., 12712., 13056.,  7952.,  8352.,  8752.,  9152., 10016., 10432., 10848., 11264., 12208., 12640., 13072., 13504., 14528., 14976., 15424., 15872., 12252., 12760., 13268., 13776., 14864., 15392., 15920., 16448., 17636., 18184., 18732., 19280., 20568., 21136., 21704., 22272., 14188., 14712., 15236., 15760., 16864., 17408., 17952., 18496., 19700., 20264., 20828., 21392., 22696., 23280., 23864., 24448., 13052., 13592., 14132., 14672., 15792., 16352., 16912., 17472., 18692., 19272., 19852., 20432., 21752., 22352., 22952., 23552., 11600., 12064., 12528., 12992., 13920., 14400., 14880., 15360., 16368., 16864., 17360., 17856., 18944., 19456., 19968., 20480.,  9108.,  9480.,  9852., 10224., 10944., 11328., 11712., 12096., 12876., 13272., 13668., 14064., 14904., 15312., 15720., 16128., 10371., 10838., 11305., 11772., 12682., 13164., 13646., 14128., 15113., 15610., 16107., 16604., 17664., 18176., 18688., 19200., 15436., 16056., 16676., 17296., 18496., 19136., 19776., 20416., 21716., 22376., 23036., 23696., 25096., 25776., 26456., 27136., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 12284., 12824., 13364., 13904., 15024., 15584., 16144., 16704., 17924., 18504., 19084., 19664., 20984., 21584., 22184., 22784., 10131., 10518., 10905., 11292., 12090., 12492., 12894., 13296., 14169., 14586., 15003., 15420., 16368., 16800., 17232., 17664., 13543., 14046., 14549., 15052., 15998., 16516., 17034., 17552., 18573., 19106., 19639., 20172., 21268., 21816., 22364., 22912., 18684., 19352., 20020., 20688., 21936., 22624., 23312., 24000., 25348., 26056., 26764., 27472., 28920., 29648., 30376., 31104., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 16925., 17658., 18391., 19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424., 29232., 30040., 30848., 16556., 17144., 17732., 18320., 19488., 20096., 20704., 21312., 22580., 23208., 23836., 24464., 25832., 26480., 27128., 27776.,  9335.,  9758., 10181., 10604., 11438., 11876., 12314., 12752., 13661., 14114., 14567., 15020., 16004., 16472., 16940., 17408., 14667., 15206., 15745., 16284., 17266., 17820., 18374., 18928., 19985., 20554., 21123., 21692., 22824., 23408., 23992., 24576., 17836., 18552., 19268., 19984., 21280., 22016., 22752., 23488., 24884., 25640., 26396., 27152., 28648., 29424., 30200., 30976., 18321., 19170., 20019., 20868., 22418., 23292., 24166., 25040., 26715., 27614., 28513., 29412., 31212., 32136., 33060., 33984., 18549., 19370., 20191., 21012., 22534., 23380., 24226., 25072., 26719., 27590., 28461., 29332., 31104., 32000., 32896., 33792., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 13596., 14168., 14740., 15312., 16464., 17056., 17648., 18240., 19492., 20104., 20716., 21328., 22680., 23312., 23944., 24576.,  8475.,  8870.,  9265.,  9660., 10466., 10876., 11286., 11696., 12577., 13002., 13427., 13852., 14808., 15248., 15688., 16128., 11567., 12014., 12461., 12908., 13798., 14260., 14722., 15184., 16149., 16626., 17103., 17580., 18620., 19112., 19604., 20096., 15836., 16472., 17108., 17744., 18960., 19616., 20272., 20928., 22244., 22920., 23596., 24272., 25688., 26384., 27080., 27776., 20045., 20826., 21607., 22388., 23870., 24676., 25482., 26288., 27895., 28726., 29557., 30388., 32120., 32976., 33832., 34688., 22385., 23202., 24019., 24836., 26354., 27196., 28038., 28880., 30523., 31390., 32257., 33124., 34892., 35784., 36676., 37568., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280., 14796., 15416., 16036., 16656., 17856., 18496., 19136., 19776., 21076., 21736., 22396., 23056., 24456., 25136., 25816., 26496.,  9727., 10158., 10589., 11020., 11862., 12308., 12754., 13200., 14117., 14578., 15039., 15500., 16492., 16968., 17444., 17920.,  8724.,  9096.,  9468.,  9840., 10560., 10944., 11328., 11712., 12492., 12888., 13284., 13680., 14520., 14928., 15336., 15744., 13200., 13728., 14256., 14784., 15776., 16320., 16864., 17408., 18480., 19040., 19600., 20160., 21312., 21888., 22464., 23040., 16604., 17240., 17876., 18512., 19728., 20384., 21040., 21696., 23012., 23688., 24364., 25040., 26456., 27152., 27848., 28544., 15468., 16120., 16772., 17424., 18656., 19328., 20000., 20672., 22004., 22696., 23388., 24080., 25512., 26224., 26936., 27648., 13244., 13848., 14452., 15056., 16240., 16864., 17488., 18112., 19396., 20040., 20684., 21328., 22712., 23376., 24040., 24704., 10576., 11040., 11504., 11968., 12896., 13376., 13856., 14336., 15344., 15840., 16336., 16832., 17920., 18432., 18944., 19456., 10196., 10504., 10812., 11120., 11776., 12096., 12416., 12736., 13452., 13784., 14116., 14448., 15224., 15568., 15912., 16256.,  4757.,  4970.,  5183.,  5396.,  5846.,  6068.,  6290.,  6512.,  7007.,  7238.,  7469.,  7700.,  8240.,  8480.,  8720.,  8960.,  7380.,  7688.,  7996.,  8304.,  8960.,  9280.,  9600.,  9920., 10636., 10968., 11300., 11632., 12408., 12752., 13096., 13440.,  9455.,  9870., 10285., 10700., 11526., 11956., 12386., 12816., 13717., 14162., 14607., 15052., 16028., 16488., 16948., 17408., 10859., 11334., 11809., 12284., 13170., 13660., 14150., 14640., 15601., 16106., 16611., 17116., 18152., 18672., 19192., 19712., 11175., 11646., 12117., 12588., 13470., 13956., 14442., 14928., 15885., 16386., 16887., 17388., 18420., 18936., 19452., 19968., 11300., 11688., 12076., 12464., 13200., 13600., 14000., 14400., 15196., 15608., 16020., 16432., 17288., 17712., 18136., 18560.,  6789.,  7082.,  7375.,  7668.,  8230.,  8532.,  8834.,  9136.,  9743., 10054., 10365., 10676., 11328., 11648., 11968., 12288.,  5609.,  5874.,  6139.,  6404.,  6938.,  7212.,  7486.,  7760.,  8339.,  8622.,  8905.,  9188.,  9812., 10104., 10396., 10688.,  7556.,  7912.,  8268.,  8624.,  9328.,  9696., 10064., 10432., 11196., 11576., 11956., 12336., 13160., 13552., 13944., 14336., 12795., 13254., 13713., 14172., 15074., 15548., 16022., 16496., 17473., 17962., 18451., 18940., 19992., 20496., 21000., 21504., 11191., 11646., 12101., 12556., 13454., 13924., 14394., 14864., 15837., 16322., 16807., 17292., 18340., 18840., 19340., 19840., 12723., 13238., 13753., 14268., 15226., 15756., 16286., 16816., 17849., 18394., 18939., 19484., 20592., 21152., 21712., 22272., 10964., 11400., 11836., 12272., 13056., 13504., 13952., 14400., 15244., 15704., 16164., 16624., 17528., 18000., 18472., 18944.,  7705.,  8050.,  8395.,  8740.,  9322.,  9676., 10030., 10384., 11011., 11374., 11737., 12100., 12772., 13144., 13516., 13888., 10196., 10632., 11068., 11504., 12288., 12736., 13184., 13632., 14476., 14936., 15396., 15856., 16760., 17232., 17704., 18176., 16272., 16800., 17328., 17856., 18848., 19392., 19936., 20480., 21552., 22112., 22672., 23232., 24384., 24960., 25536., 26112., 15452., 16088., 16724., 17360., 18576., 19232., 19888., 20544., 21860., 22536., 23212., 23888., 25304., 26000., 26696., 27392., 13228., 13816., 14404., 14992., 16160., 16768., 17376., 17984., 19252., 19880., 20508., 21136., 22504., 23152., 23800., 24448., 14140., 14744., 15348., 15952., 17136., 17760., 18384., 19008., 20292., 20936., 21580., 22224., 23608., 24272., 24936., 25600., 11600., 12064., 12528., 12992., 13920., 14400., 14880., 15360., 16368., 16864., 17360., 17856., 18944., 19456., 19968., 20480., 10132., 10504., 10876., 11248., 11968., 12352., 12736., 13120., 13900., 14296., 14692., 15088., 15928., 16336., 16744., 17152., 15011., 15510., 16009., 16508., 17450., 17964., 18478., 18992., 20009., 20538., 21067., 21596., 22688., 23232., 23776., 24320., 14412., 15032., 15652., 16272., 17472., 18112., 18752., 19392., 20692., 21352., 22012., 22672., 24072., 24752., 25432., 26112., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 16925., 17658., 18391., 19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424., 29232., 30040., 30848., 19265., 20034., 20803., 21572., 23042., 23836., 24630., 25424., 27019., 27838., 28657., 29476., 31196., 32040., 32884., 33728., 15420., 16024., 16628., 17232., 18416., 19040., 19664., 20288., 21572., 22216., 22860., 23504., 24888., 25552., 26216., 26880., 10739., 11222., 11705., 12188., 13082., 13580., 14078., 14576., 15545., 16058., 16571., 17084., 18128., 18656., 19184., 19712., 13063., 13598., 14133., 14668., 15646., 16196., 16746., 17296., 18349., 18914., 19479., 20044., 21172., 21752., 22332., 22912., 15612., 16280., 16948., 17616., 18864., 19552., 20240., 20928., 22276., 22984., 23692., 24400., 25848., 26576., 27304., 28032., 18549., 19370., 20191., 21012., 22534., 23380., 24226., 25072., 26719., 27590., 28461., 29332., 31104., 32000., 32896., 33792., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 11372., 11896., 12420., 12944., 14048., 14592., 15136., 15680., 16884., 17448., 18012., 18576., 19880., 20464., 21048., 21632.,  8791.,  9182.,  9573.,  9964., 10766., 11172., 11578., 11984., 12861., 13282., 13703., 14124., 15076., 15512., 15948., 16384., 13099., 13606., 14113., 14620., 15570., 16092., 16614., 17136., 18161., 18698., 19235., 19772., 20872., 21424., 21976., 22528., 16748., 17400., 18052., 18704., 19936., 20608., 21280., 21952., 23284., 23976., 24668., 25360., 26792., 27504., 28216., 28928., 22385., 23202., 24019., 24836., 26354., 27196., 28038., 28880., 30523., 31390., 32257., 33124., 34892., 35784., 36676., 37568., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 14620., 15192., 15764., 16336., 17488., 18080., 18672., 19264., 20516., 21128., 21740., 22352., 23704., 24336., 24968., 25600., 11067., 11494., 11921., 12348., 13186., 13628., 14070., 14512., 15425., 15882., 16339., 16796., 17784., 18256., 18728., 19200., 13199., 13742., 14285., 14828., 15814., 16372., 16930., 17488., 18549., 19122., 19695., 20268., 21404., 21992., 22580., 23168., 18972., 19672., 20372., 21072., 22352., 23072., 23792., 24512., 25892., 26632., 27372., 28112., 29592., 30352., 31112., 31872., 20141., 21018., 21895., 22772., 24350., 25252., 26154., 27056., 28759., 29686., 30613., 31540., 33368., 34320., 35272., 36224., 18321., 19170., 20019., 20868., 22418., 23292., 24166., 25040., 26715., 27614., 28513., 29412., 31212., 32136., 33060., 33984., 18549., 19370., 20191., 21012., 22534., 23380., 24226., 25072., 26719., 27590., 28461., 29332., 31104., 32000., 32896., 33792., 17868., 18488., 19108., 19728., 20928., 21568., 22208., 22848., 24148., 24808., 25468., 26128., 27528., 28208., 28888., 29568., 11295., 11758., 12221., 12684., 13558., 14036., 14514., 14992., 15941., 16434., 16927., 17420., 18444., 18952., 19460., 19968.,  9748., 10120., 10492., 10864., 11584., 11968., 12352., 12736., 13516., 13912., 14308., 14704., 15544., 15952., 16360., 16768., 13200., 13728., 14256., 14784., 15776., 16320., 16864., 17408., 18480., 19040., 19600., 20160., 21312., 21888., 22464., 23040., 17692., 18392., 19092., 19792., 21072., 21792., 22512., 23232., 24612., 25352., 26092., 26832., 28312., 29072., 29832., 30592., 18604., 19320., 20036., 20752., 22048., 22784., 23520., 24256., 25652., 26408., 27164., 27920., 29416., 30192., 30968., 31744., 20540., 21272., 22004., 22736., 24048., 24800., 25552., 26304., 27716., 28488., 29260., 30032., 31544., 32336., 33128., 33920., 14800., 15392., 15984., 16576., 17632., 18240., 18848., 19456., 20592., 21216., 21840., 22464., 23680., 24320., 24960., 25600.,  9300.,  9736., 10172., 10608., 11392., 11840., 12288., 12736., 13580., 14040., 14500., 14960., 15864., 16336., 16808., 17280.,  6901.,  7210.,  7519.,  7828.,  8374.,  8692.,  9010.,  9328.,  9919., 10246., 10573., 10900., 11536., 11872., 12208., 12544., 10580., 11016., 11452., 11888., 12672., 13120., 13568., 14016., 14860., 15320., 15780., 16240., 17144., 17616., 18088., 18560., 13199., 13774., 14349., 14924., 15910., 16500., 17090., 17680., 18741., 19346., 19951., 20556., 21692., 22312., 22932., 23552., 14539., 15110., 15681., 16252., 17234., 17820., 18406., 18992., 20049., 20650., 21251., 21852., 22984., 23600., 24216., 24832., 12807., 13374., 13941., 14508., 15486., 16068., 16650., 17232., 18285., 18882., 19479., 20076., 21204., 21816., 22428., 23040.,  9316.,  9768., 10220., 10672., 11472., 11936., 12400., 12864., 13724., 14200., 14676., 15152., 16072., 16560., 17048., 17536.,  7845.,  8170.,  8495.,  8820.,  9414.,  9748., 10082., 10416., 11055., 11398., 11741., 12084., 12768., 13120., 13472., 13824.,  8649.,  8882.,  9115.,  9348.,  9850., 10092., 10334., 10576., 11123., 11374., 11625., 11876., 12468., 12728., 12988., 13248.,  7492.,  7784.,  8076.,  8368.,  9008.,  9312.,  9616.,  9920., 10620., 10936., 11252., 11568., 12328., 12656., 12984., 13312.,  8091.,  8454.,  8817.,  9180.,  9986., 10364., 10742., 11120., 12001., 12394., 12787., 13180., 14136., 14544., 14952., 15360.,  8535.,  8894.,  9253.,  9612., 10414., 10788., 11162., 11536., 12413., 12802., 13191., 13580., 14532., 14936., 15340., 15744., 10003., 10358., 10713., 11068., 11866., 12236., 12606., 12976., 13849., 14234., 14619., 15004., 15952., 16352., 16752., 17152.,  7764.,  8072.,  8380.,  8688.,  9344.,  9664.,  9984., 10304., 11020., 11352., 11684., 12016., 12792., 13136., 13480., 13824.,  5561.,  5810.,  6059.,  6308.,  6794.,  7052.,  7310.,  7568.,  8099.,  8366.,  8633.,  8900.,  9476.,  9752., 10028., 10304.,  6996.,  7304.,  7612.,  7920.,  8576.,  8896.,  9216.,  9536., 10252., 10584., 10916., 11248., 12024., 12368., 12712., 13056.,  7952.,  8352.,  8752.,  9152., 10016., 10432., 10848., 11264., 12208., 12640., 13072., 13504., 14528., 14976., 15424., 15872., 12252., 12760., 13268., 13776., 14864., 15392., 15920., 16448., 17636., 18184., 18732., 19280., 20568., 21136., 21704., 22272., 14188., 14712., 15236., 15760., 16864., 17408., 17952., 18496., 19700., 20264., 20828., 21392., 22696., 23280., 23864., 24448., 13052., 13592., 14132., 14672., 15792., 16352., 16912., 17472., 18692., 19272., 19852., 20432., 21752., 22352., 22952., 23552., 11600., 12064., 12528., 12992., 13920., 14400., 14880., 15360., 16368., 16864., 17360., 17856., 18944., 19456., 19968., 20480.,  9108.,  9480.,  9852., 10224., 10944., 11328., 11712., 12096., 12876., 13272., 13668., 14064., 14904., 15312., 15720., 16128., 10371., 10838., 11305., 11772., 12682., 13164., 13646., 14128., 15113., 15610., 16107., 16604., 17664., 18176., 18688., 19200., 15436., 16056., 16676., 17296., 18496., 19136., 19776., 20416., 21716., 22376., 23036., 23696., 25096., 25776., 26456., 27136., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 12284., 12824., 13364., 13904., 15024., 15584., 16144., 16704., 17924., 18504., 19084., 19664., 20984., 21584., 22184., 22784., 10131., 10518., 10905., 11292., 12090., 12492., 12894., 13296., 14169., 14586., 15003., 15420., 16368., 16800., 17232., 17664., 13543., 14046., 14549., 15052., 15998., 16516., 17034., 17552., 18573., 19106., 19639., 20172., 21268., 21816., 22364., 22912., 18684., 19352., 20020., 20688., 21936., 22624., 23312., 24000., 25348., 26056., 26764., 27472., 28920., 29648., 30376., 31104., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 16925., 17658., 18391., 19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424., 29232., 30040., 30848., 16556., 17144., 17732., 18320., 19488., 20096., 20704., 21312., 22580., 23208., 23836., 24464., 25832., 26480., 27128., 27776.,  9335.,  9758., 10181., 10604., 11438., 11876., 12314., 12752., 13661., 14114., 14567., 15020., 16004., 16472., 16940., 17408., 14667., 15206., 15745., 16284., 17266., 17820., 18374., 18928., 19985., 20554., 21123., 21692., 22824., 23408., 23992., 24576., 17836., 18552., 19268., 19984., 21280., 22016., 22752., 23488., 24884., 25640., 26396., 27152., 28648., 29424., 30200., 30976., 18321., 19170., 20019., 20868., 22418., 23292., 24166., 25040., 26715., 27614., 28513., 29412., 31212., 32136., 33060., 33984., 18549., 19370., 20191., 21012., 22534., 23380., 24226., 25072., 26719., 27590., 28461., 29332., 31104., 32000., 32896., 33792., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 13596., 14168., 14740., 15312., 16464., 17056., 17648., 18240., 19492., 20104., 20716., 21328., 22680., 23312., 23944., 24576.,  8475.,  8870.,  9265.,  9660., 10466., 10876., 11286., 11696., 12577., 13002., 13427., 13852., 14808., 15248., 15688., 16128., 11567., 12014., 12461., 12908., 13798., 14260., 14722., 15184., 16149., 16626., 17103., 17580., 18620., 19112., 19604., 20096., 15836., 16472., 17108., 17744., 18960., 19616., 20272., 20928., 22244., 22920., 23596., 24272., 25688., 26384., 27080., 27776., 20045., 20826., 21607., 22388., 23870., 24676., 25482., 26288., 27895., 28726., 29557., 30388., 32120., 32976., 33832., 34688., 22385., 23202., 24019., 24836., 26354., 27196., 28038., 28880., 30523., 31390., 32257., 33124., 34892., 35784., 36676., 37568., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280., 14796., 15416., 16036., 16656., 17856., 18496., 19136., 19776., 21076., 21736., 22396., 23056., 24456., 25136., 25816., 26496.,  9727., 10158., 10589., 11020., 11862., 12308., 12754., 13200., 14117., 14578., 15039., 15500., 16492., 16968., 17444., 17920.,  8724.,  9096.,  9468.,  9840., 10560., 10944., 11328., 11712., 12492., 12888., 13284., 13680., 14520., 14928., 15336., 15744., 13200., 13728., 14256., 14784., 15776., 16320., 16864., 17408., 18480., 19040., 19600., 20160., 21312., 21888., 22464., 23040., 16604., 17240., 17876., 18512., 19728., 20384., 21040., 21696., 23012., 23688., 24364., 25040., 26456., 27152., 27848., 28544., 15468., 16120., 16772., 17424., 18656., 19328., 20000., 20672., 22004., 22696., 23388., 24080., 25512., 26224., 26936., 27648., 13244., 13848., 14452., 15056., 16240., 16864., 17488., 18112., 19396., 20040., 20684., 21328., 22712., 23376., 24040., 24704., 10576., 11040., 11504., 11968., 12896., 13376., 13856., 14336., 15344., 15840., 16336., 16832., 17920., 18432., 18944., 19456., 10196., 10504., 10812., 11120., 11776., 12096., 12416., 12736., 13452., 13784., 14116., 14448., 15224., 15568., 15912., 16256.,  4757.,  4970.,  5183.,  5396.,  5846.,  6068.,  6290.,  6512.,  7007.,  7238.,  7469.,  7700.,  8240.,  8480.,  8720.,  8960.,  7380.,  7688.,  7996.,  8304.,  8960.,  9280.,  9600.,  9920., 10636., 10968., 11300., 11632., 12408., 12752., 13096., 13440.,  9455.,  9870., 10285., 10700., 11526., 11956., 12386., 12816., 13717., 14162., 14607., 15052., 16028., 16488., 16948., 17408., 10859., 11334., 11809., 12284., 13170., 13660., 14150., 14640., 15601., 16106., 16611., 17116., 18152., 18672., 19192., 19712., 11175., 11646., 12117., 12588., 13470., 13956., 14442., 14928., 15885., 16386., 16887., 17388., 18420., 18936., 19452., 19968., 11300., 11688., 12076., 12464., 13200., 13600., 14000., 14400., 15196., 15608., 16020., 16432., 17288., 17712., 18136., 18560.,  6789.,  7082.,  7375.,  7668.,  8230.,  8532.,  8834.,  9136.,  9743., 10054., 10365., 10676., 11328., 11648., 11968., 12288.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 16925., 17658., 18391., 19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424., 29232., 30040., 30848., 18321., 19170., 20019., 20868., 22418., 23292., 24166., 25040., 26715., 27614., 28513., 29412., 31212., 32136., 33060., 33984., 18549., 19370., 20191., 21012., 22534., 23380., 24226., 25072., 26719., 27590., 28461., 29332., 31104., 32000., 32896., 33792., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 20045., 20826., 21607., 22388., 23870., 24676., 25482., 26288., 27895., 28726., 29557., 30388., 32120., 32976., 33832., 34688., 22385., 23202., 24019., 24836., 26354., 27196., 28038., 28880., 30523., 31390., 32257., 33124., 34892., 35784., 36676., 37568., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 16925., 17658., 18391., 19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424., 29232., 30040., 30848., 19265., 20034., 20803., 21572., 23042., 23836., 24630., 25424., 27019., 27838., 28657., 29476., 31196., 32040., 32884., 33728., 18549., 19370., 20191., 21012., 22534., 23380., 24226., 25072., 26719., 27590., 28461., 29332., 31104., 32000., 32896., 33792., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 22385., 23202., 24019., 24836., 26354., 27196., 28038., 28880., 30523., 31390., 32257., 33124., 34892., 35784., 36676., 37568., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 20141., 21018., 21895., 22772., 24350., 25252., 26154., 27056., 28759., 29686., 30613., 31540., 33368., 34320., 35272., 36224., 18321., 19170., 20019., 20868., 22418., 23292., 24166., 25040., 26715., 27614., 28513., 29412., 31212., 32136., 33060., 33984., 18549., 19370., 20191., 21012., 22534., 23380., 24226., 25072., 26719., 27590., 28461., 29332., 31104., 32000., 32896., 33792., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 16893., 17594., 18295., 18996., 20398., 21124., 21850., 22576., 24103., 24854., 25605., 26356., 28008., 28784., 29560., 30336., 15073., 15746., 16419., 17092., 18466., 19164., 19862., 20560., 22059., 22782., 23505., 24228., 25852., 26600., 27348., 28096., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280., 16697., 17458., 18219., 18980., 20442., 21228., 22014., 22800., 24387., 25198., 26009., 26820., 28532., 29368., 30204., 31040., 16925., 17658., 18391., 19124., 20558., 21316., 22074., 22832., 24391., 25174., 25957., 26740., 28424., 29232., 30040., 30848., 18321., 19170., 20019., 20868., 22418., 23292., 24166., 25040., 26715., 27614., 28513., 29412., 31212., 32136., 33060., 33984., 18549., 19370., 20191., 21012., 22534., 23380., 24226., 25072., 26719., 27590., 28461., 29332., 31104., 32000., 32896., 33792., 20761., 21490., 22219., 22948., 24378., 25132., 25886., 26640., 28195., 28974., 29753., 30532., 32212., 33016., 33820., 34624., 20045., 20826., 21607., 22388., 23870., 24676., 25482., 26288., 27895., 28726., 29557., 30388., 32120., 32976., 33832., 34688., 22385., 23202., 24019., 24836., 26354., 27196., 28038., 28880., 30523., 31390., 32257., 33124., 34892., 35784., 36676., 37568., 18517., 19306., 20095., 20884., 22374., 23188., 24002., 24816., 26431., 27270., 28109., 28948., 30688., 31552., 32416., 33280.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1956.,  2666.,  3400.,  3670.,  3940.,  4210.,  3380.,  2541.,  3380.,  4532.,  5690.,  6000.,  6310.,  6620.,  5260.,  3914.,  4990.,  6620.,  8225.,  8550.,  8875.,  9200.,  7250.,  5350.,  6670.,  8780., 10825., 11150., 11475., 11800.,  9250.,  6790.,  8350., 10940., 13425., 13750., 14075., 14400., 11250.,  8230., 10030., 13100., 16025., 16350., 16675., 17000., 13250.,  9670.,  6956.,  9004., 10910., 11120., 11330., 11540.,  8900.,  6422.,  4296.,  5486.,  6550.,  6670.,  6790.,  6910.,  5240.,  3711., 12900., 16874., 20680., 20950., 21220., 21490., 16820., 12333., 16052., 20916., 25530., 25840., 26150., 26460., 20620., 15050., 18430., 23900., 29025., 29350., 29675., 30000., 23250., 16870., 20110., 26060., 31625., 31950., 32275., 32600., 25250., 18310., 21790., 28220., 34225., 34550., 34875., 35200., 27250., 19750., 23470., 30380., 36825., 37150., 37475., 37800., 29250., 21190., 15788., 20268., 24350., 24560., 24770., 24980., 19140., 13718.,  9480., 12014., 14230., 14350., 14470., 14590., 11000.,  7743., 23844., 31082., 37960., 38230., 38500., 38770., 30260., 22125., 28724., 37300., 45370., 45680., 45990., 46300., 35980., 26186., 31870., 41180., 49825., 50150., 50475., 50800., 39250., 28390., 33550., 43340., 52425., 52750., 53075., 53400., 41250., 29830., 35230., 45500., 55025., 55350., 55675., 56000., 43250., 31270., 36910., 47660., 57625., 57950., 58275., 58600., 45250., 32710., 24620., 31532., 37790., 38000., 38210., 38420., 29380., 21014., 14664., 18542., 21910., 22030., 22150., 22270., 16760., 11775.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8225.,  8550.,  8875.,  9200., 10825., 11150., 11475., 11800., 13425., 13750., 14075., 14400., 16025., 16350., 16675., 17000., 29025., 29350., 29675., 30000., 31625., 31950., 32275., 32600., 34225., 34550., 34875., 35200., 36825., 37150., 37475., 37800., 49825., 50150., 50475., 50800., 52425., 52750., 53075., 53400., 55025., 55350., 55675., 56000., 57625., 57950., 58275., 58600.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3822.,  3912.,  5206.,  5332.,  6635.,  6800.,  7160.,  7340.,  7685.,  7880.,  8210.,  8420.,  6586.,  6760.,  4947.,  5082.,  6592.,  6760.,  8832.,  9064., 11080., 11380., 11680., 12000., 12280., 12620., 12880., 13240., 10224., 10520.,  7600.,  7828.,  9710.,  9980., 12870., 13240., 15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 14050., 14500., 10355., 10700., 12950., 13340., 17030., 17560., 20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600., 17890., 18500., 13115., 13580., 16190., 16700., 21190., 21880., 25975., 26850., 26600., 27500., 27225., 28150., 27850., 28800., 21730., 22500., 15875., 16460., 19430., 20060., 25350., 26200., 30975., 32050., 31600., 32700., 32225., 33350., 32850., 34000., 25570., 26500., 18635., 19340., 13360., 13912., 17264., 18008., 20880., 21820., 21280., 22240., 21680., 22660., 22080., 23080., 16992., 17800., 12232., 12844.,  8142.,  8592., 10366., 10972., 12335., 13100., 12560., 13340., 12785., 13580., 13010., 13820.,  9826., 10480.,  6927.,  7422.,  3822.,  3912.,  5206.,  5332.,  6635.,  6800.,  7160.,  7340.,  7685.,  7880.,  8210.,  8420.,  6586.,  6760.,  4947.,  5082.,  6592.,  6760.,  8832.,  9064., 11080., 11380., 11680., 12000., 12280., 12620., 12880., 13240., 10224., 10520.,  7600.,  7828.,  9710.,  9980., 12870., 13240., 15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 14050., 14500., 10355., 10700., 12950., 13340., 17030., 17560., 20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600., 17890., 18500., 13115., 13580., 16190., 16700., 21190., 21880., 25975., 26850., 26600., 27500., 27225., 28150., 27850., 28800., 21730., 22500., 15875., 16460., 19430., 20060., 25350., 26200., 30975., 32050., 31600., 32700., 32225., 33350., 32850., 34000., 25570., 26500., 18635., 19340., 13360., 13912., 17264., 18008., 20880., 21820., 21280., 22240., 21680., 22660., 22080., 23080., 16992., 17800., 12232., 12844.,  8142.,  8592., 10366., 10972., 12335., 13100., 12560., 13340., 12785., 13580., 13010., 13820.,  9826., 10480.,  6927.,  7422.,  3822.,  3912.,  5206.,  5332.,  6635.,  6800.,  7160.,  7340.,  7685.,  7880.,  8210.,  8420.,  6586.,  6760.,  4947.,  5082.,  6592.,  6760.,  8832.,  9064., 11080., 11380., 11680., 12000., 12280., 12620., 12880., 13240., 10224., 10520.,  7600.,  7828.,  9710.,  9980., 12870., 13240., 15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 14050., 14500., 10355., 10700., 12950., 13340., 17030., 17560., 20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600., 17890., 18500., 13115., 13580., 16190., 16700., 21190., 21880., 25975., 26850., 26600., 27500., 27225., 28150., 27850., 28800., 21730., 22500., 15875., 16460., 19430., 20060., 25350., 26200., 30975., 32050., 31600., 32700., 32225., 33350., 32850., 34000., 25570., 26500., 18635., 19340., 13360., 13912., 17264., 18008., 20880., 21820., 21280., 22240., 21680., 22660., 22080., 23080., 16992., 17800., 12232., 12844.,  8142.,  8592., 10366., 10972., 12335., 13100., 12560., 13340., 12785., 13580., 13010., 13820.,  9826., 10480.,  6927.,  7422.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600., 25975., 26850., 26600., 27500., 27225., 28150., 27850., 28800., 30975., 32050., 31600., 32700., 32225., 33350., 32850., 34000., 15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600., 25975., 26850., 26600., 27500., 27225., 28150., 27850., 28800., 30975., 32050., 31600., 32700., 32225., 33350., 32850., 34000., 15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600., 25975., 26850., 26600., 27500., 27225., 28150., 27850., 28800., 30975., 32050., 31600., 32700., 32225., 33350., 32850., 34000.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2178.,  2268.,  2358.,  2448.,  2862.,  2988.,  3114.,  3240.,  4081.,  4246.,  4411.,  4576.,  4540.,  4720.,  4900.,  5080.,  4999.,  5194.,  5389.,  5584.,  5458.,  5668.,  5878.,  6088.,  4358.,  4532.,  4706.,  4880.,  3359.,  3494.,  3629.,  3764.,  4568.,  4736.,  4904.,  5072.,  5912.,  6144.,  6376.,  6608.,  8228.,  8528.,  8828.,  9128.,  8832.,  9152.,  9472.,  9792.,  9436.,  9776., 10116., 10456., 10040., 10400., 10760., 11120.,  7928.,  8224.,  8520.,  8816.,  6012.,  6240.,  6468.,  6696.,  7630.,  7900.,  8170.,  8440.,  9754., 10124., 10494., 10864., 13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533., 15058., 15583., 16108., 15182., 15732., 16282., 16832., 11842., 12292., 12742., 13192.,  8845.,  9190.,  9535.,  9880., 10918., 11308., 11698., 12088., 13818., 14348., 14878., 15408., 18427., 19102., 19777., 20452., 19076., 19776., 20476., 21176., 19725., 20450., 21175., 21900., 20374., 21124., 21874., 22624., 15778., 16388., 16998., 17608., 11685., 12150., 12615., 13080., 14206., 14716., 15226., 15736., 17882., 18572., 19262., 19952., 23619., 24494., 25369., 26244., 24268., 25168., 26068., 26968., 24917., 25842., 26767., 27692., 25566., 26516., 27466., 28416., 19714., 20484., 21254., 22024., 14525., 15110., 15695., 16280., 17494., 18124., 18754., 19384., 21946., 22796., 23646., 24496., 28811., 29886., 30961., 32036., 29460., 30560., 31660., 32760., 30109., 31234., 32359., 33484., 30758., 31908., 33058., 34208., 23650., 24580., 25510., 26440., 17365., 18070., 18775., 19480., 15032., 15584., 16136., 16688., 18808., 19552., 20296., 21040., 25588., 26528., 27468., 28408., 26112., 27072., 28032., 28992., 26636., 27616., 28596., 29576., 27160., 28160., 29160., 30160., 21080., 21888., 22696., 23504., 15724., 16336., 16948., 17560., 15834., 16284., 16734., 17184., 20126., 20732., 21338., 21944., 23905., 24670., 25435., 26200., 24340., 25120., 25900., 26680., 24775., 25570., 26365., 27160., 25210., 26020., 26830., 27640., 18998., 19652., 20306., 20960., 13359., 13854., 14349., 14844.,  2178.,  2268.,  2358.,  2448.,  2862.,  2988.,  3114.,  3240.,  4081.,  4246.,  4411.,  4576.,  4540.,  4720.,  4900.,  5080.,  4999.,  5194.,  5389.,  5584.,  5458.,  5668.,  5878.,  6088.,  4358.,  4532.,  4706.,  4880.,  3359.,  3494.,  3629.,  3764.,  4568.,  4736.,  4904.,  5072.,  5912.,  6144.,  6376.,  6608.,  8228.,  8528.,  8828.,  9128.,  8832.,  9152.,  9472.,  9792.,  9436.,  9776., 10116., 10456., 10040., 10400., 10760., 11120.,  7928.,  8224.,  8520.,  8816.,  6012.,  6240.,  6468.,  6696.,  7630.,  7900.,  8170.,  8440.,  9754., 10124., 10494., 10864., 13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533., 15058., 15583., 16108., 15182., 15732., 16282., 16832., 11842., 12292., 12742., 13192.,  8845.,  9190.,  9535.,  9880., 10918., 11308., 11698., 12088., 13818., 14348., 14878., 15408., 18427., 19102., 19777., 20452., 19076., 19776., 20476., 21176., 19725., 20450., 21175., 21900., 20374., 21124., 21874., 22624., 15778., 16388., 16998., 17608., 11685., 12150., 12615., 13080., 14206., 14716., 15226., 15736., 17882., 18572., 19262., 19952., 23619., 24494., 25369., 26244., 24268., 25168., 26068., 26968., 24917., 25842., 26767., 27692., 25566., 26516., 27466., 28416., 19714., 20484., 21254., 22024., 14525., 15110., 15695., 16280., 17494., 18124., 18754., 19384., 21946., 22796., 23646., 24496., 28811., 29886., 30961., 32036., 29460., 30560., 31660., 32760., 30109., 31234., 32359., 33484., 30758., 31908., 33058., 34208., 23650., 24580., 25510., 26440., 17365., 18070., 18775., 19480., 15032., 15584., 16136., 16688., 18808., 19552., 20296., 21040., 25588., 26528., 27468., 28408., 26112., 27072., 28032., 28992., 26636., 27616., 28596., 29576., 27160., 28160., 29160., 30160., 21080., 21888., 22696., 23504., 15724., 16336., 16948., 17560., 15834., 16284., 16734., 17184., 20126., 20732., 21338., 21944., 23905., 24670., 25435., 26200., 24340., 25120., 25900., 26680., 24775., 25570., 26365., 27160., 25210., 26020., 26830., 27640., 18998., 19652., 20306., 20960., 13359., 13854., 14349., 14844.,  2178.,  2268.,  2358.,  2448.,  2862.,  2988.,  3114.,  3240.,  4081.,  4246.,  4411.,  4576.,  4540.,  4720.,  4900.,  5080.,  4999.,  5194.,  5389.,  5584.,  5458.,  5668.,  5878.,  6088.,  4358.,  4532.,  4706.,  4880.,  3359.,  3494.,  3629.,  3764.,  4568.,  4736.,  4904.,  5072.,  5912.,  6144.,  6376.,  6608.,  8228.,  8528.,  8828.,  9128.,  8832.,  9152.,  9472.,  9792.,  9436.,  9776., 10116., 10456., 10040., 10400., 10760., 11120.,  7928.,  8224.,  8520.,  8816.,  6012.,  6240.,  6468.,  6696.,  7630.,  7900.,  8170.,  8440.,  9754., 10124., 10494., 10864., 13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533., 15058., 15583., 16108., 15182., 15732., 16282., 16832., 11842., 12292., 12742., 13192.,  8845.,  9190.,  9535.,  9880., 10918., 11308., 11698., 12088., 13818., 14348., 14878., 15408., 18427., 19102., 19777., 20452., 19076., 19776., 20476., 21176., 19725., 20450., 21175., 21900., 20374., 21124., 21874., 22624., 15778., 16388., 16998., 17608., 11685., 12150., 12615., 13080., 14206., 14716., 15226., 15736., 17882., 18572., 19262., 19952., 23619., 24494., 25369., 26244., 24268., 25168., 26068., 26968., 24917., 25842., 26767., 27692., 25566., 26516., 27466., 28416., 19714., 20484., 21254., 22024., 14525., 15110., 15695., 16280., 17494., 18124., 18754., 19384., 21946., 22796., 23646., 24496., 28811., 29886., 30961., 32036., 29460., 30560., 31660., 32760., 30109., 31234., 32359., 33484., 30758., 31908., 33058., 34208., 23650., 24580., 25510., 26440., 17365., 18070., 18775., 19480., 15032., 15584., 16136., 16688., 18808., 19552., 20296., 21040., 25588., 26528., 27468., 28408., 26112., 27072., 28032., 28992., 26636., 27616., 28596., 29576., 27160., 28160., 29160., 30160., 21080., 21888., 22696., 23504., 15724., 16336., 16948., 17560., 15834., 16284., 16734., 17184., 20126., 20732., 21338., 21944., 23905., 24670., 25435., 26200., 24340., 25120., 25900., 26680., 24775., 25570., 26365., 27160., 25210., 26020., 26830., 27640., 18998., 19652., 20306., 20960., 13359., 13854., 14349., 14844.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533., 15058., 15583., 16108., 15182., 15732., 16282., 16832., 18427., 19102., 19777., 20452., 19076., 19776., 20476., 21176., 19725., 20450., 21175., 21900., 20374., 21124., 21874., 22624., 23619., 24494., 25369., 26244., 24268., 25168., 26068., 26968., 24917., 25842., 26767., 27692., 25566., 26516., 27466., 28416., 28811., 29886., 30961., 32036., 29460., 30560., 31660., 32760., 30109., 31234., 32359., 33484., 30758., 31908., 33058., 34208., 13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533., 15058., 15583., 16108., 15182., 15732., 16282., 16832., 18427., 19102., 19777., 20452., 19076., 19776., 20476., 21176., 19725., 20450., 21175., 21900., 20374., 21124., 21874., 22624., 23619., 24494., 25369., 26244., 24268., 25168., 26068., 26968., 24917., 25842., 26767., 27692., 25566., 26516., 27466., 28416., 28811., 29886., 30961., 32036., 29460., 30560., 31660., 32760., 30109., 31234., 32359., 33484., 30758., 31908., 33058., 34208., 13235., 13710., 14185., 14660., 13884., 14384., 14884., 15384., 14533., 15058., 15583., 16108., 15182., 15732., 16282., 16832., 18427., 19102., 19777., 20452., 19076., 19776., 20476., 21176., 19725., 20450., 21175., 21900., 20374., 21124., 21874., 22624., 23619., 24494., 25369., 26244., 24268., 25168., 26068., 26968., 24917., 25842., 26767., 27692., 25566., 26516., 27466., 28416., 28811., 29886., 30961., 32036., 29460., 30560., 31660., 32760., 30109., 31234., 32359., 33484., 30758., 31908., 33058., 34208.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7311.,  7824.,  9980., 10664., 12745., 13600., 13795., 14680., 14845., 15760., 15895., 16840., 12764., 13520.,  9597., 10164., 12800., 13520., 17168., 18128., 21560., 22760., 22760., 24000., 23960., 25240., 25160., 26480., 19984., 21040., 14864., 15656.,  9991., 10744., 13444., 14448., 16925., 18180., 18175., 19480., 19425., 20780., 20675., 22080., 16356., 17480., 12109., 12952.,  9367., 10168., 12548., 13616., 15725., 17060., 16975., 18360., 18225., 19660., 19475., 20960., 15332., 16520., 11293., 12184., 10663., 11512., 14212., 15344., 17725., 19140., 18975., 20440., 20225., 21740., 21475., 23040., 16868., 18120., 12397., 13336., 13879., 14776., 18436., 19632., 22925., 24420., 24175., 25720., 25425., 27020., 26675., 28320., 20964., 22280., 15421., 16408.,  9560., 10160., 12688., 13488., 15760., 16760., 16560., 17600., 17360., 18440., 18160., 19280., 14224., 15120., 10424., 11096.,  6339.,  6816.,  8252.,  8888., 10045., 10840., 10495., 11320., 10945., 11800., 11395., 12280.,  8732.,  9440.,  6249.,  6780.,  7311.,  7824.,  9980., 10664., 12745., 13600., 13795., 14680., 14845., 15760., 15895., 16840., 12764., 13520.,  9597., 10164., 12800., 13520., 17168., 18128., 21560., 22760., 22760., 24000., 23960., 25240., 25160., 26480., 19984., 21040., 14864., 15656.,  9991., 10744., 13444., 14448., 16925., 18180., 18175., 19480., 19425., 20780., 20675., 22080., 16356., 17480., 12109., 12952.,  9367., 10168., 12548., 13616., 15725., 17060., 16975., 18360., 18225., 19660., 19475., 20960., 15332., 16520., 11293., 12184., 10663., 11512., 14212., 15344., 17725., 19140., 18975., 20440., 20225., 21740., 21475., 23040., 16868., 18120., 12397., 13336., 13879., 14776., 18436., 19632., 22925., 24420., 24175., 25720., 25425., 27020., 26675., 28320., 20964., 22280., 15421., 16408.,  9560., 10160., 12688., 13488., 15760., 16760., 16560., 17600., 17360., 18440., 18160., 19280., 14224., 15120., 10424., 11096.,  6339.,  6816.,  8252.,  8888., 10045., 10840., 10495., 11320., 10945., 11800., 11395., 12280.,  8732.,  9440.,  6249.,  6780.,  7311.,  7824.,  9980., 10664., 12745., 13600., 13795., 14680., 14845., 15760., 15895., 16840., 12764., 13520.,  9597., 10164., 12800., 13520., 17168., 18128., 21560., 22760., 22760., 24000., 23960., 25240., 25160., 26480., 19984., 21040., 14864., 15656.,  9991., 10744., 13444., 14448., 16925., 18180., 18175., 19480., 19425., 20780., 20675., 22080., 16356., 17480., 12109., 12952.,  9367., 10168., 12548., 13616., 15725., 17060., 16975., 18360., 18225., 19660., 19475., 20960., 15332., 16520., 11293., 12184., 10663., 11512., 14212., 15344., 17725., 19140., 18975., 20440., 20225., 21740., 21475., 23040., 16868., 18120., 12397., 13336., 13879., 14776., 18436., 19632., 22925., 24420., 24175., 25720., 25425., 27020., 26675., 28320., 20964., 22280., 15421., 16408.,  9560., 10160., 12688., 13488., 15760., 16760., 16560., 17600., 17360., 18440., 18160., 19280., 14224., 15120., 10424., 11096.,  6339.,  6816.,  8252.,  8888., 10045., 10840., 10495., 11320., 10945., 11800., 11395., 12280.,  8732.,  9440.,  6249.,  6780.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16925., 18180., 18175., 19480., 19425., 20780., 20675., 22080., 15725., 17060., 16975., 18360., 18225., 19660., 19475., 20960., 17725., 19140., 18975., 20440., 20225., 21740., 21475., 23040., 22925., 24420., 24175., 25720., 25425., 27020., 26675., 28320., 16925., 18180., 18175., 19480., 19425., 20780., 20675., 22080., 15725., 17060., 16975., 18360., 18225., 19660., 19475., 20960., 17725., 19140., 18975., 20440., 20225., 21740., 21475., 23040., 22925., 24420., 24175., 25720., 25425., 27020., 26675., 28320., 16925., 18180., 18175., 19480., 19425., 20780., 20675., 22080., 15725., 17060., 16975., 18360., 18225., 19660., 19475., 20960., 17725., 19140., 18975., 20440., 20225., 21740., 21475., 23040., 22925., 24420., 24175., 25720., 25425., 27020., 26675., 28320.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4083.,  4254.,  4716.,  4896.,  5384.,  5624.,  6228.,  6480.,  7703.,  8018.,  8822.,  9152.,  8621.,  8966.,  9800., 10160.,  9539.,  9914., 10778., 11168., 10457., 10862., 11756., 12176.,  8360.,  8696.,  9412.,  9760.,  6453.,  6714.,  7258.,  7528.,  8764.,  9088.,  9808., 10144., 11360., 11808., 12752., 13216., 15852., 16432., 17656., 18256., 17060., 17680., 18944., 19584., 18268., 18928., 20232., 20912., 19476., 20176., 21520., 22240., 15392., 15968., 17040., 17632., 11684., 12128., 12936., 13392.,  9281.,  9614., 10388., 10736., 12088., 12552., 13564., 14048., 17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 17304., 17928., 19084., 19728., 13303., 13786., 14654., 15152., 14129., 14510., 15332., 15728., 18424., 18952., 20028., 20576., 22509., 23194., 24578., 25288., 23807., 24542., 25976., 26736., 25105., 25890., 27374., 28184., 26403., 27238., 28772., 29632., 20312., 21000., 22220., 22928., 14695., 15226., 16142., 16688., 10529., 10958., 11828., 12272., 13496., 14088., 15228., 15840., 17213., 17978., 19442., 20232., 18511., 19326., 20840., 21680., 19809., 20674., 22238., 23128., 21107., 22022., 23636., 24576., 16152., 16904., 18188., 18960., 11735., 12314., 13278., 13872., 10769., 11246., 12164., 12656., 13688., 14344., 15548., 16224., 18317., 19162., 20706., 21576., 19615., 20510., 22104., 23024., 20913., 21858., 23502., 24472., 22211., 23206., 24900., 25920., 17112., 17928., 19276., 20112., 12615., 13242., 14254., 14896.,  9004.,  9328., 10000., 10336., 11616., 12064., 12944., 13408., 17116., 17696., 18840., 19440., 18164., 18784., 19968., 20608., 19212., 19872., 21096., 21776., 20260., 20960., 22224., 22944., 16160., 16736., 17744., 18336., 12468., 12912., 13672., 14128., 12363., 12678., 13308., 13632., 16072., 16504., 17332., 17776., 19535., 20090., 21110., 21680., 20405., 20990., 22040., 22640., 21275., 21890., 22970., 23600., 22145., 22790., 23900., 24560., 16936., 17464., 18340., 18880., 12093., 12498., 13146., 13560.,  4083.,  4254.,  4716.,  4896.,  5384.,  5624.,  6228.,  6480.,  7703.,  8018.,  8822.,  9152.,  8621.,  8966.,  9800., 10160.,  9539.,  9914., 10778., 11168., 10457., 10862., 11756., 12176.,  8360.,  8696.,  9412.,  9760.,  6453.,  6714.,  7258.,  7528.,  8764.,  9088.,  9808., 10144., 11360., 11808., 12752., 13216., 15852., 16432., 17656., 18256., 17060., 17680., 18944., 19584., 18268., 18928., 20232., 20912., 19476., 20176., 21520., 22240., 15392., 15968., 17040., 17632., 11684., 12128., 12936., 13392.,  9281.,  9614., 10388., 10736., 12088., 12552., 13564., 14048., 17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 17304., 17928., 19084., 19728., 13303., 13786., 14654., 15152., 14129., 14510., 15332., 15728., 18424., 18952., 20028., 20576., 22509., 23194., 24578., 25288., 23807., 24542., 25976., 26736., 25105., 25890., 27374., 28184., 26403., 27238., 28772., 29632., 20312., 21000., 22220., 22928., 14695., 15226., 16142., 16688., 10529., 10958., 11828., 12272., 13496., 14088., 15228., 15840., 17213., 17978., 19442., 20232., 18511., 19326., 20840., 21680., 19809., 20674., 22238., 23128., 21107., 22022., 23636., 24576., 16152., 16904., 18188., 18960., 11735., 12314., 13278., 13872., 10769., 11246., 12164., 12656., 13688., 14344., 15548., 16224., 18317., 19162., 20706., 21576., 19615., 20510., 22104., 23024., 20913., 21858., 23502., 24472., 22211., 23206., 24900., 25920., 17112., 17928., 19276., 20112., 12615., 13242., 14254., 14896.,  9004.,  9328., 10000., 10336., 11616., 12064., 12944., 13408., 17116., 17696., 18840., 19440., 18164., 18784., 19968., 20608., 19212., 19872., 21096., 21776., 20260., 20960., 22224., 22944., 16160., 16736., 17744., 18336., 12468., 12912., 13672., 14128., 12363., 12678., 13308., 13632., 16072., 16504., 17332., 17776., 19535., 20090., 21110., 21680., 20405., 20990., 22040., 22640., 21275., 21890., 22970., 23600., 22145., 22790., 23900., 24560., 16936., 17464., 18340., 18880., 12093., 12498., 13146., 13560.,  4083.,  4254.,  4716.,  4896.,  5384.,  5624.,  6228.,  6480.,  7703.,  8018.,  8822.,  9152.,  8621.,  8966.,  9800., 10160.,  9539.,  9914., 10778., 11168., 10457., 10862., 11756., 12176.,  8360.,  8696.,  9412.,  9760.,  6453.,  6714.,  7258.,  7528.,  8764.,  9088.,  9808., 10144., 11360., 11808., 12752., 13216., 15852., 16432., 17656., 18256., 17060., 17680., 18944., 19584., 18268., 18928., 20232., 20912., 19476., 20176., 21520., 22240., 15392., 15968., 17040., 17632., 11684., 12128., 12936., 13392.,  9281.,  9614., 10388., 10736., 12088., 12552., 13564., 14048., 17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 17304., 17928., 19084., 19728., 13303., 13786., 14654., 15152., 14129., 14510., 15332., 15728., 18424., 18952., 20028., 20576., 22509., 23194., 24578., 25288., 23807., 24542., 25976., 26736., 25105., 25890., 27374., 28184., 26403., 27238., 28772., 29632., 20312., 21000., 22220., 22928., 14695., 15226., 16142., 16688., 10529., 10958., 11828., 12272., 13496., 14088., 15228., 15840., 17213., 17978., 19442., 20232., 18511., 19326., 20840., 21680., 19809., 20674., 22238., 23128., 21107., 22022., 23636., 24576., 16152., 16904., 18188., 18960., 11735., 12314., 13278., 13872., 10769., 11246., 12164., 12656., 13688., 14344., 15548., 16224., 18317., 19162., 20706., 21576., 19615., 20510., 22104., 23024., 20913., 21858., 23502., 24472., 22211., 23206., 24900., 25920., 17112., 17928., 19276., 20112., 12615., 13242., 14254., 14896.,  9004.,  9328., 10000., 10336., 11616., 12064., 12944., 13408., 17116., 17696., 18840., 19440., 18164., 18784., 19968., 20608., 19212., 19872., 21096., 21776., 20260., 20960., 22224., 22944., 16160., 16736., 17744., 18336., 12468., 12912., 13672., 14128., 12363., 12678., 13308., 13632., 16072., 16504., 17332., 17776., 19535., 20090., 21110., 21680., 20405., 20990., 22040., 22640., 21275., 21890., 22970., 23600., 22145., 22790., 23900., 24560., 16936., 17464., 18340., 18880., 12093., 12498., 13146., 13560.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 22509., 23194., 24578., 25288., 23807., 24542., 25976., 26736., 25105., 25890., 27374., 28184., 26403., 27238., 28772., 29632., 17213., 17978., 19442., 20232., 18511., 19326., 20840., 21680., 19809., 20674., 22238., 23128., 21107., 22022., 23636., 24576., 18317., 19162., 20706., 21576., 19615., 20510., 22104., 23024., 20913., 21858., 23502., 24472., 22211., 23206., 24900., 25920., 17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 22509., 23194., 24578., 25288., 23807., 24542., 25976., 26736., 25105., 25890., 27374., 28184., 26403., 27238., 28772., 29632., 17213., 17978., 19442., 20232., 18511., 19326., 20840., 21680., 19809., 20674., 22238., 23128., 21107., 22022., 23636., 24576., 18317., 19162., 20706., 21576., 19615., 20510., 22104., 23024., 20913., 21858., 23502., 24472., 22211., 23206., 24900., 25920., 17821., 18426., 19730., 20360., 19119., 19774., 21128., 21808., 20417., 21122., 22526., 23256., 21715., 22470., 23924., 24704., 22509., 23194., 24578., 25288., 23807., 24542., 25976., 26736., 25105., 25890., 27374., 28184., 26403., 27238., 28772., 29632., 17213., 17978., 19442., 20232., 18511., 19326., 20840., 21680., 19809., 20674., 22238., 23128., 21107., 22022., 23636., 24576., 18317., 19162., 20706., 21576., 19615., 20510., 22104., 23024., 20913., 21858., 23502., 24472., 22211., 23206., 24900., 25920.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5051.,  5222.,  5393.,  5564.,  6052.,  6232.,  6412.,  6592.,  7008.,  7248.,  7488.,  7728.,  8364.,  8616.,  8868.,  9120.,  9779., 10094., 10409., 10724., 11554., 11884., 12214., 12544., 10689., 11034., 11379., 11724., 12584., 12944., 13304., 13664., 11599., 11974., 12349., 12724., 13614., 14004., 14394., 14784., 12509., 12914., 13319., 13724., 14644., 15064., 15484., 15904., 11712., 12048., 12384., 12720., 13484., 13832., 14180., 14528.,  8421.,  8682.,  8943.,  9204.,  9766., 10036., 10306., 10576.,  9652.,  9976., 10300., 10624., 11344., 11680., 12016., 12352., 12864., 13312., 13760., 14208., 15184., 15648., 16112., 16576., 17620., 18200., 18780., 19360., 20632., 21232., 21832., 22432., 18844., 19464., 20084., 20704., 22016., 22656., 23296., 23936., 20068., 20728., 21388., 22048., 23400., 24080., 24760., 25440., 21292., 21992., 22692., 23392., 24784., 25504., 26224., 26944., 19456., 20032., 20608., 21184., 22352., 22944., 23536., 24128., 14604., 15048., 15492., 15936., 16840., 17296., 17752., 18208.,  8629.,  8962.,  9295.,  9628., 10444., 10792., 11140., 11488., 11232., 11696., 12160., 12624., 13716., 14200., 14684., 15168., 16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 17088., 17712., 18336., 18960., 20244., 20888., 21532., 22176., 13707., 14190., 14673., 15156., 16138., 16636., 17134., 17632., 12133., 12514., 12895., 13276., 14140., 14536., 14932., 15328., 16672., 17200., 17728., 18256., 19412., 19960., 20508., 21056., 20589., 21274., 21959., 22644., 24126., 24836., 25546., 26256., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 23377., 24162., 24947., 25732., 27314., 28124., 28934., 29744., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488., 20992., 21680., 22368., 23056., 24404., 25112., 25820., 26528., 16443., 16974., 17505., 18036., 19066., 19612., 20158., 20704., 11029., 11458., 11887., 12316., 13228., 13672., 14116., 14560., 15968., 16560., 17152., 17744., 18964., 19576., 20188., 20800., 21181., 21946., 22711., 23476., 25038., 25828., 26618., 27408., 22575., 23390., 24205., 25020., 26632., 27472., 28312., 29152., 23969., 24834., 25699., 26564., 28226., 29116., 30006., 30896., 25363., 26278., 27193., 28108., 29820., 30760., 31700., 32640., 22848., 23600., 24352., 25104., 26516., 27288., 28060., 28832., 18667., 19246., 19825., 20404., 21482., 22076., 22670., 23264., 13509., 13986., 14463., 14940., 15900., 16392., 16884., 17376., 17312., 17968., 18624., 19280., 20564., 21240., 21916., 22592., 22285., 23130., 23975., 24820., 26462., 27332., 28202., 29072., 23679., 24574., 25469., 26364., 28056., 28976., 29896., 30816., 25073., 26018., 26963., 27908., 29650., 30620., 31590., 32560., 26467., 27462., 28457., 29452., 31244., 32264., 33284., 34304., 22656., 23472., 24288., 25104., 26580., 27416., 28252., 29088., 16283., 16910., 17537., 18164., 19290., 19932., 20574., 21216.,  8404.,  8728.,  9052.,  9376., 10064., 10400., 10736., 11072., 10752., 11200., 11648., 12096., 13008., 13472., 13936., 14400., 15604., 16184., 16764., 17344., 18520., 19120., 19720., 20320., 16636., 17256., 17876., 18496., 19712., 20352., 20992., 21632., 17668., 18328., 18988., 19648., 20904., 21584., 22264., 22944., 18700., 19400., 20100., 20800., 22096., 22816., 23536., 24256., 14848., 15424., 16000., 16576., 17616., 18208., 18800., 19392., 12076., 12520., 12964., 13408., 14216., 14672., 15128., 15584., 10011., 10326., 10641., 10956., 11572., 11896., 12220., 12544., 13536., 13968., 14400., 14832., 15660., 16104., 16548., 16992., 16435., 16990., 17545., 18100., 19122., 19692., 20262., 20832., 17249., 17834., 18419., 19004., 20056., 20656., 21256., 21856., 18063., 18678., 19293., 19908., 20990., 21620., 22250., 22880., 18877., 19522., 20167., 20812., 21924., 22584., 23244., 23904., 14976., 15504., 16032., 16560., 17452., 17992., 18532., 19072., 12069., 12474., 12879., 13284., 13974., 14388., 14802., 15216.,  5051.,  5222.,  5393.,  5564.,  6052.,  6232.,  6412.,  6592.,  7008.,  7248.,  7488.,  7728.,  8364.,  8616.,  8868.,  9120.,  9779., 10094., 10409., 10724., 11554., 11884., 12214., 12544., 10689., 11034., 11379., 11724., 12584., 12944., 13304., 13664., 11599., 11974., 12349., 12724., 13614., 14004., 14394., 14784., 12509., 12914., 13319., 13724., 14644., 15064., 15484., 15904., 11712., 12048., 12384., 12720., 13484., 13832., 14180., 14528.,  8421.,  8682.,  8943.,  9204.,  9766., 10036., 10306., 10576.,  9652.,  9976., 10300., 10624., 11344., 11680., 12016., 12352., 12864., 13312., 13760., 14208., 15184., 15648., 16112., 16576., 17620., 18200., 18780., 19360., 20632., 21232., 21832., 22432., 18844., 19464., 20084., 20704., 22016., 22656., 23296., 23936., 20068., 20728., 21388., 22048., 23400., 24080., 24760., 25440., 21292., 21992., 22692., 23392., 24784., 25504., 26224., 26944., 19456., 20032., 20608., 21184., 22352., 22944., 23536., 24128., 14604., 15048., 15492., 15936., 16840., 17296., 17752., 18208.,  8629.,  8962.,  9295.,  9628., 10444., 10792., 11140., 11488., 11232., 11696., 12160., 12624., 13716., 14200., 14684., 15168., 16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 17088., 17712., 18336., 18960., 20244., 20888., 21532., 22176., 13707., 14190., 14673., 15156., 16138., 16636., 17134., 17632., 12133., 12514., 12895., 13276., 14140., 14536., 14932., 15328., 16672., 17200., 17728., 18256., 19412., 19960., 20508., 21056., 20589., 21274., 21959., 22644., 24126., 24836., 25546., 26256., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 23377., 24162., 24947., 25732., 27314., 28124., 28934., 29744., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488., 20992., 21680., 22368., 23056., 24404., 25112., 25820., 26528., 16443., 16974., 17505., 18036., 19066., 19612., 20158., 20704., 11029., 11458., 11887., 12316., 13228., 13672., 14116., 14560., 15968., 16560., 17152., 17744., 18964., 19576., 20188., 20800., 21181., 21946., 22711., 23476., 25038., 25828., 26618., 27408., 22575., 23390., 24205., 25020., 26632., 27472., 28312., 29152., 23969., 24834., 25699., 26564., 28226., 29116., 30006., 30896., 25363., 26278., 27193., 28108., 29820., 30760., 31700., 32640., 22848., 23600., 24352., 25104., 26516., 27288., 28060., 28832., 18667., 19246., 19825., 20404., 21482., 22076., 22670., 23264., 13509., 13986., 14463., 14940., 15900., 16392., 16884., 17376., 17312., 17968., 18624., 19280., 20564., 21240., 21916., 22592., 22285., 23130., 23975., 24820., 26462., 27332., 28202., 29072., 23679., 24574., 25469., 26364., 28056., 28976., 29896., 30816., 25073., 26018., 26963., 27908., 29650., 30620., 31590., 32560., 26467., 27462., 28457., 29452., 31244., 32264., 33284., 34304., 22656., 23472., 24288., 25104., 26580., 27416., 28252., 29088., 16283., 16910., 17537., 18164., 19290., 19932., 20574., 21216.,  8404.,  8728.,  9052.,  9376., 10064., 10400., 10736., 11072., 10752., 11200., 11648., 12096., 13008., 13472., 13936., 14400., 15604., 16184., 16764., 17344., 18520., 19120., 19720., 20320., 16636., 17256., 17876., 18496., 19712., 20352., 20992., 21632., 17668., 18328., 18988., 19648., 20904., 21584., 22264., 22944., 18700., 19400., 20100., 20800., 22096., 22816., 23536., 24256., 14848., 15424., 16000., 16576., 17616., 18208., 18800., 19392., 12076., 12520., 12964., 13408., 14216., 14672., 15128., 15584., 10011., 10326., 10641., 10956., 11572., 11896., 12220., 12544., 13536., 13968., 14400., 14832., 15660., 16104., 16548., 16992., 16435., 16990., 17545., 18100., 19122., 19692., 20262., 20832., 17249., 17834., 18419., 19004., 20056., 20656., 21256., 21856., 18063., 18678., 19293., 19908., 20990., 21620., 22250., 22880., 18877., 19522., 20167., 20812., 21924., 22584., 23244., 23904., 14976., 15504., 16032., 16560., 17452., 17992., 18532., 19072., 12069., 12474., 12879., 13284., 13974., 14388., 14802., 15216.,  5051.,  5222.,  5393.,  5564.,  6052.,  6232.,  6412.,  6592.,  7008.,  7248.,  7488.,  7728.,  8364.,  8616.,  8868.,  9120.,  9779., 10094., 10409., 10724., 11554., 11884., 12214., 12544., 10689., 11034., 11379., 11724., 12584., 12944., 13304., 13664., 11599., 11974., 12349., 12724., 13614., 14004., 14394., 14784., 12509., 12914., 13319., 13724., 14644., 15064., 15484., 15904., 11712., 12048., 12384., 12720., 13484., 13832., 14180., 14528.,  8421.,  8682.,  8943.,  9204.,  9766., 10036., 10306., 10576.,  9652.,  9976., 10300., 10624., 11344., 11680., 12016., 12352., 12864., 13312., 13760., 14208., 15184., 15648., 16112., 16576., 17620., 18200., 18780., 19360., 20632., 21232., 21832., 22432., 18844., 19464., 20084., 20704., 22016., 22656., 23296., 23936., 20068., 20728., 21388., 22048., 23400., 24080., 24760., 25440., 21292., 21992., 22692., 23392., 24784., 25504., 26224., 26944., 19456., 20032., 20608., 21184., 22352., 22944., 23536., 24128., 14604., 15048., 15492., 15936., 16840., 17296., 17752., 18208.,  8629.,  8962.,  9295.,  9628., 10444., 10792., 11140., 11488., 11232., 11696., 12160., 12624., 13716., 14200., 14684., 15168., 16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 17088., 17712., 18336., 18960., 20244., 20888., 21532., 22176., 13707., 14190., 14673., 15156., 16138., 16636., 17134., 17632., 12133., 12514., 12895., 13276., 14140., 14536., 14932., 15328., 16672., 17200., 17728., 18256., 19412., 19960., 20508., 21056., 20589., 21274., 21959., 22644., 24126., 24836., 25546., 26256., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 23377., 24162., 24947., 25732., 27314., 28124., 28934., 29744., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488., 20992., 21680., 22368., 23056., 24404., 25112., 25820., 26528., 16443., 16974., 17505., 18036., 19066., 19612., 20158., 20704., 11029., 11458., 11887., 12316., 13228., 13672., 14116., 14560., 15968., 16560., 17152., 17744., 18964., 19576., 20188., 20800., 21181., 21946., 22711., 23476., 25038., 25828., 26618., 27408., 22575., 23390., 24205., 25020., 26632., 27472., 28312., 29152., 23969., 24834., 25699., 26564., 28226., 29116., 30006., 30896., 25363., 26278., 27193., 28108., 29820., 30760., 31700., 32640., 22848., 23600., 24352., 25104., 26516., 27288., 28060., 28832., 18667., 19246., 19825., 20404., 21482., 22076., 22670., 23264., 13509., 13986., 14463., 14940., 15900., 16392., 16884., 17376., 17312., 17968., 18624., 19280., 20564., 21240., 21916., 22592., 22285., 23130., 23975., 24820., 26462., 27332., 28202., 29072., 23679., 24574., 25469., 26364., 28056., 28976., 29896., 30816., 25073., 26018., 26963., 27908., 29650., 30620., 31590., 32560., 26467., 27462., 28457., 29452., 31244., 32264., 33284., 34304., 22656., 23472., 24288., 25104., 26580., 27416., 28252., 29088., 16283., 16910., 17537., 18164., 19290., 19932., 20574., 21216.,  8404.,  8728.,  9052.,  9376., 10064., 10400., 10736., 11072., 10752., 11200., 11648., 12096., 13008., 13472., 13936., 14400., 15604., 16184., 16764., 17344., 18520., 19120., 19720., 20320., 16636., 17256., 17876., 18496., 19712., 20352., 20992., 21632., 17668., 18328., 18988., 19648., 20904., 21584., 22264., 22944., 18700., 19400., 20100., 20800., 22096., 22816., 23536., 24256., 14848., 15424., 16000., 16576., 17616., 18208., 18800., 19392., 12076., 12520., 12964., 13408., 14216., 14672., 15128., 15584., 10011., 10326., 10641., 10956., 11572., 11896., 12220., 12544., 13536., 13968., 14400., 14832., 15660., 16104., 16548., 16992., 16435., 16990., 17545., 18100., 19122., 19692., 20262., 20832., 17249., 17834., 18419., 19004., 20056., 20656., 21256., 21856., 18063., 18678., 19293., 19908., 20990., 21620., 22250., 22880., 18877., 19522., 20167., 20812., 21924., 22584., 23244., 23904., 14976., 15504., 16032., 16560., 17452., 17992., 18532., 19072., 12069., 12474., 12879., 13284., 13974., 14388., 14802., 15216.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 20589., 21274., 21959., 22644., 24126., 24836., 25546., 26256., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 23377., 24162., 24947., 25732., 27314., 28124., 28934., 29744., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488., 21181., 21946., 22711., 23476., 25038., 25828., 26618., 27408., 22575., 23390., 24205., 25020., 26632., 27472., 28312., 29152., 23969., 24834., 25699., 26564., 28226., 29116., 30006., 30896., 25363., 26278., 27193., 28108., 29820., 30760., 31700., 32640., 22285., 23130., 23975., 24820., 26462., 27332., 28202., 29072., 23679., 24574., 25469., 26364., 28056., 28976., 29896., 30816., 25073., 26018., 26963., 27908., 29650., 30620., 31590., 32560., 26467., 27462., 28457., 29452., 31244., 32264., 33284., 34304., 16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 20589., 21274., 21959., 22644., 24126., 24836., 25546., 26256., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 23377., 24162., 24947., 25732., 27314., 28124., 28934., 29744., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488., 21181., 21946., 22711., 23476., 25038., 25828., 26618., 27408., 22575., 23390., 24205., 25020., 26632., 27472., 28312., 29152., 23969., 24834., 25699., 26564., 28226., 29116., 30006., 30896., 25363., 26278., 27193., 28108., 29820., 30760., 31700., 32640., 22285., 23130., 23975., 24820., 26462., 27332., 28202., 29072., 23679., 24574., 25469., 26364., 28056., 28976., 29896., 30816., 25073., 26018., 26963., 27908., 29650., 30620., 31590., 32560., 26467., 27462., 28457., 29452., 31244., 32264., 33284., 34304., 16413., 17018., 17623., 18228., 19630., 20260., 20890., 21520., 17807., 18462., 19117., 19772., 21224., 21904., 22584., 23264., 19201., 19906., 20611., 21316., 22818., 23548., 24278., 25008., 20595., 21350., 22105., 22860., 24412., 25192., 25972., 26752., 20589., 21274., 21959., 22644., 24126., 24836., 25546., 26256., 21983., 22718., 23453., 24188., 25720., 26480., 27240., 28000., 23377., 24162., 24947., 25732., 27314., 28124., 28934., 29744., 24771., 25606., 26441., 27276., 28908., 29768., 30628., 31488., 21181., 21946., 22711., 23476., 25038., 25828., 26618., 27408., 22575., 23390., 24205., 25020., 26632., 27472., 28312., 29152., 23969., 24834., 25699., 26564., 28226., 29116., 30006., 30896., 25363., 26278., 27193., 28108., 29820., 30760., 31700., 32640., 22285., 23130., 23975., 24820., 26462., 27332., 28202., 29072., 23679., 24574., 25469., 26364., 28056., 28976., 29896., 30816., 25073., 26018., 26963., 27908., 29650., 30620., 31590., 32560., 26467., 27462., 28457., 29452., 31244., 32264., 33284., 34304.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2325.,  2748.,  3189.,  3648.,  3516.,  4080.,  4668.,  5280.,  6947.,  7716.,  8515.,  9344.,  8783.,  9612., 10471., 11360., 10619., 11508., 12427., 13376., 12455., 13404., 14383., 15392., 10476., 11248., 12044., 12864.,  8609.,  9204.,  9817., 10448.,  9860., 10496., 11156., 11840., 13552., 14400., 15280., 16192., 17404., 18528., 19692., 20896., 19820., 21024., 22268., 23552., 22236., 23520., 24844., 26208., 24652., 26016., 27420., 28864., 19568., 20672., 21808., 22976., 14708., 15552., 16420., 17312.,  6247.,  6940.,  7663.,  8416.,  8820.,  9744., 10708., 11712., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 17220., 18448., 19716., 21024., 13323., 14260., 15227., 16224., 11335., 12124., 12943., 13792., 15348., 16400., 17492., 18624., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 21188., 22544., 23940., 25376., 15595., 16628., 17691., 18784.,  6247.,  6940.,  7663.,  8416.,  8820.,  9744., 10708., 11712., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 17220., 18448., 19716., 21024., 13323., 14260., 15227., 16224., 11335., 12124., 12943., 13792., 15348., 16400., 17492., 18624., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 21188., 22544., 23940., 25376., 15595., 16628., 17691., 18784.,  5780.,  6368.,  6980.,  7616.,  7984.,  8768.,  9584., 10432., 12332., 13376., 14460., 15584., 14428., 15552., 16716., 17920., 16524., 17728., 18972., 20256., 18620., 19904., 21228., 22592., 15024., 16064., 17136., 18240., 11716., 12512., 13332., 14176.,  7917.,  8460.,  9021.,  9600., 10780., 11504., 12252., 13024., 13675., 14580., 15515., 16480., 15415., 16380., 17375., 18400., 17155., 18180., 19235., 20320., 18895., 19980., 21095., 22240., 14604., 15472., 16364., 17280., 10521., 11172., 11841., 12528.,  2325.,  2748.,  3189.,  3648.,  3516.,  4080.,  4668.,  5280.,  6947.,  7716.,  8515.,  9344.,  8783.,  9612., 10471., 11360., 10619., 11508., 12427., 13376., 12455., 13404., 14383., 15392., 10476., 11248., 12044., 12864.,  8609.,  9204.,  9817., 10448.,  9860., 10496., 11156., 11840., 13552., 14400., 15280., 16192., 17404., 18528., 19692., 20896., 19820., 21024., 22268., 23552., 22236., 23520., 24844., 26208., 24652., 26016., 27420., 28864., 19568., 20672., 21808., 22976., 14708., 15552., 16420., 17312.,  6247.,  6940.,  7663.,  8416.,  8820.,  9744., 10708., 11712., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 17220., 18448., 19716., 21024., 13323., 14260., 15227., 16224., 11335., 12124., 12943., 13792., 15348., 16400., 17492., 18624., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 21188., 22544., 23940., 25376., 15595., 16628., 17691., 18784.,  6247.,  6940.,  7663.,  8416.,  8820.,  9744., 10708., 11712., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 17220., 18448., 19716., 21024., 13323., 14260., 15227., 16224., 11335., 12124., 12943., 13792., 15348., 16400., 17492., 18624., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 21188., 22544., 23940., 25376., 15595., 16628., 17691., 18784.,  5780.,  6368.,  6980.,  7616.,  7984.,  8768.,  9584., 10432., 12332., 13376., 14460., 15584., 14428., 15552., 16716., 17920., 16524., 17728., 18972., 20256., 18620., 19904., 21228., 22592., 15024., 16064., 17136., 18240., 11716., 12512., 13332., 14176.,  7917.,  8460.,  9021.,  9600., 10780., 11504., 12252., 13024., 13675., 14580., 15515., 16480., 15415., 16380., 17375., 18400., 17155., 18180., 19235., 20320., 18895., 19980., 21095., 22240., 14604., 15472., 16364., 17280., 10521., 11172., 11841., 12528.,  2325.,  2748.,  3189.,  3648.,  3516.,  4080.,  4668.,  5280.,  6947.,  7716.,  8515.,  9344.,  8783.,  9612., 10471., 11360., 10619., 11508., 12427., 13376., 12455., 13404., 14383., 15392., 10476., 11248., 12044., 12864.,  8609.,  9204.,  9817., 10448.,  9860., 10496., 11156., 11840., 13552., 14400., 15280., 16192., 17404., 18528., 19692., 20896., 19820., 21024., 22268., 23552., 22236., 23520., 24844., 26208., 24652., 26016., 27420., 28864., 19568., 20672., 21808., 22976., 14708., 15552., 16420., 17312.,  6247.,  6940.,  7663.,  8416.,  8820.,  9744., 10708., 11712., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 17220., 18448., 19716., 21024., 13323., 14260., 15227., 16224., 11335., 12124., 12943., 13792., 15348., 16400., 17492., 18624., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 21188., 22544., 23940., 25376., 15595., 16628., 17691., 18784.,  6247.,  6940.,  7663.,  8416.,  8820.,  9744., 10708., 11712., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 17220., 18448., 19716., 21024., 13323., 14260., 15227., 16224., 11335., 12124., 12943., 13792., 15348., 16400., 17492., 18624., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 21188., 22544., 23940., 25376., 15595., 16628., 17691., 18784.,  5780.,  6368.,  6980.,  7616.,  7984.,  8768.,  9584., 10432., 12332., 13376., 14460., 15584., 14428., 15552., 16716., 17920., 16524., 17728., 18972., 20256., 18620., 19904., 21228., 22592., 15024., 16064., 17136., 18240., 11716., 12512., 13332., 14176.,  7917.,  8460.,  9021.,  9600., 10780., 11504., 12252., 13024., 13675., 14580., 15515., 16480., 15415., 16380., 17375., 18400., 17155., 18180., 19235., 20320., 18895., 19980., 21095., 22240., 14604., 15472., 16364., 17280., 10521., 11172., 11841., 12528.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384., 13617., 14836., 16105., 17424., 16213., 17532., 18901., 20320., 18809., 20228., 21697., 23216., 21405., 22924., 24493., 26112., 19409., 20788., 22217., 23696., 22005., 23484., 25013., 26592., 24601., 26180., 27809., 29488., 27197., 28876., 30605., 32384.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2973.,  3114.,  3554.,  3704.,  4171.,  4330.,  4824.,  4992.,  4196.,  4408.,  4992.,  5216.,  5836.,  6072.,  6728.,  6976.,  7519.,  7814.,  8594.,  8904.,  9729., 10054., 10924., 11264.,  9339.,  9694., 10534., 10904., 11789., 12174., 13104., 13504., 11159., 11574., 12474., 12904., 13849., 14294., 15284., 15744., 12979., 13454., 14414., 14904., 15909., 16414., 17464., 17984., 11524., 11928., 12736., 13152., 13996., 14424., 15304., 15744.,  8705.,  9026.,  9630.,  9960., 10591., 10930., 11588., 11936.,  8844.,  9096.,  9720.,  9984., 10644., 10920., 11616., 11904., 12464., 12832., 13696., 14080., 14992., 15392., 16352., 16768., 16068., 16568., 17720., 18240., 19452., 19992., 21264., 21824., 18516., 19096., 20328., 20928., 22220., 22840., 24192., 24832., 20964., 21624., 22936., 23616., 24988., 25688., 27120., 27840., 23412., 24152., 25544., 26304., 27756., 28536., 30048., 30848., 21488., 22112., 23296., 23936., 25168., 25824., 27104., 27776., 16636., 17128., 18056., 18560., 19524., 20040., 21040., 21568.,  5699.,  5966.,  6686.,  6968.,  7733.,  8030.,  8840.,  9152.,  9116.,  9512., 10496., 10912., 11956., 12392., 13496., 13952., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 20796., 21512., 22848., 23584., 24980., 25736., 27192., 27968., 17887., 18454., 19490., 20072., 21153., 21750., 22876., 23488., 11683., 12046., 12862., 13240., 14101., 14494., 15400., 15808., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 24508., 25352., 26816., 27680., 29204., 30088., 31672., 32576., 18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512.,  5699.,  5966.,  6686.,  6968.,  7733.,  8030.,  8840.,  9152.,  9116.,  9512., 10496., 10912., 11956., 12392., 13496., 13952., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 20796., 21512., 22848., 23584., 24980., 25736., 27192., 27968., 17887., 18454., 19490., 20072., 21153., 21750., 22876., 23488., 11683., 12046., 12862., 13240., 14101., 14494., 15400., 15808., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 24508., 25352., 26816., 27680., 29204., 30088., 31672., 32576., 18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512.,  5356.,  5608.,  6200.,  6464.,  7092.,  7368.,  8032.,  8320.,  8304.,  8672.,  9472.,  9856., 10704., 11104., 12000., 12416., 13156., 13656., 14712., 15232., 16348., 16888., 18064., 18624., 15220., 15800., 16936., 17536., 18732., 19352., 20608., 21248., 17284., 17944., 19160., 19840., 21116., 21816., 23152., 23872., 19348., 20088., 21384., 22144., 23500., 24280., 25696., 26496., 16496., 17120., 18176., 18816., 19920., 20576., 21728., 22400., 14748., 15240., 16072., 16576., 17444., 17960., 18864., 19392.,  7597.,  7834.,  8354.,  8600.,  9147.,  9402.,  9976., 10240.,  9828., 10168., 10880., 11232., 11980., 12344., 13128., 13504., 11855., 12310., 13202., 13672., 14609., 15094., 16076., 16576., 13483., 13998., 14950., 15480., 16477., 17022., 18064., 18624., 15111., 15686., 16698., 17288., 18345., 18950., 20052., 20672., 16739., 17374., 18446., 19096., 20213., 20878., 22040., 22720., 12740., 13272., 14144., 14688., 15596., 16152., 17096., 17664.,  9681., 10098., 10782., 11208., 11919., 12354., 13092., 13536.,  2973.,  3114.,  3554.,  3704.,  4171.,  4330.,  4824.,  4992.,  4196.,  4408.,  4992.,  5216.,  5836.,  6072.,  6728.,  6976.,  7519.,  7814.,  8594.,  8904.,  9729., 10054., 10924., 11264.,  9339.,  9694., 10534., 10904., 11789., 12174., 13104., 13504., 11159., 11574., 12474., 12904., 13849., 14294., 15284., 15744., 12979., 13454., 14414., 14904., 15909., 16414., 17464., 17984., 11524., 11928., 12736., 13152., 13996., 14424., 15304., 15744.,  8705.,  9026.,  9630.,  9960., 10591., 10930., 11588., 11936.,  8844.,  9096.,  9720.,  9984., 10644., 10920., 11616., 11904., 12464., 12832., 13696., 14080., 14992., 15392., 16352., 16768., 16068., 16568., 17720., 18240., 19452., 19992., 21264., 21824., 18516., 19096., 20328., 20928., 22220., 22840., 24192., 24832., 20964., 21624., 22936., 23616., 24988., 25688., 27120., 27840., 23412., 24152., 25544., 26304., 27756., 28536., 30048., 30848., 21488., 22112., 23296., 23936., 25168., 25824., 27104., 27776., 16636., 17128., 18056., 18560., 19524., 20040., 21040., 21568.,  5699.,  5966.,  6686.,  6968.,  7733.,  8030.,  8840.,  9152.,  9116.,  9512., 10496., 10912., 11956., 12392., 13496., 13952., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 20796., 21512., 22848., 23584., 24980., 25736., 27192., 27968., 17887., 18454., 19490., 20072., 21153., 21750., 22876., 23488., 11683., 12046., 12862., 13240., 14101., 14494., 15400., 15808., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 24508., 25352., 26816., 27680., 29204., 30088., 31672., 32576., 18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512.,  5699.,  5966.,  6686.,  6968.,  7733.,  8030.,  8840.,  9152.,  9116.,  9512., 10496., 10912., 11956., 12392., 13496., 13952., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 20796., 21512., 22848., 23584., 24980., 25736., 27192., 27968., 17887., 18454., 19490., 20072., 21153., 21750., 22876., 23488., 11683., 12046., 12862., 13240., 14101., 14494., 15400., 15808., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 24508., 25352., 26816., 27680., 29204., 30088., 31672., 32576., 18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512.,  5356.,  5608.,  6200.,  6464.,  7092.,  7368.,  8032.,  8320.,  8304.,  8672.,  9472.,  9856., 10704., 11104., 12000., 12416., 13156., 13656., 14712., 15232., 16348., 16888., 18064., 18624., 15220., 15800., 16936., 17536., 18732., 19352., 20608., 21248., 17284., 17944., 19160., 19840., 21116., 21816., 23152., 23872., 19348., 20088., 21384., 22144., 23500., 24280., 25696., 26496., 16496., 17120., 18176., 18816., 19920., 20576., 21728., 22400., 14748., 15240., 16072., 16576., 17444., 17960., 18864., 19392.,  7597.,  7834.,  8354.,  8600.,  9147.,  9402.,  9976., 10240.,  9828., 10168., 10880., 11232., 11980., 12344., 13128., 13504., 11855., 12310., 13202., 13672., 14609., 15094., 16076., 16576., 13483., 13998., 14950., 15480., 16477., 17022., 18064., 18624., 15111., 15686., 16698., 17288., 18345., 18950., 20052., 20672., 16739., 17374., 18446., 19096., 20213., 20878., 22040., 22720., 12740., 13272., 14144., 14688., 15596., 16152., 17096., 17664.,  9681., 10098., 10782., 11208., 11919., 12354., 13092., 13536.,  2973.,  3114.,  3554.,  3704.,  4171.,  4330.,  4824.,  4992.,  4196.,  4408.,  4992.,  5216.,  5836.,  6072.,  6728.,  6976.,  7519.,  7814.,  8594.,  8904.,  9729., 10054., 10924., 11264.,  9339.,  9694., 10534., 10904., 11789., 12174., 13104., 13504., 11159., 11574., 12474., 12904., 13849., 14294., 15284., 15744., 12979., 13454., 14414., 14904., 15909., 16414., 17464., 17984., 11524., 11928., 12736., 13152., 13996., 14424., 15304., 15744.,  8705.,  9026.,  9630.,  9960., 10591., 10930., 11588., 11936.,  8844.,  9096.,  9720.,  9984., 10644., 10920., 11616., 11904., 12464., 12832., 13696., 14080., 14992., 15392., 16352., 16768., 16068., 16568., 17720., 18240., 19452., 19992., 21264., 21824., 18516., 19096., 20328., 20928., 22220., 22840., 24192., 24832., 20964., 21624., 22936., 23616., 24988., 25688., 27120., 27840., 23412., 24152., 25544., 26304., 27756., 28536., 30048., 30848., 21488., 22112., 23296., 23936., 25168., 25824., 27104., 27776., 16636., 17128., 18056., 18560., 19524., 20040., 21040., 21568.,  5699.,  5966.,  6686.,  6968.,  7733.,  8030.,  8840.,  9152.,  9116.,  9512., 10496., 10912., 11956., 12392., 13496., 13952., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 20796., 21512., 22848., 23584., 24980., 25736., 27192., 27968., 17887., 18454., 19490., 20072., 21153., 21750., 22876., 23488., 11683., 12046., 12862., 13240., 14101., 14494., 15400., 15808., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 24508., 25352., 26816., 27680., 29204., 30088., 31672., 32576., 18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512.,  5699.,  5966.,  6686.,  6968.,  7733.,  8030.,  8840.,  9152.,  9116.,  9512., 10496., 10912., 11956., 12392., 13496., 13952., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 20796., 21512., 22848., 23584., 24980., 25736., 27192., 27968., 17887., 18454., 19490., 20072., 21153., 21750., 22876., 23488., 11683., 12046., 12862., 13240., 14101., 14494., 15400., 15808., 15900., 16424., 17536., 18080., 19252., 19816., 21048., 21632., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 24508., 25352., 26816., 27680., 29204., 30088., 31672., 32576., 18239., 18902., 20034., 20712., 21889., 22582., 23804., 24512.,  5356.,  5608.,  6200.,  6464.,  7092.,  7368.,  8032.,  8320.,  8304.,  8672.,  9472.,  9856., 10704., 11104., 12000., 12416., 13156., 13656., 14712., 15232., 16348., 16888., 18064., 18624., 15220., 15800., 16936., 17536., 18732., 19352., 20608., 21248., 17284., 17944., 19160., 19840., 21116., 21816., 23152., 23872., 19348., 20088., 21384., 22144., 23500., 24280., 25696., 26496., 16496., 17120., 18176., 18816., 19920., 20576., 21728., 22400., 14748., 15240., 16072., 16576., 17444., 17960., 18864., 19392.,  7597.,  7834.,  8354.,  8600.,  9147.,  9402.,  9976., 10240.,  9828., 10168., 10880., 11232., 11980., 12344., 13128., 13504., 11855., 12310., 13202., 13672., 14609., 15094., 16076., 16576., 13483., 13998., 14950., 15480., 16477., 17022., 18064., 18624., 15111., 15686., 16698., 17288., 18345., 18950., 20052., 20672., 16739., 17374., 18446., 19096., 20213., 20878., 22040., 22720., 12740., 13272., 14144., 14688., 15596., 16152., 17096., 17664.,  9681., 10098., 10782., 11208., 11919., 12354., 13092., 13536.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888., 14593., 15138., 16430., 17000., 18367., 18962., 20404., 21024., 17381., 18026., 19418., 20088., 21555., 22250., 23792., 24512., 20169., 20914., 22406., 23176., 24743., 25538., 27180., 28000., 22957., 23802., 25394., 26264., 27931., 28826., 30568., 31488., 19873., 20578., 22030., 22760., 24287., 25042., 26644., 27424., 22661., 23466., 25018., 25848., 27475., 28330., 30032., 30912., 25449., 26354., 28006., 28936., 30663., 31618., 33420., 34400., 28237., 29242., 30994., 32024., 33851., 34906., 36808., 37888.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4461.,  4602.,  4743.,  4884.,  5294.,  5444.,  5594.,  5744.,  6199.,  6358.,  6517.,  6676.,  7176.,  7344.,  7512.,  7680.,  5492.,  5704.,  5916.,  6128.,  6688.,  6912.,  7136.,  7360.,  7980.,  8216.,  8452.,  8688.,  9368.,  9616.,  9864., 10112.,  8343.,  8638.,  8933.,  9228.,  9966., 10276., 10586., 10896., 11709., 12034., 12359., 12684., 13572., 13912., 14252., 14592.,  9875., 10230., 10585., 10940., 11738., 12108., 12478., 12848., 13721., 14106., 14491., 14876., 15824., 16224., 16624., 17024., 11407., 11822., 12237., 12652., 13510., 13940., 14370., 14800., 15733., 16178., 16623., 17068., 18076., 18536., 18996., 19456., 12939., 13414., 13889., 14364., 15282., 15772., 16262., 16752., 17745., 18250., 18755., 19260., 20328., 20848., 21368., 21888., 10164., 10568., 10972., 11376., 12128., 12544., 12960., 13376., 14188., 14616., 15044., 15472., 16344., 16784., 17224., 17664.,  7041.,  7362.,  7683.,  8004.,  8562.,  8892.,  9222.,  9552., 10155., 10494., 10833., 11172., 11820., 12168., 12516., 12864.,  5788.,  6040.,  6292.,  6544.,  7144.,  7408.,  7672.,  7936.,  8596.,  8872.,  9148.,  9424., 10144., 10432., 10720., 11008.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 11988., 12488., 12988., 13488., 14568., 15088., 15608., 16128., 17308., 17848., 18388., 18928., 20208., 20768., 21328., 21888., 13988., 14568., 15148., 15728., 16888., 17488., 18088., 18688., 19948., 20568., 21188., 21808., 23168., 23808., 24448., 25088., 15988., 16648., 17308., 17968., 19208., 19888., 20568., 21248., 22588., 23288., 23988., 24688., 26128., 26848., 27568., 28288., 17988., 18728., 19468., 20208., 21528., 22288., 23048., 23808., 25228., 26008., 26788., 27568., 29088., 29888., 30688., 31488., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 11788., 12280., 12772., 13264., 14104., 14608., 15112., 15616., 16516., 17032., 17548., 18064., 19024., 19552., 20080., 20608.,  7099.,  7366.,  7633.,  7900.,  8610.,  8892.,  9174.,  9456., 10241., 10538., 10835., 11132., 11992., 12304., 12616., 12928.,  9836., 10232., 10628., 11024., 12000., 12416., 12832., 13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 18220., 18936., 19652., 20368., 21664., 22400., 23136., 23872., 25268., 26024., 26780., 27536., 29032., 29808., 30584., 31360., 14215., 14782., 15349., 15916., 16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224., 23836., 24448.,  8731.,  9094.,  9457.,  9820., 10626., 11004., 11382., 11760., 12641., 13034., 13427., 13820., 14776., 15184., 15592., 16000., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 21420., 22264., 23108., 23952., 25376., 26240., 27104., 27968., 29492., 30376., 31260., 32144., 33768., 34672., 35576., 36480., 14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080., 25788., 26496.,  7099.,  7366.,  7633.,  7900.,  8610.,  8892.,  9174.,  9456., 10241., 10538., 10835., 11132., 11992., 12304., 12616., 12928.,  9836., 10232., 10628., 11024., 12000., 12416., 12832., 13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 18220., 18936., 19652., 20368., 21664., 22400., 23136., 23872., 25268., 26024., 26780., 27536., 29032., 29808., 30584., 31360., 14215., 14782., 15349., 15916., 16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224., 23836., 24448.,  8731.,  9094.,  9457.,  9820., 10626., 11004., 11382., 11760., 12641., 13034., 13427., 13820., 14776., 15184., 15592., 16000., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 21420., 22264., 23108., 23952., 25376., 26240., 27104., 27968., 29492., 30376., 31260., 32144., 33768., 34672., 35576., 36480., 14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080., 25788., 26496.,  6812.,  7064.,  7316.,  7568.,  8168.,  8432.,  8696.,  8960.,  9620.,  9896., 10172., 10448., 11168., 11456., 11744., 12032.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 13012., 13512., 14012., 14512., 15592., 16112., 16632., 17152., 18332., 18872., 19412., 19952., 21232., 21792., 22352., 22912., 15012., 15592., 16172., 16752., 17912., 18512., 19112., 19712., 20972., 21592., 22212., 22832., 24192., 24832., 25472., 26112., 17012., 17672., 18332., 18992., 20232., 20912., 21592., 22272., 23612., 24312., 25012., 25712., 27152., 27872., 28592., 29312., 19012., 19752., 20492., 21232., 22552., 23312., 24072., 24832., 26252., 27032., 27812., 28592., 30112., 30912., 31712., 32512., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 12812., 13304., 13796., 14288., 15128., 15632., 16136., 16640., 17540., 18056., 18572., 19088., 20048., 20576., 21104., 21632.,  5165.,  5402.,  5639.,  5876.,  6350.,  6596.,  6842.,  7088.,  7607.,  7862.,  8117.,  8372.,  8936.,  9200.,  9464.,  9728.,  8180.,  8520.,  8860.,  9200.,  9888., 10240., 10592., 10944., 11692., 12056., 12420., 12784., 13592., 13968., 14344., 14720., 10519., 10974., 11429., 11884., 12750., 13220., 13690., 14160., 15101., 15586., 16071., 16556., 17572., 18072., 18572., 19072., 11923., 12438., 12953., 13468., 14394., 14924., 15454., 15984., 16985., 17530., 18075., 18620., 19696., 20256., 20816., 21376., 13327., 13902., 14477., 15052., 16038., 16628., 17218., 17808., 18869., 19474., 20079., 20684., 21820., 22440., 23060., 23680., 14731., 15366., 16001., 16636., 17682., 18332., 18982., 19632., 20753., 21418., 22083., 22748., 23944., 24624., 25304., 25984., 13364., 13896., 14428., 14960., 15840., 16384., 16928., 17472., 18412., 18968., 19524., 20080., 21080., 21648., 22216., 22784., 10241., 10658., 11075., 11492., 12178., 12604., 13030., 13456., 14187., 14622., 15057., 15492., 16268., 16712., 17156., 17600.,  4461.,  4602.,  4743.,  4884.,  5294.,  5444.,  5594.,  5744.,  6199.,  6358.,  6517.,  6676.,  7176.,  7344.,  7512.,  7680.,  5492.,  5704.,  5916.,  6128.,  6688.,  6912.,  7136.,  7360.,  7980.,  8216.,  8452.,  8688.,  9368.,  9616.,  9864., 10112.,  8343.,  8638.,  8933.,  9228.,  9966., 10276., 10586., 10896., 11709., 12034., 12359., 12684., 13572., 13912., 14252., 14592.,  9875., 10230., 10585., 10940., 11738., 12108., 12478., 12848., 13721., 14106., 14491., 14876., 15824., 16224., 16624., 17024., 11407., 11822., 12237., 12652., 13510., 13940., 14370., 14800., 15733., 16178., 16623., 17068., 18076., 18536., 18996., 19456., 12939., 13414., 13889., 14364., 15282., 15772., 16262., 16752., 17745., 18250., 18755., 19260., 20328., 20848., 21368., 21888., 10164., 10568., 10972., 11376., 12128., 12544., 12960., 13376., 14188., 14616., 15044., 15472., 16344., 16784., 17224., 17664.,  7041.,  7362.,  7683.,  8004.,  8562.,  8892.,  9222.,  9552., 10155., 10494., 10833., 11172., 11820., 12168., 12516., 12864.,  5788.,  6040.,  6292.,  6544.,  7144.,  7408.,  7672.,  7936.,  8596.,  8872.,  9148.,  9424., 10144., 10432., 10720., 11008.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 11988., 12488., 12988., 13488., 14568., 15088., 15608., 16128., 17308., 17848., 18388., 18928., 20208., 20768., 21328., 21888., 13988., 14568., 15148., 15728., 16888., 17488., 18088., 18688., 19948., 20568., 21188., 21808., 23168., 23808., 24448., 25088., 15988., 16648., 17308., 17968., 19208., 19888., 20568., 21248., 22588., 23288., 23988., 24688., 26128., 26848., 27568., 28288., 17988., 18728., 19468., 20208., 21528., 22288., 23048., 23808., 25228., 26008., 26788., 27568., 29088., 29888., 30688., 31488., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 11788., 12280., 12772., 13264., 14104., 14608., 15112., 15616., 16516., 17032., 17548., 18064., 19024., 19552., 20080., 20608.,  7099.,  7366.,  7633.,  7900.,  8610.,  8892.,  9174.,  9456., 10241., 10538., 10835., 11132., 11992., 12304., 12616., 12928.,  9836., 10232., 10628., 11024., 12000., 12416., 12832., 13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 18220., 18936., 19652., 20368., 21664., 22400., 23136., 23872., 25268., 26024., 26780., 27536., 29032., 29808., 30584., 31360., 14215., 14782., 15349., 15916., 16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224., 23836., 24448.,  8731.,  9094.,  9457.,  9820., 10626., 11004., 11382., 11760., 12641., 13034., 13427., 13820., 14776., 15184., 15592., 16000., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 21420., 22264., 23108., 23952., 25376., 26240., 27104., 27968., 29492., 30376., 31260., 32144., 33768., 34672., 35576., 36480., 14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080., 25788., 26496.,  7099.,  7366.,  7633.,  7900.,  8610.,  8892.,  9174.,  9456., 10241., 10538., 10835., 11132., 11992., 12304., 12616., 12928.,  9836., 10232., 10628., 11024., 12000., 12416., 12832., 13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 18220., 18936., 19652., 20368., 21664., 22400., 23136., 23872., 25268., 26024., 26780., 27536., 29032., 29808., 30584., 31360., 14215., 14782., 15349., 15916., 16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224., 23836., 24448.,  8731.,  9094.,  9457.,  9820., 10626., 11004., 11382., 11760., 12641., 13034., 13427., 13820., 14776., 15184., 15592., 16000., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 21420., 22264., 23108., 23952., 25376., 26240., 27104., 27968., 29492., 30376., 31260., 32144., 33768., 34672., 35576., 36480., 14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080., 25788., 26496.,  6812.,  7064.,  7316.,  7568.,  8168.,  8432.,  8696.,  8960.,  9620.,  9896., 10172., 10448., 11168., 11456., 11744., 12032.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 13012., 13512., 14012., 14512., 15592., 16112., 16632., 17152., 18332., 18872., 19412., 19952., 21232., 21792., 22352., 22912., 15012., 15592., 16172., 16752., 17912., 18512., 19112., 19712., 20972., 21592., 22212., 22832., 24192., 24832., 25472., 26112., 17012., 17672., 18332., 18992., 20232., 20912., 21592., 22272., 23612., 24312., 25012., 25712., 27152., 27872., 28592., 29312., 19012., 19752., 20492., 21232., 22552., 23312., 24072., 24832., 26252., 27032., 27812., 28592., 30112., 30912., 31712., 32512., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 12812., 13304., 13796., 14288., 15128., 15632., 16136., 16640., 17540., 18056., 18572., 19088., 20048., 20576., 21104., 21632.,  5165.,  5402.,  5639.,  5876.,  6350.,  6596.,  6842.,  7088.,  7607.,  7862.,  8117.,  8372.,  8936.,  9200.,  9464.,  9728.,  8180.,  8520.,  8860.,  9200.,  9888., 10240., 10592., 10944., 11692., 12056., 12420., 12784., 13592., 13968., 14344., 14720., 10519., 10974., 11429., 11884., 12750., 13220., 13690., 14160., 15101., 15586., 16071., 16556., 17572., 18072., 18572., 19072., 11923., 12438., 12953., 13468., 14394., 14924., 15454., 15984., 16985., 17530., 18075., 18620., 19696., 20256., 20816., 21376., 13327., 13902., 14477., 15052., 16038., 16628., 17218., 17808., 18869., 19474., 20079., 20684., 21820., 22440., 23060., 23680., 14731., 15366., 16001., 16636., 17682., 18332., 18982., 19632., 20753., 21418., 22083., 22748., 23944., 24624., 25304., 25984., 13364., 13896., 14428., 14960., 15840., 16384., 16928., 17472., 18412., 18968., 19524., 20080., 21080., 21648., 22216., 22784., 10241., 10658., 11075., 11492., 12178., 12604., 13030., 13456., 14187., 14622., 15057., 15492., 16268., 16712., 17156., 17600.,  4461.,  4602.,  4743.,  4884.,  5294.,  5444.,  5594.,  5744.,  6199.,  6358.,  6517.,  6676.,  7176.,  7344.,  7512.,  7680.,  5492.,  5704.,  5916.,  6128.,  6688.,  6912.,  7136.,  7360.,  7980.,  8216.,  8452.,  8688.,  9368.,  9616.,  9864., 10112.,  8343.,  8638.,  8933.,  9228.,  9966., 10276., 10586., 10896., 11709., 12034., 12359., 12684., 13572., 13912., 14252., 14592.,  9875., 10230., 10585., 10940., 11738., 12108., 12478., 12848., 13721., 14106., 14491., 14876., 15824., 16224., 16624., 17024., 11407., 11822., 12237., 12652., 13510., 13940., 14370., 14800., 15733., 16178., 16623., 17068., 18076., 18536., 18996., 19456., 12939., 13414., 13889., 14364., 15282., 15772., 16262., 16752., 17745., 18250., 18755., 19260., 20328., 20848., 21368., 21888., 10164., 10568., 10972., 11376., 12128., 12544., 12960., 13376., 14188., 14616., 15044., 15472., 16344., 16784., 17224., 17664.,  7041.,  7362.,  7683.,  8004.,  8562.,  8892.,  9222.,  9552., 10155., 10494., 10833., 11172., 11820., 12168., 12516., 12864.,  5788.,  6040.,  6292.,  6544.,  7144.,  7408.,  7672.,  7936.,  8596.,  8872.,  9148.,  9424., 10144., 10432., 10720., 11008.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 11988., 12488., 12988., 13488., 14568., 15088., 15608., 16128., 17308., 17848., 18388., 18928., 20208., 20768., 21328., 21888., 13988., 14568., 15148., 15728., 16888., 17488., 18088., 18688., 19948., 20568., 21188., 21808., 23168., 23808., 24448., 25088., 15988., 16648., 17308., 17968., 19208., 19888., 20568., 21248., 22588., 23288., 23988., 24688., 26128., 26848., 27568., 28288., 17988., 18728., 19468., 20208., 21528., 22288., 23048., 23808., 25228., 26008., 26788., 27568., 29088., 29888., 30688., 31488., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 11788., 12280., 12772., 13264., 14104., 14608., 15112., 15616., 16516., 17032., 17548., 18064., 19024., 19552., 20080., 20608.,  7099.,  7366.,  7633.,  7900.,  8610.,  8892.,  9174.,  9456., 10241., 10538., 10835., 11132., 11992., 12304., 12616., 12928.,  9836., 10232., 10628., 11024., 12000., 12416., 12832., 13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 18220., 18936., 19652., 20368., 21664., 22400., 23136., 23872., 25268., 26024., 26780., 27536., 29032., 29808., 30584., 31360., 14215., 14782., 15349., 15916., 16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224., 23836., 24448.,  8731.,  9094.,  9457.,  9820., 10626., 11004., 11382., 11760., 12641., 13034., 13427., 13820., 14776., 15184., 15592., 16000., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 21420., 22264., 23108., 23952., 25376., 26240., 27104., 27968., 29492., 30376., 31260., 32144., 33768., 34672., 35576., 36480., 14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080., 25788., 26496.,  7099.,  7366.,  7633.,  7900.,  8610.,  8892.,  9174.,  9456., 10241., 10538., 10835., 11132., 11992., 12304., 12616., 12928.,  9836., 10232., 10628., 11024., 12000., 12416., 12832., 13248., 14324., 14760., 15196., 15632., 16808., 17264., 17720., 18176., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 18220., 18936., 19652., 20368., 21664., 22400., 23136., 23872., 25268., 26024., 26780., 27536., 29032., 29808., 30584., 31360., 14215., 14782., 15349., 15916., 16894., 17476., 18058., 18640., 19693., 20290., 20887., 21484., 22612., 23224., 23836., 24448.,  8731.,  9094.,  9457.,  9820., 10626., 11004., 11382., 11760., 12641., 13034., 13427., 13820., 14776., 15184., 15592., 16000., 13036., 13560., 14084., 14608., 15712., 16256., 16800., 17344., 18548., 19112., 19676., 20240., 21544., 22128., 22712., 23296., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 21420., 22264., 23108., 23952., 25376., 26240., 27104., 27968., 29492., 30376., 31260., 32144., 33768., 34672., 35576., 36480., 14823., 15486., 16149., 16812., 17886., 18564., 19242., 19920., 21069., 21762., 22455., 23148., 24372., 25080., 25788., 26496.,  6812.,  7064.,  7316.,  7568.,  8168.,  8432.,  8696.,  8960.,  9620.,  9896., 10172., 10448., 11168., 11456., 11744., 12032.,  9200.,  9568.,  9936., 10304., 11136., 11520., 11904., 12288., 13200., 13600., 14000., 14400., 15392., 15808., 16224., 16640., 13012., 13512., 14012., 14512., 15592., 16112., 16632., 17152., 18332., 18872., 19412., 19952., 21232., 21792., 22352., 22912., 15012., 15592., 16172., 16752., 17912., 18512., 19112., 19712., 20972., 21592., 22212., 22832., 24192., 24832., 25472., 26112., 17012., 17672., 18332., 18992., 20232., 20912., 21592., 22272., 23612., 24312., 25012., 25712., 27152., 27872., 28592., 29312., 19012., 19752., 20492., 21232., 22552., 23312., 24072., 24832., 26252., 27032., 27812., 28592., 30112., 30912., 31712., 32512., 15600., 16224., 16848., 17472., 18560., 19200., 19840., 20480., 21648., 22304., 22960., 23616., 24864., 25536., 26208., 26880., 12812., 13304., 13796., 14288., 15128., 15632., 16136., 16640., 17540., 18056., 18572., 19088., 20048., 20576., 21104., 21632.,  5165.,  5402.,  5639.,  5876.,  6350.,  6596.,  6842.,  7088.,  7607.,  7862.,  8117.,  8372.,  8936.,  9200.,  9464.,  9728.,  8180.,  8520.,  8860.,  9200.,  9888., 10240., 10592., 10944., 11692., 12056., 12420., 12784., 13592., 13968., 14344., 14720., 10519., 10974., 11429., 11884., 12750., 13220., 13690., 14160., 15101., 15586., 16071., 16556., 17572., 18072., 18572., 19072., 11923., 12438., 12953., 13468., 14394., 14924., 15454., 15984., 16985., 17530., 18075., 18620., 19696., 20256., 20816., 21376., 13327., 13902., 14477., 15052., 16038., 16628., 17218., 17808., 18869., 19474., 20079., 20684., 21820., 22440., 23060., 23680., 14731., 15366., 16001., 16636., 17682., 18332., 18982., 19632., 20753., 21418., 22083., 22748., 23944., 24624., 25304., 25984., 13364., 13896., 14428., 14960., 15840., 16384., 16928., 17472., 18412., 18968., 19524., 20080., 21080., 21648., 22216., 22784., 10241., 10658., 11075., 11492., 12178., 12604., 13030., 13456., 14187., 14622., 15057., 15492., 16268., 16712., 17156., 17600.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472., 14049., 14594., 15139., 15684., 16930., 17500., 18070., 18640., 20011., 20606., 21201., 21796., 23292., 23912., 24532., 25152., 16453., 17098., 17743., 18388., 19734., 20404., 21074., 21744., 23215., 23910., 24605., 25300., 26896., 27616., 28336., 29056., 18857., 19602., 20347., 21092., 22538., 23308., 24078., 24848., 26419., 27214., 28009., 28804., 30500., 31320., 32140., 32960., 21261., 22106., 22951., 23796., 25342., 26212., 27082., 27952., 29623., 30518., 31413., 32308., 34104., 35024., 35944., 36864., 16257., 16962., 17667., 18372., 19778., 20508., 21238., 21968., 23499., 24254., 25009., 25764., 27420., 28200., 28980., 29760., 18661., 19466., 20271., 21076., 22582., 23412., 24242., 25072., 26703., 27558., 28413., 29268., 31024., 31904., 32784., 33664., 21065., 21970., 22875., 23780., 25386., 26316., 27246., 28176., 29907., 30862., 31817., 32772., 34628., 35608., 36588., 37568., 23469., 24474., 25479., 26484., 28190., 29220., 30250., 31280., 33111., 34166., 35221., 36276., 38232., 39312., 40392., 41472.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}