/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_depthwise_conv2d_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/depthwise_conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::DefaultBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;
using GTestTypePairs = sycldnn::types::ToGTestTypes<SNNTypePairs>::type;


template <typename Pair>
using ForwardWindow3Stride1 =
    sycldnn::depthwise_conv2d::WindowStrideTest<Pair, 3, 1>;
TYPED_TEST_SUITE(ForwardWindow3Stride1, GTestTypePairs);
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x4x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {111., 178., 217., 145., 231., 348., 393., 252., 363., 528., 573., 360., 197., 274., 295., 175.};
  const std::array<int, 4> in_shape = {{ 1, 4, 4, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x4x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {348., 393., 528., 573.};
  const std::array<int, 4> in_shape = {{ 1, 4, 4, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x4x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 208.,  222.,  332.,  356.,  404.,  434.,  268.,  290.,  429.,  462.,  642.,  696.,  723.,  786.,  459.,  504.,  669.,  726.,  966., 1056., 1047., 1146.,  651.,  720.,  348.,  394.,  476.,  548.,  512.,  590.,  296.,  350.};
  const std::array<int, 4> in_shape = {{ 1, 4, 4, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x4x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 642.,  696.,  723.,  786.,  966., 1056., 1047., 1146.};
  const std::array<int, 4> in_shape = {{ 1, 4, 4, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x4x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 402.,  416.,  430.,  444.,  640.,  664.,  688.,  712.,  778.,  808.,  838.,  868.,  514.,  536.,  558.,  580.,  825.,  858.,  891.,  924., 1230., 1284., 1338., 1392., 1383., 1446., 1509., 1572.,  873.,  918.,  963., 1008., 1281., 1338., 1395., 1452., 1842., 1932., 2022., 2112., 1995., 2094., 2193., 2292., 1233., 1302., 1371., 1440.,  650.,  696.,  742.,  788.,  880.,  952., 1024., 1096.,  946., 1024., 1102., 1180.,  538.,  592.,  646.,  700.};
  const std::array<int, 4> in_shape = {{ 1, 4, 4, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x4x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1230., 1284., 1338., 1392., 1383., 1446., 1509., 1572., 1842., 1932., 2022., 2112., 1995., 2094., 2193., 2292.};
  const std::array<int, 4> in_shape = {{ 1, 4, 4, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x4x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 364.,  444.,  592.,  712.,  736.,  868.,  492.,  580.,  798.,  924., 1203., 1392., 1365., 1572.,  870., 1008., 1278., 1452., 1851., 2112., 2013., 2292., 1254., 1440.,  668.,  788.,  916., 1096.,  988., 1180.,  572.,  700.};
  const std::array<int, 4> in_shape = {{ 1, 4, 4, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x4x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1203., 1392., 1365., 1572., 1851., 2112., 2013., 2292.};
  const std::array<int, 4> in_shape = {{ 1, 4, 4, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x4x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 704.,  728.,  860.,  888., 1142., 1184., 1376., 1424., 1418., 1472., 1676., 1736.,  944.,  984., 1116., 1160., 1536., 1596., 1782., 1848., 2307., 2406., 2676., 2784., 2613., 2730., 3018., 3144., 1656., 1740., 1926., 2016., 2448., 2556., 2790., 2904., 3531., 3702., 4044., 4224., 3837., 4026., 4386., 4584., 2376., 2508., 2742., 2880., 1248., 1336., 1484., 1576., 1694., 1832., 2048., 2192., 1826., 1976., 2204., 2360., 1040., 1144., 1292., 1400.};
  const std::array<int, 4> in_shape = {{ 1, 4, 4, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x4x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2307., 2406., 2676., 2784., 2613., 2730., 3018., 3144., 3531., 3702., 4044., 4224., 3837., 4026., 4386., 4584.};
  const std::array<int, 4> in_shape = {{ 1, 4, 4, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x4x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1384., 1408., 1432., 1456., 1692., 1720., 1748., 1776., 2242., 2284., 2326., 2368., 2704., 2752., 2800., 2848., 2782., 2836., 2890., 2944., 3292., 3352., 3412., 3472., 1848., 1888., 1928., 1968., 2188., 2232., 2276., 2320., 3012., 3072., 3132., 3192., 3498., 3564., 3630., 3696., 4515., 4614., 4713., 4812., 5244., 5352., 5460., 5568., 5109., 5226., 5343., 5460., 5910., 6036., 6162., 6288., 3228., 3312., 3396., 3480., 3762., 3852., 3942., 4032., 4788., 4896., 5004., 5112., 5466., 5580., 5694., 5808., 6891., 7062., 7233., 7404., 7908., 8088., 8268., 8448., 7485., 7674., 7863., 8052., 8574., 8772., 8970., 9168., 4620., 4752., 4884., 5016., 5346., 5484., 5622., 5760., 2408., 2496., 2584., 2672., 2876., 2968., 3060., 3152., 3250., 3388., 3526., 3664., 3952., 4096., 4240., 4384., 3502., 3652., 3802., 3952., 4252., 4408., 4564., 4720., 1976., 2080., 2184., 2288., 2476., 2584., 2692., 2800.};
  const std::array<int, 4> in_shape = {{ 1, 4, 4, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x4x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {4515., 4614., 4713., 4812., 5244., 5352., 5460., 5568., 5109., 5226., 5343., 5460., 5910., 6036., 6162., 6288., 6891., 7062., 7233., 7404., 7908., 8088., 8268., 8448., 7485., 7674., 7863., 8052., 8574., 8772., 8970., 9168.};
  const std::array<int, 4> in_shape = {{ 1, 4, 4, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x4x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1308., 1456., 1612., 1776., 2146., 2368., 2602., 2848., 2698., 2944., 3202., 3472., 1804., 1968., 2140., 2320., 2958., 3192., 3438., 3696., 4461., 4812., 5181., 5568., 5073., 5460., 5865., 6288., 3222., 3480., 3750., 4032., 4782., 5112., 5454., 5808., 6909., 7404., 7917., 8448., 7521., 8052., 8601., 9168., 4662., 5016., 5382., 5760., 2444., 2672., 2908., 3152., 3322., 3664., 4018., 4384., 3586., 3952., 4330., 4720., 2044., 2288., 2540., 2800.};
  const std::array<int, 4> in_shape = {{ 1, 4, 4, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x4x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {4461., 4812., 5181., 5568., 5073., 5460., 5865., 6288., 6909., 7404., 7917., 8448., 7521., 8052., 8601., 9168.};
  const std::array<int, 4> in_shape = {{ 1, 4, 4, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2572.,  2616.,  2864.,  2912.,  3172.,  3224.,  3496.,  3552.,  4214.,  4292.,  4652.,  4736.,  5114.,  5204.,  5600.,  5696.,  5294.,  5396.,  5780.,  5888.,  6290.,  6404.,  6824.,  6944.,  3532.,  3608.,  3856.,  3936.,  4196.,  4280.,  4552.,  4640.,  5802.,  5916.,  6264.,  6384.,  6750.,  6876.,  7260.,  7392.,  8733.,  8922.,  9426.,  9624., 10155., 10362., 10920., 11136.,  9921., 10146., 10686., 10920., 11487., 11730., 12324., 12576.,  6282.,  6444.,  6792.,  6960.,  7326.,  7500.,  7884.,  8064.,  9354.,  9564., 10008., 10224., 10686., 10908., 11388., 11616., 13485., 13818., 14466., 14808., 15483., 15834., 16536., 16896., 14673., 15042., 15726., 16104., 16815., 17202., 17940., 18336.,  9066.,  9324.,  9768., 10032., 10494., 10764., 11244., 11520.,  4716.,  4888.,  5168.,  5344.,  5636.,  5816.,  6120.,  6304.,  6374.,  6644.,  7052.,  7328.,  7754.,  8036.,  8480.,  8768.,  6878.,  7172.,  7604.,  7904.,  8354.,  8660.,  9128.,  9440.,  3884.,  4088.,  4368.,  4576.,  4868.,  5080.,  5384.,  5600.};
  const std::array<int, 4> in_shape = {{ 1, 4, 4, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8733.,  8922.,  9426.,  9624., 10155., 10362., 10920., 11136.,  9921., 10146., 10686., 10920., 11487., 11730., 12324., 12576., 13485., 13818., 14466., 14808., 15483., 15834., 16536., 16896., 14673., 15042., 15726., 16104., 16815., 17202., 17940., 18336.};
  const std::array<int, 4> in_shape = {{ 1, 4, 4, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x4x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5100.,  5144.,  5188.,  5232.,  5680.,  5728.,  5776.,  5824.,  6292.,  6344.,  6396.,  6448.,  6936.,  6992.,  7048.,  7104.,  8350.,  8428.,  8506.,  8584.,  9220.,  9304.,  9388.,  9472., 10138., 10228., 10318., 10408., 11104., 11200., 11296., 11392., 10486., 10588., 10690., 10792., 11452., 11560., 11668., 11776., 12466., 12580., 12694., 12808., 13528., 13648., 13768., 13888.,  6988.,  7064.,  7140.,  7216.,  7632.,  7712.,  7792.,  7872.,  8308.,  8392.,  8476.,  8560.,  9016.,  9104.,  9192.,  9280., 11490., 11604., 11718., 11832., 12408., 12528., 12648., 12768., 13374., 13500., 13626., 13752., 14388., 14520., 14652., 14784., 17277., 17466., 17655., 17844., 18654., 18852., 19050., 19248., 20103., 20310., 20517., 20724., 21624., 21840., 22056., 22272., 19617., 19842., 20067., 20292., 21138., 21372., 21606., 21840., 22731., 22974., 23217., 23460., 24396., 24648., 24900., 25152., 12402., 12564., 12726., 12888., 13416., 13584., 13752., 13920., 14478., 14652., 14826., 15000., 15588., 15768., 15948., 16128., 18498., 18708., 18918., 19128., 19800., 20016., 20232., 20448., 21150., 21372., 21594., 21816., 22548., 22776., 23004., 23232., 26637., 26970., 27303., 27636., 28590., 28932., 29274., 29616., 30615., 30966., 31317., 31668., 32712., 33072., 33432., 33792., 28977., 29346., 29715., 30084., 31074., 31452., 31830., 32208., 33243., 33630., 34017., 34404., 35484., 35880., 36276., 36672., 17874., 18132., 18390., 18648., 19272., 19536., 19800., 20064., 20718., 20988., 21258., 21528., 22212., 22488., 22764., 23040.,  9260.,  9432.,  9604.,  9776., 10160., 10336., 10512., 10688., 11092., 11272., 11452., 11632., 12056., 12240., 12424., 12608., 12478., 12748., 13018., 13288., 13828., 14104., 14380., 14656., 15226., 15508., 15790., 16072., 16672., 16960., 17248., 17536., 13462., 13756., 14050., 14344., 14908., 15208., 15508., 15808., 16402., 16708., 17014., 17320., 17944., 18256., 18568., 18880.,  7564.,  7768.,  7972.,  8176.,  8528.,  8736.,  8944.,  9152.,  9524.,  9736.,  9948., 10160., 10552., 10768., 10984., 11200.};
  const std::array<int, 4> in_shape = {{ 1, 4, 4, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x4x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17277., 17466., 17655., 17844., 18654., 18852., 19050., 19248., 20103., 20310., 20517., 20724., 21624., 21840., 22056., 22272., 19617., 19842., 20067., 20292., 21138., 21372., 21606., 21840., 22731., 22974., 23217., 23460., 24396., 24648., 24900., 25152., 26637., 26970., 27303., 27636., 28590., 28932., 29274., 29616., 30615., 30966., 31317., 31668., 32712., 33072., 33432., 33792., 28977., 29346., 29715., 30084., 31074., 31452., 31830., 32208., 33243., 33630., 34017., 34404., 35484., 35880., 36276., 36672.};
  const std::array<int, 4> in_shape = {{ 1, 4, 4, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x5x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {128., 202., 241., 280., 184., 276., 411., 456., 501., 318., 441., 636., 681., 726., 453., 240., 331., 352., 373., 220.};
  const std::array<int, 4> in_shape = {{ 1, 4, 5, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x5x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {411., 456., 501., 636., 681., 726.};
  const std::array<int, 4> in_shape = {{ 1, 4, 5, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x5x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 240.,  256.,  377.,  404.,  449.,  482.,  521.,  560.,  340.,  368.,  513.,  552.,  759.,  822.,  840.,  912.,  921., 1002.,  579.,  636.,  813.,  882., 1164., 1272., 1245., 1362., 1326., 1452.,  819.,  906.,  424.,  480.,  575.,  662.,  611.,  704.,  647.,  746.,  372.,  440.};
  const std::array<int, 4> in_shape = {{ 1, 4, 5, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x5x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 759.,  822.,  840.,  912.,  921., 1002., 1164., 1272., 1245., 1362., 1326., 1452.};
  const std::array<int, 4> in_shape = {{ 1, 4, 5, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x5x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 464.,  480.,  496.,  512.,  727.,  754.,  781.,  808.,  865.,  898.,  931.,  964., 1003., 1042., 1081., 1120.,  652.,  680.,  708.,  736.,  987., 1026., 1065., 1104., 1455., 1518., 1581., 1644., 1608., 1680., 1752., 1824., 1761., 1842., 1923., 2004., 1101., 1158., 1215., 1272., 1557., 1626., 1695., 1764., 2220., 2328., 2436., 2544., 2373., 2490., 2607., 2724., 2526., 2652., 2778., 2904., 1551., 1638., 1725., 1812.,  792.,  848.,  904.,  960., 1063., 1150., 1237., 1324., 1129., 1222., 1315., 1408., 1195., 1294., 1393., 1492.,  676.,  744.,  812.,  880.};
  const std::array<int, 4> in_shape = {{ 1, 4, 5, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x5x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1455., 1518., 1581., 1644., 1608., 1680., 1752., 1824., 1761., 1842., 1923., 2004., 2220., 2328., 2436., 2544., 2373., 2490., 2607., 2724., 2526., 2652., 2778., 2904.};
  const std::array<int, 4> in_shape = {{ 1, 4, 5, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x5x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 428.,  512.,  682.,  808.,  826.,  964.,  970., 1120.,  636.,  736.,  966., 1104., 1437., 1644., 1599., 1824., 1761., 2004., 1110., 1272., 1566., 1764., 2247., 2544., 2409., 2724., 2571., 2904., 1590., 1812.,  820.,  960., 1114., 1324., 1186., 1408., 1258., 1492.,  724.,  880.};
  const std::array<int, 4> in_shape = {{ 1, 4, 5, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x5x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1437., 1644., 1599., 1824., 1761., 2004., 2247., 2544., 2409., 2724., 2571., 2904.};
  const std::array<int, 4> in_shape = {{ 1, 4, 5, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x5x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 828.,  856.,  992., 1024., 1316., 1364., 1562., 1616., 1592., 1652., 1862., 1928., 1868., 1940., 2162., 2240., 1220., 1272., 1416., 1472., 1860., 1932., 2130., 2208., 2757., 2874., 3162., 3288., 3063., 3198., 3504., 3648., 3369., 3522., 3846., 4008., 2112., 2220., 2430., 2544., 3000., 3132., 3390., 3528., 4287., 4494., 4872., 5088., 4593., 4818., 5214., 5448., 4899., 5142., 5556., 5808., 3012., 3180., 3450., 3624., 1532., 1640., 1808., 1920., 2060., 2228., 2474., 2648., 2192., 2372., 2630., 2816., 2324., 2516., 2786., 2984., 1316., 1448., 1624., 1760.};
  const std::array<int, 4> in_shape = {{ 1, 4, 5, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x5x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2757., 2874., 3162., 3288., 3063., 3198., 3504., 3648., 3369., 3522., 3846., 4008., 4287., 4494., 4872., 5088., 4593., 4818., 5214., 5448., 4899., 5142., 5556., 5808.};
  const std::array<int, 4> in_shape = {{ 1, 4, 5, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x5x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1628.,  1656.,  1684.,  1712.,  1952.,  1984.,  2016.,  2048.,  2584.,  2632.,  2680.,  2728.,  3070.,  3124.,  3178.,  3232.,  3124.,  3184.,  3244.,  3304.,  3658.,  3724.,  3790.,  3856.,  3664.,  3736.,  3808.,  3880.,  4246.,  4324.,  4402.,  4480.,  2388.,  2440.,  2492.,  2544.,  2776.,  2832.,  2888.,  2944.,  3648.,  3720.,  3792.,  3864.,  4182.,  4260.,  4338.,  4416.,  5397.,  5514.,  5631.,  5748.,  6198.,  6324.,  6450.,  6576.,  5991.,  6126.,  6261.,  6396.,  6864.,  7008.,  7152.,  7296.,  6585.,  6738.,  6891.,  7044.,  7530.,  7692.,  7854.,  8016.,  4116.,  4224.,  4332.,  4440.,  4746.,  4860.,  4974.,  5088.,  5868.,  6000.,  6132.,  6264.,  6642.,  6780.,  6918.,  7056.,  8367.,  8574.,  8781.,  8988.,  9528.,  9744.,  9960., 10176.,  8961.,  9186.,  9411.,  9636., 10194., 10428., 10662., 10896.,  9555.,  9798., 10041., 10284., 10860., 11112., 11364., 11616.,  5856.,  6024.,  6192.,  6360.,  6726.,  6900.,  7074.,  7248.,  2956.,  3064.,  3172.,  3280.,  3504.,  3616.,  3728.,  3840.,  3952.,  4120.,  4288.,  4456.,  4774.,  4948.,  5122.,  5296.,  4204.,  4384.,  4564.,  4744.,  5074.,  5260.,  5446.,  5632.,  4456.,  4648.,  4840.,  5032.,  5374.,  5572.,  5770.,  5968.,  2500.,  2632.,  2764.,  2896.,  3112.,  3248.,  3384.,  3520.};
  const std::array<int, 4> in_shape = {{ 1, 4, 5, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x5x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5397.,  5514.,  5631.,  5748.,  6198.,  6324.,  6450.,  6576.,  5991.,  6126.,  6261.,  6396.,  6864.,  7008.,  7152.,  7296.,  6585.,  6738.,  6891.,  7044.,  7530.,  7692.,  7854.,  8016.,  8367.,  8574.,  8781.,  8988.,  9528.,  9744.,  9960., 10176.,  8961.,  9186.,  9411.,  9636., 10194., 10428., 10662., 10896.,  9555.,  9798., 10041., 10284., 10860., 11112., 11364., 11616.};
  const std::array<int, 4> in_shape = {{ 1, 4, 5, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x5x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1556.,  1712.,  1876.,  2048.,  2494.,  2728.,  2974.,  3232.,  3046.,  3304.,  3574.,  3856.,  3598.,  3880.,  4174.,  4480.,  2356.,  2544.,  2740.,  2944.,  3606.,  3864.,  4134.,  4416.,  5361.,  5748.,  6153.,  6576.,  5973.,  6396.,  6837.,  7296.,  6585.,  7044.,  7521.,  8016.,  4134.,  4440.,  4758.,  5088.,  5886.,  6264.,  6654.,  7056.,  8421.,  8988.,  9573., 10176.,  9033.,  9636., 10257., 10896.,  9645., 10284., 10941., 11616.,  5934.,  6360.,  6798.,  7248.,  3012.,  3280.,  3556.,  3840.,  4054.,  4456.,  4870.,  5296.,  4318.,  4744.,  5182.,  5632.,  4582.,  5032.,  5494.,  5968.,  2596.,  2896.,  3204.,  3520.};
  const std::array<int, 4> in_shape = {{ 1, 4, 5, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x5x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5361.,  5748.,  6153.,  6576.,  5973.,  6396.,  6837.,  7296.,  6585.,  7044.,  7521.,  8016.,  8421.,  8988.,  9573., 10176.,  9033.,  9636., 10257., 10896.,  9645., 10284., 10941., 11616.};
  const std::array<int, 4> in_shape = {{ 1, 4, 5, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x5x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3060.,  3112.,  3368.,  3424.,  3692.,  3752.,  4032.,  4096.,  4898.,  4988.,  5360.,  5456.,  5846.,  5948.,  6356.,  6464.,  5978.,  6092.,  6488.,  6608.,  7022.,  7148.,  7580.,  7712.,  7058.,  7196.,  7616.,  7760.,  8198.,  8348.,  8804.,  8960.,  4612.,  4712.,  4984.,  5088.,  5372.,  5480.,  5776.,  5888.,  7074.,  7212.,  7584.,  7728.,  8118.,  8268.,  8676.,  8832., 10497., 10722., 11262., 11496., 12063., 12306., 12900., 13152., 11685., 11946., 12522., 12792., 13395., 13674., 14304., 14592., 12873., 13170., 13782., 14088., 14727., 15042., 15708., 16032.,  8058.,  8268.,  8664.,  8880.,  9294.,  9516.,  9948., 10176., 11514., 11772., 12264., 12528., 13038., 13308., 13836., 14112., 16437., 16842., 17562., 17976., 18723., 19146., 19920., 20352., 17625., 18066., 18822., 19272., 20055., 20514., 21324., 21792., 18813., 19290., 20082., 20568., 21387., 21882., 22728., 23232., 11538., 11868., 12384., 12720., 13254., 13596., 14148., 14496.,  5812.,  6024.,  6344.,  6560.,  6892.,  7112.,  7456.,  7680.,  7778.,  8108.,  8576.,  8912.,  9398.,  9740., 10244., 10592.,  8282.,  8636.,  9128.,  9488.,  9998., 10364., 10892., 11264.,  8786.,  9164.,  9680., 10064., 10598., 10988., 11540., 11936.,  4932.,  5192.,  5528.,  5792.,  6140.,  6408.,  6768.,  7040.};
  const std::array<int, 4> in_shape = {{ 1, 4, 5, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x5x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10497., 10722., 11262., 11496., 12063., 12306., 12900., 13152., 11685., 11946., 12522., 12792., 13395., 13674., 14304., 14592., 12873., 13170., 13782., 14088., 14727., 15042., 15708., 16032., 16437., 16842., 17562., 17976., 18723., 19146., 19920., 20352., 17625., 18066., 18822., 19272., 20055., 20514., 21324., 21792., 18813., 19290., 20082., 20568., 21387., 21882., 22728., 23232.};
  const std::array<int, 4> in_shape = {{ 1, 4, 5, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x5x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6068.,  6120.,  6172.,  6224.,  6680.,  6736.,  6792.,  6848.,  7324.,  7384.,  7444.,  7504.,  8000.,  8064.,  8128.,  8192.,  9706.,  9796.,  9886.,  9976., 10624., 10720., 10816., 10912., 11590., 11692., 11794., 11896., 12604., 12712., 12820., 12928., 11842., 11956., 12070., 12184., 12856., 12976., 13096., 13216., 13918., 14044., 14170., 14296., 15028., 15160., 15292., 15424., 13978., 14116., 14254., 14392., 15088., 15232., 15376., 15520., 16246., 16396., 16546., 16696., 17452., 17608., 17764., 17920.,  9124.,  9224.,  9324.,  9424.,  9864.,  9968., 10072., 10176., 10636., 10744., 10852., 10960., 11440., 11552., 11664., 11776., 14010., 14148., 14286., 14424., 15024., 15168., 15312., 15456., 16086., 16236., 16386., 16536., 17196., 17352., 17508., 17664., 20769., 20994., 21219., 21444., 22290., 22524., 22758., 22992., 23883., 24126., 24369., 24612., 25548., 25800., 26052., 26304., 23109., 23370., 23631., 23892., 24774., 25044., 25314., 25584., 26511., 26790., 27069., 27348., 28320., 28608., 28896., 29184., 25449., 25746., 26043., 26340., 27258., 27564., 27870., 28176., 29139., 29454., 29769., 30084., 31092., 31416., 31740., 32064., 15906., 16116., 16326., 16536., 17112., 17328., 17544., 17760., 18366., 18588., 18810., 19032., 19668., 19896., 20124., 20352., 22770., 23028., 23286., 23544., 24264., 24528., 24792., 25056., 25806., 26076., 26346., 26616., 27396., 27672., 27948., 28224., 32469., 32874., 33279., 33684., 34710., 35124., 35538., 35952., 37023., 37446., 37869., 38292., 39408., 39840., 40272., 40704., 34809., 35250., 35691., 36132., 37194., 37644., 38094., 38544., 39651., 40110., 40569., 41028., 42180., 42648., 43116., 43584., 37149., 37626., 38103., 38580., 39678., 40164., 40650., 41136., 42279., 42774., 43269., 43764., 44952., 45456., 45960., 46464., 22746., 23076., 23406., 23736., 24432., 24768., 25104., 25440., 26166., 26508., 26850., 27192., 27948., 28296., 28644., 28992., 11412., 11624., 11836., 12048., 12472., 12688., 12904., 13120., 13564., 13784., 14004., 14224., 14688., 14912., 15136., 15360., 15226., 15556., 15886., 16216., 16816., 17152., 17488., 17824., 18454., 18796., 19138., 19480., 20140., 20488., 20836., 21184., 16210., 16564., 16918., 17272., 17896., 18256., 18616., 18976., 19630., 19996., 20362., 20728., 21412., 21784., 22156., 22528., 17194., 17572., 17950., 18328., 18976., 19360., 19744., 20128., 20806., 21196., 21586., 21976., 22684., 23080., 23476., 23872.,  9604.,  9864., 10124., 10384., 10792., 11056., 11320., 11584., 12012., 12280., 12548., 12816., 13264., 13536., 13808., 14080.};
  const std::array<int, 4> in_shape = {{ 1, 4, 5, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x5x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20769., 20994., 21219., 21444., 22290., 22524., 22758., 22992., 23883., 24126., 24369., 24612., 25548., 25800., 26052., 26304., 23109., 23370., 23631., 23892., 24774., 25044., 25314., 25584., 26511., 26790., 27069., 27348., 28320., 28608., 28896., 29184., 25449., 25746., 26043., 26340., 27258., 27564., 27870., 28176., 29139., 29454., 29769., 30084., 31092., 31416., 31740., 32064., 32469., 32874., 33279., 33684., 34710., 35124., 35538., 35952., 37023., 37446., 37869., 38292., 39408., 39840., 40272., 40704., 34809., 35250., 35691., 36132., 37194., 37644., 38094., 38544., 39651., 40110., 40569., 41028., 42180., 42648., 43116., 43584., 37149., 37626., 38103., 38580., 39678., 40164., 40650., 41136., 42279., 42774., 43269., 43764., 44952., 45456., 45960., 46464.};
  const std::array<int, 4> in_shape = {{ 1, 4, 5, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {145., 226., 265., 304., 343., 223., 321., 474., 519., 564., 609., 384., 519., 744., 789., 834., 879., 546., 283., 388., 409., 430., 451., 265.};
  const std::array<int, 4> in_shape = {{ 1, 4, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {474., 519., 564., 609., 744., 789., 834., 879.};
  const std::array<int, 4> in_shape = {{ 1, 4, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 272.,  290.,  422.,  452.,  494.,  530.,  566.,  608.,  638.,  686.,  412.,  446.,  597.,  642.,  876.,  948.,  957., 1038., 1038., 1128., 1119., 1218.,  699.,  768.,  957., 1038., 1362., 1488., 1443., 1578., 1524., 1668., 1605., 1758.,  987., 1092.,  500.,  566.,  674.,  776.,  710.,  818.,  746.,  860.,  782.,  902.,  448.,  530.};
  const std::array<int, 4> in_shape = {{ 1, 4, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 876.,  948.,  957., 1038., 1038., 1128., 1119., 1218., 1362., 1488., 1443., 1578., 1524., 1668., 1605., 1758.};
  const std::array<int, 4> in_shape = {{ 1, 4, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 526.,  544.,  562.,  580.,  814.,  844.,  874.,  904.,  952.,  988., 1024., 1060., 1090., 1132., 1174., 1216., 1228., 1276., 1324., 1372.,  790.,  824.,  858.,  892., 1149., 1194., 1239., 1284., 1680., 1752., 1824., 1896., 1833., 1914., 1995., 2076., 1986., 2076., 2166., 2256., 2139., 2238., 2337., 2436., 1329., 1398., 1467., 1536., 1833., 1914., 1995., 2076., 2598., 2724., 2850., 2976., 2751., 2886., 3021., 3156., 2904., 3048., 3192., 3336., 3057., 3210., 3363., 3516., 1869., 1974., 2079., 2184.,  934., 1000., 1066., 1132., 1246., 1348., 1450., 1552., 1312., 1420., 1528., 1636., 1378., 1492., 1606., 1720., 1444., 1564., 1684., 1804.,  814.,  896.,  978., 1060.};
  const std::array<int, 4> in_shape = {{ 1, 4, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1680., 1752., 1824., 1896., 1833., 1914., 1995., 2076., 1986., 2076., 2166., 2256., 2139., 2238., 2337., 2436., 2598., 2724., 2850., 2976., 2751., 2886., 3021., 3156., 2904., 3048., 3192., 3336., 3057., 3210., 3363., 3516.};
  const std::array<int, 4> in_shape = {{ 1, 4, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 492.,  580.,  772.,  904.,  916., 1060., 1060., 1216., 1204., 1372.,  780.,  892., 1134., 1284., 1671., 1896., 1833., 2076., 1995., 2256., 2157., 2436., 1350., 1536., 1854., 2076., 2643., 2976., 2805., 3156., 2967., 3336., 3129., 3516., 1926., 2184.,  972., 1132., 1312., 1552., 1384., 1636., 1456., 1720., 1528., 1804.,  876., 1060.};
  const std::array<int, 4> in_shape = {{ 1, 4, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1671., 1896., 1833., 2076., 1995., 2256., 2157., 2436., 2643., 2976., 2805., 3156., 2967., 3336., 3129., 3516.};
  const std::array<int, 4> in_shape = {{ 1, 4, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 952.,  984., 1124., 1160., 1490., 1544., 1748., 1808., 1766., 1832., 2048., 2120., 2042., 2120., 2348., 2432., 2318., 2408., 2648., 2744., 1496., 1560., 1716., 1784., 2184., 2268., 2478., 2568., 3207., 3342., 3648., 3792., 3513., 3666., 3990., 4152., 3819., 3990., 4332., 4512., 4125., 4314., 4674., 4872., 2568., 2700., 2934., 3072., 3552., 3708., 3990., 4152., 5043., 5286., 5700., 5952., 5349., 5610., 6042., 6312., 5655., 5934., 6384., 6672., 5961., 6258., 6726., 7032., 3648., 3852., 4158., 4368., 1816., 1944., 2132., 2264., 2426., 2624., 2900., 3104., 2558., 2768., 3056., 3272., 2690., 2912., 3212., 3440., 2822., 3056., 3368., 3608., 1592., 1752., 1956., 2120.};
  const std::array<int, 4> in_shape = {{ 1, 4, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3207., 3342., 3648., 3792., 3513., 3666., 3990., 4152., 3819., 3990., 4332., 4512., 4125., 4314., 4674., 4872., 5043., 5286., 5700., 5952., 5349., 5610., 6042., 6312., 5655., 5934., 6384., 6672., 5961., 6258., 6726., 7032.};
  const std::array<int, 4> in_shape = {{ 1, 4, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1872.,  1904.,  1936.,  1968.,  2212.,  2248.,  2284.,  2320.,  2926.,  2980.,  3034.,  3088.,  3436.,  3496.,  3556.,  3616.,  3466.,  3532.,  3598.,  3664.,  4024.,  4096.,  4168.,  4240.,  4006.,  4084.,  4162.,  4240.,  4612.,  4696.,  4780.,  4864.,  4546.,  4636.,  4726.,  4816.,  5200.,  5296.,  5392.,  5488.,  2928.,  2992.,  3056.,  3120.,  3364.,  3432.,  3500.,  3568.,  4284.,  4368.,  4452.,  4536.,  4866.,  4956.,  5046.,  5136.,  6279.,  6414.,  6549.,  6684.,  7152.,  7296.,  7440.,  7584.,  6873.,  7026.,  7179.,  7332.,  7818.,  7980.,  8142.,  8304.,  7467.,  7638.,  7809.,  7980.,  8484.,  8664.,  8844.,  9024.,  8061.,  8250.,  8439.,  8628.,  9150.,  9348.,  9546.,  9744.,  5004.,  5136.,  5268.,  5400.,  5730.,  5868.,  6006.,  6144.,  6948.,  7104.,  7260.,  7416.,  7818.,  7980.,  8142.,  8304.,  9843., 10086., 10329., 10572., 11148., 11400., 11652., 11904., 10437., 10698., 10959., 11220., 11814., 12084., 12354., 12624., 11031., 11310., 11589., 11868., 12480., 12768., 13056., 13344., 11625., 11922., 12219., 12516., 13146., 13452., 13758., 14064.,  7092.,  7296.,  7500.,  7704.,  8106.,  8316.,  8526.,  8736.,  3504.,  3632.,  3760.,  3888.,  4132.,  4264.,  4396.,  4528.,  4654.,  4852.,  5050.,  5248.,  5596.,  5800.,  6004.,  6208.,  4906.,  5116.,  5326.,  5536.,  5896.,  6112.,  6328.,  6544.,  5158.,  5380.,  5602.,  5824.,  6196.,  6424.,  6652.,  6880.,  5410.,  5644.,  5878.,  6112.,  6496.,  6736.,  6976.,  7216.,  3024.,  3184.,  3344.,  3504.,  3748.,  3912.,  4076.,  4240.};
  const std::array<int, 4> in_shape = {{ 1, 4, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6279.,  6414.,  6549.,  6684.,  7152.,  7296.,  7440.,  7584.,  6873.,  7026.,  7179.,  7332.,  7818.,  7980.,  8142.,  8304.,  7467.,  7638.,  7809.,  7980.,  8484.,  8664.,  8844.,  9024.,  8061.,  8250.,  8439.,  8628.,  9150.,  9348.,  9546.,  9744.,  9843., 10086., 10329., 10572., 11148., 11400., 11652., 11904., 10437., 10698., 10959., 11220., 11814., 12084., 12354., 12624., 11031., 11310., 11589., 11868., 12480., 12768., 13056., 13344., 11625., 11922., 12219., 12516., 13146., 13452., 13758., 14064.};
  const std::array<int, 4> in_shape = {{ 1, 4, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1804.,  1968.,  2140.,  2320.,  2842.,  3088.,  3346.,  3616.,  3394.,  3664.,  3946.,  4240.,  3946.,  4240.,  4546.,  4864.,  4498.,  4816.,  5146.,  5488.,  2908.,  3120.,  3340.,  3568.,  4254.,  4536.,  4830.,  5136.,  6261.,  6684.,  7125.,  7584.,  6873.,  7332.,  7809.,  8304.,  7485.,  7980.,  8493.,  9024.,  8097.,  8628.,  9177.,  9744.,  5046.,  5400.,  5766.,  6144.,  6990.,  7416.,  7854.,  8304.,  9933., 10572., 11229., 11904., 10545., 11220., 11913., 12624., 11157., 11868., 12597., 13344., 11769., 12516., 13281., 14064.,  7206.,  7704.,  8214.,  8736.,  3580.,  3888.,  4204.,  4528.,  4786.,  5248.,  5722.,  6208.,  5050.,  5536.,  6034.,  6544.,  5314.,  5824.,  6346.,  6880.,  5578.,  6112.,  6658.,  7216.,  3148.,  3504.,  3868.,  4240.};
  const std::array<int, 4> in_shape = {{ 1, 4, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6261.,  6684.,  7125.,  7584.,  6873.,  7332.,  7809.,  8304.,  7485.,  7980.,  8493.,  9024.,  8097.,  8628.,  9177.,  9744.,  9933., 10572., 11229., 11904., 10545., 11220., 11913., 12624., 11157., 11868., 12597., 13344., 11769., 12516., 13281., 14064.};
  const std::array<int, 4> in_shape = {{ 1, 4, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3548.,  3608.,  3872.,  3936.,  4212.,  4280.,  4568.,  4640.,  5582.,  5684.,  6068.,  6176.,  6578.,  6692.,  7112.,  7232.,  6662.,  6788.,  7196.,  7328.,  7754.,  7892.,  8336.,  8480.,  7742.,  7892.,  8324.,  8480.,  8930.,  9092.,  9560.,  9728.,  8822.,  8996.,  9452.,  9632., 10106., 10292., 10784., 10976.,  5692.,  5816.,  6112.,  6240.,  6548.,  6680.,  7000.,  7136.,  8346.,  8508.,  8904.,  9072.,  9486.,  9660., 10092., 10272., 12261., 12522., 13098., 13368., 13971., 14250., 14880., 15168., 13449., 13746., 14358., 14664., 15303., 15618., 16284., 16608., 14637., 14970., 15618., 15960., 16635., 16986., 17688., 18048., 15825., 16194., 16878., 17256., 17967., 18354., 19092., 19488.,  9834., 10092., 10536., 10800., 11262., 11532., 12012., 12288., 13674., 13980., 14520., 14832., 15390., 15708., 16284., 16608., 19389., 19866., 20658., 21144., 21963., 22458., 23304., 23808., 20577., 21090., 21918., 22440., 23295., 23826., 24708., 25248., 21765., 22314., 23178., 23736., 24627., 25194., 26112., 26688., 22953., 23538., 24438., 25032., 25959., 26562., 27516., 28128., 14010., 14412., 15000., 15408., 16014., 16428., 17052., 17472.,  6908.,  7160.,  7520.,  7776.,  8148.,  8408.,  8792.,  9056.,  9182.,  9572., 10100., 10496., 11042., 11444., 12008., 12416.,  9686., 10100., 10652., 11072., 11642., 12068., 12656., 13088., 10190., 10628., 11204., 11648., 12242., 12692., 13304., 13760., 10694., 11156., 11756., 12224., 12842., 13316., 13952., 14432.,  5980.,  6296.,  6688.,  7008.,  7412.,  7736.,  8152.,  8480.};
  const std::array<int, 4> in_shape = {{ 1, 4, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12261., 12522., 13098., 13368., 13971., 14250., 14880., 15168., 13449., 13746., 14358., 14664., 15303., 15618., 16284., 16608., 14637., 14970., 15618., 15960., 16635., 16986., 17688., 18048., 15825., 16194., 16878., 17256., 17967., 18354., 19092., 19488., 19389., 19866., 20658., 21144., 21963., 22458., 23304., 23808., 20577., 21090., 21918., 22440., 23295., 23826., 24708., 25248., 21765., 22314., 23178., 23736., 24627., 25194., 26112., 26688., 22953., 23538., 24438., 25032., 25959., 26562., 27516., 28128.};
  const std::array<int, 4> in_shape = {{ 1, 4, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x4x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7036.,  7096.,  7156.,  7216.,  7680.,  7744.,  7808.,  7872.,  8356.,  8424.,  8492.,  8560.,  9064.,  9136.,  9208.,  9280., 11062., 11164., 11266., 11368., 12028., 12136., 12244., 12352., 13042., 13156., 13270., 13384., 14104., 14224., 14344., 14464., 13198., 13324., 13450., 13576., 14260., 14392., 14524., 14656., 15370., 15508., 15646., 15784., 16528., 16672., 16816., 16960., 15334., 15484., 15634., 15784., 16492., 16648., 16804., 16960., 17698., 17860., 18022., 18184., 18952., 19120., 19288., 19456., 17470., 17644., 17818., 17992., 18724., 18904., 19084., 19264., 20026., 20212., 20398., 20584., 21376., 21568., 21760., 21952., 11260., 11384., 11508., 11632., 12096., 12224., 12352., 12480., 12964., 13096., 13228., 13360., 13864., 14000., 14136., 14272., 16530., 16692., 16854., 17016., 17640., 17808., 17976., 18144., 18798., 18972., 19146., 19320., 20004., 20184., 20364., 20544., 24261., 24522., 24783., 25044., 25926., 26196., 26466., 26736., 27663., 27942., 28221., 28500., 29472., 29760., 30048., 30336., 26601., 26898., 27195., 27492., 28410., 28716., 29022., 29328., 30291., 30606., 30921., 31236., 32244., 32568., 32892., 33216., 28941., 29274., 29607., 29940., 30894., 31236., 31578., 31920., 32919., 33270., 33621., 33972., 35016., 35376., 35736., 36096., 31281., 31650., 32019., 32388., 33378., 33756., 34134., 34512., 35547., 35934., 36321., 36708., 37788., 38184., 38580., 38976., 19410., 19668., 19926., 20184., 20808., 21072., 21336., 21600., 22254., 22524., 22794., 23064., 23748., 24024., 24300., 24576., 27042., 27348., 27654., 27960., 28728., 29040., 29352., 29664., 30462., 30780., 31098., 31416., 32244., 32568., 32892., 33216., 38301., 38778., 39255., 39732., 40830., 41316., 41802., 42288., 43431., 43926., 44421., 44916., 46104., 46608., 47112., 47616., 40641., 41154., 41667., 42180., 43314., 43836., 44358., 44880., 46059., 46590., 47121., 47652., 48876., 49416., 49956., 50496., 42981., 43530., 44079., 44628., 45798., 46356., 46914., 47472., 48687., 49254., 49821., 50388., 51648., 52224., 52800., 53376., 45321., 45906., 46491., 47076., 48282., 48876., 49470., 50064., 51315., 51918., 52521., 53124., 54420., 55032., 55644., 56256., 27618., 28020., 28422., 28824., 29592., 30000., 30408., 30816., 31614., 32028., 32442., 32856., 33684., 34104., 34524., 34944., 13564., 13816., 14068., 14320., 14784., 15040., 15296., 15552., 16036., 16296., 16556., 16816., 17320., 17584., 17848., 18112., 17974., 18364., 18754., 19144., 19804., 20200., 20596., 20992., 21682., 22084., 22486., 22888., 23608., 24016., 24424., 24832., 18958., 19372., 19786., 20200., 20884., 21304., 21724., 22144., 22858., 23284., 23710., 24136., 24880., 25312., 25744., 26176., 19942., 20380., 20818., 21256., 21964., 22408., 22852., 23296., 24034., 24484., 24934., 25384., 26152., 26608., 27064., 27520., 20926., 21388., 21850., 22312., 23044., 23512., 23980., 24448., 25210., 25684., 26158., 26632., 27424., 27904., 28384., 28864., 11644., 11960., 12276., 12592., 13056., 13376., 13696., 14016., 14500., 14824., 15148., 15472., 15976., 16304., 16632., 16960.};
  const std::array<int, 4> in_shape = {{ 1, 4, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x4x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24261., 24522., 24783., 25044., 25926., 26196., 26466., 26736., 27663., 27942., 28221., 28500., 29472., 29760., 30048., 30336., 26601., 26898., 27195., 27492., 28410., 28716., 29022., 29328., 30291., 30606., 30921., 31236., 32244., 32568., 32892., 33216., 28941., 29274., 29607., 29940., 30894., 31236., 31578., 31920., 32919., 33270., 33621., 33972., 35016., 35376., 35736., 36096., 31281., 31650., 32019., 32388., 33378., 33756., 34134., 34512., 35547., 35934., 36321., 36708., 37788., 38184., 38580., 38976., 38301., 38778., 39255., 39732., 40830., 41316., 41802., 42288., 43431., 43926., 44421., 44916., 46104., 46608., 47112., 47616., 40641., 41154., 41667., 42180., 43314., 43836., 44358., 44880., 46059., 46590., 47121., 47652., 48876., 49416., 49956., 50496., 42981., 43530., 44079., 44628., 45798., 46356., 46914., 47472., 48687., 49254., 49821., 50388., 51648., 52224., 52800., 53376., 45321., 45906., 46491., 47076., 48282., 48876., 49470., 50064., 51315., 51918., 52521., 53124., 54420., 55032., 55644., 56256.};
  const std::array<int, 4> in_shape = {{ 1, 4, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x4x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {111., 178., 217., 145., 231., 348., 393., 252., 363., 528., 573., 360., 495., 708., 753., 468., 261., 358., 379., 223.};
  const std::array<int, 4> in_shape = {{ 1, 5, 4, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x4x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {348., 393., 528., 573., 708., 753.};
  const std::array<int, 4> in_shape = {{ 1, 5, 4, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x4x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 208.,  222.,  332.,  356.,  404.,  434.,  268.,  290.,  429.,  462.,  642.,  696.,  723.,  786.,  459.,  504.,  669.,  726.,  966., 1056., 1047., 1146.,  651.,  720.,  909.,  990., 1290., 1416., 1371., 1506.,  843.,  936.,  460.,  522.,  620.,  716.,  656.,  758.,  376.,  446.};
  const std::array<int, 4> in_shape = {{ 1, 5, 4, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x4x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 642.,  696.,  723.,  786.,  966., 1056., 1047., 1146., 1290., 1416., 1371., 1506.};
  const std::array<int, 4> in_shape = {{ 1, 5, 4, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x4x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 402.,  416.,  430.,  444.,  640.,  664.,  688.,  712.,  778.,  808.,  838.,  868.,  514.,  536.,  558.,  580.,  825.,  858.,  891.,  924., 1230., 1284., 1338., 1392., 1383., 1446., 1509., 1572.,  873.,  918.,  963., 1008., 1281., 1338., 1395., 1452., 1842., 1932., 2022., 2112., 1995., 2094., 2193., 2292., 1233., 1302., 1371., 1440., 1737., 1818., 1899., 1980., 2454., 2580., 2706., 2832., 2607., 2742., 2877., 3012., 1593., 1686., 1779., 1872.,  858.,  920.,  982., 1044., 1144., 1240., 1336., 1432., 1210., 1312., 1414., 1516.,  682.,  752.,  822.,  892.};
  const std::array<int, 4> in_shape = {{ 1, 5, 4, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x4x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1230., 1284., 1338., 1392., 1383., 1446., 1509., 1572., 1842., 1932., 2022., 2112., 1995., 2094., 2193., 2292., 2454., 2580., 2706., 2832., 2607., 2742., 2877., 3012.};
  const std::array<int, 4> in_shape = {{ 1, 5, 4, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x4x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 364.,  444.,  592.,  712.,  736.,  868.,  492.,  580.,  798.,  924., 1203., 1392., 1365., 1572.,  870., 1008., 1278., 1452., 1851., 2112., 2013., 2292., 1254., 1440., 1758., 1980., 2499., 2832., 2661., 3012., 1638., 1872.,  892., 1044., 1204., 1432., 1276., 1516.,  732.,  892.};
  const std::array<int, 4> in_shape = {{ 1, 5, 4, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x4x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1203., 1392., 1365., 1572., 1851., 2112., 2013., 2292., 2499., 2832., 2661., 3012.};
  const std::array<int, 4> in_shape = {{ 1, 5, 4, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x4x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 704.,  728.,  860.,  888., 1142., 1184., 1376., 1424., 1418., 1472., 1676., 1736.,  944.,  984., 1116., 1160., 1536., 1596., 1782., 1848., 2307., 2406., 2676., 2784., 2613., 2730., 3018., 3144., 1656., 1740., 1926., 2016., 2448., 2556., 2790., 2904., 3531., 3702., 4044., 4224., 3837., 4026., 4386., 4584., 2376., 2508., 2742., 2880., 3360., 3516., 3798., 3960., 4755., 4998., 5412., 5664., 5061., 5322., 5754., 6024., 3096., 3276., 3558., 3744., 1664., 1784., 1964., 2088., 2222., 2408., 2672., 2864., 2354., 2552., 2828., 3032., 1328., 1464., 1644., 1784.};
  const std::array<int, 4> in_shape = {{ 1, 5, 4, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x4x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2307., 2406., 2676., 2784., 2613., 2730., 3018., 3144., 3531., 3702., 4044., 4224., 3837., 4026., 4386., 4584., 4755., 4998., 5412., 5664., 5061., 5322., 5754., 6024.};
  const std::array<int, 4> in_shape = {{ 1, 5, 4, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x4x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1384.,  1408.,  1432.,  1456.,  1692.,  1720.,  1748.,  1776.,  2242.,  2284.,  2326.,  2368.,  2704.,  2752.,  2800.,  2848.,  2782.,  2836.,  2890.,  2944.,  3292.,  3352.,  3412.,  3472.,  1848.,  1888.,  1928.,  1968.,  2188.,  2232.,  2276.,  2320.,  3012.,  3072.,  3132.,  3192.,  3498.,  3564.,  3630.,  3696.,  4515.,  4614.,  4713.,  4812.,  5244.,  5352.,  5460.,  5568.,  5109.,  5226.,  5343.,  5460.,  5910.,  6036.,  6162.,  6288.,  3228.,  3312.,  3396.,  3480.,  3762.,  3852.,  3942.,  4032.,  4788.,  4896.,  5004.,  5112.,  5466.,  5580.,  5694.,  5808.,  6891.,  7062.,  7233.,  7404.,  7908.,  8088.,  8268.,  8448.,  7485.,  7674.,  7863.,  8052.,  8574.,  8772.,  8970.,  9168.,  4620.,  4752.,  4884.,  5016.,  5346.,  5484.,  5622.,  5760.,  6564.,  6720.,  6876.,  7032.,  7434.,  7596.,  7758.,  7920.,  9267.,  9510.,  9753.,  9996., 10572., 10824., 11076., 11328.,  9861., 10122., 10383., 10644., 11238., 11508., 11778., 12048.,  6012.,  6192.,  6372.,  6552.,  6930.,  7116.,  7302.,  7488.,  3208.,  3328.,  3448.,  3568.,  3804.,  3928.,  4052.,  4176.,  4258.,  4444.,  4630.,  4816.,  5152.,  5344.,  5536.,  5728.,  4510.,  4708.,  4906.,  5104.,  5452.,  5656.,  5860.,  6064.,  2520.,  2656.,  2792.,  2928.,  3148.,  3288.,  3428.,  3568.};
  const std::array<int, 4> in_shape = {{ 1, 5, 4, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x4x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4515.,  4614.,  4713.,  4812.,  5244.,  5352.,  5460.,  5568.,  5109.,  5226.,  5343.,  5460.,  5910.,  6036.,  6162.,  6288.,  6891.,  7062.,  7233.,  7404.,  7908.,  8088.,  8268.,  8448.,  7485.,  7674.,  7863.,  8052.,  8574.,  8772.,  8970.,  9168.,  9267.,  9510.,  9753.,  9996., 10572., 10824., 11076., 11328.,  9861., 10122., 10383., 10644., 11238., 11508., 11778., 12048.};
  const std::array<int, 4> in_shape = {{ 1, 5, 4, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x4x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1308.,  1456.,  1612.,  1776.,  2146.,  2368.,  2602.,  2848.,  2698.,  2944.,  3202.,  3472.,  1804.,  1968.,  2140.,  2320.,  2958.,  3192.,  3438.,  3696.,  4461.,  4812.,  5181.,  5568.,  5073.,  5460.,  5865.,  6288.,  3222.,  3480.,  3750.,  4032.,  4782.,  5112.,  5454.,  5808.,  6909.,  7404.,  7917.,  8448.,  7521.,  8052.,  8601.,  9168.,  4662.,  5016.,  5382.,  5760.,  6606.,  7032.,  7470.,  7920.,  9357.,  9996., 10653., 11328.,  9969., 10644., 11337., 12048.,  6102.,  6552.,  7014.,  7488.,  3276.,  3568.,  3868.,  4176.,  4378.,  4816.,  5266.,  5728.,  4642.,  5104.,  5578.,  6064.,  2620.,  2928.,  3244.,  3568.};
  const std::array<int, 4> in_shape = {{ 1, 5, 4, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x4x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4461.,  4812.,  5181.,  5568.,  5073.,  5460.,  5865.,  6288.,  6909.,  7404.,  7917.,  8448.,  7521.,  8052.,  8601.,  9168.,  9357.,  9996., 10653., 11328.,  9969., 10644., 11337., 12048.};
  const std::array<int, 4> in_shape = {{ 1, 5, 4, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2572.,  2616.,  2864.,  2912.,  3172.,  3224.,  3496.,  3552.,  4214.,  4292.,  4652.,  4736.,  5114.,  5204.,  5600.,  5696.,  5294.,  5396.,  5780.,  5888.,  6290.,  6404.,  6824.,  6944.,  3532.,  3608.,  3856.,  3936.,  4196.,  4280.,  4552.,  4640.,  5802.,  5916.,  6264.,  6384.,  6750.,  6876.,  7260.,  7392.,  8733.,  8922.,  9426.,  9624., 10155., 10362., 10920., 11136.,  9921., 10146., 10686., 10920., 11487., 11730., 12324., 12576.,  6282.,  6444.,  6792.,  6960.,  7326.,  7500.,  7884.,  8064.,  9354.,  9564., 10008., 10224., 10686., 10908., 11388., 11616., 13485., 13818., 14466., 14808., 15483., 15834., 16536., 16896., 14673., 15042., 15726., 16104., 16815., 17202., 17940., 18336.,  9066.,  9324.,  9768., 10032., 10494., 10764., 11244., 11520., 12906., 13212., 13752., 14064., 14622., 14940., 15516., 15840., 18237., 18714., 19506., 19992., 20811., 21306., 22152., 22656., 19425., 19938., 20766., 21288., 22143., 22674., 23556., 24096., 11850., 12204., 12744., 13104., 13662., 14028., 14604., 14976.,  6316.,  6552.,  6896.,  7136.,  7492.,  7736.,  8104.,  8352.,  8390.,  8756.,  9260.,  9632., 10154., 10532., 11072., 11456.,  8894.,  9284.,  9812., 10208., 10754., 11156., 11720., 12128.,  4972.,  5240.,  5584.,  5856.,  6212.,  6488.,  6856.,  7136.};
  const std::array<int, 4> in_shape = {{ 1, 5, 4, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8733.,  8922.,  9426.,  9624., 10155., 10362., 10920., 11136.,  9921., 10146., 10686., 10920., 11487., 11730., 12324., 12576., 13485., 13818., 14466., 14808., 15483., 15834., 16536., 16896., 14673., 15042., 15726., 16104., 16815., 17202., 17940., 18336., 18237., 18714., 19506., 19992., 20811., 21306., 22152., 22656., 19425., 19938., 20766., 21288., 22143., 22674., 23556., 24096.};
  const std::array<int, 4> in_shape = {{ 1, 5, 4, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x4x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5100.,  5144.,  5188.,  5232.,  5680.,  5728.,  5776.,  5824.,  6292.,  6344.,  6396.,  6448.,  6936.,  6992.,  7048.,  7104.,  8350.,  8428.,  8506.,  8584.,  9220.,  9304.,  9388.,  9472., 10138., 10228., 10318., 10408., 11104., 11200., 11296., 11392., 10486., 10588., 10690., 10792., 11452., 11560., 11668., 11776., 12466., 12580., 12694., 12808., 13528., 13648., 13768., 13888.,  6988.,  7064.,  7140.,  7216.,  7632.,  7712.,  7792.,  7872.,  8308.,  8392.,  8476.,  8560.,  9016.,  9104.,  9192.,  9280., 11490., 11604., 11718., 11832., 12408., 12528., 12648., 12768., 13374., 13500., 13626., 13752., 14388., 14520., 14652., 14784., 17277., 17466., 17655., 17844., 18654., 18852., 19050., 19248., 20103., 20310., 20517., 20724., 21624., 21840., 22056., 22272., 19617., 19842., 20067., 20292., 21138., 21372., 21606., 21840., 22731., 22974., 23217., 23460., 24396., 24648., 24900., 25152., 12402., 12564., 12726., 12888., 13416., 13584., 13752., 13920., 14478., 14652., 14826., 15000., 15588., 15768., 15948., 16128., 18498., 18708., 18918., 19128., 19800., 20016., 20232., 20448., 21150., 21372., 21594., 21816., 22548., 22776., 23004., 23232., 26637., 26970., 27303., 27636., 28590., 28932., 29274., 29616., 30615., 30966., 31317., 31668., 32712., 33072., 33432., 33792., 28977., 29346., 29715., 30084., 31074., 31452., 31830., 32208., 33243., 33630., 34017., 34404., 35484., 35880., 36276., 36672., 17874., 18132., 18390., 18648., 19272., 19536., 19800., 20064., 20718., 20988., 21258., 21528., 22212., 22488., 22764., 23040., 25506., 25812., 26118., 26424., 27192., 27504., 27816., 28128., 28926., 29244., 29562., 29880., 30708., 31032., 31356., 31680., 35997., 36474., 36951., 37428., 38526., 39012., 39498., 39984., 41127., 41622., 42117., 42612., 43800., 44304., 44808., 45312., 38337., 38850., 39363., 39876., 41010., 41532., 42054., 42576., 43755., 44286., 44817., 45348., 46572., 47112., 47652., 48192., 23346., 23700., 24054., 24408., 25128., 25488., 25848., 26208., 26958., 27324., 27690., 28056., 28836., 29208., 29580., 29952., 12396., 12632., 12868., 13104., 13552., 13792., 14032., 14272., 14740., 14984., 15228., 15472., 15960., 16208., 16456., 16704., 16414., 16780., 17146., 17512., 18148., 18520., 18892., 19264., 19930., 20308., 20686., 21064., 21760., 22144., 22528., 22912., 17398., 17788., 18178., 18568., 19228., 19624., 20020., 20416., 21106., 21508., 21910., 22312., 23032., 23440., 23848., 24256.,  9676.,  9944., 10212., 10480., 10896., 11168., 11440., 11712., 12148., 12424., 12700., 12976., 13432., 13712., 13992., 14272.};
  const std::array<int, 4> in_shape = {{ 1, 5, 4, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x4x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17277., 17466., 17655., 17844., 18654., 18852., 19050., 19248., 20103., 20310., 20517., 20724., 21624., 21840., 22056., 22272., 19617., 19842., 20067., 20292., 21138., 21372., 21606., 21840., 22731., 22974., 23217., 23460., 24396., 24648., 24900., 25152., 26637., 26970., 27303., 27636., 28590., 28932., 29274., 29616., 30615., 30966., 31317., 31668., 32712., 33072., 33432., 33792., 28977., 29346., 29715., 30084., 31074., 31452., 31830., 32208., 33243., 33630., 34017., 34404., 35484., 35880., 36276., 36672., 35997., 36474., 36951., 37428., 38526., 39012., 39498., 39984., 41127., 41622., 42117., 42612., 43800., 44304., 44808., 45312., 38337., 38850., 39363., 39876., 41010., 41532., 42054., 42576., 43755., 44286., 44817., 45348., 46572., 47112., 47652., 48192.};
  const std::array<int, 4> in_shape = {{ 1, 5, 4, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x5x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {128., 202., 241., 280., 184., 276., 411., 456., 501., 318., 441., 636., 681., 726., 453., 606., 861., 906., 951., 588., 320., 436., 457., 478., 280.};
  const std::array<int, 4> in_shape = {{ 1, 5, 5, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x5x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {411., 456., 501., 636., 681., 726., 861., 906., 951.};
  const std::array<int, 4> in_shape = {{ 1, 5, 5, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x5x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 240.,  256.,  377.,  404.,  449.,  482.,  521.,  560.,  340.,  368.,  513.,  552.,  759.,  822.,  840.,  912.,  921., 1002.,  579.,  636.,  813.,  882., 1164., 1272., 1245., 1362., 1326., 1452.,  819.,  906., 1113., 1212., 1569., 1722., 1650., 1812., 1731., 1902., 1059., 1176.,  564.,  640.,  755.,  872.,  791.,  914.,  827.,  956.,  472.,  560.};
  const std::array<int, 4> in_shape = {{ 1, 5, 5, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x5x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 759.,  822.,  840.,  912.,  921., 1002., 1164., 1272., 1245., 1362., 1326., 1452., 1569., 1722., 1650., 1812., 1731., 1902.};
  const std::array<int, 4> in_shape = {{ 1, 5, 5, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x5x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 464.,  480.,  496.,  512.,  727.,  754.,  781.,  808.,  865.,  898.,  931.,  964., 1003., 1042., 1081., 1120.,  652.,  680.,  708.,  736.,  987., 1026., 1065., 1104., 1455., 1518., 1581., 1644., 1608., 1680., 1752., 1824., 1761., 1842., 1923., 2004., 1101., 1158., 1215., 1272., 1557., 1626., 1695., 1764., 2220., 2328., 2436., 2544., 2373., 2490., 2607., 2724., 2526., 2652., 2778., 2904., 1551., 1638., 1725., 1812., 2127., 2226., 2325., 2424., 2985., 3138., 3291., 3444., 3138., 3300., 3462., 3624., 3291., 3462., 3633., 3804., 2001., 2118., 2235., 2352., 1052., 1128., 1204., 1280., 1393., 1510., 1627., 1744., 1459., 1582., 1705., 1828., 1525., 1654., 1783., 1912.,  856.,  944., 1032., 1120.};
  const std::array<int, 4> in_shape = {{ 1, 5, 5, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x5x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1455., 1518., 1581., 1644., 1608., 1680., 1752., 1824., 1761., 1842., 1923., 2004., 2220., 2328., 2436., 2544., 2373., 2490., 2607., 2724., 2526., 2652., 2778., 2904., 2985., 3138., 3291., 3444., 3138., 3300., 3462., 3624., 3291., 3462., 3633., 3804.};
  const std::array<int, 4> in_shape = {{ 1, 5, 5, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x5x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 428.,  512.,  682.,  808.,  826.,  964.,  970., 1120.,  636.,  736.,  966., 1104., 1437., 1644., 1599., 1824., 1761., 2004., 1110., 1272., 1566., 1764., 2247., 2544., 2409., 2724., 2571., 2904., 1590., 1812., 2166., 2424., 3057., 3444., 3219., 3624., 3381., 3804., 2070., 2352., 1100., 1280., 1474., 1744., 1546., 1828., 1618., 1912.,  924., 1120.};
  const std::array<int, 4> in_shape = {{ 1, 5, 5, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x5x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1437., 1644., 1599., 1824., 1761., 2004., 2247., 2544., 2409., 2724., 2571., 2904., 3057., 3444., 3219., 3624., 3381., 3804.};
  const std::array<int, 4> in_shape = {{ 1, 5, 5, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x5x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 828.,  856.,  992., 1024., 1316., 1364., 1562., 1616., 1592., 1652., 1862., 1928., 1868., 1940., 2162., 2240., 1220., 1272., 1416., 1472., 1860., 1932., 2130., 2208., 2757., 2874., 3162., 3288., 3063., 3198., 3504., 3648., 3369., 3522., 3846., 4008., 2112., 2220., 2430., 2544., 3000., 3132., 3390., 3528., 4287., 4494., 4872., 5088., 4593., 4818., 5214., 5448., 4899., 5142., 5556., 5808., 3012., 3180., 3450., 3624., 4140., 4332., 4650., 4848., 5817., 6114., 6582., 6888., 6123., 6438., 6924., 7248., 6429., 6762., 7266., 7608., 3912., 4140., 4470., 4704., 2052., 2200., 2408., 2560., 2720., 2948., 3254., 3488., 2852., 3092., 3410., 3656., 2984., 3236., 3566., 3824., 1676., 1848., 2064., 2240.};
  const std::array<int, 4> in_shape = {{ 1, 5, 5, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x5x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2757., 2874., 3162., 3288., 3063., 3198., 3504., 3648., 3369., 3522., 3846., 4008., 4287., 4494., 4872., 5088., 4593., 4818., 5214., 5448., 4899., 5142., 5556., 5808., 5817., 6114., 6582., 6888., 6123., 6438., 6924., 7248., 6429., 6762., 7266., 7608.};
  const std::array<int, 4> in_shape = {{ 1, 5, 5, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x5x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1628.,  1656.,  1684.,  1712.,  1952.,  1984.,  2016.,  2048.,  2584.,  2632.,  2680.,  2728.,  3070.,  3124.,  3178.,  3232.,  3124.,  3184.,  3244.,  3304.,  3658.,  3724.,  3790.,  3856.,  3664.,  3736.,  3808.,  3880.,  4246.,  4324.,  4402.,  4480.,  2388.,  2440.,  2492.,  2544.,  2776.,  2832.,  2888.,  2944.,  3648.,  3720.,  3792.,  3864.,  4182.,  4260.,  4338.,  4416.,  5397.,  5514.,  5631.,  5748.,  6198.,  6324.,  6450.,  6576.,  5991.,  6126.,  6261.,  6396.,  6864.,  7008.,  7152.,  7296.,  6585.,  6738.,  6891.,  7044.,  7530.,  7692.,  7854.,  8016.,  4116.,  4224.,  4332.,  4440.,  4746.,  4860.,  4974.,  5088.,  5868.,  6000.,  6132.,  6264.,  6642.,  6780.,  6918.,  7056.,  8367.,  8574.,  8781.,  8988.,  9528.,  9744.,  9960., 10176.,  8961.,  9186.,  9411.,  9636., 10194., 10428., 10662., 10896.,  9555.,  9798., 10041., 10284., 10860., 11112., 11364., 11616.,  5856.,  6024.,  6192.,  6360.,  6726.,  6900.,  7074.,  7248.,  8088.,  8280.,  8472.,  8664.,  9102.,  9300.,  9498.,  9696., 11337., 11634., 11931., 12228., 12858., 13164., 13470., 13776., 11931., 12246., 12561., 12876., 13524., 13848., 14172., 14496., 12525., 12858., 13191., 13524., 14190., 14532., 14874., 15216.,  7596.,  7824.,  8052.,  8280.,  8706.,  8940.,  9174.,  9408.,  3956.,  4104.,  4252.,  4400.,  4664.,  4816.,  4968.,  5120.,  5212.,  5440.,  5668.,  5896.,  6274.,  6508.,  6742.,  6976.,  5464.,  5704.,  5944.,  6184.,  6574.,  6820.,  7066.,  7312.,  5716.,  5968.,  6220.,  6472.,  6874.,  7132.,  7390.,  7648.,  3180.,  3352.,  3524.,  3696.,  3952.,  4128.,  4304.,  4480.};
  const std::array<int, 4> in_shape = {{ 1, 5, 5, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x5x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5397.,  5514.,  5631.,  5748.,  6198.,  6324.,  6450.,  6576.,  5991.,  6126.,  6261.,  6396.,  6864.,  7008.,  7152.,  7296.,  6585.,  6738.,  6891.,  7044.,  7530.,  7692.,  7854.,  8016.,  8367.,  8574.,  8781.,  8988.,  9528.,  9744.,  9960., 10176.,  8961.,  9186.,  9411.,  9636., 10194., 10428., 10662., 10896.,  9555.,  9798., 10041., 10284., 10860., 11112., 11364., 11616., 11337., 11634., 11931., 12228., 12858., 13164., 13470., 13776., 11931., 12246., 12561., 12876., 13524., 13848., 14172., 14496., 12525., 12858., 13191., 13524., 14190., 14532., 14874., 15216.};
  const std::array<int, 4> in_shape = {{ 1, 5, 5, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x5x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1556.,  1712.,  1876.,  2048.,  2494.,  2728.,  2974.,  3232.,  3046.,  3304.,  3574.,  3856.,  3598.,  3880.,  4174.,  4480.,  2356.,  2544.,  2740.,  2944.,  3606.,  3864.,  4134.,  4416.,  5361.,  5748.,  6153.,  6576.,  5973.,  6396.,  6837.,  7296.,  6585.,  7044.,  7521.,  8016.,  4134.,  4440.,  4758.,  5088.,  5886.,  6264.,  6654.,  7056.,  8421.,  8988.,  9573., 10176.,  9033.,  9636., 10257., 10896.,  9645., 10284., 10941., 11616.,  5934.,  6360.,  6798.,  7248.,  8166.,  8664.,  9174.,  9696., 11481., 12228., 12993., 13776., 12093., 12876., 13677., 14496., 12705., 13524., 14361., 15216.,  7734.,  8280.,  8838.,  9408.,  4052.,  4400.,  4756.,  5120.,  5374.,  5896.,  6430.,  6976.,  5638.,  6184.,  6742.,  7312.,  5902.,  6472.,  7054.,  7648.,  3316.,  3696.,  4084.,  4480.};
  const std::array<int, 4> in_shape = {{ 1, 5, 5, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x5x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5361.,  5748.,  6153.,  6576.,  5973.,  6396.,  6837.,  7296.,  6585.,  7044.,  7521.,  8016.,  8421.,  8988.,  9573., 10176.,  9033.,  9636., 10257., 10896.,  9645., 10284., 10941., 11616., 11481., 12228., 12993., 13776., 12093., 12876., 13677., 14496., 12705., 13524., 14361., 15216.};
  const std::array<int, 4> in_shape = {{ 1, 5, 5, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x5x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3060.,  3112.,  3368.,  3424.,  3692.,  3752.,  4032.,  4096.,  4898.,  4988.,  5360.,  5456.,  5846.,  5948.,  6356.,  6464.,  5978.,  6092.,  6488.,  6608.,  7022.,  7148.,  7580.,  7712.,  7058.,  7196.,  7616.,  7760.,  8198.,  8348.,  8804.,  8960.,  4612.,  4712.,  4984.,  5088.,  5372.,  5480.,  5776.,  5888.,  7074.,  7212.,  7584.,  7728.,  8118.,  8268.,  8676.,  8832., 10497., 10722., 11262., 11496., 12063., 12306., 12900., 13152., 11685., 11946., 12522., 12792., 13395., 13674., 14304., 14592., 12873., 13170., 13782., 14088., 14727., 15042., 15708., 16032.,  8058.,  8268.,  8664.,  8880.,  9294.,  9516.,  9948., 10176., 11514., 11772., 12264., 12528., 13038., 13308., 13836., 14112., 16437., 16842., 17562., 17976., 18723., 19146., 19920., 20352., 17625., 18066., 18822., 19272., 20055., 20514., 21324., 21792., 18813., 19290., 20082., 20568., 21387., 21882., 22728., 23232., 11538., 11868., 12384., 12720., 13254., 13596., 14148., 14496., 15954., 16332., 16944., 17328., 17958., 18348., 18996., 19392., 22377., 22962., 23862., 24456., 25383., 25986., 26940., 27552., 23565., 24186., 25122., 25752., 26715., 27354., 28344., 28992., 24753., 25410., 26382., 27048., 28047., 28722., 29748., 30432., 15018., 15468., 16104., 16560., 17214., 17676., 18348., 18816.,  7812.,  8104.,  8504.,  8800.,  9212.,  9512.,  9936., 10240., 10298., 10748., 11336., 11792., 12398., 12860., 13484., 13952., 10802., 11276., 11888., 12368., 12998., 13484., 14132., 14624., 11306., 11804., 12440., 12944., 13598., 14108., 14780., 15296.,  6292.,  6632.,  7048.,  7392.,  7820.,  8168.,  8608.,  8960.};
  const std::array<int, 4> in_shape = {{ 1, 5, 5, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x5x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10497., 10722., 11262., 11496., 12063., 12306., 12900., 13152., 11685., 11946., 12522., 12792., 13395., 13674., 14304., 14592., 12873., 13170., 13782., 14088., 14727., 15042., 15708., 16032., 16437., 16842., 17562., 17976., 18723., 19146., 19920., 20352., 17625., 18066., 18822., 19272., 20055., 20514., 21324., 21792., 18813., 19290., 20082., 20568., 21387., 21882., 22728., 23232., 22377., 22962., 23862., 24456., 25383., 25986., 26940., 27552., 23565., 24186., 25122., 25752., 26715., 27354., 28344., 28992., 24753., 25410., 26382., 27048., 28047., 28722., 29748., 30432.};
  const std::array<int, 4> in_shape = {{ 1, 5, 5, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x5x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6068.,  6120.,  6172.,  6224.,  6680.,  6736.,  6792.,  6848.,  7324.,  7384.,  7444.,  7504.,  8000.,  8064.,  8128.,  8192.,  9706.,  9796.,  9886.,  9976., 10624., 10720., 10816., 10912., 11590., 11692., 11794., 11896., 12604., 12712., 12820., 12928., 11842., 11956., 12070., 12184., 12856., 12976., 13096., 13216., 13918., 14044., 14170., 14296., 15028., 15160., 15292., 15424., 13978., 14116., 14254., 14392., 15088., 15232., 15376., 15520., 16246., 16396., 16546., 16696., 17452., 17608., 17764., 17920.,  9124.,  9224.,  9324.,  9424.,  9864.,  9968., 10072., 10176., 10636., 10744., 10852., 10960., 11440., 11552., 11664., 11776., 14010., 14148., 14286., 14424., 15024., 15168., 15312., 15456., 16086., 16236., 16386., 16536., 17196., 17352., 17508., 17664., 20769., 20994., 21219., 21444., 22290., 22524., 22758., 22992., 23883., 24126., 24369., 24612., 25548., 25800., 26052., 26304., 23109., 23370., 23631., 23892., 24774., 25044., 25314., 25584., 26511., 26790., 27069., 27348., 28320., 28608., 28896., 29184., 25449., 25746., 26043., 26340., 27258., 27564., 27870., 28176., 29139., 29454., 29769., 30084., 31092., 31416., 31740., 32064., 15906., 16116., 16326., 16536., 17112., 17328., 17544., 17760., 18366., 18588., 18810., 19032., 19668., 19896., 20124., 20352., 22770., 23028., 23286., 23544., 24264., 24528., 24792., 25056., 25806., 26076., 26346., 26616., 27396., 27672., 27948., 28224., 32469., 32874., 33279., 33684., 34710., 35124., 35538., 35952., 37023., 37446., 37869., 38292., 39408., 39840., 40272., 40704., 34809., 35250., 35691., 36132., 37194., 37644., 38094., 38544., 39651., 40110., 40569., 41028., 42180., 42648., 43116., 43584., 37149., 37626., 38103., 38580., 39678., 40164., 40650., 41136., 42279., 42774., 43269., 43764., 44952., 45456., 45960., 46464., 22746., 23076., 23406., 23736., 24432., 24768., 25104., 25440., 26166., 26508., 26850., 27192., 27948., 28296., 28644., 28992., 31530., 31908., 32286., 32664., 33504., 33888., 34272., 34656., 35526., 35916., 36306., 36696., 37596., 37992., 38388., 38784., 44169., 44754., 45339., 45924., 47130., 47724., 48318., 48912., 50163., 50766., 51369., 51972., 53268., 53880., 54492., 55104., 46509., 47130., 47751., 48372., 49614., 50244., 50874., 51504., 52791., 53430., 54069., 54708., 56040., 56688., 57336., 57984., 48849., 49506., 50163., 50820., 52098., 52764., 53430., 54096., 55419., 56094., 56769., 57444., 58812., 59496., 60180., 60864., 29586., 30036., 30486., 30936., 31752., 32208., 32664., 33120., 33966., 34428., 34890., 35352., 36228., 36696., 37164., 37632., 15332., 15624., 15916., 16208., 16712., 17008., 17304., 17600., 18124., 18424., 18724., 19024., 19568., 19872., 20176., 20480., 20146., 20596., 21046., 21496., 22216., 22672., 23128., 23584., 24334., 24796., 25258., 25720., 26500., 26968., 27436., 27904., 21130., 21604., 22078., 22552., 23296., 23776., 24256., 24736., 25510., 25996., 26482., 26968., 27772., 28264., 28756., 29248., 22114., 22612., 23110., 23608., 24376., 24880., 25384., 25888., 26686., 27196., 27706., 28216., 29044., 29560., 30076., 30592., 12244., 12584., 12924., 13264., 13752., 14096., 14440., 14784., 15292., 15640., 15988., 16336., 16864., 17216., 17568., 17920.};
  const std::array<int, 4> in_shape = {{ 1, 5, 5, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x5x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20769., 20994., 21219., 21444., 22290., 22524., 22758., 22992., 23883., 24126., 24369., 24612., 25548., 25800., 26052., 26304., 23109., 23370., 23631., 23892., 24774., 25044., 25314., 25584., 26511., 26790., 27069., 27348., 28320., 28608., 28896., 29184., 25449., 25746., 26043., 26340., 27258., 27564., 27870., 28176., 29139., 29454., 29769., 30084., 31092., 31416., 31740., 32064., 32469., 32874., 33279., 33684., 34710., 35124., 35538., 35952., 37023., 37446., 37869., 38292., 39408., 39840., 40272., 40704., 34809., 35250., 35691., 36132., 37194., 37644., 38094., 38544., 39651., 40110., 40569., 41028., 42180., 42648., 43116., 43584., 37149., 37626., 38103., 38580., 39678., 40164., 40650., 41136., 42279., 42774., 43269., 43764., 44952., 45456., 45960., 46464., 44169., 44754., 45339., 45924., 47130., 47724., 48318., 48912., 50163., 50766., 51369., 51972., 53268., 53880., 54492., 55104., 46509., 47130., 47751., 48372., 49614., 50244., 50874., 51504., 52791., 53430., 54069., 54708., 56040., 56688., 57336., 57984., 48849., 49506., 50163., 50820., 52098., 52764., 53430., 54096., 55419., 56094., 56769., 57444., 58812., 59496., 60180., 60864.};
  const std::array<int, 4> in_shape = {{ 1, 5, 5, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 145.,  226.,  265.,  304.,  343.,  223.,  321.,  474.,  519.,  564.,  609.,  384.,  519.,  744.,  789.,  834.,  879.,  546.,  717., 1014., 1059., 1104., 1149.,  708.,  379.,  514.,  535.,  556.,  577.,  337.};
  const std::array<int, 4> in_shape = {{ 1, 5, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 474.,  519.,  564.,  609.,  744.,  789.,  834.,  879., 1014., 1059., 1104., 1149.};
  const std::array<int, 4> in_shape = {{ 1, 5, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 272.,  290.,  422.,  452.,  494.,  530.,  566.,  608.,  638.,  686.,  412.,  446.,  597.,  642.,  876.,  948.,  957., 1038., 1038., 1128., 1119., 1218.,  699.,  768.,  957., 1038., 1362., 1488., 1443., 1578., 1524., 1668., 1605., 1758.,  987., 1092., 1317., 1434., 1848., 2028., 1929., 2118., 2010., 2208., 2091., 2298., 1275., 1416.,  668.,  758.,  890., 1028.,  926., 1070.,  962., 1112.,  998., 1154.,  568.,  674.};
  const std::array<int, 4> in_shape = {{ 1, 5, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 876.,  948.,  957., 1038., 1038., 1128., 1119., 1218., 1362., 1488., 1443., 1578., 1524., 1668., 1605., 1758., 1848., 2028., 1929., 2118., 2010., 2208., 2091., 2298.};
  const std::array<int, 4> in_shape = {{ 1, 5, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 526.,  544.,  562.,  580.,  814.,  844.,  874.,  904.,  952.,  988., 1024., 1060., 1090., 1132., 1174., 1216., 1228., 1276., 1324., 1372.,  790.,  824.,  858.,  892., 1149., 1194., 1239., 1284., 1680., 1752., 1824., 1896., 1833., 1914., 1995., 2076., 1986., 2076., 2166., 2256., 2139., 2238., 2337., 2436., 1329., 1398., 1467., 1536., 1833., 1914., 1995., 2076., 2598., 2724., 2850., 2976., 2751., 2886., 3021., 3156., 2904., 3048., 3192., 3336., 3057., 3210., 3363., 3516., 1869., 1974., 2079., 2184., 2517., 2634., 2751., 2868., 3516., 3696., 3876., 4056., 3669., 3858., 4047., 4236., 3822., 4020., 4218., 4416., 3975., 4182., 4389., 4596., 2409., 2550., 2691., 2832., 1246., 1336., 1426., 1516., 1642., 1780., 1918., 2056., 1708., 1852., 1996., 2140., 1774., 1924., 2074., 2224., 1840., 1996., 2152., 2308., 1030., 1136., 1242., 1348.};
  const std::array<int, 4> in_shape = {{ 1, 5, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1680., 1752., 1824., 1896., 1833., 1914., 1995., 2076., 1986., 2076., 2166., 2256., 2139., 2238., 2337., 2436., 2598., 2724., 2850., 2976., 2751., 2886., 3021., 3156., 2904., 3048., 3192., 3336., 3057., 3210., 3363., 3516., 3516., 3696., 3876., 4056., 3669., 3858., 4047., 4236., 3822., 4020., 4218., 4416., 3975., 4182., 4389., 4596.};
  const std::array<int, 4> in_shape = {{ 1, 5, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 492.,  580.,  772.,  904.,  916., 1060., 1060., 1216., 1204., 1372.,  780.,  892., 1134., 1284., 1671., 1896., 1833., 2076., 1995., 2256., 2157., 2436., 1350., 1536., 1854., 2076., 2643., 2976., 2805., 3156., 2967., 3336., 3129., 3516., 1926., 2184., 2574., 2868., 3615., 4056., 3777., 4236., 3939., 4416., 4101., 4596., 2502., 2832., 1308., 1516., 1744., 2056., 1816., 2140., 1888., 2224., 1960., 2308., 1116., 1348.};
  const std::array<int, 4> in_shape = {{ 1, 5, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1671., 1896., 1833., 2076., 1995., 2256., 2157., 2436., 2643., 2976., 2805., 3156., 2967., 3336., 3129., 3516., 3615., 4056., 3777., 4236., 3939., 4416., 4101., 4596.};
  const std::array<int, 4> in_shape = {{ 1, 5, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 952.,  984., 1124., 1160., 1490., 1544., 1748., 1808., 1766., 1832., 2048., 2120., 2042., 2120., 2348., 2432., 2318., 2408., 2648., 2744., 1496., 1560., 1716., 1784., 2184., 2268., 2478., 2568., 3207., 3342., 3648., 3792., 3513., 3666., 3990., 4152., 3819., 3990., 4332., 4512., 4125., 4314., 4674., 4872., 2568., 2700., 2934., 3072., 3552., 3708., 3990., 4152., 5043., 5286., 5700., 5952., 5349., 5610., 6042., 6312., 5655., 5934., 6384., 6672., 5961., 6258., 6726., 7032., 3648., 3852., 4158., 4368., 4920., 5148., 5502., 5736., 6879., 7230., 7752., 8112., 7185., 7554., 8094., 8472., 7491., 7878., 8436., 8832., 7797., 8202., 8778., 9192., 4728., 5004., 5382., 5664., 2440., 2616., 2852., 3032., 3218., 3488., 3836., 4112., 3350., 3632., 3992., 4280., 3482., 3776., 4148., 4448., 3614., 3920., 4304., 4616., 2024., 2232., 2484., 2696.};
  const std::array<int, 4> in_shape = {{ 1, 5, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3207., 3342., 3648., 3792., 3513., 3666., 3990., 4152., 3819., 3990., 4332., 4512., 4125., 4314., 4674., 4872., 5043., 5286., 5700., 5952., 5349., 5610., 6042., 6312., 5655., 5934., 6384., 6672., 5961., 6258., 6726., 7032., 6879., 7230., 7752., 8112., 7185., 7554., 8094., 8472., 7491., 7878., 8436., 8832., 7797., 8202., 8778., 9192.};
  const std::array<int, 4> in_shape = {{ 1, 5, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1872.,  1904.,  1936.,  1968.,  2212.,  2248.,  2284.,  2320.,  2926.,  2980.,  3034.,  3088.,  3436.,  3496.,  3556.,  3616.,  3466.,  3532.,  3598.,  3664.,  4024.,  4096.,  4168.,  4240.,  4006.,  4084.,  4162.,  4240.,  4612.,  4696.,  4780.,  4864.,  4546.,  4636.,  4726.,  4816.,  5200.,  5296.,  5392.,  5488.,  2928.,  2992.,  3056.,  3120.,  3364.,  3432.,  3500.,  3568.,  4284.,  4368.,  4452.,  4536.,  4866.,  4956.,  5046.,  5136.,  6279.,  6414.,  6549.,  6684.,  7152.,  7296.,  7440.,  7584.,  6873.,  7026.,  7179.,  7332.,  7818.,  7980.,  8142.,  8304.,  7467.,  7638.,  7809.,  7980.,  8484.,  8664.,  8844.,  9024.,  8061.,  8250.,  8439.,  8628.,  9150.,  9348.,  9546.,  9744.,  5004.,  5136.,  5268.,  5400.,  5730.,  5868.,  6006.,  6144.,  6948.,  7104.,  7260.,  7416.,  7818.,  7980.,  8142.,  8304.,  9843., 10086., 10329., 10572., 11148., 11400., 11652., 11904., 10437., 10698., 10959., 11220., 11814., 12084., 12354., 12624., 11031., 11310., 11589., 11868., 12480., 12768., 13056., 13344., 11625., 11922., 12219., 12516., 13146., 13452., 13758., 14064.,  7092.,  7296.,  7500.,  7704.,  8106.,  8316.,  8526.,  8736.,  9612.,  9840., 10068., 10296., 10770., 11004., 11238., 11472., 13407., 13758., 14109., 14460., 15144., 15504., 15864., 16224., 14001., 14370., 14739., 15108., 15810., 16188., 16566., 16944., 14595., 14982., 15369., 15756., 16476., 16872., 17268., 17664., 15189., 15594., 15999., 16404., 17142., 17556., 17970., 18384.,  9180.,  9456.,  9732., 10008., 10482., 10764., 11046., 11328.,  4704.,  4880.,  5056.,  5232.,  5524.,  5704.,  5884.,  6064.,  6166.,  6436.,  6706.,  6976.,  7396.,  7672.,  7948.,  8224.,  6418.,  6700.,  6982.,  7264.,  7696.,  7984.,  8272.,  8560.,  6670.,  6964.,  7258.,  7552.,  7996.,  8296.,  8596.,  8896.,  6922.,  7228.,  7534.,  7840.,  8296.,  8608.,  8920.,  9232.,  3840.,  4048.,  4256.,  4464.,  4756.,  4968.,  5180.,  5392.};
  const std::array<int, 4> in_shape = {{ 1, 5, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6279.,  6414.,  6549.,  6684.,  7152.,  7296.,  7440.,  7584.,  6873.,  7026.,  7179.,  7332.,  7818.,  7980.,  8142.,  8304.,  7467.,  7638.,  7809.,  7980.,  8484.,  8664.,  8844.,  9024.,  8061.,  8250.,  8439.,  8628.,  9150.,  9348.,  9546.,  9744.,  9843., 10086., 10329., 10572., 11148., 11400., 11652., 11904., 10437., 10698., 10959., 11220., 11814., 12084., 12354., 12624., 11031., 11310., 11589., 11868., 12480., 12768., 13056., 13344., 11625., 11922., 12219., 12516., 13146., 13452., 13758., 14064., 13407., 13758., 14109., 14460., 15144., 15504., 15864., 16224., 14001., 14370., 14739., 15108., 15810., 16188., 16566., 16944., 14595., 14982., 15369., 15756., 16476., 16872., 17268., 17664., 15189., 15594., 15999., 16404., 17142., 17556., 17970., 18384.};
  const std::array<int, 4> in_shape = {{ 1, 5, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1804.,  1968.,  2140.,  2320.,  2842.,  3088.,  3346.,  3616.,  3394.,  3664.,  3946.,  4240.,  3946.,  4240.,  4546.,  4864.,  4498.,  4816.,  5146.,  5488.,  2908.,  3120.,  3340.,  3568.,  4254.,  4536.,  4830.,  5136.,  6261.,  6684.,  7125.,  7584.,  6873.,  7332.,  7809.,  8304.,  7485.,  7980.,  8493.,  9024.,  8097.,  8628.,  9177.,  9744.,  5046.,  5400.,  5766.,  6144.,  6990.,  7416.,  7854.,  8304.,  9933., 10572., 11229., 11904., 10545., 11220., 11913., 12624., 11157., 11868., 12597., 13344., 11769., 12516., 13281., 14064.,  7206.,  7704.,  8214.,  8736.,  9726., 10296., 10878., 11472., 13605., 14460., 15333., 16224., 14217., 15108., 16017., 16944., 14829., 15756., 16701., 17664., 15441., 16404., 17385., 18384.,  9366., 10008., 10662., 11328.,  4828.,  5232.,  5644.,  6064.,  6370.,  6976.,  7594.,  8224.,  6634.,  7264.,  7906.,  8560.,  6898.,  7552.,  8218.,  8896.,  7162.,  7840.,  8530.,  9232.,  4012.,  4464.,  4924.,  5392.};
  const std::array<int, 4> in_shape = {{ 1, 5, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6261.,  6684.,  7125.,  7584.,  6873.,  7332.,  7809.,  8304.,  7485.,  7980.,  8493.,  9024.,  8097.,  8628.,  9177.,  9744.,  9933., 10572., 11229., 11904., 10545., 11220., 11913., 12624., 11157., 11868., 12597., 13344., 11769., 12516., 13281., 14064., 13605., 14460., 15333., 16224., 14217., 15108., 16017., 16944., 14829., 15756., 16701., 17664., 15441., 16404., 17385., 18384.};
  const std::array<int, 4> in_shape = {{ 1, 5, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3548.,  3608.,  3872.,  3936.,  4212.,  4280.,  4568.,  4640.,  5582.,  5684.,  6068.,  6176.,  6578.,  6692.,  7112.,  7232.,  6662.,  6788.,  7196.,  7328.,  7754.,  7892.,  8336.,  8480.,  7742.,  7892.,  8324.,  8480.,  8930.,  9092.,  9560.,  9728.,  8822.,  8996.,  9452.,  9632., 10106., 10292., 10784., 10976.,  5692.,  5816.,  6112.,  6240.,  6548.,  6680.,  7000.,  7136.,  8346.,  8508.,  8904.,  9072.,  9486.,  9660., 10092., 10272., 12261., 12522., 13098., 13368., 13971., 14250., 14880., 15168., 13449., 13746., 14358., 14664., 15303., 15618., 16284., 16608., 14637., 14970., 15618., 15960., 16635., 16986., 17688., 18048., 15825., 16194., 16878., 17256., 17967., 18354., 19092., 19488.,  9834., 10092., 10536., 10800., 11262., 11532., 12012., 12288., 13674., 13980., 14520., 14832., 15390., 15708., 16284., 16608., 19389., 19866., 20658., 21144., 21963., 22458., 23304., 23808., 20577., 21090., 21918., 22440., 23295., 23826., 24708., 25248., 21765., 22314., 23178., 23736., 24627., 25194., 26112., 26688., 22953., 23538., 24438., 25032., 25959., 26562., 27516., 28128., 14010., 14412., 15000., 15408., 16014., 16428., 17052., 17472., 19002., 19452., 20136., 20592., 21294., 21756., 22476., 22944., 26517., 27210., 28218., 28920., 29955., 30666., 31728., 32448., 27705., 28434., 29478., 30216., 31287., 32034., 33132., 33888., 28893., 29658., 30738., 31512., 32619., 33402., 34536., 35328., 30081., 30882., 31998., 32808., 33951., 34770., 35940., 36768., 18186., 18732., 19464., 20016., 20766., 21324., 22092., 22656.,  9308.,  9656., 10112., 10464., 10932., 11288., 11768., 12128., 12206., 12740., 13412., 13952., 14642., 15188., 15896., 16448., 12710., 13268., 13964., 14528., 15242., 15812., 16544., 17120., 13214., 13796., 14516., 15104., 15842., 16436., 17192., 17792., 13718., 14324., 15068., 15680., 16442., 17060., 17840., 18464.,  7612.,  8024.,  8512.,  8928.,  9428.,  9848., 10360., 10784.};
  const std::array<int, 4> in_shape = {{ 1, 5, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12261., 12522., 13098., 13368., 13971., 14250., 14880., 15168., 13449., 13746., 14358., 14664., 15303., 15618., 16284., 16608., 14637., 14970., 15618., 15960., 16635., 16986., 17688., 18048., 15825., 16194., 16878., 17256., 17967., 18354., 19092., 19488., 19389., 19866., 20658., 21144., 21963., 22458., 23304., 23808., 20577., 21090., 21918., 22440., 23295., 23826., 24708., 25248., 21765., 22314., 23178., 23736., 24627., 25194., 26112., 26688., 22953., 23538., 24438., 25032., 25959., 26562., 27516., 28128., 26517., 27210., 28218., 28920., 29955., 30666., 31728., 32448., 27705., 28434., 29478., 30216., 31287., 32034., 33132., 33888., 28893., 29658., 30738., 31512., 32619., 33402., 34536., 35328., 30081., 30882., 31998., 32808., 33951., 34770., 35940., 36768.};
  const std::array<int, 4> in_shape = {{ 1, 5, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x5x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3324.,  3384.,  3444.,  3504.,  3840.,  3904.,  3968.,  4032.,  4388.,  4456.,  4524.,  4592.,  4968.,  5040.,  5112.,  5184.,  6838.,  6940.,  7042.,  7144.,  7676.,  7784.,  7892.,  8000.,  8562.,  8676.,  8790.,  8904.,  9496.,  9616.,  9736.,  9856.,  8462.,  8588.,  8714.,  8840.,  9396.,  9528.,  9660.,  9792., 10378., 10516., 10654., 10792., 11408., 11552., 11696., 11840., 10086., 10236., 10386., 10536., 11116., 11272., 11428., 11584., 12194., 12356., 12518., 12680., 13320., 13488., 13656., 13824., 11710., 11884., 12058., 12232., 12836., 13016., 13196., 13376., 14010., 14196., 14382., 14568., 15232., 15424., 15616., 15808., 11260., 11384., 11508., 11632., 12096., 12224., 12352., 12480., 12964., 13096., 13228., 13360., 13864., 14000., 14136., 14272.,  9746.,  9908., 10070., 10232., 10728., 10896., 11064., 11232., 11758., 11932., 12106., 12280., 12836., 13016., 13196., 13376., 16965., 17226., 17487., 17748., 18502., 18772., 19042., 19312., 20111., 20390., 20669., 20948., 21792., 22080., 22368., 22656., 18793., 19090., 19387., 19684., 20474., 20780., 21086., 21392., 22227., 22542., 22857., 23172., 24052., 24376., 24700., 25024., 20621., 20954., 21287., 21620., 22446., 22788., 23130., 23472., 24343., 24694., 25045., 25396., 26312., 26672., 27032., 27392., 22449., 22818., 23187., 23556., 24418., 24796., 25174., 25552., 26459., 26846., 27233., 27620., 28572., 28968., 29364., 29760., 19410., 19668., 19926., 20184., 20808., 21072., 21336., 21600., 22254., 22524., 22794., 23064., 23748., 24024., 24300., 24576., 17186., 17492., 17798., 18104., 18744., 19056., 19368., 19680., 20350., 20668., 20986., 21304., 22004., 22328., 22652., 22976., 27933., 28410., 28887., 29364., 30334., 30820., 31306., 31792., 32807., 33302., 33797., 34292., 35352., 35856., 36360., 36864., 29761., 30274., 30787., 31300., 32306., 32828., 33350., 33872., 34923., 35454., 35985., 36516., 37612., 38152., 38692., 39232., 31589., 32138., 32687., 33236., 34278., 34836., 35394., 35952., 37039., 37606., 38173., 38740., 39872., 40448., 41024., 41600., 33417., 34002., 34587., 35172., 36250., 36844., 37438., 38032., 39155., 39758., 40361., 40964., 42132., 42744., 43356., 43968., 27618., 28020., 28422., 28824., 29592., 30000., 30408., 30816., 31614., 32028., 32442., 32856., 33684., 34104., 34524., 34944., 24626., 25076., 25526., 25976., 26760., 27216., 27672., 28128., 28942., 29404., 29866., 30328., 31172., 31640., 32108., 32576., 38901., 39594., 40287., 40980., 42166., 42868., 43570., 44272., 45503., 46214., 46925., 47636., 48912., 49632., 50352., 51072., 40729., 41458., 42187., 42916., 44138., 44876., 45614., 46352., 47619., 48366., 49113., 49860., 51172., 51928., 52684., 53440., 42557., 43322., 44087., 44852., 46110., 46884., 47658., 48432., 49735., 50518., 51301., 52084., 53432., 54224., 55016., 55808., 44385., 45186., 45987., 46788., 48082., 48892., 49702., 50512., 51851., 52670., 53489., 54308., 55692., 56520., 57348., 58176., 35826., 36372., 36918., 37464., 38376., 38928., 39480., 40032., 40974., 41532., 42090., 42648., 43620., 44184., 44748., 45312., 18268., 18616., 18964., 19312., 19872., 20224., 20576., 20928., 21508., 21864., 22220., 22576., 23176., 23536., 23896., 24256., 23878., 24412., 24946., 25480., 26284., 26824., 27364., 27904., 28738., 29284., 29830., 30376., 31240., 31792., 32344., 32896., 24862., 25420., 25978., 26536., 27364., 27928., 28492., 29056., 29914., 30484., 31054., 31624., 32512., 33088., 33664., 34240., 25846., 26428., 27010., 27592., 28444., 29032., 29620., 30208., 31090., 31684., 32278., 32872., 33784., 34384., 34984., 35584., 26830., 27436., 28042., 28648., 29524., 30136., 30748., 31360., 32266., 32884., 33502., 34120., 35056., 35680., 36304., 36928., 14812., 15224., 15636., 16048., 16608., 17024., 17440., 17856., 18436., 18856., 19276., 19696., 20296., 20720., 21144., 21568.};
  const std::array<int, 4> in_shape = {{ 1, 5, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x5x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16965., 17226., 17487., 17748., 18502., 18772., 19042., 19312., 20111., 20390., 20669., 20948., 21792., 22080., 22368., 22656., 18793., 19090., 19387., 19684., 20474., 20780., 21086., 21392., 22227., 22542., 22857., 23172., 24052., 24376., 24700., 25024., 20621., 20954., 21287., 21620., 22446., 22788., 23130., 23472., 24343., 24694., 25045., 25396., 26312., 26672., 27032., 27392., 22449., 22818., 23187., 23556., 24418., 24796., 25174., 25552., 26459., 26846., 27233., 27620., 28572., 28968., 29364., 29760., 27933., 28410., 28887., 29364., 30334., 30820., 31306., 31792., 32807., 33302., 33797., 34292., 35352., 35856., 36360., 36864., 29761., 30274., 30787., 31300., 32306., 32828., 33350., 33872., 34923., 35454., 35985., 36516., 37612., 38152., 38692., 39232., 31589., 32138., 32687., 33236., 34278., 34836., 35394., 35952., 37039., 37606., 38173., 38740., 39872., 40448., 41024., 41600., 33417., 34002., 34587., 35172., 36250., 36844., 37438., 38032., 39155., 39758., 40361., 40964., 42132., 42744., 43356., 43968., 38901., 39594., 40287., 40980., 42166., 42868., 43570., 44272., 45503., 46214., 46925., 47636., 48912., 49632., 50352., 51072., 40729., 41458., 42187., 42916., 44138., 44876., 45614., 46352., 47619., 48366., 49113., 49860., 51172., 51928., 52684., 53440., 42557., 43322., 44087., 44852., 46110., 46884., 47658., 48432., 49735., 50518., 51301., 52084., 53432., 54224., 55016., 55808., 44385., 45186., 45987., 46788., 48082., 48892., 49702., 50512., 51851., 52670., 53489., 54308., 55692., 56520., 57348., 58176.};
  const std::array<int, 4> in_shape = {{ 1, 5, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x4x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {111., 178., 217., 145., 231., 348., 393., 252., 363., 528., 573., 360., 495., 708., 753., 468., 627., 888., 933., 576., 325., 442., 463., 271.};
  const std::array<int, 4> in_shape = {{ 1, 6, 4, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x4x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {348., 393., 528., 573., 708., 753., 888., 933.};
  const std::array<int, 4> in_shape = {{ 1, 6, 4, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x4x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 208.,  222.,  332.,  356.,  404.,  434.,  268.,  290.,  429.,  462.,  642.,  696.,  723.,  786.,  459.,  504.,  669.,  726.,  966., 1056., 1047., 1146.,  651.,  720.,  909.,  990., 1290., 1416., 1371., 1506.,  843.,  936., 1149., 1254., 1614., 1776., 1695., 1866., 1035., 1152.,  572.,  650.,  764.,  884.,  800.,  926.,  456.,  542.};
  const std::array<int, 4> in_shape = {{ 1, 6, 4, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x4x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 642.,  696.,  723.,  786.,  966., 1056., 1047., 1146., 1290., 1416., 1371., 1506., 1614., 1776., 1695., 1866.};
  const std::array<int, 4> in_shape = {{ 1, 6, 4, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x4x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 402.,  416.,  430.,  444.,  640.,  664.,  688.,  712.,  778.,  808.,  838.,  868.,  514.,  536.,  558.,  580.,  825.,  858.,  891.,  924., 1230., 1284., 1338., 1392., 1383., 1446., 1509., 1572.,  873.,  918.,  963., 1008., 1281., 1338., 1395., 1452., 1842., 1932., 2022., 2112., 1995., 2094., 2193., 2292., 1233., 1302., 1371., 1440., 1737., 1818., 1899., 1980., 2454., 2580., 2706., 2832., 2607., 2742., 2877., 3012., 1593., 1686., 1779., 1872., 2193., 2298., 2403., 2508., 3066., 3228., 3390., 3552., 3219., 3390., 3561., 3732., 1953., 2070., 2187., 2304., 1066., 1144., 1222., 1300., 1408., 1528., 1648., 1768., 1474., 1600., 1726., 1852.,  826.,  912.,  998., 1084.};
  const std::array<int, 4> in_shape = {{ 1, 6, 4, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x4x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1230., 1284., 1338., 1392., 1383., 1446., 1509., 1572., 1842., 1932., 2022., 2112., 1995., 2094., 2193., 2292., 2454., 2580., 2706., 2832., 2607., 2742., 2877., 3012., 3066., 3228., 3390., 3552., 3219., 3390., 3561., 3732.};
  const std::array<int, 4> in_shape = {{ 1, 6, 4, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x4x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 364.,  444.,  592.,  712.,  736.,  868.,  492.,  580.,  798.,  924., 1203., 1392., 1365., 1572.,  870., 1008., 1278., 1452., 1851., 2112., 2013., 2292., 1254., 1440., 1758., 1980., 2499., 2832., 2661., 3012., 1638., 1872., 2238., 2508., 3147., 3552., 3309., 3732., 2022., 2304., 1116., 1300., 1492., 1768., 1564., 1852.,  892., 1084.};
  const std::array<int, 4> in_shape = {{ 1, 6, 4, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x4x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1203., 1392., 1365., 1572., 1851., 2112., 2013., 2292., 2499., 2832., 2661., 3012., 3147., 3552., 3309., 3732.};
  const std::array<int, 4> in_shape = {{ 1, 6, 4, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x4x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 704.,  728.,  860.,  888., 1142., 1184., 1376., 1424., 1418., 1472., 1676., 1736.,  944.,  984., 1116., 1160., 1536., 1596., 1782., 1848., 2307., 2406., 2676., 2784., 2613., 2730., 3018., 3144., 1656., 1740., 1926., 2016., 2448., 2556., 2790., 2904., 3531., 3702., 4044., 4224., 3837., 4026., 4386., 4584., 2376., 2508., 2742., 2880., 3360., 3516., 3798., 3960., 4755., 4998., 5412., 5664., 5061., 5322., 5754., 6024., 3096., 3276., 3558., 3744., 4272., 4476., 4806., 5016., 5979., 6294., 6780., 7104., 6285., 6618., 7122., 7464., 3816., 4044., 4374., 4608., 2080., 2232., 2444., 2600., 2750., 2984., 3296., 3536., 2882., 3128., 3452., 3704., 1616., 1784., 1996., 2168.};
  const std::array<int, 4> in_shape = {{ 1, 6, 4, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x4x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2307., 2406., 2676., 2784., 2613., 2730., 3018., 3144., 3531., 3702., 4044., 4224., 3837., 4026., 4386., 4584., 4755., 4998., 5412., 5664., 5061., 5322., 5754., 6024., 5979., 6294., 6780., 7104., 6285., 6618., 7122., 7464.};
  const std::array<int, 4> in_shape = {{ 1, 6, 4, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x4x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1384.,  1408.,  1432.,  1456.,  1692.,  1720.,  1748.,  1776.,  2242.,  2284.,  2326.,  2368.,  2704.,  2752.,  2800.,  2848.,  2782.,  2836.,  2890.,  2944.,  3292.,  3352.,  3412.,  3472.,  1848.,  1888.,  1928.,  1968.,  2188.,  2232.,  2276.,  2320.,  3012.,  3072.,  3132.,  3192.,  3498.,  3564.,  3630.,  3696.,  4515.,  4614.,  4713.,  4812.,  5244.,  5352.,  5460.,  5568.,  5109.,  5226.,  5343.,  5460.,  5910.,  6036.,  6162.,  6288.,  3228.,  3312.,  3396.,  3480.,  3762.,  3852.,  3942.,  4032.,  4788.,  4896.,  5004.,  5112.,  5466.,  5580.,  5694.,  5808.,  6891.,  7062.,  7233.,  7404.,  7908.,  8088.,  8268.,  8448.,  7485.,  7674.,  7863.,  8052.,  8574.,  8772.,  8970.,  9168.,  4620.,  4752.,  4884.,  5016.,  5346.,  5484.,  5622.,  5760.,  6564.,  6720.,  6876.,  7032.,  7434.,  7596.,  7758.,  7920.,  9267.,  9510.,  9753.,  9996., 10572., 10824., 11076., 11328.,  9861., 10122., 10383., 10644., 11238., 11508., 11778., 12048.,  6012.,  6192.,  6372.,  6552.,  6930.,  7116.,  7302.,  7488.,  8340.,  8544.,  8748.,  8952.,  9402.,  9612.,  9822., 10032., 11643., 11958., 12273., 12588., 13236., 13560., 13884., 14208., 12237., 12570., 12903., 13236., 13902., 14244., 14586., 14928.,  7404.,  7632.,  7860.,  8088.,  8514.,  8748.,  8982.,  9216.,  4008.,  4160.,  4312.,  4464.,  4732.,  4888.,  5044.,  5200.,  5266.,  5500.,  5734.,  5968.,  6352.,  6592.,  6832.,  7072.,  5518.,  5764.,  6010.,  6256.,  6652.,  6904.,  7156.,  7408.,  3064.,  3232.,  3400.,  3568.,  3820.,  3992.,  4164.,  4336.};
  const std::array<int, 4> in_shape = {{ 1, 6, 4, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x4x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4515.,  4614.,  4713.,  4812.,  5244.,  5352.,  5460.,  5568.,  5109.,  5226.,  5343.,  5460.,  5910.,  6036.,  6162.,  6288.,  6891.,  7062.,  7233.,  7404.,  7908.,  8088.,  8268.,  8448.,  7485.,  7674.,  7863.,  8052.,  8574.,  8772.,  8970.,  9168.,  9267.,  9510.,  9753.,  9996., 10572., 10824., 11076., 11328.,  9861., 10122., 10383., 10644., 11238., 11508., 11778., 12048., 11643., 11958., 12273., 12588., 13236., 13560., 13884., 14208., 12237., 12570., 12903., 13236., 13902., 14244., 14586., 14928.};
  const std::array<int, 4> in_shape = {{ 1, 6, 4, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x4x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1308.,  1456.,  1612.,  1776.,  2146.,  2368.,  2602.,  2848.,  2698.,  2944.,  3202.,  3472.,  1804.,  1968.,  2140.,  2320.,  2958.,  3192.,  3438.,  3696.,  4461.,  4812.,  5181.,  5568.,  5073.,  5460.,  5865.,  6288.,  3222.,  3480.,  3750.,  4032.,  4782.,  5112.,  5454.,  5808.,  6909.,  7404.,  7917.,  8448.,  7521.,  8052.,  8601.,  9168.,  4662.,  5016.,  5382.,  5760.,  6606.,  7032.,  7470.,  7920.,  9357.,  9996., 10653., 11328.,  9969., 10644., 11337., 12048.,  6102.,  6552.,  7014.,  7488.,  8430.,  8952.,  9486., 10032., 11805., 12588., 13389., 14208., 12417., 13236., 14073., 14928.,  7542.,  8088.,  8646.,  9216.,  4108.,  4464.,  4828.,  5200.,  5434.,  5968.,  6514.,  7072.,  5698.,  6256.,  6826.,  7408.,  3196.,  3568.,  3948.,  4336.};
  const std::array<int, 4> in_shape = {{ 1, 6, 4, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x4x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4461.,  4812.,  5181.,  5568.,  5073.,  5460.,  5865.,  6288.,  6909.,  7404.,  7917.,  8448.,  7521.,  8052.,  8601.,  9168.,  9357.,  9996., 10653., 11328.,  9969., 10644., 11337., 12048., 11805., 12588., 13389., 14208., 12417., 13236., 14073., 14928.};
  const std::array<int, 4> in_shape = {{ 1, 6, 4, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2572.,  2616.,  2864.,  2912.,  3172.,  3224.,  3496.,  3552.,  4214.,  4292.,  4652.,  4736.,  5114.,  5204.,  5600.,  5696.,  5294.,  5396.,  5780.,  5888.,  6290.,  6404.,  6824.,  6944.,  3532.,  3608.,  3856.,  3936.,  4196.,  4280.,  4552.,  4640.,  5802.,  5916.,  6264.,  6384.,  6750.,  6876.,  7260.,  7392.,  8733.,  8922.,  9426.,  9624., 10155., 10362., 10920., 11136.,  9921., 10146., 10686., 10920., 11487., 11730., 12324., 12576.,  6282.,  6444.,  6792.,  6960.,  7326.,  7500.,  7884.,  8064.,  9354.,  9564., 10008., 10224., 10686., 10908., 11388., 11616., 13485., 13818., 14466., 14808., 15483., 15834., 16536., 16896., 14673., 15042., 15726., 16104., 16815., 17202., 17940., 18336.,  9066.,  9324.,  9768., 10032., 10494., 10764., 11244., 11520., 12906., 13212., 13752., 14064., 14622., 14940., 15516., 15840., 18237., 18714., 19506., 19992., 20811., 21306., 22152., 22656., 19425., 19938., 20766., 21288., 22143., 22674., 23556., 24096., 11850., 12204., 12744., 13104., 13662., 14028., 14604., 14976., 16458., 16860., 17496., 17904., 18558., 18972., 19644., 20064., 22989., 23610., 24546., 25176., 26139., 26778., 27768., 28416., 24177., 24834., 25806., 26472., 27471., 28146., 29172., 29856., 14634., 15084., 15720., 16176., 16830., 17292., 17964., 18432.,  7916.,  8216.,  8624.,  8928.,  9348.,  9656., 10088., 10400., 10406., 10868., 11468., 11936., 12554., 13028., 13664., 14144., 10910., 11396., 12020., 12512., 13154., 13652., 14312., 14816.,  6060.,  6392.,  6800.,  7136.,  7556.,  7896.,  8328.,  8672.};
  const std::array<int, 4> in_shape = {{ 1, 6, 4, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8733.,  8922.,  9426.,  9624., 10155., 10362., 10920., 11136.,  9921., 10146., 10686., 10920., 11487., 11730., 12324., 12576., 13485., 13818., 14466., 14808., 15483., 15834., 16536., 16896., 14673., 15042., 15726., 16104., 16815., 17202., 17940., 18336., 18237., 18714., 19506., 19992., 20811., 21306., 22152., 22656., 19425., 19938., 20766., 21288., 22143., 22674., 23556., 24096., 22989., 23610., 24546., 25176., 26139., 26778., 27768., 28416., 24177., 24834., 25806., 26472., 27471., 28146., 29172., 29856.};
  const std::array<int, 4> in_shape = {{ 1, 6, 4, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x4x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5100.,  5144.,  5188.,  5232.,  5680.,  5728.,  5776.,  5824.,  6292.,  6344.,  6396.,  6448.,  6936.,  6992.,  7048.,  7104.,  8350.,  8428.,  8506.,  8584.,  9220.,  9304.,  9388.,  9472., 10138., 10228., 10318., 10408., 11104., 11200., 11296., 11392., 10486., 10588., 10690., 10792., 11452., 11560., 11668., 11776., 12466., 12580., 12694., 12808., 13528., 13648., 13768., 13888.,  6988.,  7064.,  7140.,  7216.,  7632.,  7712.,  7792.,  7872.,  8308.,  8392.,  8476.,  8560.,  9016.,  9104.,  9192.,  9280., 11490., 11604., 11718., 11832., 12408., 12528., 12648., 12768., 13374., 13500., 13626., 13752., 14388., 14520., 14652., 14784., 17277., 17466., 17655., 17844., 18654., 18852., 19050., 19248., 20103., 20310., 20517., 20724., 21624., 21840., 22056., 22272., 19617., 19842., 20067., 20292., 21138., 21372., 21606., 21840., 22731., 22974., 23217., 23460., 24396., 24648., 24900., 25152., 12402., 12564., 12726., 12888., 13416., 13584., 13752., 13920., 14478., 14652., 14826., 15000., 15588., 15768., 15948., 16128., 18498., 18708., 18918., 19128., 19800., 20016., 20232., 20448., 21150., 21372., 21594., 21816., 22548., 22776., 23004., 23232., 26637., 26970., 27303., 27636., 28590., 28932., 29274., 29616., 30615., 30966., 31317., 31668., 32712., 33072., 33432., 33792., 28977., 29346., 29715., 30084., 31074., 31452., 31830., 32208., 33243., 33630., 34017., 34404., 35484., 35880., 36276., 36672., 17874., 18132., 18390., 18648., 19272., 19536., 19800., 20064., 20718., 20988., 21258., 21528., 22212., 22488., 22764., 23040., 25506., 25812., 26118., 26424., 27192., 27504., 27816., 28128., 28926., 29244., 29562., 29880., 30708., 31032., 31356., 31680., 35997., 36474., 36951., 37428., 38526., 39012., 39498., 39984., 41127., 41622., 42117., 42612., 43800., 44304., 44808., 45312., 38337., 38850., 39363., 39876., 41010., 41532., 42054., 42576., 43755., 44286., 44817., 45348., 46572., 47112., 47652., 48192., 23346., 23700., 24054., 24408., 25128., 25488., 25848., 26208., 26958., 27324., 27690., 28056., 28836., 29208., 29580., 29952., 32514., 32916., 33318., 33720., 34584., 34992., 35400., 35808., 36702., 37116., 37530., 37944., 38868., 39288., 39708., 40128., 45357., 45978., 46599., 47220., 48462., 49092., 49722., 50352., 51639., 52278., 52917., 53556., 54888., 55536., 56184., 56832., 47697., 48354., 49011., 49668., 50946., 51612., 52278., 52944., 54267., 54942., 55617., 56292., 57660., 58344., 59028., 59712., 28818., 29268., 29718., 30168., 30984., 31440., 31896., 32352., 33198., 33660., 34122., 34584., 35460., 35928., 36396., 36864., 15532., 15832., 16132., 16432., 16944., 17248., 17552., 17856., 18388., 18696., 19004., 19312., 19864., 20176., 20488., 20800., 20350., 20812., 21274., 21736., 22468., 22936., 23404., 23872., 24634., 25108., 25582., 26056., 26848., 27328., 27808., 28288., 21334., 21820., 22306., 22792., 23548., 24040., 24532., 25024., 25810., 26308., 26806., 27304., 28120., 28624., 29128., 29632., 11788., 12120., 12452., 12784., 13264., 13600., 13936., 14272., 14772., 15112., 15452., 15792., 16312., 16656., 17000., 17344.};
  const std::array<int, 4> in_shape = {{ 1, 6, 4, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x4x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17277., 17466., 17655., 17844., 18654., 18852., 19050., 19248., 20103., 20310., 20517., 20724., 21624., 21840., 22056., 22272., 19617., 19842., 20067., 20292., 21138., 21372., 21606., 21840., 22731., 22974., 23217., 23460., 24396., 24648., 24900., 25152., 26637., 26970., 27303., 27636., 28590., 28932., 29274., 29616., 30615., 30966., 31317., 31668., 32712., 33072., 33432., 33792., 28977., 29346., 29715., 30084., 31074., 31452., 31830., 32208., 33243., 33630., 34017., 34404., 35484., 35880., 36276., 36672., 35997., 36474., 36951., 37428., 38526., 39012., 39498., 39984., 41127., 41622., 42117., 42612., 43800., 44304., 44808., 45312., 38337., 38850., 39363., 39876., 41010., 41532., 42054., 42576., 43755., 44286., 44817., 45348., 46572., 47112., 47652., 48192., 45357., 45978., 46599., 47220., 48462., 49092., 49722., 50352., 51639., 52278., 52917., 53556., 54888., 55536., 56184., 56832., 47697., 48354., 49011., 49668., 50946., 51612., 52278., 52944., 54267., 54942., 55617., 56292., 57660., 58344., 59028., 59712.};
  const std::array<int, 4> in_shape = {{ 1, 6, 4, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x5x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 128.,  202.,  241.,  280.,  184.,  276.,  411.,  456.,  501.,  318.,  441.,  636.,  681.,  726.,  453.,  606.,  861.,  906.,  951.,  588.,  771., 1086., 1131., 1176.,  723.,  400.,  541.,  562.,  583.,  340.};
  const std::array<int, 4> in_shape = {{ 1, 6, 5, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x5x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 411.,  456.,  501.,  636.,  681.,  726.,  861.,  906.,  951., 1086., 1131., 1176.};
  const std::array<int, 4> in_shape = {{ 1, 6, 5, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x5x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 240.,  256.,  377.,  404.,  449.,  482.,  521.,  560.,  340.,  368.,  513.,  552.,  759.,  822.,  840.,  912.,  921., 1002.,  579.,  636.,  813.,  882., 1164., 1272., 1245., 1362., 1326., 1452.,  819.,  906., 1113., 1212., 1569., 1722., 1650., 1812., 1731., 1902., 1059., 1176., 1413., 1542., 1974., 2172., 2055., 2262., 2136., 2352., 1299., 1446.,  704.,  800.,  935., 1082.,  971., 1124., 1007., 1166.,  572.,  680.};
  const std::array<int, 4> in_shape = {{ 1, 6, 5, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x5x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 759.,  822.,  840.,  912.,  921., 1002., 1164., 1272., 1245., 1362., 1326., 1452., 1569., 1722., 1650., 1812., 1731., 1902., 1974., 2172., 2055., 2262., 2136., 2352.};
  const std::array<int, 4> in_shape = {{ 1, 6, 5, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x5x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 464.,  480.,  496.,  512.,  727.,  754.,  781.,  808.,  865.,  898.,  931.,  964., 1003., 1042., 1081., 1120.,  652.,  680.,  708.,  736.,  987., 1026., 1065., 1104., 1455., 1518., 1581., 1644., 1608., 1680., 1752., 1824., 1761., 1842., 1923., 2004., 1101., 1158., 1215., 1272., 1557., 1626., 1695., 1764., 2220., 2328., 2436., 2544., 2373., 2490., 2607., 2724., 2526., 2652., 2778., 2904., 1551., 1638., 1725., 1812., 2127., 2226., 2325., 2424., 2985., 3138., 3291., 3444., 3138., 3300., 3462., 3624., 3291., 3462., 3633., 3804., 2001., 2118., 2235., 2352., 2697., 2826., 2955., 3084., 3750., 3948., 4146., 4344., 3903., 4110., 4317., 4524., 4056., 4272., 4488., 4704., 2451., 2598., 2745., 2892., 1312., 1408., 1504., 1600., 1723., 1870., 2017., 2164., 1789., 1942., 2095., 2248., 1855., 2014., 2173., 2332., 1036., 1144., 1252., 1360.};
  const std::array<int, 4> in_shape = {{ 1, 6, 5, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x5x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1455., 1518., 1581., 1644., 1608., 1680., 1752., 1824., 1761., 1842., 1923., 2004., 2220., 2328., 2436., 2544., 2373., 2490., 2607., 2724., 2526., 2652., 2778., 2904., 2985., 3138., 3291., 3444., 3138., 3300., 3462., 3624., 3291., 3462., 3633., 3804., 3750., 3948., 4146., 4344., 3903., 4110., 4317., 4524., 4056., 4272., 4488., 4704.};
  const std::array<int, 4> in_shape = {{ 1, 6, 5, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x5x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 428.,  512.,  682.,  808.,  826.,  964.,  970., 1120.,  636.,  736.,  966., 1104., 1437., 1644., 1599., 1824., 1761., 2004., 1110., 1272., 1566., 1764., 2247., 2544., 2409., 2724., 2571., 2904., 1590., 1812., 2166., 2424., 3057., 3444., 3219., 3624., 3381., 3804., 2070., 2352., 2766., 3084., 3867., 4344., 4029., 4524., 4191., 4704., 2550., 2892., 1380., 1600., 1834., 2164., 1906., 2248., 1978., 2332., 1124., 1360.};
  const std::array<int, 4> in_shape = {{ 1, 6, 5, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x5x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1437., 1644., 1599., 1824., 1761., 2004., 2247., 2544., 2409., 2724., 2571., 2904., 3057., 3444., 3219., 3624., 3381., 3804., 3867., 4344., 4029., 4524., 4191., 4704.};
  const std::array<int, 4> in_shape = {{ 1, 6, 5, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x5x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 828.,  856.,  992., 1024., 1316., 1364., 1562., 1616., 1592., 1652., 1862., 1928., 1868., 1940., 2162., 2240., 1220., 1272., 1416., 1472., 1860., 1932., 2130., 2208., 2757., 2874., 3162., 3288., 3063., 3198., 3504., 3648., 3369., 3522., 3846., 4008., 2112., 2220., 2430., 2544., 3000., 3132., 3390., 3528., 4287., 4494., 4872., 5088., 4593., 4818., 5214., 5448., 4899., 5142., 5556., 5808., 3012., 3180., 3450., 3624., 4140., 4332., 4650., 4848., 5817., 6114., 6582., 6888., 6123., 6438., 6924., 7248., 6429., 6762., 7266., 7608., 3912., 4140., 4470., 4704., 5280., 5532., 5910., 6168., 7347., 7734., 8292., 8688., 7653., 8058., 8634., 9048., 7959., 8382., 8976., 9408., 4812., 5100., 5490., 5784., 2572., 2760., 3008., 3200., 3380., 3668., 4034., 4328., 3512., 3812., 4190., 4496., 3644., 3956., 4346., 4664., 2036., 2248., 2504., 2720.};
  const std::array<int, 4> in_shape = {{ 1, 6, 5, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x5x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2757., 2874., 3162., 3288., 3063., 3198., 3504., 3648., 3369., 3522., 3846., 4008., 4287., 4494., 4872., 5088., 4593., 4818., 5214., 5448., 4899., 5142., 5556., 5808., 5817., 6114., 6582., 6888., 6123., 6438., 6924., 7248., 6429., 6762., 7266., 7608., 7347., 7734., 8292., 8688., 7653., 8058., 8634., 9048., 7959., 8382., 8976., 9408.};
  const std::array<int, 4> in_shape = {{ 1, 6, 5, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x5x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1628.,  1656.,  1684.,  1712.,  1952.,  1984.,  2016.,  2048.,  2584.,  2632.,  2680.,  2728.,  3070.,  3124.,  3178.,  3232.,  3124.,  3184.,  3244.,  3304.,  3658.,  3724.,  3790.,  3856.,  3664.,  3736.,  3808.,  3880.,  4246.,  4324.,  4402.,  4480.,  2388.,  2440.,  2492.,  2544.,  2776.,  2832.,  2888.,  2944.,  3648.,  3720.,  3792.,  3864.,  4182.,  4260.,  4338.,  4416.,  5397.,  5514.,  5631.,  5748.,  6198.,  6324.,  6450.,  6576.,  5991.,  6126.,  6261.,  6396.,  6864.,  7008.,  7152.,  7296.,  6585.,  6738.,  6891.,  7044.,  7530.,  7692.,  7854.,  8016.,  4116.,  4224.,  4332.,  4440.,  4746.,  4860.,  4974.,  5088.,  5868.,  6000.,  6132.,  6264.,  6642.,  6780.,  6918.,  7056.,  8367.,  8574.,  8781.,  8988.,  9528.,  9744.,  9960., 10176.,  8961.,  9186.,  9411.,  9636., 10194., 10428., 10662., 10896.,  9555.,  9798., 10041., 10284., 10860., 11112., 11364., 11616.,  5856.,  6024.,  6192.,  6360.,  6726.,  6900.,  7074.,  7248.,  8088.,  8280.,  8472.,  8664.,  9102.,  9300.,  9498.,  9696., 11337., 11634., 11931., 12228., 12858., 13164., 13470., 13776., 11931., 12246., 12561., 12876., 13524., 13848., 14172., 14496., 12525., 12858., 13191., 13524., 14190., 14532., 14874., 15216.,  7596.,  7824.,  8052.,  8280.,  8706.,  8940.,  9174.,  9408., 10308., 10560., 10812., 11064., 11562., 11820., 12078., 12336., 14307., 14694., 15081., 15468., 16188., 16584., 16980., 17376., 14901., 15306., 15711., 16116., 16854., 17268., 17682., 18096., 15495., 15918., 16341., 16764., 17520., 17952., 18384., 18816.,  9336.,  9624.,  9912., 10200., 10686., 10980., 11274., 11568.,  4956.,  5144.,  5332.,  5520.,  5824.,  6016.,  6208.,  6400.,  6472.,  6760.,  7048.,  7336.,  7774.,  8068.,  8362.,  8656.,  6724.,  7024.,  7324.,  7624.,  8074.,  8380.,  8686.,  8992.,  6976.,  7288.,  7600.,  7912.,  8374.,  8692.,  9010.,  9328.,  3860.,  4072.,  4284.,  4496.,  4792.,  5008.,  5224.,  5440.};
  const std::array<int, 4> in_shape = {{ 1, 6, 5, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x5x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5397.,  5514.,  5631.,  5748.,  6198.,  6324.,  6450.,  6576.,  5991.,  6126.,  6261.,  6396.,  6864.,  7008.,  7152.,  7296.,  6585.,  6738.,  6891.,  7044.,  7530.,  7692.,  7854.,  8016.,  8367.,  8574.,  8781.,  8988.,  9528.,  9744.,  9960., 10176.,  8961.,  9186.,  9411.,  9636., 10194., 10428., 10662., 10896.,  9555.,  9798., 10041., 10284., 10860., 11112., 11364., 11616., 11337., 11634., 11931., 12228., 12858., 13164., 13470., 13776., 11931., 12246., 12561., 12876., 13524., 13848., 14172., 14496., 12525., 12858., 13191., 13524., 14190., 14532., 14874., 15216., 14307., 14694., 15081., 15468., 16188., 16584., 16980., 17376., 14901., 15306., 15711., 16116., 16854., 17268., 17682., 18096., 15495., 15918., 16341., 16764., 17520., 17952., 18384., 18816.};
  const std::array<int, 4> in_shape = {{ 1, 6, 5, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x5x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1556.,  1712.,  1876.,  2048.,  2494.,  2728.,  2974.,  3232.,  3046.,  3304.,  3574.,  3856.,  3598.,  3880.,  4174.,  4480.,  2356.,  2544.,  2740.,  2944.,  3606.,  3864.,  4134.,  4416.,  5361.,  5748.,  6153.,  6576.,  5973.,  6396.,  6837.,  7296.,  6585.,  7044.,  7521.,  8016.,  4134.,  4440.,  4758.,  5088.,  5886.,  6264.,  6654.,  7056.,  8421.,  8988.,  9573., 10176.,  9033.,  9636., 10257., 10896.,  9645., 10284., 10941., 11616.,  5934.,  6360.,  6798.,  7248.,  8166.,  8664.,  9174.,  9696., 11481., 12228., 12993., 13776., 12093., 12876., 13677., 14496., 12705., 13524., 14361., 15216.,  7734.,  8280.,  8838.,  9408., 10446., 11064., 11694., 12336., 14541., 15468., 16413., 17376., 15153., 16116., 17097., 18096., 15765., 16764., 17781., 18816.,  9534., 10200., 10878., 11568.,  5092.,  5520.,  5956.,  6400.,  6694.,  7336.,  7990.,  8656.,  6958.,  7624.,  8302.,  8992.,  7222.,  7912.,  8614.,  9328.,  4036.,  4496.,  4964.,  5440.};
  const std::array<int, 4> in_shape = {{ 1, 6, 5, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x5x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5361.,  5748.,  6153.,  6576.,  5973.,  6396.,  6837.,  7296.,  6585.,  7044.,  7521.,  8016.,  8421.,  8988.,  9573., 10176.,  9033.,  9636., 10257., 10896.,  9645., 10284., 10941., 11616., 11481., 12228., 12993., 13776., 12093., 12876., 13677., 14496., 12705., 13524., 14361., 15216., 14541., 15468., 16413., 17376., 15153., 16116., 17097., 18096., 15765., 16764., 17781., 18816.};
  const std::array<int, 4> in_shape = {{ 1, 6, 5, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x5x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3060.,  3112.,  3368.,  3424.,  3692.,  3752.,  4032.,  4096.,  4898.,  4988.,  5360.,  5456.,  5846.,  5948.,  6356.,  6464.,  5978.,  6092.,  6488.,  6608.,  7022.,  7148.,  7580.,  7712.,  7058.,  7196.,  7616.,  7760.,  8198.,  8348.,  8804.,  8960.,  4612.,  4712.,  4984.,  5088.,  5372.,  5480.,  5776.,  5888.,  7074.,  7212.,  7584.,  7728.,  8118.,  8268.,  8676.,  8832., 10497., 10722., 11262., 11496., 12063., 12306., 12900., 13152., 11685., 11946., 12522., 12792., 13395., 13674., 14304., 14592., 12873., 13170., 13782., 14088., 14727., 15042., 15708., 16032.,  8058.,  8268.,  8664.,  8880.,  9294.,  9516.,  9948., 10176., 11514., 11772., 12264., 12528., 13038., 13308., 13836., 14112., 16437., 16842., 17562., 17976., 18723., 19146., 19920., 20352., 17625., 18066., 18822., 19272., 20055., 20514., 21324., 21792., 18813., 19290., 20082., 20568., 21387., 21882., 22728., 23232., 11538., 11868., 12384., 12720., 13254., 13596., 14148., 14496., 15954., 16332., 16944., 17328., 17958., 18348., 18996., 19392., 22377., 22962., 23862., 24456., 25383., 25986., 26940., 27552., 23565., 24186., 25122., 25752., 26715., 27354., 28344., 28992., 24753., 25410., 26382., 27048., 28047., 28722., 29748., 30432., 15018., 15468., 16104., 16560., 17214., 17676., 18348., 18816., 20394., 20892., 21624., 22128., 22878., 23388., 24156., 24672., 28317., 29082., 30162., 30936., 32043., 32826., 33960., 34752., 29505., 30306., 31422., 32232., 33375., 34194., 35364., 36192., 30693., 31530., 32682., 33528., 34707., 35562., 36768., 37632., 18498., 19068., 19824., 20400., 21174., 21756., 22548., 23136.,  9812., 10184., 10664., 11040., 11532., 11912., 12416., 12800., 12818., 13388., 14096., 14672., 15398., 15980., 16724., 17312., 13322., 13916., 14648., 15248., 15998., 16604., 17372., 17984., 13826., 14444., 15200., 15824., 16598., 17228., 18020., 18656.,  7652.,  8072.,  8568.,  8992.,  9500.,  9928., 10448., 10880.};
  const std::array<int, 4> in_shape = {{ 1, 6, 5, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x5x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10497., 10722., 11262., 11496., 12063., 12306., 12900., 13152., 11685., 11946., 12522., 12792., 13395., 13674., 14304., 14592., 12873., 13170., 13782., 14088., 14727., 15042., 15708., 16032., 16437., 16842., 17562., 17976., 18723., 19146., 19920., 20352., 17625., 18066., 18822., 19272., 20055., 20514., 21324., 21792., 18813., 19290., 20082., 20568., 21387., 21882., 22728., 23232., 22377., 22962., 23862., 24456., 25383., 25986., 26940., 27552., 23565., 24186., 25122., 25752., 26715., 27354., 28344., 28992., 24753., 25410., 26382., 27048., 28047., 28722., 29748., 30432., 28317., 29082., 30162., 30936., 32043., 32826., 33960., 34752., 29505., 30306., 31422., 32232., 33375., 34194., 35364., 36192., 30693., 31530., 32682., 33528., 34707., 35562., 36768., 37632.};
  const std::array<int, 4> in_shape = {{ 1, 6, 5, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x5x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2868.,  2920.,  2972.,  3024.,  3352.,  3408.,  3464.,  3520.,  3868.,  3928.,  3988.,  4048.,  4416.,  4480.,  4544.,  4608.,  5994.,  6084.,  6174.,  6264.,  6784.,  6880.,  6976.,  7072.,  7622.,  7724.,  7826.,  7928.,  8508.,  8616.,  8724.,  8832.,  7618.,  7732.,  7846.,  7960.,  8504.,  8624.,  8744.,  8864.,  9438.,  9564.,  9690.,  9816., 10420., 10552., 10684., 10816.,  9242.,  9380.,  9518.,  9656., 10224., 10368., 10512., 10656., 11254., 11404., 11554., 11704., 12332., 12488., 12644., 12800.,  9124.,  9224.,  9324.,  9424.,  9864.,  9968., 10072., 10176., 10636., 10744., 10852., 10960., 11440., 11552., 11664., 11776.,  8250.,  8388.,  8526.,  8664.,  9136.,  9280.,  9424.,  9568., 10070., 10220., 10370., 10520., 11052., 11208., 11364., 11520., 14497., 14722., 14947., 15172., 15890., 16124., 16358., 16592., 17355., 17598., 17841., 18084., 18892., 19144., 19396., 19648., 16325., 16586., 16847., 17108., 17862., 18132., 18402., 18672., 19471., 19750., 20029., 20308., 21152., 21440., 21728., 22016., 18153., 18450., 18747., 19044., 19834., 20140., 20446., 20752., 21587., 21902., 22217., 22532., 23412., 23736., 24060., 24384., 15906., 16116., 16326., 16536., 17112., 17328., 17544., 17760., 18366., 18588., 18810., 19032., 19668., 19896., 20124., 20352., 14450., 14708., 14966., 15224., 15816., 16080., 16344., 16608., 17230., 17500., 17770., 18040., 18692., 18968., 19244., 19520., 23637., 24042., 24447., 24852., 25750., 26164., 26578., 26992., 27935., 28358., 28781., 29204., 30192., 30624., 31056., 31488., 25465., 25906., 26347., 26788., 27722., 28172., 28622., 29072., 30051., 30510., 30969., 31428., 32452., 32920., 33388., 33856., 27293., 27770., 28247., 28724., 29694., 30180., 30666., 31152., 32167., 32662., 33157., 33652., 34712., 35216., 35720., 36224., 22746., 23076., 23406., 23736., 24432., 24768., 25104., 25440., 26166., 26508., 26850., 27192., 27948., 28296., 28644., 28992., 20650., 21028., 21406., 21784., 22496., 22880., 23264., 23648., 24390., 24780., 25170., 25560., 26332., 26728., 27124., 27520., 32777., 33362., 33947., 34532., 35610., 36204., 36798., 37392., 38515., 39118., 39721., 40324., 41492., 42104., 42716., 43328., 34605., 35226., 35847., 36468., 37582., 38212., 38842., 39472., 40631., 41270., 41909., 42548., 43752., 44400., 45048., 45696., 36433., 37090., 37747., 38404., 39554., 40220., 40886., 41552., 42747., 43422., 44097., 44772., 46012., 46696., 47380., 48064., 29586., 30036., 30486., 30936., 31752., 32208., 32664., 33120., 33966., 34428., 34890., 35352., 36228., 36696., 37164., 37632., 26850., 27348., 27846., 28344., 29176., 29680., 30184., 30688., 31550., 32060., 32570., 33080., 33972., 34488., 35004., 35520., 41917., 42682., 43447., 44212., 45470., 46244., 47018., 47792., 49095., 49878., 50661., 51444., 52792., 53584., 54376., 55168., 43745., 44546., 45347., 46148., 47442., 48252., 49062., 49872., 51211., 52030., 52849., 53668., 55052., 55880., 56708., 57536., 45573., 46410., 47247., 48084., 49414., 50260., 51106., 51952., 53327., 54182., 55037., 55892., 57312., 58176., 59040., 59904., 36426., 36996., 37566., 38136., 39072., 39648., 40224., 40800., 41766., 42348., 42930., 43512., 44508., 45096., 45684., 46272., 19252., 19624., 19996., 20368., 20952., 21328., 21704., 22080., 22684., 23064., 23444., 23824., 24448., 24832., 25216., 25600., 25066., 25636., 26206., 26776., 27616., 28192., 28768., 29344., 30214., 30796., 31378., 31960., 32860., 33448., 34036., 34624., 26050., 26644., 27238., 27832., 28696., 29296., 29896., 30496., 31390., 31996., 32602., 33208., 34132., 34744., 35356., 35968., 27034., 27652., 28270., 28888., 29776., 30400., 31024., 31648., 32566., 33196., 33826., 34456., 35404., 36040., 36676., 37312., 14884., 15304., 15724., 16144., 16712., 17136., 17560., 17984., 18572., 19000., 19428., 19856., 20464., 20896., 21328., 21760.};
  const std::array<int, 4> in_shape = {{ 1, 6, 5, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x5x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14497., 14722., 14947., 15172., 15890., 16124., 16358., 16592., 17355., 17598., 17841., 18084., 18892., 19144., 19396., 19648., 16325., 16586., 16847., 17108., 17862., 18132., 18402., 18672., 19471., 19750., 20029., 20308., 21152., 21440., 21728., 22016., 18153., 18450., 18747., 19044., 19834., 20140., 20446., 20752., 21587., 21902., 22217., 22532., 23412., 23736., 24060., 24384., 23637., 24042., 24447., 24852., 25750., 26164., 26578., 26992., 27935., 28358., 28781., 29204., 30192., 30624., 31056., 31488., 25465., 25906., 26347., 26788., 27722., 28172., 28622., 29072., 30051., 30510., 30969., 31428., 32452., 32920., 33388., 33856., 27293., 27770., 28247., 28724., 29694., 30180., 30666., 31152., 32167., 32662., 33157., 33652., 34712., 35216., 35720., 36224., 32777., 33362., 33947., 34532., 35610., 36204., 36798., 37392., 38515., 39118., 39721., 40324., 41492., 42104., 42716., 43328., 34605., 35226., 35847., 36468., 37582., 38212., 38842., 39472., 40631., 41270., 41909., 42548., 43752., 44400., 45048., 45696., 36433., 37090., 37747., 38404., 39554., 40220., 40886., 41552., 42747., 43422., 44097., 44772., 46012., 46696., 47380., 48064., 41917., 42682., 43447., 44212., 45470., 46244., 47018., 47792., 49095., 49878., 50661., 51444., 52792., 53584., 54376., 55168., 43745., 44546., 45347., 46148., 47442., 48252., 49062., 49872., 51211., 52030., 52849., 53668., 55052., 55880., 56708., 57536., 45573., 46410., 47247., 48084., 49414., 50260., 51106., 51952., 53327., 54182., 55037., 55892., 57312., 58176., 59040., 59904.};
  const std::array<int, 4> in_shape = {{ 1, 6, 5, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 145.,  226.,  265.,  304.,  343.,  223.,  321.,  474.,  519.,  564.,  609.,  384.,  519.,  744.,  789.,  834.,  879.,  546.,  717., 1014., 1059., 1104., 1149.,  708.,  915., 1284., 1329., 1374., 1419.,  870.,  475.,  640.,  661.,  682.,  703.,  409.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 474.,  519.,  564.,  609.,  744.,  789.,  834.,  879., 1014., 1059., 1104., 1149., 1284., 1329., 1374., 1419.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 272.,  290.,  422.,  452.,  494.,  530.,  566.,  608.,  638.,  686.,  412.,  446.,  597.,  642.,  876.,  948.,  957., 1038., 1038., 1128., 1119., 1218.,  699.,  768.,  957., 1038., 1362., 1488., 1443., 1578., 1524., 1668., 1605., 1758.,  987., 1092., 1317., 1434., 1848., 2028., 1929., 2118., 2010., 2208., 2091., 2298., 1275., 1416., 1677., 1830., 2334., 2568., 2415., 2658., 2496., 2748., 2577., 2838., 1563., 1740.,  836.,  950., 1106., 1280., 1142., 1322., 1178., 1364., 1214., 1406.,  688.,  818.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 876.,  948.,  957., 1038., 1038., 1128., 1119., 1218., 1362., 1488., 1443., 1578., 1524., 1668., 1605., 1758., 1848., 2028., 1929., 2118., 2010., 2208., 2091., 2298., 2334., 2568., 2415., 2658., 2496., 2748., 2577., 2838.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 526.,  544.,  562.,  580.,  814.,  844.,  874.,  904.,  952.,  988., 1024., 1060., 1090., 1132., 1174., 1216., 1228., 1276., 1324., 1372.,  790.,  824.,  858.,  892., 1149., 1194., 1239., 1284., 1680., 1752., 1824., 1896., 1833., 1914., 1995., 2076., 1986., 2076., 2166., 2256., 2139., 2238., 2337., 2436., 1329., 1398., 1467., 1536., 1833., 1914., 1995., 2076., 2598., 2724., 2850., 2976., 2751., 2886., 3021., 3156., 2904., 3048., 3192., 3336., 3057., 3210., 3363., 3516., 1869., 1974., 2079., 2184., 2517., 2634., 2751., 2868., 3516., 3696., 3876., 4056., 3669., 3858., 4047., 4236., 3822., 4020., 4218., 4416., 3975., 4182., 4389., 4596., 2409., 2550., 2691., 2832., 3201., 3354., 3507., 3660., 4434., 4668., 4902., 5136., 4587., 4830., 5073., 5316., 4740., 4992., 5244., 5496., 4893., 5154., 5415., 5676., 2949., 3126., 3303., 3480., 1558., 1672., 1786., 1900., 2038., 2212., 2386., 2560., 2104., 2284., 2464., 2644., 2170., 2356., 2542., 2728., 2236., 2428., 2620., 2812., 1246., 1376., 1506., 1636.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1680., 1752., 1824., 1896., 1833., 1914., 1995., 2076., 1986., 2076., 2166., 2256., 2139., 2238., 2337., 2436., 2598., 2724., 2850., 2976., 2751., 2886., 3021., 3156., 2904., 3048., 3192., 3336., 3057., 3210., 3363., 3516., 3516., 3696., 3876., 4056., 3669., 3858., 4047., 4236., 3822., 4020., 4218., 4416., 3975., 4182., 4389., 4596., 4434., 4668., 4902., 5136., 4587., 4830., 5073., 5316., 4740., 4992., 5244., 5496., 4893., 5154., 5415., 5676.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 492.,  580.,  772.,  904.,  916., 1060., 1060., 1216., 1204., 1372.,  780.,  892., 1134., 1284., 1671., 1896., 1833., 2076., 1995., 2256., 2157., 2436., 1350., 1536., 1854., 2076., 2643., 2976., 2805., 3156., 2967., 3336., 3129., 3516., 1926., 2184., 2574., 2868., 3615., 4056., 3777., 4236., 3939., 4416., 4101., 4596., 2502., 2832., 3294., 3660., 4587., 5136., 4749., 5316., 4911., 5496., 5073., 5676., 3078., 3480., 1644., 1900., 2176., 2560., 2248., 2644., 2320., 2728., 2392., 2812., 1356., 1636.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1671., 1896., 1833., 2076., 1995., 2256., 2157., 2436., 2643., 2976., 2805., 3156., 2967., 3336., 3129., 3516., 3615., 4056., 3777., 4236., 3939., 4416., 4101., 4596., 4587., 5136., 4749., 5316., 4911., 5496., 5073., 5676.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  952.,   984.,  1124.,  1160.,  1490.,  1544.,  1748.,  1808.,  1766.,  1832.,  2048.,  2120.,  2042.,  2120.,  2348.,  2432.,  2318.,  2408.,  2648.,  2744.,  1496.,  1560.,  1716.,  1784.,  2184.,  2268.,  2478.,  2568.,  3207.,  3342.,  3648.,  3792.,  3513.,  3666.,  3990.,  4152.,  3819.,  3990.,  4332.,  4512.,  4125.,  4314.,  4674.,  4872.,  2568.,  2700.,  2934.,  3072.,  3552.,  3708.,  3990.,  4152.,  5043.,  5286.,  5700.,  5952.,  5349.,  5610.,  6042.,  6312.,  5655.,  5934.,  6384.,  6672.,  5961.,  6258.,  6726.,  7032.,  3648.,  3852.,  4158.,  4368.,  4920.,  5148.,  5502.,  5736.,  6879.,  7230.,  7752.,  8112.,  7185.,  7554.,  8094.,  8472.,  7491.,  7878.,  8436.,  8832.,  7797.,  8202.,  8778.,  9192.,  4728.,  5004.,  5382.,  5664.,  6288.,  6588.,  7014.,  7320.,  8715.,  9174.,  9804., 10272.,  9021.,  9498., 10146., 10632.,  9327.,  9822., 10488., 10992.,  9633., 10146., 10830., 11352.,  5808.,  6156.,  6606.,  6960.,  3064.,  3288.,  3572.,  3800.,  4010.,  4352.,  4772.,  5120.,  4142.,  4496.,  4928.,  5288.,  4274.,  4640.,  5084.,  5456.,  4406.,  4784.,  5240.,  5624.,  2456.,  2712.,  3012.,  3272.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3207.,  3342.,  3648.,  3792.,  3513.,  3666.,  3990.,  4152.,  3819.,  3990.,  4332.,  4512.,  4125.,  4314.,  4674.,  4872.,  5043.,  5286.,  5700.,  5952.,  5349.,  5610.,  6042.,  6312.,  5655.,  5934.,  6384.,  6672.,  5961.,  6258.,  6726.,  7032.,  6879.,  7230.,  7752.,  8112.,  7185.,  7554.,  8094.,  8472.,  7491.,  7878.,  8436.,  8832.,  7797.,  8202.,  8778.,  9192.,  8715.,  9174.,  9804., 10272.,  9021.,  9498., 10146., 10632.,  9327.,  9822., 10488., 10992.,  9633., 10146., 10830., 11352.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1872.,  1904.,  1936.,  1968.,  2212.,  2248.,  2284.,  2320.,  2926.,  2980.,  3034.,  3088.,  3436.,  3496.,  3556.,  3616.,  3466.,  3532.,  3598.,  3664.,  4024.,  4096.,  4168.,  4240.,  4006.,  4084.,  4162.,  4240.,  4612.,  4696.,  4780.,  4864.,  4546.,  4636.,  4726.,  4816.,  5200.,  5296.,  5392.,  5488.,  2928.,  2992.,  3056.,  3120.,  3364.,  3432.,  3500.,  3568.,  4284.,  4368.,  4452.,  4536.,  4866.,  4956.,  5046.,  5136.,  6279.,  6414.,  6549.,  6684.,  7152.,  7296.,  7440.,  7584.,  6873.,  7026.,  7179.,  7332.,  7818.,  7980.,  8142.,  8304.,  7467.,  7638.,  7809.,  7980.,  8484.,  8664.,  8844.,  9024.,  8061.,  8250.,  8439.,  8628.,  9150.,  9348.,  9546.,  9744.,  5004.,  5136.,  5268.,  5400.,  5730.,  5868.,  6006.,  6144.,  6948.,  7104.,  7260.,  7416.,  7818.,  7980.,  8142.,  8304.,  9843., 10086., 10329., 10572., 11148., 11400., 11652., 11904., 10437., 10698., 10959., 11220., 11814., 12084., 12354., 12624., 11031., 11310., 11589., 11868., 12480., 12768., 13056., 13344., 11625., 11922., 12219., 12516., 13146., 13452., 13758., 14064.,  7092.,  7296.,  7500.,  7704.,  8106.,  8316.,  8526.,  8736.,  9612.,  9840., 10068., 10296., 10770., 11004., 11238., 11472., 13407., 13758., 14109., 14460., 15144., 15504., 15864., 16224., 14001., 14370., 14739., 15108., 15810., 16188., 16566., 16944., 14595., 14982., 15369., 15756., 16476., 16872., 17268., 17664., 15189., 15594., 15999., 16404., 17142., 17556., 17970., 18384.,  9180.,  9456.,  9732., 10008., 10482., 10764., 11046., 11328., 12276., 12576., 12876., 13176., 13722., 14028., 14334., 14640., 16971., 17430., 17889., 18348., 19140., 19608., 20076., 20544., 17565., 18042., 18519., 18996., 19806., 20292., 20778., 21264., 18159., 18654., 19149., 19644., 20472., 20976., 21480., 21984., 18753., 19266., 19779., 20292., 21138., 21660., 22182., 22704., 11268., 11616., 11964., 12312., 12858., 13212., 13566., 13920.,  5904.,  6128.,  6352.,  6576.,  6916.,  7144.,  7372.,  7600.,  7678.,  8020.,  8362.,  8704.,  9196.,  9544.,  9892., 10240.,  7930.,  8284.,  8638.,  8992.,  9496.,  9856., 10216., 10576.,  8182.,  8548.,  8914.,  9280.,  9796., 10168., 10540., 10912.,  8434.,  8812.,  9190.,  9568., 10096., 10480., 10864., 11248.,  4656.,  4912.,  5168.,  5424.,  5764.,  6024.,  6284.,  6544.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6279.,  6414.,  6549.,  6684.,  7152.,  7296.,  7440.,  7584.,  6873.,  7026.,  7179.,  7332.,  7818.,  7980.,  8142.,  8304.,  7467.,  7638.,  7809.,  7980.,  8484.,  8664.,  8844.,  9024.,  8061.,  8250.,  8439.,  8628.,  9150.,  9348.,  9546.,  9744.,  9843., 10086., 10329., 10572., 11148., 11400., 11652., 11904., 10437., 10698., 10959., 11220., 11814., 12084., 12354., 12624., 11031., 11310., 11589., 11868., 12480., 12768., 13056., 13344., 11625., 11922., 12219., 12516., 13146., 13452., 13758., 14064., 13407., 13758., 14109., 14460., 15144., 15504., 15864., 16224., 14001., 14370., 14739., 15108., 15810., 16188., 16566., 16944., 14595., 14982., 15369., 15756., 16476., 16872., 17268., 17664., 15189., 15594., 15999., 16404., 17142., 17556., 17970., 18384., 16971., 17430., 17889., 18348., 19140., 19608., 20076., 20544., 17565., 18042., 18519., 18996., 19806., 20292., 20778., 21264., 18159., 18654., 19149., 19644., 20472., 20976., 21480., 21984., 18753., 19266., 19779., 20292., 21138., 21660., 22182., 22704.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1804.,  1968.,  2140.,  2320.,  2842.,  3088.,  3346.,  3616.,  3394.,  3664.,  3946.,  4240.,  3946.,  4240.,  4546.,  4864.,  4498.,  4816.,  5146.,  5488.,  2908.,  3120.,  3340.,  3568.,  4254.,  4536.,  4830.,  5136.,  6261.,  6684.,  7125.,  7584.,  6873.,  7332.,  7809.,  8304.,  7485.,  7980.,  8493.,  9024.,  8097.,  8628.,  9177.,  9744.,  5046.,  5400.,  5766.,  6144.,  6990.,  7416.,  7854.,  8304.,  9933., 10572., 11229., 11904., 10545., 11220., 11913., 12624., 11157., 11868., 12597., 13344., 11769., 12516., 13281., 14064.,  7206.,  7704.,  8214.,  8736.,  9726., 10296., 10878., 11472., 13605., 14460., 15333., 16224., 14217., 15108., 16017., 16944., 14829., 15756., 16701., 17664., 15441., 16404., 17385., 18384.,  9366., 10008., 10662., 11328., 12462., 13176., 13902., 14640., 17277., 18348., 19437., 20544., 17889., 18996., 20121., 21264., 18501., 19644., 20805., 21984., 19113., 20292., 21489., 22704., 11526., 12312., 13110., 13920.,  6076.,  6576.,  7084.,  7600.,  7954.,  8704.,  9466., 10240.,  8218.,  8992.,  9778., 10576.,  8482.,  9280., 10090., 10912.,  8746.,  9568., 10402., 11248.,  4876.,  5424.,  5980.,  6544.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6261.,  6684.,  7125.,  7584.,  6873.,  7332.,  7809.,  8304.,  7485.,  7980.,  8493.,  9024.,  8097.,  8628.,  9177.,  9744.,  9933., 10572., 11229., 11904., 10545., 11220., 11913., 12624., 11157., 11868., 12597., 13344., 11769., 12516., 13281., 14064., 13605., 14460., 15333., 16224., 14217., 15108., 16017., 16944., 14829., 15756., 16701., 17664., 15441., 16404., 17385., 18384., 17277., 18348., 19437., 20544., 17889., 18996., 20121., 21264., 18501., 19644., 20805., 21984., 19113., 20292., 21489., 22704.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3548.,  3608.,  3872.,  3936.,  4212.,  4280.,  4568.,  4640.,  5582.,  5684.,  6068.,  6176.,  6578.,  6692.,  7112.,  7232.,  6662.,  6788.,  7196.,  7328.,  7754.,  7892.,  8336.,  8480.,  7742.,  7892.,  8324.,  8480.,  8930.,  9092.,  9560.,  9728.,  8822.,  8996.,  9452.,  9632., 10106., 10292., 10784., 10976.,  5692.,  5816.,  6112.,  6240.,  6548.,  6680.,  7000.,  7136.,  8346.,  8508.,  8904.,  9072.,  9486.,  9660., 10092., 10272., 12261., 12522., 13098., 13368., 13971., 14250., 14880., 15168., 13449., 13746., 14358., 14664., 15303., 15618., 16284., 16608., 14637., 14970., 15618., 15960., 16635., 16986., 17688., 18048., 15825., 16194., 16878., 17256., 17967., 18354., 19092., 19488.,  9834., 10092., 10536., 10800., 11262., 11532., 12012., 12288., 13674., 13980., 14520., 14832., 15390., 15708., 16284., 16608., 19389., 19866., 20658., 21144., 21963., 22458., 23304., 23808., 20577., 21090., 21918., 22440., 23295., 23826., 24708., 25248., 21765., 22314., 23178., 23736., 24627., 25194., 26112., 26688., 22953., 23538., 24438., 25032., 25959., 26562., 27516., 28128., 14010., 14412., 15000., 15408., 16014., 16428., 17052., 17472., 19002., 19452., 20136., 20592., 21294., 21756., 22476., 22944., 26517., 27210., 28218., 28920., 29955., 30666., 31728., 32448., 27705., 28434., 29478., 30216., 31287., 32034., 33132., 33888., 28893., 29658., 30738., 31512., 32619., 33402., 34536., 35328., 30081., 30882., 31998., 32808., 33951., 34770., 35940., 36768., 18186., 18732., 19464., 20016., 20766., 21324., 22092., 22656., 24330., 24924., 25752., 26352., 27198., 27804., 28668., 29280., 33645., 34554., 35778., 36696., 37947., 38874., 40152., 41088., 34833., 35778., 37038., 37992., 39279., 40242., 41556., 42528., 36021., 37002., 38298., 39288., 40611., 41610., 42960., 43968., 37209., 38226., 39558., 40584., 41943., 42978., 44364., 45408., 22362., 23052., 23928., 24624., 25518., 26220., 27132., 27840., 11708., 12152., 12704., 13152., 13716., 14168., 14744., 15200., 15230., 15908., 16724., 17408., 18242., 18932., 19784., 20480., 15734., 16436., 17276., 17984., 18842., 19556., 20432., 21152., 16238., 16964., 17828., 18560., 19442., 20180., 21080., 21824., 16742., 17492., 18380., 19136., 20042., 20804., 21728., 22496.,  9244.,  9752., 10336., 10848., 11444., 11960., 12568., 13088.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12261., 12522., 13098., 13368., 13971., 14250., 14880., 15168., 13449., 13746., 14358., 14664., 15303., 15618., 16284., 16608., 14637., 14970., 15618., 15960., 16635., 16986., 17688., 18048., 15825., 16194., 16878., 17256., 17967., 18354., 19092., 19488., 19389., 19866., 20658., 21144., 21963., 22458., 23304., 23808., 20577., 21090., 21918., 22440., 23295., 23826., 24708., 25248., 21765., 22314., 23178., 23736., 24627., 25194., 26112., 26688., 22953., 23538., 24438., 25032., 25959., 26562., 27516., 28128., 26517., 27210., 28218., 28920., 29955., 30666., 31728., 32448., 27705., 28434., 29478., 30216., 31287., 32034., 33132., 33888., 28893., 29658., 30738., 31512., 32619., 33402., 34536., 35328., 30081., 30882., 31998., 32808., 33951., 34770., 35940., 36768., 33645., 34554., 35778., 36696., 37947., 38874., 40152., 41088., 34833., 35778., 37038., 37992., 39279., 40242., 41556., 42528., 36021., 37002., 38298., 39288., 40611., 41610., 42960., 43968., 37209., 38226., 39558., 40584., 41943., 42978., 44364., 45408.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME1x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3324.,  3384.,  3444.,  3504.,  3840.,  3904.,  3968.,  4032.,  4388.,  4456.,  4524.,  4592.,  4968.,  5040.,  5112.,  5184.,  6838.,  6940.,  7042.,  7144.,  7676.,  7784.,  7892.,  8000.,  8562.,  8676.,  8790.,  8904.,  9496.,  9616.,  9736.,  9856.,  8462.,  8588.,  8714.,  8840.,  9396.,  9528.,  9660.,  9792., 10378., 10516., 10654., 10792., 11408., 11552., 11696., 11840., 10086., 10236., 10386., 10536., 11116., 11272., 11428., 11584., 12194., 12356., 12518., 12680., 13320., 13488., 13656., 13824., 11710., 11884., 12058., 12232., 12836., 13016., 13196., 13376., 14010., 14196., 14382., 14568., 15232., 15424., 15616., 15808., 11260., 11384., 11508., 11632., 12096., 12224., 12352., 12480., 12964., 13096., 13228., 13360., 13864., 14000., 14136., 14272.,  9746.,  9908., 10070., 10232., 10728., 10896., 11064., 11232., 11758., 11932., 12106., 12280., 12836., 13016., 13196., 13376., 16965., 17226., 17487., 17748., 18502., 18772., 19042., 19312., 20111., 20390., 20669., 20948., 21792., 22080., 22368., 22656., 18793., 19090., 19387., 19684., 20474., 20780., 21086., 21392., 22227., 22542., 22857., 23172., 24052., 24376., 24700., 25024., 20621., 20954., 21287., 21620., 22446., 22788., 23130., 23472., 24343., 24694., 25045., 25396., 26312., 26672., 27032., 27392., 22449., 22818., 23187., 23556., 24418., 24796., 25174., 25552., 26459., 26846., 27233., 27620., 28572., 28968., 29364., 29760., 19410., 19668., 19926., 20184., 20808., 21072., 21336., 21600., 22254., 22524., 22794., 23064., 23748., 24024., 24300., 24576., 17186., 17492., 17798., 18104., 18744., 19056., 19368., 19680., 20350., 20668., 20986., 21304., 22004., 22328., 22652., 22976., 27933., 28410., 28887., 29364., 30334., 30820., 31306., 31792., 32807., 33302., 33797., 34292., 35352., 35856., 36360., 36864., 29761., 30274., 30787., 31300., 32306., 32828., 33350., 33872., 34923., 35454., 35985., 36516., 37612., 38152., 38692., 39232., 31589., 32138., 32687., 33236., 34278., 34836., 35394., 35952., 37039., 37606., 38173., 38740., 39872., 40448., 41024., 41600., 33417., 34002., 34587., 35172., 36250., 36844., 37438., 38032., 39155., 39758., 40361., 40964., 42132., 42744., 43356., 43968., 27618., 28020., 28422., 28824., 29592., 30000., 30408., 30816., 31614., 32028., 32442., 32856., 33684., 34104., 34524., 34944., 24626., 25076., 25526., 25976., 26760., 27216., 27672., 28128., 28942., 29404., 29866., 30328., 31172., 31640., 32108., 32576., 38901., 39594., 40287., 40980., 42166., 42868., 43570., 44272., 45503., 46214., 46925., 47636., 48912., 49632., 50352., 51072., 40729., 41458., 42187., 42916., 44138., 44876., 45614., 46352., 47619., 48366., 49113., 49860., 51172., 51928., 52684., 53440., 42557., 43322., 44087., 44852., 46110., 46884., 47658., 48432., 49735., 50518., 51301., 52084., 53432., 54224., 55016., 55808., 44385., 45186., 45987., 46788., 48082., 48892., 49702., 50512., 51851., 52670., 53489., 54308., 55692., 56520., 57348., 58176., 35826., 36372., 36918., 37464., 38376., 38928., 39480., 40032., 40974., 41532., 42090., 42648., 43620., 44184., 44748., 45312., 32066., 32660., 33254., 33848., 34776., 35376., 35976., 36576., 37534., 38140., 38746., 39352., 40340., 40952., 41564., 42176., 49741., 50522., 51303., 52084., 53358., 54148., 54938., 55728., 57047., 57846., 58645., 59444., 60808., 61616., 62424., 63232., 37105., 37794., 38483., 39172., 40354., 41052., 41750., 42448., 43675., 44382., 45089., 45796., 47068., 47784., 48500., 49216., 26517., 27114., 27711., 28308., 29398., 30004., 30610., 31216., 32351., 32966., 33581., 34196., 35376., 36000., 36624., 37248., 28345., 28978., 29611., 30244., 31370., 32012., 32654., 33296., 34467., 35118., 35769., 36420., 37636., 38296., 38956., 39616., 17154., 17588., 18022., 18456., 19256., 19696., 20136., 20576., 21406., 21852., 22298., 22744., 23604., 24056., 24508., 24960., 22972., 23416., 23860., 24304., 24960., 25408., 25856., 26304., 26980., 27432., 27884., 28336., 29032., 29488., 29944., 30400., 19414., 19964., 20514., 21064., 21884., 22440., 22996., 23552., 24402., 24964., 25526., 26088., 26968., 27536., 28104., 28672., 12078., 12524., 12970., 13416., 14132., 14584., 15036., 15488., 16234., 16692., 17150., 17608., 18384., 18848., 19312., 19776.,  6790.,  7132.,  7474.,  7816.,  8428.,  8776.,  9124.,  9472., 10114., 10468., 10822., 11176., 11848., 12208., 12568., 12928.,  7774.,  8140.,  8506.,  8872.,  9508.,  9880., 10252., 10624., 11290., 11668., 12046., 12424., 13120., 13504., 13888., 14272.,  3388.,  3640.,  3892.,  4144.,  4544.,  4800.,  5056.,  5312.,  5732.,  5992.,  6252.,  6512.,  6952.,  7216.,  7480.,  7744.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID1x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16965., 17226., 17487., 17748., 18502., 18772., 19042., 19312., 20111., 20390., 20669., 20948., 21792., 22080., 22368., 22656., 18793., 19090., 19387., 19684., 20474., 20780., 21086., 21392., 22227., 22542., 22857., 23172., 24052., 24376., 24700., 25024., 20621., 20954., 21287., 21620., 22446., 22788., 23130., 23472., 24343., 24694., 25045., 25396., 26312., 26672., 27032., 27392., 22449., 22818., 23187., 23556., 24418., 24796., 25174., 25552., 26459., 26846., 27233., 27620., 28572., 28968., 29364., 29760., 27933., 28410., 28887., 29364., 30334., 30820., 31306., 31792., 32807., 33302., 33797., 34292., 35352., 35856., 36360., 36864., 29761., 30274., 30787., 31300., 32306., 32828., 33350., 33872., 34923., 35454., 35985., 36516., 37612., 38152., 38692., 39232., 31589., 32138., 32687., 33236., 34278., 34836., 35394., 35952., 37039., 37606., 38173., 38740., 39872., 40448., 41024., 41600., 33417., 34002., 34587., 35172., 36250., 36844., 37438., 38032., 39155., 39758., 40361., 40964., 42132., 42744., 43356., 43968., 38901., 39594., 40287., 40980., 42166., 42868., 43570., 44272., 45503., 46214., 46925., 47636., 48912., 49632., 50352., 51072., 40729., 41458., 42187., 42916., 44138., 44876., 45614., 46352., 47619., 48366., 49113., 49860., 51172., 51928., 52684., 53440., 42557., 43322., 44087., 44852., 46110., 46884., 47658., 48432., 49735., 50518., 51301., 52084., 53432., 54224., 55016., 55808., 44385., 45186., 45987., 46788., 48082., 48892., 49702., 50512., 51851., 52670., 53489., 54308., 55692., 56520., 57348., 58176., 49741., 50522., 51303., 52084., 53358., 54148., 54938., 55728., 57047., 57846., 58645., 59444., 60808., 61616., 62424., 63232., 37105., 37794., 38483., 39172., 40354., 41052., 41750., 42448., 43675., 44382., 45089., 45796., 47068., 47784., 48500., 49216., 26517., 27114., 27711., 28308., 29398., 30004., 30610., 31216., 32351., 32966., 33581., 34196., 35376., 36000., 36624., 37248., 28345., 28978., 29611., 30244., 31370., 32012., 32654., 33296., 34467., 35118., 35769., 36420., 37636., 38296., 38956., 39616.};
  const std::array<int, 4> in_shape = {{ 1, 6, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x4x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 111.,  178.,  217.,  145.,  231.,  348.,  393.,  252.,  363.,  528.,  573.,  360.,  197.,  274.,  295.,  175.,  559.,  802.,  841.,  529.,  759., 1068., 1113.,  684.,  891., 1248., 1293.,  792.,  453.,  610.,  631.,  367., 1007., 1426., 1465.,  913., 1287., 1788., 1833., 1116., 1419., 1968., 2013., 1224.,  709.,  946.,  967.,  559.};
  const std::array<int, 4> in_shape = {{ 3, 4, 4, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x4x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 348.,  393.,  528.,  573., 1068., 1113., 1248., 1293., 1788., 1833., 1968., 2013.};
  const std::array<int, 4> in_shape = {{ 3, 4, 4, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x4x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 208.,  222.,  332.,  356.,  404.,  434.,  268.,  290.,  429.,  462.,  642.,  696.,  723.,  786.,  459.,  504.,  669.,  726.,  966., 1056., 1047., 1146.,  651.,  720.,  348.,  394.,  476.,  548.,  512.,  590.,  296.,  350., 1040., 1118., 1484., 1604., 1556., 1682.,  972., 1058., 1389., 1518., 1938., 2136., 2019., 2226., 1227., 1368., 1629., 1782., 2262., 2496., 2343., 2586., 1419., 1584.,  796.,  906., 1052., 1220., 1088., 1262.,  616.,  734., 1872., 2014., 2636., 2852., 2708., 2930., 1676., 1826., 2349., 2574., 3234., 3576., 3315., 3666., 1995., 2232., 2589., 2838., 3558., 3936., 3639., 4026., 2187., 2448., 1244., 1418., 1628., 1892., 1664., 1934.,  936., 1118.};
  const std::array<int, 4> in_shape = {{ 3, 4, 4, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x4x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 642.,  696.,  723.,  786.,  966., 1056., 1047., 1146., 1938., 2136., 2019., 2226., 2262., 2496., 2343., 2586., 3234., 3576., 3315., 3666., 3558., 3936., 3639., 4026.};
  const std::array<int, 4> in_shape = {{ 3, 4, 4, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x4x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 402.,  416.,  430.,  444.,  640.,  664.,  688.,  712.,  778.,  808.,  838.,  868.,  514.,  536.,  558.,  580.,  825.,  858.,  891.,  924., 1230., 1284., 1338., 1392., 1383., 1446., 1509., 1572.,  873.,  918.,  963., 1008., 1281., 1338., 1395., 1452., 1842., 1932., 2022., 2112., 1995., 2094., 2193., 2292., 1233., 1302., 1371., 1440.,  650.,  696.,  742.,  788.,  880.,  952., 1024., 1096.,  946., 1024., 1102., 1180.,  538.,  592.,  646.,  700., 2002., 2080., 2158., 2236., 2848., 2968., 3088., 3208., 2986., 3112., 3238., 3364., 1858., 1944., 2030., 2116., 2649., 2778., 2907., 3036., 3678., 3876., 4074., 4272., 3831., 4038., 4245., 4452., 2313., 2454., 2595., 2736., 3105., 3258., 3411., 3564., 4290., 4524., 4758., 4992., 4443., 4686., 4929., 5172., 2673., 2838., 3003., 3168., 1482., 1592., 1702., 1812., 1936., 2104., 2272., 2440., 2002., 2176., 2350., 2524., 1114., 1232., 1350., 1468., 3602., 3744., 3886., 4028., 5056., 5272., 5488., 5704., 5194., 5416., 5638., 5860., 3202., 3352., 3502., 3652., 4473., 4698., 4923., 5148., 6126., 6468., 6810., 7152., 6279., 6630., 6981., 7332., 3753., 3990., 4227., 4464., 4929., 5178., 5427., 5676., 6738., 7116., 7494., 7872., 6891., 7278., 7665., 8052., 4113., 4374., 4635., 4896., 2314., 2488., 2662., 2836., 2992., 3256., 3520., 3784., 3058., 3328., 3598., 3868., 1690., 1872., 2054., 2236.};
  const std::array<int, 4> in_shape = {{ 3, 4, 4, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x4x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1230., 1284., 1338., 1392., 1383., 1446., 1509., 1572., 1842., 1932., 2022., 2112., 1995., 2094., 2193., 2292., 3678., 3876., 4074., 4272., 3831., 4038., 4245., 4452., 4290., 4524., 4758., 4992., 4443., 4686., 4929., 5172., 6126., 6468., 6810., 7152., 6279., 6630., 6981., 7332., 6738., 7116., 7494., 7872., 6891., 7278., 7665., 8052.};
  const std::array<int, 4> in_shape = {{ 3, 4, 4, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x4x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 364.,  444.,  592.,  712.,  736.,  868.,  492.,  580.,  798.,  924., 1203., 1392., 1365., 1572.,  870., 1008., 1278., 1452., 1851., 2112., 2013., 2292., 1254., 1440.,  668.,  788.,  916., 1096.,  988., 1180.,  572.,  700., 2028., 2236., 2896., 3208., 3040., 3364., 1900., 2116., 2718., 3036., 3795., 4272., 3957., 4452., 2406., 2736., 3198., 3564., 4443., 4992., 4605., 5172., 2790., 3168., 1564., 1812., 2068., 2440., 2140., 2524., 1212., 1468., 3692., 4028., 5200., 5704., 5344., 5860., 3308., 3652., 4638., 5148., 6387., 7152., 6549., 7332., 3942., 4464., 5118., 5676., 7035., 7872., 7197., 8052., 4326., 4896., 2460., 2836., 3220., 3784., 3292., 3868., 1852., 2236.};
  const std::array<int, 4> in_shape = {{ 3, 4, 4, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x4x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1203., 1392., 1365., 1572., 1851., 2112., 2013., 2292., 3795., 4272., 3957., 4452., 4443., 4992., 4605., 5172., 6387., 7152., 6549., 7332., 7035., 7872., 7197., 8052.};
  const std::array<int, 4> in_shape = {{ 3, 4, 4, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x4x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  704.,   728.,   860.,   888.,  1142.,  1184.,  1376.,  1424.,  1418.,  1472.,  1676.,  1736.,   944.,   984.,  1116.,  1160.,  1536.,  1596.,  1782.,  1848.,  2307.,  2406.,  2676.,  2784.,  2613.,  2730.,  3018.,  3144.,  1656.,  1740.,  1926.,  2016.,  2448.,  2556.,  2790.,  2904.,  3531.,  3702.,  4044.,  4224.,  3837.,  4026.,  4386.,  4584.,  2376.,  2508.,  2742.,  2880.,  1248.,  1336.,  1484.,  1576.,  1694.,  1832.,  2048.,  2192.,  1826.,  1976.,  2204.,  2360.,  1040.,  1144.,  1292.,  1400.,  3904.,  4056.,  4316.,  4472.,  5558.,  5792.,  6176.,  6416.,  5834.,  6080.,  6476.,  6728.,  3632.,  3800.,  4060.,  4232.,  5184.,  5436.,  5814.,  6072.,  7203.,  7590.,  8148.,  8544.,  7509.,  7914.,  8490.,  8904.,  4536.,  4812.,  5190.,  5472.,  6096.,  6396.,  6822.,  7128.,  8427.,  8886.,  9516.,  9984.,  8733.,  9210.,  9858., 10344.,  5256.,  5580.,  6006.,  6336.,  2912.,  3128.,  3404.,  3624.,  3806.,  4136.,  4544.,  4880.,  3938.,  4280.,  4700.,  5048.,  2192.,  2424.,  2700.,  2936.,  7104.,  7384.,  7772.,  8056.,  9974., 10400., 10976., 11408., 10250., 10688., 11276., 11720.,  6320.,  6616.,  7004.,  7304.,  8832.,  9276.,  9846., 10296., 12099., 12774., 13620., 14304., 12405., 13098., 13962., 14664.,  7416.,  7884.,  8454.,  8928.,  9744., 10236., 10854., 11352., 13323., 14070., 14988., 15744., 13629., 14394., 15330., 16104.,  8136.,  8652.,  9270.,  9792.,  4576.,  4920.,  5324.,  5672.,  5918.,  6440.,  7040.,  7568.,  6050.,  6584.,  7196.,  7736.,  3344.,  3704.,  4108.,  4472.};
  const std::array<int, 4> in_shape = {{ 3, 4, 4, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x4x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2307.,  2406.,  2676.,  2784.,  2613.,  2730.,  3018.,  3144.,  3531.,  3702.,  4044.,  4224.,  3837.,  4026.,  4386.,  4584.,  7203.,  7590.,  8148.,  8544.,  7509.,  7914.,  8490.,  8904.,  8427.,  8886.,  9516.,  9984.,  8733.,  9210.,  9858., 10344., 12099., 12774., 13620., 14304., 12405., 13098., 13962., 14664., 13323., 14070., 14988., 15744., 13629., 14394., 15330., 16104.};
  const std::array<int, 4> in_shape = {{ 3, 4, 4, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x4x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1384.,  1408.,  1432.,  1456.,  1692.,  1720.,  1748.,  1776.,  2242.,  2284.,  2326.,  2368.,  2704.,  2752.,  2800.,  2848.,  2782.,  2836.,  2890.,  2944.,  3292.,  3352.,  3412.,  3472.,  1848.,  1888.,  1928.,  1968.,  2188.,  2232.,  2276.,  2320.,  3012.,  3072.,  3132.,  3192.,  3498.,  3564.,  3630.,  3696.,  4515.,  4614.,  4713.,  4812.,  5244.,  5352.,  5460.,  5568.,  5109.,  5226.,  5343.,  5460.,  5910.,  6036.,  6162.,  6288.,  3228.,  3312.,  3396.,  3480.,  3762.,  3852.,  3942.,  4032.,  4788.,  4896.,  5004.,  5112.,  5466.,  5580.,  5694.,  5808.,  6891.,  7062.,  7233.,  7404.,  7908.,  8088.,  8268.,  8448.,  7485.,  7674.,  7863.,  8052.,  8574.,  8772.,  8970.,  9168.,  4620.,  4752.,  4884.,  5016.,  5346.,  5484.,  5622.,  5760.,  2408.,  2496.,  2584.,  2672.,  2876.,  2968.,  3060.,  3152.,  3250.,  3388.,  3526.,  3664.,  3952.,  4096.,  4240.,  4384.,  3502.,  3652.,  3802.,  3952.,  4252.,  4408.,  4564.,  4720.,  1976.,  2080.,  2184.,  2288.,  2476.,  2584.,  2692.,  2800.,  7656.,  7808.,  7960.,  8112.,  8476.,  8632.,  8788.,  8944., 10882., 11116., 11350., 11584., 12112., 12352., 12592., 12832., 11422., 11668., 11914., 12160., 12700., 12952., 13204., 13456.,  7096.,  7264.,  7432.,  7600.,  7948.,  8120.,  8292.,  8464., 10116., 10368., 10620., 10872., 11370., 11628., 11886., 12144., 14019., 14406., 14793., 15180., 15900., 16296., 16692., 17088., 14613., 15018., 15423., 15828., 16566., 16980., 17394., 17808.,  8796.,  9072.,  9348.,  9624., 10098., 10380., 10662., 10944., 11892., 12192., 12492., 12792., 13338., 13644., 13950., 14256., 16395., 16854., 17313., 17772., 18564., 19032., 19500., 19968., 16989., 17466., 17943., 18420., 19230., 19716., 20202., 20688., 10188., 10512., 10836., 11160., 11682., 12012., 12342., 12672.,  5608.,  5824.,  6040.,  6256.,  6588.,  6808.,  7028.,  7248.,  7282.,  7612.,  7942.,  8272.,  8752.,  9088.,  9424.,  9760.,  7534.,  7876.,  8218.,  8560.,  9052.,  9400.,  9748., 10096.,  4152.,  4384.,  4616.,  4848.,  5164.,  5400.,  5636.,  5872., 13928., 14208., 14488., 14768., 15260., 15544., 15828., 16112., 19522., 19948., 20374., 20800., 21520., 21952., 22384., 22816., 20062., 20500., 20938., 21376., 22108., 22552., 22996., 23440., 12344., 12640., 12936., 13232., 13708., 14008., 14308., 14608., 17220., 17664., 18108., 18552., 19242., 19692., 20142., 20592., 23523., 24198., 24873., 25548., 26556., 27240., 27924., 28608., 24117., 24810., 25503., 26196., 27222., 27924., 28626., 29328., 14364., 14832., 15300., 15768., 16434., 16908., 17382., 17856., 18996., 19488., 19980., 20472., 21210., 21708., 22206., 22704., 25899., 26646., 27393., 28140., 29220., 29976., 30732., 31488., 26493., 27258., 28023., 28788., 29886., 30660., 31434., 32208., 15756., 16272., 16788., 17304., 18018., 18540., 19062., 19584.,  8808.,  9152.,  9496.,  9840., 10300., 10648., 10996., 11344., 11314., 11836., 12358., 12880., 13552., 14080., 14608., 15136., 11566., 12100., 12634., 13168., 13852., 14392., 14932., 15472.,  6328.,  6688.,  7048.,  7408.,  7852.,  8216.,  8580.,  8944.};
  const std::array<int, 4> in_shape = {{ 3, 4, 4, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x4x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4515.,  4614.,  4713.,  4812.,  5244.,  5352.,  5460.,  5568.,  5109.,  5226.,  5343.,  5460.,  5910.,  6036.,  6162.,  6288.,  6891.,  7062.,  7233.,  7404.,  7908.,  8088.,  8268.,  8448.,  7485.,  7674.,  7863.,  8052.,  8574.,  8772.,  8970.,  9168., 14019., 14406., 14793., 15180., 15900., 16296., 16692., 17088., 14613., 15018., 15423., 15828., 16566., 16980., 17394., 17808., 16395., 16854., 17313., 17772., 18564., 19032., 19500., 19968., 16989., 17466., 17943., 18420., 19230., 19716., 20202., 20688., 23523., 24198., 24873., 25548., 26556., 27240., 27924., 28608., 24117., 24810., 25503., 26196., 27222., 27924., 28626., 29328., 25899., 26646., 27393., 28140., 29220., 29976., 30732., 31488., 26493., 27258., 28023., 28788., 29886., 30660., 31434., 32208.};
  const std::array<int, 4> in_shape = {{ 3, 4, 4, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x4x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1308.,  1456.,  1612.,  1776.,  2146.,  2368.,  2602.,  2848.,  2698.,  2944.,  3202.,  3472.,  1804.,  1968.,  2140.,  2320.,  2958.,  3192.,  3438.,  3696.,  4461.,  4812.,  5181.,  5568.,  5073.,  5460.,  5865.,  6288.,  3222.,  3480.,  3750.,  4032.,  4782.,  5112.,  5454.,  5808.,  6909.,  7404.,  7917.,  8448.,  7521.,  8052.,  8601.,  9168.,  4662.,  5016.,  5382.,  5760.,  2444.,  2672.,  2908.,  3152.,  3322.,  3664.,  4018.,  4384.,  3586.,  3952.,  4330.,  4720.,  2044.,  2288.,  2540.,  2800.,  7708.,  8112.,  8524.,  8944., 10978., 11584., 12202., 12832., 11530., 12160., 12802., 13456.,  7180.,  7600.,  8028.,  8464., 10254., 10872., 11502., 12144., 14253., 15180., 16125., 17088., 14865., 15828., 16809., 17808.,  8982.,  9624., 10278., 10944., 12078., 12792., 13518., 14256., 16701., 17772., 18861., 19968., 17313., 18420., 19545., 20688., 10422., 11160., 11910., 12672.,  5772.,  6256.,  6748.,  7248.,  7546.,  8272.,  9010.,  9760.,  7810.,  8560.,  9322., 10096.,  4348.,  4848.,  5356.,  5872., 14108., 14768., 15436., 16112., 19810., 20800., 21802., 22816., 20362., 21376., 22402., 23440., 12556., 13232., 13916., 14608., 17550., 18552., 19566., 20592., 24045., 25548., 27069., 28608., 24657., 26196., 27753., 29328., 14742., 15768., 16806., 17856., 19374., 20472., 21582., 22704., 26493., 28140., 29805., 31488., 27105., 28788., 30489., 32208., 16182., 17304., 18438., 19584.,  9100.,  9840., 10588., 11344., 11770., 12880., 14002., 15136., 12034., 13168., 14314., 15472.,  6652.,  7408.,  8172.,  8944.};
  const std::array<int, 4> in_shape = {{ 3, 4, 4, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x4x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4461.,  4812.,  5181.,  5568.,  5073.,  5460.,  5865.,  6288.,  6909.,  7404.,  7917.,  8448.,  7521.,  8052.,  8601.,  9168., 14253., 15180., 16125., 17088., 14865., 15828., 16809., 17808., 16701., 17772., 18861., 19968., 17313., 18420., 19545., 20688., 24045., 25548., 27069., 28608., 24657., 26196., 27753., 29328., 26493., 28140., 29805., 31488., 27105., 28788., 30489., 32208.};
  const std::array<int, 4> in_shape = {{ 3, 4, 4, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2572.,  2616.,  2864.,  2912.,  3172.,  3224.,  3496.,  3552.,  4214.,  4292.,  4652.,  4736.,  5114.,  5204.,  5600.,  5696.,  5294.,  5396.,  5780.,  5888.,  6290.,  6404.,  6824.,  6944.,  3532.,  3608.,  3856.,  3936.,  4196.,  4280.,  4552.,  4640.,  5802.,  5916.,  6264.,  6384.,  6750.,  6876.,  7260.,  7392.,  8733.,  8922.,  9426.,  9624., 10155., 10362., 10920., 11136.,  9921., 10146., 10686., 10920., 11487., 11730., 12324., 12576.,  6282.,  6444.,  6792.,  6960.,  7326.,  7500.,  7884.,  8064.,  9354.,  9564., 10008., 10224., 10686., 10908., 11388., 11616., 13485., 13818., 14466., 14808., 15483., 15834., 16536., 16896., 14673., 15042., 15726., 16104., 16815., 17202., 17940., 18336.,  9066.,  9324.,  9768., 10032., 10494., 10764., 11244., 11520.,  4716.,  4888.,  5168.,  5344.,  5636.,  5816.,  6120.,  6304.,  6374.,  6644.,  7052.,  7328.,  7754.,  8036.,  8480.,  8768.,  6878.,  7172.,  7604.,  7904.,  8354.,  8660.,  9128.,  9440.,  3884.,  4088.,  4368.,  4576.,  4868.,  5080.,  5384.,  5600., 15116., 15416., 15920., 16224., 16740., 17048., 17576., 17888., 21494., 21956., 22700., 23168., 23930., 24404., 25184., 25664., 22574., 23060., 23828., 24320., 25106., 25604., 26408., 26912., 14028., 14360., 14864., 15200., 15716., 16056., 16584., 16928., 20010., 20508., 21240., 21744., 22494., 23004., 23772., 24288., 27741., 28506., 29586., 30360., 31467., 32250., 33384., 34176., 28929., 29730., 30846., 31656., 32799., 33618., 34788., 35616., 17418., 17964., 18696., 19248., 19998., 20556., 21324., 21888., 23562., 24156., 24984., 25584., 26430., 27036., 27900., 28512., 32493., 33402., 34626., 35544., 36795., 37722., 39000., 39936., 33681., 34626., 35886., 36840., 38127., 39090., 40404., 41376., 20202., 20844., 21672., 22320., 23166., 23820., 24684., 25344., 11116., 11544., 12080., 12512., 13060., 13496., 14056., 14496., 14438., 15092., 15884., 16544., 17354., 18020., 18848., 19520., 14942., 15620., 16436., 17120., 17954., 18644., 19496., 20192.,  8236.,  8696.,  9232.,  9696., 10244., 10712., 11272., 11744., 27660., 28216., 28976., 29536., 30308., 30872., 31656., 32224., 38774., 39620., 40748., 41600., 42746., 43604., 44768., 45632., 39854., 40724., 41876., 42752., 43922., 44804., 45992., 46880., 24524., 25112., 25872., 26464., 27236., 27832., 28616., 29216., 34218., 35100., 36216., 37104., 38238., 39132., 40284., 41184., 46749., 48090., 49746., 51096., 52779., 54138., 55848., 57216., 47937., 49314., 51006., 52392., 54111., 55506., 57252., 58656., 28554., 29484., 30600., 31536., 32670., 33612., 34764., 35712., 37770., 38748., 39960., 40944., 42174., 43164., 44412., 45408., 51501., 52986., 54786., 56280., 58107., 59610., 61464., 62976., 52689., 54210., 56046., 57576., 59439., 60978., 62868., 64416., 31338., 32364., 33576., 34608., 35838., 36876., 38124., 39168., 17516., 18200., 18992., 19680., 20484., 21176., 21992., 22688., 22502., 23540., 24716., 25760., 26954., 28004., 29216., 30272., 23006., 24068., 25268., 26336., 27554., 28628., 29864., 30944., 12588., 13304., 14096., 14816., 15620., 16344., 17160., 17888.};
  const std::array<int, 4> in_shape = {{ 3, 4, 4, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8733.,  8922.,  9426.,  9624., 10155., 10362., 10920., 11136.,  9921., 10146., 10686., 10920., 11487., 11730., 12324., 12576., 13485., 13818., 14466., 14808., 15483., 15834., 16536., 16896., 14673., 15042., 15726., 16104., 16815., 17202., 17940., 18336., 27741., 28506., 29586., 30360., 31467., 32250., 33384., 34176., 28929., 29730., 30846., 31656., 32799., 33618., 34788., 35616., 32493., 33402., 34626., 35544., 36795., 37722., 39000., 39936., 33681., 34626., 35886., 36840., 38127., 39090., 40404., 41376., 46749., 48090., 49746., 51096., 52779., 54138., 55848., 57216., 47937., 49314., 51006., 52392., 54111., 55506., 57252., 58656., 51501., 52986., 54786., 56280., 58107., 59610., 61464., 62976., 52689., 54210., 56046., 57576., 59439., 60978., 62868., 64416.};
  const std::array<int, 4> in_shape = {{ 3, 4, 4, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x4x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  940.,   984.,  1028.,  1072.,  1200.,  1248.,  1296.,  1344.,  1492.,  1544.,  1596.,  1648.,  1816.,  1872.,  1928.,  1984.,  1822.,  1900.,  1978.,  2056.,  2308.,  2392.,  2476.,  2560.,  2842.,  2932.,  3022.,  3112.,  3424.,  3520.,  3616.,  3712.,  2422.,  2524.,  2626.,  2728.,  3004.,  3112.,  3220.,  3328.,  3634.,  3748.,  3862.,  3976.,  4312.,  4432.,  4552.,  4672.,  2700.,  2776.,  2852.,  2928.,  3152.,  3232.,  3312.,  3392.,  3636.,  3720.,  3804.,  3888.,  4152.,  4240.,  4328.,  4416.,  2210.,  2324.,  2438.,  2552.,  2808.,  2928.,  3048.,  3168.,  3454.,  3580.,  3706.,  3832.,  4148.,  4280.,  4412.,  4544.,  4605.,  4794.,  4983.,  5172.,  5598.,  5796.,  5994.,  6192.,  6663.,  6870.,  7077.,  7284.,  7800.,  8016.,  8232.,  8448.,  5409.,  5634.,  5859.,  6084.,  6546.,  6780.,  7014.,  7248.,  7755.,  7998.,  8241.,  8484.,  9036.,  9288.,  9540.,  9792.,  5042.,  5204.,  5366.,  5528.,  5864.,  6032.,  6200.,  6368.,  6734.,  6908.,  7082.,  7256.,  7652.,  7832.,  8012.,  8192.,  4098.,  4308.,  4518.,  4728.,  5080.,  5296.,  5512.,  5728.,  6110.,  6332.,  6554.,  6776.,  7188.,  7416.,  7644.,  7872.,  7821.,  8154.,  8487.,  8820.,  9390.,  9732., 10074., 10416., 11031., 11382., 11733., 12084., 12744., 13104., 13464., 13824.,  8625.,  8994.,  9363.,  9732., 10338., 10716., 11094., 11472., 12123., 12510., 12897., 13284., 13980., 14376., 14772., 15168.,  7442.,  7700.,  7958.,  8216.,  8648.,  8912.,  9176.,  9440.,  9902., 10172., 10442., 10712., 11204., 11480., 11756., 12032.,  2732.,  2904.,  3076.,  3248.,  3504.,  3680.,  3856.,  4032.,  4308.,  4488.,  4668.,  4848.,  5144.,  5328.,  5512.,  5696.,  5438.,  5708.,  5978.,  6248.,  6660.,  6936.,  7212.,  7488.,  7930.,  8212.,  8494.,  8776.,  9248.,  9536.,  9824., 10112.,  5910.,  6204.,  6498.,  6792.,  7228.,  7528.,  7828.,  8128.,  8594.,  8900.,  9206.,  9512., 10008., 10320., 10632., 10944.,  3660.,  3864.,  4068.,  4272.,  4560.,  4768.,  4976.,  5184.,  5492.,  5704.,  5916.,  6128.,  6456.,  6672.,  6888.,  7104.,   940.,   984.,  1028.,  1072.,  1200.,  1248.,  1296.,  1344.,  1492.,  1544.,  1596.,  1648.,  1816.,  1872.,  1928.,  1984.,  1822.,  1900.,  1978.,  2056.,  2308.,  2392.,  2476.,  2560.,  2842.,  2932.,  3022.,  3112.,  3424.,  3520.,  3616.,  3712.,  2422.,  2524.,  2626.,  2728.,  3004.,  3112.,  3220.,  3328.,  3634.,  3748.,  3862.,  3976.,  4312.,  4432.,  4552.,  4672.,  2700.,  2776.,  2852.,  2928.,  3152.,  3232.,  3312.,  3392.,  3636.,  3720.,  3804.,  3888.,  4152.,  4240.,  4328.,  4416.,  2210.,  2324.,  2438.,  2552.,  2808.,  2928.,  3048.,  3168.,  3454.,  3580.,  3706.,  3832.,  4148.,  4280.,  4412.,  4544.,  4605.,  4794.,  4983.,  5172.,  5598.,  5796.,  5994.,  6192.,  6663.,  6870.,  7077.,  7284.,  7800.,  8016.,  8232.,  8448.,  5409.,  5634.,  5859.,  6084.,  6546.,  6780.,  7014.,  7248.,  7755.,  7998.,  8241.,  8484.,  9036.,  9288.,  9540.,  9792.,  5042.,  5204.,  5366.,  5528.,  5864.,  6032.,  6200.,  6368.,  6734.,  6908.,  7082.,  7256.,  7652.,  7832.,  8012.,  8192.,  4098.,  4308.,  4518.,  4728.,  5080.,  5296.,  5512.,  5728.,  6110.,  6332.,  6554.,  6776.,  7188.,  7416.,  7644.,  7872.,  7821.,  8154.,  8487.,  8820.,  9390.,  9732., 10074., 10416., 11031., 11382., 11733., 12084., 12744., 13104., 13464., 13824.,  8625.,  8994.,  9363.,  9732., 10338., 10716., 11094., 11472., 12123., 12510., 12897., 13284., 13980., 14376., 14772., 15168.,  7442.,  7700.,  7958.,  8216.,  8648.,  8912.,  9176.,  9440.,  9902., 10172., 10442., 10712., 11204., 11480., 11756., 12032.,  2732.,  2904.,  3076.,  3248.,  3504.,  3680.,  3856.,  4032.,  4308.,  4488.,  4668.,  4848.,  5144.,  5328.,  5512.,  5696.,  5438.,  5708.,  5978.,  6248.,  6660.,  6936.,  7212.,  7488.,  7930.,  8212.,  8494.,  8776.,  9248.,  9536.,  9824., 10112.,  5910.,  6204.,  6498.,  6792.,  7228.,  7528.,  7828.,  8128.,  8594.,  8900.,  9206.,  9512., 10008., 10320., 10632., 10944.,  3660.,  3864.,  4068.,  4272.,  4560.,  4768.,  4976.,  5184.,  5492.,  5704.,  5916.,  6128.,  6456.,  6672.,  6888.,  7104.,   940.,   984.,  1028.,  1072.,  1200.,  1248.,  1296.,  1344.,  1492.,  1544.,  1596.,  1648.,  1816.,  1872.,  1928.,  1984.,  1822.,  1900.,  1978.,  2056.,  2308.,  2392.,  2476.,  2560.,  2842.,  2932.,  3022.,  3112.,  3424.,  3520.,  3616.,  3712.,  2422.,  2524.,  2626.,  2728.,  3004.,  3112.,  3220.,  3328.,  3634.,  3748.,  3862.,  3976.,  4312.,  4432.,  4552.,  4672.,  2700.,  2776.,  2852.,  2928.,  3152.,  3232.,  3312.,  3392.,  3636.,  3720.,  3804.,  3888.,  4152.,  4240.,  4328.,  4416.,  2210.,  2324.,  2438.,  2552.,  2808.,  2928.,  3048.,  3168.,  3454.,  3580.,  3706.,  3832.,  4148.,  4280.,  4412.,  4544.,  4605.,  4794.,  4983.,  5172.,  5598.,  5796.,  5994.,  6192.,  6663.,  6870.,  7077.,  7284.,  7800.,  8016.,  8232.,  8448.,  5409.,  5634.,  5859.,  6084.,  6546.,  6780.,  7014.,  7248.,  7755.,  7998.,  8241.,  8484.,  9036.,  9288.,  9540.,  9792.,  5042.,  5204.,  5366.,  5528.,  5864.,  6032.,  6200.,  6368.,  6734.,  6908.,  7082.,  7256.,  7652.,  7832.,  8012.,  8192.,  4098.,  4308.,  4518.,  4728.,  5080.,  5296.,  5512.,  5728.,  6110.,  6332.,  6554.,  6776.,  7188.,  7416.,  7644.,  7872.,  7821.,  8154.,  8487.,  8820.,  9390.,  9732., 10074., 10416., 11031., 11382., 11733., 12084., 12744., 13104., 13464., 13824.,  8625.,  8994.,  9363.,  9732., 10338., 10716., 11094., 11472., 12123., 12510., 12897., 13284., 13980., 14376., 14772., 15168.,  7442.,  7700.,  7958.,  8216.,  8648.,  8912.,  9176.,  9440.,  9902., 10172., 10442., 10712., 11204., 11480., 11756., 12032.,  2732.,  2904.,  3076.,  3248.,  3504.,  3680.,  3856.,  4032.,  4308.,  4488.,  4668.,  4848.,  5144.,  5328.,  5512.,  5696.,  5438.,  5708.,  5978.,  6248.,  6660.,  6936.,  7212.,  7488.,  7930.,  8212.,  8494.,  8776.,  9248.,  9536.,  9824., 10112.,  5910.,  6204.,  6498.,  6792.,  7228.,  7528.,  7828.,  8128.,  8594.,  8900.,  9206.,  9512., 10008., 10320., 10632., 10944.,  3660.,  3864.,  4068.,  4272.,  4560.,  4768.,  4976.,  5184.,  5492.,  5704.,  5916.,  6128.,  6456.,  6672.,  6888.,  7104.};
  const std::array<int, 4> in_shape = {{ 3, 4, 4, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x4x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4605.,  4794.,  4983.,  5172.,  5598.,  5796.,  5994.,  6192.,  6663.,  6870.,  7077.,  7284.,  7800.,  8016.,  8232.,  8448.,  5409.,  5634.,  5859.,  6084.,  6546.,  6780.,  7014.,  7248.,  7755.,  7998.,  8241.,  8484.,  9036.,  9288.,  9540.,  9792.,  7821.,  8154.,  8487.,  8820.,  9390.,  9732., 10074., 10416., 11031., 11382., 11733., 12084., 12744., 13104., 13464., 13824.,  8625.,  8994.,  9363.,  9732., 10338., 10716., 11094., 11472., 12123., 12510., 12897., 13284., 13980., 14376., 14772., 15168.,  4605.,  4794.,  4983.,  5172.,  5598.,  5796.,  5994.,  6192.,  6663.,  6870.,  7077.,  7284.,  7800.,  8016.,  8232.,  8448.,  5409.,  5634.,  5859.,  6084.,  6546.,  6780.,  7014.,  7248.,  7755.,  7998.,  8241.,  8484.,  9036.,  9288.,  9540.,  9792.,  7821.,  8154.,  8487.,  8820.,  9390.,  9732., 10074., 10416., 11031., 11382., 11733., 12084., 12744., 13104., 13464., 13824.,  8625.,  8994.,  9363.,  9732., 10338., 10716., 11094., 11472., 12123., 12510., 12897., 13284., 13980., 14376., 14772., 15168.,  4605.,  4794.,  4983.,  5172.,  5598.,  5796.,  5994.,  6192.,  6663.,  6870.,  7077.,  7284.,  7800.,  8016.,  8232.,  8448.,  5409.,  5634.,  5859.,  6084.,  6546.,  6780.,  7014.,  7248.,  7755.,  7998.,  8241.,  8484.,  9036.,  9288.,  9540.,  9792.,  7821.,  8154.,  8487.,  8820.,  9390.,  9732., 10074., 10416., 11031., 11382., 11733., 12084., 12744., 13104., 13464., 13824.,  8625.,  8994.,  9363.,  9732., 10338., 10716., 11094., 11472., 12123., 12510., 12897., 13284., 13980., 14376., 14772., 15168.};
  const std::array<int, 4> in_shape = {{ 3, 4, 4, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x5x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 128.,  202.,  241.,  280.,  184.,  276.,  411.,  456.,  501.,  318.,  441.,  636.,  681.,  726.,  453.,  240.,  331.,  352.,  373.,  220.,  688.,  982., 1021., 1060.,  664.,  936., 1311., 1356., 1401.,  858., 1101., 1536., 1581., 1626.,  993.,  560.,  751.,  772.,  793.,  460., 1248., 1762., 1801., 1840., 1144., 1596., 2211., 2256., 2301., 1398., 1761., 2436., 2481., 2526., 1533.,  880., 1171., 1192., 1213.,  700.};
  const std::array<int, 4> in_shape = {{ 3, 4, 5, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x5x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 411.,  456.,  501.,  636.,  681.,  726., 1311., 1356., 1401., 1536., 1581., 1626., 2211., 2256., 2301., 2436., 2481., 2526.};
  const std::array<int, 4> in_shape = {{ 3, 4, 5, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x5x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 240.,  256.,  377.,  404.,  449.,  482.,  521.,  560.,  340.,  368.,  513.,  552.,  759.,  822.,  840.,  912.,  921., 1002.,  579.,  636.,  813.,  882., 1164., 1272., 1245., 1362., 1326., 1452.,  819.,  906.,  424.,  480.,  575.,  662.,  611.,  704.,  647.,  746.,  372.,  440., 1280., 1376., 1817., 1964., 1889., 2042., 1961., 2120., 1220., 1328., 1713., 1872., 2379., 2622., 2460., 2712., 2541., 2802., 1539., 1716., 2013., 2202., 2784., 3072., 2865., 3162., 2946., 3252., 1779., 1986.,  984., 1120., 1295., 1502., 1331., 1544., 1367., 1586.,  772.,  920., 2320., 2496., 3257., 3524., 3329., 3602., 3401., 3680., 2100., 2288., 2913., 3192., 3999., 4422., 4080., 4512., 4161., 4602., 2499., 2796., 3213., 3522., 4404., 4872., 4485., 4962., 4566., 5052., 2739., 3066., 1544., 1760., 2015., 2342., 2051., 2384., 2087., 2426., 1172., 1400.};
  const std::array<int, 4> in_shape = {{ 3, 4, 5, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x5x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 759.,  822.,  840.,  912.,  921., 1002., 1164., 1272., 1245., 1362., 1326., 1452., 2379., 2622., 2460., 2712., 2541., 2802., 2784., 3072., 2865., 3162., 2946., 3252., 3999., 4422., 4080., 4512., 4161., 4602., 4404., 4872., 4485., 4962., 4566., 5052.};
  const std::array<int, 4> in_shape = {{ 3, 4, 5, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x5x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  464.,   480.,   496.,   512.,   727.,   754.,   781.,   808.,   865.,   898.,   931.,   964.,  1003.,  1042.,  1081.,  1120.,   652.,   680.,   708.,   736.,   987.,  1026.,  1065.,  1104.,  1455.,  1518.,  1581.,  1644.,  1608.,  1680.,  1752.,  1824.,  1761.,  1842.,  1923.,  2004.,  1101.,  1158.,  1215.,  1272.,  1557.,  1626.,  1695.,  1764.,  2220.,  2328.,  2436.,  2544.,  2373.,  2490.,  2607.,  2724.,  2526.,  2652.,  2778.,  2904.,  1551.,  1638.,  1725.,  1812.,   792.,   848.,   904.,   960.,  1063.,  1150.,  1237.,  1324.,  1129.,  1222.,  1315.,  1408.,  1195.,  1294.,  1393.,  1492.,   676.,   744.,   812.,   880.,  2464.,  2560.,  2656.,  2752.,  3487.,  3634.,  3781.,  3928.,  3625.,  3778.,  3931.,  4084.,  3763.,  3922.,  4081.,  4240.,  2332.,  2440.,  2548.,  2656.,  3267.,  3426.,  3585.,  3744.,  4515.,  4758.,  5001.,  5244.,  4668.,  4920.,  5172.,  5424.,  4821.,  5082.,  5343.,  5604.,  2901.,  3078.,  3255.,  3432.,  3837.,  4026.,  4215.,  4404.,  5280.,  5568.,  5856.,  6144.,  5433.,  5730.,  6027.,  6324.,  5586.,  5892.,  6198.,  6504.,  3351.,  3558.,  3765.,  3972.,  1832.,  1968.,  2104.,  2240.,  2383.,  2590.,  2797.,  3004.,  2449.,  2662.,  2875.,  3088.,  2515.,  2734.,  2953.,  3172.,  1396.,  1544.,  1692.,  1840.,  4464.,  4640.,  4816.,  4992.,  6247.,  6514.,  6781.,  7048.,  6385.,  6658.,  6931.,  7204.,  6523.,  6802.,  7081.,  7360.,  4012.,  4200.,  4388.,  4576.,  5547.,  5826.,  6105.,  6384.,  7575.,  7998.,  8421.,  8844.,  7728.,  8160.,  8592.,  9024.,  7881.,  8322.,  8763.,  9204.,  4701.,  4998.,  5295.,  5592.,  6117.,  6426.,  6735.,  7044.,  8340.,  8808.,  9276.,  9744.,  8493.,  8970.,  9447.,  9924.,  8646.,  9132.,  9618., 10104.,  5151.,  5478.,  5805.,  6132.,  2872.,  3088.,  3304.,  3520.,  3703.,  4030.,  4357.,  4684.,  3769.,  4102.,  4435.,  4768.,  3835.,  4174.,  4513.,  4852.,  2116.,  2344.,  2572.,  2800.};
  const std::array<int, 4> in_shape = {{ 3, 4, 5, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x5x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1455.,  1518.,  1581.,  1644.,  1608.,  1680.,  1752.,  1824.,  1761.,  1842.,  1923.,  2004.,  2220.,  2328.,  2436.,  2544.,  2373.,  2490.,  2607.,  2724.,  2526.,  2652.,  2778.,  2904.,  4515.,  4758.,  5001.,  5244.,  4668.,  4920.,  5172.,  5424.,  4821.,  5082.,  5343.,  5604.,  5280.,  5568.,  5856.,  6144.,  5433.,  5730.,  6027.,  6324.,  5586.,  5892.,  6198.,  6504.,  7575.,  7998.,  8421.,  8844.,  7728.,  8160.,  8592.,  9024.,  7881.,  8322.,  8763.,  9204.,  8340.,  8808.,  9276.,  9744.,  8493.,  8970.,  9447.,  9924.,  8646.,  9132.,  9618., 10104.};
  const std::array<int, 4> in_shape = {{ 3, 4, 5, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x5x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  428.,   512.,   682.,   808.,   826.,   964.,   970.,  1120.,   636.,   736.,   966.,  1104.,  1437.,  1644.,  1599.,  1824.,  1761.,  2004.,  1110.,  1272.,  1566.,  1764.,  2247.,  2544.,  2409.,  2724.,  2571.,  2904.,  1590.,  1812.,   820.,   960.,  1114.,  1324.,  1186.,  1408.,  1258.,  1492.,   724.,   880.,  2508.,  2752.,  3562.,  3928.,  3706.,  4084.,  3850.,  4240.,  2396.,  2656.,  3366.,  3744.,  4677.,  5244.,  4839.,  5424.,  5001.,  5604.,  3030.,  3432.,  3966.,  4404.,  5487.,  6144.,  5649.,  6324.,  5811.,  6504.,  3510.,  3972.,  1940.,  2240.,  2554.,  3004.,  2626.,  3088.,  2698.,  3172.,  1524.,  1840.,  4588.,  4992.,  6442.,  7048.,  6586.,  7204.,  6730.,  7360.,  4156.,  4576.,  5766.,  6384.,  7917.,  8844.,  8079.,  9024.,  8241.,  9204.,  4950.,  5592.,  6366.,  7044.,  8727.,  9744.,  8889.,  9924.,  9051., 10104.,  5430.,  6132.,  3060.,  3520.,  3994.,  4684.,  4066.,  4768.,  4138.,  4852.,  2324.,  2800.};
  const std::array<int, 4> in_shape = {{ 3, 4, 5, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x5x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1437.,  1644.,  1599.,  1824.,  1761.,  2004.,  2247.,  2544.,  2409.,  2724.,  2571.,  2904.,  4677.,  5244.,  4839.,  5424.,  5001.,  5604.,  5487.,  6144.,  5649.,  6324.,  5811.,  6504.,  7917.,  8844.,  8079.,  9024.,  8241.,  9204.,  8727.,  9744.,  8889.,  9924.,  9051., 10104.};
  const std::array<int, 4> in_shape = {{ 3, 4, 5, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x5x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  828.,   856.,   992.,  1024.,  1316.,  1364.,  1562.,  1616.,  1592.,  1652.,  1862.,  1928.,  1868.,  1940.,  2162.,  2240.,  1220.,  1272.,  1416.,  1472.,  1860.,  1932.,  2130.,  2208.,  2757.,  2874.,  3162.,  3288.,  3063.,  3198.,  3504.,  3648.,  3369.,  3522.,  3846.,  4008.,  2112.,  2220.,  2430.,  2544.,  3000.,  3132.,  3390.,  3528.,  4287.,  4494.,  4872.,  5088.,  4593.,  4818.,  5214.,  5448.,  4899.,  5142.,  5556.,  5808.,  3012.,  3180.,  3450.,  3624.,  1532.,  1640.,  1808.,  1920.,  2060.,  2228.,  2474.,  2648.,  2192.,  2372.,  2630.,  2816.,  2324.,  2516.,  2786.,  2984.,  1316.,  1448.,  1624.,  1760.,  4828.,  5016.,  5312.,  5504.,  6836.,  7124.,  7562.,  7856.,  7112.,  7412.,  7862.,  8168.,  7388.,  7700.,  8162.,  8480.,  4580.,  4792.,  5096.,  5312.,  6420.,  6732.,  7170.,  7488.,  8877.,  9354., 10002., 10488.,  9183.,  9678., 10344., 10848.,  9489., 10002., 10686., 11208.,  5712.,  6060.,  6510.,  6864.,  7560.,  7932.,  8430.,  8808., 10407., 10974., 11712., 12288., 10713., 11298., 12054., 12648., 11019., 11622., 12396., 13008.,  6612.,  7020.,  7530.,  7944.,  3612.,  3880.,  4208.,  4480.,  4700.,  5108.,  5594.,  6008.,  4832.,  5252.,  5750.,  6176.,  4964.,  5396.,  5906.,  6344.,  2756.,  3048.,  3384.,  3680.,  8828.,  9176.,  9632.,  9984., 12356., 12884., 13562., 14096., 12632., 13172., 13862., 14408., 12908., 13460., 14162., 14720.,  7940.,  8312.,  8776.,  9152., 10980., 11532., 12210., 12768., 14997., 15834., 16842., 17688., 15303., 16158., 17184., 18048., 15609., 16482., 17526., 18408.,  9312.,  9900., 10590., 11184., 12120., 12732., 13470., 14088., 16527., 17454., 18552., 19488., 16833., 17778., 18894., 19848., 17139., 18102., 19236., 20208., 10212., 10860., 11610., 12264.,  5692.,  6120.,  6608.,  7040.,  7340.,  7988.,  8714.,  9368.,  7472.,  8132.,  8870.,  9536.,  7604.,  8276.,  9026.,  9704.,  4196.,  4648.,  5144.,  5600.};
  const std::array<int, 4> in_shape = {{ 3, 4, 5, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x5x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2757.,  2874.,  3162.,  3288.,  3063.,  3198.,  3504.,  3648.,  3369.,  3522.,  3846.,  4008.,  4287.,  4494.,  4872.,  5088.,  4593.,  4818.,  5214.,  5448.,  4899.,  5142.,  5556.,  5808.,  8877.,  9354., 10002., 10488.,  9183.,  9678., 10344., 10848.,  9489., 10002., 10686., 11208., 10407., 10974., 11712., 12288., 10713., 11298., 12054., 12648., 11019., 11622., 12396., 13008., 14997., 15834., 16842., 17688., 15303., 16158., 17184., 18048., 15609., 16482., 17526., 18408., 16527., 17454., 18552., 19488., 16833., 17778., 18894., 19848., 17139., 18102., 19236., 20208.};
  const std::array<int, 4> in_shape = {{ 3, 4, 5, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x5x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1628.,  1656.,  1684.,  1712.,  1952.,  1984.,  2016.,  2048.,  2584.,  2632.,  2680.,  2728.,  3070.,  3124.,  3178.,  3232.,  3124.,  3184.,  3244.,  3304.,  3658.,  3724.,  3790.,  3856.,  3664.,  3736.,  3808.,  3880.,  4246.,  4324.,  4402.,  4480.,  2388.,  2440.,  2492.,  2544.,  2776.,  2832.,  2888.,  2944.,  3648.,  3720.,  3792.,  3864.,  4182.,  4260.,  4338.,  4416.,  5397.,  5514.,  5631.,  5748.,  6198.,  6324.,  6450.,  6576.,  5991.,  6126.,  6261.,  6396.,  6864.,  7008.,  7152.,  7296.,  6585.,  6738.,  6891.,  7044.,  7530.,  7692.,  7854.,  8016.,  4116.,  4224.,  4332.,  4440.,  4746.,  4860.,  4974.,  5088.,  5868.,  6000.,  6132.,  6264.,  6642.,  6780.,  6918.,  7056.,  8367.,  8574.,  8781.,  8988.,  9528.,  9744.,  9960., 10176.,  8961.,  9186.,  9411.,  9636., 10194., 10428., 10662., 10896.,  9555.,  9798., 10041., 10284., 10860., 11112., 11364., 11616.,  5856.,  6024.,  6192.,  6360.,  6726.,  6900.,  7074.,  7248.,  2956.,  3064.,  3172.,  3280.,  3504.,  3616.,  3728.,  3840.,  3952.,  4120.,  4288.,  4456.,  4774.,  4948.,  5122.,  5296.,  4204.,  4384.,  4564.,  4744.,  5074.,  5260.,  5446.,  5632.,  4456.,  4648.,  4840.,  5032.,  5374.,  5572.,  5770.,  5968.,  2500.,  2632.,  2764.,  2896.,  3112.,  3248.,  3384.,  3520.,  9468.,  9656.,  9844., 10032., 10432., 10624., 10816., 11008., 13384., 13672., 13960., 14248., 14830., 15124., 15418., 15712., 13924., 14224., 14524., 14824., 15418., 15724., 16030., 16336., 14464., 14776., 15088., 15400., 16006., 16324., 16642., 16960.,  8948.,  9160.,  9372.,  9584.,  9976., 10192., 10408., 10624., 12528., 12840., 13152., 13464., 14022., 14340., 14658., 14976., 17277., 17754., 18231., 18708., 19518., 20004., 20490., 20976., 17871., 18366., 18861., 19356., 20184., 20688., 21192., 21696., 18465., 18978., 19491., 20004., 20850., 21372., 21894., 22416., 11076., 11424., 11772., 12120., 12666., 13020., 13374., 13728., 14748., 15120., 15492., 15864., 16482., 16860., 17238., 17616., 20247., 20814., 21381., 21948., 22848., 23424., 24000., 24576., 20841., 21426., 22011., 22596., 23514., 24108., 24702., 25296., 21435., 22038., 22641., 23244., 24180., 24792., 25404., 26016., 12816., 13224., 13632., 14040., 14646., 15060., 15474., 15888.,  6956.,  7224.,  7492.,  7760.,  8144.,  8416.,  8688.,  8960.,  8992.,  9400.,  9808., 10216., 10774., 11188., 11602., 12016.,  9244.,  9664., 10084., 10504., 11074., 11500., 11926., 12352.,  9496.,  9928., 10360., 10792., 11374., 11812., 12250., 12688.,  5220.,  5512.,  5804.,  6096.,  6472.,  6768.,  7064.,  7360., 17308., 17656., 18004., 18352., 18912., 19264., 19616., 19968., 24184., 24712., 25240., 25768., 26590., 27124., 27658., 28192., 24724., 25264., 25804., 26344., 27178., 27724., 28270., 28816., 25264., 25816., 26368., 26920., 27766., 28324., 28882., 29440., 15508., 15880., 16252., 16624., 17176., 17552., 17928., 18304., 21408., 21960., 22512., 23064., 23862., 24420., 24978., 25536., 29157., 29994., 30831., 31668., 32838., 33684., 34530., 35376., 29751., 30606., 31461., 32316., 33504., 34368., 35232., 36096., 30345., 31218., 32091., 32964., 34170., 35052., 35934., 36816., 18036., 18624., 19212., 19800., 20586., 21180., 21774., 22368., 23628., 24240., 24852., 25464., 26322., 26940., 27558., 28176., 32127., 33054., 33981., 34908., 36168., 37104., 38040., 38976., 32721., 33666., 34611., 35556., 36834., 37788., 38742., 39696., 33315., 34278., 35241., 36204., 37500., 38472., 39444., 40416., 19776., 20424., 21072., 21720., 22566., 23220., 23874., 24528., 10956., 11384., 11812., 12240., 12784., 13216., 13648., 14080., 14032., 14680., 15328., 15976., 16774., 17428., 18082., 18736., 14284., 14944., 15604., 16264., 17074., 17740., 18406., 19072., 14536., 15208., 15880., 16552., 17374., 18052., 18730., 19408.,  7940.,  8392.,  8844.,  9296.,  9832., 10288., 10744., 11200.};
  const std::array<int, 4> in_shape = {{ 3, 4, 5, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x5x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5397.,  5514.,  5631.,  5748.,  6198.,  6324.,  6450.,  6576.,  5991.,  6126.,  6261.,  6396.,  6864.,  7008.,  7152.,  7296.,  6585.,  6738.,  6891.,  7044.,  7530.,  7692.,  7854.,  8016.,  8367.,  8574.,  8781.,  8988.,  9528.,  9744.,  9960., 10176.,  8961.,  9186.,  9411.,  9636., 10194., 10428., 10662., 10896.,  9555.,  9798., 10041., 10284., 10860., 11112., 11364., 11616., 17277., 17754., 18231., 18708., 19518., 20004., 20490., 20976., 17871., 18366., 18861., 19356., 20184., 20688., 21192., 21696., 18465., 18978., 19491., 20004., 20850., 21372., 21894., 22416., 20247., 20814., 21381., 21948., 22848., 23424., 24000., 24576., 20841., 21426., 22011., 22596., 23514., 24108., 24702., 25296., 21435., 22038., 22641., 23244., 24180., 24792., 25404., 26016., 29157., 29994., 30831., 31668., 32838., 33684., 34530., 35376., 29751., 30606., 31461., 32316., 33504., 34368., 35232., 36096., 30345., 31218., 32091., 32964., 34170., 35052., 35934., 36816., 32127., 33054., 33981., 34908., 36168., 37104., 38040., 38976., 32721., 33666., 34611., 35556., 36834., 37788., 38742., 39696., 33315., 34278., 35241., 36204., 37500., 38472., 39444., 40416.};
  const std::array<int, 4> in_shape = {{ 3, 4, 5, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x5x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1556.,  1712.,  1876.,  2048.,  2494.,  2728.,  2974.,  3232.,  3046.,  3304.,  3574.,  3856.,  3598.,  3880.,  4174.,  4480.,  2356.,  2544.,  2740.,  2944.,  3606.,  3864.,  4134.,  4416.,  5361.,  5748.,  6153.,  6576.,  5973.,  6396.,  6837.,  7296.,  6585.,  7044.,  7521.,  8016.,  4134.,  4440.,  4758.,  5088.,  5886.,  6264.,  6654.,  7056.,  8421.,  8988.,  9573., 10176.,  9033.,  9636., 10257., 10896.,  9645., 10284., 10941., 11616.,  5934.,  6360.,  6798.,  7248.,  3012.,  3280.,  3556.,  3840.,  4054.,  4456.,  4870.,  5296.,  4318.,  4744.,  5182.,  5632.,  4582.,  5032.,  5494.,  5968.,  2596.,  2896.,  3204.,  3520.,  9556., 10032., 10516., 11008., 13534., 14248., 14974., 15712., 14086., 14824., 15574., 16336., 14638., 15400., 16174., 16960.,  9076.,  9584., 10100., 10624., 12726., 13464., 14214., 14976., 17601., 18708., 19833., 20976., 18213., 19356., 20517., 21696., 18825., 20004., 21201., 22416., 11334., 12120., 12918., 13728., 15006., 15864., 16734., 17616., 20661., 21948., 23253., 24576., 21273., 22596., 23937., 25296., 21885., 23244., 24621., 26016., 13134., 14040., 14958., 15888.,  7172.,  7760.,  8356.,  8960.,  9334., 10216., 11110., 12016.,  9598., 10504., 11422., 12352.,  9862., 10792., 11734., 12688.,  5476.,  6096.,  6724.,  7360., 17556., 18352., 19156., 19968., 24574., 25768., 26974., 28192., 25126., 26344., 27574., 28816., 25678., 26920., 28174., 29440., 15796., 16624., 17460., 18304., 21846., 23064., 24294., 25536., 29841., 31668., 33513., 35376., 30453., 32316., 34197., 36096., 31065., 32964., 34881., 36816., 18534., 19800., 21078., 22368., 24126., 25464., 26814., 28176., 32901., 34908., 36933., 38976., 33513., 35556., 37617., 39696., 34125., 36204., 38301., 40416., 20334., 21720., 23118., 24528., 11332., 12240., 13156., 14080., 14614., 15976., 17350., 18736., 14878., 16264., 17662., 19072., 15142., 16552., 17974., 19408.,  8356.,  9296., 10244., 11200.};
  const std::array<int, 4> in_shape = {{ 3, 4, 5, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x5x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5361.,  5748.,  6153.,  6576.,  5973.,  6396.,  6837.,  7296.,  6585.,  7044.,  7521.,  8016.,  8421.,  8988.,  9573., 10176.,  9033.,  9636., 10257., 10896.,  9645., 10284., 10941., 11616., 17601., 18708., 19833., 20976., 18213., 19356., 20517., 21696., 18825., 20004., 21201., 22416., 20661., 21948., 23253., 24576., 21273., 22596., 23937., 25296., 21885., 23244., 24621., 26016., 29841., 31668., 33513., 35376., 30453., 32316., 34197., 36096., 31065., 32964., 34881., 36816., 32901., 34908., 36933., 38976., 33513., 35556., 37617., 39696., 34125., 36204., 38301., 40416.};
  const std::array<int, 4> in_shape = {{ 3, 4, 5, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x5x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3060.,  3112.,  3368.,  3424.,  3692.,  3752.,  4032.,  4096.,  4898.,  4988.,  5360.,  5456.,  5846.,  5948.,  6356.,  6464.,  5978.,  6092.,  6488.,  6608.,  7022.,  7148.,  7580.,  7712.,  7058.,  7196.,  7616.,  7760.,  8198.,  8348.,  8804.,  8960.,  4612.,  4712.,  4984.,  5088.,  5372.,  5480.,  5776.,  5888.,  7074.,  7212.,  7584.,  7728.,  8118.,  8268.,  8676.,  8832., 10497., 10722., 11262., 11496., 12063., 12306., 12900., 13152., 11685., 11946., 12522., 12792., 13395., 13674., 14304., 14592., 12873., 13170., 13782., 14088., 14727., 15042., 15708., 16032.,  8058.,  8268.,  8664.,  8880.,  9294.,  9516.,  9948., 10176., 11514., 11772., 12264., 12528., 13038., 13308., 13836., 14112., 16437., 16842., 17562., 17976., 18723., 19146., 19920., 20352., 17625., 18066., 18822., 19272., 20055., 20514., 21324., 21792., 18813., 19290., 20082., 20568., 21387., 21882., 22728., 23232., 11538., 11868., 12384., 12720., 13254., 13596., 14148., 14496.,  5812.,  6024.,  6344.,  6560.,  6892.,  7112.,  7456.,  7680.,  7778.,  8108.,  8576.,  8912.,  9398.,  9740., 10244., 10592.,  8282.,  8636.,  9128.,  9488.,  9998., 10364., 10892., 11264.,  8786.,  9164.,  9680., 10064., 10598., 10988., 11540., 11936.,  4932.,  5192.,  5528.,  5792.,  6140.,  6408.,  6768.,  7040., 18740., 19112., 19688., 20064., 20652., 21032., 21632., 22016., 26498., 27068., 27920., 28496., 29366., 29948., 30836., 31424., 27578., 28172., 29048., 29648., 30542., 31148., 32060., 32672., 28658., 29276., 30176., 30800., 31718., 32348., 33284., 33920., 17732., 18152., 18744., 19168., 19772., 20200., 20816., 21248., 24834., 25452., 26304., 26928., 27798., 28428., 29316., 29952., 25937., 26754., 27886., 28712., 29871., 30706., 31892., 32736., 19829., 20554., 21594., 22328., 23395., 24138., 25232., 25984., 14745., 15378., 16326., 16968., 17943., 18594., 19596., 20256.,  8410.,  8844.,  9464.,  9904., 10542., 10988., 11644., 12096., 13658., 14140., 14856., 15344., 16078., 16572., 17324., 17824., 13061., 13674., 14602., 15224., 16179., 16810., 17792., 18432., 10025., 10546., 11382., 11912., 12775., 13314., 14204., 14752.,  8013.,  8442.,  9186.,  9624., 10395., 10842., 11640., 12096.,  4466.,  4764.,  5248.,  5552.,  6054.,  6364.,  6884.,  7200.,  4340.,  4616.,  5000.,  5280.,  5676.,  5960.,  6368.,  6656.,  3010.,  3308.,  3744.,  4048.,  4502.,  4812.,  5284.,  5600.,  2362.,  2556.,  2888.,  3088.,  3438.,  3644.,  4012.,  4224.,  2738.,  2828.,  3056.,  3152.,  3398.,  3500.,  3764.,  3872.,  1668.,  1736.,  1880.,  1952.,  2108.,  2184.,  2352.,  2432.,  9332.,  9512.,  9896., 10080., 10476., 10664., 11072., 11264., 13538., 13820., 14384., 14672., 15254., 15548., 16148., 16448., 14618., 14924., 15512., 15824., 16430., 16748., 17372., 17696., 15698., 16028., 16640., 16976., 17606., 17948., 18596., 18944.,  9860., 10088., 10488., 10720., 11132., 11368., 11792., 12032., 14178., 14508., 15072., 15408., 15990., 16332., 16932., 17280., 20001., 20514., 21342., 21864., 22719., 23250., 24132., 24672., 21189., 21738., 22602., 23160., 24051., 24618., 25536., 26112., 22377., 22962., 23862., 24456., 25383., 25986., 26940., 27552., 13626., 14028., 14616., 15024., 15630., 16044., 16668., 17088., 18618., 19068., 19752., 20208., 20910., 21372., 22092., 22560., 25941., 26634., 27642., 28344., 29379., 30090., 31152., 31872., 27129., 27858., 28902., 29640., 30711., 31458., 32556., 33312., 28317., 29082., 30162., 30936., 32043., 32826., 33960., 34752., 17106., 17628., 18336., 18864., 19590., 20124., 20868., 21408.,  9012.,  9352.,  9800., 10144., 10604., 10952., 11424., 11776., 11810., 12332., 12992., 13520., 14198., 14732., 15428., 15968., 12314., 12860., 13544., 14096., 14798., 15356., 16076., 16640., 12818., 13388., 14096., 14672., 15398., 15980., 16724., 17312.,  7108.,  7496.,  7960.,  8352.,  8828.,  9224.,  9712., 10112.};
  const std::array<int, 4> in_shape = {{ 3, 4, 5, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x5x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10497., 10722., 11262., 11496., 12063., 12306., 12900., 13152., 11685., 11946., 12522., 12792., 13395., 13674., 14304., 14592., 12873., 13170., 13782., 14088., 14727., 15042., 15708., 16032., 16437., 16842., 17562., 17976., 18723., 19146., 19920., 20352., 17625., 18066., 18822., 19272., 20055., 20514., 21324., 21792., 18813., 19290., 20082., 20568., 21387., 21882., 22728., 23232., 25937., 26754., 27886., 28712., 29871., 30706., 31892., 32736., 19829., 20554., 21594., 22328., 23395., 24138., 25232., 25984., 14745., 15378., 16326., 16968., 17943., 18594., 19596., 20256., 13061., 13674., 14602., 15224., 16179., 16810., 17792., 18432., 10025., 10546., 11382., 11912., 12775., 13314., 14204., 14752.,  8013.,  8442.,  9186.,  9624., 10395., 10842., 11640., 12096., 20001., 20514., 21342., 21864., 22719., 23250., 24132., 24672., 21189., 21738., 22602., 23160., 24051., 24618., 25536., 26112., 22377., 22962., 23862., 24456., 25383., 25986., 26940., 27552., 25941., 26634., 27642., 28344., 29379., 30090., 31152., 31872., 27129., 27858., 28902., 29640., 30711., 31458., 32556., 33312., 28317., 29082., 30162., 30936., 32043., 32826., 33960., 34752.};
  const std::array<int, 4> in_shape = {{ 3, 4, 5, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x5x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2868.,  2920.,  2972.,  3024.,  3352.,  3408.,  3464.,  3520.,  3868.,  3928.,  3988.,  4048.,  4416.,  4480.,  4544.,  4608.,  5994.,  6084.,  6174.,  6264.,  6784.,  6880.,  6976.,  7072.,  7622.,  7724.,  7826.,  7928.,  8508.,  8616.,  8724.,  8832.,  7618.,  7732.,  7846.,  7960.,  8504.,  8624.,  8744.,  8864.,  9438.,  9564.,  9690.,  9816., 10420., 10552., 10684., 10816.,  9242.,  9380.,  9518.,  9656., 10224., 10368., 10512., 10656., 11254., 11404., 11554., 11704., 12332., 12488., 12644., 12800.,  9124.,  9224.,  9324.,  9424.,  9864.,  9968., 10072., 10176., 10636., 10744., 10852., 10960., 11440., 11552., 11664., 11776.,  8250.,  8388.,  8526.,  8664.,  9136.,  9280.,  9424.,  9568., 10070., 10220., 10370., 10520., 11052., 11208., 11364., 11520., 14497., 14722., 14947., 15172., 15890., 16124., 16358., 16592., 17355., 17598., 17841., 18084., 18892., 19144., 19396., 19648., 16325., 16586., 16847., 17108., 17862., 18132., 18402., 18672., 19471., 19750., 20029., 20308., 21152., 21440., 21728., 22016., 18153., 18450., 18747., 19044., 19834., 20140., 20446., 20752., 21587., 21902., 22217., 22532., 23412., 23736., 24060., 24384., 15906., 16116., 16326., 16536., 17112., 17328., 17544., 17760., 18366., 18588., 18810., 19032., 19668., 19896., 20124., 20352., 14450., 14708., 14966., 15224., 15816., 16080., 16344., 16608., 17230., 17500., 17770., 18040., 18692., 18968., 19244., 19520., 23637., 24042., 24447., 24852., 25750., 26164., 26578., 26992., 27935., 28358., 28781., 29204., 30192., 30624., 31056., 31488., 25465., 25906., 26347., 26788., 27722., 28172., 28622., 29072., 30051., 30510., 30969., 31428., 32452., 32920., 33388., 33856., 27293., 27770., 28247., 28724., 29694., 30180., 30666., 31152., 32167., 32662., 33157., 33652., 34712., 35216., 35720., 36224., 22746., 23076., 23406., 23736., 24432., 24768., 25104., 25440., 26166., 26508., 26850., 27192., 27948., 28296., 28644., 28992., 11412., 11624., 11836., 12048., 12472., 12688., 12904., 13120., 13564., 13784., 14004., 14224., 14688., 14912., 15136., 15360., 15226., 15556., 15886., 16216., 16816., 17152., 17488., 17824., 18454., 18796., 19138., 19480., 20140., 20488., 20836., 21184., 16210., 16564., 16918., 17272., 17896., 18256., 18616., 18976., 19630., 19996., 20362., 20728., 21412., 21784., 22156., 22528., 17194., 17572., 17950., 18328., 18976., 19360., 19744., 20128., 20806., 21196., 21586., 21976., 22684., 23080., 23476., 23872.,  9604.,  9864., 10124., 10384., 10792., 11056., 11320., 11584., 12012., 12280., 12548., 12816., 13264., 13536., 13808., 14080., 23668., 24040., 24412., 24784., 25432., 25808., 26184., 26560., 27228., 27608., 27988., 28368., 29056., 29440., 29824., 30208., 38474., 39044., 39614., 40184., 41184., 41760., 42336., 42912., 43942., 44524., 45106., 45688., 46748., 47336., 47924., 48512., 40098., 40692., 41286., 41880., 42904., 43504., 44104., 44704., 45758., 46364., 46970., 47576., 48660., 49272., 49884., 50496., 41722., 42340., 42958., 43576., 44624., 45248., 45872., 46496., 47574., 48204., 48834., 49464., 50572., 51208., 51844., 52480., 35044., 35464., 35884., 36304., 37064., 37488., 37912., 38336., 39116., 39544., 39972., 40400., 41200., 41632., 42064., 42496., 33050., 33668., 34286., 34904., 35856., 36480., 37104., 37728., 38710., 39340., 39970., 40600., 41612., 42248., 42884., 43520., 50929., 51746., 52563., 53380., 54690., 55516., 56342., 57168., 58523., 59358., 60193., 61028., 62428., 63272., 64116., 64960., 38293., 39018., 39743., 40468., 41686., 42420., 43154., 43888., 45151., 45894., 46637., 47380., 48688., 49440., 50192., 50944., 27705., 28338., 28971., 29604., 30730., 31372., 32014., 32656., 33827., 34478., 35129., 35780., 36996., 37656., 38316., 38976., 16386., 16820., 17254., 17688., 18488., 18928., 19368., 19808., 20638., 21084., 21530., 21976., 22836., 23288., 23740., 24192., 24658., 25140., 25622., 26104., 26920., 27408., 27896., 28384., 29230., 29724., 30218., 30712., 31588., 32088., 32588., 33088., 22821., 23434., 24047., 24660., 25766., 26388., 27010., 27632., 28783., 29414., 30045., 30676., 31872., 32512., 33152., 33792., 16329., 16850., 17371., 17892., 18906., 19436., 19966., 20496., 21555., 22094., 22633., 23172., 24276., 24824., 25372., 25920., 11885., 12314., 12743., 13172., 14094., 14532., 14970., 15408., 16375., 16822., 17269., 17716., 18728., 19184., 19640., 20096.,  8634.,  8932.,  9230.,  9528., 10192., 10496., 10800., 11104., 11798., 12108., 12418., 12728., 13452., 13768., 14084., 14400.,  8404.,  8680.,  8956.,  9232.,  9720., 10000., 10280., 10560., 11068., 11352., 11636., 11920., 12448., 12736., 13024., 13312.,  5722.,  6020.,  6318.,  6616.,  7184.,  7488.,  7792.,  8096.,  8694.,  9004.,  9314.,  9624., 10252., 10568., 10884., 11200.,  4530.,  4724.,  4918.,  5112.,  5576.,  5776.,  5976.,  6176.,  6670.,  6876.,  7082.,  7288.,  7812.,  8024.,  8236.,  8448.,  5386.,  5476.,  5566.,  5656.,  6016.,  6112.,  6208.,  6304.,  6694.,  6796.,  6898.,  7000.,  7420.,  7528.,  7636.,  7744.,  3268.,  3336.,  3404.,  3472.,  3688.,  3760.,  3832.,  3904.,  4140.,  4216.,  4292.,  4368.,  4624.,  4704.,  4784.,  4864., 11188., 11368., 11548., 11728., 12184., 12368., 12552., 12736., 13212., 13400., 13588., 13776., 14272., 14464., 14656., 14848., 18986., 19268., 19550., 19832., 20544., 20832., 21120., 21408., 22150., 22444., 22738., 23032., 23804., 24104., 24404., 24704., 20610., 20916., 21222., 21528., 22264., 22576., 22888., 23200., 23966., 24284., 24602., 24920., 25716., 26040., 26364., 26688., 22234., 22564., 22894., 23224., 23984., 24320., 24656., 24992., 25782., 26124., 26466., 26808., 27628., 27976., 28324., 28672., 19492., 19720., 19948., 20176., 20744., 20976., 21208., 21440., 22028., 22264., 22500., 22736., 23344., 23584., 23824., 24064., 18170., 18500., 18830., 19160., 19824., 20160., 20496., 20832., 21526., 21868., 22210., 22552., 23276., 23624., 23972., 24320., 29121., 29634., 30147., 30660., 31666., 32188., 32710., 33232., 34283., 34814., 35345., 35876., 36972., 37512., 38052., 38592., 30949., 31498., 32047., 32596., 33638., 34196., 34754., 35312., 36399., 36966., 37533., 38100., 39232., 39808., 40384., 40960., 32777., 33362., 33947., 34532., 35610., 36204., 36798., 37392., 38515., 39118., 39721., 40324., 41492., 42104., 42716., 43328., 26850., 27252., 27654., 28056., 28824., 29232., 29640., 30048., 30846., 31260., 31674., 32088., 32916., 33336., 33756., 34176., 24370., 24820., 25270., 25720., 26504., 26960., 27416., 27872., 28686., 29148., 29610., 30072., 30916., 31384., 31852., 32320., 38261., 38954., 39647., 40340., 41526., 42228., 42930., 43632., 44863., 45574., 46285., 46996., 48272., 48992., 49712., 50432., 40089., 40818., 41547., 42276., 43498., 44236., 44974., 45712., 46979., 47726., 48473., 49220., 50532., 51288., 52044., 52800., 41917., 42682., 43447., 44212., 45470., 46244., 47018., 47792., 49095., 49878., 50661., 51444., 52792., 53584., 54376., 55168., 33690., 34212., 34734., 35256., 36144., 36672., 37200., 37728., 38646., 39180., 39714., 40248., 41196., 41736., 42276., 42816., 17684., 18024., 18364., 18704., 19256., 19600., 19944., 20288., 20860., 21208., 21556., 21904., 22496., 22848., 23200., 23552., 23098., 23620., 24142., 24664., 25456., 25984., 26512., 27040., 27862., 28396., 28930., 29464., 30316., 30856., 31396., 31936., 24082., 24628., 25174., 25720., 26536., 27088., 27640., 28192., 29038., 29596., 30154., 30712., 31588., 32152., 32716., 33280., 25066., 25636., 26206., 26776., 27616., 28192., 28768., 29344., 30214., 30796., 31378., 31960., 32860., 33448., 34036., 34624., 13828., 14216., 14604., 14992., 15528., 15920., 16312., 16704., 17260., 17656., 18052., 18448., 19024., 19424., 19824., 20224.};
  const std::array<int, 4> in_shape = {{ 3, 4, 5, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x5x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14497., 14722., 14947., 15172., 15890., 16124., 16358., 16592., 17355., 17598., 17841., 18084., 18892., 19144., 19396., 19648., 16325., 16586., 16847., 17108., 17862., 18132., 18402., 18672., 19471., 19750., 20029., 20308., 21152., 21440., 21728., 22016., 18153., 18450., 18747., 19044., 19834., 20140., 20446., 20752., 21587., 21902., 22217., 22532., 23412., 23736., 24060., 24384., 23637., 24042., 24447., 24852., 25750., 26164., 26578., 26992., 27935., 28358., 28781., 29204., 30192., 30624., 31056., 31488., 25465., 25906., 26347., 26788., 27722., 28172., 28622., 29072., 30051., 30510., 30969., 31428., 32452., 32920., 33388., 33856., 27293., 27770., 28247., 28724., 29694., 30180., 30666., 31152., 32167., 32662., 33157., 33652., 34712., 35216., 35720., 36224., 50929., 51746., 52563., 53380., 54690., 55516., 56342., 57168., 58523., 59358., 60193., 61028., 62428., 63272., 64116., 64960., 38293., 39018., 39743., 40468., 41686., 42420., 43154., 43888., 45151., 45894., 46637., 47380., 48688., 49440., 50192., 50944., 27705., 28338., 28971., 29604., 30730., 31372., 32014., 32656., 33827., 34478., 35129., 35780., 36996., 37656., 38316., 38976., 22821., 23434., 24047., 24660., 25766., 26388., 27010., 27632., 28783., 29414., 30045., 30676., 31872., 32512., 33152., 33792., 16329., 16850., 17371., 17892., 18906., 19436., 19966., 20496., 21555., 22094., 22633., 23172., 24276., 24824., 25372., 25920., 11885., 12314., 12743., 13172., 14094., 14532., 14970., 15408., 16375., 16822., 17269., 17716., 18728., 19184., 19640., 20096., 29121., 29634., 30147., 30660., 31666., 32188., 32710., 33232., 34283., 34814., 35345., 35876., 36972., 37512., 38052., 38592., 30949., 31498., 32047., 32596., 33638., 34196., 34754., 35312., 36399., 36966., 37533., 38100., 39232., 39808., 40384., 40960., 32777., 33362., 33947., 34532., 35610., 36204., 36798., 37392., 38515., 39118., 39721., 40324., 41492., 42104., 42716., 43328., 38261., 38954., 39647., 40340., 41526., 42228., 42930., 43632., 44863., 45574., 46285., 46996., 48272., 48992., 49712., 50432., 40089., 40818., 41547., 42276., 43498., 44236., 44974., 45712., 46979., 47726., 48473., 49220., 50532., 51288., 52044., 52800., 41917., 42682., 43447., 44212., 45470., 46244., 47018., 47792., 49095., 49878., 50661., 51444., 52792., 53584., 54376., 55168.};
  const std::array<int, 4> in_shape = {{ 3, 4, 5, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 145.,  226.,  265.,  304.,  343.,  223.,  321.,  474.,  519.,  564.,  609.,  384.,  519.,  744.,  789.,  834.,  879.,  546.,  283.,  388.,  409.,  430.,  451.,  265.,  817., 1162., 1201., 1240., 1279.,  799., 1113., 1554., 1599., 1644., 1689., 1032., 1311., 1824., 1869., 1914., 1959., 1194.,  667.,  892.,  913.,  934.,  955.,  553., 1489., 2098., 2137., 2176., 2215., 1375., 1905., 2634., 2679., 2724., 2769., 1680., 2103., 2904., 2949., 2994., 3039., 1842., 1051., 1396., 1417., 1438., 1459.,  841.};
  const std::array<int, 4> in_shape = {{ 3, 4, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 474.,  519.,  564.,  609.,  744.,  789.,  834.,  879., 1554., 1599., 1644., 1689., 1824., 1869., 1914., 1959., 2634., 2679., 2724., 2769., 2904., 2949., 2994., 3039.};
  const std::array<int, 4> in_shape = {{ 3, 4, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 272.,  290.,  422.,  452.,  494.,  530.,  566.,  608.,  638.,  686.,  412.,  446.,  597.,  642.,  876.,  948.,  957., 1038., 1038., 1128., 1119., 1218.,  699.,  768.,  957., 1038., 1362., 1488., 1443., 1578., 1524., 1668., 1605., 1758.,  987., 1092.,  500.,  566.,  674.,  776.,  710.,  818.,  746.,  860.,  782.,  902.,  448.,  530., 1520., 1634., 2150., 2324., 2222., 2402., 2294., 2480., 2366., 2558., 1468., 1598., 2037., 2226., 2820., 3108., 2901., 3198., 2982., 3288., 3063., 3378., 1851., 2064., 2397., 2622., 3306., 3648., 3387., 3738., 3468., 3828., 3549., 3918., 2139., 2388., 1172., 1334., 1538., 1784., 1574., 1826., 1610., 1868., 1646., 1910.,  928., 1106., 2768., 2978., 3878., 4196., 3950., 4274., 4022., 4352., 4094., 4430., 2524., 2750., 3477., 3810., 4764., 5268., 4845., 5358., 4926., 5448., 5007., 5538., 3003., 3360., 3837., 4206., 5250., 5808., 5331., 5898., 5412., 5988., 5493., 6078., 3291., 3684., 1844., 2102., 2402., 2792., 2438., 2834., 2474., 2876., 2510., 2918., 1408., 1682.};
  const std::array<int, 4> in_shape = {{ 3, 4, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 876.,  948.,  957., 1038., 1038., 1128., 1119., 1218., 1362., 1488., 1443., 1578., 1524., 1668., 1605., 1758., 2820., 3108., 2901., 3198., 2982., 3288., 3063., 3378., 3306., 3648., 3387., 3738., 3468., 3828., 3549., 3918., 4764., 5268., 4845., 5358., 4926., 5448., 5007., 5538., 5250., 5808., 5331., 5898., 5412., 5988., 5493., 6078.};
  const std::array<int, 4> in_shape = {{ 3, 4, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  526.,   544.,   562.,   580.,   814.,   844.,   874.,   904.,   952.,   988.,  1024.,  1060.,  1090.,  1132.,  1174.,  1216.,  1228.,  1276.,  1324.,  1372.,   790.,   824.,   858.,   892.,  1149.,  1194.,  1239.,  1284.,  1680.,  1752.,  1824.,  1896.,  1833.,  1914.,  1995.,  2076.,  1986.,  2076.,  2166.,  2256.,  2139.,  2238.,  2337.,  2436.,  1329.,  1398.,  1467.,  1536.,  1833.,  1914.,  1995.,  2076.,  2598.,  2724.,  2850.,  2976.,  2751.,  2886.,  3021.,  3156.,  2904.,  3048.,  3192.,  3336.,  3057.,  3210.,  3363.,  3516.,  1869.,  1974.,  2079.,  2184.,   934.,  1000.,  1066.,  1132.,  1246.,  1348.,  1450.,  1552.,  1312.,  1420.,  1528.,  1636.,  1378.,  1492.,  1606.,  1720.,  1444.,  1564.,  1684.,  1804.,   814.,   896.,   978.,  1060.,  2926.,  3040.,  3154.,  3268.,  4126.,  4300.,  4474.,  4648.,  4264.,  4444.,  4624.,  4804.,  4402.,  4588.,  4774.,  4960.,  4540.,  4732.,  4924.,  5116.,  2806.,  2936.,  3066.,  3196.,  3885.,  4074.,  4263.,  4452.,  5352.,  5640.,  5928.,  6216.,  5505.,  5802.,  6099.,  6396.,  5658.,  5964.,  6270.,  6576.,  5811.,  6126.,  6441.,  6756.,  3489.,  3702.,  3915.,  4128.,  4569.,  4794.,  5019.,  5244.,  6270.,  6612.,  6954.,  7296.,  6423.,  6774.,  7125.,  7476.,  6576.,  6936.,  7296.,  7656.,  6729.,  7098.,  7467.,  7836.,  4029.,  4278.,  4527.,  4776.,  2182.,  2344.,  2506.,  2668.,  2830.,  3076.,  3322.,  3568.,  2896.,  3148.,  3400.,  3652.,  2962.,  3220.,  3478.,  3736.,  3028.,  3292.,  3556.,  3820.,  1678.,  1856.,  2034.,  2212.,  5326.,  5536.,  5746.,  5956.,  7438.,  7756.,  8074.,  8392.,  7576.,  7900.,  8224.,  8548.,  7714.,  8044.,  8374.,  8704.,  7852.,  8188.,  8524.,  8860.,  4822.,  5048.,  5274.,  5500.,  6621.,  6954.,  7287.,  7620.,  9024.,  9528., 10032., 10536.,  9177.,  9690., 10203., 10716.,  9330.,  9852., 10374., 10896.,  9483., 10014., 10545., 11076.,  5649.,  6006.,  6363.,  6720.,  7305.,  7674.,  8043.,  8412.,  9942., 10500., 11058., 11616., 10095., 10662., 11229., 11796., 10248., 10824., 11400., 11976., 10401., 10986., 11571., 12156.,  6189.,  6582.,  6975.,  7368.,  3430.,  3688.,  3946.,  4204.,  4414.,  4804.,  5194.,  5584.,  4480.,  4876.,  5272.,  5668.,  4546.,  4948.,  5350.,  5752.,  4612.,  5020.,  5428.,  5836.,  2542.,  2816.,  3090.,  3364.};
  const std::array<int, 4> in_shape = {{ 3, 4, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1680.,  1752.,  1824.,  1896.,  1833.,  1914.,  1995.,  2076.,  1986.,  2076.,  2166.,  2256.,  2139.,  2238.,  2337.,  2436.,  2598.,  2724.,  2850.,  2976.,  2751.,  2886.,  3021.,  3156.,  2904.,  3048.,  3192.,  3336.,  3057.,  3210.,  3363.,  3516.,  5352.,  5640.,  5928.,  6216.,  5505.,  5802.,  6099.,  6396.,  5658.,  5964.,  6270.,  6576.,  5811.,  6126.,  6441.,  6756.,  6270.,  6612.,  6954.,  7296.,  6423.,  6774.,  7125.,  7476.,  6576.,  6936.,  7296.,  7656.,  6729.,  7098.,  7467.,  7836.,  9024.,  9528., 10032., 10536.,  9177.,  9690., 10203., 10716.,  9330.,  9852., 10374., 10896.,  9483., 10014., 10545., 11076.,  9942., 10500., 11058., 11616., 10095., 10662., 11229., 11796., 10248., 10824., 11400., 11976., 10401., 10986., 11571., 12156.};
  const std::array<int, 4> in_shape = {{ 3, 4, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  492.,   580.,   772.,   904.,   916.,  1060.,  1060.,  1216.,  1204.,  1372.,   780.,   892.,  1134.,  1284.,  1671.,  1896.,  1833.,  2076.,  1995.,  2256.,  2157.,  2436.,  1350.,  1536.,  1854.,  2076.,  2643.,  2976.,  2805.,  3156.,  2967.,  3336.,  3129.,  3516.,  1926.,  2184.,   972.,  1132.,  1312.,  1552.,  1384.,  1636.,  1456.,  1720.,  1528.,  1804.,   876.,  1060.,  2988.,  3268.,  4228.,  4648.,  4372.,  4804.,  4516.,  4960.,  4660.,  5116.,  2892.,  3196.,  4014.,  4452.,  5559.,  6216.,  5721.,  6396.,  5883.,  6576.,  6045.,  6756.,  3654.,  4128.,  4734.,  5244.,  6531.,  7296.,  6693.,  7476.,  6855.,  7656.,  7017.,  7836.,  4230.,  4776.,  2316.,  2668.,  3040.,  3568.,  3112.,  3652.,  3184.,  3736.,  3256.,  3820.,  1836.,  2212.,  5484.,  5956.,  7684.,  8392.,  7828.,  8548.,  7972.,  8704.,  8116.,  8860.,  5004.,  5500.,  6894.,  7620.,  9447., 10536.,  9609., 10716.,  9771., 10896.,  9933., 11076.,  5958.,  6720.,  7614.,  8412., 10419., 11616., 10581., 11796., 10743., 11976., 10905., 12156.,  6534.,  7368.,  3660.,  4204.,  4768.,  5584.,  4840.,  5668.,  4912.,  5752.,  4984.,  5836.,  2796.,  3364.};
  const std::array<int, 4> in_shape = {{ 3, 4, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1671.,  1896.,  1833.,  2076.,  1995.,  2256.,  2157.,  2436.,  2643.,  2976.,  2805.,  3156.,  2967.,  3336.,  3129.,  3516.,  5559.,  6216.,  5721.,  6396.,  5883.,  6576.,  6045.,  6756.,  6531.,  7296.,  6693.,  7476.,  6855.,  7656.,  7017.,  7836.,  9447., 10536.,  9609., 10716.,  9771., 10896.,  9933., 11076., 10419., 11616., 10581., 11796., 10743., 11976., 10905., 12156.};
  const std::array<int, 4> in_shape = {{ 3, 4, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  952.,   984.,  1124.,  1160.,  1490.,  1544.,  1748.,  1808.,  1766.,  1832.,  2048.,  2120.,  2042.,  2120.,  2348.,  2432.,  2318.,  2408.,  2648.,  2744.,  1496.,  1560.,  1716.,  1784.,  2184.,  2268.,  2478.,  2568.,  3207.,  3342.,  3648.,  3792.,  3513.,  3666.,  3990.,  4152.,  3819.,  3990.,  4332.,  4512.,  4125.,  4314.,  4674.,  4872.,  2568.,  2700.,  2934.,  3072.,  3552.,  3708.,  3990.,  4152.,  5043.,  5286.,  5700.,  5952.,  5349.,  5610.,  6042.,  6312.,  5655.,  5934.,  6384.,  6672.,  5961.,  6258.,  6726.,  7032.,  3648.,  3852.,  4158.,  4368.,  1816.,  1944.,  2132.,  2264.,  2426.,  2624.,  2900.,  3104.,  2558.,  2768.,  3056.,  3272.,  2690.,  2912.,  3212.,  3440.,  2822.,  3056.,  3368.,  3608.,  1592.,  1752.,  1956.,  2120.,  5752.,  5976.,  6308.,  6536.,  8114.,  8456.,  8948.,  9296.,  8390.,  8744.,  9248.,  9608.,  8666.,  9032.,  9548.,  9920.,  8942.,  9320.,  9848., 10232.,  5528.,  5784.,  6132.,  6392.,  7656.,  8028.,  8526.,  8904., 10551., 11118., 11856., 12432., 10857., 11442., 12198., 12792., 11163., 11766., 12540., 13152., 11469., 12090., 12882., 13512.,  6888.,  7308.,  7830.,  8256.,  9024.,  9468., 10038., 10488., 12387., 13062., 13908., 14592., 12693., 13386., 14250., 14952., 12999., 13710., 14592., 15312., 13305., 14034., 14934., 15672.,  7968.,  8460.,  9054.,  9552.,  4312.,  4632.,  5012.,  5336.,  5594.,  6080.,  6644.,  7136.,  5726.,  6224.,  6800.,  7304.,  5858.,  6368.,  6956.,  7472.,  5990.,  6512.,  7112.,  7640.,  3320.,  3672.,  4068.,  4424., 10552., 10968., 11492., 11912., 14738., 15368., 16148., 16784., 15014., 15656., 16448., 17096., 15290., 15944., 16748., 17408., 15566., 16232., 17048., 17720.,  9560., 10008., 10548., 11000., 13128., 13788., 14574., 15240., 17895., 18894., 20064., 21072., 18201., 19218., 20406., 21432., 18507., 19542., 20748., 21792., 18813., 19866., 21090., 22152., 11208., 11916., 12726., 13440., 14496., 15228., 16086., 16824., 19731., 20838., 22116., 23232., 20037., 21162., 22458., 23592., 20343., 21486., 22800., 23952., 20649., 21810., 23142., 24312., 12288., 13068., 13950., 14736.,  6808.,  7320.,  7892.,  8408.,  8762.,  9536., 10388., 11168.,  8894.,  9680., 10544., 11336.,  9026.,  9824., 10700., 11504.,  9158.,  9968., 10856., 11672.,  5048.,  5592.,  6180.,  6728.};
  const std::array<int, 4> in_shape = {{ 3, 4, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3207.,  3342.,  3648.,  3792.,  3513.,  3666.,  3990.,  4152.,  3819.,  3990.,  4332.,  4512.,  4125.,  4314.,  4674.,  4872.,  5043.,  5286.,  5700.,  5952.,  5349.,  5610.,  6042.,  6312.,  5655.,  5934.,  6384.,  6672.,  5961.,  6258.,  6726.,  7032., 10551., 11118., 11856., 12432., 10857., 11442., 12198., 12792., 11163., 11766., 12540., 13152., 11469., 12090., 12882., 13512., 12387., 13062., 13908., 14592., 12693., 13386., 14250., 14952., 12999., 13710., 14592., 15312., 13305., 14034., 14934., 15672., 17895., 18894., 20064., 21072., 18201., 19218., 20406., 21432., 18507., 19542., 20748., 21792., 18813., 19866., 21090., 22152., 19731., 20838., 22116., 23232., 20037., 21162., 22458., 23592., 20343., 21486., 22800., 23952., 20649., 21810., 23142., 24312.};
  const std::array<int, 4> in_shape = {{ 3, 4, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1872.,  1904.,  1936.,  1968.,  2212.,  2248.,  2284.,  2320.,  2926.,  2980.,  3034.,  3088.,  3436.,  3496.,  3556.,  3616.,  3466.,  3532.,  3598.,  3664.,  4024.,  4096.,  4168.,  4240.,  4006.,  4084.,  4162.,  4240.,  4612.,  4696.,  4780.,  4864.,  4546.,  4636.,  4726.,  4816.,  5200.,  5296.,  5392.,  5488.,  2928.,  2992.,  3056.,  3120.,  3364.,  3432.,  3500.,  3568.,  4284.,  4368.,  4452.,  4536.,  4866.,  4956.,  5046.,  5136.,  6279.,  6414.,  6549.,  6684.,  7152.,  7296.,  7440.,  7584.,  6873.,  7026.,  7179.,  7332.,  7818.,  7980.,  8142.,  8304.,  7467.,  7638.,  7809.,  7980.,  8484.,  8664.,  8844.,  9024.,  8061.,  8250.,  8439.,  8628.,  9150.,  9348.,  9546.,  9744.,  5004.,  5136.,  5268.,  5400.,  5730.,  5868.,  6006.,  6144.,  6948.,  7104.,  7260.,  7416.,  7818.,  7980.,  8142.,  8304.,  9843., 10086., 10329., 10572., 11148., 11400., 11652., 11904., 10437., 10698., 10959., 11220., 11814., 12084., 12354., 12624., 11031., 11310., 11589., 11868., 12480., 12768., 13056., 13344., 11625., 11922., 12219., 12516., 13146., 13452., 13758., 14064.,  7092.,  7296.,  7500.,  7704.,  8106.,  8316.,  8526.,  8736.,  3504.,  3632.,  3760.,  3888.,  4132.,  4264.,  4396.,  4528.,  4654.,  4852.,  5050.,  5248.,  5596.,  5800.,  6004.,  6208.,  4906.,  5116.,  5326.,  5536.,  5896.,  6112.,  6328.,  6544.,  5158.,  5380.,  5602.,  5824.,  6196.,  6424.,  6652.,  6880.,  5410.,  5644.,  5878.,  6112.,  6496.,  6736.,  6976.,  7216.,  3024.,  3184.,  3344.,  3504.,  3748.,  3912.,  4076.,  4240., 11280., 11504., 11728., 11952., 12388., 12616., 12844., 13072., 15886., 16228., 16570., 16912., 17548., 17896., 18244., 18592., 16426., 16780., 17134., 17488., 18136., 18496., 18856., 19216., 16966., 17332., 17698., 18064., 18724., 19096., 19468., 19840., 17506., 17884., 18262., 18640., 19312., 19696., 20080., 20464., 10800., 11056., 11312., 11568., 12004., 12264., 12524., 12784., 14940., 15312., 15684., 16056., 16674., 17052., 17430., 17808., 20535., 21102., 21669., 22236., 23136., 23712., 24288., 24864., 21129., 21714., 22299., 22884., 23802., 24396., 24990., 25584., 21723., 22326., 22929., 23532., 24468., 25080., 25692., 26304., 22317., 22938., 23559., 24180., 25134., 25764., 26394., 27024., 13356., 13776., 14196., 14616., 15234., 15660., 16086., 16512., 17604., 18048., 18492., 18936., 19626., 20076., 20526., 20976., 24099., 24774., 25449., 26124., 27132., 27816., 28500., 29184., 24693., 25386., 26079., 26772., 27798., 28500., 29202., 29904., 25287., 25998., 26709., 27420., 28464., 29184., 29904., 30624., 25881., 26610., 27339., 28068., 29130., 29868., 30606., 31344., 15444., 15936., 16428., 16920., 17610., 18108., 18606., 19104.,  8304.,  8624.,  8944.,  9264.,  9700., 10024., 10348., 10672., 10702., 11188., 11674., 12160., 12796., 13288., 13780., 14272., 10954., 11452., 11950., 12448., 13096., 13600., 14104., 14608., 11206., 11716., 12226., 12736., 13396., 13912., 14428., 14944., 11458., 11980., 12502., 13024., 13696., 14224., 14752., 15280.,  6288.,  6640.,  6992.,  7344.,  7780.,  8136.,  8492.,  8848., 20688., 21104., 21520., 21936., 22564., 22984., 23404., 23824., 28846., 29476., 30106., 30736., 31660., 32296., 32932., 33568., 29386., 30028., 30670., 31312., 32248., 32896., 33544., 34192., 29926., 30580., 31234., 31888., 32836., 33496., 34156., 34816., 30466., 31132., 31798., 32464., 33424., 34096., 34768., 35440., 18672., 19120., 19568., 20016., 20644., 21096., 21548., 22000., 25596., 26256., 26916., 27576., 28482., 29148., 29814., 30480., 34791., 35790., 36789., 37788., 39120., 40128., 41136., 42144., 35385., 36402., 37419., 38436., 39786., 40812., 41838., 42864., 35979., 37014., 38049., 39084., 40452., 41496., 42540., 43584., 36573., 37626., 38679., 39732., 41118., 42180., 43242., 44304., 21708., 22416., 23124., 23832., 24738., 25452., 26166., 26880., 28260., 28992., 29724., 30456., 31434., 32172., 32910., 33648., 38355., 39462., 40569., 41676., 43116., 44232., 45348., 46464., 38949., 40074., 41199., 42324., 43782., 44916., 46050., 47184., 39543., 40686., 41829., 42972., 44448., 45600., 46752., 47904., 40137., 41298., 42459., 43620., 45114., 46284., 47454., 48624., 23796., 24576., 25356., 26136., 27114., 27900., 28686., 29472., 13104., 13616., 14128., 14640., 15268., 15784., 16300., 16816., 16750., 17524., 18298., 19072., 19996., 20776., 21556., 22336., 17002., 17788., 18574., 19360., 20296., 21088., 21880., 22672., 17254., 18052., 18850., 19648., 20596., 21400., 22204., 23008., 17506., 18316., 19126., 19936., 20896., 21712., 22528., 23344.,  9552., 10096., 10640., 11184., 11812., 12360., 12908., 13456.};
  const std::array<int, 4> in_shape = {{ 3, 4, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6279.,  6414.,  6549.,  6684.,  7152.,  7296.,  7440.,  7584.,  6873.,  7026.,  7179.,  7332.,  7818.,  7980.,  8142.,  8304.,  7467.,  7638.,  7809.,  7980.,  8484.,  8664.,  8844.,  9024.,  8061.,  8250.,  8439.,  8628.,  9150.,  9348.,  9546.,  9744.,  9843., 10086., 10329., 10572., 11148., 11400., 11652., 11904., 10437., 10698., 10959., 11220., 11814., 12084., 12354., 12624., 11031., 11310., 11589., 11868., 12480., 12768., 13056., 13344., 11625., 11922., 12219., 12516., 13146., 13452., 13758., 14064., 20535., 21102., 21669., 22236., 23136., 23712., 24288., 24864., 21129., 21714., 22299., 22884., 23802., 24396., 24990., 25584., 21723., 22326., 22929., 23532., 24468., 25080., 25692., 26304., 22317., 22938., 23559., 24180., 25134., 25764., 26394., 27024., 24099., 24774., 25449., 26124., 27132., 27816., 28500., 29184., 24693., 25386., 26079., 26772., 27798., 28500., 29202., 29904., 25287., 25998., 26709., 27420., 28464., 29184., 29904., 30624., 25881., 26610., 27339., 28068., 29130., 29868., 30606., 31344., 34791., 35790., 36789., 37788., 39120., 40128., 41136., 42144., 35385., 36402., 37419., 38436., 39786., 40812., 41838., 42864., 35979., 37014., 38049., 39084., 40452., 41496., 42540., 43584., 36573., 37626., 38679., 39732., 41118., 42180., 43242., 44304., 38355., 39462., 40569., 41676., 43116., 44232., 45348., 46464., 38949., 40074., 41199., 42324., 43782., 44916., 46050., 47184., 39543., 40686., 41829., 42972., 44448., 45600., 46752., 47904., 40137., 41298., 42459., 43620., 45114., 46284., 47454., 48624.};
  const std::array<int, 4> in_shape = {{ 3, 4, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1804.,  1968.,  2140.,  2320.,  2842.,  3088.,  3346.,  3616.,  3394.,  3664.,  3946.,  4240.,  3946.,  4240.,  4546.,  4864.,  4498.,  4816.,  5146.,  5488.,  2908.,  3120.,  3340.,  3568.,  4254.,  4536.,  4830.,  5136.,  6261.,  6684.,  7125.,  7584.,  6873.,  7332.,  7809.,  8304.,  7485.,  7980.,  8493.,  9024.,  8097.,  8628.,  9177.,  9744.,  5046.,  5400.,  5766.,  6144.,  6990.,  7416.,  7854.,  8304.,  9933., 10572., 11229., 11904., 10545., 11220., 11913., 12624., 11157., 11868., 12597., 13344., 11769., 12516., 13281., 14064.,  7206.,  7704.,  8214.,  8736.,  3580.,  3888.,  4204.,  4528.,  4786.,  5248.,  5722.,  6208.,  5050.,  5536.,  6034.,  6544.,  5314.,  5824.,  6346.,  6880.,  5578.,  6112.,  6658.,  7216.,  3148.,  3504.,  3868.,  4240., 11404., 11952., 12508., 13072., 16090., 16912., 17746., 18592., 16642., 17488., 18346., 19216., 17194., 18064., 18946., 19840., 17746., 18640., 19546., 20464., 10972., 11568., 12172., 12784., 15198., 16056., 16926., 17808., 20949., 22236., 23541., 24864., 21561., 22884., 24225., 25584., 22173., 23532., 24909., 26304., 22785., 24180., 25593., 27024., 13686., 14616., 15558., 16512., 17934., 18936., 19950., 20976., 24621., 26124., 27645., 29184., 25233., 26772., 28329., 29904., 25845., 27420., 29013., 30624., 26457., 28068., 29697., 31344., 15846., 16920., 18006., 19104.,  8572.,  9264.,  9964., 10672., 11122., 12160., 13210., 14272., 11386., 12448., 13522., 14608., 11650., 12736., 13834., 14944., 11914., 13024., 14146., 15280.,  6604.,  7344.,  8092.,  8848., 21004., 21936., 22876., 23824., 29338., 30736., 32146., 33568., 29890., 31312., 32746., 34192., 30442., 31888., 33346., 34816., 30994., 32464., 33946., 35440., 19036., 20016., 21004., 22000., 26142., 27576., 29022., 30480., 35637., 37788., 39957., 42144., 36249., 38436., 40641., 42864., 36861., 39084., 41325., 43584., 37473., 39732., 42009., 44304., 22326., 23832., 25350., 26880., 28878., 30456., 32046., 33648., 39309., 41676., 44061., 46464., 39921., 42324., 44745., 47184., 40533., 42972., 45429., 47904., 41145., 43620., 46113., 48624., 24486., 26136., 27798., 29472., 13564., 14640., 15724., 16816., 17458., 19072., 20698., 22336., 17722., 19360., 21010., 22672., 17986., 19648., 21322., 23008., 18250., 19936., 21634., 23344., 10060., 11184., 12316., 13456.};
  const std::array<int, 4> in_shape = {{ 3, 4, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6261.,  6684.,  7125.,  7584.,  6873.,  7332.,  7809.,  8304.,  7485.,  7980.,  8493.,  9024.,  8097.,  8628.,  9177.,  9744.,  9933., 10572., 11229., 11904., 10545., 11220., 11913., 12624., 11157., 11868., 12597., 13344., 11769., 12516., 13281., 14064., 20949., 22236., 23541., 24864., 21561., 22884., 24225., 25584., 22173., 23532., 24909., 26304., 22785., 24180., 25593., 27024., 24621., 26124., 27645., 29184., 25233., 26772., 28329., 29904., 25845., 27420., 29013., 30624., 26457., 28068., 29697., 31344., 35637., 37788., 39957., 42144., 36249., 38436., 40641., 42864., 36861., 39084., 41325., 43584., 37473., 39732., 42009., 44304., 39309., 41676., 44061., 46464., 39921., 42324., 44745., 47184., 40533., 42972., 45429., 47904., 41145., 43620., 46113., 48624.};
  const std::array<int, 4> in_shape = {{ 3, 4, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3548.,  3608.,  3872.,  3936.,  4212.,  4280.,  4568.,  4640.,  5582.,  5684.,  6068.,  6176.,  6578.,  6692.,  7112.,  7232.,  6662.,  6788.,  7196.,  7328.,  7754.,  7892.,  8336.,  8480.,  7742.,  7892.,  8324.,  8480.,  8930.,  9092.,  9560.,  9728.,  8822.,  8996.,  9452.,  9632., 10106., 10292., 10784., 10976.,  5692.,  5816.,  6112.,  6240.,  6548.,  6680.,  7000.,  7136.,  8346.,  8508.,  8904.,  9072.,  9486.,  9660., 10092., 10272., 12261., 12522., 13098., 13368., 13971., 14250., 14880., 15168., 13449., 13746., 14358., 14664., 15303., 15618., 16284., 16608., 14637., 14970., 15618., 15960., 16635., 16986., 17688., 18048., 15825., 16194., 16878., 17256., 17967., 18354., 19092., 19488.,  9834., 10092., 10536., 10800., 11262., 11532., 12012., 12288., 13674., 13980., 14520., 14832., 15390., 15708., 16284., 16608., 19389., 19866., 20658., 21144., 21963., 22458., 23304., 23808., 20577., 21090., 21918., 22440., 23295., 23826., 24708., 25248., 21765., 22314., 23178., 23736., 24627., 25194., 26112., 26688., 22953., 23538., 24438., 25032., 25959., 26562., 27516., 28128., 14010., 14412., 15000., 15408., 16014., 16428., 17052., 17472.,  6908.,  7160.,  7520.,  7776.,  8148.,  8408.,  8792.,  9056.,  9182.,  9572., 10100., 10496., 11042., 11444., 12008., 12416.,  9686., 10100., 10652., 11072., 11642., 12068., 12656., 13088., 10190., 10628., 11204., 11648., 12242., 12692., 13304., 13760., 10694., 11156., 11756., 12224., 12842., 13316., 13952., 14432.,  5980.,  6296.,  6688.,  7008.,  7412.,  7736.,  8152.,  8480., 22364., 22808., 23456., 23904., 24564., 25016., 25688., 26144., 23182., 23732., 24564., 25120., 25970., 26532., 27400., 27968., 16966., 17412., 18140., 18592., 19338., 19796., 20560., 21024., 11774., 12116., 12740., 13088., 13730., 14084., 14744., 15104., 12854., 13220., 13868., 14240., 14906., 15284., 15968., 16352.,  7868.,  8120.,  8544.,  8800.,  9236.,  9496.,  9944., 10208., 14042., 14524., 15240., 15728., 16462., 16956., 17708., 18208., 13637., 14250., 15178., 15800., 16755., 17386., 18368., 19008., 10601., 11122., 11958., 12488., 13351., 13890., 14780., 15328.,  8589.,  9018.,  9762., 10200., 10971., 11418., 12216., 12672.,  9777., 10242., 11022., 11496., 12303., 12786., 13620., 14112.,  5546.,  5868.,  6376.,  6704.,  7230.,  7564.,  8108.,  8448.,  9898., 10268., 10872., 11248., 11870., 12252., 12892., 13280., 11165., 11610., 12370., 12824., 13611., 14074., 14888., 15360., 11201., 11554., 12222., 12584., 13279., 13650., 14372., 14752., 12261., 12522., 13098., 13368., 13971., 14250., 14880., 15168., 13449., 13746., 14358., 14664., 15303., 15618., 16284., 16608.,  8442.,  8652.,  9048.,  9264.,  9678.,  9900., 10332., 10560.,  3708.,  3832.,  4064.,  4192.,  4436.,  4568.,  4824.,  4960.,  5150.,  5348.,  5684.,  5888.,  6242.,  6452.,  6824.,  7040.,  5654.,  5876.,  6236.,  6464.,  6842.,  7076.,  7472.,  7712.,  6158.,  6404.,  6788.,  7040.,  7442.,  7700.,  8120.,  8384.,  6662.,  6932.,  7340.,  7616.,  8042.,  8324.,  8768.,  9056.,  3804.,  3992.,  4256.,  4448.,  4724.,  4920.,  5208.,  5408., 16092., 16408., 16928., 17248., 17780., 18104., 18648., 18976., 22862., 23348., 24116., 24608., 25394., 25892., 26696., 27200., 23942., 24452., 25244., 25760., 26570., 27092., 27920., 28448., 25022., 25556., 26372., 26912., 27746., 28292., 29144., 29696., 26102., 26660., 27500., 28064., 28922., 29492., 30368., 30944., 16188., 16568., 17120., 17504., 18068., 18456., 19032., 19424., 22554., 23100., 23880., 24432., 25230., 25788., 26604., 27168., 31269., 32106., 33258., 34104., 35283., 36138., 37344., 38208., 32457., 33330., 34518., 35400., 36615., 37506., 38748., 39648., 25325., 26106., 27202., 27992., 29115., 29914., 31064., 31872., 19217., 19906., 20910., 21608., 22639., 23346., 24404., 25120.,  7402.,  7788.,  8360.,  8752.,  9342.,  9740., 10348., 10752., 12266., 12700., 13368., 13808., 14494., 14940., 15644., 16096., 16509., 17178., 18162., 18840., 19851., 20538., 21576., 22272., 17697., 18402., 19422., 20136., 21183., 21906., 22980., 23712., 13637., 14250., 15178., 15800., 16755., 17386., 18368., 19008., 10601., 11122., 11958., 12488., 13351., 13890., 14780., 15328.,  4154.,  4428.,  4888.,  5168.,  5646.,  5932.,  6428.,  6720.,  3836.,  4088.,  4448.,  4704.,  5076.,  5336.,  5720.,  5984.,  4574.,  4964.,  5492.,  5888.,  6434.,  6836.,  7400.,  7808.,  5078.,  5492.,  6044.,  6464.,  7034.,  7460.,  8048.,  8480.,  3406.,  3716.,  4164.,  4480.,  4946.,  5268.,  5752.,  6080.,  2758.,  2964.,  3308.,  3520.,  3882.,  4100.,  4480.,  4704.,  1628.,  1688.,  1824.,  1888.,  2036.,  2104.,  2264.,  2336.};
  const std::array<int, 4> in_shape = {{ 3, 4, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12261., 12522., 13098., 13368., 13971., 14250., 14880., 15168., 13449., 13746., 14358., 14664., 15303., 15618., 16284., 16608., 14637., 14970., 15618., 15960., 16635., 16986., 17688., 18048., 15825., 16194., 16878., 17256., 17967., 18354., 19092., 19488., 19389., 19866., 20658., 21144., 21963., 22458., 23304., 23808., 20577., 21090., 21918., 22440., 23295., 23826., 24708., 25248., 21765., 22314., 23178., 23736., 24627., 25194., 26112., 26688., 22953., 23538., 24438., 25032., 25959., 26562., 27516., 28128., 13637., 14250., 15178., 15800., 16755., 17386., 18368., 19008., 10601., 11122., 11958., 12488., 13351., 13890., 14780., 15328.,  8589.,  9018.,  9762., 10200., 10971., 11418., 12216., 12672.,  9777., 10242., 11022., 11496., 12303., 12786., 13620., 14112., 11165., 11610., 12370., 12824., 13611., 14074., 14888., 15360., 11201., 11554., 12222., 12584., 13279., 13650., 14372., 14752., 12261., 12522., 13098., 13368., 13971., 14250., 14880., 15168., 13449., 13746., 14358., 14664., 15303., 15618., 16284., 16608., 31269., 32106., 33258., 34104., 35283., 36138., 37344., 38208., 32457., 33330., 34518., 35400., 36615., 37506., 38748., 39648., 25325., 26106., 27202., 27992., 29115., 29914., 31064., 31872., 19217., 19906., 20910., 21608., 22639., 23346., 24404., 25120., 16509., 17178., 18162., 18840., 19851., 20538., 21576., 22272., 17697., 18402., 19422., 20136., 21183., 21906., 22980., 23712., 13637., 14250., 15178., 15800., 16755., 17386., 18368., 19008., 10601., 11122., 11958., 12488., 13351., 13890., 14780., 15328.};
  const std::array<int, 4> in_shape = {{ 3, 4, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x4x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3324.,  3384.,  3444.,  3504.,  3840.,  3904.,  3968.,  4032.,  4388.,  4456.,  4524.,  4592.,  4968.,  5040.,  5112.,  5184.,  6838.,  6940.,  7042.,  7144.,  7676.,  7784.,  7892.,  8000.,  8562.,  8676.,  8790.,  8904.,  9496.,  9616.,  9736.,  9856.,  8462.,  8588.,  8714.,  8840.,  9396.,  9528.,  9660.,  9792., 10378., 10516., 10654., 10792., 11408., 11552., 11696., 11840., 10086., 10236., 10386., 10536., 11116., 11272., 11428., 11584., 12194., 12356., 12518., 12680., 13320., 13488., 13656., 13824., 11710., 11884., 12058., 12232., 12836., 13016., 13196., 13376., 14010., 14196., 14382., 14568., 15232., 15424., 15616., 15808., 11260., 11384., 11508., 11632., 12096., 12224., 12352., 12480., 12964., 13096., 13228., 13360., 13864., 14000., 14136., 14272.,  9746.,  9908., 10070., 10232., 10728., 10896., 11064., 11232., 11758., 11932., 12106., 12280., 12836., 13016., 13196., 13376., 16965., 17226., 17487., 17748., 18502., 18772., 19042., 19312., 20111., 20390., 20669., 20948., 21792., 22080., 22368., 22656., 18793., 19090., 19387., 19684., 20474., 20780., 21086., 21392., 22227., 22542., 22857., 23172., 24052., 24376., 24700., 25024., 20621., 20954., 21287., 21620., 22446., 22788., 23130., 23472., 24343., 24694., 25045., 25396., 26312., 26672., 27032., 27392., 22449., 22818., 23187., 23556., 24418., 24796., 25174., 25552., 26459., 26846., 27233., 27620., 28572., 28968., 29364., 29760., 19410., 19668., 19926., 20184., 20808., 21072., 21336., 21600., 22254., 22524., 22794., 23064., 23748., 24024., 24300., 24576., 17186., 17492., 17798., 18104., 18744., 19056., 19368., 19680., 20350., 20668., 20986., 21304., 22004., 22328., 22652., 22976., 27933., 28410., 28887., 29364., 30334., 30820., 31306., 31792., 32807., 33302., 33797., 34292., 35352., 35856., 36360., 36864., 29761., 30274., 30787., 31300., 32306., 32828., 33350., 33872., 34923., 35454., 35985., 36516., 37612., 38152., 38692., 39232., 31589., 32138., 32687., 33236., 34278., 34836., 35394., 35952., 37039., 37606., 38173., 38740., 39872., 40448., 41024., 41600., 33417., 34002., 34587., 35172., 36250., 36844., 37438., 38032., 39155., 39758., 40361., 40964., 42132., 42744., 43356., 43968., 27618., 28020., 28422., 28824., 29592., 30000., 30408., 30816., 31614., 32028., 32442., 32856., 33684., 34104., 34524., 34944., 13564., 13816., 14068., 14320., 14784., 15040., 15296., 15552., 16036., 16296., 16556., 16816., 17320., 17584., 17848., 18112., 17974., 18364., 18754., 19144., 19804., 20200., 20596., 20992., 21682., 22084., 22486., 22888., 23608., 24016., 24424., 24832., 18958., 19372., 19786., 20200., 20884., 21304., 21724., 22144., 22858., 23284., 23710., 24136., 24880., 25312., 25744., 26176., 19942., 20380., 20818., 21256., 21964., 22408., 22852., 23296., 24034., 24484., 24934., 25384., 26152., 26608., 27064., 27520., 20926., 21388., 21850., 22312., 23044., 23512., 23980., 24448., 25210., 25684., 26158., 26632., 27424., 27904., 28384., 28864., 11644., 11960., 12276., 12592., 13056., 13376., 13696., 14016., 14500., 14824., 15148., 15472., 15976., 16304., 16632., 16960., 28284., 28728., 29172., 29616., 30336., 30784., 31232., 31680., 32420., 32872., 33324., 33776., 34536., 34992., 35448., 35904., 45686., 46236., 46786., 47336., 48316., 48872., 49428., 49984., 50994., 51556., 52118., 52680., 53720., 54288., 54856., 55424., 32846., 33292., 33738., 34184., 35060., 35512., 35964., 36416., 37322., 37780., 38238., 38696., 39632., 40096., 40560., 41024., 22054., 22396., 22738., 23080., 23852., 24200., 24548., 24896., 25698., 26052., 26406., 26760., 27592., 27952., 28312., 28672., 23678., 24044., 24410., 24776., 25572., 25944., 26316., 26688., 27514., 27892., 28270., 28648., 29504., 29888., 30272., 30656., 15484., 15736., 15988., 16240., 16832., 17088., 17344., 17600., 18212., 18472., 18732., 18992., 19624., 19888., 20152., 20416., 24914., 25396., 25878., 26360., 27176., 27664., 28152., 28640., 29486., 29980., 30474., 30968., 31844., 32344., 32844., 33344., 23461., 24074., 24687., 25300., 26406., 27028., 27650., 28272., 29423., 30054., 30685., 31316., 32512., 33152., 33792., 34432., 16969., 17490., 18011., 18532., 19546., 20076., 20606., 21136., 22195., 22734., 23273., 23812., 24916., 25464., 26012., 26560., 12525., 12954., 13383., 13812., 14734., 15172., 15610., 16048., 17015., 17462., 17909., 18356., 19368., 19824., 20280., 20736., 14353., 14818., 15283., 15748., 16706., 17180., 17654., 18128., 19131., 19614., 20097., 20580., 21628., 22120., 22612., 23104., 10770., 11092., 11414., 11736., 12424., 12752., 13080., 13408., 14126., 14460., 14794., 15128., 15876., 16216., 16556., 16896., 13666., 14036., 14406., 14776., 15480., 15856., 16232., 16608., 17342., 17724., 18106., 18488., 19252., 19640., 20028., 20416., 15613., 16058., 16503., 16948., 17886., 18340., 18794., 19248., 20231., 20694., 21157., 21620., 22648., 23120., 23592., 24064., 15265., 15618., 15971., 16324., 17170., 17532., 17894., 18256., 19147., 19518., 19889., 20260., 21196., 21576., 21956., 22336., 16965., 17226., 17487., 17748., 18502., 18772., 19042., 19312., 20111., 20390., 20669., 20948., 21792., 22080., 22368., 22656., 18793., 19090., 19387., 19684., 20474., 20780., 21086., 21392., 22227., 22542., 22857., 23172., 24052., 24376., 24700., 25024., 16674., 16884., 17094., 17304., 17880., 18096., 18312., 18528., 19134., 19356., 19578., 19800., 20436., 20664., 20892., 21120.,  7292.,  7416.,  7540.,  7664.,  8000.,  8128.,  8256.,  8384.,  8740.,  8872.,  9004.,  9136.,  9512.,  9648.,  9784.,  9920., 10102., 10300., 10498., 10696., 11164., 11368., 11572., 11776., 12274., 12484., 12694., 12904., 13432., 13648., 13864., 14080., 11086., 11308., 11530., 11752., 12244., 12472., 12700., 12928., 13450., 13684., 13918., 14152., 14704., 14944., 15184., 15424., 12070., 12316., 12562., 12808., 13324., 13576., 13828., 14080., 14626., 14884., 15142., 15400., 15976., 16240., 16504., 16768., 13054., 13324., 13594., 13864., 14404., 14680., 14956., 15232., 15802., 16084., 16366., 16648., 17248., 17536., 17824., 18112.,  7420.,  7608.,  7796.,  7984.,  8320.,  8512.,  8704.,  8896.,  9252.,  9448.,  9644.,  9840., 10216., 10416., 10616., 10816., 19964., 20280., 20596., 20912., 21504., 21824., 22144., 22464., 23076., 23400., 23724., 24048., 24680., 25008., 25336., 25664., 32822., 33308., 33794., 34280., 35196., 35688., 36180., 36672., 37618., 38116., 38614., 39112., 40088., 40592., 41096., 41600., 34446., 34956., 35466., 35976., 36916., 37432., 37948., 38464., 39434., 39956., 40478., 41000., 42000., 42528., 43056., 43584., 36070., 36604., 37138., 37672., 38636., 39176., 39716., 40256., 41250., 41796., 42342., 42888., 43912., 44464., 45016., 45568., 37694., 38252., 38810., 39368., 40356., 40920., 41484., 42048., 43066., 43636., 44206., 44776., 45824., 46400., 46976., 47552., 31996., 32376., 32756., 33136., 33856., 34240., 34624., 35008., 35748., 36136., 36524., 36912., 37672., 38064., 38456., 38848., 29586., 30132., 30678., 31224., 32104., 32656., 33208., 33760., 34670., 35228., 35786., 36344., 37284., 37848., 38412., 38976., 46213., 47050., 47887., 48724., 50054., 50900., 51746., 52592., 53967., 54822., 55677., 56532., 57952., 58816., 59680., 60544., 48041., 48914., 49787., 50660., 52026., 52908., 53790., 54672., 56083., 56974., 57865., 58756., 60212., 61112., 62012., 62912., 49741., 50522., 51303., 52084., 53358., 54148., 54938., 55728., 57047., 57846., 58645., 59444., 60808., 61616., 62424., 63232., 37105., 37794., 38483., 39172., 40354., 41052., 41750., 42448., 43675., 44382., 45089., 45796., 47068., 47784., 48500., 49216., 14418., 14804., 15190., 15576., 16328., 16720., 17112., 17504., 18286., 18684., 19082., 19480., 20292., 20696., 21100., 21504., 22434., 22868., 23302., 23736., 24504., 24944., 25384., 25824., 26622., 27068., 27514., 27960., 28788., 29240., 29692., 30144., 30173., 30842., 31511., 32180., 33342., 34020., 34698., 35376., 36583., 37270., 37957., 38644., 39896., 40592., 41288., 41984., 32001., 32706., 33411., 34116., 35314., 36028., 36742., 37456., 38699., 39422., 40145., 40868., 42156., 42888., 43620., 44352., 23461., 24074., 24687., 25300., 26406., 27028., 27650., 28272., 29423., 30054., 30685., 31316., 32512., 33152., 33792., 34432., 16969., 17490., 18011., 18532., 19546., 20076., 20606., 21136., 22195., 22734., 23273., 23812., 24916., 25464., 26012., 26560.,  8034.,  8308.,  8582.,  8856.,  9496.,  9776., 10056., 10336., 11006., 11292., 11578., 11864., 12564., 12856., 13148., 13440.,  7420.,  7672.,  7924.,  8176.,  8640.,  8896.,  9152.,  9408.,  9892., 10152., 10412., 10672., 11176., 11440., 11704., 11968.,  8758.,  9148.,  9538.,  9928., 10588., 10984., 11380., 11776., 12466., 12868., 13270., 13672., 14392., 14800., 15208., 15616.,  9742., 10156., 10570., 10984., 11668., 12088., 12508., 12928., 13642., 14068., 14494., 14920., 15664., 16096., 16528., 16960.,  6502.,  6812.,  7122.,  7432.,  8012.,  8328.,  8644.,  8960.,  9570.,  9892., 10214., 10536., 11176., 11504., 11832., 12160.,  5310.,  5516.,  5722.,  5928.,  6404.,  6616.,  6828.,  7040.,  7546.,  7764.,  7982.,  8200.,  8736.,  8960.,  9184.,  9408.,  3196.,  3256.,  3316.,  3376.,  3584.,  3648.,  3712.,  3776.,  4004.,  4072.,  4140.,  4208.,  4456.,  4528.,  4600.,  4672.};
  const std::array<int, 4> in_shape = {{ 3, 4, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x4x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16965., 17226., 17487., 17748., 18502., 18772., 19042., 19312., 20111., 20390., 20669., 20948., 21792., 22080., 22368., 22656., 18793., 19090., 19387., 19684., 20474., 20780., 21086., 21392., 22227., 22542., 22857., 23172., 24052., 24376., 24700., 25024., 20621., 20954., 21287., 21620., 22446., 22788., 23130., 23472., 24343., 24694., 25045., 25396., 26312., 26672., 27032., 27392., 22449., 22818., 23187., 23556., 24418., 24796., 25174., 25552., 26459., 26846., 27233., 27620., 28572., 28968., 29364., 29760., 27933., 28410., 28887., 29364., 30334., 30820., 31306., 31792., 32807., 33302., 33797., 34292., 35352., 35856., 36360., 36864., 29761., 30274., 30787., 31300., 32306., 32828., 33350., 33872., 34923., 35454., 35985., 36516., 37612., 38152., 38692., 39232., 31589., 32138., 32687., 33236., 34278., 34836., 35394., 35952., 37039., 37606., 38173., 38740., 39872., 40448., 41024., 41600., 33417., 34002., 34587., 35172., 36250., 36844., 37438., 38032., 39155., 39758., 40361., 40964., 42132., 42744., 43356., 43968., 23461., 24074., 24687., 25300., 26406., 27028., 27650., 28272., 29423., 30054., 30685., 31316., 32512., 33152., 33792., 34432., 16969., 17490., 18011., 18532., 19546., 20076., 20606., 21136., 22195., 22734., 23273., 23812., 24916., 25464., 26012., 26560., 12525., 12954., 13383., 13812., 14734., 15172., 15610., 16048., 17015., 17462., 17909., 18356., 19368., 19824., 20280., 20736., 14353., 14818., 15283., 15748., 16706., 17180., 17654., 18128., 19131., 19614., 20097., 20580., 21628., 22120., 22612., 23104., 15613., 16058., 16503., 16948., 17886., 18340., 18794., 19248., 20231., 20694., 21157., 21620., 22648., 23120., 23592., 24064., 15265., 15618., 15971., 16324., 17170., 17532., 17894., 18256., 19147., 19518., 19889., 20260., 21196., 21576., 21956., 22336., 16965., 17226., 17487., 17748., 18502., 18772., 19042., 19312., 20111., 20390., 20669., 20948., 21792., 22080., 22368., 22656., 18793., 19090., 19387., 19684., 20474., 20780., 21086., 21392., 22227., 22542., 22857., 23172., 24052., 24376., 24700., 25024., 46213., 47050., 47887., 48724., 50054., 50900., 51746., 52592., 53967., 54822., 55677., 56532., 57952., 58816., 59680., 60544., 48041., 48914., 49787., 50660., 52026., 52908., 53790., 54672., 56083., 56974., 57865., 58756., 60212., 61112., 62012., 62912., 49741., 50522., 51303., 52084., 53358., 54148., 54938., 55728., 57047., 57846., 58645., 59444., 60808., 61616., 62424., 63232., 37105., 37794., 38483., 39172., 40354., 41052., 41750., 42448., 43675., 44382., 45089., 45796., 47068., 47784., 48500., 49216., 30173., 30842., 31511., 32180., 33342., 34020., 34698., 35376., 36583., 37270., 37957., 38644., 39896., 40592., 41288., 41984., 32001., 32706., 33411., 34116., 35314., 36028., 36742., 37456., 38699., 39422., 40145., 40868., 42156., 42888., 43620., 44352., 23461., 24074., 24687., 25300., 26406., 27028., 27650., 28272., 29423., 30054., 30685., 31316., 32512., 33152., 33792., 34432., 16969., 17490., 18011., 18532., 19546., 20076., 20606., 21136., 22195., 22734., 23273., 23812., 24916., 25464., 26012., 26560.};
  const std::array<int, 4> in_shape = {{ 3, 4, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x4x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 111.,  178.,  217.,  145.,  231.,  348.,  393.,  252.,  363.,  528.,  573.,  360.,  495.,  708.,  753.,  468.,  261.,  358.,  379.,  223.,  671.,  958.,  997.,  625.,  891., 1248., 1293.,  792., 1023., 1428., 1473.,  900., 1155., 1608., 1653., 1008.,  581.,  778.,  799.,  463., 1231., 1738., 1777., 1105., 1551., 2148., 2193., 1332., 1683., 2328., 2373., 1440., 1815., 2508., 2553., 1548.,  901., 1198., 1219.,  703.};
  const std::array<int, 4> in_shape = {{ 3, 5, 4, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x4x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 348.,  393.,  528.,  573.,  708.,  753., 1248., 1293., 1428., 1473., 1608., 1653., 2148., 2193., 2328., 2373., 2508., 2553.};
  const std::array<int, 4> in_shape = {{ 3, 5, 4, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x4x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 208.,  222.,  332.,  356.,  404.,  434.,  268.,  290.,  429.,  462.,  642.,  696.,  723.,  786.,  459.,  504.,  669.,  726.,  966., 1056., 1047., 1146.,  651.,  720.,  909.,  990., 1290., 1416., 1371., 1506.,  843.,  936.,  460.,  522.,  620.,  716.,  656.,  758.,  376.,  446., 1248., 1342., 1772., 1916., 1844., 1994., 1148., 1250., 1629., 1782., 2262., 2496., 2343., 2586., 1419., 1584., 1869., 2046., 2586., 2856., 2667., 2946., 1611., 1800., 2109., 2310., 2910., 3216., 2991., 3306., 1803., 2016., 1020., 1162., 1340., 1556., 1376., 1598.,  776.,  926., 2288., 2462., 3212., 3476., 3284., 3554., 2028., 2210., 2829., 3102., 3882., 4296., 3963., 4386., 2379., 2664., 3069., 3366., 4206., 4656., 4287., 4746., 2571., 2880., 3309., 3630., 4530., 5016., 4611., 5106., 2763., 3096., 1580., 1802., 2060., 2396., 2096., 2438., 1176., 1406.};
  const std::array<int, 4> in_shape = {{ 3, 5, 4, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x4x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 642.,  696.,  723.,  786.,  966., 1056., 1047., 1146., 1290., 1416., 1371., 1506., 2262., 2496., 2343., 2586., 2586., 2856., 2667., 2946., 2910., 3216., 2991., 3306., 3882., 4296., 3963., 4386., 4206., 4656., 4287., 4746., 4530., 5016., 4611., 5106.};
  const std::array<int, 4> in_shape = {{ 3, 5, 4, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x4x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  402.,   416.,   430.,   444.,   640.,   664.,   688.,   712.,   778.,   808.,   838.,   868.,   514.,   536.,   558.,   580.,   825.,   858.,   891.,   924.,  1230.,  1284.,  1338.,  1392.,  1383.,  1446.,  1509.,  1572.,   873.,   918.,   963.,  1008.,  1281.,  1338.,  1395.,  1452.,  1842.,  1932.,  2022.,  2112.,  1995.,  2094.,  2193.,  2292.,  1233.,  1302.,  1371.,  1440.,  1737.,  1818.,  1899.,  1980.,  2454.,  2580.,  2706.,  2832.,  2607.,  2742.,  2877.,  3012.,  1593.,  1686.,  1779.,  1872.,   858.,   920.,   982.,  1044.,  1144.,  1240.,  1336.,  1432.,  1210.,  1312.,  1414.,  1516.,   682.,   752.,   822.,   892.,  2402.,  2496.,  2590.,  2684.,  3400.,  3544.,  3688.,  3832.,  3538.,  3688.,  3838.,  3988.,  2194.,  2296.,  2398.,  2500.,  3105.,  3258.,  3411.,  3564.,  4290.,  4524.,  4758.,  4992.,  4443.,  4686.,  4929.,  5172.,  2673.,  2838.,  3003.,  3168.,  3561.,  3738.,  3915.,  4092.,  4902.,  5172.,  5442.,  5712.,  5055.,  5334.,  5613.,  5892.,  3033.,  3222.,  3411.,  3600.,  4017.,  4218.,  4419.,  4620.,  5514.,  5820.,  6126.,  6432.,  5667.,  5982.,  6297.,  6612.,  3393.,  3606.,  3819.,  4032.,  1898.,  2040.,  2182.,  2324.,  2464.,  2680.,  2896.,  3112.,  2530.,  2752.,  2974.,  3196.,  1402.,  1552.,  1702.,  1852.,  4402.,  4576.,  4750.,  4924.,  6160.,  6424.,  6688.,  6952.,  6298.,  6568.,  6838.,  7108.,  3874.,  4056.,  4238.,  4420.,  5385.,  5658.,  5931.,  6204.,  7350.,  7764.,  8178.,  8592.,  7503.,  7926.,  8349.,  8772.,  4473.,  4758.,  5043.,  5328.,  5841.,  6138.,  6435.,  6732.,  7962.,  8412.,  8862.,  9312.,  8115.,  8574.,  9033.,  9492.,  4833.,  5142.,  5451.,  5760.,  6297.,  6618.,  6939.,  7260.,  8574.,  9060.,  9546., 10032.,  8727.,  9222.,  9717., 10212.,  5193.,  5526.,  5859.,  6192.,  2938.,  3160.,  3382.,  3604.,  3784.,  4120.,  4456.,  4792.,  3850.,  4192.,  4534.,  4876.,  2122.,  2352.,  2582.,  2812.};
  const std::array<int, 4> in_shape = {{ 3, 5, 4, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x4x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1230.,  1284.,  1338.,  1392.,  1383.,  1446.,  1509.,  1572.,  1842.,  1932.,  2022.,  2112.,  1995.,  2094.,  2193.,  2292.,  2454.,  2580.,  2706.,  2832.,  2607.,  2742.,  2877.,  3012.,  4290.,  4524.,  4758.,  4992.,  4443.,  4686.,  4929.,  5172.,  4902.,  5172.,  5442.,  5712.,  5055.,  5334.,  5613.,  5892.,  5514.,  5820.,  6126.,  6432.,  5667.,  5982.,  6297.,  6612.,  7350.,  7764.,  8178.,  8592.,  7503.,  7926.,  8349.,  8772.,  7962.,  8412.,  8862.,  9312.,  8115.,  8574.,  9033.,  9492.,  8574.,  9060.,  9546., 10032.,  8727.,  9222.,  9717., 10212.};
  const std::array<int, 4> in_shape = {{ 3, 5, 4, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x4x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  364.,   444.,   592.,   712.,   736.,   868.,   492.,   580.,   798.,   924.,  1203.,  1392.,  1365.,  1572.,   870.,  1008.,  1278.,  1452.,  1851.,  2112.,  2013.,  2292.,  1254.,  1440.,  1758.,  1980.,  2499.,  2832.,  2661.,  3012.,  1638.,  1872.,   892.,  1044.,  1204.,  1432.,  1276.,  1516.,   732.,   892.,  2444.,  2684.,  3472.,  3832.,  3616.,  3988.,  2252.,  2500.,  3198.,  3564.,  4443.,  4992.,  4605.,  5172.,  2790.,  3168.,  3678.,  4092.,  5091.,  5712.,  5253.,  5892.,  3174.,  3600.,  4158.,  4620.,  5739.,  6432.,  5901.,  6612.,  3558.,  4032.,  2012.,  2324.,  2644.,  3112.,  2716.,  3196.,  1532.,  1852.,  4524.,  4924.,  6352.,  6952.,  6496.,  7108.,  4012.,  4420.,  5598.,  6204.,  7683.,  8592.,  7845.,  8772.,  4710.,  5328.,  6078.,  6732.,  8331.,  9312.,  8493.,  9492.,  5094.,  5760.,  6558.,  7260.,  8979., 10032.,  9141., 10212.,  5478.,  6192.,  3132.,  3604.,  4084.,  4792.,  4156.,  4876.,  2332.,  2812.};
  const std::array<int, 4> in_shape = {{ 3, 5, 4, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x4x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1203.,  1392.,  1365.,  1572.,  1851.,  2112.,  2013.,  2292.,  2499.,  2832.,  2661.,  3012.,  4443.,  4992.,  4605.,  5172.,  5091.,  5712.,  5253.,  5892.,  5739.,  6432.,  5901.,  6612.,  7683.,  8592.,  7845.,  8772.,  8331.,  9312.,  8493.,  9492.,  8979., 10032.,  9141., 10212.};
  const std::array<int, 4> in_shape = {{ 3, 5, 4, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x4x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  704.,   728.,   860.,   888.,  1142.,  1184.,  1376.,  1424.,  1418.,  1472.,  1676.,  1736.,   944.,   984.,  1116.,  1160.,  1536.,  1596.,  1782.,  1848.,  2307.,  2406.,  2676.,  2784.,  2613.,  2730.,  3018.,  3144.,  1656.,  1740.,  1926.,  2016.,  2448.,  2556.,  2790.,  2904.,  3531.,  3702.,  4044.,  4224.,  3837.,  4026.,  4386.,  4584.,  2376.,  2508.,  2742.,  2880.,  3360.,  3516.,  3798.,  3960.,  4755.,  4998.,  5412.,  5664.,  5061.,  5322.,  5754.,  6024.,  3096.,  3276.,  3558.,  3744.,  1664.,  1784.,  1964.,  2088.,  2222.,  2408.,  2672.,  2864.,  2354.,  2552.,  2828.,  3032.,  1328.,  1464.,  1644.,  1784.,  4704.,  4888.,  5180.,  5368.,  6662.,  6944.,  7376.,  7664.,  6938.,  7232.,  7676.,  7976.,  4304.,  4504.,  4796.,  5000.,  6096.,  6396.,  6822.,  7128.,  8427.,  8886.,  9516.,  9984.,  8733.,  9210.,  9858., 10344.,  5256.,  5580.,  6006.,  6336.,  7008.,  7356.,  7830.,  8184.,  9651., 10182., 10884., 11424.,  9957., 10506., 11226., 11784.,  5976.,  6348.,  6822.,  7200.,  7920.,  8316.,  8838.,  9240., 10875., 11478., 12252., 12864., 11181., 11802., 12594., 13224.,  6696.,  7116.,  7638.,  8064.,  3744.,  4024.,  4364.,  4648.,  4862.,  5288.,  5792.,  6224.,  4994.,  5432.,  5948.,  6392.,  2768.,  3064.,  3404.,  3704.,  8704.,  9048.,  9500.,  9848., 12182., 12704., 13376., 13904., 12458., 12992., 13676., 14216.,  7664.,  8024.,  8476.,  8840., 10656., 11196., 11862., 12408., 14547., 15366., 16356., 17184., 14853., 15690., 16698., 17544.,  8856.,  9420., 10086., 10656., 11568., 12156., 12870., 13464., 15771., 16662., 17724., 18624., 16077., 16986., 18066., 18984.,  9576., 10188., 10902., 11520., 12480., 13116., 13878., 14520., 16995., 17958., 19092., 20064., 17301., 18282., 19434., 20424., 10296., 10956., 11718., 12384.,  5824.,  6264.,  6764.,  7208.,  7502.,  8168.,  8912.,  9584.,  7634.,  8312.,  9068.,  9752.,  4208.,  4664.,  5164.,  5624.};
  const std::array<int, 4> in_shape = {{ 3, 5, 4, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x4x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2307.,  2406.,  2676.,  2784.,  2613.,  2730.,  3018.,  3144.,  3531.,  3702.,  4044.,  4224.,  3837.,  4026.,  4386.,  4584.,  4755.,  4998.,  5412.,  5664.,  5061.,  5322.,  5754.,  6024.,  8427.,  8886.,  9516.,  9984.,  8733.,  9210.,  9858., 10344.,  9651., 10182., 10884., 11424.,  9957., 10506., 11226., 11784., 10875., 11478., 12252., 12864., 11181., 11802., 12594., 13224., 14547., 15366., 16356., 17184., 14853., 15690., 16698., 17544., 15771., 16662., 17724., 18624., 16077., 16986., 18066., 18984., 16995., 17958., 19092., 20064., 17301., 18282., 19434., 20424.};
  const std::array<int, 4> in_shape = {{ 3, 5, 4, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x4x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1384.,  1408.,  1432.,  1456.,  1692.,  1720.,  1748.,  1776.,  2242.,  2284.,  2326.,  2368.,  2704.,  2752.,  2800.,  2848.,  2782.,  2836.,  2890.,  2944.,  3292.,  3352.,  3412.,  3472.,  1848.,  1888.,  1928.,  1968.,  2188.,  2232.,  2276.,  2320.,  3012.,  3072.,  3132.,  3192.,  3498.,  3564.,  3630.,  3696.,  4515.,  4614.,  4713.,  4812.,  5244.,  5352.,  5460.,  5568.,  5109.,  5226.,  5343.,  5460.,  5910.,  6036.,  6162.,  6288.,  3228.,  3312.,  3396.,  3480.,  3762.,  3852.,  3942.,  4032.,  4788.,  4896.,  5004.,  5112.,  5466.,  5580.,  5694.,  5808.,  6891.,  7062.,  7233.,  7404.,  7908.,  8088.,  8268.,  8448.,  7485.,  7674.,  7863.,  8052.,  8574.,  8772.,  8970.,  9168.,  4620.,  4752.,  4884.,  5016.,  5346.,  5484.,  5622.,  5760.,  6564.,  6720.,  6876.,  7032.,  7434.,  7596.,  7758.,  7920.,  9267.,  9510.,  9753.,  9996., 10572., 10824., 11076., 11328.,  9861., 10122., 10383., 10644., 11238., 11508., 11778., 12048.,  6012.,  6192.,  6372.,  6552.,  6930.,  7116.,  7302.,  7488.,  3208.,  3328.,  3448.,  3568.,  3804.,  3928.,  4052.,  4176.,  4258.,  4444.,  4630.,  4816.,  5152.,  5344.,  5536.,  5728.,  4510.,  4708.,  4906.,  5104.,  5452.,  5656.,  5860.,  6064.,  2520.,  2656.,  2792.,  2928.,  3148.,  3288.,  3428.,  3568.,  9224.,  9408.,  9592.,  9776., 10172., 10360., 10548., 10736., 13042., 13324., 13606., 13888., 14464., 14752., 15040., 15328., 13582., 13876., 14170., 14464., 15052., 15352., 15652., 15952.,  8408.,  8608.,  8808.,  9008.,  9388.,  9592.,  9796., 10000., 11892., 12192., 12492., 12792., 13338., 13644., 13950., 14256., 16395., 16854., 17313., 17772., 18564., 19032., 19500., 19968., 16989., 17466., 17943., 18420., 19230., 19716., 20202., 20688., 10188., 10512., 10836., 11160., 11682., 12012., 12342., 12672., 13668., 14016., 14364., 14712., 15306., 15660., 16014., 16368., 18771., 19302., 19833., 20364., 21228., 21768., 22308., 22848., 19365., 19914., 20463., 21012., 21894., 22452., 23010., 23568., 11580., 11952., 12324., 12696., 13266., 13644., 14022., 14400., 15444., 15840., 16236., 16632., 17274., 17676., 18078., 18480., 21147., 21750., 22353., 22956., 23892., 24504., 25116., 25728., 21741., 22362., 22983., 23604., 24558., 25188., 25818., 26448., 12972., 13392., 13812., 14232., 14850., 15276., 15702., 16128.,  7208.,  7488.,  7768.,  8048.,  8444.,  8728.,  9012.,  9296.,  9298.,  9724., 10150., 10576., 11152., 11584., 12016., 12448.,  9550.,  9988., 10426., 10864., 11452., 11896., 12340., 12784.,  5240.,  5536.,  5832.,  6128.,  6508.,  6808.,  7108.,  7408., 17064., 17408., 17752., 18096., 18652., 19000., 19348., 19696., 23842., 24364., 24886., 25408., 26224., 26752., 27280., 27808., 24382., 24916., 25450., 25984., 26812., 27352., 27892., 28432., 14968., 15328., 15688., 16048., 16588., 16952., 17316., 17680., 20772., 21312., 21852., 22392., 23178., 23724., 24270., 24816., 28275., 29094., 29913., 30732., 31884., 32712., 33540., 34368., 28869., 29706., 30543., 31380., 32550., 33396., 34242., 35088., 17148., 17712., 18276., 18840., 19602., 20172., 20742., 21312., 22548., 23136., 23724., 24312., 25146., 25740., 26334., 26928., 30651., 31542., 32433., 33324., 34548., 35448., 36348., 37248., 31245., 32154., 33063., 33972., 35214., 36132., 37050., 37968., 18540., 19152., 19764., 20376., 21186., 21804., 22422., 23040., 24324., 24960., 25596., 26232., 27114., 27756., 28398., 29040., 33027., 33990., 34953., 35916., 37212., 38184., 39156., 40128., 33621., 34602., 35583., 36564., 37878., 38868., 39858., 40848., 19932., 20592., 21252., 21912., 22770., 23436., 24102., 24768., 11208., 11648., 12088., 12528., 13084., 13528., 13972., 14416., 14338., 15004., 15670., 16336., 17152., 17824., 18496., 19168., 14590., 15268., 15946., 16624., 17452., 18136., 18820., 19504.,  7960.,  8416.,  8872.,  9328.,  9868., 10328., 10788., 11248.};
  const std::array<int, 4> in_shape = {{ 3, 5, 4, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x4x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4515.,  4614.,  4713.,  4812.,  5244.,  5352.,  5460.,  5568.,  5109.,  5226.,  5343.,  5460.,  5910.,  6036.,  6162.,  6288.,  6891.,  7062.,  7233.,  7404.,  7908.,  8088.,  8268.,  8448.,  7485.,  7674.,  7863.,  8052.,  8574.,  8772.,  8970.,  9168.,  9267.,  9510.,  9753.,  9996., 10572., 10824., 11076., 11328.,  9861., 10122., 10383., 10644., 11238., 11508., 11778., 12048., 16395., 16854., 17313., 17772., 18564., 19032., 19500., 19968., 16989., 17466., 17943., 18420., 19230., 19716., 20202., 20688., 18771., 19302., 19833., 20364., 21228., 21768., 22308., 22848., 19365., 19914., 20463., 21012., 21894., 22452., 23010., 23568., 21147., 21750., 22353., 22956., 23892., 24504., 25116., 25728., 21741., 22362., 22983., 23604., 24558., 25188., 25818., 26448., 28275., 29094., 29913., 30732., 31884., 32712., 33540., 34368., 28869., 29706., 30543., 31380., 32550., 33396., 34242., 35088., 30651., 31542., 32433., 33324., 34548., 35448., 36348., 37248., 31245., 32154., 33063., 33972., 35214., 36132., 37050., 37968., 33027., 33990., 34953., 35916., 37212., 38184., 39156., 40128., 33621., 34602., 35583., 36564., 37878., 38868., 39858., 40848.};
  const std::array<int, 4> in_shape = {{ 3, 5, 4, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x4x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1308.,  1456.,  1612.,  1776.,  2146.,  2368.,  2602.,  2848.,  2698.,  2944.,  3202.,  3472.,  1804.,  1968.,  2140.,  2320.,  2958.,  3192.,  3438.,  3696.,  4461.,  4812.,  5181.,  5568.,  5073.,  5460.,  5865.,  6288.,  3222.,  3480.,  3750.,  4032.,  4782.,  5112.,  5454.,  5808.,  6909.,  7404.,  7917.,  8448.,  7521.,  8052.,  8601.,  9168.,  4662.,  5016.,  5382.,  5760.,  6606.,  7032.,  7470.,  7920.,  9357.,  9996., 10653., 11328.,  9969., 10644., 11337., 12048.,  6102.,  6552.,  7014.,  7488.,  3276.,  3568.,  3868.,  4176.,  4378.,  4816.,  5266.,  5728.,  4642.,  5104.,  5578.,  6064.,  2620.,  2928.,  3244.,  3568.,  9308.,  9776., 10252., 10736., 13186., 13888., 14602., 15328., 13738., 14464., 15202., 15952.,  8524.,  9008.,  9500., 10000., 12078., 12792., 13518., 14256., 16701., 17772., 18861., 19968., 17313., 18420., 19545., 20688., 10422., 11160., 11910., 12672., 13902., 14712., 15534., 16368., 19149., 20364., 21597., 22848., 19761., 21012., 22281., 23568., 11862., 12696., 13542., 14400., 15726., 16632., 17550., 18480., 21597., 22956., 24333., 25728., 22209., 23604., 25017., 26448., 13302., 14232., 15174., 16128.,  7436.,  8048.,  8668.,  9296.,  9658., 10576., 11506., 12448.,  9922., 10864., 11818., 12784.,  5500.,  6128.,  6764.,  7408., 17308., 18096., 18892., 19696., 24226., 25408., 26602., 27808., 24778., 25984., 27202., 28432., 15244., 16048., 16860., 17680., 21198., 22392., 23598., 24816., 28941., 30732., 32541., 34368., 29553., 31380., 33225., 35088., 17622., 18840., 20070., 21312., 23022., 24312., 25614., 26928., 31389., 33324., 35277., 37248., 32001., 33972., 35961., 37968., 19062., 20376., 21702., 23040., 24846., 26232., 27630., 29040., 33837., 35916., 38013., 40128., 34449., 36564., 38697., 40848., 20502., 21912., 23334., 24768., 11596., 12528., 13468., 14416., 14938., 16336., 17746., 19168., 15202., 16624., 18058., 19504.,  8380.,  9328., 10284., 11248.};
  const std::array<int, 4> in_shape = {{ 3, 5, 4, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x4x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4461.,  4812.,  5181.,  5568.,  5073.,  5460.,  5865.,  6288.,  6909.,  7404.,  7917.,  8448.,  7521.,  8052.,  8601.,  9168.,  9357.,  9996., 10653., 11328.,  9969., 10644., 11337., 12048., 16701., 17772., 18861., 19968., 17313., 18420., 19545., 20688., 19149., 20364., 21597., 22848., 19761., 21012., 22281., 23568., 21597., 22956., 24333., 25728., 22209., 23604., 25017., 26448., 28941., 30732., 32541., 34368., 29553., 31380., 33225., 35088., 31389., 33324., 35277., 37248., 32001., 33972., 35961., 37968., 33837., 35916., 38013., 40128., 34449., 36564., 38697., 40848.};
  const std::array<int, 4> in_shape = {{ 3, 5, 4, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2572.,  2616.,  2864.,  2912.,  3172.,  3224.,  3496.,  3552.,  4214.,  4292.,  4652.,  4736.,  5114.,  5204.,  5600.,  5696.,  5294.,  5396.,  5780.,  5888.,  6290.,  6404.,  6824.,  6944.,  3532.,  3608.,  3856.,  3936.,  4196.,  4280.,  4552.,  4640.,  5802.,  5916.,  6264.,  6384.,  6750.,  6876.,  7260.,  7392.,  8733.,  8922.,  9426.,  9624., 10155., 10362., 10920., 11136.,  9921., 10146., 10686., 10920., 11487., 11730., 12324., 12576.,  6282.,  6444.,  6792.,  6960.,  7326.,  7500.,  7884.,  8064.,  9354.,  9564., 10008., 10224., 10686., 10908., 11388., 11616., 13485., 13818., 14466., 14808., 15483., 15834., 16536., 16896., 14673., 15042., 15726., 16104., 16815., 17202., 17940., 18336.,  9066.,  9324.,  9768., 10032., 10494., 10764., 11244., 11520., 12906., 13212., 13752., 14064., 14622., 14940., 15516., 15840., 18237., 18714., 19506., 19992., 20811., 21306., 22152., 22656., 19425., 19938., 20766., 21288., 22143., 22674., 23556., 24096., 11850., 12204., 12744., 13104., 13662., 14028., 14604., 14976.,  6316.,  6552.,  6896.,  7136.,  7492.,  7736.,  8104.,  8352.,  8390.,  8756.,  9260.,  9632., 10154., 10532., 11072., 11456.,  8894.,  9284.,  9812., 10208., 10754., 11156., 11720., 12128.,  4972.,  5240.,  5584.,  5856.,  6212.,  6488.,  6856.,  7136., 18252., 18616., 19184., 19552., 20132., 20504., 21096., 21472., 25814., 26372., 27212., 27776., 28634., 29204., 30080., 30656., 26894., 27476., 28340., 28928., 29810., 30404., 31304., 31904., 16652., 17048., 17616., 18016., 18596., 19000., 19592., 20000., 23562., 24156., 24984., 25584., 26430., 27036., 27900., 28512., 32493., 33402., 34626., 35544., 36795., 37722., 39000., 39936., 33681., 34626., 35886., 36840., 38127., 39090., 40404., 41376., 20202., 20844., 21672., 22320., 23166., 23820., 24684., 25344., 11498., 11932., 12600., 13040., 13726., 14172., 14876., 15328., 15357., 16026., 17010., 17688., 18699., 19386., 20424., 21120., 16545., 17250., 18270., 18984., 20031., 20754., 21828., 22560.,  9418.,  9900., 10568., 11056., 11742., 12236., 12940., 13440.,  5578.,  5852.,  6360.,  6640.,  7166.,  7452.,  7996.,  8288.,  7437.,  7866.,  8610.,  9048.,  9819., 10266., 11064., 11520.,  8625.,  9090.,  9870., 10344., 11151., 11634., 12468., 12960.,  4778.,  5100.,  5608.,  5936.,  6462.,  6796.,  7340.,  7680.,  1516.,  1560.,  1712.,  1760.,  1924.,  1976.,  2152.,  2208.,  2342.,  2420.,  2636.,  2720.,  2954.,  3044.,  3296.,  3392.,  2846.,  2948.,  3188.,  3296.,  3554.,  3668.,  3944.,  4064.,  1708.,  1784.,  1936.,  2016.,  2180.,  2264.,  2440.,  2528.,  8844.,  9016.,  9392.,  9568.,  9956., 10136., 10536., 10720., 12854., 13124., 13676., 13952., 14522., 14804., 15392., 15680., 13934., 14228., 14804., 15104., 15698., 16004., 16616., 16928.,  8780.,  8984.,  9360.,  9568.,  9956., 10168., 10568., 10784., 12906., 13212., 13752., 14064., 14622., 14940., 15516., 15840., 18237., 18714., 19506., 19992., 20811., 21306., 22152., 22656., 19425., 19938., 20766., 21288., 22143., 22674., 23556., 24096., 11850., 12204., 12744., 13104., 13662., 14028., 14604., 14976., 16458., 16860., 17496., 17904., 18558., 18972., 19644., 20064., 22989., 23610., 24546., 25176., 26139., 26778., 27768., 28416., 24177., 24834., 25806., 26472., 27471., 28146., 29172., 29856., 14634., 15084., 15720., 16176., 16830., 17292., 17964., 18432., 20010., 20508., 21240., 21744., 22494., 23004., 23772., 24288., 27741., 28506., 29586., 30360., 31467., 32250., 33384., 34176., 28929., 29730., 30846., 31656., 32799., 33618., 34788., 35616., 17418., 17964., 18696., 19248., 19998., 20556., 21324., 21888.,  9516.,  9880., 10352., 10720., 11204., 11576., 12072., 12448., 12422., 12980., 13676., 14240., 14954., 15524., 16256., 16832., 12926., 13508., 14228., 14816., 15554., 16148., 16904., 17504.,  7148.,  7544.,  8016.,  8416.,  8900.,  9304.,  9800., 10208.};
  const std::array<int, 4> in_shape = {{ 3, 5, 4, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8733.,  8922.,  9426.,  9624., 10155., 10362., 10920., 11136.,  9921., 10146., 10686., 10920., 11487., 11730., 12324., 12576., 13485., 13818., 14466., 14808., 15483., 15834., 16536., 16896., 14673., 15042., 15726., 16104., 16815., 17202., 17940., 18336., 18237., 18714., 19506., 19992., 20811., 21306., 22152., 22656., 19425., 19938., 20766., 21288., 22143., 22674., 23556., 24096., 32493., 33402., 34626., 35544., 36795., 37722., 39000., 39936., 33681., 34626., 35886., 36840., 38127., 39090., 40404., 41376., 15357., 16026., 17010., 17688., 18699., 19386., 20424., 21120., 16545., 17250., 18270., 18984., 20031., 20754., 21828., 22560.,  7437.,  7866.,  8610.,  9048.,  9819., 10266., 11064., 11520.,  8625.,  9090.,  9870., 10344., 11151., 11634., 12468., 12960., 18237., 18714., 19506., 19992., 20811., 21306., 22152., 22656., 19425., 19938., 20766., 21288., 22143., 22674., 23556., 24096., 22989., 23610., 24546., 25176., 26139., 26778., 27768., 28416., 24177., 24834., 25806., 26472., 27471., 28146., 29172., 29856., 27741., 28506., 29586., 30360., 31467., 32250., 33384., 34176., 28929., 29730., 30846., 31656., 32799., 33618., 34788., 35616.};
  const std::array<int, 4> in_shape = {{ 3, 5, 4, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x4x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  940.,   984.,  1028.,  1072.,  1200.,  1248.,  1296.,  1344.,  1492.,  1544.,  1596.,  1648.,  1816.,  1872.,  1928.,  1984.,  1822.,  1900.,  1978.,  2056.,  2308.,  2392.,  2476.,  2560.,  2842.,  2932.,  3022.,  3112.,  3424.,  3520.,  3616.,  3712.,  2422.,  2524.,  2626.,  2728.,  3004.,  3112.,  3220.,  3328.,  3634.,  3748.,  3862.,  3976.,  4312.,  4432.,  4552.,  4672.,  2700.,  2776.,  2852.,  2928.,  3152.,  3232.,  3312.,  3392.,  3636.,  3720.,  3804.,  3888.,  4152.,  4240.,  4328.,  4416.,  2210.,  2324.,  2438.,  2552.,  2808.,  2928.,  3048.,  3168.,  3454.,  3580.,  3706.,  3832.,  4148.,  4280.,  4412.,  4544.,  4605.,  4794.,  4983.,  5172.,  5598.,  5796.,  5994.,  6192.,  6663.,  6870.,  7077.,  7284.,  7800.,  8016.,  8232.,  8448.,  5409.,  5634.,  5859.,  6084.,  6546.,  6780.,  7014.,  7248.,  7755.,  7998.,  8241.,  8484.,  9036.,  9288.,  9540.,  9792.,  5042.,  5204.,  5366.,  5528.,  5864.,  6032.,  6200.,  6368.,  6734.,  6908.,  7082.,  7256.,  7652.,  7832.,  8012.,  8192.,  4098.,  4308.,  4518.,  4728.,  5080.,  5296.,  5512.,  5728.,  6110.,  6332.,  6554.,  6776.,  7188.,  7416.,  7644.,  7872.,  7821.,  8154.,  8487.,  8820.,  9390.,  9732., 10074., 10416., 11031., 11382., 11733., 12084., 12744., 13104., 13464., 13824.,  8625.,  8994.,  9363.,  9732., 10338., 10716., 11094., 11472., 12123., 12510., 12897., 13284., 13980., 14376., 14772., 15168.,  7442.,  7700.,  7958.,  8216.,  8648.,  8912.,  9176.,  9440.,  9902., 10172., 10442., 10712., 11204., 11480., 11756., 12032.,  2786.,  2964.,  3142.,  3320.,  3640.,  3824.,  4008.,  4192.,  4542.,  4732.,  4922.,  5112.,  5492.,  5688.,  5884.,  6080.,  5725.,  6010.,  6295.,  6580.,  7102.,  7396.,  7690.,  7984.,  8551.,  8854.,  9157.,  9460., 10072., 10384., 10696., 11008.,  6529.,  6850.,  7171.,  7492.,  8050.,  8380.,  8710.,  9040.,  9643.,  9982., 10321., 10660., 11308., 11656., 12004., 12352.,  4594.,  4820.,  5046.,  5272.,  5672.,  5904.,  6136.,  6368.,  6798.,  7036.,  7274.,  7512.,  7972.,  8216.,  8460.,  8704.,  2668.,  2776.,  2884.,  2992.,  3184.,  3296.,  3408.,  3520.,  3732.,  3848.,  3964.,  4080.,  4312.,  4432.,  4552.,  4672.,  3038.,  3212.,  3386.,  3560.,  3876.,  4056.,  4236.,  4416.,  4762.,  4948.,  5134.,  5320.,  5696.,  5888.,  6080.,  6272.,  3510.,  3708.,  3906.,  4104.,  4444.,  4648.,  4852.,  5056.,  5426.,  5636.,  5846.,  6056.,  6456.,  6672.,  6888.,  7104.,  1548.,  1688.,  1828.,  1968.,  2192.,  2336.,  2480.,  2624.,  2868.,  3016.,  3164.,  3312.,  3576.,  3728.,  3880.,  4032.,  2028.,  2136.,  2244.,  2352.,  2544.,  2656.,  2768.,  2880.,  3092.,  3208.,  3324.,  3440.,  3672.,  3792.,  3912.,  4032.,  4222.,  4396.,  4570.,  4744.,  5092.,  5272.,  5452.,  5632.,  6010.,  6196.,  6382.,  6568.,  6976.,  7168.,  7360.,  7552.,  4822.,  5020.,  5218.,  5416.,  5788.,  5992.,  6196.,  6400.,  6802.,  7012.,  7222.,  7432.,  7864.,  8080.,  8296.,  8512.,  4812.,  4952.,  5092.,  5232.,  5520.,  5664.,  5808.,  5952.,  6260.,  6408.,  6556.,  6704.,  7032.,  7184.,  7336.,  7488.,  4098.,  4308.,  4518.,  4728.,  5080.,  5296.,  5512.,  5728.,  6110.,  6332.,  6554.,  6776.,  7188.,  7416.,  7644.,  7872.,  7821.,  8154.,  8487.,  8820.,  9390.,  9732., 10074., 10416., 11031., 11382., 11733., 12084., 12744., 13104., 13464., 13824.,  8625.,  8994.,  9363.,  9732., 10338., 10716., 11094., 11472., 12123., 12510., 12897., 13284., 13980., 14376., 14772., 15168.,  7442.,  7700.,  7958.,  8216.,  8648.,  8912.,  9176.,  9440.,  9902., 10172., 10442., 10712., 11204., 11480., 11756., 12032.,  2786.,  2964.,  3142.,  3320.,  3640.,  3824.,  4008.,  4192.,  4542.,  4732.,  4922.,  5112.,  5492.,  5688.,  5884.,  6080.,  5725.,  6010.,  6295.,  6580.,  7102.,  7396.,  7690.,  7984.,  8551.,  8854.,  9157.,  9460., 10072., 10384., 10696., 11008.,  6529.,  6850.,  7171.,  7492.,  8050.,  8380.,  8710.,  9040.,  9643.,  9982., 10321., 10660., 11308., 11656., 12004., 12352.,  4594.,  4820.,  5046.,  5272.,  5672.,  5904.,  6136.,  6368.,  6798.,  7036.,  7274.,  7512.,  7972.,  8216.,  8460.,  8704.,  3522.,  3668.,  3814.,  3960.,  4248.,  4400.,  4552.,  4704.,  5022.,  5180.,  5338.,  5496.,  5844.,  6008.,  6172.,  6336.,  4653.,  4890.,  5127.,  5364.,  5838.,  6084.,  6330.,  6576.,  7095.,  7350.,  7605.,  7860.,  8424.,  8688.,  8952.,  9216.,  5457.,  5730.,  6003.,  6276.,  6786.,  7068.,  7350.,  7632.,  8187.,  8478.,  8769.,  9060.,  9660.,  9960., 10260., 10560.,  3794.,  3988.,  4182.,  4376.,  4744.,  4944.,  5144.,  5344.,  5742.,  5948.,  6154.,  6360.,  6788.,  7000.,  7212.,  7424.,   556.,   600.,   644.,   688.,   816.,   864.,   912.,   960.,  1108.,  1160.,  1212.,  1264.,  1432.,  1488.,  1544.,  1600.,  1662.,  1740.,  1818.,  1896.,  2116.,  2200.,  2284.,  2368.,  2618.,  2708.,  2798.,  2888.,  3168.,  3264.,  3360.,  3456.,  2134.,  2236.,  2338.,  2440.,  2684.,  2792.,  2900.,  3008.,  3282.,  3396.,  3510.,  3624.,  3928.,  4048.,  4168.,  4288.,  1484.,  1560.,  1636.,  1712.,  1872.,  1952.,  2032.,  2112.,  2292.,  2376.,  2460.,  2544.,  2744.,  2832.,  2920.,  3008.,  3116.,  3288.,  3460.,  3632.,  3888.,  4064.,  4240.,  4416.,  4692.,  4872.,  5052.,  5232.,  5528.,  5712.,  5896.,  6080.,  6622.,  6892.,  7162.,  7432.,  7876.,  8152.,  8428.,  8704.,  9178.,  9460.,  9742., 10024., 10528., 10816., 11104., 11392.,  7222.,  7516.,  7810.,  8104.,  8572.,  8872.,  9172.,  9472.,  9970., 10276., 10582., 10888., 11416., 11728., 12040., 12352.,  6924.,  7128.,  7332.,  7536.,  7888.,  8096.,  8304.,  8512.,  8884.,  9096.,  9308.,  9520.,  9912., 10128., 10344., 10560.,  2786.,  2964.,  3142.,  3320.,  3640.,  3824.,  4008.,  4192.,  4542.,  4732.,  4922.,  5112.,  5492.,  5688.,  5884.,  6080.,  5725.,  6010.,  6295.,  6580.,  7102.,  7396.,  7690.,  7984.,  8551.,  8854.,  9157.,  9460., 10072., 10384., 10696., 11008.,  6529.,  6850.,  7171.,  7492.,  8050.,  8380.,  8710.,  9040.,  9643.,  9982., 10321., 10660., 11308., 11656., 12004., 12352.,  4594.,  4820.,  5046.,  5272.,  5672.,  5904.,  6136.,  6368.,  6798.,  7036.,  7274.,  7512.,  7972.,  8216.,  8460.,  8704.,  3522.,  3668.,  3814.,  3960.,  4248.,  4400.,  4552.,  4704.,  5022.,  5180.,  5338.,  5496.,  5844.,  6008.,  6172.,  6336.,  4653.,  4890.,  5127.,  5364.,  5838.,  6084.,  6330.,  6576.,  7095.,  7350.,  7605.,  7860.,  8424.,  8688.,  8952.,  9216.,  5457.,  5730.,  6003.,  6276.,  6786.,  7068.,  7350.,  7632.,  8187.,  8478.,  8769.,  9060.,  9660.,  9960., 10260., 10560.,  3794.,  3988.,  4182.,  4376.,  4744.,  4944.,  5144.,  5344.,  5742.,  5948.,  6154.,  6360.,  6788.,  7000.,  7212.,  7424.,  2210.,  2324.,  2438.,  2552.,  2808.,  2928.,  3048.,  3168.,  3454.,  3580.,  3706.,  3832.,  4148.,  4280.,  4412.,  4544.,  4605.,  4794.,  4983.,  5172.,  5598.,  5796.,  5994.,  6192.,  6663.,  6870.,  7077.,  7284.,  7800.,  8016.,  8232.,  8448.,  5409.,  5634.,  5859.,  6084.,  6546.,  6780.,  7014.,  7248.,  7755.,  7998.,  8241.,  8484.,  9036.,  9288.,  9540.,  9792.,  5042.,  5204.,  5366.,  5528.,  5864.,  6032.,  6200.,  6368.,  6734.,  6908.,  7082.,  7256.,  7652.,  7832.,  8012.,  8192.,  1644.,  1752.,  1860.,  1968.,  2160.,  2272.,  2384.,  2496.,  2708.,  2824.,  2940.,  3056.,  3288.,  3408.,  3528.,  3648.,  3550.,  3724.,  3898.,  4072.,  4388.,  4568.,  4748.,  4928.,  5274.,  5460.,  5646.,  5832.,  6208.,  6400.,  6592.,  6784.,  4022.,  4220.,  4418.,  4616.,  4956.,  5160.,  5364.,  5568.,  5938.,  6148.,  6358.,  6568.,  6968.,  7184.,  7400.,  7616.,  2572.,  2712.,  2852.,  2992.,  3216.,  3360.,  3504.,  3648.,  3892.,  4040.,  4188.,  4336.,  4600.,  4752.,  4904.,  5056.};
  const std::array<int, 4> in_shape = {{ 3, 5, 4, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x4x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4605.,  4794.,  4983.,  5172.,  5598.,  5796.,  5994.,  6192.,  6663.,  6870.,  7077.,  7284.,  7800.,  8016.,  8232.,  8448.,  5409.,  5634.,  5859.,  6084.,  6546.,  6780.,  7014.,  7248.,  7755.,  7998.,  8241.,  8484.,  9036.,  9288.,  9540.,  9792.,  7821.,  8154.,  8487.,  8820.,  9390.,  9732., 10074., 10416., 11031., 11382., 11733., 12084., 12744., 13104., 13464., 13824.,  8625.,  8994.,  9363.,  9732., 10338., 10716., 11094., 11472., 12123., 12510., 12897., 13284., 13980., 14376., 14772., 15168.,  5725.,  6010.,  6295.,  6580.,  7102.,  7396.,  7690.,  7984.,  8551.,  8854.,  9157.,  9460., 10072., 10384., 10696., 11008.,  6529.,  6850.,  7171.,  7492.,  8050.,  8380.,  8710.,  9040.,  9643.,  9982., 10321., 10660., 11308., 11656., 12004., 12352.,  7821.,  8154.,  8487.,  8820.,  9390.,  9732., 10074., 10416., 11031., 11382., 11733., 12084., 12744., 13104., 13464., 13824.,  8625.,  8994.,  9363.,  9732., 10338., 10716., 11094., 11472., 12123., 12510., 12897., 13284., 13980., 14376., 14772., 15168.,  5725.,  6010.,  6295.,  6580.,  7102.,  7396.,  7690.,  7984.,  8551.,  8854.,  9157.,  9460., 10072., 10384., 10696., 11008.,  6529.,  6850.,  7171.,  7492.,  8050.,  8380.,  8710.,  9040.,  9643.,  9982., 10321., 10660., 11308., 11656., 12004., 12352.,  4653.,  4890.,  5127.,  5364.,  5838.,  6084.,  6330.,  6576.,  7095.,  7350.,  7605.,  7860.,  8424.,  8688.,  8952.,  9216.,  5457.,  5730.,  6003.,  6276.,  6786.,  7068.,  7350.,  7632.,  8187.,  8478.,  8769.,  9060.,  9660.,  9960., 10260., 10560.,  5725.,  6010.,  6295.,  6580.,  7102.,  7396.,  7690.,  7984.,  8551.,  8854.,  9157.,  9460., 10072., 10384., 10696., 11008.,  6529.,  6850.,  7171.,  7492.,  8050.,  8380.,  8710.,  9040.,  9643.,  9982., 10321., 10660., 11308., 11656., 12004., 12352.,  4653.,  4890.,  5127.,  5364.,  5838.,  6084.,  6330.,  6576.,  7095.,  7350.,  7605.,  7860.,  8424.,  8688.,  8952.,  9216.,  5457.,  5730.,  6003.,  6276.,  6786.,  7068.,  7350.,  7632.,  8187.,  8478.,  8769.,  9060.,  9660.,  9960., 10260., 10560.,  4605.,  4794.,  4983.,  5172.,  5598.,  5796.,  5994.,  6192.,  6663.,  6870.,  7077.,  7284.,  7800.,  8016.,  8232.,  8448.,  5409.,  5634.,  5859.,  6084.,  6546.,  6780.,  7014.,  7248.,  7755.,  7998.,  8241.,  8484.,  9036.,  9288.,  9540.,  9792.};
  const std::array<int, 4> in_shape = {{ 3, 5, 4, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x5x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 128.,  202.,  241.,  280.,  184.,  276.,  411.,  456.,  501.,  318.,  441.,  636.,  681.,  726.,  453.,  606.,  861.,  906.,  951.,  588.,  320.,  436.,  457.,  478.,  280.,  828., 1177., 1216., 1255.,  784., 1101., 1536., 1581., 1626.,  993., 1266., 1761., 1806., 1851., 1128., 1431., 1986., 2031., 2076., 1263.,  720.,  961.,  982., 1003.,  580., 1528., 2152., 2191., 2230., 1384., 1926., 2661., 2706., 2751., 1668., 2091., 2886., 2931., 2976., 1803., 2256., 3111., 3156., 3201., 1938., 1120., 1486., 1507., 1528.,  880.};
  const std::array<int, 4> in_shape = {{ 3, 5, 5, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x5x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 411.,  456.,  501.,  636.,  681.,  726.,  861.,  906.,  951., 1536., 1581., 1626., 1761., 1806., 1851., 1986., 2031., 2076., 2661., 2706., 2751., 2886., 2931., 2976., 3111., 3156., 3201.};
  const std::array<int, 4> in_shape = {{ 3, 5, 5, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x5x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 240.,  256.,  377.,  404.,  449.,  482.,  521.,  560.,  340.,  368.,  513.,  552.,  759.,  822.,  840.,  912.,  921., 1002.,  579.,  636.,  813.,  882., 1164., 1272., 1245., 1362., 1326., 1452.,  819.,  906., 1113., 1212., 1569., 1722., 1650., 1812., 1731., 1902., 1059., 1176.,  564.,  640.,  755.,  872.,  791.,  914.,  827.,  956.,  472.,  560., 1540., 1656., 2177., 2354., 2249., 2432., 2321., 2510., 1440., 1568., 2013., 2202., 2784., 3072., 2865., 3162., 2946., 3252., 1779., 1986., 2313., 2532., 3189., 3522., 3270., 3612., 3351., 3702., 2019., 2256., 2613., 2862., 3594., 3972., 3675., 4062., 3756., 4152., 2259., 2526., 1264., 1440., 1655., 1922., 1691., 1964., 1727., 2006.,  972., 1160., 2840., 3056., 3977., 4304., 4049., 4382., 4121., 4460., 2540., 2768., 3513., 3852., 4809., 5322., 4890., 5412., 4971., 5502., 2979., 3336., 3813., 4182., 5214., 5772., 5295., 5862., 5376., 5952., 3219., 3606., 4113., 4512., 5619., 6222., 5700., 6312., 5781., 6402., 3459., 3876., 1964., 2240., 2555., 2972., 2591., 3014., 2627., 3056., 1472., 1760.};
  const std::array<int, 4> in_shape = {{ 3, 5, 5, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x5x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 759.,  822.,  840.,  912.,  921., 1002., 1164., 1272., 1245., 1362., 1326., 1452., 1569., 1722., 1650., 1812., 1731., 1902., 2784., 3072., 2865., 3162., 2946., 3252., 3189., 3522., 3270., 3612., 3351., 3702., 3594., 3972., 3675., 4062., 3756., 4152., 4809., 5322., 4890., 5412., 4971., 5502., 5214., 5772., 5295., 5862., 5376., 5952., 5619., 6222., 5700., 6312., 5781., 6402.};
  const std::array<int, 4> in_shape = {{ 3, 5, 5, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x5x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  464.,   480.,   496.,   512.,   727.,   754.,   781.,   808.,   865.,   898.,   931.,   964.,  1003.,  1042.,  1081.,  1120.,   652.,   680.,   708.,   736.,   987.,  1026.,  1065.,  1104.,  1455.,  1518.,  1581.,  1644.,  1608.,  1680.,  1752.,  1824.,  1761.,  1842.,  1923.,  2004.,  1101.,  1158.,  1215.,  1272.,  1557.,  1626.,  1695.,  1764.,  2220.,  2328.,  2436.,  2544.,  2373.,  2490.,  2607.,  2724.,  2526.,  2652.,  2778.,  2904.,  1551.,  1638.,  1725.,  1812.,  2127.,  2226.,  2325.,  2424.,  2985.,  3138.,  3291.,  3444.,  3138.,  3300.,  3462.,  3624.,  3291.,  3462.,  3633.,  3804.,  2001.,  2118.,  2235.,  2352.,  1052.,  1128.,  1204.,  1280.,  1393.,  1510.,  1627.,  1744.,  1459.,  1582.,  1705.,  1828.,  1525.,  1654.,  1783.,  1912.,   856.,   944.,  1032.,  1120.,  2964.,  3080.,  3196.,  3312.,  4177.,  4354.,  4531.,  4708.,  4315.,  4498.,  4681.,  4864.,  4453.,  4642.,  4831.,  5020.,  2752.,  2880.,  3008.,  3136.,  3837.,  4026.,  4215.,  4404.,  5280.,  5568.,  5856.,  6144.,  5433.,  5730.,  6027.,  6324.,  5586.,  5892.,  6198.,  6504.,  3351.,  3558.,  3765.,  3972.,  4407.,  4626.,  4845.,  5064.,  6045.,  6378.,  6711.,  7044.,  6198.,  6540.,  6882.,  7224.,  6351.,  6702.,  7053.,  7404.,  3801.,  4038.,  4275.,  4512.,  4977.,  5226.,  5475.,  5724.,  6810.,  7188.,  7566.,  7944.,  6963.,  7350.,  7737.,  8124.,  7116.,  7512.,  7908.,  8304.,  4251.,  4518.,  4785.,  5052.,  2352.,  2528.,  2704.,  2880.,  3043.,  3310.,  3577.,  3844.,  3109.,  3382.,  3655.,  3928.,  3175.,  3454.,  3733.,  4012.,  1756.,  1944.,  2132.,  2320.,  5464.,  5680.,  5896.,  6112.,  7627.,  7954.,  8281.,  8608.,  7765.,  8098.,  8431.,  8764.,  7903.,  8242.,  8581.,  8920.,  4852.,  5080.,  5308.,  5536.,  6687.,  7026.,  7365.,  7704.,  9105.,  9618., 10131., 10644.,  9258.,  9780., 10302., 10824.,  9411.,  9942., 10473., 11004.,  5601.,  5958.,  6315.,  6672.,  7257.,  7626.,  7995.,  8364.,  9870., 10428., 10986., 11544., 10023., 10590., 11157., 11724., 10176., 10752., 11328., 11904.,  6051.,  6438.,  6825.,  7212.,  7827.,  8226.,  8625.,  9024., 10635., 11238., 11841., 12444., 10788., 11400., 12012., 12624., 10941., 11562., 12183., 12804.,  6501.,  6918.,  7335.,  7752.,  3652.,  3928.,  4204.,  4480.,  4693.,  5110.,  5527.,  5944.,  4759.,  5182.,  5605.,  6028.,  4825.,  5254.,  5683.,  6112.,  2656.,  2944.,  3232.,  3520.};
  const std::array<int, 4> in_shape = {{ 3, 5, 5, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x5x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1455.,  1518.,  1581.,  1644.,  1608.,  1680.,  1752.,  1824.,  1761.,  1842.,  1923.,  2004.,  2220.,  2328.,  2436.,  2544.,  2373.,  2490.,  2607.,  2724.,  2526.,  2652.,  2778.,  2904.,  2985.,  3138.,  3291.,  3444.,  3138.,  3300.,  3462.,  3624.,  3291.,  3462.,  3633.,  3804.,  5280.,  5568.,  5856.,  6144.,  5433.,  5730.,  6027.,  6324.,  5586.,  5892.,  6198.,  6504.,  6045.,  6378.,  6711.,  7044.,  6198.,  6540.,  6882.,  7224.,  6351.,  6702.,  7053.,  7404.,  6810.,  7188.,  7566.,  7944.,  6963.,  7350.,  7737.,  8124.,  7116.,  7512.,  7908.,  8304.,  9105.,  9618., 10131., 10644.,  9258.,  9780., 10302., 10824.,  9411.,  9942., 10473., 11004.,  9870., 10428., 10986., 11544., 10023., 10590., 11157., 11724., 10176., 10752., 11328., 11904., 10635., 11238., 11841., 12444., 10788., 11400., 12012., 12624., 10941., 11562., 12183., 12804.};
  const std::array<int, 4> in_shape = {{ 3, 5, 5, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x5x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  428.,   512.,   682.,   808.,   826.,   964.,   970.,  1120.,   636.,   736.,   966.,  1104.,  1437.,  1644.,  1599.,  1824.,  1761.,  2004.,  1110.,  1272.,  1566.,  1764.,  2247.,  2544.,  2409.,  2724.,  2571.,  2904.,  1590.,  1812.,  2166.,  2424.,  3057.,  3444.,  3219.,  3624.,  3381.,  3804.,  2070.,  2352.,  1100.,  1280.,  1474.,  1744.,  1546.,  1828.,  1618.,  1912.,   924.,  1120.,  3028.,  3312.,  4282.,  4708.,  4426.,  4864.,  4570.,  5020.,  2836.,  3136.,  3966.,  4404.,  5487.,  6144.,  5649.,  6324.,  5811.,  6504.,  3510.,  3972.,  4566.,  5064.,  6297.,  7044.,  6459.,  7224.,  6621.,  7404.,  3990.,  4512.,  5166.,  5724.,  7107.,  7944.,  7269.,  8124.,  7431.,  8304.,  4470.,  5052.,  2500.,  2880.,  3274.,  3844.,  3346.,  3928.,  3418.,  4012.,  1924.,  2320.,  5628.,  6112.,  7882.,  8608.,  8026.,  8764.,  8170.,  8920.,  5036.,  5536.,  6966.,  7704.,  9537., 10644.,  9699., 10824.,  9861., 11004.,  5910.,  6672.,  7566.,  8364., 10347., 11544., 10509., 11724., 10671., 11904.,  6390.,  7212.,  8166.,  9024., 11157., 12444., 11319., 12624., 11481., 12804.,  6870.,  7752.,  3900.,  4480.,  5074.,  5944.,  5146.,  6028.,  5218.,  6112.,  2924.,  3520.};
  const std::array<int, 4> in_shape = {{ 3, 5, 5, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x5x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1437.,  1644.,  1599.,  1824.,  1761.,  2004.,  2247.,  2544.,  2409.,  2724.,  2571.,  2904.,  3057.,  3444.,  3219.,  3624.,  3381.,  3804.,  5487.,  6144.,  5649.,  6324.,  5811.,  6504.,  6297.,  7044.,  6459.,  7224.,  6621.,  7404.,  7107.,  7944.,  7269.,  8124.,  7431.,  8304.,  9537., 10644.,  9699., 10824.,  9861., 11004., 10347., 11544., 10509., 11724., 10671., 11904., 11157., 12444., 11319., 12624., 11481., 12804.};
  const std::array<int, 4> in_shape = {{ 3, 5, 5, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x5x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  828.,   856.,   992.,  1024.,  1316.,  1364.,  1562.,  1616.,  1592.,  1652.,  1862.,  1928.,  1868.,  1940.,  2162.,  2240.,  1220.,  1272.,  1416.,  1472.,  1860.,  1932.,  2130.,  2208.,  2757.,  2874.,  3162.,  3288.,  3063.,  3198.,  3504.,  3648.,  3369.,  3522.,  3846.,  4008.,  2112.,  2220.,  2430.,  2544.,  3000.,  3132.,  3390.,  3528.,  4287.,  4494.,  4872.,  5088.,  4593.,  4818.,  5214.,  5448.,  4899.,  5142.,  5556.,  5808.,  3012.,  3180.,  3450.,  3624.,  4140.,  4332.,  4650.,  4848.,  5817.,  6114.,  6582.,  6888.,  6123.,  6438.,  6924.,  7248.,  6429.,  6762.,  7266.,  7608.,  3912.,  4140.,  4470.,  4704.,  2052.,  2200.,  2408.,  2560.,  2720.,  2948.,  3254.,  3488.,  2852.,  3092.,  3410.,  3656.,  2984.,  3236.,  3566.,  3824.,  1676.,  1848.,  2064.,  2240.,  5828.,  6056.,  6392.,  6624.,  8216.,  8564.,  9062.,  9416.,  8492.,  8852.,  9362.,  9728.,  8768.,  9140.,  9662., 10040.,  5420.,  5672.,  6016.,  6272.,  7560.,  7932.,  8430.,  8808., 10407., 10974., 11712., 12288., 10713., 11298., 12054., 12648., 11019., 11622., 12396., 13008.,  6612.,  7020.,  7530.,  7944.,  8700.,  9132.,  9690., 10128., 11937., 12594., 13422., 14088., 12243., 12918., 13764., 14448., 12549., 13242., 14106., 14808.,  7512.,  7980.,  8550.,  9024.,  9840., 10332., 10950., 11448., 13467., 14214., 15132., 15888., 13773., 14538., 15474., 16248., 14079., 14862., 15816., 16608.,  8412.,  8940.,  9570., 10104.,  4652.,  5000.,  5408.,  5760.,  6020.,  6548.,  7154.,  7688.,  6152.,  6692.,  7310.,  7856.,  6284.,  6836.,  7466.,  8024.,  3476.,  3848.,  4264.,  4640., 10828., 11256., 11792., 12224., 15116., 15764., 16562., 17216., 15392., 16052., 16862., 17528., 15668., 16340., 17162., 17840.,  9620., 10072., 10616., 11072., 13260., 13932., 14730., 15408., 18057., 19074., 20262., 21288., 18363., 19398., 20604., 21648., 18669., 19722., 20946., 22008., 11112., 11820., 12630., 13344., 14400., 15132., 15990., 16728., 19587., 20694., 21972., 23088., 19893., 21018., 22314., 23448., 20199., 21342., 22656., 23808., 12012., 12780., 13650., 14424., 15540., 16332., 17250., 18048., 21117., 22314., 23682., 24888., 21423., 22638., 24024., 25248., 21729., 22962., 24366., 25608., 12912., 13740., 14670., 15504.,  7252.,  7800.,  8408.,  8960.,  9320., 10148., 11054., 11888.,  9452., 10292., 11210., 12056.,  9584., 10436., 11366., 12224.,  5276.,  5848.,  6464.,  7040.};
  const std::array<int, 4> in_shape = {{ 3, 5, 5, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x5x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2757.,  2874.,  3162.,  3288.,  3063.,  3198.,  3504.,  3648.,  3369.,  3522.,  3846.,  4008.,  4287.,  4494.,  4872.,  5088.,  4593.,  4818.,  5214.,  5448.,  4899.,  5142.,  5556.,  5808.,  5817.,  6114.,  6582.,  6888.,  6123.,  6438.,  6924.,  7248.,  6429.,  6762.,  7266.,  7608., 10407., 10974., 11712., 12288., 10713., 11298., 12054., 12648., 11019., 11622., 12396., 13008., 11937., 12594., 13422., 14088., 12243., 12918., 13764., 14448., 12549., 13242., 14106., 14808., 13467., 14214., 15132., 15888., 13773., 14538., 15474., 16248., 14079., 14862., 15816., 16608., 18057., 19074., 20262., 21288., 18363., 19398., 20604., 21648., 18669., 19722., 20946., 22008., 19587., 20694., 21972., 23088., 19893., 21018., 22314., 23448., 20199., 21342., 22656., 23808., 21117., 22314., 23682., 24888., 21423., 22638., 24024., 25248., 21729., 22962., 24366., 25608.};
  const std::array<int, 4> in_shape = {{ 3, 5, 5, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x5x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1628.,  1656.,  1684.,  1712.,  1952.,  1984.,  2016.,  2048.,  2584.,  2632.,  2680.,  2728.,  3070.,  3124.,  3178.,  3232.,  3124.,  3184.,  3244.,  3304.,  3658.,  3724.,  3790.,  3856.,  3664.,  3736.,  3808.,  3880.,  4246.,  4324.,  4402.,  4480.,  2388.,  2440.,  2492.,  2544.,  2776.,  2832.,  2888.,  2944.,  3648.,  3720.,  3792.,  3864.,  4182.,  4260.,  4338.,  4416.,  5397.,  5514.,  5631.,  5748.,  6198.,  6324.,  6450.,  6576.,  5991.,  6126.,  6261.,  6396.,  6864.,  7008.,  7152.,  7296.,  6585.,  6738.,  6891.,  7044.,  7530.,  7692.,  7854.,  8016.,  4116.,  4224.,  4332.,  4440.,  4746.,  4860.,  4974.,  5088.,  5868.,  6000.,  6132.,  6264.,  6642.,  6780.,  6918.,  7056.,  8367.,  8574.,  8781.,  8988.,  9528.,  9744.,  9960., 10176.,  8961.,  9186.,  9411.,  9636., 10194., 10428., 10662., 10896.,  9555.,  9798., 10041., 10284., 10860., 11112., 11364., 11616.,  5856.,  6024.,  6192.,  6360.,  6726.,  6900.,  7074.,  7248.,  8088.,  8280.,  8472.,  8664.,  9102.,  9300.,  9498.,  9696., 11337., 11634., 11931., 12228., 12858., 13164., 13470., 13776., 11931., 12246., 12561., 12876., 13524., 13848., 14172., 14496., 12525., 12858., 13191., 13524., 14190., 14532., 14874., 15216.,  7596.,  7824.,  8052.,  8280.,  8706.,  8940.,  9174.,  9408.,  3956.,  4104.,  4252.,  4400.,  4664.,  4816.,  4968.,  5120.,  5212.,  5440.,  5668.,  5896.,  6274.,  6508.,  6742.,  6976.,  5464.,  5704.,  5944.,  6184.,  6574.,  6820.,  7066.,  7312.,  5716.,  5968.,  6220.,  6472.,  6874.,  7132.,  7390.,  7648.,  3180.,  3352.,  3524.,  3696.,  3952.,  4128.,  4304.,  4480., 11428., 11656., 11884., 12112., 12552., 12784., 13016., 13248., 16084., 16432., 16780., 17128., 17770., 18124., 18478., 18832., 16624., 16984., 17344., 17704., 18358., 18724., 19090., 19456., 17164., 17536., 17908., 18280., 18946., 19324., 19702., 20080., 10588., 10840., 11092., 11344., 11776., 12032., 12288., 12544., 14748., 15120., 15492., 15864., 16482., 16860., 17238., 17616., 20247., 20814., 21381., 21948., 22848., 23424., 24000., 24576., 20841., 21426., 22011., 22596., 23514., 24108., 24702., 25296., 21435., 22038., 22641., 23244., 24180., 24792., 25404., 26016., 12816., 13224., 13632., 14040., 14646., 15060., 15474., 15888., 16968., 17400., 17832., 18264., 18942., 19380., 19818., 20256., 23217., 23874., 24531., 25188., 26178., 26844., 27510., 28176., 23811., 24486., 25161., 25836., 26844., 27528., 28212., 28896., 24405., 25098., 25791., 26484., 27510., 28212., 28914., 29616., 14556., 15024., 15492., 15960., 16626., 17100., 17574., 18048., 19188., 19680., 20172., 20664., 21402., 21900., 22398., 22896., 26187., 26934., 27681., 28428., 29508., 30264., 31020., 31776., 26781., 27546., 28311., 29076., 30174., 30948., 31722., 32496., 27375., 28158., 28941., 29724., 30840., 31632., 32424., 33216., 16296., 16824., 17352., 17880., 18606., 19140., 19674., 20208.,  8956.,  9304.,  9652., 10000., 10464., 10816., 11168., 11520., 11512., 12040., 12568., 13096., 13774., 14308., 14842., 15376., 11764., 12304., 12844., 13384., 14074., 14620., 15166., 15712., 12016., 12568., 13120., 13672., 14374., 14932., 15490., 16048.,  6580.,  6952.,  7324.,  7696.,  8152.,  8528.,  8904.,  9280., 21228., 21656., 22084., 22512., 23152., 23584., 24016., 24448., 29584., 30232., 30880., 31528., 32470., 33124., 33778., 34432., 30124., 30784., 31444., 32104., 33058., 33724., 34390., 35056., 30664., 31336., 32008., 32680., 33646., 34324., 35002., 35680., 18788., 19240., 19692., 20144., 20776., 21232., 21688., 22144., 25848., 26520., 27192., 27864., 28782., 29460., 30138., 30816., 35097., 36114., 37131., 38148., 39498., 40524., 41550., 42576., 35691., 36726., 37761., 38796., 40164., 41208., 42252., 43296., 36285., 37338., 38391., 39444., 40830., 41892., 42954., 44016., 21516., 22224., 22932., 23640., 24546., 25260., 25974., 26688., 28068., 28800., 29532., 30264., 31242., 31980., 32718., 33456., 38067., 39174., 40281., 41388., 42828., 43944., 45060., 46176., 38661., 39786., 40911., 42036., 43494., 44628., 45762., 46896., 39255., 40398., 41541., 42684., 44160., 45312., 46464., 47616., 23256., 24024., 24792., 25560., 26526., 27300., 28074., 28848., 30288., 31080., 31872., 32664., 33702., 34500., 35298., 36096., 41037., 42234., 43431., 44628., 46158., 47364., 48570., 49776., 41631., 42846., 44061., 45276., 46824., 48048., 49272., 50496., 42225., 43458., 44691., 45924., 47490., 48732., 49974., 51216., 24996., 25824., 26652., 27480., 28506., 29340., 30174., 31008., 13956., 14504., 15052., 15600., 16264., 16816., 17368., 17920., 17812., 18640., 19468., 20296., 21274., 22108., 22942., 23776., 18064., 18904., 19744., 20584., 21574., 22420., 23266., 24112., 18316., 19168., 20020., 20872., 21874., 22732., 23590., 24448.,  9980., 10552., 11124., 11696., 12352., 12928., 13504., 14080.};
  const std::array<int, 4> in_shape = {{ 3, 5, 5, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x5x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5397.,  5514.,  5631.,  5748.,  6198.,  6324.,  6450.,  6576.,  5991.,  6126.,  6261.,  6396.,  6864.,  7008.,  7152.,  7296.,  6585.,  6738.,  6891.,  7044.,  7530.,  7692.,  7854.,  8016.,  8367.,  8574.,  8781.,  8988.,  9528.,  9744.,  9960., 10176.,  8961.,  9186.,  9411.,  9636., 10194., 10428., 10662., 10896.,  9555.,  9798., 10041., 10284., 10860., 11112., 11364., 11616., 11337., 11634., 11931., 12228., 12858., 13164., 13470., 13776., 11931., 12246., 12561., 12876., 13524., 13848., 14172., 14496., 12525., 12858., 13191., 13524., 14190., 14532., 14874., 15216., 20247., 20814., 21381., 21948., 22848., 23424., 24000., 24576., 20841., 21426., 22011., 22596., 23514., 24108., 24702., 25296., 21435., 22038., 22641., 23244., 24180., 24792., 25404., 26016., 23217., 23874., 24531., 25188., 26178., 26844., 27510., 28176., 23811., 24486., 25161., 25836., 26844., 27528., 28212., 28896., 24405., 25098., 25791., 26484., 27510., 28212., 28914., 29616., 26187., 26934., 27681., 28428., 29508., 30264., 31020., 31776., 26781., 27546., 28311., 29076., 30174., 30948., 31722., 32496., 27375., 28158., 28941., 29724., 30840., 31632., 32424., 33216., 35097., 36114., 37131., 38148., 39498., 40524., 41550., 42576., 35691., 36726., 37761., 38796., 40164., 41208., 42252., 43296., 36285., 37338., 38391., 39444., 40830., 41892., 42954., 44016., 38067., 39174., 40281., 41388., 42828., 43944., 45060., 46176., 38661., 39786., 40911., 42036., 43494., 44628., 45762., 46896., 39255., 40398., 41541., 42684., 44160., 45312., 46464., 47616., 41037., 42234., 43431., 44628., 46158., 47364., 48570., 49776., 41631., 42846., 44061., 45276., 46824., 48048., 49272., 50496., 42225., 43458., 44691., 45924., 47490., 48732., 49974., 51216.};
  const std::array<int, 4> in_shape = {{ 3, 5, 5, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x5x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1556.,  1712.,  1876.,  2048.,  2494.,  2728.,  2974.,  3232.,  3046.,  3304.,  3574.,  3856.,  3598.,  3880.,  4174.,  4480.,  2356.,  2544.,  2740.,  2944.,  3606.,  3864.,  4134.,  4416.,  5361.,  5748.,  6153.,  6576.,  5973.,  6396.,  6837.,  7296.,  6585.,  7044.,  7521.,  8016.,  4134.,  4440.,  4758.,  5088.,  5886.,  6264.,  6654.,  7056.,  8421.,  8988.,  9573., 10176.,  9033.,  9636., 10257., 10896.,  9645., 10284., 10941., 11616.,  5934.,  6360.,  6798.,  7248.,  8166.,  8664.,  9174.,  9696., 11481., 12228., 12993., 13776., 12093., 12876., 13677., 14496., 12705., 13524., 14361., 15216.,  7734.,  8280.,  8838.,  9408.,  4052.,  4400.,  4756.,  5120.,  5374.,  5896.,  6430.,  6976.,  5638.,  6184.,  6742.,  7312.,  5902.,  6472.,  7054.,  7648.,  3316.,  3696.,  4084.,  4480., 11556., 12112., 12676., 13248., 16294., 17128., 17974., 18832., 16846., 17704., 18574., 19456., 17398., 18280., 19174., 20080., 10756., 11344., 11940., 12544., 15006., 15864., 16734., 17616., 20661., 21948., 23253., 24576., 21273., 22596., 23937., 25296., 21885., 23244., 24621., 26016., 13134., 14040., 14958., 15888., 17286., 18264., 19254., 20256., 23721., 25188., 26673., 28176., 24333., 25836., 27357., 28896., 24945., 26484., 28041., 29616., 14934., 15960., 16998., 18048., 19566., 20664., 21774., 22896., 26781., 28428., 30093., 31776., 27393., 29076., 30777., 32496., 28005., 29724., 31461., 33216., 16734., 17880., 19038., 20208.,  9252., 10000., 10756., 11520., 11974., 13096., 14230., 15376., 12238., 13384., 14542., 15712., 12502., 13672., 14854., 16048.,  6916.,  7696.,  8484.,  9280., 21556., 22512., 23476., 24448., 30094., 31528., 32974., 34432., 30646., 32104., 33574., 35056., 31198., 32680., 34174., 35680., 19156., 20144., 21140., 22144., 26406., 27864., 29334., 30816., 35961., 38148., 40353., 42576., 36573., 38796., 41037., 43296., 37185., 39444., 41721., 44016., 22134., 23640., 25158., 26688., 28686., 30264., 31854., 33456., 39021., 41388., 43773., 46176., 39633., 42036., 44457., 46896., 40245., 42684., 45141., 47616., 23934., 25560., 27198., 28848., 30966., 32664., 34374., 36096., 42081., 44628., 47193., 49776., 42693., 45276., 47877., 50496., 43305., 45924., 48561., 51216., 25734., 27480., 29238., 31008., 14452., 15600., 16756., 17920., 18574., 20296., 22030., 23776., 18838., 20584., 22342., 24112., 19102., 20872., 22654., 24448., 10516., 11696., 12884., 14080.};
  const std::array<int, 4> in_shape = {{ 3, 5, 5, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x5x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5361.,  5748.,  6153.,  6576.,  5973.,  6396.,  6837.,  7296.,  6585.,  7044.,  7521.,  8016.,  8421.,  8988.,  9573., 10176.,  9033.,  9636., 10257., 10896.,  9645., 10284., 10941., 11616., 11481., 12228., 12993., 13776., 12093., 12876., 13677., 14496., 12705., 13524., 14361., 15216., 20661., 21948., 23253., 24576., 21273., 22596., 23937., 25296., 21885., 23244., 24621., 26016., 23721., 25188., 26673., 28176., 24333., 25836., 27357., 28896., 24945., 26484., 28041., 29616., 26781., 28428., 30093., 31776., 27393., 29076., 30777., 32496., 28005., 29724., 31461., 33216., 35961., 38148., 40353., 42576., 36573., 38796., 41037., 43296., 37185., 39444., 41721., 44016., 39021., 41388., 43773., 46176., 39633., 42036., 44457., 46896., 40245., 42684., 45141., 47616., 42081., 44628., 47193., 49776., 42693., 45276., 47877., 50496., 43305., 45924., 48561., 51216.};
  const std::array<int, 4> in_shape = {{ 3, 5, 5, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x5x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3060.,  3112.,  3368.,  3424.,  3692.,  3752.,  4032.,  4096.,  4898.,  4988.,  5360.,  5456.,  5846.,  5948.,  6356.,  6464.,  5978.,  6092.,  6488.,  6608.,  7022.,  7148.,  7580.,  7712.,  7058.,  7196.,  7616.,  7760.,  8198.,  8348.,  8804.,  8960.,  4612.,  4712.,  4984.,  5088.,  5372.,  5480.,  5776.,  5888.,  7074.,  7212.,  7584.,  7728.,  8118.,  8268.,  8676.,  8832., 10497., 10722., 11262., 11496., 12063., 12306., 12900., 13152., 11685., 11946., 12522., 12792., 13395., 13674., 14304., 14592., 12873., 13170., 13782., 14088., 14727., 15042., 15708., 16032.,  8058.,  8268.,  8664.,  8880.,  9294.,  9516.,  9948., 10176., 11514., 11772., 12264., 12528., 13038., 13308., 13836., 14112., 16437., 16842., 17562., 17976., 18723., 19146., 19920., 20352., 17625., 18066., 18822., 19272., 20055., 20514., 21324., 21792., 18813., 19290., 20082., 20568., 21387., 21882., 22728., 23232., 11538., 11868., 12384., 12720., 13254., 13596., 14148., 14496., 15954., 16332., 16944., 17328., 17958., 18348., 18996., 19392., 22377., 22962., 23862., 24456., 25383., 25986., 26940., 27552., 23565., 24186., 25122., 25752., 26715., 27354., 28344., 28992., 24753., 25410., 26382., 27048., 28047., 28722., 29748., 30432., 15018., 15468., 16104., 16560., 17214., 17676., 18348., 18816.,  7812.,  8104.,  8504.,  8800.,  9212.,  9512.,  9936., 10240., 10298., 10748., 11336., 11792., 12398., 12860., 13484., 13952., 10802., 11276., 11888., 12368., 12998., 13484., 14132., 14624., 11306., 11804., 12440., 12944., 13598., 14108., 14780., 15296.,  6292.,  6632.,  7048.,  7392.,  7820.,  8168.,  8608.,  8960., 22660., 23112., 23768., 24224., 24892., 25352., 26032., 26496., 23578., 24140., 24984., 25552., 26414., 26988., 27868., 28448., 17362., 17820., 18560., 19024., 19782., 20252., 21028., 21504., 12170., 12524., 13160., 13520., 14174., 14540., 15212., 15584.,  7444.,  7688.,  8104.,  8352.,  8780.,  9032.,  9472.,  9728., 13658., 14140., 14856., 15344., 16078., 16572., 17324., 17824., 13061., 13674., 14602., 15224., 16179., 16810., 17792., 18432., 10025., 10546., 11382., 11912., 12775., 13314., 14204., 14752.,  8013.,  8442.,  9186.,  9624., 10395., 10842., 11640., 12096.,  4466.,  4764.,  5248.,  5552.,  6054.,  6364.,  6884.,  7200.,  8626.,  8972.,  9552.,  9904., 10502., 10860., 11476., 11840.,  9401.,  9810., 10534., 10952., 11703., 12130., 12908., 13344.,  9437.,  9754., 10386., 10712., 11371., 11706., 12392., 12736., 10497., 10722., 11262., 11496., 12063., 12306., 12900., 13152.,  6666.,  6828.,  7176.,  7344.,  7710.,  7884.,  8268.,  8448.,  9738.,  9948., 10392., 10608., 11070., 11292., 11772., 12000., 14061., 14394., 15042., 15384., 16059., 16410., 17112., 17472., 15249., 15618., 16302., 16680., 17391., 17778., 18516., 18912., 16437., 16842., 17562., 17976., 18723., 19146., 19920., 20352., 10146., 10428., 10896., 11184., 11670., 11964., 12468., 12768.,  5012.,  5192.,  5480.,  5664.,  5964.,  6152.,  6464.,  6656.,  6770.,  7052.,  7472.,  7760.,  8198.,  8492.,  8948.,  9248.,  7274.,  7580.,  8024.,  8336.,  8798.,  9116.,  9596.,  9920.,  7778.,  8108.,  8576.,  8912.,  9398.,  9740., 10244., 10592.,  4388.,  4616.,  4920.,  5152.,  5468.,  5704.,  6032.,  6272., 17172., 17512., 18056., 18400., 18956., 19304., 19872., 20224., 24338., 24860., 25664., 26192., 27014., 27548., 28388., 28928., 25418., 25964., 26792., 27344., 28190., 28748., 29612., 30176., 26498., 27068., 27920., 28496., 29366., 29948., 30836., 31424., 16420., 16808., 17368., 17760., 18332., 18728., 19312., 19712., 23058., 23628., 24432., 25008., 25830., 26412., 27252., 27840., 31881., 32754., 33942., 34824., 36039., 36930., 38172., 39072., 33069., 33978., 35202., 36120., 37371., 38298., 39576., 40512., 25937., 26754., 27886., 28712., 29871., 30706., 31892., 32736., 13290., 13804., 14504., 15024., 15742., 16268., 17004., 17536., 11882., 12316., 12984., 13424., 14110., 14556., 15260., 15712., 15933., 16602., 17586., 18264., 19275., 19962., 21000., 21696., 17121., 17826., 18846., 19560., 20607., 21330., 22404., 23136., 13061., 13674., 14602., 15224., 16179., 16810., 17792., 18432.,  6274.,  6652.,  7216.,  7600.,  8182.,  8572.,  9172.,  9568.,  6850.,  7148.,  7680.,  7984.,  8534.,  8844.,  9412.,  9728.,  9201.,  9666., 10446., 10920., 11727., 12210., 13044., 13536., 10389., 10890., 11706., 12216., 13059., 13578., 14448., 14976.,  9401.,  9810., 10534., 10952., 11703., 12130., 12908., 13344.,  5402.,  5644.,  6072.,  6320.,  6766.,  7020.,  7484.,  7744.,  2212.,  2280.,  2456.,  2528.,  2716.,  2792.,  2992.,  3072.,  3242.,  3356.,  3608.,  3728.,  3998.,  4124.,  4412.,  4544.,  3746.,  3884.,  4160.,  4304.,  4598.,  4748.,  5060.,  5216.,  4250.,  4412.,  4712.,  4880.,  5198.,  5372.,  5708.,  5888.,  2484.,  2600.,  2792.,  2912.,  3116.,  3240.,  3456.,  3584.};
  const std::array<int, 4> in_shape = {{ 3, 5, 5, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x5x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10497., 10722., 11262., 11496., 12063., 12306., 12900., 13152., 11685., 11946., 12522., 12792., 13395., 13674., 14304., 14592., 12873., 13170., 13782., 14088., 14727., 15042., 15708., 16032., 16437., 16842., 17562., 17976., 18723., 19146., 19920., 20352., 17625., 18066., 18822., 19272., 20055., 20514., 21324., 21792., 18813., 19290., 20082., 20568., 21387., 21882., 22728., 23232., 22377., 22962., 23862., 24456., 25383., 25986., 26940., 27552., 23565., 24186., 25122., 25752., 26715., 27354., 28344., 28992., 24753., 25410., 26382., 27048., 28047., 28722., 29748., 30432., 13061., 13674., 14602., 15224., 16179., 16810., 17792., 18432., 10025., 10546., 11382., 11912., 12775., 13314., 14204., 14752.,  8013.,  8442.,  9186.,  9624., 10395., 10842., 11640., 12096.,  9401.,  9810., 10534., 10952., 11703., 12130., 12908., 13344.,  9437.,  9754., 10386., 10712., 11371., 11706., 12392., 12736., 10497., 10722., 11262., 11496., 12063., 12306., 12900., 13152., 14061., 14394., 15042., 15384., 16059., 16410., 17112., 17472., 15249., 15618., 16302., 16680., 17391., 17778., 18516., 18912., 16437., 16842., 17562., 17976., 18723., 19146., 19920., 20352., 31881., 32754., 33942., 34824., 36039., 36930., 38172., 39072., 33069., 33978., 35202., 36120., 37371., 38298., 39576., 40512., 25937., 26754., 27886., 28712., 29871., 30706., 31892., 32736., 15933., 16602., 17586., 18264., 19275., 19962., 21000., 21696., 17121., 17826., 18846., 19560., 20607., 21330., 22404., 23136., 13061., 13674., 14602., 15224., 16179., 16810., 17792., 18432.,  9201.,  9666., 10446., 10920., 11727., 12210., 13044., 13536., 10389., 10890., 11706., 12216., 13059., 13578., 14448., 14976.,  9401.,  9810., 10534., 10952., 11703., 12130., 12908., 13344.};
  const std::array<int, 4> in_shape = {{ 3, 5, 5, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x5x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2868.,  2920.,  2972.,  3024.,  3352.,  3408.,  3464.,  3520.,  3868.,  3928.,  3988.,  4048.,  4416.,  4480.,  4544.,  4608.,  5994.,  6084.,  6174.,  6264.,  6784.,  6880.,  6976.,  7072.,  7622.,  7724.,  7826.,  7928.,  8508.,  8616.,  8724.,  8832.,  7618.,  7732.,  7846.,  7960.,  8504.,  8624.,  8744.,  8864.,  9438.,  9564.,  9690.,  9816., 10420., 10552., 10684., 10816.,  9242.,  9380.,  9518.,  9656., 10224., 10368., 10512., 10656., 11254., 11404., 11554., 11704., 12332., 12488., 12644., 12800.,  9124.,  9224.,  9324.,  9424.,  9864.,  9968., 10072., 10176., 10636., 10744., 10852., 10960., 11440., 11552., 11664., 11776.,  8250.,  8388.,  8526.,  8664.,  9136.,  9280.,  9424.,  9568., 10070., 10220., 10370., 10520., 11052., 11208., 11364., 11520., 14497., 14722., 14947., 15172., 15890., 16124., 16358., 16592., 17355., 17598., 17841., 18084., 18892., 19144., 19396., 19648., 16325., 16586., 16847., 17108., 17862., 18132., 18402., 18672., 19471., 19750., 20029., 20308., 21152., 21440., 21728., 22016., 18153., 18450., 18747., 19044., 19834., 20140., 20446., 20752., 21587., 21902., 22217., 22532., 23412., 23736., 24060., 24384., 15906., 16116., 16326., 16536., 17112., 17328., 17544., 17760., 18366., 18588., 18810., 19032., 19668., 19896., 20124., 20352., 14450., 14708., 14966., 15224., 15816., 16080., 16344., 16608., 17230., 17500., 17770., 18040., 18692., 18968., 19244., 19520., 23637., 24042., 24447., 24852., 25750., 26164., 26578., 26992., 27935., 28358., 28781., 29204., 30192., 30624., 31056., 31488., 25465., 25906., 26347., 26788., 27722., 28172., 28622., 29072., 30051., 30510., 30969., 31428., 32452., 32920., 33388., 33856., 27293., 27770., 28247., 28724., 29694., 30180., 30666., 31152., 32167., 32662., 33157., 33652., 34712., 35216., 35720., 36224., 22746., 23076., 23406., 23736., 24432., 24768., 25104., 25440., 26166., 26508., 26850., 27192., 27948., 28296., 28644., 28992., 20650., 21028., 21406., 21784., 22496., 22880., 23264., 23648., 24390., 24780., 25170., 25560., 26332., 26728., 27124., 27520., 32777., 33362., 33947., 34532., 35610., 36204., 36798., 37392., 38515., 39118., 39721., 40324., 41492., 42104., 42716., 43328., 34605., 35226., 35847., 36468., 37582., 38212., 38842., 39472., 40631., 41270., 41909., 42548., 43752., 44400., 45048., 45696., 36433., 37090., 37747., 38404., 39554., 40220., 40886., 41552., 42747., 43422., 44097., 44772., 46012., 46696., 47380., 48064., 29586., 30036., 30486., 30936., 31752., 32208., 32664., 33120., 33966., 34428., 34890., 35352., 36228., 36696., 37164., 37632., 15332., 15624., 15916., 16208., 16712., 17008., 17304., 17600., 18124., 18424., 18724., 19024., 19568., 19872., 20176., 20480., 20146., 20596., 21046., 21496., 22216., 22672., 23128., 23584., 24334., 24796., 25258., 25720., 26500., 26968., 27436., 27904., 21130., 21604., 22078., 22552., 23296., 23776., 24256., 24736., 25510., 25996., 26482., 26968., 27772., 28264., 28756., 29248., 22114., 22612., 23110., 23608., 24376., 24880., 25384., 25888., 26686., 27196., 27706., 28216., 29044., 29560., 30076., 30592., 12244., 12584., 12924., 13264., 13752., 14096., 14440., 14784., 15292., 15640., 15988., 16336., 16864., 17216., 17568., 17920., 28868., 29320., 29772., 30224., 30952., 31408., 31864., 32320., 33068., 33528., 33988., 34448., 35216., 35680., 36144., 36608., 46466., 47028., 47590., 48152., 49144., 49712., 50280., 50848., 51870., 52444., 53018., 53592., 54644., 55224., 55804., 56384., 33626., 34084., 34542., 35000., 35888., 36352., 36816., 37280., 38198., 38668., 39138., 39608., 40556., 41032., 41508., 41984., 22834., 23188., 23542., 23896., 24680., 25040., 25400., 25760., 26574., 26940., 27306., 27672., 28516., 28888., 29260., 29632., 14644., 14888., 15132., 15376., 15960., 16208., 16456., 16704., 17308., 17560., 17812., 18064., 18688., 18944., 19200., 19456., 24658., 25140., 25622., 26104., 26920., 27408., 27896., 28384., 29230., 29724., 30218., 30712., 31588., 32088., 32588., 33088., 22821., 23434., 24047., 24660., 25766., 26388., 27010., 27632., 28783., 29414., 30045., 30676., 31872., 32512., 33152., 33792., 16329., 16850., 17371., 17892., 18906., 19436., 19966., 20496., 21555., 22094., 22633., 23172., 24276., 24824., 25372., 25920., 11885., 12314., 12743., 13172., 14094., 14532., 14970., 15408., 16375., 16822., 17269., 17716., 18728., 19184., 19640., 20096.,  8634.,  8932.,  9230.,  9528., 10192., 10496., 10800., 11104., 11798., 12108., 12418., 12728., 13452., 13768., 14084., 14400., 12170., 12516., 12862., 13208., 13888., 14240., 14592., 14944., 15654., 16012., 16370., 16728., 17468., 17832., 18196., 18560., 13145., 13554., 13963., 14372., 15274., 15692., 16110., 16528., 17475., 17902., 18329., 18756., 19748., 20184., 20620., 21056., 12797., 13114., 13431., 13748., 14558., 14884., 15210., 15536., 16391., 16726., 17061., 17396., 18296., 18640., 18984., 19328., 14497., 14722., 14947., 15172., 15890., 16124., 16358., 16592., 17355., 17598., 17841., 18084., 18892., 19144., 19396., 19648., 13170., 13332., 13494., 13656., 14184., 14352., 14520., 14688., 15246., 15420., 15594., 15768., 16356., 16536., 16716., 16896., 11970., 12180., 12390., 12600., 13144., 13360., 13576., 13792., 14366., 14588., 14810., 15032., 15636., 15864., 16092., 16320., 19981., 20314., 20647., 20980., 21806., 22148., 22490., 22832., 23703., 24054., 24405., 24756., 25672., 26032., 26392., 26752., 21809., 22178., 22547., 22916., 23778., 24156., 24534., 24912., 25819., 26206., 26593., 26980., 27932., 28328., 28724., 29120., 23637., 24042., 24447., 24852., 25750., 26164., 26578., 26992., 27935., 28358., 28781., 29204., 30192., 30624., 31056., 31488., 20010., 20292., 20574., 20856., 21504., 21792., 22080., 22368., 23046., 23340., 23634., 23928., 24636., 24936., 25236., 25536.,  9844., 10024., 10204., 10384., 10776., 10960., 11144., 11328., 11740., 11928., 12116., 12304., 12736., 12928., 13120., 13312., 13258., 13540., 13822., 14104., 14656., 14944., 15232., 15520., 16102., 16396., 16690., 16984., 17596., 17896., 18196., 18496., 14242., 14548., 14854., 15160., 15736., 16048., 16360., 16672., 17278., 17596., 17914., 18232., 18868., 19192., 19516., 19840., 15226., 15556., 15886., 16216., 16816., 17152., 17488., 17824., 18454., 18796., 19138., 19480., 20140., 20488., 20836., 21184.,  8548.,  8776.,  9004.,  9232.,  9608.,  9840., 10072., 10304., 10700., 10936., 11172., 11408., 11824., 12064., 12304., 12544., 21588., 21928., 22268., 22608., 23224., 23568., 23912., 24256., 24892., 25240., 25588., 25936., 26592., 26944., 27296., 27648., 35226., 35748., 36270., 36792., 37744., 38272., 38800., 39328., 40310., 40844., 41378., 41912., 42924., 43464., 44004., 44544., 36850., 37396., 37942., 38488., 39464., 40016., 40568., 41120., 42126., 42684., 43242., 43800., 44836., 45400., 45964., 46528., 38474., 39044., 39614., 40184., 41184., 41760., 42336., 42912., 43942., 44524., 45106., 45688., 46748., 47336., 47924., 48512., 32452., 32840., 33228., 33616., 34344., 34736., 35128., 35520., 36268., 36664., 37060., 37456., 38224., 38624., 39024., 39424., 30570., 31140., 31710., 32280., 33184., 33760., 34336., 34912., 35846., 36428., 37010., 37592., 38556., 39144., 39732., 40320., 47401., 48274., 49147., 50020., 51386., 52268., 53150., 54032., 55443., 56334., 57225., 58116., 59572., 60472., 61372., 62272., 49229., 50138., 51047., 51956., 53358., 54276., 55194., 56112., 57559., 58486., 59413., 60340., 61832., 62768., 63704., 64640., 50929., 51746., 52563., 53380., 54690., 55516., 56342., 57168., 58523., 59358., 60193., 61028., 62428., 63272., 64116., 64960., 26066., 26580., 27094., 27608., 28488., 29008., 29528., 30048., 30958., 31484., 32010., 32536., 33476., 34008., 34540., 35072., 22178., 22612., 23046., 23480., 24248., 24688., 25128., 25568., 26366., 26812., 27258., 27704., 28532., 28984., 29436., 29888., 29533., 30202., 30871., 31540., 32702., 33380., 34058., 34736., 35943., 36630., 37317., 38004., 39256., 39952., 40648., 41344., 31361., 32066., 32771., 33476., 34674., 35388., 36102., 36816., 38059., 38782., 39505., 40228., 41516., 42248., 42980., 43712., 22821., 23434., 24047., 24660., 25766., 26388., 27010., 27632., 28783., 29414., 30045., 30676., 31872., 32512., 33152., 33792., 12170., 12548., 12926., 13304., 14048., 14432., 14816., 15200., 15974., 16364., 16754., 17144., 17948., 18344., 18740., 19136.,  9690.,  9988., 10286., 10584., 11216., 11520., 11824., 12128., 12790., 13100., 13410., 13720., 14412., 14728., 15044., 15360., 13713., 14178., 14643., 15108., 16066., 16540., 17014., 17488., 18491., 18974., 19457., 19940., 20988., 21480., 21972., 22464., 15541., 16042., 16543., 17044., 18038., 18548., 19058., 19568., 20607., 21126., 21645., 22164., 23248., 23776., 24304., 24832., 13145., 13554., 13963., 14372., 15274., 15692., 16110., 16528., 17475., 17902., 18329., 18756., 19748., 20184., 20620., 21056., 10562., 10804., 11046., 11288., 11896., 12144., 12392., 12640., 13278., 13532., 13786., 14040., 14708., 14968., 15228., 15488.,  4356.,  4424.,  4492.,  4560.,  4840.,  4912.,  4984.,  5056.,  5356.,  5432.,  5508.,  5584.,  5904.,  5984.,  6064.,  6144.,  6370.,  6484.,  6598.,  6712.,  7096.,  7216.,  7336.,  7456.,  7870.,  7996.,  8122.,  8248.,  8692.,  8824.,  8956.,  9088.,  7354.,  7492.,  7630.,  7768.,  8176.,  8320.,  8464.,  8608.,  9046.,  9196.,  9346.,  9496.,  9964., 10120., 10276., 10432.,  8338.,  8500.,  8662.,  8824.,  9256.,  9424.,  9592.,  9760., 10222., 10396., 10570., 10744., 11236., 11416., 11596., 11776.,  4852.,  4968.,  5084.,  5200.,  5464.,  5584.,  5704.,  5824.,  6108.,  6232.,  6356.,  6480.,  6784.,  6912.,  7040.,  7168.};
  const std::array<int, 4> in_shape = {{ 3, 5, 5, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x5x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14497., 14722., 14947., 15172., 15890., 16124., 16358., 16592., 17355., 17598., 17841., 18084., 18892., 19144., 19396., 19648., 16325., 16586., 16847., 17108., 17862., 18132., 18402., 18672., 19471., 19750., 20029., 20308., 21152., 21440., 21728., 22016., 18153., 18450., 18747., 19044., 19834., 20140., 20446., 20752., 21587., 21902., 22217., 22532., 23412., 23736., 24060., 24384., 23637., 24042., 24447., 24852., 25750., 26164., 26578., 26992., 27935., 28358., 28781., 29204., 30192., 30624., 31056., 31488., 25465., 25906., 26347., 26788., 27722., 28172., 28622., 29072., 30051., 30510., 30969., 31428., 32452., 32920., 33388., 33856., 27293., 27770., 28247., 28724., 29694., 30180., 30666., 31152., 32167., 32662., 33157., 33652., 34712., 35216., 35720., 36224., 32777., 33362., 33947., 34532., 35610., 36204., 36798., 37392., 38515., 39118., 39721., 40324., 41492., 42104., 42716., 43328., 34605., 35226., 35847., 36468., 37582., 38212., 38842., 39472., 40631., 41270., 41909., 42548., 43752., 44400., 45048., 45696., 36433., 37090., 37747., 38404., 39554., 40220., 40886., 41552., 42747., 43422., 44097., 44772., 46012., 46696., 47380., 48064., 22821., 23434., 24047., 24660., 25766., 26388., 27010., 27632., 28783., 29414., 30045., 30676., 31872., 32512., 33152., 33792., 16329., 16850., 17371., 17892., 18906., 19436., 19966., 20496., 21555., 22094., 22633., 23172., 24276., 24824., 25372., 25920., 11885., 12314., 12743., 13172., 14094., 14532., 14970., 15408., 16375., 16822., 17269., 17716., 18728., 19184., 19640., 20096., 13145., 13554., 13963., 14372., 15274., 15692., 16110., 16528., 17475., 17902., 18329., 18756., 19748., 20184., 20620., 21056., 12797., 13114., 13431., 13748., 14558., 14884., 15210., 15536., 16391., 16726., 17061., 17396., 18296., 18640., 18984., 19328., 14497., 14722., 14947., 15172., 15890., 16124., 16358., 16592., 17355., 17598., 17841., 18084., 18892., 19144., 19396., 19648., 19981., 20314., 20647., 20980., 21806., 22148., 22490., 22832., 23703., 24054., 24405., 24756., 25672., 26032., 26392., 26752., 21809., 22178., 22547., 22916., 23778., 24156., 24534., 24912., 25819., 26206., 26593., 26980., 27932., 28328., 28724., 29120., 23637., 24042., 24447., 24852., 25750., 26164., 26578., 26992., 27935., 28358., 28781., 29204., 30192., 30624., 31056., 31488., 47401., 48274., 49147., 50020., 51386., 52268., 53150., 54032., 55443., 56334., 57225., 58116., 59572., 60472., 61372., 62272., 49229., 50138., 51047., 51956., 53358., 54276., 55194., 56112., 57559., 58486., 59413., 60340., 61832., 62768., 63704., 64640., 50929., 51746., 52563., 53380., 54690., 55516., 56342., 57168., 58523., 59358., 60193., 61028., 62428., 63272., 64116., 64960., 29533., 30202., 30871., 31540., 32702., 33380., 34058., 34736., 35943., 36630., 37317., 38004., 39256., 39952., 40648., 41344., 31361., 32066., 32771., 33476., 34674., 35388., 36102., 36816., 38059., 38782., 39505., 40228., 41516., 42248., 42980., 43712., 22821., 23434., 24047., 24660., 25766., 26388., 27010., 27632., 28783., 29414., 30045., 30676., 31872., 32512., 33152., 33792., 13713., 14178., 14643., 15108., 16066., 16540., 17014., 17488., 18491., 18974., 19457., 19940., 20988., 21480., 21972., 22464., 15541., 16042., 16543., 17044., 18038., 18548., 19058., 19568., 20607., 21126., 21645., 22164., 23248., 23776., 24304., 24832., 13145., 13554., 13963., 14372., 15274., 15692., 16110., 16528., 17475., 17902., 18329., 18756., 19748., 20184., 20620., 21056.};
  const std::array<int, 4> in_shape = {{ 3, 5, 5, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 145.,  226.,  265.,  304.,  343.,  223.,  321.,  474.,  519.,  564.,  609.,  384.,  519.,  744.,  789.,  834.,  879.,  546.,  717., 1014., 1059., 1104., 1149.,  708.,  379.,  514.,  535.,  556.,  577.,  337.,  985., 1396., 1435., 1474., 1513.,  943., 1311., 1824., 1869., 1914., 1959., 1194., 1509., 2094., 2139., 2184., 2229., 1356., 1707., 2364., 2409., 2454., 2499., 1518.,  859., 1144., 1165., 1186., 1207.,  697., 1825., 2566., 2605., 2644., 2683., 1663., 2301., 3174., 3219., 3264., 3309., 2004., 2499., 3444., 3489., 3534., 3579., 2166., 2697., 3714., 3759., 3804., 3849., 2328., 1339., 1774., 1795., 1816., 1837., 1057.};
  const std::array<int, 4> in_shape = {{ 3, 5, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 474.,  519.,  564.,  609.,  744.,  789.,  834.,  879., 1014., 1059., 1104., 1149., 1824., 1869., 1914., 1959., 2094., 2139., 2184., 2229., 2364., 2409., 2454., 2499., 3174., 3219., 3264., 3309., 3444., 3489., 3534., 3579., 3714., 3759., 3804., 3849.};
  const std::array<int, 4> in_shape = {{ 3, 5, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 272.,  290.,  422.,  452.,  494.,  530.,  566.,  608.,  638.,  686.,  412.,  446.,  597.,  642.,  876.,  948.,  957., 1038., 1038., 1128., 1119., 1218.,  699.,  768.,  957., 1038., 1362., 1488., 1443., 1578., 1524., 1668., 1605., 1758.,  987., 1092., 1317., 1434., 1848., 2028., 1929., 2118., 2010., 2208., 2091., 2298., 1275., 1416.,  668.,  758.,  890., 1028.,  926., 1070.,  962., 1112.,  998., 1154.,  568.,  674., 1832., 1970., 2582., 2792., 2654., 2870., 2726., 2948., 2798., 3026., 1732., 1886., 2397., 2622., 3306., 3648., 3387., 3738., 3468., 3828., 3549., 3918., 2139., 2388., 2757., 3018., 3792., 4188., 3873., 4278., 3954., 4368., 4035., 4458., 2427., 2712., 3117., 3414., 4278., 4728., 4359., 4818., 4440., 4908., 4521., 4998., 2715., 3036., 1508., 1718., 1970., 2288., 2006., 2330., 2042., 2372., 2078., 2414., 1168., 1394., 3392., 3650., 4742., 5132., 4814., 5210., 4886., 5288., 4958., 5366., 3052., 3326., 4197., 4602., 5736., 6348., 5817., 6438., 5898., 6528., 5979., 6618., 3579., 4008., 4557., 4998., 6222., 6888., 6303., 6978., 6384., 7068., 6465., 7158., 3867., 4332., 4917., 5394., 6708., 7428., 6789., 7518., 6870., 7608., 6951., 7698., 4155., 4656., 2348., 2678., 3050., 3548., 3086., 3590., 3122., 3632., 3158., 3674., 1768., 2114.};
  const std::array<int, 4> in_shape = {{ 3, 5, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 876.,  948.,  957., 1038., 1038., 1128., 1119., 1218., 1362., 1488., 1443., 1578., 1524., 1668., 1605., 1758., 1848., 2028., 1929., 2118., 2010., 2208., 2091., 2298., 3306., 3648., 3387., 3738., 3468., 3828., 3549., 3918., 3792., 4188., 3873., 4278., 3954., 4368., 4035., 4458., 4278., 4728., 4359., 4818., 4440., 4908., 4521., 4998., 5736., 6348., 5817., 6438., 5898., 6528., 5979., 6618., 6222., 6888., 6303., 6978., 6384., 7068., 6465., 7158., 6708., 7428., 6789., 7518., 6870., 7608., 6951., 7698.};
  const std::array<int, 4> in_shape = {{ 3, 5, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  526.,   544.,   562.,   580.,   814.,   844.,   874.,   904.,   952.,   988.,  1024.,  1060.,  1090.,  1132.,  1174.,  1216.,  1228.,  1276.,  1324.,  1372.,   790.,   824.,   858.,   892.,  1149.,  1194.,  1239.,  1284.,  1680.,  1752.,  1824.,  1896.,  1833.,  1914.,  1995.,  2076.,  1986.,  2076.,  2166.,  2256.,  2139.,  2238.,  2337.,  2436.,  1329.,  1398.,  1467.,  1536.,  1833.,  1914.,  1995.,  2076.,  2598.,  2724.,  2850.,  2976.,  2751.,  2886.,  3021.,  3156.,  2904.,  3048.,  3192.,  3336.,  3057.,  3210.,  3363.,  3516.,  1869.,  1974.,  2079.,  2184.,  2517.,  2634.,  2751.,  2868.,  3516.,  3696.,  3876.,  4056.,  3669.,  3858.,  4047.,  4236.,  3822.,  4020.,  4218.,  4416.,  3975.,  4182.,  4389.,  4596.,  2409.,  2550.,  2691.,  2832.,  1246.,  1336.,  1426.,  1516.,  1642.,  1780.,  1918.,  2056.,  1708.,  1852.,  1996.,  2140.,  1774.,  1924.,  2074.,  2224.,  1840.,  1996.,  2152.,  2308.,  1030.,  1136.,  1242.,  1348.,  3526.,  3664.,  3802.,  3940.,  4954.,  5164.,  5374.,  5584.,  5092.,  5308.,  5524.,  5740.,  5230.,  5452.,  5674.,  5896.,  5368.,  5596.,  5824.,  6052.,  3310.,  3464.,  3618.,  3772.,  4569.,  4794.,  5019.,  5244.,  6270.,  6612.,  6954.,  7296.,  6423.,  6774.,  7125.,  7476.,  6576.,  6936.,  7296.,  7656.,  6729.,  7098.,  7467.,  7836.,  4029.,  4278.,  4527.,  4776.,  5253.,  5514.,  5775.,  6036.,  7188.,  7584.,  7980.,  8376.,  7341.,  7746.,  8151.,  8556.,  7494.,  7908.,  8322.,  8736.,  7647.,  8070.,  8493.,  8916.,  4569.,  4854.,  5139.,  5424.,  5937.,  6234.,  6531.,  6828.,  8106.,  8556.,  9006.,  9456.,  8259.,  8718.,  9177.,  9636.,  8412.,  8880.,  9348.,  9816.,  8565.,  9042.,  9519.,  9996.,  5109.,  5430.,  5751.,  6072.,  2806.,  3016.,  3226.,  3436.,  3622.,  3940.,  4258.,  4576.,  3688.,  4012.,  4336.,  4660.,  3754.,  4084.,  4414.,  4744.,  3820.,  4156.,  4492.,  4828.,  2110.,  2336.,  2562.,  2788.,  6526.,  6784.,  7042.,  7300.,  9094.,  9484.,  9874., 10264.,  9232.,  9628., 10024., 10420.,  9370.,  9772., 10174., 10576.,  9508.,  9916., 10324., 10732.,  5830.,  6104.,  6378.,  6652.,  7989.,  8394.,  8799.,  9204., 10860., 11472., 12084., 12696., 11013., 11634., 12255., 12876., 11166., 11796., 12426., 13056., 11319., 11958., 12597., 13236.,  6729.,  7158.,  7587.,  8016.,  8673.,  9114.,  9555.,  9996., 11778., 12444., 13110., 13776., 11931., 12606., 13281., 13956., 12084., 12768., 13452., 14136., 12237., 12930., 13623., 14316.,  7269.,  7734.,  8199.,  8664.,  9357.,  9834., 10311., 10788., 12696., 13416., 14136., 14856., 12849., 13578., 14307., 15036., 13002., 13740., 14478., 15216., 13155., 13902., 14649., 15396.,  7809.,  8310.,  8811.,  9312.,  4366.,  4696.,  5026.,  5356.,  5602.,  6100.,  6598.,  7096.,  5668.,  6172.,  6676.,  7180.,  5734.,  6244.,  6754.,  7264.,  5800.,  6316.,  6832.,  7348.,  3190.,  3536.,  3882.,  4228.};
  const std::array<int, 4> in_shape = {{ 3, 5, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1680.,  1752.,  1824.,  1896.,  1833.,  1914.,  1995.,  2076.,  1986.,  2076.,  2166.,  2256.,  2139.,  2238.,  2337.,  2436.,  2598.,  2724.,  2850.,  2976.,  2751.,  2886.,  3021.,  3156.,  2904.,  3048.,  3192.,  3336.,  3057.,  3210.,  3363.,  3516.,  3516.,  3696.,  3876.,  4056.,  3669.,  3858.,  4047.,  4236.,  3822.,  4020.,  4218.,  4416.,  3975.,  4182.,  4389.,  4596.,  6270.,  6612.,  6954.,  7296.,  6423.,  6774.,  7125.,  7476.,  6576.,  6936.,  7296.,  7656.,  6729.,  7098.,  7467.,  7836.,  7188.,  7584.,  7980.,  8376.,  7341.,  7746.,  8151.,  8556.,  7494.,  7908.,  8322.,  8736.,  7647.,  8070.,  8493.,  8916.,  8106.,  8556.,  9006.,  9456.,  8259.,  8718.,  9177.,  9636.,  8412.,  8880.,  9348.,  9816.,  8565.,  9042.,  9519.,  9996., 10860., 11472., 12084., 12696., 11013., 11634., 12255., 12876., 11166., 11796., 12426., 13056., 11319., 11958., 12597., 13236., 11778., 12444., 13110., 13776., 11931., 12606., 13281., 13956., 12084., 12768., 13452., 14136., 12237., 12930., 13623., 14316., 12696., 13416., 14136., 14856., 12849., 13578., 14307., 15036., 13002., 13740., 14478., 15216., 13155., 13902., 14649., 15396.};
  const std::array<int, 4> in_shape = {{ 3, 5, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  492.,   580.,   772.,   904.,   916.,  1060.,  1060.,  1216.,  1204.,  1372.,   780.,   892.,  1134.,  1284.,  1671.,  1896.,  1833.,  2076.,  1995.,  2256.,  2157.,  2436.,  1350.,  1536.,  1854.,  2076.,  2643.,  2976.,  2805.,  3156.,  2967.,  3336.,  3129.,  3516.,  1926.,  2184.,  2574.,  2868.,  3615.,  4056.,  3777.,  4236.,  3939.,  4416.,  4101.,  4596.,  2502.,  2832.,  1308.,  1516.,  1744.,  2056.,  1816.,  2140.,  1888.,  2224.,  1960.,  2308.,  1116.,  1348.,  3612.,  3940.,  5092.,  5584.,  5236.,  5740.,  5380.,  5896.,  5524.,  6052.,  3420.,  3772.,  4734.,  5244.,  6531.,  7296.,  6693.,  7476.,  6855.,  7656.,  7017.,  7836.,  4230.,  4776.,  5454.,  6036.,  7503.,  8376.,  7665.,  8556.,  7827.,  8736.,  7989.,  8916.,  4806.,  5424.,  6174.,  6828.,  8475.,  9456.,  8637.,  9636.,  8799.,  9816.,  8961.,  9996.,  5382.,  6072.,  2988.,  3436.,  3904.,  4576.,  3976.,  4660.,  4048.,  4744.,  4120.,  4828.,  2316.,  2788.,  6732.,  7300.,  9412., 10264.,  9556., 10420.,  9700., 10576.,  9844., 10732.,  6060.,  6652.,  8334.,  9204., 11391., 12696., 11553., 12876., 11715., 13056., 11877., 13236.,  7110.,  8016.,  9054.,  9996., 12363., 13776., 12525., 13956., 12687., 14136., 12849., 14316.,  7686.,  8664.,  9774., 10788., 13335., 14856., 13497., 15036., 13659., 15216., 13821., 15396.,  8262.,  9312.,  4668.,  5356.,  6064.,  7096.,  6136.,  7180.,  6208.,  7264.,  6280.,  7348.,  3516.,  4228.};
  const std::array<int, 4> in_shape = {{ 3, 5, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1671.,  1896.,  1833.,  2076.,  1995.,  2256.,  2157.,  2436.,  2643.,  2976.,  2805.,  3156.,  2967.,  3336.,  3129.,  3516.,  3615.,  4056.,  3777.,  4236.,  3939.,  4416.,  4101.,  4596.,  6531.,  7296.,  6693.,  7476.,  6855.,  7656.,  7017.,  7836.,  7503.,  8376.,  7665.,  8556.,  7827.,  8736.,  7989.,  8916.,  8475.,  9456.,  8637.,  9636.,  8799.,  9816.,  8961.,  9996., 11391., 12696., 11553., 12876., 11715., 13056., 11877., 13236., 12363., 13776., 12525., 13956., 12687., 14136., 12849., 14316., 13335., 14856., 13497., 15036., 13659., 15216., 13821., 15396.};
  const std::array<int, 4> in_shape = {{ 3, 5, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  952.,   984.,  1124.,  1160.,  1490.,  1544.,  1748.,  1808.,  1766.,  1832.,  2048.,  2120.,  2042.,  2120.,  2348.,  2432.,  2318.,  2408.,  2648.,  2744.,  1496.,  1560.,  1716.,  1784.,  2184.,  2268.,  2478.,  2568.,  3207.,  3342.,  3648.,  3792.,  3513.,  3666.,  3990.,  4152.,  3819.,  3990.,  4332.,  4512.,  4125.,  4314.,  4674.,  4872.,  2568.,  2700.,  2934.,  3072.,  3552.,  3708.,  3990.,  4152.,  5043.,  5286.,  5700.,  5952.,  5349.,  5610.,  6042.,  6312.,  5655.,  5934.,  6384.,  6672.,  5961.,  6258.,  6726.,  7032.,  3648.,  3852.,  4158.,  4368.,  4920.,  5148.,  5502.,  5736.,  6879.,  7230.,  7752.,  8112.,  7185.,  7554.,  8094.,  8472.,  7491.,  7878.,  8436.,  8832.,  7797.,  8202.,  8778.,  9192.,  4728.,  5004.,  5382.,  5664.,  2440.,  2616.,  2852.,  3032.,  3218.,  3488.,  3836.,  4112.,  3350.,  3632.,  3992.,  4280.,  3482.,  3776.,  4148.,  4448.,  3614.,  3920.,  4304.,  4616.,  2024.,  2232.,  2484.,  2696.,  6952.,  7224.,  7604.,  7880.,  9770., 10184., 10748., 11168., 10046., 10472., 11048., 11480., 10322., 10760., 11348., 11792., 10598., 11048., 11648., 12104.,  6536.,  6840.,  7236.,  7544.,  9024.,  9468., 10038., 10488., 12387., 13062., 13908., 14592., 12693., 13386., 14250., 14952., 12999., 13710., 14592., 15312., 13305., 14034., 14934., 15672.,  7968.,  8460.,  9054.,  9552., 10392., 10908., 11550., 12072., 14223., 15006., 15960., 16752., 14529., 15330., 16302., 17112., 14835., 15654., 16644., 17472., 15141., 15978., 16986., 17832.,  9048.,  9612., 10278., 10848., 11760., 12348., 13062., 13656., 16059., 16950., 18012., 18912., 16365., 17274., 18354., 19272., 16671., 17598., 18696., 19632., 16977., 17922., 19038., 19992., 10128., 10764., 11502., 12144.,  5560.,  5976.,  6452.,  6872.,  7178.,  7808.,  8516.,  9152.,  7310.,  7952.,  8672.,  9320.,  7442.,  8096.,  8828.,  9488.,  7574.,  8240.,  8984.,  9656.,  4184.,  4632.,  5124.,  5576., 12952., 13464., 14084., 14600., 18050., 18824., 19748., 20528., 18326., 19112., 20048., 20840., 18602., 19400., 20348., 21152., 18878., 19688., 20648., 21464., 11576., 12120., 12756., 13304., 15864., 16668., 17598., 18408., 21567., 22782., 24168., 25392., 21873., 23106., 24510., 25752., 22179., 23430., 24852., 26112., 22485., 23754., 25194., 26472., 13368., 14220., 15174., 16032., 17232., 18108., 19110., 19992., 23403., 24726., 26220., 27552., 23709., 25050., 26562., 27912., 24015., 25374., 26904., 28272., 24321., 25698., 27246., 28632., 14448., 15372., 16398., 17328., 18600., 19548., 20622., 21576., 25239., 26670., 28272., 29712., 25545., 26994., 28614., 30072., 25851., 27318., 28956., 30432., 26157., 27642., 29298., 30792., 15528., 16524., 17622., 18624.,  8680.,  9336., 10052., 10712., 11138., 12128., 13196., 14192., 11270., 12272., 13352., 14360., 11402., 12416., 13508., 14528., 11534., 12560., 13664., 14696.,  6344.,  7032.,  7764.,  8456.};
  const std::array<int, 4> in_shape = {{ 3, 5, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3207.,  3342.,  3648.,  3792.,  3513.,  3666.,  3990.,  4152.,  3819.,  3990.,  4332.,  4512.,  4125.,  4314.,  4674.,  4872.,  5043.,  5286.,  5700.,  5952.,  5349.,  5610.,  6042.,  6312.,  5655.,  5934.,  6384.,  6672.,  5961.,  6258.,  6726.,  7032.,  6879.,  7230.,  7752.,  8112.,  7185.,  7554.,  8094.,  8472.,  7491.,  7878.,  8436.,  8832.,  7797.,  8202.,  8778.,  9192., 12387., 13062., 13908., 14592., 12693., 13386., 14250., 14952., 12999., 13710., 14592., 15312., 13305., 14034., 14934., 15672., 14223., 15006., 15960., 16752., 14529., 15330., 16302., 17112., 14835., 15654., 16644., 17472., 15141., 15978., 16986., 17832., 16059., 16950., 18012., 18912., 16365., 17274., 18354., 19272., 16671., 17598., 18696., 19632., 16977., 17922., 19038., 19992., 21567., 22782., 24168., 25392., 21873., 23106., 24510., 25752., 22179., 23430., 24852., 26112., 22485., 23754., 25194., 26472., 23403., 24726., 26220., 27552., 23709., 25050., 26562., 27912., 24015., 25374., 26904., 28272., 24321., 25698., 27246., 28632., 25239., 26670., 28272., 29712., 25545., 26994., 28614., 30072., 25851., 27318., 28956., 30432., 26157., 27642., 29298., 30792.};
  const std::array<int, 4> in_shape = {{ 3, 5, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1872.,  1904.,  1936.,  1968.,  2212.,  2248.,  2284.,  2320.,  2926.,  2980.,  3034.,  3088.,  3436.,  3496.,  3556.,  3616.,  3466.,  3532.,  3598.,  3664.,  4024.,  4096.,  4168.,  4240.,  4006.,  4084.,  4162.,  4240.,  4612.,  4696.,  4780.,  4864.,  4546.,  4636.,  4726.,  4816.,  5200.,  5296.,  5392.,  5488.,  2928.,  2992.,  3056.,  3120.,  3364.,  3432.,  3500.,  3568.,  4284.,  4368.,  4452.,  4536.,  4866.,  4956.,  5046.,  5136.,  6279.,  6414.,  6549.,  6684.,  7152.,  7296.,  7440.,  7584.,  6873.,  7026.,  7179.,  7332.,  7818.,  7980.,  8142.,  8304.,  7467.,  7638.,  7809.,  7980.,  8484.,  8664.,  8844.,  9024.,  8061.,  8250.,  8439.,  8628.,  9150.,  9348.,  9546.,  9744.,  5004.,  5136.,  5268.,  5400.,  5730.,  5868.,  6006.,  6144.,  6948.,  7104.,  7260.,  7416.,  7818.,  7980.,  8142.,  8304.,  9843., 10086., 10329., 10572., 11148., 11400., 11652., 11904., 10437., 10698., 10959., 11220., 11814., 12084., 12354., 12624., 11031., 11310., 11589., 11868., 12480., 12768., 13056., 13344., 11625., 11922., 12219., 12516., 13146., 13452., 13758., 14064.,  7092.,  7296.,  7500.,  7704.,  8106.,  8316.,  8526.,  8736.,  9612.,  9840., 10068., 10296., 10770., 11004., 11238., 11472., 13407., 13758., 14109., 14460., 15144., 15504., 15864., 16224., 14001., 14370., 14739., 15108., 15810., 16188., 16566., 16944., 14595., 14982., 15369., 15756., 16476., 16872., 17268., 17664., 15189., 15594., 15999., 16404., 17142., 17556., 17970., 18384.,  9180.,  9456.,  9732., 10008., 10482., 10764., 11046., 11328.,  4704.,  4880.,  5056.,  5232.,  5524.,  5704.,  5884.,  6064.,  6166.,  6436.,  6706.,  6976.,  7396.,  7672.,  7948.,  8224.,  6418.,  6700.,  6982.,  7264.,  7696.,  7984.,  8272.,  8560.,  6670.,  6964.,  7258.,  7552.,  7996.,  8296.,  8596.,  8896.,  6922.,  7228.,  7534.,  7840.,  8296.,  8608.,  8920.,  9232.,  3840.,  4048.,  4256.,  4464.,  4756.,  4968.,  5180.,  5392., 13632., 13904., 14176., 14448., 14932., 15208., 15484., 15760., 19126., 19540., 19954., 20368., 21076., 21496., 21916., 22336., 19666., 20092., 20518., 20944., 21664., 22096., 22528., 22960., 20206., 20644., 21082., 21520., 22252., 22696., 23140., 23584., 20746., 21196., 21646., 22096., 22840., 23296., 23752., 24208., 12768., 13072., 13376., 13680., 14164., 14472., 14780., 15088., 17604., 18048., 18492., 18936., 19626., 20076., 20526., 20976., 24099., 24774., 25449., 26124., 27132., 27816., 28500., 29184., 24693., 25386., 26079., 26772., 27798., 28500., 29202., 29904., 25287., 25998., 26709., 27420., 28464., 29184., 29904., 30624., 25881., 26610., 27339., 28068., 29130., 29868., 30606., 31344., 15444., 15936., 16428., 16920., 17610., 18108., 18606., 19104., 20268., 20784., 21300., 21816., 22578., 23100., 23622., 24144., 27663., 28446., 29229., 30012., 31128., 31920., 32712., 33504., 28257., 29058., 29859., 30660., 31794., 32604., 33414., 34224., 28851., 29670., 30489., 31308., 32460., 33288., 34116., 34944., 29445., 30282., 31119., 31956., 33126., 33972., 34818., 35664., 17532., 18096., 18660., 19224., 19986., 20556., 21126., 21696., 22932., 23520., 24108., 24696., 25530., 26124., 26718., 27312., 31227., 32118., 33009., 33900., 35124., 36024., 36924., 37824., 31821., 32730., 33639., 34548., 35790., 36708., 37626., 38544., 32415., 33342., 34269., 35196., 36456., 37392., 38328., 39264., 33009., 33954., 34899., 35844., 37122., 38076., 39030., 39984., 19620., 20256., 20892., 21528., 22362., 23004., 23646., 24288., 10704., 11120., 11536., 11952., 12484., 12904., 13324., 13744., 13726., 14356., 14986., 15616., 16396., 17032., 17668., 18304., 13978., 14620., 15262., 15904., 16696., 17344., 17992., 18640., 14230., 14884., 15538., 16192., 16996., 17656., 18316., 18976., 14482., 15148., 15814., 16480., 17296., 17968., 18640., 19312.,  7920.,  8368.,  8816.,  9264.,  9796., 10248., 10700., 11152., 25392., 25904., 26416., 26928., 27652., 28168., 28684., 29200., 35326., 36100., 36874., 37648., 38716., 39496., 40276., 41056., 35866., 36652., 37438., 38224., 39304., 40096., 40888., 41680., 36406., 37204., 38002., 38800., 39892., 40696., 41500., 42304., 36946., 37756., 38566., 39376., 40480., 41296., 42112., 42928., 22608., 23152., 23696., 24240., 24964., 25512., 26060., 26608., 30924., 31728., 32532., 33336., 34386., 35196., 36006., 36816., 41919., 43134., 44349., 45564., 47112., 48336., 49560., 50784., 42513., 43746., 44979., 46212., 47778., 49020., 50262., 51504., 43107., 44358., 45609., 46860., 48444., 49704., 50964., 52224., 43701., 44970., 46239., 47508., 49110., 50388., 51666., 52944., 25884., 26736., 27588., 28440., 29490., 30348., 31206., 32064., 33588., 34464., 35340., 36216., 37338., 38220., 39102., 39984., 45483., 46806., 48129., 49452., 51108., 52440., 53772., 55104., 46077., 47418., 48759., 50100., 51774., 53124., 54474., 55824., 46671., 48030., 49389., 50748., 52440., 53808., 55176., 56544., 47265., 48642., 50019., 51396., 53106., 54492., 55878., 57264., 27972., 28896., 29820., 30744., 31866., 32796., 33726., 34656., 36252., 37200., 38148., 39096., 40290., 41244., 42198., 43152., 49047., 50478., 51909., 53340., 55104., 56544., 57984., 59424., 49641., 51090., 52539., 53988., 55770., 57228., 58686., 60144., 50235., 51702., 53169., 54636., 56436., 57912., 59388., 60864., 50829., 52314., 53799., 55284., 57102., 58596., 60090., 61584., 30060., 31056., 32052., 33048., 34242., 35244., 36246., 37248., 16704., 17360., 18016., 18672., 19444., 20104., 20764., 21424., 21286., 22276., 23266., 24256., 25396., 26392., 27388., 28384., 21538., 22540., 23542., 24544., 25696., 26704., 27712., 28720., 21790., 22804., 23818., 24832., 25996., 27016., 28036., 29056., 22042., 23068., 24094., 25120., 26296., 27328., 28360., 29392., 12000., 12688., 13376., 14064., 14836., 15528., 16220., 16912.};
  const std::array<int, 4> in_shape = {{ 3, 5, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6279.,  6414.,  6549.,  6684.,  7152.,  7296.,  7440.,  7584.,  6873.,  7026.,  7179.,  7332.,  7818.,  7980.,  8142.,  8304.,  7467.,  7638.,  7809.,  7980.,  8484.,  8664.,  8844.,  9024.,  8061.,  8250.,  8439.,  8628.,  9150.,  9348.,  9546.,  9744.,  9843., 10086., 10329., 10572., 11148., 11400., 11652., 11904., 10437., 10698., 10959., 11220., 11814., 12084., 12354., 12624., 11031., 11310., 11589., 11868., 12480., 12768., 13056., 13344., 11625., 11922., 12219., 12516., 13146., 13452., 13758., 14064., 13407., 13758., 14109., 14460., 15144., 15504., 15864., 16224., 14001., 14370., 14739., 15108., 15810., 16188., 16566., 16944., 14595., 14982., 15369., 15756., 16476., 16872., 17268., 17664., 15189., 15594., 15999., 16404., 17142., 17556., 17970., 18384., 24099., 24774., 25449., 26124., 27132., 27816., 28500., 29184., 24693., 25386., 26079., 26772., 27798., 28500., 29202., 29904., 25287., 25998., 26709., 27420., 28464., 29184., 29904., 30624., 25881., 26610., 27339., 28068., 29130., 29868., 30606., 31344., 27663., 28446., 29229., 30012., 31128., 31920., 32712., 33504., 28257., 29058., 29859., 30660., 31794., 32604., 33414., 34224., 28851., 29670., 30489., 31308., 32460., 33288., 34116., 34944., 29445., 30282., 31119., 31956., 33126., 33972., 34818., 35664., 31227., 32118., 33009., 33900., 35124., 36024., 36924., 37824., 31821., 32730., 33639., 34548., 35790., 36708., 37626., 38544., 32415., 33342., 34269., 35196., 36456., 37392., 38328., 39264., 33009., 33954., 34899., 35844., 37122., 38076., 39030., 39984., 41919., 43134., 44349., 45564., 47112., 48336., 49560., 50784., 42513., 43746., 44979., 46212., 47778., 49020., 50262., 51504., 43107., 44358., 45609., 46860., 48444., 49704., 50964., 52224., 43701., 44970., 46239., 47508., 49110., 50388., 51666., 52944., 45483., 46806., 48129., 49452., 51108., 52440., 53772., 55104., 46077., 47418., 48759., 50100., 51774., 53124., 54474., 55824., 46671., 48030., 49389., 50748., 52440., 53808., 55176., 56544., 47265., 48642., 50019., 51396., 53106., 54492., 55878., 57264., 49047., 50478., 51909., 53340., 55104., 56544., 57984., 59424., 49641., 51090., 52539., 53988., 55770., 57228., 58686., 60144., 50235., 51702., 53169., 54636., 56436., 57912., 59388., 60864., 50829., 52314., 53799., 55284., 57102., 58596., 60090., 61584.};
  const std::array<int, 4> in_shape = {{ 3, 5, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1804.,  1968.,  2140.,  2320.,  2842.,  3088.,  3346.,  3616.,  3394.,  3664.,  3946.,  4240.,  3946.,  4240.,  4546.,  4864.,  4498.,  4816.,  5146.,  5488.,  2908.,  3120.,  3340.,  3568.,  4254.,  4536.,  4830.,  5136.,  6261.,  6684.,  7125.,  7584.,  6873.,  7332.,  7809.,  8304.,  7485.,  7980.,  8493.,  9024.,  8097.,  8628.,  9177.,  9744.,  5046.,  5400.,  5766.,  6144.,  6990.,  7416.,  7854.,  8304.,  9933., 10572., 11229., 11904., 10545., 11220., 11913., 12624., 11157., 11868., 12597., 13344., 11769., 12516., 13281., 14064.,  7206.,  7704.,  8214.,  8736.,  9726., 10296., 10878., 11472., 13605., 14460., 15333., 16224., 14217., 15108., 16017., 16944., 14829., 15756., 16701., 17664., 15441., 16404., 17385., 18384.,  9366., 10008., 10662., 11328.,  4828.,  5232.,  5644.,  6064.,  6370.,  6976.,  7594.,  8224.,  6634.,  7264.,  7906.,  8560.,  6898.,  7552.,  8218.,  8896.,  7162.,  7840.,  8530.,  9232.,  4012.,  4464.,  4924.,  5392., 13804., 14448., 15100., 15760., 19402., 20368., 21346., 22336., 19954., 20944., 21946., 22960., 20506., 21520., 22546., 23584., 21058., 22096., 23146., 24208., 12988., 13680., 14380., 15088., 17934., 18936., 19950., 20976., 24621., 26124., 27645., 29184., 25233., 26772., 28329., 29904., 25845., 27420., 29013., 30624., 26457., 28068., 29697., 31344., 15846., 16920., 18006., 19104., 20670., 21816., 22974., 24144., 28293., 30012., 31749., 33504., 28905., 30660., 32433., 34224., 29517., 31308., 33117., 34944., 30129., 31956., 33801., 35664., 18006., 19224., 20454., 21696., 23406., 24696., 25998., 27312., 31965., 33900., 35853., 37824., 32577., 34548., 36537., 38544., 33189., 35196., 37221., 39264., 33801., 35844., 37905., 39984., 20166., 21528., 22902., 24288., 11068., 11952., 12844., 13744., 14290., 15616., 16954., 18304., 14554., 15904., 17266., 18640., 14818., 16192., 17578., 18976., 15082., 16480., 17890., 19312.,  8332.,  9264., 10204., 11152., 25804., 26928., 28060., 29200., 35962., 37648., 39346., 41056., 36514., 38224., 39946., 41680., 37066., 38800., 40546., 42304., 37618., 39376., 41146., 42928., 23068., 24240., 25420., 26608., 31614., 33336., 35070., 36816., 42981., 45564., 48165., 50784., 43593., 46212., 48849., 51504., 44205., 46860., 49533., 52224., 44817., 47508., 50217., 52944., 26646., 28440., 30246., 32064., 34350., 36216., 38094., 39984., 46653., 49452., 52269., 55104., 47265., 50100., 52953., 55824., 47877., 50748., 53637., 56544., 48489., 51396., 54321., 57264., 28806., 30744., 32694., 34656., 37086., 39096., 41118., 43152., 50325., 53340., 56373., 59424., 50937., 53988., 57057., 60144., 51549., 54636., 57741., 60864., 52161., 55284., 58425., 61584., 30966., 33048., 35142., 37248., 17308., 18672., 20044., 21424., 22210., 24256., 26314., 28384., 22474., 24544., 26626., 28720., 22738., 24832., 26938., 29056., 23002., 25120., 27250., 29392., 12652., 14064., 15484., 16912.};
  const std::array<int, 4> in_shape = {{ 3, 5, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6261.,  6684.,  7125.,  7584.,  6873.,  7332.,  7809.,  8304.,  7485.,  7980.,  8493.,  9024.,  8097.,  8628.,  9177.,  9744.,  9933., 10572., 11229., 11904., 10545., 11220., 11913., 12624., 11157., 11868., 12597., 13344., 11769., 12516., 13281., 14064., 13605., 14460., 15333., 16224., 14217., 15108., 16017., 16944., 14829., 15756., 16701., 17664., 15441., 16404., 17385., 18384., 24621., 26124., 27645., 29184., 25233., 26772., 28329., 29904., 25845., 27420., 29013., 30624., 26457., 28068., 29697., 31344., 28293., 30012., 31749., 33504., 28905., 30660., 32433., 34224., 29517., 31308., 33117., 34944., 30129., 31956., 33801., 35664., 31965., 33900., 35853., 37824., 32577., 34548., 36537., 38544., 33189., 35196., 37221., 39264., 33801., 35844., 37905., 39984., 42981., 45564., 48165., 50784., 43593., 46212., 48849., 51504., 44205., 46860., 49533., 52224., 44817., 47508., 50217., 52944., 46653., 49452., 52269., 55104., 47265., 50100., 52953., 55824., 47877., 50748., 53637., 56544., 48489., 51396., 54321., 57264., 50325., 53340., 56373., 59424., 50937., 53988., 57057., 60144., 51549., 54636., 57741., 60864., 52161., 55284., 58425., 61584.};
  const std::array<int, 4> in_shape = {{ 3, 5, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3548.,  3608.,  3872.,  3936.,  4212.,  4280.,  4568.,  4640.,  5582.,  5684.,  6068.,  6176.,  6578.,  6692.,  7112.,  7232.,  6662.,  6788.,  7196.,  7328.,  7754.,  7892.,  8336.,  8480.,  7742.,  7892.,  8324.,  8480.,  8930.,  9092.,  9560.,  9728.,  8822.,  8996.,  9452.,  9632., 10106., 10292., 10784., 10976.,  5692.,  5816.,  6112.,  6240.,  6548.,  6680.,  7000.,  7136.,  8346.,  8508.,  8904.,  9072.,  9486.,  9660., 10092., 10272., 12261., 12522., 13098., 13368., 13971., 14250., 14880., 15168., 13449., 13746., 14358., 14664., 15303., 15618., 16284., 16608., 14637., 14970., 15618., 15960., 16635., 16986., 17688., 18048., 15825., 16194., 16878., 17256., 17967., 18354., 19092., 19488.,  9834., 10092., 10536., 10800., 11262., 11532., 12012., 12288., 13674., 13980., 14520., 14832., 15390., 15708., 16284., 16608., 19389., 19866., 20658., 21144., 21963., 22458., 23304., 23808., 20577., 21090., 21918., 22440., 23295., 23826., 24708., 25248., 21765., 22314., 23178., 23736., 24627., 25194., 26112., 26688., 22953., 23538., 24438., 25032., 25959., 26562., 27516., 28128., 14010., 14412., 15000., 15408., 16014., 16428., 17052., 17472., 19002., 19452., 20136., 20592., 21294., 21756., 22476., 22944., 26517., 27210., 28218., 28920., 29955., 30666., 31728., 32448., 27705., 28434., 29478., 30216., 31287., 32034., 33132., 33888., 28893., 29658., 30738., 31512., 32619., 33402., 34536., 35328., 30081., 30882., 31998., 32808., 33951., 34770., 35940., 36768., 18186., 18732., 19464., 20016., 20766., 21324., 22092., 22656.,  9308.,  9656., 10112., 10464., 10932., 11288., 11768., 12128., 12206., 12740., 13412., 13952., 14642., 15188., 15896., 16448., 12710., 13268., 13964., 14528., 15242., 15812., 16544., 17120., 13214., 13796., 14516., 15104., 15842., 16436., 17192., 17792., 13718., 14324., 15068., 15680., 16442., 17060., 17840., 18464.,  7612.,  8024.,  8512.,  8928.,  9428.,  9848., 10360., 10784., 11452., 11736., 12224., 12512., 13012., 13304., 13816., 14112., 10846., 11156., 11748., 12064., 12674., 12996., 13624., 13952.,  7702.,  7908.,  8396.,  8608.,  9114.,  9332.,  9856., 10080.,  5582.,  5684.,  6068.,  6176.,  6578.,  6692.,  7112.,  7232.,  6662.,  6788.,  7196.,  7328.,  7754.,  7892.,  8336.,  8480.,  4380.,  4472.,  4736.,  4832.,  5108.,  5208.,  5496.,  5600.,  9898., 10268., 10872., 11248., 11870., 12252., 12892., 13280., 11165., 11610., 12370., 12824., 13611., 14074., 14888., 15360., 11201., 11554., 12222., 12584., 13279., 13650., 14372., 14752., 12261., 12522., 13098., 13368., 13971., 14250., 14880., 15168., 13449., 13746., 14358., 14664., 15303., 15618., 16284., 16608.,  8442.,  8652.,  9048.,  9264.,  9678.,  9900., 10332., 10560., 11898., 12156., 12648., 12912., 13422., 13692., 14220., 14496., 17013., 17418., 18138., 18552., 19299., 19722., 20496., 20928., 18201., 18642., 19398., 19848., 20631., 21090., 21900., 22368., 19389., 19866., 20658., 21144., 21963., 22458., 23304., 23808., 20577., 21090., 21918., 22440., 23295., 23826., 24708., 25248., 12618., 12972., 13512., 13872., 14430., 14796., 15372., 15744., 17226., 17628., 18264., 18672., 19326., 19740., 20412., 20832., 24141., 24762., 25698., 26328., 27291., 27930., 28920., 29568., 25329., 25986., 26958., 27624., 28623., 29298., 30324., 31008., 26517., 27210., 28218., 28920., 29955., 30666., 31728., 32448., 27705., 28434., 29478., 30216., 31287., 32034., 33132., 33888., 16794., 17292., 17976., 18480., 19182., 19692., 20412., 20928.,  8508.,  8824.,  9248.,  9568., 10004., 10328., 10776., 11104., 11198., 11684., 12308., 12800., 13442., 13940., 14600., 15104., 11702., 12212., 12860., 13376., 14042., 14564., 15248., 15776., 12206., 12740., 13412., 13952., 14642., 15188., 15896., 16448., 12710., 13268., 13964., 14528., 15242., 15812., 16544., 17120.,  7068.,  7448.,  7904.,  8288.,  8756.,  9144.,  9624., 10016.,  9884., 10136., 10592., 10848., 11316., 11576., 12056., 12320., 13934., 14324., 14996., 15392., 16082., 16484., 17192., 17600., 15014., 15428., 16124., 16544., 17258., 17684., 18416., 18848., 10846., 11156., 11748., 12064., 12674., 12996., 13624., 13952.,  7702.,  7908.,  8396.,  8608.,  9114.,  9332.,  9856., 10080.,  3068.,  3128.,  3360.,  3424.,  3668.,  3736.,  3992.,  4064.,  8122.,  8444.,  9000.,  9328.,  9902., 10236., 10828., 11168., 10965., 11466., 12282., 12792., 13635., 14154., 15024., 15552., 12153., 12690., 13542., 14088., 14967., 15522., 16428., 16992., 11165., 11610., 12370., 12824., 13611., 14074., 14888., 15360., 11201., 11554., 12222., 12584., 13279., 13650., 14372., 14752.,  7050.,  7212.,  7560.,  7728.,  8094.,  8268.,  8652.,  8832., 10122., 10332., 10776., 10992., 11454., 11676., 12156., 12384., 14637., 14970., 15618., 15960., 16635., 16986., 17688., 18048., 15825., 16194., 16878., 17256., 17967., 18354., 19092., 19488., 17013., 17418., 18138., 18552., 19299., 19722., 20496., 20928., 18201., 18642., 19398., 19848., 20631., 21090., 21900., 22368., 11226., 11532., 12024., 12336., 12846., 13164., 13692., 14016., 15450., 15804., 16392., 16752., 17358., 17724., 18348., 18720., 21765., 22314., 23178., 23736., 24627., 25194., 26112., 26688., 22953., 23538., 24438., 25032., 25959., 26562., 27516., 28128., 24141., 24762., 25698., 26328., 27291., 27930., 28920., 29568., 25329., 25986., 26958., 27624., 28623., 29298., 30324., 31008., 15402., 15852., 16488., 16944., 17598., 18060., 18732., 19200.,  7708.,  7992.,  8384.,  8672.,  9076.,  9368.,  9784., 10080., 10190., 10628., 11204., 11648., 12242., 12692., 13304., 13760., 10694., 11156., 11756., 12224., 12842., 13316., 13952., 14432., 11198., 11684., 12308., 12800., 13442., 13940., 14600., 15104., 11702., 12212., 12860., 13376., 14042., 14564., 15248., 15776.,  6524.,  6872.,  7296.,  7648.,  8084.,  8440.,  8888.,  9248.};
  const std::array<int, 4> in_shape = {{ 3, 5, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12261., 12522., 13098., 13368., 13971., 14250., 14880., 15168., 13449., 13746., 14358., 14664., 15303., 15618., 16284., 16608., 14637., 14970., 15618., 15960., 16635., 16986., 17688., 18048., 15825., 16194., 16878., 17256., 17967., 18354., 19092., 19488., 19389., 19866., 20658., 21144., 21963., 22458., 23304., 23808., 20577., 21090., 21918., 22440., 23295., 23826., 24708., 25248., 21765., 22314., 23178., 23736., 24627., 25194., 26112., 26688., 22953., 23538., 24438., 25032., 25959., 26562., 27516., 28128., 26517., 27210., 28218., 28920., 29955., 30666., 31728., 32448., 27705., 28434., 29478., 30216., 31287., 32034., 33132., 33888., 28893., 29658., 30738., 31512., 32619., 33402., 34536., 35328., 30081., 30882., 31998., 32808., 33951., 34770., 35940., 36768., 11165., 11610., 12370., 12824., 13611., 14074., 14888., 15360., 11201., 11554., 12222., 12584., 13279., 13650., 14372., 14752., 12261., 12522., 13098., 13368., 13971., 14250., 14880., 15168., 13449., 13746., 14358., 14664., 15303., 15618., 16284., 16608., 17013., 17418., 18138., 18552., 19299., 19722., 20496., 20928., 18201., 18642., 19398., 19848., 20631., 21090., 21900., 22368., 19389., 19866., 20658., 21144., 21963., 22458., 23304., 23808., 20577., 21090., 21918., 22440., 23295., 23826., 24708., 25248., 24141., 24762., 25698., 26328., 27291., 27930., 28920., 29568., 25329., 25986., 26958., 27624., 28623., 29298., 30324., 31008., 26517., 27210., 28218., 28920., 29955., 30666., 31728., 32448., 27705., 28434., 29478., 30216., 31287., 32034., 33132., 33888., 10965., 11466., 12282., 12792., 13635., 14154., 15024., 15552., 12153., 12690., 13542., 14088., 14967., 15522., 16428., 16992., 11165., 11610., 12370., 12824., 13611., 14074., 14888., 15360., 11201., 11554., 12222., 12584., 13279., 13650., 14372., 14752., 14637., 14970., 15618., 15960., 16635., 16986., 17688., 18048., 15825., 16194., 16878., 17256., 17967., 18354., 19092., 19488., 17013., 17418., 18138., 18552., 19299., 19722., 20496., 20928., 18201., 18642., 19398., 19848., 20631., 21090., 21900., 22368., 21765., 22314., 23178., 23736., 24627., 25194., 26112., 26688., 22953., 23538., 24438., 25032., 25959., 26562., 27516., 28128., 24141., 24762., 25698., 26328., 27291., 27930., 28920., 29568., 25329., 25986., 26958., 27624., 28623., 29298., 30324., 31008.};
  const std::array<int, 4> in_shape = {{ 3, 5, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x5x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3324.,  3384.,  3444.,  3504.,  3840.,  3904.,  3968.,  4032.,  4388.,  4456.,  4524.,  4592.,  4968.,  5040.,  5112.,  5184.,  6838.,  6940.,  7042.,  7144.,  7676.,  7784.,  7892.,  8000.,  8562.,  8676.,  8790.,  8904.,  9496.,  9616.,  9736.,  9856.,  8462.,  8588.,  8714.,  8840.,  9396.,  9528.,  9660.,  9792., 10378., 10516., 10654., 10792., 11408., 11552., 11696., 11840., 10086., 10236., 10386., 10536., 11116., 11272., 11428., 11584., 12194., 12356., 12518., 12680., 13320., 13488., 13656., 13824., 11710., 11884., 12058., 12232., 12836., 13016., 13196., 13376., 14010., 14196., 14382., 14568., 15232., 15424., 15616., 15808., 11260., 11384., 11508., 11632., 12096., 12224., 12352., 12480., 12964., 13096., 13228., 13360., 13864., 14000., 14136., 14272.,  9746.,  9908., 10070., 10232., 10728., 10896., 11064., 11232., 11758., 11932., 12106., 12280., 12836., 13016., 13196., 13376., 16965., 17226., 17487., 17748., 18502., 18772., 19042., 19312., 20111., 20390., 20669., 20948., 21792., 22080., 22368., 22656., 18793., 19090., 19387., 19684., 20474., 20780., 21086., 21392., 22227., 22542., 22857., 23172., 24052., 24376., 24700., 25024., 20621., 20954., 21287., 21620., 22446., 22788., 23130., 23472., 24343., 24694., 25045., 25396., 26312., 26672., 27032., 27392., 22449., 22818., 23187., 23556., 24418., 24796., 25174., 25552., 26459., 26846., 27233., 27620., 28572., 28968., 29364., 29760., 19410., 19668., 19926., 20184., 20808., 21072., 21336., 21600., 22254., 22524., 22794., 23064., 23748., 24024., 24300., 24576., 17186., 17492., 17798., 18104., 18744., 19056., 19368., 19680., 20350., 20668., 20986., 21304., 22004., 22328., 22652., 22976., 27933., 28410., 28887., 29364., 30334., 30820., 31306., 31792., 32807., 33302., 33797., 34292., 35352., 35856., 36360., 36864., 29761., 30274., 30787., 31300., 32306., 32828., 33350., 33872., 34923., 35454., 35985., 36516., 37612., 38152., 38692., 39232., 31589., 32138., 32687., 33236., 34278., 34836., 35394., 35952., 37039., 37606., 38173., 38740., 39872., 40448., 41024., 41600., 33417., 34002., 34587., 35172., 36250., 36844., 37438., 38032., 39155., 39758., 40361., 40964., 42132., 42744., 43356., 43968., 27618., 28020., 28422., 28824., 29592., 30000., 30408., 30816., 31614., 32028., 32442., 32856., 33684., 34104., 34524., 34944., 24626., 25076., 25526., 25976., 26760., 27216., 27672., 28128., 28942., 29404., 29866., 30328., 31172., 31640., 32108., 32576., 38901., 39594., 40287., 40980., 42166., 42868., 43570., 44272., 45503., 46214., 46925., 47636., 48912., 49632., 50352., 51072., 40729., 41458., 42187., 42916., 44138., 44876., 45614., 46352., 47619., 48366., 49113., 49860., 51172., 51928., 52684., 53440., 42557., 43322., 44087., 44852., 46110., 46884., 47658., 48432., 49735., 50518., 51301., 52084., 53432., 54224., 55016., 55808., 44385., 45186., 45987., 46788., 48082., 48892., 49702., 50512., 51851., 52670., 53489., 54308., 55692., 56520., 57348., 58176., 35826., 36372., 36918., 37464., 38376., 38928., 39480., 40032., 40974., 41532., 42090., 42648., 43620., 44184., 44748., 45312., 18268., 18616., 18964., 19312., 19872., 20224., 20576., 20928., 21508., 21864., 22220., 22576., 23176., 23536., 23896., 24256., 23878., 24412., 24946., 25480., 26284., 26824., 27364., 27904., 28738., 29284., 29830., 30376., 31240., 31792., 32344., 32896., 24862., 25420., 25978., 26536., 27364., 27928., 28492., 29056., 29914., 30484., 31054., 31624., 32512., 33088., 33664., 34240., 25846., 26428., 27010., 27592., 28444., 29032., 29620., 30208., 31090., 31684., 32278., 32872., 33784., 34384., 34984., 35584., 26830., 27436., 28042., 28648., 29524., 30136., 30748., 31360., 32266., 32884., 33502., 34120., 35056., 35680., 36304., 36928., 14812., 15224., 15636., 16048., 16608., 17024., 17440., 17856., 18436., 18856., 19276., 19696., 20296., 20720., 21144., 21568., 19932., 20216., 20500., 20784., 21344., 21632., 21920., 22208., 22788., 23080., 23372., 23664., 24264., 24560., 24856., 25152., 18182., 18492., 18802., 19112., 19852., 20168., 20484., 20800., 21570., 21892., 22214., 22536., 23336., 23664., 23992., 24320., 11486., 11692., 11898., 12104., 12740., 12952., 13164., 13376., 14042., 14260., 14478., 14696., 15392., 15616., 15840., 16064.,  6838.,  6940.,  7042.,  7144.,  7676.,  7784.,  7892.,  8000.,  8562.,  8676.,  8790.,  8904.,  9496.,  9616.,  9736.,  9856.,  8462.,  8588.,  8714.,  8840.,  9396.,  9528.,  9660.,  9792., 10378., 10516., 10654., 10792., 11408., 11552., 11696., 11840.,  8668.,  8760.,  8852.,  8944.,  9376.,  9472.,  9568.,  9664., 10116., 10216., 10316., 10416., 10888., 10992., 11096., 11200., 13666., 14036., 14406., 14776., 15480., 15856., 16232., 16608., 17342., 17724., 18106., 18488., 19252., 19640., 20028., 20416., 15613., 16058., 16503., 16948., 17886., 18340., 18794., 19248., 20231., 20694., 21157., 21620., 22648., 23120., 23592., 24064., 15265., 15618., 15971., 16324., 17170., 17532., 17894., 18256., 19147., 19518., 19889., 20260., 21196., 21576., 21956., 22336., 16965., 17226., 17487., 17748., 18502., 18772., 19042., 19312., 20111., 20390., 20669., 20948., 21792., 22080., 22368., 22656., 18793., 19090., 19387., 19684., 20474., 20780., 21086., 21392., 22227., 22542., 22857., 23172., 24052., 24376., 24700., 25024., 16674., 16884., 17094., 17304., 17880., 18096., 18312., 18528., 19134., 19356., 19578., 19800., 20436., 20664., 20892., 21120., 14706., 14964., 15222., 15480., 16072., 16336., 16600., 16864., 17486., 17756., 18026., 18296., 18948., 19224., 19500., 19776., 24277., 24682., 25087., 25492., 26390., 26804., 27218., 27632., 28575., 28998., 29421., 29844., 30832., 31264., 31696., 32128., 26105., 26546., 26987., 27428., 28362., 28812., 29262., 29712., 30691., 31150., 31609., 32068., 33092., 33560., 34028., 34496., 27933., 28410., 28887., 29364., 30334., 30820., 31306., 31792., 32807., 33302., 33797., 34292., 35352., 35856., 36360., 36864., 29761., 30274., 30787., 31300., 32306., 32828., 33350., 33872., 34923., 35454., 35985., 36516., 37612., 38152., 38692., 39232., 24882., 25236., 25590., 25944., 26664., 27024., 27384., 27744., 28494., 28860., 29226., 29592., 30372., 30744., 31116., 31488., 22146., 22548., 22950., 23352., 24088., 24496., 24904., 25312., 26078., 26492., 26906., 27320., 28116., 28536., 28956., 29376., 35245., 35866., 36487., 37108., 38222., 38852., 39482., 40112., 41271., 41910., 42549., 43188., 44392., 45040., 45688., 46336., 37073., 37730., 38387., 39044., 40194., 40860., 41526., 42192., 43387., 44062., 44737., 45412., 46652., 47336., 48020., 48704., 38901., 39594., 40287., 40980., 42166., 42868., 43570., 44272., 45503., 46214., 46925., 47636., 48912., 49632., 50352., 51072., 40729., 41458., 42187., 42916., 44138., 44876., 45614., 46352., 47619., 48366., 49113., 49860., 51172., 51928., 52684., 53440., 33090., 33588., 34086., 34584., 35448., 35952., 36456., 36960., 37854., 38364., 38874., 39384., 40308., 40824., 41340., 41856., 16700., 17016., 17332., 17648., 18176., 18496., 18816., 19136., 19684., 20008., 20332., 20656., 21224., 21552., 21880., 22208., 21910., 22396., 22882., 23368., 24124., 24616., 25108., 25600., 26386., 26884., 27382., 27880., 28696., 29200., 29704., 30208., 22894., 23404., 23914., 24424., 25204., 25720., 26236., 26752., 27562., 28084., 28606., 29128., 29968., 30496., 31024., 31552., 23878., 24412., 24946., 25480., 26284., 26824., 27364., 27904., 28738., 29284., 29830., 30376., 31240., 31792., 32344., 32896., 24862., 25420., 25978., 26536., 27364., 27928., 28492., 29056., 29914., 30484., 31054., 31624., 32512., 33088., 33664., 34240., 13756., 14136., 14516., 14896., 15424., 15808., 16192., 16576., 17124., 17512., 17900., 18288., 18856., 19248., 19640., 20032., 17852., 18104., 18356., 18608., 19136., 19392., 19648., 19904., 20452., 20712., 20972., 21232., 21800., 22064., 22328., 22592., 25302., 25692., 26082., 26472., 27292., 27688., 28084., 28480., 29330., 29732., 30134., 30536., 31416., 31824., 32232., 32640., 26926., 27340., 27754., 28168., 29012., 29432., 29852., 30272., 31146., 31572., 31998., 32424., 33328., 33760., 34192., 34624., 18182., 18492., 18802., 19112., 19852., 20168., 20484., 20800., 21570., 21892., 22214., 22536., 23336., 23664., 23992., 24320., 11486., 11692., 11898., 12104., 12740., 12952., 13164., 13376., 14042., 14260., 14478., 14696., 15392., 15616., 15840., 16064.,  6076.,  6136.,  6196.,  6256.,  6656.,  6720.,  6784.,  6848.,  7268.,  7336.,  7404.,  7472.,  7912.,  7984.,  8056.,  8128., 11186., 11508., 11830., 12152., 12808., 13136., 13464., 13792., 14478., 14812., 15146., 15480., 16196., 16536., 16876., 17216., 16181., 16682., 17183., 17684., 18678., 19188., 19698., 20208., 21247., 21766., 22285., 22804., 23888., 24416., 24944., 25472., 18009., 18546., 19083., 19620., 20650., 21196., 21742., 22288., 23363., 23918., 24473., 25028., 26148., 26712., 27276., 27840., 15613., 16058., 16503., 16948., 17886., 18340., 18794., 19248., 20231., 20694., 21157., 21620., 22648., 23120., 23592., 24064., 15265., 15618., 15971., 16324., 17170., 17532., 17894., 18256., 19147., 19518., 19889., 20260., 21196., 21576., 21956., 22336., 13938., 14100., 14262., 14424., 14952., 15120., 15288., 15456., 16014., 16188., 16362., 16536., 17124., 17304., 17484., 17664., 12226., 12436., 12646., 12856., 13400., 13616., 13832., 14048., 14622., 14844., 15066., 15288., 15892., 16120., 16348., 16576., 20621., 20954., 21287., 21620., 22446., 22788., 23130., 23472., 24343., 24694., 25045., 25396., 26312., 26672., 27032., 27392., 22449., 22818., 23187., 23556., 24418., 24796., 25174., 25552., 26459., 26846., 27233., 27620., 28572., 28968., 29364., 29760., 24277., 24682., 25087., 25492., 26390., 26804., 27218., 27632., 28575., 28998., 29421., 29844., 30832., 31264., 31696., 32128., 26105., 26546., 26987., 27428., 28362., 28812., 29262., 29712., 30691., 31150., 31609., 32068., 33092., 33560., 34028., 34496., 22146., 22452., 22758., 23064., 23736., 24048., 24360., 24672., 25374., 25692., 26010., 26328., 27060., 27384., 27708., 28032., 19666., 20020., 20374., 20728., 21416., 21776., 22136., 22496., 23214., 23580., 23946., 24312., 25060., 25432., 25804., 26176., 31589., 32138., 32687., 33236., 34278., 34836., 35394., 35952., 37039., 37606., 38173., 38740., 39872., 40448., 41024., 41600., 33417., 34002., 34587., 35172., 36250., 36844., 37438., 38032., 39155., 39758., 40361., 40964., 42132., 42744., 43356., 43968., 35245., 35866., 36487., 37108., 38222., 38852., 39482., 40112., 41271., 41910., 42549., 43188., 44392., 45040., 45688., 46336., 37073., 37730., 38387., 39044., 40194., 40860., 41526., 42192., 43387., 44062., 44737., 45412., 46652., 47336., 48020., 48704., 30354., 30804., 31254., 31704., 32520., 32976., 33432., 33888., 34734., 35196., 35658., 36120., 36996., 37464., 37932., 38400., 15132., 15416., 15700., 15984., 16480., 16768., 17056., 17344., 17860., 18152., 18444., 18736., 19272., 19568., 19864., 20160., 19942., 20380., 20818., 21256., 21964., 22408., 22852., 23296., 24034., 24484., 24934., 25384., 26152., 26608., 27064., 27520., 20926., 21388., 21850., 22312., 23044., 23512., 23980., 24448., 25210., 25684., 26158., 26632., 27424., 27904., 28384., 28864., 21910., 22396., 22882., 23368., 24124., 24616., 25108., 25600., 26386., 26884., 27382., 27880., 28696., 29200., 29704., 30208., 22894., 23404., 23914., 24424., 25204., 25720., 26236., 26752., 27562., 28084., 28606., 29128., 29968., 30496., 31024., 31552., 12700., 13048., 13396., 13744., 14240., 14592., 14944., 15296., 15812., 16168., 16524., 16880., 17416., 17776., 18136., 18496.};
  const std::array<int, 4> in_shape = {{ 3, 5, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x5x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16965., 17226., 17487., 17748., 18502., 18772., 19042., 19312., 20111., 20390., 20669., 20948., 21792., 22080., 22368., 22656., 18793., 19090., 19387., 19684., 20474., 20780., 21086., 21392., 22227., 22542., 22857., 23172., 24052., 24376., 24700., 25024., 20621., 20954., 21287., 21620., 22446., 22788., 23130., 23472., 24343., 24694., 25045., 25396., 26312., 26672., 27032., 27392., 22449., 22818., 23187., 23556., 24418., 24796., 25174., 25552., 26459., 26846., 27233., 27620., 28572., 28968., 29364., 29760., 27933., 28410., 28887., 29364., 30334., 30820., 31306., 31792., 32807., 33302., 33797., 34292., 35352., 35856., 36360., 36864., 29761., 30274., 30787., 31300., 32306., 32828., 33350., 33872., 34923., 35454., 35985., 36516., 37612., 38152., 38692., 39232., 31589., 32138., 32687., 33236., 34278., 34836., 35394., 35952., 37039., 37606., 38173., 38740., 39872., 40448., 41024., 41600., 33417., 34002., 34587., 35172., 36250., 36844., 37438., 38032., 39155., 39758., 40361., 40964., 42132., 42744., 43356., 43968., 38901., 39594., 40287., 40980., 42166., 42868., 43570., 44272., 45503., 46214., 46925., 47636., 48912., 49632., 50352., 51072., 40729., 41458., 42187., 42916., 44138., 44876., 45614., 46352., 47619., 48366., 49113., 49860., 51172., 51928., 52684., 53440., 42557., 43322., 44087., 44852., 46110., 46884., 47658., 48432., 49735., 50518., 51301., 52084., 53432., 54224., 55016., 55808., 44385., 45186., 45987., 46788., 48082., 48892., 49702., 50512., 51851., 52670., 53489., 54308., 55692., 56520., 57348., 58176., 15613., 16058., 16503., 16948., 17886., 18340., 18794., 19248., 20231., 20694., 21157., 21620., 22648., 23120., 23592., 24064., 15265., 15618., 15971., 16324., 17170., 17532., 17894., 18256., 19147., 19518., 19889., 20260., 21196., 21576., 21956., 22336., 16965., 17226., 17487., 17748., 18502., 18772., 19042., 19312., 20111., 20390., 20669., 20948., 21792., 22080., 22368., 22656., 18793., 19090., 19387., 19684., 20474., 20780., 21086., 21392., 22227., 22542., 22857., 23172., 24052., 24376., 24700., 25024., 24277., 24682., 25087., 25492., 26390., 26804., 27218., 27632., 28575., 28998., 29421., 29844., 30832., 31264., 31696., 32128., 26105., 26546., 26987., 27428., 28362., 28812., 29262., 29712., 30691., 31150., 31609., 32068., 33092., 33560., 34028., 34496., 27933., 28410., 28887., 29364., 30334., 30820., 31306., 31792., 32807., 33302., 33797., 34292., 35352., 35856., 36360., 36864., 29761., 30274., 30787., 31300., 32306., 32828., 33350., 33872., 34923., 35454., 35985., 36516., 37612., 38152., 38692., 39232., 35245., 35866., 36487., 37108., 38222., 38852., 39482., 40112., 41271., 41910., 42549., 43188., 44392., 45040., 45688., 46336., 37073., 37730., 38387., 39044., 40194., 40860., 41526., 42192., 43387., 44062., 44737., 45412., 46652., 47336., 48020., 48704., 38901., 39594., 40287., 40980., 42166., 42868., 43570., 44272., 45503., 46214., 46925., 47636., 48912., 49632., 50352., 51072., 40729., 41458., 42187., 42916., 44138., 44876., 45614., 46352., 47619., 48366., 49113., 49860., 51172., 51928., 52684., 53440., 16181., 16682., 17183., 17684., 18678., 19188., 19698., 20208., 21247., 21766., 22285., 22804., 23888., 24416., 24944., 25472., 18009., 18546., 19083., 19620., 20650., 21196., 21742., 22288., 23363., 23918., 24473., 25028., 26148., 26712., 27276., 27840., 15613., 16058., 16503., 16948., 17886., 18340., 18794., 19248., 20231., 20694., 21157., 21620., 22648., 23120., 23592., 24064., 15265., 15618., 15971., 16324., 17170., 17532., 17894., 18256., 19147., 19518., 19889., 20260., 21196., 21576., 21956., 22336., 20621., 20954., 21287., 21620., 22446., 22788., 23130., 23472., 24343., 24694., 25045., 25396., 26312., 26672., 27032., 27392., 22449., 22818., 23187., 23556., 24418., 24796., 25174., 25552., 26459., 26846., 27233., 27620., 28572., 28968., 29364., 29760., 24277., 24682., 25087., 25492., 26390., 26804., 27218., 27632., 28575., 28998., 29421., 29844., 30832., 31264., 31696., 32128., 26105., 26546., 26987., 27428., 28362., 28812., 29262., 29712., 30691., 31150., 31609., 32068., 33092., 33560., 34028., 34496., 31589., 32138., 32687., 33236., 34278., 34836., 35394., 35952., 37039., 37606., 38173., 38740., 39872., 40448., 41024., 41600., 33417., 34002., 34587., 35172., 36250., 36844., 37438., 38032., 39155., 39758., 40361., 40964., 42132., 42744., 43356., 43968., 35245., 35866., 36487., 37108., 38222., 38852., 39482., 40112., 41271., 41910., 42549., 43188., 44392., 45040., 45688., 46336., 37073., 37730., 38387., 39044., 40194., 40860., 41526., 42192., 43387., 44062., 44737., 45412., 46652., 47336., 48020., 48704.};
  const std::array<int, 4> in_shape = {{ 3, 5, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x4x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 111.,  178.,  217.,  145.,  231.,  348.,  393.,  252.,  363.,  528.,  573.,  360.,  495.,  708.,  753.,  468.,  627.,  888.,  933.,  576.,  325.,  442.,  463.,  271.,  783., 1114., 1153.,  721., 1023., 1428., 1473.,  900., 1155., 1608., 1653., 1008., 1287., 1788., 1833., 1116., 1419., 1968., 2013., 1224.,  709.,  946.,  967.,  559., 1455., 2050., 2089., 1297., 1815., 2508., 2553., 1548., 1947., 2688., 2733., 1656., 2079., 2868., 2913., 1764., 2211., 3048., 3093., 1872., 1093., 1450., 1471.,  847.};
  const std::array<int, 4> in_shape = {{ 3, 6, 4, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x4x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 348.,  393.,  528.,  573.,  708.,  753.,  888.,  933., 1428., 1473., 1608., 1653., 1788., 1833., 1968., 2013., 2508., 2553., 2688., 2733., 2868., 2913., 3048., 3093.};
  const std::array<int, 4> in_shape = {{ 3, 6, 4, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x4x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 208.,  222.,  332.,  356.,  404.,  434.,  268.,  290.,  429.,  462.,  642.,  696.,  723.,  786.,  459.,  504.,  669.,  726.,  966., 1056., 1047., 1146.,  651.,  720.,  909.,  990., 1290., 1416., 1371., 1506.,  843.,  936., 1149., 1254., 1614., 1776., 1695., 1866., 1035., 1152.,  572.,  650.,  764.,  884.,  800.,  926.,  456.,  542., 1456., 1566., 2060., 2228., 2132., 2306., 1324., 1442., 1869., 2046., 2586., 2856., 2667., 2946., 1611., 1800., 2109., 2310., 2910., 3216., 2991., 3306., 1803., 2016., 2349., 2574., 3234., 3576., 3315., 3666., 1995., 2232., 2589., 2838., 3558., 3936., 3639., 4026., 2187., 2448., 1244., 1418., 1628., 1892., 1664., 1934.,  936., 1118., 2704., 2910., 3788., 4100., 3860., 4178., 2380., 2594., 3309., 3630., 4530., 5016., 4611., 5106., 2763., 3096., 3549., 3894., 4854., 5376., 4935., 5466., 2955., 3312., 3789., 4158., 5178., 5736., 5259., 5826., 3147., 3528., 4029., 4422., 5502., 6096., 5583., 6186., 3339., 3744., 1916., 2186., 2492., 2900., 2528., 2942., 1416., 1694.};
  const std::array<int, 4> in_shape = {{ 3, 6, 4, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x4x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 642.,  696.,  723.,  786.,  966., 1056., 1047., 1146., 1290., 1416., 1371., 1506., 1614., 1776., 1695., 1866., 2586., 2856., 2667., 2946., 2910., 3216., 2991., 3306., 3234., 3576., 3315., 3666., 3558., 3936., 3639., 4026., 4530., 5016., 4611., 5106., 4854., 5376., 4935., 5466., 5178., 5736., 5259., 5826., 5502., 6096., 5583., 6186.};
  const std::array<int, 4> in_shape = {{ 3, 6, 4, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x4x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  402.,   416.,   430.,   444.,   640.,   664.,   688.,   712.,   778.,   808.,   838.,   868.,   514.,   536.,   558.,   580.,   825.,   858.,   891.,   924.,  1230.,  1284.,  1338.,  1392.,  1383.,  1446.,  1509.,  1572.,   873.,   918.,   963.,  1008.,  1281.,  1338.,  1395.,  1452.,  1842.,  1932.,  2022.,  2112.,  1995.,  2094.,  2193.,  2292.,  1233.,  1302.,  1371.,  1440.,  1737.,  1818.,  1899.,  1980.,  2454.,  2580.,  2706.,  2832.,  2607.,  2742.,  2877.,  3012.,  1593.,  1686.,  1779.,  1872.,  2193.,  2298.,  2403.,  2508.,  3066.,  3228.,  3390.,  3552.,  3219.,  3390.,  3561.,  3732.,  1953.,  2070.,  2187.,  2304.,  1066.,  1144.,  1222.,  1300.,  1408.,  1528.,  1648.,  1768.,  1474.,  1600.,  1726.,  1852.,   826.,   912.,   998.,  1084.,  2802.,  2912.,  3022.,  3132.,  3952.,  4120.,  4288.,  4456.,  4090.,  4264.,  4438.,  4612.,  2530.,  2648.,  2766.,  2884.,  3561.,  3738.,  3915.,  4092.,  4902.,  5172.,  5442.,  5712.,  5055.,  5334.,  5613.,  5892.,  3033.,  3222.,  3411.,  3600.,  4017.,  4218.,  4419.,  4620.,  5514.,  5820.,  6126.,  6432.,  5667.,  5982.,  6297.,  6612.,  3393.,  3606.,  3819.,  4032.,  4473.,  4698.,  4923.,  5148.,  6126.,  6468.,  6810.,  7152.,  6279.,  6630.,  6981.,  7332.,  3753.,  3990.,  4227.,  4464.,  4929.,  5178.,  5427.,  5676.,  6738.,  7116.,  7494.,  7872.,  6891.,  7278.,  7665.,  8052.,  4113.,  4374.,  4635.,  4896.,  2314.,  2488.,  2662.,  2836.,  2992.,  3256.,  3520.,  3784.,  3058.,  3328.,  3598.,  3868.,  1690.,  1872.,  2054.,  2236.,  5202.,  5408.,  5614.,  5820.,  7264.,  7576.,  7888.,  8200.,  7402.,  7720.,  8038.,  8356.,  4546.,  4760.,  4974.,  5188.,  6297.,  6618.,  6939.,  7260.,  8574.,  9060.,  9546., 10032.,  8727.,  9222.,  9717., 10212.,  5193.,  5526.,  5859.,  6192.,  6753.,  7098.,  7443.,  7788.,  9186.,  9708., 10230., 10752.,  9339.,  9870., 10401., 10932.,  5553.,  5910.,  6267.,  6624.,  7209.,  7578.,  7947.,  8316.,  9798., 10356., 10914., 11472.,  9951., 10518., 11085., 11652.,  5913.,  6294.,  6675.,  7056.,  7665.,  8058.,  8451.,  8844., 10410., 11004., 11598., 12192., 10563., 11166., 11769., 12372.,  6273.,  6678.,  7083.,  7488.,  3562.,  3832.,  4102.,  4372.,  4576.,  4984.,  5392.,  5800.,  4642.,  5056.,  5470.,  5884.,  2554.,  2832.,  3110.,  3388.};
  const std::array<int, 4> in_shape = {{ 3, 6, 4, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x4x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1230.,  1284.,  1338.,  1392.,  1383.,  1446.,  1509.,  1572.,  1842.,  1932.,  2022.,  2112.,  1995.,  2094.,  2193.,  2292.,  2454.,  2580.,  2706.,  2832.,  2607.,  2742.,  2877.,  3012.,  3066.,  3228.,  3390.,  3552.,  3219.,  3390.,  3561.,  3732.,  4902.,  5172.,  5442.,  5712.,  5055.,  5334.,  5613.,  5892.,  5514.,  5820.,  6126.,  6432.,  5667.,  5982.,  6297.,  6612.,  6126.,  6468.,  6810.,  7152.,  6279.,  6630.,  6981.,  7332.,  6738.,  7116.,  7494.,  7872.,  6891.,  7278.,  7665.,  8052.,  8574.,  9060.,  9546., 10032.,  8727.,  9222.,  9717., 10212.,  9186.,  9708., 10230., 10752.,  9339.,  9870., 10401., 10932.,  9798., 10356., 10914., 11472.,  9951., 10518., 11085., 11652., 10410., 11004., 11598., 12192., 10563., 11166., 11769., 12372.};
  const std::array<int, 4> in_shape = {{ 3, 6, 4, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x4x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  364.,   444.,   592.,   712.,   736.,   868.,   492.,   580.,   798.,   924.,  1203.,  1392.,  1365.,  1572.,   870.,  1008.,  1278.,  1452.,  1851.,  2112.,  2013.,  2292.,  1254.,  1440.,  1758.,  1980.,  2499.,  2832.,  2661.,  3012.,  1638.,  1872.,  2238.,  2508.,  3147.,  3552.,  3309.,  3732.,  2022.,  2304.,  1116.,  1300.,  1492.,  1768.,  1564.,  1852.,   892.,  1084.,  2860.,  3132.,  4048.,  4456.,  4192.,  4612.,  2604.,  2884.,  3678.,  4092.,  5091.,  5712.,  5253.,  5892.,  3174.,  3600.,  4158.,  4620.,  5739.,  6432.,  5901.,  6612.,  3558.,  4032.,  4638.,  5148.,  6387.,  7152.,  6549.,  7332.,  3942.,  4464.,  5118.,  5676.,  7035.,  7872.,  7197.,  8052.,  4326.,  4896.,  2460.,  2836.,  3220.,  3784.,  3292.,  3868.,  1852.,  2236.,  5356.,  5820.,  7504.,  8200.,  7648.,  8356.,  4716.,  5188.,  6558.,  7260.,  8979., 10032.,  9141., 10212.,  5478.,  6192.,  7038.,  7788.,  9627., 10752.,  9789., 10932.,  5862.,  6624.,  7518.,  8316., 10275., 11472., 10437., 11652.,  6246.,  7056.,  7998.,  8844., 10923., 12192., 11085., 12372.,  6630.,  7488.,  3804.,  4372.,  4948.,  5800.,  5020.,  5884.,  2812.,  3388.};
  const std::array<int, 4> in_shape = {{ 3, 6, 4, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x4x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1203.,  1392.,  1365.,  1572.,  1851.,  2112.,  2013.,  2292.,  2499.,  2832.,  2661.,  3012.,  3147.,  3552.,  3309.,  3732.,  5091.,  5712.,  5253.,  5892.,  5739.,  6432.,  5901.,  6612.,  6387.,  7152.,  6549.,  7332.,  7035.,  7872.,  7197.,  8052.,  8979., 10032.,  9141., 10212.,  9627., 10752.,  9789., 10932., 10275., 11472., 10437., 11652., 10923., 12192., 11085., 12372.};
  const std::array<int, 4> in_shape = {{ 3, 6, 4, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x4x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  704.,   728.,   860.,   888.,  1142.,  1184.,  1376.,  1424.,  1418.,  1472.,  1676.,  1736.,   944.,   984.,  1116.,  1160.,  1536.,  1596.,  1782.,  1848.,  2307.,  2406.,  2676.,  2784.,  2613.,  2730.,  3018.,  3144.,  1656.,  1740.,  1926.,  2016.,  2448.,  2556.,  2790.,  2904.,  3531.,  3702.,  4044.,  4224.,  3837.,  4026.,  4386.,  4584.,  2376.,  2508.,  2742.,  2880.,  3360.,  3516.,  3798.,  3960.,  4755.,  4998.,  5412.,  5664.,  5061.,  5322.,  5754.,  6024.,  3096.,  3276.,  3558.,  3744.,  4272.,  4476.,  4806.,  5016.,  5979.,  6294.,  6780.,  7104.,  6285.,  6618.,  7122.,  7464.,  3816.,  4044.,  4374.,  4608.,  2080.,  2232.,  2444.,  2600.,  2750.,  2984.,  3296.,  3536.,  2882.,  3128.,  3452.,  3704.,  1616.,  1784.,  1996.,  2168.,  5504.,  5720.,  6044.,  6264.,  7766.,  8096.,  8576.,  8912.,  8042.,  8384.,  8876.,  9224.,  4976.,  5208.,  5532.,  5768.,  7008.,  7356.,  7830.,  8184.,  9651., 10182., 10884., 11424.,  9957., 10506., 11226., 11784.,  5976.,  6348.,  6822.,  7200.,  7920.,  8316.,  8838.,  9240., 10875., 11478., 12252., 12864., 11181., 11802., 12594., 13224.,  6696.,  7116.,  7638.,  8064.,  8832.,  9276.,  9846., 10296., 12099., 12774., 13620., 14304., 12405., 13098., 13962., 14664.,  7416.,  7884.,  8454.,  8928.,  9744., 10236., 10854., 11352., 13323., 14070., 14988., 15744., 13629., 14394., 15330., 16104.,  8136.,  8652.,  9270.,  9792.,  4576.,  4920.,  5324.,  5672.,  5918.,  6440.,  7040.,  7568.,  6050.,  6584.,  7196.,  7736.,  3344.,  3704.,  4108.,  4472., 10304., 10712., 11228., 11640., 14390., 15008., 15776., 16400., 14666., 15296., 16076., 16712.,  9008.,  9432.,  9948., 10376., 12480., 13116., 13878., 14520., 16995., 17958., 19092., 20064., 17301., 18282., 19434., 20424., 10296., 10956., 11718., 12384., 13392., 14076., 14886., 15576., 18219., 19254., 20460., 21504., 18525., 19578., 20802., 21864., 11016., 11724., 12534., 13248., 14304., 15036., 15894., 16632., 19443., 20550., 21828., 22944., 19749., 20874., 22170., 23304., 11736., 12492., 13350., 14112., 15216., 15996., 16902., 17688., 20667., 21846., 23196., 24384., 20973., 22170., 23538., 24744., 12456., 13260., 14166., 14976.,  7072.,  7608.,  8204.,  8744.,  9086.,  9896., 10784., 11600.,  9218., 10040., 10940., 11768.,  5072.,  5624.,  6220.,  6776.};
  const std::array<int, 4> in_shape = {{ 3, 6, 4, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x4x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2307.,  2406.,  2676.,  2784.,  2613.,  2730.,  3018.,  3144.,  3531.,  3702.,  4044.,  4224.,  3837.,  4026.,  4386.,  4584.,  4755.,  4998.,  5412.,  5664.,  5061.,  5322.,  5754.,  6024.,  5979.,  6294.,  6780.,  7104.,  6285.,  6618.,  7122.,  7464.,  9651., 10182., 10884., 11424.,  9957., 10506., 11226., 11784., 10875., 11478., 12252., 12864., 11181., 11802., 12594., 13224., 12099., 12774., 13620., 14304., 12405., 13098., 13962., 14664., 13323., 14070., 14988., 15744., 13629., 14394., 15330., 16104., 16995., 17958., 19092., 20064., 17301., 18282., 19434., 20424., 18219., 19254., 20460., 21504., 18525., 19578., 20802., 21864., 19443., 20550., 21828., 22944., 19749., 20874., 22170., 23304., 20667., 21846., 23196., 24384., 20973., 22170., 23538., 24744.};
  const std::array<int, 4> in_shape = {{ 3, 6, 4, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x4x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1384.,  1408.,  1432.,  1456.,  1692.,  1720.,  1748.,  1776.,  2242.,  2284.,  2326.,  2368.,  2704.,  2752.,  2800.,  2848.,  2782.,  2836.,  2890.,  2944.,  3292.,  3352.,  3412.,  3472.,  1848.,  1888.,  1928.,  1968.,  2188.,  2232.,  2276.,  2320.,  3012.,  3072.,  3132.,  3192.,  3498.,  3564.,  3630.,  3696.,  4515.,  4614.,  4713.,  4812.,  5244.,  5352.,  5460.,  5568.,  5109.,  5226.,  5343.,  5460.,  5910.,  6036.,  6162.,  6288.,  3228.,  3312.,  3396.,  3480.,  3762.,  3852.,  3942.,  4032.,  4788.,  4896.,  5004.,  5112.,  5466.,  5580.,  5694.,  5808.,  6891.,  7062.,  7233.,  7404.,  7908.,  8088.,  8268.,  8448.,  7485.,  7674.,  7863.,  8052.,  8574.,  8772.,  8970.,  9168.,  4620.,  4752.,  4884.,  5016.,  5346.,  5484.,  5622.,  5760.,  6564.,  6720.,  6876.,  7032.,  7434.,  7596.,  7758.,  7920.,  9267.,  9510.,  9753.,  9996., 10572., 10824., 11076., 11328.,  9861., 10122., 10383., 10644., 11238., 11508., 11778., 12048.,  6012.,  6192.,  6372.,  6552.,  6930.,  7116.,  7302.,  7488.,  8340.,  8544.,  8748.,  8952.,  9402.,  9612.,  9822., 10032., 11643., 11958., 12273., 12588., 13236., 13560., 13884., 14208., 12237., 12570., 12903., 13236., 13902., 14244., 14586., 14928.,  7404.,  7632.,  7860.,  8088.,  8514.,  8748.,  8982.,  9216.,  4008.,  4160.,  4312.,  4464.,  4732.,  4888.,  5044.,  5200.,  5266.,  5500.,  5734.,  5968.,  6352.,  6592.,  6832.,  7072.,  5518.,  5764.,  6010.,  6256.,  6652.,  6904.,  7156.,  7408.,  3064.,  3232.,  3400.,  3568.,  3820.,  3992.,  4164.,  4336., 10792., 11008., 11224., 11440., 11868., 12088., 12308., 12528., 15202., 15532., 15862., 16192., 16816., 17152., 17488., 17824., 15742., 16084., 16426., 16768., 17404., 17752., 18100., 18448.,  9720.,  9952., 10184., 10416., 10828., 11064., 11300., 11536., 13668., 14016., 14364., 14712., 15306., 15660., 16014., 16368., 18771., 19302., 19833., 20364., 21228., 21768., 22308., 22848., 19365., 19914., 20463., 21012., 21894., 22452., 23010., 23568., 11580., 11952., 12324., 12696., 13266., 13644., 14022., 14400., 15444., 15840., 16236., 16632., 17274., 17676., 18078., 18480., 21147., 21750., 22353., 22956., 23892., 24504., 25116., 25728., 21741., 22362., 22983., 23604., 24558., 25188., 25818., 26448., 12972., 13392., 13812., 14232., 14850., 15276., 15702., 16128., 17220., 17664., 18108., 18552., 19242., 19692., 20142., 20592., 23523., 24198., 24873., 25548., 26556., 27240., 27924., 28608., 24117., 24810., 25503., 26196., 27222., 27924., 28626., 29328., 14364., 14832., 15300., 15768., 16434., 16908., 17382., 17856., 18996., 19488., 19980., 20472., 21210., 21708., 22206., 22704., 25899., 26646., 27393., 28140., 29220., 29976., 30732., 31488., 26493., 27258., 28023., 28788., 29886., 30660., 31434., 32208., 15756., 16272., 16788., 17304., 18018., 18540., 19062., 19584.,  8808.,  9152.,  9496.,  9840., 10300., 10648., 10996., 11344., 11314., 11836., 12358., 12880., 13552., 14080., 14608., 15136., 11566., 12100., 12634., 13168., 13852., 14392., 14932., 15472.,  6328.,  6688.,  7048.,  7408.,  7852.,  8216.,  8580.,  8944., 20200., 20608., 21016., 21424., 22044., 22456., 22868., 23280., 28162., 28780., 29398., 30016., 30928., 31552., 32176., 32800., 28702., 29332., 29962., 30592., 31516., 32152., 32788., 33424., 17592., 18016., 18440., 18864., 19468., 19896., 20324., 20752., 24324., 24960., 25596., 26232., 27114., 27756., 28398., 29040., 33027., 33990., 34953., 35916., 37212., 38184., 39156., 40128., 33621., 34602., 35583., 36564., 37878., 38868., 39858., 40848., 19932., 20592., 21252., 21912., 22770., 23436., 24102., 24768., 26100., 26784., 27468., 28152., 29082., 29772., 30462., 31152., 35403., 36438., 37473., 38508., 39876., 40920., 41964., 43008., 35997., 37050., 38103., 39156., 40542., 41604., 42666., 43728., 21324., 22032., 22740., 23448., 24354., 25068., 25782., 26496., 27876., 28608., 29340., 30072., 31050., 31788., 32526., 33264., 37779., 38886., 39993., 41100., 42540., 43656., 44772., 45888., 38373., 39498., 40623., 41748., 43206., 44340., 45474., 46608., 22716., 23472., 24228., 24984., 25938., 26700., 27462., 28224., 29652., 30432., 31212., 31992., 33018., 33804., 34590., 35376., 40155., 41334., 42513., 43692., 45204., 46392., 47580., 48768., 40749., 41946., 43143., 44340., 45870., 47076., 48282., 49488., 24108., 24912., 25716., 26520., 27522., 28332., 29142., 29952., 13608., 14144., 14680., 15216., 15868., 16408., 16948., 17488., 17362., 18172., 18982., 19792., 20752., 21568., 22384., 23200., 17614., 18436., 19258., 20080., 21052., 21880., 22708., 23536.,  9592., 10144., 10696., 11248., 11884., 12440., 12996., 13552.};
  const std::array<int, 4> in_shape = {{ 3, 6, 4, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x4x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4515.,  4614.,  4713.,  4812.,  5244.,  5352.,  5460.,  5568.,  5109.,  5226.,  5343.,  5460.,  5910.,  6036.,  6162.,  6288.,  6891.,  7062.,  7233.,  7404.,  7908.,  8088.,  8268.,  8448.,  7485.,  7674.,  7863.,  8052.,  8574.,  8772.,  8970.,  9168.,  9267.,  9510.,  9753.,  9996., 10572., 10824., 11076., 11328.,  9861., 10122., 10383., 10644., 11238., 11508., 11778., 12048., 11643., 11958., 12273., 12588., 13236., 13560., 13884., 14208., 12237., 12570., 12903., 13236., 13902., 14244., 14586., 14928., 18771., 19302., 19833., 20364., 21228., 21768., 22308., 22848., 19365., 19914., 20463., 21012., 21894., 22452., 23010., 23568., 21147., 21750., 22353., 22956., 23892., 24504., 25116., 25728., 21741., 22362., 22983., 23604., 24558., 25188., 25818., 26448., 23523., 24198., 24873., 25548., 26556., 27240., 27924., 28608., 24117., 24810., 25503., 26196., 27222., 27924., 28626., 29328., 25899., 26646., 27393., 28140., 29220., 29976., 30732., 31488., 26493., 27258., 28023., 28788., 29886., 30660., 31434., 32208., 33027., 33990., 34953., 35916., 37212., 38184., 39156., 40128., 33621., 34602., 35583., 36564., 37878., 38868., 39858., 40848., 35403., 36438., 37473., 38508., 39876., 40920., 41964., 43008., 35997., 37050., 38103., 39156., 40542., 41604., 42666., 43728., 37779., 38886., 39993., 41100., 42540., 43656., 44772., 45888., 38373., 39498., 40623., 41748., 43206., 44340., 45474., 46608., 40155., 41334., 42513., 43692., 45204., 46392., 47580., 48768., 40749., 41946., 43143., 44340., 45870., 47076., 48282., 49488.};
  const std::array<int, 4> in_shape = {{ 3, 6, 4, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x4x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1308.,  1456.,  1612.,  1776.,  2146.,  2368.,  2602.,  2848.,  2698.,  2944.,  3202.,  3472.,  1804.,  1968.,  2140.,  2320.,  2958.,  3192.,  3438.,  3696.,  4461.,  4812.,  5181.,  5568.,  5073.,  5460.,  5865.,  6288.,  3222.,  3480.,  3750.,  4032.,  4782.,  5112.,  5454.,  5808.,  6909.,  7404.,  7917.,  8448.,  7521.,  8052.,  8601.,  9168.,  4662.,  5016.,  5382.,  5760.,  6606.,  7032.,  7470.,  7920.,  9357.,  9996., 10653., 11328.,  9969., 10644., 11337., 12048.,  6102.,  6552.,  7014.,  7488.,  8430.,  8952.,  9486., 10032., 11805., 12588., 13389., 14208., 12417., 13236., 14073., 14928.,  7542.,  8088.,  8646.,  9216.,  4108.,  4464.,  4828.,  5200.,  5434.,  5968.,  6514.,  7072.,  5698.,  6256.,  6826.,  7408.,  3196.,  3568.,  3948.,  4336., 10908., 11440., 11980., 12528., 15394., 16192., 17002., 17824., 15946., 16768., 17602., 18448.,  9868., 10416., 10972., 11536., 13902., 14712., 15534., 16368., 19149., 20364., 21597., 22848., 19761., 21012., 22281., 23568., 11862., 12696., 13542., 14400., 15726., 16632., 17550., 18480., 21597., 22956., 24333., 25728., 22209., 23604., 25017., 26448., 13302., 14232., 15174., 16128., 17550., 18552., 19566., 20592., 24045., 25548., 27069., 28608., 24657., 26196., 27753., 29328., 14742., 15768., 16806., 17856., 19374., 20472., 21582., 22704., 26493., 28140., 29805., 31488., 27105., 28788., 30489., 32208., 16182., 17304., 18438., 19584.,  9100.,  9840., 10588., 11344., 11770., 12880., 14002., 15136., 12034., 13168., 14314., 15472.,  6652.,  7408.,  8172.,  8944., 20508., 21424., 22348., 23280., 28642., 30016., 31402., 32800., 29194., 30592., 32002., 33424., 17932., 18864., 19804., 20752., 24846., 26232., 27630., 29040., 33837., 35916., 38013., 40128., 34449., 36564., 38697., 40848., 20502., 21912., 23334., 24768., 26670., 28152., 29646., 31152., 36285., 38508., 40749., 43008., 36897., 39156., 41433., 43728., 21942., 23448., 24966., 26496., 28494., 30072., 31662., 33264., 38733., 41100., 43485., 45888., 39345., 41748., 44169., 46608., 23382., 24984., 26598., 28224., 30318., 31992., 33678., 35376., 41181., 43692., 46221., 48768., 41793., 44340., 46905., 49488., 24822., 26520., 28230., 29952., 14092., 15216., 16348., 17488., 18106., 19792., 21490., 23200., 18370., 20080., 21802., 23536., 10108., 11248., 12396., 13552.};
  const std::array<int, 4> in_shape = {{ 3, 6, 4, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x4x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4461.,  4812.,  5181.,  5568.,  5073.,  5460.,  5865.,  6288.,  6909.,  7404.,  7917.,  8448.,  7521.,  8052.,  8601.,  9168.,  9357.,  9996., 10653., 11328.,  9969., 10644., 11337., 12048., 11805., 12588., 13389., 14208., 12417., 13236., 14073., 14928., 19149., 20364., 21597., 22848., 19761., 21012., 22281., 23568., 21597., 22956., 24333., 25728., 22209., 23604., 25017., 26448., 24045., 25548., 27069., 28608., 24657., 26196., 27753., 29328., 26493., 28140., 29805., 31488., 27105., 28788., 30489., 32208., 33837., 35916., 38013., 40128., 34449., 36564., 38697., 40848., 36285., 38508., 40749., 43008., 36897., 39156., 41433., 43728., 38733., 41100., 43485., 45888., 39345., 41748., 44169., 46608., 41181., 43692., 46221., 48768., 41793., 44340., 46905., 49488.};
  const std::array<int, 4> in_shape = {{ 3, 6, 4, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2572.,  2616.,  2864.,  2912.,  3172.,  3224.,  3496.,  3552.,  4214.,  4292.,  4652.,  4736.,  5114.,  5204.,  5600.,  5696.,  5294.,  5396.,  5780.,  5888.,  6290.,  6404.,  6824.,  6944.,  3532.,  3608.,  3856.,  3936.,  4196.,  4280.,  4552.,  4640.,  5802.,  5916.,  6264.,  6384.,  6750.,  6876.,  7260.,  7392.,  8733.,  8922.,  9426.,  9624., 10155., 10362., 10920., 11136.,  9921., 10146., 10686., 10920., 11487., 11730., 12324., 12576.,  6282.,  6444.,  6792.,  6960.,  7326.,  7500.,  7884.,  8064.,  9354.,  9564., 10008., 10224., 10686., 10908., 11388., 11616., 13485., 13818., 14466., 14808., 15483., 15834., 16536., 16896., 14673., 15042., 15726., 16104., 16815., 17202., 17940., 18336.,  9066.,  9324.,  9768., 10032., 10494., 10764., 11244., 11520., 12906., 13212., 13752., 14064., 14622., 14940., 15516., 15840., 18237., 18714., 19506., 19992., 20811., 21306., 22152., 22656., 19425., 19938., 20766., 21288., 22143., 22674., 23556., 24096., 11850., 12204., 12744., 13104., 13662., 14028., 14604., 14976., 16458., 16860., 17496., 17904., 18558., 18972., 19644., 20064., 22989., 23610., 24546., 25176., 26139., 26778., 27768., 28416., 24177., 24834., 25806., 26472., 27471., 28146., 29172., 29856., 14634., 15084., 15720., 16176., 16830., 17292., 17964., 18432.,  7916.,  8216.,  8624.,  8928.,  9348.,  9656., 10088., 10400., 10406., 10868., 11468., 11936., 12554., 13028., 13664., 14144., 10910., 11396., 12020., 12512., 13154., 13652., 14312., 14816.,  6060.,  6392.,  6800.,  7136.,  7556.,  7896.,  8328.,  8672., 21388., 21816., 22448., 22880., 23524., 23960., 24616., 25056., 30134., 30788., 31724., 32384., 33338., 34004., 34976., 35648., 31214., 31892., 32852., 33536., 34514., 35204., 36200., 36896., 19276., 19736., 20368., 20832., 21476., 21944., 22600., 23072., 11498., 11932., 12600., 13040., 13726., 14172., 14876., 15328., 15357., 16026., 17010., 17688., 18699., 19386., 20424., 21120., 16545., 17250., 18270., 18984., 20031., 20754., 21828., 22560.,  9418.,  9900., 10568., 11056., 11742., 12236., 12940., 13440.,  5578.,  5852.,  6360.,  6640.,  7166.,  7452.,  7996.,  8288.,  7437.,  7866.,  8610.,  9048.,  9819., 10266., 11064., 11520.,  8625.,  9090.,  9870., 10344., 11151., 11634., 12468., 12960.,  4778.,  5100.,  5608.,  5936.,  6462.,  6796.,  7340.,  7680.,  5802.,  5916.,  6264.,  6384.,  6750.,  6876.,  7260.,  7392.,  8733.,  8922.,  9426.,  9624., 10155., 10362., 10920., 11136.,  9921., 10146., 10686., 10920., 11487., 11730., 12324., 12576.,  6282.,  6444.,  6792.,  6960.,  7326.,  7500.,  7884.,  8064.,  9354.,  9564., 10008., 10224., 10686., 10908., 11388., 11616., 13485., 13818., 14466., 14808., 15483., 15834., 16536., 16896., 14673., 15042., 15726., 16104., 16815., 17202., 17940., 18336.,  9066.,  9324.,  9768., 10032., 10494., 10764., 11244., 11520.,  4716.,  4888.,  5168.,  5344.,  5636.,  5816.,  6120.,  6304.,  6374.,  6644.,  7052.,  7328.,  7754.,  8036.,  8480.,  8768.,  6878.,  7172.,  7604.,  7904.,  8354.,  8660.,  9128.,  9440.,  3884.,  4088.,  4368.,  4576.,  4868.,  5080.,  5384.,  5600., 15116., 15416., 15920., 16224., 16740., 17048., 17576., 17888., 21494., 21956., 22700., 23168., 23930., 24404., 25184., 25664., 22574., 23060., 23828., 24320., 25106., 25604., 26408., 26912., 14028., 14360., 14864., 15200., 15716., 16056., 16584., 16928., 20010., 20508., 21240., 21744., 22494., 23004., 23772., 24288., 27741., 28506., 29586., 30360., 31467., 32250., 33384., 34176., 28929., 29730., 30846., 31656., 32799., 33618., 34788., 35616., 17418., 17964., 18696., 19248., 19998., 20556., 21324., 21888., 23562., 24156., 24984., 25584., 26430., 27036., 27900., 28512., 32493., 33402., 34626., 35544., 36795., 37722., 39000., 39936., 33681., 34626., 35886., 36840., 38127., 39090., 40404., 41376., 20202., 20844., 21672., 22320., 23166., 23820., 24684., 25344., 11498., 11932., 12600., 13040., 13726., 14172., 14876., 15328., 15357., 16026., 17010., 17688., 18699., 19386., 20424., 21120., 16545., 17250., 18270., 18984., 20031., 20754., 21828., 22560.,  9418.,  9900., 10568., 11056., 11742., 12236., 12940., 13440.,  5578.,  5852.,  6360.,  6640.,  7166.,  7452.,  7996.,  8288.,  7437.,  7866.,  8610.,  9048.,  9819., 10266., 11064., 11520.,  8625.,  9090.,  9870., 10344., 11151., 11634., 12468., 12960.,  4778.,  5100.,  5608.,  5936.,  6462.,  6796.,  7340.,  7680.,  1516.,  1560.,  1712.,  1760.,  1924.,  1976.,  2152.,  2208.,  2342.,  2420.,  2636.,  2720.,  2954.,  3044.,  3296.,  3392.,  2846.,  2948.,  3188.,  3296.,  3554.,  3668.,  3944.,  4064.,  1708.,  1784.,  1936.,  2016.,  2180.,  2264.,  2440.,  2528.};
  const std::array<int, 4> in_shape = {{ 3, 6, 4, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8733.,  8922.,  9426.,  9624., 10155., 10362., 10920., 11136.,  9921., 10146., 10686., 10920., 11487., 11730., 12324., 12576., 13485., 13818., 14466., 14808., 15483., 15834., 16536., 16896., 14673., 15042., 15726., 16104., 16815., 17202., 17940., 18336., 18237., 18714., 19506., 19992., 20811., 21306., 22152., 22656., 19425., 19938., 20766., 21288., 22143., 22674., 23556., 24096., 22989., 23610., 24546., 25176., 26139., 26778., 27768., 28416., 24177., 24834., 25806., 26472., 27471., 28146., 29172., 29856., 15357., 16026., 17010., 17688., 18699., 19386., 20424., 21120., 16545., 17250., 18270., 18984., 20031., 20754., 21828., 22560.,  7437.,  7866.,  8610.,  9048.,  9819., 10266., 11064., 11520.,  8625.,  9090.,  9870., 10344., 11151., 11634., 12468., 12960.,  8733.,  8922.,  9426.,  9624., 10155., 10362., 10920., 11136.,  9921., 10146., 10686., 10920., 11487., 11730., 12324., 12576., 13485., 13818., 14466., 14808., 15483., 15834., 16536., 16896., 14673., 15042., 15726., 16104., 16815., 17202., 17940., 18336., 27741., 28506., 29586., 30360., 31467., 32250., 33384., 34176., 28929., 29730., 30846., 31656., 32799., 33618., 34788., 35616., 32493., 33402., 34626., 35544., 36795., 37722., 39000., 39936., 33681., 34626., 35886., 36840., 38127., 39090., 40404., 41376., 15357., 16026., 17010., 17688., 18699., 19386., 20424., 21120., 16545., 17250., 18270., 18984., 20031., 20754., 21828., 22560.,  7437.,  7866.,  8610.,  9048.,  9819., 10266., 11064., 11520.,  8625.,  9090.,  9870., 10344., 11151., 11634., 12468., 12960.};
  const std::array<int, 4> in_shape = {{ 3, 6, 4, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x4x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  940.,   984.,  1028.,  1072.,  1200.,  1248.,  1296.,  1344.,  1492.,  1544.,  1596.,  1648.,  1816.,  1872.,  1928.,  1984.,  1822.,  1900.,  1978.,  2056.,  2308.,  2392.,  2476.,  2560.,  2842.,  2932.,  3022.,  3112.,  3424.,  3520.,  3616.,  3712.,  2422.,  2524.,  2626.,  2728.,  3004.,  3112.,  3220.,  3328.,  3634.,  3748.,  3862.,  3976.,  4312.,  4432.,  4552.,  4672.,  2700.,  2776.,  2852.,  2928.,  3152.,  3232.,  3312.,  3392.,  3636.,  3720.,  3804.,  3888.,  4152.,  4240.,  4328.,  4416.,  2210.,  2324.,  2438.,  2552.,  2808.,  2928.,  3048.,  3168.,  3454.,  3580.,  3706.,  3832.,  4148.,  4280.,  4412.,  4544.,  4605.,  4794.,  4983.,  5172.,  5598.,  5796.,  5994.,  6192.,  6663.,  6870.,  7077.,  7284.,  7800.,  8016.,  8232.,  8448.,  5409.,  5634.,  5859.,  6084.,  6546.,  6780.,  7014.,  7248.,  7755.,  7998.,  8241.,  8484.,  9036.,  9288.,  9540.,  9792.,  5042.,  5204.,  5366.,  5528.,  5864.,  6032.,  6200.,  6368.,  6734.,  6908.,  7082.,  7256.,  7652.,  7832.,  8012.,  8192.,  4098.,  4308.,  4518.,  4728.,  5080.,  5296.,  5512.,  5728.,  6110.,  6332.,  6554.,  6776.,  7188.,  7416.,  7644.,  7872.,  7821.,  8154.,  8487.,  8820.,  9390.,  9732., 10074., 10416., 11031., 11382., 11733., 12084., 12744., 13104., 13464., 13824.,  8625.,  8994.,  9363.,  9732., 10338., 10716., 11094., 11472., 12123., 12510., 12897., 13284., 13980., 14376., 14772., 15168.,  7442.,  7700.,  7958.,  8216.,  8648.,  8912.,  9176.,  9440.,  9902., 10172., 10442., 10712., 11204., 11480., 11756., 12032.,  2786.,  2964.,  3142.,  3320.,  3640.,  3824.,  4008.,  4192.,  4542.,  4732.,  4922.,  5112.,  5492.,  5688.,  5884.,  6080.,  5725.,  6010.,  6295.,  6580.,  7102.,  7396.,  7690.,  7984.,  8551.,  8854.,  9157.,  9460., 10072., 10384., 10696., 11008.,  6529.,  6850.,  7171.,  7492.,  8050.,  8380.,  8710.,  9040.,  9643.,  9982., 10321., 10660., 11308., 11656., 12004., 12352.,  4594.,  4820.,  5046.,  5272.,  5672.,  5904.,  6136.,  6368.,  6798.,  7036.,  7274.,  7512.,  7972.,  8216.,  8460.,  8704.,  3522.,  3668.,  3814.,  3960.,  4248.,  4400.,  4552.,  4704.,  5022.,  5180.,  5338.,  5496.,  5844.,  6008.,  6172.,  6336.,  4653.,  4890.,  5127.,  5364.,  5838.,  6084.,  6330.,  6576.,  7095.,  7350.,  7605.,  7860.,  8424.,  8688.,  8952.,  9216.,  5457.,  5730.,  6003.,  6276.,  6786.,  7068.,  7350.,  7632.,  8187.,  8478.,  8769.,  9060.,  9660.,  9960., 10260., 10560.,  3794.,  3988.,  4182.,  4376.,  4744.,  4944.,  5144.,  5344.,  5742.,  5948.,  6154.,  6360.,  6788.,  7000.,  7212.,  7424.,   556.,   600.,   644.,   688.,   816.,   864.,   912.,   960.,  1108.,  1160.,  1212.,  1264.,  1432.,  1488.,  1544.,  1600.,  1662.,  1740.,  1818.,  1896.,  2116.,  2200.,  2284.,  2368.,  2618.,  2708.,  2798.,  2888.,  3168.,  3264.,  3360.,  3456.,  2134.,  2236.,  2338.,  2440.,  2684.,  2792.,  2900.,  3008.,  3282.,  3396.,  3510.,  3624.,  3928.,  4048.,  4168.,  4288.,  1484.,  1560.,  1636.,  1712.,  1872.,  1952.,  2032.,  2112.,  2292.,  2376.,  2460.,  2544.,  2744.,  2832.,  2920.,  3008.,  3116.,  3288.,  3460.,  3632.,  3888.,  4064.,  4240.,  4416.,  4692.,  4872.,  5052.,  5232.,  5528.,  5712.,  5896.,  6080.,  6622.,  6892.,  7162.,  7432.,  7876.,  8152.,  8428.,  8704.,  9178.,  9460.,  9742., 10024., 10528., 10816., 11104., 11392.,  7222.,  7516.,  7810.,  8104.,  8572.,  8872.,  9172.,  9472.,  9970., 10276., 10582., 10888., 11416., 11728., 12040., 12352.,  6924.,  7128.,  7332.,  7536.,  7888.,  8096.,  8304.,  8512.,  8884.,  9096.,  9308.,  9520.,  9912., 10128., 10344., 10560.,  2786.,  2964.,  3142.,  3320.,  3640.,  3824.,  4008.,  4192.,  4542.,  4732.,  4922.,  5112.,  5492.,  5688.,  5884.,  6080.,  5725.,  6010.,  6295.,  6580.,  7102.,  7396.,  7690.,  7984.,  8551.,  8854.,  9157.,  9460., 10072., 10384., 10696., 11008.,  6529.,  6850.,  7171.,  7492.,  8050.,  8380.,  8710.,  9040.,  9643.,  9982., 10321., 10660., 11308., 11656., 12004., 12352.,  4594.,  4820.,  5046.,  5272.,  5672.,  5904.,  6136.,  6368.,  6798.,  7036.,  7274.,  7512.,  7972.,  8216.,  8460.,  8704.,  3522.,  3668.,  3814.,  3960.,  4248.,  4400.,  4552.,  4704.,  5022.,  5180.,  5338.,  5496.,  5844.,  6008.,  6172.,  6336.,  4653.,  4890.,  5127.,  5364.,  5838.,  6084.,  6330.,  6576.,  7095.,  7350.,  7605.,  7860.,  8424.,  8688.,  8952.,  9216.,  5457.,  5730.,  6003.,  6276.,  6786.,  7068.,  7350.,  7632.,  8187.,  8478.,  8769.,  9060.,  9660.,  9960., 10260., 10560.,  3794.,  3988.,  4182.,  4376.,  4744.,  4944.,  5144.,  5344.,  5742.,  5948.,  6154.,  6360.,  6788.,  7000.,  7212.,  7424.,  2210.,  2324.,  2438.,  2552.,  2808.,  2928.,  3048.,  3168.,  3454.,  3580.,  3706.,  3832.,  4148.,  4280.,  4412.,  4544.,  4605.,  4794.,  4983.,  5172.,  5598.,  5796.,  5994.,  6192.,  6663.,  6870.,  7077.,  7284.,  7800.,  8016.,  8232.,  8448.,  5409.,  5634.,  5859.,  6084.,  6546.,  6780.,  7014.,  7248.,  7755.,  7998.,  8241.,  8484.,  9036.,  9288.,  9540.,  9792.,  5042.,  5204.,  5366.,  5528.,  5864.,  6032.,  6200.,  6368.,  6734.,  6908.,  7082.,  7256.,  7652.,  7832.,  8012.,  8192.,  4098.,  4308.,  4518.,  4728.,  5080.,  5296.,  5512.,  5728.,  6110.,  6332.,  6554.,  6776.,  7188.,  7416.,  7644.,  7872.,  7821.,  8154.,  8487.,  8820.,  9390.,  9732., 10074., 10416., 11031., 11382., 11733., 12084., 12744., 13104., 13464., 13824.,  8625.,  8994.,  9363.,  9732., 10338., 10716., 11094., 11472., 12123., 12510., 12897., 13284., 13980., 14376., 14772., 15168.,  7442.,  7700.,  7958.,  8216.,  8648.,  8912.,  9176.,  9440.,  9902., 10172., 10442., 10712., 11204., 11480., 11756., 12032.,  2732.,  2904.,  3076.,  3248.,  3504.,  3680.,  3856.,  4032.,  4308.,  4488.,  4668.,  4848.,  5144.,  5328.,  5512.,  5696.,  5438.,  5708.,  5978.,  6248.,  6660.,  6936.,  7212.,  7488.,  7930.,  8212.,  8494.,  8776.,  9248.,  9536.,  9824., 10112.,  5910.,  6204.,  6498.,  6792.,  7228.,  7528.,  7828.,  8128.,  8594.,  8900.,  9206.,  9512., 10008., 10320., 10632., 10944.,  3660.,  3864.,  4068.,  4272.,  4560.,  4768.,  4976.,  5184.,  5492.,  5704.,  5916.,  6128.,  6456.,  6672.,  6888.,  7104.,   940.,   984.,  1028.,  1072.,  1200.,  1248.,  1296.,  1344.,  1492.,  1544.,  1596.,  1648.,  1816.,  1872.,  1928.,  1984.,  1822.,  1900.,  1978.,  2056.,  2308.,  2392.,  2476.,  2560.,  2842.,  2932.,  3022.,  3112.,  3424.,  3520.,  3616.,  3712.,  2422.,  2524.,  2626.,  2728.,  3004.,  3112.,  3220.,  3328.,  3634.,  3748.,  3862.,  3976.,  4312.,  4432.,  4552.,  4672.,  2700.,  2776.,  2852.,  2928.,  3152.,  3232.,  3312.,  3392.,  3636.,  3720.,  3804.,  3888.,  4152.,  4240.,  4328.,  4416.,  2210.,  2324.,  2438.,  2552.,  2808.,  2928.,  3048.,  3168.,  3454.,  3580.,  3706.,  3832.,  4148.,  4280.,  4412.,  4544.,  4605.,  4794.,  4983.,  5172.,  5598.,  5796.,  5994.,  6192.,  6663.,  6870.,  7077.,  7284.,  7800.,  8016.,  8232.,  8448.,  5409.,  5634.,  5859.,  6084.,  6546.,  6780.,  7014.,  7248.,  7755.,  7998.,  8241.,  8484.,  9036.,  9288.,  9540.,  9792.,  5042.,  5204.,  5366.,  5528.,  5864.,  6032.,  6200.,  6368.,  6734.,  6908.,  7082.,  7256.,  7652.,  7832.,  8012.,  8192.,  4098.,  4308.,  4518.,  4728.,  5080.,  5296.,  5512.,  5728.,  6110.,  6332.,  6554.,  6776.,  7188.,  7416.,  7644.,  7872.,  7821.,  8154.,  8487.,  8820.,  9390.,  9732., 10074., 10416., 11031., 11382., 11733., 12084., 12744., 13104., 13464., 13824.,  8625.,  8994.,  9363.,  9732., 10338., 10716., 11094., 11472., 12123., 12510., 12897., 13284., 13980., 14376., 14772., 15168.,  7442.,  7700.,  7958.,  8216.,  8648.,  8912.,  9176.,  9440.,  9902., 10172., 10442., 10712., 11204., 11480., 11756., 12032.,  2786.,  2964.,  3142.,  3320.,  3640.,  3824.,  4008.,  4192.,  4542.,  4732.,  4922.,  5112.,  5492.,  5688.,  5884.,  6080.,  5725.,  6010.,  6295.,  6580.,  7102.,  7396.,  7690.,  7984.,  8551.,  8854.,  9157.,  9460., 10072., 10384., 10696., 11008.,  6529.,  6850.,  7171.,  7492.,  8050.,  8380.,  8710.,  9040.,  9643.,  9982., 10321., 10660., 11308., 11656., 12004., 12352.,  4594.,  4820.,  5046.,  5272.,  5672.,  5904.,  6136.,  6368.,  6798.,  7036.,  7274.,  7512.,  7972.,  8216.,  8460.,  8704.,  3522.,  3668.,  3814.,  3960.,  4248.,  4400.,  4552.,  4704.,  5022.,  5180.,  5338.,  5496.,  5844.,  6008.,  6172.,  6336.,  4653.,  4890.,  5127.,  5364.,  5838.,  6084.,  6330.,  6576.,  7095.,  7350.,  7605.,  7860.,  8424.,  8688.,  8952.,  9216.,  5457.,  5730.,  6003.,  6276.,  6786.,  7068.,  7350.,  7632.,  8187.,  8478.,  8769.,  9060.,  9660.,  9960., 10260., 10560.,  3794.,  3988.,  4182.,  4376.,  4744.,  4944.,  5144.,  5344.,  5742.,  5948.,  6154.,  6360.,  6788.,  7000.,  7212.,  7424.,   556.,   600.,   644.,   688.,   816.,   864.,   912.,   960.,  1108.,  1160.,  1212.,  1264.,  1432.,  1488.,  1544.,  1600.,  1662.,  1740.,  1818.,  1896.,  2116.,  2200.,  2284.,  2368.,  2618.,  2708.,  2798.,  2888.,  3168.,  3264.,  3360.,  3456.,  2134.,  2236.,  2338.,  2440.,  2684.,  2792.,  2900.,  3008.,  3282.,  3396.,  3510.,  3624.,  3928.,  4048.,  4168.,  4288.,  1484.,  1560.,  1636.,  1712.,  1872.,  1952.,  2032.,  2112.,  2292.,  2376.,  2460.,  2544.,  2744.,  2832.,  2920.,  3008.};
  const std::array<int, 4> in_shape = {{ 3, 6, 4, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x4x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4605.,  4794.,  4983.,  5172.,  5598.,  5796.,  5994.,  6192.,  6663.,  6870.,  7077.,  7284.,  7800.,  8016.,  8232.,  8448.,  5409.,  5634.,  5859.,  6084.,  6546.,  6780.,  7014.,  7248.,  7755.,  7998.,  8241.,  8484.,  9036.,  9288.,  9540.,  9792.,  7821.,  8154.,  8487.,  8820.,  9390.,  9732., 10074., 10416., 11031., 11382., 11733., 12084., 12744., 13104., 13464., 13824.,  8625.,  8994.,  9363.,  9732., 10338., 10716., 11094., 11472., 12123., 12510., 12897., 13284., 13980., 14376., 14772., 15168.,  5725.,  6010.,  6295.,  6580.,  7102.,  7396.,  7690.,  7984.,  8551.,  8854.,  9157.,  9460., 10072., 10384., 10696., 11008.,  6529.,  6850.,  7171.,  7492.,  8050.,  8380.,  8710.,  9040.,  9643.,  9982., 10321., 10660., 11308., 11656., 12004., 12352.,  4653.,  4890.,  5127.,  5364.,  5838.,  6084.,  6330.,  6576.,  7095.,  7350.,  7605.,  7860.,  8424.,  8688.,  8952.,  9216.,  5457.,  5730.,  6003.,  6276.,  6786.,  7068.,  7350.,  7632.,  8187.,  8478.,  8769.,  9060.,  9660.,  9960., 10260., 10560.,  5725.,  6010.,  6295.,  6580.,  7102.,  7396.,  7690.,  7984.,  8551.,  8854.,  9157.,  9460., 10072., 10384., 10696., 11008.,  6529.,  6850.,  7171.,  7492.,  8050.,  8380.,  8710.,  9040.,  9643.,  9982., 10321., 10660., 11308., 11656., 12004., 12352.,  4653.,  4890.,  5127.,  5364.,  5838.,  6084.,  6330.,  6576.,  7095.,  7350.,  7605.,  7860.,  8424.,  8688.,  8952.,  9216.,  5457.,  5730.,  6003.,  6276.,  6786.,  7068.,  7350.,  7632.,  8187.,  8478.,  8769.,  9060.,  9660.,  9960., 10260., 10560.,  4605.,  4794.,  4983.,  5172.,  5598.,  5796.,  5994.,  6192.,  6663.,  6870.,  7077.,  7284.,  7800.,  8016.,  8232.,  8448.,  5409.,  5634.,  5859.,  6084.,  6546.,  6780.,  7014.,  7248.,  7755.,  7998.,  8241.,  8484.,  9036.,  9288.,  9540.,  9792.,  7821.,  8154.,  8487.,  8820.,  9390.,  9732., 10074., 10416., 11031., 11382., 11733., 12084., 12744., 13104., 13464., 13824.,  8625.,  8994.,  9363.,  9732., 10338., 10716., 11094., 11472., 12123., 12510., 12897., 13284., 13980., 14376., 14772., 15168.,  4605.,  4794.,  4983.,  5172.,  5598.,  5796.,  5994.,  6192.,  6663.,  6870.,  7077.,  7284.,  7800.,  8016.,  8232.,  8448.,  5409.,  5634.,  5859.,  6084.,  6546.,  6780.,  7014.,  7248.,  7755.,  7998.,  8241.,  8484.,  9036.,  9288.,  9540.,  9792.,  7821.,  8154.,  8487.,  8820.,  9390.,  9732., 10074., 10416., 11031., 11382., 11733., 12084., 12744., 13104., 13464., 13824.,  8625.,  8994.,  9363.,  9732., 10338., 10716., 11094., 11472., 12123., 12510., 12897., 13284., 13980., 14376., 14772., 15168.,  5725.,  6010.,  6295.,  6580.,  7102.,  7396.,  7690.,  7984.,  8551.,  8854.,  9157.,  9460., 10072., 10384., 10696., 11008.,  6529.,  6850.,  7171.,  7492.,  8050.,  8380.,  8710.,  9040.,  9643.,  9982., 10321., 10660., 11308., 11656., 12004., 12352.,  4653.,  4890.,  5127.,  5364.,  5838.,  6084.,  6330.,  6576.,  7095.,  7350.,  7605.,  7860.,  8424.,  8688.,  8952.,  9216.,  5457.,  5730.,  6003.,  6276.,  6786.,  7068.,  7350.,  7632.,  8187.,  8478.,  8769.,  9060.,  9660.,  9960., 10260., 10560.};
  const std::array<int, 4> in_shape = {{ 3, 6, 4, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x5x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 128.,  202.,  241.,  280.,  184.,  276.,  411.,  456.,  501.,  318.,  441.,  636.,  681.,  726.,  453.,  606.,  861.,  906.,  951.,  588.,  771., 1086., 1131., 1176.,  723.,  400.,  541.,  562.,  583.,  340.,  968., 1372., 1411., 1450.,  904., 1266., 1761., 1806., 1851., 1128., 1431., 1986., 2031., 2076., 1263., 1596., 2211., 2256., 2301., 1398., 1761., 2436., 2481., 2526., 1533.,  880., 1171., 1192., 1213.,  700., 1808., 2542., 2581., 2620., 1624., 2256., 3111., 3156., 3201., 1938., 2421., 3336., 3381., 3426., 2073., 2586., 3561., 3606., 3651., 2208., 2751., 3786., 3831., 3876., 2343., 1360., 1801., 1822., 1843., 1060.};
  const std::array<int, 4> in_shape = {{ 3, 6, 5, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x5x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 411.,  456.,  501.,  636.,  681.,  726.,  861.,  906.,  951., 1086., 1131., 1176., 1761., 1806., 1851., 1986., 2031., 2076., 2211., 2256., 2301., 2436., 2481., 2526., 3111., 3156., 3201., 3336., 3381., 3426., 3561., 3606., 3651., 3786., 3831., 3876.};
  const std::array<int, 4> in_shape = {{ 3, 6, 5, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x5x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 240.,  256.,  377.,  404.,  449.,  482.,  521.,  560.,  340.,  368.,  513.,  552.,  759.,  822.,  840.,  912.,  921., 1002.,  579.,  636.,  813.,  882., 1164., 1272., 1245., 1362., 1326., 1452.,  819.,  906., 1113., 1212., 1569., 1722., 1650., 1812., 1731., 1902., 1059., 1176., 1413., 1542., 1974., 2172., 2055., 2262., 2136., 2352., 1299., 1446.,  704.,  800.,  935., 1082.,  971., 1124., 1007., 1166.,  572.,  680., 1800., 1936., 2537., 2744., 2609., 2822., 2681., 2900., 1660., 1808., 2313., 2532., 3189., 3522., 3270., 3612., 3351., 3702., 2019., 2256., 2613., 2862., 3594., 3972., 3675., 4062., 3756., 4152., 2259., 2526., 2913., 3192., 3999., 4422., 4080., 4512., 4161., 4602., 2499., 2796., 3213., 3522., 4404., 4872., 4485., 4962., 4566., 5052., 2739., 3066., 1544., 1760., 2015., 2342., 2051., 2384., 2087., 2426., 1172., 1400., 3360., 3616., 4697., 5084., 4769., 5162., 4841., 5240., 2980., 3248., 4113., 4512., 5619., 6222., 5700., 6312., 5781., 6402., 3459., 3876., 4413., 4842., 6024., 6672., 6105., 6762., 6186., 6852., 3699., 4146., 4713., 5172., 6429., 7122., 6510., 7212., 6591., 7302., 3939., 4416., 5013., 5502., 6834., 7572., 6915., 7662., 6996., 7752., 4179., 4686., 2384., 2720., 3095., 3602., 3131., 3644., 3167., 3686., 1772., 2120.};
  const std::array<int, 4> in_shape = {{ 3, 6, 5, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x5x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 759.,  822.,  840.,  912.,  921., 1002., 1164., 1272., 1245., 1362., 1326., 1452., 1569., 1722., 1650., 1812., 1731., 1902., 1974., 2172., 2055., 2262., 2136., 2352., 3189., 3522., 3270., 3612., 3351., 3702., 3594., 3972., 3675., 4062., 3756., 4152., 3999., 4422., 4080., 4512., 4161., 4602., 4404., 4872., 4485., 4962., 4566., 5052., 5619., 6222., 5700., 6312., 5781., 6402., 6024., 6672., 6105., 6762., 6186., 6852., 6429., 7122., 6510., 7212., 6591., 7302., 6834., 7572., 6915., 7662., 6996., 7752.};
  const std::array<int, 4> in_shape = {{ 3, 6, 5, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x5x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  464.,   480.,   496.,   512.,   727.,   754.,   781.,   808.,   865.,   898.,   931.,   964.,  1003.,  1042.,  1081.,  1120.,   652.,   680.,   708.,   736.,   987.,  1026.,  1065.,  1104.,  1455.,  1518.,  1581.,  1644.,  1608.,  1680.,  1752.,  1824.,  1761.,  1842.,  1923.,  2004.,  1101.,  1158.,  1215.,  1272.,  1557.,  1626.,  1695.,  1764.,  2220.,  2328.,  2436.,  2544.,  2373.,  2490.,  2607.,  2724.,  2526.,  2652.,  2778.,  2904.,  1551.,  1638.,  1725.,  1812.,  2127.,  2226.,  2325.,  2424.,  2985.,  3138.,  3291.,  3444.,  3138.,  3300.,  3462.,  3624.,  3291.,  3462.,  3633.,  3804.,  2001.,  2118.,  2235.,  2352.,  2697.,  2826.,  2955.,  3084.,  3750.,  3948.,  4146.,  4344.,  3903.,  4110.,  4317.,  4524.,  4056.,  4272.,  4488.,  4704.,  2451.,  2598.,  2745.,  2892.,  1312.,  1408.,  1504.,  1600.,  1723.,  1870.,  2017.,  2164.,  1789.,  1942.,  2095.,  2248.,  1855.,  2014.,  2173.,  2332.,  1036.,  1144.,  1252.,  1360.,  3464.,  3600.,  3736.,  3872.,  4867.,  5074.,  5281.,  5488.,  5005.,  5218.,  5431.,  5644.,  5143.,  5362.,  5581.,  5800.,  3172.,  3320.,  3468.,  3616.,  4407.,  4626.,  4845.,  5064.,  6045.,  6378.,  6711.,  7044.,  6198.,  6540.,  6882.,  7224.,  6351.,  6702.,  7053.,  7404.,  3801.,  4038.,  4275.,  4512.,  4977.,  5226.,  5475.,  5724.,  6810.,  7188.,  7566.,  7944.,  6963.,  7350.,  7737.,  8124.,  7116.,  7512.,  7908.,  8304.,  4251.,  4518.,  4785.,  5052.,  5547.,  5826.,  6105.,  6384.,  7575.,  7998.,  8421.,  8844.,  7728.,  8160.,  8592.,  9024.,  7881.,  8322.,  8763.,  9204.,  4701.,  4998.,  5295.,  5592.,  6117.,  6426.,  6735.,  7044.,  8340.,  8808.,  9276.,  9744.,  8493.,  8970.,  9447.,  9924.,  8646.,  9132.,  9618., 10104.,  5151.,  5478.,  5805.,  6132.,  2872.,  3088.,  3304.,  3520.,  3703.,  4030.,  4357.,  4684.,  3769.,  4102.,  4435.,  4768.,  3835.,  4174.,  4513.,  4852.,  2116.,  2344.,  2572.,  2800.,  6464.,  6720.,  6976.,  7232.,  9007.,  9394.,  9781., 10168.,  9145.,  9538.,  9931., 10324.,  9283.,  9682., 10081., 10480.,  5692.,  5960.,  6228.,  6496.,  7827.,  8226.,  8625.,  9024., 10635., 11238., 11841., 12444., 10788., 11400., 12012., 12624., 10941., 11562., 12183., 12804.,  6501.,  6918.,  7335.,  7752.,  8397.,  8826.,  9255.,  9684., 11400., 12048., 12696., 13344., 11553., 12210., 12867., 13524., 11706., 12372., 13038., 13704.,  6951.,  7398.,  7845.,  8292.,  8967.,  9426.,  9885., 10344., 12165., 12858., 13551., 14244., 12318., 13020., 13722., 14424., 12471., 13182., 13893., 14604.,  7401.,  7878.,  8355.,  8832.,  9537., 10026., 10515., 11004., 12930., 13668., 14406., 15144., 13083., 13830., 14577., 15324., 13236., 13992., 14748., 15504.,  7851.,  8358.,  8865.,  9372.,  4432.,  4768.,  5104.,  5440.,  5683.,  6190.,  6697.,  7204.,  5749.,  6262.,  6775.,  7288.,  5815.,  6334.,  6853.,  7372.,  3196.,  3544.,  3892.,  4240.};
  const std::array<int, 4> in_shape = {{ 3, 6, 5, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x5x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1455.,  1518.,  1581.,  1644.,  1608.,  1680.,  1752.,  1824.,  1761.,  1842.,  1923.,  2004.,  2220.,  2328.,  2436.,  2544.,  2373.,  2490.,  2607.,  2724.,  2526.,  2652.,  2778.,  2904.,  2985.,  3138.,  3291.,  3444.,  3138.,  3300.,  3462.,  3624.,  3291.,  3462.,  3633.,  3804.,  3750.,  3948.,  4146.,  4344.,  3903.,  4110.,  4317.,  4524.,  4056.,  4272.,  4488.,  4704.,  6045.,  6378.,  6711.,  7044.,  6198.,  6540.,  6882.,  7224.,  6351.,  6702.,  7053.,  7404.,  6810.,  7188.,  7566.,  7944.,  6963.,  7350.,  7737.,  8124.,  7116.,  7512.,  7908.,  8304.,  7575.,  7998.,  8421.,  8844.,  7728.,  8160.,  8592.,  9024.,  7881.,  8322.,  8763.,  9204.,  8340.,  8808.,  9276.,  9744.,  8493.,  8970.,  9447.,  9924.,  8646.,  9132.,  9618., 10104., 10635., 11238., 11841., 12444., 10788., 11400., 12012., 12624., 10941., 11562., 12183., 12804., 11400., 12048., 12696., 13344., 11553., 12210., 12867., 13524., 11706., 12372., 13038., 13704., 12165., 12858., 13551., 14244., 12318., 13020., 13722., 14424., 12471., 13182., 13893., 14604., 12930., 13668., 14406., 15144., 13083., 13830., 14577., 15324., 13236., 13992., 14748., 15504.};
  const std::array<int, 4> in_shape = {{ 3, 6, 5, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x5x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  428.,   512.,   682.,   808.,   826.,   964.,   970.,  1120.,   636.,   736.,   966.,  1104.,  1437.,  1644.,  1599.,  1824.,  1761.,  2004.,  1110.,  1272.,  1566.,  1764.,  2247.,  2544.,  2409.,  2724.,  2571.,  2904.,  1590.,  1812.,  2166.,  2424.,  3057.,  3444.,  3219.,  3624.,  3381.,  3804.,  2070.,  2352.,  2766.,  3084.,  3867.,  4344.,  4029.,  4524.,  4191.,  4704.,  2550.,  2892.,  1380.,  1600.,  1834.,  2164.,  1906.,  2248.,  1978.,  2332.,  1124.,  1360.,  3548.,  3872.,  5002.,  5488.,  5146.,  5644.,  5290.,  5800.,  3276.,  3616.,  4566.,  5064.,  6297.,  7044.,  6459.,  7224.,  6621.,  7404.,  3990.,  4512.,  5166.,  5724.,  7107.,  7944.,  7269.,  8124.,  7431.,  8304.,  4470.,  5052.,  5766.,  6384.,  7917.,  8844.,  8079.,  9024.,  8241.,  9204.,  4950.,  5592.,  6366.,  7044.,  8727.,  9744.,  8889.,  9924.,  9051., 10104.,  5430.,  6132.,  3060.,  3520.,  3994.,  4684.,  4066.,  4768.,  4138.,  4852.,  2324.,  2800.,  6668.,  7232.,  9322., 10168.,  9466., 10324.,  9610., 10480.,  5916.,  6496.,  8166.,  9024., 11157., 12444., 11319., 12624., 11481., 12804.,  6870.,  7752.,  8766.,  9684., 11967., 13344., 12129., 13524., 12291., 13704.,  7350.,  8292.,  9366., 10344., 12777., 14244., 12939., 14424., 13101., 14604.,  7830.,  8832.,  9966., 11004., 13587., 15144., 13749., 15324., 13911., 15504.,  8310.,  9372.,  4740.,  5440.,  6154.,  7204.,  6226.,  7288.,  6298.,  7372.,  3524.,  4240.};
  const std::array<int, 4> in_shape = {{ 3, 6, 5, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x5x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1437.,  1644.,  1599.,  1824.,  1761.,  2004.,  2247.,  2544.,  2409.,  2724.,  2571.,  2904.,  3057.,  3444.,  3219.,  3624.,  3381.,  3804.,  3867.,  4344.,  4029.,  4524.,  4191.,  4704.,  6297.,  7044.,  6459.,  7224.,  6621.,  7404.,  7107.,  7944.,  7269.,  8124.,  7431.,  8304.,  7917.,  8844.,  8079.,  9024.,  8241.,  9204.,  8727.,  9744.,  8889.,  9924.,  9051., 10104., 11157., 12444., 11319., 12624., 11481., 12804., 11967., 13344., 12129., 13524., 12291., 13704., 12777., 14244., 12939., 14424., 13101., 14604., 13587., 15144., 13749., 15324., 13911., 15504.};
  const std::array<int, 4> in_shape = {{ 3, 6, 5, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x5x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  828.,   856.,   992.,  1024.,  1316.,  1364.,  1562.,  1616.,  1592.,  1652.,  1862.,  1928.,  1868.,  1940.,  2162.,  2240.,  1220.,  1272.,  1416.,  1472.,  1860.,  1932.,  2130.,  2208.,  2757.,  2874.,  3162.,  3288.,  3063.,  3198.,  3504.,  3648.,  3369.,  3522.,  3846.,  4008.,  2112.,  2220.,  2430.,  2544.,  3000.,  3132.,  3390.,  3528.,  4287.,  4494.,  4872.,  5088.,  4593.,  4818.,  5214.,  5448.,  4899.,  5142.,  5556.,  5808.,  3012.,  3180.,  3450.,  3624.,  4140.,  4332.,  4650.,  4848.,  5817.,  6114.,  6582.,  6888.,  6123.,  6438.,  6924.,  7248.,  6429.,  6762.,  7266.,  7608.,  3912.,  4140.,  4470.,  4704.,  5280.,  5532.,  5910.,  6168.,  7347.,  7734.,  8292.,  8688.,  7653.,  8058.,  8634.,  9048.,  7959.,  8382.,  8976.,  9408.,  4812.,  5100.,  5490.,  5784.,  2572.,  2760.,  3008.,  3200.,  3380.,  3668.,  4034.,  4328.,  3512.,  3812.,  4190.,  4496.,  3644.,  3956.,  4346.,  4664.,  2036.,  2248.,  2504.,  2720.,  6828.,  7096.,  7472.,  7744.,  9596., 10004., 10562., 10976.,  9872., 10292., 10862., 11288., 10148., 10580., 11162., 11600.,  6260.,  6552.,  6936.,  7232.,  8700.,  9132.,  9690., 10128., 11937., 12594., 13422., 14088., 12243., 12918., 13764., 14448., 12549., 13242., 14106., 14808.,  7512.,  7980.,  8550.,  9024.,  9840., 10332., 10950., 11448., 13467., 14214., 15132., 15888., 13773., 14538., 15474., 16248., 14079., 14862., 15816., 16608.,  8412.,  8940.,  9570., 10104., 10980., 11532., 12210., 12768., 14997., 15834., 16842., 17688., 15303., 16158., 17184., 18048., 15609., 16482., 17526., 18408.,  9312.,  9900., 10590., 11184., 12120., 12732., 13470., 14088., 16527., 17454., 18552., 19488., 16833., 17778., 18894., 19848., 17139., 18102., 19236., 20208., 10212., 10860., 11610., 12264.,  5692.,  6120.,  6608.,  7040.,  7340.,  7988.,  8714.,  9368.,  7472.,  8132.,  8870.,  9536.,  7604.,  8276.,  9026.,  9704.,  4196.,  4648.,  5144.,  5600., 12828., 13336., 13952., 14464., 17876., 18644., 19562., 20336., 18152., 18932., 19862., 20648., 18428., 19220., 20162., 20960., 11300., 11832., 12456., 12992., 15540., 16332., 17250., 18048., 21117., 22314., 23682., 24888., 21423., 22638., 24024., 25248., 21729., 22962., 24366., 25608., 12912., 13740., 14670., 15504., 16680., 17532., 18510., 19368., 22647., 23934., 25392., 26688., 22953., 24258., 25734., 27048., 23259., 24582., 26076., 27408., 13812., 14700., 15690., 16584., 17820., 18732., 19770., 20688., 24177., 25554., 27102., 28488., 24483., 25878., 27444., 28848., 24789., 26202., 27786., 29208., 14712., 15660., 16710., 17664., 18960., 19932., 21030., 22008., 25707., 27174., 28812., 30288., 26013., 27498., 29154., 30648., 26319., 27822., 29496., 31008., 15612., 16620., 17730., 18744.,  8812.,  9480., 10208., 10880., 11300., 12308., 13394., 14408., 11432., 12452., 13550., 14576., 11564., 12596., 13706., 14744.,  6356.,  7048.,  7784.,  8480.};
  const std::array<int, 4> in_shape = {{ 3, 6, 5, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x5x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2757.,  2874.,  3162.,  3288.,  3063.,  3198.,  3504.,  3648.,  3369.,  3522.,  3846.,  4008.,  4287.,  4494.,  4872.,  5088.,  4593.,  4818.,  5214.,  5448.,  4899.,  5142.,  5556.,  5808.,  5817.,  6114.,  6582.,  6888.,  6123.,  6438.,  6924.,  7248.,  6429.,  6762.,  7266.,  7608.,  7347.,  7734.,  8292.,  8688.,  7653.,  8058.,  8634.,  9048.,  7959.,  8382.,  8976.,  9408., 11937., 12594., 13422., 14088., 12243., 12918., 13764., 14448., 12549., 13242., 14106., 14808., 13467., 14214., 15132., 15888., 13773., 14538., 15474., 16248., 14079., 14862., 15816., 16608., 14997., 15834., 16842., 17688., 15303., 16158., 17184., 18048., 15609., 16482., 17526., 18408., 16527., 17454., 18552., 19488., 16833., 17778., 18894., 19848., 17139., 18102., 19236., 20208., 21117., 22314., 23682., 24888., 21423., 22638., 24024., 25248., 21729., 22962., 24366., 25608., 22647., 23934., 25392., 26688., 22953., 24258., 25734., 27048., 23259., 24582., 26076., 27408., 24177., 25554., 27102., 28488., 24483., 25878., 27444., 28848., 24789., 26202., 27786., 29208., 25707., 27174., 28812., 30288., 26013., 27498., 29154., 30648., 26319., 27822., 29496., 31008.};
  const std::array<int, 4> in_shape = {{ 3, 6, 5, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x5x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1628.,  1656.,  1684.,  1712.,  1952.,  1984.,  2016.,  2048.,  2584.,  2632.,  2680.,  2728.,  3070.,  3124.,  3178.,  3232.,  3124.,  3184.,  3244.,  3304.,  3658.,  3724.,  3790.,  3856.,  3664.,  3736.,  3808.,  3880.,  4246.,  4324.,  4402.,  4480.,  2388.,  2440.,  2492.,  2544.,  2776.,  2832.,  2888.,  2944.,  3648.,  3720.,  3792.,  3864.,  4182.,  4260.,  4338.,  4416.,  5397.,  5514.,  5631.,  5748.,  6198.,  6324.,  6450.,  6576.,  5991.,  6126.,  6261.,  6396.,  6864.,  7008.,  7152.,  7296.,  6585.,  6738.,  6891.,  7044.,  7530.,  7692.,  7854.,  8016.,  4116.,  4224.,  4332.,  4440.,  4746.,  4860.,  4974.,  5088.,  5868.,  6000.,  6132.,  6264.,  6642.,  6780.,  6918.,  7056.,  8367.,  8574.,  8781.,  8988.,  9528.,  9744.,  9960., 10176.,  8961.,  9186.,  9411.,  9636., 10194., 10428., 10662., 10896.,  9555.,  9798., 10041., 10284., 10860., 11112., 11364., 11616.,  5856.,  6024.,  6192.,  6360.,  6726.,  6900.,  7074.,  7248.,  8088.,  8280.,  8472.,  8664.,  9102.,  9300.,  9498.,  9696., 11337., 11634., 11931., 12228., 12858., 13164., 13470., 13776., 11931., 12246., 12561., 12876., 13524., 13848., 14172., 14496., 12525., 12858., 13191., 13524., 14190., 14532., 14874., 15216.,  7596.,  7824.,  8052.,  8280.,  8706.,  8940.,  9174.,  9408., 10308., 10560., 10812., 11064., 11562., 11820., 12078., 12336., 14307., 14694., 15081., 15468., 16188., 16584., 16980., 17376., 14901., 15306., 15711., 16116., 16854., 17268., 17682., 18096., 15495., 15918., 16341., 16764., 17520., 17952., 18384., 18816.,  9336.,  9624.,  9912., 10200., 10686., 10980., 11274., 11568.,  4956.,  5144.,  5332.,  5520.,  5824.,  6016.,  6208.,  6400.,  6472.,  6760.,  7048.,  7336.,  7774.,  8068.,  8362.,  8656.,  6724.,  7024.,  7324.,  7624.,  8074.,  8380.,  8686.,  8992.,  6976.,  7288.,  7600.,  7912.,  8374.,  8692.,  9010.,  9328.,  3860.,  4072.,  4284.,  4496.,  4792.,  5008.,  5224.,  5440., 13388., 13656., 13924., 14192., 14672., 14944., 15216., 15488., 18784., 19192., 19600., 20008., 20710., 21124., 21538., 21952., 19324., 19744., 20164., 20584., 21298., 21724., 22150., 22576., 19864., 20296., 20728., 21160., 21886., 22324., 22762., 23200., 12228., 12520., 12812., 13104., 13576., 13872., 14168., 14464., 16968., 17400., 17832., 18264., 18942., 19380., 19818., 20256., 23217., 23874., 24531., 25188., 26178., 26844., 27510., 28176., 23811., 24486., 25161., 25836., 26844., 27528., 28212., 28896., 24405., 25098., 25791., 26484., 27510., 28212., 28914., 29616., 14556., 15024., 15492., 15960., 16626., 17100., 17574., 18048., 19188., 19680., 20172., 20664., 21402., 21900., 22398., 22896., 26187., 26934., 27681., 28428., 29508., 30264., 31020., 31776., 26781., 27546., 28311., 29076., 30174., 30948., 31722., 32496., 27375., 28158., 28941., 29724., 30840., 31632., 32424., 33216., 16296., 16824., 17352., 17880., 18606., 19140., 19674., 20208., 21408., 21960., 22512., 23064., 23862., 24420., 24978., 25536., 29157., 29994., 30831., 31668., 32838., 33684., 34530., 35376., 29751., 30606., 31461., 32316., 33504., 34368., 35232., 36096., 30345., 31218., 32091., 32964., 34170., 35052., 35934., 36816., 18036., 18624., 19212., 19800., 20586., 21180., 21774., 22368., 23628., 24240., 24852., 25464., 26322., 26940., 27558., 28176., 32127., 33054., 33981., 34908., 36168., 37104., 38040., 38976., 32721., 33666., 34611., 35556., 36834., 37788., 38742., 39696., 33315., 34278., 35241., 36204., 37500., 38472., 39444., 40416., 19776., 20424., 21072., 21720., 22566., 23220., 23874., 24528., 10956., 11384., 11812., 12240., 12784., 13216., 13648., 14080., 14032., 14680., 15328., 15976., 16774., 17428., 18082., 18736., 14284., 14944., 15604., 16264., 17074., 17740., 18406., 19072., 14536., 15208., 15880., 16552., 17374., 18052., 18730., 19408.,  7940.,  8392.,  8844.,  9296.,  9832., 10288., 10744., 11200., 25148., 25656., 26164., 26672., 27392., 27904., 28416., 28928., 34984., 35752., 36520., 37288., 38350., 39124., 39898., 40672., 35524., 36304., 37084., 37864., 38938., 39724., 40510., 41296., 36064., 36856., 37648., 38440., 39526., 40324., 41122., 41920., 22068., 22600., 23132., 23664., 24376., 24912., 25448., 25984., 30288., 31080., 31872., 32664., 33702., 34500., 35298., 36096., 41037., 42234., 43431., 44628., 46158., 47364., 48570., 49776., 41631., 42846., 44061., 45276., 46824., 48048., 49272., 50496., 42225., 43458., 44691., 45924., 47490., 48732., 49974., 51216., 24996., 25824., 26652., 27480., 28506., 29340., 30174., 31008., 32508., 33360., 34212., 35064., 36162., 37020., 37878., 38736., 44007., 45294., 46581., 47868., 49488., 50784., 52080., 53376., 44601., 45906., 47211., 48516., 50154., 51468., 52782., 54096., 45195., 46518., 47841., 49164., 50820., 52152., 53484., 54816., 26736., 27624., 28512., 29400., 30486., 31380., 32274., 33168., 34728., 35640., 36552., 37464., 38622., 39540., 40458., 41376., 46977., 48354., 49731., 51108., 52818., 54204., 55590., 56976., 47571., 48966., 50361., 51756., 53484., 54888., 56292., 57696., 48165., 49578., 50991., 52404., 54150., 55572., 56994., 58416., 28476., 29424., 30372., 31320., 32466., 33420., 34374., 35328., 36948., 37920., 38892., 39864., 41082., 42060., 43038., 44016., 49947., 51414., 52881., 54348., 56148., 57624., 59100., 60576., 50541., 52026., 53511., 54996., 56814., 58308., 59802., 61296., 51135., 52638., 54141., 55644., 57480., 58992., 60504., 62016., 30216., 31224., 32232., 33240., 34446., 35460., 36474., 37488., 16956., 17624., 18292., 18960., 19744., 20416., 21088., 21760., 21592., 22600., 23608., 24616., 25774., 26788., 27802., 28816., 21844., 22864., 23884., 24904., 26074., 27100., 28126., 29152., 22096., 23128., 24160., 25192., 26374., 27412., 28450., 29488., 12020., 12712., 13404., 14096., 14872., 15568., 16264., 16960.};
  const std::array<int, 4> in_shape = {{ 3, 6, 5, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x5x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5397.,  5514.,  5631.,  5748.,  6198.,  6324.,  6450.,  6576.,  5991.,  6126.,  6261.,  6396.,  6864.,  7008.,  7152.,  7296.,  6585.,  6738.,  6891.,  7044.,  7530.,  7692.,  7854.,  8016.,  8367.,  8574.,  8781.,  8988.,  9528.,  9744.,  9960., 10176.,  8961.,  9186.,  9411.,  9636., 10194., 10428., 10662., 10896.,  9555.,  9798., 10041., 10284., 10860., 11112., 11364., 11616., 11337., 11634., 11931., 12228., 12858., 13164., 13470., 13776., 11931., 12246., 12561., 12876., 13524., 13848., 14172., 14496., 12525., 12858., 13191., 13524., 14190., 14532., 14874., 15216., 14307., 14694., 15081., 15468., 16188., 16584., 16980., 17376., 14901., 15306., 15711., 16116., 16854., 17268., 17682., 18096., 15495., 15918., 16341., 16764., 17520., 17952., 18384., 18816., 23217., 23874., 24531., 25188., 26178., 26844., 27510., 28176., 23811., 24486., 25161., 25836., 26844., 27528., 28212., 28896., 24405., 25098., 25791., 26484., 27510., 28212., 28914., 29616., 26187., 26934., 27681., 28428., 29508., 30264., 31020., 31776., 26781., 27546., 28311., 29076., 30174., 30948., 31722., 32496., 27375., 28158., 28941., 29724., 30840., 31632., 32424., 33216., 29157., 29994., 30831., 31668., 32838., 33684., 34530., 35376., 29751., 30606., 31461., 32316., 33504., 34368., 35232., 36096., 30345., 31218., 32091., 32964., 34170., 35052., 35934., 36816., 32127., 33054., 33981., 34908., 36168., 37104., 38040., 38976., 32721., 33666., 34611., 35556., 36834., 37788., 38742., 39696., 33315., 34278., 35241., 36204., 37500., 38472., 39444., 40416., 41037., 42234., 43431., 44628., 46158., 47364., 48570., 49776., 41631., 42846., 44061., 45276., 46824., 48048., 49272., 50496., 42225., 43458., 44691., 45924., 47490., 48732., 49974., 51216., 44007., 45294., 46581., 47868., 49488., 50784., 52080., 53376., 44601., 45906., 47211., 48516., 50154., 51468., 52782., 54096., 45195., 46518., 47841., 49164., 50820., 52152., 53484., 54816., 46977., 48354., 49731., 51108., 52818., 54204., 55590., 56976., 47571., 48966., 50361., 51756., 53484., 54888., 56292., 57696., 48165., 49578., 50991., 52404., 54150., 55572., 56994., 58416., 49947., 51414., 52881., 54348., 56148., 57624., 59100., 60576., 50541., 52026., 53511., 54996., 56814., 58308., 59802., 61296., 51135., 52638., 54141., 55644., 57480., 58992., 60504., 62016.};
  const std::array<int, 4> in_shape = {{ 3, 6, 5, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x5x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1556.,  1712.,  1876.,  2048.,  2494.,  2728.,  2974.,  3232.,  3046.,  3304.,  3574.,  3856.,  3598.,  3880.,  4174.,  4480.,  2356.,  2544.,  2740.,  2944.,  3606.,  3864.,  4134.,  4416.,  5361.,  5748.,  6153.,  6576.,  5973.,  6396.,  6837.,  7296.,  6585.,  7044.,  7521.,  8016.,  4134.,  4440.,  4758.,  5088.,  5886.,  6264.,  6654.,  7056.,  8421.,  8988.,  9573., 10176.,  9033.,  9636., 10257., 10896.,  9645., 10284., 10941., 11616.,  5934.,  6360.,  6798.,  7248.,  8166.,  8664.,  9174.,  9696., 11481., 12228., 12993., 13776., 12093., 12876., 13677., 14496., 12705., 13524., 14361., 15216.,  7734.,  8280.,  8838.,  9408., 10446., 11064., 11694., 12336., 14541., 15468., 16413., 17376., 15153., 16116., 17097., 18096., 15765., 16764., 17781., 18816.,  9534., 10200., 10878., 11568.,  5092.,  5520.,  5956.,  6400.,  6694.,  7336.,  7990.,  8656.,  6958.,  7624.,  8302.,  8992.,  7222.,  7912.,  8614.,  9328.,  4036.,  4496.,  4964.,  5440., 13556., 14192., 14836., 15488., 19054., 20008., 20974., 21952., 19606., 20584., 21574., 22576., 20158., 21160., 22174., 23200., 12436., 13104., 13780., 14464., 17286., 18264., 19254., 20256., 23721., 25188., 26673., 28176., 24333., 25836., 27357., 28896., 24945., 26484., 28041., 29616., 14934., 15960., 16998., 18048., 19566., 20664., 21774., 22896., 26781., 28428., 30093., 31776., 27393., 29076., 30777., 32496., 28005., 29724., 31461., 33216., 16734., 17880., 19038., 20208., 21846., 23064., 24294., 25536., 29841., 31668., 33513., 35376., 30453., 32316., 34197., 36096., 31065., 32964., 34881., 36816., 18534., 19800., 21078., 22368., 24126., 25464., 26814., 28176., 32901., 34908., 36933., 38976., 33513., 35556., 37617., 39696., 34125., 36204., 38301., 40416., 20334., 21720., 23118., 24528., 11332., 12240., 13156., 14080., 14614., 15976., 17350., 18736., 14878., 16264., 17662., 19072., 15142., 16552., 17974., 19408.,  8356.,  9296., 10244., 11200., 25556., 26672., 27796., 28928., 35614., 37288., 38974., 40672., 36166., 37864., 39574., 41296., 36718., 38440., 40174., 41920., 22516., 23664., 24820., 25984., 30966., 32664., 34374., 36096., 42081., 44628., 47193., 49776., 42693., 45276., 47877., 50496., 43305., 45924., 48561., 51216., 25734., 27480., 29238., 31008., 33246., 35064., 36894., 38736., 45141., 47868., 50613., 53376., 45753., 48516., 51297., 54096., 46365., 49164., 51981., 54816., 27534., 29400., 31278., 33168., 35526., 37464., 39414., 41376., 48201., 51108., 54033., 56976., 48813., 51756., 54717., 57696., 49425., 52404., 55401., 58416., 29334., 31320., 33318., 35328., 37806., 39864., 41934., 44016., 51261., 54348., 57453., 60576., 51873., 54996., 58137., 61296., 52485., 55644., 58821., 62016., 31134., 33240., 35358., 37488., 17572., 18960., 20356., 21760., 22534., 24616., 26710., 28816., 22798., 24904., 27022., 29152., 23062., 25192., 27334., 29488., 12676., 14096., 15524., 16960.};
  const std::array<int, 4> in_shape = {{ 3, 6, 5, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x5x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5361.,  5748.,  6153.,  6576.,  5973.,  6396.,  6837.,  7296.,  6585.,  7044.,  7521.,  8016.,  8421.,  8988.,  9573., 10176.,  9033.,  9636., 10257., 10896.,  9645., 10284., 10941., 11616., 11481., 12228., 12993., 13776., 12093., 12876., 13677., 14496., 12705., 13524., 14361., 15216., 14541., 15468., 16413., 17376., 15153., 16116., 17097., 18096., 15765., 16764., 17781., 18816., 23721., 25188., 26673., 28176., 24333., 25836., 27357., 28896., 24945., 26484., 28041., 29616., 26781., 28428., 30093., 31776., 27393., 29076., 30777., 32496., 28005., 29724., 31461., 33216., 29841., 31668., 33513., 35376., 30453., 32316., 34197., 36096., 31065., 32964., 34881., 36816., 32901., 34908., 36933., 38976., 33513., 35556., 37617., 39696., 34125., 36204., 38301., 40416., 42081., 44628., 47193., 49776., 42693., 45276., 47877., 50496., 43305., 45924., 48561., 51216., 45141., 47868., 50613., 53376., 45753., 48516., 51297., 54096., 46365., 49164., 51981., 54816., 48201., 51108., 54033., 56976., 48813., 51756., 54717., 57696., 49425., 52404., 55401., 58416., 51261., 54348., 57453., 60576., 51873., 54996., 58137., 61296., 52485., 55644., 58821., 62016.};
  const std::array<int, 4> in_shape = {{ 3, 6, 5, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x5x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3060.,  3112.,  3368.,  3424.,  3692.,  3752.,  4032.,  4096.,  4898.,  4988.,  5360.,  5456.,  5846.,  5948.,  6356.,  6464.,  5978.,  6092.,  6488.,  6608.,  7022.,  7148.,  7580.,  7712.,  7058.,  7196.,  7616.,  7760.,  8198.,  8348.,  8804.,  8960.,  4612.,  4712.,  4984.,  5088.,  5372.,  5480.,  5776.,  5888.,  7074.,  7212.,  7584.,  7728.,  8118.,  8268.,  8676.,  8832., 10497., 10722., 11262., 11496., 12063., 12306., 12900., 13152., 11685., 11946., 12522., 12792., 13395., 13674., 14304., 14592., 12873., 13170., 13782., 14088., 14727., 15042., 15708., 16032.,  8058.,  8268.,  8664.,  8880.,  9294.,  9516.,  9948., 10176., 11514., 11772., 12264., 12528., 13038., 13308., 13836., 14112., 16437., 16842., 17562., 17976., 18723., 19146., 19920., 20352., 17625., 18066., 18822., 19272., 20055., 20514., 21324., 21792., 18813., 19290., 20082., 20568., 21387., 21882., 22728., 23232., 11538., 11868., 12384., 12720., 13254., 13596., 14148., 14496., 15954., 16332., 16944., 17328., 17958., 18348., 18996., 19392., 22377., 22962., 23862., 24456., 25383., 25986., 26940., 27552., 23565., 24186., 25122., 25752., 26715., 27354., 28344., 28992., 24753., 25410., 26382., 27048., 28047., 28722., 29748., 30432., 15018., 15468., 16104., 16560., 17214., 17676., 18348., 18816., 20394., 20892., 21624., 22128., 22878., 23388., 24156., 24672., 28317., 29082., 30162., 30936., 32043., 32826., 33960., 34752., 29505., 30306., 31422., 32232., 33375., 34194., 35364., 36192., 30693., 31530., 32682., 33528., 34707., 35562., 36768., 37632., 18498., 19068., 19824., 20400., 21174., 21756., 22548., 23136.,  9812., 10184., 10664., 11040., 11532., 11912., 12416., 12800., 12818., 13388., 14096., 14672., 15398., 15980., 16724., 17312., 13322., 13916., 14648., 15248., 15998., 16604., 17372., 17984., 13826., 14444., 15200., 15824., 16598., 17228., 18020., 18656.,  7652.,  8072.,  8568.,  8992.,  9500.,  9928., 10448., 10880., 10964., 11240., 11720., 12000., 12492., 12776., 13280., 13568., 10162., 10460., 11040., 11344., 11942., 12252., 12868., 13184.,  7018.,  7212.,  7688.,  7888.,  8382.,  8588.,  9100.,  9312.,  4898.,  4988.,  5360.,  5456.,  5846.,  5948.,  6356.,  6464.,  3300.,  3368.,  3608.,  3680.,  3932.,  4008.,  4272.,  4352.,  8626.,  8972.,  9552.,  9904., 10502., 10860., 11476., 11840.,  9401.,  9810., 10534., 10952., 11703., 12130., 12908., 13344.,  9437.,  9754., 10386., 10712., 11371., 11706., 12392., 12736., 10497., 10722., 11262., 11496., 12063., 12306., 12900., 13152.,  6666.,  6828.,  7176.,  7344.,  7710.,  7884.,  8268.,  8448.,  9738.,  9948., 10392., 10608., 11070., 11292., 11772., 12000., 14061., 14394., 15042., 15384., 16059., 16410., 17112., 17472., 15249., 15618., 16302., 16680., 17391., 17778., 18516., 18912., 16437., 16842., 17562., 17976., 18723., 19146., 19920., 20352., 10146., 10428., 10896., 11184., 11670., 11964., 12468., 12768., 14178., 14508., 15072., 15408., 15990., 16332., 16932., 17280., 20001., 20514., 21342., 21864., 22719., 23250., 24132., 24672., 21189., 21738., 22602., 23160., 24051., 24618., 25536., 26112., 22377., 22962., 23862., 24456., 25383., 25986., 26940., 27552., 13626., 14028., 14616., 15024., 15630., 16044., 16668., 17088., 18618., 19068., 19752., 20208., 20910., 21372., 22092., 22560., 25941., 26634., 27642., 28344., 29379., 30090., 31152., 31872., 27129., 27858., 28902., 29640., 30711., 31458., 32556., 33312., 28317., 29082., 30162., 30936., 32043., 32826., 33960., 34752., 17106., 17628., 18336., 18864., 19590., 20124., 20868., 21408.,  9012.,  9352.,  9800., 10144., 10604., 10952., 11424., 11776., 11810., 12332., 12992., 13520., 14198., 14732., 15428., 15968., 12314., 12860., 13544., 14096., 14798., 15356., 16076., 16640., 12818., 13388., 14096., 14672., 15398., 15980., 16724., 17312.,  7108.,  7496.,  7960.,  8352.,  8828.,  9224.,  9712., 10112.,  9396.,  9640., 10088., 10336., 10796., 11048., 11520., 11776., 13250., 13628., 14288., 14672., 15350., 15740., 16436., 16832., 14330., 14732., 15416., 15824., 16526., 16940., 17660., 18080., 10162., 10460., 11040., 11344., 11942., 12252., 12868., 13184.,  5188.,  5352.,  5688.,  5856.,  6204.,  6376.,  6736.,  6912.,  6850.,  7148.,  7680.,  7984.,  8534.,  8844.,  9412.,  9728.,  9201.,  9666., 10446., 10920., 11727., 12210., 13044., 13536., 10389., 10890., 11706., 12216., 13059., 13578., 14448., 14976.,  9401.,  9810., 10534., 10952., 11703., 12130., 12908., 13344.,  5402.,  5644.,  6072.,  6320.,  6766.,  7020.,  7484.,  7744.,  7962.,  8124.,  8520.,  8688.,  9102.,  9276.,  9708.,  9888., 11685., 11946., 12522., 12792., 13395., 13674., 14304., 14592., 12873., 13170., 13782., 14088., 14727., 15042., 15708., 16032., 14061., 14394., 15042., 15384., 16059., 16410., 17112., 17472.,  8754.,  8988.,  9408.,  9648., 10086., 10332., 10788., 11040., 12402., 12684., 13200., 13488., 14022., 14316., 14868., 15168., 17625., 18066., 18822., 19272., 20055., 20514., 21324., 21792., 18813., 19290., 20082., 20568., 21387., 21882., 22728., 23232., 20001., 20514., 21342., 21864., 22719., 23250., 24132., 24672., 12234., 12588., 13128., 13488., 14046., 14412., 14988., 15360., 16842., 17244., 17880., 18288., 18942., 19356., 20028., 20448., 23565., 24186., 25122., 25752., 26715., 27354., 28344., 28992., 24753., 25410., 26382., 27048., 28047., 28722., 29748., 30432., 25941., 26634., 27642., 28344., 29379., 30090., 31152., 31872., 15714., 16188., 16848., 17328., 18006., 18492., 19188., 19680.,  8212.,  8520.,  8936.,  9248.,  9676.,  9992., 10432., 10752., 10802., 11276., 11888., 12368., 12998., 13484., 14132., 14624., 11306., 11804., 12440., 12944., 13598., 14108., 14780., 15296., 11810., 12332., 12992., 13520., 14198., 14732., 15428., 15968.,  6564.,  6920.,  7352.,  7712.,  8156.,  8520.,  8976.,  9344.};
  const std::array<int, 4> in_shape = {{ 3, 6, 5, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x5x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10497., 10722., 11262., 11496., 12063., 12306., 12900., 13152., 11685., 11946., 12522., 12792., 13395., 13674., 14304., 14592., 12873., 13170., 13782., 14088., 14727., 15042., 15708., 16032., 16437., 16842., 17562., 17976., 18723., 19146., 19920., 20352., 17625., 18066., 18822., 19272., 20055., 20514., 21324., 21792., 18813., 19290., 20082., 20568., 21387., 21882., 22728., 23232., 22377., 22962., 23862., 24456., 25383., 25986., 26940., 27552., 23565., 24186., 25122., 25752., 26715., 27354., 28344., 28992., 24753., 25410., 26382., 27048., 28047., 28722., 29748., 30432., 28317., 29082., 30162., 30936., 32043., 32826., 33960., 34752., 29505., 30306., 31422., 32232., 33375., 34194., 35364., 36192., 30693., 31530., 32682., 33528., 34707., 35562., 36768., 37632.,  9401.,  9810., 10534., 10952., 11703., 12130., 12908., 13344.,  9437.,  9754., 10386., 10712., 11371., 11706., 12392., 12736., 10497., 10722., 11262., 11496., 12063., 12306., 12900., 13152., 14061., 14394., 15042., 15384., 16059., 16410., 17112., 17472., 15249., 15618., 16302., 16680., 17391., 17778., 18516., 18912., 16437., 16842., 17562., 17976., 18723., 19146., 19920., 20352., 20001., 20514., 21342., 21864., 22719., 23250., 24132., 24672., 21189., 21738., 22602., 23160., 24051., 24618., 25536., 26112., 22377., 22962., 23862., 24456., 25383., 25986., 26940., 27552., 25941., 26634., 27642., 28344., 29379., 30090., 31152., 31872., 27129., 27858., 28902., 29640., 30711., 31458., 32556., 33312., 28317., 29082., 30162., 30936., 32043., 32826., 33960., 34752.,  9201.,  9666., 10446., 10920., 11727., 12210., 13044., 13536., 10389., 10890., 11706., 12216., 13059., 13578., 14448., 14976.,  9401.,  9810., 10534., 10952., 11703., 12130., 12908., 13344., 11685., 11946., 12522., 12792., 13395., 13674., 14304., 14592., 12873., 13170., 13782., 14088., 14727., 15042., 15708., 16032., 14061., 14394., 15042., 15384., 16059., 16410., 17112., 17472., 17625., 18066., 18822., 19272., 20055., 20514., 21324., 21792., 18813., 19290., 20082., 20568., 21387., 21882., 22728., 23232., 20001., 20514., 21342., 21864., 22719., 23250., 24132., 24672., 23565., 24186., 25122., 25752., 26715., 27354., 28344., 28992., 24753., 25410., 26382., 27048., 28047., 28722., 29748., 30432., 25941., 26634., 27642., 28344., 29379., 30090., 31152., 31872.};
  const std::array<int, 4> in_shape = {{ 3, 6, 5, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x5x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2868.,  2920.,  2972.,  3024.,  3352.,  3408.,  3464.,  3520.,  3868.,  3928.,  3988.,  4048.,  4416.,  4480.,  4544.,  4608.,  5994.,  6084.,  6174.,  6264.,  6784.,  6880.,  6976.,  7072.,  7622.,  7724.,  7826.,  7928.,  8508.,  8616.,  8724.,  8832.,  7618.,  7732.,  7846.,  7960.,  8504.,  8624.,  8744.,  8864.,  9438.,  9564.,  9690.,  9816., 10420., 10552., 10684., 10816.,  9242.,  9380.,  9518.,  9656., 10224., 10368., 10512., 10656., 11254., 11404., 11554., 11704., 12332., 12488., 12644., 12800.,  9124.,  9224.,  9324.,  9424.,  9864.,  9968., 10072., 10176., 10636., 10744., 10852., 10960., 11440., 11552., 11664., 11776.,  8250.,  8388.,  8526.,  8664.,  9136.,  9280.,  9424.,  9568., 10070., 10220., 10370., 10520., 11052., 11208., 11364., 11520., 14497., 14722., 14947., 15172., 15890., 16124., 16358., 16592., 17355., 17598., 17841., 18084., 18892., 19144., 19396., 19648., 16325., 16586., 16847., 17108., 17862., 18132., 18402., 18672., 19471., 19750., 20029., 20308., 21152., 21440., 21728., 22016., 18153., 18450., 18747., 19044., 19834., 20140., 20446., 20752., 21587., 21902., 22217., 22532., 23412., 23736., 24060., 24384., 15906., 16116., 16326., 16536., 17112., 17328., 17544., 17760., 18366., 18588., 18810., 19032., 19668., 19896., 20124., 20352., 14450., 14708., 14966., 15224., 15816., 16080., 16344., 16608., 17230., 17500., 17770., 18040., 18692., 18968., 19244., 19520., 23637., 24042., 24447., 24852., 25750., 26164., 26578., 26992., 27935., 28358., 28781., 29204., 30192., 30624., 31056., 31488., 25465., 25906., 26347., 26788., 27722., 28172., 28622., 29072., 30051., 30510., 30969., 31428., 32452., 32920., 33388., 33856., 27293., 27770., 28247., 28724., 29694., 30180., 30666., 31152., 32167., 32662., 33157., 33652., 34712., 35216., 35720., 36224., 22746., 23076., 23406., 23736., 24432., 24768., 25104., 25440., 26166., 26508., 26850., 27192., 27948., 28296., 28644., 28992., 20650., 21028., 21406., 21784., 22496., 22880., 23264., 23648., 24390., 24780., 25170., 25560., 26332., 26728., 27124., 27520., 32777., 33362., 33947., 34532., 35610., 36204., 36798., 37392., 38515., 39118., 39721., 40324., 41492., 42104., 42716., 43328., 34605., 35226., 35847., 36468., 37582., 38212., 38842., 39472., 40631., 41270., 41909., 42548., 43752., 44400., 45048., 45696., 36433., 37090., 37747., 38404., 39554., 40220., 40886., 41552., 42747., 43422., 44097., 44772., 46012., 46696., 47380., 48064., 29586., 30036., 30486., 30936., 31752., 32208., 32664., 33120., 33966., 34428., 34890., 35352., 36228., 36696., 37164., 37632., 26850., 27348., 27846., 28344., 29176., 29680., 30184., 30688., 31550., 32060., 32570., 33080., 33972., 34488., 35004., 35520., 41917., 42682., 43447., 44212., 45470., 46244., 47018., 47792., 49095., 49878., 50661., 51444., 52792., 53584., 54376., 55168., 43745., 44546., 45347., 46148., 47442., 48252., 49062., 49872., 51211., 52030., 52849., 53668., 55052., 55880., 56708., 57536., 45573., 46410., 47247., 48084., 49414., 50260., 51106., 51952., 53327., 54182., 55037., 55892., 57312., 58176., 59040., 59904., 36426., 36996., 37566., 38136., 39072., 39648., 40224., 40800., 41766., 42348., 42930., 43512., 44508., 45096., 45684., 46272., 19252., 19624., 19996., 20368., 20952., 21328., 21704., 22080., 22684., 23064., 23444., 23824., 24448., 24832., 25216., 25600., 25066., 25636., 26206., 26776., 27616., 28192., 28768., 29344., 30214., 30796., 31378., 31960., 32860., 33448., 34036., 34624., 26050., 26644., 27238., 27832., 28696., 29296., 29896., 30496., 31390., 31996., 32602., 33208., 34132., 34744., 35356., 35968., 27034., 27652., 28270., 28888., 29776., 30400., 31024., 31648., 32566., 33196., 33826., 34456., 35404., 36040., 36676., 37312., 14884., 15304., 15724., 16144., 16712., 17136., 17560., 17984., 18572., 19000., 19428., 19856., 20464., 20896., 21328., 21760., 19476., 19752., 20028., 20304., 20856., 21136., 21416., 21696., 22268., 22552., 22836., 23120., 23712., 24000., 24288., 24576., 17338., 17636., 17934., 18232., 18960., 19264., 19568., 19872., 20630., 20940., 21250., 21560., 22348., 22664., 22980., 23296., 10642., 10836., 11030., 11224., 11848., 12048., 12248., 12448., 13102., 13308., 13514., 13720., 14404., 14616., 14828., 15040.,  5994.,  6084.,  6174.,  6264.,  6784.,  6880.,  6976.,  7072.,  7622.,  7724.,  7826.,  7928.,  8508.,  8616.,  8724.,  8832.,  6532.,  6600.,  6668.,  6736.,  7144.,  7216.,  7288.,  7360.,  7788.,  7864.,  7940.,  8016.,  8464.,  8544.,  8624.,  8704., 12170., 12516., 12862., 13208., 13888., 14240., 14592., 14944., 15654., 16012., 16370., 16728., 17468., 17832., 18196., 18560., 13145., 13554., 13963., 14372., 15274., 15692., 16110., 16528., 17475., 17902., 18329., 18756., 19748., 20184., 20620., 21056., 12797., 13114., 13431., 13748., 14558., 14884., 15210., 15536., 16391., 16726., 17061., 17396., 18296., 18640., 18984., 19328., 14497., 14722., 14947., 15172., 15890., 16124., 16358., 16592., 17355., 17598., 17841., 18084., 18892., 19144., 19396., 19648., 13170., 13332., 13494., 13656., 14184., 14352., 14520., 14688., 15246., 15420., 15594., 15768., 16356., 16536., 16716., 16896., 11970., 12180., 12390., 12600., 13144., 13360., 13576., 13792., 14366., 14588., 14810., 15032., 15636., 15864., 16092., 16320., 19981., 20314., 20647., 20980., 21806., 22148., 22490., 22832., 23703., 24054., 24405., 24756., 25672., 26032., 26392., 26752., 21809., 22178., 22547., 22916., 23778., 24156., 24534., 24912., 25819., 26206., 26593., 26980., 27932., 28328., 28724., 29120., 23637., 24042., 24447., 24852., 25750., 26164., 26578., 26992., 27935., 28358., 28781., 29204., 30192., 30624., 31056., 31488., 20010., 20292., 20574., 20856., 21504., 21792., 22080., 22368., 23046., 23340., 23634., 23928., 24636., 24936., 25236., 25536., 18170., 18500., 18830., 19160., 19824., 20160., 20496., 20832., 21526., 21868., 22210., 22552., 23276., 23624., 23972., 24320., 29121., 29634., 30147., 30660., 31666., 32188., 32710., 33232., 34283., 34814., 35345., 35876., 36972., 37512., 38052., 38592., 30949., 31498., 32047., 32596., 33638., 34196., 34754., 35312., 36399., 36966., 37533., 38100., 39232., 39808., 40384., 40960., 32777., 33362., 33947., 34532., 35610., 36204., 36798., 37392., 38515., 39118., 39721., 40324., 41492., 42104., 42716., 43328., 26850., 27252., 27654., 28056., 28824., 29232., 29640., 30048., 30846., 31260., 31674., 32088., 32916., 33336., 33756., 34176., 24370., 24820., 25270., 25720., 26504., 26960., 27416., 27872., 28686., 29148., 29610., 30072., 30916., 31384., 31852., 32320., 38261., 38954., 39647., 40340., 41526., 42228., 42930., 43632., 44863., 45574., 46285., 46996., 48272., 48992., 49712., 50432., 40089., 40818., 41547., 42276., 43498., 44236., 44974., 45712., 46979., 47726., 48473., 49220., 50532., 51288., 52044., 52800., 41917., 42682., 43447., 44212., 45470., 46244., 47018., 47792., 49095., 49878., 50661., 51444., 52792., 53584., 54376., 55168., 33690., 34212., 34734., 35256., 36144., 36672., 37200., 37728., 38646., 39180., 39714., 40248., 41196., 41736., 42276., 42816., 17684., 18024., 18364., 18704., 19256., 19600., 19944., 20288., 20860., 21208., 21556., 21904., 22496., 22848., 23200., 23552., 23098., 23620., 24142., 24664., 25456., 25984., 26512., 27040., 27862., 28396., 28930., 29464., 30316., 30856., 31396., 31936., 24082., 24628., 25174., 25720., 26536., 27088., 27640., 28192., 29038., 29596., 30154., 30712., 31588., 32152., 32716., 33280., 25066., 25636., 26206., 26776., 27616., 28192., 28768., 29344., 30214., 30796., 31378., 31960., 32860., 33448., 34036., 34624., 13828., 14216., 14604., 14992., 15528., 15920., 16312., 16704., 17260., 17656., 18052., 18448., 19024., 19424., 19824., 20224., 17396., 17640., 17884., 18128., 18648., 18896., 19144., 19392., 19932., 20184., 20436., 20688., 21248., 21504., 21760., 22016., 24458., 24836., 25214., 25592., 26400., 26784., 27168., 27552., 28390., 28780., 29170., 29560., 30428., 30824., 31220., 31616., 26082., 26484., 26886., 27288., 28120., 28528., 28936., 29344., 30206., 30620., 31034., 31448., 32340., 32760., 33180., 33600., 17338., 17636., 17934., 18232., 18960., 19264., 19568., 19872., 20630., 20940., 21250., 21560., 22348., 22664., 22980., 23296., 10212., 10376., 10540., 10704., 11208., 11376., 11544., 11712., 12236., 12408., 12580., 12752., 13296., 13472., 13648., 13824.,  9690.,  9988., 10286., 10584., 11216., 11520., 11824., 12128., 12790., 13100., 13410., 13720., 14412., 14728., 15044., 15360., 13713., 14178., 14643., 15108., 16066., 16540., 17014., 17488., 18491., 18974., 19457., 19940., 20988., 21480., 21972., 22464., 15541., 16042., 16543., 17044., 18038., 18548., 19058., 19568., 20607., 21126., 21645., 22164., 23248., 23776., 24304., 24832., 13145., 13554., 13963., 14372., 15274., 15692., 16110., 16528., 17475., 17902., 18329., 18756., 19748., 20184., 20620., 21056., 10562., 10804., 11046., 11288., 11896., 12144., 12392., 12640., 13278., 13532., 13786., 14040., 14708., 14968., 15228., 15488.,  9490.,  9652.,  9814.,  9976., 10472., 10640., 10808., 10976., 11502., 11676., 11850., 12024., 12580., 12760., 12940., 13120., 16325., 16586., 16847., 17108., 17862., 18132., 18402., 18672., 19471., 19750., 20029., 20308., 21152., 21440., 21728., 22016., 18153., 18450., 18747., 19044., 19834., 20140., 20446., 20752., 21587., 21902., 22217., 22532., 23412., 23736., 24060., 24384., 19981., 20314., 20647., 20980., 21806., 22148., 22490., 22832., 23703., 24054., 24405., 24756., 25672., 26032., 26392., 26752., 17274., 17508., 17742., 17976., 18576., 18816., 19056., 19296., 19926., 20172., 20418., 20664., 21324., 21576., 21828., 22080., 15690., 15972., 16254., 16536., 17152., 17440., 17728., 18016., 18662., 18956., 19250., 19544., 20220., 20520., 20820., 21120., 25465., 25906., 26347., 26788., 27722., 28172., 28622., 29072., 30051., 30510., 30969., 31428., 32452., 32920., 33388., 33856., 27293., 27770., 28247., 28724., 29694., 30180., 30666., 31152., 32167., 32662., 33157., 33652., 34712., 35216., 35720., 36224., 29121., 29634., 30147., 30660., 31666., 32188., 32710., 33232., 34283., 34814., 35345., 35876., 36972., 37512., 38052., 38592., 24114., 24468., 24822., 25176., 25896., 26256., 26616., 26976., 27726., 28092., 28458., 28824., 29604., 29976., 30348., 30720., 21890., 22292., 22694., 23096., 23832., 24240., 24648., 25056., 25822., 26236., 26650., 27064., 27860., 28280., 28700., 29120., 34605., 35226., 35847., 36468., 37582., 38212., 38842., 39472., 40631., 41270., 41909., 42548., 43752., 44400., 45048., 45696., 36433., 37090., 37747., 38404., 39554., 40220., 40886., 41552., 42747., 43422., 44097., 44772., 46012., 46696., 47380., 48064., 38261., 38954., 39647., 40340., 41526., 42228., 42930., 43632., 44863., 45574., 46285., 46996., 48272., 48992., 49712., 50432., 30954., 31428., 31902., 32376., 33216., 33696., 34176., 34656., 35526., 36012., 36498., 36984., 37884., 38376., 38868., 39360., 16116., 16424., 16732., 17040., 17560., 17872., 18184., 18496., 19036., 19352., 19668., 19984., 20544., 20864., 21184., 21504., 21130., 21604., 22078., 22552., 23296., 23776., 24256., 24736., 25510., 25996., 26482., 26968., 27772., 28264., 28756., 29248., 22114., 22612., 23110., 23608., 24376., 24880., 25384., 25888., 26686., 27196., 27706., 28216., 29044., 29560., 30076., 30592., 23098., 23620., 24142., 24664., 25456., 25984., 26512., 27040., 27862., 28396., 28930., 29464., 30316., 30856., 31396., 31936., 12772., 13128., 13484., 13840., 14344., 14704., 15064., 15424., 15948., 16312., 16676., 17040., 17584., 17952., 18320., 18688.};
  const std::array<int, 4> in_shape = {{ 3, 6, 5, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x5x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14497., 14722., 14947., 15172., 15890., 16124., 16358., 16592., 17355., 17598., 17841., 18084., 18892., 19144., 19396., 19648., 16325., 16586., 16847., 17108., 17862., 18132., 18402., 18672., 19471., 19750., 20029., 20308., 21152., 21440., 21728., 22016., 18153., 18450., 18747., 19044., 19834., 20140., 20446., 20752., 21587., 21902., 22217., 22532., 23412., 23736., 24060., 24384., 23637., 24042., 24447., 24852., 25750., 26164., 26578., 26992., 27935., 28358., 28781., 29204., 30192., 30624., 31056., 31488., 25465., 25906., 26347., 26788., 27722., 28172., 28622., 29072., 30051., 30510., 30969., 31428., 32452., 32920., 33388., 33856., 27293., 27770., 28247., 28724., 29694., 30180., 30666., 31152., 32167., 32662., 33157., 33652., 34712., 35216., 35720., 36224., 32777., 33362., 33947., 34532., 35610., 36204., 36798., 37392., 38515., 39118., 39721., 40324., 41492., 42104., 42716., 43328., 34605., 35226., 35847., 36468., 37582., 38212., 38842., 39472., 40631., 41270., 41909., 42548., 43752., 44400., 45048., 45696., 36433., 37090., 37747., 38404., 39554., 40220., 40886., 41552., 42747., 43422., 44097., 44772., 46012., 46696., 47380., 48064., 41917., 42682., 43447., 44212., 45470., 46244., 47018., 47792., 49095., 49878., 50661., 51444., 52792., 53584., 54376., 55168., 43745., 44546., 45347., 46148., 47442., 48252., 49062., 49872., 51211., 52030., 52849., 53668., 55052., 55880., 56708., 57536., 45573., 46410., 47247., 48084., 49414., 50260., 51106., 51952., 53327., 54182., 55037., 55892., 57312., 58176., 59040., 59904., 13145., 13554., 13963., 14372., 15274., 15692., 16110., 16528., 17475., 17902., 18329., 18756., 19748., 20184., 20620., 21056., 12797., 13114., 13431., 13748., 14558., 14884., 15210., 15536., 16391., 16726., 17061., 17396., 18296., 18640., 18984., 19328., 14497., 14722., 14947., 15172., 15890., 16124., 16358., 16592., 17355., 17598., 17841., 18084., 18892., 19144., 19396., 19648., 19981., 20314., 20647., 20980., 21806., 22148., 22490., 22832., 23703., 24054., 24405., 24756., 25672., 26032., 26392., 26752., 21809., 22178., 22547., 22916., 23778., 24156., 24534., 24912., 25819., 26206., 26593., 26980., 27932., 28328., 28724., 29120., 23637., 24042., 24447., 24852., 25750., 26164., 26578., 26992., 27935., 28358., 28781., 29204., 30192., 30624., 31056., 31488., 29121., 29634., 30147., 30660., 31666., 32188., 32710., 33232., 34283., 34814., 35345., 35876., 36972., 37512., 38052., 38592., 30949., 31498., 32047., 32596., 33638., 34196., 34754., 35312., 36399., 36966., 37533., 38100., 39232., 39808., 40384., 40960., 32777., 33362., 33947., 34532., 35610., 36204., 36798., 37392., 38515., 39118., 39721., 40324., 41492., 42104., 42716., 43328., 38261., 38954., 39647., 40340., 41526., 42228., 42930., 43632., 44863., 45574., 46285., 46996., 48272., 48992., 49712., 50432., 40089., 40818., 41547., 42276., 43498., 44236., 44974., 45712., 46979., 47726., 48473., 49220., 50532., 51288., 52044., 52800., 41917., 42682., 43447., 44212., 45470., 46244., 47018., 47792., 49095., 49878., 50661., 51444., 52792., 53584., 54376., 55168., 13713., 14178., 14643., 15108., 16066., 16540., 17014., 17488., 18491., 18974., 19457., 19940., 20988., 21480., 21972., 22464., 15541., 16042., 16543., 17044., 18038., 18548., 19058., 19568., 20607., 21126., 21645., 22164., 23248., 23776., 24304., 24832., 13145., 13554., 13963., 14372., 15274., 15692., 16110., 16528., 17475., 17902., 18329., 18756., 19748., 20184., 20620., 21056., 16325., 16586., 16847., 17108., 17862., 18132., 18402., 18672., 19471., 19750., 20029., 20308., 21152., 21440., 21728., 22016., 18153., 18450., 18747., 19044., 19834., 20140., 20446., 20752., 21587., 21902., 22217., 22532., 23412., 23736., 24060., 24384., 19981., 20314., 20647., 20980., 21806., 22148., 22490., 22832., 23703., 24054., 24405., 24756., 25672., 26032., 26392., 26752., 25465., 25906., 26347., 26788., 27722., 28172., 28622., 29072., 30051., 30510., 30969., 31428., 32452., 32920., 33388., 33856., 27293., 27770., 28247., 28724., 29694., 30180., 30666., 31152., 32167., 32662., 33157., 33652., 34712., 35216., 35720., 36224., 29121., 29634., 30147., 30660., 31666., 32188., 32710., 33232., 34283., 34814., 35345., 35876., 36972., 37512., 38052., 38592., 34605., 35226., 35847., 36468., 37582., 38212., 38842., 39472., 40631., 41270., 41909., 42548., 43752., 44400., 45048., 45696., 36433., 37090., 37747., 38404., 39554., 40220., 40886., 41552., 42747., 43422., 44097., 44772., 46012., 46696., 47380., 48064., 38261., 38954., 39647., 40340., 41526., 42228., 42930., 43632., 44863., 45574., 46285., 46996., 48272., 48992., 49712., 50432.};
  const std::array<int, 4> in_shape = {{ 3, 6, 5, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 145.,  226.,  265.,  304.,  343.,  223.,  321.,  474.,  519.,  564.,  609.,  384.,  519.,  744.,  789.,  834.,  879.,  546.,  717., 1014., 1059., 1104., 1149.,  708.,  915., 1284., 1329., 1374., 1419.,  870.,  475.,  640.,  661.,  682.,  703.,  409., 1153., 1630., 1669., 1708., 1747., 1087., 1509., 2094., 2139., 2184., 2229., 1356., 1707., 2364., 2409., 2454., 2499., 1518., 1905., 2634., 2679., 2724., 2769., 1680., 2103., 2904., 2949., 2994., 3039., 1842., 1051., 1396., 1417., 1438., 1459.,  841., 2161., 3034., 3073., 3112., 3151., 1951., 2697., 3714., 3759., 3804., 3849., 2328., 2895., 3984., 4029., 4074., 4119., 2490., 3093., 4254., 4299., 4344., 4389., 2652., 3291., 4524., 4569., 4614., 4659., 2814., 1627., 2152., 2173., 2194., 2215., 1273.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 474.,  519.,  564.,  609.,  744.,  789.,  834.,  879., 1014., 1059., 1104., 1149., 1284., 1329., 1374., 1419., 2094., 2139., 2184., 2229., 2364., 2409., 2454., 2499., 2634., 2679., 2724., 2769., 2904., 2949., 2994., 3039., 3714., 3759., 3804., 3849., 3984., 4029., 4074., 4119., 4254., 4299., 4344., 4389., 4524., 4569., 4614., 4659.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 272.,  290.,  422.,  452.,  494.,  530.,  566.,  608.,  638.,  686.,  412.,  446.,  597.,  642.,  876.,  948.,  957., 1038., 1038., 1128., 1119., 1218.,  699.,  768.,  957., 1038., 1362., 1488., 1443., 1578., 1524., 1668., 1605., 1758.,  987., 1092., 1317., 1434., 1848., 2028., 1929., 2118., 2010., 2208., 2091., 2298., 1275., 1416., 1677., 1830., 2334., 2568., 2415., 2658., 2496., 2748., 2577., 2838., 1563., 1740.,  836.,  950., 1106., 1280., 1142., 1322., 1178., 1364., 1214., 1406.,  688.,  818., 2144., 2306., 3014., 3260., 3086., 3338., 3158., 3416., 3230., 3494., 1996., 2174., 2757., 3018., 3792., 4188., 3873., 4278., 3954., 4368., 4035., 4458., 2427., 2712., 3117., 3414., 4278., 4728., 4359., 4818., 4440., 4908., 4521., 4998., 2715., 3036., 3477., 3810., 4764., 5268., 4845., 5358., 4926., 5448., 5007., 5538., 3003., 3360., 3837., 4206., 5250., 5808., 5331., 5898., 5412., 5988., 5493., 6078., 3291., 3684., 1844., 2102., 2402., 2792., 2438., 2834., 2474., 2876., 2510., 2918., 1408., 1682., 4016., 4322., 5606., 6068., 5678., 6146., 5750., 6224., 5822., 6302., 3580., 3902., 4917., 5394., 6708., 7428., 6789., 7518., 6870., 7608., 6951., 7698., 4155., 4656., 5277., 5790., 7194., 7968., 7275., 8058., 7356., 8148., 7437., 8238., 4443., 4980., 5637., 6186., 7680., 8508., 7761., 8598., 7842., 8688., 7923., 8778., 4731., 5304., 5997., 6582., 8166., 9048., 8247., 9138., 8328., 9228., 8409., 9318., 5019., 5628., 2852., 3254., 3698., 4304., 3734., 4346., 3770., 4388., 3806., 4430., 2128., 2546.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 876.,  948.,  957., 1038., 1038., 1128., 1119., 1218., 1362., 1488., 1443., 1578., 1524., 1668., 1605., 1758., 1848., 2028., 1929., 2118., 2010., 2208., 2091., 2298., 2334., 2568., 2415., 2658., 2496., 2748., 2577., 2838., 3792., 4188., 3873., 4278., 3954., 4368., 4035., 4458., 4278., 4728., 4359., 4818., 4440., 4908., 4521., 4998., 4764., 5268., 4845., 5358., 4926., 5448., 5007., 5538., 5250., 5808., 5331., 5898., 5412., 5988., 5493., 6078., 6708., 7428., 6789., 7518., 6870., 7608., 6951., 7698., 7194., 7968., 7275., 8058., 7356., 8148., 7437., 8238., 7680., 8508., 7761., 8598., 7842., 8688., 7923., 8778., 8166., 9048., 8247., 9138., 8328., 9228., 8409., 9318.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  526.,   544.,   562.,   580.,   814.,   844.,   874.,   904.,   952.,   988.,  1024.,  1060.,  1090.,  1132.,  1174.,  1216.,  1228.,  1276.,  1324.,  1372.,   790.,   824.,   858.,   892.,  1149.,  1194.,  1239.,  1284.,  1680.,  1752.,  1824.,  1896.,  1833.,  1914.,  1995.,  2076.,  1986.,  2076.,  2166.,  2256.,  2139.,  2238.,  2337.,  2436.,  1329.,  1398.,  1467.,  1536.,  1833.,  1914.,  1995.,  2076.,  2598.,  2724.,  2850.,  2976.,  2751.,  2886.,  3021.,  3156.,  2904.,  3048.,  3192.,  3336.,  3057.,  3210.,  3363.,  3516.,  1869.,  1974.,  2079.,  2184.,  2517.,  2634.,  2751.,  2868.,  3516.,  3696.,  3876.,  4056.,  3669.,  3858.,  4047.,  4236.,  3822.,  4020.,  4218.,  4416.,  3975.,  4182.,  4389.,  4596.,  2409.,  2550.,  2691.,  2832.,  3201.,  3354.,  3507.,  3660.,  4434.,  4668.,  4902.,  5136.,  4587.,  4830.,  5073.,  5316.,  4740.,  4992.,  5244.,  5496.,  4893.,  5154.,  5415.,  5676.,  2949.,  3126.,  3303.,  3480.,  1558.,  1672.,  1786.,  1900.,  2038.,  2212.,  2386.,  2560.,  2104.,  2284.,  2464.,  2644.,  2170.,  2356.,  2542.,  2728.,  2236.,  2428.,  2620.,  2812.,  1246.,  1376.,  1506.,  1636.,  4126.,  4288.,  4450.,  4612.,  5782.,  6028.,  6274.,  6520.,  5920.,  6172.,  6424.,  6676.,  6058.,  6316.,  6574.,  6832.,  6196.,  6460.,  6724.,  6988.,  3814.,  3992.,  4170.,  4348.,  5253.,  5514.,  5775.,  6036.,  7188.,  7584.,  7980.,  8376.,  7341.,  7746.,  8151.,  8556.,  7494.,  7908.,  8322.,  8736.,  7647.,  8070.,  8493.,  8916.,  4569.,  4854.,  5139.,  5424.,  5937.,  6234.,  6531.,  6828.,  8106.,  8556.,  9006.,  9456.,  8259.,  8718.,  9177.,  9636.,  8412.,  8880.,  9348.,  9816.,  8565.,  9042.,  9519.,  9996.,  5109.,  5430.,  5751.,  6072.,  6621.,  6954.,  7287.,  7620.,  9024.,  9528., 10032., 10536.,  9177.,  9690., 10203., 10716.,  9330.,  9852., 10374., 10896.,  9483., 10014., 10545., 11076.,  5649.,  6006.,  6363.,  6720.,  7305.,  7674.,  8043.,  8412.,  9942., 10500., 11058., 11616., 10095., 10662., 11229., 11796., 10248., 10824., 11400., 11976., 10401., 10986., 11571., 12156.,  6189.,  6582.,  6975.,  7368.,  3430.,  3688.,  3946.,  4204.,  4414.,  4804.,  5194.,  5584.,  4480.,  4876.,  5272.,  5668.,  4546.,  4948.,  5350.,  5752.,  4612.,  5020.,  5428.,  5836.,  2542.,  2816.,  3090.,  3364.,  7726.,  8032.,  8338.,  8644., 10750., 11212., 11674., 12136., 10888., 11356., 11824., 12292., 11026., 11500., 11974., 12448., 11164., 11644., 12124., 12604.,  6838.,  7160.,  7482.,  7804.,  9357.,  9834., 10311., 10788., 12696., 13416., 14136., 14856., 12849., 13578., 14307., 15036., 13002., 13740., 14478., 15216., 13155., 13902., 14649., 15396.,  7809.,  8310.,  8811.,  9312., 10041., 10554., 11067., 11580., 13614., 14388., 15162., 15936., 13767., 14550., 15333., 16116., 13920., 14712., 15504., 16296., 14073., 14874., 15675., 16476.,  8349.,  8886.,  9423.,  9960., 10725., 11274., 11823., 12372., 14532., 15360., 16188., 17016., 14685., 15522., 16359., 17196., 14838., 15684., 16530., 17376., 14991., 15846., 16701., 17556.,  8889.,  9462., 10035., 10608., 11409., 11994., 12579., 13164., 15450., 16332., 17214., 18096., 15603., 16494., 17385., 18276., 15756., 16656., 17556., 18456., 15909., 16818., 17727., 18636.,  9429., 10038., 10647., 11256.,  5302.,  5704.,  6106.,  6508.,  6790.,  7396.,  8002.,  8608.,  6856.,  7468.,  8080.,  8692.,  6922.,  7540.,  8158.,  8776.,  6988.,  7612.,  8236.,  8860.,  3838.,  4256.,  4674.,  5092.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1680.,  1752.,  1824.,  1896.,  1833.,  1914.,  1995.,  2076.,  1986.,  2076.,  2166.,  2256.,  2139.,  2238.,  2337.,  2436.,  2598.,  2724.,  2850.,  2976.,  2751.,  2886.,  3021.,  3156.,  2904.,  3048.,  3192.,  3336.,  3057.,  3210.,  3363.,  3516.,  3516.,  3696.,  3876.,  4056.,  3669.,  3858.,  4047.,  4236.,  3822.,  4020.,  4218.,  4416.,  3975.,  4182.,  4389.,  4596.,  4434.,  4668.,  4902.,  5136.,  4587.,  4830.,  5073.,  5316.,  4740.,  4992.,  5244.,  5496.,  4893.,  5154.,  5415.,  5676.,  7188.,  7584.,  7980.,  8376.,  7341.,  7746.,  8151.,  8556.,  7494.,  7908.,  8322.,  8736.,  7647.,  8070.,  8493.,  8916.,  8106.,  8556.,  9006.,  9456.,  8259.,  8718.,  9177.,  9636.,  8412.,  8880.,  9348.,  9816.,  8565.,  9042.,  9519.,  9996.,  9024.,  9528., 10032., 10536.,  9177.,  9690., 10203., 10716.,  9330.,  9852., 10374., 10896.,  9483., 10014., 10545., 11076.,  9942., 10500., 11058., 11616., 10095., 10662., 11229., 11796., 10248., 10824., 11400., 11976., 10401., 10986., 11571., 12156., 12696., 13416., 14136., 14856., 12849., 13578., 14307., 15036., 13002., 13740., 14478., 15216., 13155., 13902., 14649., 15396., 13614., 14388., 15162., 15936., 13767., 14550., 15333., 16116., 13920., 14712., 15504., 16296., 14073., 14874., 15675., 16476., 14532., 15360., 16188., 17016., 14685., 15522., 16359., 17196., 14838., 15684., 16530., 17376., 14991., 15846., 16701., 17556., 15450., 16332., 17214., 18096., 15603., 16494., 17385., 18276., 15756., 16656., 17556., 18456., 15909., 16818., 17727., 18636.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  492.,   580.,   772.,   904.,   916.,  1060.,  1060.,  1216.,  1204.,  1372.,   780.,   892.,  1134.,  1284.,  1671.,  1896.,  1833.,  2076.,  1995.,  2256.,  2157.,  2436.,  1350.,  1536.,  1854.,  2076.,  2643.,  2976.,  2805.,  3156.,  2967.,  3336.,  3129.,  3516.,  1926.,  2184.,  2574.,  2868.,  3615.,  4056.,  3777.,  4236.,  3939.,  4416.,  4101.,  4596.,  2502.,  2832.,  3294.,  3660.,  4587.,  5136.,  4749.,  5316.,  4911.,  5496.,  5073.,  5676.,  3078.,  3480.,  1644.,  1900.,  2176.,  2560.,  2248.,  2644.,  2320.,  2728.,  2392.,  2812.,  1356.,  1636.,  4236.,  4612.,  5956.,  6520.,  6100.,  6676.,  6244.,  6832.,  6388.,  6988.,  3948.,  4348.,  5454.,  6036.,  7503.,  8376.,  7665.,  8556.,  7827.,  8736.,  7989.,  8916.,  4806.,  5424.,  6174.,  6828.,  8475.,  9456.,  8637.,  9636.,  8799.,  9816.,  8961.,  9996.,  5382.,  6072.,  6894.,  7620.,  9447., 10536.,  9609., 10716.,  9771., 10896.,  9933., 11076.,  5958.,  6720.,  7614.,  8412., 10419., 11616., 10581., 11796., 10743., 11976., 10905., 12156.,  6534.,  7368.,  3660.,  4204.,  4768.,  5584.,  4840.,  5668.,  4912.,  5752.,  4984.,  5836.,  2796.,  3364.,  7980.,  8644., 11140., 12136., 11284., 12292., 11428., 12448., 11572., 12604.,  7116.,  7804.,  9774., 10788., 13335., 14856., 13497., 15036., 13659., 15216., 13821., 15396.,  8262.,  9312., 10494., 11580., 14307., 15936., 14469., 16116., 14631., 16296., 14793., 16476.,  8838.,  9960., 11214., 12372., 15279., 17016., 15441., 17196., 15603., 17376., 15765., 17556.,  9414., 10608., 11934., 13164., 16251., 18096., 16413., 18276., 16575., 18456., 16737., 18636.,  9990., 11256.,  5676.,  6508.,  7360.,  8608.,  7432.,  8692.,  7504.,  8776.,  7576.,  8860.,  4236.,  5092.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1671.,  1896.,  1833.,  2076.,  1995.,  2256.,  2157.,  2436.,  2643.,  2976.,  2805.,  3156.,  2967.,  3336.,  3129.,  3516.,  3615.,  4056.,  3777.,  4236.,  3939.,  4416.,  4101.,  4596.,  4587.,  5136.,  4749.,  5316.,  4911.,  5496.,  5073.,  5676.,  7503.,  8376.,  7665.,  8556.,  7827.,  8736.,  7989.,  8916.,  8475.,  9456.,  8637.,  9636.,  8799.,  9816.,  8961.,  9996.,  9447., 10536.,  9609., 10716.,  9771., 10896.,  9933., 11076., 10419., 11616., 10581., 11796., 10743., 11976., 10905., 12156., 13335., 14856., 13497., 15036., 13659., 15216., 13821., 15396., 14307., 15936., 14469., 16116., 14631., 16296., 14793., 16476., 15279., 17016., 15441., 17196., 15603., 17376., 15765., 17556., 16251., 18096., 16413., 18276., 16575., 18456., 16737., 18636.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {  952.,   984.,  1124.,  1160.,  1490.,  1544.,  1748.,  1808.,  1766.,  1832.,  2048.,  2120.,  2042.,  2120.,  2348.,  2432.,  2318.,  2408.,  2648.,  2744.,  1496.,  1560.,  1716.,  1784.,  2184.,  2268.,  2478.,  2568.,  3207.,  3342.,  3648.,  3792.,  3513.,  3666.,  3990.,  4152.,  3819.,  3990.,  4332.,  4512.,  4125.,  4314.,  4674.,  4872.,  2568.,  2700.,  2934.,  3072.,  3552.,  3708.,  3990.,  4152.,  5043.,  5286.,  5700.,  5952.,  5349.,  5610.,  6042.,  6312.,  5655.,  5934.,  6384.,  6672.,  5961.,  6258.,  6726.,  7032.,  3648.,  3852.,  4158.,  4368.,  4920.,  5148.,  5502.,  5736.,  6879.,  7230.,  7752.,  8112.,  7185.,  7554.,  8094.,  8472.,  7491.,  7878.,  8436.,  8832.,  7797.,  8202.,  8778.,  9192.,  4728.,  5004.,  5382.,  5664.,  6288.,  6588.,  7014.,  7320.,  8715.,  9174.,  9804., 10272.,  9021.,  9498., 10146., 10632.,  9327.,  9822., 10488., 10992.,  9633., 10146., 10830., 11352.,  5808.,  6156.,  6606.,  6960.,  3064.,  3288.,  3572.,  3800.,  4010.,  4352.,  4772.,  5120.,  4142.,  4496.,  4928.,  5288.,  4274.,  4640.,  5084.,  5456.,  4406.,  4784.,  5240.,  5624.,  2456.,  2712.,  3012.,  3272.,  8152.,  8472.,  8900.,  9224., 11426., 11912., 12548., 13040., 11702., 12200., 12848., 13352., 11978., 12488., 13148., 13664., 12254., 12776., 13448., 13976.,  7544.,  7896.,  8340.,  8696., 10392., 10908., 11550., 12072., 14223., 15006., 15960., 16752., 14529., 15330., 16302., 17112., 14835., 15654., 16644., 17472., 15141., 15978., 16986., 17832.,  9048.,  9612., 10278., 10848., 11760., 12348., 13062., 13656., 16059., 16950., 18012., 18912., 16365., 17274., 18354., 19272., 16671., 17598., 18696., 19632., 16977., 17922., 19038., 19992., 10128., 10764., 11502., 12144., 13128., 13788., 14574., 15240., 17895., 18894., 20064., 21072., 18201., 19218., 20406., 21432., 18507., 19542., 20748., 21792., 18813., 19866., 21090., 22152., 11208., 11916., 12726., 13440., 14496., 15228., 16086., 16824., 19731., 20838., 22116., 23232., 20037., 21162., 22458., 23592., 20343., 21486., 22800., 23952., 20649., 21810., 23142., 24312., 12288., 13068., 13950., 14736.,  6808.,  7320.,  7892.,  8408.,  8762.,  9536., 10388., 11168.,  8894.,  9680., 10544., 11336.,  9026.,  9824., 10700., 11504.,  9158.,  9968., 10856., 11672.,  5048.,  5592.,  6180.,  6728., 15352., 15960., 16676., 17288., 21362., 22280., 23348., 24272., 21638., 22568., 23648., 24584., 21914., 22856., 23948., 24896., 22190., 23144., 24248., 25208., 13592., 14232., 14964., 15608., 18600., 19548., 20622., 21576., 25239., 26670., 28272., 29712., 25545., 26994., 28614., 30072., 25851., 27318., 28956., 30432., 26157., 27642., 29298., 30792., 15528., 16524., 17622., 18624., 19968., 20988., 22134., 23160., 27075., 28614., 30324., 31872., 27381., 28938., 30666., 32232., 27687., 29262., 31008., 32592., 27993., 29586., 31350., 32952., 16608., 17676., 18846., 19920., 21336., 22428., 23646., 24744., 28911., 30558., 32376., 34032., 29217., 30882., 32718., 34392., 29523., 31206., 33060., 34752., 29829., 31530., 33402., 35112., 17688., 18828., 20070., 21216., 22704., 23868., 25158., 26328., 30747., 32502., 34428., 36192., 31053., 32826., 34770., 36552., 31359., 33150., 35112., 36912., 31665., 33474., 35454., 37272., 18768., 19980., 21294., 22512., 10552., 11352., 12212., 13016., 13514., 14720., 16004., 17216., 13646., 14864., 16160., 17384., 13778., 15008., 16316., 17552., 13910., 15152., 16472., 17720.,  7640.,  8472.,  9348., 10184.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3207.,  3342.,  3648.,  3792.,  3513.,  3666.,  3990.,  4152.,  3819.,  3990.,  4332.,  4512.,  4125.,  4314.,  4674.,  4872.,  5043.,  5286.,  5700.,  5952.,  5349.,  5610.,  6042.,  6312.,  5655.,  5934.,  6384.,  6672.,  5961.,  6258.,  6726.,  7032.,  6879.,  7230.,  7752.,  8112.,  7185.,  7554.,  8094.,  8472.,  7491.,  7878.,  8436.,  8832.,  7797.,  8202.,  8778.,  9192.,  8715.,  9174.,  9804., 10272.,  9021.,  9498., 10146., 10632.,  9327.,  9822., 10488., 10992.,  9633., 10146., 10830., 11352., 14223., 15006., 15960., 16752., 14529., 15330., 16302., 17112., 14835., 15654., 16644., 17472., 15141., 15978., 16986., 17832., 16059., 16950., 18012., 18912., 16365., 17274., 18354., 19272., 16671., 17598., 18696., 19632., 16977., 17922., 19038., 19992., 17895., 18894., 20064., 21072., 18201., 19218., 20406., 21432., 18507., 19542., 20748., 21792., 18813., 19866., 21090., 22152., 19731., 20838., 22116., 23232., 20037., 21162., 22458., 23592., 20343., 21486., 22800., 23952., 20649., 21810., 23142., 24312., 25239., 26670., 28272., 29712., 25545., 26994., 28614., 30072., 25851., 27318., 28956., 30432., 26157., 27642., 29298., 30792., 27075., 28614., 30324., 31872., 27381., 28938., 30666., 32232., 27687., 29262., 31008., 32592., 27993., 29586., 31350., 32952., 28911., 30558., 32376., 34032., 29217., 30882., 32718., 34392., 29523., 31206., 33060., 34752., 29829., 31530., 33402., 35112., 30747., 32502., 34428., 36192., 31053., 32826., 34770., 36552., 31359., 33150., 35112., 36912., 31665., 33474., 35454., 37272.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1872.,  1904.,  1936.,  1968.,  2212.,  2248.,  2284.,  2320.,  2926.,  2980.,  3034.,  3088.,  3436.,  3496.,  3556.,  3616.,  3466.,  3532.,  3598.,  3664.,  4024.,  4096.,  4168.,  4240.,  4006.,  4084.,  4162.,  4240.,  4612.,  4696.,  4780.,  4864.,  4546.,  4636.,  4726.,  4816.,  5200.,  5296.,  5392.,  5488.,  2928.,  2992.,  3056.,  3120.,  3364.,  3432.,  3500.,  3568.,  4284.,  4368.,  4452.,  4536.,  4866.,  4956.,  5046.,  5136.,  6279.,  6414.,  6549.,  6684.,  7152.,  7296.,  7440.,  7584.,  6873.,  7026.,  7179.,  7332.,  7818.,  7980.,  8142.,  8304.,  7467.,  7638.,  7809.,  7980.,  8484.,  8664.,  8844.,  9024.,  8061.,  8250.,  8439.,  8628.,  9150.,  9348.,  9546.,  9744.,  5004.,  5136.,  5268.,  5400.,  5730.,  5868.,  6006.,  6144.,  6948.,  7104.,  7260.,  7416.,  7818.,  7980.,  8142.,  8304.,  9843., 10086., 10329., 10572., 11148., 11400., 11652., 11904., 10437., 10698., 10959., 11220., 11814., 12084., 12354., 12624., 11031., 11310., 11589., 11868., 12480., 12768., 13056., 13344., 11625., 11922., 12219., 12516., 13146., 13452., 13758., 14064.,  7092.,  7296.,  7500.,  7704.,  8106.,  8316.,  8526.,  8736.,  9612.,  9840., 10068., 10296., 10770., 11004., 11238., 11472., 13407., 13758., 14109., 14460., 15144., 15504., 15864., 16224., 14001., 14370., 14739., 15108., 15810., 16188., 16566., 16944., 14595., 14982., 15369., 15756., 16476., 16872., 17268., 17664., 15189., 15594., 15999., 16404., 17142., 17556., 17970., 18384.,  9180.,  9456.,  9732., 10008., 10482., 10764., 11046., 11328., 12276., 12576., 12876., 13176., 13722., 14028., 14334., 14640., 16971., 17430., 17889., 18348., 19140., 19608., 20076., 20544., 17565., 18042., 18519., 18996., 19806., 20292., 20778., 21264., 18159., 18654., 19149., 19644., 20472., 20976., 21480., 21984., 18753., 19266., 19779., 20292., 21138., 21660., 22182., 22704., 11268., 11616., 11964., 12312., 12858., 13212., 13566., 13920.,  5904.,  6128.,  6352.,  6576.,  6916.,  7144.,  7372.,  7600.,  7678.,  8020.,  8362.,  8704.,  9196.,  9544.,  9892., 10240.,  7930.,  8284.,  8638.,  8992.,  9496.,  9856., 10216., 10576.,  8182.,  8548.,  8914.,  9280.,  9796., 10168., 10540., 10912.,  8434.,  8812.,  9190.,  9568., 10096., 10480., 10864., 11248.,  4656.,  4912.,  5168.,  5424.,  5764.,  6024.,  6284.,  6544., 15984., 16304., 16624., 16944., 17476., 17800., 18124., 18448., 22366., 22852., 23338., 23824., 24604., 25096., 25588., 26080., 22906., 23404., 23902., 24400., 25192., 25696., 26200., 26704., 23446., 23956., 24466., 24976., 25780., 26296., 26812., 27328., 23986., 24508., 25030., 25552., 26368., 26896., 27424., 27952., 14736., 15088., 15440., 15792., 16324., 16680., 17036., 17392., 20268., 20784., 21300., 21816., 22578., 23100., 23622., 24144., 27663., 28446., 29229., 30012., 31128., 31920., 32712., 33504., 28257., 29058., 29859., 30660., 31794., 32604., 33414., 34224., 28851., 29670., 30489., 31308., 32460., 33288., 34116., 34944., 29445., 30282., 31119., 31956., 33126., 33972., 34818., 35664., 17532., 18096., 18660., 19224., 19986., 20556., 21126., 21696., 22932., 23520., 24108., 24696., 25530., 26124., 26718., 27312., 31227., 32118., 33009., 33900., 35124., 36024., 36924., 37824., 31821., 32730., 33639., 34548., 35790., 36708., 37626., 38544., 32415., 33342., 34269., 35196., 36456., 37392., 38328., 39264., 33009., 33954., 34899., 35844., 37122., 38076., 39030., 39984., 19620., 20256., 20892., 21528., 22362., 23004., 23646., 24288., 25596., 26256., 26916., 27576., 28482., 29148., 29814., 30480., 34791., 35790., 36789., 37788., 39120., 40128., 41136., 42144., 35385., 36402., 37419., 38436., 39786., 40812., 41838., 42864., 27659., 28566., 29473., 30380., 31620., 32536., 33452., 34368., 20957., 21754., 22551., 23348., 24478., 25284., 26090., 26896.,  8140.,  8592.,  9044.,  9496., 10146., 10604., 11062., 11520., 12644., 13120., 13596., 14072., 14794., 15276., 15758., 16240., 16467., 17190., 17913., 18636., 19692., 20424., 21156., 21888., 17061., 17802., 18543., 19284., 20358., 21108., 21858., 22608., 12407., 13038., 13669., 14300., 15264., 15904., 16544., 17184.,  8777.,  9298.,  9819., 10340., 11194., 11724., 12254., 12784.,  2804.,  3072.,  3340.,  3608.,  4074.,  4348.,  4622.,  4896.,  3632.,  3888.,  4144.,  4400.,  4772.,  5032.,  5292.,  5552.,  4078.,  4468.,  4858.,  5248.,  5788.,  6184.,  6580.,  6976.,  4330.,  4732.,  5134.,  5536.,  6088.,  6496.,  6904.,  7312.,  2406.,  2692.,  2978.,  3264.,  3700.,  3992.,  4284.,  4576.,  1506.,  1676.,  1846.,  2016.,  2336.,  2512.,  2688.,  2864.,   848.,   880.,   912.,   944.,  1060.,  1096.,  1132.,  1168.,  5008.,  5104.,  5200.,  5296.,  5604.,  5704.,  5804.,  5904.,  7246.,  7396.,  7546.,  7696.,  8140.,  8296.,  8452.,  8608.,  7786.,  7948.,  8110.,  8272.,  8728.,  8896.,  9064.,  9232.,  8326.,  8500.,  8674.,  8848.,  9316.,  9496.,  9676.,  9856.,  8866.,  9052.,  9238.,  9424.,  9904., 10096., 10288., 10480.,  5552.,  5680.,  5808.,  5936.,  6244.,  6376.,  6508.,  6640.,  7836.,  8016.,  8196.,  8376.,  8802.,  8988.,  9174.,  9360., 11031., 11310., 11589., 11868., 12480., 12768., 13056., 13344., 11625., 11922., 12219., 12516., 13146., 13452., 13758., 14064., 12219., 12534., 12849., 13164., 13812., 14136., 14460., 14784., 12813., 13146., 13479., 13812., 14478., 14820., 15162., 15504.,  7788.,  8016.,  8244.,  8472.,  8898.,  9132.,  9366.,  9600., 10500., 10752., 11004., 11256., 11754., 12012., 12270., 12528., 14595., 14982., 15369., 15756., 16476., 16872., 17268., 17664., 15189., 15594., 15999., 16404., 17142., 17556., 17970., 18384., 15783., 16206., 16629., 17052., 17808., 18240., 18672., 19104., 16377., 16818., 17259., 17700., 18474., 18924., 19374., 19824.,  9876., 10176., 10476., 10776., 11274., 11580., 11886., 12192., 13164., 13488., 13812., 14136., 14706., 15036., 15366., 15696., 18159., 18654., 19149., 19644., 20472., 20976., 21480., 21984., 18753., 19266., 19779., 20292., 21138., 21660., 22182., 22704., 19347., 19878., 20409., 20940., 21804., 22344., 22884., 23424., 19941., 20490., 21039., 21588., 22470., 23028., 23586., 24144., 11964., 12336., 12708., 13080., 13650., 14028., 14406., 14784., 15828., 16224., 16620., 17016., 17658., 18060., 18462., 18864., 21723., 22326., 22929., 23532., 24468., 25080., 25692., 26304., 22317., 22938., 23559., 24180., 25134., 25764., 26394., 27024., 22911., 23550., 24189., 24828., 25800., 26448., 27096., 27744., 23505., 24162., 24819., 25476., 26466., 27132., 27798., 28464., 14052., 14496., 14940., 15384., 16026., 16476., 16926., 17376.,  7504.,  7792.,  8080.,  8368.,  8772.,  9064.,  9356.,  9648.,  9694., 10132., 10570., 11008., 11596., 12040., 12484., 12928.,  9946., 10396., 10846., 11296., 11896., 12352., 12808., 13264., 10198., 10660., 11122., 11584., 12196., 12664., 13132., 13600., 10450., 10924., 11398., 11872., 12496., 12976., 13456., 13936.,  5744.,  6064.,  6384.,  6704.,  7108.,  7432.,  7756.,  8080.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6279.,  6414.,  6549.,  6684.,  7152.,  7296.,  7440.,  7584.,  6873.,  7026.,  7179.,  7332.,  7818.,  7980.,  8142.,  8304.,  7467.,  7638.,  7809.,  7980.,  8484.,  8664.,  8844.,  9024.,  8061.,  8250.,  8439.,  8628.,  9150.,  9348.,  9546.,  9744.,  9843., 10086., 10329., 10572., 11148., 11400., 11652., 11904., 10437., 10698., 10959., 11220., 11814., 12084., 12354., 12624., 11031., 11310., 11589., 11868., 12480., 12768., 13056., 13344., 11625., 11922., 12219., 12516., 13146., 13452., 13758., 14064., 13407., 13758., 14109., 14460., 15144., 15504., 15864., 16224., 14001., 14370., 14739., 15108., 15810., 16188., 16566., 16944., 14595., 14982., 15369., 15756., 16476., 16872., 17268., 17664., 15189., 15594., 15999., 16404., 17142., 17556., 17970., 18384., 16971., 17430., 17889., 18348., 19140., 19608., 20076., 20544., 17565., 18042., 18519., 18996., 19806., 20292., 20778., 21264., 18159., 18654., 19149., 19644., 20472., 20976., 21480., 21984., 18753., 19266., 19779., 20292., 21138., 21660., 22182., 22704., 27663., 28446., 29229., 30012., 31128., 31920., 32712., 33504., 28257., 29058., 29859., 30660., 31794., 32604., 33414., 34224., 28851., 29670., 30489., 31308., 32460., 33288., 34116., 34944., 29445., 30282., 31119., 31956., 33126., 33972., 34818., 35664., 31227., 32118., 33009., 33900., 35124., 36024., 36924., 37824., 31821., 32730., 33639., 34548., 35790., 36708., 37626., 38544., 32415., 33342., 34269., 35196., 36456., 37392., 38328., 39264., 33009., 33954., 34899., 35844., 37122., 38076., 39030., 39984., 34791., 35790., 36789., 37788., 39120., 40128., 41136., 42144., 35385., 36402., 37419., 38436., 39786., 40812., 41838., 42864., 27659., 28566., 29473., 30380., 31620., 32536., 33452., 34368., 20957., 21754., 22551., 23348., 24478., 25284., 26090., 26896., 16467., 17190., 17913., 18636., 19692., 20424., 21156., 21888., 17061., 17802., 18543., 19284., 20358., 21108., 21858., 22608., 12407., 13038., 13669., 14300., 15264., 15904., 16544., 17184.,  8777.,  9298.,  9819., 10340., 11194., 11724., 12254., 12784., 11031., 11310., 11589., 11868., 12480., 12768., 13056., 13344., 11625., 11922., 12219., 12516., 13146., 13452., 13758., 14064., 12219., 12534., 12849., 13164., 13812., 14136., 14460., 14784., 12813., 13146., 13479., 13812., 14478., 14820., 15162., 15504., 14595., 14982., 15369., 15756., 16476., 16872., 17268., 17664., 15189., 15594., 15999., 16404., 17142., 17556., 17970., 18384., 15783., 16206., 16629., 17052., 17808., 18240., 18672., 19104., 16377., 16818., 17259., 17700., 18474., 18924., 19374., 19824., 18159., 18654., 19149., 19644., 20472., 20976., 21480., 21984., 18753., 19266., 19779., 20292., 21138., 21660., 22182., 22704., 19347., 19878., 20409., 20940., 21804., 22344., 22884., 23424., 19941., 20490., 21039., 21588., 22470., 23028., 23586., 24144., 21723., 22326., 22929., 23532., 24468., 25080., 25692., 26304., 22317., 22938., 23559., 24180., 25134., 25764., 26394., 27024., 22911., 23550., 24189., 24828., 25800., 26448., 27096., 27744., 23505., 24162., 24819., 25476., 26466., 27132., 27798., 28464.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1804.,  1968.,  2140.,  2320.,  2842.,  3088.,  3346.,  3616.,  3394.,  3664.,  3946.,  4240.,  3946.,  4240.,  4546.,  4864.,  4498.,  4816.,  5146.,  5488.,  2908.,  3120.,  3340.,  3568.,  4254.,  4536.,  4830.,  5136.,  6261.,  6684.,  7125.,  7584.,  6873.,  7332.,  7809.,  8304.,  7485.,  7980.,  8493.,  9024.,  8097.,  8628.,  9177.,  9744.,  5046.,  5400.,  5766.,  6144.,  6990.,  7416.,  7854.,  8304.,  9933., 10572., 11229., 11904., 10545., 11220., 11913., 12624., 11157., 11868., 12597., 13344., 11769., 12516., 13281., 14064.,  7206.,  7704.,  8214.,  8736.,  9726., 10296., 10878., 11472., 13605., 14460., 15333., 16224., 14217., 15108., 16017., 16944., 14829., 15756., 16701., 17664., 15441., 16404., 17385., 18384.,  9366., 10008., 10662., 11328., 12462., 13176., 13902., 14640., 17277., 18348., 19437., 20544., 17889., 18996., 20121., 21264., 18501., 19644., 20805., 21984., 19113., 20292., 21489., 22704., 11526., 12312., 13110., 13920.,  6076.,  6576.,  7084.,  7600.,  7954.,  8704.,  9466., 10240.,  8218.,  8992.,  9778., 10576.,  8482.,  9280., 10090., 10912.,  8746.,  9568., 10402., 11248.,  4876.,  5424.,  5980.,  6544., 16204., 16944., 17692., 18448., 22714., 23824., 24946., 26080., 23266., 24400., 25546., 26704., 23818., 24976., 26146., 27328., 24370., 25552., 26746., 27952., 15004., 15792., 16588., 17392., 20670., 21816., 22974., 24144., 28293., 30012., 31749., 33504., 28905., 30660., 32433., 34224., 29517., 31308., 33117., 34944., 30129., 31956., 33801., 35664., 18006., 19224., 20454., 21696., 23406., 24696., 25998., 27312., 31965., 33900., 35853., 37824., 32577., 34548., 36537., 38544., 33189., 35196., 37221., 39264., 33801., 35844., 37905., 39984., 20166., 21528., 22902., 24288., 26142., 27576., 29022., 30480., 35637., 37788., 39957., 42144., 36249., 38436., 40641., 42864., 28413., 30380., 32365., 34368., 21601., 23348., 25113., 26896.,  8502.,  9496., 10502., 11520., 13006., 14072., 15150., 16240., 17037., 18636., 20253., 21888., 17649., 19284., 20937., 22608., 12885., 14300., 15733., 17184.,  9145., 10340., 11553., 12784.,  2982.,  3608.,  4246.,  4896.,  3836.,  4400.,  4972.,  5552.,  4402.,  5248.,  6106.,  6976.,  4666.,  5536.,  6418.,  7312.,  2626.,  3264.,  3914.,  4576.,  1610.,  2016.,  2434.,  2864.,   844.,   944.,  1052.,  1168.,  5004.,  5296.,  5596.,  5904.,  7258.,  7696.,  8146.,  8608.,  7810.,  8272.,  8746.,  9232.,  8362.,  8848.,  9346.,  9856.,  8914.,  9424.,  9946., 10480.,  5596.,  5936.,  6284.,  6640.,  7902.,  8376.,  8862.,  9360., 11157., 11868., 12597., 13344., 11769., 12516., 13281., 14064., 12381., 13164., 13965., 14784., 12993., 13812., 14649., 15504.,  7926.,  8472.,  9030.,  9600., 10638., 11256., 11886., 12528., 14829., 15756., 16701., 17664., 15441., 16404., 17385., 18384., 16053., 17052., 18069., 19104., 16665., 17700., 18753., 19824., 10086., 10776., 11478., 12192., 13374., 14136., 14910., 15696., 18501., 19644., 20805., 21984., 19113., 20292., 21489., 22704., 19725., 20940., 22173., 23424., 20337., 21588., 22857., 24144., 12246., 13080., 13926., 14784., 16110., 17016., 17934., 18864., 22173., 23532., 24909., 26304., 22785., 24180., 25593., 27024., 23397., 24828., 26277., 27744., 24009., 25476., 26961., 28464., 14406., 15384., 16374., 17376.,  7740.,  8368.,  9004.,  9648., 10066., 11008., 11962., 12928., 10330., 11296., 12274., 13264., 10594., 11584., 12586., 13600., 10858., 11872., 12898., 13936.,  6028.,  6704.,  7388.,  8080.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6261.,  6684.,  7125.,  7584.,  6873.,  7332.,  7809.,  8304.,  7485.,  7980.,  8493.,  9024.,  8097.,  8628.,  9177.,  9744.,  9933., 10572., 11229., 11904., 10545., 11220., 11913., 12624., 11157., 11868., 12597., 13344., 11769., 12516., 13281., 14064., 13605., 14460., 15333., 16224., 14217., 15108., 16017., 16944., 14829., 15756., 16701., 17664., 15441., 16404., 17385., 18384., 17277., 18348., 19437., 20544., 17889., 18996., 20121., 21264., 18501., 19644., 20805., 21984., 19113., 20292., 21489., 22704., 28293., 30012., 31749., 33504., 28905., 30660., 32433., 34224., 29517., 31308., 33117., 34944., 30129., 31956., 33801., 35664., 31965., 33900., 35853., 37824., 32577., 34548., 36537., 38544., 33189., 35196., 37221., 39264., 33801., 35844., 37905., 39984., 35637., 37788., 39957., 42144., 36249., 38436., 40641., 42864., 28413., 30380., 32365., 34368., 21601., 23348., 25113., 26896., 17037., 18636., 20253., 21888., 17649., 19284., 20937., 22608., 12885., 14300., 15733., 17184.,  9145., 10340., 11553., 12784., 11157., 11868., 12597., 13344., 11769., 12516., 13281., 14064., 12381., 13164., 13965., 14784., 12993., 13812., 14649., 15504., 14829., 15756., 16701., 17664., 15441., 16404., 17385., 18384., 16053., 17052., 18069., 19104., 16665., 17700., 18753., 19824., 18501., 19644., 20805., 21984., 19113., 20292., 21489., 22704., 19725., 20940., 22173., 23424., 20337., 21588., 22857., 24144., 22173., 23532., 24909., 26304., 22785., 24180., 25593., 27024., 23397., 24828., 26277., 27744., 24009., 25476., 26961., 28464.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3548.,  3608.,  3872.,  3936.,  4212.,  4280.,  4568.,  4640.,  5582.,  5684.,  6068.,  6176.,  6578.,  6692.,  7112.,  7232.,  6662.,  6788.,  7196.,  7328.,  7754.,  7892.,  8336.,  8480.,  7742.,  7892.,  8324.,  8480.,  8930.,  9092.,  9560.,  9728.,  8822.,  8996.,  9452.,  9632., 10106., 10292., 10784., 10976.,  5692.,  5816.,  6112.,  6240.,  6548.,  6680.,  7000.,  7136.,  8346.,  8508.,  8904.,  9072.,  9486.,  9660., 10092., 10272., 12261., 12522., 13098., 13368., 13971., 14250., 14880., 15168., 13449., 13746., 14358., 14664., 15303., 15618., 16284., 16608., 14637., 14970., 15618., 15960., 16635., 16986., 17688., 18048., 15825., 16194., 16878., 17256., 17967., 18354., 19092., 19488.,  9834., 10092., 10536., 10800., 11262., 11532., 12012., 12288., 13674., 13980., 14520., 14832., 15390., 15708., 16284., 16608., 19389., 19866., 20658., 21144., 21963., 22458., 23304., 23808., 20577., 21090., 21918., 22440., 23295., 23826., 24708., 25248., 21765., 22314., 23178., 23736., 24627., 25194., 26112., 26688., 22953., 23538., 24438., 25032., 25959., 26562., 27516., 28128., 14010., 14412., 15000., 15408., 16014., 16428., 17052., 17472., 19002., 19452., 20136., 20592., 21294., 21756., 22476., 22944., 26517., 27210., 28218., 28920., 29955., 30666., 31728., 32448., 27705., 28434., 29478., 30216., 31287., 32034., 33132., 33888., 28893., 29658., 30738., 31512., 32619., 33402., 34536., 35328., 30081., 30882., 31998., 32808., 33951., 34770., 35940., 36768., 18186., 18732., 19464., 20016., 20766., 21324., 22092., 22656., 24330., 24924., 25752., 26352., 27198., 27804., 28668., 29280., 25325., 26106., 27202., 27992., 29115., 29914., 31064., 31872., 19217., 19906., 20910., 21608., 22639., 23346., 24404., 25120., 14133., 14730., 15642., 16248., 17187., 17802., 18768., 19392., 15321., 15954., 16902., 17544., 18519., 19170., 20172., 20832.,  8794.,  9228.,  9848., 10288., 10926., 11372., 12028., 12480., 11708., 12152., 12704., 13152., 13716., 14168., 14744., 15200.,  9982., 10532., 11220., 11776., 12482., 13044., 13768., 14336.,  6262.,  6708.,  7292.,  7744.,  8346.,  8804.,  9424.,  9888.,  3566.,  3908.,  4388.,  4736.,  5234.,  5588.,  6104.,  6464.,  4070.,  4436.,  4940.,  5312.,  5834.,  6212.,  6752.,  7136.,  1820.,  2072.,  2400.,  2656.,  2996.,  3256.,  3608.,  3872.,  6684.,  6808.,  7136.,  7264.,  7604.,  7736.,  8088.,  8224.,  9902., 10100., 10580., 10784., 11282., 11492., 12008., 12224., 10982., 11204., 11708., 11936., 12458., 12692., 13232., 13472., 12062., 12308., 12836., 13088., 13634., 13892., 14456., 14720., 13142., 13412., 13964., 14240., 14810., 15092., 15680., 15968.,  8316.,  8504.,  8864.,  9056.,  9428.,  9624., 10008., 10208., 11898., 12156., 12648., 12912., 13422., 13692., 14220., 14496., 17013., 17418., 18138., 18552., 19299., 19722., 20496., 20928., 18201., 18642., 19398., 19848., 20631., 21090., 21900., 22368., 19389., 19866., 20658., 21144., 21963., 22458., 23304., 23808., 20577., 21090., 21918., 22440., 23295., 23826., 24708., 25248., 12618., 12972., 13512., 13872., 14430., 14796., 15372., 15744., 17226., 17628., 18264., 18672., 19326., 19740., 20412., 20832., 24141., 24762., 25698., 26328., 27291., 27930., 28920., 29568., 25329., 25986., 26958., 27624., 28623., 29298., 30324., 31008., 26517., 27210., 28218., 28920., 29955., 30666., 31728., 32448., 27705., 28434., 29478., 30216., 31287., 32034., 33132., 33888., 16794., 17292., 17976., 18480., 19182., 19692., 20412., 20928., 22554., 23100., 23880., 24432., 25230., 25788., 26604., 27168., 31269., 32106., 33258., 34104., 35283., 36138., 37344., 38208., 32457., 33330., 34518., 35400., 36615., 37506., 38748., 39648., 25325., 26106., 27202., 27992., 29115., 29914., 31064., 31872., 19217., 19906., 20910., 21608., 22639., 23346., 24404., 25120.,  7402.,  7788.,  8360.,  8752.,  9342.,  9740., 10348., 10752., 12266., 12700., 13368., 13808., 14494., 14940., 15644., 16096., 16509., 17178., 18162., 18840., 19851., 20538., 21576., 22272., 17697., 18402., 19422., 20136., 21183., 21906., 22980., 23712., 13637., 14250., 15178., 15800., 16755., 17386., 18368., 19008., 10601., 11122., 11958., 12488., 13351., 13890., 14780., 15328.,  4154.,  4428.,  4888.,  5168.,  5646.,  5932.,  6428.,  6720.,  3836.,  4088.,  4448.,  4704.,  5076.,  5336.,  5720.,  5984.,  4574.,  4964.,  5492.,  5888.,  6434.,  6836.,  7400.,  7808.,  5078.,  5492.,  6044.,  6464.,  7034.,  7460.,  8048.,  8480.,  3406.,  3716.,  4164.,  4480.,  4946.,  5268.,  5752.,  6080.,  2758.,  2964.,  3308.,  3520.,  3882.,  4100.,  4480.,  4704.,  1628.,  1688.,  1824.,  1888.,  2036.,  2104.,  2264.,  2336.,  9820., 10008., 10400., 10592., 10996., 11192., 11608., 11808., 14222., 14516., 15092., 15392., 15986., 16292., 16904., 17216., 15302., 15620., 16220., 16544., 17162., 17492., 18128., 18464., 16382., 16724., 17348., 17696., 18338., 18692., 19352., 19712., 17462., 17828., 18476., 18848., 19514., 19892., 20576., 20960., 10940., 11192., 11616., 11872., 12308., 12568., 13016., 13280., 15450., 15804., 16392., 16752., 17358., 17724., 18348., 18720., 21765., 22314., 23178., 23736., 24627., 25194., 26112., 26688., 22953., 23538., 24438., 25032., 25959., 26562., 27516., 28128., 24141., 24762., 25698., 26328., 27291., 27930., 28920., 29568., 25329., 25986., 26958., 27624., 28623., 29298., 30324., 31008., 15402., 15852., 16488., 16944., 17598., 18060., 18732., 19200., 20778., 21276., 22008., 22512., 23262., 23772., 24540., 25056., 28893., 29658., 30738., 31512., 32619., 33402., 34536., 35328., 30081., 30882., 31998., 32808., 33951., 34770., 35940., 36768., 31269., 32106., 33258., 34104., 35283., 36138., 37344., 38208., 32457., 33330., 34518., 35400., 36615., 37506., 38748., 39648., 19578., 20172., 20952., 21552., 22350., 22956., 23772., 24384., 10490., 10876., 11496., 11888., 12526., 12924., 13580., 13984., 14133., 14730., 15642., 16248., 17187., 17802., 18768., 19392., 15321., 15954., 16902., 17544., 18519., 19170., 20172., 20832., 16509., 17178., 18162., 18840., 19851., 20538., 21576., 22272., 17697., 18402., 19422., 20136., 21183., 21906., 22980., 23712., 10186., 10668., 11336., 11824., 12510., 13004., 13708., 14208.,  6346.,  6620.,  7128.,  7408.,  7934.,  8220.,  8764.,  9056.,  8589.,  9018.,  9762., 10200., 10971., 11418., 12216., 12672.,  9777., 10242., 11022., 11496., 12303., 12786., 13620., 14112., 10965., 11466., 12282., 12792., 13635., 14154., 15024., 15552., 12153., 12690., 13542., 14088., 14967., 15522., 16428., 16992.,  6938.,  7308.,  7864.,  8240.,  8814.,  9196.,  9788., 10176.,  2108.,  2168.,  2336.,  2400.,  2580.,  2648.,  2840.,  2912.,  3134.,  3236.,  3476.,  3584.,  3842.,  3956.,  4232.,  4352.,  3638.,  3764.,  4028.,  4160.,  4442.,  4580.,  4880.,  5024.,  4142.,  4292.,  4580.,  4736.,  5042.,  5204.,  5528.,  5696.,  4646.,  4820.,  5132.,  5312.,  5642.,  5828.,  6176.,  6368.,  2716.,  2840.,  3040.,  3168.,  3380.,  3512.,  3736.,  3872.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12261., 12522., 13098., 13368., 13971., 14250., 14880., 15168., 13449., 13746., 14358., 14664., 15303., 15618., 16284., 16608., 14637., 14970., 15618., 15960., 16635., 16986., 17688., 18048., 15825., 16194., 16878., 17256., 17967., 18354., 19092., 19488., 19389., 19866., 20658., 21144., 21963., 22458., 23304., 23808., 20577., 21090., 21918., 22440., 23295., 23826., 24708., 25248., 21765., 22314., 23178., 23736., 24627., 25194., 26112., 26688., 22953., 23538., 24438., 25032., 25959., 26562., 27516., 28128., 26517., 27210., 28218., 28920., 29955., 30666., 31728., 32448., 27705., 28434., 29478., 30216., 31287., 32034., 33132., 33888., 28893., 29658., 30738., 31512., 32619., 33402., 34536., 35328., 30081., 30882., 31998., 32808., 33951., 34770., 35940., 36768., 25325., 26106., 27202., 27992., 29115., 29914., 31064., 31872., 19217., 19906., 20910., 21608., 22639., 23346., 24404., 25120., 14133., 14730., 15642., 16248., 17187., 17802., 18768., 19392., 15321., 15954., 16902., 17544., 18519., 19170., 20172., 20832., 17013., 17418., 18138., 18552., 19299., 19722., 20496., 20928., 18201., 18642., 19398., 19848., 20631., 21090., 21900., 22368., 19389., 19866., 20658., 21144., 21963., 22458., 23304., 23808., 20577., 21090., 21918., 22440., 23295., 23826., 24708., 25248., 24141., 24762., 25698., 26328., 27291., 27930., 28920., 29568., 25329., 25986., 26958., 27624., 28623., 29298., 30324., 31008., 26517., 27210., 28218., 28920., 29955., 30666., 31728., 32448., 27705., 28434., 29478., 30216., 31287., 32034., 33132., 33888., 31269., 32106., 33258., 34104., 35283., 36138., 37344., 38208., 32457., 33330., 34518., 35400., 36615., 37506., 38748., 39648., 25325., 26106., 27202., 27992., 29115., 29914., 31064., 31872., 19217., 19906., 20910., 21608., 22639., 23346., 24404., 25120., 16509., 17178., 18162., 18840., 19851., 20538., 21576., 22272., 17697., 18402., 19422., 20136., 21183., 21906., 22980., 23712., 13637., 14250., 15178., 15800., 16755., 17386., 18368., 19008., 10601., 11122., 11958., 12488., 13351., 13890., 14780., 15328., 21765., 22314., 23178., 23736., 24627., 25194., 26112., 26688., 22953., 23538., 24438., 25032., 25959., 26562., 27516., 28128., 24141., 24762., 25698., 26328., 27291., 27930., 28920., 29568., 25329., 25986., 26958., 27624., 28623., 29298., 30324., 31008., 28893., 29658., 30738., 31512., 32619., 33402., 34536., 35328., 30081., 30882., 31998., 32808., 33951., 34770., 35940., 36768., 31269., 32106., 33258., 34104., 35283., 36138., 37344., 38208., 32457., 33330., 34518., 35400., 36615., 37506., 38748., 39648., 14133., 14730., 15642., 16248., 17187., 17802., 18768., 19392., 15321., 15954., 16902., 17544., 18519., 19170., 20172., 20832., 16509., 17178., 18162., 18840., 19851., 20538., 21576., 22272., 17697., 18402., 19422., 20136., 21183., 21906., 22980., 23712.,  8589.,  9018.,  9762., 10200., 10971., 11418., 12216., 12672.,  9777., 10242., 11022., 11496., 12303., 12786., 13620., 14112., 10965., 11466., 12282., 12792., 13635., 14154., 15024., 15552., 12153., 12690., 13542., 14088., 14967., 15522., 16428., 16992.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, SAME3x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3324.,  3384.,  3444.,  3504.,  3840.,  3904.,  3968.,  4032.,  4388.,  4456.,  4524.,  4592.,  4968.,  5040.,  5112.,  5184.,  6838.,  6940.,  7042.,  7144.,  7676.,  7784.,  7892.,  8000.,  8562.,  8676.,  8790.,  8904.,  9496.,  9616.,  9736.,  9856.,  8462.,  8588.,  8714.,  8840.,  9396.,  9528.,  9660.,  9792., 10378., 10516., 10654., 10792., 11408., 11552., 11696., 11840., 10086., 10236., 10386., 10536., 11116., 11272., 11428., 11584., 12194., 12356., 12518., 12680., 13320., 13488., 13656., 13824., 11710., 11884., 12058., 12232., 12836., 13016., 13196., 13376., 14010., 14196., 14382., 14568., 15232., 15424., 15616., 15808., 11260., 11384., 11508., 11632., 12096., 12224., 12352., 12480., 12964., 13096., 13228., 13360., 13864., 14000., 14136., 14272.,  9746.,  9908., 10070., 10232., 10728., 10896., 11064., 11232., 11758., 11932., 12106., 12280., 12836., 13016., 13196., 13376., 16965., 17226., 17487., 17748., 18502., 18772., 19042., 19312., 20111., 20390., 20669., 20948., 21792., 22080., 22368., 22656., 18793., 19090., 19387., 19684., 20474., 20780., 21086., 21392., 22227., 22542., 22857., 23172., 24052., 24376., 24700., 25024., 20621., 20954., 21287., 21620., 22446., 22788., 23130., 23472., 24343., 24694., 25045., 25396., 26312., 26672., 27032., 27392., 22449., 22818., 23187., 23556., 24418., 24796., 25174., 25552., 26459., 26846., 27233., 27620., 28572., 28968., 29364., 29760., 19410., 19668., 19926., 20184., 20808., 21072., 21336., 21600., 22254., 22524., 22794., 23064., 23748., 24024., 24300., 24576., 17186., 17492., 17798., 18104., 18744., 19056., 19368., 19680., 20350., 20668., 20986., 21304., 22004., 22328., 22652., 22976., 27933., 28410., 28887., 29364., 30334., 30820., 31306., 31792., 32807., 33302., 33797., 34292., 35352., 35856., 36360., 36864., 29761., 30274., 30787., 31300., 32306., 32828., 33350., 33872., 34923., 35454., 35985., 36516., 37612., 38152., 38692., 39232., 31589., 32138., 32687., 33236., 34278., 34836., 35394., 35952., 37039., 37606., 38173., 38740., 39872., 40448., 41024., 41600., 33417., 34002., 34587., 35172., 36250., 36844., 37438., 38032., 39155., 39758., 40361., 40964., 42132., 42744., 43356., 43968., 27618., 28020., 28422., 28824., 29592., 30000., 30408., 30816., 31614., 32028., 32442., 32856., 33684., 34104., 34524., 34944., 24626., 25076., 25526., 25976., 26760., 27216., 27672., 28128., 28942., 29404., 29866., 30328., 31172., 31640., 32108., 32576., 38901., 39594., 40287., 40980., 42166., 42868., 43570., 44272., 45503., 46214., 46925., 47636., 48912., 49632., 50352., 51072., 40729., 41458., 42187., 42916., 44138., 44876., 45614., 46352., 47619., 48366., 49113., 49860., 51172., 51928., 52684., 53440., 42557., 43322., 44087., 44852., 46110., 46884., 47658., 48432., 49735., 50518., 51301., 52084., 53432., 54224., 55016., 55808., 44385., 45186., 45987., 46788., 48082., 48892., 49702., 50512., 51851., 52670., 53489., 54308., 55692., 56520., 57348., 58176., 35826., 36372., 36918., 37464., 38376., 38928., 39480., 40032., 40974., 41532., 42090., 42648., 43620., 44184., 44748., 45312., 32066., 32660., 33254., 33848., 34776., 35376., 35976., 36576., 37534., 38140., 38746., 39352., 40340., 40952., 41564., 42176., 49741., 50522., 51303., 52084., 53358., 54148., 54938., 55728., 57047., 57846., 58645., 59444., 60808., 61616., 62424., 63232., 37105., 37794., 38483., 39172., 40354., 41052., 41750., 42448., 43675., 44382., 45089., 45796., 47068., 47784., 48500., 49216., 26517., 27114., 27711., 28308., 29398., 30004., 30610., 31216., 32351., 32966., 33581., 34196., 35376., 36000., 36624., 37248., 28345., 28978., 29611., 30244., 31370., 32012., 32654., 33296., 34467., 35118., 35769., 36420., 37636., 38296., 38956., 39616., 17154., 17588., 18022., 18456., 19256., 19696., 20136., 20576., 21406., 21852., 22298., 22744., 23604., 24056., 24508., 24960., 22972., 23416., 23860., 24304., 24960., 25408., 25856., 26304., 26980., 27432., 27884., 28336., 29032., 29488., 29944., 30400., 19414., 19964., 20514., 21064., 21884., 22440., 22996., 23552., 24402., 24964., 25526., 26088., 26968., 27536., 28104., 28672., 12078., 12524., 12970., 13416., 14132., 14584., 15036., 15488., 16234., 16692., 17150., 17608., 18384., 18848., 19312., 19776.,  6790.,  7132.,  7474.,  7816.,  8428.,  8776.,  9124.,  9472., 10114., 10468., 10822., 11176., 11848., 12208., 12568., 12928.,  7774.,  8140.,  8506.,  8872.,  9508.,  9880., 10252., 10624., 11290., 11668., 12046., 12424., 13120., 13504., 13888., 14272.,  3388.,  3640.,  3892.,  4144.,  4544.,  4800.,  5056.,  5312.,  5732.,  5992.,  6252.,  6512.,  6952.,  7216.,  7480.,  7744.,  7484.,  7608.,  7732.,  7856.,  8256.,  8384.,  8512.,  8640.,  9060.,  9192.,  9324.,  9456.,  9896., 10032., 10168., 10304., 13334., 13532., 13730., 13928., 14556., 14760., 14964., 15168., 15826., 16036., 16246., 16456., 17144., 17360., 17576., 17792., 14958., 15180., 15402., 15624., 16276., 16504., 16732., 16960., 17642., 17876., 18110., 18344., 19056., 19296., 19536., 19776., 16582., 16828., 17074., 17320., 17996., 18248., 18500., 18752., 19458., 19716., 19974., 20232., 20968., 21232., 21496., 21760., 18206., 18476., 18746., 19016., 19716., 19992., 20268., 20544., 21274., 21556., 21838., 22120., 22880., 23168., 23456., 23744., 16444., 16632., 16820., 17008., 17536., 17728., 17920., 18112., 18660., 18856., 19052., 19248., 19816., 20016., 20216., 20416., 14706., 14964., 15222., 15480., 16072., 16336., 16600., 16864., 17486., 17756., 18026., 18296., 18948., 19224., 19500., 19776., 24277., 24682., 25087., 25492., 26390., 26804., 27218., 27632., 28575., 28998., 29421., 29844., 30832., 31264., 31696., 32128., 26105., 26546., 26987., 27428., 28362., 28812., 29262., 29712., 30691., 31150., 31609., 32068., 33092., 33560., 34028., 34496., 27933., 28410., 28887., 29364., 30334., 30820., 31306., 31792., 32807., 33302., 33797., 34292., 35352., 35856., 36360., 36864., 29761., 30274., 30787., 31300., 32306., 32828., 33350., 33872., 34923., 35454., 35985., 36516., 37612., 38152., 38692., 39232., 24882., 25236., 25590., 25944., 26664., 27024., 27384., 27744., 28494., 28860., 29226., 29592., 30372., 30744., 31116., 31488., 22146., 22548., 22950., 23352., 24088., 24496., 24904., 25312., 26078., 26492., 26906., 27320., 28116., 28536., 28956., 29376., 35245., 35866., 36487., 37108., 38222., 38852., 39482., 40112., 41271., 41910., 42549., 43188., 44392., 45040., 45688., 46336., 37073., 37730., 38387., 39044., 40194., 40860., 41526., 42192., 43387., 44062., 44737., 45412., 46652., 47336., 48020., 48704., 38901., 39594., 40287., 40980., 42166., 42868., 43570., 44272., 45503., 46214., 46925., 47636., 48912., 49632., 50352., 51072., 40729., 41458., 42187., 42916., 44138., 44876., 45614., 46352., 47619., 48366., 49113., 49860., 51172., 51928., 52684., 53440., 33090., 33588., 34086., 34584., 35448., 35952., 36456., 36960., 37854., 38364., 38874., 39384., 40308., 40824., 41340., 41856., 29586., 30132., 30678., 31224., 32104., 32656., 33208., 33760., 34670., 35228., 35786., 36344., 37284., 37848., 38412., 38976., 46213., 47050., 47887., 48724., 50054., 50900., 51746., 52592., 53967., 54822., 55677., 56532., 57952., 58816., 59680., 60544., 48041., 48914., 49787., 50660., 52026., 52908., 53790., 54672., 56083., 56974., 57865., 58756., 60212., 61112., 62012., 62912., 49741., 50522., 51303., 52084., 53358., 54148., 54938., 55728., 57047., 57846., 58645., 59444., 60808., 61616., 62424., 63232., 37105., 37794., 38483., 39172., 40354., 41052., 41750., 42448., 43675., 44382., 45089., 45796., 47068., 47784., 48500., 49216., 14418., 14804., 15190., 15576., 16328., 16720., 17112., 17504., 18286., 18684., 19082., 19480., 20292., 20696., 21100., 21504., 22434., 22868., 23302., 23736., 24504., 24944., 25384., 25824., 26622., 27068., 27514., 27960., 28788., 29240., 29692., 30144., 30173., 30842., 31511., 32180., 33342., 34020., 34698., 35376., 36583., 37270., 37957., 38644., 39896., 40592., 41288., 41984., 32001., 32706., 33411., 34116., 35314., 36028., 36742., 37456., 38699., 39422., 40145., 40868., 42156., 42888., 43620., 44352., 23461., 24074., 24687., 25300., 26406., 27028., 27650., 28272., 29423., 30054., 30685., 31316., 32512., 33152., 33792., 34432., 16969., 17490., 18011., 18532., 19546., 20076., 20606., 21136., 22195., 22734., 23273., 23812., 24916., 25464., 26012., 26560.,  8034.,  8308.,  8582.,  8856.,  9496.,  9776., 10056., 10336., 11006., 11292., 11578., 11864., 12564., 12856., 13148., 13440.,  7420.,  7672.,  7924.,  8176.,  8640.,  8896.,  9152.,  9408.,  9892., 10152., 10412., 10672., 11176., 11440., 11704., 11968.,  8758.,  9148.,  9538.,  9928., 10588., 10984., 11380., 11776., 12466., 12868., 13270., 13672., 14392., 14800., 15208., 15616.,  9742., 10156., 10570., 10984., 11668., 12088., 12508., 12928., 13642., 14068., 14494., 14920., 15664., 16096., 16528., 16960.,  6502.,  6812.,  7122.,  7432.,  8012.,  8328.,  8644.,  8960.,  9570.,  9892., 10214., 10536., 11176., 11504., 11832., 12160.,  5310.,  5516.,  5722.,  5928.,  6404.,  6616.,  6828.,  7040.,  7546.,  7764.,  7982.,  8200.,  8736.,  8960.,  9184.,  9408.,  3196.,  3256.,  3316.,  3376.,  3584.,  3648.,  3712.,  3776.,  4004.,  4072.,  4140.,  4208.,  4456.,  4528.,  4600.,  4672., 11644., 11832., 12020., 12208., 12672., 12864., 13056., 13248., 13732., 13928., 14124., 14320., 14824., 15024., 15224., 15424., 19830., 20124., 20418., 20712., 21436., 21736., 22036., 22336., 23090., 23396., 23702., 24008., 24792., 25104., 25416., 25728., 21454., 21772., 22090., 22408., 23156., 23480., 23804., 24128., 24906., 25236., 25566., 25896., 26704., 27040., 27376., 27712., 23078., 23420., 23762., 24104., 24876., 25224., 25572., 25920., 26722., 27076., 27430., 27784., 28616., 28976., 29336., 29696., 24702., 25068., 25434., 25800., 26596., 26968., 27340., 27712., 28538., 28916., 29294., 29672., 30528., 30912., 31296., 31680., 21628., 21880., 22132., 22384., 22976., 23232., 23488., 23744., 24356., 24616., 24876., 25136., 25768., 26032., 26296., 26560., 19666., 20020., 20374., 20728., 21416., 21776., 22136., 22496., 23214., 23580., 23946., 24312., 25060., 25432., 25804., 26176., 31589., 32138., 32687., 33236., 34278., 34836., 35394., 35952., 37039., 37606., 38173., 38740., 39872., 40448., 41024., 41600., 33417., 34002., 34587., 35172., 36250., 36844., 37438., 38032., 39155., 39758., 40361., 40964., 42132., 42744., 43356., 43968., 35245., 35866., 36487., 37108., 38222., 38852., 39482., 40112., 41271., 41910., 42549., 43188., 44392., 45040., 45688., 46336., 37073., 37730., 38387., 39044., 40194., 40860., 41526., 42192., 43387., 44062., 44737., 45412., 46652., 47336., 48020., 48704., 30354., 30804., 31254., 31704., 32520., 32976., 33432., 33888., 34734., 35196., 35658., 36120., 36996., 37464., 37932., 38400., 27106., 27604., 28102., 28600., 29432., 29936., 30440., 30944., 31806., 32316., 32826., 33336., 34228., 34744., 35260., 35776., 42557., 43322., 44087., 44852., 46110., 46884., 47658., 48432., 49735., 50518., 51301., 52084., 53432., 54224., 55016., 55808., 44385., 45186., 45987., 46788., 48082., 48892., 49702., 50512., 51851., 52670., 53489., 54308., 55692., 56520., 57348., 58176., 46213., 47050., 47887., 48724., 50054., 50900., 51746., 52592., 53967., 54822., 55677., 56532., 57952., 58816., 59680., 60544., 48041., 48914., 49787., 50660., 52026., 52908., 53790., 54672., 56083., 56974., 57865., 58756., 60212., 61112., 62012., 62912., 38562., 39156., 39750., 40344., 41304., 41904., 42504., 43104., 44094., 44700., 45306., 45912., 46932., 47544., 48156., 48768., 19954., 20340., 20726., 21112., 21832., 22224., 22616., 23008., 23758., 24156., 24554., 24952., 25732., 26136., 26540., 26944., 26517., 27114., 27711., 28308., 29398., 30004., 30610., 31216., 32351., 32966., 33581., 34196., 35376., 36000., 36624., 37248., 28345., 28978., 29611., 30244., 31370., 32012., 32654., 33296., 34467., 35118., 35769., 36420., 37636., 38296., 38956., 39616., 30173., 30842., 31511., 32180., 33342., 34020., 34698., 35376., 36583., 37270., 37957., 38644., 39896., 40592., 41288., 41984., 32001., 32706., 33411., 34116., 35314., 36028., 36742., 37456., 38699., 39422., 40145., 40868., 42156., 42888., 43620., 44352., 19890., 20372., 20854., 21336., 22184., 22672., 23160., 23648., 24526., 25020., 25514., 26008., 26916., 27416., 27916., 28416.,  8706.,  8980.,  9254.,  9528., 10136., 10416., 10696., 10976., 11614., 11900., 12186., 12472., 13140., 13432., 13724., 14016., 12525., 12954., 13383., 13812., 14734., 15172., 15610., 16048., 17015., 17462., 17909., 18356., 19368., 19824., 20280., 20736., 14353., 14818., 15283., 15748., 16706., 17180., 17654., 18128., 19131., 19614., 20097., 20580., 21628., 22120., 22612., 23104., 16181., 16682., 17183., 17684., 18678., 19188., 19698., 20208., 21247., 21766., 22285., 22804., 23888., 24416., 24944., 25472., 18009., 18546., 19083., 19620., 20650., 21196., 21742., 22288., 23363., 23918., 24473., 25028., 26148., 26712., 27276., 27840., 13506., 13876., 14246., 14616., 15352., 15728., 16104., 16480., 17246., 17628., 18010., 18392., 19188., 19576., 19964., 20352.,  4156.,  4216.,  4276.,  4336.,  4608.,  4672.,  4736.,  4800.,  5092.,  5160.,  5228.,  5296.,  5608.,  5680.,  5752.,  5824.,  6166.,  6268.,  6370.,  6472.,  6844.,  6952.,  7060.,  7168.,  7570.,  7684.,  7798.,  7912.,  8344.,  8464.,  8584.,  8704.,  7150.,  7276.,  7402.,  7528.,  7924.,  8056.,  8188.,  8320.,  8746.,  8884.,  9022.,  9160.,  9616.,  9760.,  9904., 10048.,  8134.,  8284.,  8434.,  8584.,  9004.,  9160.,  9316.,  9472.,  9922., 10084., 10246., 10408., 10888., 11056., 11224., 11392.,  9118.,  9292.,  9466.,  9640., 10084., 10264., 10444., 10624., 11098., 11284., 11470., 11656., 12160., 12352., 12544., 12736.,  5308.,  5432.,  5556.,  5680.,  5952.,  6080.,  6208.,  6336.,  6628.,  6760.,  6892.,  7024.,  7336.,  7472.,  7608.,  7744.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1, VALID3x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16965., 17226., 17487., 17748., 18502., 18772., 19042., 19312., 20111., 20390., 20669., 20948., 21792., 22080., 22368., 22656., 18793., 19090., 19387., 19684., 20474., 20780., 21086., 21392., 22227., 22542., 22857., 23172., 24052., 24376., 24700., 25024., 20621., 20954., 21287., 21620., 22446., 22788., 23130., 23472., 24343., 24694., 25045., 25396., 26312., 26672., 27032., 27392., 22449., 22818., 23187., 23556., 24418., 24796., 25174., 25552., 26459., 26846., 27233., 27620., 28572., 28968., 29364., 29760., 27933., 28410., 28887., 29364., 30334., 30820., 31306., 31792., 32807., 33302., 33797., 34292., 35352., 35856., 36360., 36864., 29761., 30274., 30787., 31300., 32306., 32828., 33350., 33872., 34923., 35454., 35985., 36516., 37612., 38152., 38692., 39232., 31589., 32138., 32687., 33236., 34278., 34836., 35394., 35952., 37039., 37606., 38173., 38740., 39872., 40448., 41024., 41600., 33417., 34002., 34587., 35172., 36250., 36844., 37438., 38032., 39155., 39758., 40361., 40964., 42132., 42744., 43356., 43968., 38901., 39594., 40287., 40980., 42166., 42868., 43570., 44272., 45503., 46214., 46925., 47636., 48912., 49632., 50352., 51072., 40729., 41458., 42187., 42916., 44138., 44876., 45614., 46352., 47619., 48366., 49113., 49860., 51172., 51928., 52684., 53440., 42557., 43322., 44087., 44852., 46110., 46884., 47658., 48432., 49735., 50518., 51301., 52084., 53432., 54224., 55016., 55808., 44385., 45186., 45987., 46788., 48082., 48892., 49702., 50512., 51851., 52670., 53489., 54308., 55692., 56520., 57348., 58176., 49741., 50522., 51303., 52084., 53358., 54148., 54938., 55728., 57047., 57846., 58645., 59444., 60808., 61616., 62424., 63232., 37105., 37794., 38483., 39172., 40354., 41052., 41750., 42448., 43675., 44382., 45089., 45796., 47068., 47784., 48500., 49216., 26517., 27114., 27711., 28308., 29398., 30004., 30610., 31216., 32351., 32966., 33581., 34196., 35376., 36000., 36624., 37248., 28345., 28978., 29611., 30244., 31370., 32012., 32654., 33296., 34467., 35118., 35769., 36420., 37636., 38296., 38956., 39616., 24277., 24682., 25087., 25492., 26390., 26804., 27218., 27632., 28575., 28998., 29421., 29844., 30832., 31264., 31696., 32128., 26105., 26546., 26987., 27428., 28362., 28812., 29262., 29712., 30691., 31150., 31609., 32068., 33092., 33560., 34028., 34496., 27933., 28410., 28887., 29364., 30334., 30820., 31306., 31792., 32807., 33302., 33797., 34292., 35352., 35856., 36360., 36864., 29761., 30274., 30787., 31300., 32306., 32828., 33350., 33872., 34923., 35454., 35985., 36516., 37612., 38152., 38692., 39232., 35245., 35866., 36487., 37108., 38222., 38852., 39482., 40112., 41271., 41910., 42549., 43188., 44392., 45040., 45688., 46336., 37073., 37730., 38387., 39044., 40194., 40860., 41526., 42192., 43387., 44062., 44737., 45412., 46652., 47336., 48020., 48704., 38901., 39594., 40287., 40980., 42166., 42868., 43570., 44272., 45503., 46214., 46925., 47636., 48912., 49632., 50352., 51072., 40729., 41458., 42187., 42916., 44138., 44876., 45614., 46352., 47619., 48366., 49113., 49860., 51172., 51928., 52684., 53440., 46213., 47050., 47887., 48724., 50054., 50900., 51746., 52592., 53967., 54822., 55677., 56532., 57952., 58816., 59680., 60544., 48041., 48914., 49787., 50660., 52026., 52908., 53790., 54672., 56083., 56974., 57865., 58756., 60212., 61112., 62012., 62912., 49741., 50522., 51303., 52084., 53358., 54148., 54938., 55728., 57047., 57846., 58645., 59444., 60808., 61616., 62424., 63232., 37105., 37794., 38483., 39172., 40354., 41052., 41750., 42448., 43675., 44382., 45089., 45796., 47068., 47784., 48500., 49216., 30173., 30842., 31511., 32180., 33342., 34020., 34698., 35376., 36583., 37270., 37957., 38644., 39896., 40592., 41288., 41984., 32001., 32706., 33411., 34116., 35314., 36028., 36742., 37456., 38699., 39422., 40145., 40868., 42156., 42888., 43620., 44352., 23461., 24074., 24687., 25300., 26406., 27028., 27650., 28272., 29423., 30054., 30685., 31316., 32512., 33152., 33792., 34432., 16969., 17490., 18011., 18532., 19546., 20076., 20606., 21136., 22195., 22734., 23273., 23812., 24916., 25464., 26012., 26560., 31589., 32138., 32687., 33236., 34278., 34836., 35394., 35952., 37039., 37606., 38173., 38740., 39872., 40448., 41024., 41600., 33417., 34002., 34587., 35172., 36250., 36844., 37438., 38032., 39155., 39758., 40361., 40964., 42132., 42744., 43356., 43968., 35245., 35866., 36487., 37108., 38222., 38852., 39482., 40112., 41271., 41910., 42549., 43188., 44392., 45040., 45688., 46336., 37073., 37730., 38387., 39044., 40194., 40860., 41526., 42192., 43387., 44062., 44737., 45412., 46652., 47336., 48020., 48704., 42557., 43322., 44087., 44852., 46110., 46884., 47658., 48432., 49735., 50518., 51301., 52084., 53432., 54224., 55016., 55808., 44385., 45186., 45987., 46788., 48082., 48892., 49702., 50512., 51851., 52670., 53489., 54308., 55692., 56520., 57348., 58176., 46213., 47050., 47887., 48724., 50054., 50900., 51746., 52592., 53967., 54822., 55677., 56532., 57952., 58816., 59680., 60544., 48041., 48914., 49787., 50660., 52026., 52908., 53790., 54672., 56083., 56974., 57865., 58756., 60212., 61112., 62012., 62912., 26517., 27114., 27711., 28308., 29398., 30004., 30610., 31216., 32351., 32966., 33581., 34196., 35376., 36000., 36624., 37248., 28345., 28978., 29611., 30244., 31370., 32012., 32654., 33296., 34467., 35118., 35769., 36420., 37636., 38296., 38956., 39616., 30173., 30842., 31511., 32180., 33342., 34020., 34698., 35376., 36583., 37270., 37957., 38644., 39896., 40592., 41288., 41984., 32001., 32706., 33411., 34116., 35314., 36028., 36742., 37456., 38699., 39422., 40145., 40868., 42156., 42888., 43620., 44352., 12525., 12954., 13383., 13812., 14734., 15172., 15610., 16048., 17015., 17462., 17909., 18356., 19368., 19824., 20280., 20736., 14353., 14818., 15283., 15748., 16706., 17180., 17654., 18128., 19131., 19614., 20097., 20580., 21628., 22120., 22612., 23104., 16181., 16682., 17183., 17684., 18678., 19188., 19698., 20208., 21247., 21766., 22285., 22804., 23888., 24416., 24944., 25472., 18009., 18546., 19083., 19620., 20650., 21196., 21742., 22288., 23363., 23918., 24473., 25028., 26148., 26712., 27276., 27840.};
  const std::array<int, 4> in_shape = {{ 3, 6, 6, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}