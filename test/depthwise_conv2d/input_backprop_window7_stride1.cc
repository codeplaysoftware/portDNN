/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_depthwise_conv2d_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/depthwise_conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::DefaultBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;
using GTestTypePairs = sycldnn::types::ToGTestTypes<SNNTypePairs>::type;

template <typename Pair>
using InputBackpropWindow7Stride1 =
    sycldnn::depthwise_conv2d::WindowStrideTest<Pair, 7, 1>;
TYPED_TEST_SUITE(InputBackpropWindow7Stride1, GTestTypePairs);
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1876.,  2610.,  3458.,  4424.,  4830.,  4550.,  4140.,  3596.,
      3840.,  5225.,  6790.,  8540.,  9170.,  8485.,  7600.,  6510.,
      6850.,  9185.,  11781., 14644., 15547., 14211., 12590., 10678.,
      11130., 14770., 18767., 23128., 24353., 22064., 19390., 16324.,
      16394., 21490., 26999., 32928., 34153., 30632., 26670., 22260.,
      20998., 27215., 33831., 40852., 42049., 37341., 32210., 26650.,
      23660., 30475., 37660., 45220., 46340., 40915., 35100., 28890.,
      24156., 30990., 38150., 45640., 46634., 41018., 35060., 28756.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   7.,   10.,  13.,  16.,  19.,  14.,  11.,  35.,  45.,
      55.,  65.,  75.,  85.,  56.,  39.,  105., 115., 125., 135., 145.,
      155., 98.,  67.,  175., 185., 195., 205., 215., 225., 140., 95.,
      245., 255., 265., 275., 285., 295., 182., 123., 315., 325., 335.,
      345., 355., 365., 224., 151., 385., 395., 405., 415., 425., 435.,
      266., 129., 304., 311., 318., 325., 332., 339., 196.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4736.,  6256.,  8160.,  10480., 12136., 10768., 8760.,  8224.,
      7260.,  10137., 13410., 17119., 19273., 17638., 15191., 13012.,
      9712.,  11956., 14728., 18076., 20608., 18144., 14704., 12384.,
      9788.,  13857., 18578., 23911., 27085., 25214., 22211., 19140.,
      13692., 17361., 21746., 25783., 28957., 25694., 21235., 17668.,
      9664.,  13632., 18208., 23344., 26308., 24280., 21196., 18128.,
      12364., 15261., 18666., 21499., 23861., 20430., 16075., 12900.,
      5856.,  8424.,  11408., 14744., 16752., 15840., 14256., 11968.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   42.,   62.,   82.,   102.,  122.,  95.,   64.,   224.,
      296.,  368.,  440.,  512.,  584.,  396.,  260.,  728.,  800.,  872.,
      944.,  1016., 1088., 704.,  456.,  1232., 1304., 1376., 1448., 1520.,
      1592., 1012., 652.,  1736., 1808., 1880., 1952., 2024., 2096., 1320.,
      848.,  2240., 2312., 2384., 2456., 2528., 2600., 1628., 1044., 2744.,
      2816., 2888., 2960., 3032., 3104., 1936., 941.,  2246., 2298., 2350.,
      2402., 2454., 2506., 1463.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9248.,  13480., 18672., 25080., 31960., 27504., 23944., 21536.,
      12280., 18110., 24980., 33210., 41970., 36836., 31750., 26904.,
      14768., 22220., 30920., 41060., 51764., 46568., 40636., 34096.,
      16712., 25490., 35980., 48118., 60830., 56188., 50090., 42600.,
      16712., 25490., 35980., 48118., 60830., 56188., 50090., 42600.,
      15856., 23900., 33320., 43988., 55076., 49160., 42380., 34864.,
      13688., 20782., 28980., 38090., 47490., 44100., 36470., 28696.,
      10720., 16648., 23472., 30936., 38584., 37104., 32360., 24096.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   140.,   284.,   428.,   572.,   716.,   860.,   694.,
      420.,  1576.,  2120.,  2664.,  3208.,  3752.,  4296.,  2964.,
      1876., 5384.,  5928.,  6472.,  7016.,  7560.,  8104.,  5316.,
      3332., 9192.,  9736.,  10280., 10824., 11368., 11912., 7668.,
      4788., 13000., 13544., 14088., 14632., 15176., 15720., 10020.,
      6244., 16808., 17352., 17896., 18440., 18984., 19528., 12372.,
      7700., 20616., 21160., 21704., 22248., 22792., 23336., 14724.,
      7166., 17228., 17628., 18028., 18428., 18828., 19228., 11286.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6640.,  7504.,  9320.,  10440., 12440., 13832., 16016., 17696., 17584.,
      19320., 16664., 18200., 15240., 16560., 13296., 14384., 12956., 14080.,
      17461., 18852., 22410., 24088., 27823., 29808., 29889., 31944., 27154.,
      28948., 23767., 25280., 19708., 20920., 18728., 19976., 23792., 25348.,
      29364., 31252., 35468., 37712., 37716., 40044., 33684., 35724., 28920.,
      30648., 23400., 24792., 21780., 23272., 26873., 28744., 32598., 34876.,
      38983., 41696., 41609., 44420., 37022., 39488., 31563., 33656., 25204.,
      26896., 22420., 24104., 26889., 29000., 32086., 34652., 38039., 41088.,
      40665., 43812., 36062., 38816., 30491., 32824., 23924., 25808., 18408.,
      19992., 24836., 26812., 31940., 34332., 39744., 42576., 42272., 45188.,
      38532., 41076., 33892., 36040., 28328., 30056., 23132., 24496., 29457.,
      31148., 36346., 38384., 43819., 46224., 46053., 48528., 40930., 43084.,
      35035., 36848., 28348., 29800., 19312., 20336., 23248., 24504., 27576.,
      29080., 32312., 34080., 34056., 35880., 29624., 31208., 24608., 25936.,
      18992., 20048.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    6.,    16.,   14.,   28.,   22.,   40.,   30.,   52.,
      38.,   64.,   46.,   76.,   39.,   56.,   20.,   44.,   84.,   140.,
      116.,  180.,  148.,  220.,  180.,  260.,  212.,  300.,  244.,  340.,
      172.,  224.,  104.,  156.,  308.,  420.,  340.,  460.,  372.,  500.,
      404.,  540.,  436.,  580.,  468.,  620.,  312.,  392.,  188.,  268.,
      532.,  700.,  564.,  740.,  596.,  780.,  628.,  820.,  660.,  860.,
      692.,  900.,  452.,  560.,  272.,  380.,  756.,  980.,  788.,  1020.,
      820.,  1060., 852.,  1100., 884.,  1140., 916.,  1180., 592.,  728.,
      356.,  492.,  980.,  1260., 1012., 1300., 1044., 1340., 1076., 1380.,
      1108., 1420., 1140., 1460., 732.,  896.,  440.,  604.,  1204., 1540.,
      1236., 1580., 1268., 1620., 1300., 1660., 1332., 1700., 1364., 1740.,
      872.,  1064., 425.,  516.,  1030., 1216., 1054., 1244., 1078., 1272.,
      1102., 1300., 1126., 1328., 1150., 1356., 679.,  784.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3888.,  5360.,  5756.,  7724.,  8040.,  10632., 10868., 14212., 14084.,
      17876., 12072., 15432., 10508., 13436., 9520.,  12016., 5140.,  7140.,
      7765.,  10345., 10830., 14150., 14495., 18715., 18595., 23375., 16294.,
      20542., 14033., 17717., 11908., 14996., 6152.,  8616.,  9490.,  12730.,
      13420., 17500., 17974., 23086., 22990., 28774., 20700., 25868., 18074.,
      22562., 15176., 18920., 6924.,  9788.,  10835., 14655., 15554., 20426.,
      21049., 27069., 27013., 33817., 25034., 31154., 22375., 27715., 19068.,
      23532., 6924.,  9788.,  10835., 14655., 15554., 20426., 21049., 27069.,
      27013., 33817., 25034., 31154., 22375., 27715., 19068., 23532., 6632.,
      9224.,  10250., 13650., 14524., 18796., 19390., 24598., 24598., 30478.,
      21964., 27196., 18930., 23450., 15560., 19304., 5716.,  7972.,  8925.,
      11857., 12670., 16310., 16855., 21235., 21275., 26215., 19830., 24270.,
      16345., 20125., 12804., 15892., 4432.,  6288.,  7116.,  9532.,  10248.,
      13224., 13700., 17236., 17300., 21284., 16744., 20360., 14620., 17740.,
      10800., 13296.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   90.,    194.,  146.,   282.,  202.,
      370.,   258.,   458.,   314.,   546.,   281.,  413.,   118.,  302.,
      572.,   1004.,  812.,   1308.,  1052.,  1612., 1292.,  1916., 1532.,
      2220.,  1772.,  2524.,  1278.,  1686.,  734.,  1142.,  2252., 3132.,
      2492.,  3436.,  2732.,  3740.,  2972.,  4044., 3212.,  4348., 3452.,
      4652.,  2342.,  2974.,  1350.,  1982.,  3932., 5260.,  4172., 5564.,
      4412.,  5868.,  4652.,  6172.,  4892.,  6476., 5132.,  6780., 3406.,
      4262.,  1966.,  2822.,  5612.,  7388.,  5852., 7692.,  6092., 7996.,
      6332.,  8300.,  6572.,  8604.,  6812.,  8908., 4470.,  5550., 2582.,
      3662.,  7292.,  9516.,  7532.,  9820.,  7772., 10124., 8012., 10428.,
      8252.,  10732., 8492.,  11036., 5534.,  6838., 3198.,  4502., 8972.,
      11644., 9212.,  11948., 9452.,  12252., 9692., 12556., 9932., 12860.,
      10172., 13164., 6598.,  8126.,  3221.,  3945., 7874.,  9354., 8058.,
      9570.,  8242.,  9786.,  8426.,  10002., 8610., 10218., 8794., 10434.,
      5225.,  6061.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4176., 10704., 3896., 9592.,  2784., 7136.,  3224., 8664.,  4046., 10462.,
      4836., 12996., 5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502.,
      3736., 9176.,  4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724.,
      7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704., 4616., 12232.,
      5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414., 7692., 19116.,
      6394., 16298., 5128., 12744., 4616., 12232., 5578., 14586., 6924., 18348.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6264., 16056., 5844., 14388., 4176., 10704., 3224., 8664.,  4046., 10462.,
      4836., 12996., 5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502.,
      3736., 9176.,  2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816.,
      5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   636.,   1436.,  1052.,  2108.,  1468.,
      2780.,  1884.,  3452.,  2300.,  4124.,  2126.,  3166.,  780.,   2220.,
      4184.,  7576.,  6040.,  9944.,  7896.,  12312., 9752.,  14680., 11608.,
      17048., 13464., 19416., 9836.,  13068., 5484.,  8716.,  17176., 24152.,
      19032., 26520., 20888., 28888., 22744., 31256., 24600., 33624., 26456.,
      35992., 18124., 23148., 10188., 15212., 30168., 40728., 32024., 43096.,
      33880., 45464., 35736., 47832., 37592., 50200., 39448., 52568., 26412.,
      33228., 14892., 21708., 43160., 57304., 45016., 59672., 46872., 62040.,
      46168., 57752., 37272., 45272., 39128., 47640., 23948., 28460., 17036.,
      21548., 42840., 52376., 44696., 54744., 46552., 57112., 29464., 36440.,
      4184.,  7576.,  6040.,  9944.,  5100.,  7308.,  2796.,  5004.,  9752.,
      14680., 11608., 17048., 13464., 19416., 15320., 21784., 17176., 24152.,
      19032., 26520., 13388., 17388., 6110.,  7790.,  15452., 19068., 16892.,
      20764., 18332., 22460., 19772., 24156., 21212., 25852., 22652., 27548.,
      13838., 16414.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7856.,  8640.,  9456.,  10304., 10396., 11424., 12492., 13600., 13640.,
      14944., 16296., 17696., 17652., 19264., 20932., 22656., 20740., 22464.,
      24244., 26080., 18408., 19936., 21512., 23136., 14860., 16160., 17500.,
      18880., 14192., 15296., 16432., 17600., 12388., 13424., 14500., 15616.,
      17601., 18900., 20249., 21648., 23526., 25128., 26790., 28512., 30243.,
      32188., 34203., 36288., 34271., 36356., 38511., 40736., 31518., 33352.,
      35246., 37200., 27221., 28764., 30357., 32000., 23412., 24688., 26004.,
      27360., 16808., 18080., 19400., 20768., 20594., 22208., 23882., 25616.,
      25340., 27344., 29420., 31568., 31142., 33584., 36110., 38720., 35870.,
      38480., 41174., 43952., 31564., 33872., 36252., 38704., 25402., 27360.,
      29378., 31456., 21448., 23072., 24744., 26464., 16508., 18000., 19548.,
      21152., 23791., 25700., 27679., 29728., 32266., 34648., 37114., 39664.,
      41981., 44828., 47773., 50816., 47937., 50980., 54121., 57360., 44914.,
      47608., 50386., 53248., 39739., 42028., 44387., 46816., 34412., 36304.,
      38252., 40256., 24060., 25680., 27356., 29088., 30479., 32548., 34687.,
      36896., 38218., 40792., 43450., 46192., 45277., 48348., 51517., 54784.,
      51233., 54500., 57865., 61328., 45490., 48376., 51346., 54400., 37467.,
      39916., 42435., 45024., 31212., 33232., 35308., 37440., 16392., 17824.,
      19304., 20832., 23546., 25360., 27234., 29168., 31820., 34064., 36380.,
      38768., 41246., 43904., 46646., 49472., 46838., 49664., 52574., 55568.,
      43484., 45968., 48524., 51152., 38114., 40208., 42362., 44576., 32744.,
      34464., 36232., 38048., 22148., 23408., 24708., 26048., 27289., 28868.,
      30497., 32176., 33366., 35304., 37302., 39360., 38347., 40620., 42963.,
      45376., 42791., 45204., 47687., 50240., 36558., 38664., 40830., 43056.,
      28557., 30316., 32125., 33984., 22868., 24304., 25780., 27296., 9712.,
      10688., 11696., 12736., 14316., 15552., 16828., 18144., 19688., 21216.,
      22792., 24416., 25828., 27616., 29460., 31360., 29620., 31520., 33476.,
      35488., 28232., 29920., 31656., 33440., 25564., 27008., 28492., 30016.,
      21552., 22720., 23920., 25152.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   10.,   24.,   42.,   64.,   34.,   56.,
      82.,   112.,  58.,   88.,   122.,  160.,  82.,   120.,  162.,  208.,
      106.,  152.,  202.,  256.,  130.,  184.,  242.,  304.,  125.,  156.,
      189.,  224.,  38.,   80.,   126.,  176.,  236.,  336.,  444.,  560.,
      348.,  464.,  588.,  720.,  460.,  592.,  732.,  880.,  572.,  720.,
      876.,  1040., 684.,  848.,  1020., 1200., 796.,  976.,  1164., 1360.,
      590.,  688.,  790.,  896.,  318.,  416.,  518.,  624.,  1020., 1232.,
      1452., 1680., 1132., 1360., 1596., 1840., 1244., 1488., 1740., 2000.,
      1356., 1616., 1884., 2160., 1468., 1744., 2028., 2320., 1580., 1872.,
      2172., 2480., 1094., 1248., 1406., 1568., 598.,  752.,  910.,  1072.,
      1804., 2128., 2460., 2800., 1916., 2256., 2604., 2960., 2028., 2384.,
      2748., 3120., 2140., 2512., 2892., 3280., 2252., 2640., 3036., 3440.,
      2364., 2768., 3180., 3600., 1598., 1808., 2022., 2240., 878.,  1088.,
      1302., 1520., 2588., 3024., 3468., 3920., 2700., 3152., 3612., 4080.,
      2812., 3280., 3756., 4240., 2924., 3408., 3900., 4400., 3036., 3536.,
      4044., 4560., 3148., 3664., 4188., 4720., 2102., 2368., 2638., 2912.,
      1158., 1424., 1694., 1968., 3372., 3920., 4476., 5040., 3484., 4048.,
      4620., 5200., 3596., 4176., 4764., 5360., 3708., 4304., 4908., 5520.,
      3820., 4432., 5052., 5680., 3932., 4560., 5196., 5840., 2606., 2928.,
      3254., 3584., 1438., 1760., 2086., 2416., 4156., 4816., 5484., 6160.,
      4268., 4944., 5628., 6320., 4380., 5072., 5772., 6480., 4492., 5200.,
      5916., 6640., 4604., 5328., 6060., 6800., 4716., 5456., 6204., 6960.,
      3110., 3488., 3870., 4256., 1521., 1700., 1881., 2064., 3754., 4120.,
      4490., 4864., 3842., 4216., 4594., 4976., 3930., 4312., 4698., 5088.,
      4018., 4408., 4802., 5200., 4106., 4504., 4906., 5312., 4194., 4600.,
      5010., 5424., 2509., 2716., 2925., 3136.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 7032.,
      9560.,  12472., 15768., 8924.,  11980., 15484., 19436., 11516., 14956.,
      18844., 23180., 10488., 13528., 16952., 20760., 8596.,  11108., 13940.,
      17092., 5840.,  7696.,  9808.,  12176., 6660.,  8980.,  11620., 14580.,
      7597.,  10209., 13221., 16633., 8934.,  12030., 15606., 19662., 10799.,
      14571., 18903., 23795., 13079., 17331., 22143., 27515., 13174., 16974.,
      21254., 26014., 11333., 14489., 18045., 22001., 7428.,  9748.,  12388.,
      15348., 8248.,  11032., 14200., 17752., 8494.,  11686., 15358., 19510.,
      11012., 14740., 19044., 23924., 13594., 18114., 23306., 29170., 16202.,
      21298., 27066., 33506., 14404., 18900., 23972., 29620., 13406., 17174.,
      21422., 26150., 9272.,  12056., 15224., 18776., 10092., 13340., 17036.,
      21180., 10135., 13875., 18175., 23035., 12242., 16666., 21762., 27530.,
      16285., 21585., 27669., 34537., 19861., 25833., 32589., 40129., 17346.,
      22602., 28530., 35130., 14303., 18651., 23559., 29027., 10860., 14108.,
      17804., 21948., 10092., 13340., 17036., 21180., 10135., 13875., 18175.,
      23035., 12242., 16666., 21762., 27530., 16285., 21585., 27669., 34537.,
      19861., 25833., 32589., 40129., 17346., 22602., 28530., 35130., 14303.,
      18651., 23559., 29027., 10860., 14108., 17804., 21948., 9272.,  12056.,
      15224., 18776., 8542.,  11798., 15534., 19750., 10340., 14196., 18628.,
      23636., 14410., 18994., 24250., 30178., 18298., 23458., 29290., 35794.,
      14660., 19156., 24228., 29876., 11566., 15270., 19454., 24118., 9272.,
      12056., 15224., 18776., 7684.,  10004., 12644., 15604., 7645.,  10321.,
      13397., 16873., 8262.,  11486., 15190., 19374., 11615., 15451., 19847.,
      24803., 15175., 19491., 24367., 29803., 13430., 17230., 21510., 26270.,
      9493.,  12585., 16077., 19969., 7428.,  9748.,  12388., 15348., 5840.,
      7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 7032.,  9560.,
      12472., 15768., 8924.,  11980., 15484., 19436., 11516., 14956., 18844.,
      23180., 10488., 13528., 16952., 20760., 8596.,  11108., 13940., 17092.,
      5840.,  7696.,  9808.,  12176.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   234.,
      402.,   602.,   834.,   410.,   642.,   906.,   1202.,  586.,   882.,
      1210.,  1570.,  762.,   1122.,  1514.,  1938.,  938.,   1362.,  1818.,
      2306.,  941.,   1185.,  1445.,  1721.,  226.,   554.,   914.,   1306.,
      1700.,  2484.,  3332.,  4244.,  2564.,  3476.,  4452.,  5492.,  3428.,
      4468.,  5572.,  6740.,  4292.,  5460.,  6692.,  7988.,  5156.,  6452.,
      7812.,  9236.,  6020.,  7444.,  8932.,  10484., 4530.,  5306.,  6114.,
      6954.,  2354.,  3130.,  3938.,  4778.,  7748.,  9428.,  11172., 12980.,
      8612.,  10420., 12292., 14228., 9476.,  11412., 13412., 15476., 10340.,
      12404., 14532., 16724., 11204., 13396., 15652., 17972., 12068., 14388.,
      16772., 19220., 8450.,  9674.,  10930., 12218., 4482.,  5706.,  6962.,
      8250.,  13796., 16372., 19012., 21716., 14660., 17364., 20132., 22964.,
      15524., 18356., 21252., 24212., 16388., 19348., 22372., 25460., 17252.,
      20340., 23492., 26708., 18116., 21332., 24612., 27956., 12370., 14042.,
      15746., 17482., 6610.,  8282.,  9986.,  11722., 19844., 23316., 26852.,
      30452., 20708., 24308., 27972., 31700., 21572., 25300., 29092., 32948.,
      22436., 26292., 30212., 34196., 23300., 27284., 31332., 35444., 24164.,
      28276., 32452., 36692., 16290., 18410., 20562., 22746., 8738.,  10858.,
      13010., 15194., 25892., 30260., 34692., 39188., 26756., 31252., 35812.,
      40436., 27620., 32244., 36932., 41684., 28484., 33236., 38052., 42932.,
      29348., 34228., 39172., 44180., 30212., 35220., 40292., 45428., 20210.,
      22778., 25378., 28010., 10866., 13434., 16034., 18666., 31940., 37204.,
      42532., 47924., 32804., 38196., 43652., 49172., 33668., 39188., 44772.,
      50420., 34532., 40180., 45892., 51668., 35396., 41172., 47012., 52916.,
      36260., 42164., 48132., 54164., 24130., 27146., 30194., 33274., 11813.,
      13241., 14685., 16145., 29306., 32226., 35178., 38162., 29994., 32978.,
      35994., 39042., 30682., 33730., 36810., 39922., 31370., 34482., 37626.,
      40802., 32058., 35234., 38442., 41682., 32746., 35986., 39258., 42562.,
      19661., 21313., 22981., 24665.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,
      16920., 480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920.,
      750.,   4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,
      6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,
      13380., 25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,
      16920., 720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380.,
      1080.,  6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,
      7308.,  18732., 35532., 1080.,  6264.,  16056., 30456., 900.,   5220.,
      13380., 25380., 720.,   4176.,  10704., 20304., 840.,   4872.,  12488.,
      23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732., 35532.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,
      7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610.,
      29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,
      6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 720.,   4176.,
      10704., 20304., 900.,   5220.,  13380., 25380., 1080.,  6264.,  16056.,
      30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532.,
      1080.,  6264.,  16056., 30456., 900.,   5220.,  13380., 25380., 720.,
      4176.,  10704., 20304., 600.,   3480.,  8920.,  16920., 750.,   4350.,
      11150., 21150., 900.,   5220.,  13380., 25380., 1050.,  6090.,  15610.,
      29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380., 25380.,
      750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920., 480.,
      2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,   4176.,
      10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1724.,
      3036.,  4604.,  6428.,  3068.,  4892.,  6972.,  9308.,  3772.,  5084.,
      6652.,  8476.,  380.,   1180.,  2236.,  3548.,  1724.,  3036.,  4604.,
      6428.,  2558.,  3470.,  4510.,  5678.,  860.,   2428.,  4252.,  6332.,
      6840.,  9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 15672.,
      19832., 24504., 29688., 13624., 17784., 22456., 27640., 6840.,  9976.,
      13624., 17784., 8888.,  12024., 15672., 19832., 8348.,  10428., 12764.,
      15356., 7324.,  9404.,  11740., 14332., 13624., 17784., 22456., 27640.,
      6840.,  9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 15672.,
      19832., 24504., 29688., 13624., 17784., 22456., 27640., 6840.,  9976.,
      13624., 17784., 3932.,  5500.,  7324.,  9404.,  4956.,  6524.,  8348.,
      10428., 15672., 19832., 24504., 29688., 13624., 17784., 22456., 27640.,
      6840.,  9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 15672.,
      19832., 24504., 29688., 13624., 17784., 22456., 27640., 4252.,  6332.,
      8668.,  11260., 2588.,  3644.,  4956.,  6524.,  8888.,  12024., 15672.,
      19832., 15672., 19832., 24504., 29688., 13624., 17784., 22456., 27640.,
      6840.,  9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 15672.,
      19832., 24504., 29688., 12764., 15356., 18204., 21308., 860.,   2428.,
      4252.,  6332.,  6840.,  9976.,  13624., 17784., 8888.,  12024., 15672.,
      19832., 15672., 19832., 24504., 29688., 13624., 17784., 22456., 27640.,
      6840.,  9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 8348.,
      10428., 12764., 15356., 7324.,  9404.,  11740., 14332., 13624., 17784.,
      22456., 27640., 6840.,  9976.,  13624., 17784., 8888.,  12024., 15672.,
      19832., 15672., 19832., 24504., 29688., 13624., 17784., 22456., 27640.,
      6840.,  9976.,  13624., 17784., 3932.,  5500.,  7324.,  9404.,  4766.,
      5934.,  7230.,  8654.,  13948., 16796., 19900., 23260., 10556., 12892.,
      15484., 18332., 3068.,  4892.,  6972.,  9308.,  8508.,  10844., 13436.,
      16284., 13948., 16796., 19900., 23260., 10556., 12892., 15484., 18332.,
      510.,   1422.,  2462.,  3630.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2048.,  2840.,  3752.,  4788.,  5194.,  5600.,  5240.,  4740.,  4096.,
      4220.,  5725.,  7420.,  9310.,  9940.,  10570., 9730.,  8675.,  7400.,
      7560.,  10110., 12936., 16044., 16947., 17850., 16248., 14340., 12120.,
      12320., 16310., 20678., 25431., 26656., 27881., 25172., 22050., 18508.,
      18242., 23870., 29939., 36456., 37681., 38906., 34811., 30240., 25186.,
      23424., 30315., 37632., 45381., 46578., 47775., 42348., 36465., 30120.,
      26430., 34000., 41965., 50330., 51450., 52570., 46345., 39700., 32630.,
      27008., 34610., 42560., 50862., 51856., 52850., 46424., 39630., 32464.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   10.,  16.,  22.,  28.,  34.,  32.,  21.,  12.,  38.,  80.,
      101., 122., 143., 164., 138., 84.,  47.,  122., 227., 248., 269., 290.,
      311., 250., 147., 82.,  206., 374., 395., 416., 437., 458., 362., 210.,
      117., 290., 521., 542., 563., 584., 605., 474., 273., 152., 374., 668.,
      689., 710., 731., 752., 586., 336., 187., 458., 815., 836., 857., 878.,
      899., 698., 399., 172., 391., 658., 673., 688., 703., 718., 533., 294.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5808.,  7652.,  9832.,  12348., 11764., 10924., 10344., 9044.,  7344.,
      9196.,  12629., 15546., 18851., 19021., 18935., 15706., 11545., 7916.,
      12872., 15686., 17132., 19018., 19214., 19026., 15884., 12590., 10888.,
      13540., 17583., 21582., 26105., 26303., 26117., 21070., 16555., 12516.,
      17756., 20441., 24226., 27375., 26069., 25243., 22546., 19237., 15516.,
      13496., 16850., 20292., 23870., 23090., 23814., 19012., 14650., 11192.,
      14100., 16267., 17510., 17613., 17639., 18017., 14870., 11167., 9684.,
      9552.,  11756., 14296., 16596., 16108., 16996., 14360., 12348., 9680.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   59.,   101.,  143.,  185.,  227.,  222.,  149.,
      70.,   244.,  538.,  694.,  850.,  1006., 1162., 996.,  614.,
      322.,  860.,  1630., 1786., 1942., 2098., 2254., 1836., 1090.,
      574.,  1476., 2722., 2878., 3034., 3190., 3346., 2676., 1566.,
      826.,  2092., 3814., 3970., 4126., 4282., 4438., 3516., 2042.,
      1078., 2708., 4906., 5062., 5218., 5374., 5530., 4356., 2518.,
      1330., 3324., 5998., 6154., 6310., 6466., 6622., 5196., 2994.,
      1283., 2938., 4973., 5087., 5201., 5315., 5429., 4050., 2243.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13536., 19288., 26064., 30024., 31848., 29256., 25040., 18520., 13536.,
      20280., 28110., 33204., 39978., 39266., 38234., 29172., 21246., 13944.,
      27728., 33604., 41368., 47116., 48028., 44524., 34584., 24932., 19280.,
      31528., 39738., 46076., 55086., 53590., 51774., 40700., 33354., 25192.,
      34120., 39666., 47372., 53590., 51774., 50278., 41612., 32642., 27016.,
      31440., 37684., 41592., 47644., 44524., 45820., 34232., 27156., 20112.,
      28952., 31798., 36004., 38626., 38234., 38162., 32036., 22630., 18136.,
      22816., 26424., 27728., 31080., 29256., 31848., 26896., 23480., 17248.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   140.,   394.,   706.,   1018.,  1330.,  1642.,  1644.,  1118.,
      460.,  1720.,  3908.,  5108.,  6308.,  7508.,  8708.,  7544.,  4684.,
      2364., 6424.,  12308., 13508., 14708., 15908., 17108., 14040., 8380.,
      4268., 11128., 20708., 21908., 23108., 24308., 25508., 20536., 12076.,
      6172., 15832., 29108., 30308., 31508., 32708., 33908., 27032., 15772.,
      8076., 20536., 37508., 38708., 39908., 41108., 42308., 33528., 19468.,
      9980., 25240., 45908., 47108., 48308., 49508., 50708., 40024., 23164.,
      9894., 22748., 38626., 39514., 40402., 41290., 42178., 31548., 17510.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7280.,  8192.,  10180., 11360., 13480., 14880., 17132., 18768., 18380.,
      20008., 19500., 21120., 17768., 19168., 15492., 16656., 12656., 13568.,
      14396., 15600., 19361., 20852., 23850., 25584., 28715., 30712., 29565.,
      31568., 30287., 32296., 26450., 28168., 21901., 23308., 16620., 17696.,
      21448., 22816., 27214., 28920., 31692., 33696., 36634., 38960., 36770.,
      39116., 36778., 39144., 31340., 33376., 25086., 26768., 17992., 19296.,
      25860., 27520., 31927., 34008., 35958., 38424., 40605., 43484., 40223.,
      43136., 39713., 42660., 33374., 35920., 26051., 28168., 17716., 19376.,
      27476., 29192., 32801., 34936., 35190., 37708., 38191., 41120., 36081.,
      38980., 34675., 37608., 32134., 34668., 28613., 30720., 24084., 25736.,
      22072., 23680., 28646., 30636., 35428., 37760., 42762., 45460., 42858.,
      45512., 44554., 47228., 39348., 41648., 33238., 35140., 26200., 27680.,
      24476., 25848., 29995., 31680., 34706., 36660., 39845., 42088., 37855.,
      40040., 38361., 40552., 32594., 34468., 26063., 27600., 18748., 19928.,
      17296., 18304., 19204., 20424., 21464., 22912., 24092., 25784., 22316.,
      24000., 24060., 25800., 20600., 22112., 16580., 17848., 11984., 12992.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    6.,    16.,   19.,   40.,   37.,   64.,   55.,   88.,
      73.,   112.,  91.,   136.,  94.,   128.,  65.,   84.,   22.,   48.,
      92.,   152.,  218.,  320.,  290.,  404.,  362.,  488.,  434.,  572.,
      506.,  656.,  444.,  552.,  278.,  336.,  134.,  188.,  372.,  488.,
      722.,  908.,  794.,  992.,  866.,  1076., 938.,  1160., 1010., 1244.,
      836.,  1000., 502.,  588.,  246.,  328.,  652.,  824.,  1226., 1496.,
      1298., 1580., 1370., 1664., 1442., 1748., 1514., 1832., 1228., 1448.,
      726.,  840.,  358.,  468.,  932.,  1160., 1730., 2084., 1802., 2168.,
      1874., 2252., 1946., 2336., 2018., 2420., 1620., 1896., 950.,  1092.,
      470.,  608.,  1212., 1496., 2234., 2672., 2306., 2756., 2378., 2840.,
      2450., 2924., 2522., 3008., 2012., 2344., 1174., 1344., 582.,  748.,
      1492., 1832., 2738., 3260., 2810., 3344., 2882., 3428., 2954., 3512.,
      3026., 3596., 2404., 2792., 1398., 1596., 595.,  688.,  1374., 1564.,
      2341., 2632., 2395., 2692., 2449., 2752., 2503., 2812., 2557., 2872.,
      1918., 2132., 1067., 1176.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5840.,  7696.,  8420.,  10868., 11512., 14552., 13196., 16828., 14076.,
      17772., 12812., 16444., 11000., 14040., 8036.,  10484., 5840.,  7696.,
      8820.,  11460., 12429., 15681., 14654., 18550., 17703., 22275., 17323.,
      21943., 16847., 21387., 12702., 16470., 9141.,  12105., 5844.,  8100.,
      12216., 15512., 14774., 18830., 18308., 23060., 20802., 26314., 21242.,
      26786., 19538., 24986., 15044., 19540., 10662., 14270., 8248.,  11032.,
      13852., 17676., 17503., 22235., 20234., 25842., 24317., 30769., 23561.,
      30029., 22709., 29065., 17674., 23026., 14487., 18867., 10876., 14316.,
      15116., 19004., 17443., 22223., 20866., 26506., 23561., 30029., 22709.,
      29065., 21953., 28325., 18114., 23498., 14107., 18535., 11756., 15260.,
      13944., 17496., 16702., 20982., 18324., 23268., 21050., 26594., 19538.,
      24986., 20170., 25650., 14836., 19396., 11726., 15430., 8600.,  11512.,
      12932., 16020., 14073., 17725., 15942., 20062., 17003., 21623., 16847.,
      21387., 16787., 21375., 14086., 17950., 9761.,  12869., 7844.,  10292.,
      10160., 12656., 11764., 14660., 12216., 15512., 13692., 17388., 12812.,
      16444., 14076., 17772., 11864., 15032., 10420., 13060., 7568.,  9680.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   251.,   455.,   383.,
      635.,   515.,   815.,   647.,   995.,   690.,   954.,   485.,   633.,
      130.,   330.,   628.,   1092.,  1558.,  2350.,  2110.,  2998.,  2662.,
      3646.,  3214.,  4294.,  3766.,  4942.,  3348.,  4196.,  2114.,  2570.,
      970.,   1394.,  2756.,  3668.,  5422.,  6886.,  5974.,  7534.,  6526.,
      8182.,  7078.,  8830.,  7630.,  9478.,  6372.,  7668.,  3850.,  4530.,
      1810.,  2458.,  4884.,  6244.,  9286.,  11422., 9838.,  12070., 10390.,
      12718., 10942., 13366., 11494., 14014., 9396.,  11140., 5586.,  6490.,
      2650.,  3522.,  7012.,  8820.,  13150., 15958., 13702., 16606., 14254.,
      17254., 14806., 17902., 15358., 18550., 12420., 14612., 7322.,  8450.,
      3490.,  4586.,  9140.,  11396., 17014., 20494., 17566., 21142., 18118.,
      21790., 18670., 22438., 19222., 23086., 15444., 18084., 9058.,  10410.,
      4330.,  5650.,  11268., 13972., 20878., 25030., 21430., 25678., 21982.,
      26326., 22534., 26974., 23086., 27622., 18468., 21556., 10794., 12370.,
      4577.,  5317.,  10618., 12130., 18155., 20471., 18575., 20939., 18995.,
      21407., 19415., 21875., 19835., 22343., 14922., 16626., 8321.,  9189.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3808.,  8160.,  2200.,  7640.,  5712.,  12240., 3080.,  10696., 6664.,
      14280., 3080.,  10696., 5712.,  12240., 2200.,  7640.,  3808.,  8160.,
      2200.,  7640.,  5742.,  12414., 3300.,  11460., 8122.,  17514., 3850.,
      13370., 8122.,  17514., 3300.,  11460., 5742.,  12414., 2200.,  7640.,
      5712.,  12240., 3300.,  11460., 8568.,  18360., 4620.,  16044., 9996.,
      21420., 4620.,  16044., 8568.,  18360., 3300.,  11460., 5712.,  12240.,
      3080.,  10696., 8122.,  17514., 4620.,  16044., 11454., 24654., 5390.,
      18718., 11454., 24654., 4620.,  16044., 8122.,  17514., 3080.,  10696.,
      6664.,  14280., 3850.,  13370., 9996.,  21420., 5390.,  18718., 11454.,
      24654., 5390.,  18718., 9996.,  21420., 3850.,  13370., 6664.,  14280.,
      2640.,  9168.,  7140.,  15300., 3960.,  13752., 9996.,  21420., 4620.,
      16044., 9996.,  21420., 3960.,  13752., 7140.,  15300., 2640.,  9168.,
      4760.,  10200., 2750.,  9550.,  7140.,  15300., 3850.,  13370., 8122.,
      17514., 3850.,  13370., 7140.,  15300., 2750.,  9550.,  4760.,  10200.,
      1760.,  6112.,  4760.,  10200., 2640.,  9168.,  6664.,  14280., 3080.,
      10696., 6664.,  14280., 2640.,  9168.,  4760.,  10200., 1760.,  6112.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  1834.,  3418.,  2842.,
      4810.,  3850.,  6202.,  4858.,  7594.,  5276.,  7356.,  3742.,  4910.,
      860.,   2428.,  4600.,  8248.,  11732., 17972., 16052., 23060., 20372.,
      28148., 24692., 33236., 29012., 38324., 25976., 32696., 16476., 20092.,
      7356.,  10716., 21176., 28408., 40692., 50260., 39636., 47924., 34484.,
      41492., 38804., 46580., 43124., 51668., 34872., 41080., 20668., 24028.,
      12572., 15676., 31096., 37816., 42516., 51316., 29172., 36692., 11732.,
      17972., 16052., 23060., 20372., 28148., 19192., 24888., 12572., 15676.,
      5500.,  8348.,  16440., 22648., 33332., 43412., 37652., 48500., 40692.,
      50260., 39636., 47924., 34484., 41492., 28088., 33272., 16764., 19612.,
      10716., 13308., 26360., 32056., 47444., 56756., 51764., 61844., 42516.,
      51316., 29172., 36692., 11732., 17972., 12408., 17080., 8668.,  11260.,
      3644.,  5980.,  11704., 16888., 24692., 33236., 29012., 38324., 33332.,
      43412., 37652., 48500., 40692., 50260., 30776., 36984., 12860., 15196.,
      8750.,  10558., 20988., 24860., 36970., 43162., 40282., 46858., 43594.,
      50554., 46906., 54250., 36650., 42330., 21180., 24540., 430.,   1214.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9808.,  10688., 11600., 12544., 12948., 14096., 15284., 16512., 16824.,
      18208., 19640., 21120., 21308., 22960., 24668., 26432., 20172., 21808.,
      23500., 25248., 18524., 20144., 21820., 23552., 17848., 19232., 20664.,
      22144., 15796., 16912., 18068., 19264., 12880., 13760., 14672., 15616.,
      15940., 17136., 18372., 19648., 22185., 23684., 25233., 26832., 27446.,
      29224., 31062., 32960., 33403., 35500., 37667., 39904., 33719., 35828.,
      38007., 40256., 33523., 35644., 37835., 40096., 27702., 29512., 31382.,
      33312., 20097., 21556., 23065., 24624., 13508., 14640., 15812., 17024.,
      22776., 24224., 25720., 27264., 27710., 29496., 31342., 33248., 29940.,
      32048., 34228., 36480., 32954., 35432., 37994., 40640., 33394., 35848.,
      38386., 41008., 33066., 35496., 38010., 40608., 27572., 29616., 31732.,
      33920., 21742., 23416., 25150., 26944., 19064., 20384., 21752., 23168.,
      23468., 25232., 27052., 28928., 30659., 32860., 35131., 37472., 37778.,
      40408., 43122., 45920., 45961., 49012., 52161., 55408., 46349., 49404.,
      52557., 55808., 45969., 49028., 52185., 55440., 36818., 39416., 42098.,
      44864., 28715., 30860., 33075., 35360., 21548., 23248., 25004., 26816.,
      31804., 33616., 35484., 37408., 36287., 38532., 40847., 43232., 42986.,
      45656., 48410., 51248., 48429., 51516., 54701., 57984., 45937., 48964.,
      52089., 55312., 44277., 47308., 50437., 53664., 39818., 42392., 45050.,
      47792., 34119., 36244., 38439., 40704., 27580., 29264., 31004., 32800.,
      23704., 25312., 26968., 28672., 29670., 31640., 33670., 35760., 35844.,
      38160., 40548., 43008., 42322., 44968., 47698., 50512., 40810., 43432.,
      46138., 48928., 42178., 44840., 47586., 50416., 33412., 35664., 37988.,
      40384., 25494., 27352., 29270., 31248., 19352., 20832., 22360., 23936.,
      25332., 26736., 28180., 29664., 29069., 30764., 32509., 34304., 31006.,
      32968., 34990., 37072., 30711., 32916., 35191., 37536., 30867., 33020.,
      35243., 37536., 31599., 33764., 35999., 38304., 26046., 27848., 29710.,
      31632., 19333., 20796., 22309., 23872., 17012., 18160., 19348., 20576.,
      16912., 17984., 19088., 20224., 20868., 22160., 23492., 24864., 25432.,
      26976., 28568., 30208., 29580., 31344., 33164., 35040., 28636., 30384.,
      32188., 34048., 30316., 32112., 33964., 35872., 25560., 27104., 28696.,
      30336., 21988., 23312., 24676., 26080., 17168., 18240., 19344., 20480.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   103.,   148.,   199.,   256.,   163.,   220.,
      283.,   352.,   223.,   292.,   367.,   448.,   283.,   364.,   451.,
      544.,   314.,   376.,   442.,   512.,   225.,   260.,   297.,   336.,
      42.,    88.,    138.,   192.,   260.,   368.,   484.,   608.,   686.,
      872.,   1070.,  1280.,  950.,   1160.,  1382.,  1616.,  1214.,  1448.,
      1694.,  1952.,  1478.,  1736.,  2006.,  2288.,  1742.,  2024.,  2318.,
      2624.,  1572.,  1776.,  1988.,  2208.,  1002.,  1112.,  1226.,  1344.,
      434.,   536.,   642.,   752.,   1268.,  1488.,  1716.,  1952.,  2534.,
      2888.,  3254.,  3632.,  2798.,  3176.,  3566.,  3968.,  3062.,  3464.,
      3878.,  4304.,  3326.,  3752.,  4190.,  4640.,  3590.,  4040.,  4502.,
      4976.,  3028.,  3344.,  3668.,  4000.,  1842.,  2008.,  2178.,  2352.,
      826.,   984.,   1146.,  1312.,  2276.,  2608.,  2948.,  3296.,  4382.,
      4904.,  5438.,  5984.,  4646.,  5192.,  5750.,  6320.,  4910.,  5480.,
      6062.,  6656.,  5174.,  5768.,  6374.,  6992.,  5438.,  6056.,  6686.,
      7328.,  4484.,  4912.,  5348.,  5792.,  2682.,  2904.,  3130.,  3360.,
      1218.,  1432.,  1650.,  1872.,  3284.,  3728.,  4180.,  4640.,  6230.,
      6920.,  7622.,  8336.,  6494.,  7208.,  7934.,  8672.,  6758.,  7496.,
      8246.,  9008.,  7022.,  7784.,  8558.,  9344.,  7286.,  8072.,  8870.,
      9680.,  5940.,  6480.,  7028.,  7584.,  3522.,  3800.,  4082.,  4368.,
      1610.,  1880.,  2154.,  2432.,  4292.,  4848.,  5412.,  5984.,  8078.,
      8936.,  9806.,  10688., 8342.,  9224.,  10118., 11024., 8606.,  9512.,
      10430., 11360., 8870.,  9800.,  10742., 11696., 9134.,  10088., 11054.,
      12032., 7396.,  8048.,  8708.,  9376.,  4362.,  4696.,  5034.,  5376.,
      2002.,  2328.,  2658.,  2992.,  5300.,  5968.,  6644.,  7328.,  9926.,
      10952., 11990., 13040., 10190., 11240., 12302., 13376., 10454., 11528.,
      12614., 13712., 10718., 11816., 12926., 14048., 10982., 12104., 13238.,
      14384., 8852.,  9616.,  10388., 11168., 5202.,  5592.,  5986.,  6384.,
      2197.,  2380.,  2565.,  2752.,  5122.,  5496.,  5874.,  6256.,  8791.,
      9364.,  9943.,  10528., 8995.,  9580.,  10171., 10768., 9199.,  9796.,
      10399., 11008., 9403.,  10012., 10627., 11248., 9607.,  10228., 10855.,
      11488., 7250.,  7672.,  8098.,  8528.,  4053.,  4268.,  4485.,  4704.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6352.,  8208.,  10320., 12688., 6660.,  8980.,  11620., 14580., 9528.,
      12312., 15480., 19032., 9324.,  12572., 16268., 20412., 10604., 13852.,
      17548., 21692., 9324.,  12572., 16268., 20412., 9528.,  12312., 15480.,
      19032., 6660.,  8980.,  11620., 14580., 6352.,  8208.,  10320., 12688.,
      6148.,  8468.,  11108., 14068., 10045., 12849., 16053., 19657., 9894.,
      13246., 17078., 21390., 12479., 16443., 20967., 26051., 10887., 14947.,
      19567., 24747., 14319., 18347., 22935., 28083., 10758., 14238., 18198.,
      22638., 9069.,  11937., 15205., 18873., 6148.,  8468.,  11108., 14068.,
      9528.,  12312., 15480., 19032., 9430.,  12846., 16742., 21118., 13428.,
      17476., 22100., 27300., 13682., 18490., 23970., 30122., 17442., 22314.,
      27858., 34074., 13426., 18234., 23714., 29866., 13428., 17476., 22100.,
      27300., 9686.,  13102., 16998., 21374., 9528.,  12312., 15480., 19032.,
      9836.,  13084., 16780., 20924., 12783., 16811., 21399., 26547., 13218.,
      18090., 23634., 29850., 20133., 25785., 32221., 39441., 17085., 22769.,
      29237., 36489., 18037., 23625., 29997., 37153., 12354., 17098., 22514.,
      28602., 14015., 17979., 22503., 27587., 9836.,  13084., 16780., 20924.,
      11116., 14364., 18060., 22204., 11447., 15571., 20255., 25499., 17234.,
      22170., 27778., 34058., 17085., 22769., 29237., 36489., 18037., 23625.,
      29997., 37153., 14989., 20609., 27013., 34201., 16114., 20922., 26402.,
      32554., 12423., 16483., 21103., 26283., 11116., 14364., 18060., 22204.,
      7992.,  10776., 13944., 17496., 13542., 17150., 21238., 25806., 12596.,
      16900., 21780., 27236., 16162., 21034., 26578., 32794., 13426., 18234.,
      23714., 29866., 17442., 22314., 27858., 34074., 11988., 16164., 20916.,
      26244., 11142., 14622., 18582., 23022., 7992.,  10776., 13944., 17496.,
      7940.,  10260., 12900., 15860., 9397.,  12361., 15725., 19489., 12470.,
      16014., 20038., 24542., 10631., 14691., 19311., 24491., 14319., 18347.,
      22935., 28083., 12983., 17107., 21791., 27035., 12470., 16014., 20038.,
      24542., 7557.,  10457., 13757., 17457., 7940.,  10260., 12900., 15860.,
      5328.,  7184.,  9296.,  11664., 7428.,  9748.,  12388., 15348., 7992.,
      10776., 13944., 17496., 11628., 14876., 18572., 22716., 9324.,  12572.,
      16268., 20412., 10604., 13852., 17548., 21692., 7992.,  10776., 13944.,
      17496., 8452.,  10772., 13412., 16372., 5328.,  7184.,  9296.,  11664.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  743.,   1091.,  1487.,  1931.,  1199.,  1643.,
      2135.,  2675.,  1655.,  2195.,  2783.,  3419.,  2111.,  2747.,  3431.,
      4163.,  2394.,  2882.,  3402.,  3954.,  1733.,  2009.,  2301.,  2609.,
      250.,   610.,   1002.,  1426.,  1876.,  2724.,  3636.,  4612.,  5134.,
      6598.,  8158.,  9814.,  7198.,  8854.,  10606., 12454., 9262.,  11110.,
      13054., 15094., 11326., 13366., 15502., 17734., 13390., 15622., 17950.,
      20374., 12180., 13796., 15476., 17220., 7802.,  8674.,  9578.,  10514.,
      3274.,  4082.,  4922.,  5794.,  9716.,  11460., 13268., 15140., 19198.,
      21494., 23886., 26374., 18830., 20806., 22878., 25046., 16414., 18070.,
      19822., 21670., 18478., 20326., 22270., 24310., 20542., 22582., 24718.,
      26950., 16692., 18180., 19732., 21348., 9930.,  10738., 11578., 12450.,
      5914.,  6658.,  7434.,  8242.,  14740., 16356., 18036., 19780., 20206.,
      22310., 24510., 26806., 13694., 15478., 17358., 19334., 5134.,  6598.,
      8158.,  9814.,  7198.,  8854.,  10606., 12454., 9262.,  11110., 13054.,
      15094., 8916.,  10276., 11700., 13188., 5914.,  6658.,  7434.,  8242.,
      2410.,  3090.,  3802.,  4546.,  7476.,  8964.,  10516., 12132., 15454.,
      17878., 20398., 23014., 17518., 20134., 22846., 25654., 19198., 21494.,
      23886., 26374., 18830., 20806., 22878., 25046., 16414., 18070., 19822.,
      21670., 13428., 14660., 15956., 17316., 8042.,  8722.,  9434.,  10178.,
      5050.,  5666.,  6314.,  6994.,  12500., 13860., 15284., 16772., 22606.,
      24838., 27166., 29590., 24670., 27094., 29614., 32230., 20206., 22310.,
      24510., 26806., 13694., 15478., 17358., 19334., 5134.,  6598.,  8158.,
      9814.,  5652.,  6756.,  7924.,  9156.,  4026.,  4642.,  5290.,  5970.,
      1546.,  2098.,  2682.,  3298.,  5236.,  6468.,  7764.,  9124.,  11326.,
      13366., 15502., 17734., 13390., 15622., 17950., 20374., 15454., 17878.,
      20398., 23014., 17518., 20134., 22846., 25654., 19198., 21494., 23886.,
      26374., 14644., 16132., 17684., 19300., 6154.,  6706.,  7290.,  7906.,
      4157.,  4593.,  5045.,  5513.,  10026., 10962., 11930., 12930., 17735.,
      19235., 20783., 22379., 19343., 20939., 22583., 24275., 20951., 22643.,
      24383., 26171., 22559., 24347., 26183., 28067., 17639., 19011., 20431.,
      21899., 10186., 10994., 11834., 12706., 125.,   305.,   501.,   713.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  2074.,
      4042.,  6394.,  9130.,  5626.,  8362.,  11482., 14986., 8538.,  11018.,
      13882., 17130., 7354.,  9578.,  12186., 15178., 2074.,  4042.,  6394.,
      9130.,  5116.,  6940.,  9020.,  11356., 4766.,  5934.,  7230.,  8654.,
      1020.,  2844.,  4924.,  7260.,  7544.,  10168., 13304., 16952., 14708.,
      19156., 24372., 30356., 14004., 18964., 24692., 31188., 9204.,  14676.,
      20916., 27924., 16052., 21012., 26740., 33236., 14708., 19156., 24372.,
      30356., 3448.,  6072.,  9208.,  12856., 5116.,  6940.,  9020.,  11356.,
      10556., 12892., 15484., 18332., 4088.,  7736.,  11896., 16568., 16052.,
      21012., 26740., 33236., 14708., 19156., 24372., 30356., 14004., 18964.,
      24692., 31188., 9204.,  14676., 20916., 27924., 16052., 21012., 26740.,
      33236., 7544.,  10168., 13304., 16952., 1724.,  3036.,  4604.,  6428.,
      7164.,  8988.,  11068., 13404., 12280., 15928., 20088., 24760., 9204.,
      14676., 20916., 27924., 16052., 21012., 26740., 33236., 14708., 19156.,
      24372., 30356., 14004., 18964., 24692., 31188., 9204.,  14676., 20916.,
      27924., 12280., 15928., 20088., 24760., 7164.,  8988.,  11068., 13404.,
      3772.,  5084.,  6652.,  8476.,  7544.,  10168., 13304., 16952., 14004.,
      18964., 24692., 31188., 9204.,  14676., 20916., 27924., 16052., 21012.,
      26740., 33236., 14708., 19156., 24372., 30356., 14004., 18964., 24692.,
      31188., 8184.,  11832., 15992., 20664., 8508.,  10844., 13436., 16284.,
      1020.,  2844.,  4924.,  7260.,  7544.,  10168., 13304., 16952., 14708.,
      19156., 24372., 30356., 14004., 18964., 24692., 31188., 9204.,  14676.,
      20916., 27924., 16052., 21012., 26740., 33236., 14708., 19156., 24372.,
      30356., 3448.,  6072.,  9208.,  12856., 5116.,  6940.,  9020.,  11356.,
      10556., 12892., 15484., 18332., 4088.,  7736.,  11896., 16568., 16052.,
      21012., 26740., 33236., 14708., 19156., 24372., 30356., 14004., 18964.,
      24692., 31188., 9204.,  14676., 20916., 27924., 16052., 21012., 26740.,
      33236., 7544.,  10168., 13304., 16952., 1724.,  3036.,  4604.,  6428.,
      6974.,  8398.,  9950.,  11630., 10556., 12892., 15484., 18332., 3578.,
      6314.,  9434.,  12938., 7514.,  9994.,  12858., 16106., 7354.,  9578.,
      12186., 15178., 11930., 14922., 18298., 22058., 3578.,  6314.,  9434.,
      12938., 3772.,  5084.,  6652.,  8476.,  190.,   590.,   1118.,  1774.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2220.,  3070.,  4046.,  5152.,  5558.,  5964.,  6370.,  5930.,  5340.,
      4596.,  4600.,  6225.,  8050.,  10080., 10710., 11340., 11970., 10975.,
      9750.,  8290.,  8270.,  11035., 14091., 17444., 18347., 19250., 20153.,
      18285., 16090., 13562., 13510., 17850., 22589., 27734., 28959., 30184.,
      31409., 28280., 24710., 20692., 20090., 26250., 32879., 39984., 41209.,
      42434., 43659., 38990., 33810., 28112., 25850., 33415., 41433., 49910.,
      51107., 52304., 53501., 47355., 40720., 33590., 29200., 37525., 46270.,
      55440., 56560., 57680., 58800., 51775., 44300., 36370., 29860., 38230.,
      46970., 56084., 57078., 58072., 59066., 51830., 44200., 36172.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   10.,  20.,   30.,   40.,   50.,   52.,   45.,  28.,
      13.,  41.,  86.,  150.,  186.,  222.,  258.,  239.,  191., 112.,
      55.,  139., 254., 402.,  438.,  474.,  510.,  449.,  345., 196.,
      97.,  237., 422., 654.,  690.,  726.,  762.,  659.,  499., 280.,
      139., 335., 590., 906.,  942.,  978.,  1014., 869.,  653., 364.,
      181., 433., 758., 1158., 1194., 1230., 1266., 1079., 807., 448.,
      223., 531., 926., 1410., 1446., 1482., 1518., 1289., 961., 532.,
      215., 478., 790., 1152., 1178., 1204., 1230., 1006., 727., 392.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6560.,  8376.,  10544., 11208., 10112., 10808., 12240., 11520., 10128.,
      8640.,  9020.,  11761., 14930., 17831., 17489., 16795., 17605., 14542.,
      10555., 7492.,  11168., 14296., 17936., 20504., 20796., 19840., 19236.,
      17656., 15020., 12400., 12940., 16605., 20874., 25227., 25937., 24375.,
      23933., 21022., 17779., 13636., 18172., 21025., 24530., 28039., 28109.,
      27059., 25977., 20614., 15767., 13300., 15984., 17828., 20200., 24588.,
      26208., 25940., 26664., 22896., 18664., 16224., 12700., 15289., 18274.,
      19807., 19033., 19571., 19949., 15646., 11955., 9476.,  12992., 14416.,
      16224., 17328., 17320., 17856., 18136., 16080., 13672., 10528.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   59.,   124.,   196.,   268.,   340.,   365.,  322.,  203.,
      76.,   264.,  580.,  1040.,  1312.,  1584.,  1856.,  1744., 1408., 832.,
      384.,  992.,  1840., 2944.,  3216.,  3488.,  3760.,  3340., 2584., 1476.,
      692.,  1720., 3100., 4848.,  5120.,  5392.,  5664.,  4936., 3760., 2120.,
      1000., 2448., 4360., 6752.,  7024.,  7296.,  7568.,  6532., 4936., 2764.,
      1308., 3176., 5620., 8656.,  8928.,  9200.,  9472.,  8128., 6112., 3408.,
      1616., 3904., 6880., 10560., 10832., 11104., 11376., 9724., 7288., 4052.,
      1625., 3630., 6023., 8812.,  9012.,  9212.,  9412.,  7721., 5594., 3023.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16672., 18696., 25520., 29912., 28664., 27096., 27384., 19632., 18472.,
      16160., 19704., 23582., 28244., 35226., 37394., 35338., 38210., 29444.,
      22710., 18904., 23280., 29628., 37096., 43188., 48004., 45012., 45924.,
      38856., 29196., 18288., 30984., 36578., 46572., 52070., 54990., 54710.,
      53214., 42492., 36586., 25704., 35656., 40018., 47628., 54710., 53214.,
      49862., 52782., 41756., 35674., 29864., 31152., 37644., 41800., 45732.,
      47028., 43396., 45524., 37096., 30364., 25840., 24248., 29822., 36116.,
      37498., 37938., 38570., 40354., 35204., 27414., 19224., 21216., 22632.,
      27760., 31416., 31448., 32696., 34264., 27696., 23048., 14624.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   856.,   1400.,  1944.,  2488.,  2722.,  2428.,
      1542.,  500.,   1864.,  4220.,  7696.,  9808.,  11920., 14032., 13292.,
      10792., 6404.,  2852.,  7464.,  13964., 22480., 24592., 26704., 28816.,
      25724., 19976., 11444., 5204.,  13064., 23708., 37264., 39376., 41488.,
      43600., 38156., 29160., 16484., 7556.,  18664., 33452., 52048., 52880.,
      51664., 48400., 34460., 25544., 14100., 8628.,  19656., 33212., 49424.,
      42064., 32656., 21200., 6188.,  5544.,  3524.,  1508.,  4264.,  8396.,
      14032., 16144., 18256., 20368., 18620., 14728., 8564.,  3150.,  7276.,
      12442., 18712., 20280., 21848., 23416., 19762., 14684., 8118.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7664.,  8496.,  10464., 11512., 13624., 14904., 17160., 18688., 18024.,
      19544., 18760., 20272., 20328., 21896., 18872., 20264., 16960., 18160.,
      14576., 15568., 13788., 14944., 17997., 19396., 22602., 24264., 27623.,
      29568., 28089., 30040., 28427., 30384., 30493., 32520., 27538., 29308.,
      23939., 25432., 19676., 20872., 20328., 21688., 24684., 26348., 29540.,
      31532., 34920., 37264., 34672., 37036., 34296., 36680., 36544., 39012.,
      32580., 34740., 27844., 29672., 22312., 23784., 24308., 26008., 28277.,
      30312., 32790., 35188., 37875., 40664., 36661., 39420., 35191., 37920.,
      37113., 39876., 32030., 34400., 26939., 28952., 20980., 22608., 25236.,
      26984., 26873., 28968., 29078., 31548., 35975., 38848., 37065., 39908.,
      37899., 40712., 38925., 41772., 34094., 36536., 30127., 32200., 25268.,
      26944., 26632., 28264., 32008., 33948., 37892., 40164., 44308., 46936.,
      43508., 46092., 42452., 44992., 42484., 45044., 35556., 37740., 30472.,
      32320., 24584., 26072., 26716., 28096., 29189., 30804., 32042., 33912.,
      35295., 37440., 32409., 34496., 29267., 31296., 28109., 30144., 21442.,
      23164., 17667., 19120., 13244., 14408., 20784., 21904., 20024., 21336.,
      19576., 21096., 19456., 21200., 17168., 18904., 18848., 20576., 20400.,
      22120., 18488., 19928., 16360., 17568., 13680., 14640.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    6.,    16.,   19.,   40.,   44.,   80.,   76.,   120.,
      108.,  160.,  140.,  200.,  157.,  208.,  142.,  180.,  91.,   112.,
      24.,   52.,   100.,  164.,  236.,  344.,  440.,  600.,  568.,  744.,
      696.,  888.,  824.,  1032., 788.,  956.,  644.,  764.,  384.,  448.,
      164.,  220.,  436.,  556.,  824.,  1016., 1336., 1608., 1464., 1752.,
      1592., 1896., 1720., 2040., 1544., 1796., 1204., 1380., 692.,  784.,
      304.,  388.,  772.,  948.,  1412., 1688., 2232., 2616., 2360., 2760.,
      2488., 2904., 2616., 3048., 2300., 2636., 1764., 1996., 1000., 1120.,
      444.,  556.,  1108., 1340., 2000., 2360., 3128., 3624., 3256., 3768.,
      3384., 3912., 3512., 4056., 3056., 3476., 2324., 2612., 1308., 1456.,
      584.,  724.,  1444., 1732., 2588., 3032., 4024., 4632., 4152., 4776.,
      4280., 4920., 4408., 5064., 3812., 4316., 2884., 3228., 1616., 1792.,
      724.,  892.,  1780., 2124., 3176., 3704., 4920., 5640., 5048., 5784.,
      5176., 5928., 5304., 6072., 4568., 5156., 3444., 3844., 1924., 2128.,
      765.,  860.,  1718., 1912., 2863., 3160., 4204., 4608., 4300., 4712.,
      4396., 4816., 4492., 4920., 3697., 4024., 2686., 2908., 1455., 1568.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7344.,  9328.,  8140.,  10556., 11272., 14248., 13188., 16724., 12532.,
      16132., 11780., 15316., 11892., 15492., 8328.,  11304., 7996.,  10476.,
      7088.,  9072.,  8596.,  11108., 10277., 13305., 12270., 15974., 15407.,
      19819., 16403., 20991., 15415., 19923., 16827., 21383., 12822., 16622.,
      9785.,  12925., 8228.,  10676., 10088., 13192., 12890., 16738., 16220.,
      20876., 18894., 24294., 21222., 26782., 19774., 25238., 20214., 25710.,
      17132., 21724., 12722., 16474., 7720.,  10568., 13612., 17372., 15979.,
      20599., 20498., 26074., 22849., 29221., 24237., 30753., 24153., 30557.,
      23397., 29817., 18570., 23922., 16071., 20515., 11132., 14572., 15884.,
      19772., 17651., 22367., 20994., 26634., 24153., 30557., 23397., 29817.,
      21777., 28085., 23165., 29617., 18170., 23586., 15567., 20107., 13148.,
      16716., 13832., 17320., 16754., 20890., 18476., 23324., 20118., 25614.,
      20750., 26278., 18982., 24414., 19966., 25558., 16220., 20876., 13226.,
      17138., 11368., 14472., 10676., 13572., 13173., 16649., 16014., 20102.,
      16447., 21051., 16643., 21295., 16999., 21571., 17803., 22551., 15574.,
      19630., 12041., 15373., 8324.,  10900., 9424.,  11792., 9884.,  12748.,
      12200., 15560., 13844., 17572., 13828., 17620., 14484., 18212., 15236.,
      19028., 12232., 15464., 10188., 12860., 6320.,  8304.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   292.,   564.,   532.,
      868.,   772.,   1172.,  1012.,  1476.,  1163.,  1559.,  1066.,  1362.,
      689.,   853.,   142.,   358.,   684.,   1180.,  1690.,  2530.,  3224.,
      4472.,  4216.,  5592.,  5208.,  6712.,  6200.,  7832.,  5986.,  7306.,
      4924.,  5868.,  2950.,  3454.,  1206.,  1646.,  3260.,  4204.,  6226.,
      7738.,  10168., 12312., 11160., 13432., 12152., 14552., 13144., 15672.,
      11866., 13858., 9292.,  10684., 5358.,  6086.,  2270.,  2934.,  5836.,
      7228.,  10762., 12946., 17112., 20152., 18104., 21272., 19096., 22392.,
      20088., 23512., 17746., 20410., 13660., 15500., 7766.,  8718.,  3334.,
      4222.,  8412.,  10252., 15298., 18154., 24056., 27992., 25048., 29112.,
      26040., 30232., 27032., 31352., 23626., 26962., 18028., 20316., 10174.,
      11350., 4398.,  5510.,  10988., 13276., 19834., 23362., 31000., 35832.,
      31992., 36952., 32984., 38072., 33976., 39192., 29506., 33514., 22396.,
      25132., 12582., 13982., 5462.,  6798.,  13564., 16300., 24370., 28570.,
      37944., 43672., 38936., 44792., 39928., 45912., 40920., 47032., 35386.,
      40066., 26764., 29948., 14990., 16614., 5933.,  6689.,  13362., 14906.,
      22319., 24683., 32836., 36052., 33588., 36868., 34340., 37684., 35092.,
      38500., 28931., 31535., 21050., 22818., 11417., 12317.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  2104.,  4216.,  3960.,
      6584.,  5816.,  8952.,  7672.,  11320., 8938.,  12058., 8252.,  10588.,
      5358.,  6654.,  940.,   2636.,  4376.,  7256.,  9412.,  13988., 16560.,
      23344., 17584., 24368., 25392., 33200., 33200., 42032., 32420., 39812.,
      26968., 32408., 16332., 19308., 8588.,  11052., 13016., 17432., 19940.,
      25796., 28464., 36272., 16560., 23344., 17584., 24368., 25392., 33200.,
      25796., 32420., 22040., 26968., 13612., 16332., 7404.,  9612.,  18968.,
      23896., 26372., 33508., 36272., 45104., 28464., 36272., 16560., 23344.,
      17584., 24368., 19172., 25028., 17112., 21528., 10892., 13356., 6220.,
      8172.,  16088., 20504., 30116., 37508., 39984., 49840., 36272., 45104.,
      28464., 36272., 16560., 23344., 12548., 17636., 12184., 16088., 8172.,
      10380., 5036.,  6732.,  13208., 17112., 25028., 31652., 41008., 50864.,
      39984., 49840., 36272., 45104., 28464., 36272., 12708., 18052., 7256.,
      10648., 5452.,  7404.,  3852.,  5292.,  10328., 13720., 19940., 25796.,
      33200., 42032., 41008., 50864., 39984., 49840., 36272., 45104., 25796.,
      32420., 9112.,  13016., 2732.,  4428.,  2558.,  3470.,  6812.,  8892.,
      13018., 16522., 21432., 26616., 27384., 33080., 33336., 39544., 30456.,
      36152., 24074., 28474., 14204., 17052., 590.,   1630.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11376., 12224., 13104., 14016., 14540., 15616., 16732., 17888., 18344.,
      19680., 21064., 22496., 19204., 20768., 22388., 24064., 17044., 18592.,
      20196., 21856., 18468., 20000., 21588., 23232., 21236., 22816., 24452.,
      26144., 20232., 21600., 23016., 24480., 17948., 19072., 20236., 21440.,
      15408., 16320., 17264., 18240., 15524., 16752., 18020., 19328., 20433.,
      21940., 23497., 25104., 26118., 27944., 29830., 31776., 31315., 33436.,
      35627., 37888., 30607., 32740., 34943., 37216., 29323., 31404., 33555.,
      35776., 30919., 33012., 35175., 37408., 25422., 27208., 29054., 30960.,
      18157., 19596., 21085., 22624., 12692., 13808., 14964., 16160., 19528.,
      20896., 22312., 23776., 25098., 26800., 28562., 30384., 31596., 33680.,
      35836., 38064., 35982., 38432., 40966., 43584., 36486., 38976., 41550.,
      44208., 34622., 37088., 39638., 42272., 33334., 35840., 38430., 41104.,
      30876., 33040., 35276., 37584., 26402., 28176., 30010., 31904., 21928.,
      23328., 24776., 26272., 22236., 24016., 25852., 27744., 28759., 30932.,
      33175., 35488., 36378., 39000., 41706., 44496., 44309., 47308., 50405.,
      53600., 45721., 48724., 51825., 55024., 42717., 45660., 48701., 51840.,
      41825., 44772., 47817., 50960., 36914., 39416., 42002., 44672., 31323.,
      33388., 35523., 37728., 23916., 25552., 27244., 28992., 32508., 34384.,
      36316., 38304., 37359., 39652., 42015., 44448., 43402., 46168., 49018.,
      51952., 49597., 52764., 56029., 59392., 49729., 52900., 56169., 59536.,
      47749., 50860., 54069., 57376., 45577., 48692., 51905., 55216., 35810.,
      38456., 41186., 44000., 27059., 29244., 31499., 33824., 23052., 24784.,
      26572., 28416., 28584., 30240., 31944., 33696., 31570., 33568., 35626.,
      37744., 35516., 37904., 40364., 42896., 43526., 46288., 49134., 52064.,
      46686., 49488., 52374., 55344., 46198., 48976., 51838., 54784., 47566.,
      50384., 53286., 56272., 40876., 43280., 45756., 48304., 33226., 35232.,
      37298., 39424., 29128., 30752., 32424., 34144., 22500., 23920., 25380.,
      26880., 27137., 28820., 30553., 32336., 32486., 34472., 36518., 38624.,
      34979., 37244., 39579., 41984., 33407., 35684., 38031., 40448., 34587.,
      36812., 39107., 41472., 35319., 37556., 39863., 42240., 27438., 29320.,
      31262., 33264., 20733., 22284., 23885., 25536., 16404., 17648., 18932.,
      20256., 23600., 24768., 25968., 27200., 25948., 27360., 28812., 30304.,
      29000., 30688., 32424., 34208., 30708., 32640., 34628., 36672., 30596.,
      32576., 34612., 36704., 31700., 33664., 35684., 37760., 32292., 34240.,
      36244., 38304., 28776., 30432., 32136., 33888., 24492., 25888., 27324.,
      28800., 18800., 19904., 21040., 22208.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   116.,   176.,   244.,   320.,   228.,   304.,
      388.,   480.,   340.,   432.,   532.,   640.,   452.,   560.,   676.,
      800.,   535.,   628.,   727.,   832.,   498.,   568.,   642.,   720.,
      325.,   364.,   405.,   448.,   46.,    96.,    150.,   208.,   284.,
      400.,   524.,   656.,   746.,   944.,   1154.,  1376.,  1464.,  1760.,
      2072.,  2400.,  1944.,  2272.,  2616.,  2976.,  2424.,  2784.,  3160.,
      3552.,  2904.,  3296.,  3704.,  4128.,  2834.,  3152.,  3482.,  3824.,
      2348.,  2576.,  2812.,  3056.,  1414.,  1536.,  1662.,  1792.,  550.,
      656.,   766.,   880.,   1516.,  1744.,  1980.,  2224.,  2930.,  3296.,
      3674.,  4064.,  4824.,  5344.,  5880.,  6432.,  5304.,  5856.,  6424.,
      7008.,  5784.,  6368.,  6968.,  7584.,  6264.,  6880.,  7512.,  8160.,
      5690.,  6176.,  6674.,  7184.,  4476.,  4816.,  5164.,  5520.,  2590.,
      2768.,  2950.,  3136.,  1054.,  1216.,  1382.,  1552.,  2748.,  3088.,
      3436.,  3792.,  5114.,  5648.,  6194.,  6752.,  8184.,  8928.,  9688.,
      10464., 8664.,  9440.,  10232., 11040., 9144.,  9952.,  10776., 11616.,
      9624.,  10464., 11320., 12192., 8546.,  9200.,  9866.,  10544., 6604.,
      7056.,  7516.,  7984.,  3766.,  4000.,  4238.,  4480.,  1558.,  1776.,
      1998.,  2224.,  3980.,  4432.,  4892.,  5360.,  7298.,  8000.,  8714.,
      9440.,  11544., 12512., 13496., 14496., 12024., 13024., 14040., 15072.,
      12504., 13536., 14584., 15648., 12984., 14048., 15128., 16224., 11402.,
      12224., 13058., 13904., 8732.,  9296.,  9868.,  10448., 4942.,  5232.,
      5526.,  5824.,  2062.,  2336.,  2614.,  2896.,  5212.,  5776.,  6348.,
      6928.,  9482.,  10352., 11234., 12128., 14904., 16096., 17304., 18528.,
      15384., 16608., 17848., 19104., 15864., 17120., 18392., 19680., 16344.,
      17632., 18936., 20256., 14258., 15248., 16250., 17264., 10860., 11536.,
      12220., 12912., 6118.,  6464.,  6814.,  7168.,  2566.,  2896.,  3230.,
      3568.,  6444.,  7120.,  7804.,  8496.,  11666., 12704., 13754., 14816.,
      18264., 19680., 21112., 22560., 18744., 20192., 21656., 23136., 19224.,
      20704., 22200., 23712., 19704., 21216., 22744., 24288., 17114., 18272.,
      19442., 20624., 12988., 13776., 14572., 15376., 7294.,  7696.,  8102.,
      8512.,  2873.,  3060.,  3249.,  3440.,  6490.,  6872.,  7258.,  7648.,
      10867., 11452., 12043., 12640., 16020., 16816., 17620., 18432., 16388.,
      17200., 18020., 18848., 16756., 17584., 18420., 19264., 17124., 17968.,
      18820., 19680., 14143., 14788., 15439., 16096., 10306., 10744., 11186.,
      11632., 5597.,  5820.,  6045.,  6272.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5840.,  7696.,  9808.,  12176., 6612.,  8868.,  11444., 14340., 8760.,
      11544., 14712., 18264., 10044., 13228., 16860., 20940., 10396., 13708.,
      17468., 21676., 9532.,  12716., 16348., 20428., 10908., 14220., 17980.,
      22188., 8760.,  11544., 14712., 18264., 7476.,  9860.,  12564., 15588.,
      5840.,  7696.,  9808.,  12176., 6660.,  8980.,  11620., 14580., 8717.,
      11457., 14597., 18137., 10662., 14014., 17846., 22158., 11407., 15307.,
      19767., 24787., 12471., 16595., 21279., 26523., 12735., 16699., 21223.,
      26307., 13191., 17251., 21871., 27051., 10582., 13998., 17894., 22270.,
      9141.,  12105., 15469., 19233., 7428.,  9748.,  12388., 15348., 9272.,
      12056., 15224., 18776., 9150.,  12534., 16398., 20742., 12068., 16180.,
      20868., 26132., 15530., 20242., 25626., 31682., 16314., 21218., 26794.,
      33042., 12714., 17426., 22810., 28866., 15034., 19938., 25514., 31762.,
      13348., 17460., 22148., 27412., 11982., 15558., 19614., 24150., 8248.,
      11032., 14200., 17752., 10092., 13340., 17036., 21180., 13095., 17027.,
      21519., 26571., 14834., 19642., 25122., 31274., 15405., 20897., 27173.,
      34233., 18693., 24473., 31037., 38385., 18525., 24081., 30421., 37545.,
      17621., 23337., 29837., 37121., 13890., 18634., 24050., 30138., 13087.,
      17179., 21831., 27043., 10860., 14108., 17804., 21948., 10092., 13340.,
      17036., 21180., 11351., 15347., 19903., 25019., 15698., 20634., 26242.,
      32522., 18525., 24081., 30421., 37545., 17621., 23337., 29837., 37121.,
      15405., 20897., 27173., 34233., 18693., 24473., 31037., 38385., 16290.,
      21162., 26706., 32922., 12879., 17035., 21751., 27027., 9836.,  13084.,
      16780., 20924., 9272.,  12056., 15224., 18776., 11502., 14950., 18878.,
      23286., 12932., 17172., 21988., 27380., 13530., 18306., 23754., 29874.,
      17130., 22098., 27738., 34050., 15834., 20610., 26058., 32178., 14826.,
      19794., 25434., 31746., 12068., 16180., 20868., 26132., 11934., 15446.,
      19438., 23910., 9272.,  12056., 15224., 18776., 6660.,  8980.,  11620.,
      14580., 8813.,  11681., 14949., 18617., 12390., 15998., 20086., 24654.,
      13039., 17067., 21655., 26803., 11703., 15827., 20511., 25755., 12223.,
      16187., 20711., 25795., 14567., 18755., 23503., 28811., 11702., 15246.,
      19270., 23774., 8373.,  11337., 14701., 18465., 7428.,  9748.,  12388.,
      15348., 5840.,  7696.,  9808.,  12176., 7124.,  9380.,  11956., 14852.,
      8760.,  11544., 14712., 18264., 9532.,  12716., 16348., 20428., 10908.,
      14220., 17980., 22188., 10044., 13228., 16860., 20940., 10396., 13708.,
      17468., 21676., 8760.,  11544., 14712., 18264., 7988.,  10372., 13076.,
      16100., 5840.,  7696.,  9808.,  12176.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  820.,   1284.,  1812.,  2404.,  1684.,  2276.,
      2932.,  3652.,  2548.,  3268.,  4052.,  4900.,  3412.,  4260.,  5172.,
      6148.,  4103.,  4835.,  5615.,  6443.,  3850.,  4402.,  4986.,  5602.,
      2525.,  2833.,  3157.,  3497.,  274.,   666.,   1090.,  1546.,  2052.,
      2964.,  3940.,  4980.,  5590.,  7150.,  8806.,  10558., 11144., 13480.,
      15944., 18536., 14920., 17512., 20232., 23080., 18696., 21544., 24520.,
      27624., 22472., 25576., 28808., 32168., 22054., 24574., 27190., 29902.,
      18340., 20148., 22020., 23956., 11074., 12042., 13042., 14074., 4194.,
      5034.,  5906.,  6810.,  11684., 13492., 15364., 17300., 22342., 24734.,
      27222., 29806., 34760., 37864., 41096., 44456., 34056., 36904., 39880.,
      42984., 31304., 33896., 36616., 39464., 35080., 37928., 40904., 44008.,
      31126., 33454., 35878., 38398., 24132., 25812., 27556., 29364., 13842.,
      14746., 15682., 16650., 7730.,  8506.,  9314.,  10154., 18500., 20180.,
      21924., 23732., 23990., 26190., 28486., 30878., 30984., 33832., 36808.,
      39912., 22088., 24680., 27400., 30248., 11144., 13480., 15944., 18536.,
      14920., 17512., 20232., 23080., 15622., 17758., 19990., 22318., 13540.,
      15092., 16708., 18388., 8418.,  9258.,  10130., 11034., 3074.,  3786.,
      4530.,  5306.,  8932.,  10484., 12100., 13780., 17830., 20350., 22966.,
      25678., 30024., 33640., 37384., 41256., 33416., 36776., 40264., 43880.,
      34760., 37864., 41096., 44456., 34056., 36904., 39880., 42984., 24694.,
      26638., 28678., 30814., 19332., 20756., 22244., 23796., 11186., 11962.,
      12770., 13610., 6610.,  7258.,  7938.,  8650.,  15748., 17172., 18660.,
      20212., 27670., 29998., 32422., 34942., 42632., 45992., 49480., 53096.,
      37832., 40936., 44168., 47528., 30984., 33832., 36808., 39912., 22088.,
      24680., 27400., 30248., 9190.,  10942., 12790., 14734., 8740.,  10036.,
      11396., 12820., 5762.,  6474.,  7218.,  7994.,  1954.,  2538.,  3154.,
      3802.,  6180.,  7476.,  8836.,  10260., 12934., 15070., 17302., 19630.,
      22472., 25576., 28808., 32168., 26248., 29608., 33096., 36712., 30024.,
      33640., 37384., 41256., 33416., 36776., 40264., 43880., 29270., 31854.,
      34534., 37310., 21060., 22740., 24484., 26292., 8530.,  9178.,  9858.,
      10570., 5461.,  5929.,  6413.,  6913.,  12762., 13762., 14794., 15858.,
      22031., 23627., 25271., 26963., 33396., 35652., 37972., 40356., 36308.,
      38692., 41140., 43652., 39220., 41732., 44308., 46948., 33556., 35684.,
      37876., 40132., 25207., 26771., 28383., 30043., 14122., 15058., 16026.,
      17026., 173.,   417.,   677.,   953.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 750.,
      4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610.,
      29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380., 25380.,
      750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,  6264.,
      16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732.,
      35532., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532.,
      1080.,  6264.,  16056., 30456., 900.,   5220.,  13380., 25380., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 1050.,  6090.,
      15610., 29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854.,
      41454., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,
      6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732.,
      35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,
      7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,
      12488., 23688., 720.,   4176.,  10704., 20304., 900.,   5220.,  13380.,
      25380., 1080.,  6264.,  16056., 30456., 1260.,  7308.,  18732., 35532.,
      1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532., 1260.,
      7308.,  18732., 35532., 1080.,  6264.,  16056., 30456., 900.,   5220.,
      13380., 25380., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,
      16920., 750.,   4350.,  11150., 21150., 900.,   5220.,  13380., 25380.,
      1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,
      6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,
      13380., 25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,
      16920., 480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920.,
      720.,   4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,
      4872.,  12488., 23688., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,
      16920., 480.,   2784.,  7136.,  13536.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  2074.,
      4042.,  6394.,  9130.,  6136.,  9784.,  13944., 18616., 12280., 15928.,
      20088., 24760., 14328., 17976., 22136., 26808., 12280., 15928., 20088.,
      24760., 5626.,  8362.,  11482., 14986., 8508.,  10844., 13436., 16284.,
      6974.,  8398.,  9950.,  11630., 540.,   1596.,  2908.,  4476.,  4152.,
      6264.,  8888.,  12024., 9428.,  13620., 18580., 24308., 18416., 25712.,
      34032., 43376., 18416., 25712., 34032., 43376., 26608., 33904., 42224.,
      51568., 26608., 33904., 42224., 51568., 17556., 23284., 29780., 37044.,
      11576., 15736., 20408., 25592., 10716., 13308., 16156., 19260., 860.,
      2428.,  4252.,  6332.,  6840.,  9976.,  13624., 17784., 15892., 20596.,
      26068., 32308., 26608., 33904., 42224., 51568., 18416., 25712., 34032.,
      43376., 18416., 25712., 34032., 43376., 26608., 33904., 42224., 51568.,
      26068., 32308., 39316., 47092., 13624., 17784., 22456., 27640., 4252.,
      6332.,  8668.,  11260., 540.,   1596.,  2908.,  4476.,  4792.,  7928.,
      11576., 15736., 14164., 19380., 25364., 32116., 26608., 33904., 42224.,
      51568., 26608., 33904., 42224., 51568., 18416., 25712., 34032., 43376.,
      18416., 25712., 34032., 43376., 26388., 33140., 40660., 48948., 24504.,
      29688., 35384., 41592., 10716., 13308., 16156., 19260., 220.,   764.,
      1564.,  2620.,  2104.,  4216.,  6840.,  9976.,  7700.,  12404., 17876.,
      24116., 18416., 25712., 34032., 43376., 26608., 33904., 42224., 51568.,
      26608., 33904., 42224., 51568., 18416., 25712., 34032., 43376., 17876.,
      24116., 31124., 38900., 22456., 27640., 33336., 39544., 17180., 20284.,
      23644., 27260., 540.,   1596.,  2908.,  4476.,  4152.,  6264.,  8888.,
      12024., 9428.,  13620., 18580., 24308., 18416., 25712., 34032., 43376.,
      18416., 25712., 34032., 43376., 26608., 33904., 42224., 51568., 26608.,
      33904., 42224., 51568., 17556., 23284., 29780., 37044., 11576., 15736.,
      20408., 25592., 10716., 13308., 16156., 19260., 860.,   2428.,  4252.,
      6332.,  6840.,  9976.,  13624., 17784., 15892., 20596., 26068., 32308.,
      26608., 33904., 42224., 51568., 18416., 25712., 34032., 43376., 18416.,
      25712., 34032., 43376., 26608., 33904., 42224., 51568., 26068., 32308.,
      39316., 47092., 13624., 17784., 22456., 27640., 4252.,  6332.,  8668.,
      11260., 350.,   1006.,  1790.,  2702.,  3068.,  4892.,  6972.,  9308.,
      8538.,  11018., 13882., 17130., 14328., 17976., 22136., 26808., 12280.,
      15928., 20088., 24760., 6136.,  9784.,  13944., 18616., 12280., 15928.,
      20088., 24760., 14138., 17386., 21018., 25034., 10556., 12892., 15484.,
      18332., 510.,   1422.,  2462.,  3630.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1876.,  2610.,  3458.,  4424.,  4830.,  4550.,  4140.,  3596.,  3840.,
      5225.,  6790.,  8540.,  9170.,  8485.,  7600.,  6510.,  6850.,  9185.,
      11781., 14644., 15547., 14211., 12590., 10678., 11130., 14770., 18767.,
      23128., 24353., 22064., 19390., 16324., 16394., 21490., 26999., 32928.,
      34153., 30632., 26670., 22260., 21658., 28210., 35231., 42728., 43953.,
      39200., 33950., 28196., 26182., 33815., 41895., 50428., 51625., 45693.,
      39290., 32410., 28540., 36675., 45220., 54180., 55300., 48715., 41700.,
      34250., 28508., 36510., 44870., 53592., 54586., 47930., 40900., 33492.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   7.,   10.,  13.,  16.,  19.,  14.,  11.,  35.,  45.,  55.,
      65.,  75.,  85.,  56.,  44.,  121., 142., 163., 184., 205., 226., 140.,
      107., 268., 289., 310., 331., 352., 373., 224., 170., 415., 436., 457.,
      478., 499., 520., 308., 233., 562., 583., 604., 625., 646., 667., 392.,
      296., 709., 730., 751., 772., 793., 814., 476., 309., 705., 723., 741.,
      759., 777., 795., 448., 215., 478., 489., 500., 511., 522., 533., 294.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4736.,  6256.,  8160.,  10480., 12136., 10768., 8760.,  8224.,  7260.,
      10137., 13410., 17119., 19273., 17638., 15191., 13012., 9712.,  11956.,
      14728., 18076., 20608., 18144., 14704., 12384., 9788.,  13857., 18578.,
      23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783.,
      28957., 25694., 21235., 17668., 9788.,  13857., 18578., 23911., 27085.,
      25214., 22211., 19140., 12992., 16256., 20128., 23536., 26500., 23128.,
      18700., 15312., 6668.,  9517.,  12810., 16491., 18853., 17262., 14811.,
      12580., 9440.,  11880., 14736., 16920., 18928., 17120., 14640., 11456.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   42.,   62.,   82.,   102.,  122.,  95.,   64.,
      224.,  296.,  368.,  440.,  512.,  584.,  396.,  289.,  830.,
      986.,  1142., 1298., 1454., 1610., 1015., 751.,  1922., 2078.,
      2234., 2390., 2546., 2702., 1645., 1213., 3014., 3170., 3326.,
      3482., 3638., 3794., 2275., 1675., 4106., 4262., 4418., 4574.,
      4730., 4886., 2905., 2137., 5198., 5354., 5510., 5666., 5822.,
      5978., 3535., 2300., 5288., 5424., 5560., 5696., 5832., 5968.,
      3384., 1625., 3630., 3714., 3798., 3882., 3966., 4050., 2243.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9248.,  13480., 18672., 25080., 31960., 27504., 23944., 21536., 12280.,
      18110., 24980., 33210., 41970., 36836., 31750., 26904., 14768., 22220.,
      30920., 41060., 51764., 46568., 40636., 34096., 16712., 25490., 35980.,
      48118., 60830., 56188., 50090., 42600., 16712., 25490., 35980., 48118.,
      60830., 56188., 50090., 42600., 16712., 25490., 35980., 48118., 60830.,
      56188., 50090., 42600., 15856., 23900., 33320., 43988., 55076., 49160.,
      42380., 34864., 13688., 20782., 28980., 38090., 47490., 44100., 36470.,
      28696., 10720., 16648., 23472., 30936., 38584., 37104., 32360., 24096.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   284.,   428.,   572.,   716.,   860.,   694.,   420.,
      1576.,  2120.,  2664.,  3208.,  3752.,  4296.,  2964.,  2066.,  6100.,
      7300.,  8500.,  9700.,  10900., 12100., 7706.,  5594.,  14500., 15700.,
      16900., 18100., 19300., 20500., 12578., 9122.,  22900., 24100., 25300.,
      26500., 27700., 28900., 17450., 12650., 31300., 32500., 33700., 34900.,
      36100., 37300., 22322., 16178., 39700., 40900., 42100., 43300., 44500.,
      45700., 27194., 17716., 40904., 41960., 43016., 44072., 45128., 46184.,
      26276., 12622., 28268., 28924., 29580., 30236., 30892., 31548., 17510.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6640.,  7504.,  9320.,  10440., 12440., 13832., 16016., 17696., 17584.,
      19320., 16664., 18200., 15240., 16560., 13296., 14384., 12956., 14080.,
      17461., 18852., 22410., 24088., 27823., 29808., 29889., 31944., 27154.,
      28948., 23767., 25280., 19708., 20920., 18728., 19976., 23792., 25348.,
      29364., 31252., 35468., 37712., 37716., 40044., 33684., 35724., 28920.,
      30648., 23400., 24792., 21780., 23272., 26873., 28744., 32598., 34876.,
      38983., 41696., 41609., 44420., 37022., 39488., 31563., 33656., 25204.,
      26896., 22420., 24104., 26889., 29000., 32086., 34652., 38039., 41088.,
      40665., 43812., 36062., 38816., 30491., 32824., 23924., 25808., 18452.,
      20072., 24921., 26952., 32086., 34556., 39975., 42912., 42601., 45636.,
      38942., 41600., 34347., 36600., 28788., 30608., 23400., 24856., 29892.,
      31708., 36996., 39196., 44736., 47344., 47264., 49956., 42180., 44532.,
      36260., 38248., 29480., 31080., 19804., 20976., 24033., 25484., 28730.,
      30480., 33915., 35984., 36149., 38288., 31714., 33580., 26603., 28176.,
      20796., 22056., 16496., 17520., 18704., 19960., 21304., 22808., 24312.,
      26080., 26056., 27880., 22328., 23912., 18016., 19344., 13104., 14160.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    6.,    16.,   14.,   28.,   22.,   40.,   30.,   52.,
      38.,   64.,   46.,   76.,   39.,   56.,   20.,   44.,   84.,   140.,
      116.,  180.,  148.,  220.,  180.,  260.,  212.,  300.,  244.,  340.,
      172.,  224.,  113.,  176.,  346.,  484.,  418.,  568.,  490.,  652.,
      562.,  736.,  634.,  820.,  706.,  904.,  455.,  560.,  323.,  428.,
      850.,  1072., 922.,  1156., 994.,  1240., 1066., 1324., 1138., 1408.,
      1210., 1492., 749.,  896.,  533.,  680.,  1354., 1660., 1426., 1744.,
      1498., 1828., 1570., 1912., 1642., 1996., 1714., 2080., 1043., 1232.,
      743.,  932.,  1858., 2248., 1930., 2332., 2002., 2416., 2074., 2500.,
      2146., 2584., 2218., 2668., 1337., 1568., 953.,  1184., 2362., 2836.,
      2434., 2920., 2506., 3004., 2578., 3088., 2650., 3172., 2722., 3256.,
      1631., 1904., 1064., 1236., 2468., 2820., 2532., 2892., 2596., 2964.,
      2660., 3036., 2724., 3108., 2788., 3180., 1592., 1792., 765.,  860.,
      1718., 1912., 1758., 1956., 1798., 2000., 1838., 2044., 1878., 2088.,
      1918., 2132., 1067., 1176.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3888.,  5360.,  5756.,  7724.,  8040.,  10632., 10868., 14212., 14084.,
      17876., 12072., 15432., 10508., 13436., 9520.,  12016., 5140.,  7140.,
      7765.,  10345., 10830., 14150., 14495., 18715., 18595., 23375., 16294.,
      20542., 14033., 17717., 11908., 14996., 6152.,  8616.,  9490.,  12730.,
      13420., 17500., 17974., 23086., 22990., 28774., 20700., 25868., 18074.,
      22562., 15176., 18920., 6924.,  9788.,  10835., 14655., 15554., 20426.,
      21049., 27069., 27013., 33817., 25034., 31154., 22375., 27715., 19068.,
      23532., 6924.,  9788.,  10835., 14655., 15554., 20426., 21049., 27069.,
      27013., 33817., 25034., 31154., 22375., 27715., 19068., 23532., 6924.,
      9788.,  10835., 14655., 15554., 20426., 21049., 27069., 27013., 33817.,
      25034., 31154., 22375., 27715., 19068., 23532., 6632.,  9224.,  10250.,
      13650., 14524., 18796., 19390., 24598., 24598., 30478., 21964., 27196.,
      18930., 23450., 15560., 19304., 5716.,  7972.,  8925.,  11857., 12670.,
      16310., 16855., 21235., 21275., 26215., 19830., 24270., 16345., 20125.,
      12804., 15892., 4432.,  6288.,  7116.,  9532.,  10248., 13224., 13700.,
      17236., 17300., 21284., 16744., 20360., 14620., 17740., 10800., 13296.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   90.,    194.,   146.,   282.,   202.,
      370.,   258.,   458.,   314.,   546.,   281.,   413.,   118.,   302.,
      572.,   1004.,  812.,   1308.,  1052.,  1612.,  1292.,  1916.,  1532.,
      2220.,  1772.,  2524.,  1278.,  1686.,  787.,   1279.,  2510.,  3590.,
      3062.,  4238.,  3614.,  4886.,  4166.,  5534.,  4718.,  6182.,  5270.,
      6830.,  3439.,  4267.,  2383.,  3211.,  6374.,  8126.,  6926.,  8774.,
      7478.,  9422.,  8030.,  10070., 8582.,  10718., 9134.,  11366., 5707.,
      6871.,  3979.,  5143.,  10238., 12662., 10790., 13310., 11342., 13958.,
      11894., 14606., 12446., 15254., 12998., 15902., 7975.,  9475.,  5575.,
      7075.,  14102., 17198., 14654., 17846., 15206., 18494., 15758., 19142.,
      16310., 19790., 16862., 20438., 10243., 12079., 7171.,  9007.,  17966.,
      21734., 18518., 22382., 19070., 23030., 19622., 23678., 20174., 24326.,
      20726., 24974., 12511., 14683., 8174.,  9542.,  19052., 21852., 19548.,
      22412., 20044., 22972., 20540., 23532., 21036., 24092., 21532., 24652.,
      12342., 13934., 5933.,  6689.,  13362., 14906., 13674., 15250., 13986.,
      15594., 14298., 15938., 14610., 16282., 14922., 16626., 8321.,  9189.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4176., 10704., 3896., 9592.,  2784., 7136.,  3224., 8664.,  4046., 10462.,
      4836., 12996., 5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502.,
      3736., 9176.,  4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724.,
      7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704., 4616., 12232.,
      5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414., 7692., 19116.,
      6394., 16298., 5128., 12744., 4616., 12232., 5578., 14586., 6924., 18348.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      7692., 19116., 6394., 16298., 5128., 12744., 4176., 10704., 4596., 12372.,
      6264., 16056., 6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388.,
      4176., 10704., 3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050.,
      6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,  2784., 7136.,
      3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160., 4176., 10704.,
      3896., 9592.,  2784., 7136.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   636.,   1436.,  1052.,  2108.,  1468.,
      2780.,  1884.,  3452.,  2300.,  4124.,  2126.,  3166.,  780.,   2220.,
      4184.,  7576.,  6040.,  9944.,  7896.,  12312., 9752.,  14680., 11608.,
      17048., 13464., 19416., 9836.,  13068., 5834.,  9722.,  19060., 27604.,
      22100., 29364., 21044., 27028., 25364., 32116., 29684., 37204., 34004.,
      42292., 21338., 25866., 16986., 21514., 42644., 52468., 37492., 46036.,
      28244., 35508., 32564., 40596., 36884., 45684., 41204., 50772., 25578.,
      30746., 19946., 25114., 49844., 60948., 36500., 46324., 19060., 27604.,
      22100., 29364., 21044., 27028., 25364., 32116., 16250., 20010., 13434.,
      17194., 34004., 42292., 38324., 47380., 42644., 52468., 37492., 46036.,
      28244., 35508., 32564., 40596., 20490., 24890., 16394., 20794., 41204.,
      50772., 45524., 55860., 49844., 60948., 36500., 46324., 19060., 27604.,
      22100., 29364., 11162., 14154., 9772.,  12492., 24728., 30680., 28632.,
      35096., 32536., 39512., 36440., 43928., 40344., 48344., 34776., 41240.,
      12940., 15404., 11390., 13326., 26524., 30652., 28988., 33372., 31452.,
      36092., 33916., 38812., 36380., 41532., 21180., 24540., 430.,   1214.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7856.,  8640.,  9456.,  10304., 10396., 11424., 12492., 13600., 13640.,
      14944., 16296., 17696., 17652., 19264., 20932., 22656., 20740., 22464.,
      24244., 26080., 18408., 19936., 21512., 23136., 14860., 16160., 17500.,
      18880., 14192., 15296., 16432., 17600., 12388., 13424., 14500., 15616.,
      17601., 18900., 20249., 21648., 23526., 25128., 26790., 28512., 30243.,
      32188., 34203., 36288., 34271., 36356., 38511., 40736., 31518., 33352.,
      35246., 37200., 27221., 28764., 30357., 32000., 23412., 24688., 26004.,
      27360., 16808., 18080., 19400., 20768., 20594., 22208., 23882., 25616.,
      25340., 27344., 29420., 31568., 31142., 33584., 36110., 38720., 35870.,
      38480., 41174., 43952., 31564., 33872., 36252., 38704., 25402., 27360.,
      29378., 31456., 21448., 23072., 24744., 26464., 16508., 18000., 19548.,
      21152., 23791., 25700., 27679., 29728., 32266., 34648., 37114., 39664.,
      41981., 44828., 47773., 50816., 47937., 50980., 54121., 57360., 44914.,
      47608., 50386., 53248., 39739., 42028., 44387., 46816., 34412., 36304.,
      38252., 40256., 24060., 25680., 27356., 29088., 30479., 32548., 34687.,
      36896., 38218., 40792., 43450., 46192., 45277., 48348., 51517., 54784.,
      51233., 54500., 57865., 61328., 45490., 48376., 51346., 54400., 37467.,
      39916., 42435., 45024., 31212., 33232., 35308., 37440., 16508., 18000.,
      19548., 21152., 23791., 25700., 27679., 29728., 32266., 34648., 37114.,
      39664., 41981., 44828., 47773., 50816., 47937., 50980., 54121., 57360.,
      44914., 47608., 50386., 53248., 39739., 42028., 44387., 46816., 34412.,
      36304., 38252., 40256., 23048., 24480., 25960., 27488., 28794., 30608.,
      32482., 34416., 35660., 37904., 40220., 42608., 41630., 44288., 47030.,
      49856., 47222., 50048., 52958., 55952., 41180., 43664., 46220., 48848.,
      33122., 35216., 37370., 39584., 27112., 28832., 30600., 32416., 11012.,
      12144., 13316., 14528., 16121., 17540., 19009., 20528., 22038., 23784.,
      25590., 27456., 28779., 30828., 32947., 35136., 33223., 35412., 37671.,
      40000., 30606., 32520., 34494., 36528., 26349., 27948., 29597., 31296.,
      22484., 23792., 25140., 26528., 16880., 17856., 18864., 19904., 21228.,
      22464., 23740., 25056., 26344., 27872., 29448., 31072., 30180., 31968.,
      33812., 35712., 33972., 35872., 37828., 39840., 30792., 32480., 34216.,
      36000., 26332., 27776., 29260., 30784., 20528., 21696., 22896., 24128.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    34.,
      56.,    82.,    112.,   58.,    88.,    122.,   160.,   82.,    120.,
      162.,   208.,   106.,   152.,   202.,   256.,   130.,   184.,   242.,
      304.,   125.,   156.,   189.,   224.,   38.,    80.,    126.,   176.,
      236.,   336.,   444.,   560.,   348.,   464.,   588.,   720.,   460.,
      592.,   732.,   880.,   572.,   720.,   876.,   1040.,  684.,   848.,
      1020.,  1200.,  796.,   976.,   1164.,  1360.,  590.,   688.,   790.,
      896.,   335.,   452.,   575.,   704.,   1126.,  1384.,  1654.,  1936.,
      1390.,  1672.,  1966.,  2272.,  1654.,  1960.,  2278.,  2608.,  1918.,
      2248.,  2590.,  2944.,  2182.,  2536.,  2902.,  3280.,  2446.,  2824.,
      3214.,  3616.,  1619.,  1820.,  2027.,  2240.,  1091.,  1292.,  1499.,
      1712.,  2974.,  3400.,  3838.,  4288.,  3238.,  3688.,  4150.,  4624.,
      3502.,  3976.,  4462.,  4960.,  3766.,  4264.,  4774.,  5296.,  4030.,
      4552.,  5086.,  5632.,  4294.,  4840.,  5398.,  5968.,  2711.,  2996.,
      3287.,  3584.,  1847.,  2132.,  2423.,  2720.,  4822.,  5416.,  6022.,
      6640.,  5086.,  5704.,  6334.,  6976.,  5350.,  5992.,  6646.,  7312.,
      5614.,  6280.,  6958.,  7648.,  5878.,  6568.,  7270.,  7984.,  6142.,
      6856.,  7582.,  8320.,  3803.,  4172.,  4547.,  4928.,  2603.,  2972.,
      3347.,  3728.,  6670.,  7432.,  8206.,  8992.,  6934.,  7720.,  8518.,
      9328.,  7198.,  8008.,  8830.,  9664.,  7462.,  8296.,  9142.,  10000.,
      7726.,  8584.,  9454.,  10336., 7990.,  8872.,  9766.,  10672., 4895.,
      5348.,  5807.,  6272.,  3359.,  3812.,  4271.,  4736.,  8518.,  9448.,
      10390., 11344., 8782.,  9736.,  10702., 11680., 9046.,  10024., 11014.,
      12016., 9310.,  10312., 11326., 12352., 9574.,  10600., 11638., 12688.,
      9838.,  10888., 11950., 13024., 5987.,  6524.,  7067.,  7616.,  3918.,
      4256.,  4598.,  4944.,  9180.,  9872.,  10572., 11280., 9420.,  10128.,
      10844., 11568., 9660.,  10384., 11116., 11856., 9900.,  10640., 11388.,
      12144., 10140., 10896., 11660., 12432., 10380., 11152., 11932., 12720.,
      5974.,  6368.,  6766.,  7168.,  2873.,  3060.,  3249.,  3440.,  6490.,
      6872.,  7258.,  7648.,  6642.,  7032.,  7426.,  7824.,  6794.,  7192.,
      7594.,  8000.,  6946.,  7352.,  7762.,  8176.,  7098.,  7512.,  7930.,
      8352.,  7250.,  7672.,  8098.,  8528.,  4053.,  4268.,  4485.,  4704.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 7032.,
      9560.,  12472., 15768., 8924.,  11980., 15484., 19436., 11516., 14956.,
      18844., 23180., 10488., 13528., 16952., 20760., 8596.,  11108., 13940.,
      17092., 5840.,  7696.,  9808.,  12176., 6660.,  8980.,  11620., 14580.,
      7597.,  10209., 13221., 16633., 8934.,  12030., 15606., 19662., 10799.,
      14571., 18903., 23795., 13079., 17331., 22143., 27515., 13174., 16974.,
      21254., 26014., 11333., 14489., 18045., 22001., 7428.,  9748.,  12388.,
      15348., 8248.,  11032., 14200., 17752., 8494.,  11686., 15358., 19510.,
      11012., 14740., 19044., 23924., 13594., 18114., 23306., 29170., 16202.,
      21298., 27066., 33506., 14404., 18900., 23972., 29620., 13406., 17174.,
      21422., 26150., 9272.,  12056., 15224., 18776., 10092., 13340., 17036.,
      21180., 10135., 13875., 18175., 23035., 12242., 16666., 21762., 27530.,
      16285., 21585., 27669., 34537., 19861., 25833., 32589., 40129., 17346.,
      22602., 28530., 35130., 14303., 18651., 23559., 29027., 10860., 14108.,
      17804., 21948., 10092., 13340., 17036., 21180., 10135., 13875., 18175.,
      23035., 12242., 16666., 21762., 27530., 16285., 21585., 27669., 34537.,
      19861., 25833., 32589., 40129., 17346., 22602., 28530., 35130., 14303.,
      18651., 23559., 29027., 10860., 14108., 17804., 21948., 10092., 13340.,
      17036., 21180., 10135., 13875., 18175., 23035., 12242., 16666., 21762.,
      27530., 16285., 21585., 27669., 34537., 19861., 25833., 32589., 40129.,
      17346., 22602., 28530., 35130., 14303., 18651., 23559., 29027., 10860.,
      14108., 17804., 21948., 9272.,  12056., 15224., 18776., 8542.,  11798.,
      15534., 19750., 10340., 14196., 18628., 23636., 14410., 18994., 24250.,
      30178., 18298., 23458., 29290., 35794., 14660., 19156., 24228., 29876.,
      11566., 15270., 19454., 24118., 9272.,  12056., 15224., 18776., 7684.,
      10004., 12644., 15604., 7645.,  10321., 13397., 16873., 8262.,  11486.,
      15190., 19374., 11615., 15451., 19847., 24803., 15175., 19491., 24367.,
      29803., 13430., 17230., 21510., 26270., 9493.,  12585., 16077., 19969.,
      7428.,  9748.,  12388., 15348., 5840.,  7696.,  9808.,  12176., 6004.,
      8132.,  10580., 13348., 7032.,  9560.,  12472., 15768., 8924.,  11980.,
      15484., 19436., 11516., 14956., 18844., 23180., 10488., 13528., 16952.,
      20760., 8596.,  11108., 13940., 17092., 5840.,  7696.,  9808.,  12176.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   234.,
      402.,   602.,   834.,   410.,   642.,   906.,   1202.,  586.,   882.,
      1210.,  1570.,  762.,   1122.,  1514.,  1938.,  938.,   1362.,  1818.,
      2306.,  941.,   1185.,  1445.,  1721.,  226.,   554.,   914.,   1306.,
      1700.,  2484.,  3332.,  4244.,  2564.,  3476.,  4452.,  5492.,  3428.,
      4468.,  5572.,  6740.,  4292.,  5460.,  6692.,  7988.,  5156.,  6452.,
      7812.,  9236.,  6020.,  7444.,  8932.,  10484., 4530.,  5306.,  6114.,
      6954.,  2455.,  3379.,  4351.,  5371.,  8510.,  10550., 12686., 14918.,
      10574., 12806., 15134., 17558., 12638., 15062., 17582., 20198., 14702.,
      17318., 20030., 22838., 16766., 19574., 22478., 25478., 18830., 21830.,
      24926., 28118., 12559., 14155., 15799., 17491., 8335.,  9931.,  11575.,
      13267., 22958., 26342., 29822., 33398., 25022., 28598., 32270., 36038.,
      27086., 30854., 34718., 38678., 29150., 33110., 37166., 41318., 31214.,
      35366., 39614., 43958., 33278., 37622., 42062., 46598., 21127., 23395.,
      25711., 28075., 14215., 16483., 18799., 21163., 37406., 42134., 46958.,
      51878., 39470., 44390., 49406., 54518., 41534., 46646., 51854., 57158.,
      42830., 47110., 51486., 55958., 40030., 43478., 47022., 50662., 42094.,
      45734., 49470., 53302., 24831., 26747., 28711., 30723., 19327., 21243.,
      23207., 25219., 46222., 50246., 54366., 58582., 48286., 52502., 56814.,
      61222., 50350., 54758., 59262., 63862., 43454., 47030., 50702., 54470.,
      32462., 35206., 38046., 40982., 34526., 37462., 40494., 43622., 20343.,
      21907., 23519., 25179., 16247., 17811., 19423., 21083., 38654., 41974.,
      45390., 48902., 40718., 44230., 47838., 51542., 42782., 46486., 50286.,
      54182., 27694., 30566., 33534., 36598., 8510.,  10550., 12686., 14918.,
      10574., 12806., 15134., 17558., 7663.,  8875.,  10135., 11443., 4562.,
      5210.,  5890.,  6602.,  11652., 13076., 14564., 16116., 13540., 15092.,
      16708., 18388., 15428., 17108., 18852., 20660., 17316., 19124., 20996.,
      22932., 19204., 21140., 23140., 25204., 21092., 23156., 25284., 27476.,
      12706., 13802., 14930., 16090., 5461.,  5929.,  6413.,  6913.,  12762.,
      13762., 14794., 15858., 13962., 15026., 16122., 17250., 15162., 16290.,
      17450., 18642., 16362., 17554., 18778., 20034., 17562., 18818., 20106.,
      21426., 18762., 20082., 21434., 22818., 10749., 11441., 12149., 12873.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,
      16920., 480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920.,
      750.,   4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,
      6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,
      13380., 25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,
      16920., 720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380.,
      1080.,  6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,
      7308.,  18732., 35532., 1080.,  6264.,  16056., 30456., 900.,   5220.,
      13380., 25380., 720.,   4176.,  10704., 20304., 840.,   4872.,  12488.,
      23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732., 35532.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,
      7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610.,
      29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,
      6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732.,
      35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1260.,  7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,
      4872.,  12488., 23688., 720.,   4176.,  10704., 20304., 900.,   5220.,
      13380., 25380., 1080.,  6264.,  16056., 30456., 1260.,  7308.,  18732.,
      35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056., 30456.,
      900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304., 600.,
      3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,   5220.,
      13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610.,
      29610., 900.,   5220.,  13380., 25380., 750.,   4350.,  11150., 21150.,
      600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536., 600.,
      3480.,  8920.,  16920., 720.,   4176.,  10704., 20304., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1724.,
      3036.,  4604.,  6428.,  3068.,  4892.,  6972.,  9308.,  3772.,  5084.,
      6652.,  8476.,  380.,   1180.,  2236.,  3548.,  1724.,  3036.,  4604.,
      6428.,  2558.,  3470.,  4510.,  5678.,  860.,   2428.,  4252.,  6332.,
      6840.,  9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 15672.,
      19832., 24504., 29688., 13624., 17784., 22456., 27640., 6840.,  9976.,
      13624., 17784., 8888.,  12024., 15672., 19832., 8348.,  10428., 12764.,
      15356., 7354.,  9578.,  12186., 15178., 14004., 18964., 24692., 31188.,
      8564.,  13012., 18228., 24212., 11956., 16916., 22644., 29140., 19444.,
      24916., 31156., 38164., 14004., 18964., 24692., 31188., 8564.,  13012.,
      18228., 24212., 6490.,  8970.,  11834., 15082., 5466.,  7946.,  10810.,
      14058., 19444., 24916., 31156., 38164., 14004., 18964., 24692., 31188.,
      8564.,  13012., 18228., 24212., 11956., 16916., 22644., 29140., 19444.,
      24916., 31156., 38164., 14004., 18964., 24692., 31188., 5626.,  8362.,
      11482., 14986., 2938.,  4650.,  6746.,  9226.,  11956., 16916., 22644.,
      29140., 19444., 24916., 31156., 38164., 14004., 18964., 24692., 31188.,
      8564.,  13012., 18228., 24212., 11956., 16916., 22644., 29140., 19444.,
      24916., 31156., 38164., 12954., 15946., 19322., 23082., 1050.,  3018.,
      5370.,  8106.,  8564.,  13012., 18228., 24212., 11956., 16916., 22644.,
      29140., 19444., 24916., 31156., 38164., 14004., 18964., 24692., 31188.,
      8564.,  13012., 18228., 24212., 11956., 16916., 22644., 29140., 12090.,
      15338., 18970., 22986., 7354.,  9578.,  12186., 15178., 14004., 18964.,
      24692., 31188., 8564.,  13012., 18228., 24212., 11956., 16916., 22644.,
      29140., 19444., 24916., 31156., 38164., 14004., 18964., 24692., 31188.,
      8564.,  13012., 18228., 24212., 6490.,  8970.,  11834., 15082., 5276.,
      7356.,  9692.,  12284., 17720., 21880., 26552., 31736., 10936., 14072.,
      17720., 21880., 4792.,  7928.,  11576., 15736., 11576., 15736., 20408.,
      25592., 17720., 21880., 26552., 31736., 10936., 14072., 17720., 21880.,
      1884.,  3452.,  5276.,  7356.,  350.,   1006.,  1790.,  2702.,  3068.,
      4892.,  6972.,  9308.,  3772.,  5084.,  6652.,  8476.,  380.,   1180.,
      2236.,  3548.,  1724.,  3036.,  4604.,  6428.,  3068.,  4892.,  6972.,
      9308.,  3772.,  5084.,  6652.,  8476.,  190.,   590.,   1118.,  1774.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2048.,  2840.,  3752.,  4788.,  5194.,  5600.,  5240.,  4740.,  4096.,
      4220.,  5725.,  7420.,  9310.,  9940.,  10570., 9730.,  8675.,  7400.,
      7560.,  10110., 12936., 16044., 16947., 17850., 16248., 14340., 12120.,
      12320., 16310., 20678., 25431., 26656., 27881., 25172., 22050., 18508.,
      18242., 23870., 29939., 36456., 37681., 38906., 34811., 30240., 25186.,
      24164., 31430., 39200., 47481., 48706., 49931., 44450., 38430., 31864.,
      29256., 37740., 46704., 56154., 57351., 58548., 51744., 44430., 36600.,
      31920., 40975., 50470., 60410., 61530., 62650., 55120., 47125., 38660.,
      31904., 40820., 50120., 59808., 60802., 61796., 54200., 46200., 37792.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   10.,   16.,   22.,   28.,   34.,   32.,   21.,
      12.,  38.,  80.,   101.,  122.,  143.,  164.,  138.,  84.,
      54.,  144., 273.,  318.,  363.,  408.,  453.,  360.,  210.,
      138., 333., 588.,  633.,  678.,  723.,  768.,  591.,  336.,
      222., 522., 903.,  948.,  993.,  1038., 1083., 822.,  462.,
      306., 711., 1218., 1263., 1308., 1353., 1398., 1053., 588.,
      390., 900., 1533., 1578., 1623., 1668., 1713., 1284., 714.,
      424., 938., 1544., 1583., 1622., 1661., 1700., 1238., 672.,
      301., 652., 1054., 1078., 1102., 1126., 1150., 824.,  441.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5808.,  7652.,  9832.,  12348., 11764., 10924., 10344., 9044.,  7344.,
      9196.,  12629., 15546., 18851., 19021., 18935., 15706., 11545., 7916.,
      12872., 15686., 17132., 19018., 19214., 19026., 15884., 12590., 10888.,
      13540., 17583., 21582., 26105., 26303., 26117., 21070., 16555., 12516.,
      17756., 20441., 24226., 27375., 26069., 25243., 22546., 19237., 15516.,
      14196., 17955., 21910., 26117., 25547., 26385., 21558., 17023., 13236.,
      17096., 20382., 22908., 24466., 25094., 25082., 21308., 16774., 14248.,
      12476., 15137., 18226., 21175., 21041., 20395., 15890., 13797., 11004.,
      10800., 11348., 14312., 15916., 15684., 14940., 13960., 12420., 10192.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   59.,    101.,   143.,   185.,   227.,   222.,  149.,
      70.,   244.,  538.,   694.,   850.,   1006.,  1162.,  996.,  614.,
      363.,  1002., 1941.,  2283.,  2625.,  2967.,  3309.,  2658., 1563.,
      993.,  2430., 4335.,  4677.,  5019.,  5361.,  5703.,  4422., 2529.,
      1623., 3858., 6729.,  7071.,  7413.,  7755.,  8097.,  6186., 3495.,
      2253., 5286., 9123.,  9465.,  9807.,  10149., 10491., 7950., 4461.,
      2883., 6714., 11517., 11859., 12201., 12543., 12885., 9714., 5427.,
      3214., 7140., 11794., 12094., 12394., 12694., 12994., 9492., 5166.,
      2309., 5014., 8123.,  8309.,  8495.,  8681.,  8867.,  6366., 3413.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13536., 19288., 26064., 30024., 31848., 29256., 25040., 18520., 13536.,
      20280., 28110., 33204., 39978., 39266., 38234., 29172., 21246., 13944.,
      27728., 33604., 41368., 47116., 48028., 44524., 34584., 24932., 19280.,
      31528., 39738., 46076., 55086., 53590., 51774., 40700., 33354., 25192.,
      34120., 39666., 47372., 53590., 51774., 50278., 41612., 32642., 27016.,
      32296., 39274., 44252., 51774., 50278., 52878., 42012., 35002., 27304.,
      31120., 34916., 40344., 44524., 45820., 43532., 37976., 28868., 24016.,
      25784., 30558., 33236., 38234., 38162., 39114., 31316., 28110., 21816.,
      20640., 23256., 27408., 29256., 31848., 31880., 29776., 24856., 20640.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   706.,   1018.,  1330.,  1642.,  1644.,  1118.,
      460.,   1720.,  3908.,  5108.,  6308.,  7508.,  8708.,  7544.,  4684.,
      2634.,  7428.,  14574., 17238., 19902., 22566., 25230., 20388., 12042.,
      7506.,  18516., 33222., 35886., 38550., 41214., 43878., 34164., 19602.,
      12378., 29604., 51870., 54534., 55918., 55254., 52542., 39236., 21786.,
      15970., 36084., 60534., 63198., 58438., 51630., 42774., 32020., 17826.,
      13418., 30276., 50766., 53430., 42526., 29574., 14574., 12516., 7722.,
      4012.,  9592.,  16868., 19220., 21572., 23924., 26276., 20024., 11308.,
      4510.,  10124., 16906., 18370., 19834., 21298., 22762., 16748., 9182.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7280.,  8192.,  10180., 11360., 13480., 14880., 17132., 18768., 18380.,
      20008., 19500., 21120., 17768., 19168., 15492., 16656., 12656., 13568.,
      14396., 15600., 19361., 20852., 23850., 25584., 28715., 30712., 29565.,
      31568., 30287., 32296., 26450., 28168., 21901., 23308., 16620., 17696.,
      21448., 22816., 27214., 28920., 31692., 33696., 36634., 38960., 36770.,
      39116., 36778., 39144., 31340., 33376., 25086., 26768., 17992., 19296.,
      25860., 27520., 31927., 34008., 35958., 38424., 40605., 43484., 40223.,
      43136., 39713., 42660., 33374., 35920., 26051., 28168., 17716., 19376.,
      27476., 29192., 32801., 34936., 35190., 37708., 38191., 41120., 36081.,
      38980., 34675., 37608., 32134., 34668., 28613., 30720., 24084., 25736.,
      22372., 24080., 29131., 31256., 36150., 38656., 43777., 46692., 43971.,
      46856., 45765., 48684., 40622., 43144., 34503., 36600., 27380., 29024.,
      25896., 27424., 31950., 33840., 37276., 39488., 43114., 45672., 41418.,
      43932., 42218., 44752., 36220., 38400., 29358., 31160., 21608., 23008.,
      19836., 21056., 22629., 24124., 25882., 27672., 29615., 31720., 28329.,
      30440., 30563., 32744., 26578., 28480., 21905., 23508., 16524., 17808.,
      12912., 13952., 12388., 13648., 16328., 17824., 20652., 22400., 22076.,
      23816., 23820., 25616., 21704., 23264., 19012., 20320., 15728., 16768.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    6.,    16.,   19.,   40.,   37.,   64.,   55.,   88.,
      73.,   112.,  91.,   136.,  94.,   128.,  65.,   84.,   22.,   48.,
      92.,   152.,  218.,  320.,  290.,  404.,  362.,  488.,  434.,  572.,
      506.,  656.,  444.,  552.,  278.,  336.,  147.,  216.,  426.,  576.,
      849.,  1092., 1011., 1272., 1173., 1452., 1335., 1632., 1497., 1812.,
      1218., 1440., 723.,  840.,  441.,  552.,  1098., 1332., 1983., 2352.,
      2145., 2532., 2307., 2712., 2469., 2892., 2631., 3072., 2058., 2364.,
      1185., 1344., 735.,  888.,  1770., 2088., 3117., 3612., 3279., 3792.,
      3441., 3972., 3603., 4152., 3765., 4332., 2898., 3288., 1647., 1848.,
      1029., 1224., 2442., 2844., 4251., 4872., 4413., 5052., 4575., 5232.,
      4737., 5412., 4899., 5592., 3738., 4212., 2109., 2352., 1323., 1560.,
      3114., 3600., 5385., 6132., 5547., 6312., 5709., 6492., 5871., 6672.,
      6033., 6852., 4578., 5136., 2571., 2856., 1518., 1696., 3388., 3752.,
      5618., 6176., 5762., 6332., 5906., 6488., 6050., 6644., 6194., 6800.,
      4540., 4952., 2478., 2688., 1105., 1204., 2406., 2608., 3907., 4216.,
      3997., 4312., 4087., 4408., 4177., 4504., 4267., 4600., 3070., 3296.,
      1649., 1764.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5840.,  7696.,  8420.,  10868., 11512., 14552., 13196., 16828., 14076.,
      17772., 12812., 16444., 11000., 14040., 8036.,  10484., 5840.,  7696.,
      8820.,  11460., 12429., 15681., 14654., 18550., 17703., 22275., 17323.,
      21943., 16847., 21387., 12702., 16470., 9141.,  12105., 5844.,  8100.,
      12216., 15512., 14774., 18830., 18308., 23060., 20802., 26314., 21242.,
      26786., 19538., 24986., 15044., 19540., 10662., 14270., 8248.,  11032.,
      13852., 17676., 17503., 22235., 20234., 25842., 24317., 30769., 23561.,
      30029., 22709., 29065., 17674., 23026., 14487., 18867., 10876., 14316.,
      15116., 19004., 17443., 22223., 20866., 26506., 23561., 30029., 22709.,
      29065., 21953., 28325., 18114., 23498., 14107., 18535., 11756., 15260.,
      14236., 18060., 17287., 21987., 19354., 24898., 22709., 29065., 21953.,
      28325., 23245., 29633., 18298., 23714., 15263., 19739., 11868., 15436.,
      13848., 17272., 15398., 19518., 17796., 22548., 19538., 24986., 20170.,
      25650., 19010., 24522., 16676., 21300., 12534., 16334., 10488., 13528.,
      11444., 14340., 13573., 16985., 14638., 18598., 16847., 21387., 16787.,
      21375., 17239., 21875., 13678., 17638., 12429., 15681., 9588.,  12228.,
      9200.,  11440., 10276., 12980., 12120., 15288., 12812., 16444., 14076.,
      17772., 14060., 17820., 13240., 16536., 11012., 13844., 9200.,  11440.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   251.,   455.,   383.,
      635.,   515.,   815.,   647.,   995.,   690.,   954.,   485.,   633.,
      130.,   330.,   628.,   1092.,  1558.,  2350.,  2110.,  2998.,  2662.,
      3646.,  3214.,  4294.,  3766.,  4942.,  3348.,  4196.,  2114.,  2570.,
      1047.,  1587.,  3126.,  4302.,  6333.,  8241.,  7593.,  9645.,  8853.,
      11049., 10113., 12453., 11373., 13857., 9318.,  11070., 5559.,  6483.,
      3315.,  4191.,  8334.,  10182., 15153., 18069., 16413., 19473., 17673.,
      20877., 18933., 22281., 20193., 23685., 15870., 18294., 9171.,  10431.,
      5583.,  6795.,  13542., 16062., 23973., 27897., 25233., 29301., 26493.,
      30705., 27753., 32109., 29013., 33513., 22422., 25518., 12783., 14379.,
      7851.,  9399.,  18750., 21942., 32793., 37725., 34053., 39129., 35313.,
      40533., 36573., 41937., 37833., 43341., 28974., 32742., 16395., 18327.,
      10119., 12003., 23958., 27822., 41613., 47553., 42873., 48957., 44133.,
      50361., 45393., 51765., 46653., 53169., 35526., 39966., 20007., 22275.,
      11794., 13210., 26388., 29284., 43846., 48286., 44974., 49510., 46102.,
      50734., 47230., 51958., 48358., 53182., 35508., 38788., 19410., 21082.,
      8645.,  9433.,  18850., 20458., 30647., 33107., 31355., 33863., 32063.,
      34619., 32771., 35375., 33479., 36131., 24114., 25914., 12965., 13881.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3808.,  8160.,  2200.,  7640.,  5712.,  12240., 3080.,  10696., 6664.,
      14280., 3080.,  10696., 5712.,  12240., 2200.,  7640.,  3808.,  8160.,
      2200.,  7640.,  5742.,  12414., 3300.,  11460., 8122.,  17514., 3850.,
      13370., 8122.,  17514., 3300.,  11460., 5742.,  12414., 2200.,  7640.,
      5712.,  12240., 3300.,  11460., 8568.,  18360., 4620.,  16044., 9996.,
      21420., 4620.,  16044., 8568.,  18360., 3300.,  11460., 5712.,  12240.,
      3080.,  10696., 8122.,  17514., 4620.,  16044., 11454., 24654., 5390.,
      18718., 11454., 24654., 4620.,  16044., 8122.,  17514., 3080.,  10696.,
      6664.,  14280., 3850.,  13370., 9996.,  21420., 5390.,  18718., 11454.,
      24654., 5390.,  18718., 9996.,  21420., 3850.,  13370., 6664.,  14280.,
      3080.,  10696., 8122.,  17514., 4620.,  16044., 11454., 24654., 5390.,
      18718., 11454., 24654., 4620.,  16044., 8122.,  17514., 3080.,  10696.,
      5712.,  12240., 3300.,  11460., 8568.,  18360., 4620.,  16044., 9996.,
      21420., 4620.,  16044., 8568.,  18360., 3300.,  11460., 5712.,  12240.,
      2200.,  7640.,  5742.,  12414., 3300.,  11460., 8122.,  17514., 3850.,
      13370., 8122.,  17514., 3300.,  11460., 5742.,  12414., 2200.,  7640.,
      3808.,  8160.,  2200.,  7640.,  5712.,  12240., 3080.,  10696., 6664.,
      14280., 3080.,  10696., 5712.,  12240., 2200.,  7640.,  3808.,  8160.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  1834.,  3418.,  2842.,
      4810.,  3850.,  6202.,  4858.,  7594.,  5276.,  7356.,  3742.,  4910.,
      860.,   2428.,  3960.,  6584.,  8404.,  12596., 7988.,  11924., 12308.,
      17012., 16628., 22100., 20948., 27188., 18552., 23224., 11740., 14332.,
      7226.,  10474., 13780., 20020., 23886., 31838., 18206., 25262., 21358.,
      28542., 29246., 37582., 37134., 46622., 27412., 34164., 10298., 13546.,
      17610., 21498., 29684., 37204., 26110., 35982., 23886., 31838., 18206.,
      25262., 21358., 28542., 29246., 37582., 22068., 28052., 8266.,  11130.,
      15066., 18570., 36756., 44532., 39982., 50750., 26110., 35982., 23886.,
      31838., 18206., 25262., 21358., 28542., 16724., 21940., 6234.,  8714.,
      12522., 15642., 30900., 37908., 45022., 55662., 39982., 50750., 26110.,
      35982., 23886., 31838., 18206., 25262., 11380., 15828., 4202.,  6298.,
      9978.,  12714., 25044., 31284., 37134., 46622., 45022., 55662., 39982.,
      50750., 26110., 35982., 23886., 31838., 10772., 15476., 2170.,  3882.,
      7324.,  9404.,  18552., 23224., 27412., 34164., 34292., 41812., 41172.,
      49460., 35124., 43156., 20244., 26996., 12792., 16440., 540.,   1596.,
      3742.,  4910.,  9692.,  12284., 13370., 16618., 16938., 20570., 20506.,
      24522., 24074., 28474., 14714., 18474., 1180.,  3260.,  30.,    174.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9808.,  10688., 11600., 12544., 12948., 14096., 15284., 16512., 16824.,
      18208., 19640., 21120., 21308., 22960., 24668., 26432., 20172., 21808.,
      23500., 25248., 18524., 20144., 21820., 23552., 17848., 19232., 20664.,
      22144., 15796., 16912., 18068., 19264., 12880., 13760., 14672., 15616.,
      15940., 17136., 18372., 19648., 22185., 23684., 25233., 26832., 27446.,
      29224., 31062., 32960., 33403., 35500., 37667., 39904., 33719., 35828.,
      38007., 40256., 33523., 35644., 37835., 40096., 27702., 29512., 31382.,
      33312., 20097., 21556., 23065., 24624., 13508., 14640., 15812., 17024.,
      22776., 24224., 25720., 27264., 27710., 29496., 31342., 33248., 29940.,
      32048., 34228., 36480., 32954., 35432., 37994., 40640., 33394., 35848.,
      38386., 41008., 33066., 35496., 38010., 40608., 27572., 29616., 31732.,
      33920., 21742., 23416., 25150., 26944., 19064., 20384., 21752., 23168.,
      23468., 25232., 27052., 28928., 30659., 32860., 35131., 37472., 37778.,
      40408., 43122., 45920., 45961., 49012., 52161., 55408., 46349., 49404.,
      52557., 55808., 45969., 49028., 52185., 55440., 36818., 39416., 42098.,
      44864., 28715., 30860., 33075., 35360., 21548., 23248., 25004., 26816.,
      31804., 33616., 35484., 37408., 36287., 38532., 40847., 43232., 42986.,
      45656., 48410., 51248., 48429., 51516., 54701., 57984., 45937., 48964.,
      52089., 55312., 44277., 47308., 50437., 53664., 39818., 42392., 45050.,
      47792., 34119., 36244., 38439., 40704., 27580., 29264., 31004., 32800.,
      24716., 26512., 28364., 30272., 31355., 33580., 35875., 38240., 38402.,
      41048., 43778., 46592., 45969., 49028., 52185., 55440., 44821., 47884.,
      51045., 54304., 46489., 49556., 52721., 55984., 37762., 40376., 43074.,
      45856., 29603., 31772., 34011., 36320., 22924., 24656., 26444., 28288.,
      30712., 32416., 34168., 35968., 36494., 38584., 40734., 42944., 40788.,
      43248., 45780., 48384., 43178., 45992., 48890., 51872., 44482., 47272.,
      50146., 53104., 44506., 47272., 50122., 53056., 37844., 40176., 42580.,
      45056., 29630., 31544., 33518., 35552., 25400., 26912., 28472., 30080.,
      22180., 23536., 24932., 26368., 26929., 28564., 30249., 31984., 32454.,
      34408., 36422., 38496., 37747., 39996., 42315., 44704., 37455., 39716.,
      42047., 44448., 36139., 38412., 40755., 43168., 27846., 29768., 31750.,
      33792., 24329., 25924., 27569., 29264., 19364., 20656., 21988., 23360.,
      19280., 20416., 21584., 22784., 19892., 21264., 22676., 24128., 25272.,
      26912., 28600., 30336., 27996., 29872., 31804., 33792., 27564., 29424.,
      31340., 33312., 26108., 27952., 29852., 31808., 24696., 26272., 27896.,
      29568., 22100., 23440., 24820., 26240., 18192., 19264., 20368., 21504.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   103.,   148.,   199.,   256.,   163.,   220.,
      283.,   352.,   223.,   292.,   367.,   448.,   283.,   364.,   451.,
      544.,   314.,   376.,   442.,   512.,   225.,   260.,   297.,   336.,
      42.,    88.,    138.,   192.,   260.,   368.,   484.,   608.,   686.,
      872.,   1070.,  1280.,  950.,   1160.,  1382.,  1616.,  1214.,  1448.,
      1694.,  1952.,  1478.,  1736.,  2006.,  2288.,  1742.,  2024.,  2318.,
      2624.,  1572.,  1776.,  1988.,  2208.,  1002.,  1112.,  1226.,  1344.,
      459.,   588.,   723.,   864.,   1422.,  1704.,  1998.,  2304.,  2937.,
      3396.,  3873.,  4368.,  3549.,  4044.,  4557.,  5088.,  4161.,  4692.,
      5241.,  5808.,  4773.,  5340.,  5925.,  6528.,  5385.,  5988.,  6609.,
      7248.,  4446.,  4872.,  5310.,  5760.,  2667.,  2892.,  3123.,  3360.,
      1551.,  1764.,  1983.,  2208.,  3942.,  4392.,  4854.,  5328.,  7221.,
      7932.,  8661.,  9408.,  7833.,  8580.,  9345.,  10128., 8445.,  9228.,
      10029., 10848., 9057.,  9876.,  10713., 11568., 9669.,  10524., 11397.,
      12288., 7638.,  8232.,  8838.,  9456.,  4431.,  4740.,  5055.,  5376.,
      2643.,  2940.,  3243.,  3552.,  6462.,  7080.,  7710.,  8352.,  11505.,
      12468., 13449., 14448., 12117., 13116., 14133., 15168., 12729., 13764.,
      14817., 15888., 13341., 14412., 15501., 16608., 13953., 15060., 16185.,
      17328., 10830., 11592., 12366., 13152., 6195.,  6588.,  6987.,  7392.,
      3735.,  4116.,  4503.,  4896.,  8982.,  9768.,  10566., 11376., 15789.,
      17004., 18237., 19488., 16401., 17652., 18921., 20208., 17013., 18300.,
      19605., 20928., 17625., 18948., 20289., 21648., 18237., 19596., 20973.,
      22368., 14022., 14952., 15894., 16848., 7959.,  8436.,  8919.,  9408.,
      4827.,  5292.,  5763.,  6240.,  11502., 12456., 13422., 14400., 20073.,
      21540., 23025., 24528., 20685., 22188., 23709., 25248., 21297., 22836.,
      24393., 25968., 21909., 23484., 25077., 26688., 22521., 24132., 25761.,
      27408., 17214., 18312., 19422., 20544., 9723.,  10284., 10851., 11424.,
      5722.,  6072.,  6426.,  6784.,  12836., 13552., 14276., 15008., 21374.,
      22472., 23582., 24704., 21926., 23048., 24182., 25328., 22478., 23624.,
      24782., 25952., 23030., 24200., 25382., 26576., 23582., 24776., 25982.,
      27200., 17348., 18160., 18980., 19808., 9498.,  9912.,  10330., 10752.,
      4225.,  4420.,  4617.,  4816.,  9226.,  9624.,  10026., 10432., 15019.,
      15628., 16243., 16864., 15367., 15988., 16615., 17248., 15715., 16348.,
      16987., 17632., 16063., 16708., 17359., 18016., 16411., 17068., 17731.,
      18400., 11834., 12280., 12730., 13184., 6369.,  6596.,  6825.,  7056.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6352.,  8208.,  10320., 12688., 6660.,  8980.,  11620., 14580., 9528.,
      12312., 15480., 19032., 9324.,  12572., 16268., 20412., 10604., 13852.,
      17548., 21692., 9324.,  12572., 16268., 20412., 9528.,  12312., 15480.,
      19032., 6660.,  8980.,  11620., 14580., 6352.,  8208.,  10320., 12688.,
      6148.,  8468.,  11108., 14068., 10045., 12849., 16053., 19657., 9894.,
      13246., 17078., 21390., 12479., 16443., 20967., 26051., 10887., 14947.,
      19567., 24747., 14319., 18347., 22935., 28083., 10758., 14238., 18198.,
      22638., 9069.,  11937., 15205., 18873., 6148.,  8468.,  11108., 14068.,
      9528.,  12312., 15480., 19032., 9430.,  12846., 16742., 21118., 13428.,
      17476., 22100., 27300., 13682., 18490., 23970., 30122., 17442., 22314.,
      27858., 34074., 13426., 18234., 23714., 29866., 13428., 17476., 22100.,
      27300., 9686.,  13102., 16998., 21374., 9528.,  12312., 15480., 19032.,
      9836.,  13084., 16780., 20924., 12783., 16811., 21399., 26547., 13218.,
      18090., 23634., 29850., 20133., 25785., 32221., 39441., 17085., 22769.,
      29237., 36489., 18037., 23625., 29997., 37153., 12354., 17098., 22514.,
      28602., 14015., 17979., 22503., 27587., 9836.,  13084., 16780., 20924.,
      11116., 14364., 18060., 22204., 11447., 15571., 20255., 25499., 17234.,
      22170., 27778., 34058., 17085., 22769., 29237., 36489., 18037., 23625.,
      29997., 37153., 14989., 20609., 27013., 34201., 16114., 20922., 26402.,
      32554., 12423., 16483., 21103., 26283., 11116., 14364., 18060., 22204.,
      8812.,  12060., 15756., 19900., 15135., 19227., 23879., 29091., 14498.,
      19370., 24914., 31130., 18037., 23625., 29997., 37153., 14989., 20609.,
      27013., 34201., 20133., 25785., 32221., 39441., 14754., 19626., 25170.,
      31386., 12783., 16811., 21399., 26547., 8812.,  12060., 15756., 19900.,
      9528.,  12312., 15480., 19032., 10294., 13838., 17862., 22366., 14548.,
      18724., 23476., 28804., 13426., 18234., 23714., 29866., 17442., 22314.,
      27858., 34074., 14290., 19226., 24834., 31114., 14548., 18724., 23476.,
      28804., 9430.,  12846., 16742., 21118., 9528.,  12312., 15480., 19032.,
      7172.,  9492.,  12132., 15092., 9069.,  11937., 15205., 18873., 9222.,
      12702., 16662., 21102., 14319., 18347., 22935., 28083., 12983., 17107.,
      21791., 27035., 13599., 17691., 22343., 27555., 8966.,  12446., 16406.,
      20846., 10045., 12849., 16053., 19657., 7172.,  9492.,  12132., 15092.,
      6352.,  8208.,  10320., 12688., 6660.,  8980.,  11620., 14580., 9528.,
      12312., 15480., 19032., 9324.,  12572., 16268., 20412., 10604., 13852.,
      17548., 21692., 9324.,  12572., 16268., 20412., 9528.,  12312., 15480.,
      19032., 6660.,  8980.,  11620., 14580., 6352.,  8208.,  10320., 12688.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  743.,   1091.,  1487.,  1931.,  1199.,  1643.,
      2135.,  2675.,  1655.,  2195.,  2783.,  3419.,  2111.,  2747.,  3431.,
      4163.,  2394.,  2882.,  3402.,  3954.,  1733.,  2009.,  2301.,  2609.,
      250.,   610.,   1002.,  1426.,  1684.,  2276.,  2932.,  3652.,  3726.,
      4678.,  5726.,  6870.,  3550.,  4438.,  5422.,  6502.,  5614.,  6694.,
      7870.,  9142.,  7678.,  8950.,  10318., 11782., 9742.,  11206., 12766.,
      14422., 8724.,  9828.,  10996., 12228., 5562.,  6178.,  6826.,  7506.,
      3231.,  3995.,  4807.,  5667.,  6158.,  7622.,  9182.,  10838., 11021.,
      12865., 14853., 16985., 8293.,  9913.,  11677., 13585., 9853.,  11505.,
      13301., 15241., 13653., 15593., 17677., 19905., 17453., 19681., 22053.,
      24569., 12910., 14502., 16190., 17974., 4767.,  5531.,  6343.,  7203.,
      8343.,  9267.,  10239., 11259., 13950., 15734., 17614., 19590., 11893.,
      14217., 16685., 19297., 11021., 12865., 14853., 16985., 8293.,  9913.,
      11677., 13585., 9853.,  11505., 13301., 15241., 13653., 15593., 17677.,
      19905., 10334., 11734., 13230., 14822., 3799.,  4467.,  5183.,  5947.,
      7119.,  7947.,  8823.,  9747.,  17454., 19302., 21246., 23286., 18717.,
      21265., 23957., 26793., 11893., 14217., 16685., 19297., 11021., 12865.,
      14853., 16985., 8293.,  9913.,  11677., 13585., 9853.,  11505., 13301.,
      15241., 7758.,  8966.,  10270., 11670., 2831.,  3403.,  4023.,  4691.,
      5895.,  6627.,  7407.,  8235.,  14622., 16278., 18030., 19878., 21253.,
      23769., 26429., 29233., 18717., 21265., 23957., 26793., 11893., 14217.,
      16685., 19297., 11021., 12865., 14853., 16985., 8293.,  9913.,  11677.,
      13585., 5182.,  6198.,  7310.,  8518.,  1863.,  2339.,  2863.,  3435.,
      4671.,  5307.,  5991.,  6723.,  11790., 13254., 14814., 16470., 17453.,
      19681., 22053., 24569., 21253., 23769., 26429., 29233., 18717., 21265.,
      23957., 26793., 11893., 14217., 16685., 19297., 11021., 12865., 14853.,
      16985., 4846.,  5926.,  7102.,  8374.,  895.,   1275.,  1703.,  2179.,
      3418.,  3906.,  4426.,  4978.,  8724.,  9828.,  10996., 12228., 12910.,
      14502., 16190., 17974., 16254., 18038., 19918., 21894., 19598., 21574.,
      23646., 25814., 16606., 18518., 20526., 22630., 9326.,  10918., 12606.,
      14390., 5972.,  6820.,  7732.,  8708.,  154.,   386.,   650.,   946.,
      1733.,  2009.,  2301.,  2609.,  4538.,  5154.,  5802.,  6482.,  6303.,
      7067.,  7879.,  8739.,  8039.,  8899.,  9807.,  10763., 9775.,  10731.,
      11735., 12787., 11511., 12563., 13663., 14811., 6911.,  7803.,  8743.,
      9731.,  346.,   834.,   1354.,  1906.,  5.,     25.,    61.,    113.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  2074.,
      4042.,  6394.,  9130.,  5626.,  8362.,  11482., 14986., 8538.,  11018.,
      13882., 17130., 7354.,  9578.,  12186., 15178., 2074.,  4042.,  6394.,
      9130.,  5116.,  6940.,  9020.,  11356., 4766.,  5934.,  7230.,  8654.,
      1020.,  2844.,  4924.,  7260.,  7544.,  10168., 13304., 16952., 14708.,
      19156., 24372., 30356., 14004., 18964., 24692., 31188., 9204.,  14676.,
      20916., 27924., 16052., 21012., 26740., 33236., 14708., 19156., 24372.,
      30356., 3448.,  6072.,  9208.,  12856., 5116.,  6940.,  9020.,  11356.,
      10906., 13898., 17274., 21034., 7156.,  12628., 18868., 25876., 24590.,
      32030., 40622., 50366., 28846., 36542., 45390., 55390., 24910., 32862.,
      41966., 52222., 12782., 20990., 30350., 40862., 24590., 32030., 40622.,
      50366., 14708., 19156., 24372., 30356., 2074.,  4042.,  6394.,  9130.,
      14138., 17386., 21018., 25034., 22836., 28820., 35572., 43092., 12782.,
      20990., 30350., 40862., 24590., 32030., 40622., 50366., 28846., 36542.,
      45390., 55390., 24910., 32862., 41966., 52222., 12782., 20990., 30350.,
      40862., 16052., 21012., 26740., 33236., 7354.,  9578.,  12186., 15178.,
      8538.,  11018., 13882., 17130., 21492., 26964., 33204., 40212., 24910.,
      32862., 41966., 52222., 12782., 20990., 30350., 40862., 24590., 32030.,
      40622., 50366., 28846., 36542., 45390., 55390., 24910., 32862., 41966.,
      52222., 9204.,  14676., 20916., 27924., 8538.,  11018., 13882., 17130.,
      3578.,  6314.,  9434.,  12938., 16052., 21012., 26740., 33236., 28846.,
      36542., 45390., 55390., 24910., 32862., 41966., 52222., 12782., 20990.,
      30350., 40862., 24590., 32030., 40622., 50366., 28846., 36542., 45390.,
      55390., 14004., 18964., 24692., 31188., 5626.,  8362.,  11482., 14986.,
      10906., 13898., 17274., 21034., 7156.,  12628., 18868., 25876., 24590.,
      32030., 40622., 50366., 28846., 36542., 45390., 55390., 24910., 32862.,
      41966., 52222., 12782., 20990., 30350., 40862., 24590., 32030., 40622.,
      50366., 14708., 19156., 24372., 30356., 2074.,  4042.,  6394.,  9130.,
      13948., 16796., 19900., 23260., 21112., 25784., 30968., 36664., 7156.,
      12628., 18868., 25876., 16052., 21012., 26740., 33236., 21492., 26964.,
      33204., 40212., 22836., 28820., 35572., 43092., 7156.,  12628., 18868.,
      25876., 7544.,  10168., 13304., 16952., 380.,   1180.,  2236.,  3548.,
      4766.,  5934.,  7230.,  8654.,  13948., 16796., 19900., 23260., 10906.,
      13898., 17274., 21034., 3578.,  6314.,  9434.,  12938., 8538.,  11018.,
      13882., 17130., 14138., 17386., 21018., 25034., 10906., 13898., 17274.,
      21034., 1020.,  2844.,  4924.,  7260.,  30.,    174.,   446.,   846.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2220.,  3070.,  4046.,  5152.,  5558.,  5964.,  6370.,  5930.,  5340.,
      4596.,  4600.,  6225.,  8050.,  10080., 10710., 11340., 11970., 10975.,
      9750.,  8290.,  8270.,  11035., 14091., 17444., 18347., 19250., 20153.,
      18285., 16090., 13562., 13510., 17786., 22397., 27350., 28319., 29224.,
      30065., 26552., 23110., 19284., 19450., 24778., 30447., 36464., 36985.,
      37442., 37835., 32846., 28370., 23504., 23598., 29530., 35809., 42442.,
      42515., 42524., 42469., 36452., 31390., 25932., 25674., 31617., 37881.,
      44472., 44069., 43602., 43071., 36483., 31330., 25814., 25060., 30299.,
      35816., 41616., 40688., 39696., 38640., 32149., 27590., 22718., 21476.,
      25226., 29194., 33384., 31882., 30316., 28686., 23030., 19820., 16364.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,    10.,   20.,   30.,   40.,   50.,   52.,   45.,   28.,
      13.,  41.,   86.,   150.,  186.,  222.,  258.,  239.,  191.,  112.,
      64.,  167.,  312.,  502.,  580.,  658.,  736.,  645.,  494.,  280.,
      169., 398.,  690.,  1048., 1126., 1204., 1282., 1086., 809.,  448.,
      274., 629.,  1068., 1594., 1672., 1750., 1828., 1527., 1124., 616.,
      379., 860.,  1446., 2140., 2218., 2296., 2374., 1968., 1439., 784.,
      484., 1091., 1824., 2686., 2764., 2842., 2920., 2409., 1754., 952.,
      539., 1171., 1898., 2722., 2790., 2858., 2926., 2357., 1681., 896.,
      387., 826.,  1318., 1864., 1906., 1948., 1990., 1582., 1115., 588.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6560.,  8376.,  10544., 11208., 10112., 10808., 12240., 11520., 10128.,
      8640.,  9020.,  11761., 14930., 17831., 17489., 16795., 17605., 14542.,
      10555., 7492.,  11168., 14296., 17936., 20504., 20796., 19840., 19236.,
      17656., 15020., 12400., 12940., 16605., 20874., 25227., 25937., 24375.,
      23933., 21022., 17779., 13636., 18172., 21025., 24530., 28039., 28109.,
      27059., 25977., 20614., 15767., 13300., 16108., 18053., 20570., 25155.,
      26985., 26927., 27861., 24238., 20059., 17572., 13328., 16284., 19736.,
      21844., 21672., 22812., 23792., 19424., 15520., 12672., 13804., 15509.,
      17626., 19075., 19421., 20311., 20945., 17974., 14447., 11348., 8192.,
      10176., 12480., 14784., 15928., 16944., 17832., 15088., 12952., 10144.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    59.,    124.,   196.,   268.,   340.,   365.,   322.,
      203.,   76.,    264.,   580.,   1040.,  1312.,  1584.,  1856.,  1744.,
      1408.,  832.,   437.,   1174.,  2235.,  3644.,  4244.,  4844.,  5444.,
      4809.,  3706.,  2111.,  1235.,  2938.,  5133.,  7844.,  8444.,  9044.,
      9644.,  8211.,  6142.,  3413.,  2033.,  4702.,  8031.,  12044., 12644.,
      13244., 13844., 11613., 8578.,  4715.,  2831.,  6466.,  10929., 16244.,
      16844., 17444., 18044., 15015., 11014., 6017.,  3629.,  8230.,  13827.,
      20444., 21044., 21644., 22244., 18417., 13450., 7319.,  4128.,  8992.,
      14608., 20992., 21520., 22048., 22576., 18220., 13016., 6948.,  2993.,
      6398.,  10223., 14476., 14804., 15132., 15460., 12305., 8682.,  4583.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16672., 18696., 25520., 29912., 28664., 27096., 27384., 19632., 18472.,
      16160., 19704., 23582., 28244., 35226., 37394., 35338., 38210., 29444.,
      22710., 18904., 23280., 29628., 37096., 43188., 48004., 45012., 45924.,
      38856., 29196., 18288., 30984., 36578., 46572., 52070., 54990., 54710.,
      53214., 42492., 36586., 25704., 35656., 40018., 47628., 54710., 53214.,
      49862., 52782., 41756., 35674., 29864., 32008., 39234., 44460., 49862.,
      52782., 50454., 53374., 45116., 37834., 31976., 26416., 32940., 40456.,
      43396., 45524., 43940., 47092., 41512., 33468., 24304., 24184., 26766.,
      33268., 38570., 40354., 39962., 39378., 33124., 27686., 18648., 22240.,
      25960., 28272., 32696., 34264., 31416., 32472., 26160., 21256., 16672.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   856.,   1400.,  1944.,  2488.,  2722.,  2428.,
      1542.,  500.,   1864.,  4220.,  7696.,  9808.,  11920., 14032., 13292.,
      10792., 6404.,  3202.,  8756.,  16214., 25384., 27400., 28392., 33096.,
      29022., 22276., 12666., 8778.,  20228., 29806., 41416., 39336., 36232.,
      40936., 35382., 26836., 15106., 10258., 23508., 31110., 41064., 34248.,
      25384., 27400., 21390., 16804., 9738.,  7002.,  16292., 28062., 42504.,
      42472., 41416., 39336., 27750., 21364., 12178., 8482.,  19572., 33462.,
      50344., 46216., 41064., 34248., 20158., 15044., 6810.,  5156.,  12072.,
      20876., 31696., 35856., 40016., 39440., 31484., 20872., 7476.,  5870.,
      12972., 21370., 31128., 33720., 36312., 30072., 21906., 12060., 470.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7664.,  8496.,  10464., 11512., 13624., 14904., 17160., 18688., 18024.,
      19544., 18760., 20272., 20328., 21896., 18872., 20264., 16960., 18160.,
      14576., 15568., 13788., 14944., 17997., 19396., 22602., 24264., 27623.,
      29568., 28089., 30040., 28427., 30384., 30493., 32520., 27538., 29308.,
      23939., 25432., 19676., 20872., 20328., 21688., 24684., 26348., 29540.,
      31532., 34920., 37264., 34672., 37036., 34296., 36680., 36544., 39012.,
      32580., 34740., 27844., 29672., 22312., 23784., 24308., 26008., 28277.,
      30312., 32790., 35188., 37875., 40664., 36661., 39420., 35191., 37920.,
      37113., 39876., 32030., 34400., 26939., 28952., 20980., 22608., 25236.,
      26984., 26873., 28968., 29078., 31548., 35975., 38848., 37065., 39908.,
      37899., 40712., 38925., 41772., 34094., 36536., 30127., 32200., 25268.,
      26944., 27188., 28984., 32893., 35048., 39190., 41732., 46107., 49064.,
      45405., 48332., 44447., 47344., 44577., 47508., 37694., 40208., 32547.,
      34680., 26484., 28208., 29288., 30888., 32664., 34564., 36532., 38756.,
      40916., 43488., 38324., 40852., 35476., 37960., 34612., 37116., 27444.,
      29580., 23032., 24840., 17832., 19288., 25372., 26768., 26089., 27756.,
      27258., 29216., 28899., 31168., 27101., 29376., 29271., 31552., 31313.,
      33600., 28354., 30292., 25015., 26648., 20956., 22264., 16624., 17808.,
      20920., 22312., 25560., 27176., 30560., 32416., 31472., 33320., 32256.,
      34096., 32912., 34744., 27992., 29528., 23720., 25008., 18864., 19888.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     6.,     16.,    19.,    40.,    44.,    80.,    76.,
      120.,   108.,   160.,   140.,   200.,   157.,   208.,   142.,   180.,
      91.,    112.,   24.,    52.,    100.,   164.,   236.,   344.,   440.,
      600.,   568.,   744.,   696.,   888.,   824.,   1032.,  788.,   956.,
      644.,   764.,   384.,   448.,   181.,   256.,   506.,   668.,   987.,
      1248.,  1636.,  2008.,  1924.,  2320.,  2212.,  2632.,  2500.,  2944.,
      2229.,  2580.,  1730.,  1976.,  991.,   1120.,  559.,   676.,   1346.,
      1592.,  2373.,  2760.,  3652.,  4192.,  3940.,  4504.,  4228.,  4816.,
      4516.,  5128.,  3867.,  4344.,  2906.,  3236.,  1621.,  1792.,  937.,
      1096.,  2186.,  2516.,  3759.,  4272.,  5668.,  6376.,  5956.,  6688.,
      6244.,  7000.,  6532.,  7312.,  5505.,  6108.,  4082.,  4496.,  2251.,
      2464.,  1315.,  1516.,  3026.,  3440.,  5145.,  5784.,  7684.,  8560.,
      7972.,  8872.,  8260.,  9184.,  8548.,  9496.,  7143.,  7872.,  5258.,
      5756.,  2881.,  3136.,  1693.,  1936.,  3866.,  4364.,  6531.,  7296.,
      9700.,  10744., 9988.,  11056., 10276., 11368., 10564., 11680., 8781.,
      9636.,  6434.,  7016.,  3511.,  3808.,  1972.,  2156.,  4308.,  4684.,
      7016.,  7592.,  10104., 10888., 10360., 11160., 10616., 11432., 10872.,
      11704., 8792.,  9428.,  6292.,  6724.,  3364.,  3584.,  1445.,  1548.,
      3094.,  3304.,  4951.,  5272.,  7020.,  7456.,  7180.,  7624.,  7340.,
      7792.,  7500.,  7960.,  5977.,  6328.,  4222.,  4460.,  2231.,  2352.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7344.,  9328.,  8140.,  10556., 11272., 14248., 13188., 16724., 12532.,
      16132., 11780., 15316., 11892., 15492., 8328.,  11304., 7996.,  10476.,
      7088.,  9072.,  8596.,  11108., 10277., 13305., 12270., 15974., 15407.,
      19819., 16403., 20991., 15415., 19923., 16827., 21383., 12822., 16622.,
      9785.,  12925., 8228.,  10676., 10088., 13192., 12890., 16738., 16220.,
      20876., 18894., 24294., 21222., 26782., 19774., 25238., 20214., 25710.,
      17132., 21724., 12722., 16474., 7720.,  10568., 13612., 17372., 15979.,
      20599., 20498., 26074., 22849., 29221., 24237., 30753., 24153., 30557.,
      23397., 29817., 18570., 23922., 16071., 20515., 11132., 14572., 15884.,
      19772., 17651., 22367., 20994., 26634., 24153., 30557., 23397., 29817.,
      21777., 28085., 23165., 29617., 18170., 23586., 15567., 20107., 13148.,
      16716., 14124., 17884., 17339., 21895., 19506., 24954., 21777., 28085.,
      23165., 29617., 22057., 28397., 23445., 29929., 19818., 25298., 16599.,
      21235., 14140., 17836., 11592., 14824., 14498., 18442., 17868., 22588.,
      18982., 24414., 19966., 25558., 19222., 24718., 20718., 26374., 18364.,
      23148., 14746., 18722., 10600., 13704., 10708., 13476., 11693., 15073.,
      14622., 18646., 16999., 21571., 17803., 22551., 17647., 22315., 17331.,
      22047., 14566., 18558., 12225., 15461., 8100.,  10548., 9936.,  12304.,
      11548., 14412., 12456., 15816., 14484., 18212., 15236., 19028., 13844.,
      17572., 14340., 18132., 11464., 14696., 9292.,  11964., 7344.,  9328.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   292.,   564.,   532.,
      868.,   772.,   1172.,  1012.,  1476.,  1163.,  1559.,  1066.,  1362.,
      689.,   853.,   142.,   358.,   684.,   1180.,  1690.,  2530.,  3224.,
      4472.,  4216.,  5592.,  5208.,  6712.,  6200.,  7832.,  5986.,  7306.,
      4924.,  5868.,  2950.,  3454.,  1307.,  1895.,  3742.,  5014.,  7401.,
      9453.,  12380., 15308., 14636., 17756., 16892., 20204., 19148., 22652.,
      17157., 19929., 13366., 15310., 7679.,  8699.,  4247.,  5171.,  10294.,
      12238., 18237., 21297., 28172., 32444., 30428., 34892., 32684., 37340.,
      34940., 39788., 30009., 33789., 22606., 25222., 12635., 13991., 7187.,
      8447.,  16846., 19462., 29073., 33141., 43964., 49580., 45836., 51132.,
      46684., 51660., 46508., 51164., 35565., 38817., 25958., 28222., 14135.,
      15315., 9743.,  10827., 21606., 23870., 35685., 39225., 52076., 56988.,
      49852., 54444., 46604., 50876., 42332., 46284., 28833., 31557., 21118.,
      23030., 11539., 12543., 8203.,  9111.,  18174., 20086., 30009., 33021.,
      43804., 48012., 37484., 41372., 30140., 33708., 21772., 25020., 9813.,
      12009., 8086.,  9646.,  4847.,  5675.,  2358.,  2798.,  5564.,  6508.,
      9682.,  11194., 14776., 16920., 16792., 19064., 18808., 21208., 20824.,
      23352., 17626., 19618., 13132., 14524., 7278.,  8006.,  2781.,  3089.,
      6162.,  6810.,  10175., 11195., 14852., 16276., 16116., 17604., 17380.,
      18932., 18644., 20260., 15251., 16511., 11034., 11906., 5961.,  6413.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  2104.,  4216.,  3960.,
      6584.,  5816.,  8952.,  7672.,  11320., 8938.,  12058., 8252.,  10588.,
      5358.,  6654.,  940.,   2636.,  4376.,  7256.,  9412.,  13988., 16560.,
      23344., 17584., 24368., 25392., 33200., 33200., 42032., 32420., 39812.,
      26968., 32408., 16332., 19308., 8618.,  11226., 13236., 18196., 20766.,
      27822., 30568., 40488., 20520., 29928., 23400., 33320., 33064., 44520.,
      34734., 44478., 30292., 37556., 18970., 22986., 7994.,  11242., 21460.,
      27700., 30926., 39902., 43304., 54760., 30568., 40488., 20520., 29928.,
      23400., 33320., 26334., 34926., 23924., 30420., 15402., 19034., 6730.,
      9594.,  18804., 25300., 36350., 46222., 49896., 62888., 43304., 54760.,
      30568., 40488., 20520., 29928., 17934., 25374., 17556., 23284., 11834.,
      15082., 5466.,  7946.,  15508., 21236., 30894., 40638., 51752., 65256.,
      49896., 62888., 43304., 54760., 30568., 40488., 16318., 23630., 11188.,
      16148., 8266.,  11130., 4202.,  6298.,  12212., 17172., 24798., 33390.,
      42728., 55720., 51752., 65256., 49896., 62888., 43304., 54760., 27630.,
      35838., 11604., 16820., 4698.,  7178.,  2828.,  4268.,  8280.,  11672.,
      16868., 22724., 29104., 37936., 36912., 46768., 44080., 53936., 40368.,
      49200., 30916., 37540., 15256., 19160., 1708.,  3404.,  190.,   590.,
      1052.,  2108.,  2842.,  4810.,  5816.,  8952.,  7672.,  11320., 9528.,
      13688., 10744., 14392., 9802.,  12666., 6396.,  8220.,  270.,   798.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11376., 12224., 13104., 14016., 14540., 15616., 16732., 17888., 18344.,
      19680., 21064., 22496., 19204., 20768., 22388., 24064., 17044., 18592.,
      20196., 21856., 18468., 20000., 21588., 23232., 21236., 22816., 24452.,
      26144., 20232., 21600., 23016., 24480., 17948., 19072., 20236., 21440.,
      15408., 16320., 17264., 18240., 15524., 16752., 18020., 19328., 20433.,
      21940., 23497., 25104., 26118., 27944., 29830., 31776., 31315., 33436.,
      35627., 37888., 30607., 32740., 34943., 37216., 29323., 31404., 33555.,
      35776., 30919., 33012., 35175., 37408., 25422., 27208., 29054., 30960.,
      18157., 19596., 21085., 22624., 12692., 13808., 14964., 16160., 19528.,
      20896., 22312., 23776., 25098., 26800., 28562., 30384., 31596., 33680.,
      35836., 38064., 35982., 38432., 40966., 43584., 36486., 38976., 41550.,
      44208., 34622., 37088., 39638., 42272., 33334., 35840., 38430., 41104.,
      30876., 33040., 35276., 37584., 26402., 28176., 30010., 31904., 21928.,
      23328., 24776., 26272., 22236., 24016., 25852., 27744., 28759., 30932.,
      33175., 35488., 36378., 39000., 41706., 44496., 44309., 47308., 50405.,
      53600., 45721., 48724., 51825., 55024., 42717., 45660., 48701., 51840.,
      41825., 44772., 47817., 50960., 36914., 39416., 42002., 44672., 31323.,
      33388., 35523., 37728., 23916., 25552., 27244., 28992., 32508., 34384.,
      36316., 38304., 37359., 39652., 42015., 44448., 43402., 46168., 49018.,
      51952., 49597., 52764., 56029., 59392., 49729., 52900., 56169., 59536.,
      47749., 50860., 54069., 57376., 45577., 48692., 51905., 55216., 35810.,
      38456., 41186., 44000., 27059., 29244., 31499., 33824., 23052., 24784.,
      26572., 28416., 28700., 30416., 32188., 34016., 31815., 33908., 36071.,
      38304., 35962., 38488., 41098., 43792., 44261., 47212., 50261., 53408.,
      47785., 50804., 53921., 57136., 47661., 50684., 53805., 57024., 49393.,
      52484., 55673., 58960., 43026., 45688., 48434., 51264., 35531., 37772.,
      40083., 42464., 31404., 33232., 35116., 37056., 23400., 24992., 26632.,
      28320., 28642., 30560., 32538., 34576., 34780., 37072., 39436., 41872.,
      38262., 40912., 43646., 46464., 37838., 40528., 43302., 46160., 40166.,
      42832., 45582., 48416., 42046., 44752., 47542., 50416., 34124., 36432.,
      38812., 41264., 27098., 29024., 31010., 33056., 22152., 23712., 25320.,
      26976., 24900., 26224., 27588., 28992., 27753., 29348., 30993., 32688.,
      31350., 33256., 35222., 37248., 33659., 35852., 38115., 40448., 34199.,
      36468., 38807., 41216., 35955., 38236., 40587., 43008., 37199., 39492.,
      41855., 44288., 31998., 33928., 35918., 37968., 25637., 27228., 28869.,
      30560., 20084., 21360., 22676., 24032., 14256., 15296., 16368., 17472.,
      17788., 19040., 20332., 21664., 21896., 23392., 24936., 26528., 26068.,
      27776., 29540., 31360., 28260., 30016., 31828., 33696., 30196., 32000.,
      33860., 35776., 31876., 33728., 35636., 37600., 26920., 28512., 30152.,
      31840., 23116., 24480., 25884., 27328., 18032., 19136., 20272., 21440.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   116.,   176.,   244.,   320.,   228.,   304.,
      388.,   480.,   340.,   432.,   532.,   640.,   452.,   560.,   676.,
      800.,   535.,   628.,   727.,   832.,   498.,   568.,   642.,   720.,
      325.,   364.,   405.,   448.,   46.,    96.,    150.,   208.,   284.,
      400.,   524.,   656.,   746.,   944.,   1154.,  1376.,  1464.,  1760.,
      2072.,  2400.,  1944.,  2272.,  2616.,  2976.,  2424.,  2784.,  3160.,
      3552.,  2904.,  3296.,  3704.,  4128.,  2834.,  3152.,  3482.,  3824.,
      2348.,  2576.,  2812.,  3056.,  1414.,  1536.,  1662.,  1792.,  583.,
      724.,   871.,   1024.,  1718.,  2024.,  2342.,  2672.,  3453.,  3948.,
      4461.,  4992.,  5836.,  6544.,  7276.,  8032.,  6940.,  7696.,  8476.,
      9280.,  8044.,  8848.,  9676.,  10528., 9148.,  10000., 10876., 11776.,
      8241.,  8916.,  9609.,  10320., 6446.,  6920.,  7406.,  7904.,  3715.,
      3964.,  4219.,  4480.,  2011.,  2236.,  2467.,  2704.,  4910.,  5384.,
      5870.,  6368.,  8745.,  9492.,  10257., 11040., 13564., 14608., 15676.,
      16768., 14668., 15760., 16876., 18016., 15772., 16912., 18076., 19264.,
      16876., 18064., 19276., 20512., 14541., 15468., 16413., 17376., 10982.,
      11624., 12278., 12944., 6151.,  6484.,  6823.,  7168.,  3439.,  3748.,
      4063.,  4384.,  8102.,  8744.,  9398.,  10064., 14037., 15036., 16053.,
      17088., 21292., 22672., 24076., 25504., 22396., 23824., 25276., 26752.,
      23500., 24976., 26476., 28000., 24604., 26128., 27676., 29248., 20841.,
      22020., 23217., 24432., 15518., 16328., 17150., 17984., 8587.,  9004.,
      9427.,  9856.,  4867.,  5260.,  5659.,  6064.,  11294., 12104., 12926.,
      13760., 19329., 20580., 21849., 23136., 29020., 30736., 32476., 34240.,
      30124., 31888., 33676., 35488., 31228., 33040., 34876., 36736., 32332.,
      34192., 36076., 37984., 27141., 28572., 30021., 31488., 20054., 21032.,
      22022., 23024., 11023., 11524., 12031., 12544., 6295.,  6772.,  7255.,
      7744.,  14486., 15464., 16454., 17456., 24621., 26124., 27645., 29184.,
      36748., 38800., 40876., 42976., 37852., 39952., 42076., 44224., 38956.,
      41104., 43276., 45472., 40060., 42256., 44476., 46720., 33441., 35124.,
      36825., 38544., 24590., 25736., 26894., 28064., 13459., 14044., 14635.,
      15232., 7526.,  7888.,  8254.,  8624.,  16492., 17232., 17980., 18736.,
      26930., 28064., 29210., 30368., 38872., 40416., 41976., 43552., 39864.,
      41440., 43032., 44640., 40856., 42464., 44088., 45728., 41848., 43488.,
      45144., 46816., 33914., 35168., 36434., 37712., 24316., 25168., 26028.,
      26896., 13022., 13456., 13894., 14336., 5577.,  5780.,  5985.,  6192.,
      11962., 12376., 12794., 13216., 19171., 19804., 20443., 21088., 27220.,
      28080., 28948., 29824., 27844., 28720., 29604., 30496., 28468., 29360.,
      30260., 31168., 29092., 30000., 30916., 31840., 23215., 23908., 24607.,
      25312., 16418., 16888., 17362., 17840., 8685.,  8924.,  9165.,  9408.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5840.,  7696.,  9808.,  12176., 6612.,  8868.,  11444., 14340., 8760.,
      11544., 14712., 18264., 10044., 13228., 16860., 20940., 10396., 13708.,
      17468., 21676., 9532.,  12716., 16348., 20428., 10908., 14220., 17980.,
      22188., 8760.,  11544., 14712., 18264., 7476.,  9860.,  12564., 15588.,
      5840.,  7696.,  9808.,  12176., 6660.,  8980.,  11620., 14580., 8717.,
      11457., 14597., 18137., 10662., 14014., 17846., 22158., 11407., 15307.,
      19767., 24787., 12471., 16595., 21279., 26523., 12735., 16699., 21223.,
      26307., 13191., 17251., 21871., 27051., 10582., 13998., 17894., 22270.,
      9141.,  12105., 15469., 19233., 7428.,  9748.,  12388., 15348., 9272.,
      12056., 15224., 18776., 9150.,  12534., 16398., 20742., 12068., 16180.,
      20868., 26132., 15530., 20242., 25626., 31682., 16314., 21218., 26794.,
      33042., 12714., 17426., 22810., 28866., 15034., 19938., 25514., 31762.,
      13348., 17460., 22148., 27412., 11982., 15558., 19614., 24150., 8248.,
      11032., 14200., 17752., 10092., 13340., 17036., 21180., 13095., 17027.,
      21519., 26571., 14834., 19642., 25122., 31274., 15405., 20897., 27173.,
      34233., 18693., 24473., 31037., 38385., 18525., 24081., 30421., 37545.,
      17621., 23337., 29837., 37121., 13890., 18634., 24050., 30138., 13087.,
      17179., 21831., 27043., 10860., 14108., 17804., 21948., 10092., 13340.,
      17036., 21180., 11351., 15347., 19903., 25019., 15698., 20634., 26242.,
      32522., 18525., 24081., 30421., 37545., 17621., 23337., 29837., 37121.,
      15405., 20897., 27173., 34233., 18693., 24473., 31037., 38385., 16290.,
      21162., 26706., 32922., 12879., 17035., 21751., 27027., 9836.,  13084.,
      16780., 20924., 10092., 13340., 17036., 21180., 13095., 17027., 21519.,
      26571., 14834., 19642., 25122., 31274., 15405., 20897., 27173., 34233.,
      18693., 24473., 31037., 38385., 18525., 24081., 30421., 37545., 17621.,
      23337., 29837., 37121., 13890., 18634., 24050., 30138., 13087., 17179.,
      21831., 27043., 10860., 14108., 17804., 21948., 8248.,  11032., 14200.,
      17752., 9710.,  13158., 17086., 21494., 14468., 18708., 23524., 28916.,
      15834., 20610., 26058., 32178., 14826., 19794., 25434., 31746., 13530.,
      18306., 23754., 29874., 17130., 22098., 27738., 34050., 13604., 17716.,
      22404., 27668., 10142., 13654., 17646., 22118., 8248.,  11032., 14200.,
      17752., 7684.,  10004., 12644., 15604., 8765.,  11569., 14773., 18377.,
      9990.,  13470., 17430., 21870., 12223., 16187., 20711., 25795., 14567.,
      18755., 23503., 28811., 13039., 17067., 21655., 26803., 11703., 15827.,
      20511., 25755., 10838., 14254., 18150., 22526., 9861.,  12761., 16061.,
      19761., 7428.,  9748.,  12388., 15348., 5840.,  7696.,  9808.,  12176.,
      6612.,  8868.,  11444., 14340., 8760.,  11544., 14712., 18264., 10044.,
      13228., 16860., 20940., 10396., 13708., 17468., 21676., 9532.,  12716.,
      16348., 20428., 10908., 14220., 17980., 22188., 8760.,  11544., 14712.,
      18264., 7476.,  9860.,  12564., 15588., 5840.,  7696.,  9808.,  12176.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  820.,   1284.,  1812.,  2404.,  1684.,  2276.,
      2932.,  3652.,  2548.,  3268.,  4052.,  4900.,  3412.,  4260.,  5172.,
      6148.,  4103.,  4835.,  5615.,  6443.,  3850.,  4402.,  4986.,  5602.,
      2525.,  2833.,  3157.,  3497.,  274.,   666.,   1090.,  1546.,  1860.,
      2516.,  3236.,  4020.,  4182.,  5230.,  6374.,  7614.,  7496.,  9064.,
      10760., 12584., 8008.,  9576.,  11272., 13096., 11784., 13608., 15560.,
      17640., 15560., 17640., 19848., 22184., 15334., 17086., 18934., 20878.,
      12836., 14132., 15492., 16916., 7810.,  8522.,  9266.,  10042., 4007.,
      4611.,  5263.,  5963.,  6046.,  7190.,  8430.,  9766.,  9573.,  11193.,
      12957., 14865., 14140., 16428., 18908., 21580., 9180.,  11340., 13692.,
      16236., 10556., 12844., 15324., 17996., 15196., 17868., 20732., 23788.,
      16221., 18513., 20949., 23529., 14286., 16006., 17822., 19734., 9007.,
      9963.,  10967., 12019., 3615.,  4379.,  5191.,  6051.,  9998.,  11462.,
      13022., 14678., 14413., 16513., 18757., 21145., 20316., 22988., 25852.,
      28908., 14140., 16428., 18908., 21580., 9180.,  11340., 13692., 16236.,
      10556., 12844., 15324., 17996., 12165., 14169., 16317., 18609., 11198.,
      12726., 14350., 16070., 7271.,  8131.,  9039.,  9995.,  3031.,  3699.,
      4415.,  5179.,  8638.,  10166., 11790., 13510., 17013., 19337., 21805.,
      24417., 23420., 26476., 29724., 33164., 20316., 22988., 25852., 28908.,
      14140., 16428., 18908., 21580., 9180.,  11340., 13692., 16236., 8109.,
      9825.,  11685., 13689., 8110.,  9446.,  10878., 12406., 5535.,  6299.,
      7111.,  7971.,  2447.,  3019.,  3639.,  4307.,  7086.,  8422.,  9854.,
      11382., 14301., 16593., 19029., 21609., 24284., 27468., 30844., 34412.,
      23420., 26476., 29724., 33164., 20316., 22988., 25852., 28908., 14140.,
      16428., 18908., 21580., 7317.,  9001.,  10829., 12801., 5022.,  6166.,
      7406.,  8742.,  3799.,  4467.,  5183.,  5947.,  1863.,  2339.,  2863.,
      3435.,  5534.,  6678.,  7918.,  9254.,  11397., 13401., 15549., 17841.,
      19836., 22892., 26140., 29580., 24284., 27468., 30844., 34412., 23420.,
      26476., 29724., 33164., 20316., 22988., 25852., 28908., 12861., 14769.,
      16821., 19017., 5198.,  6406.,  7710.,  9110.,  2063.,  2635.,  3255.,
      3923.,  1250.,  1578.,  1938.,  2330.,  3748.,  4532.,  5380.,  6292.,
      7750.,  9118.,  10582., 12142., 13512., 15592., 17800., 20136., 17288.,
      19624., 22088., 24680., 20872., 23208., 25672., 28264., 19144., 21224.,
      23432., 25768., 14678., 16238., 17894., 19646., 7172.,  8084.,  9060.,
      10100., 658.,   1050.,  1474.,  1930.,  53.,    137.,   237.,   353.,
      410.,   642.,   906.,   1202.,  1199.,  1643.,  2135.,  2675.,  2548.,
      3268.,  4052.,  4900.,  3412.,  4260.,  5172.,  6148.,  4276.,  5252.,
      6292.,  7396.,  4948.,  5796.,  6708.,  7684.,  4567.,  5235.,  5951.,
      6715.,  2986.,  3410.,  3866.,  4354.,  77.,    193.,   325.,   473.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 750.,
      4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610.,
      29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380., 25380.,
      750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,  6264.,
      16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732.,
      35532., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532.,
      1080.,  6264.,  16056., 30456., 900.,   5220.,  13380., 25380., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 1050.,  6090.,
      15610., 29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854.,
      41454., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,
      6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732.,
      35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,
      7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610.,
      29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1470.,
      8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,  6090.,
      15610., 29610., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 900.,   5220.,  13380., 25380., 1080.,  6264.,  16056., 30456.,
      1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532., 1260.,
      7308.,  18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,
      16056., 30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150.,
      900.,   5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,
      6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 900.,   5220.,  13380., 25380., 750.,   4350.,  11150.,
      21150., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 720.,   4176.,  10704., 20304., 840.,
      4872.,  12488., 23688., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,
      2378.,  3706.,  5418.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,
      6520.,  9144.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,  6520.,
      9144.,  570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,  4572.,
      190.,   590.,   1118.,  1774.,  220.,   764.,   1564.,  2620.,  1784.,
      3384.,  5496.,  8120.,  2004.,  4148.,  7060.,  10740., 3568.,  6768.,
      10992., 16240., 3568.,  6768.,  10992., 16240., 3568.,  6768.,  10992.,
      16240., 3568.,  6768.,  10992., 16240., 3348.,  6004.,  9428.,  13620.,
      1784.,  3384.,  5496.,  8120.,  1564.,  2620.,  3932.,  5500.,  250.,
      938.,   2010.,  3466.,  2164.,  4564.,  7732.,  11668., 3438.,  6526.,
      10766., 16158., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512.,
      25384., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384.,
      3918.,  7774.,  12782., 18942., 3188.,  5588.,  8756.,  12692., 1754.,
      3210.,  5050.,  7274.,  410.,   1354.,  2682.,  4394.,  3188.,  5588.,
      8756.,  12692., 2574.,  5918.,  10414., 16062., 6376.,  11176., 17512.,
      25384., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384.,
      4328.,  9128.,  15464., 23336., 6126.,  10238., 15502., 21918., 2164.,
      4564.,  7732.,  11668., 2938.,  4650.,  6746.,  9226.,  250.,   938.,
      2010.,  3466.,  2164.,  4564.,  7732.,  11668., 3438.,  6526.,  10766.,
      16158., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384.,
      4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384., 3918.,
      7774.,  12782., 18942., 3188.,  5588.,  8756.,  12692., 1754.,  3210.,
      5050.,  7274.,  410.,   1354.,  2682.,  4394.,  3188.,  5588.,  8756.,
      12692., 2574.,  5918.,  10414., 16062., 6376.,  11176., 17512., 25384.,
      4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384., 4328.,
      9128.,  15464., 23336., 6126.,  10238., 15502., 21918., 2164.,  4564.,
      7732.,  11668., 2938.,  4650.,  6746.,  9226.,  250.,   938.,   2010.,
      3466.,  2164.,  4564.,  7732.,  11668., 3438.,  6526.,  10766., 16158.,
      4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384., 4328.,
      9128.,  15464., 23336., 6376.,  11176., 17512., 25384., 3918.,  7774.,
      12782., 18942., 3188.,  5588.,  8756.,  12692., 1754.,  3210.,  5050.,
      7274.,  220.,   764.,   1564.,  2620.,  1784.,  3384.,  5496.,  8120.,
      2004.,  4148.,  7060.,  10740., 3568.,  6768.,  10992., 16240., 3568.,
      6768.,  10992., 16240., 3568.,  6768.,  10992., 16240., 3568.,  6768.,
      10992., 16240., 3348.,  6004.,  9428.,  13620., 1784.,  3384.,  5496.,
      8120.,  1564.,  2620.,  3932.,  5500.,  30.,    174.,   446.,   846.,
      380.,   1180.,  2236.,  3548.,  1434.,  2378.,  3706.,  5418.,  760.,
      2360.,  4472.,  7096.,  2808.,  4408.,  6520.,  9144.,  760.,   2360.,
      4472.,  7096.,  2808.,  4408.,  6520.,  9144.,  570.,   1770.,  3354.,
      5322.,  1404.,  2204.,  3260.,  4572.,  190.,   590.,   1118.,  1774.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1876.,  2610.,  3458.,  4424.,  4830.,  4550.,  4140.,  3596.,  3840.,
      5225.,  6790.,  8540.,  9170.,  8485.,  7600.,  6510.,  6850.,  9185.,
      11781., 14644., 15547., 14211., 12590., 10678., 11130., 14770., 18767.,
      23128., 24353., 22064., 19390., 16324., 16394., 21490., 26999., 32928.,
      34153., 30632., 26670., 22260., 21658., 28210., 35231., 42728., 43953.,
      39200., 33950., 28196., 26922., 34930., 43463., 52528., 53753., 47768.,
      41230., 34132., 31366., 40415., 49959., 60004., 61201., 54045., 46370.,
      38170., 33420., 42875., 52780., 63140., 64260., 56515., 48300., 39610.,
      32860., 42030., 51590., 61544., 62538., 54842., 46740., 38228.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    7.,    10.,   13.,   16.,   19.,   14.,   11.,   35.,
      45.,   55.,   65.,   75.,   85.,   56.,   44.,   121.,  142.,  163.,
      184.,  205.,  226.,  140.,  114.,  290.,  326.,  362.,  398.,  434.,
      470.,  280.,  226.,  542.,  578.,  614.,  650.,  686.,  722.,  420.,
      338.,  794.,  830.,  866.,  902.,  938.,  974.,  560.,  450.,  1046.,
      1082., 1118., 1154., 1190., 1226., 700.,  512.,  1147., 1180., 1213.,
      1246., 1279., 1312., 728.,  467.,  1025., 1051., 1077., 1103., 1129.,
      1155., 630.,  301.,  652.,  667.,  682.,  697.,  712.,  727.,  392.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4736.,  6256.,  8160.,  10480., 12136., 10768., 8760.,  8224.,  7260.,
      10137., 13410., 17119., 19273., 17638., 15191., 13012., 9712.,  11956.,
      14728., 18076., 20608., 18144., 14704., 12384., 9788.,  13857., 18578.,
      23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783.,
      28957., 25694., 21235., 17668., 9788.,  13857., 18578., 23911., 27085.,
      25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957., 25694.,
      21235., 17668., 9664.,  13632., 18208., 23344., 26308., 24280., 21196.,
      18128., 12364., 15261., 18666., 21499., 23861., 20430., 16075., 12900.,
      5856.,  8424.,  11408., 14744., 16752., 15840., 14256., 11968.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   42.,   62.,   82.,   102.,  122.,  95.,   64.,   224.,
      296.,  368.,  440.,  512.,  584.,  396.,  289.,  830.,  986.,  1142.,
      1298., 1454., 1610., 1015., 792.,  2064., 2336., 2608., 2880., 3152.,
      3424., 2064., 1632., 3968., 4240., 4512., 4784., 5056., 5328., 3128.,
      2472., 5872., 6144., 6416., 6688., 6960., 7232., 4192., 3312., 7776.,
      8048., 8320., 8592., 8864., 9136., 5256., 3853., 8678., 8930., 9182.,
      9434., 9686., 9938., 5539., 3556., 7832., 8032., 8232., 8432., 8632.,
      8832., 4832., 2309., 5014., 5130., 5246., 5362., 5478., 5594., 3023.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9248.,  13480., 18672., 25080., 31960., 27504., 23944., 21536., 12280.,
      18110., 24980., 33210., 41970., 36836., 31750., 26904., 14768., 22220.,
      30920., 41060., 51764., 46568., 40636., 34096., 16712., 25490., 35980.,
      48118., 60830., 56188., 50090., 42600., 16712., 25490., 35980., 48118.,
      60830., 56188., 50090., 42600., 16712., 25490., 35980., 48118., 60830.,
      56188., 50090., 42600., 16712., 25490., 35980., 48118., 60830., 56188.,
      50090., 42600., 15856., 23900., 33320., 43988., 55076., 49160., 42380.,
      34864., 13688., 20782., 28980., 38090., 47490., 44100., 36470., 28696.,
      10720., 16648., 23472., 30936., 38584., 37104., 32360., 24096.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   284.,   428.,   572.,   716.,   860.,   694.,   420.,
      1576.,  2120.,  2664.,  3208.,  3752.,  4296.,  2964.,  2066.,  6100.,
      7300.,  8500.,  9700.,  10900., 12100., 7706.,  5864.,  15504., 17616.,
      19728., 21840., 23952., 26064., 15816., 12360., 30288., 32400., 34512.,
      35344., 34128., 36240., 20776., 17576., 40464., 42576., 44688., 41424.,
      36112., 38224., 21640., 18696., 42448., 44560., 46672., 39312., 29904.,
      32016., 18408., 15010., 33652., 35620., 37588., 25988., 12340., 14308.,
      8618.,  4692.,  11016., 12584., 14152., 15720., 17288., 18856., 10692.,
      4510.,  10124., 11036., 11948., 12860., 13772., 14684., 8118.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6640.,  7504.,  9320.,  10440., 12440., 13832., 16016., 17696., 17584.,
      19320., 16664., 18200., 15240., 16560., 13296., 14384., 12956., 14080.,
      17461., 18852., 22410., 24088., 27823., 29808., 29889., 31944., 27154.,
      28948., 23767., 25280., 19708., 20920., 18728., 19976., 23792., 25348.,
      29364., 31252., 35468., 37712., 37716., 40044., 33684., 35724., 28920.,
      30648., 23400., 24792., 21780., 23272., 26873., 28744., 32598., 34876.,
      38983., 41696., 41609., 44420., 37022., 39488., 31563., 33656., 25204.,
      26896., 22420., 24104., 26889., 29000., 32086., 34652., 38039., 41088.,
      40665., 43812., 36062., 38816., 30491., 32824., 23924., 25808., 18452.,
      20072., 24921., 26952., 32086., 34556., 39975., 42912., 42601., 45636.,
      38942., 41600., 34347., 36600., 28788., 30608., 23700., 25256., 30377.,
      32328., 37718., 40092., 45751., 48576., 48377., 51300., 43358., 45920.,
      37435., 39608., 30580., 32336., 21224., 22552., 25988., 27644., 31300.,
      33308., 37184., 39568., 39712., 42180., 35076., 37236., 29668., 31496.,
      23464., 24936., 19036., 20272., 22129., 23660., 25722., 27568., 29835.,
      32016., 32069., 34320., 27874., 29836., 22971., 24624., 17340., 18664.,
      10096., 11120., 13776., 15032., 17848., 19352., 22328., 24096., 24072.,
      25896., 21944., 23528., 19232., 20560., 15920., 16976.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    6.,    16.,   14.,   28.,   22.,   40.,   30.,   52.,
      38.,   64.,   46.,   76.,   39.,   56.,   20.,   44.,   84.,   140.,
      116.,  180.,  148.,  220.,  180.,  260.,  212.,  300.,  244.,  340.,
      172.,  224.,  113.,  176.,  346.,  484.,  418.,  568.,  490.,  652.,
      562.,  736.,  634.,  820.,  706.,  904.,  455.,  560.,  336.,  456.,
      904.,  1160., 1032., 1304., 1160., 1448., 1288., 1592., 1416., 1736.,
      1544., 1880., 944.,  1120., 728.,  904.,  1800., 2168., 1928., 2312.,
      2056., 2456., 2184., 2600., 2312., 2744., 2440., 2888., 1448., 1680.,
      1120., 1352., 2696., 3176., 2824., 3320., 2952., 3464., 3080., 3608.,
      3208., 3752., 3336., 3896., 1952., 2240., 1512., 1800., 3592., 4184.,
      3720., 4328., 3848., 4472., 3976., 4616., 4104., 4760., 4232., 4904.,
      2456., 2800., 1805., 2048., 4090., 4588., 4210., 4720., 4330., 4852.,
      4450., 4984., 4570., 5116., 4690., 5248., 2627., 2912., 1688., 1868.,
      3732., 4100., 3828., 4204., 3924., 4308., 4020., 4412., 4116., 4516.,
      4212., 4620., 2312., 2520., 1105., 1204., 2406., 2608., 2462., 2668.,
      2518., 2728., 2574., 2788., 2630., 2848., 2686., 2908., 1455., 1568.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3888.,  5360.,  5756.,  7724.,  8040.,  10632., 10868., 14212., 14084.,
      17876., 12072., 15432., 10508., 13436., 9520.,  12016., 5140.,  7140.,
      7765.,  10345., 10830., 14150., 14495., 18715., 18595., 23375., 16294.,
      20542., 14033., 17717., 11908., 14996., 6152.,  8616.,  9490.,  12730.,
      13420., 17500., 17974., 23086., 22990., 28774., 20700., 25868., 18074.,
      22562., 15176., 18920., 6924.,  9788.,  10835., 14655., 15554., 20426.,
      21049., 27069., 27013., 33817., 25034., 31154., 22375., 27715., 19068.,
      23532., 6924.,  9788.,  10835., 14655., 15554., 20426., 21049., 27069.,
      27013., 33817., 25034., 31154., 22375., 27715., 19068., 23532., 6924.,
      9788.,  10835., 14655., 15554., 20426., 21049., 27069., 27013., 33817.,
      25034., 31154., 22375., 27715., 19068., 23532., 6924.,  9788.,  10835.,
      14655., 15554., 20426., 21049., 27069., 27013., 33817., 25034., 31154.,
      22375., 27715., 19068., 23532., 6632.,  9224.,  10250., 13650., 14524.,
      18796., 19390., 24598., 24598., 30478., 21964., 27196., 18930., 23450.,
      15560., 19304., 5716.,  7972.,  8925.,  11857., 12670., 16310., 16855.,
      21235., 21275., 26215., 19830., 24270., 16345., 20125., 12804., 15892.,
      4432.,  6288.,  7116.,  9532.,  10248., 13224., 13700., 17236., 17300.,
      21284., 16744., 20360., 14620., 17740., 10800., 13296.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   90.,    194.,   146.,   282.,   202.,
      370.,   258.,   458.,   314.,   546.,   281.,   413.,   118.,   302.,
      572.,   1004.,  812.,   1308.,  1052.,  1612.,  1292.,  1916.,  1532.,
      2220.,  1772.,  2524.,  1278.,  1686.,  787.,   1279.,  2510.,  3590.,
      3062.,  4238.,  3614.,  4886.,  4166.,  5534.,  4718.,  6182.,  5270.,
      6830.,  3439.,  4267.,  2460.,  3404.,  6744.,  8760.,  7736.,  9880.,
      8728.,  11000., 9720.,  12120., 10712., 13240., 11704., 14360., 7212.,
      8604.,  5484.,  6876.,  13688., 16600., 14680., 17720., 15672., 18840.,
      16664., 19960., 17656., 21080., 18648., 22200., 11132., 12972., 8508.,
      10348., 20632., 24440., 21624., 25560., 22616., 26680., 23608., 27800.,
      24600., 28920., 25592., 30040., 15052., 17340., 11532., 13820., 27576.,
      32280., 28568., 33400., 29560., 34520., 30552., 35640., 31544., 36760.,
      32536., 37880., 18972., 21708., 13963., 15895., 31742., 35702., 32678.,
      36734., 33614., 37766., 34550., 38798., 35486., 39830., 36422., 40862.,
      20455., 22723., 13150., 14582., 29132., 32060., 29884., 32876., 30636.,
      33692., 31388., 34508., 32140., 35324., 32892., 36140., 18086., 19742.,
      8645.,  9433.,  18850., 20458., 19290., 20930., 19730., 21402., 20170.,
      21874., 20610., 22346., 21050., 22818., 11417., 12317.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4176., 10704., 3896., 9592.,  2784., 7136.,  3224., 8664.,  4046., 10462.,
      4836., 12996., 5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502.,
      3736., 9176.,  4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724.,
      7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704., 4616., 12232.,
      5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414., 7692., 19116.,
      6394., 16298., 5128., 12744., 4616., 12232., 5578., 14586., 6924., 18348.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      7692., 19116., 6394., 16298., 5128., 12744., 4616., 12232., 5578., 14586.,
      6924., 18348., 8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298.,
      5128., 12744., 4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724.,
      7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704., 3224., 8664.,
      4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834., 5604., 13764.,
      4446., 11502., 3736., 9176.,  2784., 7136.,  3064., 8248.,  4176., 10704.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   636.,   1436.,  1052.,  2108.,  1468.,
      2780.,  1884.,  3452.,  2300.,  4124.,  2126.,  3166.,  780.,   2220.,
      3544.,  5912.,  2712.,  4568.,  4568.,  6936.,  6424.,  9304.,  8280.,
      11672., 10136., 14040., 7148.,  9356.,  5194.,  8058.,  10996., 16468.,
      7892.,  12084., 9524.,  13460., 13844., 18548., 18164., 23636., 22484.,
      28724., 14554., 18058., 12760., 17176., 25008., 33840., 17200., 25008.,
      17584., 24368., 22704., 29488., 30512., 38320., 38320., 47152., 23832.,
      28760., 22296., 27224., 41008., 50864., 25008., 33840., 17200., 25008.,
      17584., 24368., 22704., 29488., 30512., 38320., 19416., 23832., 18904.,
      23320., 46128., 55984., 41008., 50864., 25008., 33840., 17200., 25008.,
      17584., 24368., 22704., 29488., 15000., 18904., 15512., 19416., 38320.,
      47152., 46128., 55984., 41008., 50864., 25008., 33840., 17200., 25008.,
      17584., 24368., 10584., 13976., 12010., 15130., 29876., 36884., 37268.,
      45044., 44660., 53204., 39124., 47412., 22708., 29716., 14484., 20212.,
      6394.,  9130.,  7916.,  10124., 19992., 24920., 25944., 31384., 31896.,
      37848., 37848., 44312., 30872., 36824., 13016., 17432., 2892.,  4844.,
      3742.,  4910.,  9692.,  12284., 13180., 16028., 16668., 19772., 20156.,
      23516., 23644., 27260., 14204., 17052., 590.,   1630.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7856.,  8640.,  9456.,  10304., 10396., 11424., 12492., 13600., 13640.,
      14944., 16296., 17696., 17652., 19264., 20932., 22656., 20740., 22464.,
      24244., 26080., 18408., 19936., 21512., 23136., 14860., 16160., 17500.,
      18880., 14192., 15296., 16432., 17600., 12388., 13424., 14500., 15616.,
      17601., 18900., 20249., 21648., 23526., 25128., 26790., 28512., 30243.,
      32188., 34203., 36288., 34271., 36356., 38511., 40736., 31518., 33352.,
      35246., 37200., 27221., 28764., 30357., 32000., 23412., 24688., 26004.,
      27360., 16808., 18080., 19400., 20768., 20594., 22208., 23882., 25616.,
      25340., 27344., 29420., 31568., 31142., 33584., 36110., 38720., 35870.,
      38480., 41174., 43952., 31564., 33872., 36252., 38704., 25402., 27360.,
      29378., 31456., 21448., 23072., 24744., 26464., 16508., 18000., 19548.,
      21152., 23791., 25700., 27679., 29728., 32266., 34648., 37114., 39664.,
      41981., 44828., 47773., 50816., 47937., 50980., 54121., 57360., 44914.,
      47608., 50386., 53248., 39739., 42028., 44387., 46816., 34412., 36304.,
      38252., 40256., 24060., 25680., 27356., 29088., 30479., 32548., 34687.,
      36896., 38218., 40792., 43450., 46192., 45277., 48348., 51517., 54784.,
      51233., 54500., 57865., 61328., 45490., 48376., 51346., 54400., 37467.,
      39916., 42435., 45024., 31212., 33232., 35308., 37440., 16508., 18000.,
      19548., 21152., 23791., 25700., 27679., 29728., 32266., 34648., 37114.,
      39664., 41981., 44828., 47773., 50816., 47937., 50980., 54121., 57360.,
      44914., 47608., 50386., 53248., 39739., 42028., 44387., 46816., 34412.,
      36304., 38252., 40256., 24060., 25680., 27356., 29088., 30479., 32548.,
      34687., 36896., 38218., 40792., 43450., 46192., 45277., 48348., 51517.,
      54784., 51233., 54500., 57865., 61328., 45490., 48376., 51346., 54400.,
      37467., 39916., 42435., 45024., 31212., 33232., 35308., 37440., 16392.,
      17824., 19304., 20832., 23546., 25360., 27234., 29168., 31820., 34064.,
      36380., 38768., 41246., 43904., 46646., 49472., 46838., 49664., 52574.,
      55568., 43484., 45968., 48524., 51152., 38114., 40208., 42362., 44576.,
      32744., 34464., 36232., 38048., 22148., 23408., 24708., 26048., 27289.,
      28868., 30497., 32176., 33366., 35304., 37302., 39360., 38347., 40620.,
      42963., 45376., 42791., 45204., 47687., 50240., 36558., 38664., 40830.,
      43056., 28557., 30316., 32125., 33984., 22868., 24304., 25780., 27296.,
      9712.,  10688., 11696., 12736., 14316., 15552., 16828., 18144., 19688.,
      21216., 22792., 24416., 25828., 27616., 29460., 31360., 29620., 31520.,
      33476., 35488., 28232., 29920., 31656., 33440., 25564., 27008., 28492.,
      30016., 21552., 22720., 23920., 25152.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    34.,
      56.,    82.,    112.,   58.,    88.,    122.,   160.,   82.,    120.,
      162.,   208.,   106.,   152.,   202.,   256.,   130.,   184.,   242.,
      304.,   125.,   156.,   189.,   224.,   38.,    80.,    126.,   176.,
      236.,   336.,   444.,   560.,   348.,   464.,   588.,   720.,   460.,
      592.,   732.,   880.,   572.,   720.,   876.,   1040.,  684.,   848.,
      1020.,  1200.,  796.,   976.,   1164.,  1360.,  590.,   688.,   790.,
      896.,   335.,   452.,   575.,   704.,   1126.,  1384.,  1654.,  1936.,
      1390.,  1672.,  1966.,  2272.,  1654.,  1960.,  2278.,  2608.,  1918.,
      2248.,  2590.,  2944.,  2182.,  2536.,  2902.,  3280.,  2446.,  2824.,
      3214.,  3616.,  1619.,  1820.,  2027.,  2240.,  1116.,  1344.,  1580.,
      1824.,  3128.,  3616.,  4120.,  4640.,  3608.,  4128.,  4664.,  5216.,
      4088.,  4640.,  5208.,  5792.,  4568.,  5152.,  5752.,  6368.,  5048.,
      5664.,  6296.,  6944.,  5528.,  6176.,  6840.,  7520.,  3436.,  3776.,
      4124.,  4480.,  2572.,  2912.,  3260.,  3616.,  6488.,  7200.,  7928.,
      8672.,  6968.,  7712.,  8472.,  9248.,  7448.,  8224.,  9016.,  9824.,
      7928.,  8736.,  9560.,  10400., 8408.,  9248.,  10104., 10976., 8888.,
      9760.,  10648., 11552., 5340.,  5792.,  6252.,  6720.,  4028.,  4480.,
      4940.,  5408.,  9848.,  10784., 11736., 12704., 10328., 11296., 12280.,
      13280., 10808., 11808., 12824., 13856., 11288., 12320., 13368., 14432.,
      11768., 12832., 13912., 15008., 12248., 13344., 14456., 15584., 7244.,
      7808.,  8380.,  8960.,  5484.,  6048.,  6620.,  7200.,  13208., 14368.,
      15544., 16736., 13688., 14880., 16088., 17312., 14168., 15392., 16632.,
      17888., 14648., 15904., 17176., 18464., 15128., 16416., 17720., 19040.,
      15608., 16928., 18264., 19616., 9148.,  9824.,  10508., 11200., 6743.,
      7220.,  7703.,  8192.,  15382., 16360., 17350., 18352., 15838., 16840.,
      17854., 18880., 16294., 17320., 18358., 19408., 16750., 17800., 18862.,
      19936., 17206., 18280., 19366., 20464., 17662., 18760., 19870., 20992.,
      9947.,  10508., 11075., 11648., 6398.,  6752.,  7110.,  7472.,  14204.,
      14928., 15660., 16400., 14572., 15312., 16060., 16816., 14940., 15696.,
      16460., 17232., 15308., 16080., 16860., 17648., 15676., 16464., 17260.,
      18064., 16044., 16848., 17660., 18480., 8838.,  9248.,  9662.,  10080.,
      4225.,  4420.,  4617.,  4816.,  9226.,  9624.,  10026., 10432., 9442.,
      9848.,  10258., 10672., 9658.,  10072., 10490., 10912., 9874.,  10296.,
      10722., 11152., 10090., 10520., 10954., 11392., 10306., 10744., 11186.,
      11632., 5597.,  5820.,  6045.,  6272.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 7032.,
      9560.,  12472., 15768., 8924.,  11980., 15484., 19436., 11516., 14956.,
      18844., 23180., 10488., 13528., 16952., 20760., 8596.,  11108., 13940.,
      17092., 5840.,  7696.,  9808.,  12176., 6660.,  8980.,  11620., 14580.,
      7597.,  10209., 13221., 16633., 8934.,  12030., 15606., 19662., 10799.,
      14571., 18903., 23795., 13079., 17331., 22143., 27515., 13174., 16974.,
      21254., 26014., 11333., 14489., 18045., 22001., 7428.,  9748.,  12388.,
      15348., 8248.,  11032., 14200., 17752., 8494.,  11686., 15358., 19510.,
      11012., 14740., 19044., 23924., 13594., 18114., 23306., 29170., 16202.,
      21298., 27066., 33506., 14404., 18900., 23972., 29620., 13406., 17174.,
      21422., 26150., 9272.,  12056., 15224., 18776., 10092., 13340., 17036.,
      21180., 10135., 13875., 18175., 23035., 12242., 16666., 21762., 27530.,
      16285., 21585., 27669., 34537., 19861., 25833., 32589., 40129., 17346.,
      22602., 28530., 35130., 14303., 18651., 23559., 29027., 10860., 14108.,
      17804., 21948., 10092., 13340., 17036., 21180., 10135., 13875., 18175.,
      23035., 12242., 16666., 21762., 27530., 16285., 21585., 27669., 34537.,
      19861., 25833., 32589., 40129., 17346., 22602., 28530., 35130., 14303.,
      18651., 23559., 29027., 10860., 14108., 17804., 21948., 10092., 13340.,
      17036., 21180., 10135., 13875., 18175., 23035., 12242., 16666., 21762.,
      27530., 16285., 21585., 27669., 34537., 19861., 25833., 32589., 40129.,
      17346., 22602., 28530., 35130., 14303., 18651., 23559., 29027., 10860.,
      14108., 17804., 21948., 10092., 13340., 17036., 21180., 10135., 13875.,
      18175., 23035., 12242., 16666., 21762., 27530., 16285., 21585., 27669.,
      34537., 19861., 25833., 32589., 40129., 17346., 22602., 28530., 35130.,
      14303., 18651., 23559., 29027., 10860., 14108., 17804., 21948., 9272.,
      12056., 15224., 18776., 8542.,  11798., 15534., 19750., 10340., 14196.,
      18628., 23636., 14410., 18994., 24250., 30178., 18298., 23458., 29290.,
      35794., 14660., 19156., 24228., 29876., 11566., 15270., 19454., 24118.,
      9272.,  12056., 15224., 18776., 7684.,  10004., 12644., 15604., 7645.,
      10321., 13397., 16873., 8262.,  11486., 15190., 19374., 11615., 15451.,
      19847., 24803., 15175., 19491., 24367., 29803., 13430., 17230., 21510.,
      26270., 9493.,  12585., 16077., 19969., 7428.,  9748.,  12388., 15348.,
      5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 7032.,
      9560.,  12472., 15768., 8924.,  11980., 15484., 19436., 11516., 14956.,
      18844., 23180., 10488., 13528., 16952., 20760., 8596.,  11108., 13940.,
      17092., 5840.,  7696.,  9808.,  12176.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   234.,
      402.,   602.,   834.,   410.,   642.,   906.,   1202.,  586.,   882.,
      1210.,  1570.,  762.,   1122.,  1514.,  1938.,  938.,   1362.,  1818.,
      2306.,  941.,   1185.,  1445.,  1721.,  226.,   554.,   914.,   1306.,
      1700.,  2484.,  3332.,  4244.,  2564.,  3476.,  4452.,  5492.,  3428.,
      4468.,  5572.,  6740.,  4292.,  5460.,  6692.,  7988.,  5156.,  6452.,
      7812.,  9236.,  6020.,  7444.,  8932.,  10484., 4530.,  5306.,  6114.,
      6954.,  2455.,  3379.,  4351.,  5371.,  8510.,  10550., 12686., 14918.,
      10190., 11910., 13726., 15638., 9822.,  11222., 12718., 14310., 11886.,
      13478., 15166., 16950., 13950., 15734., 17614., 19590., 16014., 17990.,
      20062., 22230., 10127., 11211., 12343., 13523., 8100.,  9396.,  10756.,
      12180., 21256., 24104., 27080., 30184., 20552., 23144., 25864., 28712.,
      17800., 20136., 22600., 25192., 21576., 24168., 26888., 29736., 25352.,
      28200., 31176., 34280., 29128., 32232., 35464., 38824., 17860., 19540.,
      21284., 23092., 15044., 16724., 18468., 20276., 36680., 40296., 44040.,
      47912., 31880., 35240., 38728., 42344., 25032., 28136., 31368., 34728.,
      28424., 31272., 34248., 37352., 29768., 32360., 35080., 37928., 33544.,
      36392., 39368., 42472., 19812., 21364., 22980., 24660., 17508., 19060.,
      20676., 22356., 41096., 44456., 47944., 51560., 32200., 35304., 38536.,
      41896., 21256., 24104., 27080., 30184., 20552., 23144., 25864., 28712.,
      17800., 20136., 22600., 25192., 21576., 24168., 26888., 29736., 13572.,
      14996., 16484., 18036., 11780., 13204., 14692., 16244., 29128., 32232.,
      35464., 38824., 32904., 36264., 39752., 43368., 36680., 40296., 44040.,
      47912., 31880., 35240., 38728., 42344., 25032., 28136., 31368., 34728.,
      28424., 31272., 34248., 37352., 15524., 16820., 18180., 19604., 14215.,
      15459., 16751., 18091., 33310., 35990., 38766., 41638., 36910., 39782.,
      42750., 45814., 40510., 43574., 46734., 49990., 31438., 34182., 37022.,
      39958., 20318., 22742., 25262., 27878., 19438., 21542., 23742., 26038.,
      8191.,  9083.,  10023., 11011., 7986.,  8762.,  9570.,  10410., 19012.,
      20692., 22436., 24244., 21924., 23732., 25604., 27540., 24836., 26772.,
      28772., 30836., 27748., 29812., 31940., 34132., 30660., 32852., 35108.,
      37428., 24996., 26804., 28676., 30612., 8578.,  9290.,  10034., 10810.,
      8069.,  8601.,  9149.,  9713.,  18234., 19362., 20522., 21714., 19946.,
      21138., 22362., 23618., 21658., 22914., 24202., 25522., 23370., 24690.,
      26042., 27426., 25082., 26466., 27882., 29330., 14122., 15058., 16026.,
      17026., 173.,   417.,   677.,   953.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,
      16920., 480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920.,
      750.,   4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,
      6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,
      13380., 25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,
      16920., 720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380.,
      1080.,  6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,
      7308.,  18732., 35532., 1080.,  6264.,  16056., 30456., 900.,   5220.,
      13380., 25380., 720.,   4176.,  10704., 20304., 840.,   4872.,  12488.,
      23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732., 35532.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,
      7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610.,
      29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,
      6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732.,
      35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1260.,  7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,
      4872.,  12488., 23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,
      15610., 29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854.,
      41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532.,
      1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 720.,
      4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,  6264.,
      16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732.,
      35532., 1080.,  6264.,  16056., 30456., 900.,   5220.,  13380., 25380.,
      720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920., 750.,
      4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,
      16920., 480.,   2784.,  7136.,  13536.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1724.,
      3036.,  4604.,  6428.,  3068.,  4892.,  6972.,  9308.,  3772.,  5084.,
      6652.,  8476.,  380.,   1180.,  2236.,  3548.,  1724.,  3036.,  4604.,
      6428.,  2558.,  3470.,  4510.,  5678.,  860.,   2428.,  4252.,  6332.,
      6840.,  9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 15672.,
      19832., 24504., 29688., 13624., 17784., 22456., 27640., 6840.,  9976.,
      13624., 17784., 8888.,  12024., 15672., 19832., 8348.,  10428., 12764.,
      15356., 7354.,  9578.,  12186., 15178., 14004., 18964., 24692., 31188.,
      8564.,  13012., 18228., 24212., 11956., 16916., 22644., 29140., 19444.,
      24916., 31156., 38164., 14004., 18964., 24692., 31188., 8564.,  13012.,
      18228., 24212., 6490.,  8970.,  11834., 15082., 5816.,  8952.,  12600.,
      16760., 22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472.,
      22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472., 22512.,
      29808., 38128., 47472., 22512., 29808., 38128., 47472., 12600., 16760.,
      21432., 26616., 9912.,  13048., 16696., 20856., 22512., 29808., 38128.,
      47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472.,
      22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472., 22512.,
      29808., 38128., 47472., 16696., 20856., 25528., 30712., 5816.,  8952.,
      12600., 16760., 22512., 29808., 38128., 47472., 22512., 29808., 38128.,
      47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472.,
      22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472., 12600.,
      16760., 21432., 26616., 9912.,  13048., 16696., 20856., 22512., 29808.,
      38128., 47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128.,
      47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472.,
      22512., 29808., 38128., 47472., 16696., 20856., 25528., 30712., 5626.,
      8362.,  11482., 14986., 20788., 26772., 33524., 41044., 19444., 24916.,
      31156., 38164., 18740., 24724., 31476., 38996., 22132., 28628., 35892.,
      43924., 20788., 26772., 33524., 41044., 19444., 24916., 31156., 38164.,
      8858.,  11850., 15226., 18986., 7324.,  9404.,  11740., 14332., 13624.,
      17784., 22456., 27640., 6840.,  9976.,  13624., 17784., 8888.,  12024.,
      15672., 19832., 15672., 19832., 24504., 29688., 13624., 17784., 22456.,
      27640., 6840.,  9976.,  13624., 17784., 3932.,  5500.,  7324.,  9404.,
      4766.,  5934.,  7230.,  8654.,  13948., 16796., 19900., 23260., 10556.,
      12892., 15484., 18332., 3068.,  4892.,  6972.,  9308.,  8508.,  10844.,
      13436., 16284., 13948., 16796., 19900., 23260., 10556., 12892., 15484.,
      18332., 510.,   1422.,  2462.,  3630.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2048.,  2840.,  3752.,  4788.,  5194.,  5600.,  5240.,  4740.,  4096.,
      4220.,  5725.,  7420.,  9310.,  9940.,  10570., 9730.,  8675.,  7400.,
      7560.,  10110., 12936., 16044., 16947., 17850., 16248., 14340., 12120.,
      12320., 16310., 20678., 25431., 26656., 27881., 25172., 22050., 18508.,
      17858., 23230., 28979., 35112., 35889., 37114., 33083., 28640., 23778.,
      21796., 28038., 34656., 41657., 41986., 43211., 38306., 32990., 27256.,
      23942., 30606., 37645., 45066., 44947., 46172., 40841., 35100., 28942.,
      24016., 30509., 37344., 44527., 43932., 45129., 39828., 34155., 28104.,
      21410., 27022., 32927., 39130., 38010., 39130., 34519., 29590., 24338.,
      15872., 19830., 24016., 28434., 26740., 27734., 24536., 21090., 17392.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    10.,   16.,   22.,   28.,   34.,   32.,   21.,   12.,
      38.,   80.,   101.,  122.,  143.,  164.,  138.,  84.,   54.,   144.,
      273.,  318.,  363.,  408.,  453.,  360.,  210.,  148.,  364.,  652.,
      730.,  808.,  886.,  964.,  740.,  420.,  302.,  700.,  1198., 1276.,
      1354., 1432., 1510., 1132., 630.,  456.,  1036., 1744., 1822., 1900.,
      1978., 2056., 1524., 840.,  610.,  1372., 2290., 2368., 2446., 2524.,
      2602., 1916., 1050., 714.,  1557., 2532., 2604., 2676., 2748., 2820.,
      2031., 1092., 661.,  1418., 2273., 2330., 2387., 2444., 2501., 1778.,
      945.,  430.,  913.,  1450., 1483., 1516., 1549., 1582., 1115., 588.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5808.,  7652.,  9832.,  12348., 11764., 10924., 10344., 9044.,  7344.,
      9196.,  12629., 15546., 18851., 19021., 18935., 15706., 11545., 7916.,
      12872., 15686., 17132., 19018., 19214., 19026., 15884., 12590., 10888.,
      13540., 17583., 21582., 26105., 26303., 26117., 21070., 16555., 12516.,
      17756., 20441., 24226., 27375., 26069., 25243., 22546., 19237., 15516.,
      14196., 17955., 21910., 26117., 25547., 26385., 21558., 17023., 13236.,
      17292., 20717., 23434., 25243., 26081., 26279., 22650., 18169., 15596.,
      13400., 16522., 20180., 23814., 24282., 24238., 19668., 17362., 14200.,
      11876., 12727., 16030., 18017., 18139., 17749., 15854., 13195., 11012.,
      9584.,  11932., 14680., 16996., 17756., 18132., 16088., 13356., 9904.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,    59.,    101.,   143.,   185.,   227.,   222.,   149.,
      70.,   244.,   538.,   694.,   850.,   1006.,  1162.,  996.,   614.,
      363.,  1002.,  1941.,  2283.,  2625.,  2967.,  3309.,  2658.,  1563.,
      1052., 2632.,  4772.,  5372.,  5972.,  6572.,  7172.,  5544.,  3164.,
      2228., 5208.,  8972.,  9572.,  10172., 10772., 11372., 8568.,  4788.,
      3404., 7784.,  13172., 13772., 14372., 14972., 15572., 11592., 6412.,
      4580., 10360., 17372., 17972., 18572., 19172., 19772., 14616., 8036.,
      5457., 11934., 19455., 20013., 20571., 21129., 21687., 15654., 8433.,
      5098., 10956., 17590., 18034., 18478., 18922., 19366., 13788., 7338.,
      3335., 7090.,  11273., 11531., 11789., 12047., 12305., 8682.,  4583.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13536., 19288., 26064., 30024., 31848., 29256., 25040., 18520., 13536.,
      20280., 28110., 33204., 39978., 39266., 38234., 29172., 21246., 13944.,
      27728., 33604., 41368., 47116., 48028., 44524., 34584., 24932., 19280.,
      31528., 39738., 46076., 55086., 53590., 51774., 40700., 33354., 25192.,
      34120., 39666., 47372., 53590., 51774., 50278., 41612., 32642., 27016.,
      32296., 39274., 44252., 51774., 50278., 52878., 42012., 35002., 27304.,
      32520., 37346., 44204., 50278., 52878., 51382., 45996., 36338., 30152.,
      28752., 34708., 38904., 45820., 43532., 45852., 37624., 34164., 26896.,
      24664., 28614., 34372., 38162., 39114., 36994., 35204., 29494., 24664.,
      17248., 23480., 26896., 31848., 31880., 33448., 29584., 26424., 19616.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   706.,   1018.,  1330.,  1642.,  1644.,  1118.,
      460.,   1720.,  3908.,  5108.,  6308.,  7508.,  8708.,  7544.,  4684.,
      2634.,  7428.,  13934., 14934., 14910., 17574., 20238., 16036., 9354.,
      7256.,  17648., 27720., 27688., 26632., 31336., 36040., 28016., 16088.,
      12728., 29360., 43368., 40264., 35496., 38536., 40552., 30768., 17336.,
      14488., 32624., 44808., 38632., 27720., 27688., 26632., 21232., 12440.,
      10104., 23600., 40744., 45448., 43368., 40264., 35496., 26672., 13688.,
      11794., 26580., 44550., 48942., 43478., 36990., 25766., 18292., 7506.,
      6748.,  15448., 26228., 29732., 33236., 36740., 33460., 21912., 7516.,
      6550.,  14396., 23602., 25642., 27682., 29722., 21906., 12060., 470.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7280.,  8192.,  10180., 11360., 13480., 14880., 17132., 18768., 18380.,
      20008., 19500., 21120., 17768., 19168., 15492., 16656., 12656., 13568.,
      14396., 15600., 19361., 20852., 23850., 25584., 28715., 30712., 29565.,
      31568., 30287., 32296., 26450., 28168., 21901., 23308., 16620., 17696.,
      21448., 22816., 27214., 28920., 31692., 33696., 36634., 38960., 36770.,
      39116., 36778., 39144., 31340., 33376., 25086., 26768., 17992., 19296.,
      25860., 27520., 31927., 34008., 35958., 38424., 40605., 43484., 40223.,
      43136., 39713., 42660., 33374., 35920., 26051., 28168., 17716., 19376.,
      27476., 29192., 32801., 34936., 35190., 37708., 38191., 41120., 36081.,
      38980., 34675., 37608., 32134., 34668., 28613., 30720., 24084., 25736.,
      22372., 24080., 29131., 31256., 36150., 38656., 43777., 46692., 43971.,
      46856., 45765., 48684., 40622., 43144., 34503., 36600., 27380., 29024.,
      26484., 28184., 32885., 35000., 38646., 41140., 45011., 47912., 43413.,
      46284., 44311., 47216., 38358., 40868., 31433., 33520., 23508., 25144.,
      22552., 24000., 26294., 28084., 30612., 32768., 35530., 38076., 34538.,
      37104., 37066., 39716., 32580., 34896., 27270., 29228., 21112., 22688.,
      17756., 19080., 18783., 20408., 24418., 26364., 30585., 32872., 32499.,
      34792., 34733., 37096., 31570., 33628., 27667., 29400., 23004., 24392.,
      17232., 18304., 21572., 22872., 26296., 27840., 31420., 33224., 31948.,
      33744., 33692., 35544., 29720., 31328., 25156., 26504., 19984., 21056.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     6.,     16.,    19.,    40.,    37.,   64.,    55.,
      88.,    73.,    112.,   91.,    136.,   94.,    128.,  65.,    84.,
      22.,    48.,    92.,    152.,   218.,   320.,   290.,  404.,   362.,
      488.,   434.,   572.,   506.,   656.,   444.,   552.,  278.,   336.,
      147.,   216.,   426.,   576.,   849.,   1092.,  1011., 1272.,  1173.,
      1452.,  1335.,  1632.,  1497.,  1812.,  1218.,  1440., 723.,   840.,
      460.,   592.,   1176.,  1456.,  2164.,  2608.,  2452., 2920.,  2740.,
      3232.,  3028.,  3544.,  3316.,  3856.,  2584.,  2960., 1484.,  1680.,
      1020.,  1208.,  2408.,  2800.,  4180.,  4792.,  4468., 5104.,  4756.,
      5416.,  5044.,  5728.,  5332.,  6040.,  4040.,  4528., 2268.,  2520.,
      1580.,  1824.,  3640.,  4144.,  6196.,  6976.,  6484., 7288.,  6772.,
      7600.,  7060.,  7912.,  7348.,  8224.,  5496.,  6096., 3052.,  3360.,
      2140.,  2440.,  4872.,  5488.,  8212.,  9160.,  8500., 9472.,  8788.,
      9784.,  9076.,  10096., 9364.,  10408., 6952.,  7664., 3836.,  4200.,
      2601.,  2856.,  5706.,  6228.,  9327.,  10128., 9597., 10416., 9867.,
      10704., 10137., 10992., 10407., 11280., 7530.,  8124., 4065.,  4368.,
      2454.,  2644.,  5284.,  5672.,  8498.,  9092.,  8714., 9320.,  8930.,
      9548.,  9146.,  9776.,  9362.,  10004., 6676.,  7112., 3558.,  3780.,
      1615.,  1720.,  3438.,  3652.,  5473.,  5800.,  5599., 5932.,  5725.,
      6064.,  5851.,  6196.,  5977.,  6328.,  4222.,  4460., 2231.,  2352.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5840.,  7696.,  8420.,  10868., 11512., 14552., 13196., 16828., 14076.,
      17772., 12812., 16444., 11000., 14040., 8036.,  10484., 5840.,  7696.,
      8820.,  11460., 12429., 15681., 14654., 18550., 17703., 22275., 17323.,
      21943., 16847., 21387., 12702., 16470., 9141.,  12105., 5844.,  8100.,
      12216., 15512., 14774., 18830., 18308., 23060., 20802., 26314., 21242.,
      26786., 19538., 24986., 15044., 19540., 10662., 14270., 8248.,  11032.,
      13852., 17676., 17503., 22235., 20234., 25842., 24317., 30769., 23561.,
      30029., 22709., 29065., 17674., 23026., 14487., 18867., 10876., 14316.,
      15116., 19004., 17443., 22223., 20866., 26506., 23561., 30029., 22709.,
      29065., 21953., 28325., 18114., 23498., 14107., 18535., 11756., 15260.,
      14236., 18060., 17287., 21987., 19354., 24898., 22709., 29065., 21953.,
      28325., 23245., 29633., 18298., 23714., 15263., 19739., 11868., 15436.,
      14380., 18140., 16363., 20983., 19378., 24826., 21953., 28325., 23245.,
      29633., 22489., 28893., 20274., 25722., 15907., 20431., 13260., 16892.,
      12728., 16024., 15374., 19334., 17108., 21796., 20170., 25650., 19010.,
      24522., 20154., 25698., 16468., 21156., 15134., 19030., 11864., 15032.,
      10980., 13684., 12657., 15957., 15222., 19150., 16787., 21375., 17239.,
      21875., 16155., 20839., 15574., 19630., 13049., 16445., 10980., 13684.,
      7568.,  9680.,  10420., 13060., 11864., 15032., 14076., 17772., 14060.,
      17820., 14812., 18636., 13080., 16504., 11764., 14660., 8688.,  10928.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   251.,   455.,   383.,
      635.,   515.,   815.,   647.,   995.,   690.,   954.,   485.,   633.,
      130.,   330.,   628.,   1092.,  1558.,  2350.,  2110.,  2998.,  2662.,
      3646.,  3214.,  4294.,  3766.,  4942.,  3348.,  4196.,  2114.,  2570.,
      1047.,  1587.,  3126.,  4302.,  6333.,  8241.,  7593.,  9645.,  8853.,
      11049., 10113., 12453., 11373., 13857., 9318.,  11070., 5559.,  6483.,
      3428.,  4468.,  8872.,  11080., 16460., 19964., 18716., 22412., 20972.,
      24860., 23228., 27308., 25484., 29756., 19944., 22920., 11492., 13044.,
      7796.,  9284.,  18504., 21608., 32252., 37100., 34508., 39548., 36380.,
      41100., 37228., 41628., 37052., 41132., 27528., 30376., 15220., 16708.,
      11780., 13204., 26344., 29320., 43820., 48476., 46076., 50924., 44876.,
      49404., 42652., 46860., 39404., 43292., 28968., 31688., 15876., 17300.,
      12692., 14052., 28040., 30888., 46172., 50636., 48428., 53084., 44156.,
      48492., 38860., 42876., 32540., 36236., 24264., 26856., 13460., 14820.,
      10323., 11327., 22606., 24710., 36945., 40245., 39069., 42513., 31593.,
      34669., 23093., 25801., 13569., 15909., 10686., 12342., 6195.,  7071.,
      3130.,  3618.,  7204.,  8244.,  12286., 13942., 13990., 15742., 15694.,
      17542., 17398., 19342., 19102., 21142., 14148., 15572., 7802.,  8546.,
      3113.,  3437.,  6858.,  7538.,  11267., 12335., 12263., 13379., 13259.,
      14423., 14255., 15467., 15251., 16511., 11034., 11906., 5961.,  6413.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3808.,  8160.,  2200.,  7640.,  5712.,  12240., 3080.,  10696., 6664.,
      14280., 3080.,  10696., 5712.,  12240., 2200.,  7640.,  3808.,  8160.,
      2200.,  7640.,  5742.,  12414., 3300.,  11460., 8122.,  17514., 3850.,
      13370., 8122.,  17514., 3300.,  11460., 5742.,  12414., 2200.,  7640.,
      5712.,  12240., 3300.,  11460., 8568.,  18360., 4620.,  16044., 9996.,
      21420., 4620.,  16044., 8568.,  18360., 3300.,  11460., 5712.,  12240.,
      3080.,  10696., 8122.,  17514., 4620.,  16044., 11454., 24654., 5390.,
      18718., 11454., 24654., 4620.,  16044., 8122.,  17514., 3080.,  10696.,
      6664.,  14280., 3850.,  13370., 9996.,  21420., 5390.,  18718., 11454.,
      24654., 5390.,  18718., 9996.,  21420., 3850.,  13370., 6664.,  14280.,
      3080.,  10696., 8122.,  17514., 4620.,  16044., 11454., 24654., 5390.,
      18718., 11454., 24654., 4620.,  16044., 8122.,  17514., 3080.,  10696.,
      6664.,  14280., 3850.,  13370., 9996.,  21420., 5390.,  18718., 11454.,
      24654., 5390.,  18718., 9996.,  21420., 3850.,  13370., 6664.,  14280.,
      2640.,  9168.,  7140.,  15300., 3960.,  13752., 9996.,  21420., 4620.,
      16044., 9996.,  21420., 3960.,  13752., 7140.,  15300., 2640.,  9168.,
      4760.,  10200., 2750.,  9550.,  7140.,  15300., 3850.,  13370., 8122.,
      17514., 3850.,  13370., 7140.,  15300., 2750.,  9550.,  4760.,  10200.,
      1760.,  6112.,  4760.,  10200., 2640.,  9168.,  6664.,  14280., 3080.,
      10696., 6664.,  14280., 2640.,  9168.,  4760.,  10200., 1760.,  6112.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  1834.,  3418.,  2522.,
      3978.,  2186.,  3514.,  826.,   2026.,  1564.,  2620.,  1374.,  2030.,
      540.,   1596.,  2296.,  3896.,  4372.,  7028.,  4276.,  7188.,  3156.,
      6324.,  4788.,  7700.,  4372.,  7028.,  1272.,  2872.,  1564.,  2620.,
      3194.,  4906.,  2644.,  5812.,  7310.,  11678., 8414.,  12910., 7470.,
      12094., 4478.,  9230.,  7310.,  11678., 4372.,  7028.,  826.,   2026.,
      4152.,  6264.,  7280.,  11504., 6312.,  12648., 10920., 17256., 12456.,
      18792., 10920., 17256., 6312.,  12648., 7280.,  11504., 4152.,  6264.,
      3640.,  5752.,  8304.,  12528., 10920., 17256., 6312.,  12648., 10920.,
      17256., 12456., 18792., 10920., 17256., 4208.,  8432.,  3640.,  5752.,
      2104.,  4216.,  7280.,  11504., 12456., 18792., 10920., 17256., 6312.,
      12648., 10920., 17256., 12456., 18792., 7280.,  11504., 2104.,  4216.,
      3640.,  5752.,  4208.,  8432.,  10920., 17256., 12456., 18792., 10920.,
      17256., 6312.,  12648., 10920., 17256., 8304.,  12528., 3640.,  5752.,
      4042.,  5882.,  6644.,  10068., 4478.,  9230.,  8398.,  13278., 10270.,
      15278., 10094., 15230., 4478.,  9230.,  4788.,  7700.,  2186.,  3514.,
      2492.,  3804.,  6008.,  8632.,  6644.,  10068., 3156.,  6324.,  6132.,
      9556.,  8084.,  11764., 6644.,  10068., 1592.,  3704.,  1148.,  1948.,
      782.,   1310.,  2492.,  3804.,  4042.,  5882.,  3450.,  5162.,  1834.,
      3418.,  3610.,  5578.,  4042.,  5882.,  3004.,  4316.,  270.,   798.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9808.,  10688., 11600., 12544., 12948., 14096., 15284., 16512., 16824.,
      18208., 19640., 21120., 21308., 22960., 24668., 26432., 20172., 21808.,
      23500., 25248., 18524., 20144., 21820., 23552., 17848., 19232., 20664.,
      22144., 15796., 16912., 18068., 19264., 12880., 13760., 14672., 15616.,
      15940., 17136., 18372., 19648., 22185., 23684., 25233., 26832., 27446.,
      29224., 31062., 32960., 33403., 35500., 37667., 39904., 33719., 35828.,
      38007., 40256., 33523., 35644., 37835., 40096., 27702., 29512., 31382.,
      33312., 20097., 21556., 23065., 24624., 13508., 14640., 15812., 17024.,
      22776., 24224., 25720., 27264., 27710., 29496., 31342., 33248., 29940.,
      32048., 34228., 36480., 32954., 35432., 37994., 40640., 33394., 35848.,
      38386., 41008., 33066., 35496., 38010., 40608., 27572., 29616., 31732.,
      33920., 21742., 23416., 25150., 26944., 19064., 20384., 21752., 23168.,
      23468., 25232., 27052., 28928., 30659., 32860., 35131., 37472., 37778.,
      40408., 43122., 45920., 45961., 49012., 52161., 55408., 46349., 49404.,
      52557., 55808., 45969., 49028., 52185., 55440., 36818., 39416., 42098.,
      44864., 28715., 30860., 33075., 35360., 21548., 23248., 25004., 26816.,
      31804., 33616., 35484., 37408., 36287., 38532., 40847., 43232., 42986.,
      45656., 48410., 51248., 48429., 51516., 54701., 57984., 45937., 48964.,
      52089., 55312., 44277., 47308., 50437., 53664., 39818., 42392., 45050.,
      47792., 34119., 36244., 38439., 40704., 27580., 29264., 31004., 32800.,
      24716., 26512., 28364., 30272., 31355., 33580., 35875., 38240., 38402.,
      41048., 43778., 46592., 45969., 49028., 52185., 55440., 44821., 47884.,
      51045., 54304., 46489., 49556., 52721., 55984., 37762., 40376., 43074.,
      45856., 29603., 31772., 34011., 36320., 22924., 24656., 26444., 28288.,
      30940., 32720., 34556., 36448., 36919., 39124., 41399., 43744., 41498.,
      44120., 46826., 49616., 44277., 47308., 50437., 53664., 45945., 48980.,
      52113., 55344., 46333., 49372., 52509., 55744., 39994., 42584., 45258.,
      48016., 31935., 34084., 36303., 38592., 27676., 29392., 31164., 32992.,
      23640., 25184., 26776., 28416., 29174., 31064., 33014., 35024., 35684.,
      37968., 40324., 42752., 42178., 44840., 47586., 50416., 43034., 45736.,
      48522., 51392., 42866., 45608., 48434., 51344., 34532., 36880., 39300.,
      41792., 30694., 32664., 34694., 36784., 25112., 26720., 28376., 30080.,
      21076., 22384., 23732., 25120., 22229., 23804., 25429., 27104., 28206.,
      30088., 32030., 34032., 31599., 33764., 35999., 38304., 31819., 33996.,
      36243., 38560., 31015., 33204., 35463., 37792., 27918., 29768., 31678.,
      33648., 23245., 24780., 26365., 28000., 19476., 20720., 22004., 23328.,
      17104., 18112., 19152., 20224., 21284., 22544., 23844., 25184., 26200.,
      27744., 29336., 30976., 30316., 32112., 33964., 35872., 31740., 33584.,
      35484., 37440., 32396., 34288., 36236., 38240., 28760., 30432., 32152.,
      33920., 23812., 25232., 26692., 28192., 17488., 18624., 19792., 20992.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   103.,   148.,   199.,   256.,   163.,   220.,
      283.,   352.,   223.,   292.,   367.,   448.,   283.,   364.,   451.,
      544.,   314.,   376.,   442.,   512.,   225.,   260.,   297.,   336.,
      42.,    88.,    138.,   192.,   260.,   368.,   484.,   608.,   686.,
      872.,   1070.,  1280.,  950.,   1160.,  1382.,  1616.,  1214.,  1448.,
      1694.,  1952.,  1478.,  1736.,  2006.,  2288.,  1742.,  2024.,  2318.,
      2624.,  1572.,  1776.,  1988.,  2208.,  1002.,  1112.,  1226.,  1344.,
      459.,   588.,   723.,   864.,   1422.,  1704.,  1998.,  2304.,  2937.,
      3396.,  3873.,  4368.,  3549.,  4044.,  4557.,  5088.,  4161.,  4692.,
      5241.,  5808.,  4773.,  5340.,  5925.,  6528.,  5385.,  5988.,  6609.,
      7248.,  4446.,  4872.,  5310.,  5760.,  2667.,  2892.,  3123.,  3360.,
      1588.,  1840.,  2100.,  2368.,  4168.,  4704.,  5256.,  5824.,  7804.,
      8656.,  9532.,  10432., 8908.,  9808.,  10732., 11680., 10012., 10960.,
      11932., 12928., 11116., 12112., 13132., 14176., 12220., 13264., 14332.,
      15424., 9608.,  10336., 11080., 11840., 5556.,  5936.,  6324.,  6720.,
      3716.,  4080.,  4452.,  4832.,  8872.,  9632.,  10408., 11200., 15532.,
      16720., 17932., 19168., 16636., 17872., 19132., 20416., 17740., 19024.,
      20332., 21664., 18844., 20176., 21532., 22912., 19948., 21328., 22732.,
      24160., 15208., 16160., 17128., 18112., 8580.,  9072.,  9572.,  10080.,
      5844.,  6320.,  6804.,  7296.,  13576., 14560., 15560., 16576., 23260.,
      24784., 26332., 27904., 24364., 25936., 27532., 29152., 25468., 27088.,
      28732., 30400., 26572., 28240., 29932., 31648., 27676., 29392., 31132.,
      32896., 20808., 21984., 23176., 24384., 11604., 12208., 12820., 13440.,
      7972.,  8560.,  9156.,  9760.,  18280., 19488., 20712., 21952., 30988.,
      32848., 34732., 36640., 32092., 34000., 35932., 37888., 33196., 35152.,
      37132., 39136., 34300., 36304., 38332., 40384., 35404., 37456., 39532.,
      41632., 26408., 27808., 29224., 30656., 14628., 15344., 16068., 16800.,
      9903.,  10404., 10911., 11424., 21798., 22824., 23862., 24912., 35733.,
      37308., 38901., 40512., 36777., 38388., 40017., 41664., 37821., 39468.,
      41133., 42816., 38865., 40548., 42249., 43968., 39909., 41628., 43365.,
      45120., 28950., 30120., 31302., 32496., 15663., 16260., 16863., 17472.,
      9442.,  9816.,  10194., 10576., 20372., 21136., 21908., 22688., 32822.,
      33992., 35174., 36368., 33662., 34856., 36062., 37280., 34502., 35720.,
      36950., 38192., 35342., 36584., 37838., 39104., 36182., 37448., 38726.,
      40016., 25844., 26704., 27572., 28448., 13794., 14232., 14674., 15120.,
      6253.,  6460.,  6669.,  6880.,  13330., 13752., 14178., 14608., 21247.,
      21892., 22543., 23200., 21739., 22396., 23059., 23728., 22231., 22900.,
      23575., 24256., 22723., 23404., 24091., 24784., 23215., 23908., 24607.,
      25312., 16418., 16888., 17362., 17840., 8685.,  8924.,  9165.,  9408.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6352.,  8208.,  10320., 12688., 6660.,  8980.,  11620., 14580., 9528.,
      12312., 15480., 19032., 9324.,  12572., 16268., 20412., 10604., 13852.,
      17548., 21692., 9324.,  12572., 16268., 20412., 9528.,  12312., 15480.,
      19032., 6660.,  8980.,  11620., 14580., 6352.,  8208.,  10320., 12688.,
      6148.,  8468.,  11108., 14068., 10045., 12849., 16053., 19657., 9894.,
      13246., 17078., 21390., 12479., 16443., 20967., 26051., 10887., 14947.,
      19567., 24747., 14319., 18347., 22935., 28083., 10758., 14238., 18198.,
      22638., 9069.,  11937., 15205., 18873., 6148.,  8468.,  11108., 14068.,
      9528.,  12312., 15480., 19032., 9430.,  12846., 16742., 21118., 13428.,
      17476., 22100., 27300., 13682., 18490., 23970., 30122., 17442., 22314.,
      27858., 34074., 13426., 18234., 23714., 29866., 13428., 17476., 22100.,
      27300., 9686.,  13102., 16998., 21374., 9528.,  12312., 15480., 19032.,
      9836.,  13084., 16780., 20924., 12783., 16811., 21399., 26547., 13218.,
      18090., 23634., 29850., 20133., 25785., 32221., 39441., 17085., 22769.,
      29237., 36489., 18037., 23625., 29997., 37153., 12354., 17098., 22514.,
      28602., 14015., 17979., 22503., 27587., 9836.,  13084., 16780., 20924.,
      11116., 14364., 18060., 22204., 11447., 15571., 20255., 25499., 17234.,
      22170., 27778., 34058., 17085., 22769., 29237., 36489., 18037., 23625.,
      29997., 37153., 14989., 20609., 27013., 34201., 16114., 20922., 26402.,
      32554., 12423., 16483., 21103., 26283., 11116., 14364., 18060., 22204.,
      8812.,  12060., 15756., 19900., 15135., 19227., 23879., 29091., 14498.,
      19370., 24914., 31130., 18037., 23625., 29997., 37153., 14989., 20609.,
      27013., 34201., 20133., 25785., 32221., 39441., 14754., 19626., 25170.,
      31386., 12783., 16811., 21399., 26547., 8812.,  12060., 15756., 19900.,
      11116., 14364., 18060., 22204., 12167., 16227., 20847., 26027., 16370.,
      21178., 26658., 32810., 14989., 20609., 27013., 34201., 20133., 25785.,
      32221., 39441., 17085., 22769., 29237., 36489., 16370., 21178., 26658.,
      32810., 10583., 14579., 19135., 24251., 11116., 14364., 18060., 22204.,
      7992.,  10776., 13944., 17496., 11142., 14622., 18582., 23022., 11988.,
      16164., 20916., 26244., 17442., 22314., 27858., 34074., 14290., 19226.,
      24834., 31114., 16162., 21034., 26578., 32794., 10868., 14916., 19540.,
      24740., 11814., 15166., 18998., 23310., 7992.,  10776., 13944., 17496.,
      7940.,  10260., 12900., 15860., 7813.,  10713., 14013., 17713., 12214.,
      15758., 19782., 24286., 12983., 17107., 21791., 27035., 13599., 17691.,
      22343., 27555., 10631., 14691., 19311., 24491., 11606., 15022., 18918.,
      23294., 8533.,  11369., 14605., 18241., 7940.,  10260., 12900., 15860.,
      5328.,  7184.,  9296.,  11664., 8452.,  10772., 13412., 16372., 7992.,
      10776., 13944., 17496., 10604., 13852., 17548., 21692., 9324.,  12572.,
      16268., 20412., 11628., 14876., 18572., 22716., 7992.,  10776., 13944.,
      17496., 7428.,  9748.,  12388., 15348., 5328.,  7184.,  9296.,  11664.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  743.,   1091.,  1487.,  1931.,  1199.,  1643.,
      2135.,  2675.,  1655.,  2195.,  2783.,  3419.,  2111.,  2747.,  3431.,
      4163.,  2394.,  2882.,  3402.,  3954.,  1733.,  2009.,  2301.,  2609.,
      250.,   610.,   1002.,  1426.,  1684.,  2276.,  2932.,  3652.,  3726.,
      4678.,  5726.,  6870.,  3550.,  4438.,  5422.,  6502.,  5614.,  6694.,
      7870.,  9142.,  7678.,  8950.,  10318., 11782., 9742.,  11206., 12766.,
      14422., 8724.,  9828.,  10996., 12228., 5562.,  6178.,  6826.,  7506.,
      3231.,  3995.,  4807.,  5667.,  6158.,  7622.,  9182.,  10838., 11021.,
      12865., 14853., 16985., 8293.,  9913.,  11677., 13585., 9853.,  11505.,
      13301., 15241., 13653., 15593., 17677., 19905., 17453., 19681., 22053.,
      24569., 12910., 14502., 16190., 17974., 4767.,  5531.,  6343.,  7203.,
      8372.,  9348.,  10388., 11492., 14184., 16136., 18216., 20424., 12636.,
      15308., 18172., 21228., 12604., 14892., 17372., 20044., 10716., 12876.,
      15228., 17772., 13116., 15404., 17884., 20556., 17756., 20428., 23292.,
      26348., 14184., 16136., 18216., 20424., 6324.,  7300.,  8340.,  9444.,
      8212.,  9316.,  10484., 11716., 19496., 21704., 24040., 26504., 21884.,
      24940., 28188., 31628., 12636., 15308., 18172., 21228., 12604., 14892.,
      17372., 20044., 10716., 12876., 15228., 17772., 13116., 15404., 17884.,
      20556., 10920., 12616., 14440., 16392., 4948.,  5796.,  6708.,  7684.,
      6836.,  7812.,  8852.,  9956.,  17448., 19656., 21992., 24456., 25820.,
      29004., 32380., 35948., 21884., 24940., 28188., 31628., 12636., 15308.,
      18172., 21228., 12604., 14892., 17372., 20044., 10716., 12876., 15228.,
      17772., 7656.,  9096.,  10664., 12360., 3572.,  4292.,  5076.,  5924.,
      5460.,  6308.,  7220.,  8196.,  14184., 16136., 18216., 20424., 22396.,
      25452., 28700., 32140., 25820., 29004., 32380., 35948., 21884., 24940.,
      28188., 31628., 12636., 15308., 18172., 21228., 12604., 14892., 17372.,
      20044., 6632.,  8072.,  9640.,  11336., 2196.,  2788.,  3444.,  4164.,
      4055.,  4723.,  5439.,  6203.,  10686., 12214., 13838., 15558., 17013.,
      19337., 21805., 24417., 21197., 23809., 26565., 29465., 24165., 26809.,
      29597., 32529., 19773., 22193., 24757., 27465., 10069., 12009., 14093.,
      16321., 7070.,  8214.,  9454.,  10790., 1047.,  1459.,  1919.,  2427.,
      2218.,  2642.,  3098.,  3586.,  6068.,  7044.,  8084.,  9188.,  9566.,
      10966., 12462., 14054., 12142., 13734., 15422., 17206., 14718., 16502.,
      18382., 20358., 16078., 17798., 19614., 21526., 10078., 11478., 12974.,
      14566., 756.,   1476.,  2260.,  3108.,  490.,   658.,   858.,   1090.,
      333.,   449.,   581.,   729.,   1098.,  1394.,  1722.,  2082.,  2423.,
      2963.,  3551.,  4187.,  3263.,  3899.,  4583.,  5315.,  4103.,  4835.,
      5615.,  6443.,  4943.,  5771.,  6647.,  7571.,  4567.,  5235.,  5951.,
      6715.,  2986.,  3410.,  3866.,  4354.,  77.,    193.,   325.,   473.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,
      2378.,  3706.,  5418.,  570.,   1770.,  3354.,  5322.,  1434.,  2378.,
      3706.,  5418.,  570.,   1770.,  3354.,  5322.,  1434.,  2378.,  3706.,
      5418.,  380.,   1180.,  2236.,  3548.,  30.,    174.,   446.,   846.,
      380.,   1180.,  2236.,  3548.,  2808.,  4408.,  6520.,  9144.,  1140.,
      3540.,  6708.,  10644., 4212.,  6612.,  9780.,  13716., 1140.,  3540.,
      6708.,  10644., 4212.,  6612.,  9780.,  13716., 1140.,  3540.,  6708.,
      10644., 2808.,  4408.,  6520.,  9144.,  380.,   1180.,  2236.,  3548.,
      1434.,  2378.,  3706.,  5418.,  1140.,  3540.,  6708.,  10644., 5646.,
      8990.,  13486., 19134., 1710.,  5310.,  10062., 15966., 5646.,  8990.,
      13486., 19134., 1710.,  5310.,  10062., 15966., 5646.,  8990.,  13486.,
      19134., 1140.,  3540.,  6708.,  10644., 1434.,  2378.,  3706.,  5418.,
      760.,   2360.,  4472.,  7096.,  5616.,  8816.,  13040., 18288., 2280.,
      7080.,  13416., 21288., 8424.,  13224., 19560., 27432., 2280.,  7080.,
      13416., 21288., 8424.,  13224., 19560., 27432., 2280.,  7080.,  13416.,
      21288., 5616.,  8816.,  13040., 18288., 760.,   2360.,  4472.,  7096.,
      2808.,  4408.,  6520.,  9144.,  1520.,  4720.,  8944.,  14192., 8424.,
      13224., 19560., 27432., 2280.,  7080.,  13416., 21288., 8424.,  13224.,
      19560., 27432., 2280.,  7080.,  13416., 21288., 8424.,  13224., 19560.,
      27432., 1520.,  4720.,  8944.,  14192., 2808.,  4408.,  6520.,  9144.,
      760.,   2360.,  4472.,  7096.,  5616.,  8816.,  13040., 18288., 2280.,
      7080.,  13416., 21288., 8424.,  13224., 19560., 27432., 2280.,  7080.,
      13416., 21288., 8424.,  13224., 19560., 27432., 2280.,  7080.,  13416.,
      21288., 5616.,  8816.,  13040., 18288., 760.,   2360.,  4472.,  7096.,
      2808.,  4408.,  6520.,  9144.,  1520.,  4720.,  8944.,  14192., 8424.,
      13224., 19560., 27432., 2280.,  7080.,  13416., 21288., 8424.,  13224.,
      19560., 27432., 2280.,  7080.,  13416., 21288., 8424.,  13224., 19560.,
      27432., 1520.,  4720.,  8944.,  14192., 2808.,  4408.,  6520.,  9144.,
      570.,   1770.,  3354.,  5322.,  4212.,  6612.,  9780.,  13716., 1710.,
      5310.,  10062., 15966., 6990.,  10846., 15854., 22014., 1710.,  5310.,
      10062., 15966., 6990.,  10846., 15854., 22014., 1710.,  5310.,  10062.,
      15966., 4212.,  6612.,  9780.,  13716., 570.,   1770.,  3354.,  5322.,
      1404.,  2204.,  3260.,  4572.,  760.,   2360.,  4472.,  7096.,  4212.,
      6612.,  9780.,  13716., 1140.,  3540.,  6708.,  10644., 4212.,  6612.,
      9780.,  13716., 1140.,  3540.,  6708.,  10644., 4212.,  6612.,  9780.,
      13716., 760.,   2360.,  4472.,  7096.,  1404.,  2204.,  3260.,  4572.,
      190.,   590.,   1118.,  1774.,  1404.,  2204.,  3260.,  4572.,  570.,
      1770.,  3354.,  5322.,  2778.,  4234.,  6074.,  8298.,  570.,   1770.,
      3354.,  5322.,  2778.,  4234.,  6074.,  8298.,  570.,   1770.,  3354.,
      5322.,  1404.,  2204.,  3260.,  4572.,  190.,   590.,   1118.,  1774.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2220.,  3070.,  4046.,  5152.,  5558.,  5964.,  6370.,  5930.,  5340.,
      4596.,  4600.,  6225.,  8050.,  10080., 10710., 11340., 11970., 10975.,
      9750.,  8290.,  8270.,  11035., 14091., 17444., 18347., 19250., 20153.,
      18285., 16090., 13562., 13510., 17786., 22397., 27350., 28319., 29224.,
      30065., 26552., 23110., 19284., 19450., 24778., 30447., 36464., 36985.,
      37442., 37835., 32846., 28370., 23504., 23598., 29530., 35809., 42442.,
      42515., 42524., 42469., 36452., 31390., 25932., 25954., 32042., 38483.,
      45284., 44909., 44470., 43967., 37370., 32170., 26568., 26138., 31739.,
      37657., 43898., 43047., 42132., 41153., 34443., 29620., 24438., 23352.,
      27681., 32274., 37136., 35760., 34320., 32816., 26731., 23040., 19050.,
      17316., 19518., 21914., 24508., 22558., 20544., 18466., 13814., 12080.,
      10124.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,    10.,   20.,   30.,   40.,   50.,   52.,   45.,   28.,
      13.,  41.,   86.,   150.,  186.,  222.,  258.,  239.,  191.,  112.,
      64.,  167.,  312.,  502.,  580.,  658.,  736.,  645.,  494.,  280.,
      182., 438.,  772.,  1188., 1324., 1460., 1596., 1354., 1010., 560.,
      378., 858.,  1444., 2140., 2276., 2412., 2548., 2110., 1542., 840.,
      574., 1278., 2116., 3092., 3228., 3364., 3500., 2866., 2074., 1120.,
      770., 1698., 2788., 4044., 4180., 4316., 4452., 3622., 2606., 1400.,
      916., 1967., 3156., 4486., 4612., 4738., 4864., 3885., 2750., 1456.,
      855., 1811., 2870., 4034., 4134., 4234., 4334., 3425., 2401., 1260.,
      559., 1174., 1846., 2576., 2634., 2692., 2750., 2158., 1503., 784.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6560.,  8376.,  10544., 11208., 10112., 10808., 12240., 11520., 10128.,
      8640.,  9020.,  11761., 14930., 17831., 17489., 16795., 17605., 14542.,
      10555., 7492.,  11168., 14296., 17936., 20504., 20796., 19840., 19236.,
      17656., 15020., 12400., 12940., 16605., 20874., 25227., 25937., 24375.,
      23933., 21022., 17779., 13636., 18172., 21025., 24530., 28039., 28109.,
      27059., 25977., 20614., 15767., 13300., 16108., 18053., 20570., 25155.,
      26985., 26927., 27861., 24238., 20059., 17572., 14172., 17609., 21666.,
      24415., 24229., 25227., 25937., 21142., 16639., 13012., 17392., 20404.,
      24008., 26140., 25968., 26212., 26072., 21904., 16952., 12192., 11644.,
      14129., 17042., 18183., 17665., 18939., 19957., 16654., 13675., 10340.,
      10688., 13328., 16352., 17424., 16808., 15936., 14808., 13072., 10728.,
      7648.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    59.,    124.,   196.,   268.,   340.,   365.,   322.,
      203.,   76.,    264.,   580.,   1040.,  1312.,  1584.,  1856.,  1744.,
      1408.,  832.,   437.,   1174.,  2235.,  3644.,  4244.,  4844.,  5444.,
      4809.,  3706.,  2111.,  1312.,  3200.,  5696.,  8832.,  9888.,  10944.,
      12000., 10232., 7664.,  4264.,  2824.,  6448.,  10904., 16224., 17280.,
      18336., 19392., 16112., 11808., 6448.,  4336.,  9696.,  16112., 23616.,
      24672., 25728., 26784., 21992., 15952., 8632.,  5848.,  12944., 21320.,
      31008., 32064., 33120., 34176., 27872., 20096., 10816., 7061.,  15190.,
      24411., 34748., 35732., 36716., 37700., 30153., 21370., 11327., 6640.,
      14080., 22336., 31424., 32208., 32992., 33776., 26716., 18744., 9844.,
      4361.,  9166.,  14423., 20140., 20596., 21052., 21508., 16889., 11770.,
      6143.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16672., 18696., 25520., 29912., 28664., 27096., 27384., 19632., 18472.,
      16160., 19704., 23582., 28244., 35226., 37394., 35338., 38210., 29444.,
      22710., 18904., 23280., 29628., 37096., 43188., 48004., 45012., 45924.,
      38856., 29196., 18288., 30984., 36578., 46572., 52070., 54990., 54710.,
      53214., 42492., 36586., 25704., 35656., 40018., 47628., 54710., 53214.,
      49862., 52782., 41756., 35674., 29864., 32008., 39234., 44460., 49862.,
      52782., 50454., 53374., 45116., 37834., 31976., 28360., 36210., 45516.,
      50454., 53374., 52070., 54990., 48476., 38650., 26792., 27952., 31948.,
      40264., 43940., 47092., 47556., 47316., 38632., 31836., 20592., 27320.,
      32542., 36692., 39962., 39378., 37962., 39938., 32068., 24374., 18072.,
      21216., 27752., 31856., 31416., 32472., 29624., 30168., 27696., 22024.,
      16672.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   856.,   1400.,  1944.,  2488.,  2722.,  2428.,
      1542.,  500.,   1544.,  3068.,  5200.,  5456.,  7568.,  9680.,  9260.,
      7592.,  4548.,  2562.,  4084.,  6294.,  9192.,  6600.,  7400.,  10056.,
      10206., 8708.,  5370.,  2696.,  7056.,  10776., 15648., 13792., 12768.,
      15136., 14968., 12560., 7656.,  4392.,  8656.,  14584., 19872., 15648.,
      13792., 12768., 11416., 9936.,  6216.,  3720.,  9424.,  15000., 22240.,
      19872., 15648., 13792., 9720.,  7312.,  4776.,  3048.,  7824.,  14584.,
      21216., 22240., 19872., 15648., 11416., 6544.,  3336.,  2306.,  5940.,
      11094., 17960., 19272., 19752., 16840., 10718., 6340.,  1978.,  1188.,
      3112.,  5900.,  9680.,  11792., 11536., 10448., 7484.,  2888.,  948.,
      782.,   2028.,  3802.,  6168.,  7736.,  9304.,  8504.,  6706.,  3996.,
      310.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7664.,  8496.,  10464., 11512., 13624., 14904., 17160., 18688., 18024.,
      19544., 18760., 20272., 20328., 21896., 18872., 20264., 16960., 18160.,
      14576., 15568., 13788., 14944., 17997., 19396., 22602., 24264., 27623.,
      29568., 28089., 30040., 28427., 30384., 30493., 32520., 27538., 29308.,
      23939., 25432., 19676., 20872., 20328., 21688., 24684., 26348., 29540.,
      31532., 34920., 37264., 34672., 37036., 34296., 36680., 36544., 39012.,
      32580., 34740., 27844., 29672., 22312., 23784., 24308., 26008., 28277.,
      30312., 32790., 35188., 37875., 40664., 36661., 39420., 35191., 37920.,
      37113., 39876., 32030., 34400., 26939., 28952., 20980., 22608., 25236.,
      26984., 26873., 28968., 29078., 31548., 35975., 38848., 37065., 39908.,
      37899., 40712., 38925., 41772., 34094., 36536., 30127., 32200., 25268.,
      26944., 27188., 28984., 32893., 35048., 39190., 41732., 46107., 49064.,
      45405., 48332., 44447., 47344., 44577., 47508., 37694., 40208., 32547.,
      34680., 26484., 28208., 30164., 32008., 34049., 36264., 38550., 41164.,
      43631., 46608., 40945., 43828., 37875., 40664., 36661., 39420., 29006.,
      31336., 23959., 25896., 17972., 19488., 29384., 31080., 31464., 33516.,
      34148., 36580., 36500., 39272., 33908., 36636., 35156., 37840., 36148.,
      38788., 31876., 34092., 27048., 28880., 21320., 22744., 23772., 25312.,
      30285., 32132., 37322., 39496., 43047., 45504., 42465., 44864., 41627.,
      43968., 40533., 42816., 33474., 35372., 26859., 28416., 19452., 20648.,
      25264., 26512., 29624., 31096., 34360., 36072., 36736., 38640., 33872.,
      35704., 30752., 32512., 27376., 29064., 19832., 21208., 13800., 14912.,
      7152.,  7984.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     6.,     16.,    19.,    40.,    44.,    80.,    76.,
      120.,   108.,   160.,   140.,   200.,   157.,   208.,   142.,   180.,
      91.,    112.,   24.,    52.,    100.,   164.,   236.,   344.,   440.,
      600.,   568.,   744.,   696.,   888.,   824.,   1032.,  788.,   956.,
      644.,   764.,   384.,   448.,   181.,   256.,   506.,   668.,   987.,
      1248.,  1636.,  2008.,  1924.,  2320.,  2212.,  2632.,  2500.,  2944.,
      2229.,  2580.,  1730.,  1976.,  991.,   1120.,  584.,   728.,   1448.,
      1752.,  2608.,  3088.,  4080.,  4752.,  4592.,  5296.,  5104.,  5840.,
      5616.,  6384.,  4816.,  5416.,  3624.,  4040.,  2024.,  2240.,  1312.,
      1512.,  3016.,  3432.,  5128.,  5776.,  7664.,  8560.,  8176.,  9104.,
      8688.,  9648.,  9200.,  10192., 7672.,  8440.,  5640.,  6168.,  3088.,
      3360.,  2040.,  2296.,  4584.,  5112.,  7648.,  8464.,  11248., 12368.,
      11760., 12912., 12272., 13456., 12784., 14000., 10528., 11464., 7656.,
      8296.,  4152.,  4480.,  2768.,  3080.,  6152.,  6792.,  10168., 11152.,
      14832., 16176., 15344., 16720., 15856., 17264., 16368., 17808., 13384.,
      14488., 9672.,  10424., 5216.,  5600.,  3397.,  3664.,  7322.,  7868.,
      11787., 12624., 16804., 17944., 17284., 18448., 17764., 18952., 18244.,
      19456., 14613., 15540., 10370., 11000., 5503.,  5824.,  3220.,  3420.,
      6836.,  7244.,  10856., 11480., 15288., 16136., 15672., 16536., 16056.,
      16936., 16440., 17336., 13016., 13700., 9140.,  9604.,  4804.,  5040.,
      2125.,  2236.,  4470.,  4696.,  7039.,  7384.,  9836.,  10304., 10060.,
      10536., 10284., 10768., 10508., 11000., 8257.,  8632.,  5758.,  6012.,
      3007.,  3136.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7344.,  9328.,  8140.,  10556., 11272., 14248., 13188., 16724., 12532.,
      16132., 11780., 15316., 11892., 15492., 8328.,  11304., 7996.,  10476.,
      7088.,  9072.,  8596.,  11108., 10277., 13305., 12270., 15974., 15407.,
      19819., 16403., 20991., 15415., 19923., 16827., 21383., 12822., 16622.,
      9785.,  12925., 8228.,  10676., 10088., 13192., 12890., 16738., 16220.,
      20876., 18894., 24294., 21222., 26782., 19774., 25238., 20214., 25710.,
      17132., 21724., 12722., 16474., 7720.,  10568., 13612., 17372., 15979.,
      20599., 20498., 26074., 22849., 29221., 24237., 30753., 24153., 30557.,
      23397., 29817., 18570., 23922., 16071., 20515., 11132., 14572., 15884.,
      19772., 17651., 22367., 20994., 26634., 24153., 30557., 23397., 29817.,
      21777., 28085., 23165., 29617., 18170., 23586., 15567., 20107., 13148.,
      16716., 14124., 17884., 17339., 21895., 19506., 24954., 21777., 28085.,
      23165., 29617., 22057., 28397., 23445., 29929., 19818., 25298., 16599.,
      21235., 14140., 17836., 12364., 15996., 15843., 20367., 20002., 25514.,
      22057., 28397., 23445., 29929., 22849., 29221., 24237., 30753., 21466.,
      27010., 17023., 21627., 11612., 15180., 12360., 15592., 13970., 17978.,
      17708., 22556., 19222., 24718., 20718., 26374., 20998., 26558., 20862.,
      26454., 16988., 21644., 14026., 17810., 8872.,  11720., 12212., 15108.,
      14501., 18041., 16238., 20454., 17647., 22315., 17331., 22047., 16663.,
      21299., 17627., 22311., 14070., 17998., 10617., 13757., 7876.,  10196.,
      9424.,  11792., 12444., 15308., 14248., 17608., 13844., 17572., 14340.,
      18132., 12948., 16676., 13188., 16980., 12232., 15464., 9676.,  12348.,
      7344.,  9328.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   292.,   564.,   532.,
      868.,   772.,   1172.,  1012.,  1476.,  1163.,  1559.,  1066.,  1362.,
      689.,   853.,   142.,   358.,   684.,   1180.,  1690.,  2530.,  3224.,
      4472.,  4216.,  5592.,  5208.,  6712.,  6200.,  7832.,  5986.,  7306.,
      4924.,  5868.,  2950.,  3454.,  1307.,  1895.,  3742.,  5014.,  7209.,
      9005.,  11484., 13900., 12524., 14876., 13052., 15340., 15308., 17788.,
      13509., 15513., 10422., 11854., 5951.,  6715.,  4204.,  5084.,  10104.,
      11992., 15588., 18356., 22512., 26288., 23280., 27056., 23536., 27312.,
      27568., 31600., 23924., 27140., 18200., 20472., 10268., 11468., 7676.,
      8748.,  17432., 19704., 25108., 28452., 34608., 39152., 33136., 37424.,
      30640., 34672., 33456., 37488., 26852., 29876., 20024., 22168., 11116.,
      12252., 8908.,  9916.,  19768., 21912., 26372., 29524., 34672., 38960.,
      29104., 33136., 22512., 26288., 23280., 27056., 17492., 20324., 13656.,
      15672., 7868.,  8940.,  6044.,  6988.,  13912., 15928., 23732., 26948.,
      35632., 40176., 35376., 39920., 34608., 39152., 33136., 37424., 23364.,
      26516., 17208., 19352., 8716.,  9724.,  7259.,  8103.,  16158., 17942.,
      26793., 29613., 39260., 43212., 36716., 40604., 33660., 37484., 27852.,
      31356., 16709., 19225., 11638., 13326., 4671.,  5435.,  4118.,  4686.,
      9340.,  10540., 15730., 17626., 23352., 26008., 26392., 29176., 29432.,
      32344., 28184., 30968., 21946., 24066., 14156., 15548., 4750.,  5350.,
      4109.,  4481.,  8946.,  9722.,  14543., 15755., 20932., 22612., 22708.,
      24452., 24484., 26292., 19924., 21540., 14307., 15503., 7738.,  8482.,
      185.,   445.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  2104.,  4216.,  3640.,
      5752.,  4152.,  6264.,  3640.,  5752.,  1834.,  3418.,  2492.,  3804.,
      1966.,  2750.,  300.,   972.,   1368.,  2712.,  3012.,  5540.,  5744.,
      9968.,  5744.,  9968.,  7792.,  12016., 7792.,  12016., 5284.,  8580.,
      3544.,  5912.,  3084.,  4524.,  490.,   1562.,  2420.,  4820.,  5534.,
      9518.,  9896.,  16232., 9384.,  15720., 9896.,  16232., 11432., 17768.,
      9326.,  14462., 6548.,  10228., 3354.,  5322.,  600.,   1944.,  3056.,
      6256.,  7368.,  12936., 13536., 21984., 13536., 21984., 13536., 21984.,
      13536., 21984., 12936., 20040., 10480., 15728., 6168.,  9048.,  600.,
      1944.,  3056.,  6256.,  7368.,  12936., 13536., 21984., 13536., 21984.,
      13536., 21984., 13536., 21984., 12936., 20040., 10480., 15728., 6168.,
      9048.,  600.,   1944.,  3056.,  6256.,  7368.,  12936., 13536., 21984.,
      13536., 21984., 13536., 21984., 13536., 21984., 12936., 20040., 10480.,
      15728., 6168.,  9048.,  600.,   1944.,  3056.,  6256.,  7368.,  12936.,
      13536., 21984., 13536., 21984., 13536., 21984., 13536., 21984., 12936.,
      20040., 10480., 15728., 6168.,  9048.,  490.,   1562.,  2420.,  4820.,
      5534.,  9518.,  9896.,  16232., 9384.,  15720., 9896.,  16232., 11432.,
      17768., 9326.,  14462., 6548.,  10228., 3354.,  5322.,  460.,   1388.,
      2200.,  4056.,  4708.,  7492.,  7792.,  12016., 5744.,  9968.,  5744.,
      9968.,  7792.,  12016., 7492.,  11044., 4056.,  6424.,  1388.,  2572.,
      190.,   590.,   1052.,  2108.,  2522.,  3978.,  4152.,  6264.,  3640.,
      5752.,  2104.,  4216.,  3640.,  5752.,  4042.,  5882.,  3004.,  4316.,
      270.,   798.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11376., 12224., 13104., 14016., 14540., 15616., 16732., 17888., 18344.,
      19680., 21064., 22496., 19204., 20768., 22388., 24064., 17044., 18592.,
      20196., 21856., 18468., 20000., 21588., 23232., 21236., 22816., 24452.,
      26144., 20232., 21600., 23016., 24480., 17948., 19072., 20236., 21440.,
      15408., 16320., 17264., 18240., 15524., 16752., 18020., 19328., 20433.,
      21940., 23497., 25104., 26118., 27944., 29830., 31776., 31315., 33436.,
      35627., 37888., 30607., 32740., 34943., 37216., 29323., 31404., 33555.,
      35776., 30919., 33012., 35175., 37408., 25422., 27208., 29054., 30960.,
      18157., 19596., 21085., 22624., 12692., 13808., 14964., 16160., 19528.,
      20896., 22312., 23776., 25098., 26800., 28562., 30384., 31596., 33680.,
      35836., 38064., 35982., 38432., 40966., 43584., 36486., 38976., 41550.,
      44208., 34622., 37088., 39638., 42272., 33334., 35840., 38430., 41104.,
      30876., 33040., 35276., 37584., 26402., 28176., 30010., 31904., 21928.,
      23328., 24776., 26272., 22236., 24016., 25852., 27744., 28759., 30932.,
      33175., 35488., 36378., 39000., 41706., 44496., 44309., 47308., 50405.,
      53600., 45721., 48724., 51825., 55024., 42717., 45660., 48701., 51840.,
      41825., 44772., 47817., 50960., 36914., 39416., 42002., 44672., 31323.,
      33388., 35523., 37728., 23916., 25552., 27244., 28992., 32508., 34384.,
      36316., 38304., 37359., 39652., 42015., 44448., 43402., 46168., 49018.,
      51952., 49597., 52764., 56029., 59392., 49729., 52900., 56169., 59536.,
      47749., 50860., 54069., 57376., 45577., 48692., 51905., 55216., 35810.,
      38456., 41186., 44000., 27059., 29244., 31499., 33824., 23052., 24784.,
      26572., 28416., 28700., 30416., 32188., 34016., 31815., 33908., 36071.,
      38304., 35962., 38488., 41098., 43792., 44261., 47212., 50261., 53408.,
      47785., 50804., 53921., 57136., 47661., 50684., 53805., 57024., 49393.,
      52484., 55673., 58960., 43026., 45688., 48434., 51264., 35531., 37772.,
      40083., 42464., 31404., 33232., 35116., 37056., 24636., 26448., 28316.,
      30240., 30687., 32900., 35183., 37536., 37866., 40536., 43290., 46128.,
      42573., 45628., 48781., 52032., 42193., 45252., 48409., 51664., 44309.,
      47308., 50405., 53600., 45721., 48724., 51825., 55024., 37058., 39608.,
      42242., 44960., 28963., 31068., 33243., 35488., 22604., 24272., 25996.,
      27776., 31400., 33056., 34760., 36512., 36658., 38688., 40778., 42928.,
      43004., 45456., 47980., 50576., 46566., 49360., 52238., 55200., 46142.,
      48976., 51894., 54896., 46678., 49488., 52382., 55360., 46446., 49232.,
      52102., 55056., 39020., 41360., 43772., 46256., 29994., 31904., 33874.,
      35904., 21320., 22816., 24360., 25952., 20516., 21872., 23268., 24704.,
      24913., 26548., 28233., 29968., 30086., 32040., 34054., 36128., 31891.,
      34076., 36331., 38656., 30831., 33028., 35295., 37632., 33355., 35564.,
      37843., 40192., 35367., 37588., 39879., 42240., 29518., 31368., 33278.,
      35248., 24269., 25772., 27325., 28928., 18260., 19440., 20660., 21920.,
      18992., 20160., 21360., 22592., 23772., 25184., 26636., 28128., 29256.,
      30944., 32680., 34464., 31028., 32896., 34820., 36800., 29828., 31680.,
      33588., 35552., 28116., 29952., 31844., 33792., 25892., 27712., 29588.,
      31520., 23016., 24544., 26120., 27744., 18860., 20128., 21436., 22784.,
      13296., 14272., 15280., 16320.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   116.,   176.,   244.,   320.,   228.,   304.,
      388.,   480.,   340.,   432.,   532.,   640.,   452.,   560.,   676.,
      800.,   535.,   628.,   727.,   832.,   498.,   568.,   642.,   720.,
      325.,   364.,   405.,   448.,   46.,    96.,    150.,   208.,   284.,
      400.,   524.,   656.,   746.,   944.,   1154.,  1376.,  1464.,  1760.,
      2072.,  2400.,  1944.,  2272.,  2616.,  2976.,  2424.,  2784.,  3160.,
      3552.,  2904.,  3296.,  3704.,  4128.,  2834.,  3152.,  3482.,  3824.,
      2348.,  2576.,  2812.,  3056.,  1414.,  1536.,  1662.,  1792.,  583.,
      724.,   871.,   1024.,  1718.,  2024.,  2342.,  2672.,  3453.,  3948.,
      4461.,  4992.,  5836.,  6544.,  7276.,  8032.,  6940.,  7696.,  8476.,
      9280.,  8044.,  8848.,  9676.,  10528., 9148.,  10000., 10876., 11776.,
      8241.,  8916.,  9609.,  10320., 6446.,  6920.,  7406.,  7904.,  3715.,
      3964.,  4219.,  4480.,  2060.,  2336.,  2620.,  2912.,  5208.,  5792.,
      6392.,  7008.,  9508.,  10432., 11380., 12352., 15024., 16320., 17648.,
      19008., 17008., 18368., 19760., 21184., 18992., 20416., 21872., 23360.,
      20976., 22464., 23984., 25536., 18100., 19264., 20452., 21664., 13688.,
      14496., 15320., 16160., 7676.,  8096.,  8524.,  8960.,  4860.,  5248.,
      5644.,  6048.,  11256., 12064., 12888., 13728., 19252., 20512., 21796.,
      23104., 28912., 30656., 32432., 34240., 30768., 32448., 34160., 35904.,
      32112., 33728., 35376., 37056., 32944., 34496., 36080., 37696., 25732.,
      26848., 27988., 29152., 18712., 19488., 20280., 21088., 10156., 10560.,
      10972., 11392., 7532.,  7904.,  8284.,  8672.,  16536., 17312., 18104.,
      18912., 27076., 28288., 29524., 30784., 39216., 40896., 42608., 44352.,
      39024., 40640., 42288., 43968., 38320., 39872., 41456., 43072., 37104.,
      38592., 40112., 41664., 27220., 28288., 29380., 30496., 19640., 20384.,
      21144., 21920., 10588., 10976., 11372., 11776., 8156.,  8512.,  8876.,
      9248.,  17720., 18464., 19224., 20000., 28756., 29920., 31108., 32320.,
      41328., 42944., 44592., 46272., 39088., 40640., 42224., 43840., 36336.,
      37824., 39344., 40896., 33072., 34496., 35952., 37440., 22564., 23584.,
      24628., 25696., 16472., 17184., 17912., 18656., 8972.,  9344.,  9724.,
      10112., 6663.,  6932.,  7207.,  7488.,  14390., 14952., 15526., 16112.,
      23229., 24108., 25005., 25920., 33228., 34448., 35692., 36960., 28828.,
      29968., 31132., 32320., 23916., 24976., 26060., 27168., 18492., 19472.,
      20476., 21504., 9393.,  10068., 10761., 11472., 7214.,  7688.,  8174.,
      8672.,  4099.,  4348.,  4603.,  4864.,  1990.,  2128.,  2270.,  2416.,
      4524.,  4816.,  5116.,  5424.,  7634.,  8096.,  8570.,  9056.,  11352.,
      12000., 12664., 13344., 12856., 13536., 14232., 14944., 14360., 15072.,
      15800., 16544., 15864., 16608., 17368., 18144., 13082., 13664., 14258.,
      14864., 9532.,  9936.,  10348., 10768., 5182.,  5392.,  5606.,  5824.,
      2009.,  2100.,  2193.,  2288.,  4378.,  4568.,  4762.,  4960.,  7123.,
      7420.,  7723.,  8032.,  10260., 10672., 11092., 11520., 11140., 11568.,
      12004., 12448., 12020., 12464., 12916., 13376., 12900., 13360., 13828.,
      14304., 10399., 10756., 11119., 11488., 7426.,  7672.,  7922.,  8176.,
      3965.,  4092.,  4221.,  4352.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5840.,  7696.,  9808.,  12176., 6612.,  8868.,  11444., 14340., 8760.,
      11544., 14712., 18264., 10044., 13228., 16860., 20940., 10396., 13708.,
      17468., 21676., 9532.,  12716., 16348., 20428., 10908., 14220., 17980.,
      22188., 8760.,  11544., 14712., 18264., 7476.,  9860.,  12564., 15588.,
      5840.,  7696.,  9808.,  12176., 6660.,  8980.,  11620., 14580., 8717.,
      11457., 14597., 18137., 10662., 14014., 17846., 22158., 11407., 15307.,
      19767., 24787., 12471., 16595., 21279., 26523., 12735., 16699., 21223.,
      26307., 13191., 17251., 21871., 27051., 10582., 13998., 17894., 22270.,
      9141.,  12105., 15469., 19233., 7428.,  9748.,  12388., 15348., 9272.,
      12056., 15224., 18776., 9150.,  12534., 16398., 20742., 12068., 16180.,
      20868., 26132., 15530., 20242., 25626., 31682., 16314., 21218., 26794.,
      33042., 12714., 17426., 22810., 28866., 15034., 19938., 25514., 31762.,
      13348., 17460., 22148., 27412., 11982., 15558., 19614., 24150., 8248.,
      11032., 14200., 17752., 10092., 13340., 17036., 21180., 13095., 17027.,
      21519., 26571., 14834., 19642., 25122., 31274., 15405., 20897., 27173.,
      34233., 18693., 24473., 31037., 38385., 18525., 24081., 30421., 37545.,
      17621., 23337., 29837., 37121., 13890., 18634., 24050., 30138., 13087.,
      17179., 21831., 27043., 10860., 14108., 17804., 21948., 10092., 13340.,
      17036., 21180., 11351., 15347., 19903., 25019., 15698., 20634., 26242.,
      32522., 18525., 24081., 30421., 37545., 17621., 23337., 29837., 37121.,
      15405., 20897., 27173., 34233., 18693., 24473., 31037., 38385., 16290.,
      21162., 26706., 32922., 12879., 17035., 21751., 27027., 9836.,  13084.,
      16780., 20924., 10092., 13340., 17036., 21180., 13095., 17027., 21519.,
      26571., 14834., 19642., 25122., 31274., 15405., 20897., 27173., 34233.,
      18693., 24473., 31037., 38385., 18525., 24081., 30421., 37545., 17621.,
      23337., 29837., 37121., 13890., 18634., 24050., 30138., 13087., 17179.,
      21831., 27043., 10860., 14108., 17804., 21948., 10092., 13340., 17036.,
      21180., 11351., 15347., 19903., 25019., 15698., 20634., 26242., 32522.,
      18525., 24081., 30421., 37545., 17621., 23337., 29837., 37121., 15405.,
      20897., 27173., 34233., 18693., 24473., 31037., 38385., 16290., 21162.,
      26706., 32922., 12879., 17035., 21751., 27027., 9836.,  13084., 16780.,
      20924., 9272.,  12056., 15224., 18776., 11502., 14950., 18878., 23286.,
      12932., 17172., 21988., 27380., 13530., 18306., 23754., 29874., 17130.,
      22098., 27738., 34050., 15834., 20610., 26058., 32178., 14826., 19794.,
      25434., 31746., 12068., 16180., 20868., 26132., 11934., 15446., 19438.,
      23910., 9272.,  12056., 15224., 18776., 6660.,  8980.,  11620., 14580.,
      8813.,  11681., 14949., 18617., 12390., 15998., 20086., 24654., 13039.,
      17067., 21655., 26803., 11703., 15827., 20511., 25755., 12223., 16187.,
      20711., 25795., 14567., 18755., 23503., 28811., 11702., 15246., 19270.,
      23774., 8373.,  11337., 14701., 18465., 7428.,  9748.,  12388., 15348.,
      5840.,  7696.,  9808.,  12176., 7124.,  9380.,  11956., 14852., 8760.,
      11544., 14712., 18264., 9532.,  12716., 16348., 20428., 10908., 14220.,
      17980., 22188., 10044., 13228., 16860., 20940., 10396., 13708., 17468.,
      21676., 8760.,  11544., 14712., 18264., 7988.,  10372., 13076., 16100.,
      5840.,  7696.,  9808.,  12176.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  820.,   1284.,  1812.,  2404.,  1684.,  2276.,
      2932.,  3652.,  2548.,  3268.,  4052.,  4900.,  3412.,  4260.,  5172.,
      6148.,  4103.,  4835.,  5615.,  6443.,  3850.,  4402.,  4986.,  5602.,
      2525.,  2833.,  3157.,  3497.,  274.,   666.,   1090.,  1546.,  1860.,
      2516.,  3236.,  4020.,  4182.,  5230.,  6374.,  7614.,  7496.,  9064.,
      10760., 12584., 8008.,  9576.,  11272., 13096., 11784., 13608., 15560.,
      17640., 15560., 17640., 19848., 22184., 15334., 17086., 18934., 20878.,
      12836., 14132., 15492., 16916., 7810.,  8522.,  9266.,  10042., 4007.,
      4611.,  5263.,  5963.,  6046.,  7190.,  8430.,  9766.,  9573.,  11193.,
      12957., 14865., 14140., 16428., 18908., 21580., 9180.,  11340., 13692.,
      16236., 10556., 12844., 15324., 17996., 15196., 17868., 20732., 23788.,
      16221., 18513., 20949., 23529., 14286., 16006., 17822., 19734., 9007.,
      9963.,  10967., 12019., 3716.,  4628.,  5604.,  6644.,  10760., 12584.,
      14536., 16616., 16524., 19260., 22188., 25308., 24592., 28240., 32144.,
      36304., 21328., 24720., 28368., 32272., 19280., 22672., 26320., 30224.,
      23568., 27216., 31120., 35280., 24236., 27356., 30668., 34172., 20872.,
      23208., 25672., 28264., 12964., 14260., 15620., 17044., 6884.,  7924.,
      9028.,  10196., 13512., 15592., 17800., 20136., 23468., 26588., 29900.,
      33404., 32144., 36304., 40720., 45392., 24592., 28240., 32144., 36304.,
      21328., 24720., 28368., 32272., 19280., 22672., 26320., 30224., 17804.,
      20540., 23468., 26588., 16072., 18152., 20360., 22696., 10308., 11476.,
      12708., 14004., 5764.,  6676.,  7652.,  8692.,  15048., 17128., 19336.,
      21672., 24076., 27324., 30764., 34396., 36432., 40848., 45520., 50448.,
      32144., 36304., 40720., 45392., 24592., 28240., 32144., 36304., 21328.,
      24720., 28368., 32272., 14636., 17244., 20044., 23036., 11272., 13096.,
      15048., 17128., 7652.,  8692.,  9796.,  10964., 4644.,  5428.,  6276.,
      7188.,  12296., 14120., 16072., 18152., 23468., 26588., 29900., 33404.,
      34384., 38800., 43472., 48400., 36432., 40848., 45520., 50448., 32144.,
      36304., 40720., 45392., 24592., 28240., 32144., 36304., 17804., 20540.,
      23468., 26588., 9736.,  11560., 13512., 15592., 4996.,  5908.,  6884.,
      7924.,  3495.,  4099.,  4751.,  5451.,  9310.,  10710., 12206., 13798.,
      17829., 20217., 22749., 25425., 29436., 33004., 36764., 40716., 31836.,
      35532., 39420., 43500., 33020., 36588., 40348., 44300., 27868., 31052.,
      34428., 37996., 17245., 19537., 21973., 24553., 9998.,  11462., 13022.,
      14678., 2671.,  3371.,  4119.,  4915.,  1762.,  2090.,  2450.,  2842.,
      4772.,  5556.,  6404.,  7316.,  9286.,  10654., 12118., 13678., 15560.,
      17640., 19848., 22184., 19336., 21672., 24136., 26728., 18824., 21160.,
      23624., 26216., 17096., 19176., 21384., 23720., 12118., 13678., 15334.,
      17086., 4100.,  5012.,  5988.,  7028.,  1170.,  1562.,  1986.,  2442.,
      1173.,  1385.,  1613.,  1857.,  3162.,  3650.,  4170.,  4722.,  6095.,
      6923.,  7799.,  8723.,  10100., 11332., 12628., 13988., 13012., 14372.,
      15796., 17284., 15924., 17412., 18964., 20580., 14548., 15908., 17332.,
      18820., 11511., 12563., 13663., 14811., 6762.,  7442.,  8154.,  8898.,
      173.,   417.,   677.,   953.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 750.,
      4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610.,
      29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380., 25380.,
      750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,  6264.,
      16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732.,
      35532., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532.,
      1080.,  6264.,  16056., 30456., 900.,   5220.,  13380., 25380., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 1050.,  6090.,
      15610., 29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854.,
      41454., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,
      6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732.,
      35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,
      7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610.,
      29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1470.,
      8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,  6090.,
      15610., 29610., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732., 35532.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1470.,
      8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,
      18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488.,
      23688., 720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380.,
      1080.,  6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,
      7308.,  18732., 35532., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1080.,  6264.,  16056., 30456., 900.,   5220.,  13380.,
      25380., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920.,
      750.,   4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,
      6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,
      2378.,  3706.,  5418.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,
      6520.,  9144.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,  6520.,
      9144.,  570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,  4572.,
      190.,   590.,   1118.,  1774.,  220.,   764.,   1564.,  2620.,  1784.,
      3384.,  5496.,  8120.,  2004.,  4148.,  7060.,  10740., 3568.,  6768.,
      10992., 16240., 3568.,  6768.,  10992., 16240., 3568.,  6768.,  10992.,
      16240., 3568.,  6768.,  10992., 16240., 3348.,  6004.,  9428.,  13620.,
      1784.,  3384.,  5496.,  8120.,  1564.,  2620.,  3932.,  5500.,  250.,
      938.,   2010.,  3466.,  2164.,  4564.,  7732.,  11668., 3438.,  6526.,
      10766., 16158., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512.,
      25384., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384.,
      3918.,  7774.,  12782., 18942., 3188.,  5588.,  8756.,  12692., 1754.,
      3210.,  5050.,  7274.,  440.,   1528.,  3128.,  5240.,  3568.,  6768.,
      10992., 16240., 4008.,  8296.,  14120., 21480., 7136.,  13536., 21984.,
      32480., 7136.,  13536., 21984., 32480., 7136.,  13536., 21984., 32480.,
      7136.,  13536., 21984., 32480., 6696.,  12008., 18856., 27240., 3568.,
      6768.,  10992., 16240., 3128.,  5240.,  7864.,  11000., 440.,   1528.,
      3128.,  5240.,  3568.,  6768.,  10992., 16240., 4008.,  8296.,  14120.,
      21480., 7136.,  13536., 21984., 32480., 7136.,  13536., 21984., 32480.,
      7136.,  13536., 21984., 32480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 3568.,  6768.,  10992., 16240., 3128.,  5240.,
      7864.,  11000., 440.,   1528.,  3128.,  5240.,  3568.,  6768.,  10992.,
      16240., 4008.,  8296.,  14120., 21480., 7136.,  13536., 21984., 32480.,
      7136.,  13536., 21984., 32480., 7136.,  13536., 21984., 32480., 7136.,
      13536., 21984., 32480., 6696.,  12008., 18856., 27240., 3568.,  6768.,
      10992., 16240., 3128.,  5240.,  7864.,  11000., 440.,   1528.,  3128.,
      5240.,  3568.,  6768.,  10992., 16240., 4008.,  8296.,  14120., 21480.,
      7136.,  13536., 21984., 32480., 7136.,  13536., 21984., 32480., 7136.,
      13536., 21984., 32480., 7136.,  13536., 21984., 32480., 6696.,  12008.,
      18856., 27240., 3568.,  6768.,  10992., 16240., 3128.,  5240.,  7864.,
      11000., 250.,   938.,   2010.,  3466.,  2164.,  4564.,  7732.,  11668.,
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6376.,
      11176., 17512., 25384., 4328.,  9128.,  15464., 23336., 6376.,  11176.,
      17512., 25384., 3918.,  7774.,  12782., 18942., 3188.,  5588.,  8756.,
      12692., 1754.,  3210.,  5050.,  7274.,  220.,   764.,   1564.,  2620.,
      1784.,  3384.,  5496.,  8120.,  2004.,  4148.,  7060.,  10740., 3568.,
      6768.,  10992., 16240., 3568.,  6768.,  10992., 16240., 3568.,  6768.,
      10992., 16240., 3568.,  6768.,  10992., 16240., 3348.,  6004.,  9428.,
      13620., 1784.,  3384.,  5496.,  8120.,  1564.,  2620.,  3932.,  5500.,
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,
      2378.,  3706.,  5418.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,
      6520.,  9144.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,  6520.,
      9144.,  570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,  4572.,
      190.,   590.,   1118.,  1774.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1876.,  2610.,  3458.,  4424.,  4830.,  4550.,  4140.,  3596.,  3840.,
      5225.,  6790.,  8540.,  9170.,  8485.,  7600.,  6510.,  6850.,  9185.,
      11781., 14644., 15547., 14211., 12590., 10678., 11130., 14770., 18767.,
      23128., 24353., 22064., 19390., 16324., 16394., 21490., 26999., 32928.,
      34153., 30632., 26670., 22260., 20998., 27215., 33831., 40852., 42049.,
      37341., 32210., 26650., 23660., 30475., 37660., 45220., 46340., 40915.,
      35100., 28890., 24156., 30990., 38150., 45640., 46634., 41018., 35060.,
      28756., 1876.,  2610.,  3458.,  4424.,  4830.,  4550.,  4140.,  3596.,
      3840.,  5225.,  6790.,  8540.,  9170.,  8485.,  7600.,  6510.,  6850.,
      9185.,  11781., 14644., 15547., 14211., 12590., 10678., 11130., 14770.,
      18767., 23128., 24353., 22064., 19390., 16324., 16394., 21490., 26999.,
      32928., 34153., 30632., 26670., 22260., 20998., 27215., 33831., 40852.,
      42049., 37341., 32210., 26650., 23660., 30475., 37660., 45220., 46340.,
      40915., 35100., 28890., 24156., 30990., 38150., 45640., 46634., 41018.,
      35060., 28756., 1876.,  2610.,  3458.,  4424.,  4830.,  4550.,  4140.,
      3596.,  3840.,  5225.,  6790.,  8540.,  9170.,  8485.,  7600.,  6510.,
      6850.,  9185.,  11781., 14644., 15547., 14211., 12590., 10678., 11130.,
      14770., 18767., 23128., 24353., 22064., 19390., 16324., 16394., 21490.,
      26999., 32928., 34153., 30632., 26670., 22260., 20998., 27215., 33831.,
      40852., 42049., 37341., 32210., 26650., 23660., 30475., 37660., 45220.,
      46340., 40915., 35100., 28890., 24156., 30990., 38150., 45640., 46634.,
      41018., 35060., 28756.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    7.,    10.,   13.,   16.,   19.,   14.,   11.,   35.,
      45.,   55.,   65.,   75.,   85.,   56.,   39.,   105.,  115.,  125.,
      135.,  145.,  155.,  98.,   67.,   175.,  185.,  195.,  205.,  215.,
      225.,  140.,  95.,   245.,  255.,  265.,  275.,  285.,  295.,  182.,
      123.,  315.,  325.,  335.,  345.,  355.,  365.,  224.,  151.,  385.,
      395.,  405.,  415.,  425.,  435.,  266.,  129.,  304.,  311.,  318.,
      325.,  332.,  339.,  196.,  5.,    16.,   27.,   38.,   49.,   60.,
      71.,   42.,   47.,   115.,  141.,  167.,  193.,  219.,  245.,  140.,
      131.,  297.,  323.,  349.,  375.,  401.,  427.,  238.,  215.,  479.,
      505.,  531.,  557.,  583.,  609.,  336.,  299.,  661.,  687.,  713.,
      739.,  765.,  791.,  434.,  383.,  843.,  869.,  895.,  921.,  947.,
      973.,  532.,  467.,  1025., 1051., 1077., 1103., 1129., 1155., 630.,
      301.,  652.,  667.,  682.,  697.,  712.,  727.,  392.,  9.,    28.,
      47.,   66.,   85.,   104.,  123.,  70.,   83.,   195.,  237.,  279.,
      321.,  363.,  405.,  224.,  223.,  489.,  531.,  573.,  615.,  657.,
      699.,  378.,  363.,  783.,  825.,  867.,  909.,  951.,  993.,  532.,
      503.,  1077., 1119., 1161., 1203., 1245., 1287., 686.,  643.,  1371.,
      1413., 1455., 1497., 1539., 1581., 840.,  783.,  1665., 1707., 1749.,
      1791., 1833., 1875., 994.,  473.,  1000., 1023., 1046., 1069., 1092.,
      1115., 588.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4736.,  6256.,  8160.,  10480., 12136., 10768., 8760.,  8224.,  7260.,
      10137., 13410., 17119., 19273., 17638., 15191., 13012., 9712.,  11956.,
      14728., 18076., 20608., 18144., 14704., 12384., 9788.,  13857., 18578.,
      23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783.,
      28957., 25694., 21235., 17668., 9664.,  13632., 18208., 23344., 26308.,
      24280., 21196., 18128., 12364., 15261., 18666., 21499., 23861., 20430.,
      16075., 12900., 5856.,  8424.,  11408., 14744., 16752., 15840., 14256.,
      11968., 4736.,  6256.,  8160.,  10480., 12136., 10768., 8760.,  8224.,
      7260.,  10137., 13410., 17119., 19273., 17638., 15191., 13012., 9712.,
      11956., 14728., 18076., 20608., 18144., 14704., 12384., 9788.,  13857.,
      18578., 23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746.,
      25783., 28957., 25694., 21235., 17668., 9664.,  13632., 18208., 23344.,
      26308., 24280., 21196., 18128., 12364., 15261., 18666., 21499., 23861.,
      20430., 16075., 12900., 5856.,  8424.,  11408., 14744., 16752., 15840.,
      14256., 11968., 4736.,  6256.,  8160.,  10480., 12136., 10768., 8760.,
      8224.,  7260.,  10137., 13410., 17119., 19273., 17638., 15191., 13012.,
      9712.,  11956., 14728., 18076., 20608., 18144., 14704., 12384., 9788.,
      13857., 18578., 23911., 27085., 25214., 22211., 19140., 13692., 17361.,
      21746., 25783., 28957., 25694., 21235., 17668., 9664.,  13632., 18208.,
      23344., 26308., 24280., 21196., 18128., 12364., 15261., 18666., 21499.,
      23861., 20430., 16075., 12900., 5856.,  8424.,  11408., 14744., 16752.,
      15840., 14256., 11968.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    42.,    62.,    82.,   102.,  122.,   95.,    64.,
      224.,   296.,   368.,   440.,   512.,  584.,  396.,   260.,   728.,
      800.,   872.,   944.,   1016.,  1088., 704.,  456.,   1232.,  1304.,
      1376.,  1448.,  1520.,  1592.,  1012., 652.,  1736.,  1808.,  1880.,
      1952.,  2024.,  2096.,  1320.,  848.,  2240., 2312.,  2384.,  2456.,
      2528.,  2600.,  1628.,  1044.,  2744., 2816., 2888.,  2960.,  3032.,
      3104.,  1936.,  941.,   2246.,  2298., 2350., 2402.,  2454.,  2506.,
      1463.,  29.,    102.,   186.,   270.,  354.,  438.,   522.,   311.,
      336.,   832.,   1032.,  1232.,  1432., 1632., 1832.,  1052.,  980.,
      2232.,  2432.,  2632.,  2832.,  3032., 3232., 1808.,  1624.,  3632.,
      3832.,  4032.,  4232.,  4432.,  4632., 2564., 2268.,  5032.,  5232.,
      5432.,  5632.,  5832.,  6032.,  3320., 2912., 6432.,  6632.,  6832.,
      7032.,  7232.,  7432.,  4076.,  3556., 7832., 8032.,  8232.,  8432.,
      8632.,  8832.,  4832.,  2309.,  5014., 5130., 5246.,  5362.,  5478.,
      5594.,  3023.,  53.,    182.,   330.,  478.,  626.,   774.,   922.,
      527.,   608.,   1440.,  1768.,  2096., 2424., 2752.,  3080.,  1708.,
      1700.,  3736.,  4064.,  4392.,  4720., 5048., 5376.,  2912.,  2792.,
      6032.,  6360.,  6688.,  7016.,  7344., 7672., 4116.,  3884.,  8328.,
      8656.,  8984.,  9312.,  9640.,  9968., 5320., 4976.,  10624., 10952.,
      11280., 11608., 11936., 12264., 6524., 6068., 12920., 13248., 13576.,
      13904., 14232., 14560., 7728.,  3677., 7782., 7962.,  8142.,  8322.,
      8502.,  8682.,  4583.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9248.,  13480., 18672., 25080., 31960., 27504., 23944., 21536., 12280.,
      18110., 24980., 33210., 41970., 36836., 31750., 26904., 14768., 22220.,
      30920., 41060., 51764., 46568., 40636., 34096., 16712., 25490., 35980.,
      48118., 60830., 56188., 50090., 42600., 16712., 25490., 35980., 48118.,
      60830., 56188., 50090., 42600., 15856., 23900., 33320., 43988., 55076.,
      49160., 42380., 34864., 13688., 20782., 28980., 38090., 47490., 44100.,
      36470., 28696., 10720., 16648., 23472., 30936., 38584., 37104., 32360.,
      24096., 9248.,  13480., 18672., 25080., 31960., 27504., 23944., 21536.,
      12280., 18110., 24980., 33210., 41970., 36836., 31750., 26904., 14768.,
      22220., 30920., 41060., 51764., 46568., 40636., 34096., 16712., 25490.,
      35980., 48118., 60830., 56188., 50090., 42600., 16712., 25490., 35980.,
      48118., 60830., 56188., 50090., 42600., 15856., 23900., 33320., 43988.,
      55076., 49160., 42380., 34864., 13688., 20782., 28980., 38090., 47490.,
      44100., 36470., 28696., 10720., 16648., 23472., 30936., 38584., 37104.,
      32360., 24096., 9248.,  13480., 18672., 25080., 31960., 27504., 23944.,
      21536., 12280., 18110., 24980., 33210., 41970., 36836., 31750., 26904.,
      14768., 22220., 30920., 41060., 51764., 46568., 40636., 34096., 16712.,
      25490., 35980., 48118., 60830., 56188., 50090., 42600., 16712., 25490.,
      35980., 48118., 60830., 56188., 50090., 42600., 15856., 23900., 33320.,
      43988., 55076., 49160., 42380., 34864., 13688., 20782., 28980., 38090.,
      47490., 44100., 36470., 28696., 10720., 16648., 23472., 30936., 38584.,
      37104., 32360., 24096.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   284.,   428.,   572.,   716.,   860.,   694.,   420.,
      1576.,  2120.,  2664.,  3208.,  3752.,  4296.,  2964.,  1876.,  5384.,
      5288.,  4168.,  4712.,  5256.,  5800.,  3652.,  2692.,  6888.,  4744.,
      1576.,  2120.,  2664.,  3208.,  2292.,  1460.,  4296.,  4840.,  5384.,
      5288.,  4168.,  4712.,  2980.,  2276.,  5800.,  6344.,  6888.,  4744.,
      1576.,  2120.,  1620.,  1044.,  3208.,  3752.,  4296.,  4840.,  5384.,
      5288.,  2308.,  1790.,  4428.,  4828.,  5228.,  5628.,  6028.,  3740.,
      150.,   190.,   716.,   1372.,  2028.,  2684.,  3340.,  3996.,  2390.,
      2532.,  6312.,  7880.,  9448.,  11016., 12584., 14152., 8148.,  7572.,
      17288., 14120., 9928.,  11496., 13064., 14632., 8324.,  7876.,  17768.,
      12552., 6312.,  7880.,  9448.,  11016., 6452.,  6132.,  14152., 15720.,
      17288., 14120., 9928.,  11496., 6628.,  6436.,  14632., 16200., 17768.,
      12552., 6312.,  7880.,  4756.,  4692.,  11016., 12584., 14152., 15720.,
      17288., 14120., 4932.,  4510.,  10124., 11036., 11948., 12860., 13772.,
      7900.,  310.,   350.,   1292.,  2460.,  3628.,  4796.,  5964.,  7132.,
      4086.,  4644.,  11048., 13640., 16232., 18824., 21416., 24008., 13332.,
      13268., 29192., 22952., 15688., 18280., 20872., 23464., 12996., 13060.,
      28648., 20360., 11048., 13640., 16232., 18824., 10612., 10804., 24008.,
      26600., 29192., 22952., 15688., 18280., 10276., 10596., 23464., 26056.,
      28648., 20360., 11048., 13640., 7892.,  8340.,  18824., 21416., 24008.,
      26600., 29192., 22952., 7556.,  7230.,  15820., 17244., 18668., 20092.,
      21516., 12060., 470.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6640.,  7504.,  9320.,  10440., 12440., 13832., 16016., 17696., 17584.,
      19320., 16664., 18200., 15240., 16560., 13296., 14384., 12956., 14080.,
      17461., 18852., 22410., 24088., 27823., 29808., 29889., 31944., 27154.,
      28948., 23767., 25280., 19708., 20920., 18728., 19976., 23792., 25348.,
      29364., 31252., 35468., 37712., 37716., 40044., 33684., 35724., 28920.,
      30648., 23400., 24792., 21780., 23272., 26873., 28744., 32598., 34876.,
      38983., 41696., 41609., 44420., 37022., 39488., 31563., 33656., 25204.,
      26896., 22420., 24104., 26889., 29000., 32086., 34652., 38039., 41088.,
      40665., 43812., 36062., 38816., 30491., 32824., 23924., 25808., 18408.,
      19992., 24836., 26812., 31940., 34332., 39744., 42576., 42272., 45188.,
      38532., 41076., 33892., 36040., 28328., 30056., 23132., 24496., 29457.,
      31148., 36346., 38384., 43819., 46224., 46053., 48528., 40930., 43084.,
      35035., 36848., 28348., 29800., 19312., 20336., 23248., 24504., 27576.,
      29080., 32312., 34080., 34056., 35880., 29624., 31208., 24608., 25936.,
      18992., 20048., 6640.,  7504.,  9320.,  10440., 12440., 13832., 16016.,
      17696., 17584., 19320., 16664., 18200., 15240., 16560., 13296., 14384.,
      12956., 14080., 17461., 18852., 22410., 24088., 27823., 29808., 29889.,
      31944., 27154., 28948., 23767., 25280., 19708., 20920., 18728., 19976.,
      23792., 25348., 29364., 31252., 35468., 37712., 37716., 40044., 33684.,
      35724., 28920., 30648., 23400., 24792., 21780., 23272., 26873., 28744.,
      32598., 34876., 38983., 41696., 41609., 44420., 37022., 39488., 31563.,
      33656., 25204., 26896., 22420., 24104., 26889., 29000., 32086., 34652.,
      38039., 41088., 40665., 43812., 36062., 38816., 30491., 32824., 23924.,
      25808., 18408., 19992., 24836., 26812., 31940., 34332., 39744., 42576.,
      42272., 45188., 38532., 41076., 33892., 36040., 28328., 30056., 23132.,
      24496., 29457., 31148., 36346., 38384., 43819., 46224., 46053., 48528.,
      40930., 43084., 35035., 36848., 28348., 29800., 19312., 20336., 23248.,
      24504., 27576., 29080., 32312., 34080., 34056., 35880., 29624., 31208.,
      24608., 25936., 18992., 20048., 6640.,  7504.,  9320.,  10440., 12440.,
      13832., 16016., 17696., 17584., 19320., 16664., 18200., 15240., 16560.,
      13296., 14384., 12956., 14080., 17461., 18852., 22410., 24088., 27823.,
      29808., 29889., 31944., 27154., 28948., 23767., 25280., 19708., 20920.,
      18728., 19976., 23792., 25348., 29364., 31252., 35468., 37712., 37716.,
      40044., 33684., 35724., 28920., 30648., 23400., 24792., 21780., 23272.,
      26873., 28744., 32598., 34876., 38983., 41696., 41609., 44420., 37022.,
      39488., 31563., 33656., 25204., 26896., 22420., 24104., 26889., 29000.,
      32086., 34652., 38039., 41088., 40665., 43812., 36062., 38816., 30491.,
      32824., 23924., 25808., 18408., 19992., 24836., 26812., 31940., 34332.,
      39744., 42576., 42272., 45188., 38532., 41076., 33892., 36040., 28328.,
      30056., 23132., 24496., 29457., 31148., 36346., 38384., 43819., 46224.,
      46053., 48528., 40930., 43084., 35035., 36848., 28348., 29800., 19312.,
      20336., 23248., 24504., 27576., 29080., 32312., 34080., 34056., 35880.,
      29624., 31208., 24608., 25936., 18992., 20048.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    6.,    16.,   14.,   28.,   22.,   40.,   30.,   52.,
      38.,   64.,   46.,   76.,   39.,   56.,   20.,   44.,   84.,   140.,
      116.,  180.,  148.,  220.,  180.,  260.,  212.,  300.,  244.,  340.,
      172.,  224.,  104.,  156.,  308.,  420.,  340.,  460.,  372.,  500.,
      404.,  540.,  436.,  580.,  468.,  620.,  312.,  392.,  188.,  268.,
      532.,  700.,  564.,  740.,  596.,  780.,  628.,  820.,  660.,  860.,
      692.,  900.,  452.,  560.,  272.,  380.,  756.,  980.,  788.,  1020.,
      820.,  1060., 852.,  1100., 884.,  1140., 916.,  1180., 592.,  728.,
      356.,  492.,  980.,  1260., 1012., 1300., 1044., 1340., 1076., 1380.,
      1108., 1420., 1140., 1460., 732.,  896.,  440.,  604.,  1204., 1540.,
      1236., 1580., 1268., 1620., 1300., 1660., 1332., 1700., 1364., 1740.,
      872.,  1064., 425.,  516.,  1030., 1216., 1054., 1244., 1078., 1272.,
      1102., 1300., 1126., 1328., 1150., 1356., 679.,  784.,  9.,    20.,
      38.,   64.,   78.,   108.,  118.,  152.,  158.,  196.,  198.,  240.,
      238.,  284.,  143.,  168.,  148.,  188.,  372.,  460.,  468.,  564.,
      564.,  668.,  660.,  772.,  756.,  876.,  852.,  980.,  492.,  560.,
      456.,  524.,  1044., 1188., 1140., 1292., 1236., 1396., 1332., 1500.,
      1428., 1604., 1524., 1708., 856.,  952.,  764.,  860.,  1716., 1916.,
      1812., 2020., 1908., 2124., 2004., 2228., 2100., 2332., 2196., 2436.,
      1220., 1344., 1072., 1196., 2388., 2644., 2484., 2748., 2580., 2852.,
      2676., 2956., 2772., 3060., 2868., 3164., 1584., 1736., 1380., 1532.,
      3060., 3372., 3156., 3476., 3252., 3580., 3348., 3684., 3444., 3788.,
      3540., 3892., 1948., 2128., 1688., 1868., 3732., 4100., 3828., 4204.,
      3924., 4308., 4020., 4412., 4116., 4516., 4212., 4620., 2312., 2520.,
      1105., 1204., 2406., 2608., 2462., 2668., 2518., 2728., 2574., 2788.,
      2630., 2848., 2686., 2908., 1455., 1568., 17.,   36.,   70.,   112.,
      142.,  188.,  214.,  264.,  286.,  340.,  358.,  416.,  430.,  492.,
      247.,  280.,  276.,  332.,  660.,  780.,  820.,  948.,  980.,  1116.,
      1140., 1284., 1300., 1452., 1460., 1620., 812.,  896.,  808.,  892.,
      1780., 1956., 1940., 2124., 2100., 2292., 2260., 2460., 2420., 2628.,
      2580., 2796., 1400., 1512., 1340., 1452., 2900., 3132., 3060., 3300.,
      3220., 3468., 3380., 3636., 3540., 3804., 3700., 3972., 1988., 2128.,
      1872., 2012., 4020., 4308., 4180., 4476., 4340., 4644., 4500., 4812.,
      4660., 4980., 4820., 5148., 2576., 2744., 2404., 2572., 5140., 5484.,
      5300., 5652., 5460., 5820., 5620., 5988., 5780., 6156., 5940., 6324.,
      3164., 3360., 2936., 3132., 6260., 6660., 6420., 6828., 6580., 6996.,
      6740., 7164., 6900., 7332., 7060., 7500., 3752., 3976., 1785., 1892.,
      3782., 4000., 3870., 4092., 3958., 4184., 4046., 4276., 4134., 4368.,
      4222., 4460., 2231., 2352.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3888.,  5360.,  5756.,  7724.,  8040.,  10632., 10868., 14212., 14084.,
      17876., 12072., 15432., 10508., 13436., 9520.,  12016., 5140.,  7140.,
      7765.,  10345., 10830., 14150., 14495., 18715., 18595., 23375., 16294.,
      20542., 14033., 17717., 11908., 14996., 6152.,  8616.,  9490.,  12730.,
      13420., 17500., 17974., 23086., 22990., 28774., 20700., 25868., 18074.,
      22562., 15176., 18920., 6924.,  9788.,  10835., 14655., 15554., 20426.,
      21049., 27069., 27013., 33817., 25034., 31154., 22375., 27715., 19068.,
      23532., 6924.,  9788.,  10835., 14655., 15554., 20426., 21049., 27069.,
      27013., 33817., 25034., 31154., 22375., 27715., 19068., 23532., 6632.,
      9224.,  10250., 13650., 14524., 18796., 19390., 24598., 24598., 30478.,
      21964., 27196., 18930., 23450., 15560., 19304., 5716.,  7972.,  8925.,
      11857., 12670., 16310., 16855., 21235., 21275., 26215., 19830., 24270.,
      16345., 20125., 12804., 15892., 4432.,  6288.,  7116.,  9532.,  10248.,
      13224., 13700., 17236., 17300., 21284., 16744., 20360., 14620., 17740.,
      10800., 13296., 3888.,  5360.,  5756.,  7724.,  8040.,  10632., 10868.,
      14212., 14084., 17876., 12072., 15432., 10508., 13436., 9520.,  12016.,
      5140.,  7140.,  7765.,  10345., 10830., 14150., 14495., 18715., 18595.,
      23375., 16294., 20542., 14033., 17717., 11908., 14996., 6152.,  8616.,
      9490.,  12730., 13420., 17500., 17974., 23086., 22990., 28774., 20700.,
      25868., 18074., 22562., 15176., 18920., 6924.,  9788.,  10835., 14655.,
      15554., 20426., 21049., 27069., 27013., 33817., 25034., 31154., 22375.,
      27715., 19068., 23532., 6924.,  9788.,  10835., 14655., 15554., 20426.,
      21049., 27069., 27013., 33817., 25034., 31154., 22375., 27715., 19068.,
      23532., 6632.,  9224.,  10250., 13650., 14524., 18796., 19390., 24598.,
      24598., 30478., 21964., 27196., 18930., 23450., 15560., 19304., 5716.,
      7972.,  8925.,  11857., 12670., 16310., 16855., 21235., 21275., 26215.,
      19830., 24270., 16345., 20125., 12804., 15892., 4432.,  6288.,  7116.,
      9532.,  10248., 13224., 13700., 17236., 17300., 21284., 16744., 20360.,
      14620., 17740., 10800., 13296., 3888.,  5360.,  5756.,  7724.,  8040.,
      10632., 10868., 14212., 14084., 17876., 12072., 15432., 10508., 13436.,
      9520.,  12016., 5140.,  7140.,  7765.,  10345., 10830., 14150., 14495.,
      18715., 18595., 23375., 16294., 20542., 14033., 17717., 11908., 14996.,
      6152.,  8616.,  9490.,  12730., 13420., 17500., 17974., 23086., 22990.,
      28774., 20700., 25868., 18074., 22562., 15176., 18920., 6924.,  9788.,
      10835., 14655., 15554., 20426., 21049., 27069., 27013., 33817., 25034.,
      31154., 22375., 27715., 19068., 23532., 6924.,  9788.,  10835., 14655.,
      15554., 20426., 21049., 27069., 27013., 33817., 25034., 31154., 22375.,
      27715., 19068., 23532., 6632.,  9224.,  10250., 13650., 14524., 18796.,
      19390., 24598., 24598., 30478., 21964., 27196., 18930., 23450., 15560.,
      19304., 5716.,  7972.,  8925.,  11857., 12670., 16310., 16855., 21235.,
      21275., 26215., 19830., 24270., 16345., 20125., 12804., 15892., 4432.,
      6288.,  7116.,  9532.,  10248., 13224., 13700., 17236., 17300., 21284.,
      16744., 20360., 14620., 17740., 10800., 13296.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   90.,    194.,   146.,   282.,   202.,
      370.,   258.,   458.,   314.,   546.,   281.,   413.,   118.,   302.,
      572.,   1004.,  812.,   1308.,  1052.,  1612.,  1292.,  1916.,  1532.,
      2220.,  1772.,  2524.,  1278.,  1686.,  734.,   1142.,  2252.,  3132.,
      2492.,  3436.,  2732.,  3740.,  2972.,  4044.,  3212.,  4348.,  3452.,
      4652.,  2342.,  2974.,  1350.,  1982.,  3932.,  5260.,  4172.,  5564.,
      4412.,  5868.,  4652.,  6172.,  4892.,  6476.,  5132.,  6780.,  3406.,
      4262.,  1966.,  2822.,  5612.,  7388.,  5852.,  7692.,  6092.,  7996.,
      6332.,  8300.,  6572.,  8604.,  6812.,  8908.,  4470.,  5550.,  2582.,
      3662.,  7292.,  9516.,  7532.,  9820.,  7772.,  10124., 8012.,  10428.,
      8252.,  10732., 8492.,  11036., 5534.,  6838.,  3198.,  4502.,  8972.,
      11644., 9212.,  11948., 9452.,  12252., 9692.,  12556., 9932.,  12860.,
      10172., 13164., 6598.,  8126.,  3221.,  3945.,  7874.,  9354.,  8058.,
      9570.,  8242.,  9786.,  8426.,  10002., 8610.,  10218., 8794.,  10434.,
      5225.,  6061.,  53.,    137.,   258.,   458.,   570.,   802.,   882.,
      1146.,  1194.,  1490.,  1506.,  1834.,  1818.,  2178.,  1097.,  1293.,
      1110.,  1422.,  2812.,  3500.,  3564.,  4316.,  4316.,  5132.,  5068.,
      5948.,  5820.,  6764.,  6572.,  7580.,  3806.,  4342.,  3518.,  4054.,
      8076.,  9212.,  8828.,  10028., 9580.,  10844., 10332., 11660., 11084.,
      12476., 11836., 13292., 6662.,  7422.,  5926.,  6686.,  13340., 14924.,
      14092., 15740., 14844., 16556., 15596., 17372., 16348., 18188., 17100.,
      19004., 9518.,  10502., 8334.,  9318.,  18604., 20636., 19356., 21452.,
      20108., 22268., 20860., 23084., 21612., 23900., 22364., 24716., 12374.,
      13582., 10742., 11950., 23868., 26348., 24620., 27164., 25372., 27980.,
      26124., 28796., 26876., 29612., 27628., 30428., 15230., 16662., 13150.,
      14582., 29132., 32060., 29884., 32876., 30636., 33692., 31388., 34508.,
      32140., 35324., 32892., 36140., 18086., 19742., 8645.,  9433.,  18850.,
      20458., 19290., 20930., 19730., 21402., 20170., 21874., 20610., 22346.,
      21050., 22818., 11417., 12317., 101.,   249.,   482.,   810.,   1050.,
      1410.,  1618.,  2010.,  2186.,  2610.,  2754.,  3210.,  3322.,  3810.,
      1913.,  2173.,  2102.,  2542.,  5052.,  5996.,  6316.,  7324.,  7580.,
      8652.,  8844.,  9980.,  10108., 11308., 11372., 12636., 6334.,  6998.,
      6302.,  6966.,  13900., 15292., 15164., 16620., 16428., 17948., 17692.,
      19276., 18956., 20604., 20220., 21932., 10982., 11870., 10502., 11390.,
      22748., 24588., 24012., 25916., 25276., 27244., 26540., 28572., 27804.,
      29900., 29068., 31228., 15630., 16742., 14702., 15814., 31596., 33884.,
      32860., 35212., 34124., 36540., 35388., 37868., 36652., 39196., 37916.,
      40524., 20278., 21614., 18902., 20238., 40444., 43180., 41708., 44508.,
      42972., 45836., 44236., 47164., 45500., 48492., 46764., 49820., 24926.,
      26486., 23102., 24662., 49292., 52476., 50556., 53804., 51820., 55132.,
      53084., 56460., 54348., 57788., 55612., 59116., 29574., 31358., 14069.,
      14921., 29826., 31562., 30522., 32290., 31218., 33018., 31914., 33746.,
      32610., 34474., 33306., 35202., 17609., 18573.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4176., 10704., 3896., 9592.,  2784., 7136.,  3224., 8664.,  4046., 10462.,
      4836., 12996., 5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502.,
      3736., 9176.,  4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724.,
      7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704., 4616., 12232.,
      5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414., 7692., 19116.,
      6394., 16298., 5128., 12744., 4616., 12232., 5578., 14586., 6924., 18348.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6264., 16056., 5844., 14388., 4176., 10704., 3224., 8664.,  4046., 10462.,
      4836., 12996., 5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502.,
      3736., 9176.,  2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816.,
      5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,  2784., 7136.,
      3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160., 4176., 10704.,
      3896., 9592.,  2784., 7136.,  3224., 8664.,  4046., 10462., 4836., 12996.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6264., 16056., 5844., 14388., 4176., 10704., 4616., 12232., 5578., 14586.,
      6924., 18348., 8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298.,
      5128., 12744., 4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958.,
      8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744., 4176., 10704.,
      4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740., 6264., 16056.,
      5844., 14388., 4176., 10704., 3224., 8664.,  4046., 10462., 4836., 12996.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4176., 10704., 3896., 9592.,  2784., 7136.,  2784., 7136.,  3064., 8248.,
      4176., 10704., 4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,
      2784., 7136.,  3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050.,
      6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,  4176., 10704.,
      4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740., 6264., 16056.,
      5844., 14388., 4176., 10704., 4616., 12232., 5578., 14586., 6924., 18348.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      7692., 19116., 6394., 16298., 5128., 12744., 4176., 10704., 4596., 12372.,
      6264., 16056., 6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388.,
      4176., 10704., 3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050.,
      6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,  2784., 7136.,
      3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160., 4176., 10704.,
      3896., 9592.,  2784., 7136.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   636.,   1436.,  1052.,  2108.,  1468.,
      2780.,  1884.,  3452.,  2300.,  4124.,  2126.,  3166.,  780.,   2220.,
      3544.,  5912.,  2712.,  4568.,  4568.,  6936.,  6424.,  9304.,  8280.,
      11672., 10136., 14040., 7148.,  9356.,  4844.,  7052.,  9112.,  13016.,
      3544.,  5912.,  2712.,  4568.,  4568.,  6936.,  6424.,  9304.,  8280.,
      11672., 5964.,  7916.,  4172.,  6124.,  11992., 16408., 9112.,  13016.,
      3544.,  5912.,  2712.,  4568.,  4568.,  6936.,  6424.,  9304.,  4780.,
      6476.,  3500.,  5196.,  10136., 14040., 11992., 16408., 9112.,  13016.,
      3544.,  5912.,  2712.,  4568.,  4568.,  6936.,  3596.,  5036.,  2828.,
      4268.,  8280.,  11672., 10136., 14040., 11992., 16408., 9112.,  13016.,
      3544.,  5912.,  2712.,  4568.,  2412.,  3596.,  2156.,  3340.,  6424.,
      9304.,  8280.,  11672., 10136., 14040., 11992., 16408., 9112.,  13016.,
      3544.,  5912.,  1228.,  2156.,  1374.,  2030.,  3932.,  5500.,  5372.,
      7196.,  6812.,  8892.,  8252.,  10588., 9692.,  12284., 6396.,  8220.,
      270.,   798.,   350.,   1006.,  1884.,  3452.,  4348.,  6172.,  6812.,
      8892.,  9276.,  11612., 11740., 14332., 14204., 17052., 8590.,  10142.,
      8588.,  11052., 13016., 17432., 8088.,  11992., 14040., 18456., 19992.,
      24920., 25944., 31384., 31896., 37848., 19052., 22284., 18796., 22028.,
      30872., 36824., 13016., 17432., 8088.,  11992., 14040., 18456., 19992.,
      24920., 25944., 31384., 15820., 18796., 16076., 19052., 37848., 44312.,
      30872., 36824., 13016., 17432., 8088.,  11992., 14040., 18456., 19992.,
      24920., 12588., 15308., 13356., 16076., 31896., 37848., 37848., 44312.,
      30872., 36824., 13016., 17432., 8088.,  11992., 14040., 18456., 9356.,
      11820., 10636., 13100., 25944., 31384., 31896., 37848., 37848., 44312.,
      30872., 36824., 13016., 17432., 8088.,  11992., 6124.,  8332.,  7916.,
      10124., 19992., 24920., 25944., 31384., 31896., 37848., 37848., 44312.,
      30872., 36824., 13016., 17432., 2892.,  4844.,  3742.,  4910.,  9692.,
      12284., 13180., 16028., 16668., 19772., 20156., 23516., 23644., 27260.,
      14204., 17052., 590.,   1630.,  30.,    174.,   220.,   764.,   636.,
      1436.,  1052.,  2108.,  1468.,  2780.,  1884.,  3452.,  2300.,  4124.,
      2126.,  3166.,  780.,   2220.,  3544.,  5912.,  2712.,  4568.,  4568.,
      6936.,  6424.,  9304.,  8280.,  11672., 10136., 14040., 7148.,  9356.,
      4844.,  7052.,  9112.,  13016., 3544.,  5912.,  2712.,  4568.,  4568.,
      6936.,  6424.,  9304.,  8280.,  11672., 5964.,  7916.,  4172.,  6124.,
      11992., 16408., 9112.,  13016., 3544.,  5912.,  2712.,  4568.,  4568.,
      6936.,  6424.,  9304.,  4780.,  6476.,  3500.,  5196.,  10136., 14040.,
      11992., 16408., 9112.,  13016., 3544.,  5912.,  2712.,  4568.,  4568.,
      6936.,  3596.,  5036.,  2828.,  4268.,  8280.,  11672., 10136., 14040.,
      11992., 16408., 9112.,  13016., 3544.,  5912.,  2712.,  4568.,  2412.,
      3596.,  2156.,  3340.,  6424.,  9304.,  8280.,  11672., 10136., 14040.,
      11992., 16408., 9112.,  13016., 3544.,  5912.,  1228.,  2156.,  1374.,
      2030.,  3932.,  5500.,  5372.,  7196.,  6812.,  8892.,  8252.,  10588.,
      9692.,  12284., 6396.,  8220.,  270.,   798.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7856.,  8640.,  9456.,  10304., 10396., 11424., 12492., 13600., 13640.,
      14944., 16296., 17696., 17652., 19264., 20932., 22656., 20740., 22464.,
      24244., 26080., 18408., 19936., 21512., 23136., 14860., 16160., 17500.,
      18880., 14192., 15296., 16432., 17600., 12388., 13424., 14500., 15616.,
      17601., 18900., 20249., 21648., 23526., 25128., 26790., 28512., 30243.,
      32188., 34203., 36288., 34271., 36356., 38511., 40736., 31518., 33352.,
      35246., 37200., 27221., 28764., 30357., 32000., 23412., 24688., 26004.,
      27360., 16808., 18080., 19400., 20768., 20594., 22208., 23882., 25616.,
      25340., 27344., 29420., 31568., 31142., 33584., 36110., 38720., 35870.,
      38480., 41174., 43952., 31564., 33872., 36252., 38704., 25402., 27360.,
      29378., 31456., 21448., 23072., 24744., 26464., 16508., 18000., 19548.,
      21152., 23791., 25700., 27679., 29728., 32266., 34648., 37114., 39664.,
      41981., 44828., 47773., 50816., 47937., 50980., 54121., 57360., 44914.,
      47608., 50386., 53248., 39739., 42028., 44387., 46816., 34412., 36304.,
      38252., 40256., 24060., 25680., 27356., 29088., 30479., 32548., 34687.,
      36896., 38218., 40792., 43450., 46192., 45277., 48348., 51517., 54784.,
      51233., 54500., 57865., 61328., 45490., 48376., 51346., 54400., 37467.,
      39916., 42435., 45024., 31212., 33232., 35308., 37440., 16392., 17824.,
      19304., 20832., 23546., 25360., 27234., 29168., 31820., 34064., 36380.,
      38768., 41246., 43904., 46646., 49472., 46838., 49664., 52574., 55568.,
      43484., 45968., 48524., 51152., 38114., 40208., 42362., 44576., 32744.,
      34464., 36232., 38048., 22148., 23408., 24708., 26048., 27289., 28868.,
      30497., 32176., 33366., 35304., 37302., 39360., 38347., 40620., 42963.,
      45376., 42791., 45204., 47687., 50240., 36558., 38664., 40830., 43056.,
      28557., 30316., 32125., 33984., 22868., 24304., 25780., 27296., 9712.,
      10688., 11696., 12736., 14316., 15552., 16828., 18144., 19688., 21216.,
      22792., 24416., 25828., 27616., 29460., 31360., 29620., 31520., 33476.,
      35488., 28232., 29920., 31656., 33440., 25564., 27008., 28492., 30016.,
      21552., 22720., 23920., 25152., 7856.,  8640.,  9456.,  10304., 10396.,
      11424., 12492., 13600., 13640., 14944., 16296., 17696., 17652., 19264.,
      20932., 22656., 20740., 22464., 24244., 26080., 18408., 19936., 21512.,
      23136., 14860., 16160., 17500., 18880., 14192., 15296., 16432., 17600.,
      12388., 13424., 14500., 15616., 17601., 18900., 20249., 21648., 23526.,
      25128., 26790., 28512., 30243., 32188., 34203., 36288., 34271., 36356.,
      38511., 40736., 31518., 33352., 35246., 37200., 27221., 28764., 30357.,
      32000., 23412., 24688., 26004., 27360., 16808., 18080., 19400., 20768.,
      20594., 22208., 23882., 25616., 25340., 27344., 29420., 31568., 31142.,
      33584., 36110., 38720., 35870., 38480., 41174., 43952., 31564., 33872.,
      36252., 38704., 25402., 27360., 29378., 31456., 21448., 23072., 24744.,
      26464., 16508., 18000., 19548., 21152., 23791., 25700., 27679., 29728.,
      32266., 34648., 37114., 39664., 41981., 44828., 47773., 50816., 47937.,
      50980., 54121., 57360., 44914., 47608., 50386., 53248., 39739., 42028.,
      44387., 46816., 34412., 36304., 38252., 40256., 24060., 25680., 27356.,
      29088., 30479., 32548., 34687., 36896., 38218., 40792., 43450., 46192.,
      45277., 48348., 51517., 54784., 51233., 54500., 57865., 61328., 45490.,
      48376., 51346., 54400., 37467., 39916., 42435., 45024., 31212., 33232.,
      35308., 37440., 16392., 17824., 19304., 20832., 23546., 25360., 27234.,
      29168., 31820., 34064., 36380., 38768., 41246., 43904., 46646., 49472.,
      46838., 49664., 52574., 55568., 43484., 45968., 48524., 51152., 38114.,
      40208., 42362., 44576., 32744., 34464., 36232., 38048., 22148., 23408.,
      24708., 26048., 27289., 28868., 30497., 32176., 33366., 35304., 37302.,
      39360., 38347., 40620., 42963., 45376., 42791., 45204., 47687., 50240.,
      36558., 38664., 40830., 43056., 28557., 30316., 32125., 33984., 22868.,
      24304., 25780., 27296., 9712.,  10688., 11696., 12736., 14316., 15552.,
      16828., 18144., 19688., 21216., 22792., 24416., 25828., 27616., 29460.,
      31360., 29620., 31520., 33476., 35488., 28232., 29920., 31656., 33440.,
      25564., 27008., 28492., 30016., 21552., 22720., 23920., 25152., 7856.,
      8640.,  9456.,  10304., 10396., 11424., 12492., 13600., 13640., 14944.,
      16296., 17696., 17652., 19264., 20932., 22656., 20740., 22464., 24244.,
      26080., 18408., 19936., 21512., 23136., 14860., 16160., 17500., 18880.,
      14192., 15296., 16432., 17600., 12388., 13424., 14500., 15616., 17601.,
      18900., 20249., 21648., 23526., 25128., 26790., 28512., 30243., 32188.,
      34203., 36288., 34271., 36356., 38511., 40736., 31518., 33352., 35246.,
      37200., 27221., 28764., 30357., 32000., 23412., 24688., 26004., 27360.,
      16808., 18080., 19400., 20768., 20594., 22208., 23882., 25616., 25340.,
      27344., 29420., 31568., 31142., 33584., 36110., 38720., 35870., 38480.,
      41174., 43952., 31564., 33872., 36252., 38704., 25402., 27360., 29378.,
      31456., 21448., 23072., 24744., 26464., 16508., 18000., 19548., 21152.,
      23791., 25700., 27679., 29728., 32266., 34648., 37114., 39664., 41981.,
      44828., 47773., 50816., 47937., 50980., 54121., 57360., 44914., 47608.,
      50386., 53248., 39739., 42028., 44387., 46816., 34412., 36304., 38252.,
      40256., 24060., 25680., 27356., 29088., 30479., 32548., 34687., 36896.,
      38218., 40792., 43450., 46192., 45277., 48348., 51517., 54784., 51233.,
      54500., 57865., 61328., 45490., 48376., 51346., 54400., 37467., 39916.,
      42435., 45024., 31212., 33232., 35308., 37440., 16392., 17824., 19304.,
      20832., 23546., 25360., 27234., 29168., 31820., 34064., 36380., 38768.,
      41246., 43904., 46646., 49472., 46838., 49664., 52574., 55568., 43484.,
      45968., 48524., 51152., 38114., 40208., 42362., 44576., 32744., 34464.,
      36232., 38048., 22148., 23408., 24708., 26048., 27289., 28868., 30497.,
      32176., 33366., 35304., 37302., 39360., 38347., 40620., 42963., 45376.,
      42791., 45204., 47687., 50240., 36558., 38664., 40830., 43056., 28557.,
      30316., 32125., 33984., 22868., 24304., 25780., 27296., 9712.,  10688.,
      11696., 12736., 14316., 15552., 16828., 18144., 19688., 21216., 22792.,
      24416., 25828., 27616., 29460., 31360., 29620., 31520., 33476., 35488.,
      28232., 29920., 31656., 33440., 25564., 27008., 28492., 30016., 21552.,
      22720., 23920., 25152.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    34.,
      56.,    82.,    112.,   58.,    88.,    122.,   160.,   82.,    120.,
      162.,   208.,   106.,   152.,   202.,   256.,   130.,   184.,   242.,
      304.,   125.,   156.,   189.,   224.,   38.,    80.,    126.,   176.,
      236.,   336.,   444.,   560.,   348.,   464.,   588.,   720.,   460.,
      592.,   732.,   880.,   572.,   720.,   876.,   1040.,  684.,   848.,
      1020.,  1200.,  796.,   976.,   1164.,  1360.,  590.,   688.,   790.,
      896.,   318.,   416.,   518.,   624.,   1020.,  1232.,  1452.,  1680.,
      1132.,  1360.,  1596.,  1840.,  1244.,  1488.,  1740.,  2000.,  1356.,
      1616.,  1884.,  2160.,  1468.,  1744.,  2028.,  2320.,  1580.,  1872.,
      2172.,  2480.,  1094.,  1248.,  1406.,  1568.,  598.,   752.,   910.,
      1072.,  1804.,  2128.,  2460.,  2800.,  1916.,  2256.,  2604.,  2960.,
      2028.,  2384.,  2748.,  3120.,  2140.,  2512.,  2892.,  3280.,  2252.,
      2640.,  3036.,  3440.,  2364.,  2768.,  3180.,  3600.,  1598.,  1808.,
      2022.,  2240.,  878.,   1088.,  1302.,  1520.,  2588.,  3024.,  3468.,
      3920.,  2700.,  3152.,  3612.,  4080.,  2812.,  3280.,  3756.,  4240.,
      2924.,  3408.,  3900.,  4400.,  3036.,  3536.,  4044.,  4560.,  3148.,
      3664.,  4188.,  4720.,  2102.,  2368.,  2638.,  2912.,  1158.,  1424.,
      1694.,  1968.,  3372.,  3920.,  4476.,  5040.,  3484.,  4048.,  4620.,
      5200.,  3596.,  4176.,  4764.,  5360.,  3708.,  4304.,  4908.,  5520.,
      3820.,  4432.,  5052.,  5680.,  3932.,  4560.,  5196.,  5840.,  2606.,
      2928.,  3254.,  3584.,  1438.,  1760.,  2086.,  2416.,  4156.,  4816.,
      5484.,  6160.,  4268.,  4944.,  5628.,  6320.,  4380.,  5072.,  5772.,
      6480.,  4492.,  5200.,  5916.,  6640.,  4604.,  5328.,  6060.,  6800.,
      4716.,  5456.,  6204.,  6960.,  3110.,  3488.,  3870.,  4256.,  1521.,
      1700.,  1881.,  2064.,  3754.,  4120.,  4490.,  4864.,  3842.,  4216.,
      4594.,  4976.,  3930.,  4312.,  4698.,  5088.,  4018.,  4408.,  4802.,
      5200.,  4106.,  4504.,  4906.,  5312.,  4194.,  4600.,  5010.,  5424.,
      2509.,  2716.,  2925.,  3136.,  17.,    36.,    57.,    80.,    106.,
      152.,   202.,   256.,   258.,   312.,   370.,   432.,   410.,   472.,
      538.,   608.,   562.,   632.,   706.,   784.,   714.,   792.,   874.,
      960.,   866.,   952.,   1042.,  1136.,  525.,   572.,   621.,   672.,
      518.,   592.,   670.,   752.,   1324.,  1488.,  1660.,  1840.,  1692.,
      1872.,  2060.,  2256.,  2060.,  2256.,  2460.,  2672.,  2428.,  2640.,
      2860.,  3088.,  2796.,  3024.,  3260.,  3504.,  3164.,  3408.,  3660.,
      3920.,  1838.,  1968.,  2102.,  2240.,  1694.,  1824.,  1958.,  2096.,
      3900.,  4176.,  4460.,  4752.,  4268.,  4560.,  4860.,  5168.,  4636.,
      4944.,  5260.,  5584.,  5004.,  5328.,  5660.,  6000.,  5372.,  5712.,
      6060.,  6416.,  5740.,  6096.,  6460.,  6832.,  3238.,  3424.,  3614.,
      3808.,  2870.,  3056.,  3246.,  3440.,  6476.,  6864.,  7260.,  7664.,
      6844.,  7248.,  7660.,  8080.,  7212.,  7632.,  8060.,  8496.,  7580.,
      8016.,  8460.,  8912.,  7948.,  8400.,  8860.,  9328.,  8316.,  8784.,
      9260.,  9744.,  4638.,  4880.,  5126.,  5376.,  4046.,  4288.,  4534.,
      4784.,  9052.,  9552.,  10060., 10576., 9420.,  9936.,  10460., 10992.,
      9788.,  10320., 10860., 11408., 10156., 10704., 11260., 11824., 10524.,
      11088., 11660., 12240., 10892., 11472., 12060., 12656., 6038.,  6336.,
      6638.,  6944.,  5222.,  5520.,  5822.,  6128.,  11628., 12240., 12860.,
      13488., 11996., 12624., 13260., 13904., 12364., 13008., 13660., 14320.,
      12732., 13392., 14060., 14736., 13100., 13776., 14460., 15152., 13468.,
      14160., 14860., 15568., 7438.,  7792.,  8150.,  8512.,  6398.,  6752.,
      7110.,  7472.,  14204., 14928., 15660., 16400., 14572., 15312., 16060.,
      16816., 14940., 15696., 16460., 17232., 15308., 16080., 16860., 17648.,
      15676., 16464., 17260., 18064., 16044., 16848., 17660., 18480., 8838.,
      9248.,  9662.,  10080., 4225.,  4420.,  4617.,  4816.,  9226.,  9624.,
      10026., 10432., 9442.,  9848.,  10258., 10672., 9658.,  10072., 10490.,
      10912., 9874.,  10296., 10722., 11152., 10090., 10520., 10954., 11392.,
      10306., 10744., 11186., 11632., 5597.,  5820.,  6045.,  6272.,  33.,
      68.,    105.,   144.,   202.,   280.,   362.,   448.,   482.,   568.,
      658.,   752.,   762.,   856.,   954.,   1056.,  1042.,  1144.,  1250.,
      1360.,  1322.,  1432.,  1546.,  1664.,  1602.,  1720.,  1842.,  1968.,
      925.,   988.,   1053.,  1120.,  998.,   1104.,  1214.,  1328.,  2412.,
      2640.,  2876.,  3120.,  3036.,  3280.,  3532.,  3792.,  3660.,  3920.,
      4188.,  4464.,  4284.,  4560.,  4844.,  5136.,  4908.,  5200.,  5500.,
      5808.,  5532.,  5840.,  6156.,  6480.,  3086.,  3248.,  3414.,  3584.,
      3070.,  3232.,  3398.,  3568.,  6780.,  7120.,  7468.,  7824.,  7404.,
      7760.,  8124.,  8496.,  8028.,  8400.,  8780.,  9168.,  8652.,  9040.,
      9436.,  9840.,  9276.,  9680.,  10092., 10512., 9900.,  10320., 10748.,
      11184., 5382.,  5600.,  5822.,  6048.,  5142.,  5360.,  5582.,  5808.,
      11148., 11600., 12060., 12528., 11772., 12240., 12716., 13200., 12396.,
      12880., 13372., 13872., 13020., 13520., 14028., 14544., 13644., 14160.,
      14684., 15216., 14268., 14800., 15340., 15888., 7678.,  7952.,  8230.,
      8512.,  7214.,  7488.,  7766.,  8048.,  15516., 16080., 16652., 17232.,
      16140., 16720., 17308., 17904., 16764., 17360., 17964., 18576., 17388.,
      18000., 18620., 19248., 18012., 18640., 19276., 19920., 18636., 19280.,
      19932., 20592., 9974.,  10304., 10638., 10976., 9286.,  9616.,  9950.,
      10288., 19884., 20560., 21244., 21936., 20508., 21200., 21900., 22608.,
      21132., 21840., 22556., 23280., 21756., 22480., 23212., 23952., 22380.,
      23120., 23868., 24624., 23004., 23760., 24524., 25296., 12270., 12656.,
      13046., 13440., 11358., 11744., 12134., 12528., 24252., 25040., 25836.,
      26640., 24876., 25680., 26492., 27312., 25500., 26320., 27148., 27984.,
      26124., 26960., 27804., 28656., 26748., 27600., 28460., 29328., 27372.,
      28240., 29116., 30000., 14566., 15008., 15454., 15904., 6929.,  7140.,
      7353.,  7568.,  14698., 15128., 15562., 16000., 15042., 15480., 15922.,
      16368., 15386., 15832., 16282., 16736., 15730., 16184., 16642., 17104.,
      16074., 16536., 17002., 17472., 16418., 16888., 17362., 17840., 8685.,
      8924.,  9165.,  9408.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 7032.,
      9560.,  12472., 15768., 8924.,  11980., 15484., 19436., 11516., 14956.,
      18844., 23180., 10488., 13528., 16952., 20760., 8596.,  11108., 13940.,
      17092., 5840.,  7696.,  9808.,  12176., 6660.,  8980.,  11620., 14580.,
      7597.,  10209., 13221., 16633., 8934.,  12030., 15606., 19662., 10799.,
      14571., 18903., 23795., 13079., 17331., 22143., 27515., 13174., 16974.,
      21254., 26014., 11333., 14489., 18045., 22001., 7428.,  9748.,  12388.,
      15348., 8248.,  11032., 14200., 17752., 8494.,  11686., 15358., 19510.,
      11012., 14740., 19044., 23924., 13594., 18114., 23306., 29170., 16202.,
      21298., 27066., 33506., 14404., 18900., 23972., 29620., 13406., 17174.,
      21422., 26150., 9272.,  12056., 15224., 18776., 10092., 13340., 17036.,
      21180., 10135., 13875., 18175., 23035., 12242., 16666., 21762., 27530.,
      16285., 21585., 27669., 34537., 19861., 25833., 32589., 40129., 17346.,
      22602., 28530., 35130., 14303., 18651., 23559., 29027., 10860., 14108.,
      17804., 21948., 10092., 13340., 17036., 21180., 10135., 13875., 18175.,
      23035., 12242., 16666., 21762., 27530., 16285., 21585., 27669., 34537.,
      19861., 25833., 32589., 40129., 17346., 22602., 28530., 35130., 14303.,
      18651., 23559., 29027., 10860., 14108., 17804., 21948., 9272.,  12056.,
      15224., 18776., 8542.,  11798., 15534., 19750., 10340., 14196., 18628.,
      23636., 14410., 18994., 24250., 30178., 18298., 23458., 29290., 35794.,
      14660., 19156., 24228., 29876., 11566., 15270., 19454., 24118., 9272.,
      12056., 15224., 18776., 7684.,  10004., 12644., 15604., 7645.,  10321.,
      13397., 16873., 8262.,  11486., 15190., 19374., 11615., 15451., 19847.,
      24803., 15175., 19491., 24367., 29803., 13430., 17230., 21510., 26270.,
      9493.,  12585., 16077., 19969., 7428.,  9748.,  12388., 15348., 5840.,
      7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 7032.,  9560.,
      12472., 15768., 8924.,  11980., 15484., 19436., 11516., 14956., 18844.,
      23180., 10488., 13528., 16952., 20760., 8596.,  11108., 13940., 17092.,
      5840.,  7696.,  9808.,  12176., 5840.,  7696.,  9808.,  12176., 6004.,
      8132.,  10580., 13348., 7032.,  9560.,  12472., 15768., 8924.,  11980.,
      15484., 19436., 11516., 14956., 18844., 23180., 10488., 13528., 16952.,
      20760., 8596.,  11108., 13940., 17092., 5840.,  7696.,  9808.,  12176.,
      6660.,  8980.,  11620., 14580., 7597.,  10209., 13221., 16633., 8934.,
      12030., 15606., 19662., 10799., 14571., 18903., 23795., 13079., 17331.,
      22143., 27515., 13174., 16974., 21254., 26014., 11333., 14489., 18045.,
      22001., 7428.,  9748.,  12388., 15348., 8248.,  11032., 14200., 17752.,
      8494.,  11686., 15358., 19510., 11012., 14740., 19044., 23924., 13594.,
      18114., 23306., 29170., 16202., 21298., 27066., 33506., 14404., 18900.,
      23972., 29620., 13406., 17174., 21422., 26150., 9272.,  12056., 15224.,
      18776., 10092., 13340., 17036., 21180., 10135., 13875., 18175., 23035.,
      12242., 16666., 21762., 27530., 16285., 21585., 27669., 34537., 19861.,
      25833., 32589., 40129., 17346., 22602., 28530., 35130., 14303., 18651.,
      23559., 29027., 10860., 14108., 17804., 21948., 10092., 13340., 17036.,
      21180., 10135., 13875., 18175., 23035., 12242., 16666., 21762., 27530.,
      16285., 21585., 27669., 34537., 19861., 25833., 32589., 40129., 17346.,
      22602., 28530., 35130., 14303., 18651., 23559., 29027., 10860., 14108.,
      17804., 21948., 9272.,  12056., 15224., 18776., 8542.,  11798., 15534.,
      19750., 10340., 14196., 18628., 23636., 14410., 18994., 24250., 30178.,
      18298., 23458., 29290., 35794., 14660., 19156., 24228., 29876., 11566.,
      15270., 19454., 24118., 9272.,  12056., 15224., 18776., 7684.,  10004.,
      12644., 15604., 7645.,  10321., 13397., 16873., 8262.,  11486., 15190.,
      19374., 11615., 15451., 19847., 24803., 15175., 19491., 24367., 29803.,
      13430., 17230., 21510., 26270., 9493.,  12585., 16077., 19969., 7428.,
      9748.,  12388., 15348., 5840.,  7696.,  9808.,  12176., 6004.,  8132.,
      10580., 13348., 7032.,  9560.,  12472., 15768., 8924.,  11980., 15484.,
      19436., 11516., 14956., 18844., 23180., 10488., 13528., 16952., 20760.,
      8596.,  11108., 13940., 17092., 5840.,  7696.,  9808.,  12176., 5840.,
      7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 7032.,  9560.,
      12472., 15768., 8924.,  11980., 15484., 19436., 11516., 14956., 18844.,
      23180., 10488., 13528., 16952., 20760., 8596.,  11108., 13940., 17092.,
      5840.,  7696.,  9808.,  12176., 6660.,  8980.,  11620., 14580., 7597.,
      10209., 13221., 16633., 8934.,  12030., 15606., 19662., 10799., 14571.,
      18903., 23795., 13079., 17331., 22143., 27515., 13174., 16974., 21254.,
      26014., 11333., 14489., 18045., 22001., 7428.,  9748.,  12388., 15348.,
      8248.,  11032., 14200., 17752., 8494.,  11686., 15358., 19510., 11012.,
      14740., 19044., 23924., 13594., 18114., 23306., 29170., 16202., 21298.,
      27066., 33506., 14404., 18900., 23972., 29620., 13406., 17174., 21422.,
      26150., 9272.,  12056., 15224., 18776., 10092., 13340., 17036., 21180.,
      10135., 13875., 18175., 23035., 12242., 16666., 21762., 27530., 16285.,
      21585., 27669., 34537., 19861., 25833., 32589., 40129., 17346., 22602.,
      28530., 35130., 14303., 18651., 23559., 29027., 10860., 14108., 17804.,
      21948., 10092., 13340., 17036., 21180., 10135., 13875., 18175., 23035.,
      12242., 16666., 21762., 27530., 16285., 21585., 27669., 34537., 19861.,
      25833., 32589., 40129., 17346., 22602., 28530., 35130., 14303., 18651.,
      23559., 29027., 10860., 14108., 17804., 21948., 9272.,  12056., 15224.,
      18776., 8542.,  11798., 15534., 19750., 10340., 14196., 18628., 23636.,
      14410., 18994., 24250., 30178., 18298., 23458., 29290., 35794., 14660.,
      19156., 24228., 29876., 11566., 15270., 19454., 24118., 9272.,  12056.,
      15224., 18776., 7684.,  10004., 12644., 15604., 7645.,  10321., 13397.,
      16873., 8262.,  11486., 15190., 19374., 11615., 15451., 19847., 24803.,
      15175., 19491., 24367., 29803., 13430., 17230., 21510., 26270., 9493.,
      12585., 16077., 19969., 7428.,  9748.,  12388., 15348., 5840.,  7696.,
      9808.,  12176., 6004.,  8132.,  10580., 13348., 7032.,  9560.,  12472.,
      15768., 8924.,  11980., 15484., 19436., 11516., 14956., 18844., 23180.,
      10488., 13528., 16952., 20760., 8596.,  11108., 13940., 17092., 5840.,
      7696.,  9808.,  12176.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   234.,
      402.,   602.,   834.,   410.,   642.,   906.,   1202.,  586.,   882.,
      1210.,  1570.,  762.,   1122.,  1514.,  1938.,  938.,   1362.,  1818.,
      2306.,  941.,   1185.,  1445.,  1721.,  226.,   554.,   914.,   1306.,
      1700.,  2484.,  3332.,  4244.,  2564.,  3476.,  4452.,  5492.,  3428.,
      4468.,  5572.,  6740.,  4292.,  5460.,  6692.,  7988.,  5156.,  6452.,
      7812.,  9236.,  6020.,  7444.,  8932.,  10484., 4530.,  5306.,  6114.,
      6954.,  2354.,  3130.,  3938.,  4778.,  7748.,  9428.,  11172., 12980.,
      8228.,  9524.,  10884., 12308., 6660.,  7572.,  8548.,  9588.,  7524.,
      8564.,  9668.,  10836., 8388.,  9556.,  10788., 12084., 9252.,  10548.,
      11908., 13332., 6018.,  6730.,  7474.,  8250.,  4098.,  4810.,  5554.,
      6330.,  10980., 12532., 14148., 15828., 7364.,  8532.,  9764.,  11060.,
      1700.,  2484.,  3332.,  4244.,  2564.,  3476.,  4452.,  5492.,  3428.,
      4468.,  5572.,  6740.,  4292.,  5460.,  6692.,  7988.,  3410.,  4058.,
      4738.,  5450.,  1746.,  2394.,  3074.,  3786.,  6020.,  7444.,  8932.,
      10484., 6884.,  8436.,  10052., 11732., 7748.,  9428.,  11172., 12980.,
      8228.,  9524.,  10884., 12308., 6660.,  7572.,  8548.,  9588.,  7524.,
      8564.,  9668.,  10836., 4898.,  5482.,  6098.,  6746.,  3490.,  4074.,
      4690.,  5338.,  9252.,  10548., 11908., 13332., 10116., 11540., 13028.,
      14580., 10980., 12532., 14148., 15828., 7364.,  8532.,  9764.,  11060.,
      1700.,  2484.,  3332.,  4244.,  2564.,  3476.,  4452.,  5492.,  2290.,
      2810.,  3362.,  3946.,  1138.,  1658.,  2210.,  2794.,  4292.,  5460.,
      6692.,  7988.,  5156.,  6452.,  7812.,  9236.,  6020.,  7444.,  8932.,
      10484., 6884.,  8436.,  10052., 11732., 7748.,  9428.,  11172., 12980.,
      8228.,  9524.,  10884., 12308., 3778.,  4234.,  4722.,  5242.,  2853.,
      3257.,  3677.,  4113.,  7290.,  8162.,  9066.,  10002., 7978.,  8914.,
      9882.,  10882., 8666.,  9666.,  10698., 11762., 9354.,  10418., 11514.,
      12642., 10042., 11170., 12330., 13522., 6250.,  6930.,  7642.,  8386.,
      77.,    193.,   325.,   473.,   101.,   249.,   413.,   593.,   762.,
      1122.,  1514.,  1938.,  1962.,  2386.,  2842.,  3330.,  3162.,  3650.,
      4170.,  4722.,  4362.,  4914.,  5498.,  6114.,  5562.,  6178.,  6826.,
      7506.,  6762.,  7442.,  8154.,  8898.,  4109.,  4481.,  4869.,  5273.,
      4002.,  4586.,  5202.,  5850.,  10276., 11572., 12932., 14356., 13188.,
      14612., 16100., 17652., 16100., 17652., 19268., 20948., 19012., 20692.,
      22436., 24244., 21924., 23732., 25604., 27540., 24836., 26772., 28772.,
      30836., 14450., 15482., 16546., 17642., 13298., 14330., 15394., 16490.,
      30660., 32852., 35108., 37428., 24996., 26804., 28676., 30612., 17284.,
      18708., 20196., 21748., 20196., 21748., 23364., 25044., 23108., 24788.,
      26532., 28340., 26020., 27828., 29700., 31636., 14914., 15882., 16882.,
      17914., 14018., 14986., 15986., 17018., 31844., 33908., 36036., 38228.,
      22084., 23764., 25508., 27316., 10276., 11572., 12932., 14356., 13188.,
      14612., 16100., 17652., 16100., 17652., 19268., 20948., 19012., 20692.,
      22436., 24244., 11282., 12186., 13122., 14090., 10642., 11546., 12482.,
      13450., 24836., 26772., 28772., 30836., 27748., 29812., 31940., 34132.,
      30660., 32852., 35108., 37428., 24996., 26804., 28676., 30612., 17284.,
      18708., 20196., 21748., 20196., 21748., 23364., 25044., 11746., 12586.,
      13458., 14362., 11362., 12202., 13074., 13978., 26020., 27828., 29700.,
      31636., 28932., 30868., 32868., 34932., 31844., 33908., 36036., 38228.,
      22084., 23764., 25508., 27316., 10276., 11572., 12932., 14356., 13188.,
      14612., 16100., 17652., 8114.,  8890.,  9698.,  10538., 7986.,  8762.,
      9570.,  10410., 19012., 20692., 22436., 24244., 21924., 23732., 25604.,
      27540., 24836., 26772., 28772., 30836., 27748., 29812., 31940., 34132.,
      30660., 32852., 35108., 37428., 24996., 26804., 28676., 30612., 8578.,
      9290.,  10034., 10810., 8069.,  8601.,  9149.,  9713.,  18234., 19362.,
      20522., 21714., 19946., 21138., 22362., 23618., 21658., 22914., 24202.,
      25522., 23370., 24690., 26042., 27426., 25082., 26466., 27882., 29330.,
      14122., 15058., 16026., 17026., 173.,   417.,   677.,   953.,   197.,
      473.,   765.,   1073.,  1466.,  2082.,  2730.,  3410.,  3690.,  4370.,
      5082.,  5826.,  5914.,  6658.,  7434.,  8242.,  8138.,  8946.,  9786.,
      10658., 10362., 11234., 12138., 13074., 12586., 13522., 14490., 15490.,
      7277.,  7777.,  8293.,  8825.,  7778.,  8618.,  9490.,  10394., 18852.,
      20660., 22532., 24468., 23812., 25748., 27748., 29812., 28772., 30836.,
      32964., 35156., 33732., 35924., 38180., 40500., 38692., 41012., 43396.,
      45844., 43652., 46100., 48612., 51188., 24370., 25658., 26978., 28330.,
      24242., 25530., 26850., 28202., 53572., 56276., 59044., 61876., 41764.,
      44084., 46468., 48916., 27908., 29844., 31844., 33908., 32868., 34932.,
      37060., 39252., 37828., 40020., 42276., 44596., 42788., 45108., 47492.,
      49940., 23810., 25034., 26290., 27578., 23938., 25162., 26418., 27706.,
      52708., 55284., 57924., 60628., 36804., 38996., 41252., 43572., 18852.,
      20660., 22532., 24468., 23812., 25748., 27748., 29812., 28772., 30836.,
      32964., 35156., 33732., 35924., 38180., 40500., 19154., 20314., 21506.,
      22730., 19538., 20698., 21890., 23114., 43652., 46100., 48612., 51188.,
      48612., 51188., 53828., 56532., 53572., 56276., 59044., 61876., 41764.,
      44084., 46468., 48916., 27908., 29844., 31844., 33908., 32868., 34932.,
      37060., 39252., 18594., 19690., 20818., 21978., 19234., 20330., 21458.,
      22618., 42788., 45108., 47492., 49940., 47748., 50196., 52708., 55284.,
      52708., 55284., 57924., 60628., 36804., 38996., 41252., 43572., 18852.,
      20660., 22532., 24468., 23812., 25748., 27748., 29812., 13938., 14970.,
      16034., 17130., 14834., 15866., 16930., 18026., 33732., 35924., 38180.,
      40500., 38692., 41012., 43396., 45844., 43652., 46100., 48612., 51188.,
      48612., 51188., 53828., 56532., 53572., 56276., 59044., 61876., 41764.,
      44084., 46468., 48916., 13378., 14346., 15346., 16378., 13285., 13945.,
      14621., 15313., 29178., 30562., 31978., 33426., 31914., 33362., 34842.,
      36354., 34650., 36162., 37706., 39282., 37386., 38962., 40570., 42210.,
      40122., 41762., 43434., 45138., 21994., 23186., 24410., 25666., 269.,
      641.,   1029.,  1433.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,
      16920., 480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920.,
      750.,   4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,
      6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,
      13380., 25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,
      16920., 720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380.,
      1080.,  6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,
      7308.,  18732., 35532., 1080.,  6264.,  16056., 30456., 900.,   5220.,
      13380., 25380., 720.,   4176.,  10704., 20304., 840.,   4872.,  12488.,
      23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732., 35532.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,
      7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610.,
      29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,
      6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 720.,   4176.,
      10704., 20304., 900.,   5220.,  13380., 25380., 1080.,  6264.,  16056.,
      30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532.,
      1080.,  6264.,  16056., 30456., 900.,   5220.,  13380., 25380., 720.,
      4176.,  10704., 20304., 600.,   3480.,  8920.,  16920., 750.,   4350.,
      11150., 21150., 900.,   5220.,  13380., 25380., 1050.,  6090.,  15610.,
      29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380., 25380.,
      750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920., 480.,
      2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,   4176.,
      10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 480.,   2784.,  7136.,  13536., 600.,
      3480.,  8920.,  16920., 720.,   4176.,  10704., 20304., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 900.,   5220.,  13380., 25380., 750.,   4350.,  11150.,
      21150., 600.,   3480.,  8920.,  16920., 720.,   4176.,  10704., 20304.,
      900.,   5220.,  13380., 25380., 1080.,  6264.,  16056., 30456., 1260.,
      7308.,  18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,
      16056., 30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704.,
      20304., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610.,
      1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,
      8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,  6090.,
      15610., 29610., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732., 35532.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,
      7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,
      12488., 23688., 720.,   4176.,  10704., 20304., 900.,   5220.,  13380.,
      25380., 1080.,  6264.,  16056., 30456., 1260.,  7308.,  18732., 35532.,
      1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056., 30456., 900.,
      5220.,  13380., 25380., 720.,   4176.,  10704., 20304., 600.,   3480.,
      8920.,  16920., 750.,   4350.,  11150., 21150., 900.,   5220.,  13380.,
      25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610., 29610.,
      900.,   5220.,  13380., 25380., 750.,   4350.,  11150., 21150., 600.,
      3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536., 600.,   3480.,
      8920.,  16920., 720.,   4176.,  10704., 20304., 840.,   4872.,  12488.,
      23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704., 20304.,
      600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536., 480.,
      2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,   4176.,
      10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 750.,
      4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1080.,  6264.,  16056., 30456., 900.,   5220.,  13380.,
      25380., 720.,   4176.,  10704., 20304., 840.,   4872.,  12488., 23688.,
      1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732., 35532., 1470.,
      8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,
      18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488.,
      23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610.,
      1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,
      8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,  6090.,
      15610., 29610., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 900.,   5220.,  13380., 25380., 1080.,  6264.,  16056., 30456.,
      1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,
      6264.,  16056., 30456., 900.,   5220.,  13380., 25380., 720.,   4176.,
      10704., 20304., 600.,   3480.,  8920.,  16920., 750.,   4350.,  11150.,
      21150., 900.,   5220.,  13380., 25380., 1050.,  6090.,  15610., 29610.,
      1050.,  6090.,  15610., 29610., 900.,   5220.,  13380., 25380., 750.,
      4350.,  11150., 21150., 600.,   3480.,  8920.,  16920., 480.,   2784.,
      7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,   4176.,  10704.,
      20304., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488., 23688.,
      720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920., 480.,
      2784.,  7136.,  13536.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1724.,
      3036.,  4604.,  6428.,  3068.,  4892.,  6972.,  9308.,  3772.,  5084.,
      6652.,  8476.,  380.,   1180.,  2236.,  3548.,  1724.,  3036.,  4604.,
      6428.,  2558.,  3470.,  4510.,  5678.,  860.,   2428.,  4252.,  6332.,
      6840.,  9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 15672.,
      19832., 24504., 29688., 13624., 17784., 22456., 27640., 6840.,  9976.,
      13624., 17784., 8888.,  12024., 15672., 19832., 8348.,  10428., 12764.,
      15356., 7324.,  9404.,  11740., 14332., 13624., 17784., 22456., 27640.,
      6840.,  9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 15672.,
      19832., 24504., 29688., 13624., 17784., 22456., 27640., 6840.,  9976.,
      13624., 17784., 3932.,  5500.,  7324.,  9404.,  4956.,  6524.,  8348.,
      10428., 15672., 19832., 24504., 29688., 13624., 17784., 22456., 27640.,
      6840.,  9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 15672.,
      19832., 24504., 29688., 13624., 17784., 22456., 27640., 4252.,  6332.,
      8668.,  11260., 2588.,  3644.,  4956.,  6524.,  8888.,  12024., 15672.,
      19832., 15672., 19832., 24504., 29688., 13624., 17784., 22456., 27640.,
      6840.,  9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 15672.,
      19832., 24504., 29688., 12764., 15356., 18204., 21308., 860.,   2428.,
      4252.,  6332.,  6840.,  9976.,  13624., 17784., 8888.,  12024., 15672.,
      19832., 15672., 19832., 24504., 29688., 13624., 17784., 22456., 27640.,
      6840.,  9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 8348.,
      10428., 12764., 15356., 7324.,  9404.,  11740., 14332., 13624., 17784.,
      22456., 27640., 6840.,  9976.,  13624., 17784., 8888.,  12024., 15672.,
      19832., 15672., 19832., 24504., 29688., 13624., 17784., 22456., 27640.,
      6840.,  9976.,  13624., 17784., 3932.,  5500.,  7324.,  9404.,  4766.,
      5934.,  7230.,  8654.,  13948., 16796., 19900., 23260., 10556., 12892.,
      15484., 18332., 3068.,  4892.,  6972.,  9308.,  8508.,  10844., 13436.,
      16284., 13948., 16796., 19900., 23260., 10556., 12892., 15484., 18332.,
      510.,   1422.,  2462.,  3630.,  30.,    174.,   446.,   846.,   380.,
      1180.,  2236.,  3548.,  1724.,  3036.,  4604.,  6428.,  3068.,  4892.,
      6972.,  9308.,  3772.,  5084.,  6652.,  8476.,  380.,   1180.,  2236.,
      3548.,  1724.,  3036.,  4604.,  6428.,  2558.,  3470.,  4510.,  5678.,
      860.,   2428.,  4252.,  6332.,  6840.,  9976.,  13624., 17784., 8888.,
      12024., 15672., 19832., 15672., 19832., 24504., 29688., 13624., 17784.,
      22456., 27640., 6840.,  9976.,  13624., 17784., 8888.,  12024., 15672.,
      19832., 8348.,  10428., 12764., 15356., 7324.,  9404.,  11740., 14332.,
      13624., 17784., 22456., 27640., 6840.,  9976.,  13624., 17784., 8888.,
      12024., 15672., 19832., 15672., 19832., 24504., 29688., 13624., 17784.,
      22456., 27640., 6840.,  9976.,  13624., 17784., 3932.,  5500.,  7324.,
      9404.,  4956.,  6524.,  8348.,  10428., 15672., 19832., 24504., 29688.,
      13624., 17784., 22456., 27640., 6840.,  9976.,  13624., 17784., 8888.,
      12024., 15672., 19832., 15672., 19832., 24504., 29688., 13624., 17784.,
      22456., 27640., 4252.,  6332.,  8668.,  11260., 2588.,  3644.,  4956.,
      6524.,  8888.,  12024., 15672., 19832., 15672., 19832., 24504., 29688.,
      13624., 17784., 22456., 27640., 6840.,  9976.,  13624., 17784., 8888.,
      12024., 15672., 19832., 15672., 19832., 24504., 29688., 12764., 15356.,
      18204., 21308., 860.,   2428.,  4252.,  6332.,  6840.,  9976.,  13624.,
      17784., 8888.,  12024., 15672., 19832., 15672., 19832., 24504., 29688.,
      13624., 17784., 22456., 27640., 6840.,  9976.,  13624., 17784., 8888.,
      12024., 15672., 19832., 8348.,  10428., 12764., 15356., 7324.,  9404.,
      11740., 14332., 13624., 17784., 22456., 27640., 6840.,  9976.,  13624.,
      17784., 8888.,  12024., 15672., 19832., 15672., 19832., 24504., 29688.,
      13624., 17784., 22456., 27640., 6840.,  9976.,  13624., 17784., 3932.,
      5500.,  7324.,  9404.,  4766.,  5934.,  7230.,  8654.,  13948., 16796.,
      19900., 23260., 10556., 12892., 15484., 18332., 3068.,  4892.,  6972.,
      9308.,  8508.,  10844., 13436., 16284., 13948., 16796., 19900., 23260.,
      10556., 12892., 15484., 18332., 510.,   1422.,  2462.,  3630.,  30.,
      174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1724.,  3036.,
      4604.,  6428.,  3068.,  4892.,  6972.,  9308.,  3772.,  5084.,  6652.,
      8476.,  380.,   1180.,  2236.,  3548.,  1724.,  3036.,  4604.,  6428.,
      2558.,  3470.,  4510.,  5678.,  860.,   2428.,  4252.,  6332.,  6840.,
      9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 15672., 19832.,
      24504., 29688., 13624., 17784., 22456., 27640., 6840.,  9976.,  13624.,
      17784., 8888.,  12024., 15672., 19832., 8348.,  10428., 12764., 15356.,
      7324.,  9404.,  11740., 14332., 13624., 17784., 22456., 27640., 6840.,
      9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 15672., 19832.,
      24504., 29688., 13624., 17784., 22456., 27640., 6840.,  9976.,  13624.,
      17784., 3932.,  5500.,  7324.,  9404.,  4956.,  6524.,  8348.,  10428.,
      15672., 19832., 24504., 29688., 13624., 17784., 22456., 27640., 6840.,
      9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 15672., 19832.,
      24504., 29688., 13624., 17784., 22456., 27640., 4252.,  6332.,  8668.,
      11260., 2588.,  3644.,  4956.,  6524.,  8888.,  12024., 15672., 19832.,
      15672., 19832., 24504., 29688., 13624., 17784., 22456., 27640., 6840.,
      9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 15672., 19832.,
      24504., 29688., 12764., 15356., 18204., 21308., 860.,   2428.,  4252.,
      6332.,  6840.,  9976.,  13624., 17784., 8888.,  12024., 15672., 19832.,
      15672., 19832., 24504., 29688., 13624., 17784., 22456., 27640., 6840.,
      9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 8348.,  10428.,
      12764., 15356., 7324.,  9404.,  11740., 14332., 13624., 17784., 22456.,
      27640., 6840.,  9976.,  13624., 17784., 8888.,  12024., 15672., 19832.,
      15672., 19832., 24504., 29688., 13624., 17784., 22456., 27640., 6840.,
      9976.,  13624., 17784., 3932.,  5500.,  7324.,  9404.,  4766.,  5934.,
      7230.,  8654.,  13948., 16796., 19900., 23260., 10556., 12892., 15484.,
      18332., 3068.,  4892.,  6972.,  9308.,  8508.,  10844., 13436., 16284.,
      13948., 16796., 19900., 23260., 10556., 12892., 15484., 18332., 510.,
      1422.,  2462.,  3630.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2048.,  2840.,  3752.,  4788.,  5194.,  5600.,  5240.,  4740.,  4096.,
      4220.,  5725.,  7420.,  9310.,  9940.,  10570., 9730.,  8675.,  7400.,
      7560.,  10110., 12936., 16044., 16947., 17850., 16248., 14340., 12120.,
      12320., 16310., 20678., 25431., 26656., 27881., 25172., 22050., 18508.,
      17858., 23230., 28979., 35112., 35889., 37114., 33083., 28640., 23778.,
      21696., 27883., 34432., 41349., 41650., 42847., 37932., 32625., 26920.,
      23358., 29776., 36525., 43610., 43386., 44506., 39241., 33620., 27638.,
      22592., 28594., 34880., 41454., 40656., 41650., 36632., 31310., 25680.,
      3712.,  5000.,  6440.,  8036.,  8442.,  8848.,  8120.,  7220.,  6144.,
      6860.,  9125.,  11620., 14350., 14980., 15610., 14170., 12475., 10520.,
      11400., 15030., 18984., 23268., 24171., 25074., 22584., 19740., 16536.,
      17392., 22646., 28270., 34271., 35112., 35889., 32012., 27730., 23036.,
      21778., 27902., 34395., 41264., 41657., 41986., 37235., 32080., 26514.,
      24192., 30643., 37440., 44589., 44506., 44359., 39180., 33625., 27688.,
      24206., 30344., 36789., 43546., 42938., 42266., 37249., 31900., 26214.,
      21568., 26690., 32064., 37694., 36512., 35266., 31064., 26590., 21840.,
      5376.,  7160.,  9128.,  11284., 11690., 12096., 11000., 9700.,  8192.,
      9500.,  12525., 15820., 19390., 20020., 20650., 18610., 16275., 13640.,
      15176., 19758., 24648., 29852., 30435., 30954., 27192., 23540., 19544.,
      21696., 27702., 34070., 40807., 41264., 41657., 36164., 31170., 25772.,
      24738., 31166., 37955., 45112., 45121., 45066., 38699., 33280., 27458.,
      25728., 31995., 38592., 45525., 45058., 44527., 37740., 32385., 26664.,
      24094., 29504., 35197., 41178., 40186., 39130., 32569., 27940., 22998.,
      19584., 23378., 27392., 31630., 30064., 28434., 22808., 19630., 16208.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    10.,   16.,   22.,   28.,   34.,   32.,   21.,   12.,
      38.,   80.,   101.,  122.,  143.,  164.,  138.,  84.,   47.,   122.,
      227.,  248.,  269.,  290.,  311.,  250.,  147.,  82.,   206.,  374.,
      395.,  416.,  437.,  458.,  362.,  210.,  117.,  290.,  521.,  542.,
      563.,  584.,  605.,  474.,  273.,  152.,  374.,  668.,  689.,  710.,
      731.,  752.,  586.,  336.,  187.,  458.,  815.,  836.,  857.,  878.,
      899.,  698.,  399.,  172.,  391.,  658.,  673.,  688.,  703.,  718.,
      533.,  294.,  7.,    22.,   46.,   70.,   94.,   118.,  142.,  110.,
      63.,   66.,   158.,  278.,  335.,  392.,  449.,  506.,  378.,  210.,
      185.,  410.,  677.,  734.,  791.,  848.,  905.,  658.,  357.,  304.,
      662.,  1076., 1133., 1190., 1247., 1304., 938.,  504.,  423.,  914.,
      1475., 1532., 1589., 1646., 1703., 1218., 651.,  542.,  1166., 1874.,
      1931., 1988., 2045., 2102., 1498., 798.,  661.,  1418., 2273., 2330.,
      2387., 2444., 2501., 1778., 945.,  430.,  913.,  1450., 1483., 1516.,
      1549., 1582., 1115., 588.,  13.,   40.,   82.,   124.,  166.,  208.,
      250.,  188.,  105.,  120.,  278.,  476.,  569.,  662.,  755.,  848.,
      618.,  336.,  323.,  698.,  1127., 1220., 1313., 1406., 1499., 1066.,
      567.,  526.,  1118., 1778., 1871., 1964., 2057., 2150., 1514., 798.,
      729.,  1538., 2429., 2522., 2615., 2708., 2801., 1962., 1029., 932.,
      1958., 3080., 3173., 3266., 3359., 3452., 2410., 1260., 1135., 2378.,
      3731., 3824., 3917., 4010., 4103., 2858., 1491., 688.,  1435., 2242.,
      2293., 2344., 2395., 2446., 1697., 882.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5808.,  7652.,  9832.,  12348., 11764., 10924., 10344., 9044.,  7344.,
      9196.,  12629., 15546., 18851., 19021., 18935., 15706., 11545., 7916.,
      12872., 15686., 17132., 19018., 19214., 19026., 15884., 12590., 10888.,
      13540., 17583., 21582., 26105., 26303., 26117., 21070., 16555., 12516.,
      17756., 20441., 24226., 27375., 26069., 25243., 22546., 19237., 15516.,
      13496., 16850., 20292., 23870., 23090., 23814., 19012., 14650., 11192.,
      14100., 16267., 17510., 17613., 17639., 18017., 14870., 11167., 9684.,
      9552.,  11756., 14296., 16596., 16108., 16996., 14360., 12348., 9680.,
      7344.,  10084., 13256., 15900., 16436., 16108., 13864., 10900., 8560.,
      11308., 13797., 16698., 18163., 17821., 17639., 15130., 11625., 8556.,
      12200., 15590., 19500., 23242., 23534., 23090., 18988., 13742., 10824.,
      18116., 20639., 23790., 26921., 27375., 26069., 22158., 19003., 15972.,
      14300., 17897., 22114., 26303., 26117., 25547., 21554., 16277., 13180.,
      17016., 20178., 23908., 25502., 24466., 25094., 22148., 18010., 14104.,
      12436., 15067., 18086., 21053., 21175., 21041., 17174., 12335., 10004.,
      12816., 13356., 14232., 15892., 15916., 15684., 13176., 11964., 10192.,
      5808.,  7652.,  9832.,  12348., 11764., 10924., 10344., 9044.,  7344.,
      9196.,  12629., 15546., 18851., 19021., 18935., 15706., 11545., 7916.,
      12872., 15686., 17132., 19018., 19214., 19026., 15884., 12590., 10888.,
      13540., 17583., 21582., 26105., 26303., 26117., 21070., 16555., 12516.,
      17756., 20441., 24226., 27375., 26069., 25243., 22546., 19237., 15516.,
      13496., 16850., 20292., 23870., 23090., 23814., 19012., 14650., 11192.,
      14100., 16267., 17510., 17613., 17639., 18017., 14870., 11167., 9684.,
      9552.,  11756., 14296., 16596., 16108., 16996., 14360., 12348., 9680.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,    59.,    101.,   143.,   185.,   227.,   222.,   149.,
      70.,   244.,   538.,   694.,   850.,   1006.,  1162.,  996.,   614.,
      322.,  860.,   1630.,  1786.,  1942.,  2098.,  2254.,  1836.,  1090.,
      574.,  1476.,  2722.,  2878.,  3034.,  3190.,  3346.,  2676.,  1566.,
      826.,  2092.,  3814.,  3970.,  4126.,  4282.,  4438.,  3516.,  2042.,
      1078., 2708.,  4906.,  5062.,  5218.,  5374.,  5530.,  4356.,  2518.,
      1330., 3324.,  5998.,  6154.,  6310.,  6466.,  6622.,  5196.,  2994.,
      1283., 2938.,  4973.,  5087.,  5201.,  5315.,  5429.,  4050.,  2243.,
      41.,   142.,   311.,   497.,   683.,   869.,   1055.,  822.,   473.,
      478.,  1156.,  2050.,  2494.,  2938.,  3382.,  3826.,  2868.,  1598.,
      1402., 3116.,  5158.,  5602.,  6046.,  6490.,  6934.,  5052.,  2746.,
      2326., 5076.,  8266.,  8710.,  9154.,  9598.,  10042., 7236.,  3894.,
      3250., 7036.,  11374., 11818., 12262., 12706., 13150., 9420.,  5042.,
      4174., 8996.,  14482., 14926., 15370., 15814., 16258., 11604., 6190.,
      5098., 10956., 17590., 18034., 18478., 18922., 19366., 13788., 7338.,
      3335., 7090.,  11273., 11531., 11789., 12047., 12305., 8682.,  4583.,
      77.,   262.,   563.,   893.,   1223.,  1553.,  1883.,  1422.,  797.,
      886.,  2068.,  3562.,  4294.,  5026.,  5758.,  6490.,  4740.,  2582.,
      2482., 5372.,  8686.,  9418.,  10150., 10882., 11614., 8268.,  4402.,
      4078., 8676.,  13810., 14542., 15274., 16006., 16738., 11796., 6222.,
      5674., 11980., 18934., 19666., 20398., 21130., 21862., 15324., 8042.,
      7270., 15284., 24058., 24790., 25522., 26254., 26986., 18852., 9862.,
      8866., 18588., 29182., 29914., 30646., 31378., 32110., 22380., 11682.,
      5387., 11242., 17573., 17975., 18377., 18779., 19181., 13314., 6923.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13536., 19288., 26064., 30024., 31848., 29256., 25040., 18520., 13536.,
      20280., 28110., 33204., 39978., 39266., 38234., 29172., 21246., 13944.,
      27728., 33604., 41368., 47116., 48028., 44524., 34584., 24932., 19280.,
      31528., 39738., 46076., 55086., 53590., 51774., 40700., 33354., 25192.,
      34120., 39666., 47372., 53590., 51774., 50278., 41612., 32642., 27016.,
      31440., 37684., 41592., 47644., 44524., 45820., 34232., 27156., 20112.,
      28952., 31798., 36004., 38626., 38234., 38162., 32036., 22630., 18136.,
      22816., 26424., 27728., 31080., 29256., 31848., 26896., 23480., 17248.,
      13536., 19288., 26064., 30024., 31848., 29256., 25040., 18520., 13536.,
      20280., 28110., 33204., 39978., 39266., 38234., 29172., 21246., 13944.,
      27728., 33604., 41368., 47116., 48028., 44524., 34584., 24932., 19280.,
      31528., 39738., 46076., 55086., 53590., 51774., 40700., 33354., 25192.,
      34120., 39666., 47372., 53590., 51774., 50278., 41612., 32642., 27016.,
      31440., 37684., 41592., 47644., 44524., 45820., 34232., 27156., 20112.,
      28952., 31798., 36004., 38626., 38234., 38162., 32036., 22630., 18136.,
      22816., 26424., 27728., 31080., 29256., 31848., 26896., 23480., 17248.,
      13536., 19288., 26064., 30024., 31848., 29256., 25040., 18520., 13536.,
      20280., 28110., 33204., 39978., 39266., 38234., 29172., 21246., 13944.,
      27728., 33604., 41368., 47116., 48028., 44524., 34584., 24932., 19280.,
      31528., 39738., 46076., 55086., 53590., 51774., 40700., 33354., 25192.,
      34120., 39666., 47372., 53590., 51774., 50278., 41612., 32642., 27016.,
      31440., 37684., 41592., 47644., 44524., 45820., 34232., 27156., 20112.,
      28952., 31798., 36004., 38626., 38234., 38162., 32036., 22630., 18136.,
      22816., 26424., 27728., 31080., 29256., 31848., 26896., 23480., 17248.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   706.,   1018.,  1330.,  1642.,  1644.,  1118.,
      460.,   1720.,  3908.,  5108.,  6308.,  7508.,  8708.,  7544.,  4684.,
      2364.,  6424.,  11668., 11204., 9716.,  10916., 12116., 9688.,  5692.,
      3628.,  8824.,  12004., 8468.,  3908.,  5108.,  6308.,  5688.,  3628.,
      1820.,  5080.,  9908.,  11108., 11668., 11204., 9716.,  7832.,  4636.,
      3084.,  7480.,  13316., 14516., 12004., 8468.,  3908.,  3832.,  2572.,
      1276.,  3736.,  7508.,  8708.,  9908.,  11108., 11668., 8664.,  3580.,
      2470.,  5852.,  10210., 11098., 11986., 12874., 10050., 5820.,  230.,
      270.,   1004.,  2266.,  3730.,  5194.,  6658.,  8122.,  6348.,  3662.,
      3628.,  8824.,  15716., 19220., 22724., 26228., 29732., 22328., 12460.,
      10908., 24280., 33460., 29156., 23828., 27332., 30836., 22936., 12700.,
      11404., 25144., 31492., 24116., 15716., 19220., 22724., 17400., 9868.,
      8828.,  19864., 33236., 36740., 33460., 29156., 23828., 18008., 10108.,
      9324.,  20728., 34340., 37844., 31492., 24116., 15716., 12472., 7276.,
      6748.,  15448., 26228., 29732., 33236., 36740., 33460., 21912., 7516.,
      6550.,  14396., 23602., 25642., 27682., 29722., 21906., 12060., 470.,
      510.,   1868.,  4138.,  6754.,  9370.,  11986., 14602., 11052., 6206.,
      6796.,  15288., 25220., 28980., 32740., 36500., 40260., 24568., 13452.,
      19452., 34328., 38612., 28420., 17204., 20964., 24724., 9304.,  5756.,
      19180., 26488., 20004., 23124., 25220., 28980., 32740., 20664., 11372.,
      15836., 28888., 44020., 47780., 38612., 28420., 17204., 5400.,  3676.,
      15564., 21048., 28484., 32244., 20004., 23124., 25220., 16760., 9292.,
      12220., 23448., 36500., 40260., 44020., 47780., 38612., 16472., 1596.,
      10630., 12060., 14210., 15354., 16498., 17642., 2786.,  1660.,  70.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7280.,  8192.,  10180., 11360., 13480., 14880., 17132., 18768., 18380.,
      20008., 19500., 21120., 17768., 19168., 15492., 16656., 12656., 13568.,
      14396., 15600., 19361., 20852., 23850., 25584., 28715., 30712., 29565.,
      31568., 30287., 32296., 26450., 28168., 21901., 23308., 16620., 17696.,
      21448., 22816., 27214., 28920., 31692., 33696., 36634., 38960., 36770.,
      39116., 36778., 39144., 31340., 33376., 25086., 26768., 17992., 19296.,
      25860., 27520., 31927., 34008., 35958., 38424., 40605., 43484., 40223.,
      43136., 39713., 42660., 33374., 35920., 26051., 28168., 17716., 19376.,
      27476., 29192., 32801., 34936., 35190., 37708., 38191., 41120., 36081.,
      38980., 34675., 37608., 32134., 34668., 28613., 30720., 24084., 25736.,
      22072., 23680., 28646., 30636., 35428., 37760., 42762., 45460., 42858.,
      45512., 44554., 47228., 39348., 41648., 33238., 35140., 26200., 27680.,
      24476., 25848., 29995., 31680., 34706., 36660., 39845., 42088., 37855.,
      40040., 38361., 40552., 32594., 34468., 26063., 27600., 18748., 19928.,
      17296., 18304., 19204., 20424., 21464., 22912., 24092., 25784., 22316.,
      24000., 24060., 25800., 20600., 22112., 16580., 17848., 11984., 12992.,
      12656., 13568., 16900., 18080., 21608., 23072., 25836., 27536., 26316.,
      28008., 26668., 28352., 23720., 25184., 20228., 21456., 16176., 17152.,
      20028., 21296., 25457., 27028., 31402., 33296., 36027., 38200., 36109.,
      38288., 36063., 38248., 30994., 32872., 25181., 26732., 18604., 19808.,
      24136., 25632., 29710., 31576., 35916., 38176., 40026., 42640., 39394.,
      42028., 38634., 41288., 32748., 35040., 25982., 27888., 18312., 19808.,
      26244., 27968., 31367., 33496., 37174., 39736., 40045., 43004., 38191.,
      41120., 36081., 38980., 29918., 32432., 26899., 29000., 22900., 24560.,
      22036., 23752., 28593., 30712., 35830., 38380., 43327., 46272., 43777.,
      46692., 43971., 46856., 39302., 41804., 33685., 35776., 27092., 28744.,
      26488., 28032., 32358., 34252., 38820., 41088., 44554., 47156., 43114.,
      45672., 41418., 43932., 35892., 38064., 29526., 31332., 22296., 23712.,
      21468., 22712., 24123., 25632., 27218., 29012., 30773., 32872., 29615.,
      31720., 28329., 30440., 24658., 26500., 20319., 21872., 15292., 16536.,
      15696., 16768., 15108., 16392., 14872., 16384., 19100., 20856., 20652.,
      22400., 22076., 23816., 20216., 21728., 17796., 19064., 14800., 15808.,
      14448., 15360., 19140., 20320., 24296., 25760., 29932., 31696., 29644.,
      31400., 29228., 30976., 25960., 27488., 22148., 23440., 17776., 18816.,
      22076., 23408., 27073., 28724., 32618., 34608., 38731., 41080., 38045.,
      40400., 37231., 39592., 31826., 33864., 25645., 27340., 18668., 20000.,
      23176., 24736., 27470., 29368., 32332., 34592., 37786., 40432., 35810.,
      38412., 33578., 36136., 27372., 29536., 21182., 22992., 18248., 19680.,
      21572., 23296., 27927., 30040., 34934., 37464., 42621., 45596., 43327.,
      46272., 43777., 46692., 37854., 40336., 32739., 34824., 26676., 28336.,
      27476., 29192., 33473., 35576., 40118., 42636., 47439., 50400., 46353.,
      49284., 45011., 47912., 37382., 39852., 31461., 33536., 24596., 26248.,
      25400., 26880., 28774., 30572., 32676., 34816., 37130., 39636., 36394.,
      38920., 35530., 38076., 28212., 30384., 23638., 25476., 18264., 19744.,
      22684., 24056., 23435., 25088., 24658., 26612., 26373., 28648., 28543.,
      30824., 30585., 32872., 27730., 29668., 24495., 26128., 20540., 21848.,
      16272., 17408., 20484., 21832., 25048., 26624., 29980., 31800., 30764.,
      32576., 31420., 33224., 26744., 28256., 22724., 23992., 18128., 19136.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     6.,     16.,    19.,    40.,    37.,    64.,    55.,
      88.,    73.,    112.,   91.,    136.,   94.,    128.,   65.,    84.,
      22.,    48.,    92.,    152.,   218.,   320.,   290.,   404.,   362.,
      488.,   434.,   572.,   506.,   656.,   444.,   552.,   278.,   336.,
      134.,   188.,   372.,   488.,   722.,   908.,   794.,   992.,   866.,
      1076.,  938.,   1160.,  1010.,  1244.,  836.,   1000.,  502.,   588.,
      246.,   328.,   652.,   824.,   1226.,  1496.,  1298.,  1580.,  1370.,
      1664.,  1442.,  1748.,  1514.,  1832.,  1228.,  1448.,  726.,   840.,
      358.,   468.,   932.,   1160.,  1730.,  2084.,  1802.,  2168.,  1874.,
      2252.,  1946.,  2336.,  2018.,  2420.,  1620.,  1896.,  950.,   1092.,
      470.,   608.,   1212.,  1496.,  2234.,  2672.,  2306.,  2756.,  2378.,
      2840.,  2450.,  2924.,  2522.,  3008.,  2012.,  2344.,  1174.,  1344.,
      582.,   748.,   1492.,  1832.,  2738.,  3260.,  2810.,  3344.,  2882.,
      3428.,  2954.,  3512.,  3026.,  3596.,  2404.,  2792.,  1398.,  1596.,
      595.,   688.,   1374.,  1564.,  2341.,  2632.,  2395.,  2692.,  2449.,
      2752.,  2503.,  2812.,  2557.,  2872.,  1918.,  2132.,  1067.,  1176.,
      13.,    28.,    54.,    88.,    127.,   184.,   217.,   280.,   307.,
      376.,   397.,   472.,   487.,   568.,   382.,   440.,   221.,   252.,
      214.,   264.,   524.,   632.,   938.,   1112.,  1154.,  1340.,  1370.,
      1568.,  1586.,  1796.,  1802.,  2024.,  1356.,  1512.,  758.,   840.,
      662.,   740.,   1476.,  1640.,  2450.,  2708.,  2666.,  2936.,  2882.,
      3164.,  3098.,  3392.,  3314.,  3620.,  2420.,  2632.,  1318.,  1428.,
      1110.,  1216.,  2428.,  2648.,  3962.,  4304.,  4178.,  4532.,  4394.,
      4760.,  4610.,  4988.,  4826.,  5216.,  3484.,  3752.,  1878.,  2016.,
      1558.,  1692.,  3380.,  3656.,  5474.,  5900.,  5690.,  6128.,  5906.,
      6356.,  6122.,  6584.,  6338.,  6812.,  4548.,  4872.,  2438.,  2604.,
      2006.,  2168.,  4332.,  4664.,  6986.,  7496.,  7202.,  7724.,  7418.,
      7952.,  7634.,  8180.,  7850.,  8408.,  5612.,  5992.,  2998.,  3192.,
      2454.,  2644.,  5284.,  5672.,  8498.,  9092.,  8714.,  9320.,  8930.,
      9548.,  9146.,  9776.,  9362.,  10004., 6676.,  7112.,  3558.,  3780.,
      1615.,  1720.,  3438.,  3652.,  5473.,  5800.,  5599.,  5932.,  5725.,
      6064.,  5851.,  6196.,  5977.,  6328.,  4222.,  4460.,  2231.,  2352.,
      25.,    52.,    102.,   160.,   235.,   328.,   397.,   496.,   559.,
      664.,   721.,   832.,   883.,   1000.,  670.,   752.,   377.,   420.,
      406.,   480.,   956.,   1112.,  1658.,  1904.,  2018.,  2276.,  2378.,
      2648.,  2738.,  3020.,  3098.,  3392.,  2268.,  2472.,  1238.,  1344.,
      1190.,  1292.,  2580.,  2792.,  4178.,  4508.,  4538.,  4880.,  4898.,
      5252.,  5258.,  5624.,  5618.,  5996.,  4004.,  4264.,  2134.,  2268.,
      1974.,  2104.,  4204.,  4472.,  6698.,  7112.,  7058.,  7484.,  7418.,
      7856.,  7778.,  8228.,  8138.,  8600.,  5740.,  6056.,  3030.,  3192.,
      2758.,  2916.,  5828.,  6152.,  9218.,  9716.,  9578.,  10088., 9938.,
      10460., 10298., 10832., 10658., 11204., 7476.,  7848.,  3926.,  4116.,
      3542.,  3728.,  7452.,  7832.,  11738., 12320., 12098., 12692., 12458.,
      13064., 12818., 13436., 13178., 13808., 9212.,  9640.,  4822.,  5040.,
      4326.,  4540.,  9076.,  9512.,  14258., 14924., 14618., 15296., 14978.,
      15668., 15338., 16040., 15698., 16412., 10948., 11432., 5718.,  5964.,
      2635.,  2752.,  5502.,  5740.,  8605.,  8968.,  8803.,  9172.,  9001.,
      9376.,  9199.,  9580.,  9397.,  9784.,  6526.,  6788.,  3395.,  3528.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5840.,  7696.,  8420.,  10868., 11512., 14552., 13196., 16828., 14076.,
      17772., 12812., 16444., 11000., 14040., 8036.,  10484., 5840.,  7696.,
      8820.,  11460., 12429., 15681., 14654., 18550., 17703., 22275., 17323.,
      21943., 16847., 21387., 12702., 16470., 9141.,  12105., 5844.,  8100.,
      12216., 15512., 14774., 18830., 18308., 23060., 20802., 26314., 21242.,
      26786., 19538., 24986., 15044., 19540., 10662., 14270., 8248.,  11032.,
      13852., 17676., 17503., 22235., 20234., 25842., 24317., 30769., 23561.,
      30029., 22709., 29065., 17674., 23026., 14487., 18867., 10876., 14316.,
      15116., 19004., 17443., 22223., 20866., 26506., 23561., 30029., 22709.,
      29065., 21953., 28325., 18114., 23498., 14107., 18535., 11756., 15260.,
      13944., 17496., 16702., 20982., 18324., 23268., 21050., 26594., 19538.,
      24986., 20170., 25650., 14836., 19396., 11726., 15430., 8600.,  11512.,
      12932., 16020., 14073., 17725., 15942., 20062., 17003., 21623., 16847.,
      21387., 16787., 21375., 14086., 17950., 9761.,  12869., 7844.,  10292.,
      10160., 12656., 11764., 14660., 12216., 15512., 13692., 17388., 12812.,
      16444., 14076., 17772., 11864., 15032., 10420., 13060., 7568.,  9680.,
      5840.,  7696.,  8420.,  10868., 11512., 14552., 13196., 16828., 14076.,
      17772., 12812., 16444., 11000., 14040., 8036.,  10484., 5840.,  7696.,
      8820.,  11460., 12429., 15681., 14654., 18550., 17703., 22275., 17323.,
      21943., 16847., 21387., 12702., 16470., 9141.,  12105., 5844.,  8100.,
      12216., 15512., 14774., 18830., 18308., 23060., 20802., 26314., 21242.,
      26786., 19538., 24986., 15044., 19540., 10662., 14270., 8248.,  11032.,
      13852., 17676., 17503., 22235., 20234., 25842., 24317., 30769., 23561.,
      30029., 22709., 29065., 17674., 23026., 14487., 18867., 10876., 14316.,
      15116., 19004., 17443., 22223., 20866., 26506., 23561., 30029., 22709.,
      29065., 21953., 28325., 18114., 23498., 14107., 18535., 11756., 15260.,
      13944., 17496., 16702., 20982., 18324., 23268., 21050., 26594., 19538.,
      24986., 20170., 25650., 14836., 19396., 11726., 15430., 8600.,  11512.,
      12932., 16020., 14073., 17725., 15942., 20062., 17003., 21623., 16847.,
      21387., 16787., 21375., 14086., 17950., 9761.,  12869., 7844.,  10292.,
      10160., 12656., 11764., 14660., 12216., 15512., 13692., 17388., 12812.,
      16444., 14076., 17772., 11864., 15032., 10420., 13060., 7568.,  9680.,
      5840.,  7696.,  8420.,  10868., 11512., 14552., 13196., 16828., 14076.,
      17772., 12812., 16444., 11000., 14040., 8036.,  10484., 5840.,  7696.,
      8820.,  11460., 12429., 15681., 14654., 18550., 17703., 22275., 17323.,
      21943., 16847., 21387., 12702., 16470., 9141.,  12105., 5844.,  8100.,
      12216., 15512., 14774., 18830., 18308., 23060., 20802., 26314., 21242.,
      26786., 19538., 24986., 15044., 19540., 10662., 14270., 8248.,  11032.,
      13852., 17676., 17503., 22235., 20234., 25842., 24317., 30769., 23561.,
      30029., 22709., 29065., 17674., 23026., 14487., 18867., 10876., 14316.,
      15116., 19004., 17443., 22223., 20866., 26506., 23561., 30029., 22709.,
      29065., 21953., 28325., 18114., 23498., 14107., 18535., 11756., 15260.,
      13944., 17496., 16702., 20982., 18324., 23268., 21050., 26594., 19538.,
      24986., 20170., 25650., 14836., 19396., 11726., 15430., 8600.,  11512.,
      12932., 16020., 14073., 17725., 15942., 20062., 17003., 21623., 16847.,
      21387., 16787., 21375., 14086., 17950., 9761.,  12869., 7844.,  10292.,
      10160., 12656., 11764., 14660., 12216., 15512., 13692., 17388., 12812.,
      16444., 14076., 17772., 11864., 15032., 10420., 13060., 7568.,  9680.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   251.,   455.,   383.,
      635.,   515.,   815.,   647.,   995.,   690.,   954.,   485.,   633.,
      130.,   330.,   628.,   1092.,  1558.,  2350.,  2110.,  2998.,  2662.,
      3646.,  3214.,  4294.,  3766.,  4942.,  3348.,  4196.,  2114.,  2570.,
      970.,   1394.,  2756.,  3668.,  5230.,  6438.,  5078.,  6126.,  4414.,
      5302.,  4966.,  5950.,  5518.,  6598.,  4452.,  5236.,  2634.,  3058.,
      1618.,  2010.,  3988.,  4836.,  5446.,  6558.,  3758.,  4710.,  1558.,
      2350.,  2110.,  2998.,  2662.,  3646.,  2484.,  3204.,  1618.,  2010.,
      730.,   1090.,  2148.,  2932.,  4318.,  5590.,  4870.,  6238.,  5230.,
      6438.,  5078.,  6126.,  4414.,  5302.,  3588.,  4244.,  2138.,  2498.,
      1378.,  1706.,  3380.,  4100.,  6070.,  7246.,  6622.,  7894.,  5446.,
      6558.,  3758.,  4710.,  1558.,  2350.,  1620.,  2212.,  1122.,  1450.,
      490.,   786.,   1540.,  2196.,  3214.,  4294.,  3766.,  4942.,  4318.,
      5590.,  4870.,  6238.,  5230.,  6438.,  3940.,  4724.,  1642.,  1938.,
      1121.,  1349.,  2682.,  3170.,  4715.,  5495.,  5135.,  5963.,  5555.,
      6431.,  5975.,  6899.,  4667.,  5383.,  2698.,  3122.,  65.,    165.,
      77.,    193.,   370.,   634.,   911.,   1355.,  1619.,  2111.,  2327.,
      2867.,  3035.,  3623.,  3743.,  4379.,  2946.,  3402.,  1709.,  1953.,
      1618.,  2010.,  3988.,  4836.,  7174.,  8542.,  8878.,  10342., 10582.,
      12142., 12286., 13942., 13990., 15742., 10548., 11780., 5906.,  6554.,
      5146.,  5762.,  11492., 12788., 15838., 17622., 13766., 15390., 11182.,
      12646., 12886., 14446., 14590., 16246., 10884., 12052., 6042.,  6658.,
      5410.,  5994.,  11956., 13188., 14902., 16590., 11294., 12822., 7174.,
      8542.,  8878.,  10342., 10582., 12142., 8148.,  9252.,  4642.,  5226.,
      4138.,  4690.,  9348.,  10516., 15694., 17542., 17398., 19342., 15838.,
      17622., 13766., 15390., 11182., 12646., 8484.,  9524.,  4778.,  5330.,
      4402.,  4922.,  9812.,  10916., 16294., 18046., 17998., 19846., 14902.,
      16590., 11294., 12822., 7174.,  8542.,  5748.,  6724.,  3378.,  3898.,
      3130.,  3618.,  7204.,  8244.,  12286., 13942., 13990., 15742., 15694.,
      17542., 17398., 19342., 15838., 17622., 10372., 11540., 3514.,  4002.,
      3113.,  3437.,  6858.,  7538.,  11267., 12335., 12263., 13379., 13259.,
      14423., 14255., 15467., 10451., 11455., 5722.,  6338.,  137.,   333.,
      149.,   361.,   706.,   1162.,  1703.,  2435.,  2987.,  3767.,  4271.,
      5099.,  5555.,  6431.,  6839.,  7763.,  5202.,  5850.,  2933.,  3273.,
      3106.,  3690.,  7156.,  8132.,  11894., 13326., 13726., 15254., 15558.,
      17182., 17390., 19110., 19222., 21038., 11732., 12836., 6434.,  7018.,
      9322.,  10130., 16452., 17876., 18382., 20230., 13366., 15054., 7838.,
      9366.,  9670.,  11294., 11502., 13222., 4132.,  5172.,  2602.,  3154.,
      9202.,  9978.,  12564., 13924., 9126.,  10878., 10766., 12358., 11894.,
      13326., 13726., 15254., 15558., 17182., 9844.,  10820., 5426.,  5946.,
      7546.,  8290.,  13796., 15092., 21054., 22966., 22886., 24894., 18382.,
      20230., 13366., 15054., 7838.,  9366.,  2244.,  3156.,  1594.,  2082.,
      7426.,  8138.,  9908.,  11140., 13334., 15150., 15166., 17078., 9126.,
      10878., 10766., 12358., 11894., 13326., 7956.,  8804.,  4418.,  4874.,
      5770.,  6450.,  11140., 12308., 17390., 19110., 19222., 21038., 21054.,
      22966., 22886., 24894., 18382., 20230., 7716.,  8756.,  586.,   1010.,
      5105.,  5525.,  5722.,  6338.,  6683.,  7527.,  7231.,  8123.,  7779.,
      8719.,  8327.,  9315.,  1003.,  1783.,  682.,   978.,   17.,    53.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3808.,  8160.,  2200.,  7640.,  5712.,  12240., 3080.,  10696., 6664.,
      14280., 3080.,  10696., 5712.,  12240., 2200.,  7640.,  3808.,  8160.,
      2200.,  7640.,  5742.,  12414., 3300.,  11460., 8122.,  17514., 3850.,
      13370., 8122.,  17514., 3300.,  11460., 5742.,  12414., 2200.,  7640.,
      5712.,  12240., 3300.,  11460., 8568.,  18360., 4620.,  16044., 9996.,
      21420., 4620.,  16044., 8568.,  18360., 3300.,  11460., 5712.,  12240.,
      3080.,  10696., 8122.,  17514., 4620.,  16044., 11454., 24654., 5390.,
      18718., 11454., 24654., 4620.,  16044., 8122.,  17514., 3080.,  10696.,
      6664.,  14280., 3850.,  13370., 9996.,  21420., 5390.,  18718., 11454.,
      24654., 5390.,  18718., 9996.,  21420., 3850.,  13370., 6664.,  14280.,
      2640.,  9168.,  7140.,  15300., 3960.,  13752., 9996.,  21420., 4620.,
      16044., 9996.,  21420., 3960.,  13752., 7140.,  15300., 2640.,  9168.,
      4760.,  10200., 2750.,  9550.,  7140.,  15300., 3850.,  13370., 8122.,
      17514., 3850.,  13370., 7140.,  15300., 2750.,  9550.,  4760.,  10200.,
      1760.,  6112.,  4760.,  10200., 2640.,  9168.,  6664.,  14280., 3080.,
      10696., 6664.,  14280., 2640.,  9168.,  4760.,  10200., 1760.,  6112.,
      3808.,  8160.,  2200.,  7640.,  5712.,  12240., 3080.,  10696., 6664.,
      14280., 3080.,  10696., 5712.,  12240., 2200.,  7640.,  3808.,  8160.,
      2200.,  7640.,  5742.,  12414., 3300.,  11460., 8122.,  17514., 3850.,
      13370., 8122.,  17514., 3300.,  11460., 5742.,  12414., 2200.,  7640.,
      5712.,  12240., 3300.,  11460., 8568.,  18360., 4620.,  16044., 9996.,
      21420., 4620.,  16044., 8568.,  18360., 3300.,  11460., 5712.,  12240.,
      3080.,  10696., 8122.,  17514., 4620.,  16044., 11454., 24654., 5390.,
      18718., 11454., 24654., 4620.,  16044., 8122.,  17514., 3080.,  10696.,
      6664.,  14280., 3850.,  13370., 9996.,  21420., 5390.,  18718., 11454.,
      24654., 5390.,  18718., 9996.,  21420., 3850.,  13370., 6664.,  14280.,
      2640.,  9168.,  7140.,  15300., 3960.,  13752., 9996.,  21420., 4620.,
      16044., 9996.,  21420., 3960.,  13752., 7140.,  15300., 2640.,  9168.,
      4760.,  10200., 2750.,  9550.,  7140.,  15300., 3850.,  13370., 8122.,
      17514., 3850.,  13370., 7140.,  15300., 2750.,  9550.,  4760.,  10200.,
      1760.,  6112.,  4760.,  10200., 2640.,  9168.,  6664.,  14280., 3080.,
      10696., 6664.,  14280., 2640.,  9168.,  4760.,  10200., 1760.,  6112.,
      3808.,  8160.,  2200.,  7640.,  5712.,  12240., 3080.,  10696., 6664.,
      14280., 3080.,  10696., 5712.,  12240., 2200.,  7640.,  3808.,  8160.,
      2200.,  7640.,  5742.,  12414., 3300.,  11460., 8122.,  17514., 3850.,
      13370., 8122.,  17514., 3300.,  11460., 5742.,  12414., 2200.,  7640.,
      5712.,  12240., 3300.,  11460., 8568.,  18360., 4620.,  16044., 9996.,
      21420., 4620.,  16044., 8568.,  18360., 3300.,  11460., 5712.,  12240.,
      3080.,  10696., 8122.,  17514., 4620.,  16044., 11454., 24654., 5390.,
      18718., 11454., 24654., 4620.,  16044., 8122.,  17514., 3080.,  10696.,
      6664.,  14280., 3850.,  13370., 9996.,  21420., 5390.,  18718., 11454.,
      24654., 5390.,  18718., 9996.,  21420., 3850.,  13370., 6664.,  14280.,
      2640.,  9168.,  7140.,  15300., 3960.,  13752., 9996.,  21420., 4620.,
      16044., 9996.,  21420., 3960.,  13752., 7140.,  15300., 2640.,  9168.,
      4760.,  10200., 2750.,  9550.,  7140.,  15300., 3850.,  13370., 8122.,
      17514., 3850.,  13370., 7140.,  15300., 2750.,  9550.,  4760.,  10200.,
      1760.,  6112.,  4760.,  10200., 2640.,  9168.,  6664.,  14280., 3080.,
      10696., 6664.,  14280., 2640.,  9168.,  4760.,  10200., 1760.,  6112.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  1834.,  3418.,  2842.,
      4810.,  3850.,  6202.,  4858.,  7594.,  5276.,  7356.,  3742.,  4910.,
      860.,   2428.,  3960.,  6584.,  8404.,  12596., 7988.,  11924., 12308.,
      17012., 16628., 22100., 20948., 27188., 18552., 23224., 11740., 14332.,
      6716.,  9052.,  11064., 15224., 17652., 23124., 8404.,  12596., 7988.,
      11924., 12308., 17012., 16628., 22100., 15160., 19320., 9788.,  12124.,
      5788.,  7868.,  15480., 20152., 22804., 29556., 17652., 23124., 8404.,
      12596., 7988.,  11924., 12308., 17012., 11768., 15416., 7836.,  9916.,
      4860.,  6684.,  13112., 17272., 25268., 32276., 22804., 29556., 17652.,
      23124., 8404.,  12596., 7988.,  11924., 8376.,  11512., 5884.,  7708.,
      3932.,  5500.,  10744., 14392., 20948., 27188., 25268., 32276., 22804.,
      29556., 17652., 23124., 8404.,  12596., 4984.,  7608.,  3932.,  5500.,
      3004.,  4316.,  8376.,  11512., 16628., 22100., 20948., 27188., 25268.,
      32276., 22804., 29556., 17652., 23124., 6328.,  9464.,  1980.,  3292.,
      1966.,  2750.,  5372.,  7196.,  10474., 13594., 13786., 17290., 17098.,
      20986., 20410., 24682., 16938., 20570., 10300., 12636., 430.,   1214.,
      510.,   1422.,  2716.,  4796.,  6234.,  8714.,  9802.,  12666., 13370.,
      16618., 16938., 20570., 20506., 24522., 12252., 14844., 510.,   1422.,
      11932., 14012., 14840., 18488., 5140.,  9844.,  9844.,  14292., 15188.,
      20404., 20532., 26516., 25876., 32628., 18552., 23224., 5788.,  7868.,
      12668., 15516., 28088., 33272., 21556., 27540., 5140.,  9844.,  9844.,
      14292., 15188., 20404., 20532., 26516., 15160., 19320., 4860.,  6684.,
      10716., 13308., 26360., 32056., 33876., 41140., 21556., 27540., 5140.,
      9844.,  9844.,  14292., 15188., 20404., 11768., 15416., 3932.,  5500.,
      8764.,  11100., 21944., 27128., 31220., 38740., 33876., 41140., 21556.,
      27540., 5140.,  9844.,  9844.,  14292., 8376.,  11512., 3004.,  4316.,
      6812.,  8892.,  17528., 22200., 25876., 32628., 31220., 38740., 33876.,
      41140., 21556., 27540., 5140.,  9844.,  4984.,  7608.,  2076.,  3132.,
      4860.,  6684.,  13112., 17272., 20532., 26516., 25876., 32628., 31220.,
      38740., 33876., 41140., 21556., 27540., 2232.,  5368.,  1148.,  1948.,
      782.,   1310.,  2492.,  3804.,  5386.,  7738.,  7162.,  9898.,  8938.,
      12058., 10714., 14218., 9802.,  12666., 6396.,  8220.,  270.,   798.,
      350.,   1006.,  1884.,  3452.,  4858.,  7594.,  8938.,  12058., 13018.,
      16522., 17098., 20986., 21178., 25450., 17180., 20284., 10206., 11886.,
      8668.,  11260., 12792., 16440., 18260., 23476., 11700., 16660., 18068.,
      23796., 24436., 30932., 30804., 38068., 16504., 21176., 10716., 13308.,
      20668., 24028., 17848., 23032., 25460., 31956., 18260., 23476., 11700.,
      16660., 18068., 23796., 24436., 30932., 13112., 17272., 8764.,  11100.,
      17692., 20796., 28408., 34104., 28564., 36340., 25460., 31956., 18260.,
      23476., 11700., 16660., 18068., 23796., 9720.,  13368., 6812.,  8892.,
      14716., 17564., 23992., 29176., 37172., 45204., 28564., 36340., 25460.,
      31956., 18260., 23476., 11700., 16660., 6328.,  9464.,  4860.,  6684.,
      11740., 14332., 19576., 24248., 30804., 38068., 37172., 45204., 28564.,
      36340., 25460., 31956., 18260., 23476., 2936.,  5560.,  2908.,  4476.,
      8764.,  11100., 15160., 19320., 24436., 30932., 30804., 38068., 37172.,
      45204., 28564., 36340., 25460., 31956., 12472., 15608., 956.,   2268.,
      4334.,  5630.,  6396.,  8220.,  9130.,  11738., 11418., 14410., 13706.,
      17082., 15994., 19754., 3306.,  6426.,  2492.,  3804.,  110.,   382.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9808.,  10688., 11600., 12544., 12948., 14096., 15284., 16512., 16824.,
      18208., 19640., 21120., 21308., 22960., 24668., 26432., 20172., 21808.,
      23500., 25248., 18524., 20144., 21820., 23552., 17848., 19232., 20664.,
      22144., 15796., 16912., 18068., 19264., 12880., 13760., 14672., 15616.,
      15940., 17136., 18372., 19648., 22185., 23684., 25233., 26832., 27446.,
      29224., 31062., 32960., 33403., 35500., 37667., 39904., 33719., 35828.,
      38007., 40256., 33523., 35644., 37835., 40096., 27702., 29512., 31382.,
      33312., 20097., 21556., 23065., 24624., 13508., 14640., 15812., 17024.,
      22776., 24224., 25720., 27264., 27710., 29496., 31342., 33248., 29940.,
      32048., 34228., 36480., 32954., 35432., 37994., 40640., 33394., 35848.,
      38386., 41008., 33066., 35496., 38010., 40608., 27572., 29616., 31732.,
      33920., 21742., 23416., 25150., 26944., 19064., 20384., 21752., 23168.,
      23468., 25232., 27052., 28928., 30659., 32860., 35131., 37472., 37778.,
      40408., 43122., 45920., 45961., 49012., 52161., 55408., 46349., 49404.,
      52557., 55808., 45969., 49028., 52185., 55440., 36818., 39416., 42098.,
      44864., 28715., 30860., 33075., 35360., 21548., 23248., 25004., 26816.,
      31804., 33616., 35484., 37408., 36287., 38532., 40847., 43232., 42986.,
      45656., 48410., 51248., 48429., 51516., 54701., 57984., 45937., 48964.,
      52089., 55312., 44277., 47308., 50437., 53664., 39818., 42392., 45050.,
      47792., 34119., 36244., 38439., 40704., 27580., 29264., 31004., 32800.,
      23704., 25312., 26968., 28672., 29670., 31640., 33670., 35760., 35844.,
      38160., 40548., 43008., 42322., 44968., 47698., 50512., 40810., 43432.,
      46138., 48928., 42178., 44840., 47586., 50416., 33412., 35664., 37988.,
      40384., 25494., 27352., 29270., 31248., 19352., 20832., 22360., 23936.,
      25332., 26736., 28180., 29664., 29069., 30764., 32509., 34304., 31006.,
      32968., 34990., 37072., 30711., 32916., 35191., 37536., 30867., 33020.,
      35243., 37536., 31599., 33764., 35999., 38304., 26046., 27848., 29710.,
      31632., 19333., 20796., 22309., 23872., 17012., 18160., 19348., 20576.,
      16912., 17984., 19088., 20224., 20868., 22160., 23492., 24864., 25432.,
      26976., 28568., 30208., 29580., 31344., 33164., 35040., 28636., 30384.,
      32188., 34048., 30316., 32112., 33964., 35872., 25560., 27104., 28696.,
      30336., 21988., 23312., 24676., 26080., 17168., 18240., 19344., 20480.,
      12880., 13760., 14672., 15616., 17812., 18960., 20148., 21376., 23544.,
      24992., 26488., 28032., 28284., 30000., 31772., 33600., 29260., 31024.,
      32844., 34720., 28636., 30384., 32188., 34048., 24632., 26144., 27704.,
      29312., 19252., 20496., 21780., 23104., 15056., 16064., 17104., 18176.,
      19908., 21232., 22596., 24000., 24329., 25924., 27569., 29264., 29494.,
      31400., 33366., 35392., 31835., 34028., 36291., 38624., 31127., 33332.,
      35607., 37952., 30867., 33020., 35243., 37536., 26550., 28360., 30230.,
      32160., 20321., 21748., 23225., 24752., 14788., 15920., 17092., 18304.,
      21304., 22816., 24376., 25984., 27390., 29240., 31150., 33120., 34420.,
      36656., 38964., 41344., 41146., 43752., 46442., 49216., 41650., 44296.,
      47026., 49840., 40810., 43432., 46138., 48928., 33396., 35632., 37940.,
      40320., 23790., 25592., 27454., 29376., 18680., 20128., 21624., 23168.,
      32492., 34320., 36204., 38144., 36707., 38940., 41243., 43616., 42066.,
      44760., 47538., 50400., 47529., 50612., 53793., 57072., 48429., 51516.,
      54701., 57984., 45937., 48964., 52089., 55312., 38994., 41592., 44274.,
      47040., 33675., 35788., 37971., 40224., 28460., 30160., 31916., 33728.,
      24892., 26704., 28572., 30496., 31263., 33476., 35759., 38112., 38762.,
      41432., 44186., 47024., 46349., 49404., 52557., 55808., 45969., 49028.,
      52185., 55440., 44821., 47884., 51045., 54304., 37706., 40344., 43066.,
      45872., 28135., 30292., 32519., 34816., 22780., 24528., 26332., 28192.,
      30488., 32224., 34008., 35840., 36070., 38168., 40326., 42544., 42692.,
      45200., 47780., 50432., 45202., 48040., 50962., 53968., 43178., 45992.,
      48890., 51872., 44482., 47272., 50146., 53104., 39428., 41808., 44260.,
      46784., 32086., 34008., 35990., 38032., 25048., 26592., 28184., 29824.,
      22004., 23408., 24852., 26336., 26733., 28396., 30109., 31872., 32158.,
      34120., 36142., 38224., 37527., 39764., 42071., 44448., 37747., 39996.,
      42315., 44704., 37455., 39716., 42047., 44448., 30398., 32328., 34318.,
      36368., 21477., 23036., 24645., 26304., 17396., 18672., 19988., 21344.,
      23184., 24384., 25616., 26880., 23812., 25232., 26692., 28192., 25048.,
      26720., 28440., 30208., 27916., 29808., 31756., 33760., 27996., 29872.,
      31804., 33792., 27564., 29424., 31340., 33312., 23064., 24672., 26328.,
      28032., 21220., 22544., 23908., 25312., 18192., 19264., 20368., 21504.,
      9808.,  10688., 11600., 12544., 12948., 14096., 15284., 16512., 16824.,
      18208., 19640., 21120., 21308., 22960., 24668., 26432., 20172., 21808.,
      23500., 25248., 18524., 20144., 21820., 23552., 17848., 19232., 20664.,
      22144., 15796., 16912., 18068., 19264., 12880., 13760., 14672., 15616.,
      15940., 17136., 18372., 19648., 22185., 23684., 25233., 26832., 27446.,
      29224., 31062., 32960., 33403., 35500., 37667., 39904., 33719., 35828.,
      38007., 40256., 33523., 35644., 37835., 40096., 27702., 29512., 31382.,
      33312., 20097., 21556., 23065., 24624., 13508., 14640., 15812., 17024.,
      22776., 24224., 25720., 27264., 27710., 29496., 31342., 33248., 29940.,
      32048., 34228., 36480., 32954., 35432., 37994., 40640., 33394., 35848.,
      38386., 41008., 33066., 35496., 38010., 40608., 27572., 29616., 31732.,
      33920., 21742., 23416., 25150., 26944., 19064., 20384., 21752., 23168.,
      23468., 25232., 27052., 28928., 30659., 32860., 35131., 37472., 37778.,
      40408., 43122., 45920., 45961., 49012., 52161., 55408., 46349., 49404.,
      52557., 55808., 45969., 49028., 52185., 55440., 36818., 39416., 42098.,
      44864., 28715., 30860., 33075., 35360., 21548., 23248., 25004., 26816.,
      31804., 33616., 35484., 37408., 36287., 38532., 40847., 43232., 42986.,
      45656., 48410., 51248., 48429., 51516., 54701., 57984., 45937., 48964.,
      52089., 55312., 44277., 47308., 50437., 53664., 39818., 42392., 45050.,
      47792., 34119., 36244., 38439., 40704., 27580., 29264., 31004., 32800.,
      23704., 25312., 26968., 28672., 29670., 31640., 33670., 35760., 35844.,
      38160., 40548., 43008., 42322., 44968., 47698., 50512., 40810., 43432.,
      46138., 48928., 42178., 44840., 47586., 50416., 33412., 35664., 37988.,
      40384., 25494., 27352., 29270., 31248., 19352., 20832., 22360., 23936.,
      25332., 26736., 28180., 29664., 29069., 30764., 32509., 34304., 31006.,
      32968., 34990., 37072., 30711., 32916., 35191., 37536., 30867., 33020.,
      35243., 37536., 31599., 33764., 35999., 38304., 26046., 27848., 29710.,
      31632., 19333., 20796., 22309., 23872., 17012., 18160., 19348., 20576.,
      16912., 17984., 19088., 20224., 20868., 22160., 23492., 24864., 25432.,
      26976., 28568., 30208., 29580., 31344., 33164., 35040., 28636., 30384.,
      32188., 34048., 30316., 32112., 33964., 35872., 25560., 27104., 28696.,
      30336., 21988., 23312., 24676., 26080., 17168., 18240., 19344., 20480.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   103.,   148.,   199.,   256.,   163.,   220.,
      283.,   352.,   223.,   292.,   367.,   448.,   283.,   364.,   451.,
      544.,   314.,   376.,   442.,   512.,   225.,   260.,   297.,   336.,
      42.,    88.,    138.,   192.,   260.,   368.,   484.,   608.,   686.,
      872.,   1070.,  1280.,  950.,   1160.,  1382.,  1616.,  1214.,  1448.,
      1694.,  1952.,  1478.,  1736.,  2006.,  2288.,  1742.,  2024.,  2318.,
      2624.,  1572.,  1776.,  1988.,  2208.,  1002.,  1112.,  1226.,  1344.,
      434.,   536.,   642.,   752.,   1268.,  1488.,  1716.,  1952.,  2534.,
      2888.,  3254.,  3632.,  2798.,  3176.,  3566.,  3968.,  3062.,  3464.,
      3878.,  4304.,  3326.,  3752.,  4190.,  4640.,  3590.,  4040.,  4502.,
      4976.,  3028.,  3344.,  3668.,  4000.,  1842.,  2008.,  2178.,  2352.,
      826.,   984.,   1146.,  1312.,  2276.,  2608.,  2948.,  3296.,  4382.,
      4904.,  5438.,  5984.,  4646.,  5192.,  5750.,  6320.,  4910.,  5480.,
      6062.,  6656.,  5174.,  5768.,  6374.,  6992.,  5438.,  6056.,  6686.,
      7328.,  4484.,  4912.,  5348.,  5792.,  2682.,  2904.,  3130.,  3360.,
      1218.,  1432.,  1650.,  1872.,  3284.,  3728.,  4180.,  4640.,  6230.,
      6920.,  7622.,  8336.,  6494.,  7208.,  7934.,  8672.,  6630.,  7240.,
      7862.,  8496.,  6254.,  6760.,  7278.,  7808.,  5366.,  5768.,  6182.,
      6608.,  4148.,  4432.,  4724.,  5024.,  2370.,  2520.,  2674.,  2832.,
      1482.,  1624.,  1770.,  1920.,  3524.,  3824.,  4132.,  4448.,  6158.,
      6632.,  7118.,  7616.,  6422.,  6920.,  7430.,  7952.,  5022.,  5416.,
      5822.,  6240.,  3110.,  3400.,  3702.,  4016.,  686.,   872.,   1070.,
      1280.,  740.,   880.,   1028.,  1184.,  522.,   600.,   682.,   768.,
      210.,   280.,   354.,   432.,   692.,   848.,   1012.,  1184.,  1478.,
      1736.,  2006.,  2288.,  1742.,  2024.,  2318.,  2624.,  2006.,  2312.,
      2630.,  2960.,  2270.,  2600.,  2942.,  3296.,  2534.,  2888.,  3254.,
      3632.,  2196.,  2448.,  2708.,  2976.,  1362.,  1496.,  1634.,  1776.,
      533.,   588.,   645.,   704.,   1282.,  1400.,  1522.,  1648.,  2263.,
      2452.,  2647.,  2848.,  2467.,  2668.,  2875.,  3088.,  2671.,  2884.,
      3103.,  3328.,  2875.,  3100.,  3331.,  3568.,  3079.,  3316.,  3559.,
      3808.,  2386.,  2552.,  2722.,  2896.,  1365.,  1452.,  1541.,  1632.,
      25.,    52.,    81.,    112.,   154.,   216.,   282.,   352.,   403.,
      508.,   619.,   736.,   751.,   868.,   991.,   1120.,  1099.,  1228.,
      1363.,  1504.,  1447.,  1588.,  1735.,  1888.,  1795.,  1948.,  2107.,
      2272.,  1418.,  1528.,  1642.,  1760.,  825.,   884.,   945.,   1008.,
      762.,   856.,   954.,   1056.,  1892.,  2096.,  2308.,  2528.,  3422.,
      3752.,  4094.,  4448.,  4262.,  4616.,  4982.,  5360.,  5102.,  5480.,
      5870.,  6272.,  5942.,  6344.,  6758.,  7184.,  6782.,  7208.,  7646.,
      8096.,  5124.,  5424.,  5732.,  6048.,  2874.,  3032.,  3194.,  3360.,
      2498.,  2648.,  2802.,  2960.,  5588.,  5904.,  6228.,  6560.,  9302.,
      9800.,  10310., 10832., 10142., 10664., 11198., 11744., 10982., 11528.,
      12086., 12656., 11822., 12392., 12974., 13568., 12662., 13256., 13862.,
      14480., 9268.,  9680.,  10100., 10528., 5058.,  5272.,  5490.,  5712.,
      4234.,  4440.,  4650.,  4864.,  9284.,  9712.,  10148., 10592., 15182.,
      15848., 16526., 17216., 16022., 16712., 17414., 18128., 16862., 17576.,
      18302., 19040., 17702., 18440., 19190., 19952., 18542., 19304., 20078.,
      20864., 13412., 13936., 14468., 15008., 7242.,  7512.,  7786.,  8064.,
      5970.,  6232.,  6498.,  6768.,  12980., 13520., 14068., 14624., 21062.,
      21896., 22742., 23600., 21902., 22760., 23630., 24512., 19542., 20296.,
      21062., 21840., 16670., 17320., 17982., 18656., 13286., 13832., 14390.,
      14960., 9620.,  10000., 10388., 10784., 5202.,  5400.,  5602.,  5808.,
      4506.,  4696.,  4890.,  5088.,  9764.,  10160., 10564., 10976., 15806.,
      16424., 17054., 17696., 16646., 17288., 17942., 18608., 12750., 13288.,
      13838., 14400., 8342.,  8776.,  9222.,  9680.,  3422.,  3752.,  4094.,
      4448.,  2756.,  2992.,  3236.,  3488.,  1626.,  1752.,  1882.,  2016.,
      1506.,  1624.,  1746.,  1872.,  3476.,  3728.,  3988.,  4256.,  5942.,
      6344.,  6758.,  7184.,  6782.,  7208.,  7646.,  8096.,  7622.,  8072.,
      8534.,  9008.,  8462.,  8936.,  9422.,  9920.,  9302.,  9800.,  10310.,
      10832., 6900.,  7248.,  7604.,  7968.,  3810.,  3992.,  4178.,  4368.,
      1517.,  1596.,  1677.,  1760.,  3346.,  3512.,  3682.,  3856.,  5503.,
      5764.,  6031.,  6304.,  5995.,  6268.,  6547.,  6832.,  6487.,  6772.,
      7063.,  7360.,  6979.,  7276.,  7579.,  7888.,  7471.,  7780.,  8095.,
      8416.,  5410.,  5624.,  5842.,  6064.,  2925.,  3036.,  3149.,  3264.,
      49.,    100.,   153.,   208.,   298.,   408.,   522.,   640.,   763.,
      940.,   1123.,  1312.,  1399.,  1588.,  1783.,  1984.,  2035.,  2236.,
      2443.,  2656.,  2671.,  2884.,  3103.,  3328.,  3307.,  3532.,  3763.,
      4000.,  2522.,  2680.,  2842.,  3008.,  1425.,  1508.,  1593.,  1680.,
      1482.,  1624.,  1770.,  1920.,  3524.,  3824.,  4132.,  4448.,  6158.,
      6632.,  7118.,  7616.,  7574.,  8072.,  8582.,  9104.,  8990.,  9512.,
      10046., 10592., 10406., 10952., 11510., 12080., 11822., 12392., 12974.,
      13568., 8676.,  9072.,  9476.,  9888.,  4746.,  4952.,  5162.,  5376.,
      4562.,  4760.,  4962.,  5168.,  9908.,  10320., 10740., 11168., 16070.,
      16712., 17366., 18032., 17486., 18152., 18830., 19520., 18902., 19592.,
      20294., 21008., 20318., 21032., 21758., 22496., 21734., 22472., 23222.,
      23984., 15508., 16016., 16532., 17056., 8274.,  8536.,  8802.,  9072.,
      7642.,  7896.,  8154.,  8416.,  16292., 16816., 17348., 17888., 25982.,
      26792., 27614., 28448., 27398., 28232., 29078., 29936., 28814., 29672.,
      30542., 31424., 30230., 31112., 32006., 32912., 31646., 32552., 33470.,
      34400., 22340., 22960., 23588., 24224., 11802., 12120., 12442., 12768.,
      10722., 11032., 11346., 11664., 22676., 23312., 23956., 24608., 35894.,
      36872., 37862., 38864., 37310., 38312., 39326., 40352., 32454., 33352.,
      34262., 35184., 27086., 27880., 28686., 29504., 21206., 21896., 22598.,
      23312., 15092., 15568., 16052., 16544., 8034.,  8280.,  8530.,  8784.,
      7530.,  7768.,  8010.,  8256.,  16004., 16496., 16996., 17504., 25454.,
      26216., 26990., 27776., 26870., 27656., 28454., 29264., 20478., 21160.,
      21854., 22560., 13574., 14152., 14742., 15344., 6158.,  6632.,  7118.,
      7616.,  4772.,  5104.,  5444.,  5792.,  2730.,  2904.,  3082.,  3264.,
      2802.,  2968.,  3138.,  3312.,  6260.,  6608.,  6964.,  7328.,  10406.,
      10952., 11510., 12080., 11822., 12392., 12974., 13568., 13238., 13832.,
      14438., 15056., 14654., 15272., 15902., 16544., 16070., 16712., 17366.,
      18032., 11604., 12048., 12500., 12960., 6258.,  6488.,  6722.,  6960.,
      2501.,  2604.,  2709.,  2816.,  5410.,  5624.,  5842.,  6064.,  8743.,
      9076.,  9415.,  9760.,  9523.,  9868.,  10219., 10576., 10303., 10660.,
      11023., 11392., 11083., 11452., 11827., 12208., 11863., 12244., 12631.,
      13024., 8434.,  8696.,  8962.,  9232.,  4485.,  4620.,  4757.,  4896.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6352.,  8208.,  10320., 12688., 6660.,  8980.,  11620., 14580., 9528.,
      12312., 15480., 19032., 9324.,  12572., 16268., 20412., 10604., 13852.,
      17548., 21692., 9324.,  12572., 16268., 20412., 9528.,  12312., 15480.,
      19032., 6660.,  8980.,  11620., 14580., 6352.,  8208.,  10320., 12688.,
      6148.,  8468.,  11108., 14068., 10045., 12849., 16053., 19657., 9894.,
      13246., 17078., 21390., 12479., 16443., 20967., 26051., 10887., 14947.,
      19567., 24747., 14319., 18347., 22935., 28083., 10758., 14238., 18198.,
      22638., 9069.,  11937., 15205., 18873., 6148.,  8468.,  11108., 14068.,
      9528.,  12312., 15480., 19032., 9430.,  12846., 16742., 21118., 13428.,
      17476., 22100., 27300., 13682., 18490., 23970., 30122., 17442., 22314.,
      27858., 34074., 13426., 18234., 23714., 29866., 13428., 17476., 22100.,
      27300., 9686.,  13102., 16998., 21374., 9528.,  12312., 15480., 19032.,
      9836.,  13084., 16780., 20924., 12783., 16811., 21399., 26547., 13218.,
      18090., 23634., 29850., 20133., 25785., 32221., 39441., 17085., 22769.,
      29237., 36489., 18037., 23625., 29997., 37153., 12354., 17098., 22514.,
      28602., 14015., 17979., 22503., 27587., 9836.,  13084., 16780., 20924.,
      11116., 14364., 18060., 22204., 11447., 15571., 20255., 25499., 17234.,
      22170., 27778., 34058., 17085., 22769., 29237., 36489., 18037., 23625.,
      29997., 37153., 14989., 20609., 27013., 34201., 16114., 20922., 26402.,
      32554., 12423., 16483., 21103., 26283., 11116., 14364., 18060., 22204.,
      7992.,  10776., 13944., 17496., 13542., 17150., 21238., 25806., 12596.,
      16900., 21780., 27236., 16162., 21034., 26578., 32794., 13426., 18234.,
      23714., 29866., 17442., 22314., 27858., 34074., 11988., 16164., 20916.,
      26244., 11142., 14622., 18582., 23022., 7992.,  10776., 13944., 17496.,
      7940.,  10260., 12900., 15860., 9397.,  12361., 15725., 19489., 12470.,
      16014., 20038., 24542., 10631., 14691., 19311., 24491., 14319., 18347.,
      22935., 28083., 12983., 17107., 21791., 27035., 12470., 16014., 20038.,
      24542., 7557.,  10457., 13757., 17457., 7940.,  10260., 12900., 15860.,
      5328.,  7184.,  9296.,  11664., 7428.,  9748.,  12388., 15348., 7992.,
      10776., 13944., 17496., 11628., 14876., 18572., 22716., 9324.,  12572.,
      16268., 20412., 10604., 13852., 17548., 21692., 7992.,  10776., 13944.,
      17496., 8452.,  10772., 13412., 16372., 5328.,  7184.,  9296.,  11664.,
      6352.,  8208.,  10320., 12688., 6660.,  8980.,  11620., 14580., 9528.,
      12312., 15480., 19032., 9324.,  12572., 16268., 20412., 10604., 13852.,
      17548., 21692., 9324.,  12572., 16268., 20412., 9528.,  12312., 15480.,
      19032., 6660.,  8980.,  11620., 14580., 6352.,  8208.,  10320., 12688.,
      6148.,  8468.,  11108., 14068., 10045., 12849., 16053., 19657., 9894.,
      13246., 17078., 21390., 12479., 16443., 20967., 26051., 10887., 14947.,
      19567., 24747., 14319., 18347., 22935., 28083., 10758., 14238., 18198.,
      22638., 9069.,  11937., 15205., 18873., 6148.,  8468.,  11108., 14068.,
      9528.,  12312., 15480., 19032., 9430.,  12846., 16742., 21118., 13428.,
      17476., 22100., 27300., 13682., 18490., 23970., 30122., 17442., 22314.,
      27858., 34074., 13426., 18234., 23714., 29866., 13428., 17476., 22100.,
      27300., 9686.,  13102., 16998., 21374., 9528.,  12312., 15480., 19032.,
      9836.,  13084., 16780., 20924., 12783., 16811., 21399., 26547., 13218.,
      18090., 23634., 29850., 20133., 25785., 32221., 39441., 17085., 22769.,
      29237., 36489., 18037., 23625., 29997., 37153., 12354., 17098., 22514.,
      28602., 14015., 17979., 22503., 27587., 9836.,  13084., 16780., 20924.,
      11116., 14364., 18060., 22204., 11447., 15571., 20255., 25499., 17234.,
      22170., 27778., 34058., 17085., 22769., 29237., 36489., 18037., 23625.,
      29997., 37153., 14989., 20609., 27013., 34201., 16114., 20922., 26402.,
      32554., 12423., 16483., 21103., 26283., 11116., 14364., 18060., 22204.,
      7992.,  10776., 13944., 17496., 13542., 17150., 21238., 25806., 12596.,
      16900., 21780., 27236., 16162., 21034., 26578., 32794., 13426., 18234.,
      23714., 29866., 17442., 22314., 27858., 34074., 11988., 16164., 20916.,
      26244., 11142., 14622., 18582., 23022., 7992.,  10776., 13944., 17496.,
      7940.,  10260., 12900., 15860., 9397.,  12361., 15725., 19489., 12470.,
      16014., 20038., 24542., 10631., 14691., 19311., 24491., 14319., 18347.,
      22935., 28083., 12983., 17107., 21791., 27035., 12470., 16014., 20038.,
      24542., 7557.,  10457., 13757., 17457., 7940.,  10260., 12900., 15860.,
      5328.,  7184.,  9296.,  11664., 7428.,  9748.,  12388., 15348., 7992.,
      10776., 13944., 17496., 11628., 14876., 18572., 22716., 9324.,  12572.,
      16268., 20412., 10604., 13852., 17548., 21692., 7992.,  10776., 13944.,
      17496., 8452.,  10772., 13412., 16372., 5328.,  7184.,  9296.,  11664.,
      6352.,  8208.,  10320., 12688., 6660.,  8980.,  11620., 14580., 9528.,
      12312., 15480., 19032., 9324.,  12572., 16268., 20412., 10604., 13852.,
      17548., 21692., 9324.,  12572., 16268., 20412., 9528.,  12312., 15480.,
      19032., 6660.,  8980.,  11620., 14580., 6352.,  8208.,  10320., 12688.,
      6148.,  8468.,  11108., 14068., 10045., 12849., 16053., 19657., 9894.,
      13246., 17078., 21390., 12479., 16443., 20967., 26051., 10887., 14947.,
      19567., 24747., 14319., 18347., 22935., 28083., 10758., 14238., 18198.,
      22638., 9069.,  11937., 15205., 18873., 6148.,  8468.,  11108., 14068.,
      9528.,  12312., 15480., 19032., 9430.,  12846., 16742., 21118., 13428.,
      17476., 22100., 27300., 13682., 18490., 23970., 30122., 17442., 22314.,
      27858., 34074., 13426., 18234., 23714., 29866., 13428., 17476., 22100.,
      27300., 9686.,  13102., 16998., 21374., 9528.,  12312., 15480., 19032.,
      9836.,  13084., 16780., 20924., 12783., 16811., 21399., 26547., 13218.,
      18090., 23634., 29850., 20133., 25785., 32221., 39441., 17085., 22769.,
      29237., 36489., 18037., 23625., 29997., 37153., 12354., 17098., 22514.,
      28602., 14015., 17979., 22503., 27587., 9836.,  13084., 16780., 20924.,
      11116., 14364., 18060., 22204., 11447., 15571., 20255., 25499., 17234.,
      22170., 27778., 34058., 17085., 22769., 29237., 36489., 18037., 23625.,
      29997., 37153., 14989., 20609., 27013., 34201., 16114., 20922., 26402.,
      32554., 12423., 16483., 21103., 26283., 11116., 14364., 18060., 22204.,
      7992.,  10776., 13944., 17496., 13542., 17150., 21238., 25806., 12596.,
      16900., 21780., 27236., 16162., 21034., 26578., 32794., 13426., 18234.,
      23714., 29866., 17442., 22314., 27858., 34074., 11988., 16164., 20916.,
      26244., 11142., 14622., 18582., 23022., 7992.,  10776., 13944., 17496.,
      7940.,  10260., 12900., 15860., 9397.,  12361., 15725., 19489., 12470.,
      16014., 20038., 24542., 10631., 14691., 19311., 24491., 14319., 18347.,
      22935., 28083., 12983., 17107., 21791., 27035., 12470., 16014., 20038.,
      24542., 7557.,  10457., 13757., 17457., 7940.,  10260., 12900., 15860.,
      5328.,  7184.,  9296.,  11664., 7428.,  9748.,  12388., 15348., 7992.,
      10776., 13944., 17496., 11628., 14876., 18572., 22716., 9324.,  12572.,
      16268., 20412., 10604., 13852., 17548., 21692., 7992.,  10776., 13944.,
      17496., 8452.,  10772., 13412., 16372., 5328.,  7184.,  9296.,  11664.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  743.,   1091.,  1487.,  1931.,  1199.,  1643.,
      2135.,  2675.,  1655.,  2195.,  2783.,  3419.,  2111.,  2747.,  3431.,
      4163.,  2394.,  2882.,  3402.,  3954.,  1733.,  2009.,  2301.,  2609.,
      250.,   610.,   1002.,  1426.,  1684.,  2276.,  2932.,  3652.,  3726.,
      4678.,  5726.,  6870.,  3550.,  4438.,  5422.,  6502.,  5614.,  6694.,
      7870.,  9142.,  7678.,  8950.,  10318., 11782., 9742.,  11206., 12766.,
      14422., 8724.,  9828.,  10996., 12228., 5562.,  6178.,  6826.,  7506.,
      3082.,  3634.,  4218.,  4834.,  5044.,  6020.,  7060.,  8164.,  8190.,
      9462.,  10830., 12294., 3726.,  4678.,  5726.,  6870.,  3550.,  4438.,
      5422.,  6502.,  5614.,  6694.,  7870.,  9142.,  7678.,  8950.,  10318.,
      11782., 7092.,  8068.,  9108.,  10212., 4618.,  5170.,  5754.,  6370.,
      2650.,  3138.,  3658.,  4210.,  7188.,  8292.,  9460.,  10692., 10606.,
      12198., 13886., 15670., 8190.,  9462.,  10830., 12294., 3726.,  4678.,
      5726.,  6870.,  3550.,  4438.,  5422.,  6502.,  5614.,  6694.,  7870.,
      9142.,  5460.,  6308.,  7220.,  8196.,  3674.,  4162.,  4682.,  5234.,
      2218.,  2642.,  3098.,  3586.,  6068.,  7044.,  8084.,  9188.,  11806.,
      13462., 15214., 17062., 10606., 12198., 13886., 15670., 8190.,  9462.,
      10830., 12294., 3726.,  4678.,  5726.,  6870.,  3550.,  4438.,  5422.,
      6502.,  3828.,  4548.,  5332.,  6180.,  2730.,  3154.,  3610.,  4098.,
      1786.,  2146.,  2538.,  2962.,  4948.,  5796.,  6708.,  7684.,  9742.,
      11206., 12766., 14422., 11806., 13462., 15214., 17062., 10606., 12198.,
      13886., 15670., 8190.,  9462.,  10830., 12294., 3726.,  4678.,  5726.,
      6870.,  2196.,  2788.,  3444.,  4164.,  1786.,  2146.,  2538.,  2962.,
      1354.,  1650.,  1978.,  2338.,  3828.,  4548.,  5332.,  6180.,  7678.,
      8950.,  10318., 11782., 9742.,  11206., 12766., 14422., 11806., 13462.,
      15214., 17062., 10606., 12198., 13886., 15670., 8190.,  9462.,  10830.,
      12294., 2804.,  3524.,  4308.,  5156.,  842.,   1138.,  1466.,  1826.,
      893.,   1073.,  1269.,  1481.,  2474.,  2898.,  3354.,  3842.,  4871.,
      5603.,  6383.,  7211.,  6479.,  7307.,  8183.,  9107.,  8087.,  9011.,
      9983.,  11003., 9695.,  10715., 11783., 12899., 8039.,  8899.,  9807.,
      10763., 4874.,  5426.,  6010.,  6626.,  125.,   305.,   501.,   713.,
      149.,   361.,   589.,   833.,   1114.,  1602.,  2122.,  2674.,  2831.,
      3403.,  4023.,  4691.,  4567.,  5235.,  5951.,  6715.,  6303.,  7067.,
      7879.,  8739.,  8039.,  8899.,  9807.,  10763., 9775.,  10731., 11735.,
      12787., 5818.,  6434.,  7082.,  7762.,  149.,   361.,   589.,   833.,
      5722.,  6210.,  6730.,  7282.,  6996.,  7844.,  8756.,  9732.,  2030.,
      3110.,  4286.,  5558.,  4414.,  5430.,  6542.,  7750.,  6990.,  8198.,
      9502.,  10902., 9566.,  10966., 12462., 14054., 12142., 13734., 15422.,
      17206., 8724.,  9828.,  10996., 12228., 2650.,  3138.,  3658.,  4210.,
      5994.,  6674.,  7386.,  8130.,  13428., 14660., 15956., 17316., 10078.,
      11478., 12974., 14566., 2030.,  3110.,  4286.,  5558.,  4414.,  5430.,
      6542.,  7750.,  6990.,  8198.,  9502.,  10902., 9566.,  10966., 12462.,
      14054., 7092.,  8068.,  9108.,  10212., 2218.,  2642.,  3098.,  3586.,
      5050.,  5666.,  6314.,  6994.,  12500., 13860., 15284., 16772., 16078.,
      17798., 19614., 21526., 10078., 11478., 12974., 14566., 2030.,  3110.,
      4286.,  5558.,  4414.,  5430.,  6542.,  7750.,  6990.,  8198.,  9502.,
      10902., 5460.,  6308.,  7220.,  8196.,  1786.,  2146.,  2538.,  2962.,
      4106.,  4658.,  5242.,  5858.,  10356., 11588., 12884., 14244., 14718.,
      16502., 18382., 20358., 16078., 17798., 19614., 21526., 10078., 11478.,
      12974., 14566., 2030.,  3110.,  4286.,  5558.,  4414.,  5430.,  6542.,
      7750.,  3828.,  4548.,  5332.,  6180.,  1354.,  1650.,  1978.,  2338.,
      3162.,  3650.,  4170.,  4722.,  8212.,  9316.,  10484., 11716., 12142.,
      13734., 15422., 17206., 14718., 16502., 18382., 20358., 16078., 17798.,
      19614., 21526., 10078., 11478., 12974., 14566., 2030.,  3110.,  4286.,
      5558.,  2196.,  2788.,  3444.,  4164.,  922.,   1154.,  1418.,  1714.,
      2218.,  2642.,  3098.,  3586.,  6068.,  7044.,  8084.,  9188.,  9566.,
      10966., 12462., 14054., 12142., 13734., 15422., 17206., 14718., 16502.,
      18382., 20358., 16078., 17798., 19614., 21526., 10078., 11478., 12974.,
      14566., 756.,   1476.,  2260.,  3108.,  490.,   658.,   858.,   1090.,
      333.,   449.,   581.,   729.,   1098.,  1394.,  1722.,  2082.,  2423.,
      2963.,  3551.,  4187.,  3263.,  3899.,  4583.,  5315.,  4103.,  4835.,
      5615.,  6443.,  4943.,  5771.,  6647.,  7571.,  4567.,  5235.,  5951.,
      6715.,  2986.,  3410.,  3866.,  4354.,  77.,    193.,   325.,   473.,
      101.,   249.,   413.,   593.,   762.,   1122.,  1514.,  1938.,  2111.,
      2747.,  3431.,  4163.,  4103.,  4835.,  5615.,  6443.,  6095.,  6923.,
      7799.,  8723.,  8087.,  9011.,  9983.,  11003., 10079., 11099., 12167.,
      13283., 8218.,  8962.,  9738.,  10546., 4901.,  5305.,  5725.,  6161.,
      4026.,  4642.,  5290.,  5970.,  5972.,  6820.,  7732.,  8708.,  8526.,
      9734.,  11038., 12438., 5278.,  6422.,  7662.,  8998.,  8366.,  9702.,
      11134., 12662., 11454., 12982., 14606., 16326., 14542., 16262., 18078.,
      19990., 7700.,  8804.,  9972.,  11204., 5050.,  5666.,  6314.,  6994.,
      9930.,  10738., 11578., 12450., 8308.,  9540.,  10836., 12196., 11966.,
      13494., 15118., 16838., 8526.,  9734.,  11038., 12438., 5278.,  6422.,
      7662.,  8998.,  8366.,  9702.,  11134., 12662., 11454., 12982., 14606.,
      16326., 6068.,  7044.,  8084.,  9188.,  4106.,  4658.,  5242.,  5858.,
      8474.,  9218.,  9994.,  10802., 13524., 14884., 16308., 17796., 13358.,
      15206., 17150., 19190., 11966., 13494., 15118., 16838., 8526.,  9734.,
      11038., 12438., 5278.,  6422.,  7662.,  8998.,  8366.,  9702.,  11134.,
      12662., 4436.,  5284.,  6196.,  7172.,  3162.,  3650.,  4170.,  4722.,
      7018.,  7698.,  8410.,  9154.,  11380., 12612., 13908., 15268., 17630.,
      19542., 21550., 23654., 13358., 15206., 17150., 19190., 11966., 13494.,
      15118., 16838., 8526.,  9734.,  11038., 12438., 5278.,  6422.,  7662.,
      8998.,  2804.,  3524.,  4308.,  5156.,  2218.,  2642.,  3098.,  3586.,
      5562.,  6178.,  6826.,  7506.,  9236.,  10340., 11508., 12740., 14542.,
      16262., 18078., 19990., 17630., 19542., 21550., 23654., 13358., 15206.,
      17150., 19190., 11966., 13494., 15118., 16838., 8526.,  9734.,  11038.,
      12438., 1172.,  1764.,  2420.,  3140.,  1274.,  1634.,  2026.,  2450.,
      4106.,  4658.,  5242.,  5858.,  7092.,  8068.,  9108.,  10212., 11454.,
      12982., 14606., 16326., 14542., 16262., 18078., 19990., 17630., 19542.,
      21550., 23654., 13358., 15206., 17150., 19190., 11966., 13494., 15118.,
      16838., 5876.,  6596.,  7380.,  8228.,  330.,   626.,   954.,   1314.,
      2013.,  2321.,  2645.,  2985.,  2986.,  3410.,  3866.,  4354.,  4263.,
      4867.,  5519.,  6219.,  5359.,  6059.,  6807.,  7603.,  6455.,  7251.,
      8095.,  8987.,  7551.,  8443.,  9383.,  10371., 1287.,  2019.,  2799.,
      3627.,  1098.,  1394.,  1722.,  2082.,  29.,    81.,    149.,   233.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  2074.,
      4042.,  6394.,  9130.,  5626.,  8362.,  11482., 14986., 8538.,  11018.,
      13882., 17130., 7354.,  9578.,  12186., 15178., 2074.,  4042.,  6394.,
      9130.,  5116.,  6940.,  9020.,  11356., 4766.,  5934.,  7230.,  8654.,
      1020.,  2844.,  4924.,  7260.,  7544.,  10168., 13304., 16952., 14708.,
      19156., 24372., 30356., 14004., 18964., 24692., 31188., 9204.,  14676.,
      20916., 27924., 16052., 21012., 26740., 33236., 14708., 19156., 24372.,
      30356., 3448.,  6072.,  9208.,  12856., 5116.,  6940.,  9020.,  11356.,
      10556., 12892., 15484., 18332., 4088.,  7736.,  11896., 16568., 16052.,
      21012., 26740., 33236., 14708., 19156., 24372., 30356., 14004., 18964.,
      24692., 31188., 9204.,  14676., 20916., 27924., 16052., 21012., 26740.,
      33236., 7544.,  10168., 13304., 16952., 1724.,  3036.,  4604.,  6428.,
      7164.,  8988.,  11068., 13404., 12280., 15928., 20088., 24760., 9204.,
      14676., 20916., 27924., 16052., 21012., 26740., 33236., 14708., 19156.,
      24372., 30356., 14004., 18964., 24692., 31188., 9204.,  14676., 20916.,
      27924., 12280., 15928., 20088., 24760., 7164.,  8988.,  11068., 13404.,
      3772.,  5084.,  6652.,  8476.,  7544.,  10168., 13304., 16952., 14004.,
      18964., 24692., 31188., 9204.,  14676., 20916., 27924., 16052., 21012.,
      26740., 33236., 14708., 19156., 24372., 30356., 14004., 18964., 24692.,
      31188., 8184.,  11832., 15992., 20664., 8508.,  10844., 13436., 16284.,
      1020.,  2844.,  4924.,  7260.,  7544.,  10168., 13304., 16952., 14708.,
      19156., 24372., 30356., 14004., 18964., 24692., 31188., 9204.,  14676.,
      20916., 27924., 16052., 21012., 26740., 33236., 14708., 19156., 24372.,
      30356., 3448.,  6072.,  9208.,  12856., 5116.,  6940.,  9020.,  11356.,
      10556., 12892., 15484., 18332., 4088.,  7736.,  11896., 16568., 16052.,
      21012., 26740., 33236., 14708., 19156., 24372., 30356., 14004., 18964.,
      24692., 31188., 9204.,  14676., 20916., 27924., 16052., 21012., 26740.,
      33236., 7544.,  10168., 13304., 16952., 1724.,  3036.,  4604.,  6428.,
      6974.,  8398.,  9950.,  11630., 10556., 12892., 15484., 18332., 3578.,
      6314.,  9434.,  12938., 7514.,  9994.,  12858., 16106., 7354.,  9578.,
      12186., 15178., 11930., 14922., 18298., 22058., 3578.,  6314.,  9434.,
      12938., 3772.,  5084.,  6652.,  8476.,  190.,   590.,   1118.,  1774.,
      350.,   1006.,  1790.,  2702.,  3068.,  4892.,  6972.,  9308.,  8538.,
      11018., 13882., 17130., 14138., 17386., 21018., 25034., 10906., 13898.,
      17274., 21034., 3578.,  6314.,  9434.,  12938., 8538.,  11018., 13882.,
      17130., 7164.,  8988.,  11068., 13404., 350.,   1006.,  1790.,  2702.,
      7164.,  8988.,  11068., 13404., 12280., 15928., 20088., 24760., 9204.,
      14676., 20916., 27924., 20788., 26772., 33524., 41044., 28276., 34772.,
      42036., 50068., 22836., 28820., 35572., 43092., 9204.,  14676., 20916.,
      27924., 12280., 15928., 20088., 24760., 7164.,  8988.,  11068., 13404.,
      8508.,  10844., 13436., 16284., 21112., 25784., 30968., 36664., 22836.,
      28820., 35572., 43092., 9204.,  14676., 20916., 27924., 20788., 26772.,
      33524., 41044., 28276., 34772., 42036., 50068., 22836., 28820., 35572.,
      43092., 4088.,  7736.,  11896., 16568., 3772.,  5084.,  6652.,  8476.,
      5116.,  6940.,  9020.,  11356., 17016., 21688., 26872., 32568., 28276.,
      34772., 42036., 50068., 22836., 28820., 35572., 43092., 9204.,  14676.,
      20916., 27924., 20788., 26772., 33524., 41044., 28276., 34772., 42036.,
      50068., 21112., 25784., 30968., 36664., 1020.,  2844.,  4924.,  7260.,
      1724.,  3036.,  4604.,  6428.,  8184.,  11832., 15992., 20664., 20788.,
      26772., 33524., 41044., 28276., 34772., 42036., 50068., 22836., 28820.,
      35572., 43092., 9204.,  14676., 20916., 27924., 20788., 26772., 33524.,
      41044., 21112., 25784., 30968., 36664., 10556., 12892., 15484., 18332.,
      7164.,  8988.,  11068., 13404., 12280., 15928., 20088., 24760., 9204.,
      14676., 20916., 27924., 20788., 26772., 33524., 41044., 28276., 34772.,
      42036., 50068., 22836., 28820., 35572., 43092., 9204.,  14676., 20916.,
      27924., 12280., 15928., 20088., 24760., 7164.,  8988.,  11068., 13404.,
      8508.,  10844., 13436., 16284., 21112., 25784., 30968., 36664., 22836.,
      28820., 35572., 43092., 9204.,  14676., 20916., 27924., 20788., 26772.,
      33524., 41044., 28276., 34772., 42036., 50068., 22836., 28820., 35572.,
      43092., 4088.,  7736.,  11896., 16568., 3772.,  5084.,  6652.,  8476.,
      2558.,  3470.,  4510.,  5678.,  8508.,  10844., 13436., 16284., 14138.,
      17386., 21018., 25034., 11930., 14922., 18298., 22058., 5626.,  8362.,
      11482., 14986., 12250., 15754., 19642., 23914., 14138., 17386., 21018.,
      25034., 10556., 12892., 15484., 18332., 510.,   1422.,  2462.,  3630.,
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  2074.,
      4042.,  6394.,  9130.,  5626.,  8362.,  11482., 14986., 8538.,  11018.,
      13882., 17130., 7354.,  9578.,  12186., 15178., 2074.,  4042.,  6394.,
      9130.,  5116.,  6940.,  9020.,  11356., 4766.,  5934.,  7230.,  8654.,
      1020.,  2844.,  4924.,  7260.,  7544.,  10168., 13304., 16952., 14708.,
      19156., 24372., 30356., 14004., 18964., 24692., 31188., 9204.,  14676.,
      20916., 27924., 16052., 21012., 26740., 33236., 14708., 19156., 24372.,
      30356., 3448.,  6072.,  9208.,  12856., 5116.,  6940.,  9020.,  11356.,
      10556., 12892., 15484., 18332., 4088.,  7736.,  11896., 16568., 16052.,
      21012., 26740., 33236., 14708., 19156., 24372., 30356., 14004., 18964.,
      24692., 31188., 9204.,  14676., 20916., 27924., 16052., 21012., 26740.,
      33236., 7544.,  10168., 13304., 16952., 1724.,  3036.,  4604.,  6428.,
      7164.,  8988.,  11068., 13404., 12280., 15928., 20088., 24760., 9204.,
      14676., 20916., 27924., 16052., 21012., 26740., 33236., 14708., 19156.,
      24372., 30356., 14004., 18964., 24692., 31188., 9204.,  14676., 20916.,
      27924., 12280., 15928., 20088., 24760., 7164.,  8988.,  11068., 13404.,
      3772.,  5084.,  6652.,  8476.,  7544.,  10168., 13304., 16952., 14004.,
      18964., 24692., 31188., 9204.,  14676., 20916., 27924., 16052., 21012.,
      26740., 33236., 14708., 19156., 24372., 30356., 14004., 18964., 24692.,
      31188., 8184.,  11832., 15992., 20664., 8508.,  10844., 13436., 16284.,
      1020.,  2844.,  4924.,  7260.,  7544.,  10168., 13304., 16952., 14708.,
      19156., 24372., 30356., 14004., 18964., 24692., 31188., 9204.,  14676.,
      20916., 27924., 16052., 21012., 26740., 33236., 14708., 19156., 24372.,
      30356., 3448.,  6072.,  9208.,  12856., 5116.,  6940.,  9020.,  11356.,
      10556., 12892., 15484., 18332., 4088.,  7736.,  11896., 16568., 16052.,
      21012., 26740., 33236., 14708., 19156., 24372., 30356., 14004., 18964.,
      24692., 31188., 9204.,  14676., 20916., 27924., 16052., 21012., 26740.,
      33236., 7544.,  10168., 13304., 16952., 1724.,  3036.,  4604.,  6428.,
      6974.,  8398.,  9950.,  11630., 10556., 12892., 15484., 18332., 3578.,
      6314.,  9434.,  12938., 7514.,  9994.,  12858., 16106., 7354.,  9578.,
      12186., 15178., 11930., 14922., 18298., 22058., 3578.,  6314.,  9434.,
      12938., 3772.,  5084.,  6652.,  8476.,  190.,   590.,   1118.,  1774.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2220.,  3070.,  4046.,  5152.,  5558.,  5964.,  6370.,  5930.,  5340.,
      4596.,  4600.,  6225.,  8050.,  10080., 10710., 11340., 11970., 10975.,
      9750.,  8290.,  8270.,  11035., 14091., 17444., 18347., 19250., 20153.,
      18285., 16090., 13562., 13510., 17786., 22397., 27350., 28319., 29224.,
      30065., 26552., 23110., 19284., 19450., 24778., 30447., 36464., 36985.,
      37442., 37835., 32846., 28370., 23504., 23418., 29255., 35417., 41910.,
      41955., 41936., 41853., 35835., 30800., 25398., 24976., 30677., 36670.,
      42960., 42480., 41936., 41328., 34879., 29900., 24594., 23844., 28694.,
      33786., 39124., 38070., 36952., 35770., 29558., 25320., 20812., 5548.,
      7390.,  9422.,  11648., 12054., 12460., 12866., 11690., 10300., 8692.,
      9880.,  13025., 16450., 20160., 20790., 21356., 21858., 19535., 16902.,
      13954., 15310., 19915., 24843., 30100., 31003., 31394., 31721., 28013.,
      23946., 19514., 20966., 27130., 33677., 40614., 41839., 42104., 42305.,
      37160., 31590., 25588., 23322., 30090., 37247., 44800., 46025., 45842.,
      45595., 39870., 33714., 27120., 23546., 30295., 37401., 44870., 46067.,
      45408., 44685., 38843., 32608., 25974., 20912., 26885., 33166., 39760.,
      40880., 39696., 38448., 33199., 27612., 21682., 15140., 19510., 24122.,
      28980., 29974., 28216., 26394., 22518., 18376., 13964., 8684.,  11326.,
      14158., 17184., 17206., 17164., 17570., 15722., 13660., 11380., 13432.,
      17137., 21074., 25248., 25046., 24780., 25410., 22591., 19510., 16162.,
      18574., 23483., 28683., 34180., 33803., 33362., 34265., 30381., 26170.,
      21626., 24390., 30714., 37405., 44470., 43967., 43400., 44625., 39512.,
      33990., 28052., 24058., 30090., 36495., 43280., 42329., 41314., 42539.,
      37742., 32530., 26896., 21434., 26471., 31833., 37526., 36099., 34608.,
      35805., 31803., 27440., 22710., 15504., 18677., 22110., 25808., 23856.,
      21840., 22960., 20575., 17900., 14930., 12452., 16150., 20090., 24276.,
      25270., 26264., 27258., 24182., 20840., 17228.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    10.,   20.,   30.,   40.,   50.,   52.,   45.,   28.,
      13.,   41.,   86.,   150.,  186.,  222.,  258.,  239.,  191.,  112.,
      55.,   139.,  254.,  402.,  438.,  474.,  510.,  449.,  345.,  196.,
      97.,   237.,  422.,  654.,  690.,  726.,  762.,  659.,  499.,  280.,
      139.,  335.,  590.,  906.,  942.,  978.,  1014., 869.,  653.,  364.,
      181.,  433.,  758.,  1158., 1194., 1230., 1266., 1079., 807.,  448.,
      223.,  531.,  926.,  1410., 1446., 1482., 1518., 1289., 961.,  532.,
      215.,  478.,  790.,  1152., 1178., 1204., 1230., 1006., 727.,  392.,
      9.,    28.,   58.,   100.,  142.,  184.,  226.,  196.,  149.,  84.,
      85.,   201.,  350.,  534.,  634.,  734.,  834.,  695.,  511.,  280.,
      239.,  523.,  854.,  1234., 1334., 1434., 1534., 1241., 889.,  476.,
      393.,  845.,  1358., 1934., 2034., 2134., 2234., 1787., 1267., 672.,
      547.,  1167., 1862., 2634., 2734., 2834., 2934., 2333., 1645., 868.,
      701.,  1489., 2366., 3334., 3434., 3534., 3634., 2879., 2023., 1064.,
      855.,  1811., 2870., 4034., 4134., 4234., 4334., 3425., 2401., 1260.,
      559.,  1174., 1846., 2576., 2634., 2692., 2750., 2158., 1503., 784.,
      17.,   52.,   106.,  180.,  254.,  328.,  402.,  340.,  253.,  140.,
      157.,  361.,  614.,  918.,  1082., 1246., 1410., 1151., 831.,  448.,
      423.,  907.,  1454., 2066., 2230., 2394., 2558., 2033., 1433., 756.,
      689.,  1453., 2294., 3214., 3378., 3542., 3706., 2915., 2035., 1064.,
      955.,  1999., 3134., 4362., 4526., 4690., 4854., 3797., 2637., 1372.,
      1221., 2545., 3974., 5510., 5674., 5838., 6002., 4679., 3239., 1680.,
      1487., 3091., 4814., 6658., 6822., 6986., 7150., 5561., 3841., 1988.,
      903.,  1870., 2902., 4000., 4090., 4180., 4270., 3310., 2279., 1176.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6560.,  8376.,  10544., 11208., 10112., 10808., 12240., 11520., 10128.,
      8640.,  9020.,  11761., 14930., 17831., 17489., 16795., 17605., 14542.,
      10555., 7492.,  11168., 14296., 17936., 20504., 20796., 19840., 19236.,
      17656., 15020., 12400., 12940., 16605., 20874., 25227., 25937., 24375.,
      23933., 21022., 17779., 13636., 18172., 21025., 24530., 28039., 28109.,
      27059., 25977., 20614., 15767., 13300., 15984., 17828., 20200., 24588.,
      26208., 25940., 26664., 22896., 18664., 16224., 12700., 15289., 18274.,
      19807., 19033., 19571., 19949., 15646., 11955., 9476.,  12992., 14416.,
      16224., 17328., 17320., 17856., 18136., 16080., 13672., 10528., 6560.,
      8376.,  10544., 11208., 10112., 10808., 12240., 11520., 10128., 8640.,
      9020.,  11761., 14930., 17831., 17489., 16795., 17605., 14542., 10555.,
      7492.,  11168., 14296., 17936., 20504., 20796., 19840., 19236., 17656.,
      15020., 12400., 12940., 16605., 20874., 25227., 25937., 24375., 23933.,
      21022., 17779., 13636., 18172., 21025., 24530., 28039., 28109., 27059.,
      25977., 20614., 15767., 13300., 15984., 17828., 20200., 24588., 26208.,
      25940., 26664., 22896., 18664., 16224., 12700., 15289., 18274., 19807.,
      19033., 19571., 19949., 15646., 11955., 9476.,  12992., 14416., 16224.,
      17328., 17320., 17856., 18136., 16080., 13672., 10528., 6560.,  8376.,
      10544., 11208., 10112., 10808., 12240., 11520., 10128., 8640.,  9020.,
      11761., 14930., 17831., 17489., 16795., 17605., 14542., 10555., 7492.,
      11168., 14296., 17936., 20504., 20796., 19840., 19236., 17656., 15020.,
      12400., 12940., 16605., 20874., 25227., 25937., 24375., 23933., 21022.,
      17779., 13636., 18172., 21025., 24530., 28039., 28109., 27059., 25977.,
      20614., 15767., 13300., 15984., 17828., 20200., 24588., 26208., 25940.,
      26664., 22896., 18664., 16224., 12700., 15289., 18274., 19807., 19033.,
      19571., 19949., 15646., 11955., 9476.,  12992., 14416., 16224., 17328.,
      17320., 17856., 18136., 16080., 13672., 10528.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    59.,    124.,   196.,   268.,   340.,   365.,   322.,
      203.,   76.,    264.,   580.,   1040.,  1312.,  1584.,  1856.,  1744.,
      1408.,  832.,   384.,   992.,   1840.,  2944.,  3216.,  3488.,  3760.,
      3340.,  2584.,  1476.,  692.,   1720.,  3100.,  4848.,  5120.,  5392.,
      5664.,  4936.,  3760.,  2120.,  1000.,  2448.,  4360.,  6752.,  7024.,
      7296.,  7568.,  6532.,  4936.,  2764.,  1308.,  3176.,  5620.,  8656.,
      8928.,  9200.,  9472.,  8128.,  6112.,  3408.,  1616.,  3904.,  6880.,
      10560., 10832., 11104., 11376., 9724.,  7288.,  4052.,  1625.,  3630.,
      6023.,  8812.,  9012.,  9212.,  9412.,  7721.,  5594.,  3023.,  53.,
      182.,   395.,   700.,   1028.,  1356.,  1684.,  1469.,  1122.,  635.,
      620.,   1480.,  2596.,  3984.,  4768.,  5552.,  6336.,  5296.,  3904.,
      2144.,  1824.,  4000.,  6544.,  9472.,  10256., 11040., 11824., 9580.,
      6872.,  3684.,  3028.,  6520.,  10492., 14960., 15744., 16528., 17312.,
      13864., 9840.,  5224.,  4232.,  9040.,  14440., 20448., 21232., 22016.,
      22800., 18148., 12808., 6764.,  5436.,  11560., 18388., 25936., 26720.,
      27504., 28288., 22432., 15776., 8304.,  6640.,  14080., 22336., 31424.,
      32208., 32992., 33776., 26716., 18744., 9844.,  4361.,  9166.,  14423.,
      20140., 20596., 21052., 21508., 16889., 11770., 6143.,  101.,   342.,
      731.,   1276.,  1860.,  2444.,  3028.,  2573.,  1922.,  1067.,  1164.,
      2696.,  4612.,  6928.,  8224.,  9520.,  10816., 8848.,  6400.,  3456.,
      3264.,  7008.,  11248., 16000., 17296., 18592., 19888., 15820., 11160.,
      5892.,  5364.,  11320., 17884., 25072., 26368., 27664., 28960., 22792.,
      15920., 8328.,  7464.,  15632., 24520., 34144., 35440., 36736., 38032.,
      29764., 20680., 10764., 9564.,  19944., 31156., 43216., 44512., 45808.,
      47104., 36736., 25440., 13200., 11664., 24256., 37792., 52288., 53584.,
      54880., 56176., 43708., 30200., 15636., 7097.,  14702., 22823., 31468.,
      32180., 32892., 33604., 26057., 17946., 9263.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16672., 18696., 25520., 29912., 28664., 27096., 27384., 19632., 18472.,
      16160., 19704., 23582., 28244., 35226., 37394., 35338., 38210., 29444.,
      22710., 18904., 23280., 29628., 37096., 43188., 48004., 45012., 45924.,
      38856., 29196., 18288., 30984., 36578., 46572., 52070., 54990., 54710.,
      53214., 42492., 36586., 25704., 35656., 40018., 47628., 54710., 53214.,
      49862., 52782., 41756., 35674., 29864., 31152., 37644., 41800., 45732.,
      47028., 43396., 45524., 37096., 30364., 25840., 24248., 29822., 36116.,
      37498., 37938., 38570., 40354., 35204., 27414., 19224., 21216., 22632.,
      27760., 31416., 31448., 32696., 34264., 27696., 23048., 14624., 16672.,
      18696., 25520., 29912., 28664., 27096., 27384., 19632., 18472., 16160.,
      19704., 23582., 28244., 35226., 37394., 35338., 38210., 29444., 22710.,
      18904., 23280., 29628., 37096., 43188., 48004., 45012., 45924., 38856.,
      29196., 18288., 30984., 36578., 46572., 52070., 54990., 54710., 53214.,
      42492., 36586., 25704., 35656., 40018., 47628., 54710., 53214., 49862.,
      52782., 41756., 35674., 29864., 31152., 37644., 41800., 45732., 47028.,
      43396., 45524., 37096., 30364., 25840., 24248., 29822., 36116., 37498.,
      37938., 38570., 40354., 35204., 27414., 19224., 21216., 22632., 27760.,
      31416., 31448., 32696., 34264., 27696., 23048., 14624., 16672., 18696.,
      25520., 29912., 28664., 27096., 27384., 19632., 18472., 16160., 19704.,
      23582., 28244., 35226., 37394., 35338., 38210., 29444., 22710., 18904.,
      23280., 29628., 37096., 43188., 48004., 45012., 45924., 38856., 29196.,
      18288., 30984., 36578., 46572., 52070., 54990., 54710., 53214., 42492.,
      36586., 25704., 35656., 40018., 47628., 54710., 53214., 49862., 52782.,
      41756., 35674., 29864., 31152., 37644., 41800., 45732., 47028., 43396.,
      45524., 37096., 30364., 25840., 24248., 29822., 36116., 37498., 37938.,
      38570., 40354., 35204., 27414., 19224., 21216., 22632., 27760., 31416.,
      31448., 32696., 34264., 27696., 23048., 14624.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   856.,   1400.,  1944.,  2488.,  2722.,  2428.,
      1542.,  500.,   1864.,  4220.,  7696.,  9808.,  11920., 14032., 13292.,
      10792., 6404.,  2852.,  7464.,  13324., 20176., 19600., 18000., 20112.,
      17660., 13576., 7732.,  4564.,  10760., 13980., 18064., 13392., 7696.,
      9808.,  9740.,  8168.,  4964.,  2180.,  5864.,  11180., 18256., 19728.,
      20176., 19600., 14108., 10952., 6292.,  3892.,  9160.,  15932., 24336.,
      21712., 18064., 13392., 6188.,  5544.,  3524.,  1508.,  4264.,  8396.,
      14032., 16144., 18256., 19728., 16956., 12040., 4852.,  3150.,  7276.,
      12442., 18712., 20280., 21848., 18680., 14002., 7900.,  310.,   350.,
      1292.,  2890.,  5208.,  7800.,  10392., 12984., 11362., 8700.,  4934.,
      4724.,  11336., 19964., 30736., 36944., 43152., 49360., 41324., 30504.,
      16772., 14244., 31272., 42380., 55504., 50832., 45136., 51344., 42620.,
      31240., 17076., 14932., 32520., 39964., 49296., 40528., 30736., 36944.,
      31628., 23784., 13284., 11524., 25576., 42284., 61776., 59152., 55504.,
      50832., 32924., 24520., 13588., 12212., 26824., 43964., 63760., 57040.,
      49296., 40528., 21932., 17064., 9796.,  8804.,  19880., 33356., 49360.,
      55568., 61776., 59152., 46012., 29704., 10100., 8590.,  18668., 30298.,
      43544., 47160., 50776., 41464., 29810., 16220., 630.,   30.,    140.,
      394.,   856.,   1400.,  1944.,  2488.,  2722.,  2428.,  1542.,  500.,
      1864.,  4220.,  7696.,  9808.,  11920., 14032., 13292., 10792., 6404.,
      2852.,  7464.,  13324., 20176., 19600., 18000., 20112., 17660., 13576.,
      7732.,  4564.,  10760., 13980., 18064., 13392., 7696.,  9808.,  9740.,
      8168.,  4964.,  2180.,  5864.,  11180., 18256., 19728., 20176., 19600.,
      14108., 10952., 6292.,  3892.,  9160.,  15932., 24336., 21712., 18064.,
      13392., 6188.,  5544.,  3524.,  1508.,  4264.,  8396.,  14032., 16144.,
      18256., 19728., 16956., 12040., 4852.,  3150.,  7276.,  12442., 18712.,
      20280., 21848., 18680., 14002., 7900.,  310.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7664.,  8496.,  10464., 11512., 13624., 14904., 17160., 18688., 18024.,
      19544., 18760., 20272., 20328., 21896., 18872., 20264., 16960., 18160.,
      14576., 15568., 13788., 14944., 17997., 19396., 22602., 24264., 27623.,
      29568., 28089., 30040., 28427., 30384., 30493., 32520., 27538., 29308.,
      23939., 25432., 19676., 20872., 20328., 21688., 24684., 26348., 29540.,
      31532., 34920., 37264., 34672., 37036., 34296., 36680., 36544., 39012.,
      32580., 34740., 27844., 29672., 22312., 23784., 24308., 26008., 28277.,
      30312., 32790., 35188., 37875., 40664., 36661., 39420., 35191., 37920.,
      37113., 39876., 32030., 34400., 26939., 28952., 20980., 22608., 25236.,
      26984., 26873., 28968., 29078., 31548., 35975., 38848., 37065., 39908.,
      37899., 40712., 38925., 41772., 34094., 36536., 30127., 32200., 25268.,
      26944., 26632., 28264., 32008., 33948., 37892., 40164., 44308., 46936.,
      43508., 46092., 42452., 44992., 42484., 45044., 35556., 37740., 30472.,
      32320., 24584., 26072., 26716., 28096., 29189., 30804., 32042., 33912.,
      35295., 37440., 32409., 34496., 29267., 31296., 28109., 30144., 21442.,
      23164., 17667., 19120., 13244., 14408., 20784., 21904., 20024., 21336.,
      19576., 21096., 19456., 21200., 17168., 18904., 18848., 20576., 20400.,
      22120., 18488., 19928., 16360., 17568., 13680., 14640., 15088., 16048.,
      20000., 21240., 25400., 26936., 29448., 31232., 29032., 30808., 28488.,
      30256., 27816., 29576., 23992., 25512., 19584., 20848., 14576., 15568.,
      23516., 24928., 28973., 30724., 35018., 37128., 38919., 41344., 38105.,
      40536., 37099., 39472., 35837., 38152., 29330., 31292., 21987., 23576.,
      13788., 14984., 24936., 26424., 29548., 31404., 34788., 37036., 37032.,
      39632., 35504., 38124., 32888., 35464., 30016., 32548., 27332., 29492.,
      23748., 25512., 19240., 20584., 22004., 23704., 28949., 31080., 36630.,
      39220., 44627., 47640., 46677., 49724., 46743., 49760., 46553., 49540.,
      40606., 43168., 33627., 35736., 25588., 27216., 26772., 28520., 33689.,
      35880., 41366., 44028., 48487., 51584., 49641., 52772., 47915., 51016.,
      45933., 49004., 38830., 41464., 30671., 32840., 21428., 23104., 23304.,
      24808., 27784., 29660., 32900., 35172., 38676., 41368., 41204., 43980.,
      40084., 42880., 38836., 41652., 32868., 35308., 25992., 28032., 22280.,
      23896., 18268., 19648., 24165., 25876., 30634., 32696., 37695., 40128.,
      39929., 42432., 41715., 44224., 43373., 45888., 38594., 40764., 32995.,
      34800., 26556., 27976., 20784., 21904., 25720., 27096., 31096., 32744.,
      36928., 38864., 38672., 40664., 39072., 41056., 39344., 41320., 33848.,
      35544., 27688., 29088., 20848., 21936., 7664.,  8496.,  10464., 11512.,
      13624., 14904., 17160., 18688., 18024., 19544., 18760., 20272., 20328.,
      21896., 18872., 20264., 16960., 18160., 14576., 15568., 13788., 14944.,
      17997., 19396., 22602., 24264., 27623., 29568., 28089., 30040., 28427.,
      30384., 30493., 32520., 27538., 29308., 23939., 25432., 19676., 20872.,
      20328., 21688., 24684., 26348., 29540., 31532., 34920., 37264., 34672.,
      37036., 34296., 36680., 36544., 39012., 32580., 34740., 27844., 29672.,
      22312., 23784., 24308., 26008., 28277., 30312., 32790., 35188., 37875.,
      40664., 36661., 39420., 35191., 37920., 37113., 39876., 32030., 34400.,
      26939., 28952., 20980., 22608., 25236., 26984., 26873., 28968., 29078.,
      31548., 35975., 38848., 37065., 39908., 37899., 40712., 38925., 41772.,
      34094., 36536., 30127., 32200., 25268., 26944., 26632., 28264., 32008.,
      33948., 37892., 40164., 44308., 46936., 43508., 46092., 42452., 44992.,
      42484., 45044., 35556., 37740., 30472., 32320., 24584., 26072., 26716.,
      28096., 29189., 30804., 32042., 33912., 35295., 37440., 32409., 34496.,
      29267., 31296., 28109., 30144., 21442., 23164., 17667., 19120., 13244.,
      14408., 20784., 21904., 20024., 21336., 19576., 21096., 19456., 21200.,
      17168., 18904., 18848., 20576., 20400., 22120., 18488., 19928., 16360.,
      17568., 13680., 14640.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     6.,     16.,    19.,    40.,    44.,    80.,    76.,
      120.,   108.,   160.,   140.,   200.,   157.,   208.,   142.,   180.,
      91.,    112.,   24.,    52.,    100.,   164.,   236.,   344.,   440.,
      600.,   568.,   744.,   696.,   888.,   824.,   1032.,  788.,   956.,
      644.,   764.,   384.,   448.,   164.,   220.,   436.,   556.,   824.,
      1016.,  1336.,  1608.,  1464.,  1752.,  1592.,  1896.,  1720.,  2040.,
      1544.,  1796.,  1204.,  1380.,  692.,   784.,   304.,   388.,   772.,
      948.,   1412.,  1688.,  2232.,  2616.,  2360.,  2760.,  2488.,  2904.,
      2616.,  3048.,  2300.,  2636.,  1764.,  1996.,  1000.,  1120.,  444.,
      556.,   1108.,  1340.,  2000.,  2360.,  3128.,  3624.,  3256.,  3768.,
      3384.,  3912.,  3512.,  4056.,  3056.,  3476.,  2324.,  2612.,  1308.,
      1456.,  584.,   724.,   1444.,  1732.,  2588.,  3032.,  4024.,  4632.,
      4152.,  4776.,  4280.,  4920.,  4408.,  5064.,  3812.,  4316.,  2884.,
      3228.,  1616.,  1792.,  724.,   892.,   1780.,  2124.,  3176.,  3704.,
      4920.,  5640.,  5048.,  5784.,  5176.,  5928.,  5304.,  6072.,  4568.,
      5156.,  3444.,  3844.,  1924.,  2128.,  765.,   860.,   1718.,  1912.,
      2863.,  3160.,  4204.,  4608.,  4300.,  4712.,  4396.,  4816.,  4492.,
      4920.,  3697.,  4024.,  2686.,  2908.,  1455.,  1568.,  17.,    36.,
      70.,    112.,   163.,   232.,   300.,   400.,   460.,   568.,   620.,
      736.,   780.,   904.,   685.,   784.,   526.,   596.,   299.,   336.,
      280.,   340.,   676.,   804.,   1196.,  1400.,  1848.,  2136.,  2232.,
      2536.,  2616.,  2936.,  3000.,  3336.,  2516.,  2780.,  1860.,  2044.,
      1024.,  1120.,  868.,   956.,   1908.,  2092.,  3128.,  3416.,  4536.,
      4936.,  4920.,  5336.,  5304.,  5736.,  5688.,  6136.,  4616.,  4964.,
      3316.,  3556.,  1780.,  1904.,  1456.,  1572.,  3140.,  3380.,  5060.,
      5432.,  7224.,  7736.,  7608.,  8136.,  7992.,  8536.,  8376.,  8936.,
      6716.,  7148.,  4772.,  5068.,  2536.,  2688.,  2044.,  2188.,  4372.,
      4668.,  6992.,  7448.,  9912.,  10536., 10296., 10936., 10680., 11336.,
      11064., 11736., 8816.,  9332.,  6228.,  6580.,  3292.,  3472.,  2632.,
      2804.,  5604.,  5956.,  8924.,  9464.,  12600., 13336., 12984., 13736.,
      13368., 14136., 13752., 14536., 10916., 11516., 7684.,  8092.,  4048.,
      4256.,  3220.,  3420.,  6836.,  7244.,  10856., 11480., 15288., 16136.,
      15672., 16536., 16056., 16936., 16440., 17336., 13016., 13700., 9140.,
      9604.,  4804.,  5040.,  2125.,  2236.,  4470.,  4696.,  7039.,  7384.,
      9836.,  10304., 10060., 10536., 10284., 10768., 10508., 11000., 8257.,
      8632.,  5758.,  6012.,  3007.,  3136.,  33.,    68.,    134.,   208.,
      307.,   424.,   556.,   720.,   844.,   1016.,  1132.,  1312.,  1420.,
      1608.,  1213.,  1360.,  910.,   1012.,  507.,   560.,   536.,   628.,
      1252.,  1444.,  2156.,  2456.,  3256.,  3672.,  3896.,  4328.,  4536.,
      4984.,  5176.,  5640.,  4244.,  4604.,  3076.,  3324.,  1664.,  1792.,
      1572.,  1692.,  3380.,  3628.,  5432.,  5816.,  7736.,  8264.,  8376.,
      8920.,  9016.,  9576.,  9656.,  10232., 7688.,  8132.,  5428.,  5732.,
      2868.,  3024.,  2608.,  2756.,  5508.,  5812.,  8708.,  9176.,  12216.,
      12856., 12856., 13512., 13496., 14168., 14136., 14824., 11132., 11660.,
      7780.,  8140.,  4072.,  4256.,  3644.,  3820.,  7636.,  7996.,  11984.,
      12536., 16696., 17448., 17336., 18104., 17976., 18760., 18616., 19416.,
      14576., 15188., 10132., 10548., 5276.,  5488.,  4680.,  4884.,  9764.,
      10180., 15260., 15896., 21176., 22040., 21816., 22696., 22456., 23352.,
      23096., 24008., 18020., 18716., 12484., 12956., 6480.,  6720.,  5716.,
      5948.,  11892., 12364., 18536., 19256., 25656., 26632., 26296., 27288.,
      26936., 27944., 27576., 28600., 21464., 22244., 14836., 15364., 7684.,
      7952.,  3485.,  3612.,  7222.,  7480.,  11215., 11608., 15468., 16000.,
      15820., 16360., 16172., 16720., 16524., 17080., 12817., 13240., 8830.,
      9116.,  4559.,  4704.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7344.,  9328.,  8140.,  10556., 11272., 14248., 13188., 16724., 12532.,
      16132., 11780., 15316., 11892., 15492., 8328.,  11304., 7996.,  10476.,
      7088.,  9072.,  8596.,  11108., 10277., 13305., 12270., 15974., 15407.,
      19819., 16403., 20991., 15415., 19923., 16827., 21383., 12822., 16622.,
      9785.,  12925., 8228.,  10676., 10088., 13192., 12890., 16738., 16220.,
      20876., 18894., 24294., 21222., 26782., 19774., 25238., 20214., 25710.,
      17132., 21724., 12722., 16474., 7720.,  10568., 13612., 17372., 15979.,
      20599., 20498., 26074., 22849., 29221., 24237., 30753., 24153., 30557.,
      23397., 29817., 18570., 23922., 16071., 20515., 11132., 14572., 15884.,
      19772., 17651., 22367., 20994., 26634., 24153., 30557., 23397., 29817.,
      21777., 28085., 23165., 29617., 18170., 23586., 15567., 20107., 13148.,
      16716., 13832., 17320., 16754., 20890., 18476., 23324., 20118., 25614.,
      20750., 26278., 18982., 24414., 19966., 25558., 16220., 20876., 13226.,
      17138., 11368., 14472., 10676., 13572., 13173., 16649., 16014., 20102.,
      16447., 21051., 16643., 21295., 16999., 21571., 17803., 22551., 15574.,
      19630., 12041., 15373., 8324.,  10900., 9424.,  11792., 9884.,  12748.,
      12200., 15560., 13844., 17572., 13828., 17620., 14484., 18212., 15236.,
      19028., 12232., 15464., 10188., 12860., 6320.,  8304.,  7344.,  9328.,
      8140.,  10556., 11272., 14248., 13188., 16724., 12532., 16132., 11780.,
      15316., 11892., 15492., 8328.,  11304., 7996.,  10476., 7088.,  9072.,
      8596.,  11108., 10277., 13305., 12270., 15974., 15407., 19819., 16403.,
      20991., 15415., 19923., 16827., 21383., 12822., 16622., 9785.,  12925.,
      8228.,  10676., 10088., 13192., 12890., 16738., 16220., 20876., 18894.,
      24294., 21222., 26782., 19774., 25238., 20214., 25710., 17132., 21724.,
      12722., 16474., 7720.,  10568., 13612., 17372., 15979., 20599., 20498.,
      26074., 22849., 29221., 24237., 30753., 24153., 30557., 23397., 29817.,
      18570., 23922., 16071., 20515., 11132., 14572., 15884., 19772., 17651.,
      22367., 20994., 26634., 24153., 30557., 23397., 29817., 21777., 28085.,
      23165., 29617., 18170., 23586., 15567., 20107., 13148., 16716., 13832.,
      17320., 16754., 20890., 18476., 23324., 20118., 25614., 20750., 26278.,
      18982., 24414., 19966., 25558., 16220., 20876., 13226., 17138., 11368.,
      14472., 10676., 13572., 13173., 16649., 16014., 20102., 16447., 21051.,
      16643., 21295., 16999., 21571., 17803., 22551., 15574., 19630., 12041.,
      15373., 8324.,  10900., 9424.,  11792., 9884.,  12748., 12200., 15560.,
      13844., 17572., 13828., 17620., 14484., 18212., 15236., 19028., 12232.,
      15464., 10188., 12860., 6320.,  8304.,  7344.,  9328.,  8140.,  10556.,
      11272., 14248., 13188., 16724., 12532., 16132., 11780., 15316., 11892.,
      15492., 8328.,  11304., 7996.,  10476., 7088.,  9072.,  8596.,  11108.,
      10277., 13305., 12270., 15974., 15407., 19819., 16403., 20991., 15415.,
      19923., 16827., 21383., 12822., 16622., 9785.,  12925., 8228.,  10676.,
      10088., 13192., 12890., 16738., 16220., 20876., 18894., 24294., 21222.,
      26782., 19774., 25238., 20214., 25710., 17132., 21724., 12722., 16474.,
      7720.,  10568., 13612., 17372., 15979., 20599., 20498., 26074., 22849.,
      29221., 24237., 30753., 24153., 30557., 23397., 29817., 18570., 23922.,
      16071., 20515., 11132., 14572., 15884., 19772., 17651., 22367., 20994.,
      26634., 24153., 30557., 23397., 29817., 21777., 28085., 23165., 29617.,
      18170., 23586., 15567., 20107., 13148., 16716., 13832., 17320., 16754.,
      20890., 18476., 23324., 20118., 25614., 20750., 26278., 18982., 24414.,
      19966., 25558., 16220., 20876., 13226., 17138., 11368., 14472., 10676.,
      13572., 13173., 16649., 16014., 20102., 16447., 21051., 16643., 21295.,
      16999., 21571., 17803., 22551., 15574., 19630., 12041., 15373., 8324.,
      10900., 9424.,  11792., 9884.,  12748., 12200., 15560., 13844., 17572.,
      13828., 17620., 14484., 18212., 15236., 19028., 12232., 15464., 10188.,
      12860., 6320.,  8304.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   292.,   564.,   532.,
      868.,   772.,   1172.,  1012.,  1476.,  1163.,  1559.,  1066.,  1362.,
      689.,   853.,   142.,   358.,   684.,   1180.,  1690.,  2530.,  3224.,
      4472.,  4216.,  5592.,  5208.,  6712.,  6200.,  7832.,  5986.,  7306.,
      4924.,  5868.,  2950.,  3454.,  1206.,  1646.,  3260.,  4204.,  6034.,
      7290.,  9272.,  10904., 9048.,  10552., 8312.,  9688.,  9304.,  10808.,
      8218.,  9442.,  6348.,  7228.,  3630.,  4102.,  2078.,  2486.,  4940.,
      5820.,  6410.,  7570.,  8280.,  9784.,  6008.,  7384.,  3224.,  4472.,
      4216.,  5592.,  4306.,  5434.,  3676.,  4492.,  2262.,  2702.,  902.,
      1278.,  2524.,  3340.,  4930.,  6250.,  8184.,  10072., 8984.,  10744.,
      9272.,  10904., 9048.,  10552., 6538.,  7570.,  5100.,  5852.,  2942.,
      3350.,  1774.,  2118.,  4204.,  4956.,  7354.,  8578.,  11288., 13048.,
      10040., 11672., 8280.,  9784.,  6008.,  7384.,  2626.,  3562.,  2428.,
      3116.,  1574.,  1950.,  598.,   910.,   1788.,  2476.,  3634.,  4762.,
      6200.,  7832.,  7192.,  8952.,  8184.,  10072., 8984.,  10744., 7802.,
      9154.,  5580.,  6460.,  2254.,  2598.,  1453.,  1697.,  3378.,  3898.,
      5807.,  6635.,  8772.,  9940.,  9524.,  10756., 10276., 11572., 8788.,
      9892.,  6595.,  7407.,  3706.,  4194.,  89.,    221.,   101.,   249.,
      482.,   810.,   1175.,  1715.,  2212.,  2996.,  3476.,  4324.,  4740.,
      5652.,  6004.,  6980.,  5291.,  6071.,  4074.,  4626.,  2321.,  2613.,
      2126.,  2598.,  5164.,  6172.,  9178.,  10786., 14232., 16504., 17272.,
      19672., 20312., 22840., 23352., 26008., 19618., 21706., 14524., 15980.,
      8006.,  8766.,  6774.,  7470.,  14908., 16364., 20178., 22202., 26424.,
      29080., 24152., 26680., 21368., 23768., 24408., 26936., 20314., 22306.,
      14924., 16316., 8174.,  8902.,  7134.,  7798.,  15564., 16956., 19018.,
      20946., 23384., 25912., 19064., 21464., 14232., 16504., 17272., 19672.,
      14866., 16762., 11228., 12556., 6294.,  6990.,  5446.,  6078.,  12124.,
      13452., 20098., 22186., 29432., 32344., 28184., 30968., 26424., 29080.,
      24152., 26680., 15562., 17362., 11628., 12892., 6462.,  7126.,  5806.,
      6406.,  12780., 14044., 20986., 22978., 30488., 33272., 27192., 29848.,
      23384., 25912., 19064., 21464., 10114., 11818., 7932.,  9132.,  4582.,
      5214.,  4118.,  4686.,  9340.,  10540., 15730., 17626., 23352., 26008.,
      26392., 29176., 29432., 32344., 28184., 30968., 21946., 24066., 14156.,
      15548., 4750.,  5350.,  4109.,  4481.,  8946.,  9722.,  14543., 15755.,
      20932., 22612., 22708., 24452., 24484., 26292., 19924., 21540., 14307.,
      15503., 7738.,  8482.,  185.,   445.,   5.,     25.,    34.,    106.,
      119.,   275.,   292.,   564.,   532.,   868.,   772.,   1172.,  1012.,
      1476.,  1163.,  1559.,  1066.,  1362.,  689.,   853.,   142.,   358.,
      684.,   1180.,  1690.,  2530.,  3224.,  4472.,  4216.,  5592.,  5208.,
      6712.,  6200.,  7832.,  5986.,  7306.,  4924.,  5868.,  2950.,  3454.,
      1206.,  1646.,  3260.,  4204.,  6034.,  7290.,  9272.,  10904., 9048.,
      10552., 8312.,  9688.,  9304.,  10808., 8218.,  9442.,  6348.,  7228.,
      3630.,  4102.,  2078.,  2486.,  4940.,  5820.,  6410.,  7570.,  8280.,
      9784.,  6008.,  7384.,  3224.,  4472.,  4216.,  5592.,  4306.,  5434.,
      3676.,  4492.,  2262.,  2702.,  902.,   1278.,  2524.,  3340.,  4930.,
      6250.,  8184.,  10072., 8984.,  10744., 9272.,  10904., 9048.,  10552.,
      6538.,  7570.,  5100.,  5852.,  2942.,  3350.,  1774.,  2118.,  4204.,
      4956.,  7354.,  8578.,  11288., 13048., 10040., 11672., 8280.,  9784.,
      6008.,  7384.,  2626.,  3562.,  2428.,  3116.,  1574.,  1950.,  598.,
      910.,   1788.,  2476.,  3634.,  4762.,  6200.,  7832.,  7192.,  8952.,
      8184.,  10072., 8984.,  10744., 7802.,  9154.,  5580.,  6460.,  2254.,
      2598.,  1453.,  1697.,  3378.,  3898.,  5807.,  6635.,  8772.,  9940.,
      9524.,  10756., 10276., 11572., 8788.,  9892.,  6595.,  7407.,  3706.,
      4194.,  89.,    221.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  2104.,  4216.,  3960.,
      6584.,  5816.,  8952.,  7672.,  11320., 8938.,  12058., 8252.,  10588.,
      5358.,  6654.,  940.,   2636.,  4376.,  7256.,  9412.,  13988., 16560.,
      23344., 17584., 24368., 25392., 33200., 33200., 42032., 32420., 39812.,
      26968., 32408., 16332., 19308., 8588.,  11052., 13016., 17432., 19940.,
      25796., 28464., 36272., 16560., 23344., 17584., 24368., 25392., 33200.,
      25796., 32420., 22040., 26968., 13612., 16332., 7404.,  9612.,  18968.,
      23896., 26372., 33508., 36272., 45104., 28464., 36272., 16560., 23344.,
      17584., 24368., 19172., 25028., 17112., 21528., 10892., 13356., 6220.,
      8172.,  16088., 20504., 30116., 37508., 39984., 49840., 36272., 45104.,
      28464., 36272., 16560., 23344., 12548., 17636., 12184., 16088., 8172.,
      10380., 5036.,  6732.,  13208., 17112., 25028., 31652., 41008., 50864.,
      39984., 49840., 36272., 45104., 28464., 36272., 12708., 18052., 7256.,
      10648., 5452.,  7404.,  3852.,  5292.,  10328., 13720., 19940., 25796.,
      33200., 42032., 41008., 50864., 39984., 49840., 36272., 45104., 25796.,
      32420., 9112.,  13016., 2732.,  4428.,  2558.,  3470.,  6812.,  8892.,
      13018., 16522., 21432., 26616., 27384., 33080., 33336., 39544., 30456.,
      36152., 24074., 28474., 14204., 17052., 590.,   1630.,  30.,    174.,
      220.,   764.,   826.,   2026.,  2104.,  4216.,  3960.,  6584.,  5816.,
      8952.,  7672.,  11320., 8938.,  12058., 8252.,  10588., 5358.,  6654.,
      940.,   2636.,  4376.,  7256.,  9412.,  13988., 16560., 23344., 17584.,
      24368., 25392., 33200., 33200., 42032., 32420., 39812., 26968., 32408.,
      16332., 19308., 8588.,  11052., 13016., 17432., 19940., 25796., 28464.,
      36272., 16560., 23344., 17584., 24368., 25392., 33200., 25796., 32420.,
      22040., 26968., 13612., 16332., 7404.,  9612.,  18968., 23896., 26372.,
      33508., 36272., 45104., 28464., 36272., 16560., 23344., 17584., 24368.,
      19172., 25028., 17112., 21528., 10892., 13356., 6220.,  8172.,  16088.,
      20504., 30116., 37508., 39984., 49840., 36272., 45104., 28464., 36272.,
      16560., 23344., 12548., 17636., 12184., 16088., 8172.,  10380., 5036.,
      6732.,  13208., 17112., 25028., 31652., 41008., 50864., 39984., 49840.,
      36272., 45104., 28464., 36272., 12708., 18052., 7256.,  10648., 5452.,
      7404.,  3852.,  5292.,  10328., 13720., 19940., 25796., 33200., 42032.,
      41008., 50864., 39984., 49840., 36272., 45104., 25796., 32420., 9112.,
      13016., 2732.,  4428.,  2558.,  3470.,  6812.,  8892.,  13018., 16522.,
      21432., 26616., 27384., 33080., 33336., 39544., 30456., 36152., 24074.,
      28474., 14204., 17052., 590.,   1630.,  30.,    174.,   220.,   764.,
      826.,   2026.,  2104.,  4216.,  3960.,  6584.,  5816.,  8952.,  7672.,
      11320., 8938.,  12058., 8252.,  10588., 5358.,  6654.,  940.,   2636.,
      4376.,  7256.,  9412.,  13988., 16560., 23344., 17584., 24368., 25392.,
      33200., 33200., 42032., 32420., 39812., 26968., 32408., 16332., 19308.,
      8588.,  11052., 13016., 17432., 19940., 25796., 28464., 36272., 16560.,
      23344., 17584., 24368., 25392., 33200., 25796., 32420., 22040., 26968.,
      13612., 16332., 7404.,  9612.,  18968., 23896., 26372., 33508., 36272.,
      45104., 28464., 36272., 16560., 23344., 17584., 24368., 19172., 25028.,
      17112., 21528., 10892., 13356., 6220.,  8172.,  16088., 20504., 30116.,
      37508., 39984., 49840., 36272., 45104., 28464., 36272., 16560., 23344.,
      12548., 17636., 12184., 16088., 8172.,  10380., 5036.,  6732.,  13208.,
      17112., 25028., 31652., 41008., 50864., 39984., 49840., 36272., 45104.,
      28464., 36272., 12708., 18052., 7256.,  10648., 5452.,  7404.,  3852.,
      5292.,  10328., 13720., 19940., 25796., 33200., 42032., 41008., 50864.,
      39984., 49840., 36272., 45104., 25796., 32420., 9112.,  13016., 2732.,
      4428.,  2558.,  3470.,  6812.,  8892.,  13018., 16522., 21432., 26616.,
      27384., 33080., 33336., 39544., 30456., 36152., 24074., 28474., 14204.,
      17052., 590.,   1630.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11376., 12224., 13104., 14016., 14540., 15616., 16732., 17888., 18344.,
      19680., 21064., 22496., 19204., 20768., 22388., 24064., 17044., 18592.,
      20196., 21856., 18468., 20000., 21588., 23232., 21236., 22816., 24452.,
      26144., 20232., 21600., 23016., 24480., 17948., 19072., 20236., 21440.,
      15408., 16320., 17264., 18240., 15524., 16752., 18020., 19328., 20433.,
      21940., 23497., 25104., 26118., 27944., 29830., 31776., 31315., 33436.,
      35627., 37888., 30607., 32740., 34943., 37216., 29323., 31404., 33555.,
      35776., 30919., 33012., 35175., 37408., 25422., 27208., 29054., 30960.,
      18157., 19596., 21085., 22624., 12692., 13808., 14964., 16160., 19528.,
      20896., 22312., 23776., 25098., 26800., 28562., 30384., 31596., 33680.,
      35836., 38064., 35982., 38432., 40966., 43584., 36486., 38976., 41550.,
      44208., 34622., 37088., 39638., 42272., 33334., 35840., 38430., 41104.,
      30876., 33040., 35276., 37584., 26402., 28176., 30010., 31904., 21928.,
      23328., 24776., 26272., 22236., 24016., 25852., 27744., 28759., 30932.,
      33175., 35488., 36378., 39000., 41706., 44496., 44309., 47308., 50405.,
      53600., 45721., 48724., 51825., 55024., 42717., 45660., 48701., 51840.,
      41825., 44772., 47817., 50960., 36914., 39416., 42002., 44672., 31323.,
      33388., 35523., 37728., 23916., 25552., 27244., 28992., 32508., 34384.,
      36316., 38304., 37359., 39652., 42015., 44448., 43402., 46168., 49018.,
      51952., 49597., 52764., 56029., 59392., 49729., 52900., 56169., 59536.,
      47749., 50860., 54069., 57376., 45577., 48692., 51905., 55216., 35810.,
      38456., 41186., 44000., 27059., 29244., 31499., 33824., 23052., 24784.,
      26572., 28416., 28584., 30240., 31944., 33696., 31570., 33568., 35626.,
      37744., 35516., 37904., 40364., 42896., 43526., 46288., 49134., 52064.,
      46686., 49488., 52374., 55344., 46198., 48976., 51838., 54784., 47566.,
      50384., 53286., 56272., 40876., 43280., 45756., 48304., 33226., 35232.,
      37298., 39424., 29128., 30752., 32424., 34144., 22500., 23920., 25380.,
      26880., 27137., 28820., 30553., 32336., 32486., 34472., 36518., 38624.,
      34979., 37244., 39579., 41984., 33407., 35684., 38031., 40448., 34587.,
      36812., 39107., 41472., 35319., 37556., 39863., 42240., 27438., 29320.,
      31262., 33264., 20733., 22284., 23885., 25536., 16404., 17648., 18932.,
      20256., 23600., 24768., 25968., 27200., 25948., 27360., 28812., 30304.,
      29000., 30688., 32424., 34208., 30708., 32640., 34628., 36672., 30596.,
      32576., 34612., 36704., 31700., 33664., 35684., 37760., 32292., 34240.,
      36244., 38304., 28776., 30432., 32136., 33888., 24492., 25888., 27324.,
      28800., 18800., 19904., 21040., 22208., 11376., 12224., 13104., 14016.,
      14540., 15616., 16732., 17888., 18344., 19680., 21064., 22496., 19204.,
      20768., 22388., 24064., 17044., 18592., 20196., 21856., 18468., 20000.,
      21588., 23232., 21236., 22816., 24452., 26144., 20232., 21600., 23016.,
      24480., 17948., 19072., 20236., 21440., 15408., 16320., 17264., 18240.,
      15524., 16752., 18020., 19328., 20433., 21940., 23497., 25104., 26118.,
      27944., 29830., 31776., 31315., 33436., 35627., 37888., 30607., 32740.,
      34943., 37216., 29323., 31404., 33555., 35776., 30919., 33012., 35175.,
      37408., 25422., 27208., 29054., 30960., 18157., 19596., 21085., 22624.,
      12692., 13808., 14964., 16160., 19528., 20896., 22312., 23776., 25098.,
      26800., 28562., 30384., 31596., 33680., 35836., 38064., 35982., 38432.,
      40966., 43584., 36486., 38976., 41550., 44208., 34622., 37088., 39638.,
      42272., 33334., 35840., 38430., 41104., 30876., 33040., 35276., 37584.,
      26402., 28176., 30010., 31904., 21928., 23328., 24776., 26272., 22236.,
      24016., 25852., 27744., 28759., 30932., 33175., 35488., 36378., 39000.,
      41706., 44496., 44309., 47308., 50405., 53600., 45721., 48724., 51825.,
      55024., 42717., 45660., 48701., 51840., 41825., 44772., 47817., 50960.,
      36914., 39416., 42002., 44672., 31323., 33388., 35523., 37728., 23916.,
      25552., 27244., 28992., 32508., 34384., 36316., 38304., 37359., 39652.,
      42015., 44448., 43402., 46168., 49018., 51952., 49597., 52764., 56029.,
      59392., 49729., 52900., 56169., 59536., 47749., 50860., 54069., 57376.,
      45577., 48692., 51905., 55216., 35810., 38456., 41186., 44000., 27059.,
      29244., 31499., 33824., 23052., 24784., 26572., 28416., 28584., 30240.,
      31944., 33696., 31570., 33568., 35626., 37744., 35516., 37904., 40364.,
      42896., 43526., 46288., 49134., 52064., 46686., 49488., 52374., 55344.,
      46198., 48976., 51838., 54784., 47566., 50384., 53286., 56272., 40876.,
      43280., 45756., 48304., 33226., 35232., 37298., 39424., 29128., 30752.,
      32424., 34144., 22500., 23920., 25380., 26880., 27137., 28820., 30553.,
      32336., 32486., 34472., 36518., 38624., 34979., 37244., 39579., 41984.,
      33407., 35684., 38031., 40448., 34587., 36812., 39107., 41472., 35319.,
      37556., 39863., 42240., 27438., 29320., 31262., 33264., 20733., 22284.,
      23885., 25536., 16404., 17648., 18932., 20256., 23600., 24768., 25968.,
      27200., 25948., 27360., 28812., 30304., 29000., 30688., 32424., 34208.,
      30708., 32640., 34628., 36672., 30596., 32576., 34612., 36704., 31700.,
      33664., 35684., 37760., 32292., 34240., 36244., 38304., 28776., 30432.,
      32136., 33888., 24492., 25888., 27324., 28800., 18800., 19904., 21040.,
      22208., 11376., 12224., 13104., 14016., 14540., 15616., 16732., 17888.,
      18344., 19680., 21064., 22496., 19204., 20768., 22388., 24064., 17044.,
      18592., 20196., 21856., 18468., 20000., 21588., 23232., 21236., 22816.,
      24452., 26144., 20232., 21600., 23016., 24480., 17948., 19072., 20236.,
      21440., 15408., 16320., 17264., 18240., 15524., 16752., 18020., 19328.,
      20433., 21940., 23497., 25104., 26118., 27944., 29830., 31776., 31315.,
      33436., 35627., 37888., 30607., 32740., 34943., 37216., 29323., 31404.,
      33555., 35776., 30919., 33012., 35175., 37408., 25422., 27208., 29054.,
      30960., 18157., 19596., 21085., 22624., 12692., 13808., 14964., 16160.,
      19528., 20896., 22312., 23776., 25098., 26800., 28562., 30384., 31596.,
      33680., 35836., 38064., 35982., 38432., 40966., 43584., 36486., 38976.,
      41550., 44208., 34622., 37088., 39638., 42272., 33334., 35840., 38430.,
      41104., 30876., 33040., 35276., 37584., 26402., 28176., 30010., 31904.,
      21928., 23328., 24776., 26272., 22236., 24016., 25852., 27744., 28759.,
      30932., 33175., 35488., 36378., 39000., 41706., 44496., 44309., 47308.,
      50405., 53600., 45721., 48724., 51825., 55024., 42717., 45660., 48701.,
      51840., 41825., 44772., 47817., 50960., 36914., 39416., 42002., 44672.,
      31323., 33388., 35523., 37728., 23916., 25552., 27244., 28992., 32508.,
      34384., 36316., 38304., 37359., 39652., 42015., 44448., 43402., 46168.,
      49018., 51952., 49597., 52764., 56029., 59392., 49729., 52900., 56169.,
      59536., 47749., 50860., 54069., 57376., 45577., 48692., 51905., 55216.,
      35810., 38456., 41186., 44000., 27059., 29244., 31499., 33824., 23052.,
      24784., 26572., 28416., 28584., 30240., 31944., 33696., 31570., 33568.,
      35626., 37744., 35516., 37904., 40364., 42896., 43526., 46288., 49134.,
      52064., 46686., 49488., 52374., 55344., 46198., 48976., 51838., 54784.,
      47566., 50384., 53286., 56272., 40876., 43280., 45756., 48304., 33226.,
      35232., 37298., 39424., 29128., 30752., 32424., 34144., 22500., 23920.,
      25380., 26880., 27137., 28820., 30553., 32336., 32486., 34472., 36518.,
      38624., 34979., 37244., 39579., 41984., 33407., 35684., 38031., 40448.,
      34587., 36812., 39107., 41472., 35319., 37556., 39863., 42240., 27438.,
      29320., 31262., 33264., 20733., 22284., 23885., 25536., 16404., 17648.,
      18932., 20256., 23600., 24768., 25968., 27200., 25948., 27360., 28812.,
      30304., 29000., 30688., 32424., 34208., 30708., 32640., 34628., 36672.,
      30596., 32576., 34612., 36704., 31700., 33664., 35684., 37760., 32292.,
      34240., 36244., 38304., 28776., 30432., 32136., 33888., 24492., 25888.,
      27324., 28800., 18800., 19904., 21040., 22208.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   116.,   176.,   244.,   320.,   228.,   304.,
      388.,   480.,   340.,   432.,   532.,   640.,   452.,   560.,   676.,
      800.,   535.,   628.,   727.,   832.,   498.,   568.,   642.,   720.,
      325.,   364.,   405.,   448.,   46.,    96.,    150.,   208.,   284.,
      400.,   524.,   656.,   746.,   944.,   1154.,  1376.,  1464.,  1760.,
      2072.,  2400.,  1944.,  2272.,  2616.,  2976.,  2424.,  2784.,  3160.,
      3552.,  2904.,  3296.,  3704.,  4128.,  2834.,  3152.,  3482.,  3824.,
      2348.,  2576.,  2812.,  3056.,  1414.,  1536.,  1662.,  1792.,  550.,
      656.,   766.,   880.,   1516.,  1744.,  1980.,  2224.,  2866.,  3168.,
      3482.,  3808.,  4440.,  4832.,  5240.,  5664.,  4344.,  4704.,  5080.,
      5472.,  3992.,  4320.,  4664.,  5024.,  4472.,  4832.,  5208.,  5600.,
      3962.,  4256.,  4562.,  4880.,  3068.,  3280.,  3500.,  3728.,  1758.,
      1872.,  1990.,  2112.,  990.,   1088.,  1190.,  1296.,  2364.,  2576.,
      2796.,  3024.,  3066.,  3344.,  3634.,  3936.,  3960.,  4320.,  4696.,
      5088.,  2840.,  3168.,  3512.,  3872.,  1464.,  1760.,  2072.,  2400.,
      1944.,  2272.,  2616.,  2976.,  2018.,  2288.,  2570.,  2864.,  1740.,
      1936.,  2140.,  2352.,  1078.,  1184.,  1294.,  1408.,  406.,   496.,
      590.,   688.,   1164.,  1360.,  1564.,  1776.,  2306.,  2624.,  2954.,
      3296.,  3864.,  4320.,  4792.,  5280.,  4280.,  4704.,  5144.,  5600.,
      4440.,  4832.,  5240.,  5664.,  4344.,  4704.,  5080.,  5472.,  3146.,
      3392.,  3650.,  3920.,  2460.,  2640.,  2828.,  3024.,  1422.,  1520.,
      1622.,  1728.,  846.,   928.,   1014.,  1104.,  2012.,  2192.,  2380.,
      2576.,  3530.,  3824.,  4130.,  4448.,  5432.,  5856.,  6296.,  6752.,
      4824.,  5216.,  5624.,  6048.,  3960.,  4320.,  4696.,  5088.,  2840.,
      3168.,  3512.,  3872.,  1202.,  1424.,  1658.,  1904.,  1132.,  1296.,
      1468.,  1648.,  742.,   832.,   926.,   1024.,  262.,   336.,   414.,
      496.,   812.,   976.,   1148.,  1328.,  1682.,  1952.,  2234.,  2528.,
      2904.,  3296.,  3704.,  4128.,  3384.,  3808.,  4248.,  4704.,  3864.,
      4320.,  4792.,  5280.,  4280.,  4704.,  5144.,  5600.,  3738.,  4064.,
      4402.,  4752.,  2684.,  2896.,  3116.,  3344.,  1086.,  1168.,  1254.,
      1344.,  697.,   756.,   817.,   880.,   1626.,  1752.,  1882.,  2016.,
      2803.,  3004.,  3211.,  3424.,  4244.,  4528.,  4820.,  5120.,  4612.,
      4912.,  5220.,  5536.,  4980.,  5296.,  5620.,  5952.,  4260.,  4528.,
      4804.,  5088.,  3199.,  3396.,  3599.,  3808.,  1794.,  1912.,  2034.,
      2160.,  29.,    60.,    93.,    128.,   33.,    68.,    105.,   144.,
      202.,   280.,   362.,   448.,   523.,   652.,   787.,   928.,   1012.,
      1200.,  1396.,  1600.,  1636.,  1840.,  2052.,  2272.,  2260.,  2480.,
      2708.,  2944.,  2884.,  3120.,  3364.,  3616.,  2551.,  2740.,  2935.,
      3136.,  1970.,  2104.,  2242.,  2384.,  1125.,  1196.,  1269.,  1344.,
      1006.,  1120.,  1238.,  1360.,  2460.,  2704.,  2956.,  3216.,  4394.,
      4784.,  5186.,  5600.,  6840.,  7392.,  7960.,  8544.,  8344.,  8928.,
      9528.,  10144., 9848.,  10464., 11096., 11744., 11352., 12000., 12664.,
      13344., 9554.,  10064., 10586., 11120., 7084.,  7440.,  7804.,  8176.,
      3910.,  4096.,  4286.,  4480.,  3302.,  3472.,  3646.,  3824.,  7276.,
      7632.,  7996.,  8368.,  9842.,  10336., 10842., 11360., 12888., 13536.,
      14200., 14880., 11768., 12384., 13016., 13664., 10392., 10976., 11576.,
      12192., 11896., 12512., 13144., 13792., 9914.,  10400., 10898., 11408.,
      7292.,  7632.,  7980.,  8336.,  3998.,  4176.,  4358.,  4544.,  3486.,
      3648.,  3814.,  3984.,  7612.,  7952.,  8300.,  8656.,  9274.,  9744.,
      10226., 10720., 11384., 12000., 12632., 13280., 9240.,  9824.,  10424.,
      11040., 6840.,  7392.,  7960.,  8544.,  8344.,  8928.,  9528.,  10144.,
      7202.,  7664.,  8138.,  8624.,  5452.,  5776.,  6108.,  6448.,  3062.,
      3232.,  3406.,  3584.,  2646.,  2800.,  2958.,  3120.,  5900.,  6224.,
      6556.,  6896.,  9794.,  10304., 10826., 11360., 14360., 15072., 15800.,
      16544., 13752., 14432., 15128., 15840., 12888., 13536., 14200., 14880.,
      11768., 12384., 13016., 13664., 7562.,  8000.,  8450.,  8912.,  5660.,
      5968.,  6284.,  6608.,  3150.,  3312.,  3478.,  3648.,  2830.,  2976.,
      3126.,  3280.,  6236.,  6544.,  6860.,  7184.,  10250., 10736., 11234.,
      11744., 14904., 15584., 16280., 16992., 13272., 13920., 14584., 15264.,
      11384., 12000., 12632., 13280., 9240.,  9824.,  10424., 11040., 4850.,
      5264.,  5690.,  6128.,  3820.,  4112.,  4412.,  4720.,  2214.,  2368.,
      2526.,  2688.,  1990.,  2128.,  2270.,  2416.,  4524.,  4816.,  5116.,
      5424.,  7634.,  8096.,  8570.,  9056.,  11352., 12000., 12664., 13344.,
      12856., 13536., 14232., 14944., 14360., 15072., 15800., 16544., 13752.,
      14432., 15128., 15840., 10714., 11232., 11762., 12304., 6908.,  7248.,
      7596.,  7952.,  2302.,  2448.,  2598.,  2752.,  2009.,  2100.,  2193.,
      2288.,  4378.,  4568.,  4762.,  4960.,  7123.,  7420.,  7723.,  8032.,
      10260., 10672., 11092., 11520., 11140., 11568., 12004., 12448., 12020.,
      12464., 12916., 13376., 9764.,  10160., 10564., 10976., 7007.,  7300.,
      7599.,  7904.,  3778.,  3960.,  4146.,  4336.,  61.,    124.,   189.,
      256.,   1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,
      43.,    76.,    115.,   160.,   116.,   176.,   244.,   320.,   228.,
      304.,   388.,   480.,   340.,   432.,   532.,   640.,   452.,   560.,
      676.,   800.,   535.,   628.,   727.,   832.,   498.,   568.,   642.,
      720.,   325.,   364.,   405.,   448.,   46.,    96.,    150.,   208.,
      284.,   400.,   524.,   656.,   746.,   944.,   1154.,  1376.,  1464.,
      1760.,  2072.,  2400.,  1944.,  2272.,  2616.,  2976.,  2424.,  2784.,
      3160.,  3552.,  2904.,  3296.,  3704.,  4128.,  2834.,  3152.,  3482.,
      3824.,  2348.,  2576.,  2812.,  3056.,  1414.,  1536.,  1662.,  1792.,
      550.,   656.,   766.,   880.,   1516.,  1744.,  1980.,  2224.,  2866.,
      3168.,  3482.,  3808.,  4440.,  4832.,  5240.,  5664.,  4344.,  4704.,
      5080.,  5472.,  3992.,  4320.,  4664.,  5024.,  4472.,  4832.,  5208.,
      5600.,  3962.,  4256.,  4562.,  4880.,  3068.,  3280.,  3500.,  3728.,
      1758.,  1872.,  1990.,  2112.,  990.,   1088.,  1190.,  1296.,  2364.,
      2576.,  2796.,  3024.,  3066.,  3344.,  3634.,  3936.,  3960.,  4320.,
      4696.,  5088.,  2840.,  3168.,  3512.,  3872.,  1464.,  1760.,  2072.,
      2400.,  1944.,  2272.,  2616.,  2976.,  2018.,  2288.,  2570.,  2864.,
      1740.,  1936.,  2140.,  2352.,  1078.,  1184.,  1294.,  1408.,  406.,
      496.,   590.,   688.,   1164.,  1360.,  1564.,  1776.,  2306.,  2624.,
      2954.,  3296.,  3864.,  4320.,  4792.,  5280.,  4280.,  4704.,  5144.,
      5600.,  4440.,  4832.,  5240.,  5664.,  4344.,  4704.,  5080.,  5472.,
      3146.,  3392.,  3650.,  3920.,  2460.,  2640.,  2828.,  3024.,  1422.,
      1520.,  1622.,  1728.,  846.,   928.,   1014.,  1104.,  2012.,  2192.,
      2380.,  2576.,  3530.,  3824.,  4130.,  4448.,  5432.,  5856.,  6296.,
      6752.,  4824.,  5216.,  5624.,  6048.,  3960.,  4320.,  4696.,  5088.,
      2840.,  3168.,  3512.,  3872.,  1202.,  1424.,  1658.,  1904.,  1132.,
      1296.,  1468.,  1648.,  742.,   832.,   926.,   1024.,  262.,   336.,
      414.,   496.,   812.,   976.,   1148.,  1328.,  1682.,  1952.,  2234.,
      2528.,  2904.,  3296.,  3704.,  4128.,  3384.,  3808.,  4248.,  4704.,
      3864.,  4320.,  4792.,  5280.,  4280.,  4704.,  5144.,  5600.,  3738.,
      4064.,  4402.,  4752.,  2684.,  2896.,  3116.,  3344.,  1086.,  1168.,
      1254.,  1344.,  697.,   756.,   817.,   880.,   1626.,  1752.,  1882.,
      2016.,  2803.,  3004.,  3211.,  3424.,  4244.,  4528.,  4820.,  5120.,
      4612.,  4912.,  5220.,  5536.,  4980.,  5296.,  5620.,  5952.,  4260.,
      4528.,  4804.,  5088.,  3199.,  3396.,  3599.,  3808.,  1794.,  1912.,
      2034.,  2160.,  29.,    60.,    93.,    128.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5840.,  7696.,  9808.,  12176., 6612.,  8868.,  11444., 14340., 8760.,
      11544., 14712., 18264., 10044., 13228., 16860., 20940., 10396., 13708.,
      17468., 21676., 9532.,  12716., 16348., 20428., 10908., 14220., 17980.,
      22188., 8760.,  11544., 14712., 18264., 7476.,  9860.,  12564., 15588.,
      5840.,  7696.,  9808.,  12176., 6660.,  8980.,  11620., 14580., 8717.,
      11457., 14597., 18137., 10662., 14014., 17846., 22158., 11407., 15307.,
      19767., 24787., 12471., 16595., 21279., 26523., 12735., 16699., 21223.,
      26307., 13191., 17251., 21871., 27051., 10582., 13998., 17894., 22270.,
      9141.,  12105., 15469., 19233., 7428.,  9748.,  12388., 15348., 9272.,
      12056., 15224., 18776., 9150.,  12534., 16398., 20742., 12068., 16180.,
      20868., 26132., 15530., 20242., 25626., 31682., 16314., 21218., 26794.,
      33042., 12714., 17426., 22810., 28866., 15034., 19938., 25514., 31762.,
      13348., 17460., 22148., 27412., 11982., 15558., 19614., 24150., 8248.,
      11032., 14200., 17752., 10092., 13340., 17036., 21180., 13095., 17027.,
      21519., 26571., 14834., 19642., 25122., 31274., 15405., 20897., 27173.,
      34233., 18693., 24473., 31037., 38385., 18525., 24081., 30421., 37545.,
      17621., 23337., 29837., 37121., 13890., 18634., 24050., 30138., 13087.,
      17179., 21831., 27043., 10860., 14108., 17804., 21948., 10092., 13340.,
      17036., 21180., 11351., 15347., 19903., 25019., 15698., 20634., 26242.,
      32522., 18525., 24081., 30421., 37545., 17621., 23337., 29837., 37121.,
      15405., 20897., 27173., 34233., 18693., 24473., 31037., 38385., 16290.,
      21162., 26706., 32922., 12879., 17035., 21751., 27027., 9836.,  13084.,
      16780., 20924., 9272.,  12056., 15224., 18776., 11502., 14950., 18878.,
      23286., 12932., 17172., 21988., 27380., 13530., 18306., 23754., 29874.,
      17130., 22098., 27738., 34050., 15834., 20610., 26058., 32178., 14826.,
      19794., 25434., 31746., 12068., 16180., 20868., 26132., 11934., 15446.,
      19438., 23910., 9272.,  12056., 15224., 18776., 6660.,  8980.,  11620.,
      14580., 8813.,  11681., 14949., 18617., 12390., 15998., 20086., 24654.,
      13039., 17067., 21655., 26803., 11703., 15827., 20511., 25755., 12223.,
      16187., 20711., 25795., 14567., 18755., 23503., 28811., 11702., 15246.,
      19270., 23774., 8373.,  11337., 14701., 18465., 7428.,  9748.,  12388.,
      15348., 5840.,  7696.,  9808.,  12176., 7124.,  9380.,  11956., 14852.,
      8760.,  11544., 14712., 18264., 9532.,  12716., 16348., 20428., 10908.,
      14220., 17980., 22188., 10044., 13228., 16860., 20940., 10396., 13708.,
      17468., 21676., 8760.,  11544., 14712., 18264., 7988.,  10372., 13076.,
      16100., 5840.,  7696.,  9808.,  12176., 5840.,  7696.,  9808.,  12176.,
      6612.,  8868.,  11444., 14340., 8760.,  11544., 14712., 18264., 10044.,
      13228., 16860., 20940., 10396., 13708., 17468., 21676., 9532.,  12716.,
      16348., 20428., 10908., 14220., 17980., 22188., 8760.,  11544., 14712.,
      18264., 7476.,  9860.,  12564., 15588., 5840.,  7696.,  9808.,  12176.,
      6660.,  8980.,  11620., 14580., 8717.,  11457., 14597., 18137., 10662.,
      14014., 17846., 22158., 11407., 15307., 19767., 24787., 12471., 16595.,
      21279., 26523., 12735., 16699., 21223., 26307., 13191., 17251., 21871.,
      27051., 10582., 13998., 17894., 22270., 9141.,  12105., 15469., 19233.,
      7428.,  9748.,  12388., 15348., 9272.,  12056., 15224., 18776., 9150.,
      12534., 16398., 20742., 12068., 16180., 20868., 26132., 15530., 20242.,
      25626., 31682., 16314., 21218., 26794., 33042., 12714., 17426., 22810.,
      28866., 15034., 19938., 25514., 31762., 13348., 17460., 22148., 27412.,
      11982., 15558., 19614., 24150., 8248.,  11032., 14200., 17752., 10092.,
      13340., 17036., 21180., 13095., 17027., 21519., 26571., 14834., 19642.,
      25122., 31274., 15405., 20897., 27173., 34233., 18693., 24473., 31037.,
      38385., 18525., 24081., 30421., 37545., 17621., 23337., 29837., 37121.,
      13890., 18634., 24050., 30138., 13087., 17179., 21831., 27043., 10860.,
      14108., 17804., 21948., 10092., 13340., 17036., 21180., 11351., 15347.,
      19903., 25019., 15698., 20634., 26242., 32522., 18525., 24081., 30421.,
      37545., 17621., 23337., 29837., 37121., 15405., 20897., 27173., 34233.,
      18693., 24473., 31037., 38385., 16290., 21162., 26706., 32922., 12879.,
      17035., 21751., 27027., 9836.,  13084., 16780., 20924., 9272.,  12056.,
      15224., 18776., 11502., 14950., 18878., 23286., 12932., 17172., 21988.,
      27380., 13530., 18306., 23754., 29874., 17130., 22098., 27738., 34050.,
      15834., 20610., 26058., 32178., 14826., 19794., 25434., 31746., 12068.,
      16180., 20868., 26132., 11934., 15446., 19438., 23910., 9272.,  12056.,
      15224., 18776., 6660.,  8980.,  11620., 14580., 8813.,  11681., 14949.,
      18617., 12390., 15998., 20086., 24654., 13039., 17067., 21655., 26803.,
      11703., 15827., 20511., 25755., 12223., 16187., 20711., 25795., 14567.,
      18755., 23503., 28811., 11702., 15246., 19270., 23774., 8373.,  11337.,
      14701., 18465., 7428.,  9748.,  12388., 15348., 5840.,  7696.,  9808.,
      12176., 7124.,  9380.,  11956., 14852., 8760.,  11544., 14712., 18264.,
      9532.,  12716., 16348., 20428., 10908., 14220., 17980., 22188., 10044.,
      13228., 16860., 20940., 10396., 13708., 17468., 21676., 8760.,  11544.,
      14712., 18264., 7988.,  10372., 13076., 16100., 5840.,  7696.,  9808.,
      12176., 5840.,  7696.,  9808.,  12176., 6612.,  8868.,  11444., 14340.,
      8760.,  11544., 14712., 18264., 10044., 13228., 16860., 20940., 10396.,
      13708., 17468., 21676., 9532.,  12716., 16348., 20428., 10908., 14220.,
      17980., 22188., 8760.,  11544., 14712., 18264., 7476.,  9860.,  12564.,
      15588., 5840.,  7696.,  9808.,  12176., 6660.,  8980.,  11620., 14580.,
      8717.,  11457., 14597., 18137., 10662., 14014., 17846., 22158., 11407.,
      15307., 19767., 24787., 12471., 16595., 21279., 26523., 12735., 16699.,
      21223., 26307., 13191., 17251., 21871., 27051., 10582., 13998., 17894.,
      22270., 9141.,  12105., 15469., 19233., 7428.,  9748.,  12388., 15348.,
      9272.,  12056., 15224., 18776., 9150.,  12534., 16398., 20742., 12068.,
      16180., 20868., 26132., 15530., 20242., 25626., 31682., 16314., 21218.,
      26794., 33042., 12714., 17426., 22810., 28866., 15034., 19938., 25514.,
      31762., 13348., 17460., 22148., 27412., 11982., 15558., 19614., 24150.,
      8248.,  11032., 14200., 17752., 10092., 13340., 17036., 21180., 13095.,
      17027., 21519., 26571., 14834., 19642., 25122., 31274., 15405., 20897.,
      27173., 34233., 18693., 24473., 31037., 38385., 18525., 24081., 30421.,
      37545., 17621., 23337., 29837., 37121., 13890., 18634., 24050., 30138.,
      13087., 17179., 21831., 27043., 10860., 14108., 17804., 21948., 10092.,
      13340., 17036., 21180., 11351., 15347., 19903., 25019., 15698., 20634.,
      26242., 32522., 18525., 24081., 30421., 37545., 17621., 23337., 29837.,
      37121., 15405., 20897., 27173., 34233., 18693., 24473., 31037., 38385.,
      16290., 21162., 26706., 32922., 12879., 17035., 21751., 27027., 9836.,
      13084., 16780., 20924., 9272.,  12056., 15224., 18776., 11502., 14950.,
      18878., 23286., 12932., 17172., 21988., 27380., 13530., 18306., 23754.,
      29874., 17130., 22098., 27738., 34050., 15834., 20610., 26058., 32178.,
      14826., 19794., 25434., 31746., 12068., 16180., 20868., 26132., 11934.,
      15446., 19438., 23910., 9272.,  12056., 15224., 18776., 6660.,  8980.,
      11620., 14580., 8813.,  11681., 14949., 18617., 12390., 15998., 20086.,
      24654., 13039., 17067., 21655., 26803., 11703., 15827., 20511., 25755.,
      12223., 16187., 20711., 25795., 14567., 18755., 23503., 28811., 11702.,
      15246., 19270., 23774., 8373.,  11337., 14701., 18465., 7428.,  9748.,
      12388., 15348., 5840.,  7696.,  9808.,  12176., 7124.,  9380.,  11956.,
      14852., 8760.,  11544., 14712., 18264., 9532.,  12716., 16348., 20428.,
      10908., 14220., 17980., 22188., 10044., 13228., 16860., 20940., 10396.,
      13708., 17468., 21676., 8760.,  11544., 14712., 18264., 7988.,  10372.,
      13076., 16100., 5840.,  7696.,  9808.,  12176.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  820.,   1284.,  1812.,  2404.,  1684.,  2276.,
      2932.,  3652.,  2548.,  3268.,  4052.,  4900.,  3412.,  4260.,  5172.,
      6148.,  4103.,  4835.,  5615.,  6443.,  3850.,  4402.,  4986.,  5602.,
      2525.,  2833.,  3157.,  3497.,  274.,   666.,   1090.,  1546.,  1860.,
      2516.,  3236.,  4020.,  4182.,  5230.,  6374.,  7614.,  7496.,  9064.,
      10760., 12584., 8008.,  9576.,  11272., 13096., 11784., 13608., 15560.,
      17640., 15560., 17640., 19848., 22184., 15334., 17086., 18934., 20878.,
      12836., 14132., 15492., 16916., 7810.,  8522.,  9266.,  10042., 4002.,
      4586.,  5202.,  5850.,  5988.,  7028.,  8132.,  9300.,  9286.,  10654.,
      12118., 13678., 13320., 15144., 17096., 19176., 7496.,  9064.,  10760.,
      12584., 8008.,  9576.,  11272., 13096., 11784., 13608., 15560., 17640.,
      12118., 13678., 15334., 17086., 10436., 11604., 12836., 14132., 6482.,
      7130.,  7810.,  8522.,  3442.,  3962.,  4514.,  5098.,  8900.,  10068.,
      11300., 12596., 12342., 14030., 15814., 17694., 17096., 19176., 21384.,
      23720., 13320., 15144., 17096., 19176., 7496.,  9064.,  10760., 12584.,
      8008.,  9576.,  11272., 13096., 8902.,  10270., 11734., 13294., 8036.,
      9076.,  10180., 11348., 5154.,  5738.,  6354.,  7002.,  2882.,  3338.,
      3826.,  4346.,  7524.,  8564.,  9668.,  10836., 14182., 15934., 17782.,
      19726., 18824., 21160., 23624., 26216., 17096., 19176., 21384., 23720.,
      13320., 15144., 17096., 19176., 7496.,  9064.,  10760., 12584., 5686.,
      6862.,  8134.,  9502.,  5636.,  6548.,  7524.,  8564.,  3826.,  4346.,
      4898.,  5482.,  2322.,  2714.,  3138.,  3594.,  6148.,  7060.,  8036.,
      9076.,  11734., 13294., 14950., 16702., 19336., 21672., 24136., 26728.,
      18824., 21160., 23624., 26216., 17096., 19176., 21384., 23720., 13320.,
      15144., 17096., 19176., 5734.,  6974.,  8310.,  9742.,  3236.,  4020.,
      4868.,  5780.,  2498.,  2954.,  3442.,  3962.,  1762.,  2090.,  2450.,
      2842.,  4772.,  5556.,  6404.,  7316.,  9286.,  10654., 12118., 13678.,
      15560., 17640., 19848., 22184., 19336., 21672., 24136., 26728., 18824.,
      21160., 23624., 26216., 17096., 19176., 21384., 23720., 12118., 13678.,
      15334., 17086., 4100.,  5012.,  5988.,  7028.,  1170.,  1562.,  1986.,
      2442.,  1173.,  1385.,  1613.,  1857.,  3162.,  3650.,  4170.,  4722.,
      6095.,  6923.,  7799.,  8723.,  10100., 11332., 12628., 13988., 13012.,
      14372., 15796., 17284., 15924., 17412., 18964., 20580., 14548., 15908.,
      17332., 18820., 11511., 12563., 13663., 14811., 6762.,  7442.,  8154.,
      8898.,  173.,   417.,   677.,   953.,   5.,     25.,    61.,    113.,
      58.,    162.,   298.,   466.,   287.,   539.,   839.,   1187.,  820.,
      1284.,  1812.,  2404.,  1684.,  2276.,  2932.,  3652.,  2548.,  3268.,
      4052.,  4900.,  3412.,  4260.,  5172.,  6148.,  4103.,  4835.,  5615.,
      6443.,  3850.,  4402.,  4986.,  5602.,  2525.,  2833.,  3157.,  3497.,
      274.,   666.,   1090.,  1546.,  1860.,  2516.,  3236.,  4020.,  4182.,
      5230.,  6374.,  7614.,  7496.,  9064.,  10760., 12584., 8008.,  9576.,
      11272., 13096., 11784., 13608., 15560., 17640., 15560., 17640., 19848.,
      22184., 15334., 17086., 18934., 20878., 12836., 14132., 15492., 16916.,
      7810.,  8522.,  9266.,  10042., 4002.,  4586.,  5202.,  5850.,  5988.,
      7028.,  8132.,  9300.,  9286.,  10654., 12118., 13678., 13320., 15144.,
      17096., 19176., 7496.,  9064.,  10760., 12584., 8008.,  9576.,  11272.,
      13096., 11784., 13608., 15560., 17640., 12118., 13678., 15334., 17086.,
      10436., 11604., 12836., 14132., 6482.,  7130.,  7810.,  8522.,  3442.,
      3962.,  4514.,  5098.,  8900.,  10068., 11300., 12596., 12342., 14030.,
      15814., 17694., 17096., 19176., 21384., 23720., 13320., 15144., 17096.,
      19176., 7496.,  9064.,  10760., 12584., 8008.,  9576.,  11272., 13096.,
      8902.,  10270., 11734., 13294., 8036.,  9076.,  10180., 11348., 5154.,
      5738.,  6354.,  7002.,  2882.,  3338.,  3826.,  4346.,  7524.,  8564.,
      9668.,  10836., 14182., 15934., 17782., 19726., 18824., 21160., 23624.,
      26216., 17096., 19176., 21384., 23720., 13320., 15144., 17096., 19176.,
      7496.,  9064.,  10760., 12584., 5686.,  6862.,  8134.,  9502.,  5636.,
      6548.,  7524.,  8564.,  3826.,  4346.,  4898.,  5482.,  2322.,  2714.,
      3138.,  3594.,  6148.,  7060.,  8036.,  9076.,  11734., 13294., 14950.,
      16702., 19336., 21672., 24136., 26728., 18824., 21160., 23624., 26216.,
      17096., 19176., 21384., 23720., 13320., 15144., 17096., 19176., 5734.,
      6974.,  8310.,  9742.,  3236.,  4020.,  4868.,  5780.,  2498.,  2954.,
      3442.,  3962.,  1762.,  2090.,  2450.,  2842.,  4772.,  5556.,  6404.,
      7316.,  9286.,  10654., 12118., 13678., 15560., 17640., 19848., 22184.,
      19336., 21672., 24136., 26728., 18824., 21160., 23624., 26216., 17096.,
      19176., 21384., 23720., 12118., 13678., 15334., 17086., 4100.,  5012.,
      5988.,  7028.,  1170.,  1562.,  1986.,  2442.,  1173.,  1385.,  1613.,
      1857.,  3162.,  3650.,  4170.,  4722.,  6095.,  6923.,  7799.,  8723.,
      10100., 11332., 12628., 13988., 13012., 14372., 15796., 17284., 15924.,
      17412., 18964., 20580., 14548., 15908., 17332., 18820., 11511., 12563.,
      13663., 14811., 6762.,  7442.,  8154.,  8898.,  173.,   417.,   677.,
      953.,   5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,
      287.,   539.,   839.,   1187.,  820.,   1284.,  1812.,  2404.,  1684.,
      2276.,  2932.,  3652.,  2548.,  3268.,  4052.,  4900.,  3412.,  4260.,
      5172.,  6148.,  4103.,  4835.,  5615.,  6443.,  3850.,  4402.,  4986.,
      5602.,  2525.,  2833.,  3157.,  3497.,  274.,   666.,   1090.,  1546.,
      1860.,  2516.,  3236.,  4020.,  4182.,  5230.,  6374.,  7614.,  7496.,
      9064.,  10760., 12584., 8008.,  9576.,  11272., 13096., 11784., 13608.,
      15560., 17640., 15560., 17640., 19848., 22184., 15334., 17086., 18934.,
      20878., 12836., 14132., 15492., 16916., 7810.,  8522.,  9266.,  10042.,
      4002.,  4586.,  5202.,  5850.,  5988.,  7028.,  8132.,  9300.,  9286.,
      10654., 12118., 13678., 13320., 15144., 17096., 19176., 7496.,  9064.,
      10760., 12584., 8008.,  9576.,  11272., 13096., 11784., 13608., 15560.,
      17640., 12118., 13678., 15334., 17086., 10436., 11604., 12836., 14132.,
      6482.,  7130.,  7810.,  8522.,  3442.,  3962.,  4514.,  5098.,  8900.,
      10068., 11300., 12596., 12342., 14030., 15814., 17694., 17096., 19176.,
      21384., 23720., 13320., 15144., 17096., 19176., 7496.,  9064.,  10760.,
      12584., 8008.,  9576.,  11272., 13096., 8902.,  10270., 11734., 13294.,
      8036.,  9076.,  10180., 11348., 5154.,  5738.,  6354.,  7002.,  2882.,
      3338.,  3826.,  4346.,  7524.,  8564.,  9668.,  10836., 14182., 15934.,
      17782., 19726., 18824., 21160., 23624., 26216., 17096., 19176., 21384.,
      23720., 13320., 15144., 17096., 19176., 7496.,  9064.,  10760., 12584.,
      5686.,  6862.,  8134.,  9502.,  5636.,  6548.,  7524.,  8564.,  3826.,
      4346.,  4898.,  5482.,  2322.,  2714.,  3138.,  3594.,  6148.,  7060.,
      8036.,  9076.,  11734., 13294., 14950., 16702., 19336., 21672., 24136.,
      26728., 18824., 21160., 23624., 26216., 17096., 19176., 21384., 23720.,
      13320., 15144., 17096., 19176., 5734.,  6974.,  8310.,  9742.,  3236.,
      4020.,  4868.,  5780.,  2498.,  2954.,  3442.,  3962.,  1762.,  2090.,
      2450.,  2842.,  4772.,  5556.,  6404.,  7316.,  9286.,  10654., 12118.,
      13678., 15560., 17640., 19848., 22184., 19336., 21672., 24136., 26728.,
      18824., 21160., 23624., 26216., 17096., 19176., 21384., 23720., 12118.,
      13678., 15334., 17086., 4100.,  5012.,  5988.,  7028.,  1170.,  1562.,
      1986.,  2442.,  1173.,  1385.,  1613.,  1857.,  3162.,  3650.,  4170.,
      4722.,  6095.,  6923.,  7799.,  8723.,  10100., 11332., 12628., 13988.,
      13012., 14372., 15796., 17284., 15924., 17412., 18964., 20580., 14548.,
      15908., 17332., 18820., 11511., 12563., 13663., 14811., 6762.,  7442.,
      8154.,  8898.,  173.,   417.,   677.,   953.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 750.,
      4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610.,
      29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380., 25380.,
      750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,  6264.,
      16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732.,
      35532., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532.,
      1080.,  6264.,  16056., 30456., 900.,   5220.,  13380., 25380., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 1050.,  6090.,
      15610., 29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854.,
      41454., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,
      6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732.,
      35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,
      7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,
      12488., 23688., 720.,   4176.,  10704., 20304., 900.,   5220.,  13380.,
      25380., 1080.,  6264.,  16056., 30456., 1260.,  7308.,  18732., 35532.,
      1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532., 1260.,
      7308.,  18732., 35532., 1080.,  6264.,  16056., 30456., 900.,   5220.,
      13380., 25380., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,
      16920., 750.,   4350.,  11150., 21150., 900.,   5220.,  13380., 25380.,
      1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,
      6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,
      13380., 25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,
      16920., 480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920.,
      720.,   4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,
      4872.,  12488., 23688., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,
      16920., 480.,   2784.,  7136.,  13536., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 720.,   4176.,  10704., 20304., 840.,
      4872.,  12488., 23688., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610.,
      29610., 900.,   5220.,  13380., 25380., 750.,   4350.,  11150., 21150.,
      600.,   3480.,  8920.,  16920., 720.,   4176.,  10704., 20304., 900.,
      5220.,  13380., 25380., 1080.,  6264.,  16056., 30456., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732.,
      35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056., 30456.,
      900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304., 840.,
      4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,
      18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854.,
      41454., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1260.,  7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,
      4872.,  12488., 23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,
      15610., 29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854.,
      41454., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,
      6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 720.,   4176.,
      10704., 20304., 900.,   5220.,  13380., 25380., 1080.,  6264.,  16056.,
      30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532.,
      1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,
      6264.,  16056., 30456., 900.,   5220.,  13380., 25380., 720.,   4176.,
      10704., 20304., 600.,   3480.,  8920.,  16920., 750.,   4350.,  11150.,
      21150., 900.,   5220.,  13380., 25380., 1050.,  6090.,  15610., 29610.,
      1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,
      6090.,  15610., 29610., 900.,   5220.,  13380., 25380., 750.,   4350.,
      11150., 21150., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,
      13536., 600.,   3480.,  8920.,  16920., 720.,   4176.,  10704., 20304.,
      840.,   4872.,  12488., 23688., 840.,   4872.,  12488., 23688., 840.,
      4872.,  12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,
      10704., 20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,
      13536., 480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920.,
      720.,   4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,
      4872.,  12488., 23688., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,
      16920., 480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920.,
      750.,   4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,
      6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732.,
      35532., 1080.,  6264.,  16056., 30456., 900.,   5220.,  13380., 25380.,
      720.,   4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 1050.,
      6090.,  15610., 29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854.,
      41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532.,
      1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 840.,
      4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,
      18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854.,
      41454., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1260.,  7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,
      4872.,  12488., 23688., 720.,   4176.,  10704., 20304., 900.,   5220.,
      13380., 25380., 1080.,  6264.,  16056., 30456., 1260.,  7308.,  18732.,
      35532., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532.,
      1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056., 30456., 900.,
      5220.,  13380., 25380., 720.,   4176.,  10704., 20304., 600.,   3480.,
      8920.,  16920., 750.,   4350.,  11150., 21150., 900.,   5220.,  13380.,
      25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610., 29610.,
      1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 900.,
      5220.,  13380., 25380., 750.,   4350.,  11150., 21150., 600.,   3480.,
      8920.,  16920., 480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,
      16920., 720.,   4176.,  10704., 20304., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 840.,   4872.,  12488., 23688., 840.,
      4872.,  12488., 23688., 720.,   4176.,  10704., 20304., 600.,   3480.,
      8920.,  16920., 480.,   2784.,  7136.,  13536.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  2074.,
      4042.,  6394.,  9130.,  6136.,  9784.,  13944., 18616., 12280., 15928.,
      20088., 24760., 14328., 17976., 22136., 26808., 12280., 15928., 20088.,
      24760., 5626.,  8362.,  11482., 14986., 8508.,  10844., 13436., 16284.,
      6974.,  8398.,  9950.,  11630., 540.,   1596.,  2908.,  4476.,  4152.,
      6264.,  8888.,  12024., 9428.,  13620., 18580., 24308., 18416., 25712.,
      34032., 43376., 18416., 25712., 34032., 43376., 26608., 33904., 42224.,
      51568., 26608., 33904., 42224., 51568., 17556., 23284., 29780., 37044.,
      11576., 15736., 20408., 25592., 10716., 13308., 16156., 19260., 860.,
      2428.,  4252.,  6332.,  6840.,  9976.,  13624., 17784., 15892., 20596.,
      26068., 32308., 26608., 33904., 42224., 51568., 18416., 25712., 34032.,
      43376., 18416., 25712., 34032., 43376., 26608., 33904., 42224., 51568.,
      26068., 32308., 39316., 47092., 13624., 17784., 22456., 27640., 4252.,
      6332.,  8668.,  11260., 540.,   1596.,  2908.,  4476.,  4792.,  7928.,
      11576., 15736., 14164., 19380., 25364., 32116., 26608., 33904., 42224.,
      51568., 26608., 33904., 42224., 51568., 18416., 25712., 34032., 43376.,
      18416., 25712., 34032., 43376., 26388., 33140., 40660., 48948., 24504.,
      29688., 35384., 41592., 10716., 13308., 16156., 19260., 220.,   764.,
      1564.,  2620.,  2104.,  4216.,  6840.,  9976.,  7700.,  12404., 17876.,
      24116., 18416., 25712., 34032., 43376., 26608., 33904., 42224., 51568.,
      26608., 33904., 42224., 51568., 18416., 25712., 34032., 43376., 17876.,
      24116., 31124., 38900., 22456., 27640., 33336., 39544., 17180., 20284.,
      23644., 27260., 540.,   1596.,  2908.,  4476.,  4152.,  6264.,  8888.,
      12024., 9428.,  13620., 18580., 24308., 18416., 25712., 34032., 43376.,
      18416., 25712., 34032., 43376., 26608., 33904., 42224., 51568., 26608.,
      33904., 42224., 51568., 17556., 23284., 29780., 37044., 11576., 15736.,
      20408., 25592., 10716., 13308., 16156., 19260., 860.,   2428.,  4252.,
      6332.,  6840.,  9976.,  13624., 17784., 15892., 20596., 26068., 32308.,
      26608., 33904., 42224., 51568., 18416., 25712., 34032., 43376., 18416.,
      25712., 34032., 43376., 26608., 33904., 42224., 51568., 26068., 32308.,
      39316., 47092., 13624., 17784., 22456., 27640., 4252.,  6332.,  8668.,
      11260., 350.,   1006.,  1790.,  2702.,  3068.,  4892.,  6972.,  9308.,
      8538.,  11018., 13882., 17130., 14328., 17976., 22136., 26808., 12280.,
      15928., 20088., 24760., 6136.,  9784.,  13944., 18616., 12280., 15928.,
      20088., 24760., 14138., 17386., 21018., 25034., 10556., 12892., 15484.,
      18332., 510.,   1422.,  2462.,  3630.,  30.,    174.,   446.,   846.,
      380.,   1180.,  2236.,  3548.,  2074.,  4042.,  6394.,  9130.,  6136.,
      9784.,  13944., 18616., 12280., 15928., 20088., 24760., 14328., 17976.,
      22136., 26808., 12280., 15928., 20088., 24760., 5626.,  8362.,  11482.,
      14986., 8508.,  10844., 13436., 16284., 6974.,  8398.,  9950.,  11630.,
      540.,   1596.,  2908.,  4476.,  4152.,  6264.,  8888.,  12024., 9428.,
      13620., 18580., 24308., 18416., 25712., 34032., 43376., 18416., 25712.,
      34032., 43376., 26608., 33904., 42224., 51568., 26608., 33904., 42224.,
      51568., 17556., 23284., 29780., 37044., 11576., 15736., 20408., 25592.,
      10716., 13308., 16156., 19260., 860.,   2428.,  4252.,  6332.,  6840.,
      9976.,  13624., 17784., 15892., 20596., 26068., 32308., 26608., 33904.,
      42224., 51568., 18416., 25712., 34032., 43376., 18416., 25712., 34032.,
      43376., 26608., 33904., 42224., 51568., 26068., 32308., 39316., 47092.,
      13624., 17784., 22456., 27640., 4252.,  6332.,  8668.,  11260., 540.,
      1596.,  2908.,  4476.,  4792.,  7928.,  11576., 15736., 14164., 19380.,
      25364., 32116., 26608., 33904., 42224., 51568., 26608., 33904., 42224.,
      51568., 18416., 25712., 34032., 43376., 18416., 25712., 34032., 43376.,
      26388., 33140., 40660., 48948., 24504., 29688., 35384., 41592., 10716.,
      13308., 16156., 19260., 220.,   764.,   1564.,  2620.,  2104.,  4216.,
      6840.,  9976.,  7700.,  12404., 17876., 24116., 18416., 25712., 34032.,
      43376., 26608., 33904., 42224., 51568., 26608., 33904., 42224., 51568.,
      18416., 25712., 34032., 43376., 17876., 24116., 31124., 38900., 22456.,
      27640., 33336., 39544., 17180., 20284., 23644., 27260., 540.,   1596.,
      2908.,  4476.,  4152.,  6264.,  8888.,  12024., 9428.,  13620., 18580.,
      24308., 18416., 25712., 34032., 43376., 18416., 25712., 34032., 43376.,
      26608., 33904., 42224., 51568., 26608., 33904., 42224., 51568., 17556.,
      23284., 29780., 37044., 11576., 15736., 20408., 25592., 10716., 13308.,
      16156., 19260., 860.,   2428.,  4252.,  6332.,  6840.,  9976.,  13624.,
      17784., 15892., 20596., 26068., 32308., 26608., 33904., 42224., 51568.,
      18416., 25712., 34032., 43376., 18416., 25712., 34032., 43376., 26608.,
      33904., 42224., 51568., 26068., 32308., 39316., 47092., 13624., 17784.,
      22456., 27640., 4252.,  6332.,  8668.,  11260., 350.,   1006.,  1790.,
      2702.,  3068.,  4892.,  6972.,  9308.,  8538.,  11018., 13882., 17130.,
      14328., 17976., 22136., 26808., 12280., 15928., 20088., 24760., 6136.,
      9784.,  13944., 18616., 12280., 15928., 20088., 24760., 14138., 17386.,
      21018., 25034., 10556., 12892., 15484., 18332., 510.,   1422.,  2462.,
      3630.,  30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,
      2074.,  4042.,  6394.,  9130.,  6136.,  9784.,  13944., 18616., 12280.,
      15928., 20088., 24760., 14328., 17976., 22136., 26808., 12280., 15928.,
      20088., 24760., 5626.,  8362.,  11482., 14986., 8508.,  10844., 13436.,
      16284., 6974.,  8398.,  9950.,  11630., 540.,   1596.,  2908.,  4476.,
      4152.,  6264.,  8888.,  12024., 9428.,  13620., 18580., 24308., 18416.,
      25712., 34032., 43376., 18416., 25712., 34032., 43376., 26608., 33904.,
      42224., 51568., 26608., 33904., 42224., 51568., 17556., 23284., 29780.,
      37044., 11576., 15736., 20408., 25592., 10716., 13308., 16156., 19260.,
      860.,   2428.,  4252.,  6332.,  6840.,  9976.,  13624., 17784., 15892.,
      20596., 26068., 32308., 26608., 33904., 42224., 51568., 18416., 25712.,
      34032., 43376., 18416., 25712., 34032., 43376., 26608., 33904., 42224.,
      51568., 26068., 32308., 39316., 47092., 13624., 17784., 22456., 27640.,
      4252.,  6332.,  8668.,  11260., 540.,   1596.,  2908.,  4476.,  4792.,
      7928.,  11576., 15736., 14164., 19380., 25364., 32116., 26608., 33904.,
      42224., 51568., 26608., 33904., 42224., 51568., 18416., 25712., 34032.,
      43376., 18416., 25712., 34032., 43376., 26388., 33140., 40660., 48948.,
      24504., 29688., 35384., 41592., 10716., 13308., 16156., 19260., 220.,
      764.,   1564.,  2620.,  2104.,  4216.,  6840.,  9976.,  7700.,  12404.,
      17876., 24116., 18416., 25712., 34032., 43376., 26608., 33904., 42224.,
      51568., 26608., 33904., 42224., 51568., 18416., 25712., 34032., 43376.,
      17876., 24116., 31124., 38900., 22456., 27640., 33336., 39544., 17180.,
      20284., 23644., 27260., 540.,   1596.,  2908.,  4476.,  4152.,  6264.,
      8888.,  12024., 9428.,  13620., 18580., 24308., 18416., 25712., 34032.,
      43376., 18416., 25712., 34032., 43376., 26608., 33904., 42224., 51568.,
      26608., 33904., 42224., 51568., 17556., 23284., 29780., 37044., 11576.,
      15736., 20408., 25592., 10716., 13308., 16156., 19260., 860.,   2428.,
      4252.,  6332.,  6840.,  9976.,  13624., 17784., 15892., 20596., 26068.,
      32308., 26608., 33904., 42224., 51568., 18416., 25712., 34032., 43376.,
      18416., 25712., 34032., 43376., 26608., 33904., 42224., 51568., 26068.,
      32308., 39316., 47092., 13624., 17784., 22456., 27640., 4252.,  6332.,
      8668.,  11260., 350.,   1006.,  1790.,  2702.,  3068.,  4892.,  6972.,
      9308.,  8538.,  11018., 13882., 17130., 14328., 17976., 22136., 26808.,
      12280., 15928., 20088., 24760., 6136.,  9784.,  13944., 18616., 12280.,
      15928., 20088., 24760., 14138., 17386., 21018., 25034., 10556., 12892.,
      15484., 18332., 510.,   1422.,  2462.,  3630.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1876.,  2610.,  3458.,  4424.,  4830.,  4550.,  4140.,  3596.,  3840.,
      5225.,  6790.,  8540.,  9170.,  8485.,  7600.,  6510.,  6850.,  9185.,
      11781., 14644., 15547., 14211., 12590., 10678., 11130., 14770., 18767.,
      23128., 24353., 22064., 19390., 16324., 16394., 21490., 26999., 32928.,
      34153., 30632., 26670., 22260., 21018., 27250., 33887., 40936., 42161.,
      37472., 32350., 26788., 23750., 30615., 37863., 45500., 46697., 41277.,
      35450., 29210., 24316., 31235., 38500., 46116., 47236., 41611., 35620.,
      29258., 22492., 28830., 35462., 42392., 43386., 38138., 32580., 26708.,
      3540.,  4770.,  6146.,  7672.,  8078.,  7430.,  6620.,  5644.,  6480.,
      8625.,  10990., 13580., 14210., 12925., 11400., 9630.,  10690., 14105.,
      17829., 21868., 22771., 20547., 17990., 15094., 16394., 21490., 26999.,
      32928., 34153., 30632., 26670., 22260., 21018., 27250., 33887., 40936.,
      42161., 37472., 32350., 26788., 23850., 30770., 38087., 45808., 47033.,
      41624., 35790., 29524., 24710., 31775., 39207., 47012., 48209., 42525.,
      36450., 29978., 23180., 29755., 36652., 43876., 44996., 39619., 33900.,
      27834., 19036., 24430., 30086., 36008., 37002., 32570., 27860., 22868.,
      5204.,  6930.,  8834.,  10920., 11326., 10310., 9100.,  7692.,  9120.,
      12025., 15190., 18620., 19250., 17365., 15200., 12750., 14530., 19025.,
      23877., 29092., 29995., 26883., 23390., 19510., 21018., 27250., 33887.,
      40936., 42161., 37472., 32350., 26788., 23850., 30770., 38087., 45808.,
      47033., 41624., 35790., 29524., 24890., 32050., 39599., 47544., 48769.,
      43088., 36990., 30468., 23878., 30695., 37863., 45388., 46585., 41085.,
      35210., 28954., 20252., 26035., 32116., 38500., 39620., 34939., 29940.,
      24618., 13788., 17790., 22022., 26488., 27482., 24314., 20900., 17236.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    7.,    10.,   13.,   16.,   19.,   14.,   11.,   35.,
      45.,   55.,   65.,   75.,   85.,   56.,   44.,   121.,  142.,  163.,
      184.,  205.,  226.,  140.,  107.,  268.,  289.,  310.,  331.,  352.,
      373.,  224.,  170.,  415.,  436.,  457.,  478.,  499.,  520.,  308.,
      233.,  562.,  583.,  604.,  625.,  646.,  667.,  392.,  296.,  709.,
      730.,  751.,  772.,  793.,  814.,  476.,  309.,  705.,  723.,  741.,
      759.,  777.,  795.,  448.,  215.,  478.,  489.,  500.,  511.,  522.,
      533.,  294.,  7.,    22.,   37.,   52.,   67.,   82.,   97.,   56.,
      65.,   155.,  189.,  223.,  257.,  291.,  325.,  182.,  188.,  427.,
      484.,  541.,  598.,  655.,  712.,  392.,  377.,  826.,  883.,  940.,
      997.,  1054., 1111., 602.,  566.,  1225., 1282., 1339., 1396., 1453.,
      1510., 812.,  755.,  1624., 1681., 1738., 1795., 1852., 1909., 1022.,
      944.,  2023., 2080., 2137., 2194., 2251., 2308., 1232., 783.,  1665.,
      1707., 1749., 1791., 1833., 1875., 994.,  473.,  1000., 1023., 1046.,
      1069., 1092., 1115., 588.,  13.,   40.,   67.,   94.,   121.,  148.,
      175.,  98.,   119.,  275.,  333.,  391.,  449.,  507.,  565.,  308.,
      332.,  733.,  826.,  919.,  1012., 1105., 1198., 644.,  647.,  1384.,
      1477., 1570., 1663., 1756., 1849., 980.,  962.,  2035., 2128., 2221.,
      2314., 2407., 2500., 1316., 1277., 2686., 2779., 2872., 2965., 3058.,
      3151., 1652., 1592., 3337., 3430., 3523., 3616., 3709., 3802., 1988.,
      1257., 2625., 2691., 2757., 2823., 2889., 2955., 1540., 731.,  1522.,
      1557., 1592., 1627., 1662., 1697., 882.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4736.,  6256.,  8160.,  10480., 12136., 10768., 8760.,  8224.,  7260.,
      10137., 13410., 17119., 19273., 17638., 15191., 13012., 9712.,  11956.,
      14728., 18076., 20608., 18144., 14704., 12384., 9788.,  13857., 18578.,
      23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783.,
      28957., 25694., 21235., 17668., 9788.,  13857., 18578., 23911., 27085.,
      25214., 22211., 19140., 12992., 16256., 20128., 23536., 26500., 23128.,
      18700., 15312., 6668.,  9517.,  12810., 16491., 18853., 17262., 14811.,
      12580., 9440.,  11880., 14736., 16920., 18928., 17120., 14640., 11456.,
      6272.,  8688.,  11488., 14704., 16360., 15120., 13240., 11808., 9372.,
      11401., 13890., 16879., 19033., 16454., 12999., 10772., 8944.,  12532.,
      16648., 21340., 23872., 22112., 19376., 16736., 13692., 17361., 21746.,
      25783., 28957., 25694., 21235., 17668., 9788.,  13857., 18578., 23911.,
      27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957.,
      25694., 21235., 17668., 9664.,  13632., 18208., 23344., 26308., 24280.,
      21196., 18128., 12364., 15261., 18666., 21499., 23861., 20430., 16075.,
      12900., 5856.,  8424.,  11408., 14744., 16752., 15840., 14256., 11968.,
      4736.,  6256.,  8160.,  10480., 12136., 10768., 8760.,  8224.,  7260.,
      10137., 13410., 17119., 19273., 17638., 15191., 13012., 9712.,  11956.,
      14728., 18076., 20608., 18144., 14704., 12384., 9788.,  13857., 18578.,
      23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783.,
      28957., 25694., 21235., 17668., 9788.,  13857., 18578., 23911., 27085.,
      25214., 22211., 19140., 12992., 16256., 20128., 23536., 26500., 23128.,
      18700., 15312., 6668.,  9517.,  12810., 16491., 18853., 17262., 14811.,
      12580., 9440.,  11880., 14736., 16920., 18928., 17120., 14640., 11456.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    42.,    62.,    82.,    102.,   122.,   95.,    64.,
      224.,   296.,   368.,   440.,   512.,   584.,   396.,   289.,   830.,
      986.,   1142.,  1298.,  1454.,  1610.,  1015.,  751.,   1922.,  2078.,
      2234.,  2390.,  2546.,  2702.,  1645.,  1213.,  3014.,  3170.,  3326.,
      3482.,  3638.,  3794.,  2275.,  1675.,  4106.,  4262.,  4418.,  4574.,
      4730.,  4886.,  2905.,  2137.,  5198.,  5354.,  5510.,  5666.,  5822.,
      5978.,  3535.,  2300.,  5288.,  5424.,  5560.,  5696.,  5832.,  5968.,
      3384.,  1625.,  3630.,  3714.,  3798.,  3882.,  3966.,  4050.,  2243.,
      41.,    142.,   258.,   374.,   490.,   606.,   722.,   419.,   472.,
      1136.,  1400.,  1664.,  1928.,  2192.,  2456.,  1380.,  1405.,  3206.,
      3650.,  4094.,  4538.,  4982.,  5426.,  2995.,  2875.,  6314.,  6758.,
      7202.,  7646.,  8090.,  8534.,  4633.,  4345.,  9422.,  9866.,  10310.,
      10754., 11198., 11642., 6271.,  5815.,  12530., 12974., 13418., 13862.,
      14306., 14750., 7909.,  7285.,  15638., 16082., 16526., 16970., 17414.,
      17858., 9547.,  6068.,  12920., 13248., 13576., 13904., 14232., 14560.,
      7728.,  3677.,  7782.,  7962.,  8142.,  8322.,  8502.,  8682.,  4583.,
      77.,    262.,   474.,   686.,   898.,   1110.,  1322.,  743.,   880.,
      2048.,  2504.,  2960.,  3416.,  3872.,  4328.,  2364.,  2521.,  5582.,
      6314.,  7046.,  7778.,  8510.,  9242.,  4975.,  4999.,  10706., 11438.,
      12170., 12902., 13634., 14366., 7621.,  7477.,  15830., 16562., 17294.,
      18026., 18758., 19490., 10267., 9955.,  20954., 21686., 22418., 23150.,
      23882., 24614., 12913., 12433., 26078., 26810., 27542., 28274., 29006.,
      29738., 15559., 9836.,  20552., 21072., 21592., 22112., 22632., 23152.,
      12072., 5729.,  11934., 12210., 12486., 12762., 13038., 13314., 6923.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9248.,  13480., 18672., 25080., 31960., 27504., 23944., 21536., 12280.,
      18110., 24980., 33210., 41970., 36836., 31750., 26904., 14768., 22220.,
      30920., 41060., 51764., 46568., 40636., 34096., 16712., 25490., 35980.,
      48118., 60830., 56188., 50090., 42600., 16712., 25490., 35980., 48118.,
      60830., 56188., 50090., 42600., 16712., 25490., 35980., 48118., 60830.,
      56188., 50090., 42600., 15856., 23900., 33320., 43988., 55076., 49160.,
      42380., 34864., 13688., 20782., 28980., 38090., 47490., 44100., 36470.,
      28696., 10720., 16648., 23472., 30936., 38584., 37104., 32360., 24096.,
      9248.,  13480., 18672., 25080., 31960., 27504., 23944., 21536., 12280.,
      18110., 24980., 33210., 41970., 36836., 31750., 26904., 14768., 22220.,
      30920., 41060., 51764., 46568., 40636., 34096., 16712., 25490., 35980.,
      48118., 60830., 56188., 50090., 42600., 16712., 25490., 35980., 48118.,
      60830., 56188., 50090., 42600., 16712., 25490., 35980., 48118., 60830.,
      56188., 50090., 42600., 15856., 23900., 33320., 43988., 55076., 49160.,
      42380., 34864., 13688., 20782., 28980., 38090., 47490., 44100., 36470.,
      28696., 10720., 16648., 23472., 30936., 38584., 37104., 32360., 24096.,
      9248.,  13480., 18672., 25080., 31960., 27504., 23944., 21536., 12280.,
      18110., 24980., 33210., 41970., 36836., 31750., 26904., 14768., 22220.,
      30920., 41060., 51764., 46568., 40636., 34096., 16712., 25490., 35980.,
      48118., 60830., 56188., 50090., 42600., 16712., 25490., 35980., 48118.,
      60830., 56188., 50090., 42600., 16712., 25490., 35980., 48118., 60830.,
      56188., 50090., 42600., 15856., 23900., 33320., 43988., 55076., 49160.,
      42380., 34864., 13688., 20782., 28980., 38090., 47490., 44100., 36470.,
      28696., 10720., 16648., 23472., 30936., 38584., 37104., 32360., 24096.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   284.,   428.,   572.,   716.,   860.,   694.,   420.,
      1576.,  2120.,  2664.,  3208.,  3752.,  4296.,  2964.,  2066.,  6100.,
      6660.,  6196.,  7396.,  8596.,  9796.,  6042.,  4954.,  12196., 10708.,
      8196.,  9396.,  10596., 11796., 7202.,  5794.,  14196., 10660., 6100.,
      6660.,  6196.,  7396.,  4650.,  3946.,  9796.,  10996., 12196., 10708.,
      8196.,  9396.,  5810.,  4786.,  11796., 12996., 14196., 10660., 6100.,
      6660.,  3258.,  2868.,  7112.,  8168.,  9224.,  10280., 11336., 9704.,
      3620.,  3150.,  7276.,  7932.,  8588.,  9244.,  9900.,  5820.,  230.,
      270.,   1004.,  1916.,  2828.,  3740.,  4652.,  5564.,  3238.,  3588.,
      8680.,  10760., 12840., 14920., 17000., 19080., 10740., 10850., 24820.,
      21540., 17236., 20740., 24244., 27748., 15594., 15658., 34756., 29428.,
      23076., 26580., 30084., 33588., 18674., 18418., 40596., 33220., 24820.,
      21540., 17236., 20740., 11898., 12346., 27748., 31252., 34756., 29428.,
      23076., 26580., 14978., 15106., 33588., 37092., 40596., 33220., 24820.,
      21540., 8202.,  8340.,  18824., 21416., 24008., 26600., 29192., 22952.,
      7556.,  7230.,  15820., 17244., 18668., 20092., 21516., 12060., 470.,
      510.,   1868.,  3548.,  5228.,  6908.,  8588.,  10268., 5782.,  6756.,
      15784., 19400., 23016., 26632., 30248., 33864., 18516., 18994., 41236.,
      32068., 21876., 25636., 29396., 33156., 18362., 18554., 40676., 29460.,
      17220., 20980., 24740., 28500., 16194., 16066., 36020., 39140., 41236.,
      32068., 21876., 25636., 14410., 14986., 33156., 36916., 40676., 29460.,
      17220., 20980., 12242., 12498., 28500., 32260., 36020., 39140., 41236.,
      32068., 10458., 10100., 22088., 24168., 26248., 28328., 30408., 17512.,
      1636.,  430.,   1580.,  1724.,  1868.,  2012.,  2156.,  1660.,  70.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6640.,  7504.,  9320.,  10440., 12440., 13832., 16016., 17696., 17584.,
      19320., 16664., 18200., 15240., 16560., 13296., 14384., 12956., 14080.,
      17461., 18852., 22410., 24088., 27823., 29808., 29889., 31944., 27154.,
      28948., 23767., 25280., 19708., 20920., 18728., 19976., 23792., 25348.,
      29364., 31252., 35468., 37712., 37716., 40044., 33684., 35724., 28920.,
      30648., 23400., 24792., 21780., 23272., 26873., 28744., 32598., 34876.,
      38983., 41696., 41609., 44420., 37022., 39488., 31563., 33656., 25204.,
      26896., 22420., 24104., 26889., 29000., 32086., 34652., 38039., 41088.,
      40665., 43812., 36062., 38816., 30491., 32824., 23924., 25808., 18452.,
      20072., 24921., 26952., 32086., 34556., 39975., 42912., 42601., 45636.,
      38942., 41600., 34347., 36600., 28788., 30608., 23400., 24856., 29892.,
      31708., 36996., 39196., 44736., 47344., 47264., 49956., 42180., 44532.,
      36260., 38248., 29480., 31080., 19804., 20976., 24033., 25484., 28730.,
      30480., 33915., 35984., 36149., 38288., 31714., 33580., 26603., 28176.,
      20796., 22056., 16496., 17520., 18704., 19960., 21304., 22808., 24312.,
      26080., 26056., 27880., 22328., 23912., 18016., 19344., 13104., 14160.,
      12016., 12880., 16040., 17160., 20504., 21896., 25424., 27104., 26992.,
      28728., 24728., 26264., 21960., 23280., 18672., 19760., 18588., 19776.,
      23557., 25028., 29002., 30776., 34943., 37040., 37009., 39176., 32914.,
      34804., 28135., 29728., 22652., 23928., 21416., 22792., 26288., 28004.,
      31732., 33812., 37772., 40240., 40020., 42572., 35412., 37644., 30008.,
      31896., 23784., 25304., 22420., 24104., 26889., 29000., 32086., 34652.,
      38039., 41088., 40665., 43812., 36062., 38816., 30491., 32824., 23924.,
      25808., 18452., 20072., 24921., 26952., 32086., 34556., 39975., 42912.,
      42601., 45636., 38942., 41600., 34347., 36600., 28788., 30608., 23700.,
      25256., 30377., 32328., 37718., 40092., 45751., 48576., 48377., 51300.,
      43358., 45920., 37435., 39608., 30580., 32336., 21224., 22552., 25988.,
      27644., 31300., 33308., 37184., 39568., 39712., 42180., 35076., 37236.,
      29668., 31496., 23464., 24936., 19036., 20272., 22129., 23660., 25722.,
      27568., 29835., 32016., 32069., 34320., 27874., 29836., 22971., 24624.,
      17340., 18664., 10096., 11120., 13776., 15032., 17848., 19352., 22328.,
      24096., 24072., 25896., 21944., 23528., 19232., 20560., 15920., 16976.,
      13808., 14672., 18280., 19400., 23192., 24584., 28560., 30240., 30128.,
      31864., 27416., 28952., 24200., 25520., 20464., 21552., 20636., 21888.,
      25173., 26724., 30218., 32088., 35791., 38000., 37857., 40136., 33298.,
      35284., 28023., 29696., 22012., 23352., 20520., 22024., 24304., 26180.,
      28724., 30996., 33804., 36496., 36052., 38828., 31764., 34188., 26616.,
      28664., 20584., 22232., 18452., 20072., 24921., 26952., 32086., 34556.,
      39975., 42912., 42601., 45636., 38942., 41600., 34347., 36600., 28788.,
      30608., 23700., 25256., 30377., 32328., 37718., 40092., 45751., 48576.,
      48377., 51300., 43358., 45920., 37435., 39608., 30580., 32336., 21780.,
      23272., 26873., 28744., 32598., 34876., 38983., 41696., 41609., 44420.,
      37022., 39488., 31563., 33656., 25204., 26896., 21608., 23064., 25604.,
      27420., 30212., 32412., 35456., 38064., 37984., 40676., 33348., 35700.,
      27876., 29864., 21544., 23144., 14684., 15984., 19841., 21452., 25530.,
      27472., 31771., 34064., 34005., 36368., 30946., 33004., 27147., 28880.,
      22588., 23976., 16496., 17520., 20752., 22008., 25400., 26904., 30456.,
      32224., 32200., 34024., 28472., 30056., 24160., 25488., 19248., 20304.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     6.,     16.,    14.,    28.,    22.,    40.,    30.,
      52.,    38.,    64.,    46.,    76.,    39.,    56.,    20.,    44.,
      84.,    140.,   116.,   180.,   148.,   220.,   180.,   260.,   212.,
      300.,   244.,   340.,   172.,   224.,   113.,   176.,   346.,   484.,
      418.,   568.,   490.,   652.,   562.,   736.,   634.,   820.,   706.,
      904.,   455.,   560.,   323.,   428.,   850.,   1072.,  922.,   1156.,
      994.,   1240.,  1066.,  1324.,  1138.,  1408.,  1210.,  1492.,  749.,
      896.,   533.,   680.,   1354.,  1660.,  1426.,  1744.,  1498.,  1828.,
      1570.,  1912.,  1642.,  1996.,  1714.,  2080.,  1043.,  1232.,  743.,
      932.,   1858.,  2248.,  1930.,  2332.,  2002.,  2416.,  2074.,  2500.,
      2146.,  2584.,  2218.,  2668.,  1337.,  1568.,  953.,   1184.,  2362.,
      2836.,  2434.,  2920.,  2506.,  3004.,  2578.,  3088.,  2650.,  3172.,
      2722.,  3256.,  1631.,  1904.,  1064.,  1236.,  2468.,  2820.,  2532.,
      2892.,  2596.,  2964.,  2660.,  3036.,  2724.,  3108.,  2788.,  3180.,
      1592.,  1792.,  765.,   860.,   1718.,  1912.,  1758.,  1956.,  1798.,
      2000.,  1838.,  2044.,  1878.,  2088.,  1918.,  2132.,  1067.,  1176.,
      13.,    28.,    54.,    88.,    110.,   148.,   166.,   208.,   222.,
      268.,   278.,   328.,   334.,   388.,   195.,   224.,   212.,   260.,
      516.,   620.,   644.,   756.,   772.,   892.,   900.,   1028.,  1028.,
      1164.,  1156.,  1300.,  652.,   728.,   653.,   752.,   1498.,  1708.,
      1714.,  1936.,  1930.,  2164.,  2146.,  2392.,  2362.,  2620.,  2578.,
      2848.,  1427.,  1568.,  1367.,  1508.,  3010.,  3304.,  3226.,  3532.,
      3442.,  3760.,  3658.,  3988.,  3874.,  4216.,  4090.,  4444.,  2225.,
      2408.,  2081.,  2264.,  4522.,  4900.,  4738.,  5128.,  4954.,  5356.,
      5170.,  5584.,  5386.,  5812.,  5602.,  6040.,  3023.,  3248.,  2795.,
      3020.,  6034.,  6496.,  6250.,  6724.,  6466.,  6952.,  6682.,  7180.,
      6898.,  7408.,  7114.,  7636.,  3821.,  4088.,  3509.,  3776.,  7546.,
      8092.,  7762.,  8320.,  7978.,  8548.,  8194.,  8776.,  8410.,  9004.,
      8626.,  9232.,  4619.,  4928.,  2936.,  3132.,  6260.,  6660.,  6420.,
      6828.,  6580.,  6996.,  6740.,  7164.,  6900.,  7332.,  7060.,  7500.,
      3752.,  3976.,  1785.,  1892.,  3782.,  4000.,  3870.,  4092.,  3958.,
      4184.,  4046.,  4276.,  4134.,  4368.,  4222.,  4460.,  2231.,  2352.,
      25.,    52.,    102.,   160.,   206.,   268.,   310.,   376.,   414.,
      484.,   518.,   592.,   622.,   700.,   351.,   392.,   404.,   476.,
      948.,   1100.,  1172.,  1332.,  1396.,  1564.,  1620.,  1796.,  1844.,
      2028.,  2068.,  2260.,  1132.,  1232.,  1193.,  1328.,  2650.,  2932.,
      3010.,  3304.,  3370.,  3676.,  3730.,  4048.,  4090.,  4420.,  4450.,
      4792.,  2399.,  2576.,  2411.,  2588.,  5170.,  5536.,  5530.,  5908.,
      5890.,  6280.,  6250.,  6652.,  6610.,  7024.,  6970.,  7396.,  3701.,
      3920.,  3629.,  3848.,  7690.,  8140.,  8050.,  8512.,  8410.,  8884.,
      8770.,  9256.,  9130.,  9628.,  9490.,  10000., 5003.,  5264.,  4847.,
      5108.,  10210., 10744., 10570., 11116., 10930., 11488., 11290., 11860.,
      11650., 12232., 12010., 12604., 6305.,  6608.,  6065.,  6368.,  12730.,
      13348., 13090., 13720., 13450., 14092., 13810., 14464., 14170., 14836.,
      14530., 15208., 7607.,  7952.,  4808.,  5028.,  10052., 10500., 10308.,
      10764., 10564., 11028., 10820., 11292., 11076., 11556., 11332., 11820.,
      5912.,  6160.,  2805.,  2924.,  5846.,  6088.,  5982.,  6228.,  6118.,
      6368.,  6254.,  6508.,  6390.,  6648.,  6526.,  6788.,  3395.,  3528.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3888.,  5360.,  5756.,  7724.,  8040.,  10632., 10868., 14212., 14084.,
      17876., 12072., 15432., 10508., 13436., 9520.,  12016., 5140.,  7140.,
      7765.,  10345., 10830., 14150., 14495., 18715., 18595., 23375., 16294.,
      20542., 14033., 17717., 11908., 14996., 6152.,  8616.,  9490.,  12730.,
      13420., 17500., 17974., 23086., 22990., 28774., 20700., 25868., 18074.,
      22562., 15176., 18920., 6924.,  9788.,  10835., 14655., 15554., 20426.,
      21049., 27069., 27013., 33817., 25034., 31154., 22375., 27715., 19068.,
      23532., 6924.,  9788.,  10835., 14655., 15554., 20426., 21049., 27069.,
      27013., 33817., 25034., 31154., 22375., 27715., 19068., 23532., 6924.,
      9788.,  10835., 14655., 15554., 20426., 21049., 27069., 27013., 33817.,
      25034., 31154., 22375., 27715., 19068., 23532., 6632.,  9224.,  10250.,
      13650., 14524., 18796., 19390., 24598., 24598., 30478., 21964., 27196.,
      18930., 23450., 15560., 19304., 5716.,  7972.,  8925.,  11857., 12670.,
      16310., 16855., 21235., 21275., 26215., 19830., 24270., 16345., 20125.,
      12804., 15892., 4432.,  6288.,  7116.,  9532.,  10248., 13224., 13700.,
      17236., 17300., 21284., 16744., 20360., 14620., 17740., 10800., 13296.,
      3888.,  5360.,  5756.,  7724.,  8040.,  10632., 10868., 14212., 14084.,
      17876., 12072., 15432., 10508., 13436., 9520.,  12016., 5140.,  7140.,
      7765.,  10345., 10830., 14150., 14495., 18715., 18595., 23375., 16294.,
      20542., 14033., 17717., 11908., 14996., 6152.,  8616.,  9490.,  12730.,
      13420., 17500., 17974., 23086., 22990., 28774., 20700., 25868., 18074.,
      22562., 15176., 18920., 6924.,  9788.,  10835., 14655., 15554., 20426.,
      21049., 27069., 27013., 33817., 25034., 31154., 22375., 27715., 19068.,
      23532., 6924.,  9788.,  10835., 14655., 15554., 20426., 21049., 27069.,
      27013., 33817., 25034., 31154., 22375., 27715., 19068., 23532., 6924.,
      9788.,  10835., 14655., 15554., 20426., 21049., 27069., 27013., 33817.,
      25034., 31154., 22375., 27715., 19068., 23532., 6632.,  9224.,  10250.,
      13650., 14524., 18796., 19390., 24598., 24598., 30478., 21964., 27196.,
      18930., 23450., 15560., 19304., 5716.,  7972.,  8925.,  11857., 12670.,
      16310., 16855., 21235., 21275., 26215., 19830., 24270., 16345., 20125.,
      12804., 15892., 4432.,  6288.,  7116.,  9532.,  10248., 13224., 13700.,
      17236., 17300., 21284., 16744., 20360., 14620., 17740., 10800., 13296.,
      3888.,  5360.,  5756.,  7724.,  8040.,  10632., 10868., 14212., 14084.,
      17876., 12072., 15432., 10508., 13436., 9520.,  12016., 5140.,  7140.,
      7765.,  10345., 10830., 14150., 14495., 18715., 18595., 23375., 16294.,
      20542., 14033., 17717., 11908., 14996., 6152.,  8616.,  9490.,  12730.,
      13420., 17500., 17974., 23086., 22990., 28774., 20700., 25868., 18074.,
      22562., 15176., 18920., 6924.,  9788.,  10835., 14655., 15554., 20426.,
      21049., 27069., 27013., 33817., 25034., 31154., 22375., 27715., 19068.,
      23532., 6924.,  9788.,  10835., 14655., 15554., 20426., 21049., 27069.,
      27013., 33817., 25034., 31154., 22375., 27715., 19068., 23532., 6924.,
      9788.,  10835., 14655., 15554., 20426., 21049., 27069., 27013., 33817.,
      25034., 31154., 22375., 27715., 19068., 23532., 6632.,  9224.,  10250.,
      13650., 14524., 18796., 19390., 24598., 24598., 30478., 21964., 27196.,
      18930., 23450., 15560., 19304., 5716.,  7972.,  8925.,  11857., 12670.,
      16310., 16855., 21235., 21275., 26215., 19830., 24270., 16345., 20125.,
      12804., 15892., 4432.,  6288.,  7116.,  9532.,  10248., 13224., 13700.,
      17236., 17300., 21284., 16744., 20360., 14620., 17740., 10800., 13296.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   90.,    194.,   146.,   282.,   202.,
      370.,   258.,   458.,   314.,   546.,   281.,   413.,   118.,   302.,
      572.,   1004.,  812.,   1308.,  1052.,  1612.,  1292.,  1916.,  1532.,
      2220.,  1772.,  2524.,  1278.,  1686.,  787.,   1279.,  2510.,  3590.,
      2870.,  3790.,  2718.,  3478.,  3270.,  4126.,  3822.,  4774.,  4374.,
      5422.,  2735.,  3307.,  2191.,  2763.,  5478.,  6718.,  4814.,  5894.,
      3638.,  4558.,  4190.,  5206.,  4742.,  5854.,  5294.,  6502.,  3275.,
      3927.,  2571.,  3223.,  6398.,  7798.,  4710.,  5950.,  2510.,  3590.,
      2870.,  3790.,  2718.,  3478.,  3270.,  4126.,  2087.,  2563.,  1735.,
      2211.,  4374.,  5422.,  4926.,  6070.,  5478.,  6718.,  4814.,  5894.,
      3638.,  4558.,  4190.,  5206.,  2627.,  3183.,  2115.,  2671.,  5294.,
      6502.,  5846.,  7150.,  6398.,  7798.,  4710.,  5950.,  2510.,  3590.,
      2870.,  3790.,  1439.,  1819.,  1262.,  1606.,  3180.,  3932.,  3676.,
      4492.,  4172.,  5052.,  4668.,  5612.,  5164.,  6172.,  4444.,  5260.,
      1654.,  1966.,  1453.,  1697.,  3378.,  3898.,  3690.,  4242.,  4002.,
      4586.,  4314.,  4930.,  4626.,  5274.,  2698.,  3122.,  65.,    165.,
      77.,    193.,   370.,   634.,   810.,   1106.,  1250.,  1578.,  1690.,
      2050.,  2130.,  2522.,  2570.,  2994.,  1505.,  1733.,  1606.,  1982.,
      3932.,  4748.,  4940.,  5820.,  5948.,  6892.,  6956.,  7964.,  7964.,
      9036.,  8972.,  10108., 5070.,  5670.,  5035.,  5815.,  11582., 13238.,
      10022., 11518., 7950.,  9286.,  9654.,  11086., 11358., 12886., 13062.,
      14686., 7367.,  8227.,  7399.,  8259.,  16470., 18286., 13886., 15542.,
      10790., 12286., 12494., 14086., 14198., 15886., 15902., 17686., 8867.,
      9807.,  8739.,  9679.,  19310., 21286., 15702., 17518., 11582., 13238.,
      10022., 11518., 7950.,  9286.,  9654.,  11086., 5567.,  6331.,  5791.,
      6555.,  13062., 14686., 14766., 16486., 16470., 18286., 13886., 15542.,
      10790., 12286., 12494., 14086., 7067.,  7911.,  7131.,  7975.,  15902.,
      17686., 17606., 19486., 19310., 21286., 15702., 17518., 11582., 13238.,
      10022., 11518., 3767.,  4435.,  3902.,  4438.,  8844.,  9980.,  10108.,
      11308., 11372., 12636., 12636., 13964., 13900., 15292., 10876., 12076.,
      3526.,  4030.,  3445.,  3785.,  7554.,  8266.,  8250.,  8994.,  8946.,
      9722.,  9642.,  10450., 10338., 11178., 5722.,  6338.,  137.,   333.,
      149.,   361.,   706.,   1162.,  1530.,  2018.,  2354.,  2874.,  3178.,
      3730.,  4002.,  4586.,  4826.,  5442.,  2729.,  3053.,  3094.,  3662.,
      7292.,  8492.,  9068.,  10332., 10844., 12172., 12620., 14012., 14396.,
      15852., 16172., 17692., 8862.,  9654.,  9091.,  9903.,  19758., 21478.,
      15254., 16814., 10238., 11638., 12070., 13566., 13902., 15494., 15734.,
      17422., 8735.,  9627.,  8831.,  9723.,  19398., 21278., 13870., 15590.,
      7830.,  9390.,  9662.,  11318., 11494., 13246., 13326., 15174., 7611.,
      8583.,  7547.,  8519.,  16990., 19030., 18630., 20510., 19758., 21478.,
      15254., 16814., 10238., 11638., 12070., 13566., 6807.,  7603.,  7095.,
      7891.,  15734., 17422., 17566., 19350., 19398., 21278., 13870., 15590.,
      7830.,  9390.,  9662.,  11318., 5683.,  6559.,  5811.,  6687.,  13326.,
      15174., 15158., 17102., 16990., 19030., 18630., 20510., 19758., 21478.,
      15254., 16814., 4879.,  5579.,  4814.,  5286.,  10540., 11548., 11548.,
      12620., 12556., 13692., 13564., 14764., 14572., 15836., 8220.,  9292.,
      598.,   1038.,  125.,   305.,   594.,   986.,   650.,   1074.,  706.,
      1162.,  762.,   1250.,  818.,   1338.,  682.,   978.,   17.,    53.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4176., 10704., 3896., 9592.,  2784., 7136.,  3224., 8664.,  4046., 10462.,
      4836., 12996., 5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502.,
      3736., 9176.,  4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724.,
      7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704., 4616., 12232.,
      5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414., 7692., 19116.,
      6394., 16298., 5128., 12744., 4616., 12232., 5578., 14586., 6924., 18348.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      7692., 19116., 6394., 16298., 5128., 12744., 4176., 10704., 4596., 12372.,
      6264., 16056., 6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388.,
      4176., 10704., 3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050.,
      6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,  2784., 7136.,
      3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160., 4176., 10704.,
      3896., 9592.,  2784., 7136.,  2784., 7136.,  3064., 8248.,  4176., 10704.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5604., 13764., 4446., 11502., 3736., 9176.,  4176., 10704., 4596., 12372.,
      6264., 16056., 6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388.,
      4176., 10704., 4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958.,
      8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744., 4616., 12232.,
      5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414., 7692., 19116.,
      6394., 16298., 5128., 12744., 4616., 12232., 5578., 14586., 6924., 18348.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6264., 16056., 5844., 14388., 4176., 10704., 3224., 8664.,  4046., 10462.,
      4836., 12996., 5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502.,
      3736., 9176.,  2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816.,
      5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,  2784., 7136.,
      3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160., 4176., 10704.,
      3896., 9592.,  2784., 7136.,  3224., 8664.,  4046., 10462., 4836., 12996.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6264., 16056., 5844., 14388., 4176., 10704., 4616., 12232., 5578., 14586.,
      6924., 18348., 8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298.,
      5128., 12744., 4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958.,
      8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744., 4616., 12232.,
      5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414., 7692., 19116.,
      6394., 16298., 5128., 12744., 4176., 10704., 4596., 12372., 6264., 16056.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5604., 13764., 4446., 11502., 3736., 9176.,  2784., 7136.,  3064., 8248.,
      4176., 10704., 4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,
      2784., 7136.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   636.,   1436.,  1052.,  2108.,  1468.,
      2780.,  1884.,  3452.,  2300.,  4124.,  2126.,  3166.,  780.,   2220.,
      3544.,  5912.,  2712.,  4568.,  4568.,  6936.,  6424.,  9304.,  8280.,
      11672., 10136., 14040., 7148.,  9356.,  5194.,  8058.,  10996., 16468.,
      7892.,  12084., 9524.,  13460., 13844., 18548., 18164., 23636., 22484.,
      28724., 14554., 18058., 12250., 15754., 22292., 29044., 10996., 16468.,
      7892.,  12084., 9524.,  13460., 13844., 18548., 18164., 23636., 12010.,
      15130., 10474., 13594., 26804., 33812., 22292., 29044., 10996., 16468.,
      7892.,  12084., 9524.,  13460., 13844., 18548., 9466.,  12202., 8698.,
      11434., 22484., 28724., 26804., 33812., 22292., 29044., 10996., 16468.,
      7892.,  12084., 9524.,  13460., 6922.,  9274.,  6922.,  9274.,  18164.,
      23636., 22484., 28724., 26804., 33812., 22292., 29044., 10996., 16468.,
      7892.,  12084., 4378.,  6346.,  5036.,  6732.,  13208., 17112., 17112.,
      21528., 21016., 25944., 24920., 30360., 19992., 24920., 8280.,  11672.,
      2060.,  3500.,  2558.,  3470.,  6812.,  8892.,  9276.,  11612., 11740.,
      14332., 14204., 17052., 16668., 19772., 10300., 12636., 430.,   1214.,
      510.,   1422.,  2716.,  4796.,  6204.,  8540.,  9692.,  12284., 13180.,
      16028., 16668., 19772., 20156., 23516., 11822., 13630., 11852., 13804.,
      14424., 17816., 3352.,  6232.,  7256.,  10648., 11160., 15064., 15064.,
      19480., 18968., 23896., 12076., 14796., 10986., 14106., 27188., 33172.,
      16916., 21620., 7284.,  11732., 12628., 17844., 17972., 23956., 23316.,
      30068., 15226., 18986., 13434., 17194., 29268., 36532., 27188., 33172.,
      16916., 21620., 7284.,  11732., 12628., 17844., 17972., 23956., 12170.,
      15546., 11146., 14522., 28660., 36180., 29268., 36532., 27188., 33172.,
      16916., 21620., 7284.,  11732., 12628., 17844., 9114.,  12106., 8858.,
      11850., 23316., 30068., 28660., 36180., 29268., 36532., 27188., 33172.,
      16916., 21620., 7284.,  11732., 6058.,  8666.,  6570.,  9178.,  17972.,
      23956., 23316., 30068., 28660., 36180., 29268., 36532., 27188., 33172.,
      16916., 21620., 3002.,  5226.,  2156.,  3340.,  6424.,  9304.,  8280.,
      11672., 10136., 14040., 11992., 16408., 9112.,  13016., 3544.,  5912.,
      1228.,  2156.,  1374.,  2030.,  3932.,  5500.,  5372.,  7196.,  6812.,
      8892.,  8252.,  10588., 9692.,  12284., 6396.,  8220.,  270.,   798.,
      350.,   1006.,  1884.,  3452.,  4348.,  6172.,  6812.,  8892.,  9276.,
      11612., 11740., 14332., 14204., 17052., 8590.,  10142., 8588.,  11052.,
      13016., 17432., 8088.,  11992., 14040., 18456., 19992., 24920., 25944.,
      31384., 31896., 37848., 19052., 22284., 18826., 22202., 31092., 37588.,
      13652., 18868., 9140.,  14100., 15508., 21236., 21876., 28372., 28244.,
      35508., 17946., 21962., 16666., 20682., 40340., 48116., 31092., 37588.,
      13652., 18868., 9140.,  14100., 15508., 21236., 21876., 28372., 14378.,
      18010., 13866., 17498., 34612., 42644., 40340., 48116., 31092., 37588.,
      13652., 18868., 9140.,  14100., 15508., 21236., 10810., 14058., 11066.,
      14314., 28244., 35508., 34612., 42644., 40340., 48116., 31092., 37588.,
      13652., 18868., 9140.,  14100., 7242.,  10106., 8266.,  11130., 21876.,
      28372., 28244., 35508., 34612., 42644., 40340., 48116., 31092., 37588.,
      13652., 18868., 3674.,  6154.,  4012.,  5708.,  11160., 15064., 15064.,
      19480., 18968., 23896., 22872., 28312., 26136., 31064., 14424., 17816.,
      1036.,  2476.,  190.,   590.,   1052.,  2108.,  1468.,  2780.,  1884.,
      3452.,  2300.,  4124.,  2716.,  4796.,  2492.,  3804.,  110.,   382.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7856.,  8640.,  9456.,  10304., 10396., 11424., 12492., 13600., 13640.,
      14944., 16296., 17696., 17652., 19264., 20932., 22656., 20740., 22464.,
      24244., 26080., 18408., 19936., 21512., 23136., 14860., 16160., 17500.,
      18880., 14192., 15296., 16432., 17600., 12388., 13424., 14500., 15616.,
      17601., 18900., 20249., 21648., 23526., 25128., 26790., 28512., 30243.,
      32188., 34203., 36288., 34271., 36356., 38511., 40736., 31518., 33352.,
      35246., 37200., 27221., 28764., 30357., 32000., 23412., 24688., 26004.,
      27360., 16808., 18080., 19400., 20768., 20594., 22208., 23882., 25616.,
      25340., 27344., 29420., 31568., 31142., 33584., 36110., 38720., 35870.,
      38480., 41174., 43952., 31564., 33872., 36252., 38704., 25402., 27360.,
      29378., 31456., 21448., 23072., 24744., 26464., 16508., 18000., 19548.,
      21152., 23791., 25700., 27679., 29728., 32266., 34648., 37114., 39664.,
      41981., 44828., 47773., 50816., 47937., 50980., 54121., 57360., 44914.,
      47608., 50386., 53248., 39739., 42028., 44387., 46816., 34412., 36304.,
      38252., 40256., 24060., 25680., 27356., 29088., 30479., 32548., 34687.,
      36896., 38218., 40792., 43450., 46192., 45277., 48348., 51517., 54784.,
      51233., 54500., 57865., 61328., 45490., 48376., 51346., 54400., 37467.,
      39916., 42435., 45024., 31212., 33232., 35308., 37440., 16508., 18000.,
      19548., 21152., 23791., 25700., 27679., 29728., 32266., 34648., 37114.,
      39664., 41981., 44828., 47773., 50816., 47937., 50980., 54121., 57360.,
      44914., 47608., 50386., 53248., 39739., 42028., 44387., 46816., 34412.,
      36304., 38252., 40256., 23048., 24480., 25960., 27488., 28794., 30608.,
      32482., 34416., 35660., 37904., 40220., 42608., 41630., 44288., 47030.,
      49856., 47222., 50048., 52958., 55952., 41180., 43664., 46220., 48848.,
      33122., 35216., 37370., 39584., 27112., 28832., 30600., 32416., 11012.,
      12144., 13316., 14528., 16121., 17540., 19009., 20528., 22038., 23784.,
      25590., 27456., 28779., 30828., 32947., 35136., 33223., 35412., 37671.,
      40000., 30606., 32520., 34494., 36528., 26349., 27948., 29597., 31296.,
      22484., 23792., 25140., 26528., 16880., 17856., 18864., 19904., 21228.,
      22464., 23740., 25056., 26344., 27872., 29448., 31072., 30180., 31968.,
      33812., 35712., 33972., 35872., 37828., 39840., 30792., 32480., 34216.,
      36000., 26332., 27776., 29260., 30784., 20528., 21696., 22896., 24128.,
      10928., 11712., 12528., 13376., 15260., 16288., 17356., 18464., 20296.,
      21600., 22952., 24352., 26100., 27712., 29380., 31104., 29188., 30912.,
      32692., 34528., 27112., 28640., 30216., 31840., 23820., 25120., 26460.,
      27840., 21360., 22464., 23600., 24768., 16356., 17520., 18724., 19968.,
      19809., 21268., 22777., 24336., 24102., 25896., 27750., 29664., 29315.,
      31484., 33723., 36032., 33343., 35652., 38031., 40480., 28766., 30792.,
      32878., 35024., 22517., 24220., 25973., 27776., 18676., 20080., 21524.,
      23008., 15272., 16544., 17864., 19232., 21746., 23360., 25034., 26768.,
      29180., 31184., 33260., 35408., 37670., 40112., 42638., 45248., 42398.,
      45008., 47702., 50480., 39500., 41808., 44188., 46640., 34746., 36704.,
      38722., 40800., 30152., 31776., 33448., 35168., 24060., 25680., 27356.,
      29088., 30479., 32548., 34687., 36896., 38218., 40792., 43450., 46192.,
      45277., 48348., 51517., 54784., 51233., 54500., 57865., 61328., 45490.,
      48376., 51346., 54400., 37467., 39916., 42435., 45024., 31212., 33232.,
      35308., 37440., 16508., 18000., 19548., 21152., 23791., 25700., 27679.,
      29728., 32266., 34648., 37114., 39664., 41981., 44828., 47773., 50816.,
      47937., 50980., 54121., 57360., 44914., 47608., 50386., 53248., 39739.,
      42028., 44387., 46816., 34412., 36304., 38252., 40256., 24060., 25680.,
      27356., 29088., 30479., 32548., 34687., 36896., 38218., 40792., 43450.,
      46192., 45277., 48348., 51517., 54784., 51233., 54500., 57865., 61328.,
      45490., 48376., 51346., 54400., 37467., 39916., 42435., 45024., 31212.,
      33232., 35308., 37440., 16392., 17824., 19304., 20832., 23546., 25360.,
      27234., 29168., 31820., 34064., 36380., 38768., 41246., 43904., 46646.,
      49472., 46838., 49664., 52574., 55568., 43484., 45968., 48524., 51152.,
      38114., 40208., 42362., 44576., 32744., 34464., 36232., 38048., 22148.,
      23408., 24708., 26048., 27289., 28868., 30497., 32176., 33366., 35304.,
      37302., 39360., 38347., 40620., 42963., 45376., 42791., 45204., 47687.,
      50240., 36558., 38664., 40830., 43056., 28557., 30316., 32125., 33984.,
      22868., 24304., 25780., 27296., 9712.,  10688., 11696., 12736., 14316.,
      15552., 16828., 18144., 19688., 21216., 22792., 24416., 25828., 27616.,
      29460., 31360., 29620., 31520., 33476., 35488., 28232., 29920., 31656.,
      33440., 25564., 27008., 28492., 30016., 21552., 22720., 23920., 25152.,
      7856.,  8640.,  9456.,  10304., 10396., 11424., 12492., 13600., 13640.,
      14944., 16296., 17696., 17652., 19264., 20932., 22656., 20740., 22464.,
      24244., 26080., 18408., 19936., 21512., 23136., 14860., 16160., 17500.,
      18880., 14192., 15296., 16432., 17600., 12388., 13424., 14500., 15616.,
      17601., 18900., 20249., 21648., 23526., 25128., 26790., 28512., 30243.,
      32188., 34203., 36288., 34271., 36356., 38511., 40736., 31518., 33352.,
      35246., 37200., 27221., 28764., 30357., 32000., 23412., 24688., 26004.,
      27360., 16808., 18080., 19400., 20768., 20594., 22208., 23882., 25616.,
      25340., 27344., 29420., 31568., 31142., 33584., 36110., 38720., 35870.,
      38480., 41174., 43952., 31564., 33872., 36252., 38704., 25402., 27360.,
      29378., 31456., 21448., 23072., 24744., 26464., 16508., 18000., 19548.,
      21152., 23791., 25700., 27679., 29728., 32266., 34648., 37114., 39664.,
      41981., 44828., 47773., 50816., 47937., 50980., 54121., 57360., 44914.,
      47608., 50386., 53248., 39739., 42028., 44387., 46816., 34412., 36304.,
      38252., 40256., 24060., 25680., 27356., 29088., 30479., 32548., 34687.,
      36896., 38218., 40792., 43450., 46192., 45277., 48348., 51517., 54784.,
      51233., 54500., 57865., 61328., 45490., 48376., 51346., 54400., 37467.,
      39916., 42435., 45024., 31212., 33232., 35308., 37440., 16508., 18000.,
      19548., 21152., 23791., 25700., 27679., 29728., 32266., 34648., 37114.,
      39664., 41981., 44828., 47773., 50816., 47937., 50980., 54121., 57360.,
      44914., 47608., 50386., 53248., 39739., 42028., 44387., 46816., 34412.,
      36304., 38252., 40256., 23048., 24480., 25960., 27488., 28794., 30608.,
      32482., 34416., 35660., 37904., 40220., 42608., 41630., 44288., 47030.,
      49856., 47222., 50048., 52958., 55952., 41180., 43664., 46220., 48848.,
      33122., 35216., 37370., 39584., 27112., 28832., 30600., 32416., 11012.,
      12144., 13316., 14528., 16121., 17540., 19009., 20528., 22038., 23784.,
      25590., 27456., 28779., 30828., 32947., 35136., 33223., 35412., 37671.,
      40000., 30606., 32520., 34494., 36528., 26349., 27948., 29597., 31296.,
      22484., 23792., 25140., 26528., 16880., 17856., 18864., 19904., 21228.,
      22464., 23740., 25056., 26344., 27872., 29448., 31072., 30180., 31968.,
      33812., 35712., 33972., 35872., 37828., 39840., 30792., 32480., 34216.,
      36000., 26332., 27776., 29260., 30784., 20528., 21696., 22896., 24128.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    34.,
      56.,    82.,    112.,   58.,    88.,    122.,   160.,   82.,    120.,
      162.,   208.,   106.,   152.,   202.,   256.,   130.,   184.,   242.,
      304.,   125.,   156.,   189.,   224.,   38.,    80.,    126.,   176.,
      236.,   336.,   444.,   560.,   348.,   464.,   588.,   720.,   460.,
      592.,   732.,   880.,   572.,   720.,   876.,   1040.,  684.,   848.,
      1020.,  1200.,  796.,   976.,   1164.,  1360.,  590.,   688.,   790.,
      896.,   335.,   452.,   575.,   704.,   1126.,  1384.,  1654.,  1936.,
      1390.,  1672.,  1966.,  2272.,  1654.,  1960.,  2278.,  2608.,  1918.,
      2248.,  2590.,  2944.,  2182.,  2536.,  2902.,  3280.,  2446.,  2824.,
      3214.,  3616.,  1619.,  1820.,  2027.,  2240.,  1091.,  1292.,  1499.,
      1712.,  2974.,  3400.,  3838.,  4288.,  3238.,  3688.,  4150.,  4624.,
      3502.,  3976.,  4462.,  4960.,  3766.,  4264.,  4774.,  5296.,  4030.,
      4552.,  5086.,  5632.,  4294.,  4840.,  5398.,  5968.,  2711.,  2996.,
      3287.,  3584.,  1847.,  2132.,  2423.,  2720.,  4822.,  5416.,  6022.,
      6640.,  5086.,  5704.,  6334.,  6976.,  5350.,  5992.,  6646.,  7312.,
      5614.,  6280.,  6958.,  7648.,  5878.,  6568.,  7270.,  7984.,  6142.,
      6856.,  7582.,  8320.,  3803.,  4172.,  4547.,  4928.,  2603.,  2972.,
      3347.,  3728.,  6670.,  7432.,  8206.,  8992.,  6934.,  7720.,  8518.,
      9328.,  7198.,  8008.,  8830.,  9664.,  7462.,  8296.,  9142.,  10000.,
      7726.,  8584.,  9454.,  10336., 7990.,  8872.,  9766.,  10672., 4895.,
      5348.,  5807.,  6272.,  3359.,  3812.,  4271.,  4736.,  8518.,  9448.,
      10390., 11344., 8782.,  9736.,  10702., 11680., 9046.,  10024., 11014.,
      12016., 9310.,  10312., 11326., 12352., 9574.,  10600., 11638., 12688.,
      9838.,  10888., 11950., 13024., 5987.,  6524.,  7067.,  7616.,  3918.,
      4256.,  4598.,  4944.,  9180.,  9872.,  10572., 11280., 9420.,  10128.,
      10844., 11568., 9660.,  10384., 11116., 11856., 9900.,  10640., 11388.,
      12144., 10140., 10896., 11660., 12432., 10380., 11152., 11932., 12720.,
      5974.,  6368.,  6766.,  7168.,  2873.,  3060.,  3249.,  3440.,  6490.,
      6872.,  7258.,  7648.,  6642.,  7032.,  7426.,  7824.,  6794.,  7192.,
      7594.,  8000.,  6946.,  7352.,  7762.,  8176.,  7098.,  7512.,  7930.,
      8352.,  7250.,  7672.,  8098.,  8528.,  4053.,  4268.,  4485.,  4704.,
      25.,    52.,    81.,    112.,   154.,   216.,   282.,   352.,   370.,
      440.,   514.,   592.,   586.,   664.,   746.,   832.,   802.,   888.,
      978.,   1072.,  1018.,  1112.,  1210.,  1312.,  1234.,  1336.,  1442.,
      1552.,  725.,   780.,   837.,   896.,   758.,   848.,   942.,   1040.,
      1868.,  2064.,  2268.,  2480.,  2364.,  2576.,  2796.,  3024.,  2860.,
      3088.,  3324.,  3568.,  3356.,  3600.,  3852.,  4112.,  3852.,  4112.,
      4380.,  4656.,  4348.,  4624.,  4908.,  5200.,  2462.,  2608.,  2758.,
      2912.,  2423.,  2612.,  2807.,  3008.,  5590.,  5992.,  6406.,  6832.,
      6430.,  6856.,  7294.,  7744.,  7270.,  7720.,  8182.,  8656.,  8110.,
      8584.,  9070.,  9568.,  8950.,  9448.,  9958.,  10480., 9790.,  10312.,
      10846., 11392., 5435.,  5708.,  5987.,  6272.,  5195.,  5468.,  5747.,
      6032.,  11470., 12040., 12622., 13216., 12310., 12904., 13510., 14128.,
      13150., 13768., 14398., 15040., 13990., 14632., 15286., 15952., 14830.,
      15496., 16174., 16864., 15670., 16360., 17062., 17776., 8543.,  8900.,
      9263.,  9632.,  7967.,  8324.,  8687.,  9056.,  17350., 18088., 18838.,
      19600., 18190., 18952., 19726., 20512., 19030., 19816., 20614., 21424.,
      19870., 20680., 21502., 22336., 20710., 21544., 22390., 23248., 21550.,
      22408., 23278., 24160., 11651., 12092., 12539., 12992., 10739., 11180.,
      11627., 12080., 23230., 24136., 25054., 25984., 24070., 25000., 25942.,
      26896., 24910., 25864., 26830., 27808., 25750., 26728., 27718., 28720.,
      26590., 27592., 28606., 29632., 27430., 28456., 29494., 30544., 14759.,
      15284., 15815., 16352., 13511., 14036., 14567., 15104., 29110., 30184.,
      31270., 32368., 29950., 31048., 32158., 33280., 30790., 31912., 33046.,
      34192., 31630., 32776., 33934., 35104., 32470., 33640., 34822., 36016.,
      33310., 34504., 35710., 36928., 17867., 18476., 19091., 19712., 11358.,
      11744., 12134., 12528., 24252., 25040., 25836., 26640., 24876., 25680.,
      26492., 27312., 25500., 26320., 27148., 27984., 26124., 26960., 27804.,
      28656., 26748., 27600., 28460., 29328., 27372., 28240., 29116., 30000.,
      14566., 15008., 15454., 15904., 6929.,  7140.,  7353.,  7568.,  14698.,
      15128., 15562., 16000., 15042., 15480., 15922., 16368., 15386., 15832.,
      16282., 16736., 15730., 16184., 16642., 17104., 16074., 16536., 17002.,
      17472., 16418., 16888., 17362., 17840., 8685.,  8924.,  9165.,  9408.,
      49.,    100.,   153.,   208.,   298.,   408.,   522.,   640.,   706.,
      824.,   946.,   1072.,  1114.,  1240.,  1370.,  1504.,  1522.,  1656.,
      1794.,  1936.,  1930.,  2072.,  2218.,  2368.,  2338.,  2488.,  2642.,
      2800.,  1325.,  1404.,  1485.,  1568.,  1478.,  1616.,  1758.,  1904.,
      3500.,  3792.,  4092.,  4400.,  4380.,  4688.,  5004.,  5328.,  5260.,
      5584.,  5916.,  6256.,  6140.,  6480.,  6828.,  7184.,  7020.,  7376.,
      7740.,  8112.,  7900.,  8272.,  8652.,  9040.,  4334.,  4528.,  4726.,
      4928.,  4511.,  4772.,  5039.,  5312.,  10054., 10600., 11158., 11728.,
      11470., 12040., 12622., 13216., 12886., 13480., 14086., 14704., 14302.,
      14920., 15550., 16192., 15718., 16360., 17014., 17680., 17134., 17800.,
      18478., 19168., 9251.,  9596.,  9947.,  10304., 9299.,  9644.,  9995.,
      10352., 19966., 20680., 21406., 22144., 21382., 22120., 22870., 23632.,
      22798., 23560., 24334., 25120., 24214., 25000., 25798., 26608., 25630.,
      26440., 27262., 28096., 27046., 27880., 28726., 29584., 14375., 14804.,
      15239., 15680., 14087., 14516., 14951., 15392., 29878., 30760., 31654.,
      32560., 31294., 32200., 33118., 34048., 32710., 33640., 34582., 35536.,
      34126., 35080., 36046., 37024., 35542., 36520., 37510., 38512., 36958.,
      37960., 38974., 40000., 19499., 20012., 20531., 21056., 18875., 19388.,
      19907., 20432., 39790., 40840., 41902., 42976., 41206., 42280., 43366.,
      44464., 42622., 43720., 44830., 45952., 44038., 45160., 46294., 47440.,
      45454., 46600., 47758., 48928., 46870., 48040., 49222., 50416., 24623.,
      25220., 25823., 26432., 23663., 24260., 24863., 25472., 49702., 50920.,
      52150., 53392., 51118., 52360., 53614., 54880., 52534., 53800., 55078.,
      56368., 53950., 55240., 56542., 57856., 55366., 56680., 58006., 59344.,
      56782., 58120., 59470., 60832., 29747., 30428., 31115., 31808., 18798.,
      19232., 19670., 20112., 39324., 40208., 41100., 42000., 40332., 41232.,
      42140., 43056., 41340., 42256., 43180., 44112., 42348., 43280., 44220.,
      45168., 43356., 44304., 45260., 46224., 44364., 45328., 46300., 47280.,
      23158., 23648., 24142., 24640., 10985., 11220., 11457., 11696., 22906.,
      23384., 23866., 24352., 23442., 23928., 24418., 24912., 23978., 24472.,
      24970., 25472., 24514., 25016., 25522., 26032., 25050., 25560., 26074.,
      26592., 25586., 26104., 26626., 27152., 13317., 13580., 13845., 14112.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 7032.,
      9560.,  12472., 15768., 8924.,  11980., 15484., 19436., 11516., 14956.,
      18844., 23180., 10488., 13528., 16952., 20760., 8596.,  11108., 13940.,
      17092., 5840.,  7696.,  9808.,  12176., 6660.,  8980.,  11620., 14580.,
      7597.,  10209., 13221., 16633., 8934.,  12030., 15606., 19662., 10799.,
      14571., 18903., 23795., 13079., 17331., 22143., 27515., 13174., 16974.,
      21254., 26014., 11333., 14489., 18045., 22001., 7428.,  9748.,  12388.,
      15348., 8248.,  11032., 14200., 17752., 8494.,  11686., 15358., 19510.,
      11012., 14740., 19044., 23924., 13594., 18114., 23306., 29170., 16202.,
      21298., 27066., 33506., 14404., 18900., 23972., 29620., 13406., 17174.,
      21422., 26150., 9272.,  12056., 15224., 18776., 10092., 13340., 17036.,
      21180., 10135., 13875., 18175., 23035., 12242., 16666., 21762., 27530.,
      16285., 21585., 27669., 34537., 19861., 25833., 32589., 40129., 17346.,
      22602., 28530., 35130., 14303., 18651., 23559., 29027., 10860., 14108.,
      17804., 21948., 10092., 13340., 17036., 21180., 10135., 13875., 18175.,
      23035., 12242., 16666., 21762., 27530., 16285., 21585., 27669., 34537.,
      19861., 25833., 32589., 40129., 17346., 22602., 28530., 35130., 14303.,
      18651., 23559., 29027., 10860., 14108., 17804., 21948., 10092., 13340.,
      17036., 21180., 10135., 13875., 18175., 23035., 12242., 16666., 21762.,
      27530., 16285., 21585., 27669., 34537., 19861., 25833., 32589., 40129.,
      17346., 22602., 28530., 35130., 14303., 18651., 23559., 29027., 10860.,
      14108., 17804., 21948., 9272.,  12056., 15224., 18776., 8542.,  11798.,
      15534., 19750., 10340., 14196., 18628., 23636., 14410., 18994., 24250.,
      30178., 18298., 23458., 29290., 35794., 14660., 19156., 24228., 29876.,
      11566., 15270., 19454., 24118., 9272.,  12056., 15224., 18776., 7684.,
      10004., 12644., 15604., 7645.,  10321., 13397., 16873., 8262.,  11486.,
      15190., 19374., 11615., 15451., 19847., 24803., 15175., 19491., 24367.,
      29803., 13430., 17230., 21510., 26270., 9493.,  12585., 16077., 19969.,
      7428.,  9748.,  12388., 15348., 5840.,  7696.,  9808.,  12176., 6004.,
      8132.,  10580., 13348., 7032.,  9560.,  12472., 15768., 8924.,  11980.,
      15484., 19436., 11516., 14956., 18844., 23180., 10488., 13528., 16952.,
      20760., 8596.,  11108., 13940., 17092., 5840.,  7696.,  9808.,  12176.,
      5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 7032.,
      9560.,  12472., 15768., 8924.,  11980., 15484., 19436., 11516., 14956.,
      18844., 23180., 10488., 13528., 16952., 20760., 8596.,  11108., 13940.,
      17092., 5840.,  7696.,  9808.,  12176., 6660.,  8980.,  11620., 14580.,
      7597.,  10209., 13221., 16633., 8934.,  12030., 15606., 19662., 10799.,
      14571., 18903., 23795., 13079., 17331., 22143., 27515., 13174., 16974.,
      21254., 26014., 11333., 14489., 18045., 22001., 7428.,  9748.,  12388.,
      15348., 8248.,  11032., 14200., 17752., 8494.,  11686., 15358., 19510.,
      11012., 14740., 19044., 23924., 13594., 18114., 23306., 29170., 16202.,
      21298., 27066., 33506., 14404., 18900., 23972., 29620., 13406., 17174.,
      21422., 26150., 9272.,  12056., 15224., 18776., 10092., 13340., 17036.,
      21180., 10135., 13875., 18175., 23035., 12242., 16666., 21762., 27530.,
      16285., 21585., 27669., 34537., 19861., 25833., 32589., 40129., 17346.,
      22602., 28530., 35130., 14303., 18651., 23559., 29027., 10860., 14108.,
      17804., 21948., 10092., 13340., 17036., 21180., 10135., 13875., 18175.,
      23035., 12242., 16666., 21762., 27530., 16285., 21585., 27669., 34537.,
      19861., 25833., 32589., 40129., 17346., 22602., 28530., 35130., 14303.,
      18651., 23559., 29027., 10860., 14108., 17804., 21948., 10092., 13340.,
      17036., 21180., 10135., 13875., 18175., 23035., 12242., 16666., 21762.,
      27530., 16285., 21585., 27669., 34537., 19861., 25833., 32589., 40129.,
      17346., 22602., 28530., 35130., 14303., 18651., 23559., 29027., 10860.,
      14108., 17804., 21948., 9272.,  12056., 15224., 18776., 8542.,  11798.,
      15534., 19750., 10340., 14196., 18628., 23636., 14410., 18994., 24250.,
      30178., 18298., 23458., 29290., 35794., 14660., 19156., 24228., 29876.,
      11566., 15270., 19454., 24118., 9272.,  12056., 15224., 18776., 7684.,
      10004., 12644., 15604., 7645.,  10321., 13397., 16873., 8262.,  11486.,
      15190., 19374., 11615., 15451., 19847., 24803., 15175., 19491., 24367.,
      29803., 13430., 17230., 21510., 26270., 9493.,  12585., 16077., 19969.,
      7428.,  9748.,  12388., 15348., 5840.,  7696.,  9808.,  12176., 6004.,
      8132.,  10580., 13348., 7032.,  9560.,  12472., 15768., 8924.,  11980.,
      15484., 19436., 11516., 14956., 18844., 23180., 10488., 13528., 16952.,
      20760., 8596.,  11108., 13940., 17092., 5840.,  7696.,  9808.,  12176.,
      5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 7032.,
      9560.,  12472., 15768., 8924.,  11980., 15484., 19436., 11516., 14956.,
      18844., 23180., 10488., 13528., 16952., 20760., 8596.,  11108., 13940.,
      17092., 5840.,  7696.,  9808.,  12176., 6660.,  8980.,  11620., 14580.,
      7597.,  10209., 13221., 16633., 8934.,  12030., 15606., 19662., 10799.,
      14571., 18903., 23795., 13079., 17331., 22143., 27515., 13174., 16974.,
      21254., 26014., 11333., 14489., 18045., 22001., 7428.,  9748.,  12388.,
      15348., 8248.,  11032., 14200., 17752., 8494.,  11686., 15358., 19510.,
      11012., 14740., 19044., 23924., 13594., 18114., 23306., 29170., 16202.,
      21298., 27066., 33506., 14404., 18900., 23972., 29620., 13406., 17174.,
      21422., 26150., 9272.,  12056., 15224., 18776., 10092., 13340., 17036.,
      21180., 10135., 13875., 18175., 23035., 12242., 16666., 21762., 27530.,
      16285., 21585., 27669., 34537., 19861., 25833., 32589., 40129., 17346.,
      22602., 28530., 35130., 14303., 18651., 23559., 29027., 10860., 14108.,
      17804., 21948., 10092., 13340., 17036., 21180., 10135., 13875., 18175.,
      23035., 12242., 16666., 21762., 27530., 16285., 21585., 27669., 34537.,
      19861., 25833., 32589., 40129., 17346., 22602., 28530., 35130., 14303.,
      18651., 23559., 29027., 10860., 14108., 17804., 21948., 10092., 13340.,
      17036., 21180., 10135., 13875., 18175., 23035., 12242., 16666., 21762.,
      27530., 16285., 21585., 27669., 34537., 19861., 25833., 32589., 40129.,
      17346., 22602., 28530., 35130., 14303., 18651., 23559., 29027., 10860.,
      14108., 17804., 21948., 9272.,  12056., 15224., 18776., 8542.,  11798.,
      15534., 19750., 10340., 14196., 18628., 23636., 14410., 18994., 24250.,
      30178., 18298., 23458., 29290., 35794., 14660., 19156., 24228., 29876.,
      11566., 15270., 19454., 24118., 9272.,  12056., 15224., 18776., 7684.,
      10004., 12644., 15604., 7645.,  10321., 13397., 16873., 8262.,  11486.,
      15190., 19374., 11615., 15451., 19847., 24803., 15175., 19491., 24367.,
      29803., 13430., 17230., 21510., 26270., 9493.,  12585., 16077., 19969.,
      7428.,  9748.,  12388., 15348., 5840.,  7696.,  9808.,  12176., 6004.,
      8132.,  10580., 13348., 7032.,  9560.,  12472., 15768., 8924.,  11980.,
      15484., 19436., 11516., 14956., 18844., 23180., 10488., 13528., 16952.,
      20760., 8596.,  11108., 13940., 17092., 5840.,  7696.,  9808.,  12176.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   234.,
      402.,   602.,   834.,   410.,   642.,   906.,   1202.,  586.,   882.,
      1210.,  1570.,  762.,   1122.,  1514.,  1938.,  938.,   1362.,  1818.,
      2306.,  941.,   1185.,  1445.,  1721.,  226.,   554.,   914.,   1306.,
      1508.,  2036.,  2628.,  3284.,  1156.,  1556.,  2020.,  2548.,  2020.,
      2548.,  3140.,  3796.,  2884.,  3540.,  4260.,  5044.,  3748.,  4532.,
      5380.,  6292.,  4612.,  5524.,  6500.,  7540.,  3314.,  3834.,  4386.,
      4970.,  2263.,  2931.,  3647.,  4411.,  4862.,  6134.,  7502.,  8966.,
      3470.,  4422.,  5470.,  6614.,  4318.,  5206.,  6190.,  7270.,  6382.,
      7462.,  8638.,  9910.,  8446.,  9718.,  11086., 12550., 10510., 11974.,
      13534., 15190., 6863.,  7691.,  8567.,  9491.,  5711.,  6539.,  7415.,
      8339.,  10350., 11942., 13630., 15414., 4862.,  6134.,  7502.,  8966.,
      3470.,  4422.,  5470.,  6614.,  4318.,  5206.,  6190.,  7270.,  6382.,
      7462.,  8638.,  9910.,  8446.,  9718.,  11086., 12550., 5639.,  6371.,
      7151.,  7979.,  4871.,  5603.,  6383.,  7211.,  12574., 14230., 15982.,
      17830., 10350., 11942., 13630., 15414., 4862.,  6134.,  7502.,  8966.,
      3470.,  4422.,  5470.,  6614.,  4318.,  5206.,  6190.,  7270.,  6382.,
      7462.,  8638.,  9910.,  4415.,  5051.,  5735.,  6467.,  4031.,  4667.,
      5351.,  6083.,  10510., 11974., 13534., 15190., 12574., 14230., 15982.,
      17830., 10350., 11942., 13630., 15414., 4862.,  6134.,  7502.,  8966.,
      3470.,  4422.,  5470.,  6614.,  4318.,  5206.,  6190.,  7270.,  3191.,
      3731.,  4319.,  4955.,  3191.,  3731.,  4319.,  4955.,  8446.,  9718.,
      11086., 12550., 10510., 11974., 13534., 15190., 12574., 14230., 15982.,
      17830., 10350., 11942., 13630., 15414., 4862.,  6134.,  7502.,  8966.,
      3470.,  4422.,  5470.,  6614.,  1967.,  2411.,  2903.,  3443.,  2322.,
      2714.,  3138.,  3594.,  6148.,  7060.,  8036.,  9076.,  8036.,  9076.,
      10180., 11348., 9924.,  11092., 12324., 13620., 11812., 13108., 14468.,
      15892., 9412.,  10580., 11812., 13108., 3748.,  4532.,  5380.,  6292.,
      866.,   1194.,  1554.,  1946.,  1173.,  1385.,  1613.,  1857.,  3162.,
      3650.,  4170.,  4722.,  4362.,  4914.,  5498.,  6114.,  5562.,  6178.,
      6826.,  7506.,  6762.,  7442.,  8154.,  8898.,  7962.,  8706.,  9482.,
      10290., 4874.,  5426.,  6010.,  6626.,  125.,   305.,   501.,   713.,
      149.,   361.,   589.,   833.,   1114.,  1602.,  2122.,  2674.,  2826.,
      3378.,  3962.,  4578.,  4538.,  5154.,  5802.,  6482.,  6250.,  6930.,
      7642.,  8386.,  7962.,  8706.,  9482.,  10290., 9674.,  10482., 11322.,
      12194., 5693.,  6129.,  6581.,  7049.,  5698.,  6154.,  6642.,  7162.,
      6820.,  7604.,  8452.,  9364.,  1348.,  2004.,  2724.,  3508.,  3236.,
      4020.,  4868.,  5780.,  5124.,  6036.,  7012.,  8052.,  7012.,  8052.,
      9156.,  10324., 8900.,  10068., 11300., 12596., 5714.,  6362.,  7042.,
      7754.,  5127.,  5859.,  6639.,  7467.,  12894., 14294., 15790., 17382.,
      7918.,  8998.,  10174., 11446., 3134.,  4150.,  5262.,  6470.,  5710.,
      6918.,  8222.,  9622.,  8286.,  9686.,  11182., 12774., 10862., 12454.,
      14142., 15926., 7167.,  8059.,  8999.,  9987.,  6271.,  7163.,  8103.,
      9091.,  13774., 15494., 17310., 19222., 12894., 14294., 15790., 17382.,
      7918.,  8998.,  10174., 11446., 3134.,  4150.,  5262.,  6470.,  5710.,
      6918.,  8222.,  9622.,  8286.,  9686.,  11182., 12774., 5687.,  6483.,
      7327.,  8219.,  5175.,  5971.,  6815.,  7707.,  13438., 15222., 17102.,
      19078., 13774., 15494., 17310., 19222., 12894., 14294., 15790., 17382.,
      7918.,  8998.,  10174., 11446., 3134.,  4150.,  5262.,  6470.,  5710.,
      6918.,  8222.,  9622.,  4207.,  4907.,  5655.,  6451.,  4079.,  4779.,
      5527.,  6323.,  10862., 12454., 14142., 15926., 13438., 15222., 17102.,
      19078., 13774., 15494., 17310., 19222., 12894., 14294., 15790., 17382.,
      7918.,  8998.,  10174., 11446., 3134.,  4150.,  5262.,  6470.,  2727.,
      3331.,  3983.,  4683.,  2983.,  3587.,  4239.,  4939.,  8286.,  9686.,
      11182., 12774., 10862., 12454., 14142., 15926., 13438., 15222., 17102.,
      19078., 13774., 15494., 17310., 19222., 12894., 14294., 15790., 17382.,
      7918.,  8998.,  10174., 11446., 1247.,  1755.,  2311.,  2915.,  946.,
      1210.,  1506.,  1834.,  2884.,  3540.,  4260.,  5044.,  3748.,  4532.,
      5380.,  6292.,  4612.,  5524.,  6500.,  7540.,  5476.,  6516.,  7620.,
      8788.,  4100.,  5012.,  5988.,  7028.,  1508.,  2036.,  2628.,  3284.,
      514.,   714.,   946.,   1210.,  613.,   761.,   925.,   1105.,  1786.,
      2146.,  2538.,  2962.,  2474.,  2898.,  3354.,  3842.,  3162.,  3650.,
      4170.,  4722.,  3850.,  4402.,  4986.,  5602.,  4538.,  5154.,  5802.,
      6482.,  2986.,  3410.,  3866.,  4354.,  77.,    193.,   325.,   473.,
      101.,   249.,   413.,   593.,   762.,   1122.,  1514.,  1938.,  1962.,
      2386.,  2842.,  3330.,  3162.,  3650.,  4170.,  4722.,  4362.,  4914.,
      5498.,  6114.,  5562.,  6178.,  6826.,  7506.,  6762.,  7442.,  8154.,
      8898.,  4109.,  4481.,  4869.,  5273.,  4002.,  4586.,  5202.,  5850.,
      5988.,  7028.,  8132.,  9300.,  3588.,  4500.,  5476.,  6516.,  6500.,
      7540.,  8644.,  9812.,  9412.,  10580., 11812., 13108., 12324., 13620.,
      14980., 16404., 15236., 16660., 18148., 19700., 9138.,  9914.,  10722.,
      11562., 9015.,  9811.,  10655., 11547., 14782., 16310., 17934., 19654.,
      6222.,  7430.,  8734.,  10134., 3998.,  5142.,  6382.,  7718.,  7086.,
      8422.,  9854.,  11382., 10174., 11702., 13326., 15046., 13262., 14982.,
      16798., 18710., 8495.,  9451.,  10455., 11507., 7855.,  8811.,  9815.,
      10867., 19246., 21094., 23038., 25078., 14782., 16310., 17934., 19654.,
      6222.,  7430.,  8734.,  10134., 3998.,  5142.,  6382.,  7718.,  7086.,
      8422.,  9854.,  11382., 10174., 11702., 13326., 15046., 6759.,  7619.,
      8527.,  9483.,  6503.,  7363.,  8271.,  9227.,  16350., 18262., 20270.,
      22374., 19246., 21094., 23038., 25078., 14782., 16310., 17934., 19654.,
      6222.,  7430.,  8734.,  10134., 3998.,  5142.,  6382.,  7718.,  7086.,
      8422.,  9854.,  11382., 5023.,  5787.,  6599.,  7459.,  5151.,  5915.,
      6727.,  7587.,  13262., 14982., 16798., 18710., 16350., 18262., 20270.,
      22374., 19246., 21094., 23038., 25078., 14782., 16310., 17934., 19654.,
      6222.,  7430.,  8734.,  10134., 3998.,  5142.,  6382.,  7718.,  3287.,
      3955.,  4671.,  5435.,  3799.,  4467.,  5183.,  5947.,  10174., 11702.,
      13326., 15046., 13262., 14982., 16798., 18710., 16350., 18262., 20270.,
      22374., 19246., 21094., 23038., 25078., 14782., 16310., 17934., 19654.,
      6222.,  7430.,  8734.,  10134., 1551.,  2123.,  2743.,  3411.,  1810.,
      2202.,  2626.,  3082.,  5124.,  6036.,  7012.,  8052.,  7012.,  8052.,
      9156.,  10324., 8900.,  10068., 11300., 12596., 10788., 12084., 13444.,
      14868., 12484., 13652., 14884., 16180., 6820.,  7604.,  8452.,  9364.,
      354.,   682.,   1042.,  1434.,  53.,    137.,   237.,   353.,   410.,
      642.,   906.,   1202.,  586.,   882.,   1210.,  1570.,  762.,   1122.,
      1514.,  1938.,  938.,   1362.,  1818.,  2306.,  1114.,  1602.,  2122.,
      2674.,  1098.,  1394.,  1722.,  2082.,  29.,    81.,    149.,   233.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,
      16920., 480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920.,
      750.,   4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,
      6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,
      13380., 25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,
      16920., 720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380.,
      1080.,  6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,
      7308.,  18732., 35532., 1080.,  6264.,  16056., 30456., 900.,   5220.,
      13380., 25380., 720.,   4176.,  10704., 20304., 840.,   4872.,  12488.,
      23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732., 35532.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,
      7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610.,
      29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,
      6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732.,
      35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1260.,  7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,
      4872.,  12488., 23688., 720.,   4176.,  10704., 20304., 900.,   5220.,
      13380., 25380., 1080.,  6264.,  16056., 30456., 1260.,  7308.,  18732.,
      35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056., 30456.,
      900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304., 600.,
      3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,   5220.,
      13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610.,
      29610., 900.,   5220.,  13380., 25380., 750.,   4350.,  11150., 21150.,
      600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536., 600.,
      3480.,  8920.,  16920., 720.,   4176.,  10704., 20304., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,
      16920., 480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920.,
      750.,   4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,
      6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,
      13380., 25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,
      16920., 720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380.,
      1080.,  6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,
      7308.,  18732., 35532., 1080.,  6264.,  16056., 30456., 900.,   5220.,
      13380., 25380., 720.,   4176.,  10704., 20304., 840.,   4872.,  12488.,
      23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732., 35532.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,
      7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610.,
      29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,
      6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732.,
      35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1260.,  7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,
      4872.,  12488., 23688., 720.,   4176.,  10704., 20304., 900.,   5220.,
      13380., 25380., 1080.,  6264.,  16056., 30456., 1260.,  7308.,  18732.,
      35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056., 30456.,
      900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304., 600.,
      3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,   5220.,
      13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610.,
      29610., 900.,   5220.,  13380., 25380., 750.,   4350.,  11150., 21150.,
      600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536., 600.,
      3480.,  8920.,  16920., 720.,   4176.,  10704., 20304., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,
      16920., 480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920.,
      750.,   4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,
      6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,
      13380., 25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,
      16920., 720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380.,
      1080.,  6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,
      7308.,  18732., 35532., 1080.,  6264.,  16056., 30456., 900.,   5220.,
      13380., 25380., 720.,   4176.,  10704., 20304., 840.,   4872.,  12488.,
      23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732., 35532.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,
      7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610.,
      29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,
      6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732.,
      35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1260.,  7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,
      4872.,  12488., 23688., 720.,   4176.,  10704., 20304., 900.,   5220.,
      13380., 25380., 1080.,  6264.,  16056., 30456., 1260.,  7308.,  18732.,
      35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056., 30456.,
      900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304., 600.,
      3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,   5220.,
      13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610.,
      29610., 900.,   5220.,  13380., 25380., 750.,   4350.,  11150., 21150.,
      600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536., 600.,
      3480.,  8920.,  16920., 720.,   4176.,  10704., 20304., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1724.,
      3036.,  4604.,  6428.,  3068.,  4892.,  6972.,  9308.,  3772.,  5084.,
      6652.,  8476.,  380.,   1180.,  2236.,  3548.,  1724.,  3036.,  4604.,
      6428.,  2558.,  3470.,  4510.,  5678.,  860.,   2428.,  4252.,  6332.,
      6840.,  9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 15672.,
      19832., 24504., 29688., 13624., 17784., 22456., 27640., 6840.,  9976.,
      13624., 17784., 8888.,  12024., 15672., 19832., 8348.,  10428., 12764.,
      15356., 7354.,  9578.,  12186., 15178., 14004., 18964., 24692., 31188.,
      8564.,  13012., 18228., 24212., 11956., 16916., 22644., 29140., 19444.,
      24916., 31156., 38164., 14004., 18964., 24692., 31188., 8564.,  13012.,
      18228., 24212., 6490.,  8970.,  11834., 15082., 5466.,  7946.,  10810.,
      14058., 19444., 24916., 31156., 38164., 14004., 18964., 24692., 31188.,
      8564.,  13012., 18228., 24212., 11956., 16916., 22644., 29140., 19444.,
      24916., 31156., 38164., 14004., 18964., 24692., 31188., 5626.,  8362.,
      11482., 14986., 2938.,  4650.,  6746.,  9226.,  11956., 16916., 22644.,
      29140., 19444., 24916., 31156., 38164., 14004., 18964., 24692., 31188.,
      8564.,  13012., 18228., 24212., 11956., 16916., 22644., 29140., 19444.,
      24916., 31156., 38164., 12954., 15946., 19322., 23082., 1050.,  3018.,
      5370.,  8106.,  8564.,  13012., 18228., 24212., 11956., 16916., 22644.,
      29140., 19444., 24916., 31156., 38164., 14004., 18964., 24692., 31188.,
      8564.,  13012., 18228., 24212., 11956., 16916., 22644., 29140., 12090.,
      15338., 18970., 22986., 7354.,  9578.,  12186., 15178., 14004., 18964.,
      24692., 31188., 8564.,  13012., 18228., 24212., 11956., 16916., 22644.,
      29140., 19444., 24916., 31156., 38164., 14004., 18964., 24692., 31188.,
      8564.,  13012., 18228., 24212., 6490.,  8970.,  11834., 15082., 5276.,
      7356.,  9692.,  12284., 17720., 21880., 26552., 31736., 10936., 14072.,
      17720., 21880., 4792.,  7928.,  11576., 15736., 11576., 15736., 20408.,
      25592., 17720., 21880., 26552., 31736., 10936., 14072., 17720., 21880.,
      1884.,  3452.,  5276.,  7356.,  350.,   1006.,  1790.,  2702.,  3068.,
      4892.,  6972.,  9308.,  3772.,  5084.,  6652.,  8476.,  380.,   1180.,
      2236.,  3548.,  1724.,  3036.,  4604.,  6428.,  3068.,  4892.,  6972.,
      9308.,  3772.,  5084.,  6652.,  8476.,  190.,   590.,   1118.,  1774.,
      350.,   1006.,  1790.,  2702.,  3068.,  4892.,  6972.,  9308.,  8508.,
      10844., 13436., 16284., 13948., 16796., 19900., 23260., 10556., 12892.,
      15484., 18332., 3068.,  4892.,  6972.,  9308.,  8508.,  10844., 13436.,
      16284., 6974.,  8398.,  9950.,  11630., 7004.,  8572.,  10396., 12476.,
      10936., 14072., 17720., 21880., 4792.,  7928.,  11576., 15736., 11576.,
      15736., 20408., 25592., 17720., 21880., 26552., 31736., 10936., 14072.,
      17720., 21880., 4792.,  7928.,  11576., 15736., 6300.,  8380.,  10716.,
      13308., 5626.,  8362.,  11482., 14986., 20788., 26772., 33524., 41044.,
      19444., 24916., 31156., 38164., 18740., 24724., 31476., 38996., 22132.,
      28628., 35892., 43924., 20788., 26772., 33524., 41044., 19444., 24916.,
      31156., 38164., 8858.,  11850., 15226., 18986., 9882.,  12874., 16250.,
      20010., 22132., 28628., 35892., 43924., 20788., 26772., 33524., 41044.,
      19444., 24916., 31156., 38164., 18740., 24724., 31476., 38996., 22132.,
      28628., 35892., 43924., 20788., 26772., 33524., 41044., 14138., 17386.,
      21018., 25034., 5306.,  7530.,  10138., 13130., 18740., 24724., 31476.,
      38996., 22132., 28628., 35892., 43924., 20788., 26772., 33524., 41044.,
      19444., 24916., 31156., 38164., 18740., 24724., 31476., 38996., 22132.,
      28628., 35892., 43924., 11226., 14730., 18618., 22890., 9562.,  12042.,
      14906., 18154., 19444., 24916., 31156., 38164., 18740., 24724., 31476.,
      38996., 22132., 28628., 35892., 43924., 20788., 26772., 33524., 41044.,
      19444., 24916., 31156., 38164., 18740., 24724., 31476., 38996., 16506.,
      20266., 24410., 28938., 5626.,  8362.,  11482., 14986., 20788., 26772.,
      33524., 41044., 19444., 24916., 31156., 38164., 18740., 24724., 31476.,
      38996., 22132., 28628., 35892., 43924., 20788., 26772., 33524., 41044.,
      19444., 24916., 31156., 38164., 8858.,  11850., 15226., 18986., 7324.,
      9404.,  11740., 14332., 13624., 17784., 22456., 27640., 6840.,  9976.,
      13624., 17784., 8888.,  12024., 15672., 19832., 15672., 19832., 24504.,
      29688., 13624., 17784., 22456., 27640., 6840.,  9976.,  13624., 17784.,
      3932.,  5500.,  7324.,  9404.,  4766.,  5934.,  7230.,  8654.,  13948.,
      16796., 19900., 23260., 10556., 12892., 15484., 18332., 3068.,  4892.,
      6972.,  9308.,  8508.,  10844., 13436., 16284., 13948., 16796., 19900.,
      23260., 10556., 12892., 15484., 18332., 510.,   1422.,  2462.,  3630.,
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1724.,
      3036.,  4604.,  6428.,  3068.,  4892.,  6972.,  9308.,  3772.,  5084.,
      6652.,  8476.,  380.,   1180.,  2236.,  3548.,  1724.,  3036.,  4604.,
      6428.,  2558.,  3470.,  4510.,  5678.,  860.,   2428.,  4252.,  6332.,
      6840.,  9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 15672.,
      19832., 24504., 29688., 13624., 17784., 22456., 27640., 6840.,  9976.,
      13624., 17784., 8888.,  12024., 15672., 19832., 8348.,  10428., 12764.,
      15356., 7354.,  9578.,  12186., 15178., 14004., 18964., 24692., 31188.,
      8564.,  13012., 18228., 24212., 11956., 16916., 22644., 29140., 19444.,
      24916., 31156., 38164., 14004., 18964., 24692., 31188., 8564.,  13012.,
      18228., 24212., 6490.,  8970.,  11834., 15082., 5466.,  7946.,  10810.,
      14058., 19444., 24916., 31156., 38164., 14004., 18964., 24692., 31188.,
      8564.,  13012., 18228., 24212., 11956., 16916., 22644., 29140., 19444.,
      24916., 31156., 38164., 14004., 18964., 24692., 31188., 5626.,  8362.,
      11482., 14986., 2938.,  4650.,  6746.,  9226.,  11956., 16916., 22644.,
      29140., 19444., 24916., 31156., 38164., 14004., 18964., 24692., 31188.,
      8564.,  13012., 18228., 24212., 11956., 16916., 22644., 29140., 19444.,
      24916., 31156., 38164., 12954., 15946., 19322., 23082., 1050.,  3018.,
      5370.,  8106.,  8564.,  13012., 18228., 24212., 11956., 16916., 22644.,
      29140., 19444., 24916., 31156., 38164., 14004., 18964., 24692., 31188.,
      8564.,  13012., 18228., 24212., 11956., 16916., 22644., 29140., 12090.,
      15338., 18970., 22986., 7354.,  9578.,  12186., 15178., 14004., 18964.,
      24692., 31188., 8564.,  13012., 18228., 24212., 11956., 16916., 22644.,
      29140., 19444., 24916., 31156., 38164., 14004., 18964., 24692., 31188.,
      8564.,  13012., 18228., 24212., 6490.,  8970.,  11834., 15082., 5276.,
      7356.,  9692.,  12284., 17720., 21880., 26552., 31736., 10936., 14072.,
      17720., 21880., 4792.,  7928.,  11576., 15736., 11576., 15736., 20408.,
      25592., 17720., 21880., 26552., 31736., 10936., 14072., 17720., 21880.,
      1884.,  3452.,  5276.,  7356.,  350.,   1006.,  1790.,  2702.,  3068.,
      4892.,  6972.,  9308.,  3772.,  5084.,  6652.,  8476.,  380.,   1180.,
      2236.,  3548.,  1724.,  3036.,  4604.,  6428.,  3068.,  4892.,  6972.,
      9308.,  3772.,  5084.,  6652.,  8476.,  190.,   590.,   1118.,  1774.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2048.,  2840.,  3752.,  4788.,  5194.,  5600.,  5240.,  4740.,  4096.,
      4220.,  5725.,  7420.,  9310.,  9940.,  10570., 9730.,  8675.,  7400.,
      7560.,  10110., 12936., 16044., 16947., 17850., 16248., 14340., 12120.,
      12320., 16310., 20678., 25431., 26656., 27881., 25172., 22050., 18508.,
      17858., 23230., 28979., 35112., 35889., 37114., 33083., 28640., 23778.,
      21796., 28038., 34656., 41657., 41986., 43211., 38306., 32990., 27256.,
      23752., 30316., 37232., 44506., 44359., 45556., 40224., 34510., 28408.,
      23280., 29519., 36070., 42938., 42266., 43386., 38224., 32725., 26884.,
      20128., 25332., 30792., 36512., 35266., 36260., 31928., 27320., 22432.,
      5584.,  7430.,  9464.,  11690., 12096., 12502., 11360., 10010., 8448.,
      9830.,  12950., 16345., 20020., 20650., 21280., 19165., 16750., 14030.,
      15528., 20181., 25148., 30435., 30954., 31409., 27984., 24215., 20096.,
      21778., 27902., 34395., 41264., 41657., 41986., 37235., 32080., 26514.,
      24372., 30918., 37832., 45121., 45066., 44947., 39770., 34190., 28200.,
      25174., 31694., 38581., 45842., 45339., 44772., 39617., 34060., 28094.,
      23824., 29685., 35872., 42391., 41412., 40369., 35700., 30675., 25288.,
      19570., 24006., 28711., 33690., 32186., 30618., 27151., 23390., 19330.,
      12160., 14342., 16720., 19298., 17220., 15078., 13592., 11890., 9968.,
      9056.,  11828., 14792., 17952., 18038., 18060., 15752., 13680., 11392.,
      14288., 18127., 22198., 26506., 26368., 26166., 22456., 19385., 16052.,
      19848., 24876., 30192., 35802., 35489., 35112., 29928., 25770., 21288.,
      25988., 32390., 39152., 46281., 45842., 45339., 38546., 33150., 27352.,
      25446., 31374., 37661., 44314., 43427., 42476., 35705., 30780., 25454.,
      23112., 28118., 33482., 39211., 37876., 36477., 30176., 26170., 21764.,
      18456., 21822., 25488., 29460., 27649., 25774., 20424., 17880., 15000.,
      13620., 17725., 22120., 26810., 27930., 29050., 25870., 22375., 18560.,
      15584., 20120., 24920., 29988., 30982., 31976., 28280., 24300., 20032.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    10.,   16.,   22.,   28.,   34.,   32.,   21.,   12.,
      38.,   80.,   101.,  122.,  143.,  164.,  138.,  84.,   54.,   144.,
      273.,  318.,  363.,  408.,  453.,  360.,  210.,  138.,  333.,  588.,
      633.,  678.,  723.,  768.,  591.,  336.,  222.,  522.,  903.,  948.,
      993.,  1038., 1083., 822.,  462.,  306.,  711.,  1218., 1263., 1308.,
      1353., 1398., 1053., 588.,  390.,  900.,  1533., 1578., 1623., 1668.,
      1713., 1284., 714.,  424.,  938.,  1544., 1583., 1622., 1661., 1700.,
      1238., 672.,  301.,  652.,  1054., 1078., 1102., 1126., 1150., 824.,
      441.,  10.,   31.,   64.,   97.,   130.,  163.,  196.,  149.,  84.,
      93.,   218.,  377.,  452.,  527.,  602.,  677.,  498.,  273.,  270.,
      603.,  1002., 1128., 1254., 1380., 1506., 1089., 588.,  543.,  1170.,
      1884., 2010., 2136., 2262., 2388., 1698., 903.,  816.,  1737., 2766.,
      2892., 3018., 3144., 3270., 2307., 1218., 1089., 2304., 3648., 3774.,
      3900., 4026., 4152., 2916., 1533., 1362., 2871., 4530., 4656., 4782.,
      4908., 5034., 3525., 1848., 1135., 2378., 3731., 3824., 3917., 4010.,
      4103., 2858., 1491., 688.,  1435., 2242., 2293., 2344., 2395., 2446.,
      1697., 882.,  19.,   58.,   118.,  178.,  238.,  298.,  358.,  266.,
      147.,  174.,  398.,  674.,  803.,  932.,  1061., 1190., 858.,  462.,
      486.,  1062., 1731., 1938., 2145., 2352., 2559., 1818., 966.,  948.,
      2007., 3180., 3387., 3594., 3801., 4008., 2805., 1470., 1410., 2952.,
      4629., 4836., 5043., 5250., 5457., 3792., 1974., 1872., 3897., 6078.,
      6285., 6492., 6699., 6906., 4779., 2478., 2334., 4842., 7527., 7734.,
      7941., 8148., 8355., 5766., 2982., 1846., 3818., 5918., 6065., 6212.,
      6359., 6506., 4478., 2310., 1075., 2218., 3430., 3508., 3586., 3664.,
      3742., 2570., 1323.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5808.,  7652.,  9832.,  12348., 11764., 10924., 10344., 9044.,  7344.,
      9196.,  12629., 15546., 18851., 19021., 18935., 15706., 11545., 7916.,
      12872., 15686., 17132., 19018., 19214., 19026., 15884., 12590., 10888.,
      13540., 17583., 21582., 26105., 26303., 26117., 21070., 16555., 12516.,
      17756., 20441., 24226., 27375., 26069., 25243., 22546., 19237., 15516.,
      14196., 17955., 21910., 26117., 25547., 26385., 21558., 17023., 13236.,
      17096., 20382., 22908., 24466., 25094., 25082., 21308., 16774., 14248.,
      12476., 15137., 18226., 21175., 21041., 20395., 15890., 13797., 11004.,
      10800., 11348., 14312., 15916., 15684., 14940., 13960., 12420., 10192.,
      6672.,  8652.,  10968., 11764., 10924., 11876., 10808., 8988.,  7856.,
      10516., 13195., 16262., 19021., 18935., 18593., 14774., 9983.,  7700.,
      14136., 15234., 16772., 19214., 19026., 18454., 15556., 13642., 12088.,
      14300., 17897., 22114., 26303., 26117., 25547., 21554., 16277., 13180.,
      17140., 20403., 24278., 26069., 25243., 26081., 23286., 19215., 15284.,
      13836., 17277., 21322., 25547., 26385., 26839., 22810., 17513., 14412.,
      16920., 18954., 21524., 25094., 25082., 24686., 20564., 17330., 14360.,
      12260., 14951., 18110., 21041., 20395., 19493., 17774., 15131., 11876.,
      8528.,  11132., 14136., 15684., 14940., 15988., 14712., 12748., 10064.,
      7440.,  9524.,  10088., 10924., 11876., 12572., 11016., 9668.,  8240.,
      10844., 13633., 16114., 18935., 18593., 17995., 13586., 10053., 7356.,
      13384., 14526., 16572., 19026., 18454., 18490., 17020., 15174., 13160.,
      14196., 17955., 21910., 26117., 25547., 26385., 21558., 17023., 13236.,
      17292., 20717., 23434., 25243., 26081., 26279., 22650., 18169., 15596.,
      14244., 17847., 22110., 26385., 26839., 26653., 21790., 19027., 15236.,
      15464., 17622., 22412., 25082., 24686., 23650., 20748., 16862., 13224.,
      13036., 15885., 19242., 20395., 19493., 20127., 17770., 14449., 10604.,
      8144.,  10884., 14056., 14940., 15988., 16524., 14728., 12212., 8944.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    59.,    101.,   143.,   185.,   227.,   222.,   149.,
      70.,    244.,   538.,   694.,   850.,   1006.,  1162.,  996.,   614.,
      363.,   1002.,  1941.,  2283.,  2625.,  2967.,  3309.,  2658.,  1563.,
      993.,   2430.,  4335.,  4677.,  5019.,  5361.,  5703.,  4422.,  2529.,
      1623.,  3858.,  6729.,  7071.,  7221.,  7115.,  6753.,  5034.,  2791.,
      2061.,  4646.,  7779.,  8121.,  7503.,  6629.,  5499.,  4110.,  2285.,
      1731.,  3898.,  6525.,  6867.,  5481.,  3839.,  1941.,  1650.,  1011.,
      526.,   1252.,  2194.,  2494.,  2794.,  3094.,  3394.,  2580.,  1454.,
      581.,   1302.,  2171.,  2357.,  2543.,  2729.,  2915.,  2142.,  1173.,
      59.,    202.,   437.,   695.,   953.,   1211.,  1469.,  1122.,  635.,
      682.,   1612.,  2806.,  3394.,  3982.,  4570.,  5158.,  3804.,  2090.,
      2037.,  4566.,  7611.,  8601.,  9591.,  10581., 11571., 8382.,  4533.,
      4179.,  9018.,  14541., 15531., 16521., 17511., 18501., 13170., 7011.,
      6321.,  13470., 21471., 22461., 20955., 19193., 17175., 12198., 6481.,
      5967.,  12674., 20145., 21135., 18861., 16331., 13545., 9690.,  5183.,
      4845.,  10342., 16515., 17505., 14463., 11165., 7611.,  5646.,  3117.,
      1570.,  3484.,  5758.,  6490.,  7222.,  7954.,  8686.,  6252.,  3362.,
      1355.,  2922.,  4709.,  5111.,  5513.,  5915.,  6317.,  4482.,  2379.,
      113.,   382.,   815.,   1289.,  1763.,  2237.,  2711.,  2022.,  1121.,
      1294.,  2980.,  5074.,  6094.,  7114.,  8134.,  9154.,  6612.,  3566.,
      3711.,  8130.,  13281., 14919., 16557., 18195., 19833., 14106., 7503.,
      7365.,  15606., 24747., 26385., 28023., 29661., 31299., 21918., 11493.,
      11019., 23082., 36213., 37851., 34689., 31271., 27597., 19362., 10171.,
      9873.,  20702., 32511., 34149., 30219., 26033., 21591., 15270., 8081.,
      7959.,  16786., 26505., 28143., 23445., 18491., 13281., 9642.,  5223.,
      2614.,  5716.,  9322.,  10486., 11650., 12814., 13978., 9924.,  5270.,
      2129.,  4542.,  7247.,  7865.,  8483.,  9101.,  9719.,  6822.,  3585.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13536., 19288., 26064., 30024., 31848., 29256., 25040., 18520., 13536.,
      20280., 28110., 33204., 39978., 39266., 38234., 29172., 21246., 13944.,
      27728., 33604., 41368., 47116., 48028., 44524., 34584., 24932., 19280.,
      31528., 39738., 46076., 55086., 53590., 51774., 40700., 33354., 25192.,
      34120., 39666., 47372., 53590., 51774., 50278., 41612., 32642., 27016.,
      32296., 39274., 44252., 51774., 50278., 52878., 42012., 35002., 27304.,
      31120., 34916., 40344., 44524., 45820., 43532., 37976., 28868., 24016.,
      25784., 30558., 33236., 38234., 38162., 39114., 31316., 28110., 21816.,
      20640., 23256., 27408., 29256., 31848., 31880., 29776., 24856., 20640.,
      17248., 23480., 26896., 31848., 29256., 28712., 21136., 15608., 11680.,
      25240., 29494., 35428., 39266., 38234., 34642., 25508., 17510., 14424.,
      29584., 36468., 41016., 48028., 44524., 42044., 31096., 24660., 18256.,
      34120., 39666., 47372., 53590., 51774., 50278., 41612., 32642., 27016.,
      32296., 39274., 44252., 51774., 50278., 52878., 42012., 35002., 27304.,
      32520., 37346., 44204., 50278., 52878., 51382., 45996., 36338., 30152.,
      28752., 34708., 38904., 45820., 43532., 45852., 37624., 34164., 26896.,
      24664., 28614., 34372., 38162., 39114., 36994., 35204., 29494., 24664.,
      17248., 23480., 26896., 31848., 31880., 33448., 29584., 26424., 19616.,
      20640., 23256., 27408., 29256., 28712., 26120., 19280., 14552., 11680.,
      25784., 30558., 33236., 38234., 34642., 32586., 23188., 19214., 16248.,
      31120., 34916., 40344., 44524., 42044., 40396., 32536., 25220., 22160.,
      32296., 39274., 44252., 51774., 50278., 52878., 42012., 35002., 27304.,
      32520., 37346., 44204., 50278., 52878., 51382., 45996., 36338., 30152.,
      30696., 37978., 43964., 52878., 51382., 53982., 45372., 40746., 31464.,
      28432., 33796., 41368., 43532., 45852., 44588., 41368., 34852., 28432.,
      22328., 30062., 35316., 39114., 36994., 39994., 35508., 30558., 22584.,
      16736., 23000., 30288., 31880., 33448., 32456., 30096., 24088., 18272.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   706.,   1018.,  1330.,  1642.,  1644.,  1118.,
      460.,   1720.,  3908.,  5108.,  6308.,  7508.,  8708.,  7544.,  4684.,
      2634.,  7428.,  13934., 14934., 14910., 17574., 20238., 16036., 9354.,
      6866.,  16212., 24518., 22446., 19350., 22014., 24678., 19316., 11154.,
      8026.,  18852., 25886., 20742., 13934., 14934., 14910., 12100., 7194.,
      5474.,  13044., 22902., 25566., 24518., 22446., 19350., 15380., 8994.,
      6634.,  15684., 27342., 30006., 25886., 20742., 13934., 10852., 5034.,
      4012.,  9592.,  16868., 19220., 21572., 23924., 22564., 15288., 5548.,
      4510.,  10124., 16906., 18370., 19834., 21298., 15978., 8940.,  350.,
      390.,   1436.,  3202.,  5242.,  7282.,  9322.,  11362., 8700.,  4934.,
      5212.,  12376., 21620., 26276., 30932., 35588., 40244., 29720., 16348.,
      15810., 34868., 47126., 42046., 35942., 41742., 47542., 30420., 16898.,
      22922., 42244., 52014., 43862., 34686., 40486., 46286., 25124., 14410.,
      26962., 43476., 47686., 52846., 47126., 42046., 35942., 23668., 13330.,
      18074., 34212., 53342., 59142., 52014., 43862., 34686., 18372., 10842.,
      22114., 35444., 52086., 57886., 47686., 52846., 47126., 28820., 9762.,
      12220., 23448., 36500., 40260., 44020., 47780., 38612., 16472., 1596.,
      10630., 12060., 14210., 15354., 16498., 17642., 2786.,  1660.,  70.,
      110.,   428.,   1018.,  1714.,  2410.,  3106.,  3802.,  3212.,  1966.,
      1516.,  4088.,  7844.,  9812.,  11780., 13748., 15716., 12472., 7276.,
      5562.,  13668., 21822., 21926., 21006., 24822., 28638., 22020., 12538.,
      10434., 23732., 34326., 31358., 27366., 31182., 34998., 26580., 14978.,
      12234., 27652., 37614., 31574., 21822., 21926., 21006., 16548., 9610.,
      8274.,  19028., 32454., 36270., 34326., 31358., 27366., 21108., 12050.,
      10074., 22948., 38814., 42630., 37614., 31574., 21822., 15812., 6682.,
      5836.,  13496., 23108., 26228., 29348., 32468., 29828., 19704., 6860.,
      5870.,  12972., 21370., 23218., 25066., 26914., 19930., 11020., 430.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7280.,  8192.,  10180., 11360., 13480., 14880., 17132., 18768., 18380.,
      20008., 19500., 21120., 17768., 19168., 15492., 16656., 12656., 13568.,
      14396., 15600., 19361., 20852., 23850., 25584., 28715., 30712., 29565.,
      31568., 30287., 32296., 26450., 28168., 21901., 23308., 16620., 17696.,
      21448., 22816., 27214., 28920., 31692., 33696., 36634., 38960., 36770.,
      39116., 36778., 39144., 31340., 33376., 25086., 26768., 17992., 19296.,
      25860., 27520., 31927., 34008., 35958., 38424., 40605., 43484., 40223.,
      43136., 39713., 42660., 33374., 35920., 26051., 28168., 17716., 19376.,
      27476., 29192., 32801., 34936., 35190., 37708., 38191., 41120., 36081.,
      38980., 34675., 37608., 32134., 34668., 28613., 30720., 24084., 25736.,
      22372., 24080., 29131., 31256., 36150., 38656., 43777., 46692., 43971.,
      46856., 45765., 48684., 40622., 43144., 34503., 36600., 27380., 29024.,
      25896., 27424., 31950., 33840., 37276., 39488., 43114., 45672., 41418.,
      43932., 42218., 44752., 36220., 38400., 29358., 31160., 21608., 23008.,
      19836., 21056., 22629., 24124., 25882., 27672., 29615., 31720., 28329.,
      30440., 30563., 32744., 26578., 28480., 21905., 23508., 16524., 17808.,
      12912., 13952., 12388., 13648., 16328., 17824., 20652., 22400., 22076.,
      23816., 23820., 25616., 21704., 23264., 19012., 20320., 15728., 16768.,
      15248., 16192., 20180., 21400., 25592., 27104., 29644., 31400., 29228.,
      30976., 28684., 30424., 25112., 26624., 20980., 22248., 16272., 17280.,
      23356., 24728., 28595., 30296., 34402., 36452., 38045., 40400., 37231.,
      39592., 36289., 38656., 30466., 32500., 23847., 25528., 16412., 17720.,
      24344., 25888., 28782., 30676., 33812., 36080., 35810., 38412., 33578.,
      36136., 31090., 33604., 25284., 27456., 22734., 24540., 19320., 20736.,
      22036., 23752., 28593., 30712., 35830., 38380., 43327., 46272., 43777.,
      46692., 43971., 46856., 39302., 41804., 33685., 35776., 27092., 28744.,
      27044., 28752., 33243., 35352., 40118., 42656., 46353., 49284., 45011.,
      47912., 43413., 46284., 37934., 40424., 31511., 33592., 24116., 25760.,
      24884., 26584., 28933., 31032., 33654., 36180., 39075., 42056., 38245.,
      41196., 37159., 40080., 32790., 35332., 27481., 29616., 21204., 22904.,
      24152., 25792., 26358., 28372., 29204., 31616., 36810., 39644., 38186.,
      40976., 39306., 42052., 35460., 37840., 30726., 32716., 25080., 26656.,
      23708., 25160., 30127., 31896., 37090., 39196., 44617., 47080., 43907.,
      46312., 42941., 45288., 37458., 39484., 31203., 32888., 24156., 25480.,
      22544., 23680., 26692., 28056., 31224., 32832., 36156., 38024., 33164.,
      34960., 29916., 31640., 24984., 26464., 19460., 20680., 13328., 14272.,
      8816.,  9728.,  12004., 13136., 15560., 16928., 19500., 21120., 20492.,
      22104., 21356., 22960., 19016., 20384., 17060., 18240., 14640., 15616.,
      15996., 17216., 20357., 21820., 25114., 26840., 30287., 32296., 30881.,
      32896., 31347., 33368., 26674., 28384., 23105., 24548., 18892., 20048.,
      22312., 23712., 26638., 28336., 31452., 33472., 36778., 39144., 36658.,
      39044., 36410., 38816., 30108., 32160., 25694., 27432., 20520., 21920.,
      26212., 27920., 30059., 32152., 34550., 37056., 39713., 42660., 39075.,
      42056., 38245., 41196., 30830., 33352., 26023., 28152., 20276., 21984.,
      26484., 28184., 28565., 30648., 31286., 33780., 34675., 37608., 37237.,
      40204., 38711., 41648., 35094., 37604., 30889., 33008., 25748., 27448.,
      23684., 25376., 30399., 32472., 37750., 40232., 45765., 48684., 47431.,
      50384., 47113., 50036., 40894., 43392., 34987., 37096., 28148., 29840.,
      25352., 26848., 30430., 32248., 36044., 38208., 42218., 44752., 42890.,
      45444., 40682., 43192., 33612., 35744., 27870., 29664., 21320., 22752.,
      19452., 20688., 22649., 24180., 26346., 28192., 30563., 32744., 32797.,
      35048., 31383., 33640., 26642., 28600., 21173., 22812., 14956., 16256.,
      11120., 12160., 14948., 16224., 19176., 20704., 23820., 25616., 25564.,
      27416., 26860., 28704., 24104., 25696., 20740., 22064., 16752., 17792.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     6.,     16.,    19.,    40.,    37.,    64.,    55.,
      88.,    73.,    112.,   91.,    136.,   94.,    128.,   65.,    84.,
      22.,    48.,    92.,    152.,   218.,   320.,   290.,   404.,   362.,
      488.,   434.,   572.,   506.,   656.,   444.,   552.,   278.,   336.,
      147.,   216.,   426.,   576.,   849.,   1092.,  1011.,  1272.,  1173.,
      1452.,  1335.,  1632.,  1497.,  1812.,  1218.,  1440.,  723.,   840.,
      441.,   552.,   1098.,  1332.,  1983.,  2352.,  2145.,  2532.,  2307.,
      2712.,  2469.,  2892.,  2631.,  3072.,  2058.,  2364.,  1185.,  1344.,
      735.,   888.,   1770.,  2088.,  3117.,  3612.,  3279.,  3792.,  3441.,
      3972.,  3603.,  4152.,  3765.,  4332.,  2898.,  3288.,  1647.,  1848.,
      1029.,  1224.,  2442.,  2844.,  4251.,  4872.,  4413.,  5052.,  4575.,
      5232.,  4737.,  5412.,  4899.,  5592.,  3738.,  4212.,  2109.,  2352.,
      1323.,  1560.,  3114.,  3600.,  5385.,  6132.,  5547.,  6312.,  5709.,
      6492.,  5871.,  6672.,  6033.,  6852.,  4578.,  5136.,  2571.,  2856.,
      1518.,  1696.,  3388.,  3752.,  5618.,  6176.,  5762.,  6332.,  5906.,
      6488.,  6050.,  6644.,  6194.,  6800.,  4540.,  4952.,  2478.,  2688.,
      1105.,  1204.,  2406.,  2608.,  3907.,  4216.,  3997.,  4312.,  4087.,
      4408.,  4177.,  4504.,  4267.,  4600.,  3070.,  3296.,  1649.,  1764.,
      19.,    40.,    78.,    124.,   181.,   256.,   307.,   388.,   433.,
      520.,   559.,   652.,   685.,   784.,   526.,   596.,   299.,   336.,
      310.,   372.,   740.,   872.,   1298.,  1508.,  1586.,  1808.,  1874.,
      2108.,  2162.,  2408.,  2450.,  2708.,  1812.,  1992.,  998.,   1092.,
      957.,   1080.,  2154.,  2412.,  3603.,  4008.,  4089.,  4512.,  4575.,
      5016.,  5061.,  5520.,  5547.,  6024.,  4026.,  4356.,  2181.,  2352.,
      2007.,  2172.,  4338.,  4680.,  7005.,  7536.,  7491.,  8040.,  7977.,
      8544.,  8463.,  9048.,  8949.,  9552.,  6378.,  6792.,  3399.,  3612.,
      3057.,  3264.,  6522.,  6948.,  10407., 11064., 10893., 11568., 11379.,
      12072., 11865., 12576., 12351., 13080., 8730.,  9228.,  4617.,  4872.,
      4107.,  4356.,  8706.,  9216.,  13809., 14592., 14295., 15096., 14781.,
      15600., 15267., 16104., 15753., 16608., 11082., 11664., 5835.,  6132.,
      5157.,  5448.,  10890., 11484., 17211., 18120., 17697., 18624., 18183.,
      19128., 18669., 19632., 19155., 20136., 13434., 14100., 7053.,  7392.,
      4326.,  4540.,  9076.,  9512.,  14258., 14924., 14618., 15296., 14978.,
      15668., 15338., 16040., 15698., 16412., 10948., 11432., 5718.,  5964.,
      2635.,  2752.,  5502.,  5740.,  8605.,  8968.,  8803.,  9172.,  9001.,
      9376.,  9199.,  9580.,  9397.,  9784.,  6526.,  6788.,  3395.,  3528.,
      37.,    76.,    150.,   232.,   343.,   472.,   577.,   712.,   811.,
      952.,   1045.,  1192.,  1279.,  1432.,  958.,   1064.,  533.,   588.,
      598.,   696.,   1388.,  1592.,  2378.,  2696.,  2882.,  3212.,  3386.,
      3728.,  3890.,  4244.,  4394.,  4760.,  3180.,  3432.,  1718.,  1848.,
      1767.,  1944.,  3882.,  4248.,  6357.,  6924.,  7167.,  7752.,  7977.,
      8580.,  8787.,  9408.,  9597.,  10236., 6834.,  7272.,  3639.,  3864.,
      3573.,  3792.,  7578.,  8028.,  12027., 12720., 12837., 13548., 13647.,
      14376., 14457., 15204., 15267., 16032., 10698., 11220., 5613.,  5880.,
      5379.,  5640.,  11274., 11808., 17697., 18516., 18507., 19344., 19317.,
      20172., 20127., 21000., 20937., 21828., 14562., 15168., 7587.,  7896.,
      7185.,  7488.,  14970., 15588., 23367., 24312., 24177., 25140., 24987.,
      25968., 25797., 26796., 26607., 27624., 18426., 19116., 9561.,  9912.,
      8991.,  9336.,  18666., 19368., 29037., 30108., 29847., 30936., 30657.,
      31764., 31467., 32592., 32277., 33420., 22290., 23064., 11535., 11928.,
      7134.,  7384.,  14764., 15272., 22898., 23672., 23474., 24260., 24050.,
      24848., 24626., 25436., 25202., 26024., 17356., 17912., 8958.,  9240.,
      4165.,  4300.,  8598.,  8872.,  13303., 13720., 13609., 14032., 13915.,
      14344., 14221., 14656., 14527., 14968., 9982.,  10280., 5141.,  5292.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5840.,  7696.,  8420.,  10868., 11512., 14552., 13196., 16828., 14076.,
      17772., 12812., 16444., 11000., 14040., 8036.,  10484., 5840.,  7696.,
      8820.,  11460., 12429., 15681., 14654., 18550., 17703., 22275., 17323.,
      21943., 16847., 21387., 12702., 16470., 9141.,  12105., 5844.,  8100.,
      12216., 15512., 14774., 18830., 18308., 23060., 20802., 26314., 21242.,
      26786., 19538., 24986., 15044., 19540., 10662., 14270., 8248.,  11032.,
      13852., 17676., 17503., 22235., 20234., 25842., 24317., 30769., 23561.,
      30029., 22709., 29065., 17674., 23026., 14487., 18867., 10876., 14316.,
      15116., 19004., 17443., 22223., 20866., 26506., 23561., 30029., 22709.,
      29065., 21953., 28325., 18114., 23498., 14107., 18535., 11756., 15260.,
      14236., 18060., 17287., 21987., 19354., 24898., 22709., 29065., 21953.,
      28325., 23245., 29633., 18298., 23714., 15263., 19739., 11868., 15436.,
      13848., 17272., 15398., 19518., 17796., 22548., 19538., 24986., 20170.,
      25650., 19010., 24522., 16676., 21300., 12534., 16334., 10488., 13528.,
      11444., 14340., 13573., 16985., 14638., 18598., 16847., 21387., 16787.,
      21375., 17239., 21875., 13678., 17638., 12429., 15681., 9588.,  12228.,
      9200.,  11440., 10276., 12980., 12120., 15288., 12812., 16444., 14076.,
      17772., 14060., 17820., 13240., 16536., 11012., 13844., 9200.,  11440.,
      7568.,  9680.,  10420., 13060., 11864., 15032., 14076., 17772., 12812.,
      16444., 12572., 16140., 9112.,  12024., 6676.,  8932.,  4976.,  6704.,
      11204., 14036., 13049., 16445., 15718., 19710., 17323., 21943., 16847.,
      21387., 15091., 19551., 10950., 14558., 7329.,  10181., 6116.,  8308.,
      13080., 16504., 16158., 20310., 18100., 22916., 21242., 26786., 19538.,
      24986., 18346., 23698., 13332., 17764., 10542., 14118., 7736.,  10520.,
      15116., 19004., 17443., 22223., 20866., 26506., 23561., 30029., 22709.,
      29065., 21953., 28325., 18114., 23498., 14107., 18535., 11756., 15260.,
      14236., 18060., 17287., 21987., 19354., 24898., 22709., 29065., 21953.,
      28325., 23245., 29633., 18298., 23714., 15263., 19739., 11868., 15436.,
      14380., 18140., 16363., 20983., 19378., 24826., 21953., 28325., 23245.,
      29633., 22489., 28893., 20274., 25722., 15907., 20431., 13260., 16892.,
      12728., 16024., 15374., 19334., 17108., 21796., 20170., 25650., 19010.,
      24522., 20154., 25698., 16468., 21156., 15134., 19030., 11864., 15032.,
      10980., 13684., 12657., 15957., 15222., 19150., 16787., 21375., 17239.,
      21875., 16155., 20839., 15574., 19630., 13049., 16445., 10980., 13684.,
      7568.,  9680.,  10420., 13060., 11864., 15032., 14076., 17772., 14060.,
      17820., 14812., 18636., 13080., 16504., 11764., 14660., 8688.,  10928.,
      9200.,  11440., 10276., 12980., 12120., 15288., 12812., 16444., 12572.,
      16140., 11308., 14812., 8248.,  11032., 6180.,  8372.,  4976.,  6704.,
      11444., 14340., 13573., 16985., 14638., 18598., 16847., 21387., 15091.,
      19551., 14103., 18483., 9806.,  13382., 8173.,  11041., 6996.,  9252.,
      13848., 17272., 15398., 19518., 17796., 22548., 19538., 24986., 18346.,
      23698., 17506., 22890., 14020., 18516., 10774., 14446., 9624.,  12536.,
      14236., 18060., 17287., 21987., 19354., 24898., 22709., 29065., 21953.,
      28325., 23245., 29633., 18298., 23714., 15263., 19739., 11868., 15436.,
      14380., 18140., 16363., 20983., 19378., 24826., 21953., 28325., 23245.,
      29633., 22489., 28893., 20274., 25722., 15907., 20431., 13260., 16892.,
      13500., 17196., 16719., 21259., 19242., 24722., 23245., 29633., 22489.,
      28893., 23781., 30201., 19946., 25426., 18087., 22659., 13884., 17580.,
      12632., 15800., 14934., 18862., 18308., 23060., 19010., 24522., 20154.,
      25698., 19506., 25082., 18308., 23060., 15430., 19422., 12632., 15800.,
      9844.,  12484., 13373., 16689., 15646., 19670., 17239., 21875., 16155.,
      20839., 17631., 22363., 15678., 19830., 13573., 16985., 9972.,  12612.,
      7312.,  9424.,  10148., 12852., 13496., 16792., 14060., 17820., 14812.,
      18636., 14284., 18172., 13336., 16760., 10628., 13460., 8080.,  10192.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   251.,   455.,   383.,
      635.,   515.,   815.,   647.,   995.,   690.,   954.,   485.,   633.,
      130.,   330.,   628.,   1092.,  1558.,  2350.,  2110.,  2998.,  2662.,
      3646.,  3214.,  4294.,  3766.,  4942.,  3348.,  4196.,  2114.,  2570.,
      1047.,  1587.,  3126.,  4302.,  6141.,  7793.,  6697.,  8237.,  6741.,
      8169.,  8001.,  9573.,  9261.,  10977., 7398.,  8638.,  4343.,  5011.,
      3123.,  3743.,  7438.,  8774.,  11313., 13205., 10333., 12113., 8841.,
      10509., 10101., 11913., 11361., 13317., 8958.,  10358., 5203.,  5951.,
      3663.,  4363.,  8678.,  10174., 11877., 14009., 9361.,  11381., 6141.,
      7793.,  6697.,  8237.,  6741.,  8169.,  5526.,  6574.,  3311.,  3883.,
      2475.,  2999.,  5950.,  7094.,  10521., 12381., 11781., 13785., 11313.,
      13205., 10333., 12113., 8841.,  10509., 7086.,  8294.,  4171.,  4823.,
      3015.,  3619.,  7190.,  8494.,  12621., 14721., 13881., 16125., 11877.,
      14009., 9361.,  11381., 6141.,  7793.,  4870.,  5982.,  2279.,  2755.,
      1810.,  2202.,  4372.,  5220.,  7750.,  9118.,  8878.,  10342., 10006.,
      11566., 11134., 12790., 10534., 12030., 7156.,  8132.,  2578.,  2970.,
      2117.,  2393.,  4770.,  5354.,  7991.,  8915.,  8699.,  9671.,  9407.,
      10427., 10115., 11183., 7559.,  8419.,  4210.,  4730.,  101.,   249.,
      113.,   277.,   538.,   898.,   1307.,  1895.,  2303.,  2939.,  3299.,
      3983.,  4295.,  5027.,  5291.,  6071.,  4074.,  4626.,  2321.,  2613.,
      2362.,  2850.,  5668.,  6708.,  9982.,  11638., 12262., 14014., 14542.,
      16390., 16822., 18766., 19102., 21142., 14148., 15572., 7802.,  8546.,
      7419.,  8391.,  16542., 18326., 22345., 24781., 19861., 22185., 16865.,
      19077., 19693., 22049., 22521., 25021., 14414., 16006., 8027.,  8871.,
      10935., 11987., 20150., 22094., 24669., 27345., 20649., 23213., 16117.,
      18569., 18945., 21541., 21773., 24513., 11686., 13438., 6743.,  7667.,
      12915., 14047., 20686., 22790., 22385., 25301., 25021., 27825., 22345.,
      24781., 19861., 22185., 16865., 19077., 11134., 12534., 6291.,  7039.,
      8559.,  9515.,  16230., 17982., 25349., 27993., 28177., 30965., 24669.,
      27345., 20649., 23213., 16117., 18569., 8406.,  9966.,  5007.,  5835.,
      10539., 11575., 16766., 18678., 24601., 27485., 27429., 30457., 22385.,
      25301., 25021., 27825., 22345., 24781., 13678., 15142., 4555.,  5207.,
      5770.,  6450.,  11140., 12308., 17390., 19110., 19222., 21038., 21054.,
      22966., 22886., 24894., 18382., 20230., 7716.,  8756.,  586.,   1010.,
      5105.,  5525.,  5722.,  6338.,  6683.,  7527.,  7231.,  8123.,  7779.,
      8719.,  8327.,  9315.,  1003.,  1783.,  682.,   978.,   17.,    53.,
      29.,    81.,    146.,   282.,   383.,   635.,   707.,   1007.,  1031.,
      1379.,  1355.,  1751.,  1679.,  2123.,  1442.,  1770.,  893.,   1073.,
      626.,   890.,   1748.,  2340.,  3430.,  4414.,  4366.,  5446.,  5302.,
      6478.,  6238.,  7510.,  7174.,  8542.,  5748.,  6724.,  3378.,  3898.,
      2463.,  3099.,  6150.,  7518.,  9941.,  11881., 10049., 11877., 9645.,
      11361., 11481., 13341., 13317., 15321., 10294., 11726., 5887.,  6651.,
      4859.,  5575.,  11102., 12630., 16073., 18253., 14645., 16713., 12705.,
      14661., 14541., 16641., 16377., 18621., 12494., 14086., 7067.,  7911.,
      5719.,  6515.,  12982., 14670., 17597., 20017., 14633., 16941., 9941.,
      11881., 10049., 11877., 9645.,  11361., 7654.,  8894.,  4471.,  5139.,
      3827.,  4447.,  8846.,  10182., 15153., 17301., 16989., 19281., 16073.,
      18253., 14645., 16713., 12705., 14661., 9854.,  11254., 5651.,  6399.,
      4687.,  5387.,  10726., 12222., 18213., 20601., 20049., 22581., 17597.,
      20017., 14633., 16941., 9941.,  11881., 7254.,  8558.,  3055.,  3627.,
      2690.,  3146.,  6260.,  7236.,  10774., 12334., 12286., 13942., 13798.,
      15550., 15310., 17158., 14070., 15758., 9300.,  10404., 3202.,  3658.,
      2781.,  3089.,  6162.,  6810.,  10175., 11195., 11075., 12143., 11975.,
      13091., 12875., 14039., 9487.,  10443., 5218.,  5802.,  125.,   305.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3808.,  8160.,  2200.,  7640.,  5712.,  12240., 3080.,  10696., 6664.,
      14280., 3080.,  10696., 5712.,  12240., 2200.,  7640.,  3808.,  8160.,
      2200.,  7640.,  5742.,  12414., 3300.,  11460., 8122.,  17514., 3850.,
      13370., 8122.,  17514., 3300.,  11460., 5742.,  12414., 2200.,  7640.,
      5712.,  12240., 3300.,  11460., 8568.,  18360., 4620.,  16044., 9996.,
      21420., 4620.,  16044., 8568.,  18360., 3300.,  11460., 5712.,  12240.,
      3080.,  10696., 8122.,  17514., 4620.,  16044., 11454., 24654., 5390.,
      18718., 11454., 24654., 4620.,  16044., 8122.,  17514., 3080.,  10696.,
      6664.,  14280., 3850.,  13370., 9996.,  21420., 5390.,  18718., 11454.,
      24654., 5390.,  18718., 9996.,  21420., 3850.,  13370., 6664.,  14280.,
      3080.,  10696., 8122.,  17514., 4620.,  16044., 11454., 24654., 5390.,
      18718., 11454., 24654., 4620.,  16044., 8122.,  17514., 3080.,  10696.,
      5712.,  12240., 3300.,  11460., 8568.,  18360., 4620.,  16044., 9996.,
      21420., 4620.,  16044., 8568.,  18360., 3300.,  11460., 5712.,  12240.,
      2200.,  7640.,  5742.,  12414., 3300.,  11460., 8122.,  17514., 3850.,
      13370., 8122.,  17514., 3300.,  11460., 5742.,  12414., 2200.,  7640.,
      3808.,  8160.,  2200.,  7640.,  5712.,  12240., 3080.,  10696., 6664.,
      14280., 3080.,  10696., 5712.,  12240., 2200.,  7640.,  3808.,  8160.,
      1760.,  6112.,  4760.,  10200., 2640.,  9168.,  6664.,  14280., 3080.,
      10696., 6664.,  14280., 2640.,  9168.,  4760.,  10200., 1760.,  6112.,
      4760.,  10200., 2750.,  9550.,  7140.,  15300., 3850.,  13370., 8122.,
      17514., 3850.,  13370., 7140.,  15300., 2750.,  9550.,  4760.,  10200.,
      2640.,  9168.,  7140.,  15300., 3960.,  13752., 9996.,  21420., 4620.,
      16044., 9996.,  21420., 3960.,  13752., 7140.,  15300., 2640.,  9168.,
      6664.,  14280., 3850.,  13370., 9996.,  21420., 5390.,  18718., 11454.,
      24654., 5390.,  18718., 9996.,  21420., 3850.,  13370., 6664.,  14280.,
      3080.,  10696., 8122.,  17514., 4620.,  16044., 11454., 24654., 5390.,
      18718., 11454., 24654., 4620.,  16044., 8122.,  17514., 3080.,  10696.,
      6664.,  14280., 3850.,  13370., 9996.,  21420., 5390.,  18718., 11454.,
      24654., 5390.,  18718., 9996.,  21420., 3850.,  13370., 6664.,  14280.,
      2640.,  9168.,  7140.,  15300., 3960.,  13752., 9996.,  21420., 4620.,
      16044., 9996.,  21420., 3960.,  13752., 7140.,  15300., 2640.,  9168.,
      4760.,  10200., 2750.,  9550.,  7140.,  15300., 3850.,  13370., 8122.,
      17514., 3850.,  13370., 7140.,  15300., 2750.,  9550.,  4760.,  10200.,
      1760.,  6112.,  4760.,  10200., 2640.,  9168.,  6664.,  14280., 3080.,
      10696., 6664.,  14280., 2640.,  9168.,  4760.,  10200., 1760.,  6112.,
      3808.,  8160.,  2200.,  7640.,  5712.,  12240., 3080.,  10696., 6664.,
      14280., 3080.,  10696., 5712.,  12240., 2200.,  7640.,  3808.,  8160.,
      2200.,  7640.,  5742.,  12414., 3300.,  11460., 8122.,  17514., 3850.,
      13370., 8122.,  17514., 3300.,  11460., 5742.,  12414., 2200.,  7640.,
      5712.,  12240., 3300.,  11460., 8568.,  18360., 4620.,  16044., 9996.,
      21420., 4620.,  16044., 8568.,  18360., 3300.,  11460., 5712.,  12240.,
      3080.,  10696., 8122.,  17514., 4620.,  16044., 11454., 24654., 5390.,
      18718., 11454., 24654., 4620.,  16044., 8122.,  17514., 3080.,  10696.,
      6664.,  14280., 3850.,  13370., 9996.,  21420., 5390.,  18718., 11454.,
      24654., 5390.,  18718., 9996.,  21420., 3850.,  13370., 6664.,  14280.,
      3080.,  10696., 8122.,  17514., 4620.,  16044., 11454., 24654., 5390.,
      18718., 11454., 24654., 4620.,  16044., 8122.,  17514., 3080.,  10696.,
      5712.,  12240., 3300.,  11460., 8568.,  18360., 4620.,  16044., 9996.,
      21420., 4620.,  16044., 8568.,  18360., 3300.,  11460., 5712.,  12240.,
      2200.,  7640.,  5742.,  12414., 3300.,  11460., 8122.,  17514., 3850.,
      13370., 8122.,  17514., 3300.,  11460., 5742.,  12414., 2200.,  7640.,
      3808.,  8160.,  2200.,  7640.,  5712.,  12240., 3080.,  10696., 6664.,
      14280., 3080.,  10696., 5712.,  12240., 2200.,  7640.,  3808.,  8160.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  1834.,  3418.,  2842.,
      4810.,  3850.,  6202.,  4858.,  7594.,  5276.,  7356.,  3742.,  4910.,
      860.,   2428.,  3960.,  6584.,  8404.,  12596., 7988.,  11924., 12308.,
      17012., 16628., 22100., 20948., 27188., 18552., 23224., 11740., 14332.,
      7226.,  10474., 13780., 20020., 23886., 31838., 18206., 25262., 21358.,
      28542., 29246., 37582., 37134., 46622., 27412., 34164., 10298., 13546.,
      17610., 21498., 29684., 37204., 26110., 35982., 23886., 31838., 18206.,
      25262., 21358., 28542., 29246., 37582., 22068., 28052., 8266.,  11130.,
      15066., 18570., 36756., 44532., 39982., 50750., 26110., 35982., 23886.,
      31838., 18206., 25262., 21358., 28542., 16724., 21940., 6234.,  8714.,
      12522., 15642., 30900., 37908., 45022., 55662., 39982., 50750., 26110.,
      35982., 23886., 31838., 18206., 25262., 11380., 15828., 4202.,  6298.,
      9978.,  12714., 25044., 31284., 37134., 46622., 45022., 55662., 39982.,
      50750., 26110., 35982., 23886., 31838., 10772., 15476., 2170.,  3882.,
      7324.,  9404.,  18552., 23224., 27412., 34164., 34292., 41812., 41172.,
      49460., 35124., 43156., 20244., 26996., 12792., 16440., 540.,   1596.,
      3742.,  4910.,  9692.,  12284., 13370., 16618., 16938., 20570., 20506.,
      24522., 24074., 28474., 14714., 18474., 1180.,  3260.,  30.,    174.,
      110.,   382.,   636.,   1436.,  1834.,  3418.,  3610.,  5578.,  5386.,
      7738.,  7162.,  9898.,  8938.,  12058., 8252.,  10588., 5358.,  6654.,
      2812.,  4636.,  6328.,  9464.,  11700., 16660., 10772., 15476., 16628.,
      22100., 22484., 28724., 28340., 35348., 23992., 29176., 14716., 17564.,
      10794., 14426., 18996., 24980., 28062., 36142., 18542., 25726., 19902.,
      27214., 28046., 36510., 36190., 45806., 21876., 28372., 14378., 18010.,
      22458., 26730., 23124., 30388., 36174., 46174., 28062., 36142., 18542.,
      25726., 19902., 27214., 28046., 36510., 17044., 22772., 11578., 14826.,
      19146., 23034., 32756., 40276., 37502., 48398., 36174., 46174., 28062.,
      36142., 18542., 25726., 19902., 27214., 12212., 17172., 8778.,  11642.,
      15834., 19338., 27412., 34164., 44334., 55102., 37502., 48398., 36174.,
      46174., 28062., 36142., 18542., 25726., 7380.,  11572., 5978.,  8458.,
      12522., 15642., 22068., 28052., 36190., 45806., 44334., 55102., 37502.,
      48398., 36174., 46174., 28062., 36142., 9332.,  13780., 3178.,  5274.,
      8764.,  11100., 15160., 19320., 24436., 30932., 30804., 38068., 37172.,
      45204., 28564., 36340., 25460., 31956., 12472., 15608., 956.,   2268.,
      4334.,  5630.,  6396.,  8220.,  9130.,  11738., 11418., 14410., 13706.,
      17082., 15994., 19754., 3306.,  6426.,  2492.,  3804.,  110.,   382.,
      190.,   590.,   1052.,  2108.,  2842.,  4810.,  5386.,  7738.,  7930.,
      10666., 10474., 13594., 13018., 16522., 11228., 13820., 6974.,  8398.,
      4764.,  6844.,  8696.,  12344., 14996., 20724., 13556., 19028., 20948.,
      27188., 28340., 35348., 35732., 43508., 29432., 35128., 17692., 20796.,
      13722., 16714., 22164., 27892., 30190., 38398., 16830., 24142., 16398.,
      23838., 24798., 33390., 33198., 42942., 29268., 36532., 18458., 22474.,
      12330., 15962., 30900., 37908., 44190., 54318., 30190., 38398., 16830.,
      24142., 16398., 23838., 24798., 33390., 22900., 29396., 14890., 18522.,
      10298., 13546., 26708., 33972., 49358., 60382., 44190., 54318., 30190.,
      38398., 16830., 24142., 16398., 23838., 16532., 22260., 11322., 14570.,
      8266.,  11130., 21876., 28372., 41598., 52494., 49358., 60382., 44190.,
      54318., 30190., 38398., 16830., 24142., 10164., 15124., 7754.,  10618.,
      6234.,  8714.,  17044., 22772., 33198., 42942., 41598., 52494., 49358.,
      60382., 44190., 54318., 30190., 38398., 12628., 17844., 4186.,  6666.,
      3420.,  4988.,  9720.,  13368., 19412., 25652., 25268., 32276., 31124.,
      38900., 36340., 43860., 28628., 34868., 14840., 18488., 1372.,  2940.,
      190.,   590.,   1052.,  2108.,  2842.,  4810.,  3850.,  6202.,  4858.,
      7594.,  5866.,  8986.,  6234.,  8714.,  4444.,  6012.,  190.,   590.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9808.,  10688., 11600., 12544., 12948., 14096., 15284., 16512., 16824.,
      18208., 19640., 21120., 21308., 22960., 24668., 26432., 20172., 21808.,
      23500., 25248., 18524., 20144., 21820., 23552., 17848., 19232., 20664.,
      22144., 15796., 16912., 18068., 19264., 12880., 13760., 14672., 15616.,
      15940., 17136., 18372., 19648., 22185., 23684., 25233., 26832., 27446.,
      29224., 31062., 32960., 33403., 35500., 37667., 39904., 33719., 35828.,
      38007., 40256., 33523., 35644., 37835., 40096., 27702., 29512., 31382.,
      33312., 20097., 21556., 23065., 24624., 13508., 14640., 15812., 17024.,
      22776., 24224., 25720., 27264., 27710., 29496., 31342., 33248., 29940.,
      32048., 34228., 36480., 32954., 35432., 37994., 40640., 33394., 35848.,
      38386., 41008., 33066., 35496., 38010., 40608., 27572., 29616., 31732.,
      33920., 21742., 23416., 25150., 26944., 19064., 20384., 21752., 23168.,
      23468., 25232., 27052., 28928., 30659., 32860., 35131., 37472., 37778.,
      40408., 43122., 45920., 45961., 49012., 52161., 55408., 46349., 49404.,
      52557., 55808., 45969., 49028., 52185., 55440., 36818., 39416., 42098.,
      44864., 28715., 30860., 33075., 35360., 21548., 23248., 25004., 26816.,
      31804., 33616., 35484., 37408., 36287., 38532., 40847., 43232., 42986.,
      45656., 48410., 51248., 48429., 51516., 54701., 57984., 45937., 48964.,
      52089., 55312., 44277., 47308., 50437., 53664., 39818., 42392., 45050.,
      47792., 34119., 36244., 38439., 40704., 27580., 29264., 31004., 32800.,
      24716., 26512., 28364., 30272., 31355., 33580., 35875., 38240., 38402.,
      41048., 43778., 46592., 45969., 49028., 52185., 55440., 44821., 47884.,
      51045., 54304., 46489., 49556., 52721., 55984., 37762., 40376., 43074.,
      45856., 29603., 31772., 34011., 36320., 22924., 24656., 26444., 28288.,
      30712., 32416., 34168., 35968., 36494., 38584., 40734., 42944., 40788.,
      43248., 45780., 48384., 43178., 45992., 48890., 51872., 44482., 47272.,
      50146., 53104., 44506., 47272., 50122., 53056., 37844., 40176., 42580.,
      45056., 29630., 31544., 33518., 35552., 25400., 26912., 28472., 30080.,
      22180., 23536., 24932., 26368., 26929., 28564., 30249., 31984., 32454.,
      34408., 36422., 38496., 37747., 39996., 42315., 44704., 37455., 39716.,
      42047., 44448., 36139., 38412., 40755., 43168., 27846., 29768., 31750.,
      33792., 24329., 25924., 27569., 29264., 19364., 20656., 21988., 23360.,
      19280., 20416., 21584., 22784., 19892., 21264., 22676., 24128., 25272.,
      26912., 28600., 30336., 27996., 29872., 31804., 33792., 27564., 29424.,
      31340., 33312., 26108., 27952., 29852., 31808., 24696., 26272., 27896.,
      29568., 22100., 23440., 24820., 26240., 18192., 19264., 20368., 21504.,
      11408., 12352., 13328., 14336., 14916., 16080., 17284., 18528., 19032.,
      20448., 21912., 23424., 20172., 21808., 23500., 25248., 18524., 20144.,
      21820., 23552., 20460., 22064., 23724., 25440., 18840., 20192., 21592.,
      23040., 15780., 16848., 17956., 19104., 13904., 14784., 15696., 16640.,
      18420., 19696., 21012., 22368., 23245., 24780., 26365., 28000., 28766.,
      30600., 32494., 34448., 33719., 35828., 38007., 40256., 33523., 35644.,
      37835., 40096., 32815., 34948., 37151., 39424., 25854., 27656., 29518.,
      31440., 17029., 18460., 19941., 21472., 13044., 14192., 15380., 16608.,
      25240., 26720., 28248., 29824., 26822., 28600., 30438., 32336., 29188.,
      31312., 33508., 35776., 33394., 35848., 38386., 41008., 33066., 35496.,
      38010., 40608., 31970., 34376., 36866., 39440., 26884., 28944., 31076.,
      33280., 23862., 25528., 27254., 29040., 21400., 22752., 24152., 25600.,
      24892., 26704., 28572., 30496., 31263., 33476., 35759., 38112., 38762.,
      41432., 44186., 47024., 46349., 49404., 52557., 55808., 45969., 49028.,
      52185., 55440., 44821., 47884., 51045., 54304., 37706., 40344., 43066.,
      45872., 28135., 30292., 32519., 34816., 22780., 24528., 26332., 28192.,
      30604., 32400., 34252., 36160., 36315., 38508., 40771., 43104., 43138.,
      45784., 48514., 51328., 45937., 48964., 52089., 55312., 44277., 47308.,
      50437., 53664., 45945., 48980., 52113., 55344., 41218., 43832., 46530.,
      49312., 34051., 36188., 38395., 40672., 27020., 28752., 30540., 32384.,
      24028., 25808., 27644., 29536., 30103., 32276., 34519., 36832., 37274.,
      39896., 42602., 45392., 44821., 47884., 51045., 54304., 46489., 49556.,
      52721., 55984., 47389., 50460., 53629., 56896., 40186., 42840., 45578.,
      48400., 30559., 32740., 34991., 37312., 25180., 26960., 28796., 30688.,
      30424., 32096., 33816., 35584., 33782., 35800., 37878., 40016., 38116.,
      40528., 43012., 45568., 44482., 47272., 50146., 53104., 44506., 47272.,
      50122., 53056., 43762., 46504., 49330., 52240., 36324., 38672., 41092.,
      43584., 30758., 32664., 34630., 36656., 25560., 27104., 28696., 30336.,
      21844., 23152., 24500., 25888., 26613., 28220., 29877., 31584., 32238.,
      34184., 36190., 38256., 37455., 39716., 42047., 44448., 36139., 38412.,
      40755., 43168., 34311., 36596., 38951., 41376., 31502., 33480., 35518.,
      37616., 26925., 28556., 30237., 31968., 21076., 22384., 23732., 25120.,
      14864., 15936., 17040., 18176., 19556., 20880., 22244., 23648., 24984.,
      26592., 28248., 29952., 27564., 29424., 31340., 33312., 26108., 27952.,
      29852., 31808., 28236., 30064., 31948., 33888., 26136., 27744., 29400.,
      31104., 22724., 24080., 25476., 26912., 17936., 19008., 20112., 21248.,
      12944., 13888., 14864., 15872., 16628., 17808., 19028., 20288., 17336.,
      18720., 20152., 21632., 18524., 20144., 21820., 23552., 20460., 22064.,
      23724., 25440., 21884., 23472., 25116., 26816., 19320., 20640., 22008.,
      23424., 17108., 18192., 19316., 20480., 14672., 15552., 16464., 17408.,
      19044., 20336., 21668., 23040., 24049., 25620., 27241., 28912., 28486.,
      30312., 32198., 34144., 33523., 35644., 37835., 40096., 32815., 34948.,
      37151., 39424., 31595., 33740., 35955., 38240., 23494., 25288., 27142.,
      29056., 17097., 18564., 20081., 21648., 12324., 13488., 14692., 15936.,
      23800., 25248., 26744., 28288., 25422., 27192., 29022., 30912., 28884.,
      30960., 33108., 35328., 33066., 35496., 38010., 40608., 31970., 34376.,
      36866., 39440., 31962., 34408., 36938., 39552., 29780., 31856., 34004.,
      36224., 26814., 28536., 30318., 32160., 23480., 24864., 26296., 27776.,
      24716., 26512., 28364., 30272., 31355., 33580., 35875., 38240., 38402.,
      41048., 43778., 46592., 45969., 49028., 52185., 55440., 44821., 47884.,
      51045., 54304., 46489., 49556., 52721., 55984., 37762., 40376., 43074.,
      45856., 29603., 31772., 34011., 36320., 22924., 24656., 26444., 28288.,
      30940., 32720., 34556., 36448., 36919., 39124., 41399., 43744., 41498.,
      44120., 46826., 49616., 44277., 47308., 50437., 53664., 45945., 48980.,
      52113., 55344., 46333., 49372., 52509., 55744., 39994., 42584., 45258.,
      48016., 31935., 34084., 36303., 38592., 27676., 29392., 31164., 32992.,
      24876., 26640., 28460., 30336., 31219., 33404., 35659., 37984., 38770.,
      41432., 44178., 47008., 46489., 49556., 52721., 55984., 47389., 50460.,
      53629., 56896., 47009., 50084., 53257., 56528., 38194., 40824., 43538.,
      46336., 33563., 35756., 38019., 40352., 26860., 28624., 30444., 32320.,
      27576., 29216., 30904., 32640., 31134., 33144., 35214., 37344., 39860.,
      42288., 44788., 47360., 44506., 47272., 50122., 53056., 43762., 46504.,
      49330., 52240., 41738., 44456., 47258., 50144., 36788., 39088., 41460.,
      43904., 29838., 31736., 33694., 35712., 23352., 24864., 26424., 28032.,
      23364., 24688., 26052., 27456., 28409., 30052., 31745., 33488., 34390.,
      36392., 38454., 40576., 36139., 38412., 40755., 43168., 34311., 36596.,
      38951., 41376., 35555., 37852., 40219., 42656., 31510., 33480., 35510.,
      37600., 25617., 27220., 28873., 30576., 18628., 19888., 21188., 22528.,
      14096., 15168., 16272., 17408., 19028., 20368., 21748., 23168., 24760.,
      26400., 28088., 29824., 26108., 27952., 29852., 31808., 28236., 30064.,
      31948., 33888., 29340., 31152., 33020., 34944., 26232., 27808., 29432.,
      31104., 21748., 23056., 24404., 25792., 15824., 16832., 17872., 18944.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   103.,   148.,   199.,   256.,   163.,   220.,
      283.,   352.,   223.,   292.,   367.,   448.,   283.,   364.,   451.,
      544.,   314.,   376.,   442.,   512.,   225.,   260.,   297.,   336.,
      42.,    88.,    138.,   192.,   260.,   368.,   484.,   608.,   686.,
      872.,   1070.,  1280.,  950.,   1160.,  1382.,  1616.,  1214.,  1448.,
      1694.,  1952.,  1478.,  1736.,  2006.,  2288.,  1742.,  2024.,  2318.,
      2624.,  1572.,  1776.,  1988.,  2208.,  1002.,  1112.,  1226.,  1344.,
      459.,   588.,   723.,   864.,   1422.,  1704.,  1998.,  2304.,  2873.,
      3268.,  3681.,  4112.,  3165.,  3532.,  3917.,  4320.,  3201.,  3540.,
      3897.,  4272.,  3813.,  4188.,  4581.,  4992.,  4425.,  4836.,  5265.,
      5712.,  3550.,  3848.,  4158.,  4480.,  2091.,  2252.,  2419.,  2592.,
      1487.,  1636.,  1791.,  1952.,  3558.,  3880.,  4214.,  4560.,  5429.,
      5884.,  6357.,  6848.,  4953.,  5380.,  5825.,  6288.,  4221.,  4620.,
      5037.,  5472.,  4833.,  5268.,  5721.,  6192.,  5445.,  5916.,  6405.,
      6912.,  4310.,  4648.,  4998.,  5360.,  2511.,  2692.,  2879.,  3072.,
      1747.,  1916.,  2091.,  2272.,  4158.,  4520.,  4894.,  5280.,  5681.,
      6196.,  6729.,  7280.,  4437.,  4924.,  5429.,  5952.,  2873.,  3268.,
      3681.,  4112.,  3165.,  3532.,  3917.,  4320.,  3201.,  3540.,  3897.,
      4272.,  2638.,  2888.,  3150.,  3424.,  1587.,  1724.,  1867.,  2016.,
      1175.,  1300.,  1431.,  1568.,  2838.,  3112.,  3398.,  3696.,  5037.,
      5484.,  5949.,  6432.,  5649.,  6132.,  6633.,  7152.,  5429.,  5884.,
      6357.,  6848.,  4953.,  5380.,  5825.,  6288.,  4221.,  4620.,  5037.,
      5472.,  3398.,  3688.,  3990.,  4304.,  2007.,  2164.,  2327.,  2496.,
      1435.,  1580.,  1731.,  1888.,  3438.,  3752.,  4078.,  4416.,  6057.,
      6564.,  7089.,  7632.,  6669.,  7212.,  7773.,  8352.,  5681.,  6196.,
      6729.,  7280.,  4437.,  4924.,  5429.,  5952.,  2873.,  3268.,  3681.,
      4112.,  2302.,  2568.,  2846.,  3136.,  1083.,  1196.,  1315.,  1440.,
      858.,   952.,   1050.,  1152.,  2084.,  2288.,  2500.,  2720.,  3710.,
      4040.,  4382.,  4736.,  4262.,  4616.,  4982.,  5360.,  4814.,  5192.,
      5582.,  5984.,  5366.,  5768.,  6182.,  6608.,  5086.,  5448.,  5822.,
      6208.,  3460.,  3696.,  3940.,  4192.,  1242.,  1336.,  1434.,  1536.,
      1025.,  1092.,  1161.,  1232.,  2314.,  2456.,  2602.,  2752.,  3883.,
      4108.,  4339.,  4576.,  4231.,  4468.,  4711.,  4960.,  4579.,  4828.,
      5083.,  5344.,  4927.,  5188.,  5455.,  5728.,  3675.,  3884.,  4099.,
      4320.,  2042.,  2168.,  2298.,  2432.,  33.,    68.,    105.,   144.,
      37.,    76.,    117.,   160.,   226.,   312.,   402.,   496.,   583.,
      724.,   871.,   1024.,  1075.,  1228.,  1387.,  1552.,  1567.,  1732.,
      1903.,  2080.,  2059.,  2236.,  2419.,  2608.,  2551.,  2740.,  2935.,
      3136.,  1970.,  2104.,  2242.,  2384.,  1125.,  1196.,  1269.,  1344.,
      1122.,  1240.,  1362.,  1488.,  2708.,  2960.,  3220.,  3488.,  4790.,
      5192.,  5606.,  6032.,  5918.,  6344.,  6782.,  7232.,  7046.,  7496.,
      7958.,  8432.,  8174.,  8648.,  9134.,  9632.,  9302.,  9800.,  10310.,
      10832., 6900.,  7248.,  7604.,  7968.,  3810.,  3992.,  4178.,  4368.,
      3591.,  3828.,  4071.,  4320.,  8054.,  8488.,  8934.,  9392.,  10877.,
      11468., 12077., 12704., 9649.,  10212., 10793., 11392., 8165.,  8700.,
      9253.,  9824.,  9561.,  10132., 10721., 11328., 10957., 11564., 12189.,
      12832., 7014.,  7400.,  7798.,  8208.,  3911.,  4116.,  4327.,  4544.,
      5339.,  5596.,  5859.,  6128.,  9838.,  10312., 10798., 11296., 12009.,
      12660., 13329., 14016., 10013., 10636., 11277., 11936., 7761.,  8356.,
      8969.,  9600.,  9157.,  9788.,  10437., 11104., 10553., 11220., 11905.,
      12608., 5630.,  6056.,  6494.,  6944.,  3259.,  3484.,  3715.,  3952.,
      6319.,  6596.,  6879.,  7168.,  10086., 10600., 11126., 11664., 10837.,
      11548., 12277., 13024., 12169., 12852., 13553., 14272., 10877., 11468.,
      12077., 12704., 9649.,  10212., 10793., 11392., 8165.,  8700.,  9253.,
      9824.,  5398.,  5736.,  6086.,  6448.,  3055.,  3236.,  3423.,  3616.,
      4163.,  4396.,  4635.,  4880.,  7902.,  8328.,  8766.,  9216.,  12353.,
      12996., 13657., 14336., 13749., 14428., 15125., 15840., 12009., 12660.,
      13329., 14016., 10013., 10636., 11277., 11936., 7761.,  8356.,  8969.,
      9600.,  4014.,  4392.,  4782.,  5184.,  2403.,  2604.,  2811.,  3024.,
      5143.,  5396.,  5655.,  5920.,  8150.,  8616.,  9094.,  9584.,  11949.,
      12652., 13373., 14112., 13345., 14084., 14841., 15616., 10837., 11548.,
      12277., 13024., 12169., 12852., 13553., 14272., 10877., 11468., 12077.,
      12704., 6662.,  7016.,  7382.,  7760.,  2199.,  2356.,  2519.,  2688.,
      2802.,  2968.,  3138.,  3312.,  5428.,  5712.,  6004.,  6304.,  8486.,
      8904.,  9334.,  9776.,  9390.,  9832.,  10286., 10752., 10294., 10760.,
      11238., 11728., 11198., 11688., 12190., 12704., 8966.,  9416.,  9878.,
      10352., 3732.,  3984.,  4244.,  4512.,  242.,   344.,   450.,   560.,
      2501.,  2604.,  2709.,  2816.,  2786.,  2936.,  3090.,  3248.,  3239.,
      3444.,  3655.,  3872.,  3507.,  3724.,  3947.,  4176.,  3775.,  4004.,
      4239.,  4480.,  4043.,  4284.,  4531.,  4784.,  407.,   596.,   791.,
      992.,   306.,   376.,   450.,   528.,   5.,     12.,    21.,    32.,
      9.,     20.,    33.,    48.,    58.,    88.,    122.,   160.,   163.,
      220.,   283.,   352.,   319.,   388.,   463.,   544.,   475.,   556.,
      643.,   736.,   631.,   724.,   823.,   928.,   787.,   892.,   1003.,
      1120.,  682.,   760.,   842.,   928.,   425.,   468.,   513.,   560.,
      282.,   344.,   410.,   480.,   804.,   944.,   1092.,  1248.,  1598.,
      1832.,  2078.,  2336.,  2054.,  2312.,  2582.,  2864.,  2510.,  2792.,
      3086.,  3392.,  2966.,  3272.,  3590.,  3920.,  3422.,  3752.,  4094.,
      4448.,  2756.,  2992.,  3236.,  3488.,  1626.,  1752.,  1882.,  2016.,
      1155.,  1308.,  1467.,  1632.,  2910.,  3240.,  3582.,  3936.,  4737.,
      5204.,  5689.,  6192.,  4805.,  5244.,  5701.,  6176.,  4617.,  5028.,
      5457.,  5904.,  5517.,  5964.,  6429.,  6912.,  6417.,  6900.,  7401.,
      7920.,  4974.,  5320.,  5678.,  6048.,  2851.,  3036.,  3227.,  3424.,
      2343.,  2516.,  2695.,  2880.,  5366.,  5736.,  6118.,  6512.,  7773.,
      8300.,  8845.,  9408.,  7073.,  7572.,  8089.,  8624.,  6117.,  6588.,
      7077.,  7584.,  7017.,  7524.,  8049.,  8592.,  7917.,  8460.,  9021.,
      9600.,  6054.,  6440.,  6838.,  7248.,  3431.,  3636.,  3847.,  4064.,
      2763.,  2956.,  3155.,  3360.,  6286.,  6696.,  7118.,  7552.,  8505.,
      9092.,  9697.,  10320., 7037.,  7596.,  8173.,  8768.,  4737.,  5204.,
      5689.,  6192.,  4805.,  5244.,  5701.,  6176.,  4617.,  5028.,  5457.,
      5904.,  3678.,  3976.,  4286.,  4608.,  2155.,  2316.,  2483.,  2656.,
      1839.,  1988.,  2143.,  2304.,  4262.,  4584.,  4918.,  5264.,  7317.,
      7836.,  8373.,  8928.,  8217.,  8772.,  9345.,  9936.,  7773.,  8300.,
      8845.,  9408.,  7073.,  7572.,  8089.,  8624.,  6117.,  6588.,  7077.,
      7584.,  4758.,  5096.,  5446.,  5808.,  2735.,  2916.,  3103.,  3296.,
      2259.,  2428.,  2603.,  2784.,  5182.,  5544.,  5918.,  6304.,  8817.,
      9396.,  9993.,  10608., 9717.,  10332., 10965., 11616., 8505.,  9092.,
      9697.,  10320., 7037.,  7596.,  8173.,  8768.,  4737.,  5204.,  5689.,
      6192.,  3470.,  3784.,  4110.,  4448.,  1459.,  1596.,  1739.,  1888.,
      1290.,  1400.,  1514.,  1632.,  3012.,  3248.,  3492.,  3744.,  5198.,
      5576.,  5966.,  6368.,  5942.,  6344.,  6758.,  7184.,  6686.,  7112.,
      7550.,  8000.,  7430.,  7880.,  8342.,  8816.,  6830.,  7240.,  7662.,
      8096.,  4516.,  4784.,  5060.,  5344.,  1546.,  1656.,  1770.,  1888.,
      1353.,  1428.,  1505.,  1584.,  3002.,  3160.,  3322.,  3488.,  4963.,
      5212.,  5467.,  5728.,  5407.,  5668.,  5935.,  6208.,  5851.,  6124.,
      6403.,  6688.,  6295.,  6580.,  6871.,  7168.,  4627.,  4860.,  5099.,
      5344.,  2538.,  2680.,  2826.,  2976.,  41.,    84.,    129.,   176.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6352.,  8208.,  10320., 12688., 6660.,  8980.,  11620., 14580., 9528.,
      12312., 15480., 19032., 9324.,  12572., 16268., 20412., 10604., 13852.,
      17548., 21692., 9324.,  12572., 16268., 20412., 9528.,  12312., 15480.,
      19032., 6660.,  8980.,  11620., 14580., 6352.,  8208.,  10320., 12688.,
      6148.,  8468.,  11108., 14068., 10045., 12849., 16053., 19657., 9894.,
      13246., 17078., 21390., 12479., 16443., 20967., 26051., 10887., 14947.,
      19567., 24747., 14319., 18347., 22935., 28083., 10758., 14238., 18198.,
      22638., 9069.,  11937., 15205., 18873., 6148.,  8468.,  11108., 14068.,
      9528.,  12312., 15480., 19032., 9430.,  12846., 16742., 21118., 13428.,
      17476., 22100., 27300., 13682., 18490., 23970., 30122., 17442., 22314.,
      27858., 34074., 13426., 18234., 23714., 29866., 13428., 17476., 22100.,
      27300., 9686.,  13102., 16998., 21374., 9528.,  12312., 15480., 19032.,
      9836.,  13084., 16780., 20924., 12783., 16811., 21399., 26547., 13218.,
      18090., 23634., 29850., 20133., 25785., 32221., 39441., 17085., 22769.,
      29237., 36489., 18037., 23625., 29997., 37153., 12354., 17098., 22514.,
      28602., 14015., 17979., 22503., 27587., 9836.,  13084., 16780., 20924.,
      11116., 14364., 18060., 22204., 11447., 15571., 20255., 25499., 17234.,
      22170., 27778., 34058., 17085., 22769., 29237., 36489., 18037., 23625.,
      29997., 37153., 14989., 20609., 27013., 34201., 16114., 20922., 26402.,
      32554., 12423., 16483., 21103., 26283., 11116., 14364., 18060., 22204.,
      8812.,  12060., 15756., 19900., 15135., 19227., 23879., 29091., 14498.,
      19370., 24914., 31130., 18037., 23625., 29997., 37153., 14989., 20609.,
      27013., 34201., 20133., 25785., 32221., 39441., 14754., 19626., 25170.,
      31386., 12783., 16811., 21399., 26547., 8812.,  12060., 15756., 19900.,
      9528.,  12312., 15480., 19032., 10294., 13838., 17862., 22366., 14548.,
      18724., 23476., 28804., 13426., 18234., 23714., 29866., 17442., 22314.,
      27858., 34074., 14290., 19226., 24834., 31114., 14548., 18724., 23476.,
      28804., 9430.,  12846., 16742., 21118., 9528.,  12312., 15480., 19032.,
      7172.,  9492.,  12132., 15092., 9069.,  11937., 15205., 18873., 9222.,
      12702., 16662., 21102., 14319., 18347., 22935., 28083., 12983., 17107.,
      21791., 27035., 13599., 17691., 22343., 27555., 8966.,  12446., 16406.,
      20846., 10045., 12849., 16053., 19657., 7172.,  9492.,  12132., 15092.,
      6352.,  8208.,  10320., 12688., 6660.,  8980.,  11620., 14580., 9528.,
      12312., 15480., 19032., 9324.,  12572., 16268., 20412., 10604., 13852.,
      17548., 21692., 9324.,  12572., 16268., 20412., 9528.,  12312., 15480.,
      19032., 6660.,  8980.,  11620., 14580., 6352.,  8208.,  10320., 12688.,
      5328.,  7184.,  9296.,  11664., 8452.,  10772., 13412., 16372., 7992.,
      10776., 13944., 17496., 10604., 13852., 17548., 21692., 9324.,  12572.,
      16268., 20412., 11628., 14876., 18572., 22716., 7992.,  10776., 13944.,
      17496., 7428.,  9748.,  12388., 15348., 5328.,  7184.,  9296.,  11664.,
      7940.,  10260., 12900., 15860., 8533.,  11369., 14605., 18241., 11350.,
      14766., 18662., 23038., 10887., 14947., 19567., 24747., 14319., 18347.,
      22935., 28083., 12119., 16115., 20671., 25787., 11350., 14766., 18662.,
      23038., 7813.,  10713., 14013., 17713., 7940.,  10260., 12900., 15860.,
      7992.,  10776., 13944., 17496., 11142., 14622., 18582., 23022., 11988.,
      16164., 20916., 26244., 17442., 22314., 27858., 34074., 13426., 18234.,
      23714., 29866., 15042., 19786., 25202., 31290., 11380., 15428., 20052.,
      25252., 12422., 15902., 19862., 24302., 7992.,  10776., 13944., 17496.,
      11116., 14364., 18060., 22204., 11447., 15571., 20255., 25499., 17234.,
      22170., 27778., 34058., 17085., 22769., 29237., 36489., 18037., 23625.,
      29997., 37153., 14989., 20609., 27013., 34201., 16114., 20922., 26402.,
      32554., 12423., 16483., 21103., 26283., 11116., 14364., 18060., 22204.,
      8812.,  12060., 15756., 19900., 15135., 19227., 23879., 29091., 14498.,
      19370., 24914., 31130., 18037., 23625., 29997., 37153., 14989., 20609.,
      27013., 34201., 20133., 25785., 32221., 39441., 14754., 19626., 25170.,
      31386., 12783., 16811., 21399., 26547., 8812.,  12060., 15756., 19900.,
      11116., 14364., 18060., 22204., 12167., 16227., 20847., 26027., 16370.,
      21178., 26658., 32810., 14989., 20609., 27013., 34201., 20133., 25785.,
      32221., 39441., 17085., 22769., 29237., 36489., 16370., 21178., 26658.,
      32810., 10583., 14579., 19135., 24251., 11116., 14364., 18060., 22204.,
      7992.,  10776., 13944., 17496., 11142., 14622., 18582., 23022., 11988.,
      16164., 20916., 26244., 17442., 22314., 27858., 34074., 14290., 19226.,
      24834., 31114., 16162., 21034., 26578., 32794., 10868., 14916., 19540.,
      24740., 11814., 15166., 18998., 23310., 7992.,  10776., 13944., 17496.,
      7940.,  10260., 12900., 15860., 7813.,  10713., 14013., 17713., 12214.,
      15758., 19782., 24286., 12983., 17107., 21791., 27035., 13599., 17691.,
      22343., 27555., 10631., 14691., 19311., 24491., 11606., 15022., 18918.,
      23294., 8533.,  11369., 14605., 18241., 7940.,  10260., 12900., 15860.,
      5328.,  7184.,  9296.,  11664., 8452.,  10772., 13412., 16372., 7992.,
      10776., 13944., 17496., 10604., 13852., 17548., 21692., 9324.,  12572.,
      16268., 20412., 11628., 14876., 18572., 22716., 7992.,  10776., 13944.,
      17496., 7428.,  9748.,  12388., 15348., 5328.,  7184.,  9296.,  11664.,
      6352.,  8208.,  10320., 12688., 6660.,  8980.,  11620., 14580., 9528.,
      12312., 15480., 19032., 9324.,  12572., 16268., 20412., 11628., 14876.,
      18572., 22716., 9324.,  12572., 16268., 20412., 9528.,  12312., 15480.,
      19032., 6660.,  8980.,  11620., 14580., 6352.,  8208.,  10320., 12688.,
      7172.,  9492.,  12132., 15092., 9069.,  11937., 15205., 18873., 9222.,
      12702., 16662., 21102., 14319., 18347., 22935., 28083., 12119., 16115.,
      20671., 25787., 12479., 16443., 20967., 26051., 9478.,  12958., 16918.,
      21358., 10653., 13585., 16917., 20649., 7172.,  9492.,  12132., 15092.,
      9528.,  12312., 15480., 19032., 10294., 13838., 17862., 22366., 14548.,
      18724., 23476., 28804., 13426., 18234., 23714., 29866., 15042., 19786.,
      25202., 31290., 13682., 18490., 23970., 30122., 14036., 18212., 22964.,
      28292., 10550., 14094., 18118., 22622., 9528.,  12312., 15480., 19032.,
      8812.,  12060., 15756., 19900., 15135., 19227., 23879., 29091., 14498.,
      19370., 24914., 31130., 18037., 23625., 29997., 37153., 14989., 20609.,
      27013., 34201., 20133., 25785., 32221., 39441., 14754., 19626., 25170.,
      31386., 12783., 16811., 21399., 26547., 8812.,  12060., 15756., 19900.,
      11116., 14364., 18060., 22204., 12167., 16227., 20847., 26027., 16370.,
      21178., 26658., 32810., 14989., 20609., 27013., 34201., 20133., 25785.,
      32221., 39441., 17085., 22769., 29237., 36489., 16370., 21178., 26658.,
      32810., 10583., 14579., 19135., 24251., 11116., 14364., 18060., 22204.,
      9836.,  13084., 16780., 20924., 12783., 16811., 21399., 26547., 13218.,
      18090., 23634., 29850., 20133., 25785., 32221., 39441., 17085., 22769.,
      29237., 36489., 18037., 23625., 29997., 37153., 12354., 17098., 22514.,
      28602., 14015., 17979., 22503., 27587., 9836.,  13084., 16780., 20924.,
      9528.,  12312., 15480., 19032., 10550., 14094., 18118., 22622., 15156.,
      19460., 24340., 29796., 14290., 19226., 24834., 31114., 16162., 21034.,
      26578., 32794., 13426., 18234., 23714., 29866., 13428., 17476., 22100.,
      27300., 9686.,  13102., 16998., 21374., 9528.,  12312., 15480., 19032.,
      6148.,  8468.,  11108., 14068., 10653., 13585., 16917., 20649., 11622.,
      15230., 19318., 23886., 13599., 17691., 22343., 27555., 10631., 14691.,
      19311., 24491., 14319., 18347., 22935., 28083., 10758., 14238., 18198.,
      22638., 9069.,  11937., 15205., 18873., 6148.,  8468.,  11108., 14068.,
      6352.,  8208.,  10320., 12688., 6660.,  8980.,  11620., 14580., 9528.,
      12312., 15480., 19032., 9324.,  12572., 16268., 20412., 11628., 14876.,
      18572., 22716., 9324.,  12572., 16268., 20412., 9528.,  12312., 15480.,
      19032., 6660.,  8980.,  11620., 14580., 6352.,  8208.,  10320., 12688.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  743.,   1091.,  1487.,  1931.,  1199.,  1643.,
      2135.,  2675.,  1655.,  2195.,  2783.,  3419.,  2111.,  2747.,  3431.,
      4163.,  2394.,  2882.,  3402.,  3954.,  1733.,  2009.,  2301.,  2609.,
      250.,   610.,   1002.,  1426.,  1684.,  2276.,  2932.,  3652.,  3726.,
      4678.,  5726.,  6870.,  3550.,  4438.,  5422.,  6502.,  5614.,  6694.,
      7870.,  9142.,  7678.,  8950.,  10318., 11782., 9742.,  11206., 12766.,
      14422., 8724.,  9828.,  10996., 12228., 5562.,  6178.,  6826.,  7506.,
      3231.,  3995.,  4807.,  5667.,  6158.,  7622.,  9182.,  10838., 11021.,
      12865., 14853., 16985., 8293.,  9913.,  11677., 13585., 9853.,  11505.,
      13301., 15241., 13653., 15593., 17677., 19905., 17453., 19681., 22053.,
      24569., 12910., 14502., 16190., 17974., 4767.,  5531.,  6343.,  7203.,
      8343.,  9267.,  10239., 11259., 13950., 15734., 17614., 19590., 11893.,
      14217., 16685., 19297., 11021., 12865., 14853., 16985., 8293.,  9913.,
      11677., 13585., 9853.,  11505., 13301., 15241., 13653., 15593., 17677.,
      19905., 10334., 11734., 13230., 14822., 3799.,  4467.,  5183.,  5947.,
      7119.,  7947.,  8823.,  9747.,  17454., 19302., 21246., 23286., 18717.,
      21265., 23957., 26793., 11893., 14217., 16685., 19297., 11021., 12865.,
      14853., 16985., 8293.,  9913.,  11677., 13585., 9853.,  11505., 13301.,
      15241., 7758.,  8966.,  10270., 11670., 2831.,  3403.,  4023.,  4691.,
      5895.,  6627.,  7407.,  8235.,  14622., 16278., 18030., 19878., 21253.,
      23769., 26429., 29233., 18717., 21265., 23957., 26793., 11893., 14217.,
      16685., 19297., 11021., 12865., 14853., 16985., 8293.,  9913.,  11677.,
      13585., 5182.,  6198.,  7310.,  8518.,  1863.,  2339.,  2863.,  3435.,
      4671.,  5307.,  5991.,  6723.,  11790., 13254., 14814., 16470., 17453.,
      19681., 22053., 24569., 21253., 23769., 26429., 29233., 18717., 21265.,
      23957., 26793., 11893., 14217., 16685., 19297., 11021., 12865., 14853.,
      16985., 4846.,  5926.,  7102.,  8374.,  895.,   1275.,  1703.,  2179.,
      3418.,  3906.,  4426.,  4978.,  8724.,  9828.,  10996., 12228., 12910.,
      14502., 16190., 17974., 16254., 18038., 19918., 21894., 19598., 21574.,
      23646., 25814., 16606., 18518., 20526., 22630., 9326.,  10918., 12606.,
      14390., 5972.,  6820.,  7732.,  8708.,  154.,   386.,   650.,   946.,
      1733.,  2009.,  2301.,  2609.,  4538.,  5154.,  5802.,  6482.,  6303.,
      7067.,  7879.,  8739.,  8039.,  8899.,  9807.,  10763., 9775.,  10731.,
      11735., 12787., 11511., 12563., 13663., 14811., 6911.,  7803.,  8743.,
      9731.,  346.,   834.,   1354.,  1906.,  5.,     25.,    61.,    113.,
      29.,    81.,    149.,   233.,   234.,   402.,   602.,   834.,   743.,
      1091.,  1487.,  1931.,  1583.,  2027.,  2519.,  3059.,  2423.,  2963.,
      3551.,  4187.,  3263.,  3899.,  4583.,  5315.,  4103.,  4835.,  5615.,
      6443.,  3850.,  4402.,  4986.,  5602.,  2525.,  2833.,  3157.,  3497.,
      1194.,  1618.,  2074.,  2562.,  2804.,  3524.,  4308.,  5156.,  5278.,
      6422.,  7662.,  8998.,  4846.,  5926.,  7102.,  8374.,  7678.,  8950.,
      10318., 11782., 10510., 11974., 13534., 15190., 13342., 14998., 16750.,
      18598., 11380., 12612., 13908., 15268., 7018.,  7698.,  8410.,  9154.,
      4967.,  5827.,  6735.,  7691.,  8798.,  10198., 11694., 13286., 13093.,
      14969., 16989., 19153., 8445.,  10097., 11893., 13833., 9109.,  10793.,
      12621., 14593., 13037., 15009., 17125., 19385., 16965., 19225., 21629.,
      24177., 10174., 11702., 13326., 15046., 6759.,  7619.,  8527.,  9483.,
      10719., 11739., 12807., 13923., 10702., 12422., 14238., 16150., 16909.,
      19265., 21765., 24409., 13093., 14969., 16989., 19153., 8445.,  10097.,
      11893., 13833., 9109.,  10793., 12621., 14593., 13037., 15009., 17125.,
      19385., 7854.,  9190.,  10622., 12150., 5407.,  6171.,  6983.,  7843.,
      9111.,  10035., 11007., 12027., 15486., 17270., 19150., 21126., 17461.,
      20041., 22765., 25633., 16909., 19265., 21765., 24409., 13093., 14969.,
      16989., 19153., 8445.,  10097., 11893., 13833., 9109.,  10793., 12621.,
      14593., 5534.,  6678.,  7918.,  9254.,  4055.,  4723.,  5439.,  6203.,
      7503.,  8331.,  9207.,  10131., 12910., 14502., 16190., 17974., 20893.,
      23441., 26133., 28969., 17461., 20041., 22765., 25633., 16909., 19265.,
      21765., 24409., 13093., 14969., 16989., 19153., 8445.,  10097., 11893.,
      13833., 3214.,  4166.,  5214.,  6358.,  2703.,  3275.,  3895.,  4563.,
      5895.,  6627.,  7407.,  8235.,  10334., 11734., 13230., 14822., 16965.,
      19225., 21629., 24177., 20893., 23441., 26133., 28969., 17461., 20041.,
      22765., 25633., 16909., 19265., 21765., 24409., 13093., 14969., 16989.,
      19153., 4158.,  5174.,  6286.,  7494.,  1351.,  1827.,  2351.,  2923.,
      4106.,  4658.,  5242.,  5858.,  7092.,  8068.,  9108.,  10212., 11454.,
      12982., 14606., 16326., 14542., 16262., 18078., 19990., 17630., 19542.,
      21550., 23654., 13358., 15206., 17150., 19190., 11966., 13494., 15118.,
      16838., 5876.,  6596.,  7380.,  8228.,  330.,   626.,   954.,   1314.,
      2013.,  2321.,  2645.,  2985.,  2986.,  3410.,  3866.,  4354.,  4263.,
      4867.,  5519.,  6219.,  5359.,  6059.,  6807.,  7603.,  6455.,  7251.,
      8095.,  8987.,  7551.,  8443.,  9383.,  10371., 1287.,  2019.,  2799.,
      3627.,  1098.,  1394.,  1722.,  2082.,  29.,    81.,    149.,   233.,
      53.,    137.,   237.,   353.,   410.,   642.,   906.,   1202.,  1199.,
      1643.,  2135.,  2675.,  2423.,  2963.,  3551.,  4187.,  3647.,  4283.,
      4967.,  5699.,  4871.,  5603.,  6383.,  7211.,  6095.,  6923.,  7799.,
      8723.,  5306.,  5922.,  6570.,  7250.,  3317.,  3657.,  4013.,  4385.,
      2138.,  2626.,  3146.,  3698.,  3924.,  4772.,  5684.,  6660.,  6830.,
      8166.,  9598.,  11126., 6142.,  7414.,  8782.,  10246., 9742.,  11206.,
      12766., 14422., 13342., 14998., 16750., 18598., 16942., 18790., 20734.,
      22774., 14036., 15396., 16820., 18308., 8474.,  9218.,  9994.,  10802.,
      6511.,  7211.,  7959.,  8755.,  10414., 11750., 13182., 14710., 14141.,
      16049., 18101., 20297., 7573.,  9257.,  11085., 13057., 7341.,  9057.,
      10917., 12921., 11397., 13401., 15549., 17841., 15453., 17745., 20181.,
      22761., 13774., 15494., 17310., 19222., 8751.,  9707.,  10711., 11763.,
      5735.,  6595.,  7503.,  8459.,  14622., 16278., 18030., 19878., 20901.,
      23289., 25821., 28497., 14141., 16049., 18101., 20297., 7573.,  9257.,
      11085., 13057., 7341.,  9057.,  10917., 12921., 11397., 13401., 15549.,
      17841., 10686., 12214., 13838., 15558., 7015.,  7875.,  8783.,  9739.,
      4767.,  5531.,  6343.,  7203.,  12494., 14214., 16030., 17942., 23373.,
      25985., 28741., 31641., 20901., 23289., 25821., 28497., 14141., 16049.,
      18101., 20297., 7573.,  9257.,  11085., 13057., 7341.,  9057.,  10917.,
      12921., 7598.,  8934.,  10366., 11894., 5279.,  6043.,  6855.,  7715.,
      3799.,  4467.,  5183.,  5947.,  10174., 11702., 13326., 15046., 19509.,
      22089., 24813., 27681., 23373., 25985., 28741., 31641., 20901., 23289.,
      25821., 28497., 14141., 16049., 18101., 20297., 7573.,  9257.,  11085.,
      13057., 4510.,  5654.,  6894.,  8230.,  3543.,  4211.,  4927.,  5691.,
      2831.,  3403.,  4023.,  4691.,  7854.,  9190.,  10622., 12150., 15453.,
      17745., 20181., 22761., 19509., 22089., 24813., 27681., 23373., 25985.,
      28741., 31641., 20901., 23289., 25821., 28497., 14141., 16049., 18101.,
      20297., 5710.,  6918.,  8222.,  9622.,  1807.,  2379.,  2999.,  3667.,
      1530.,  1890.,  2282.,  2706.,  4436.,  5284.,  6196.,  7172.,  8974.,
      10438., 11998., 13654., 11806., 13462., 15214., 17062., 14638., 16486.,
      18430., 20470., 17278., 19062., 20942., 22918., 13582., 15046., 16606.,
      18262., 6996.,  7844.,  8756.,  9732.,  506.,   866.,   1258.,  1682.,
      53.,    137.,   237.,   353.,   410.,   642.,   906.,   1202.,  1199.,
      1643.,  2135.,  2675.,  1655.,  2195.,  2783.,  3419.,  2111.,  2747.,
      3431.,  4163.,  2567.,  3299.,  4079.,  4907.,  2831.,  3403.,  4023.,
      4691.,  2042.,  2402.,  2794.,  3218.,  53.,    137.,   237.,   353.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  2074.,
      4042.,  6394.,  9130.,  5626.,  8362.,  11482., 14986., 8538.,  11018.,
      13882., 17130., 7354.,  9578.,  12186., 15178., 2074.,  4042.,  6394.,
      9130.,  5116.,  6940.,  9020.,  11356., 4766.,  5934.,  7230.,  8654.,
      1020.,  2844.,  4924.,  7260.,  7544.,  10168., 13304., 16952., 14708.,
      19156., 24372., 30356., 14004., 18964., 24692., 31188., 9204.,  14676.,
      20916., 27924., 16052., 21012., 26740., 33236., 14708., 19156., 24372.,
      30356., 3448.,  6072.,  9208.,  12856., 5116.,  6940.,  9020.,  11356.,
      10906., 13898., 17274., 21034., 7156.,  12628., 18868., 25876., 24590.,
      32030., 40622., 50366., 28846., 36542., 45390., 55390., 24910., 32862.,
      41966., 52222., 12782., 20990., 30350., 40862., 24590., 32030., 40622.,
      50366., 14708., 19156., 24372., 30356., 2074.,  4042.,  6394.,  9130.,
      14138., 17386., 21018., 25034., 22836., 28820., 35572., 43092., 12782.,
      20990., 30350., 40862., 24590., 32030., 40622., 50366., 28846., 36542.,
      45390., 55390., 24910., 32862., 41966., 52222., 12782., 20990., 30350.,
      40862., 16052., 21012., 26740., 33236., 7354.,  9578.,  12186., 15178.,
      8538.,  11018., 13882., 17130., 21492., 26964., 33204., 40212., 24910.,
      32862., 41966., 52222., 12782., 20990., 30350., 40862., 24590., 32030.,
      40622., 50366., 28846., 36542., 45390., 55390., 24910., 32862., 41966.,
      52222., 9204.,  14676., 20916., 27924., 8538.,  11018., 13882., 17130.,
      3578.,  6314.,  9434.,  12938., 16052., 21012., 26740., 33236., 28846.,
      36542., 45390., 55390., 24910., 32862., 41966., 52222., 12782., 20990.,
      30350., 40862., 24590., 32030., 40622., 50366., 28846., 36542., 45390.,
      55390., 14004., 18964., 24692., 31188., 5626.,  8362.,  11482., 14986.,
      10906., 13898., 17274., 21034., 7156.,  12628., 18868., 25876., 24590.,
      32030., 40622., 50366., 28846., 36542., 45390., 55390., 24910., 32862.,
      41966., 52222., 12782., 20990., 30350., 40862., 24590., 32030., 40622.,
      50366., 14708., 19156., 24372., 30356., 2074.,  4042.,  6394.,  9130.,
      13948., 16796., 19900., 23260., 21112., 25784., 30968., 36664., 7156.,
      12628., 18868., 25876., 16052., 21012., 26740., 33236., 21492., 26964.,
      33204., 40212., 22836., 28820., 35572., 43092., 7156.,  12628., 18868.,
      25876., 7544.,  10168., 13304., 16952., 380.,   1180.,  2236.,  3548.,
      4766.,  5934.,  7230.,  8654.,  13948., 16796., 19900., 23260., 10906.,
      13898., 17274., 21034., 3578.,  6314.,  9434.,  12938., 8538.,  11018.,
      13882., 17130., 14138., 17386., 21018., 25034., 10906., 13898., 17274.,
      21034., 1020.,  2844.,  4924.,  7260.,  30.,    174.,   446.,   846.,
      190.,   590.,   1118.,  1774.,  1724.,  3036.,  4604.,  6428.,  5626.,
      8362.,  11482., 14986., 12250., 15754., 19642., 23914., 14138., 17386.,
      21018., 25034., 11930., 14922., 18298., 22058., 5626.,  8362.,  11482.,
      14986., 8508.,  10844., 13436., 16284., 6974.,  8398.,  9950.,  11630.,
      3772.,  5084.,  6652.,  8476.,  7544.,  10168., 13304., 16952., 14004.,
      18964., 24692., 31188., 11252., 16724., 22964., 29972., 20788., 26772.,
      33524., 41044., 21492., 26964., 33204., 40212., 14004., 18964., 24692.,
      31188., 8184.,  11832., 15992., 20664., 8508.,  10844., 13436., 16284.,
      3578.,  6314.,  9434.,  12938., 16052., 21012., 26740., 33236., 28846.,
      36542., 45390., 55390., 25934., 33886., 42990., 53246., 14830., 23038.,
      32398., 42910., 28302., 36766., 46382., 57150., 28846., 36542., 45390.,
      55390., 14004., 18964., 24692., 31188., 5626.,  8362.,  11482., 14986.,
      11930., 14922., 18298., 22058., 9204.,  14676., 20916., 27924., 28302.,
      36766., 46382., 57150., 28846., 36542., 45390., 55390., 25934., 33886.,
      42990., 53246., 14830., 23038., 32398., 42910., 28302., 36766., 46382.,
      57150., 21492., 26964., 33204., 40212., 11930., 14922., 18298., 22058.,
      7354.,  9578.,  12186., 15178., 14004., 18964., 24692., 31188., 14830.,
      23038., 32398., 42910., 28302., 36766., 46382., 57150., 28846., 36542.,
      45390., 55390., 25934., 33886., 42990., 53246., 14830., 23038., 32398.,
      42910., 20788., 26772., 33524., 41044., 14138., 17386., 21018., 25034.,
      7514.,  9994.,  12858., 16106., 14708., 19156., 24372., 30356., 25934.,
      33886., 42990., 53246., 14830., 23038., 32398., 42910., 28302., 36766.,
      46382., 57150., 28846., 36542., 45390., 55390., 25934., 33886., 42990.,
      53246., 11252., 16724., 22964., 29972., 12250., 15754., 19642., 23914.,
      3578.,  6314.,  9434.,  12938., 16052., 21012., 26740., 33236., 28846.,
      36542., 45390., 55390., 25934., 33886., 42990., 53246., 14830., 23038.,
      32398., 42910., 28302., 36766., 46382., 57150., 28846., 36542., 45390.,
      55390., 14004., 18964., 24692., 31188., 5626.,  8362.,  11482., 14986.,
      10556., 12892., 15484., 18332., 4088.,  7736.,  11896., 16568., 16052.,
      21012., 26740., 33236., 14708., 19156., 24372., 30356., 14004., 18964.,
      24692., 31188., 9204.,  14676., 20916., 27924., 16052., 21012., 26740.,
      33236., 7544.,  10168., 13304., 16952., 1724.,  3036.,  4604.,  6428.,
      6974.,  8398.,  9950.,  11630., 10556., 12892., 15484., 18332., 3578.,
      6314.,  9434.,  12938., 7514.,  9994.,  12858., 16106., 7354.,  9578.,
      12186., 15178., 11930., 14922., 18298., 22058., 3578.,  6314.,  9434.,
      12938., 3772.,  5084.,  6652.,  8476.,  190.,   590.,   1118.,  1774.,
      350.,   1006.,  1790.,  2702.,  3068.,  4892.,  6972.,  9308.,  8538.,
      11018., 13882., 17130., 14138., 17386., 21018., 25034., 10906., 13898.,
      17274., 21034., 3578.,  6314.,  9434.,  12938., 8538.,  11018., 13882.,
      17130., 7164.,  8988.,  11068., 13404., 350.,   1006.,  1790.,  2702.,
      7164.,  8988.,  11068., 13404., 12280., 15928., 20088., 24760., 9204.,
      14676., 20916., 27924., 20788., 26772., 33524., 41044., 28276., 34772.,
      42036., 50068., 22836., 28820., 35572., 43092., 9204.,  14676., 20916.,
      27924., 12280., 15928., 20088., 24760., 7164.,  8988.,  11068., 13404.,
      8538.,  11018., 13882., 17130., 21492., 26964., 33204., 40212., 24910.,
      32862., 41966., 52222., 14830., 23038., 32398., 42910., 29326., 37790.,
      47406., 58174., 35630., 44350., 54222., 65246., 24910., 32862., 41966.,
      52222., 9204.,  14676., 20916., 27924., 8538.,  11018., 13882., 17130.,
      5626.,  8362.,  11482., 14986., 20788., 26772., 33524., 41044., 35630.,
      44350., 54222., 65246., 24910., 32862., 41966., 52222., 14830., 23038.,
      32398., 42910., 29326., 37790., 47406., 58174., 35630., 44350., 54222.,
      65246., 22836., 28820., 35572., 43092., 3578.,  6314.,  9434.,  12938.,
      2074.,  4042.,  6394.,  9130.,  11252., 16724., 22964., 29972., 29326.,
      37790., 47406., 58174., 35630., 44350., 54222., 65246., 24910., 32862.,
      41966., 52222., 14830., 23038., 32398., 42910., 29326., 37790., 47406.,
      58174., 28276., 34772., 42036., 50068., 10906., 13898., 17274., 21034.,
      7354.,  9578.,  12186., 15178., 14004., 18964., 24692., 31188., 14830.,
      23038., 32398., 42910., 29326., 37790., 47406., 58174., 35630., 44350.,
      54222., 65246., 24910., 32862., 41966., 52222., 14830., 23038., 32398.,
      42910., 20788., 26772., 33524., 41044., 14138., 17386., 21018., 25034.,
      8538.,  11018., 13882., 17130., 21492., 26964., 33204., 40212., 24910.,
      32862., 41966., 52222., 14830., 23038., 32398., 42910., 29326., 37790.,
      47406., 58174., 35630., 44350., 54222., 65246., 24910., 32862., 41966.,
      52222., 9204.,  14676., 20916., 27924., 8538.,  11018., 13882., 17130.,
      3068.,  4892.,  6972.,  9308.,  12280., 15928., 20088., 24760., 21492.,
      26964., 33204., 40212., 14004., 18964., 24692., 31188., 11252., 16724.,
      22964., 29972., 20788., 26772., 33524., 41044., 21492., 26964., 33204.,
      40212., 12280., 15928., 20088., 24760., 3068.,  4892.,  6972.,  9308.,
      350.,   1006.,  1790.,  2702.,  3068.,  4892.,  6972.,  9308.,  8538.,
      11018., 13882., 17130., 7354.,  9578.,  12186., 15178., 2074.,  4042.,
      6394.,  9130.,  5626.,  8362.,  11482., 14986., 8538.,  11018., 13882.,
      17130., 7164.,  8988.,  11068., 13404., 350.,   1006.,  1790.,  2702.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2220.,  3070.,  4046.,  5152.,  5558.,  5964.,  6370.,  5930.,  5340.,
      4596.,  4600.,  6225.,  8050.,  10080., 10710., 11340., 11970., 10975.,
      9750.,  8290.,  8270.,  11035., 14091., 17444., 18347., 19250., 20153.,
      18285., 16090., 13562., 13510., 17786., 22397., 27350., 28319., 29224.,
      30065., 26552., 23110., 19284., 19450., 24778., 30447., 36464., 36985.,
      37442., 37835., 32846., 28370., 23504., 23598., 29530., 35809., 42442.,
      42515., 42524., 42469., 36452., 31390., 25932., 25674., 31617., 37881.,
      44472., 44069., 43602., 43071., 36483., 31330., 25814., 25060., 30299.,
      35816., 41616., 40688., 39696., 38640., 32149., 27590., 22718., 21476.,
      25226., 29194., 33384., 31882., 30316., 28686., 23030., 19820., 16364.,
      7628.,  10090., 12782., 15708., 16114., 16456., 16734., 14970., 12952.,
      10676., 12540., 16315., 20356., 24668., 25298., 25416., 25470., 22461.,
      19156., 15550., 17678., 22865., 28371., 34202., 35105., 35048., 34927.,
      30621., 25960., 20938., 23322., 30090., 37247., 44800., 46025., 45842.,
      45595., 39870., 33714., 27120., 23886., 30810., 38129., 45850., 47075.,
      46444., 45749., 39892., 33598., 26860., 22658., 29290., 36323., 43764.,
      44989., 43910., 42767., 37226., 31242., 24808., 19098., 24715., 30681.,
      37002., 38199., 36644., 35025., 30283., 25156., 19638., 12120., 15825.,
      19810., 24080., 25200., 26320., 27440., 24475., 21200., 17610., 14628.,
      18910., 23450., 28252., 29246., 30240., 31234., 27638., 23760., 19596.,
      7980.,  9878.,  11918., 14104., 13230., 12292., 12698., 11402., 9940.,
      8308.,  11584., 14309., 17238., 20376., 19278., 18116., 18746., 16795.,
      14610., 12186., 16142., 19975., 24091., 28496., 27223., 25886., 26789.,
      23949., 20790., 17306., 21934., 27226., 32897., 38954., 37555., 36092.,
      37317., 33284., 28830., 23948., 18018., 22122., 26611., 31428., 29453.,
      27350., 28319., 25242., 21738., 17800., 18134., 23610., 29477., 35230.,
      35879., 36464., 36985., 32432., 27446., 22020., 22122., 28565., 35385.,
      41628., 41801., 41910., 41955., 36371., 30374., 23958., 23756., 30535.,
      37660., 43728., 43376., 42960., 42480., 36449., 30042., 23254., 22756.,
      29170., 35882., 41040., 40114., 39124., 38070., 32246., 26100., 19628.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     10.,    20.,    30.,    40.,   50.,   52.,   45.,
      28.,    13.,    41.,    86.,    150.,   186.,  222.,  258.,  239.,
      191.,   112.,   64.,    167.,   312.,   502.,  580.,  658.,  736.,
      645.,   494.,   280.,   169.,   398.,   690.,  1048., 1126., 1204.,
      1282.,  1086.,  809.,   448.,   274.,   629.,  1068., 1594., 1672.,
      1750.,  1828.,  1527.,  1124.,  616.,   379.,  860.,  1446., 2140.,
      2218.,  2296.,  2374.,  1968.,  1439.,  784.,  484.,  1091., 1824.,
      2686.,  2764.,  2842.,  2920.,  2409.,  1754., 952.,  539.,  1171.,
      1898.,  2722.,  2790.,  2858.,  2926.,  2357., 1681., 896.,  387.,
      826.,   1318.,  1864.,  1906.,  1948.,  1990., 1582., 1115., 588.,
      13.,    40.,    82.,    140.,   198.,   256.,  314.,  268.,  201.,
      112.,   121.,   281.,   482.,   726.,   858.,  990.,  1122., 923.,
      671.,   364.,   352.,   779.,   1284.,  1870., 2092., 2314., 2536.,
      2049.,  1466.,  784.,   709.,   1514.,  2418., 3424., 3646., 3868.,
      4090.,  3246.,  2285.,  1204.,  1066.,  2249., 3552., 4978., 5200.,
      5422.,  5644.,  4443.,  3104.,  1624.,  1423., 2984., 4686., 6532.,
      6754.,  6976.,  7198.,  5640.,  3923.,  2044., 1780., 3719., 5820.,
      8086.,  8308.,  8530.,  8752.,  6837.,  4742., 2464., 1487., 3091.,
      4814.,  6658.,  6822.,  6986.,  7150.,  5561., 3841., 1988., 903.,
      1870.,  2902.,  4000.,  4090.,  4180.,  4270., 3310., 2279., 1176.,
      25.,    76.,    154.,   260.,   366.,   472.,  578.,  484.,  357.,
      196.,   229.,   521.,   878.,   1302.,  1530., 1758., 1986., 1607.,
      1151.,  616.,   640.,   1391.,  2256.,  3238., 3604., 3970., 4336.,
      3453.,  2438.,  1288.,  1249.,  2630.,  4146., 5800., 6166., 6532.,
      6898.,  5406.,  3761.,  1960.,  1858.,  3869., 6036., 8362., 8728.,
      9094.,  9460.,  7359.,  5084.,  2632.,  2467., 5108., 7926., 10924.,
      11290., 11656., 12022., 9312.,  6407.,  3304., 3076., 6347., 9816.,
      13486., 13852., 14218., 14584., 11265., 7730., 3976., 2435., 5011.,
      7730.,  10594., 10854., 11114., 11374., 8765., 6001., 3080., 1419.,
      2914.,  4486.,  6136.,  6274.,  6412.,  6550., 5038., 3443., 1764.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6560.,  8376.,  10544., 11208., 10112., 10808., 12240., 11520., 10128.,
      8640.,  9020.,  11761., 14930., 17831., 17489., 16795., 17605., 14542.,
      10555., 7492.,  11168., 14296., 17936., 20504., 20796., 19840., 19236.,
      17656., 15020., 12400., 12940., 16605., 20874., 25227., 25937., 24375.,
      23933., 21022., 17779., 13636., 18172., 21025., 24530., 28039., 28109.,
      27059., 25977., 20614., 15767., 13300., 16108., 18053., 20570., 25155.,
      26985., 26927., 27861., 24238., 20059., 17572., 13328., 16284., 19736.,
      21844., 21672., 22812., 23792., 19424., 15520., 12672., 13804., 15509.,
      17626., 19075., 19421., 20311., 20945., 17974., 14447., 11348., 8192.,
      10176., 12480., 14784., 15928., 16944., 17832., 15088., 12952., 10144.,
      8032.,  10312., 13008., 15416., 14576., 13384., 13696., 11232., 8032.,
      5952.,  10828., 13741., 17098., 19307., 19221., 17887., 16905., 15270.,
      12695., 10260., 12096., 15280., 18944., 22656., 22724., 20520., 19436.,
      16808., 14020., 10512., 18172., 21025., 24530., 28039., 28109., 27059.,
      25977., 20614., 15767., 13300., 16108., 18053., 20570., 25155., 26985.,
      26927., 27861., 24238., 20059., 17572., 14172., 17609., 21666., 24415.,
      24229., 25227., 25937., 21142., 16639., 13012., 17392., 20404., 24008.,
      26140., 25968., 26212., 26072., 21904., 16952., 12192., 11644., 14129.,
      17042., 18183., 17665., 18939., 19957., 16654., 13675., 10340., 10688.,
      13328., 16352., 17424., 16808., 15936., 14808., 13072., 10728., 7648.,
      5280.,  7672.,  10416., 13544., 14720., 14776., 15312., 13760., 11536.,
      9728.,  10076., 12425., 15106., 18159., 18457., 16611., 16013., 14142.,
      12307., 9956.,  13408., 14600., 16240., 20424., 21356., 21296., 21332.,
      17624., 14684., 12336., 16108., 18053., 20570., 25155., 26985., 26927.,
      27861., 24238., 20059., 17572., 14172., 17609., 21666., 24415., 24229.,
      25227., 25937., 21142., 16639., 13012., 17804., 21069., 25002., 27547.,
      27585., 28039., 28109., 24062., 19107., 14212., 13456., 16684., 20472.,
      22628., 22712., 24588., 26208., 22592., 19120., 15104., 12556., 15565.,
      19018., 20587., 20325., 19807., 19033., 15910., 11943., 8884.,  10496.,
      13024., 16000., 16960., 17208., 17328., 17320., 16304., 14520., 11936.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    59.,    124.,   196.,   268.,   340.,   365.,   322.,
      203.,   76.,    264.,   580.,   1040.,  1312.,  1584.,  1856.,  1744.,
      1408.,  832.,   437.,   1174.,  2235.,  3644.,  4244.,  4844.,  5444.,
      4809.,  3706.,  2111.,  1235.,  2938.,  5133.,  7844.,  8444.,  9044.,
      9644.,  8211.,  6142.,  3413.,  2033.,  4702.,  8031.,  12044., 12452.,
      12604., 12500., 9501.,  6914.,  3755.,  2639.,  5826.,  9585.,  13940.,
      13324., 12452., 11324., 7719.,  5638.,  3073.,  2221.,  4902.,  8067.,
      11740., 10100., 8204.,  6052.,  2865.,  2314.,  1367.,  672.,   1568.,
      2704.,  4096.,  4624.,  5152.,  5680.,  4780.,  3544.,  1956.,  753.,
      1662.,  2735.,  3980.,  4308.,  4636.,  4964.,  4049.,  2922.,  1575.,
      77.,    262.,   563.,   988.,   1444.,  1900.,  2356.,  2021.,  1522.,
      851.,   892.,   2088.,  3604.,  5456.,  6496.,  7536.,  8576.,  7072.,
      5152.,  2800.,  2669.,  5926.,  9795.,  14300., 16052., 17804., 19556.,
      15825., 11338., 6071.,  5483.,  11722., 18741., 26564., 28316., 30068.,
      31820., 25275., 17806., 9389.,  8297.,  17518., 27687., 38828., 37316.,
      35548., 33524., 23397., 16466., 8675.,  7847.,  16530., 26073., 36500.,
      33964., 31172., 28124., 18447., 13078., 6937.,  6373.,  13494., 21387.,
      30076., 26516., 22700., 18628., 10425., 7642.,  4175.,  2064.,  4544.,
      7456.,  10816., 12112., 13408., 14704., 11836., 8440.,  4500.,  1785.,
      3822.,  6119.,  8684.,  9396.,  10108., 10820., 8585.,  6042.,  3183.,
      149.,   502.,   1067.,  1852.,  2692.,  3532.,  4372.,  3677.,  2722.,
      1499.,  1708.,  3912.,  6628.,  9872.,  11680., 13488., 15296., 12400.,
      8896.,  4768.,  4709.,  10038., 16011., 22652., 24532., 26412., 28292.,
      22425., 15770., 8303.,  7747.,  16282., 25629., 35812., 37692., 39572.,
      41452., 32547., 22686., 11845., 10785., 22526., 35247., 48972., 44516.,
      39804., 34836., 22125., 15650., 8283.,  7487.,  15842., 25089., 35252.,
      29772., 24036., 18044., 8631.,  6566.,  3697.,  3165.,  7110.,  11859.,
      17436., 19124., 20556., 21732., 16641., 11818., 6279.,  2496.,  5344.,
      8560.,  12160., 13200., 14240., 15280., 12172., 8600.,  4548.,  65.,
      222.,   479.,   844.,   916.,   988.,   1060.,  1025.,  842.,   503.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16672., 18696., 25520., 29912., 28664., 27096., 27384., 19632., 18472.,
      16160., 19704., 23582., 28244., 35226., 37394., 35338., 38210., 29444.,
      22710., 18904., 23280., 29628., 37096., 43188., 48004., 45012., 45924.,
      38856., 29196., 18288., 30984., 36578., 46572., 52070., 54990., 54710.,
      53214., 42492., 36586., 25704., 35656., 40018., 47628., 54710., 53214.,
      49862., 52782., 41756., 35674., 29864., 32008., 39234., 44460., 49862.,
      52782., 50454., 53374., 45116., 37834., 31976., 26416., 32940., 40456.,
      43396., 45524., 43940., 47092., 41512., 33468., 24304., 24184., 26766.,
      33268., 38570., 40354., 39962., 39378., 33124., 27686., 18648., 22240.,
      25960., 28272., 32696., 34264., 31416., 32472., 26160., 21256., 16672.,
      16672., 18952., 21936., 27096., 27384., 25816., 29688., 23216., 19752.,
      16160., 20792., 25518., 31156., 35338., 38210., 35130., 36466., 30948.,
      23750., 16280., 29040., 33308., 41512., 45012., 45924., 44980., 43332.,
      33416., 29164., 20848., 35656., 40018., 47628., 54710., 53214., 49862.,
      52782., 41756., 35674., 29864., 32008., 39234., 44460., 49862., 52782.,
      50454., 53374., 45116., 37834., 31976., 28360., 36210., 45516., 50454.,
      53374., 52070., 54990., 48476., 38650., 26792., 27952., 31948., 40264.,
      43940., 47092., 47556., 47316., 38632., 31836., 20592., 27320., 32542.,
      36692., 39962., 39378., 37962., 39938., 32068., 24374., 18072., 21216.,
      27752., 31856., 31416., 32472., 29624., 30168., 27696., 22024., 16672.,
      14624., 17672., 21424., 25816., 29688., 28120., 31480., 25776., 19496.,
      14112., 23928., 25598., 31892., 35130., 36466., 36458., 36258., 29380.,
      25110., 17880., 31600., 33788., 38632., 44980., 43332., 40340., 44132.,
      35272., 32332., 26608., 32008., 39234., 44460., 49862., 52782., 50454.,
      53374., 45116., 37834., 31976., 28360., 36210., 45516., 50454., 53374.,
      52070., 54990., 48476., 38650., 26792., 30984., 36578., 46572., 52070.,
      54990., 54710., 53214., 42492., 36586., 25704., 32688., 35884., 42120.,
      47556., 47316., 45732., 47028., 34728., 27964., 22128., 28408., 33390.,
      35892., 37962., 39938., 37498., 37938., 32036., 24454., 19672., 22240.,
      25960., 30320., 29624., 30168., 31416., 31448., 28208., 23304., 14624.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   856.,   1400.,  1944.,  2488.,  2722.,  2428.,
      1542.,  500.,   1544.,  3068.,  5200.,  5456.,  7568.,  9680.,  9260.,
      7592.,  4548.,  2562.,  4084.,  6294.,  9192.,  6600.,  7400.,  10056.,
      10206., 8708.,  5370.,  2506.,  6340.,  9134.,  12616., 9192.,  6600.,
      7400.,  7926.,  6996.,  4418.,  2130.,  5716.,  10630., 14504., 12616.,
      9192.,  6600.,  5646.,  5284.,  3466.,  1754.,  4772.,  9246.,  15048.,
      14504., 12616., 9192.,  5222.,  3572.,  2514.,  1378.,  3828.,  7542.,
      12712., 15048., 14504., 12616., 8190.,  3716.,  1562.,  932.,   2600.,
      5132.,  8656.,  10768., 12560., 11472., 8764.,  4424.,  692.,   110.,
      428.,   1018.,  1944.,  2488.,  3032.,  3256.,  2898.,  1884.,  150.,
      190.,   716.,   1642.,  3032.,  4600.,  6168.,  7736.,  7042.,  5564.,
      3238.,  2292.,  3080.,  4348.,  6224.,  4432.,  6544.,  8656.,  8492.,
      7080.,  4292.,  2466.,  6196.,  8822.,  12392., 10824., 10600., 14280.,
      13758., 11332., 6810.,  4202.,  7940.,  12942., 16840., 12392., 10824.,
      10600., 10710., 9108.,  5602.,  3570.,  8852.,  13670., 19752., 16840.,
      12392., 10824., 7662.,  6884.,  4394.,  2938.,  7396.,  13566., 19272.,
      19752., 16840., 12392., 8518.,  4660.,  3186.,  2306.,  5940.,  11094.,
      17960., 19272., 19752., 16840., 10718., 6340.,  1978.,  1188.,  3112.,
      5900.,  9680.,  11792., 11536., 10448., 7484.,  2888.,  948.,   782.,
      2028.,  3802.,  6168.,  7736.,  9304.,  8504.,  6706.,  3996.,  310.,
      30.,    140.,   394.,   856.,   1400.,  1944.,  2488.,  2722.,  2428.,
      1542.,  500.,   1544.,  3068.,  5200.,  5456.,  7568.,  9680.,  9260.,
      7592.,  4548.,  2562.,  4084.,  6294.,  9192.,  6600.,  7400.,  10056.,
      10206., 8708.,  5370.,  2506.,  6340.,  9134.,  12616., 9192.,  6600.,
      7400.,  7926.,  6996.,  4418.,  2130.,  5716.,  10630., 14504., 12616.,
      9192.,  6600.,  5646.,  5284.,  3466.,  1754.,  4772.,  9246.,  15048.,
      14504., 12616., 9192.,  5222.,  3572.,  2514.,  1378.,  3828.,  7542.,
      12712., 15048., 14504., 12616., 8190.,  3716.,  1562.,  932.,   2600.,
      5132.,  8656.,  10768., 12560., 11472., 8764.,  4424.,  692.,   110.,
      428.,   1018.,  1944.,  2488.,  3032.,  3256.,  2898.,  1884.,  150.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7664.,  8496.,  10464., 11512., 13624., 14904., 17160., 18688., 18024.,
      19544., 18760., 20272., 20328., 21896., 18872., 20264., 16960., 18160.,
      14576., 15568., 13788., 14944., 17997., 19396., 22602., 24264., 27623.,
      29568., 28089., 30040., 28427., 30384., 30493., 32520., 27538., 29308.,
      23939., 25432., 19676., 20872., 20328., 21688., 24684., 26348., 29540.,
      31532., 34920., 37264., 34672., 37036., 34296., 36680., 36544., 39012.,
      32580., 34740., 27844., 29672., 22312., 23784., 24308., 26008., 28277.,
      30312., 32790., 35188., 37875., 40664., 36661., 39420., 35191., 37920.,
      37113., 39876., 32030., 34400., 26939., 28952., 20980., 22608., 25236.,
      26984., 26873., 28968., 29078., 31548., 35975., 38848., 37065., 39908.,
      37899., 40712., 38925., 41772., 34094., 36536., 30127., 32200., 25268.,
      26944., 27188., 28984., 32893., 35048., 39190., 41732., 46107., 49064.,
      45405., 48332., 44447., 47344., 44577., 47508., 37694., 40208., 32547.,
      34680., 26484., 28208., 29288., 30888., 32664., 34564., 36532., 38756.,
      40916., 43488., 38324., 40852., 35476., 37960., 34612., 37116., 27444.,
      29580., 23032., 24840., 17832., 19288., 25372., 26768., 26089., 27756.,
      27258., 29216., 28899., 31168., 27101., 29376., 29271., 31552., 31313.,
      33600., 28354., 30292., 25015., 26648., 20956., 22264., 16624., 17808.,
      20920., 22312., 25560., 27176., 30560., 32416., 31472., 33320., 32256.,
      34096., 32912., 34744., 27992., 29528., 23720., 25008., 18864., 19888.,
      14896., 15920., 19840., 21160., 25304., 26936., 28552., 30448., 27240.,
      29128., 25736., 27552., 23976., 25720., 19992., 21480., 15392., 16608.,
      10160., 11088., 23516., 24816., 27553., 29164., 32122., 34064., 33595.,
      35824., 31885., 34120., 29087., 31264., 26033., 28152., 23538., 25332.,
      20263., 21712., 16188., 17272., 18568., 20024., 24364., 26180., 30772.,
      32972., 37368., 39912., 39040., 41604., 38728., 41248., 38160., 40636.,
      32948., 35060., 26852., 28576., 19848., 21160., 26772., 28520., 33689.,
      35880., 41366., 44028., 48487., 51584., 49641., 52772., 47915., 51016.,
      45933., 49004., 38830., 41464., 30671., 32840., 21428., 23104., 23348.,
      24888., 27869., 29800., 33046., 35396., 38907., 41704., 41533., 44428.,
      40511., 43440., 39361., 42324., 33470., 36048., 26627., 28792., 22900.,
      24624., 18900., 20488., 25185., 27176., 32150., 34572., 39823., 42704.,
      42449., 45428., 44627., 47640., 46677., 49724., 41934., 44584., 36215.,
      38440., 29492., 31264., 22984., 24424., 28840., 30636., 35300., 37476.,
      42388., 44968., 44916., 47580., 46100., 48784., 47156., 49860., 41220.,
      43564., 34408., 36368., 26696., 28248., 17116., 18272., 19885., 21316.,
      23114., 24840., 26823., 28864., 29057., 31168., 31291., 33472., 33525.,
      35776., 29122., 31084., 24011., 25664., 18172., 19496., 9904.,  10896.,
      13496., 14712., 17464., 18920., 21824., 23536., 23568., 25336., 25312.,
      27136., 27056., 28936., 24440., 26072., 21224., 22592., 17392., 18480.,
      14448., 15408., 18208., 19416., 22392., 23864., 27016., 28768., 26088.,
      27832., 25032., 26768., 26600., 28392., 24440., 26024., 21760., 23120.,
      18544., 19664., 23004., 24448., 26357., 28052., 30122., 32088., 34319.,
      36576., 32545., 34744., 30515., 32656., 31877., 34024., 26962., 28780.,
      22219., 23752., 16796., 18024., 22952., 24504., 23788., 25628., 25092.,
      27244., 30984., 33472., 31696., 34140., 32152., 34552., 32800., 35220.,
      28452., 30516., 25092., 26840., 20968., 22376., 27188., 28984., 32893.,
      35048., 39190., 41732., 46107., 49064., 45405., 48332., 44447., 47344.,
      44577., 47508., 37694., 40208., 32547., 34680., 26484., 28208., 30164.,
      32008., 34049., 36264., 38550., 41164., 43631., 46608., 40945., 43828.,
      37875., 40664., 36661., 39420., 29006., 31336., 23959., 25896., 17972.,
      19488., 29556., 31320., 31749., 33896., 34582., 37140., 37123., 40056.,
      34629., 37532., 35975., 38848., 37065., 39908., 32862., 35264., 28043.,
      30040., 22260., 23824., 24616., 26280., 31480., 33492., 38932., 41316.,
      45140., 47856., 44852., 47524., 44308., 46936., 43508., 46092., 36308.,
      38476., 29464., 31256., 21736., 23128., 26780., 28208., 31729., 33436.,
      37146., 39152., 40299., 42560., 37925., 40128., 35295., 37440., 32409.,
      34496., 24514., 26244., 18015., 19432., 10780., 11864., 18544., 19600.,
      21048., 22344., 23960., 25512., 23648., 25408., 21616., 23368., 19456.,
      21200., 17168., 18904., 16024., 17496., 14248., 15440., 11824., 12720.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     6.,     16.,    19.,    40.,    44.,    80.,    76.,
      120.,   108.,   160.,   140.,   200.,   157.,   208.,   142.,   180.,
      91.,    112.,   24.,    52.,    100.,   164.,   236.,   344.,   440.,
      600.,   568.,   744.,   696.,   888.,   824.,   1032.,  788.,   956.,
      644.,   764.,   384.,   448.,   181.,   256.,   506.,   668.,   987.,
      1248.,  1636.,  2008.,  1924.,  2320.,  2212.,  2632.,  2500.,  2944.,
      2229.,  2580.,  1730.,  1976.,  991.,   1120.,  559.,   676.,   1346.,
      1592.,  2373.,  2760.,  3652.,  4192.,  3940.,  4504.,  4228.,  4816.,
      4516.,  5128.,  3867.,  4344.,  2906.,  3236.,  1621.,  1792.,  937.,
      1096.,  2186.,  2516.,  3759.,  4272.,  5668.,  6376.,  5956.,  6688.,
      6244.,  7000.,  6532.,  7312.,  5505.,  6108.,  4082.,  4496.,  2251.,
      2464.,  1315.,  1516.,  3026.,  3440.,  5145.,  5784.,  7684.,  8560.,
      7972.,  8872.,  8260.,  9184.,  8548.,  9496.,  7143.,  7872.,  5258.,
      5756.,  2881.,  3136.,  1693.,  1936.,  3866.,  4364.,  6531.,  7296.,
      9700.,  10744., 9988.,  11056., 10276., 11368., 10564., 11680., 8781.,
      9636.,  6434.,  7016.,  3511.,  3808.,  1972.,  2156.,  4308.,  4684.,
      7016.,  7592.,  10104., 10888., 10360., 11160., 10616., 11432., 10872.,
      11704., 8792.,  9428.,  6292.,  6724.,  3364.,  3584.,  1445.,  1548.,
      3094.,  3304.,  4951.,  5272.,  7020.,  7456.,  7180.,  7624.,  7340.,
      7792.,  7500.,  7960.,  5977.,  6328.,  4222.,  4460.,  2231.,  2352.,
      25.,    52.,    102.,   160.,   235.,   328.,   428.,   560.,   652.,
      792.,   876.,   1024.,  1100.,  1256.,  949.,   1072.,  718.,   804.,
      403.,   448.,   408.,   484.,   964.,   1124.,  1676.,  1928.,  2552.,
      2904.,  3064.,  3432.,  3576.,  3960.,  4088.,  4488.,  3380.,  3692.,
      2468.,  2684.,  1344.,  1456.,  1261.,  1408.,  2810.,  3116.,  4659.,
      5136.,  6820.,  7480.,  7684.,  8368.,  8548.,  9256.,  9412.,  10144.,
      7629.,  8196.,  5474.,  5864.,  2935.,  3136.,  2647.,  2836.,  5666.,
      6056.,  9069.,  9672.,  12868., 13696., 13732., 14584., 14596., 15472.,
      15460., 16360., 12291., 12984., 8666.,  9140.,  4573.,  4816.,  4033.,
      4264.,  8522.,  8996.,  13479., 14208., 18916., 19912., 19780., 20800.,
      20644., 21688., 21508., 22576., 16953., 17772., 11858., 12416., 6211.,
      6496.,  5419.,  5692.,  11378., 11936., 17889., 18744., 24964., 26128.,
      25828., 27016., 26692., 27904., 27556., 28792., 21615., 22560., 15050.,
      15692., 7849.,  8176.,  6805.,  7120.,  14234., 14876., 22299., 23280.,
      31012., 32344., 31876., 33232., 32740., 34120., 33604., 35008., 26277.,
      27348., 18242., 18968., 9487.,  9856.,  5716.,  5948.,  11892., 12364.,
      18536., 19256., 25656., 26632., 26296., 27288., 26936., 27944., 27576.,
      28600., 21464., 22244., 14836., 15364., 7684.,  7952.,  3485.,  3612.,
      7222.,  7480.,  11215., 11608., 15468., 16000., 15820., 16360., 16172.,
      16720., 16524., 17080., 12817., 13240., 8830.,  9116.,  4559.,  4704.,
      49.,    100.,   198.,   304.,   451.,   616.,   812.,   1040.,  1228.,
      1464.,  1644.,  1888.,  2060.,  2312.,  1741.,  1936.,  1294.,  1428.,
      715.,   784.,   792.,   916.,   1828.,  2084.,  3116.,  3512.,  4664.,
      5208.,  5560.,  6120.,  6456.,  7032.,  7352.,  7944.,  5972.,  6428.,
      4292.,  4604.,  2304.,  2464.,  2341.,  2560.,  5114.,  5564.,  8331.,
      9024.,  12004., 12952., 13444., 14416., 14884., 15880., 16324., 17344.,
      13029., 13812., 9218.,  9752.,  4879.,  5152.,  4735.,  4996.,  9986.,
      10520., 15765., 16584., 22084., 23200., 23524., 24664., 24964., 26128.,
      26404., 27592., 20715., 21624., 14426., 15044., 7525.,  7840.,  7129.,
      7432.,  14858., 15476., 23199., 24144., 32164., 33448., 33604., 34912.,
      35044., 36376., 36484., 37840., 28401., 29436., 19634., 20336., 10171.,
      10528., 9523.,  9868.,  19730., 20432., 30633., 31704., 42244., 43696.,
      43684., 45160., 45124., 46624., 46564., 48088., 36087., 37248., 24842.,
      25628., 12817., 13216., 11917., 12304., 24602., 25388., 38067., 39264.,
      52324., 53944., 53764., 55408., 55204., 56872., 56644., 58336., 43773.,
      45060., 30050., 30920., 15463., 15904., 9460.,  9740.,  19476., 20044.,
      30056., 30920., 41208., 42376., 42232., 43416., 43256., 44456., 44280.,
      45496., 34136., 35060., 23380., 24004., 12004., 12320., 5525.,  5676.,
      11350., 11656., 17479., 17944., 23916., 24544., 24460., 25096., 25004.,
      25648., 25548., 26200., 19657., 20152., 13438., 13772., 6887.,  7056.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7344.,  9328.,  8140.,  10556., 11272., 14248., 13188., 16724., 12532.,
      16132., 11780., 15316., 11892., 15492., 8328.,  11304., 7996.,  10476.,
      7088.,  9072.,  8596.,  11108., 10277., 13305., 12270., 15974., 15407.,
      19819., 16403., 20991., 15415., 19923., 16827., 21383., 12822., 16622.,
      9785.,  12925., 8228.,  10676., 10088., 13192., 12890., 16738., 16220.,
      20876., 18894., 24294., 21222., 26782., 19774., 25238., 20214., 25710.,
      17132., 21724., 12722., 16474., 7720.,  10568., 13612., 17372., 15979.,
      20599., 20498., 26074., 22849., 29221., 24237., 30753., 24153., 30557.,
      23397., 29817., 18570., 23922., 16071., 20515., 11132., 14572., 15884.,
      19772., 17651., 22367., 20994., 26634., 24153., 30557., 23397., 29817.,
      21777., 28085., 23165., 29617., 18170., 23586., 15567., 20107., 13148.,
      16716., 14124., 17884., 17339., 21895., 19506., 24954., 21777., 28085.,
      23165., 29617., 22057., 28397., 23445., 29929., 19818., 25298., 16599.,
      21235., 14140., 17836., 11592., 14824., 14498., 18442., 17868., 22588.,
      18982., 24414., 19966., 25558., 19222., 24718., 20718., 26374., 18364.,
      23148., 14746., 18722., 10600., 13704., 10708., 13476., 11693., 15073.,
      14622., 18646., 16999., 21571., 17803., 22551., 17647., 22315., 17331.,
      22047., 14566., 18558., 12225., 15461., 8100.,  10548., 9936.,  12304.,
      11548., 14412., 12456., 15816., 14484., 18212., 15236., 19028., 13844.,
      17572., 14340., 18132., 11464., 14696., 9292.,  11964., 7344.,  9328.,
      7344.,  9328.,  8268.,  10684., 9480.,  12456., 11780., 15316., 11892.,
      15492., 11140., 14676., 13044., 16644., 10120., 13096., 8636.,  11116.,
      7088.,  9072.,  9076.,  11716., 11165., 14353., 13630., 17526., 15415.,
      19923., 16827., 21383., 15327., 19803., 15971., 20495., 13606., 17342.,
      10353., 13397., 6980.,  9300.,  12840., 16200., 14634., 18674., 18364.,
      23148., 19774., 25238., 20214., 25710., 19790., 25190., 18950., 24382.,
      14476., 18940., 12738., 16426., 9000.,  11848., 15884., 19772., 17651.,
      22367., 20994., 26634., 24153., 30557., 23397., 29817., 21777., 28085.,
      23165., 29617., 18170., 23586., 15567., 20107., 13148., 16716., 14124.,
      17884., 17339., 21895., 19506., 24954., 21777., 28085., 23165., 29617.,
      22057., 28397., 23445., 29929., 19818., 25298., 16599., 21235., 14140.,
      17836., 12364., 15996., 15843., 20367., 20002., 25514., 22057., 28397.,
      23445., 29929., 22849., 29221., 24237., 30753., 21466., 27010., 17023.,
      21627., 11612., 15180., 12360., 15592., 13970., 17978., 17708., 22556.,
      19222., 24718., 20718., 26374., 20998., 26558., 20862., 26454., 16988.,
      21644., 14026., 17810., 8872.,  11720., 12212., 15108., 14501., 18041.,
      16238., 20454., 17647., 22315., 17331., 22047., 16663., 21299., 17627.,
      22311., 14070., 17998., 10617., 13757., 7876.,  10196., 9424.,  11792.,
      12444., 15308., 14248., 17608., 13844., 17572., 14340., 18132., 12948.,
      16676., 13188., 16980., 12232., 15464., 9676.,  12348., 7344.,  9328.,
      6320.,  8304.,  7628.,  10044., 9224.,  12200., 11140., 14676., 13044.,
      16644., 12292., 15828., 13940., 17540., 11400., 14376., 8508.,  10988.,
      6064.,  8048.,  10580., 13348., 11189., 14409., 14030., 17862., 15327.,
      19803., 15971., 20495., 16007., 20451., 15883., 20375., 12854., 16526.,
      11017., 14093., 7716.,  10164., 14120., 17480., 14906., 18882., 16988.,
      21644., 19790., 25190., 18950., 24382., 17502., 22838., 19318., 24814.,
      15340., 19932., 14226., 18106., 11752., 14856., 14124., 17884., 17339.,
      21895., 19506., 24954., 21777., 28085., 23165., 29617., 22057., 28397.,
      23445., 29929., 19818., 25298., 16599., 21235., 14140., 17836., 12364.,
      15996., 15843., 20367., 20002., 25514., 22057., 28397., 23445., 29929.,
      22849., 29221., 24237., 30753., 21466., 27010., 17023., 21627., 11612.,
      15180., 13612., 17372., 15979., 20599., 20498., 26074., 22849., 29221.,
      24237., 30753., 24153., 30557., 23397., 29817., 18570., 23922., 16071.,
      20515., 11132., 14572., 14600., 18088., 15842., 20042., 18572., 23548.,
      20998., 26558., 20862., 26454., 20118., 25614., 20750., 26278., 15100.,
      19628., 12122., 15842., 9640.,  12488., 12692., 15716., 14909., 18481.,
      15870., 20022., 16663., 21299., 17627., 22311., 16447., 21051., 16643.,
      21295., 14086., 17950., 10641., 13813., 8612.,  11060., 9936.,  12304.,
      11548., 14412., 13480., 16840., 12948., 16676., 13188., 16980., 13844.,
      17572., 13828., 17620., 12488., 15720., 10316., 12988., 6320.,  8304.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   292.,   564.,   532.,
      868.,   772.,   1172.,  1012.,  1476.,  1163.,  1559.,  1066.,  1362.,
      689.,   853.,   142.,   358.,   684.,   1180.,  1690.,  2530.,  3224.,
      4472.,  4216.,  5592.,  5208.,  6712.,  6200.,  7832.,  5986.,  7306.,
      4924.,  5868.,  2950.,  3454.,  1307.,  1895.,  3742.,  5014.,  7209.,
      9005.,  11484., 13900., 12524., 14876., 13052., 15340., 15308., 17788.,
      13509., 15513., 10422., 11854., 5951.,  6715.,  4055.,  4723.,  9398.,
      10830., 13885., 15921., 19340., 22076., 18332., 21004., 16812., 19420.,
      19068., 21868., 16569., 18813., 12622., 14214., 7131.,  7975.,  4755.,
      5503.,  10958., 12550., 14417., 16693., 19004., 22060., 15756., 18492.,
      11484., 13900., 12524., 14876., 9837.,  11553., 7782.,  9022.,  4535.,
      5203.,  3215.,  3787.,  7526.,  8766.,  13029., 15033., 19820., 22684.,
      19836., 22636., 19340., 22076., 18332., 21004., 12897., 14853., 9982.,
      11382., 5715.,  6463.,  3915.,  4567.,  9086.,  10486., 15609., 17853.,
      23580., 26764., 21548., 24668., 19004., 22060., 15756., 18492., 9109.,
      11049., 6870.,  8174.,  3119.,  3691.,  2358.,  2798.,  5564.,  6508.,
      9682.,  11194., 14776., 16920., 16792., 19064., 18808., 21208., 18584.,
      20856., 14874., 16610., 9868.,  11004., 3502.,  3974.,  2781.,  3089.,
      6162.,  6810.,  10175., 11195., 14852., 16276., 16116., 17604., 17380.,
      18932., 14356., 15716., 10451., 11455., 5722.,  6338.,  137.,   333.,
      149.,   361.,   706.,   1162.,  1703.,  2435.,  3172.,  4212.,  4948.,
      6052.,  6724.,  7892.,  8500.,  9732.,  7355.,  8327.,  5578.,  6258.,
      3137.,  3493.,  2926.,  3270.,  6508.,  7260.,  10810., 12034., 15896.,
      17656., 17912., 19800., 19928., 21944., 21944., 24088., 18178., 19882.,
      13308., 14508., 7270.,  7902.,  5835.,  6487.,  12926., 14326., 15033.,
      17021., 18076., 20748., 13484., 16092., 8380.,  10924., 11148., 13884.,
      10581., 12777., 8598.,  10158., 5103.,  5931.,  3335.,  4067.,  8086.,
      9646.,  14157., 16385., 21324., 24316., 22876., 25804., 23916., 26780.,
      26684., 29740., 22473., 24909., 16686., 18406., 9227.,  10135., 6979.,
      7791.,  15534., 17254., 23521., 25989., 32764., 36076., 25932., 28924.,
      18076., 20748., 13484., 16092., 6141.,  8049.,  5446.,  6814.,  3431.,
      4163.,  2239.,  2875.,  5702.,  7070.,  10485., 12681., 16684., 19804.,
      19260., 22316., 21324., 24316., 22876., 25804., 18033., 20181., 13534.,
      15062., 7555.,  8367.,  5883.,  6599.,  13150., 14678., 21897., 24333.,
      32220., 35660., 32748., 36124., 32764., 36076., 25932., 28924., 16933.,
      19065., 10166., 11598., 1759.,  2395.,  598.,   910.,   1788.,  2476.,
      3634.,  4762.,  6200.,  7832.,  7192.,  8952.,  8184.,  10072., 8984.,
      10744., 7802.,  9154.,  5580.,  6460.,  2254.,  2598.,  1453.,  1697.,
      3378.,  3898.,  5807.,  6635.,  8772.,  9940.,  9524.,  10756., 10276.,
      11572., 8788.,  9892.,  6595.,  7407.,  3706.,  4194.,  89.,    221.,
      101.,   249.,   482.,   810.,   1175.,  1715.,  2212.,  2996.,  3476.,
      4324.,  4740.,  5652.,  6004.,  6980.,  5291.,  6071.,  4074.,  4626.,
      2321.,  2613.,  2126.,  2598.,  5164.,  6172.,  9178.,  10786., 14232.,
      16504., 17272., 19672., 20312., 22840., 23352., 26008., 19618., 21706.,
      14524., 15980., 8006.,  8766.,  6779.,  7495.,  14942., 16470., 20297.,
      22477., 26716., 29644., 24684., 27548., 22140., 24940., 25420., 28412.,
      21477., 23865., 15990., 17678., 8863.,  9755.,  7223.,  8019.,  15990.,
      17678., 20061., 22481., 25356., 28604., 21276., 24460., 16684., 19804.,
      19964., 23276., 17625., 20253., 13582., 15430., 7739.,  8711.,  5619.,
      6495.,  12942., 14790., 21873., 24533., 32188., 35756., 29964., 33212.,
      26716., 29644., 24684., 27548., 16269., 18369., 12326., 13822., 6935.,
      7731.,  5871.,  6571.,  13094., 14590., 21765., 24153., 31980., 35356.,
      28924., 32236., 25356., 28604., 21276., 24460., 12417., 14757., 9918.,
      11574., 5811.,  6687.,  4267.,  5047.,  10046., 11702., 17433., 20061.,
      26524., 30220., 29612., 33244., 32188., 35756., 29964., 33212., 22197.,
      24521., 14486., 16046., 5007.,  5707.,  4150.,  4590.,  9148.,  10092.,
      15058., 16570., 21944., 24088., 23960., 26232., 25976., 28376., 21656.,
      23928., 16154., 17890., 9356.,  10492., 1198.,  1670.,  125.,   305.,
      594.,   986.,   1439.,  2075.,  2692.,  3604.,  2932.,  3908.,  3172.,
      4212.,  3220.,  4068.,  2739.,  3359.,  1690.,  2050.,  41.,    109.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  2104.,  4216.,  3640.,
      5752.,  4152.,  6264.,  3640.,  5752.,  1834.,  3418.,  2492.,  3804.,
      1966.,  2750.,  300.,   972.,   1368.,  2712.,  3012.,  5540.,  5744.,
      9968.,  5744.,  9968.,  7792.,  12016., 7792.,  12016., 5284.,  8580.,
      3544.,  5912.,  3084.,  4524.,  490.,   1562.,  2420.,  4820.,  5534.,
      9518.,  9896.,  16232., 9384.,  15720., 9896.,  16232., 11432., 17768.,
      9326.,  14462., 6548.,  10228., 3354.,  5322.,  570.,   1770.,  2836.,
      5492.,  6542.,  10910., 11432., 17768., 9896.,  16232., 9384.,  15720.,
      9896.,  16232., 11102., 16622., 7988.,  11924., 4202.,  6298.,  330.,
      1146.,  1908.,  4308.,  5182.,  9422.,  9896.,  16232., 11432., 17768.,
      9896.,  16232., 9384.,  15720., 9486.,  14878., 9428.,  13620., 5050.,
      7274.,  410.,   1354.,  2004.,  4148.,  4846.,  8958.,  9384.,  15720.,
      9896.,  16232., 11432., 17768., 9896.,  16232., 8894.,  14158., 7476.,
      11412., 5898.,  8250.,  490.,   1562.,  2420.,  4820.,  5534.,  9518.,
      9896.,  16232., 9384.,  15720., 9896.,  16232., 11432., 17768., 9326.,
      14462., 6548.,  10228., 3354.,  5322.,  460.,   1388.,  2200.,  4056.,
      4708.,  7492.,  7792.,  12016., 5744.,  9968.,  5744.,  9968.,  7792.,
      12016., 7492.,  11044., 4056.,  6424.,  1388.,  2572.,  190.,   590.,
      1052.,  2108.,  2522.,  3978.,  4152.,  6264.,  3640.,  5752.,  2104.,
      4216.,  3640.,  5752.,  4042.,  5882.,  3004.,  4316.,  270.,   798.,
      30.,    174.,   220.,   764.,   826.,   2026.,  2104.,  4216.,  3640.,
      5752.,  4152.,  6264.,  3640.,  5752.,  1834.,  3418.,  2492.,  3804.,
      1966.,  2750.,  300.,   972.,   1368.,  2712.,  3012.,  5540.,  5744.,
      9968.,  5744.,  9968.,  7792.,  12016., 7792.,  12016., 5284.,  8580.,
      3544.,  5912.,  3084.,  4524.,  490.,   1562.,  2420.,  4820.,  5534.,
      9518.,  9896.,  16232., 9384.,  15720., 9896.,  16232., 11432., 17768.,
      9326.,  14462., 6548.,  10228., 3354.,  5322.,  570.,   1770.,  2836.,
      5492.,  6542.,  10910., 11432., 17768., 9896.,  16232., 9384.,  15720.,
      9896.,  16232., 11102., 16622., 7988.,  11924., 4202.,  6298.,  330.,
      1146.,  1908.,  4308.,  5182.,  9422.,  9896.,  16232., 11432., 17768.,
      9896.,  16232., 9384.,  15720., 9486.,  14878., 9428.,  13620., 5050.,
      7274.,  410.,   1354.,  2004.,  4148.,  4846.,  8958.,  9384.,  15720.,
      9896.,  16232., 11432., 17768., 9896.,  16232., 8894.,  14158., 7476.,
      11412., 5898.,  8250.,  490.,   1562.,  2420.,  4820.,  5534.,  9518.,
      9896.,  16232., 9384.,  15720., 9896.,  16232., 11432., 17768., 9326.,
      14462., 6548.,  10228., 3354.,  5322.,  460.,   1388.,  2200.,  4056.,
      4708.,  7492.,  7792.,  12016., 5744.,  9968.,  5744.,  9968.,  7792.,
      12016., 7492.,  11044., 4056.,  6424.,  1388.,  2572.,  190.,   590.,
      1052.,  2108.,  2522.,  3978.,  4152.,  6264.,  3640.,  5752.,  2104.,
      4216.,  3640.,  5752.,  4042.,  5882.,  3004.,  4316.,  270.,   798.,
      30.,    174.,   220.,   764.,   826.,   2026.,  2104.,  4216.,  3640.,
      5752.,  4152.,  6264.,  3640.,  5752.,  1834.,  3418.,  2492.,  3804.,
      1966.,  2750.,  300.,   972.,   1368.,  2712.,  3012.,  5540.,  5744.,
      9968.,  5744.,  9968.,  7792.,  12016., 7792.,  12016., 5284.,  8580.,
      3544.,  5912.,  3084.,  4524.,  490.,   1562.,  2420.,  4820.,  5534.,
      9518.,  9896.,  16232., 9384.,  15720., 9896.,  16232., 11432., 17768.,
      9326.,  14462., 6548.,  10228., 3354.,  5322.,  570.,   1770.,  2836.,
      5492.,  6542.,  10910., 11432., 17768., 9896.,  16232., 9384.,  15720.,
      9896.,  16232., 11102., 16622., 7988.,  11924., 4202.,  6298.,  330.,
      1146.,  1908.,  4308.,  5182.,  9422.,  9896.,  16232., 11432., 17768.,
      9896.,  16232., 9384.,  15720., 9486.,  14878., 9428.,  13620., 5050.,
      7274.,  410.,   1354.,  2004.,  4148.,  4846.,  8958.,  9384.,  15720.,
      9896.,  16232., 11432., 17768., 9896.,  16232., 8894.,  14158., 7476.,
      11412., 5898.,  8250.,  490.,   1562.,  2420.,  4820.,  5534.,  9518.,
      9896.,  16232., 9384.,  15720., 9896.,  16232., 11432., 17768., 9326.,
      14462., 6548.,  10228., 3354.,  5322.,  460.,   1388.,  2200.,  4056.,
      4708.,  7492.,  7792.,  12016., 5744.,  9968.,  5744.,  9968.,  7792.,
      12016., 7492.,  11044., 4056.,  6424.,  1388.,  2572.,  190.,   590.,
      1052.,  2108.,  2522.,  3978.,  4152.,  6264.,  3640.,  5752.,  2104.,
      4216.,  3640.,  5752.,  4042.,  5882.,  3004.,  4316.,  270.,   798.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11376., 12224., 13104., 14016., 14540., 15616., 16732., 17888., 18344.,
      19680., 21064., 22496., 19204., 20768., 22388., 24064., 17044., 18592.,
      20196., 21856., 18468., 20000., 21588., 23232., 21236., 22816., 24452.,
      26144., 20232., 21600., 23016., 24480., 17948., 19072., 20236., 21440.,
      15408., 16320., 17264., 18240., 15524., 16752., 18020., 19328., 20433.,
      21940., 23497., 25104., 26118., 27944., 29830., 31776., 31315., 33436.,
      35627., 37888., 30607., 32740., 34943., 37216., 29323., 31404., 33555.,
      35776., 30919., 33012., 35175., 37408., 25422., 27208., 29054., 30960.,
      18157., 19596., 21085., 22624., 12692., 13808., 14964., 16160., 19528.,
      20896., 22312., 23776., 25098., 26800., 28562., 30384., 31596., 33680.,
      35836., 38064., 35982., 38432., 40966., 43584., 36486., 38976., 41550.,
      44208., 34622., 37088., 39638., 42272., 33334., 35840., 38430., 41104.,
      30876., 33040., 35276., 37584., 26402., 28176., 30010., 31904., 21928.,
      23328., 24776., 26272., 22236., 24016., 25852., 27744., 28759., 30932.,
      33175., 35488., 36378., 39000., 41706., 44496., 44309., 47308., 50405.,
      53600., 45721., 48724., 51825., 55024., 42717., 45660., 48701., 51840.,
      41825., 44772., 47817., 50960., 36914., 39416., 42002., 44672., 31323.,
      33388., 35523., 37728., 23916., 25552., 27244., 28992., 32508., 34384.,
      36316., 38304., 37359., 39652., 42015., 44448., 43402., 46168., 49018.,
      51952., 49597., 52764., 56029., 59392., 49729., 52900., 56169., 59536.,
      47749., 50860., 54069., 57376., 45577., 48692., 51905., 55216., 35810.,
      38456., 41186., 44000., 27059., 29244., 31499., 33824., 23052., 24784.,
      26572., 28416., 28700., 30416., 32188., 34016., 31815., 33908., 36071.,
      38304., 35962., 38488., 41098., 43792., 44261., 47212., 50261., 53408.,
      47785., 50804., 53921., 57136., 47661., 50684., 53805., 57024., 49393.,
      52484., 55673., 58960., 43026., 45688., 48434., 51264., 35531., 37772.,
      40083., 42464., 31404., 33232., 35116., 37056., 23400., 24992., 26632.,
      28320., 28642., 30560., 32538., 34576., 34780., 37072., 39436., 41872.,
      38262., 40912., 43646., 46464., 37838., 40528., 43302., 46160., 40166.,
      42832., 45582., 48416., 42046., 44752., 47542., 50416., 34124., 36432.,
      38812., 41264., 27098., 29024., 31010., 33056., 22152., 23712., 25320.,
      26976., 24900., 26224., 27588., 28992., 27753., 29348., 30993., 32688.,
      31350., 33256., 35222., 37248., 33659., 35852., 38115., 40448., 34199.,
      36468., 38807., 41216., 35955., 38236., 40587., 43008., 37199., 39492.,
      41855., 44288., 31998., 33928., 35918., 37968., 25637., 27228., 28869.,
      30560., 20084., 21360., 22676., 24032., 14256., 15296., 16368., 17472.,
      17788., 19040., 20332., 21664., 21896., 23392., 24936., 26528., 26068.,
      27776., 29540., 31360., 28260., 30016., 31828., 33696., 30196., 32000.,
      33860., 35776., 31876., 33728., 35636., 37600., 26920., 28512., 30152.,
      31840., 23116., 24480., 25884., 27328., 18032., 19136., 20272., 21440.,
      14064., 15040., 16048., 17088., 18092., 19328., 20604., 21920., 22888.,
      24416., 25992., 27616., 27172., 28960., 30804., 32704., 25524., 27296.,
      29124., 31008., 23300., 24992., 26740., 28544., 23956., 25632., 27364.,
      29152., 19528., 20960., 22440., 23968., 13692., 14848., 16044., 17280.,
      10032., 10944., 11888., 12864., 19076., 20336., 21636., 22976., 24313.,
      25860., 27457., 29104., 30358., 32232., 34166., 36160., 34155., 36332.,
      38579., 40896., 33959., 36148., 38407., 40736., 31395., 33532., 35739.,
      38016., 29407., 31556., 33775., 36064., 26782., 28616., 30510., 32464.,
      22357., 23836., 25365., 26944., 18164., 19312., 20500., 21728., 21000.,
      22560., 24168., 25824., 26714., 28592., 30530., 32528., 33292., 35536.,
      37852., 40240., 39998., 42592., 45270., 48032., 40182., 42752., 45406.,
      48144., 35950., 38432., 40998., 43648., 33830., 36288., 38830., 41456.,
      29372., 31440., 33580., 35792., 24562., 26256., 28010., 29824., 18280.,
      19616., 21000., 22432., 32508., 34384., 36316., 38304., 37359., 39652.,
      42015., 44448., 43402., 46168., 49018., 51952., 49597., 52764., 56029.,
      59392., 49729., 52900., 56169., 59536., 47749., 50860., 54069., 57376.,
      45577., 48692., 51905., 55216., 35810., 38456., 41186., 44000., 27059.,
      29244., 31499., 33824., 23052., 24784., 26572., 28416., 28700., 30416.,
      32188., 34016., 31815., 33908., 36071., 38304., 35962., 38488., 41098.,
      43792., 44261., 47212., 50261., 53408., 47785., 50804., 53921., 57136.,
      47661., 50684., 53805., 57024., 49393., 52484., 55673., 58960., 43026.,
      45688., 48434., 51264., 35531., 37772., 40083., 42464., 31404., 33232.,
      35116., 37056., 24636., 26448., 28316., 30240., 30687., 32900., 35183.,
      37536., 37866., 40536., 43290., 46128., 42573., 45628., 48781., 52032.,
      42193., 45252., 48409., 51664., 44309., 47308., 50405., 53600., 45721.,
      48724., 51825., 55024., 37058., 39608., 42242., 44960., 28963., 31068.,
      33243., 35488., 22604., 24272., 25996., 27776., 31400., 33056., 34760.,
      36512., 36658., 38688., 40778., 42928., 43004., 45456., 47980., 50576.,
      46566., 49360., 52238., 55200., 46142., 48976., 51894., 54896., 46678.,
      49488., 52382., 55360., 46446., 49232., 52102., 55056., 39020., 41360.,
      43772., 46256., 29994., 31904., 33874., 35904., 21320., 22816., 24360.,
      25952., 20516., 21872., 23268., 24704., 24913., 26548., 28233., 29968.,
      30086., 32040., 34054., 36128., 31891., 34076., 36331., 38656., 30831.,
      33028., 35295., 37632., 33355., 35564., 37843., 40192., 35367., 37588.,
      39879., 42240., 29518., 31368., 33278., 35248., 24269., 25772., 27325.,
      28928., 18260., 19440., 20660., 21920., 18992., 20160., 21360., 22592.,
      23772., 25184., 26636., 28128., 29256., 30944., 32680., 34464., 31028.,
      32896., 34820., 36800., 29828., 31680., 33588., 35552., 28116., 29952.,
      31844., 33792., 25892., 27712., 29588., 31520., 23016., 24544., 26120.,
      27744., 18860., 20128., 21436., 22784., 13296., 14272., 15280., 16320.,
      8816.,  9664.,  10544., 11456., 13132., 14208., 15324., 16480., 18088.,
      19424., 20808., 22240., 23748., 25376., 27060., 28800., 26004., 27680.,
      29412., 31200., 26148., 27808., 29524., 31296., 27124., 28832., 30596.,
      32416., 24456., 25952., 27496., 29088., 20508., 21760., 23052., 24384.,
      17328., 18368., 19440., 20544., 17508., 18800., 20132., 21504., 21729.,
      23252., 24825., 26448., 26534., 28328., 30182., 32096., 32003., 34108.,
      36283., 38528., 32575., 34692., 36879., 39136., 28987., 31052., 33187.,
      35392., 27767., 29844., 31991., 34208., 24686., 26440., 28254., 30128.,
      21629., 23084., 24589., 26144., 17492., 18672., 19892., 21152., 23752.,
      25248., 26792., 28384., 25514., 27312., 29170., 31088., 28076., 30224.,
      32444., 34736., 35630., 38176., 40806., 43520., 37414., 40000., 42670.,
      45424., 37342., 39904., 42550., 45280., 37334., 39936., 42622., 45392.,
      30684., 32912., 35212., 37584., 25538., 27408., 29338., 31328., 21544.,
      23072., 24648., 26272., 28700., 30416., 32188., 34016., 31815., 33908.,
      36071., 38304., 35962., 38488., 41098., 43792., 44261., 47212., 50261.,
      53408., 47785., 50804., 53921., 57136., 47661., 50684., 53805., 57024.,
      49393., 52484., 55673., 58960., 43026., 45688., 48434., 51264., 35531.,
      37772., 40083., 42464., 31404., 33232., 35116., 37056., 24636., 26448.,
      28316., 30240., 30687., 32900., 35183., 37536., 37866., 40536., 43290.,
      46128., 42573., 45628., 48781., 52032., 42193., 45252., 48409., 51664.,
      44309., 47308., 50405., 53600., 45721., 48724., 51825., 55024., 37058.,
      39608., 42242., 44960., 28963., 31068., 33243., 35488., 22604., 24272.,
      25996., 27776., 31964., 33744., 35580., 37472., 37623., 39828., 42103.,
      44448., 44506., 47192., 49962., 52816., 48757., 51852., 55045., 58336.,
      48697., 51860., 55121., 58480., 49597., 52764., 56029., 59392., 49729.,
      52900., 56169., 59536., 42610., 45304., 48082., 50944., 33659., 35884.,
      38179., 40544., 24812., 26576., 28396., 30272., 23656., 25248., 26888.,
      28576., 29378., 31328., 33338., 35408., 36124., 38480., 40908., 43408.,
      39766., 42448., 45214., 48064., 39854., 42576., 45382., 48272., 43526.,
      46288., 49134., 52064., 46686., 49488., 52374., 55344., 40332., 42704.,
      45148., 47664., 34234., 36192., 38210., 40288., 27016., 28576., 30184.,
      31840., 22276., 23664., 25092., 26560., 27705., 29380., 31105., 32880.,
      33942., 35944., 38006., 40128., 36587., 38828., 41139., 43520., 36039.,
      38292., 40615., 43008., 34979., 37244., 39579., 41984., 33407., 35684.,
      38031., 40448., 27934., 29832., 31790., 33808., 20725., 22268., 23861.,
      25504., 15284., 16496., 17748., 19040., 18864., 19904., 20976., 22080.,
      23356., 24672., 26028., 27424., 28680., 30304., 31976., 33696., 30164.,
      32000., 33892., 35840., 30564., 32448., 34388., 36384., 30708., 32640.,
      34628., 36672., 30596., 32576., 34612., 36704., 29096., 30816., 32584.,
      34400., 26124., 27552., 29020., 30528., 21616., 22720., 23856., 25024.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   116.,   176.,   244.,   320.,   228.,   304.,
      388.,   480.,   340.,   432.,   532.,   640.,   452.,   560.,   676.,
      800.,   535.,   628.,   727.,   832.,   498.,   568.,   642.,   720.,
      325.,   364.,   405.,   448.,   46.,    96.,    150.,   208.,   284.,
      400.,   524.,   656.,   746.,   944.,   1154.,  1376.,  1464.,  1760.,
      2072.,  2400.,  1944.,  2272.,  2616.,  2976.,  2424.,  2784.,  3160.,
      3552.,  2904.,  3296.,  3704.,  4128.,  2834.,  3152.,  3482.,  3824.,
      2348.,  2576.,  2812.,  3056.,  1414.,  1536.,  1662.,  1792.,  583.,
      724.,   871.,   1024.,  1718.,  2024.,  2342.,  2672.,  3389.,  3820.,
      4269.,  4736.,  5452.,  6032.,  6636.,  7264.,  5980.,  6544.,  7132.,
      7744.,  6252.,  6800.,  7372.,  7968.,  7356.,  7952.,  8572.,  9216.,
      6513.,  6996.,  7497.,  8016.,  5038.,  5384.,  5742.,  6112.,  2883.,
      3068.,  3259.,  3456.,  1947.,  2108.,  2275.,  2448.,  4526.,  4872.,
      5230.,  5600.,  6697.,  7188.,  7697.,  8224.,  9340.,  10000., 10684.,
      11392., 8844.,  9488.,  10156., 10848., 8092.,  8720.,  9372.,  10048.,
      9196.,  9872.,  10572., 11296., 8013.,  8556.,  9117.,  9696.,  6118.,
      6504.,  6902.,  7312.,  3463.,  3668.,  3879.,  4096.,  2287.,  2468.,
      2655.,  2848.,  5286.,  5672.,  6070.,  6480.,  6933.,  7484.,  8053.,
      8640.,  9132.,  9872.,  10636., 11424., 7548.,  8208.,  8892.,  9600.,
      5452.,  6032.,  6636.,  7264.,  5980.,  6544.,  7132.,  7744.,  4713.,
      5124.,  5553.,  6000.,  3742.,  4040.,  4350.,  4672.,  2187.,  2348.,
      2515.,  2688.,  1539.,  1676.,  1819.,  1968.,  3614.,  3912.,  4222.,
      4544.,  6273.,  6756.,  7257.,  7776.,  9564.,  10256., 10972., 11712.,
      9580.,  10256., 10956., 11680., 9340.,  10000., 10684., 11392., 8844.,
      9488.,  10156., 10848., 6213.,  6684.,  7173.,  7680.,  4822.,  5160.,
      5510.,  5872.,  2767.,  2948.,  3135.,  3328.,  1879.,  2036.,  2199.,
      2368.,  4374.,  4712.,  5062.,  5424.,  7533.,  8076.,  8637.,  9216.,
      11404., 12176., 12972., 13792., 10396., 11152., 11932., 12736., 9132.,
      9872.,  10636., 11424., 7548.,  8208.,  8892.,  9600.,  4321.,  4788.,
      5273.,  5776.,  3278.,  3592.,  3918.,  4256.,  1491.,  1628.,  1771.,
      1920.,  1126.,  1232.,  1342.,  1456.,  2668.,  2896.,  3132.,  3376.,
      4658.,  5024.,  5402.,  5792.,  7128.,  7648.,  8184.,  8736.,  8120.,
      8672.,  9240.,  9824.,  9112.,  9696.,  10296., 10912., 9016.,  9568.,
      10136., 10720., 7226.,  7648.,  8082.,  8528.,  4796.,  5072.,  5356.,
      5648.,  1694.,  1808.,  1926.,  2048.,  1353.,  1428.,  1505.,  1584.,
      3002.,  3160.,  3322.,  3488.,  4963.,  5212.,  5467.,  5728.,  7252.,
      7600.,  7956.,  8320.,  7876.,  8240.,  8612.,  8992.,  8500.,  8880.,
      9268.,  9664.,  7012.,  7344.,  7684.,  8032.,  5103.,  5348.,  5599.,
      5856.,  2786.,  2936.,  3090.,  3248.,  45.,    92.,    141.,   192.,
      49.,    100.,   153.,   208.,   298.,   408.,   522.,   640.,   763.,
      940.,   1123.,  1312.,  1460.,  1712.,  1972.,  2240.,  2340.,  2608.,
      2884.,  3168.,  3220.,  3504.,  3796.,  4096.,  4100.,  4400.,  4708.,
      5024.,  3559.,  3796.,  4039.,  4288.,  2706.,  2872.,  3042.,  3216.,
      1525.,  1612.,  1701.,  1792.,  1422.,  1504.,  1590.,  1680.,  3164.,
      3344.,  3532.,  3728.,  5258.,  5552.,  5858.,  6176.,  7736.,  8160.,
      8600.,  9056.,  8728.,  9184.,  9656.,  10144., 9720.,  10208., 10712.,
      11232., 10712., 11232., 11768., 12320., 8882.,  9296.,  9722.,  10160.,
      6508.,  6800.,  7100.,  7408.,  3558.,  3712.,  3870.,  4032.,  2839.,
      2996.,  3159.,  3328.,  6294.,  6632.,  6982.,  7344.,  7277.,  7756.,
      8253.,  8768.,  8716.,  9360.,  10028., 10720., 6428.,  7056.,  7708.,
      8384.,  3884.,  4496.,  5132.,  5792.,  5244.,  5904.,  6588.,  7296.,
      5025.,  5556.,  6105.,  6672.,  4110.,  4488.,  4878.,  5280.,  2451.,
      2652.,  2859.,  3072.,  1579.,  1756.,  1939.,  2128.,  3854.,  4232.,
      4622.,  5024.,  6809.,  7348.,  7905.,  8480.,  10300., 11024., 11772.,
      12544., 11084., 11792., 12524., 13280., 11612., 12304., 13020., 13760.,
      12972., 13712., 14476., 15264., 10941., 11532., 12141., 12768., 8134.,
      8552.,  8982.,  9424.,  4503.,  4724.,  4951.,  5184.,  3391.,  3588.,
      3791.,  4000.,  7558.,  7976.,  8406.,  8848.,  11461., 12060., 12677.,
      13312., 15980., 16784., 17612., 18464., 12604., 13328., 14076., 14848.,
      8716.,  9360.,  10028., 10720., 6428.,  7056.,  7708.,  8384.,  2841.,
      3300.,  3777.,  4272.,  2558.,  2888.,  3230.,  3584.,  1627.,  1804.,
      1987.,  2176.,  1043.,  1196.,  1355.,  1520.,  2686.,  3016.,  3358.,
      3712.,  4977.,  5508.,  6057.,  6624.,  7964.,  8720.,  9500.,  10304.,
      9260.,  10000., 10764., 11552., 10300., 11024., 11772., 12544., 11084.,
      11792., 12524., 13280., 8757.,  9276.,  9813.,  10368., 6582.,  6952.,
      7334.,  7728.,  3679.,  3876.,  4079.,  4288.,  2855.,  3028.,  3207.,
      3392.,  6390.,  6760.,  7142.,  7536.,  10653., 11244., 11853., 12480.,
      15692., 16528., 17388., 18272., 15964., 16784., 17628., 18496., 15980.,
      16784., 17612., 18464., 12604., 13328., 14076., 14848., 8209.,  8724.,
      9257.,  9808.,  4910.,  5256.,  5614.,  5984.,  803.,   956.,   1115.,
      1280.,  262.,   336.,   414.,   496.,   812.,   976.,   1148.,  1328.,
      1682.,  1952.,  2234.,  2528.,  2904.,  3296.,  3704.,  4128.,  3384.,
      3808.,  4248.,  4704.,  3864.,  4320.,  4792.,  5280.,  4280.,  4704.,
      5144.,  5600.,  3738.,  4064.,  4402.,  4752.,  2684.,  2896.,  3116.,
      3344.,  1086.,  1168.,  1254.,  1344.,  697.,   756.,   817.,   880.,
      1626.,  1752.,  1882.,  2016.,  2803.,  3004.,  3211.,  3424.,  4244.,
      4528.,  4820.,  5120.,  4612.,  4912.,  5220.,  5536.,  4980.,  5296.,
      5620.,  5952.,  4260.,  4528.,  4804.,  5088.,  3199.,  3396.,  3599.,
      3808.,  1794.,  1912.,  2034.,  2160.,  29.,    60.,    93.,    128.,
      33.,    68.,    105.,   144.,   202.,   280.,   362.,   448.,   523.,
      652.,   787.,   928.,   1012.,  1200.,  1396.,  1600.,  1636.,  1840.,
      2052.,  2272.,  2260.,  2480.,  2708.,  2944.,  2884.,  3120.,  3364.,
      3616.,  2551.,  2740.,  2935.,  3136.,  1970.,  2104.,  2242.,  2384.,
      1125.,  1196.,  1269.,  1344.,  1006.,  1120.,  1238.,  1360.,  2460.,
      2704.,  2956.,  3216.,  4394.,  4784.,  5186.,  5600.,  6840.,  7392.,
      7960.,  8544.,  8344.,  8928.,  9528.,  10144., 9848.,  10464., 11096.,
      11744., 11352., 12000., 12664., 13344., 9554.,  10064., 10586., 11120.,
      7084.,  7440.,  7804.,  8176.,  3910.,  4096.,  4286.,  4480.,  3303.,
      3476.,  3655.,  3840.,  7286.,  7656.,  8038.,  8432.,  9885.,  10412.,
      10957., 11520., 13004., 13712., 14444., 15200., 11996., 12688., 13404.,
      14144., 10732., 11408., 12108., 12832., 12348., 13072., 13820., 14592.,
      10449., 11028., 11625., 12240., 7790.,  8200.,  8622.,  9056.,  4323.,
      4540.,  4763.,  4992.,  3515.,  3708.,  3907.,  4112.,  7790.,  8200.,
      8622.,  9056.,  9737.,  10324., 10929., 11552., 12284., 13072., 13884.,
      14720., 10252., 11024., 11820., 12640., 7964.,  8720.,  9500.,  10304.,
      9580.,  10384., 11212., 12064., 8493.,  9132.,  9789.,  10464., 6566.,
      7016.,  7478.,  7952.,  3751.,  3988.,  4231.,  4480.,  2703.,  2916.,
      3135.,  3360.,  6246.,  6696.,  7158.,  7632.,  10613., 11260., 11925.,
      12608., 15660., 16528., 17420., 18336., 14588., 15376., 16188., 17024.,
      13004., 13712., 14444., 15200., 11996., 12688., 13404., 14144., 7881.,
      8388.,  8913.,  9456.,  5982.,  6344.,  6718.,  7104.,  3371.,  3564.,
      3763.,  3968.,  2851.,  3020.,  3195.,  3376.,  6366.,  6728.,  7102.,
      7488.,  10593., 11172., 11769., 12384., 15580., 16400., 17244., 18112.,
      14060., 14864., 15692., 16544., 12284., 13072., 13884., 14720., 10252.,
      11024., 11820., 12640., 5925.,  6492.,  7077.,  7680.,  4758.,  5160.,
      5574.,  6000.,  2799.,  3012.,  3231.,  3456.,  2039.,  2228.,  2423.,
      2624.,  4822.,  5224.,  5638.,  6064.,  8397.,  9036.,  9693.,  10368.,
      12812., 13712., 14636., 15584., 14364., 15248., 16156., 17088., 15660.,
      16528., 17420., 18336., 14588., 15376., 16188., 17024., 10817., 11380.,
      11961., 12560., 7054.,  7432.,  7822.,  8224.,  2419.,  2588.,  2763.,
      2944.,  2022.,  2128.,  2238.,  2352.,  4460.,  4688.,  4924.,  5168.,
      7346.,  7712.,  8090.,  8480.,  10712., 11232., 11768., 12320., 11704.,
      12256., 12824., 13408., 12696., 13280., 13880., 14496., 10552., 11104.,
      11672., 12256., 7866.,  8288.,  8722.,  9168.,  4540.,  4816.,  5100.,
      5392.,  542.,   656.,   774.,   896.,   41.,    84.,    129.,   176.,
      250.,   344.,   442.,   544.,   643.,   796.,   955.,   1120.,  1236.,
      1456.,  1684.,  1920.,  1348.,  1584.,  1828.,  2080.,  1460.,  1712.,
      1972.,  2240.,  1508.,  1712.,  1924.,  2144.,  1295.,  1444.,  1599.,
      1760.,  802.,   888.,   978.,   1072.,  13.,    28.,    45.,    64.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5840.,  7696.,  9808.,  12176., 6612.,  8868.,  11444., 14340., 8760.,
      11544., 14712., 18264., 10044., 13228., 16860., 20940., 10396., 13708.,
      17468., 21676., 9532.,  12716., 16348., 20428., 10908., 14220., 17980.,
      22188., 8760.,  11544., 14712., 18264., 7476.,  9860.,  12564., 15588.,
      5840.,  7696.,  9808.,  12176., 6660.,  8980.,  11620., 14580., 8717.,
      11457., 14597., 18137., 10662., 14014., 17846., 22158., 11407., 15307.,
      19767., 24787., 12471., 16595., 21279., 26523., 12735., 16699., 21223.,
      26307., 13191., 17251., 21871., 27051., 10582., 13998., 17894., 22270.,
      9141.,  12105., 15469., 19233., 7428.,  9748.,  12388., 15348., 9272.,
      12056., 15224., 18776., 9150.,  12534., 16398., 20742., 12068., 16180.,
      20868., 26132., 15530., 20242., 25626., 31682., 16314., 21218., 26794.,
      33042., 12714., 17426., 22810., 28866., 15034., 19938., 25514., 31762.,
      13348., 17460., 22148., 27412., 11982., 15558., 19614., 24150., 8248.,
      11032., 14200., 17752., 10092., 13340., 17036., 21180., 13095., 17027.,
      21519., 26571., 14834., 19642., 25122., 31274., 15405., 20897., 27173.,
      34233., 18693., 24473., 31037., 38385., 18525., 24081., 30421., 37545.,
      17621., 23337., 29837., 37121., 13890., 18634., 24050., 30138., 13087.,
      17179., 21831., 27043., 10860., 14108., 17804., 21948., 10092., 13340.,
      17036., 21180., 11351., 15347., 19903., 25019., 15698., 20634., 26242.,
      32522., 18525., 24081., 30421., 37545., 17621., 23337., 29837., 37121.,
      15405., 20897., 27173., 34233., 18693., 24473., 31037., 38385., 16290.,
      21162., 26706., 32922., 12879., 17035., 21751., 27027., 9836.,  13084.,
      16780., 20924., 10092., 13340., 17036., 21180., 13095., 17027., 21519.,
      26571., 14834., 19642., 25122., 31274., 15405., 20897., 27173., 34233.,
      18693., 24473., 31037., 38385., 18525., 24081., 30421., 37545., 17621.,
      23337., 29837., 37121., 13890., 18634., 24050., 30138., 13087., 17179.,
      21831., 27043., 10860., 14108., 17804., 21948., 8248.,  11032., 14200.,
      17752., 9710.,  13158., 17086., 21494., 14468., 18708., 23524., 28916.,
      15834., 20610., 26058., 32178., 14826., 19794., 25434., 31746., 13530.,
      18306., 23754., 29874., 17130., 22098., 27738., 34050., 13604., 17716.,
      22404., 27668., 10142., 13654., 17646., 22118., 8248.,  11032., 14200.,
      17752., 7684.,  10004., 12644., 15604., 8765.,  11569., 14773., 18377.,
      9990.,  13470., 17430., 21870., 12223., 16187., 20711., 25795., 14567.,
      18755., 23503., 28811., 13039., 17067., 21655., 26803., 11703., 15827.,
      20511., 25755., 10838., 14254., 18150., 22526., 9861.,  12761., 16061.,
      19761., 7428.,  9748.,  12388., 15348., 5840.,  7696.,  9808.,  12176.,
      6612.,  8868.,  11444., 14340., 8760.,  11544., 14712., 18264., 10044.,
      13228., 16860., 20940., 10396., 13708., 17468., 21676., 9532.,  12716.,
      16348., 20428., 10908., 14220., 17980., 22188., 8760.,  11544., 14712.,
      18264., 7476.,  9860.,  12564., 15588., 5840.,  7696.,  9808.,  12176.,
      5840.,  7696.,  9808.,  12176., 7124.,  9380.,  11956., 14852., 8760.,
      11544., 14712., 18264., 9532.,  12716., 16348., 20428., 10908., 14220.,
      17980., 22188., 10044., 13228., 16860., 20940., 10396., 13708., 17468.,
      21676., 8760.,  11544., 14712., 18264., 7988.,  10372., 13076., 16100.,
      5840.,  7696.,  9808.,  12176., 7684.,  10004., 12644., 15604., 8253.,
      11057., 14261., 17865., 9990.,  13470., 17430., 21870., 12735., 16699.,
      21223., 26307., 13191., 17251., 21871., 27051., 11407., 15307., 19767.,
      24787., 12471., 16595., 21279., 26523., 11446., 14990., 19014., 23518.,
      10213., 13241., 16669., 20497., 7428.,  9748.,  12388., 15348., 8248.,
      11032., 14200., 17752., 11454., 14838., 18702., 23046., 13604., 17716.,
      22404., 27668., 12714., 17426., 22810., 28866., 15034., 19938., 25514.,
      31762., 15530., 20242., 25626., 31682., 16314., 21218., 26794., 33042.,
      11812., 15924., 20612., 25876., 11214., 14790., 18846., 23382., 9272.,
      12056., 15224., 18776., 10092., 13340., 17036., 21180., 11351., 15347.,
      19903., 25019., 15698., 20634., 26242., 32522., 18525., 24081., 30421.,
      37545., 17621., 23337., 29837., 37121., 15405., 20897., 27173., 34233.,
      18693., 24473., 31037., 38385., 16290., 21162., 26706., 32922., 12879.,
      17035., 21751., 27027., 9836.,  13084., 16780., 20924., 10092., 13340.,
      17036., 21180., 13095., 17027., 21519., 26571., 14834., 19642., 25122.,
      31274., 15405., 20897., 27173., 34233., 18693., 24473., 31037., 38385.,
      18525., 24081., 30421., 37545., 17621., 23337., 29837., 37121., 13890.,
      18634., 24050., 30138., 13087., 17179., 21831., 27043., 10860., 14108.,
      17804., 21948., 10092., 13340., 17036., 21180., 11351., 15347., 19903.,
      25019., 15698., 20634., 26242., 32522., 18525., 24081., 30421., 37545.,
      17621., 23337., 29837., 37121., 15405., 20897., 27173., 34233., 18693.,
      24473., 31037., 38385., 16290., 21162., 26706., 32922., 12879., 17035.,
      21751., 27027., 9836.,  13084., 16780., 20924., 9272.,  12056., 15224.,
      18776., 11502., 14950., 18878., 23286., 12932., 17172., 21988., 27380.,
      13530., 18306., 23754., 29874., 17130., 22098., 27738., 34050., 15834.,
      20610., 26058., 32178., 14826., 19794., 25434., 31746., 12068., 16180.,
      20868., 26132., 11934., 15446., 19438., 23910., 9272.,  12056., 15224.,
      18776., 6660.,  8980.,  11620., 14580., 8813.,  11681., 14949., 18617.,
      12390., 15998., 20086., 24654., 13039., 17067., 21655., 26803., 11703.,
      15827., 20511., 25755., 12223., 16187., 20711., 25795., 14567., 18755.,
      23503., 28811., 11702., 15246., 19270., 23774., 8373.,  11337., 14701.,
      18465., 7428.,  9748.,  12388., 15348., 5840.,  7696.,  9808.,  12176.,
      7124.,  9380.,  11956., 14852., 8760.,  11544., 14712., 18264., 9532.,
      12716., 16348., 20428., 10908., 14220., 17980., 22188., 10044., 13228.,
      16860., 20940., 10396., 13708., 17468., 21676., 8760.,  11544., 14712.,
      18264., 7988.,  10372., 13076., 16100., 5840.,  7696.,  9808.,  12176.,
      5840.,  7696.,  9808.,  12176., 6612.,  8868.,  11444., 14340., 8760.,
      11544., 14712., 18264., 10044., 13228., 16860., 20940., 10396., 13708.,
      17468., 21676., 9532.,  12716., 16348., 20428., 10908., 14220., 17980.,
      22188., 8760.,  11544., 14712., 18264., 7476.,  9860.,  12564., 15588.,
      5840.,  7696.,  9808.,  12176., 6660.,  8980.,  11620., 14580., 8717.,
      11457., 14597., 18137., 10662., 14014., 17846., 22158., 11407., 15307.,
      19767., 24787., 12471., 16595., 21279., 26523., 12735., 16699., 21223.,
      26307., 13191., 17251., 21871., 27051., 10582., 13998., 17894., 22270.,
      9141.,  12105., 15469., 19233., 7428.,  9748.,  12388., 15348., 9272.,
      12056., 15224., 18776., 9150.,  12534., 16398., 20742., 12068., 16180.,
      20868., 26132., 15530., 20242., 25626., 31682., 16314., 21218., 26794.,
      33042., 12714., 17426., 22810., 28866., 15034., 19938., 25514., 31762.,
      13348., 17460., 22148., 27412., 11982., 15558., 19614., 24150., 8248.,
      11032., 14200., 17752., 10092., 13340., 17036., 21180., 13095., 17027.,
      21519., 26571., 14834., 19642., 25122., 31274., 15405., 20897., 27173.,
      34233., 18693., 24473., 31037., 38385., 18525., 24081., 30421., 37545.,
      17621., 23337., 29837., 37121., 13890., 18634., 24050., 30138., 13087.,
      17179., 21831., 27043., 10860., 14108., 17804., 21948., 10092., 13340.,
      17036., 21180., 11351., 15347., 19903., 25019., 15698., 20634., 26242.,
      32522., 18525., 24081., 30421., 37545., 17621., 23337., 29837., 37121.,
      15405., 20897., 27173., 34233., 18693., 24473., 31037., 38385., 16290.,
      21162., 26706., 32922., 12879., 17035., 21751., 27027., 9836.,  13084.,
      16780., 20924., 10092., 13340., 17036., 21180., 13095., 17027., 21519.,
      26571., 14834., 19642., 25122., 31274., 15405., 20897., 27173., 34233.,
      18693., 24473., 31037., 38385., 18525., 24081., 30421., 37545., 17621.,
      23337., 29837., 37121., 13890., 18634., 24050., 30138., 13087., 17179.,
      21831., 27043., 10860., 14108., 17804., 21948., 8248.,  11032., 14200.,
      17752., 9710.,  13158., 17086., 21494., 14468., 18708., 23524., 28916.,
      15834., 20610., 26058., 32178., 14826., 19794., 25434., 31746., 13530.,
      18306., 23754., 29874., 17130., 22098., 27738., 34050., 13604., 17716.,
      22404., 27668., 10142., 13654., 17646., 22118., 8248.,  11032., 14200.,
      17752., 7684.,  10004., 12644., 15604., 8765.,  11569., 14773., 18377.,
      9990.,  13470., 17430., 21870., 12223., 16187., 20711., 25795., 14567.,
      18755., 23503., 28811., 13039., 17067., 21655., 26803., 11703., 15827.,
      20511., 25755., 10838., 14254., 18150., 22526., 9861.,  12761., 16061.,
      19761., 7428.,  9748.,  12388., 15348., 5840.,  7696.,  9808.,  12176.,
      6612.,  8868.,  11444., 14340., 8760.,  11544., 14712., 18264., 10044.,
      13228., 16860., 20940., 10396., 13708., 17468., 21676., 9532.,  12716.,
      16348., 20428., 10908., 14220., 17980., 22188., 8760.,  11544., 14712.,
      18264., 7476.,  9860.,  12564., 15588., 5840.,  7696.,  9808.,  12176.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  820.,   1284.,  1812.,  2404.,  1684.,  2276.,
      2932.,  3652.,  2548.,  3268.,  4052.,  4900.,  3412.,  4260.,  5172.,
      6148.,  4103.,  4835.,  5615.,  6443.,  3850.,  4402.,  4986.,  5602.,
      2525.,  2833.,  3157.,  3497.,  274.,   666.,   1090.,  1546.,  1860.,
      2516.,  3236.,  4020.,  4182.,  5230.,  6374.,  7614.,  7496.,  9064.,
      10760., 12584., 8008.,  9576.,  11272., 13096., 11784., 13608., 15560.,
      17640., 15560., 17640., 19848., 22184., 15334., 17086., 18934., 20878.,
      12836., 14132., 15492., 16916., 7810.,  8522.,  9266.,  10042., 4007.,
      4611.,  5263.,  5963.,  6046.,  7190.,  8430.,  9766.,  9573.,  11193.,
      12957., 14865., 14140., 16428., 18908., 21580., 9180.,  11340., 13692.,
      16236., 10556., 12844., 15324., 17996., 15196., 17868., 20732., 23788.,
      16221., 18513., 20949., 23529., 14286., 16006., 17822., 19734., 9007.,
      9963.,  10967., 12019., 3615.,  4379.,  5191.,  6051.,  9998.,  11462.,
      13022., 14678., 14413., 16513., 18757., 21145., 20316., 22988., 25852.,
      28908., 14140., 16428., 18908., 21580., 9180.,  11340., 13692., 16236.,
      10556., 12844., 15324., 17996., 12165., 14169., 16317., 18609., 11198.,
      12726., 14350., 16070., 7271.,  8131.,  9039.,  9995.,  3031.,  3699.,
      4415.,  5179.,  8638.,  10166., 11790., 13510., 17013., 19337., 21805.,
      24417., 23420., 26476., 29724., 33164., 20316., 22988., 25852., 28908.,
      14140., 16428., 18908., 21580., 9180.,  11340., 13692., 16236., 8109.,
      9825.,  11685., 13689., 8110.,  9446.,  10878., 12406., 5535.,  6299.,
      7111.,  7971.,  2447.,  3019.,  3639.,  4307.,  7086.,  8422.,  9854.,
      11382., 14301., 16593., 19029., 21609., 24284., 27468., 30844., 34412.,
      23420., 26476., 29724., 33164., 20316., 22988., 25852., 28908., 14140.,
      16428., 18908., 21580., 7317.,  9001.,  10829., 12801., 5022.,  6166.,
      7406.,  8742.,  3799.,  4467.,  5183.,  5947.,  1863.,  2339.,  2863.,
      3435.,  5534.,  6678.,  7918.,  9254.,  11397., 13401., 15549., 17841.,
      19836., 22892., 26140., 29580., 24284., 27468., 30844., 34412., 23420.,
      26476., 29724., 33164., 20316., 22988., 25852., 28908., 12861., 14769.,
      16821., 19017., 5198.,  6406.,  7710.,  9110.,  2063.,  2635.,  3255.,
      3923.,  1250.,  1578.,  1938.,  2330.,  3748.,  4532.,  5380.,  6292.,
      7750.,  9118.,  10582., 12142., 13512., 15592., 17800., 20136., 17288.,
      19624., 22088., 24680., 20872., 23208., 25672., 28264., 19144., 21224.,
      23432., 25768., 14678., 16238., 17894., 19646., 7172.,  8084.,  9060.,
      10100., 658.,   1050.,  1474.,  1930.,  53.,    137.,   237.,   353.,
      410.,   642.,   906.,   1202.,  1199.,  1643.,  2135.,  2675.,  2548.,
      3268.,  4052.,  4900.,  3412.,  4260.,  5172.,  6148.,  4276.,  5252.,
      6292.,  7396.,  4948.,  5796.,  6708.,  7684.,  4567.,  5235.,  5951.,
      6715.,  2986.,  3410.,  3866.,  4354.,  77.,    193.,   325.,   473.,
      101.,   249.,   413.,   593.,   762.,   1122.,  1514.,  1938.,  2111.,
      2747.,  3431.,  4163.,  4276.,  5252.,  6292.,  7396.,  7188.,  8292.,
      9460.,  10692., 10100., 11332., 12628., 13988., 13012., 14372., 15796.,
      17284., 12071., 13187., 14351., 15563., 9674.,  10482., 11322., 12194.,
      5693.,  6129.,  6581.,  7049.,  3858.,  4250.,  4674.,  5130.,  4932.,
      5588.,  6308.,  7092.,  6742.,  7790.,  8934.,  10174., 9544.,  11112.,
      12808., 14632., 5960.,  7528.,  9224.,  11048., 9736.,  11560., 13512.,
      15592., 13512., 15592., 17800., 20136., 13798., 15550., 17398., 19342.,
      11812., 13108., 14468., 15892., 7298.,  8010.,  8754.,  9530.,  3591.,
      4323.,  5103.,  5931.,  9822.,  11222., 12718., 14310., 13957., 15961.,
      18109., 20401., 19644., 22444., 25436., 28620., 16732., 19404., 22268.,
      25324., 16060., 18860., 21852., 25036., 22748., 25932., 29308., 32876.,
      22653., 25329., 28149., 31113., 19086., 21062., 23134., 25302., 11663.,
      12747., 13879., 15059., 6783.,  7675.,  8615.,  9603.,  12750., 14470.,
      16286., 18198., 21357., 23841., 26469., 29241., 27868., 31052., 34428.,
      37996., 19644., 22444., 25436., 28620., 16732., 19404., 22268., 25324.,
      16060., 18860., 21852., 25036., 17061., 19449., 21981., 24657., 14974.,
      16758., 18638., 20614., 9415.,  10403., 11439., 12523., 5687.,  6483.,
      7327.,  8219.,  14462., 16246., 18126., 20102., 22421., 25129., 27981.,
      30977., 33020., 36588., 40348., 44300., 27868., 31052., 34428., 37996.,
      19644., 22444., 25436., 28620., 16732., 19404., 22268., 25324., 11469.,
      13569., 15813., 18201., 10862., 12454., 14142., 15926., 7167.,  8059.,
      8999.,  9987.,  4591.,  5291.,  6039.,  6835.,  11886., 13478., 15166.,
      16950., 22269., 24945., 27765., 30729., 31836., 35532., 39420., 43500.,
      33020., 36588., 40348., 44300., 27868., 31052., 34428., 37996., 19644.,
      22444., 25436., 28620., 13237., 15305., 17517., 19873., 6750.,  8150.,
      9646.,  11238., 4919.,  5715.,  6559.,  7451.,  3495.,  4099.,  4751.,
      5451.,  9310.,  10710., 12206., 13798., 17829., 20217., 22749., 25425.,
      29436., 33004., 36764., 40716., 31836., 35532., 39420., 43500., 33020.,
      36588., 40348., 44300., 27868., 31052., 34428., 37996., 17245., 19537.,
      21973., 24553., 9998.,  11462., 13022., 14678., 2671.,  3371.,  4119.,
      4915.,  1762.,  2090.,  2450.,  2842.,  4772.,  5556.,  6404.,  7316.,
      9286.,  10654., 12118., 13678., 15560., 17640., 19848., 22184., 19336.,
      21672., 24136., 26728., 18824., 21160., 23624., 26216., 17096., 19176.,
      21384., 23720., 12118., 13678., 15334., 17086., 4100.,  5012.,  5988.,
      7028.,  1170.,  1562.,  1986.,  2442.,  1173.,  1385.,  1613.,  1857.,
      3162.,  3650.,  4170.,  4722.,  6095.,  6923.,  7799.,  8723.,  10100.,
      11332., 12628., 13988., 13012., 14372., 15796., 17284., 15924., 17412.,
      18964., 20580., 14548., 15908., 17332., 18820., 11511., 12563., 13663.,
      14811., 6762.,  7442.,  8154.,  8898.,  173.,   417.,   677.,   953.,
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  820.,   1284.,  1812.,  2404.,  1684.,  2276.,
      2932.,  3652.,  2548.,  3268.,  4052.,  4900.,  3412.,  4260.,  5172.,
      6148.,  4103.,  4835.,  5615.,  6443.,  3850.,  4402.,  4986.,  5602.,
      2525.,  2833.,  3157.,  3497.,  274.,   666.,   1090.,  1546.,  1860.,
      2516.,  3236.,  4020.,  4182.,  5230.,  6374.,  7614.,  7496.,  9064.,
      10760., 12584., 8008.,  9576.,  11272., 13096., 11784., 13608., 15560.,
      17640., 15560., 17640., 19848., 22184., 15334., 17086., 18934., 20878.,
      12836., 14132., 15492., 16916., 7810.,  8522.,  9266.,  10042., 4007.,
      4611.,  5263.,  5963.,  6046.,  7190.,  8430.,  9766.,  9573.,  11193.,
      12957., 14865., 14140., 16428., 18908., 21580., 9180.,  11340., 13692.,
      16236., 10556., 12844., 15324., 17996., 15196., 17868., 20732., 23788.,
      16221., 18513., 20949., 23529., 14286., 16006., 17822., 19734., 9007.,
      9963.,  10967., 12019., 3615.,  4379.,  5191.,  6051.,  9998.,  11462.,
      13022., 14678., 14413., 16513., 18757., 21145., 20316., 22988., 25852.,
      28908., 14140., 16428., 18908., 21580., 9180.,  11340., 13692., 16236.,
      10556., 12844., 15324., 17996., 12165., 14169., 16317., 18609., 11198.,
      12726., 14350., 16070., 7271.,  8131.,  9039.,  9995.,  3031.,  3699.,
      4415.,  5179.,  8638.,  10166., 11790., 13510., 17013., 19337., 21805.,
      24417., 23420., 26476., 29724., 33164., 20316., 22988., 25852., 28908.,
      14140., 16428., 18908., 21580., 9180.,  11340., 13692., 16236., 8109.,
      9825.,  11685., 13689., 8110.,  9446.,  10878., 12406., 5535.,  6299.,
      7111.,  7971.,  2447.,  3019.,  3639.,  4307.,  7086.,  8422.,  9854.,
      11382., 14301., 16593., 19029., 21609., 24284., 27468., 30844., 34412.,
      23420., 26476., 29724., 33164., 20316., 22988., 25852., 28908., 14140.,
      16428., 18908., 21580., 7317.,  9001.,  10829., 12801., 5022.,  6166.,
      7406.,  8742.,  3799.,  4467.,  5183.,  5947.,  1863.,  2339.,  2863.,
      3435.,  5534.,  6678.,  7918.,  9254.,  11397., 13401., 15549., 17841.,
      19836., 22892., 26140., 29580., 24284., 27468., 30844., 34412., 23420.,
      26476., 29724., 33164., 20316., 22988., 25852., 28908., 12861., 14769.,
      16821., 19017., 5198.,  6406.,  7710.,  9110.,  2063.,  2635.,  3255.,
      3923.,  1250.,  1578.,  1938.,  2330.,  3748.,  4532.,  5380.,  6292.,
      7750.,  9118.,  10582., 12142., 13512., 15592., 17800., 20136., 17288.,
      19624., 22088., 24680., 20872., 23208., 25672., 28264., 19144., 21224.,
      23432., 25768., 14678., 16238., 17894., 19646., 7172.,  8084.,  9060.,
      10100., 658.,   1050.,  1474.,  1930.,  53.,    137.,   237.,   353.,
      410.,   642.,   906.,   1202.,  1199.,  1643.,  2135.,  2675.,  2548.,
      3268.,  4052.,  4900.,  3412.,  4260.,  5172.,  6148.,  4276.,  5252.,
      6292.,  7396.,  4948.,  5796.,  6708.,  7684.,  4567.,  5235.,  5951.,
      6715.,  2986.,  3410.,  3866.,  4354.,  77.,    193.,   325.,   473.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 750.,
      4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610.,
      29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380., 25380.,
      750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,  6264.,
      16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732.,
      35532., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532.,
      1080.,  6264.,  16056., 30456., 900.,   5220.,  13380., 25380., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 1050.,  6090.,
      15610., 29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854.,
      41454., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,
      6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732.,
      35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,
      7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610.,
      29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1470.,
      8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,  6090.,
      15610., 29610., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 900.,   5220.,  13380., 25380., 1080.,  6264.,  16056., 30456.,
      1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532., 1260.,
      7308.,  18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,
      16056., 30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150.,
      900.,   5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,
      6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 900.,   5220.,  13380., 25380., 750.,   4350.,  11150.,
      21150., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 720.,   4176.,  10704., 20304., 840.,
      4872.,  12488., 23688., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 750.,
      4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610.,
      29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380., 25380.,
      750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,  6264.,
      16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732.,
      35532., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532.,
      1080.,  6264.,  16056., 30456., 900.,   5220.,  13380., 25380., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 1050.,  6090.,
      15610., 29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854.,
      41454., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,
      6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732.,
      35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,
      7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610.,
      29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1470.,
      8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,  6090.,
      15610., 29610., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 900.,   5220.,  13380., 25380., 1080.,  6264.,  16056., 30456.,
      1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532., 1260.,
      7308.,  18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,
      16056., 30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150.,
      900.,   5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,
      6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 900.,   5220.,  13380., 25380., 750.,   4350.,  11150.,
      21150., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 720.,   4176.,  10704., 20304., 840.,
      4872.,  12488., 23688., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 750.,
      4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610.,
      29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380., 25380.,
      750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,  6264.,
      16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732.,
      35532., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532.,
      1080.,  6264.,  16056., 30456., 900.,   5220.,  13380., 25380., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 1050.,  6090.,
      15610., 29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854.,
      41454., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,
      6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732.,
      35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,
      7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610.,
      29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1470.,
      8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,  6090.,
      15610., 29610., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 900.,   5220.,  13380., 25380., 1080.,  6264.,  16056., 30456.,
      1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532., 1260.,
      7308.,  18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,
      16056., 30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150.,
      900.,   5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,
      6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 900.,   5220.,  13380., 25380., 750.,   4350.,  11150.,
      21150., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 720.,   4176.,  10704., 20304., 840.,
      4872.,  12488., 23688., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,
      2378.,  3706.,  5418.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,
      6520.,  9144.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,  6520.,
      9144.,  570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,  4572.,
      190.,   590.,   1118.,  1774.,  220.,   764.,   1564.,  2620.,  1784.,
      3384.,  5496.,  8120.,  2004.,  4148.,  7060.,  10740., 3568.,  6768.,
      10992., 16240., 3568.,  6768.,  10992., 16240., 3568.,  6768.,  10992.,
      16240., 3568.,  6768.,  10992., 16240., 3348.,  6004.,  9428.,  13620.,
      1784.,  3384.,  5496.,  8120.,  1564.,  2620.,  3932.,  5500.,  250.,
      938.,   2010.,  3466.,  2164.,  4564.,  7732.,  11668., 3438.,  6526.,
      10766., 16158., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512.,
      25384., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384.,
      3918.,  7774.,  12782., 18942., 3188.,  5588.,  8756.,  12692., 1754.,
      3210.,  5050.,  7274.,  410.,   1354.,  2682.,  4394.,  3188.,  5588.,
      8756.,  12692., 2574.,  5918.,  10414., 16062., 6376.,  11176., 17512.,
      25384., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384.,
      4328.,  9128.,  15464., 23336., 6126.,  10238., 15502., 21918., 2164.,
      4564.,  7732.,  11668., 2938.,  4650.,  6746.,  9226.,  250.,   938.,
      2010.,  3466.,  2164.,  4564.,  7732.,  11668., 3438.,  6526.,  10766.,
      16158., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384.,
      4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384., 3918.,
      7774.,  12782., 18942., 3188.,  5588.,  8756.,  12692., 1754.,  3210.,
      5050.,  7274.,  410.,   1354.,  2682.,  4394.,  3188.,  5588.,  8756.,
      12692., 2574.,  5918.,  10414., 16062., 6376.,  11176., 17512., 25384.,
      4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384., 4328.,
      9128.,  15464., 23336., 6126.,  10238., 15502., 21918., 2164.,  4564.,
      7732.,  11668., 2938.,  4650.,  6746.,  9226.,  250.,   938.,   2010.,
      3466.,  2164.,  4564.,  7732.,  11668., 3438.,  6526.,  10766., 16158.,
      4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384., 4328.,
      9128.,  15464., 23336., 6376.,  11176., 17512., 25384., 3918.,  7774.,
      12782., 18942., 3188.,  5588.,  8756.,  12692., 1754.,  3210.,  5050.,
      7274.,  220.,   764.,   1564.,  2620.,  1784.,  3384.,  5496.,  8120.,
      2004.,  4148.,  7060.,  10740., 3568.,  6768.,  10992., 16240., 3568.,
      6768.,  10992., 16240., 3568.,  6768.,  10992., 16240., 3568.,  6768.,
      10992., 16240., 3348.,  6004.,  9428.,  13620., 1784.,  3384.,  5496.,
      8120.,  1564.,  2620.,  3932.,  5500.,  30.,    174.,   446.,   846.,
      380.,   1180.,  2236.,  3548.,  1434.,  2378.,  3706.,  5418.,  760.,
      2360.,  4472.,  7096.,  2808.,  4408.,  6520.,  9144.,  760.,   2360.,
      4472.,  7096.,  2808.,  4408.,  6520.,  9144.,  570.,   1770.,  3354.,
      5322.,  1404.,  2204.,  3260.,  4572.,  190.,   590.,   1118.,  1774.,
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,
      2378.,  3706.,  5418.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,
      6520.,  9144.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,  6520.,
      9144.,  570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,  4572.,
      190.,   590.,   1118.,  1774.,  220.,   764.,   1564.,  2620.,  1784.,
      3384.,  5496.,  8120.,  2004.,  4148.,  7060.,  10740., 3568.,  6768.,
      10992., 16240., 3568.,  6768.,  10992., 16240., 3568.,  6768.,  10992.,
      16240., 3568.,  6768.,  10992., 16240., 3348.,  6004.,  9428.,  13620.,
      1784.,  3384.,  5496.,  8120.,  1564.,  2620.,  3932.,  5500.,  250.,
      938.,   2010.,  3466.,  2164.,  4564.,  7732.,  11668., 3438.,  6526.,
      10766., 16158., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512.,
      25384., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384.,
      3918.,  7774.,  12782., 18942., 3188.,  5588.,  8756.,  12692., 1754.,
      3210.,  5050.,  7274.,  410.,   1354.,  2682.,  4394.,  3188.,  5588.,
      8756.,  12692., 2574.,  5918.,  10414., 16062., 6376.,  11176., 17512.,
      25384., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384.,
      4328.,  9128.,  15464., 23336., 6126.,  10238., 15502., 21918., 2164.,
      4564.,  7732.,  11668., 2938.,  4650.,  6746.,  9226.,  250.,   938.,
      2010.,  3466.,  2164.,  4564.,  7732.,  11668., 3438.,  6526.,  10766.,
      16158., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384.,
      4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384., 3918.,
      7774.,  12782., 18942., 3188.,  5588.,  8756.,  12692., 1754.,  3210.,
      5050.,  7274.,  410.,   1354.,  2682.,  4394.,  3188.,  5588.,  8756.,
      12692., 2574.,  5918.,  10414., 16062., 6376.,  11176., 17512., 25384.,
      4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384., 4328.,
      9128.,  15464., 23336., 6126.,  10238., 15502., 21918., 2164.,  4564.,
      7732.,  11668., 2938.,  4650.,  6746.,  9226.,  250.,   938.,   2010.,
      3466.,  2164.,  4564.,  7732.,  11668., 3438.,  6526.,  10766., 16158.,
      4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384., 4328.,
      9128.,  15464., 23336., 6376.,  11176., 17512., 25384., 3918.,  7774.,
      12782., 18942., 3188.,  5588.,  8756.,  12692., 1754.,  3210.,  5050.,
      7274.,  220.,   764.,   1564.,  2620.,  1784.,  3384.,  5496.,  8120.,
      2004.,  4148.,  7060.,  10740., 3568.,  6768.,  10992., 16240., 3568.,
      6768.,  10992., 16240., 3568.,  6768.,  10992., 16240., 3568.,  6768.,
      10992., 16240., 3348.,  6004.,  9428.,  13620., 1784.,  3384.,  5496.,
      8120.,  1564.,  2620.,  3932.,  5500.,  30.,    174.,   446.,   846.,
      380.,   1180.,  2236.,  3548.,  1434.,  2378.,  3706.,  5418.,  760.,
      2360.,  4472.,  7096.,  2808.,  4408.,  6520.,  9144.,  760.,   2360.,
      4472.,  7096.,  2808.,  4408.,  6520.,  9144.,  570.,   1770.,  3354.,
      5322.,  1404.,  2204.,  3260.,  4572.,  190.,   590.,   1118.,  1774.,
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,
      2378.,  3706.,  5418.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,
      6520.,  9144.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,  6520.,
      9144.,  570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,  4572.,
      190.,   590.,   1118.,  1774.,  220.,   764.,   1564.,  2620.,  1784.,
      3384.,  5496.,  8120.,  2004.,  4148.,  7060.,  10740., 3568.,  6768.,
      10992., 16240., 3568.,  6768.,  10992., 16240., 3568.,  6768.,  10992.,
      16240., 3568.,  6768.,  10992., 16240., 3348.,  6004.,  9428.,  13620.,
      1784.,  3384.,  5496.,  8120.,  1564.,  2620.,  3932.,  5500.,  250.,
      938.,   2010.,  3466.,  2164.,  4564.,  7732.,  11668., 3438.,  6526.,
      10766., 16158., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512.,
      25384., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384.,
      3918.,  7774.,  12782., 18942., 3188.,  5588.,  8756.,  12692., 1754.,
      3210.,  5050.,  7274.,  410.,   1354.,  2682.,  4394.,  3188.,  5588.,
      8756.,  12692., 2574.,  5918.,  10414., 16062., 6376.,  11176., 17512.,
      25384., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384.,
      4328.,  9128.,  15464., 23336., 6126.,  10238., 15502., 21918., 2164.,
      4564.,  7732.,  11668., 2938.,  4650.,  6746.,  9226.,  250.,   938.,
      2010.,  3466.,  2164.,  4564.,  7732.,  11668., 3438.,  6526.,  10766.,
      16158., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384.,
      4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384., 3918.,
      7774.,  12782., 18942., 3188.,  5588.,  8756.,  12692., 1754.,  3210.,
      5050.,  7274.,  410.,   1354.,  2682.,  4394.,  3188.,  5588.,  8756.,
      12692., 2574.,  5918.,  10414., 16062., 6376.,  11176., 17512., 25384.,
      4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384., 4328.,
      9128.,  15464., 23336., 6126.,  10238., 15502., 21918., 2164.,  4564.,
      7732.,  11668., 2938.,  4650.,  6746.,  9226.,  250.,   938.,   2010.,
      3466.,  2164.,  4564.,  7732.,  11668., 3438.,  6526.,  10766., 16158.,
      4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384., 4328.,
      9128.,  15464., 23336., 6376.,  11176., 17512., 25384., 3918.,  7774.,
      12782., 18942., 3188.,  5588.,  8756.,  12692., 1754.,  3210.,  5050.,
      7274.,  220.,   764.,   1564.,  2620.,  1784.,  3384.,  5496.,  8120.,
      2004.,  4148.,  7060.,  10740., 3568.,  6768.,  10992., 16240., 3568.,
      6768.,  10992., 16240., 3568.,  6768.,  10992., 16240., 3568.,  6768.,
      10992., 16240., 3348.,  6004.,  9428.,  13620., 1784.,  3384.,  5496.,
      8120.,  1564.,  2620.,  3932.,  5500.,  30.,    174.,   446.,   846.,
      380.,   1180.,  2236.,  3548.,  1434.,  2378.,  3706.,  5418.,  760.,
      2360.,  4472.,  7096.,  2808.,  4408.,  6520.,  9144.,  760.,   2360.,
      4472.,  7096.,  2808.,  4408.,  6520.,  9144.,  570.,   1770.,  3354.,
      5322.,  1404.,  2204.,  3260.,  4572.,  190.,   590.,   1118.,  1774.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1876.,  2610.,  3458.,  4424.,  4830.,  4550.,  4140.,  3596.,  3840.,
      5225.,  6790.,  8540.,  9170.,  8485.,  7600.,  6510.,  6850.,  9185.,
      11781., 14644., 15547., 14211., 12590., 10678., 11130., 14770., 18767.,
      23128., 24353., 22064., 19390., 16324., 16394., 21490., 26999., 32928.,
      34153., 30632., 26670., 22260., 21018., 27250., 33887., 40936., 42161.,
      37472., 32350., 26788., 23850., 30770., 38087., 45808., 47033., 41624.,
      35790., 29524., 24710., 31775., 39207., 47012., 48209., 42525., 36450.,
      29978., 23180., 29755., 36652., 43876., 44996., 39619., 33900., 27834.,
      19036., 24430., 30086., 36008., 37002., 32570., 27860., 22868., 5204.,
      6930.,  8834.,  10920., 11326., 10310., 9100.,  7692.,  9120.,  12025.,
      15190., 18620., 19250., 17365., 15200., 12750., 14530., 19025., 23877.,
      29092., 29995., 26883., 23390., 19510., 21018., 27250., 33887., 40936.,
      42161., 37472., 32350., 26788., 23850., 30770., 38087., 45808., 47033.,
      41624., 35790., 29524., 24890., 32050., 39599., 47544., 48769., 43088.,
      36990., 30468., 24138., 31090., 38423., 46144., 47369., 41864., 35950.,
      29620., 21254., 27375., 33831., 40628., 41825., 36957., 31730., 26138.,
      15532., 20075., 24892., 29988., 31108., 27571., 23740., 19610., 6748.,
      8910.,  11270., 13832., 14826., 13370., 11700., 9812.,  8532.,  11250.,
      14210., 17416., 17822., 16070., 14060., 11788., 13760., 17865., 22246.,
      26908., 27538., 24517., 21200., 17582., 19138., 24705., 30597., 36820.,
      37723., 33411., 28750., 23734., 24890., 32050., 39599., 47544., 48769.,
      43088., 36990., 30468., 24138., 31090., 38423., 46144., 47369., 41864.,
      35950., 29620., 21594., 27890., 34559., 41608., 42833., 37952., 32670.,
      26980., 17258., 22450., 28007., 33936., 35161., 31352., 27150., 22548.,
      10630., 14015., 17703., 21700., 22897., 20637., 18050., 15130., 13900.,
      18075., 22540., 27300., 28420., 25315., 21900., 18170., 15452., 19950.,
      24710., 29736., 30730., 27194., 23380., 19284.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    7.,    10.,   13.,   16.,   19.,   14.,   11.,   35.,
      45.,   55.,   65.,   75.,   85.,   56.,   44.,   121.,  142.,  163.,
      184.,  205.,  226.,  140.,  114.,  290.,  326.,  362.,  398.,  434.,
      470.,  280.,  226.,  542.,  578.,  614.,  650.,  686.,  722.,  420.,
      338.,  794.,  830.,  866.,  902.,  938.,  974.,  560.,  450.,  1046.,
      1082., 1118., 1154., 1190., 1226., 700.,  512.,  1147., 1180., 1213.,
      1246., 1279., 1312., 728.,  467.,  1025., 1051., 1077., 1103., 1129.,
      1155., 630.,  301.,  652.,  667.,  682.,  697.,  712.,  727.,  392.,
      9.,    28.,   47.,   66.,   85.,   104.,  123.,  70.,   83.,   195.,
      237.,  279.,  321.,  363.,  405.,  224.,  236.,  529.,  598.,  667.,
      736.,  805.,  874.,  476.,  482.,  1058., 1158., 1258., 1358., 1458.,
      1558., 840.,  818.,  1758., 1858., 1958., 2058., 2158., 2258., 1204.,
      1154., 2458., 2558., 2658., 2758., 2858., 2958., 1568., 1490., 3158.,
      3258., 3358., 3458., 3558., 3658., 1932., 1376., 2899., 2980., 3061.,
      3142., 3223., 3304., 1736., 1099., 2305., 2363., 2421., 2479., 2537.,
      2595., 1358., 645.,  1348., 1379., 1410., 1441., 1472., 1503., 784.,
      17.,   52.,   87.,   122.,  157.,  192.,  227.,  126.,  155.,  355.,
      429.,  503.,  577.,  651.,  725.,  392.,  428.,  937.,  1054., 1171.,
      1288., 1405., 1522., 812.,  850.,  1826., 1990., 2154., 2318., 2482.,
      2646., 1400., 1410., 2974., 3138., 3302., 3466., 3630., 3794., 1988.,
      1970., 4122., 4286., 4450., 4614., 4778., 4942., 2576., 2530., 5270.,
      5434., 5598., 5762., 5926., 6090., 3164., 2240., 4651., 4780., 4909.,
      5038., 5167., 5296., 2744., 1731., 3585., 3675., 3765., 3855., 3945.,
      4035., 2086., 989.,  2044., 2091., 2138., 2185., 2232., 2279., 1176.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4736.,  6256.,  8160.,  10480., 12136., 10768., 8760.,  8224.,  7260.,
      10137., 13410., 17119., 19273., 17638., 15191., 13012., 9712.,  11956.,
      14728., 18076., 20608., 18144., 14704., 12384., 9788.,  13857., 18578.,
      23911., 27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783.,
      28957., 25694., 21235., 17668., 9788.,  13857., 18578., 23911., 27085.,
      25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957., 25694.,
      21235., 17668., 9664.,  13632., 18208., 23344., 26308., 24280., 21196.,
      18128., 12364., 15261., 18666., 21499., 23861., 20430., 16075., 12900.,
      5856.,  8424.,  11408., 14744., 16752., 15840., 14256., 11968., 4736.,
      6256.,  8160.,  10480., 12136., 10768., 8760.,  8224.,  7260.,  10137.,
      13410., 17119., 19273., 17638., 15191., 13012., 9712.,  11956., 14728.,
      18076., 20608., 18144., 14704., 12384., 9788.,  13857., 18578., 23911.,
      27085., 25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957.,
      25694., 21235., 17668., 9788.,  13857., 18578., 23911., 27085., 25214.,
      22211., 19140., 13692., 17361., 21746., 25783., 28957., 25694., 21235.,
      17668., 9664.,  13632., 18208., 23344., 26308., 24280., 21196., 18128.,
      12364., 15261., 18666., 21499., 23861., 20430., 16075., 12900., 5856.,
      8424.,  11408., 14744., 16752., 15840., 14256., 11968., 4736.,  6256.,
      8160.,  10480., 12136., 10768., 8760.,  8224.,  7260.,  10137., 13410.,
      17119., 19273., 17638., 15191., 13012., 9712.,  11956., 14728., 18076.,
      20608., 18144., 14704., 12384., 9788.,  13857., 18578., 23911., 27085.,
      25214., 22211., 19140., 13692., 17361., 21746., 25783., 28957., 25694.,
      21235., 17668., 9788.,  13857., 18578., 23911., 27085., 25214., 22211.,
      19140., 13692., 17361., 21746., 25783., 28957., 25694., 21235., 17668.,
      9664.,  13632., 18208., 23344., 26308., 24280., 21196., 18128., 12364.,
      15261., 18666., 21499., 23861., 20430., 16075., 12900., 5856.,  8424.,
      11408., 14744., 16752., 15840., 14256., 11968.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    42.,    62.,    82.,    102.,   122.,   95.,    64.,
      224.,   296.,   368.,   440.,   512.,   584.,   396.,   289.,   830.,
      986.,   1142.,  1298.,  1454.,  1610.,  1015.,  792.,   2064.,  2336.,
      2608.,  2880.,  3152.,  3424.,  2064.,  1632.,  3968.,  4240.,  4512.,
      4784.,  5056.,  5328.,  3128.,  2472.,  5872.,  6144.,  6416.,  6688.,
      6960.,  7232.,  4192.,  3312.,  7776.,  8048.,  8320.,  8592.,  8864.,
      9136.,  5256.,  3853.,  8678.,  8930.,  9182.,  9434.,  9686.,  9938.,
      5539.,  3556.,  7832.,  8032.,  8232.,  8432.,  8632.,  8832.,  4832.,
      2309.,  5014.,  5130.,  5246.,  5362.,  5478.,  5594.,  3023.,  53.,
      182.,   330.,   478.,   626.,   774.,   922.,   527.,   608.,   1440.,
      1768.,  2096.,  2424.,  2752.,  3080.,  1708.,  1777.,  3998.,  4538.,
      5078.,  5618.,  6158.,  6698.,  3655.,  3672.,  8080.,  8864.,  9648.,
      10432., 11216., 12000., 6480.,  6304.,  13568., 14352., 15136., 15920.,
      16704., 17488., 9336.,  8936.,  19056., 19840., 20624., 21408., 22192.,
      22976., 12192., 11568., 24544., 25328., 26112., 26896., 27680., 28464.,
      15048., 10717., 22598., 23234., 23870., 24506., 25142., 25778., 13555.,
      8580.,  18008., 18464., 18920., 19376., 19832., 20288., 10624., 5045.,
      10550., 10794., 11038., 11282., 11526., 11770., 6143.,  101.,   342.,
      618.,   894.,   1170.,  1446.,  1722.,  959.,   1152.,  2656.,  3240.,
      3824.,  4408.,  4992.,  5576.,  3020.,  3265.,  7166.,  8090.,  9014.,
      9938.,  10862., 11786., 6295.,  6552.,  14096., 15392., 16688., 17984.,
      19280., 20576., 10896., 10976., 23168., 24464., 25760., 27056., 28352.,
      29648., 15544., 15400., 32240., 33536., 34832., 36128., 37424., 38720.,
      20192., 19824., 41312., 42608., 43904., 45200., 46496., 47792., 24840.,
      17581., 36518., 37538., 38558., 39578., 40598., 41618., 21571., 13604.,
      28184., 28896., 29608., 30320., 31032., 31744., 16416., 7781.,  16086.,
      16458., 16830., 17202., 17574., 17946., 9263.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9248.,  13480., 18672., 25080., 31960., 27504., 23944., 21536., 12280.,
      18110., 24980., 33210., 41970., 36836., 31750., 26904., 14768., 22220.,
      30920., 41060., 51764., 46568., 40636., 34096., 16712., 25490., 35980.,
      48118., 60830., 56188., 50090., 42600., 16712., 25490., 35980., 48118.,
      60830., 56188., 50090., 42600., 16712., 25490., 35980., 48118., 60830.,
      56188., 50090., 42600., 16712., 25490., 35980., 48118., 60830., 56188.,
      50090., 42600., 15856., 23900., 33320., 43988., 55076., 49160., 42380.,
      34864., 13688., 20782., 28980., 38090., 47490., 44100., 36470., 28696.,
      10720., 16648., 23472., 30936., 38584., 37104., 32360., 24096., 9248.,
      13480., 18672., 25080., 31960., 27504., 23944., 21536., 12280., 18110.,
      24980., 33210., 41970., 36836., 31750., 26904., 14768., 22220., 30920.,
      41060., 51764., 46568., 40636., 34096., 16712., 25490., 35980., 48118.,
      60830., 56188., 50090., 42600., 16712., 25490., 35980., 48118., 60830.,
      56188., 50090., 42600., 16712., 25490., 35980., 48118., 60830., 56188.,
      50090., 42600., 16712., 25490., 35980., 48118., 60830., 56188., 50090.,
      42600., 15856., 23900., 33320., 43988., 55076., 49160., 42380., 34864.,
      13688., 20782., 28980., 38090., 47490., 44100., 36470., 28696., 10720.,
      16648., 23472., 30936., 38584., 37104., 32360., 24096., 9248.,  13480.,
      18672., 25080., 31960., 27504., 23944., 21536., 12280., 18110., 24980.,
      33210., 41970., 36836., 31750., 26904., 14768., 22220., 30920., 41060.,
      51764., 46568., 40636., 34096., 16712., 25490., 35980., 48118., 60830.,
      56188., 50090., 42600., 16712., 25490., 35980., 48118., 60830., 56188.,
      50090., 42600., 16712., 25490., 35980., 48118., 60830., 56188., 50090.,
      42600., 16712., 25490., 35980., 48118., 60830., 56188., 50090., 42600.,
      15856., 23900., 33320., 43988., 55076., 49160., 42380., 34864., 13688.,
      20782., 28980., 38090., 47490., 44100., 36470., 28696., 10720., 16648.,
      23472., 30936., 38584., 37104., 32360., 24096.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   284.,   428.,   572.,   716.,   860.,   694.,   420.,
      1576.,  2120.,  2664.,  3208.,  3752.,  4296.,  2964.,  2066.,  6100.,
      6660.,  6196.,  7396.,  8596.,  9796.,  6042.,  5224.,  13200., 12624.,
      11024., 13136., 15248., 17360., 10440., 9032.,  21584., 18960., 15312.,
      16784., 17232., 19344., 11304., 10152., 23568., 18896., 13200., 12624.,
      11024., 13136., 8072.,  7176.,  17360., 19472., 21584., 18960., 15312.,
      16784., 8936.,  8226.,  19060., 21028., 22996., 18180., 12340., 11620.,
      4906.,  4692.,  11016., 12584., 14152., 15720., 17288., 14120., 4932.,
      4510.,  10124., 11036., 11948., 12860., 13772., 7900.,  310.,   350.,
      1292.,  2460.,  3628.,  4796.,  5964.,  7132.,  4086.,  4644.,  11048.,
      13640., 16232., 18824., 21416., 24008., 13332., 13778., 31060., 26500.,
      20916., 25188., 29460., 33732., 18778., 19816., 44432., 39760., 34064.,
      40272., 46480., 52688., 29128., 29768., 65104., 58384., 50640., 48016.,
      44368., 50576., 27944., 28840., 62992., 54224., 44432., 39760., 34064.,
      40272., 22664., 23816., 52688., 58896., 65104., 58384., 50640., 48016.,
      21480., 21986., 48116., 53156., 58196., 48260., 37300., 31460., 11498.,
      11988., 26632., 30248., 33864., 37480., 41096., 31784., 10180., 9950.,
      21516., 23452., 25388., 27324., 29260., 16220., 630.,   30.,    140.,
      284.,   428.,   572.,   716.,   860.,   694.,   420.,   1576.,  2120.,
      2664.,  3208.,  3752.,  4296.,  2964.,  2066.,  6100.,  6660.,  6196.,
      7396.,  8596.,  9796.,  6042.,  5224.,  13200., 12624., 11024., 13136.,
      15248., 17360., 10440., 9032.,  21584., 18960., 15312., 16784., 17232.,
      19344., 11304., 10152., 23568., 18896., 13200., 12624., 11024., 13136.,
      8072.,  7176.,  17360., 19472., 21584., 18960., 15312., 16784., 8936.,
      8226.,  19060., 21028., 22996., 18180., 12340., 11620., 4906.,  4692.,
      11016., 12584., 14152., 15720., 17288., 14120., 4932.,  4510.,  10124.,
      11036., 11948., 12860., 13772., 7900.,  310.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6640.,  7504.,  9320.,  10440., 12440., 13832., 16016., 17696., 17584.,
      19320., 16664., 18200., 15240., 16560., 13296., 14384., 12956., 14080.,
      17461., 18852., 22410., 24088., 27823., 29808., 29889., 31944., 27154.,
      28948., 23767., 25280., 19708., 20920., 18728., 19976., 23792., 25348.,
      29364., 31252., 35468., 37712., 37716., 40044., 33684., 35724., 28920.,
      30648., 23400., 24792., 21780., 23272., 26873., 28744., 32598., 34876.,
      38983., 41696., 41609., 44420., 37022., 39488., 31563., 33656., 25204.,
      26896., 22420., 24104., 26889., 29000., 32086., 34652., 38039., 41088.,
      40665., 43812., 36062., 38816., 30491., 32824., 23924., 25808., 18452.,
      20072., 24921., 26952., 32086., 34556., 39975., 42912., 42601., 45636.,
      38942., 41600., 34347., 36600., 28788., 30608., 23700., 25256., 30377.,
      32328., 37718., 40092., 45751., 48576., 48377., 51300., 43358., 45920.,
      37435., 39608., 30580., 32336., 21224., 22552., 25988., 27644., 31300.,
      33308., 37184., 39568., 39712., 42180., 35076., 37236., 29668., 31496.,
      23464., 24936., 19036., 20272., 22129., 23660., 25722., 27568., 29835.,
      32016., 32069., 34320., 27874., 29836., 22971., 24624., 17340., 18664.,
      10096., 11120., 13776., 15032., 17848., 19352., 22328., 24096., 24072.,
      25896., 21944., 23528., 19232., 20560., 15920., 16976., 13808., 14672.,
      18280., 19400., 23192., 24584., 28560., 30240., 30128., 31864., 27416.,
      28952., 24200., 25520., 20464., 21552., 20636., 21888., 25173., 26724.,
      30218., 32088., 35791., 38000., 37857., 40136., 33298., 35284., 28023.,
      29696., 22012., 23352., 20520., 22024., 24304., 26180., 28724., 30996.,
      33804., 36496., 36052., 38828., 31764., 34188., 26616., 28664., 20584.,
      22232., 18452., 20072., 24921., 26952., 32086., 34556., 39975., 42912.,
      42601., 45636., 38942., 41600., 34347., 36600., 28788., 30608., 23700.,
      25256., 30377., 32328., 37718., 40092., 45751., 48576., 48377., 51300.,
      43358., 45920., 37435., 39608., 30580., 32336., 21780., 23272., 26873.,
      28744., 32598., 34876., 38983., 41696., 41609., 44420., 37022., 39488.,
      31563., 33656., 25204., 26896., 22420., 24104., 26889., 29000., 32086.,
      34652., 38039., 41088., 40665., 43812., 36062., 38816., 30491., 32824.,
      23924., 25808., 18408., 19992., 24836., 26812., 31940., 34332., 39744.,
      42576., 42272., 45188., 38532., 41076., 33892., 36040., 28328., 30056.,
      23132., 24496., 29457., 31148., 36346., 38384., 43819., 46224., 46053.,
      48528., 40930., 43084., 35035., 36848., 28348., 29800., 19312., 20336.,
      23248., 24504., 27576., 29080., 32312., 34080., 34056., 35880., 29624.,
      31208., 24608., 25936., 18992., 20048., 6640.,  7504.,  9320.,  10440.,
      12440., 13832., 16016., 17696., 17584., 19320., 16664., 18200., 15240.,
      16560., 13296., 14384., 12956., 14080., 17461., 18852., 22410., 24088.,
      27823., 29808., 29889., 31944., 27154., 28948., 23767., 25280., 19708.,
      20920., 18728., 19976., 23792., 25348., 29364., 31252., 35468., 37712.,
      37716., 40044., 33684., 35724., 28920., 30648., 23400., 24792., 21780.,
      23272., 26873., 28744., 32598., 34876., 38983., 41696., 41609., 44420.,
      37022., 39488., 31563., 33656., 25204., 26896., 22420., 24104., 26889.,
      29000., 32086., 34652., 38039., 41088., 40665., 43812., 36062., 38816.,
      30491., 32824., 23924., 25808., 18452., 20072., 24921., 26952., 32086.,
      34556., 39975., 42912., 42601., 45636., 38942., 41600., 34347., 36600.,
      28788., 30608., 23700., 25256., 30377., 32328., 37718., 40092., 45751.,
      48576., 48377., 51300., 43358., 45920., 37435., 39608., 30580., 32336.,
      21224., 22552., 25988., 27644., 31300., 33308., 37184., 39568., 39712.,
      42180., 35076., 37236., 29668., 31496., 23464., 24936., 19036., 20272.,
      22129., 23660., 25722., 27568., 29835., 32016., 32069., 34320., 27874.,
      29836., 22971., 24624., 17340., 18664., 10096., 11120., 13776., 15032.,
      17848., 19352., 22328., 24096., 24072., 25896., 21944., 23528., 19232.,
      20560., 15920., 16976.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     6.,     16.,    14.,    28.,    22.,    40.,    30.,
      52.,    38.,    64.,    46.,    76.,    39.,    56.,    20.,    44.,
      84.,    140.,   116.,   180.,   148.,   220.,   180.,   260.,   212.,
      300.,   244.,   340.,   172.,   224.,   113.,   176.,   346.,   484.,
      418.,   568.,   490.,   652.,   562.,   736.,   634.,   820.,   706.,
      904.,   455.,   560.,   336.,   456.,   904.,   1160.,  1032.,  1304.,
      1160.,  1448.,  1288.,  1592.,  1416.,  1736.,  1544.,  1880.,  944.,
      1120.,  728.,   904.,   1800.,  2168.,  1928.,  2312.,  2056.,  2456.,
      2184.,  2600.,  2312.,  2744.,  2440.,  2888.,  1448.,  1680.,  1120.,
      1352.,  2696.,  3176.,  2824.,  3320.,  2952.,  3464.,  3080.,  3608.,
      3208.,  3752.,  3336.,  3896.,  1952.,  2240.,  1512.,  1800.,  3592.,
      4184.,  3720.,  4328.,  3848.,  4472.,  3976.,  4616.,  4104.,  4760.,
      4232.,  4904.,  2456.,  2800.,  1805.,  2048.,  4090.,  4588.,  4210.,
      4720.,  4330.,  4852.,  4450.,  4984.,  4570.,  5116.,  4690.,  5248.,
      2627.,  2912.,  1688.,  1868.,  3732.,  4100.,  3828.,  4204.,  3924.,
      4308.,  4020.,  4412.,  4116.,  4516.,  4212.,  4620.,  2312.,  2520.,
      1105.,  1204.,  2406.,  2608.,  2462.,  2668.,  2518.,  2728.,  2574.,
      2788.,  2630.,  2848.,  2686.,  2908.,  1455.,  1568.,  17.,    36.,
      70.,    112.,   142.,   188.,   214.,   264.,   286.,   340.,   358.,
      416.,   430.,   492.,   247.,   280.,   276.,   332.,   660.,   780.,
      820.,   948.,   980.,   1116.,  1140.,  1284.,  1300.,  1452.,  1460.,
      1620.,  812.,   896.,   833.,   944.,   1882.,  2116.,  2146.,  2392.,
      2410.,  2668.,  2674.,  2944.,  2938.,  3220.,  3202.,  3496.,  1751.,
      1904.,  1744.,  1928.,  3848.,  4232.,  4232.,  4632.,  4616.,  5032.,
      5000.,  5432.,  5384.,  5832.,  5768.,  6232.,  3120.,  3360.,  3032.,
      3272.,  6536.,  7032.,  6920.,  7432.,  7304.,  7832.,  7688.,  8232.,
      8072.,  8632.,  8456.,  9032.,  4520.,  4816.,  4320.,  4616.,  9224.,
      9832.,  9608.,  10232., 9992.,  10632., 10376., 11032., 10760., 11432.,
      11144., 11832., 5920.,  6272.,  5608.,  5960.,  11912., 12632., 12296.,
      13032., 12680., 13432., 13064., 13832., 13448., 14232., 13832., 14632.,
      7320.,  7728.,  5213.,  5504.,  11002., 11596., 11314., 11920., 11626.,
      12244., 11938., 12568., 12250., 12892., 12562., 13216., 6611.,  6944.,
      4184.,  4396.,  8788.,  9220.,  9012.,  9452.,  9236.,  9684.,  9460.,
      9916.,  9684.,  10148., 9908.,  10380., 5192.,  5432.,  2465.,  2580.,
      5158.,  5392.,  5278.,  5516.,  5398.,  5640.,  5518.,  5764.,  5638.,
      5888.,  5758.,  6012.,  3007.,  3136.,  33.,    68.,    134.,   208.,
      270.,   348.,   406.,   488.,   542.,   628.,   678.,   768.,   814.,
      908.,   455.,   504.,   532.,   620.,   1236.,  1420.,  1524.,  1716.,
      1812.,  2012.,  2100.,  2308.,  2388.,  2604.,  2676.,  2900.,  1452.,
      1568.,  1553.,  1712.,  3418.,  3748.,  3874.,  4216.,  4330.,  4684.,
      4786.,  5152.,  5242.,  5620.,  5698.,  6088.,  3047.,  3248.,  3152.,
      3400.,  6792.,  7304.,  7432.,  7960.,  8072.,  8616.,  8712.,  9272.,
      9352.,  9928.,  9992.,  10584., 5296.,  5600.,  5336.,  5640.,  11272.,
      11896., 11912., 12552., 12552., 13208., 13192., 13864., 13832., 14520.,
      14472., 15176., 7592.,  7952.,  7520.,  7880.,  15752., 16488., 16392.,
      17144., 17032., 17800., 17672., 18456., 18312., 19112., 18952., 19768.,
      9888.,  10304., 9704.,  10120., 20232., 21080., 20872., 21736., 21512.,
      22392., 22152., 23048., 22792., 23704., 23432., 24360., 12184., 12656.,
      8621.,  8960.,  17914., 18604., 18418., 19120., 18922., 19636., 19426.,
      20152., 19930., 20668., 20434., 21184., 10595., 10976., 6680.,  6924.,
      13844., 14340., 14196., 14700., 14548., 15060., 14900., 15420., 15252.,
      15780., 15604., 16140., 8072.,  8344.,  3825.,  3956.,  7910.,  8176.,
      8094.,  8364.,  8278.,  8552.,  8462.,  8740.,  8646.,  8928.,  8830.,
      9116.,  4559.,  4704.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3888.,  5360.,  5756.,  7724.,  8040.,  10632., 10868., 14212., 14084.,
      17876., 12072., 15432., 10508., 13436., 9520.,  12016., 5140.,  7140.,
      7765.,  10345., 10830., 14150., 14495., 18715., 18595., 23375., 16294.,
      20542., 14033., 17717., 11908., 14996., 6152.,  8616.,  9490.,  12730.,
      13420., 17500., 17974., 23086., 22990., 28774., 20700., 25868., 18074.,
      22562., 15176., 18920., 6924.,  9788.,  10835., 14655., 15554., 20426.,
      21049., 27069., 27013., 33817., 25034., 31154., 22375., 27715., 19068.,
      23532., 6924.,  9788.,  10835., 14655., 15554., 20426., 21049., 27069.,
      27013., 33817., 25034., 31154., 22375., 27715., 19068., 23532., 6924.,
      9788.,  10835., 14655., 15554., 20426., 21049., 27069., 27013., 33817.,
      25034., 31154., 22375., 27715., 19068., 23532., 6924.,  9788.,  10835.,
      14655., 15554., 20426., 21049., 27069., 27013., 33817., 25034., 31154.,
      22375., 27715., 19068., 23532., 6632.,  9224.,  10250., 13650., 14524.,
      18796., 19390., 24598., 24598., 30478., 21964., 27196., 18930., 23450.,
      15560., 19304., 5716.,  7972.,  8925.,  11857., 12670., 16310., 16855.,
      21235., 21275., 26215., 19830., 24270., 16345., 20125., 12804., 15892.,
      4432.,  6288.,  7116.,  9532.,  10248., 13224., 13700., 17236., 17300.,
      21284., 16744., 20360., 14620., 17740., 10800., 13296., 3888.,  5360.,
      5756.,  7724.,  8040.,  10632., 10868., 14212., 14084., 17876., 12072.,
      15432., 10508., 13436., 9520.,  12016., 5140.,  7140.,  7765.,  10345.,
      10830., 14150., 14495., 18715., 18595., 23375., 16294., 20542., 14033.,
      17717., 11908., 14996., 6152.,  8616.,  9490.,  12730., 13420., 17500.,
      17974., 23086., 22990., 28774., 20700., 25868., 18074., 22562., 15176.,
      18920., 6924.,  9788.,  10835., 14655., 15554., 20426., 21049., 27069.,
      27013., 33817., 25034., 31154., 22375., 27715., 19068., 23532., 6924.,
      9788.,  10835., 14655., 15554., 20426., 21049., 27069., 27013., 33817.,
      25034., 31154., 22375., 27715., 19068., 23532., 6924.,  9788.,  10835.,
      14655., 15554., 20426., 21049., 27069., 27013., 33817., 25034., 31154.,
      22375., 27715., 19068., 23532., 6924.,  9788.,  10835., 14655., 15554.,
      20426., 21049., 27069., 27013., 33817., 25034., 31154., 22375., 27715.,
      19068., 23532., 6632.,  9224.,  10250., 13650., 14524., 18796., 19390.,
      24598., 24598., 30478., 21964., 27196., 18930., 23450., 15560., 19304.,
      5716.,  7972.,  8925.,  11857., 12670., 16310., 16855., 21235., 21275.,
      26215., 19830., 24270., 16345., 20125., 12804., 15892., 4432.,  6288.,
      7116.,  9532.,  10248., 13224., 13700., 17236., 17300., 21284., 16744.,
      20360., 14620., 17740., 10800., 13296., 3888.,  5360.,  5756.,  7724.,
      8040.,  10632., 10868., 14212., 14084., 17876., 12072., 15432., 10508.,
      13436., 9520.,  12016., 5140.,  7140.,  7765.,  10345., 10830., 14150.,
      14495., 18715., 18595., 23375., 16294., 20542., 14033., 17717., 11908.,
      14996., 6152.,  8616.,  9490.,  12730., 13420., 17500., 17974., 23086.,
      22990., 28774., 20700., 25868., 18074., 22562., 15176., 18920., 6924.,
      9788.,  10835., 14655., 15554., 20426., 21049., 27069., 27013., 33817.,
      25034., 31154., 22375., 27715., 19068., 23532., 6924.,  9788.,  10835.,
      14655., 15554., 20426., 21049., 27069., 27013., 33817., 25034., 31154.,
      22375., 27715., 19068., 23532., 6924.,  9788.,  10835., 14655., 15554.,
      20426., 21049., 27069., 27013., 33817., 25034., 31154., 22375., 27715.,
      19068., 23532., 6924.,  9788.,  10835., 14655., 15554., 20426., 21049.,
      27069., 27013., 33817., 25034., 31154., 22375., 27715., 19068., 23532.,
      6632.,  9224.,  10250., 13650., 14524., 18796., 19390., 24598., 24598.,
      30478., 21964., 27196., 18930., 23450., 15560., 19304., 5716.,  7972.,
      8925.,  11857., 12670., 16310., 16855., 21235., 21275., 26215., 19830.,
      24270., 16345., 20125., 12804., 15892., 4432.,  6288.,  7116.,  9532.,
      10248., 13224., 13700., 17236., 17300., 21284., 16744., 20360., 14620.,
      17740., 10800., 13296.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   90.,    194.,   146.,   282.,   202.,
      370.,   258.,   458.,   314.,   546.,   281.,   413.,   118.,   302.,
      572.,   1004.,  812.,   1308.,  1052.,  1612.,  1292.,  1916.,  1532.,
      2220.,  1772.,  2524.,  1278.,  1686.,  787.,   1279.,  2510.,  3590.,
      2870.,  3790.,  2718.,  3478.,  3270.,  4126.,  3822.,  4774.,  4374.,
      5422.,  2735.,  3307.,  2268.,  2956.,  5848.,  7352.,  5624.,  7000.,
      4888.,  6136.,  5880.,  7256.,  6872.,  8376.,  7864.,  9496.,  4780.,
      5660.,  4076.,  4956.,  9848.,  11736., 8600.,  10360., 6840.,  8472.,
      7640.,  9144.,  7928.,  9304.,  8920.,  10424., 5244.,  6060.,  4668.,
      5484.,  10904., 12664., 8632.,  10264., 5848.,  7352.,  5624.,  7000.,
      4888.,  6136.,  5880.,  7256.,  3660.,  4412.,  3212.,  3964.,  7864.,
      9496.,  8856.,  10616., 9848.,  11736., 8600.,  10360., 6840.,  8472.,
      7640.,  9144.,  4124.,  4812.,  3787.,  4439.,  8830.,  10230., 9766.,
      11262., 10702., 12294., 8374.,  9806.,  5534.,  6806.,  5254.,  6366.,
      2215.,  2691.,  2142.,  2550.,  5068.,  5948.,  5820.,  6764.,  6572.,
      7580.,  7324.,  8396.,  8076.,  9212.,  6588.,  7532.,  2278.,  2654.,
      2117.,  2393.,  4770.,  5354.,  5210.,  5826.,  5650.,  6298.,  6090.,
      6770.,  6530.,  7242.,  3706.,  4194.,  89.,    221.,   101.,   249.,
      482.,   810.,   1050.,  1410.,  1618.,  2010.,  2186.,  2610.,  2754.,
      3210.,  3322.,  3810.,  1913.,  2173.,  2102.,  2542.,  5052.,  5996.,
      6316.,  7324.,  7580.,  8652.,  8844.,  9980.,  10108., 11308., 11372.,
      12636., 6334.,  6998.,  6451.,  7327.,  14606., 16454., 12406., 14094.,
      9694.,  11222., 11782., 13406., 13870., 15590., 15958., 17774., 8911.,
      9867.,  9308.,  10508., 20952., 23480., 18680., 21080., 15896., 18168.,
      18936., 21336., 21976., 24504., 25016., 27672., 13868., 15260., 14188.,
      15580., 31096., 34008., 27800., 30584., 23992., 26648., 22744., 25272.,
      20984., 23384., 24024., 26552., 13308., 14636., 13756., 15084., 30104.,
      32888., 25784., 28440., 20952., 23480., 18680., 21080., 15896., 18168.,
      18936., 21336., 10700., 11964., 11276., 12540., 25016., 27672., 28056.,
      30840., 31096., 34008., 27800., 30584., 23992., 26648., 22744., 25272.,
      10140., 11340., 10475., 11511., 22974., 25142., 25446., 27710., 27918.,
      30278., 23030., 25230., 17630., 19670., 14790., 16670., 5319.,  6179.,
      5662.,  6326.,  12620., 14012., 14396., 15852., 16172., 17692., 17948.,
      19532., 19724., 21372., 15164., 16620., 4774.,  5406.,  4773.,  5177.,
      10338., 11178., 11290., 12162., 12242., 13146., 13194., 14130., 14146.,
      15114., 7738.,  8482.,  185.,   445.,   5.,     25.,    34.,    106.,
      90.,    194.,   146.,   282.,   202.,   370.,   258.,   458.,   314.,
      546.,   281.,   413.,   118.,   302.,   572.,   1004.,  812.,   1308.,
      1052.,  1612.,  1292.,  1916.,  1532.,  2220.,  1772.,  2524.,  1278.,
      1686.,  787.,   1279.,  2510.,  3590.,  2870.,  3790.,  2718.,  3478.,
      3270.,  4126.,  3822.,  4774.,  4374.,  5422.,  2735.,  3307.,  2268.,
      2956.,  5848.,  7352.,  5624.,  7000.,  4888.,  6136.,  5880.,  7256.,
      6872.,  8376.,  7864.,  9496.,  4780.,  5660.,  4076.,  4956.,  9848.,
      11736., 8600.,  10360., 6840.,  8472.,  7640.,  9144.,  7928.,  9304.,
      8920.,  10424., 5244.,  6060.,  4668.,  5484.,  10904., 12664., 8632.,
      10264., 5848.,  7352.,  5624.,  7000.,  4888.,  6136.,  5880.,  7256.,
      3660.,  4412.,  3212.,  3964.,  7864.,  9496.,  8856.,  10616., 9848.,
      11736., 8600.,  10360., 6840.,  8472.,  7640.,  9144.,  4124.,  4812.,
      3787.,  4439.,  8830.,  10230., 9766.,  11262., 10702., 12294., 8374.,
      9806.,  5534.,  6806.,  5254.,  6366.,  2215.,  2691.,  2142.,  2550.,
      5068.,  5948.,  5820.,  6764.,  6572.,  7580.,  7324.,  8396.,  8076.,
      9212.,  6588.,  7532.,  2278.,  2654.,  2117.,  2393.,  4770.,  5354.,
      5210.,  5826.,  5650.,  6298.,  6090.,  6770.,  6530.,  7242.,  3706.,
      4194.,  89.,    221.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4176., 10704., 3896., 9592.,  2784., 7136.,  3224., 8664.,  4046., 10462.,
      4836., 12996., 5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502.,
      3736., 9176.,  4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724.,
      7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704., 4616., 12232.,
      5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414., 7692., 19116.,
      6394., 16298., 5128., 12744., 4616., 12232., 5578., 14586., 6924., 18348.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      7692., 19116., 6394., 16298., 5128., 12744., 4616., 12232., 5578., 14586.,
      6924., 18348., 8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298.,
      5128., 12744., 4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724.,
      7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704., 3224., 8664.,
      4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834., 5604., 13764.,
      4446., 11502., 3736., 9176.,  2784., 7136.,  3064., 8248.,  4176., 10704.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4176., 10704., 3896., 9592.,  2784., 7136.,  3224., 8664.,  4046., 10462.,
      4836., 12996., 5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502.,
      3736., 9176.,  4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724.,
      7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704., 4616., 12232.,
      5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414., 7692., 19116.,
      6394., 16298., 5128., 12744., 4616., 12232., 5578., 14586., 6924., 18348.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      7692., 19116., 6394., 16298., 5128., 12744., 4616., 12232., 5578., 14586.,
      6924., 18348., 8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298.,
      5128., 12744., 4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724.,
      7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704., 3224., 8664.,
      4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834., 5604., 13764.,
      4446., 11502., 3736., 9176.,  2784., 7136.,  3064., 8248.,  4176., 10704.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4176., 10704., 3896., 9592.,  2784., 7136.,  3224., 8664.,  4046., 10462.,
      4836., 12996., 5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502.,
      3736., 9176.,  4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724.,
      7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704., 4616., 12232.,
      5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414., 7692., 19116.,
      6394., 16298., 5128., 12744., 4616., 12232., 5578., 14586., 6924., 18348.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      7692., 19116., 6394., 16298., 5128., 12744., 4616., 12232., 5578., 14586.,
      6924., 18348., 8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298.,
      5128., 12744., 4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724.,
      7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704., 3224., 8664.,
      4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834., 5604., 13764.,
      4446., 11502., 3736., 9176.,  2784., 7136.,  3064., 8248.,  4176., 10704.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   636.,   1436.,  1052.,  2108.,  1468.,
      2780.,  1884.,  3452.,  2300.,  4124.,  2126.,  3166.,  780.,   2220.,
      3544.,  5912.,  2712.,  4568.,  4568.,  6936.,  6424.,  9304.,  8280.,
      11672., 10136., 14040., 7148.,  9356.,  5194.,  8058.,  10996., 16468.,
      7892.,  12084., 9524.,  13460., 13844., 18548., 18164., 23636., 22484.,
      28724., 14554., 18058., 12760., 17176., 25008., 33840., 17200., 25008.,
      17584., 24368., 22704., 29488., 30512., 38320., 38320., 47152., 23832.,
      28760., 22296., 27224., 41008., 50864., 25008., 33840., 17200., 25008.,
      17584., 24368., 22704., 29488., 30512., 38320., 19416., 23832., 18904.,
      23320., 46128., 55984., 41008., 50864., 25008., 33840., 17200., 25008.,
      17584., 24368., 22704., 29488., 15000., 18904., 15512., 19416., 38320.,
      47152., 46128., 55984., 41008., 50864., 25008., 33840., 17200., 25008.,
      17584., 24368., 10584., 13976., 12010., 15130., 29876., 36884., 37268.,
      45044., 44660., 53204., 39124., 47412., 22708., 29716., 14484., 20212.,
      6394.,  9130.,  7916.,  10124., 19992., 24920., 25944., 31384., 31896.,
      37848., 37848., 44312., 30872., 36824., 13016., 17432., 2892.,  4844.,
      3742.,  4910.,  9692.,  12284., 13180., 16028., 16668., 19772., 20156.,
      23516., 23644., 27260., 14204., 17052., 590.,   1630.,  30.,    174.,
      220.,   764.,   636.,   1436.,  1052.,  2108.,  1468.,  2780.,  1884.,
      3452.,  2300.,  4124.,  2126.,  3166.,  780.,   2220.,  3544.,  5912.,
      2712.,  4568.,  4568.,  6936.,  6424.,  9304.,  8280.,  11672., 10136.,
      14040., 7148.,  9356.,  5194.,  8058.,  10996., 16468., 7892.,  12084.,
      9524.,  13460., 13844., 18548., 18164., 23636., 22484., 28724., 14554.,
      18058., 12760., 17176., 25008., 33840., 17200., 25008., 17584., 24368.,
      22704., 29488., 30512., 38320., 38320., 47152., 23832., 28760., 22296.,
      27224., 41008., 50864., 25008., 33840., 17200., 25008., 17584., 24368.,
      22704., 29488., 30512., 38320., 19416., 23832., 18904., 23320., 46128.,
      55984., 41008., 50864., 25008., 33840., 17200., 25008., 17584., 24368.,
      22704., 29488., 15000., 18904., 15512., 19416., 38320., 47152., 46128.,
      55984., 41008., 50864., 25008., 33840., 17200., 25008., 17584., 24368.,
      10584., 13976., 12010., 15130., 29876., 36884., 37268., 45044., 44660.,
      53204., 39124., 47412., 22708., 29716., 14484., 20212., 6394.,  9130.,
      7916.,  10124., 19992., 24920., 25944., 31384., 31896., 37848., 37848.,
      44312., 30872., 36824., 13016., 17432., 2892.,  4844.,  3742.,  4910.,
      9692.,  12284., 13180., 16028., 16668., 19772., 20156., 23516., 23644.,
      27260., 14204., 17052., 590.,   1630.,  30.,    174.,   220.,   764.,
      636.,   1436.,  1052.,  2108.,  1468.,  2780.,  1884.,  3452.,  2300.,
      4124.,  2126.,  3166.,  780.,   2220.,  3544.,  5912.,  2712.,  4568.,
      4568.,  6936.,  6424.,  9304.,  8280.,  11672., 10136., 14040., 7148.,
      9356.,  5194.,  8058.,  10996., 16468., 7892.,  12084., 9524.,  13460.,
      13844., 18548., 18164., 23636., 22484., 28724., 14554., 18058., 12760.,
      17176., 25008., 33840., 17200., 25008., 17584., 24368., 22704., 29488.,
      30512., 38320., 38320., 47152., 23832., 28760., 22296., 27224., 41008.,
      50864., 25008., 33840., 17200., 25008., 17584., 24368., 22704., 29488.,
      30512., 38320., 19416., 23832., 18904., 23320., 46128., 55984., 41008.,
      50864., 25008., 33840., 17200., 25008., 17584., 24368., 22704., 29488.,
      15000., 18904., 15512., 19416., 38320., 47152., 46128., 55984., 41008.,
      50864., 25008., 33840., 17200., 25008., 17584., 24368., 10584., 13976.,
      12010., 15130., 29876., 36884., 37268., 45044., 44660., 53204., 39124.,
      47412., 22708., 29716., 14484., 20212., 6394.,  9130.,  7916.,  10124.,
      19992., 24920., 25944., 31384., 31896., 37848., 37848., 44312., 30872.,
      36824., 13016., 17432., 2892.,  4844.,  3742.,  4910.,  9692.,  12284.,
      13180., 16028., 16668., 19772., 20156., 23516., 23644., 27260., 14204.,
      17052., 590.,   1630.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7856.,  8640.,  9456.,  10304., 10396., 11424., 12492., 13600., 13640.,
      14944., 16296., 17696., 17652., 19264., 20932., 22656., 20740., 22464.,
      24244., 26080., 18408., 19936., 21512., 23136., 14860., 16160., 17500.,
      18880., 14192., 15296., 16432., 17600., 12388., 13424., 14500., 15616.,
      17601., 18900., 20249., 21648., 23526., 25128., 26790., 28512., 30243.,
      32188., 34203., 36288., 34271., 36356., 38511., 40736., 31518., 33352.,
      35246., 37200., 27221., 28764., 30357., 32000., 23412., 24688., 26004.,
      27360., 16808., 18080., 19400., 20768., 20594., 22208., 23882., 25616.,
      25340., 27344., 29420., 31568., 31142., 33584., 36110., 38720., 35870.,
      38480., 41174., 43952., 31564., 33872., 36252., 38704., 25402., 27360.,
      29378., 31456., 21448., 23072., 24744., 26464., 16508., 18000., 19548.,
      21152., 23791., 25700., 27679., 29728., 32266., 34648., 37114., 39664.,
      41981., 44828., 47773., 50816., 47937., 50980., 54121., 57360., 44914.,
      47608., 50386., 53248., 39739., 42028., 44387., 46816., 34412., 36304.,
      38252., 40256., 24060., 25680., 27356., 29088., 30479., 32548., 34687.,
      36896., 38218., 40792., 43450., 46192., 45277., 48348., 51517., 54784.,
      51233., 54500., 57865., 61328., 45490., 48376., 51346., 54400., 37467.,
      39916., 42435., 45024., 31212., 33232., 35308., 37440., 16508., 18000.,
      19548., 21152., 23791., 25700., 27679., 29728., 32266., 34648., 37114.,
      39664., 41981., 44828., 47773., 50816., 47937., 50980., 54121., 57360.,
      44914., 47608., 50386., 53248., 39739., 42028., 44387., 46816., 34412.,
      36304., 38252., 40256., 24060., 25680., 27356., 29088., 30479., 32548.,
      34687., 36896., 38218., 40792., 43450., 46192., 45277., 48348., 51517.,
      54784., 51233., 54500., 57865., 61328., 45490., 48376., 51346., 54400.,
      37467., 39916., 42435., 45024., 31212., 33232., 35308., 37440., 16392.,
      17824., 19304., 20832., 23546., 25360., 27234., 29168., 31820., 34064.,
      36380., 38768., 41246., 43904., 46646., 49472., 46838., 49664., 52574.,
      55568., 43484., 45968., 48524., 51152., 38114., 40208., 42362., 44576.,
      32744., 34464., 36232., 38048., 22148., 23408., 24708., 26048., 27289.,
      28868., 30497., 32176., 33366., 35304., 37302., 39360., 38347., 40620.,
      42963., 45376., 42791., 45204., 47687., 50240., 36558., 38664., 40830.,
      43056., 28557., 30316., 32125., 33984., 22868., 24304., 25780., 27296.,
      9712.,  10688., 11696., 12736., 14316., 15552., 16828., 18144., 19688.,
      21216., 22792., 24416., 25828., 27616., 29460., 31360., 29620., 31520.,
      33476., 35488., 28232., 29920., 31656., 33440., 25564., 27008., 28492.,
      30016., 21552., 22720., 23920., 25152., 7856.,  8640.,  9456.,  10304.,
      10396., 11424., 12492., 13600., 13640., 14944., 16296., 17696., 17652.,
      19264., 20932., 22656., 20740., 22464., 24244., 26080., 18408., 19936.,
      21512., 23136., 14860., 16160., 17500., 18880., 14192., 15296., 16432.,
      17600., 12388., 13424., 14500., 15616., 17601., 18900., 20249., 21648.,
      23526., 25128., 26790., 28512., 30243., 32188., 34203., 36288., 34271.,
      36356., 38511., 40736., 31518., 33352., 35246., 37200., 27221., 28764.,
      30357., 32000., 23412., 24688., 26004., 27360., 16808., 18080., 19400.,
      20768., 20594., 22208., 23882., 25616., 25340., 27344., 29420., 31568.,
      31142., 33584., 36110., 38720., 35870., 38480., 41174., 43952., 31564.,
      33872., 36252., 38704., 25402., 27360., 29378., 31456., 21448., 23072.,
      24744., 26464., 16508., 18000., 19548., 21152., 23791., 25700., 27679.,
      29728., 32266., 34648., 37114., 39664., 41981., 44828., 47773., 50816.,
      47937., 50980., 54121., 57360., 44914., 47608., 50386., 53248., 39739.,
      42028., 44387., 46816., 34412., 36304., 38252., 40256., 24060., 25680.,
      27356., 29088., 30479., 32548., 34687., 36896., 38218., 40792., 43450.,
      46192., 45277., 48348., 51517., 54784., 51233., 54500., 57865., 61328.,
      45490., 48376., 51346., 54400., 37467., 39916., 42435., 45024., 31212.,
      33232., 35308., 37440., 16508., 18000., 19548., 21152., 23791., 25700.,
      27679., 29728., 32266., 34648., 37114., 39664., 41981., 44828., 47773.,
      50816., 47937., 50980., 54121., 57360., 44914., 47608., 50386., 53248.,
      39739., 42028., 44387., 46816., 34412., 36304., 38252., 40256., 24060.,
      25680., 27356., 29088., 30479., 32548., 34687., 36896., 38218., 40792.,
      43450., 46192., 45277., 48348., 51517., 54784., 51233., 54500., 57865.,
      61328., 45490., 48376., 51346., 54400., 37467., 39916., 42435., 45024.,
      31212., 33232., 35308., 37440., 16392., 17824., 19304., 20832., 23546.,
      25360., 27234., 29168., 31820., 34064., 36380., 38768., 41246., 43904.,
      46646., 49472., 46838., 49664., 52574., 55568., 43484., 45968., 48524.,
      51152., 38114., 40208., 42362., 44576., 32744., 34464., 36232., 38048.,
      22148., 23408., 24708., 26048., 27289., 28868., 30497., 32176., 33366.,
      35304., 37302., 39360., 38347., 40620., 42963., 45376., 42791., 45204.,
      47687., 50240., 36558., 38664., 40830., 43056., 28557., 30316., 32125.,
      33984., 22868., 24304., 25780., 27296., 9712.,  10688., 11696., 12736.,
      14316., 15552., 16828., 18144., 19688., 21216., 22792., 24416., 25828.,
      27616., 29460., 31360., 29620., 31520., 33476., 35488., 28232., 29920.,
      31656., 33440., 25564., 27008., 28492., 30016., 21552., 22720., 23920.,
      25152., 7856.,  8640.,  9456.,  10304., 10396., 11424., 12492., 13600.,
      13640., 14944., 16296., 17696., 17652., 19264., 20932., 22656., 20740.,
      22464., 24244., 26080., 18408., 19936., 21512., 23136., 14860., 16160.,
      17500., 18880., 14192., 15296., 16432., 17600., 12388., 13424., 14500.,
      15616., 17601., 18900., 20249., 21648., 23526., 25128., 26790., 28512.,
      30243., 32188., 34203., 36288., 34271., 36356., 38511., 40736., 31518.,
      33352., 35246., 37200., 27221., 28764., 30357., 32000., 23412., 24688.,
      26004., 27360., 16808., 18080., 19400., 20768., 20594., 22208., 23882.,
      25616., 25340., 27344., 29420., 31568., 31142., 33584., 36110., 38720.,
      35870., 38480., 41174., 43952., 31564., 33872., 36252., 38704., 25402.,
      27360., 29378., 31456., 21448., 23072., 24744., 26464., 16508., 18000.,
      19548., 21152., 23791., 25700., 27679., 29728., 32266., 34648., 37114.,
      39664., 41981., 44828., 47773., 50816., 47937., 50980., 54121., 57360.,
      44914., 47608., 50386., 53248., 39739., 42028., 44387., 46816., 34412.,
      36304., 38252., 40256., 24060., 25680., 27356., 29088., 30479., 32548.,
      34687., 36896., 38218., 40792., 43450., 46192., 45277., 48348., 51517.,
      54784., 51233., 54500., 57865., 61328., 45490., 48376., 51346., 54400.,
      37467., 39916., 42435., 45024., 31212., 33232., 35308., 37440., 16508.,
      18000., 19548., 21152., 23791., 25700., 27679., 29728., 32266., 34648.,
      37114., 39664., 41981., 44828., 47773., 50816., 47937., 50980., 54121.,
      57360., 44914., 47608., 50386., 53248., 39739., 42028., 44387., 46816.,
      34412., 36304., 38252., 40256., 24060., 25680., 27356., 29088., 30479.,
      32548., 34687., 36896., 38218., 40792., 43450., 46192., 45277., 48348.,
      51517., 54784., 51233., 54500., 57865., 61328., 45490., 48376., 51346.,
      54400., 37467., 39916., 42435., 45024., 31212., 33232., 35308., 37440.,
      16392., 17824., 19304., 20832., 23546., 25360., 27234., 29168., 31820.,
      34064., 36380., 38768., 41246., 43904., 46646., 49472., 46838., 49664.,
      52574., 55568., 43484., 45968., 48524., 51152., 38114., 40208., 42362.,
      44576., 32744., 34464., 36232., 38048., 22148., 23408., 24708., 26048.,
      27289., 28868., 30497., 32176., 33366., 35304., 37302., 39360., 38347.,
      40620., 42963., 45376., 42791., 45204., 47687., 50240., 36558., 38664.,
      40830., 43056., 28557., 30316., 32125., 33984., 22868., 24304., 25780.,
      27296., 9712.,  10688., 11696., 12736., 14316., 15552., 16828., 18144.,
      19688., 21216., 22792., 24416., 25828., 27616., 29460., 31360., 29620.,
      31520., 33476., 35488., 28232., 29920., 31656., 33440., 25564., 27008.,
      28492., 30016., 21552., 22720., 23920., 25152.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    34.,
      56.,    82.,    112.,   58.,    88.,    122.,   160.,   82.,    120.,
      162.,   208.,   106.,   152.,   202.,   256.,   130.,   184.,   242.,
      304.,   125.,   156.,   189.,   224.,   38.,    80.,    126.,   176.,
      236.,   336.,   444.,   560.,   348.,   464.,   588.,   720.,   460.,
      592.,   732.,   880.,   572.,   720.,   876.,   1040.,  684.,   848.,
      1020.,  1200.,  796.,   976.,   1164.,  1360.,  590.,   688.,   790.,
      896.,   335.,   452.,   575.,   704.,   1126.,  1384.,  1654.,  1936.,
      1390.,  1672.,  1966.,  2272.,  1654.,  1960.,  2278.,  2608.,  1918.,
      2248.,  2590.,  2944.,  2182.,  2536.,  2902.,  3280.,  2446.,  2824.,
      3214.,  3616.,  1619.,  1820.,  2027.,  2240.,  1116.,  1344.,  1580.,
      1824.,  3128.,  3616.,  4120.,  4640.,  3608.,  4128.,  4664.,  5216.,
      4088.,  4640.,  5208.,  5792.,  4568.,  5152.,  5752.,  6368.,  5048.,
      5664.,  6296.,  6944.,  5528.,  6176.,  6840.,  7520.,  3436.,  3776.,
      4124.,  4480.,  2572.,  2912.,  3260.,  3616.,  6488.,  7200.,  7928.,
      8672.,  6968.,  7712.,  8472.,  9248.,  7448.,  8224.,  9016.,  9824.,
      7800.,  8480.,  9176.,  9888.,  7640.,  8224.,  8824.,  9440.,  8120.,
      8736.,  9368.,  10016., 4700.,  5024.,  5356.,  5696.,  3900.,  4224.,
      4556.,  4896.,  9080.,  9760.,  10456., 11168., 9560.,  10272., 11000.,
      11744., 10040., 10784., 11544., 12320., 9368.,  10016., 10680., 11360.,
      8184.,  8736.,  9304.,  9888.,  8664.,  9248.,  9848.,  10464., 4940.,
      5248.,  5564.,  5888.,  4204.,  4512.,  4828.,  5152.,  9624.,  10272.,
      10936., 11616., 10104., 10784., 11480., 12192., 10584., 11296., 12024.,
      12768., 8888.,  9504.,  10136., 10784., 6680.,  7200.,  7736.,  8288.,
      7160.,  7712.,  8280.,  8864.,  4156.,  4448.,  4748.,  5056.,  3415.,
      3636.,  3863.,  4096.,  7702.,  8168.,  8646.,  9136.,  8158.,  8648.,
      9150.,  9664.,  8614.,  9128.,  9654.,  10192., 5870.,  6280.,  6702.,
      7136.,  2614.,  2920.,  3238.,  3568.,  3070.,  3400.,  3742.,  4096.,
      1883.,  2060.,  2243.,  2432.,  1022.,  1120.,  1222.,  1328.,  2428.,
      2640.,  2860.,  3088.,  2796.,  3024.,  3260.,  3504.,  3164.,  3408.,
      3660.,  3920.,  3532.,  3792.,  4060.,  4336.,  3900.,  4176.,  4460.,
      4752.,  4268.,  4560.,  4860.,  5168.,  2438.,  2592.,  2750.,  2912.,
      1025.,  1092.,  1161.,  1232.,  2314.,  2456.,  2602.,  2752.,  2530.,
      2680.,  2834.,  2992.,  2746.,  2904.,  3066.,  3232.,  2962.,  3128.,
      3298.,  3472.,  3178.,  3352.,  3530.,  3712.,  3394.,  3576.,  3762.,
      3952.,  1885.,  1980.,  2077.,  2176.,  33.,    68.,    105.,   144.,
      202.,   280.,   362.,   448.,   482.,   568.,   658.,   752.,   762.,
      856.,   954.,   1056.,  1042.,  1144.,  1250.,  1360.,  1322.,  1432.,
      1546.,  1664.,  1602.,  1720.,  1842.,  1968.,  925.,   988.,   1053.,
      1120.,  998.,   1104.,  1214.,  1328.,  2412.,  2640.,  2876.,  3120.,
      3036.,  3280.,  3532.,  3792.,  3660.,  3920.,  4188.,  4464.,  4284.,
      4560.,  4844.,  5136.,  4908.,  5200.,  5500.,  5808.,  5532.,  5840.,
      6156.,  6480.,  3086.,  3248.,  3414.,  3584.,  3119.,  3332.,  3551.,
      3776.,  7078.,  7528.,  7990.,  8464.,  8110.,  8584.,  9070.,  9568.,
      9142.,  9640.,  10150., 10672., 10174., 10696., 11230., 11776., 11206.,
      11752., 12310., 12880., 12238., 12808., 13390., 13984., 6707.,  7004.,
      7307.,  7616.,  6620.,  6976.,  7340.,  7712.,  14648., 15392., 16152.,
      16928., 16152., 16928., 17720., 18528., 17656., 18464., 19288., 20128.,
      19160., 20000., 20856., 21728., 20664., 21536., 22424., 23328., 22168.,
      23072., 23992., 24928., 12012., 12480., 12956., 13440., 11660., 12128.,
      12604., 13088., 25176., 26144., 27128., 28128., 26680., 27680., 28696.,
      29728., 28184., 29216., 30264., 31328., 25464., 26400., 27352., 28320.,
      22232., 23072., 23928., 24800., 23736., 24608., 25496., 26400., 12764.,
      13216., 13676., 14144., 12476., 12928., 13388., 13856., 26744., 27680.,
      28632., 29600., 28248., 29216., 30200., 31200., 29752., 30752., 31768.,
      32800., 26008., 26912., 27832., 28768., 21752., 22560., 23384., 24224.,
      23256., 24096., 24952., 25824., 12492., 12928., 13372., 13824., 12268.,
      12704., 13148., 13600., 26264., 27168., 28088., 29024., 27768., 28704.,
      29656., 30624., 29272., 30240., 31224., 32224., 24504., 25376., 26264.,
      27168., 19224., 20000., 20792., 21600., 20728., 21536., 22360., 23200.,
      11196., 11616., 12044., 12480., 8759.,  9076.,  9399.,  9728.,  18774.,
      19432., 20102., 20784., 19998., 20680., 21374., 22080., 21222., 21928.,
      22646., 23376., 15150., 15752., 16366., 16992., 8566.,  9064.,  9574.,
      10096., 9790.,  10312., 10846., 11392., 5435.,  5708.,  5987.,  6272.,
      2750.,  2912.,  3078.,  3248.,  6140.,  6480.,  6828.,  7184.,  7020.,
      7376.,  7740.,  8112.,  7900.,  8272.,  8652.,  9040.,  8780.,  9168.,
      9564.,  9968.,  9660.,  10064., 10476., 10896., 10540., 10960., 11388.,
      11824., 5702.,  5920.,  6142.,  6368.,  2337.,  2436.,  2537.,  2640.,
      5066.,  5272.,  5482.,  5696.,  5538.,  5752.,  5970.,  6192.,  6010.,
      6232.,  6458.,  6688.,  6482.,  6712.,  6946.,  7184.,  6954.,  7192.,
      7434.,  7680.,  7426.,  7672.,  7922.,  8176.,  3965.,  4092.,  4221.,
      4352.,  65.,    132.,   201.,   272.,   394.,   536.,   682.,   832.,
      930.,   1080.,  1234.,  1392.,  1466.,  1624.,  1786.,  1952.,  2002.,
      2168.,  2338.,  2512.,  2538.,  2712.,  2890.,  3072.,  3074.,  3256.,
      3442.,  3632.,  1725.,  1820.,  1917.,  2016.,  1958.,  2128.,  2302.,
      2480.,  4588.,  4944.,  5308.,  5680.,  5724.,  6096.,  6476.,  6864.,
      6860.,  7248.,  7644.,  8048.,  7996.,  8400.,  8812.,  9232.,  9132.,
      9552.,  9980.,  10416., 10268., 10704., 11148., 11600., 5582.,  5808.,
      6038.,  6272.,  5903.,  6212.,  6527.,  6848.,  13030., 13672., 14326.,
      14992., 14830., 15496., 16174., 16864., 16630., 17320., 18022., 18736.,
      18430., 19144., 19870., 20608., 20230., 20968., 21718., 22480., 22030.,
      22792., 23566., 24352., 11795., 12188., 12587., 12992., 12124., 12608.,
      13100., 13600., 26168., 27168., 28184., 29216., 28696., 29728., 30776.,
      31840., 31224., 32288., 33368., 34464., 33752., 34848., 35960., 37088.,
      36280., 37408., 38552., 39712., 38808., 39968., 41144., 42336., 20588.,
      21184., 21788., 22400., 20748., 21344., 21948., 22560., 43864., 45088.,
      46328., 47584., 46392., 47648., 48920., 50208., 48920., 50208., 51512.,
      52832., 43128., 44320., 45528., 46752., 36824., 37920., 39032., 40160.,
      39352., 40480., 41624., 42784., 20828., 21408., 21996., 22592., 21052.,
      21632., 22220., 22816., 44408., 45600., 46808., 48032., 46936., 48160.,
      49400., 50656., 49464., 50720., 51992., 53280., 42648., 43808., 44984.,
      46176., 35320., 36384., 37464., 38560., 37848., 38944., 40056., 41184.,
      20044., 20608., 21180., 21760., 20332., 20896., 21468., 22048., 42904.,
      44064., 45240., 46432., 45432., 46624., 47832., 49056., 47960., 49184.,
      50424., 51680., 40120., 41248., 42392., 43552., 31768., 32800., 33848.,
      34912., 34296., 35360., 36440., 37536., 18236., 18784., 19340., 19904.,
      14103., 14516., 14935., 15360., 29846., 30696., 31558., 32432., 31838.,
      32712., 33598., 34496., 33830., 34728., 35638., 36560., 24430., 25224.,
      26030., 26848., 14518., 15208., 15910., 16624., 16510., 17224., 17950.,
      18688., 8987.,  9356.,  9731.,  10112., 4478.,  4704.,  4934.,  5168.,
      9852.,  10320., 10796., 11280., 11244., 11728., 12220., 12720., 12636.,
      13136., 13644., 14160., 14028., 14544., 15068., 15600., 15420., 15952.,
      16492., 17040., 16812., 17360., 17916., 18480., 8966.,  9248.,  9534.,
      9824.,  3649.,  3780.,  3913.,  4048.,  7818.,  8088.,  8362.,  8640.,
      8546.,  8824.,  9106.,  9392.,  9274.,  9560.,  9850.,  10144., 10002.,
      10296., 10594., 10896., 10730., 11032., 11338., 11648., 11458., 11768.,
      12082., 12400., 6045.,  6204.,  6365.,  6528.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 7032.,
      9560.,  12472., 15768., 8924.,  11980., 15484., 19436., 11516., 14956.,
      18844., 23180., 10488., 13528., 16952., 20760., 8596.,  11108., 13940.,
      17092., 5840.,  7696.,  9808.,  12176., 6660.,  8980.,  11620., 14580.,
      7597.,  10209., 13221., 16633., 8934.,  12030., 15606., 19662., 10799.,
      14571., 18903., 23795., 13079., 17331., 22143., 27515., 13174., 16974.,
      21254., 26014., 11333., 14489., 18045., 22001., 7428.,  9748.,  12388.,
      15348., 8248.,  11032., 14200., 17752., 8494.,  11686., 15358., 19510.,
      11012., 14740., 19044., 23924., 13594., 18114., 23306., 29170., 16202.,
      21298., 27066., 33506., 14404., 18900., 23972., 29620., 13406., 17174.,
      21422., 26150., 9272.,  12056., 15224., 18776., 10092., 13340., 17036.,
      21180., 10135., 13875., 18175., 23035., 12242., 16666., 21762., 27530.,
      16285., 21585., 27669., 34537., 19861., 25833., 32589., 40129., 17346.,
      22602., 28530., 35130., 14303., 18651., 23559., 29027., 10860., 14108.,
      17804., 21948., 10092., 13340., 17036., 21180., 10135., 13875., 18175.,
      23035., 12242., 16666., 21762., 27530., 16285., 21585., 27669., 34537.,
      19861., 25833., 32589., 40129., 17346., 22602., 28530., 35130., 14303.,
      18651., 23559., 29027., 10860., 14108., 17804., 21948., 10092., 13340.,
      17036., 21180., 10135., 13875., 18175., 23035., 12242., 16666., 21762.,
      27530., 16285., 21585., 27669., 34537., 19861., 25833., 32589., 40129.,
      17346., 22602., 28530., 35130., 14303., 18651., 23559., 29027., 10860.,
      14108., 17804., 21948., 10092., 13340., 17036., 21180., 10135., 13875.,
      18175., 23035., 12242., 16666., 21762., 27530., 16285., 21585., 27669.,
      34537., 19861., 25833., 32589., 40129., 17346., 22602., 28530., 35130.,
      14303., 18651., 23559., 29027., 10860., 14108., 17804., 21948., 9272.,
      12056., 15224., 18776., 8542.,  11798., 15534., 19750., 10340., 14196.,
      18628., 23636., 14410., 18994., 24250., 30178., 18298., 23458., 29290.,
      35794., 14660., 19156., 24228., 29876., 11566., 15270., 19454., 24118.,
      9272.,  12056., 15224., 18776., 7684.,  10004., 12644., 15604., 7645.,
      10321., 13397., 16873., 8262.,  11486., 15190., 19374., 11615., 15451.,
      19847., 24803., 15175., 19491., 24367., 29803., 13430., 17230., 21510.,
      26270., 9493.,  12585., 16077., 19969., 7428.,  9748.,  12388., 15348.,
      5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348., 7032.,
      9560.,  12472., 15768., 8924.,  11980., 15484., 19436., 11516., 14956.,
      18844., 23180., 10488., 13528., 16952., 20760., 8596.,  11108., 13940.,
      17092., 5840.,  7696.,  9808.,  12176., 5840.,  7696.,  9808.,  12176.,
      6004.,  8132.,  10580., 13348., 7032.,  9560.,  12472., 15768., 8924.,
      11980., 15484., 19436., 11516., 14956., 18844., 23180., 10488., 13528.,
      16952., 20760., 8596.,  11108., 13940., 17092., 5840.,  7696.,  9808.,
      12176., 6660.,  8980.,  11620., 14580., 7597.,  10209., 13221., 16633.,
      8934.,  12030., 15606., 19662., 10799., 14571., 18903., 23795., 13079.,
      17331., 22143., 27515., 13174., 16974., 21254., 26014., 11333., 14489.,
      18045., 22001., 7428.,  9748.,  12388., 15348., 8248.,  11032., 14200.,
      17752., 8494.,  11686., 15358., 19510., 11012., 14740., 19044., 23924.,
      13594., 18114., 23306., 29170., 16202., 21298., 27066., 33506., 14404.,
      18900., 23972., 29620., 13406., 17174., 21422., 26150., 9272.,  12056.,
      15224., 18776., 10092., 13340., 17036., 21180., 10135., 13875., 18175.,
      23035., 12242., 16666., 21762., 27530., 16285., 21585., 27669., 34537.,
      19861., 25833., 32589., 40129., 17346., 22602., 28530., 35130., 14303.,
      18651., 23559., 29027., 10860., 14108., 17804., 21948., 10092., 13340.,
      17036., 21180., 10135., 13875., 18175., 23035., 12242., 16666., 21762.,
      27530., 16285., 21585., 27669., 34537., 19861., 25833., 32589., 40129.,
      17346., 22602., 28530., 35130., 14303., 18651., 23559., 29027., 10860.,
      14108., 17804., 21948., 10092., 13340., 17036., 21180., 10135., 13875.,
      18175., 23035., 12242., 16666., 21762., 27530., 16285., 21585., 27669.,
      34537., 19861., 25833., 32589., 40129., 17346., 22602., 28530., 35130.,
      14303., 18651., 23559., 29027., 10860., 14108., 17804., 21948., 10092.,
      13340., 17036., 21180., 10135., 13875., 18175., 23035., 12242., 16666.,
      21762., 27530., 16285., 21585., 27669., 34537., 19861., 25833., 32589.,
      40129., 17346., 22602., 28530., 35130., 14303., 18651., 23559., 29027.,
      10860., 14108., 17804., 21948., 9272.,  12056., 15224., 18776., 8542.,
      11798., 15534., 19750., 10340., 14196., 18628., 23636., 14410., 18994.,
      24250., 30178., 18298., 23458., 29290., 35794., 14660., 19156., 24228.,
      29876., 11566., 15270., 19454., 24118., 9272.,  12056., 15224., 18776.,
      7684.,  10004., 12644., 15604., 7645.,  10321., 13397., 16873., 8262.,
      11486., 15190., 19374., 11615., 15451., 19847., 24803., 15175., 19491.,
      24367., 29803., 13430., 17230., 21510., 26270., 9493.,  12585., 16077.,
      19969., 7428.,  9748.,  12388., 15348., 5840.,  7696.,  9808.,  12176.,
      6004.,  8132.,  10580., 13348., 7032.,  9560.,  12472., 15768., 8924.,
      11980., 15484., 19436., 11516., 14956., 18844., 23180., 10488., 13528.,
      16952., 20760., 8596.,  11108., 13940., 17092., 5840.,  7696.,  9808.,
      12176., 5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348.,
      7032.,  9560.,  12472., 15768., 8924.,  11980., 15484., 19436., 11516.,
      14956., 18844., 23180., 10488., 13528., 16952., 20760., 8596.,  11108.,
      13940., 17092., 5840.,  7696.,  9808.,  12176., 6660.,  8980.,  11620.,
      14580., 7597.,  10209., 13221., 16633., 8934.,  12030., 15606., 19662.,
      10799., 14571., 18903., 23795., 13079., 17331., 22143., 27515., 13174.,
      16974., 21254., 26014., 11333., 14489., 18045., 22001., 7428.,  9748.,
      12388., 15348., 8248.,  11032., 14200., 17752., 8494.,  11686., 15358.,
      19510., 11012., 14740., 19044., 23924., 13594., 18114., 23306., 29170.,
      16202., 21298., 27066., 33506., 14404., 18900., 23972., 29620., 13406.,
      17174., 21422., 26150., 9272.,  12056., 15224., 18776., 10092., 13340.,
      17036., 21180., 10135., 13875., 18175., 23035., 12242., 16666., 21762.,
      27530., 16285., 21585., 27669., 34537., 19861., 25833., 32589., 40129.,
      17346., 22602., 28530., 35130., 14303., 18651., 23559., 29027., 10860.,
      14108., 17804., 21948., 10092., 13340., 17036., 21180., 10135., 13875.,
      18175., 23035., 12242., 16666., 21762., 27530., 16285., 21585., 27669.,
      34537., 19861., 25833., 32589., 40129., 17346., 22602., 28530., 35130.,
      14303., 18651., 23559., 29027., 10860., 14108., 17804., 21948., 10092.,
      13340., 17036., 21180., 10135., 13875., 18175., 23035., 12242., 16666.,
      21762., 27530., 16285., 21585., 27669., 34537., 19861., 25833., 32589.,
      40129., 17346., 22602., 28530., 35130., 14303., 18651., 23559., 29027.,
      10860., 14108., 17804., 21948., 10092., 13340., 17036., 21180., 10135.,
      13875., 18175., 23035., 12242., 16666., 21762., 27530., 16285., 21585.,
      27669., 34537., 19861., 25833., 32589., 40129., 17346., 22602., 28530.,
      35130., 14303., 18651., 23559., 29027., 10860., 14108., 17804., 21948.,
      9272.,  12056., 15224., 18776., 8542.,  11798., 15534., 19750., 10340.,
      14196., 18628., 23636., 14410., 18994., 24250., 30178., 18298., 23458.,
      29290., 35794., 14660., 19156., 24228., 29876., 11566., 15270., 19454.,
      24118., 9272.,  12056., 15224., 18776., 7684.,  10004., 12644., 15604.,
      7645.,  10321., 13397., 16873., 8262.,  11486., 15190., 19374., 11615.,
      15451., 19847., 24803., 15175., 19491., 24367., 29803., 13430., 17230.,
      21510., 26270., 9493.,  12585., 16077., 19969., 7428.,  9748.,  12388.,
      15348., 5840.,  7696.,  9808.,  12176., 6004.,  8132.,  10580., 13348.,
      7032.,  9560.,  12472., 15768., 8924.,  11980., 15484., 19436., 11516.,
      14956., 18844., 23180., 10488., 13528., 16952., 20760., 8596.,  11108.,
      13940., 17092., 5840.,  7696.,  9808.,  12176.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   234.,
      402.,   602.,   834.,   410.,   642.,   906.,   1202.,  586.,   882.,
      1210.,  1570.,  762.,   1122.,  1514.,  1938.,  938.,   1362.,  1818.,
      2306.,  941.,   1185.,  1445.,  1721.,  226.,   554.,   914.,   1306.,
      1508.,  2036.,  2628.,  3284.,  1156.,  1556.,  2020.,  2548.,  2020.,
      2548.,  3140.,  3796.,  2884.,  3540.,  4260.,  5044.,  3748.,  4532.,
      5380.,  6292.,  4612.,  5524.,  6500.,  7540.,  3314.,  3834.,  4386.,
      4970.,  2263.,  2931.,  3647.,  4411.,  4862.,  6134.,  7502.,  8966.,
      3470.,  4422.,  5470.,  6614.,  4318.,  5206.,  6190.,  7270.,  6382.,
      7462.,  8638.,  9910.,  8446.,  9718.,  11086., 12550., 10510., 11974.,
      13534., 15190., 6863.,  7691.,  8567.,  9491.,  5860.,  6900.,  8004.,
      9172.,  11464., 13544., 15752., 18088., 7688.,  9512.,  11464., 13544.,
      8008.,  9576.,  11272., 13096., 10568., 12136., 13832., 15656., 14344.,
      16168., 18120., 20200., 18120., 20200., 22408., 24744., 11332., 12500.,
      13732., 15028., 10564., 11732., 12964., 14260., 19336., 21672., 24136.,
      26728., 11464., 13544., 15752., 18088., 7688.,  9512.,  11464., 13544.,
      8008.,  9576.,  11272., 13096., 10568., 12136., 13832., 15656., 14344.,
      16168., 18120., 20200., 9188.,  10228., 11332., 12500., 8932.,  9972.,
      11076., 12244., 21896., 24232., 26696., 29288., 19336., 21672., 24136.,
      26728., 11464., 13544., 15752., 18088., 7688.,  9512.,  11464., 13544.,
      8008.,  9576.,  11272., 13096., 10568., 12136., 13832., 15656., 7044.,
      7956.,  8932.,  9972.,  7300.,  8212.,  9188.,  10228., 18120., 20200.,
      22408., 24744., 21896., 24232., 26696., 29288., 19336., 21672., 24136.,
      26728., 11464., 13544., 15752., 18088., 7688.,  9512.,  11464., 13544.,
      8008.,  9576.,  11272., 13096., 4900.,  5684.,  6532.,  7444.,  5639.,
      6371.,  7151.,  7979.,  14110., 15766., 17518., 19366., 17710., 19558.,
      21502., 23542., 21310., 23350., 25486., 27718., 18574., 20550., 22622.,
      24790., 10526., 12182., 13934., 15782., 6574.,  7910.,  9342.,  10870.,
      2879.,  3515.,  4199.,  4931.,  3698.,  4218.,  4770.,  5354.,  9412.,
      10580., 11812., 13108., 12324., 13620., 14980., 16404., 15236., 16660.,
      18148., 19700., 18148., 19700., 21316., 22996., 14724., 16148., 17636.,
      19188., 5988.,  7028.,  8132.,  9300.,  1218.,  1674.,  2162.,  2682.,
      1733.,  2009.,  2301.,  2609.,  4538.,  5154.,  5802.,  6482.,  6250.,
      6930.,  7642.,  8386.,  7962.,  8706.,  9482.,  10290., 9674.,  10482.,
      11322., 12194., 11386., 12258., 13162., 14098., 6762.,  7442.,  8154.,
      8898.,  173.,   417.,   677.,   953.,   5.,     25.,    61.,    113.,
      58.,    162.,   298.,   466.,   234.,   402.,   602.,   834.,   410.,
      642.,   906.,   1202.,  586.,   882.,   1210.,  1570.,  762.,   1122.,
      1514.,  1938.,  938.,   1362.,  1818.,  2306.,  941.,   1185.,  1445.,
      1721.,  226.,   554.,   914.,   1306.,  1508.,  2036.,  2628.,  3284.,
      1156.,  1556.,  2020.,  2548.,  2020.,  2548.,  3140.,  3796.,  2884.,
      3540.,  4260.,  5044.,  3748.,  4532.,  5380.,  6292.,  4612.,  5524.,
      6500.,  7540.,  3314.,  3834.,  4386.,  4970.,  2263.,  2931.,  3647.,
      4411.,  4862.,  6134.,  7502.,  8966.,  3470.,  4422.,  5470.,  6614.,
      4318.,  5206.,  6190.,  7270.,  6382.,  7462.,  8638.,  9910.,  8446.,
      9718.,  11086., 12550., 10510., 11974., 13534., 15190., 6863.,  7691.,
      8567.,  9491.,  5860.,  6900.,  8004.,  9172.,  11464., 13544., 15752.,
      18088., 7688.,  9512.,  11464., 13544., 8008.,  9576.,  11272., 13096.,
      10568., 12136., 13832., 15656., 14344., 16168., 18120., 20200., 18120.,
      20200., 22408., 24744., 11332., 12500., 13732., 15028., 10564., 11732.,
      12964., 14260., 19336., 21672., 24136., 26728., 11464., 13544., 15752.,
      18088., 7688.,  9512.,  11464., 13544., 8008.,  9576.,  11272., 13096.,
      10568., 12136., 13832., 15656., 14344., 16168., 18120., 20200., 9188.,
      10228., 11332., 12500., 8932.,  9972.,  11076., 12244., 21896., 24232.,
      26696., 29288., 19336., 21672., 24136., 26728., 11464., 13544., 15752.,
      18088., 7688.,  9512.,  11464., 13544., 8008.,  9576.,  11272., 13096.,
      10568., 12136., 13832., 15656., 7044.,  7956.,  8932.,  9972.,  7300.,
      8212.,  9188.,  10228., 18120., 20200., 22408., 24744., 21896., 24232.,
      26696., 29288., 19336., 21672., 24136., 26728., 11464., 13544., 15752.,
      18088., 7688.,  9512.,  11464., 13544., 8008.,  9576.,  11272., 13096.,
      4900.,  5684.,  6532.,  7444.,  5639.,  6371.,  7151.,  7979.,  14110.,
      15766., 17518., 19366., 17710., 19558., 21502., 23542., 21310., 23350.,
      25486., 27718., 18574., 20550., 22622., 24790., 10526., 12182., 13934.,
      15782., 6574.,  7910.,  9342.,  10870., 2879.,  3515.,  4199.,  4931.,
      3698.,  4218.,  4770.,  5354.,  9412.,  10580., 11812., 13108., 12324.,
      13620., 14980., 16404., 15236., 16660., 18148., 19700., 18148., 19700.,
      21316., 22996., 14724., 16148., 17636., 19188., 5988.,  7028.,  8132.,
      9300.,  1218.,  1674.,  2162.,  2682.,  1733.,  2009.,  2301.,  2609.,
      4538.,  5154.,  5802.,  6482.,  6250.,  6930.,  7642.,  8386.,  7962.,
      8706.,  9482.,  10290., 9674.,  10482., 11322., 12194., 11386., 12258.,
      13162., 14098., 6762.,  7442.,  8154.,  8898.,  173.,   417.,   677.,
      953.,   5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,
      234.,   402.,   602.,   834.,   410.,   642.,   906.,   1202.,  586.,
      882.,   1210.,  1570.,  762.,   1122.,  1514.,  1938.,  938.,   1362.,
      1818.,  2306.,  941.,   1185.,  1445.,  1721.,  226.,   554.,   914.,
      1306.,  1508.,  2036.,  2628.,  3284.,  1156.,  1556.,  2020.,  2548.,
      2020.,  2548.,  3140.,  3796.,  2884.,  3540.,  4260.,  5044.,  3748.,
      4532.,  5380.,  6292.,  4612.,  5524.,  6500.,  7540.,  3314.,  3834.,
      4386.,  4970.,  2263.,  2931.,  3647.,  4411.,  4862.,  6134.,  7502.,
      8966.,  3470.,  4422.,  5470.,  6614.,  4318.,  5206.,  6190.,  7270.,
      6382.,  7462.,  8638.,  9910.,  8446.,  9718.,  11086., 12550., 10510.,
      11974., 13534., 15190., 6863.,  7691.,  8567.,  9491.,  5860.,  6900.,
      8004.,  9172.,  11464., 13544., 15752., 18088., 7688.,  9512.,  11464.,
      13544., 8008.,  9576.,  11272., 13096., 10568., 12136., 13832., 15656.,
      14344., 16168., 18120., 20200., 18120., 20200., 22408., 24744., 11332.,
      12500., 13732., 15028., 10564., 11732., 12964., 14260., 19336., 21672.,
      24136., 26728., 11464., 13544., 15752., 18088., 7688.,  9512.,  11464.,
      13544., 8008.,  9576.,  11272., 13096., 10568., 12136., 13832., 15656.,
      14344., 16168., 18120., 20200., 9188.,  10228., 11332., 12500., 8932.,
      9972.,  11076., 12244., 21896., 24232., 26696., 29288., 19336., 21672.,
      24136., 26728., 11464., 13544., 15752., 18088., 7688.,  9512.,  11464.,
      13544., 8008.,  9576.,  11272., 13096., 10568., 12136., 13832., 15656.,
      7044.,  7956.,  8932.,  9972.,  7300.,  8212.,  9188.,  10228., 18120.,
      20200., 22408., 24744., 21896., 24232., 26696., 29288., 19336., 21672.,
      24136., 26728., 11464., 13544., 15752., 18088., 7688.,  9512.,  11464.,
      13544., 8008.,  9576.,  11272., 13096., 4900.,  5684.,  6532.,  7444.,
      5639.,  6371.,  7151.,  7979.,  14110., 15766., 17518., 19366., 17710.,
      19558., 21502., 23542., 21310., 23350., 25486., 27718., 18574., 20550.,
      22622., 24790., 10526., 12182., 13934., 15782., 6574.,  7910.,  9342.,
      10870., 2879.,  3515.,  4199.,  4931.,  3698.,  4218.,  4770.,  5354.,
      9412.,  10580., 11812., 13108., 12324., 13620., 14980., 16404., 15236.,
      16660., 18148., 19700., 18148., 19700., 21316., 22996., 14724., 16148.,
      17636., 19188., 5988.,  7028.,  8132.,  9300.,  1218.,  1674.,  2162.,
      2682.,  1733.,  2009.,  2301.,  2609.,  4538.,  5154.,  5802.,  6482.,
      6250.,  6930.,  7642.,  8386.,  7962.,  8706.,  9482.,  10290., 9674.,
      10482., 11322., 12194., 11386., 12258., 13162., 14098., 6762.,  7442.,
      8154.,  8898.,  173.,   417.,   677.,   953.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,
      16920., 480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920.,
      750.,   4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,
      6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,
      13380., 25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,
      16920., 720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380.,
      1080.,  6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,
      7308.,  18732., 35532., 1080.,  6264.,  16056., 30456., 900.,   5220.,
      13380., 25380., 720.,   4176.,  10704., 20304., 840.,   4872.,  12488.,
      23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732., 35532.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,
      7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610.,
      29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,
      6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732.,
      35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1260.,  7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,
      4872.,  12488., 23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,
      15610., 29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854.,
      41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532.,
      1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 720.,
      4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,  6264.,
      16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732.,
      35532., 1080.,  6264.,  16056., 30456., 900.,   5220.,  13380., 25380.,
      720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920., 750.,
      4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,
      16920., 480.,   2784.,  7136.,  13536., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 720.,   4176.,  10704., 20304., 840.,
      4872.,  12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,
      10704., 20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,
      13536., 600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150.,
      900.,   5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,
      6090.,  15610., 29610., 900.,   5220.,  13380., 25380., 750.,   4350.,
      11150., 21150., 600.,   3480.,  8920.,  16920., 720.,   4176.,  10704.,
      20304., 900.,   5220.,  13380., 25380., 1080.,  6264.,  16056., 30456.,
      1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,
      6264.,  16056., 30456., 900.,   5220.,  13380., 25380., 720.,   4176.,
      10704., 20304., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610.,
      29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,
      6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732.,
      35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1260.,  7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,
      4872.,  12488., 23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,
      15610., 29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854.,
      41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532.,
      1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 840.,
      4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,
      18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854.,
      41454., 1260.,  7308.,  18732., 35532., 1050.,  6090.,  15610., 29610.,
      840.,   4872.,  12488., 23688., 720.,   4176.,  10704., 20304., 900.,
      5220.,  13380., 25380., 1080.,  6264.,  16056., 30456., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 900.,   5220.,  13380., 25380., 750.,   4350.,  11150.,
      21150., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 720.,   4176.,  10704., 20304., 840.,
      4872.,  12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,
      10704., 20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,
      13536., 480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920.,
      720.,   4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,
      4872.,  12488., 23688., 720.,   4176.,  10704., 20304., 600.,   3480.,
      8920.,  16920., 480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,
      16920., 750.,   4350.,  11150., 21150., 900.,   5220.,  13380., 25380.,
      1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 900.,
      5220.,  13380., 25380., 750.,   4350.,  11150., 21150., 600.,   3480.,
      8920.,  16920., 720.,   4176.,  10704., 20304., 900.,   5220.,  13380.,
      25380., 1080.,  6264.,  16056., 30456., 1260.,  7308.,  18732., 35532.,
      1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056., 30456., 900.,
      5220.,  13380., 25380., 720.,   4176.,  10704., 20304., 840.,   4872.,
      12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732.,
      35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1260.,  7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,
      4872.,  12488., 23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,
      15610., 29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854.,
      41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532.,
      1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 840.,
      4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,
      18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854.,
      41454., 1260.,  7308.,  18732., 35532., 1050.,  6090.,  15610., 29610.,
      840.,   4872.,  12488., 23688., 840.,   4872.,  12488., 23688., 1050.,
      6090.,  15610., 29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1080.,  6264.,  16056., 30456., 900.,   5220.,  13380.,
      25380., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920.,
      750.,   4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,
      6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,
      13380., 25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,
      16920., 480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920.,
      720.,   4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,
      4872.,  12488., 23688., 720.,   4176.,  10704., 20304., 600.,   3480.,
      8920.,  16920., 480.,   2784.,  7136.,  13536.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1724.,
      3036.,  4604.,  6428.,  3068.,  4892.,  6972.,  9308.,  3772.,  5084.,
      6652.,  8476.,  380.,   1180.,  2236.,  3548.,  1724.,  3036.,  4604.,
      6428.,  2558.,  3470.,  4510.,  5678.,  860.,   2428.,  4252.,  6332.,
      6840.,  9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 15672.,
      19832., 24504., 29688., 13624., 17784., 22456., 27640., 6840.,  9976.,
      13624., 17784., 8888.,  12024., 15672., 19832., 8348.,  10428., 12764.,
      15356., 7354.,  9578.,  12186., 15178., 14004., 18964., 24692., 31188.,
      8564.,  13012., 18228., 24212., 11956., 16916., 22644., 29140., 19444.,
      24916., 31156., 38164., 14004., 18964., 24692., 31188., 8564.,  13012.,
      18228., 24212., 6490.,  8970.,  11834., 15082., 5816.,  8952.,  12600.,
      16760., 22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472.,
      22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472., 22512.,
      29808., 38128., 47472., 22512., 29808., 38128., 47472., 12600., 16760.,
      21432., 26616., 9912.,  13048., 16696., 20856., 22512., 29808., 38128.,
      47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472.,
      22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472., 22512.,
      29808., 38128., 47472., 16696., 20856., 25528., 30712., 5816.,  8952.,
      12600., 16760., 22512., 29808., 38128., 47472., 22512., 29808., 38128.,
      47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472.,
      22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472., 12600.,
      16760., 21432., 26616., 9912.,  13048., 16696., 20856., 22512., 29808.,
      38128., 47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128.,
      47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472.,
      22512., 29808., 38128., 47472., 16696., 20856., 25528., 30712., 5626.,
      8362.,  11482., 14986., 20788., 26772., 33524., 41044., 19444., 24916.,
      31156., 38164., 18740., 24724., 31476., 38996., 22132., 28628., 35892.,
      43924., 20788., 26772., 33524., 41044., 19444., 24916., 31156., 38164.,
      8858.,  11850., 15226., 18986., 7324.,  9404.,  11740., 14332., 13624.,
      17784., 22456., 27640., 6840.,  9976.,  13624., 17784., 8888.,  12024.,
      15672., 19832., 15672., 19832., 24504., 29688., 13624., 17784., 22456.,
      27640., 6840.,  9976.,  13624., 17784., 3932.,  5500.,  7324.,  9404.,
      4766.,  5934.,  7230.,  8654.,  13948., 16796., 19900., 23260., 10556.,
      12892., 15484., 18332., 3068.,  4892.,  6972.,  9308.,  8508.,  10844.,
      13436., 16284., 13948., 16796., 19900., 23260., 10556., 12892., 15484.,
      18332., 510.,   1422.,  2462.,  3630.,  30.,    174.,   446.,   846.,
      380.,   1180.,  2236.,  3548.,  1724.,  3036.,  4604.,  6428.,  3068.,
      4892.,  6972.,  9308.,  3772.,  5084.,  6652.,  8476.,  380.,   1180.,
      2236.,  3548.,  1724.,  3036.,  4604.,  6428.,  2558.,  3470.,  4510.,
      5678.,  860.,   2428.,  4252.,  6332.,  6840.,  9976.,  13624., 17784.,
      8888.,  12024., 15672., 19832., 15672., 19832., 24504., 29688., 13624.,
      17784., 22456., 27640., 6840.,  9976.,  13624., 17784., 8888.,  12024.,
      15672., 19832., 8348.,  10428., 12764., 15356., 7354.,  9578.,  12186.,
      15178., 14004., 18964., 24692., 31188., 8564.,  13012., 18228., 24212.,
      11956., 16916., 22644., 29140., 19444., 24916., 31156., 38164., 14004.,
      18964., 24692., 31188., 8564.,  13012., 18228., 24212., 6490.,  8970.,
      11834., 15082., 5816.,  8952.,  12600., 16760., 22512., 29808., 38128.,
      47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472.,
      22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472., 22512.,
      29808., 38128., 47472., 12600., 16760., 21432., 26616., 9912.,  13048.,
      16696., 20856., 22512., 29808., 38128., 47472., 22512., 29808., 38128.,
      47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472.,
      22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472., 16696.,
      20856., 25528., 30712., 5816.,  8952.,  12600., 16760., 22512., 29808.,
      38128., 47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128.,
      47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472.,
      22512., 29808., 38128., 47472., 12600., 16760., 21432., 26616., 9912.,
      13048., 16696., 20856., 22512., 29808., 38128., 47472., 22512., 29808.,
      38128., 47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128.,
      47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472.,
      16696., 20856., 25528., 30712., 5626.,  8362.,  11482., 14986., 20788.,
      26772., 33524., 41044., 19444., 24916., 31156., 38164., 18740., 24724.,
      31476., 38996., 22132., 28628., 35892., 43924., 20788., 26772., 33524.,
      41044., 19444., 24916., 31156., 38164., 8858.,  11850., 15226., 18986.,
      7324.,  9404.,  11740., 14332., 13624., 17784., 22456., 27640., 6840.,
      9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 15672., 19832.,
      24504., 29688., 13624., 17784., 22456., 27640., 6840.,  9976.,  13624.,
      17784., 3932.,  5500.,  7324.,  9404.,  4766.,  5934.,  7230.,  8654.,
      13948., 16796., 19900., 23260., 10556., 12892., 15484., 18332., 3068.,
      4892.,  6972.,  9308.,  8508.,  10844., 13436., 16284., 13948., 16796.,
      19900., 23260., 10556., 12892., 15484., 18332., 510.,   1422.,  2462.,
      3630.,  30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,
      1724.,  3036.,  4604.,  6428.,  3068.,  4892.,  6972.,  9308.,  3772.,
      5084.,  6652.,  8476.,  380.,   1180.,  2236.,  3548.,  1724.,  3036.,
      4604.,  6428.,  2558.,  3470.,  4510.,  5678.,  860.,   2428.,  4252.,
      6332.,  6840.,  9976.,  13624., 17784., 8888.,  12024., 15672., 19832.,
      15672., 19832., 24504., 29688., 13624., 17784., 22456., 27640., 6840.,
      9976.,  13624., 17784., 8888.,  12024., 15672., 19832., 8348.,  10428.,
      12764., 15356., 7354.,  9578.,  12186., 15178., 14004., 18964., 24692.,
      31188., 8564.,  13012., 18228., 24212., 11956., 16916., 22644., 29140.,
      19444., 24916., 31156., 38164., 14004., 18964., 24692., 31188., 8564.,
      13012., 18228., 24212., 6490.,  8970.,  11834., 15082., 5816.,  8952.,
      12600., 16760., 22512., 29808., 38128., 47472., 22512., 29808., 38128.,
      47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472.,
      22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472., 12600.,
      16760., 21432., 26616., 9912.,  13048., 16696., 20856., 22512., 29808.,
      38128., 47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128.,
      47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472.,
      22512., 29808., 38128., 47472., 16696., 20856., 25528., 30712., 5816.,
      8952.,  12600., 16760., 22512., 29808., 38128., 47472., 22512., 29808.,
      38128., 47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128.,
      47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128., 47472.,
      12600., 16760., 21432., 26616., 9912.,  13048., 16696., 20856., 22512.,
      29808., 38128., 47472., 22512., 29808., 38128., 47472., 22512., 29808.,
      38128., 47472., 22512., 29808., 38128., 47472., 22512., 29808., 38128.,
      47472., 22512., 29808., 38128., 47472., 16696., 20856., 25528., 30712.,
      5626.,  8362.,  11482., 14986., 20788., 26772., 33524., 41044., 19444.,
      24916., 31156., 38164., 18740., 24724., 31476., 38996., 22132., 28628.,
      35892., 43924., 20788., 26772., 33524., 41044., 19444., 24916., 31156.,
      38164., 8858.,  11850., 15226., 18986., 7324.,  9404.,  11740., 14332.,
      13624., 17784., 22456., 27640., 6840.,  9976.,  13624., 17784., 8888.,
      12024., 15672., 19832., 15672., 19832., 24504., 29688., 13624., 17784.,
      22456., 27640., 6840.,  9976.,  13624., 17784., 3932.,  5500.,  7324.,
      9404.,  4766.,  5934.,  7230.,  8654.,  13948., 16796., 19900., 23260.,
      10556., 12892., 15484., 18332., 3068.,  4892.,  6972.,  9308.,  8508.,
      10844., 13436., 16284., 13948., 16796., 19900., 23260., 10556., 12892.,
      15484., 18332., 510.,   1422.,  2462.,  3630.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2048.,  2840.,  3752.,  4788.,  5194.,  5600.,  5240.,  4740.,  4096.,
      4220.,  5725.,  7420.,  9310.,  9940.,  10570., 9730.,  8675.,  7400.,
      7560.,  10110., 12936., 16044., 16947., 17850., 16248., 14340., 12120.,
      12320., 16310., 20678., 25431., 26656., 27881., 25172., 22050., 18508.,
      17858., 23230., 28979., 35112., 35889., 37114., 33083., 28640., 23778.,
      21796., 28038., 34656., 41657., 41986., 43211., 38306., 32990., 27256.,
      23942., 30606., 37645., 45066., 44947., 46172., 40841., 35100., 28942.,
      24016., 30509., 37344., 44527., 43932., 45129., 39828., 34155., 28104.,
      21410., 27022., 32927., 39130., 38010., 39130., 34519., 29590., 24338.,
      15872., 19830., 24016., 28434., 26740., 27734., 24536., 21090., 17392.,
      7456.,  9860.,  12488., 15344., 15750., 16156., 14600., 12800., 10752.,
      12608., 16391., 20430., 24730., 24976., 25158., 22432., 19425., 16132.,
      18312., 23412., 28816., 34530., 34601., 34608., 30696., 26450., 21864.,
      24372., 30918., 37832., 45121., 45066., 44947., 39770., 34190., 28200.,
      25174., 31694., 38581., 45842., 45339., 44772., 39617., 34060., 28094.,
      24184., 30230., 36642., 43427., 42476., 41461., 36776., 31690., 26196.,
      21402., 26526., 32015., 37876., 36477., 35014., 31247., 27080., 22506.,
      16288., 19767., 23552., 27649., 25774., 23835., 21468., 18765., 15720.,
      14230., 18500., 23065., 27930., 29050., 30170., 26845., 23200., 19230.,
      16128., 20810., 25760., 30982., 31976., 32970., 29144., 25030., 20624.,
      8832.,  10736., 12776., 14956., 14146., 13272., 10712., 9340.,  7808.,
      12676., 15345., 18208., 21270., 20236., 19138., 15550., 13535., 11296.,
      17352., 21034., 24984., 29208., 27999., 26726., 21912., 19040., 15864.,
      23112., 28118., 33482., 39211., 37876., 36477., 30176., 26170., 21764.,
      18986., 22622., 26615., 30972., 29189., 27342., 21959., 19320., 16282.,
      16268., 21286., 26660., 32397., 33366., 34271., 30318., 25910., 21552.,
      21550., 27438., 33681., 40286., 40807., 41264., 35989., 30260., 25030.,
      24880., 31105., 37664., 44563., 44608., 44589., 38436., 31855., 26248.,
      25866., 31802., 38035., 44570., 44090., 43546., 37091., 30250., 24874.,
      24256., 29214., 34416., 39866., 38812., 37694., 31576., 25130., 20656.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    10.,    16.,    22.,    28.,    34.,    32.,   21.,
      12.,   38.,   80.,    101.,   122.,   143.,   164.,   138.,  84.,
      54.,   144.,  273.,   318.,   363.,   408.,   453.,   360.,  210.,
      148.,  364.,  652.,   730.,   808.,   886.,   964.,   740.,  420.,
      302.,  700.,  1198.,  1276.,  1354.,  1432.,  1510.,  1132., 630.,
      456.,  1036., 1744.,  1822.,  1900.,  1978.,  2056.,  1524., 840.,
      610.,  1372., 2290.,  2368.,  2446.,  2524.,  2602.,  1916., 1050.,
      714.,  1557., 2532.,  2604.,  2676.,  2748.,  2820.,  2031., 1092.,
      661.,  1418., 2273.,  2330.,  2387.,  2444.,  2501.,  1778., 945.,
      430.,  913.,  1450.,  1483.,  1516.,  1549.,  1582.,  1115., 588.,
      13.,   40.,   82.,    124.,   166.,   208.,   250.,   188.,  105.,
      120.,  278.,  476.,   569.,   662.,   755.,   848.,   618.,  336.,
      342.,  756.,  1245.,  1398.,  1551.,  1704.,  1857.,  1332., 714.,
      700.,  1516., 2452.,  2674.,  2896.,  3118.,  3340.,  2372., 1260.,
      1190., 2524., 4006.,  4228.,  4450.,  4672.,  4894.,  3436., 1806.,
      1680., 3532., 5560.,  5782.,  6004.,  6226.,  6448.,  4500., 2352.,
      2170., 4540., 7114.,  7336.,  7558.,  7780.,  8002.,  5564., 2898.,
      2010., 4185., 6528.,  6708.,  6888.,  7068.,  7248.,  5019., 2604.,
      1609., 3338., 5189.,  5318.,  5447.,  5576.,  5705.,  3938., 2037.,
      946.,  1957., 3034.,  3103.,  3172.,  3241.,  3310.,  2279., 1176.,
      25.,   76.,   154.,   232.,   310.,   388.,   466.,   344.,  189.,
      228.,  518.,  872.,   1037.,  1202.,  1367.,  1532.,  1098., 588.,
      630.,  1368., 2217.,  2478.,  2739.,  3000.,  3261.,  2304., 1218.,
      1252., 2668., 4252.,  4618.,  4984.,  5350.,  5716.,  4004., 2100.,
      2078., 4348., 6814.,  7180.,  7546.,  7912.,  8278.,  5740., 2982.,
      2904., 6028., 9376.,  9742.,  10108., 10474., 10840., 7476., 3864.,
      3730., 7708., 11938., 12304., 12670., 13036., 13402., 9212., 4746.,
      3306., 6813., 10524., 10812., 11100., 11388., 11676., 8007., 4116.,
      2557., 5258., 8105.,  8306.,  8507.,  8708.,  8909.,  6098., 3129.,
      1462., 3001., 4618.,  4723.,  4828.,  4933.,  5038.,  3443., 1764.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5808.,  7652.,  9832.,  12348., 11764., 10924., 10344., 9044.,  7344.,
      9196.,  12629., 15546., 18851., 19021., 18935., 15706., 11545., 7916.,
      12872., 15686., 17132., 19018., 19214., 19026., 15884., 12590., 10888.,
      13540., 17583., 21582., 26105., 26303., 26117., 21070., 16555., 12516.,
      17756., 20441., 24226., 27375., 26069., 25243., 22546., 19237., 15516.,
      14196., 17955., 21910., 26117., 25547., 26385., 21558., 17023., 13236.,
      17292., 20717., 23434., 25243., 26081., 26279., 22650., 18169., 15596.,
      13400., 16522., 20180., 23814., 24282., 24238., 19668., 17362., 14200.,
      11876., 12727., 16030., 18017., 18139., 17749., 15854., 13195., 11012.,
      9584.,  11932., 14680., 16996., 17756., 18132., 16088., 13356., 9904.,
      9072.,  11284., 13864., 16108., 15524., 14684., 11464., 7460.,  6160.,
      13628., 14449., 15634., 17639., 17073., 16123., 13170., 11317., 9948.,
      13064., 16062., 19548., 23090., 22262., 21050., 17340., 12518., 10056.,
      17140., 20403., 24278., 26069., 25243., 26081., 23286., 19215., 15284.,
      13836., 17277., 21322., 25547., 26385., 26839., 22810., 17513., 14412.,
      17188., 19399., 22206., 26081., 26279., 26093., 22110., 18915., 15876.,
      14396., 18161., 22546., 26839., 26653., 26083., 23810., 20285., 15804.,
      13752., 18082., 22052., 24686., 23650., 24278., 20772., 16138., 11832.,
      13684., 16691., 18358., 19493., 20127., 20505., 17510., 13511., 11124.,
      7632.,  10508., 13112., 15988., 16524., 16804., 14488., 11420., 7568.,
      6704.,  6980.,  9608.,  12572., 13012., 14188., 12776., 11380., 10224.,
      10380., 12525., 15050., 17995., 17141., 17823., 14122., 11089., 9196.,
      12136., 13782., 15884., 18490., 20318., 21634., 19660., 17086., 14632.,
      14244., 17847., 22110., 26385., 26839., 26653., 21790., 19027., 15236.,
      15804., 18177., 23250., 26279., 26093., 25267., 22498., 18637., 14908.,
      15540., 19499., 24102., 26653., 26083., 26921., 23814., 19399., 15092.,
      14412., 18293., 22810., 25267., 26105., 26303., 22090., 16577., 13228.,
      17304., 19546., 22388., 25174., 26154., 25502., 21428., 18178., 15128.,
      11012., 13807., 17038., 20041., 20675., 21053., 16830., 11587., 8804.,
      13712., 15356., 17400., 17124., 15612., 15892., 13944., 11180., 8048.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    59.,    101.,   143.,   185.,   227.,   222.,   149.,
      70.,    244.,   538.,   694.,   850.,   1006.,  1162.,  996.,   614.,
      363.,   1002.,  1941.,  2283.,  2625.,  2967.,  3309.,  2658.,  1563.,
      1052.,  2632.,  4772.,  5372.,  5972.,  6572.,  7172.,  5544.,  3164.,
      2228.,  5208.,  8972.,  9572.,  9980.,  10132., 10028., 7416.,  4084.,
      3212.,  7144.,  11828., 12428., 12068., 11452., 10580., 7752.,  4236.,
      3428.,  7544.,  12380., 12980., 11852., 10468., 8828.,  6552.,  3620.,
      2769.,  6046.,  9855.,  10413., 8475.,  6281.,  3831.,  2982.,  1713.,
      874.,   1996.,  3382.,  3826.,  4270.,  4714.,  5158.,  3804.,  2090.,
      839.,   1842.,  3017.,  3275.,  3533.,  3791.,  4049.,  2922.,  1575.,
      77.,    262.,   563.,   893.,   1223.,  1553.,  1883.,  1422.,  797.,
      886.,   2068.,  3562.,  4294.,  5026.,  5758.,  6490.,  4740.,  2582.,
      2595.,  5754.,  9501.,  10707., 11913., 13119., 14325., 10290., 5523.,
      5372.,  11656., 18884., 20636., 22388., 24140., 25892., 18408., 9788.,
      9236.,  19608., 31148., 32900., 31388., 29620., 27596., 19512., 10324.,
      9836.,  20776., 32852., 34604., 32324., 29788., 26996., 19080., 10092.,
      9668.,  20408., 32252., 34004., 30956., 27652., 24092., 17112., 9092.,
      6921.,  14638., 23175., 24597., 20451., 16049., 11391., 8310.,  4521.,
      2266.,  4972.,  8134.,  9154.,  10174., 11194., 12214., 8700.,  4634.,
      1871.,  4002.,  6401.,  6947.,  7493.,  8039.,  8585.,  6042.,  3183.,
      149.,   502.,   1067.,  1685.,  2303.,  2921.,  3539.,  2622.,  1445.,
      1702.,  3892.,  6586.,  7894.,  9202.,  10510., 11818., 8484.,  4550.,
      4827.,  10506., 16869., 18683., 20497., 22311., 24125., 16450., 7755.,
      9500.,  20040., 29668., 31548., 33428., 35308., 37188., 24808., 11164.,
      14260., 29784., 42828., 44708., 40252., 35540., 30572., 19768., 7732.,
      12684., 26600., 36212., 38092., 32868., 27388., 21652., 13192., 3532.,
      10340., 21880., 27292., 29172., 23180., 16932., 18620., 13272., 6756.,
      3713.,  8254.,  12687., 13949., 14763., 15321., 15623., 10246., 4129.,
      2698.,  5772.,  6486.,  7058.,  7630.,  8202.,  8774.,  4828.,  394.,
      151.,   402.,   761.,   827.,   893.,   959.,   1025.,  842.,   503.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13536., 19288., 26064., 30024., 31848., 29256., 25040., 18520., 13536.,
      20280., 28110., 33204., 39978., 39266., 38234., 29172., 21246., 13944.,
      27728., 33604., 41368., 47116., 48028., 44524., 34584., 24932., 19280.,
      31528., 39738., 46076., 55086., 53590., 51774., 40700., 33354., 25192.,
      34120., 39666., 47372., 53590., 51774., 50278., 41612., 32642., 27016.,
      32296., 39274., 44252., 51774., 50278., 52878., 42012., 35002., 27304.,
      32520., 37346., 44204., 50278., 52878., 51382., 45996., 36338., 30152.,
      28752., 34708., 38904., 45820., 43532., 45852., 37624., 34164., 26896.,
      24664., 28614., 34372., 38162., 39114., 36994., 35204., 29494., 24664.,
      17248., 23480., 26896., 31848., 31880., 33448., 29584., 26424., 19616.,
      20640., 23256., 27408., 29256., 28712., 26120., 19280., 14552., 11680.,
      25784., 30558., 33236., 38234., 34642., 32586., 23188., 19214., 16248.,
      31120., 34916., 40344., 44524., 42044., 40396., 32536., 25220., 22160.,
      32296., 39274., 44252., 51774., 50278., 52878., 42012., 35002., 27304.,
      32520., 37346., 44204., 50278., 52878., 51382., 45996., 36338., 30152.,
      30696., 37978., 43964., 52878., 51382., 53982., 45372., 40746., 31464.,
      30920., 37906., 47308., 51382., 53982., 52486., 48332., 40034., 30920.,
      26896., 36276., 39736., 45852., 44588., 47932., 41016., 34708., 24528.,
      22872., 30806., 36772., 36994., 39994., 39922., 36004., 27206., 19672.,
      19104., 25912., 30608., 33448., 32456., 32680., 27216., 21944., 12512.,
      18272., 17752., 21648., 26120., 25576., 26888., 21136., 18008., 17248.,
      21816., 23534., 25652., 32586., 31874., 36282., 29940., 25310., 22072.,
      27408., 29636., 34584., 40396., 43356., 42732., 39512., 32996., 26896.,
      30696., 37978., 43964., 52878., 51382., 53982., 45372., 40746., 31464.,
      30920., 37906., 47308., 51382., 53982., 52486., 48332., 40034., 30920.,
      29928., 40906., 46044., 53982., 52486., 55086., 46684., 37978., 28328.,
      31496., 38786., 48364., 52486., 55086., 53590., 44204., 34386., 27784.,
      28560., 35604., 40568., 47932., 47692., 47644., 35256., 27124., 18768.,
      29208., 32294., 37124., 39922., 40554., 38626., 30724., 20182., 14168.,
      26720., 29880., 30416., 32680., 30856., 31080., 23504., 17976., 10144.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   140.,   394.,   706.,   1018.,  1330.,  1642.,  1644.,  1118.,
      460.,  1400.,  2756.,  2612.,  3812.,  5012.,  6212.,  5368.,  3340.,
      2314., 4420.,  7214.,  5654.,  6462.,  8614.,  10766., 7908.,  3082.,
      5080., 8880.,  8776.,  8424.,  7368.,  8680.,  11336., 8880.,  4056.,
      5112., 11760., 13736., 8776.,  8424.,  7368.,  8680.,  7024.,  3256.,
      4312., 10736., 15816., 13736., 8776.,  8424.,  7368.,  5168.,  2456.,
      3512., 8880.,  13992., 15816., 13736., 8776.,  8424.,  4656.,  1656.,
      2642., 6740.,  10630., 12974., 14486., 12094., 6822.,  4596.,  914.,
      1500., 3928.,  6068.,  7524.,  8980.,  9604.,  6324.,  1048.,  412.,
      278.,  828.,   1714.,  2218.,  2722.,  3226.,  2898.,  1884.,  150.,
      190.,  716.,   1642.,  2722.,  3802.,  4882.,  5962.,  4780.,  2814.,
      2572., 3768.,  5380.,  3700.,  5412.,  7124.,  8836.,  4856.,  3084.,
      5802., 5700.,  8398.,  7094.,  6110.,  8518.,  10926., 7140.,  4522.,
      6424., 10736., 13000., 11624., 11592., 11880., 15560., 11248., 6936.,
      7992., 13104., 18984., 13000., 11624., 11592., 11880., 8880.,  5624.,
      6680., 13616., 20040., 18984., 13000., 11624., 11592., 6512.,  4312.,
      5368., 11248., 19240., 20040., 18984., 13000., 11624., 7536.,  3000.,
      3570., 7508.,  12838., 15438., 15158., 13022., 5958.,  3316.,  1842.,
      1756., 4440.,  8180.,  10148., 12116., 11204., 8436.,  3416.,  988.,
      950.,  2428.,  4498.,  5770.,  7042.,  8314.,  6706.,  3996.,  310.,
      30.,   140.,   394.,   706.,   1018.,  1330.,  1642.,  1644.,  1118.,
      460.,  1400.,  2756.,  2612.,  3812.,  5012.,  6212.,  5368.,  3340.,
      2314., 4420.,  7214.,  5654.,  6462.,  8614.,  10766., 7908.,  3082.,
      5080., 8880.,  8776.,  8424.,  7368.,  8680.,  11336., 8880.,  4056.,
      5112., 11760., 13736., 8776.,  8424.,  7368.,  8680.,  7024.,  3256.,
      4312., 10736., 15816., 13736., 8776.,  8424.,  7368.,  5168.,  2456.,
      3512., 8880.,  13992., 15816., 13736., 8776.,  8424.,  4656.,  1656.,
      2642., 6740.,  10630., 12974., 14486., 12094., 6822.,  4596.,  914.,
      1500., 3928.,  6068.,  7524.,  8980.,  9604.,  6324.,  1048.,  412.,
      278.,  828.,   1714.,  2218.,  2722.,  3226.,  2898.,  1884.,  150.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7280.,  8192.,  10180., 11360., 13480., 14880., 17132., 18768., 18380.,
      20008., 19500., 21120., 17768., 19168., 15492., 16656., 12656., 13568.,
      14396., 15600., 19361., 20852., 23850., 25584., 28715., 30712., 29565.,
      31568., 30287., 32296., 26450., 28168., 21901., 23308., 16620., 17696.,
      21448., 22816., 27214., 28920., 31692., 33696., 36634., 38960., 36770.,
      39116., 36778., 39144., 31340., 33376., 25086., 26768., 17992., 19296.,
      25860., 27520., 31927., 34008., 35958., 38424., 40605., 43484., 40223.,
      43136., 39713., 42660., 33374., 35920., 26051., 28168., 17716., 19376.,
      27476., 29192., 32801., 34936., 35190., 37708., 38191., 41120., 36081.,
      38980., 34675., 37608., 32134., 34668., 28613., 30720., 24084., 25736.,
      22372., 24080., 29131., 31256., 36150., 38656., 43777., 46692., 43971.,
      46856., 45765., 48684., 40622., 43144., 34503., 36600., 27380., 29024.,
      26484., 28184., 32885., 35000., 38646., 41140., 45011., 47912., 43413.,
      46284., 44311., 47216., 38358., 40868., 31433., 33520., 23508., 25144.,
      22552., 24000., 26294., 28084., 30612., 32768., 35530., 38076., 34538.,
      37104., 37066., 39716., 32580., 34896., 27270., 29228., 21112., 22688.,
      17756., 19080., 18783., 20408., 24418., 26364., 30585., 32872., 32499.,
      34792., 34733., 37096., 31570., 33628., 27667., 29400., 23004., 24392.,
      17232., 18304., 21572., 22872., 26296., 27840., 31420., 33224., 31948.,
      33744., 33692., 35544., 29720., 31328., 25156., 26504., 19984., 21056.,
      14256., 15232., 18980., 20240., 24200., 25760., 27180., 28992., 25868.,
      27672., 24428., 26224., 21128., 22688., 17252., 18560., 12784., 13824.,
      22844., 24192., 26677., 28316., 31002., 32952., 32191., 34408., 29777.,
      31936., 27107., 29208., 21490., 23296., 19249., 20740., 16268., 17424.,
      18408., 19872., 23758., 25552., 29660., 31808., 35690., 38152., 35762.,
      38180., 35578., 37952., 31644., 33696., 26910., 28616., 21352., 22688.,
      27044., 28752., 33243., 35352., 40118., 42656., 46353., 49284., 45011.,
      47912., 43413., 46284., 37934., 40424., 31511., 33592., 24116., 25760.,
      24884., 26584., 28933., 31032., 33654., 36180., 39075., 42056., 38245.,
      41196., 37159., 40080., 32790., 35332., 27481., 29616., 21204., 22904.,
      24260., 25952., 26543., 28632., 29494., 32008., 37237., 40204., 38711.,
      41648., 39929., 42836., 36158., 38688., 31451., 33576., 25780., 27472.,
      24660., 26344., 31577., 33656., 39158., 41660., 47431., 50384., 47113.,
      50036., 46539., 49432., 41062., 43580., 34653., 36768., 27284., 28968.,
      25400., 26880., 30662., 32476., 36484., 38656., 42890., 45444., 40682.,
      43192., 38218., 40684., 32788., 34928., 26550., 28340., 19480., 20896.,
      20828., 22104., 24291., 25872., 28274., 30180., 32797., 35048., 31383.,
      33640., 29841., 32104., 24658., 26612., 18727., 20352., 16124., 17400.,
      12240., 13312., 16260., 17576., 20696., 22272., 25564., 27416., 26860.,
      28704., 28028., 29864., 24888., 26464., 21124., 22424., 16720., 17728.,
      15792., 16768., 19460., 20672., 23528., 24992., 28012., 29744., 27212.,
      28936., 26284., 28000., 21800., 23264., 19460., 20720., 16624., 17664.,
      24444., 25872., 27529., 29252., 31114., 33152., 35219., 37592., 34021.,
      36400., 32631., 34952., 25426., 27384., 21013., 22652., 15852., 17152.,
      24008., 25504., 25230., 27048., 26988., 29152., 29306., 31840., 31490.,
      34044., 32586., 35096., 29452., 31584., 25854., 27648., 21448., 22880.,
      23684., 25376., 30399., 32472., 37750., 40232., 45765., 48684., 47431.,
      50384., 47113., 50036., 40894., 43392., 34987., 37096., 28148., 29840.,
      26004., 27688., 31465., 33528., 37558., 40028., 44311., 47216., 45081.,
      48020., 42971., 45880., 35942., 38428., 30125., 32224., 23380., 25064.,
      23396., 25136., 28115., 30232., 33462., 35984., 39465., 42420., 41643.,
      44632., 40045., 43004., 34126., 36664., 27183., 29272., 20148., 21824.,
      20980., 22712., 27133., 29240., 33910., 36420., 41339., 44280., 42621.,
      45596., 43327., 46272., 38006., 40532., 31665., 33744., 26132., 27800.,
      27288., 28864., 32790., 34692., 38836., 41088., 45450., 48076., 45738.,
      48384., 44554., 47156., 37476., 39696., 29478., 31292., 23288., 24736.,
      24348., 25640., 26727., 28264., 29506., 31308., 32705., 34792., 31803.,
      33896., 30773., 32872., 24338., 26124., 17147., 18600., 12828., 13992.,
      20880., 22016., 20164., 21496., 19768., 21312., 19708., 21480., 17420.,
      19184., 19100., 20856., 17560., 19040., 15364., 16552., 12944., 13888.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     6.,     16.,    19.,    40.,    37.,    64.,    55.,
      88.,    73.,    112.,   91.,    136.,   94.,    128.,   65.,    84.,
      22.,    48.,    92.,    152.,   218.,   320.,   290.,   404.,   362.,
      488.,   434.,   572.,   506.,   656.,   444.,   552.,   278.,   336.,
      147.,   216.,   426.,   576.,   849.,   1092.,  1011.,  1272.,  1173.,
      1452.,  1335.,  1632.,  1497.,  1812.,  1218.,  1440.,  723.,   840.,
      460.,   592.,   1176.,  1456.,  2164.,  2608.,  2452.,  2920.,  2740.,
      3232.,  3028.,  3544.,  3316.,  3856.,  2584.,  2960.,  1484.,  1680.,
      1020.,  1208.,  2408.,  2800.,  4180.,  4792.,  4468.,  5104.,  4756.,
      5416.,  5044.,  5728.,  5332.,  6040.,  4040.,  4528.,  2268.,  2520.,
      1580.,  1824.,  3640.,  4144.,  6196.,  6976.,  6484.,  7288.,  6772.,
      7600.,  7060.,  7912.,  7348.,  8224.,  5496.,  6096.,  3052.,  3360.,
      2140.,  2440.,  4872.,  5488.,  8212.,  9160.,  8500.,  9472.,  8788.,
      9784.,  9076.,  10096., 9364.,  10408., 6952.,  7664.,  3836.,  4200.,
      2601.,  2856.,  5706.,  6228.,  9327.,  10128., 9597.,  10416., 9867.,
      10704., 10137., 10992., 10407., 11280., 7530.,  8124.,  4065.,  4368.,
      2454.,  2644.,  5284.,  5672.,  8498.,  9092.,  8714.,  9320.,  8930.,
      9548.,  9146.,  9776.,  9362.,  10004., 6676.,  7112.,  3558.,  3780.,
      1615.,  1720.,  3438.,  3652.,  5473.,  5800.,  5599.,  5932.,  5725.,
      6064.,  5851.,  6196.,  5977.,  6328.,  4222.,  4460.,  2231.,  2352.,
      25.,    52.,    102.,   160.,   235.,   328.,   397.,   496.,   559.,
      664.,   721.,   832.,   883.,   1000.,  670.,   752.,   377.,   420.,
      406.,   480.,   956.,   1112.,  1658.,  1904.,  2018.,  2276.,  2378.,
      2648.,  2738.,  3020.,  3098.,  3392.,  2268.,  2472.,  1238.,  1344.,
      1227.,  1368.,  2730.,  3024.,  4521.,  4980.,  5115.,  5592.,  5709.,
      6204.,  6303.,  6816.,  6897.,  7428.,  4962.,  5328.,  2667.,  2856.,
      2572.,  2800.,  5592.,  6064.,  9076.,  9808.,  9940.,  10696., 10804.,
      11584., 11668., 12472., 12532., 13360., 8920.,  9488.,  4748.,  5040.,
      4476.,  4760.,  9512.,  10096., 15124., 16024., 15988., 16912., 16852.,
      17800., 17716., 18688., 18580., 19576., 13064., 13744., 6876.,  7224.,
      6380.,  6720.,  13432., 14128., 21172., 22240., 22036., 23128., 22900.,
      24016., 23764., 24904., 24628., 25792., 17208., 18000., 9004.,  9408.,
      8284.,  8680.,  17352., 18160., 27220., 28456., 28084., 29344., 28948.,
      30232., 29812., 31120., 30676., 32008., 21352., 22256., 11132., 11592.,
      7713.,  8040.,  16074., 16740., 25095., 26112., 25797., 26832., 26499.,
      27552., 27201., 28272., 27903., 28992., 19338., 20076., 10041., 10416.,
      6198.,  6436.,  12868., 13352., 20018., 20756., 20522., 21272., 21026.,
      21788., 21530., 22304., 22034., 22820., 15220., 15752., 7878.,  8148.,
      3655.,  3784.,  7566.,  7828.,  11737., 12136., 12007., 12412., 12277.,
      12688., 12547., 12964., 12817., 13240., 8830.,  9116.,  4559.,  4704.,
      49.,    100.,   198.,   304.,   451.,   616.,   757.,   928.,   1063.,
      1240.,  1369.,  1552.,  1675.,  1864.,  1246.,  1376.,  689.,   756.,
      790.,   912.,   1820.,  2072.,  3098.,  3488.,  3746.,  4148.,  4394.,
      4808.,  5042.,  5468.,  5690.,  6128.,  4092.,  4392.,  2198.,  2352.,
      2307.,  2520.,  5034.,  5472.,  8193.,  8868.,  9219.,  9912.,  10245.,
      10956., 11271., 12000., 12297., 13044., 8706.,  9216.,  4611.,  4872.,
      4684.,  5008.,  10008., 10672., 15988., 17008., 17428., 18472., 18868.,
      19936., 20308., 21400., 21748., 22864., 15256., 16016., 8012.,  8400.,
      7932.,  8312.,  16616., 17392., 26068., 27256., 27508., 28720., 28948.,
      30184., 30388., 31648., 31828., 33112., 22088., 22960., 11484., 11928.,
      11180., 11616., 23224., 24112., 36148., 37504., 37588., 38968., 39028.,
      40432., 40468., 41896., 41908., 43360., 28920., 29904., 14956., 15456.,
      14428., 14920., 29832., 30832., 46228., 47752., 47668., 49216., 49108.,
      50680., 50548., 52144., 51988., 53608., 35752., 36848., 18428., 18984.,
      12825., 13224., 26442., 27252., 40863., 42096., 41997., 43248., 43131.,
      44400., 44265., 45552., 45399., 46704., 31146., 32028., 16017., 16464.,
      9942.,  10228., 20452., 21032., 31538., 32420., 32330., 33224., 33122.,
      34028., 33914., 34832., 34706., 35636., 23764., 24392., 12198., 12516.,
      5695.,  5848.,  11694., 12004., 18001., 18472., 18415., 18892., 18829.,
      19312., 19243., 19732., 19657., 20152., 13438., 13772., 6887.,  7056.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5840.,  7696.,  8420.,  10868., 11512., 14552., 13196., 16828., 14076.,
      17772., 12812., 16444., 11000., 14040., 8036.,  10484., 5840.,  7696.,
      8820.,  11460., 12429., 15681., 14654., 18550., 17703., 22275., 17323.,
      21943., 16847., 21387., 12702., 16470., 9141.,  12105., 5844.,  8100.,
      12216., 15512., 14774., 18830., 18308., 23060., 20802., 26314., 21242.,
      26786., 19538., 24986., 15044., 19540., 10662., 14270., 8248.,  11032.,
      13852., 17676., 17503., 22235., 20234., 25842., 24317., 30769., 23561.,
      30029., 22709., 29065., 17674., 23026., 14487., 18867., 10876., 14316.,
      15116., 19004., 17443., 22223., 20866., 26506., 23561., 30029., 22709.,
      29065., 21953., 28325., 18114., 23498., 14107., 18535., 11756., 15260.,
      14236., 18060., 17287., 21987., 19354., 24898., 22709., 29065., 21953.,
      28325., 23245., 29633., 18298., 23714., 15263., 19739., 11868., 15436.,
      14380., 18140., 16363., 20983., 19378., 24826., 21953., 28325., 23245.,
      29633., 22489., 28893., 20274., 25722., 15907., 20431., 13260., 16892.,
      12728., 16024., 15374., 19334., 17108., 21796., 20170., 25650., 19010.,
      24522., 20154., 25698., 16468., 21156., 15134., 19030., 11864., 15032.,
      10980., 13684., 12657., 15957., 15222., 19150., 16787., 21375., 17239.,
      21875., 16155., 20839., 15574., 19630., 13049., 16445., 10980., 13684.,
      7568.,  9680.,  10420., 13060., 11864., 15032., 14076., 17772., 14060.,
      17820., 14812., 18636., 13080., 16504., 11764., 14660., 8688.,  10928.,
      9200.,  11440., 10276., 12980., 12120., 15288., 12812., 16444., 12572.,
      16140., 11308., 14812., 8248.,  11032., 6180.,  8372.,  4976.,  6704.,
      11444., 14340., 13573., 16985., 14638., 18598., 16847., 21387., 15091.,
      19551., 14103., 18483., 9806.,  13382., 8173.,  11041., 6996.,  9252.,
      13848., 17272., 15398., 19518., 17796., 22548., 19538., 24986., 18346.,
      23698., 17506., 22890., 14020., 18516., 10774., 14446., 9624.,  12536.,
      14236., 18060., 17287., 21987., 19354., 24898., 22709., 29065., 21953.,
      28325., 23245., 29633., 18298., 23714., 15263., 19739., 11868., 15436.,
      14380., 18140., 16363., 20983., 19378., 24826., 21953., 28325., 23245.,
      29633., 22489., 28893., 20274., 25722., 15907., 20431., 13260., 16892.,
      13500., 17196., 16719., 21259., 19242., 24722., 23245., 29633., 22489.,
      28893., 23781., 30201., 19946., 25426., 18087., 22659., 13884., 17580.,
      13644., 17276., 16659., 21247., 20898., 26410., 22489., 28893., 23781.,
      30201., 23025., 29461., 21410., 26922., 17707., 22327., 13644., 17276.,
      11864., 15032., 16126., 20150., 17460., 22276., 20154., 25698., 19506.,
      25082., 21162., 26770., 18100., 22916., 15374., 19334., 10744., 13784.,
      10084., 12788., 13673., 17133., 16326., 20446., 16155., 20839., 17631.,
      22363., 17571., 22351., 15942., 20062., 11953., 15253., 8612.,  11060.,
      8432.,  10672., 11508., 14404., 13592., 17016., 14812., 18636., 14284.,
      18172., 14428., 18252., 11960., 15256., 9652.,  12292., 5328.,  7184.,
      8080.,  10192., 7652.,  10100., 9368.,  12280., 11308., 14812., 11068.,
      14508., 11692., 15196., 9112.,  12024., 7780.,  10228., 7568.,  9680.,
      9588.,  12228., 10237., 13297., 11006., 14646., 14103., 18483., 13723.,
      18151., 15903., 20379., 13086., 16854., 11077., 14233., 9716.,  12356.,
      12120., 15288., 12918., 16718., 15044., 19540., 17506., 22890., 18970.,
      24386., 18642., 24090., 17444., 22068., 14566., 18430., 11864., 15032.,
      13500., 17196., 16719., 21259., 19242., 24722., 23245., 29633., 22489.,
      28893., 23781., 30201., 19946., 25426., 18087., 22659., 13884., 17580.,
      13644., 17276., 16659., 21247., 20898., 26410., 22489., 28893., 23781.,
      30201., 23025., 29461., 21410., 26922., 17707., 22327., 13644., 17276.,
      13116., 16812., 18135., 22771., 20250., 25794., 23781., 30201., 23025.,
      29461., 24317., 30769., 20570., 26114., 16719., 21259., 12380., 15948.,
      13868., 17628., 17051., 21735., 21394., 26970., 23025., 29461., 24317.,
      30769., 23561., 30029., 19378., 24826., 14963., 19423., 12140., 15644.,
      12568., 15992., 15694., 19910., 17812., 22756., 21162., 26770., 21026.,
      26666., 21050., 26594., 15348., 19908., 11742., 15382., 7992.,  10776.,
      13060., 16148., 14273., 18021., 16406., 20718., 17571., 22351., 17927.,
      22627., 17003., 21623., 13462., 17262., 8617.,  11565., 5988.,  8180.,
      12048., 14672., 13364., 16516., 13432., 16984., 14428., 18252., 13548.,
      17308., 13692., 17388., 10232., 13272., 7796.,  10180., 4208.,  5936.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   251.,   455.,   383.,
      635.,   515.,   815.,   647.,   995.,   690.,   954.,   485.,   633.,
      130.,   330.,   628.,   1092.,  1558.,  2350.,  2110.,  2998.,  2662.,
      3646.,  3214.,  4294.,  3766.,  4942.,  3348.,  4196.,  2114.,  2570.,
      1047.,  1587.,  3126.,  4302.,  6141.,  7793.,  6697.,  8237.,  6741.,
      8169.,  8001.,  9573.,  9261.,  10977., 7398.,  8638.,  4343.,  5011.,
      3236.,  4020.,  7976.,  9672.,  12620., 15100., 12636., 15052., 12140.,
      14492., 14396., 16940., 16652., 19388., 13032., 14984., 7524.,  8564.,
      5876.,  6852.,  13640., 15720., 20156., 23212., 18636., 21628., 16412.,
      19084., 17964., 20572., 19004., 21548., 14472., 16296., 8180.,  9156.,
      6788.,  7700.,  15336., 17288., 20972., 23836., 17916., 20716., 12620.,
      15100., 12636., 15052., 12140., 14492., 9768.,  11464., 5764.,  6676.,
      4628.,  5476.,  10888., 12712., 18908., 21836., 21164., 24284., 20156.,
      23212., 18636., 21628., 16412., 19084., 12424., 14248., 6420.,  7268.,
      5523.,  6271.,  12494., 14086., 21009., 23541., 23133., 25809., 20457.,
      23021., 17269., 19721., 11841., 13925., 8446.,  9846.,  3443.,  4063.,
      3130.,  3618.,  7204.,  8244.,  12286., 13942., 13990., 15742., 15694.,
      17542., 17398., 19342., 15838., 17622., 10372., 11540., 3514.,  4002.,
      3113.,  3437.,  6858.,  7538.,  11267., 12335., 12263., 13379., 13259.,
      14423., 14255., 15467., 10451., 11455., 5722.,  6338.,  137.,   333.,
      149.,   361.,   706.,   1162.,  1703.,  2435.,  2987.,  3767.,  4271.,
      5099.,  5555.,  6431.,  6839.,  7763.,  5202.,  5850.,  2933.,  3273.,
      3106.,  3690.,  7156.,  8132.,  11894., 13326., 13726., 15254., 15558.,
      17182., 17390., 19110., 19222., 21038., 11732., 12836., 6434.,  7018.,
      9351.,  10211., 16598., 18158., 18765., 20865., 14073., 16061., 8869.,
      10745., 11025., 13045., 13181., 15345., 5574.,  6942.,  3495.,  4227.,
      9828.,  10868., 14312., 16264., 12556., 15292., 15132., 17804., 17196.,
      19804., 19964., 22764., 22732., 25724., 15592., 17544., 8804.,  9844.,
      9908.,  11140., 19464., 21800., 29820., 33132., 30860., 34108., 25052.,
      27980., 20972., 23836., 16380., 19180., 8840.,  10664., 5364.,  6340.,
      10308., 11476., 16552., 18760., 21932., 25052., 21436., 24492., 12556.,
      15292., 15132., 17804., 17196., 19804., 12328., 14024., 7044.,  7956.,
      7636.,  8740.,  15688., 17768., 25500., 28684., 28268., 31644., 29820.,
      33132., 30860., 34108., 25052., 27980., 12936., 14760., 3604.,  4452.,
      7491.,  8303.,  11246., 12710., 16161., 18373., 17645., 20001., 16377.,
      18621., 14597., 16729., 4433.,  6197.,  3678.,  4694.,  1891.,  2319.,
      1370.,  1730.,  3428.,  4212.,  6238.,  7510.,  7174.,  8542.,  8110.,
      9574.,  9046.,  10606., 8766.,  10166., 6084.,  6996.,  2266.,  2626.,
      1785.,  2045.,  4074.,  4626.,  6899.,  7775.,  7511.,  8435.,  8123.,
      9095.,  8735.,  9755.,  6595.,  7407.,  3706.,  4194.,  89.,    221.,
      101.,   249.,   482.,   810.,   1175.,  1715.,  2075.,  2663.,  2975.,
      3611.,  3875.,  4559.,  4775.,  5507.,  3698.,  4218.,  2117.,  2393.,
      2114.,  2570.,  5108.,  6084.,  9046.,  10606., 11134., 12790., 13222.,
      14974., 15310., 17158., 17398., 19342., 12948., 14308., 7170.,  7882.,
      6711.,  7635.,  15222., 17166., 21149., 23697., 19401., 21837., 17141.,
      19465., 20193., 22661., 23245., 25857., 16230., 17982., 7255.,  8051.,
      10084., 11124., 22184., 24392., 26828., 29820., 23772., 26700., 20204.,
      23068., 23484., 26540., 26764., 30012., 17832., 20040., 6500.,  7540.,
      12212., 13444., 26824., 29416., 29244., 32812., 24652., 28156., 23452.,
      26636., 21932., 25052., 19900., 22956., 14664., 16744., 7156.,  8132.,
      8516.,  9684.,  19304., 21768., 29036., 32412., 31100., 34412., 26828.,
      29820., 23772., 26700., 20204., 23068., 13544., 15496., 4740.,  5652.,
      9940.,  11044., 22024., 24360., 30044., 33484., 33324., 36956., 29244.,
      32812., 24652., 28156., 23452., 26636., 15688., 17768., 5396.,  6244.,
      5875.,  6751.,  13454., 15302., 21105., 23765., 23485., 26289., 25161.,
      27853., 26325., 28905., 21153., 23365., 11774., 13174., 531.,   1023.,
      4922.,  5410.,  10788., 11828., 12350., 13750., 13542., 15038., 14734.,
      16326., 15926., 17614., 9758.,  11286., 1988.,  2900.,  1018.,  1250.,
      457.,   653.,   1290.,  1714.,  2531.,  3215.,  2759.,  3491.,  2987.,
      3767.,  3215.,  4043.,  2739.,  3359.,  1690.,  2050.,  41.,    109.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3808.,  8160.,  2200.,  7640.,  5712.,  12240., 3080.,  10696., 6664.,
      14280., 3080.,  10696., 5712.,  12240., 2200.,  7640.,  3808.,  8160.,
      2200.,  7640.,  5742.,  12414., 3300.,  11460., 8122.,  17514., 3850.,
      13370., 8122.,  17514., 3300.,  11460., 5742.,  12414., 2200.,  7640.,
      5712.,  12240., 3300.,  11460., 8568.,  18360., 4620.,  16044., 9996.,
      21420., 4620.,  16044., 8568.,  18360., 3300.,  11460., 5712.,  12240.,
      3080.,  10696., 8122.,  17514., 4620.,  16044., 11454., 24654., 5390.,
      18718., 11454., 24654., 4620.,  16044., 8122.,  17514., 3080.,  10696.,
      6664.,  14280., 3850.,  13370., 9996.,  21420., 5390.,  18718., 11454.,
      24654., 5390.,  18718., 9996.,  21420., 3850.,  13370., 6664.,  14280.,
      3080.,  10696., 8122.,  17514., 4620.,  16044., 11454., 24654., 5390.,
      18718., 11454., 24654., 4620.,  16044., 8122.,  17514., 3080.,  10696.,
      6664.,  14280., 3850.,  13370., 9996.,  21420., 5390.,  18718., 11454.,
      24654., 5390.,  18718., 9996.,  21420., 3850.,  13370., 6664.,  14280.,
      2640.,  9168.,  7140.,  15300., 3960.,  13752., 9996.,  21420., 4620.,
      16044., 9996.,  21420., 3960.,  13752., 7140.,  15300., 2640.,  9168.,
      4760.,  10200., 2750.,  9550.,  7140.,  15300., 3850.,  13370., 8122.,
      17514., 3850.,  13370., 7140.,  15300., 2750.,  9550.,  4760.,  10200.,
      1760.,  6112.,  4760.,  10200., 2640.,  9168.,  6664.,  14280., 3080.,
      10696., 6664.,  14280., 2640.,  9168.,  4760.,  10200., 1760.,  6112.,
      3808.,  8160.,  2200.,  7640.,  5712.,  12240., 3080.,  10696., 6664.,
      14280., 3080.,  10696., 5712.,  12240., 2200.,  7640.,  3808.,  8160.,
      2200.,  7640.,  5742.,  12414., 3300.,  11460., 8122.,  17514., 3850.,
      13370., 8122.,  17514., 3300.,  11460., 5742.,  12414., 2200.,  7640.,
      5712.,  12240., 3300.,  11460., 8568.,  18360., 4620.,  16044., 9996.,
      21420., 4620.,  16044., 8568.,  18360., 3300.,  11460., 5712.,  12240.,
      3080.,  10696., 8122.,  17514., 4620.,  16044., 11454., 24654., 5390.,
      18718., 11454., 24654., 4620.,  16044., 8122.,  17514., 3080.,  10696.,
      6664.,  14280., 3850.,  13370., 9996.,  21420., 5390.,  18718., 11454.,
      24654., 5390.,  18718., 9996.,  21420., 3850.,  13370., 6664.,  14280.,
      3080.,  10696., 8122.,  17514., 4620.,  16044., 11454., 24654., 5390.,
      18718., 11454., 24654., 4620.,  16044., 8122.,  17514., 3080.,  10696.,
      6664.,  14280., 3850.,  13370., 9996.,  21420., 5390.,  18718., 11454.,
      24654., 5390.,  18718., 9996.,  21420., 3850.,  13370., 6664.,  14280.,
      2640.,  9168.,  7140.,  15300., 3960.,  13752., 9996.,  21420., 4620.,
      16044., 9996.,  21420., 3960.,  13752., 7140.,  15300., 2640.,  9168.,
      4760.,  10200., 2750.,  9550.,  7140.,  15300., 3850.,  13370., 8122.,
      17514., 3850.,  13370., 7140.,  15300., 2750.,  9550.,  4760.,  10200.,
      1760.,  6112.,  4760.,  10200., 2640.,  9168.,  6664.,  14280., 3080.,
      10696., 6664.,  14280., 2640.,  9168.,  4760.,  10200., 1760.,  6112.,
      3808.,  8160.,  2200.,  7640.,  5712.,  12240., 3080.,  10696., 6664.,
      14280., 3080.,  10696., 5712.,  12240., 2200.,  7640.,  3808.,  8160.,
      2200.,  7640.,  5742.,  12414., 3300.,  11460., 8122.,  17514., 3850.,
      13370., 8122.,  17514., 3300.,  11460., 5742.,  12414., 2200.,  7640.,
      5712.,  12240., 3300.,  11460., 8568.,  18360., 4620.,  16044., 9996.,
      21420., 4620.,  16044., 8568.,  18360., 3300.,  11460., 5712.,  12240.,
      3080.,  10696., 8122.,  17514., 4620.,  16044., 11454., 24654., 5390.,
      18718., 11454., 24654., 4620.,  16044., 8122.,  17514., 3080.,  10696.,
      6664.,  14280., 3850.,  13370., 9996.,  21420., 5390.,  18718., 11454.,
      24654., 5390.,  18718., 9996.,  21420., 3850.,  13370., 6664.,  14280.,
      3080.,  10696., 8122.,  17514., 4620.,  16044., 11454., 24654., 5390.,
      18718., 11454., 24654., 4620.,  16044., 8122.,  17514., 3080.,  10696.,
      6664.,  14280., 3850.,  13370., 9996.,  21420., 5390.,  18718., 11454.,
      24654., 5390.,  18718., 9996.,  21420., 3850.,  13370., 6664.,  14280.,
      2640.,  9168.,  7140.,  15300., 3960.,  13752., 9996.,  21420., 4620.,
      16044., 9996.,  21420., 3960.,  13752., 7140.,  15300., 2640.,  9168.,
      4760.,  10200., 2750.,  9550.,  7140.,  15300., 3850.,  13370., 8122.,
      17514., 3850.,  13370., 7140.,  15300., 2750.,  9550.,  4760.,  10200.,
      1760.,  6112.,  4760.,  10200., 2640.,  9168.,  6664.,  14280., 3080.,
      10696., 6664.,  14280., 2640.,  9168.,  4760.,  10200., 1760.,  6112.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  1834.,  3418.,  2522.,
      3978.,  2186.,  3514.,  826.,   2026.,  1564.,  2620.,  1374.,  2030.,
      540.,   1596.,  2296.,  3896.,  4372.,  7028.,  4276.,  7188.,  3156.,
      6324.,  4788.,  7700.,  4372.,  7028.,  1272.,  2872.,  1564.,  2620.,
      3194.,  4906.,  2644.,  5812.,  7310.,  11678., 8414.,  12910., 7470.,
      12094., 4478.,  9230.,  7310.,  11678., 4372.,  7028.,  826.,   2026.,
      4152.,  6264.,  7280.,  11504., 6312.,  12648., 10920., 17256., 12456.,
      18792., 10920., 17256., 6312.,  12648., 7280.,  11504., 4152.,  6264.,
      3640.,  5752.,  8304.,  12528., 10920., 17256., 6312.,  12648., 10920.,
      17256., 12456., 18792., 10920., 17256., 4208.,  8432.,  3640.,  5752.,
      2104.,  4216.,  7280.,  11504., 12456., 18792., 10920., 17256., 6312.,
      12648., 10920., 17256., 12456., 18792., 7280.,  11504., 2104.,  4216.,
      3640.,  5752.,  4208.,  8432.,  10920., 17256., 12456., 18792., 10920.,
      17256., 6312.,  12648., 10920., 17256., 8304.,  12528., 3640.,  5752.,
      4042.,  5882.,  6644.,  10068., 4478.,  9230.,  8398.,  13278., 10270.,
      15278., 10094., 15230., 4478.,  9230.,  4788.,  7700.,  2186.,  3514.,
      2492.,  3804.,  6008.,  8632.,  6644.,  10068., 3156.,  6324.,  6132.,
      9556.,  8084.,  11764., 6644.,  10068., 1592.,  3704.,  1148.,  1948.,
      782.,   1310.,  2492.,  3804.,  4042.,  5882.,  3450.,  5162.,  1834.,
      3418.,  3610.,  5578.,  4042.,  5882.,  3004.,  4316.,  270.,   798.,
      30.,    174.,   220.,   764.,   826.,   2026.,  1834.,  3418.,  2522.,
      3978.,  2186.,  3514.,  826.,   2026.,  1564.,  2620.,  1374.,  2030.,
      540.,   1596.,  2296.,  3896.,  4372.,  7028.,  4276.,  7188.,  3156.,
      6324.,  4788.,  7700.,  4372.,  7028.,  1272.,  2872.,  1564.,  2620.,
      3194.,  4906.,  2644.,  5812.,  7310.,  11678., 8414.,  12910., 7470.,
      12094., 4478.,  9230.,  7310.,  11678., 4372.,  7028.,  826.,   2026.,
      4152.,  6264.,  7280.,  11504., 6312.,  12648., 10920., 17256., 12456.,
      18792., 10920., 17256., 6312.,  12648., 7280.,  11504., 4152.,  6264.,
      3640.,  5752.,  8304.,  12528., 10920., 17256., 6312.,  12648., 10920.,
      17256., 12456., 18792., 10920., 17256., 4208.,  8432.,  3640.,  5752.,
      2104.,  4216.,  7280.,  11504., 12456., 18792., 10920., 17256., 6312.,
      12648., 10920., 17256., 12456., 18792., 7280.,  11504., 2104.,  4216.,
      3640.,  5752.,  4208.,  8432.,  10920., 17256., 12456., 18792., 10920.,
      17256., 6312.,  12648., 10920., 17256., 8304.,  12528., 3640.,  5752.,
      4042.,  5882.,  6644.,  10068., 4478.,  9230.,  8398.,  13278., 10270.,
      15278., 10094., 15230., 4478.,  9230.,  4788.,  7700.,  2186.,  3514.,
      2492.,  3804.,  6008.,  8632.,  6644.,  10068., 3156.,  6324.,  6132.,
      9556.,  8084.,  11764., 6644.,  10068., 1592.,  3704.,  1148.,  1948.,
      782.,   1310.,  2492.,  3804.,  4042.,  5882.,  3450.,  5162.,  1834.,
      3418.,  3610.,  5578.,  4042.,  5882.,  3004.,  4316.,  270.,   798.,
      30.,    174.,   220.,   764.,   826.,   2026.,  1834.,  3418.,  2522.,
      3978.,  2186.,  3514.,  826.,   2026.,  1564.,  2620.,  1374.,  2030.,
      540.,   1596.,  2296.,  3896.,  4372.,  7028.,  4276.,  7188.,  3156.,
      6324.,  4788.,  7700.,  4372.,  7028.,  1272.,  2872.,  1564.,  2620.,
      3194.,  4906.,  2644.,  5812.,  7310.,  11678., 8414.,  12910., 7470.,
      12094., 4478.,  9230.,  7310.,  11678., 4372.,  7028.,  826.,   2026.,
      4152.,  6264.,  7280.,  11504., 6312.,  12648., 10920., 17256., 12456.,
      18792., 10920., 17256., 6312.,  12648., 7280.,  11504., 4152.,  6264.,
      3640.,  5752.,  8304.,  12528., 10920., 17256., 6312.,  12648., 10920.,
      17256., 12456., 18792., 10920., 17256., 4208.,  8432.,  3640.,  5752.,
      2104.,  4216.,  7280.,  11504., 12456., 18792., 10920., 17256., 6312.,
      12648., 10920., 17256., 12456., 18792., 7280.,  11504., 2104.,  4216.,
      3640.,  5752.,  4208.,  8432.,  10920., 17256., 12456., 18792., 10920.,
      17256., 6312.,  12648., 10920., 17256., 8304.,  12528., 3640.,  5752.,
      4042.,  5882.,  6644.,  10068., 4478.,  9230.,  8398.,  13278., 10270.,
      15278., 10094., 15230., 4478.,  9230.,  4788.,  7700.,  2186.,  3514.,
      2492.,  3804.,  6008.,  8632.,  6644.,  10068., 3156.,  6324.,  6132.,
      9556.,  8084.,  11764., 6644.,  10068., 1592.,  3704.,  1148.,  1948.,
      782.,   1310.,  2492.,  3804.,  4042.,  5882.,  3450.,  5162.,  1834.,
      3418.,  3610.,  5578.,  4042.,  5882.,  3004.,  4316.,  270.,   798.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9808.,  10688., 11600., 12544., 12948., 14096., 15284., 16512., 16824.,
      18208., 19640., 21120., 21308., 22960., 24668., 26432., 20172., 21808.,
      23500., 25248., 18524., 20144., 21820., 23552., 17848., 19232., 20664.,
      22144., 15796., 16912., 18068., 19264., 12880., 13760., 14672., 15616.,
      15940., 17136., 18372., 19648., 22185., 23684., 25233., 26832., 27446.,
      29224., 31062., 32960., 33403., 35500., 37667., 39904., 33719., 35828.,
      38007., 40256., 33523., 35644., 37835., 40096., 27702., 29512., 31382.,
      33312., 20097., 21556., 23065., 24624., 13508., 14640., 15812., 17024.,
      22776., 24224., 25720., 27264., 27710., 29496., 31342., 33248., 29940.,
      32048., 34228., 36480., 32954., 35432., 37994., 40640., 33394., 35848.,
      38386., 41008., 33066., 35496., 38010., 40608., 27572., 29616., 31732.,
      33920., 21742., 23416., 25150., 26944., 19064., 20384., 21752., 23168.,
      23468., 25232., 27052., 28928., 30659., 32860., 35131., 37472., 37778.,
      40408., 43122., 45920., 45961., 49012., 52161., 55408., 46349., 49404.,
      52557., 55808., 45969., 49028., 52185., 55440., 36818., 39416., 42098.,
      44864., 28715., 30860., 33075., 35360., 21548., 23248., 25004., 26816.,
      31804., 33616., 35484., 37408., 36287., 38532., 40847., 43232., 42986.,
      45656., 48410., 51248., 48429., 51516., 54701., 57984., 45937., 48964.,
      52089., 55312., 44277., 47308., 50437., 53664., 39818., 42392., 45050.,
      47792., 34119., 36244., 38439., 40704., 27580., 29264., 31004., 32800.,
      24716., 26512., 28364., 30272., 31355., 33580., 35875., 38240., 38402.,
      41048., 43778., 46592., 45969., 49028., 52185., 55440., 44821., 47884.,
      51045., 54304., 46489., 49556., 52721., 55984., 37762., 40376., 43074.,
      45856., 29603., 31772., 34011., 36320., 22924., 24656., 26444., 28288.,
      30940., 32720., 34556., 36448., 36919., 39124., 41399., 43744., 41498.,
      44120., 46826., 49616., 44277., 47308., 50437., 53664., 45945., 48980.,
      52113., 55344., 46333., 49372., 52509., 55744., 39994., 42584., 45258.,
      48016., 31935., 34084., 36303., 38592., 27676., 29392., 31164., 32992.,
      23640., 25184., 26776., 28416., 29174., 31064., 33014., 35024., 35684.,
      37968., 40324., 42752., 42178., 44840., 47586., 50416., 43034., 45736.,
      48522., 51392., 42866., 45608., 48434., 51344., 34532., 36880., 39300.,
      41792., 30694., 32664., 34694., 36784., 25112., 26720., 28376., 30080.,
      21076., 22384., 23732., 25120., 22229., 23804., 25429., 27104., 28206.,
      30088., 32030., 34032., 31599., 33764., 35999., 38304., 31819., 33996.,
      36243., 38560., 31015., 33204., 35463., 37792., 27918., 29768., 31678.,
      33648., 23245., 24780., 26365., 28000., 19476., 20720., 22004., 23328.,
      17104., 18112., 19152., 20224., 21284., 22544., 23844., 25184., 26200.,
      27744., 29336., 30976., 30316., 32112., 33964., 35872., 31740., 33584.,
      35484., 37440., 32396., 34288., 36236., 38240., 28760., 30432., 32152.,
      33920., 23812., 25232., 26692., 28192., 17488., 18624., 19792., 20992.,
      16080., 17088., 18128., 19200., 20020., 21264., 22548., 23872., 24632.,
      26144., 27704., 29312., 28636., 30384., 32188., 34048., 27500., 29232.,
      31020., 32864., 25852., 27568., 29340., 31168., 19960., 21408., 22904.,
      24448., 12564., 13712., 14900., 16128., 10384., 11328., 12304., 13312.,
      24484., 25840., 27236., 28672., 25617., 27220., 28873., 30576., 27398.,
      29288., 31238., 33248., 30867., 33020., 35243., 37536., 29839., 31940.,
      34111., 36352., 28043., 30092., 32211., 34400., 22790., 24520., 26310.,
      28160., 19817., 21188., 22609., 24080., 17636., 18736., 19876., 21056.,
      22904., 24480., 26104., 27776., 28238., 30136., 32094., 34112., 34452.,
      36720., 39060., 41472., 40810., 43432., 46138., 48928., 39202., 41800.,
      44482., 47248., 36826., 39400., 42058., 44800., 30164., 32368., 34644.,
      36992., 21374., 23160., 25006., 26912., 17144., 18592., 20088., 21632.,
      30604., 32400., 34252., 36160., 36315., 38508., 40771., 43104., 43138.,
      45784., 48514., 51328., 45937., 48964., 52089., 55312., 44277., 47308.,
      50437., 53664., 45945., 48980., 52113., 55344., 41218., 43832., 46530.,
      49312., 34051., 36188., 38395., 40672., 27020., 28752., 30540., 32384.,
      24028., 25808., 27644., 29536., 30103., 32276., 34519., 36832., 37274.,
      39896., 42602., 45392., 44821., 47884., 51045., 54304., 46489., 49556.,
      52721., 55984., 47389., 50460., 53629., 56896., 40186., 42840., 45578.,
      48400., 30559., 32740., 34991., 37312., 25180., 26960., 28796., 30688.,
      30764., 32528., 34348., 36224., 34387., 36540., 38763., 41056., 39090.,
      41688., 44370., 47136., 45945., 48980., 52113., 55344., 46333., 49372.,
      52509., 55744., 45953., 48996., 52137., 55376., 38834., 41464., 44178.,
      46976., 33403., 35564., 37795., 40096., 28140., 29904., 31724., 33600.,
      25212., 26960., 28764., 30624., 31823., 34020., 36287., 38624., 39690.,
      42328., 45050., 47856., 47389., 50460., 53629., 56896., 47009., 50084.,
      53257., 56528., 45861., 48940., 52117., 55392., 42154., 44824., 47578.,
      50416., 36055., 38260., 40535., 42880., 28028., 29776., 31580., 33440.,
      24216., 25824., 27480., 29184., 32070., 34072., 36134., 38256., 39236.,
      41616., 44068., 46592., 43762., 46504., 49330., 52240., 41738., 44456.,
      47258., 50144., 43042., 45736., 48514., 51376., 36804., 39120., 41508.,
      43968., 28406., 30296., 32246., 34256., 20632., 22112., 23640., 25216.,
      24628., 25968., 27348., 28768., 29949., 31628., 33357., 35136., 32638.,
      34632., 36686., 38800., 34311., 36596., 38951., 41376., 35555., 37852.,
      40219., 42656., 36287., 38596., 40975., 43424., 31006., 32968., 34990.,
      37072., 23797., 25372., 26997., 28672., 19764., 20976., 22228., 23520.,
      13072., 14144., 15248., 16384., 18244., 19600., 20996., 22432., 22936.,
      24544., 26200., 27904., 28236., 30064., 31948., 33888., 29340., 31152.,
      33020., 34944., 29932., 31728., 33580., 35488., 25816., 27360., 28952.,
      30592., 20260., 21520., 22820., 24160., 13200., 14144., 15120., 16128.,
      11600., 12480., 13392., 14336., 11732., 12816., 13940., 15104., 16504.,
      17824., 19192., 20608., 21884., 23472., 25116., 26816., 22796., 24368.,
      25996., 27680., 25052., 26672., 28348., 30080., 22712., 24096., 25528.,
      27008., 20340., 21520., 22740., 24000., 18384., 19392., 20432., 21504.,
      18180., 19440., 20740., 22080., 21945., 23460., 25025., 26640., 26390.,
      28200., 30070., 32000., 31595., 33740., 35955., 38240., 29863., 32020.,
      34247., 36544., 31203., 33372., 35611., 37920., 24470., 26312., 28214.,
      30176., 19025., 20564., 22153., 23792., 15812., 17072., 18372., 19712.,
      21432., 22816., 24248., 25728., 24094., 25784., 27534., 29344., 27572.,
      29616., 31732., 33920., 31962., 34408., 36938., 39552., 35538., 38024.,
      40594., 43248., 38090., 40616., 43226., 45920., 34868., 37040., 39284.,
      41600., 30414., 32248., 34142., 36096., 26168., 27680., 29240., 30848.,
      24876., 26640., 28460., 30336., 31219., 33404., 35659., 37984., 38770.,
      41432., 44178., 47008., 46489., 49556., 52721., 55984., 47389., 50460.,
      53629., 56896., 47009., 50084., 53257., 56528., 38194., 40824., 43538.,
      46336., 33563., 35756., 38019., 40352., 26860., 28624., 30444., 32320.,
      28028., 29776., 31580., 33440., 31919., 34084., 36319., 38624., 41098.,
      43736., 46458., 49264., 46333., 49372., 52509., 55744., 45953., 48996.,
      52137., 55376., 44293., 47340., 50485., 53728., 39658., 42264., 44954.,
      47728., 32823., 34996., 37239., 39552., 26236., 27984., 29788., 31648.,
      27404., 29200., 31052., 32960., 34475., 36684., 38963., 41312., 42722.,
      45400., 48162., 51008., 47009., 50084., 53257., 56528., 45861., 48940.,
      52117., 55392., 47529., 50612., 53793., 57072., 42210., 44856., 47586.,
      50400., 34387., 36540., 38763., 41056., 26636., 28368., 30156., 32000.,
      25180., 26960., 28796., 30688., 32103., 34292., 36551., 38880., 40186.,
      42840., 45578., 48400., 44293., 47340., 50485., 53728., 45961., 49012.,
      52161., 55408., 46349., 49404., 52557., 55808., 38810., 41432., 44138.,
      46928., 28783., 30916., 33119., 35392., 22940., 24656., 26428., 28256.,
      31192., 32864., 34584., 36352., 34902., 36952., 39062., 41232., 39716.,
      42192., 44740., 47360., 44578., 47400., 50306., 53296., 46458., 49320.,
      52266., 55296., 45202., 48040., 50962., 53968., 37924., 40336., 42820.,
      45376., 32390., 34328., 36326., 38384., 27096., 28640., 30232., 31872.,
      19220., 20592., 22004., 23456., 24229., 25884., 27589., 29344., 30030.,
      32008., 34046., 36144., 35551., 37764., 40047., 42400., 36795., 39020.,
      41315., 43680., 37527., 39764., 42071., 44448., 29806., 31688., 33630.,
      35632., 20125., 21612., 23149., 24736., 15188., 16368., 17588., 18848.,
      24976., 26176., 27408., 28672., 27748., 29200., 30692., 32224., 31256.,
      32992., 34776., 36608., 30316., 32240., 34220., 36256., 27324., 29232.,
      31196., 33216., 27916., 29808., 31756., 33760., 24600., 26208., 27864.,
      29568., 19716., 21008., 22340., 23712., 14032., 15040., 16080., 17152.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   103.,   148.,   199.,   256.,   163.,   220.,
      283.,   352.,   223.,   292.,   367.,   448.,   283.,   364.,   451.,
      544.,   314.,   376.,   442.,   512.,   225.,   260.,   297.,   336.,
      42.,    88.,    138.,   192.,   260.,   368.,   484.,   608.,   686.,
      872.,   1070.,  1280.,  950.,   1160.,  1382.,  1616.,  1214.,  1448.,
      1694.,  1952.,  1478.,  1736.,  2006.,  2288.,  1742.,  2024.,  2318.,
      2624.,  1572.,  1776.,  1988.,  2208.,  1002.,  1112.,  1226.,  1344.,
      459.,   588.,   723.,   864.,   1422.,  1704.,  1998.,  2304.,  2873.,
      3268.,  3681.,  4112.,  3165.,  3532.,  3917.,  4320.,  3201.,  3540.,
      3897.,  4272.,  3813.,  4188.,  4581.,  4992.,  4425.,  4836.,  5265.,
      5712.,  3550.,  3848.,  4158.,  4480.,  2091.,  2252.,  2419.,  2592.,
      1524.,  1712.,  1908.,  2112.,  3784.,  4192.,  4616.,  5056.,  6012.,
      6608.,  7228.,  7872.,  6028.,  6608.,  7212.,  7840.,  5788.,  6352.,
      6940.,  7552.,  6892.,  7504.,  8140.,  8800.,  7996.,  8656.,  9340.,
      10048., 6280.,  6752.,  7240.,  7744.,  3636.,  3888.,  4148.,  4416.,
      2820.,  3056.,  3300.,  3552.,  6568.,  7072.,  7592.,  8128.,  9708.,
      10448., 11212., 12000., 8956.,  9680.,  10428., 11200., 7884.,  8528.,
      9196.,  9888.,  8668.,  9296.,  9948.,  10624., 9196.,  9808.,  10444.,
      11104., 7016.,  7456.,  7912.,  8384.,  3972.,  4208.,  4452.,  4704.,
      3284.,  3504.,  3732.,  3968.,  7432.,  7904.,  8392.,  8896.,  10140.,
      10832., 11548., 12288., 8620.,  9296.,  9996.,  10720., 6012.,  6608.,
      7228.,  7872.,  6028.,  6608.,  7212.,  7840.,  5788.,  6352.,  6940.,
      7552.,  4680.,  5088.,  5512.,  5952.,  2772.,  2992.,  3220.,  3456.,
      2212.,  2416.,  2628.,  2848.,  5224.,  5664.,  6120.,  6592.,  9100.,
      9808.,  10540., 11296., 10204., 10960., 11740., 12544., 9708.,  10448.,
      11212., 12000., 8956.,  9680.,  10428., 11200., 7884.,  8528.,  9196.,
      9888.,  5992.,  6432.,  6888.,  7360.,  3108.,  3312.,  3524.,  3744.,
      2671.,  2852.,  3039.,  3232.,  6054.,  6440.,  6838.,  7248.,  10197.,
      10812., 11445., 12096., 11241., 11892., 12561., 13248., 9917.,  10540.,
      11181., 11840., 8337.,  8932.,  9545.,  10176., 5669.,  6172.,  6693.,
      7232.,  4054.,  4392.,  4742.,  5104.,  1647.,  1796.,  1951.,  2112.,
      1506.,  1624.,  1746.,  1872.,  3476.,  3728.,  3988.,  4256.,  5942.,
      6344.,  6758.,  7184.,  6782.,  7208.,  7646.,  8096.,  7622.,  8072.,
      8534.,  9008.,  8462.,  8936.,  9422.,  9920.,  7702.,  8136.,  8582.,
      9040.,  5044.,  5328.,  5620.,  5920.,  1698.,  1816.,  1938.,  2064.,
      1517.,  1596.,  1677.,  1760.,  3346.,  3512.,  3682.,  3856.,  5503.,
      5764.,  6031.,  6304.,  5995.,  6268.,  6547.,  6832.,  6487.,  6772.,
      7063.,  7360.,  6979.,  7276.,  7579.,  7888.,  5103.,  5348.,  5599.,
      5856.,  2786.,  2936.,  3090.,  3248.,  45.,    92.,    141.,   192.,
      49.,    100.,   153.,   208.,   298.,   408.,   522.,   640.,   763.,
      940.,   1123.,  1312.,  1399.,  1588.,  1783.,  1984.,  2035.,  2236.,
      2443.,  2656.,  2671.,  2884.,  3103.,  3328.,  3307.,  3532.,  3763.,
      4000.,  2522.,  2680.,  2842.,  3008.,  1425.,  1508.,  1593.,  1680.,
      1482.,  1624.,  1770.,  1920.,  3460.,  3696.,  3940.,  4192.,  5774.,
      6120.,  6478.,  6848.,  6678.,  7048.,  7430.,  7824.,  7582.,  7976.,
      8382.,  8800.,  8486.,  8904.,  9334.,  9776.,  9390.,  9832.,  10286.,
      10752., 5732.,  6000.,  6276.,  6560.,  3146.,  3288.,  3434.,  3584.,
      4571.,  4780.,  4995.,  5216.,  8110.,  8488.,  8878.,  9280.,  9129.,
      9636.,  10161., 10704., 6797.,  7276.,  7773.,  8288.,  4209.,  4660.,
      5129.,  5616.,  5269.,  5756.,  6261.,  6784.,  6329.,  6852.,  7393.,
      7952.,  2622.,  2952.,  3294.,  3648.,  1659.,  1836.,  2019.,  2208.,
      4788.,  5040.,  5300.,  5568.,  6920.,  7392.,  7880.,  8384.,  5948.,
      6608.,  7292.,  8000.,  7244.,  7888.,  8556.,  9248.,  8284.,  8912.,
      9564.,  10240., 9644.,  10320., 11020., 11744., 11004., 11728., 12476.,
      13248., 7560.,  8032.,  8520.,  9024.,  4276.,  4528.,  4788.,  5056.,
      4804.,  5104.,  5412.,  5728.,  9448.,  10016., 10600., 11200., 14508.,
      15312., 16140., 16992., 15036., 15824., 16636., 17472., 12172., 12880.,
      13612., 14368., 10140., 10832., 11548., 12288., 7852.,  8528.,  9228.,
      9952.,  4200.,  4640.,  5096.,  5568.,  2564.,  2800.,  3044.,  3296.,
      5012.,  5296.,  5588.,  5888.,  8008.,  8544.,  9096.,  9664.,  10588.,
      11344., 12124., 12928., 10348., 11088., 11852., 12640., 5948.,  6608.,
      7292.,  8000.,  7244.,  7888.,  8556.,  9248.,  8284.,  8912.,  9564.,
      10240., 5960.,  6368.,  6792.,  7232.,  3412.,  3632.,  3860.,  4096.,
      3684.,  3952.,  4228.,  4512.,  7592.,  8096.,  8616.,  9152.,  12364.,
      13136., 13932., 14752., 13724., 14544., 15388., 16256., 14508., 15312.,
      16140., 16992., 15036., 15824., 16636., 17472., 12172., 12880., 13612.,
      14368., 6248.,  6688.,  7144.,  7616.,  1700.,  1904.,  2116.,  2336.,
      3647.,  3844.,  4047.,  4256.,  5446.,  5800.,  6166.,  6544.,  7813.,
      8348.,  8901.,  9472.,  8537.,  9108.,  9697.,  10304., 7917.,  8460.,
      9021.,  9600.,  7041.,  7556.,  8089.,  8640.,  2005.,  2428.,  2869.,
      3328.,  1718.,  1960.,  2214.,  2480.,  895.,   996.,   1103.,  1216.,
      642.,   728.,   818.,   912.,   1620.,  1808.,  2004.,  2208.,  2966.,
      3272.,  3590.,  3920.,  3422.,  3752.,  4094.,  4448.,  3878.,  4232.,
      4598.,  4976.,  4334.,  4712.,  5102.,  5504.,  4214.,  4552.,  4902.,
      5264.,  2932.,  3152.,  3380.,  3616.,  1090.,  1176.,  1266.,  1360.,
      861.,   924.,   989.,   1056.,  1970.,  2104.,  2242.,  2384.,  3343.,
      3556.,  3775.,  4000.,  3643.,  3868.,  4099.,  4336.,  3943.,  4180.,
      4423.,  4672.,  4243.,  4492.,  4747.,  5008.,  3199.,  3396.,  3599.,
      3808.,  1794.,  1912.,  2034.,  2160.,  29.,    60.,    93.,    128.,
      33.,    68.,    105.,   144.,   202.,   280.,   362.,   448.,   523.,
      652.,   787.,   928.,   967.,   1108.,  1255.,  1408.,  1411.,  1564.,
      1723.,  1888.,  1855.,  2020.,  2191.,  2368.,  2299.,  2476.,  2659.,
      2848.,  1786.,  1912.,  2042.,  2176.,  1025.,  1092.,  1161.,  1232.,
      1002.,  1112.,  1226.,  1344.,  2436.,  2672.,  2916.,  3168.,  4334.,
      4712.,  5102.,  5504.,  5366.,  5768.,  6182.,  6608.,  6398.,  6824.,
      7262.,  7712.,  7430.,  7880.,  8342.,  8816.,  8462.,  8936.,  9422.,
      9920.,  6308.,  6640.,  6980.,  7328.,  3498.,  3672.,  3850.,  4032.,
      3243.,  3468.,  3699.,  3936.,  7374.,  7848.,  8334.,  8832.,  10265.,
      10884., 11521., 12176., 9405.,  9996.,  10605., 11232., 8289.,  8852.,
      9433.,  10032., 9797.,  10396., 11013., 11648., 11305., 11940., 12593.,
      13264., 7902.,  8328.,  8766.,  9216.,  3531.,  3724.,  3923.,  4128.,
      4916.,  5168.,  5428.,  5696.,  10824., 11360., 11912., 12480., 13052.,
      13776., 14524., 15296., 11532., 12240., 12972., 13728., 9756.,  10448.,
      11164., 11904., 11372., 12112., 12876., 13664., 12988., 13776., 14588.,
      15424., 8648.,  9184.,  9736.,  10304., 3124.,  3376.,  3636.,  3904.,
      5956.,  6256.,  6564.,  6880.,  13096., 13728., 14376., 15040., 14188.,
      15056., 15948., 16864., 11900., 12752., 13628., 14528., 11340., 12112.,
      12908., 13728., 10588., 11344., 12124., 12928., 9580.,  10320., 11084.,
      11872., 7080.,  7584.,  8104.,  8640.,  3460.,  3696.,  3940.,  4192.,
      4116.,  4400.,  4692.,  4992.,  9352.,  9952.,  10568., 11200., 14108.,
      14928., 15772., 16640., 15148., 15952., 16780., 17632., 13052., 13776.,
      14524., 15296., 11532., 12240., 12972., 13728., 9756.,  10448., 11164.,
      11904., 6536.,  7008.,  7496.,  8000.,  2260.,  2480.,  2708.,  2944.,
      4836.,  5104.,  5380.,  5664.,  10728., 11296., 11880., 12480., 14604.,
      15440., 16300., 17184., 16220., 17104., 18012., 18944., 14188., 15056.,
      15948., 16864., 11900., 12752., 13628., 14528., 11340., 12112., 12908.,
      13728., 7592.,  8096.,  8616.,  9152.,  2596.,  2800.,  3012.,  3232.,
      2831.,  3044.,  3263.,  3488.,  6502.,  6952.,  7414.,  7888.,  10229.,
      10876., 11541., 12224., 11401., 12084., 12785., 13504., 12253., 12908.,
      13581., 14272., 12849., 13476., 14121., 14784., 10309., 10844., 11397.,
      11968., 5718.,  6056.,  6406.,  6768.,  207.,   324.,   447.,   576.,
      2402.,  2520.,  2642.,  2768.,  5268.,  5520.,  5780.,  6048.,  6006.,
      6344.,  6694.,  7056.,  6590.,  6952.,  7326.,  7712.,  7174.,  7560.,
      7958.,  8368.,  7758.,  8168.,  8590.,  9024.,  4694.,  5064.,  5446.,
      5840.,  884.,   1104.,  1332.,  1568.,  482.,   536.,   594.,   656.,
      205.,   252.,   301.,   352.,   594.,   696.,   802.,   912.,   1183.,
      1348.,  1519.,  1696.,  1291.,  1468.,  1651.,  1840.,  1399.,  1588.,
      1783.,  1984.,  1507.,  1708.,  1915.,  2128.,  1295.,  1444.,  1599.,
      1760.,  802.,   888.,   978.,   1072.,  13.,    28.,    45.,    64.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6352.,  8208.,  10320., 12688., 6660.,  8980.,  11620., 14580., 9528.,
      12312., 15480., 19032., 9324.,  12572., 16268., 20412., 10604., 13852.,
      17548., 21692., 9324.,  12572., 16268., 20412., 9528.,  12312., 15480.,
      19032., 6660.,  8980.,  11620., 14580., 6352.,  8208.,  10320., 12688.,
      6148.,  8468.,  11108., 14068., 10045., 12849., 16053., 19657., 9894.,
      13246., 17078., 21390., 12479., 16443., 20967., 26051., 10887., 14947.,
      19567., 24747., 14319., 18347., 22935., 28083., 10758., 14238., 18198.,
      22638., 9069.,  11937., 15205., 18873., 6148.,  8468.,  11108., 14068.,
      9528.,  12312., 15480., 19032., 9430.,  12846., 16742., 21118., 13428.,
      17476., 22100., 27300., 13682., 18490., 23970., 30122., 17442., 22314.,
      27858., 34074., 13426., 18234., 23714., 29866., 13428., 17476., 22100.,
      27300., 9686.,  13102., 16998., 21374., 9528.,  12312., 15480., 19032.,
      9836.,  13084., 16780., 20924., 12783., 16811., 21399., 26547., 13218.,
      18090., 23634., 29850., 20133., 25785., 32221., 39441., 17085., 22769.,
      29237., 36489., 18037., 23625., 29997., 37153., 12354., 17098., 22514.,
      28602., 14015., 17979., 22503., 27587., 9836.,  13084., 16780., 20924.,
      11116., 14364., 18060., 22204., 11447., 15571., 20255., 25499., 17234.,
      22170., 27778., 34058., 17085., 22769., 29237., 36489., 18037., 23625.,
      29997., 37153., 14989., 20609., 27013., 34201., 16114., 20922., 26402.,
      32554., 12423., 16483., 21103., 26283., 11116., 14364., 18060., 22204.,
      8812.,  12060., 15756., 19900., 15135., 19227., 23879., 29091., 14498.,
      19370., 24914., 31130., 18037., 23625., 29997., 37153., 14989., 20609.,
      27013., 34201., 20133., 25785., 32221., 39441., 14754., 19626., 25170.,
      31386., 12783., 16811., 21399., 26547., 8812.,  12060., 15756., 19900.,
      11116., 14364., 18060., 22204., 12167., 16227., 20847., 26027., 16370.,
      21178., 26658., 32810., 14989., 20609., 27013., 34201., 20133., 25785.,
      32221., 39441., 17085., 22769., 29237., 36489., 16370., 21178., 26658.,
      32810., 10583., 14579., 19135., 24251., 11116., 14364., 18060., 22204.,
      7992.,  10776., 13944., 17496., 11142., 14622., 18582., 23022., 11988.,
      16164., 20916., 26244., 17442., 22314., 27858., 34074., 14290., 19226.,
      24834., 31114., 16162., 21034., 26578., 32794., 10868., 14916., 19540.,
      24740., 11814., 15166., 18998., 23310., 7992.,  10776., 13944., 17496.,
      7940.,  10260., 12900., 15860., 7813.,  10713., 14013., 17713., 12214.,
      15758., 19782., 24286., 12983., 17107., 21791., 27035., 13599., 17691.,
      22343., 27555., 10631., 14691., 19311., 24491., 11606., 15022., 18918.,
      23294., 8533.,  11369., 14605., 18241., 7940.,  10260., 12900., 15860.,
      5328.,  7184.,  9296.,  11664., 8452.,  10772., 13412., 16372., 7992.,
      10776., 13944., 17496., 10604., 13852., 17548., 21692., 9324.,  12572.,
      16268., 20412., 11628., 14876., 18572., 22716., 7992.,  10776., 13944.,
      17496., 7428.,  9748.,  12388., 15348., 5328.,  7184.,  9296.,  11664.,
      6352.,  8208.,  10320., 12688., 6660.,  8980.,  11620., 14580., 9528.,
      12312., 15480., 19032., 9324.,  12572., 16268., 20412., 11628., 14876.,
      18572., 22716., 9324.,  12572., 16268., 20412., 9528.,  12312., 15480.,
      19032., 6660.,  8980.,  11620., 14580., 6352.,  8208.,  10320., 12688.,
      7172.,  9492.,  12132., 15092., 9069.,  11937., 15205., 18873., 9222.,
      12702., 16662., 21102., 14319., 18347., 22935., 28083., 12119., 16115.,
      20671., 25787., 12479., 16443., 20967., 26051., 9478.,  12958., 16918.,
      21358., 10653., 13585., 16917., 20649., 7172.,  9492.,  12132., 15092.,
      9528.,  12312., 15480., 19032., 10294., 13838., 17862., 22366., 14548.,
      18724., 23476., 28804., 13426., 18234., 23714., 29866., 15042., 19786.,
      25202., 31290., 13682., 18490., 23970., 30122., 14036., 18212., 22964.,
      28292., 10550., 14094., 18118., 22622., 9528.,  12312., 15480., 19032.,
      8812.,  12060., 15756., 19900., 15135., 19227., 23879., 29091., 14498.,
      19370., 24914., 31130., 18037., 23625., 29997., 37153., 14989., 20609.,
      27013., 34201., 20133., 25785., 32221., 39441., 14754., 19626., 25170.,
      31386., 12783., 16811., 21399., 26547., 8812.,  12060., 15756., 19900.,
      11116., 14364., 18060., 22204., 12167., 16227., 20847., 26027., 16370.,
      21178., 26658., 32810., 14989., 20609., 27013., 34201., 20133., 25785.,
      32221., 39441., 17085., 22769., 29237., 36489., 16370., 21178., 26658.,
      32810., 10583., 14579., 19135., 24251., 11116., 14364., 18060., 22204.,
      9836.,  13084., 16780., 20924., 12783., 16811., 21399., 26547., 13218.,
      18090., 23634., 29850., 20133., 25785., 32221., 39441., 17085., 22769.,
      29237., 36489., 18037., 23625., 29997., 37153., 12354., 17098., 22514.,
      28602., 14015., 17979., 22503., 27587., 9836.,  13084., 16780., 20924.,
      11116., 14364., 18060., 22204., 11447., 15571., 20255., 25499., 17234.,
      22170., 27778., 34058., 17085., 22769., 29237., 36489., 18037., 23625.,
      29997., 37153., 14989., 20609., 27013., 34201., 16114., 20922., 26402.,
      32554., 12423., 16483., 21103., 26283., 11116., 14364., 18060., 22204.,
      7992.,  10776., 13944., 17496., 13542., 17150., 21238., 25806., 12596.,
      16900., 21780., 27236., 16162., 21034., 26578., 32794., 13426., 18234.,
      23714., 29866., 17442., 22314., 27858., 34074., 11988., 16164., 20916.,
      26244., 11142., 14622., 18582., 23022., 7992.,  10776., 13944., 17496.,
      7940.,  10260., 12900., 15860., 9397.,  12361., 15725., 19489., 12470.,
      16014., 20038., 24542., 10631., 14691., 19311., 24491., 14319., 18347.,
      22935., 28083., 12983., 17107., 21791., 27035., 12470., 16014., 20038.,
      24542., 7557.,  10457., 13757., 17457., 7940.,  10260., 12900., 15860.,
      5328.,  7184.,  9296.,  11664., 7428.,  9748.,  12388., 15348., 7992.,
      10776., 13944., 17496., 11628., 14876., 18572., 22716., 9324.,  12572.,
      16268., 20412., 10604., 13852., 17548., 21692., 7992.,  10776., 13944.,
      17496., 8452.,  10772., 13412., 16372., 5328.,  7184.,  9296.,  11664.,
      6352.,  8208.,  10320., 12688., 6660.,  8980.,  11620., 14580., 9528.,
      12312., 15480., 19032., 9324.,  12572., 16268., 20412., 10604., 13852.,
      17548., 21692., 9324.,  12572., 16268., 20412., 9528.,  12312., 15480.,
      19032., 6660.,  8980.,  11620., 14580., 6352.,  8208.,  10320., 12688.,
      6148.,  8468.,  11108., 14068., 10045., 12849., 16053., 19657., 9894.,
      13246., 17078., 21390., 12479., 16443., 20967., 26051., 10887., 14947.,
      19567., 24747., 14319., 18347., 22935., 28083., 10758., 14238., 18198.,
      22638., 9069.,  11937., 15205., 18873., 6148.,  8468.,  11108., 14068.,
      9528.,  12312., 15480., 19032., 9430.,  12846., 16742., 21118., 13428.,
      17476., 22100., 27300., 13682., 18490., 23970., 30122., 17442., 22314.,
      27858., 34074., 13426., 18234., 23714., 29866., 13428., 17476., 22100.,
      27300., 9686.,  13102., 16998., 21374., 9528.,  12312., 15480., 19032.,
      9836.,  13084., 16780., 20924., 12783., 16811., 21399., 26547., 13218.,
      18090., 23634., 29850., 20133., 25785., 32221., 39441., 17085., 22769.,
      29237., 36489., 18037., 23625., 29997., 37153., 12354., 17098., 22514.,
      28602., 14015., 17979., 22503., 27587., 9836.,  13084., 16780., 20924.,
      11116., 14364., 18060., 22204., 11447., 15571., 20255., 25499., 17234.,
      22170., 27778., 34058., 17085., 22769., 29237., 36489., 18037., 23625.,
      29997., 37153., 14989., 20609., 27013., 34201., 16114., 20922., 26402.,
      32554., 12423., 16483., 21103., 26283., 11116., 14364., 18060., 22204.,
      8812.,  12060., 15756., 19900., 15135., 19227., 23879., 29091., 14498.,
      19370., 24914., 31130., 18037., 23625., 29997., 37153., 14989., 20609.,
      27013., 34201., 20133., 25785., 32221., 39441., 14754., 19626., 25170.,
      31386., 12783., 16811., 21399., 26547., 8812.,  12060., 15756., 19900.,
      11116., 14364., 18060., 22204., 12167., 16227., 20847., 26027., 16370.,
      21178., 26658., 32810., 14989., 20609., 27013., 34201., 20133., 25785.,
      32221., 39441., 17085., 22769., 29237., 36489., 16370., 21178., 26658.,
      32810., 10583., 14579., 19135., 24251., 11116., 14364., 18060., 22204.,
      7992.,  10776., 13944., 17496., 11142., 14622., 18582., 23022., 11988.,
      16164., 20916., 26244., 17442., 22314., 27858., 34074., 14290., 19226.,
      24834., 31114., 16162., 21034., 26578., 32794., 10868., 14916., 19540.,
      24740., 11814., 15166., 18998., 23310., 7992.,  10776., 13944., 17496.,
      7940.,  10260., 12900., 15860., 7813.,  10713., 14013., 17713., 12214.,
      15758., 19782., 24286., 12983., 17107., 21791., 27035., 13599., 17691.,
      22343., 27555., 10631., 14691., 19311., 24491., 11606., 15022., 18918.,
      23294., 8533.,  11369., 14605., 18241., 7940.,  10260., 12900., 15860.,
      5328.,  7184.,  9296.,  11664., 8452.,  10772., 13412., 16372., 7992.,
      10776., 13944., 17496., 10604., 13852., 17548., 21692., 9324.,  12572.,
      16268., 20412., 11628., 14876., 18572., 22716., 7992.,  10776., 13944.,
      17496., 7428.,  9748.,  12388., 15348., 5328.,  7184.,  9296.,  11664.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  743.,   1091.,  1487.,  1931.,  1199.,  1643.,
      2135.,  2675.,  1655.,  2195.,  2783.,  3419.,  2111.,  2747.,  3431.,
      4163.,  2394.,  2882.,  3402.,  3954.,  1733.,  2009.,  2301.,  2609.,
      250.,   610.,   1002.,  1426.,  1684.,  2276.,  2932.,  3652.,  3726.,
      4678.,  5726.,  6870.,  3550.,  4438.,  5422.,  6502.,  5614.,  6694.,
      7870.,  9142.,  7678.,  8950.,  10318., 11782., 9742.,  11206., 12766.,
      14422., 8724.,  9828.,  10996., 12228., 5562.,  6178.,  6826.,  7506.,
      3231.,  3995.,  4807.,  5667.,  6158.,  7622.,  9182.,  10838., 11021.,
      12865., 14853., 16985., 8293.,  9913.,  11677., 13585., 9853.,  11505.,
      13301., 15241., 13653., 15593., 17677., 19905., 17453., 19681., 22053.,
      24569., 12910., 14502., 16190., 17974., 4767.,  5531.,  6343.,  7203.,
      8372.,  9348.,  10388., 11492., 14184., 16136., 18216., 20424., 12636.,
      15308., 18172., 21228., 12604., 14892., 17372., 20044., 10716., 12876.,
      15228., 17772., 13116., 15404., 17884., 20556., 17756., 20428., 23292.,
      26348., 14184., 16136., 18216., 20424., 6324.,  7300.,  8340.,  9444.,
      8212.,  9316.,  10484., 11716., 19496., 21704., 24040., 26504., 21884.,
      24940., 28188., 31628., 12636., 15308., 18172., 21228., 12604., 14892.,
      17372., 20044., 10716., 12876., 15228., 17772., 13116., 15404., 17884.,
      20556., 10920., 12616., 14440., 16392., 4948.,  5796.,  6708.,  7684.,
      6836.,  7812.,  8852.,  9956.,  17448., 19656., 21992., 24456., 25820.,
      29004., 32380., 35948., 21884., 24940., 28188., 31628., 12636., 15308.,
      18172., 21228., 12604., 14892., 17372., 20044., 10716., 12876., 15228.,
      17772., 7656.,  9096.,  10664., 12360., 3572.,  4292.,  5076.,  5924.,
      5460.,  6308.,  7220.,  8196.,  14184., 16136., 18216., 20424., 22396.,
      25452., 28700., 32140., 25820., 29004., 32380., 35948., 21884., 24940.,
      28188., 31628., 12636., 15308., 18172., 21228., 12604., 14892., 17372.,
      20044., 6632.,  8072.,  9640.,  11336., 2196.,  2788.,  3444.,  4164.,
      4055.,  4723.,  5439.,  6203.,  10686., 12214., 13838., 15558., 17013.,
      19337., 21805., 24417., 21197., 23809., 26565., 29465., 24165., 26809.,
      29597., 32529., 19773., 22193., 24757., 27465., 10069., 12009., 14093.,
      16321., 7070.,  8214.,  9454.,  10790., 1047.,  1459.,  1919.,  2427.,
      2218.,  2642.,  3098.,  3586.,  6068.,  7044.,  8084.,  9188.,  9566.,
      10966., 12462., 14054., 12142., 13734., 15422., 17206., 14718., 16502.,
      18382., 20358., 16078., 17798., 19614., 21526., 10078., 11478., 12974.,
      14566., 756.,   1476.,  2260.,  3108.,  490.,   658.,   858.,   1090.,
      333.,   449.,   581.,   729.,   1098.,  1394.,  1722.,  2082.,  2423.,
      2963.,  3551.,  4187.,  3263.,  3899.,  4583.,  5315.,  4103.,  4835.,
      5615.,  6443.,  4943.,  5771.,  6647.,  7571.,  4567.,  5235.,  5951.,
      6715.,  2986.,  3410.,  3866.,  4354.,  77.,    193.,   325.,   473.,
      101.,   249.,   413.,   593.,   762.,   1122.,  1514.,  1938.,  2111.,
      2747.,  3431.,  4163.,  4103.,  4835.,  5615.,  6443.,  6095.,  6923.,
      7799.,  8723.,  8087.,  9011.,  9983.,  11003., 10079., 11099., 12167.,
      13283., 8218.,  8962.,  9738.,  10546., 4901.,  5305.,  5725.,  6161.,
      4026.,  4642.,  5290.,  5970.,  5972.,  6820.,  7732.,  8708.,  8526.,
      9734.,  11038., 12438., 5278.,  6422.,  7662.,  8998.,  8366.,  9702.,
      11134., 12662., 11454., 12982., 14606., 16326., 14542., 16262., 18078.,
      19990., 7700.,  8804.,  9972.,  11204., 5050.,  5666.,  6314.,  6994.,
      9983.,  10875., 11815., 12803., 8718.,  10182., 11742., 13398., 13165.,
      15137., 17253., 19513., 10949., 12697., 14589., 16625., 8925.,  10705.,
      12629., 14697., 13237., 15305., 17517., 19873., 17549., 19905., 22405.,
      25049., 11374., 12966., 14654., 16438., 7423.,  8315.,  9255.,  10243.,
      10612., 11844., 13140., 14500., 17448., 19656., 21992., 24456., 20188.,
      23372., 26748., 30316., 18108., 20908., 23900., 27084., 18268., 20940.,
      23804., 26860., 18620., 21420., 24412., 27596., 25308., 28492., 31868.,
      35436., 18472., 20680., 23016., 25480., 11636., 12868., 14164., 15524.,
      13524., 14884., 16308., 17796., 21736., 24200., 26792., 29512., 31484.,
      35052., 38812., 42764., 20188., 23372., 26748., 30316., 18108., 20908.,
      23900., 27084., 18268., 20940., 23804., 26860., 18620., 21420., 24412.,
      27596., 14184., 16136., 18216., 20424., 9236.,  10340., 11508., 12740.,
      11124., 12356., 13652., 15012., 22760., 25224., 27816., 30536., 33372.,
      37068., 40956., 45036., 31484., 35052., 38812., 42764., 20188., 23372.,
      26748., 30316., 18108., 20908., 23900., 27084., 18268., 20940., 23804.,
      26860., 9896.,  11592., 13416., 15368., 6836.,  7812.,  8852.,  9956.,
      8724.,  9828.,  10996., 12228., 18472., 20680., 23016., 25480., 31996.,
      35564., 39324., 43276., 33372., 37068., 40956., 45036., 31484., 35052.,
      38812., 42764., 20188., 23372., 26748., 30316., 18108., 20908., 23900.,
      27084., 11944., 13640., 15464., 17416., 4436.,  5284.,  6196.,  7172.,
      5687.,  6483.,  7327.,  8219.,  12222., 13750., 15374., 17094., 21205.,
      23657., 26253., 28993., 25901., 28641., 31525., 34553., 25285., 28057.,
      30973., 34033., 21405., 23953., 26645., 29481., 8117.,  10185., 12397.,
      14753., 4510.,  5654.,  6894.,  8230.,  2679.,  3219.,  3807.,  4443.,
      2730.,  3154.,  3610.,  4098.,  7092.,  8068.,  9108.,  10212., 13342.,
      14998., 16750., 18598., 16942., 18790., 20734., 22774., 20542., 22582.,
      24718., 26950., 18830., 20806., 22878., 25046., 13854., 15510., 17262.,
      19110., 5044.,  6020.,  7060.,  8164.,  1194.,  1618.,  2074.,  2562.,
      1453.,  1697.,  1957.,  2233.,  3850.,  4402.,  4986.,  5602.,  7319.,
      8243.,  9215.,  10235., 9695.,  10715., 11783., 12899., 12071., 13187.,
      14351., 15563., 14447., 15659., 16919., 18227., 11511., 12563., 13663.,
      14811., 6762.,  7442.,  8154.,  8898.,  173.,   417.,   677.,   953.,
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  743.,   1091.,  1487.,  1931.,  1199.,  1643.,
      2135.,  2675.,  1655.,  2195.,  2783.,  3419.,  2111.,  2747.,  3431.,
      4163.,  2394.,  2882.,  3402.,  3954.,  1733.,  2009.,  2301.,  2609.,
      250.,   610.,   1002.,  1426.,  1684.,  2276.,  2932.,  3652.,  3726.,
      4678.,  5726.,  6870.,  3550.,  4438.,  5422.,  6502.,  5614.,  6694.,
      7870.,  9142.,  7678.,  8950.,  10318., 11782., 9742.,  11206., 12766.,
      14422., 8724.,  9828.,  10996., 12228., 5562.,  6178.,  6826.,  7506.,
      3231.,  3995.,  4807.,  5667.,  6158.,  7622.,  9182.,  10838., 11021.,
      12865., 14853., 16985., 8293.,  9913.,  11677., 13585., 9853.,  11505.,
      13301., 15241., 13653., 15593., 17677., 19905., 17453., 19681., 22053.,
      24569., 12910., 14502., 16190., 17974., 4767.,  5531.,  6343.,  7203.,
      8372.,  9348.,  10388., 11492., 14184., 16136., 18216., 20424., 12636.,
      15308., 18172., 21228., 12604., 14892., 17372., 20044., 10716., 12876.,
      15228., 17772., 13116., 15404., 17884., 20556., 17756., 20428., 23292.,
      26348., 14184., 16136., 18216., 20424., 6324.,  7300.,  8340.,  9444.,
      8212.,  9316.,  10484., 11716., 19496., 21704., 24040., 26504., 21884.,
      24940., 28188., 31628., 12636., 15308., 18172., 21228., 12604., 14892.,
      17372., 20044., 10716., 12876., 15228., 17772., 13116., 15404., 17884.,
      20556., 10920., 12616., 14440., 16392., 4948.,  5796.,  6708.,  7684.,
      6836.,  7812.,  8852.,  9956.,  17448., 19656., 21992., 24456., 25820.,
      29004., 32380., 35948., 21884., 24940., 28188., 31628., 12636., 15308.,
      18172., 21228., 12604., 14892., 17372., 20044., 10716., 12876., 15228.,
      17772., 7656.,  9096.,  10664., 12360., 3572.,  4292.,  5076.,  5924.,
      5460.,  6308.,  7220.,  8196.,  14184., 16136., 18216., 20424., 22396.,
      25452., 28700., 32140., 25820., 29004., 32380., 35948., 21884., 24940.,
      28188., 31628., 12636., 15308., 18172., 21228., 12604., 14892., 17372.,
      20044., 6632.,  8072.,  9640.,  11336., 2196.,  2788.,  3444.,  4164.,
      4055.,  4723.,  5439.,  6203.,  10686., 12214., 13838., 15558., 17013.,
      19337., 21805., 24417., 21197., 23809., 26565., 29465., 24165., 26809.,
      29597., 32529., 19773., 22193., 24757., 27465., 10069., 12009., 14093.,
      16321., 7070.,  8214.,  9454.,  10790., 1047.,  1459.,  1919.,  2427.,
      2218.,  2642.,  3098.,  3586.,  6068.,  7044.,  8084.,  9188.,  9566.,
      10966., 12462., 14054., 12142., 13734., 15422., 17206., 14718., 16502.,
      18382., 20358., 16078., 17798., 19614., 21526., 10078., 11478., 12974.,
      14566., 756.,   1476.,  2260.,  3108.,  490.,   658.,   858.,   1090.,
      333.,   449.,   581.,   729.,   1098.,  1394.,  1722.,  2082.,  2423.,
      2963.,  3551.,  4187.,  3263.,  3899.,  4583.,  5315.,  4103.,  4835.,
      5615.,  6443.,  4943.,  5771.,  6647.,  7571.,  4567.,  5235.,  5951.,
      6715.,  2986.,  3410.,  3866.,  4354.,  77.,    193.,   325.,   473.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,
      7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704.,
      20304., 600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,
      2378.,  3706.,  5418.,  570.,   1770.,  3354.,  5322.,  1434.,  2378.,
      3706.,  5418.,  570.,   1770.,  3354.,  5322.,  1434.,  2378.,  3706.,
      5418.,  380.,   1180.,  2236.,  3548.,  30.,    174.,   446.,   846.,
      380.,   1180.,  2236.,  3548.,  2808.,  4408.,  6520.,  9144.,  1140.,
      3540.,  6708.,  10644., 4212.,  6612.,  9780.,  13716., 1140.,  3540.,
      6708.,  10644., 4212.,  6612.,  9780.,  13716., 1140.,  3540.,  6708.,
      10644., 2808.,  4408.,  6520.,  9144.,  380.,   1180.,  2236.,  3548.,
      1434.,  2378.,  3706.,  5418.,  1140.,  3540.,  6708.,  10644., 5646.,
      8990.,  13486., 19134., 1710.,  5310.,  10062., 15966., 5646.,  8990.,
      13486., 19134., 1710.,  5310.,  10062., 15966., 5646.,  8990.,  13486.,
      19134., 1140.,  3540.,  6708.,  10644., 1434.,  2378.,  3706.,  5418.,
      760.,   2360.,  4472.,  7096.,  5616.,  8816.,  13040., 18288., 2280.,
      7080.,  13416., 21288., 8424.,  13224., 19560., 27432., 2280.,  7080.,
      13416., 21288., 8424.,  13224., 19560., 27432., 2280.,  7080.,  13416.,
      21288., 5616.,  8816.,  13040., 18288., 760.,   2360.,  4472.,  7096.,
      2808.,  4408.,  6520.,  9144.,  1520.,  4720.,  8944.,  14192., 8424.,
      13224., 19560., 27432., 2280.,  7080.,  13416., 21288., 8424.,  13224.,
      19560., 27432., 2280.,  7080.,  13416., 21288., 8424.,  13224., 19560.,
      27432., 1520.,  4720.,  8944.,  14192., 2808.,  4408.,  6520.,  9144.,
      760.,   2360.,  4472.,  7096.,  5616.,  8816.,  13040., 18288., 2280.,
      7080.,  13416., 21288., 8424.,  13224., 19560., 27432., 2280.,  7080.,
      13416., 21288., 8424.,  13224., 19560., 27432., 2280.,  7080.,  13416.,
      21288., 5616.,  8816.,  13040., 18288., 760.,   2360.,  4472.,  7096.,
      2808.,  4408.,  6520.,  9144.,  1520.,  4720.,  8944.,  14192., 8424.,
      13224., 19560., 27432., 2280.,  7080.,  13416., 21288., 8424.,  13224.,
      19560., 27432., 2280.,  7080.,  13416., 21288., 8424.,  13224., 19560.,
      27432., 1520.,  4720.,  8944.,  14192., 2808.,  4408.,  6520.,  9144.,
      570.,   1770.,  3354.,  5322.,  4212.,  6612.,  9780.,  13716., 1710.,
      5310.,  10062., 15966., 6990.,  10846., 15854., 22014., 1710.,  5310.,
      10062., 15966., 6990.,  10846., 15854., 22014., 1710.,  5310.,  10062.,
      15966., 4212.,  6612.,  9780.,  13716., 570.,   1770.,  3354.,  5322.,
      1404.,  2204.,  3260.,  4572.,  760.,   2360.,  4472.,  7096.,  4212.,
      6612.,  9780.,  13716., 1140.,  3540.,  6708.,  10644., 4212.,  6612.,
      9780.,  13716., 1140.,  3540.,  6708.,  10644., 4212.,  6612.,  9780.,
      13716., 760.,   2360.,  4472.,  7096.,  1404.,  2204.,  3260.,  4572.,
      190.,   590.,   1118.,  1774.,  1404.,  2204.,  3260.,  4572.,  570.,
      1770.,  3354.,  5322.,  2778.,  4234.,  6074.,  8298.,  570.,   1770.,
      3354.,  5322.,  2778.,  4234.,  6074.,  8298.,  570.,   1770.,  3354.,
      5322.,  1404.,  2204.,  3260.,  4572.,  190.,   590.,   1118.,  1774.,
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,
      2378.,  3706.,  5418.,  570.,   1770.,  3354.,  5322.,  1434.,  2378.,
      3706.,  5418.,  570.,   1770.,  3354.,  5322.,  1434.,  2378.,  3706.,
      5418.,  380.,   1180.,  2236.,  3548.,  30.,    174.,   446.,   846.,
      380.,   1180.,  2236.,  3548.,  2808.,  4408.,  6520.,  9144.,  1140.,
      3540.,  6708.,  10644., 4212.,  6612.,  9780.,  13716., 1140.,  3540.,
      6708.,  10644., 4212.,  6612.,  9780.,  13716., 1140.,  3540.,  6708.,
      10644., 2808.,  4408.,  6520.,  9144.,  380.,   1180.,  2236.,  3548.,
      1434.,  2378.,  3706.,  5418.,  1140.,  3540.,  6708.,  10644., 5646.,
      8990.,  13486., 19134., 1710.,  5310.,  10062., 15966., 5646.,  8990.,
      13486., 19134., 1710.,  5310.,  10062., 15966., 5646.,  8990.,  13486.,
      19134., 1140.,  3540.,  6708.,  10644., 1434.,  2378.,  3706.,  5418.,
      760.,   2360.,  4472.,  7096.,  5616.,  8816.,  13040., 18288., 2280.,
      7080.,  13416., 21288., 8424.,  13224., 19560., 27432., 2280.,  7080.,
      13416., 21288., 8424.,  13224., 19560., 27432., 2280.,  7080.,  13416.,
      21288., 5616.,  8816.,  13040., 18288., 760.,   2360.,  4472.,  7096.,
      2808.,  4408.,  6520.,  9144.,  1520.,  4720.,  8944.,  14192., 8424.,
      13224., 19560., 27432., 2280.,  7080.,  13416., 21288., 8424.,  13224.,
      19560., 27432., 2280.,  7080.,  13416., 21288., 8424.,  13224., 19560.,
      27432., 1520.,  4720.,  8944.,  14192., 2808.,  4408.,  6520.,  9144.,
      760.,   2360.,  4472.,  7096.,  5616.,  8816.,  13040., 18288., 2280.,
      7080.,  13416., 21288., 8424.,  13224., 19560., 27432., 2280.,  7080.,
      13416., 21288., 8424.,  13224., 19560., 27432., 2280.,  7080.,  13416.,
      21288., 5616.,  8816.,  13040., 18288., 760.,   2360.,  4472.,  7096.,
      2808.,  4408.,  6520.,  9144.,  1520.,  4720.,  8944.,  14192., 8424.,
      13224., 19560., 27432., 2280.,  7080.,  13416., 21288., 8424.,  13224.,
      19560., 27432., 2280.,  7080.,  13416., 21288., 8424.,  13224., 19560.,
      27432., 1520.,  4720.,  8944.,  14192., 2808.,  4408.,  6520.,  9144.,
      570.,   1770.,  3354.,  5322.,  4212.,  6612.,  9780.,  13716., 1710.,
      5310.,  10062., 15966., 6990.,  10846., 15854., 22014., 1710.,  5310.,
      10062., 15966., 6990.,  10846., 15854., 22014., 1710.,  5310.,  10062.,
      15966., 4212.,  6612.,  9780.,  13716., 570.,   1770.,  3354.,  5322.,
      1404.,  2204.,  3260.,  4572.,  760.,   2360.,  4472.,  7096.,  4212.,
      6612.,  9780.,  13716., 1140.,  3540.,  6708.,  10644., 4212.,  6612.,
      9780.,  13716., 1140.,  3540.,  6708.,  10644., 4212.,  6612.,  9780.,
      13716., 760.,   2360.,  4472.,  7096.,  1404.,  2204.,  3260.,  4572.,
      190.,   590.,   1118.,  1774.,  1404.,  2204.,  3260.,  4572.,  570.,
      1770.,  3354.,  5322.,  2778.,  4234.,  6074.,  8298.,  570.,   1770.,
      3354.,  5322.,  2778.,  4234.,  6074.,  8298.,  570.,   1770.,  3354.,
      5322.,  1404.,  2204.,  3260.,  4572.,  190.,   590.,   1118.,  1774.,
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,
      2378.,  3706.,  5418.,  570.,   1770.,  3354.,  5322.,  1434.,  2378.,
      3706.,  5418.,  570.,   1770.,  3354.,  5322.,  1434.,  2378.,  3706.,
      5418.,  380.,   1180.,  2236.,  3548.,  30.,    174.,   446.,   846.,
      380.,   1180.,  2236.,  3548.,  2808.,  4408.,  6520.,  9144.,  1140.,
      3540.,  6708.,  10644., 4212.,  6612.,  9780.,  13716., 1140.,  3540.,
      6708.,  10644., 4212.,  6612.,  9780.,  13716., 1140.,  3540.,  6708.,
      10644., 2808.,  4408.,  6520.,  9144.,  380.,   1180.,  2236.,  3548.,
      1434.,  2378.,  3706.,  5418.,  1140.,  3540.,  6708.,  10644., 5646.,
      8990.,  13486., 19134., 1710.,  5310.,  10062., 15966., 5646.,  8990.,
      13486., 19134., 1710.,  5310.,  10062., 15966., 5646.,  8990.,  13486.,
      19134., 1140.,  3540.,  6708.,  10644., 1434.,  2378.,  3706.,  5418.,
      760.,   2360.,  4472.,  7096.,  5616.,  8816.,  13040., 18288., 2280.,
      7080.,  13416., 21288., 8424.,  13224., 19560., 27432., 2280.,  7080.,
      13416., 21288., 8424.,  13224., 19560., 27432., 2280.,  7080.,  13416.,
      21288., 5616.,  8816.,  13040., 18288., 760.,   2360.,  4472.,  7096.,
      2808.,  4408.,  6520.,  9144.,  1520.,  4720.,  8944.,  14192., 8424.,
      13224., 19560., 27432., 2280.,  7080.,  13416., 21288., 8424.,  13224.,
      19560., 27432., 2280.,  7080.,  13416., 21288., 8424.,  13224., 19560.,
      27432., 1520.,  4720.,  8944.,  14192., 2808.,  4408.,  6520.,  9144.,
      760.,   2360.,  4472.,  7096.,  5616.,  8816.,  13040., 18288., 2280.,
      7080.,  13416., 21288., 8424.,  13224., 19560., 27432., 2280.,  7080.,
      13416., 21288., 8424.,  13224., 19560., 27432., 2280.,  7080.,  13416.,
      21288., 5616.,  8816.,  13040., 18288., 760.,   2360.,  4472.,  7096.,
      2808.,  4408.,  6520.,  9144.,  1520.,  4720.,  8944.,  14192., 8424.,
      13224., 19560., 27432., 2280.,  7080.,  13416., 21288., 8424.,  13224.,
      19560., 27432., 2280.,  7080.,  13416., 21288., 8424.,  13224., 19560.,
      27432., 1520.,  4720.,  8944.,  14192., 2808.,  4408.,  6520.,  9144.,
      570.,   1770.,  3354.,  5322.,  4212.,  6612.,  9780.,  13716., 1710.,
      5310.,  10062., 15966., 6990.,  10846., 15854., 22014., 1710.,  5310.,
      10062., 15966., 6990.,  10846., 15854., 22014., 1710.,  5310.,  10062.,
      15966., 4212.,  6612.,  9780.,  13716., 570.,   1770.,  3354.,  5322.,
      1404.,  2204.,  3260.,  4572.,  760.,   2360.,  4472.,  7096.,  4212.,
      6612.,  9780.,  13716., 1140.,  3540.,  6708.,  10644., 4212.,  6612.,
      9780.,  13716., 1140.,  3540.,  6708.,  10644., 4212.,  6612.,  9780.,
      13716., 760.,   2360.,  4472.,  7096.,  1404.,  2204.,  3260.,  4572.,
      190.,   590.,   1118.,  1774.,  1404.,  2204.,  3260.,  4572.,  570.,
      1770.,  3354.,  5322.,  2778.,  4234.,  6074.,  8298.,  570.,   1770.,
      3354.,  5322.,  2778.,  4234.,  6074.,  8298.,  570.,   1770.,  3354.,
      5322.,  1404.,  2204.,  3260.,  4572.,  190.,   590.,   1118.,  1774.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2220.,  3070.,  4046.,  5152.,  5558.,  5964.,  6370.,  5930.,  5340.,
      4596.,  4600.,  6225.,  8050.,  10080., 10710., 11340., 11970., 10975.,
      9750.,  8290.,  8270.,  11035., 14091., 17444., 18347., 19250., 20153.,
      18285., 16090., 13562., 13510., 17786., 22397., 27350., 28319., 29224.,
      30065., 26552., 23110., 19284., 19450., 24778., 30447., 36464., 36985.,
      37442., 37835., 32846., 28370., 23504., 23598., 29530., 35809., 42442.,
      42515., 42524., 42469., 36452., 31390., 25932., 25954., 32042., 38483.,
      45284., 44909., 44470., 43967., 37370., 32170., 26568., 26138., 31739.,
      37657., 43898., 43047., 42132., 41153., 34443., 29620., 24438., 23352.,
      27681., 32274., 37136., 35760., 34320., 32816., 26731., 23040., 19050.,
      17316., 19518., 21914., 24508., 22558., 20544., 18466., 13814., 12080.,
      10124., 9068.,  11830., 14798., 17976., 18382., 18276., 18106., 15946.,
      13556., 10932., 13408., 17365., 21574., 26040., 26670., 26340., 25946.,
      22699., 19170., 15354., 18254., 23575., 29211., 35168., 36071., 35566.,
      34997., 30541., 25734., 20570., 23886., 30810., 38129., 45850., 47075.,
      46444., 45749., 39892., 33598., 26860., 22658., 29290., 36323., 43764.,
      44989., 43910., 42767., 37226., 31242., 24808., 19638., 25530., 31829.,
      38542., 39767., 38240., 36649., 31872., 26646., 20964., 14634., 19146.,
      24007., 29224., 30065., 30842., 32067., 28694., 24930., 20768., 19578.,
      25087., 30937., 37134., 37499., 37800., 38997., 34587., 29800., 24630.,
      22336., 28253., 34486., 41040., 40880., 40656., 41776., 36871., 31620.,
      26018., 22628., 28294., 34234., 40452., 39718., 38920., 39914., 35126.,
      30040., 24652., 3884.,  5230.,  6734.,  8400.,  8806.,  9212.,  9618.,
      8810.,  7820.,  6644.,  7240.,  9625.,  12250., 15120., 15750., 16380.,
      17010., 15415., 13550., 11410., 12110., 15955., 20139., 24604., 25379.,
      26090., 26737., 23725., 20338., 16570., 18134., 23610., 29477., 35230.,
      35879., 36464., 36985., 32432., 27446., 22020., 22282., 28810., 35735.,
      42104., 42305., 42442., 42515., 36934., 30914., 24448., 24638., 31770.,
      39305., 45842., 45595., 45284., 44909., 38748., 32142., 25084., 25202.,
      32490., 40187., 46444., 45749., 44990., 44167., 37874., 31130., 23928.,
      23514., 30275., 37401., 42594., 41423., 40188., 38889., 32939., 26588.,
      19830., 18632., 24025., 29722., 32976., 31280., 29520., 27696., 22883.,
      17736., 12250., 10276., 13390., 16730., 20300., 21294., 22288., 23282.,
      20726., 17920., 14860.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     10.,    20.,    30.,    40.,    50.,    52.,    45.,
      28.,    13.,    41.,    86.,    150.,   186.,   222.,   258.,   239.,
      191.,   112.,   64.,    167.,   312.,   502.,   580.,   658.,   736.,
      645.,   494.,   280.,   182.,   438.,   772.,   1188.,  1324.,  1460.,
      1596.,  1354.,  1010.,  560.,   378.,   858.,   1444.,  2140.,  2276.,
      2412.,  2548.,  2110.,  1542.,  840.,   574.,   1278.,  2116.,  3092.,
      3228.,  3364.,  3500.,  2866.,  2074.,  1120.,  770.,   1698.,  2788.,
      4044.,  4180.,  4316.,  4452.,  3622.,  2606.,  1400.,  916.,   1967.,
      3156.,  4486.,  4612.,  4738.,  4864.,  3885.,  2750.,  1456.,  855.,
      1811.,  2870.,  4034.,  4134.,  4234.,  4334.,  3425.,  2401.,  1260.,
      559.,   1174.,  1846.,  2576.,  2634.,  2692.,  2750.,  2158.,  1503.,
      784.,   17.,    52.,    106.,   180.,   254.,   328.,   402.,   340.,
      253.,   140.,   157.,   361.,   614.,   918.,   1082.,  1246.,  1410.,
      1151.,  831.,   448.,   448.,   983.,   1608.,  2326.,  2596.,  2866.,
      3136.,  2517.,  1790.,  952.,   918.,   1974.,  3172.,  4516.,  4908.,
      5300.,  5692.,  4522.,  3186.,  1680.,  1562.,  3290.,  5188.,  7260.,
      7652.,  8044.,  8436.,  6622.,  4614.,  2408.,  2206.,  4606.,  7204.,
      10004., 10396., 10788., 11180., 8722.,  6042.,  3136.,  2850.,  5922.,
      9220.,  12748., 13140., 13532., 13924., 10822., 7470.,  3864.,  2644.,
      5471.,  8484.,  11686., 12004., 12322., 12640., 9789.,  6734.,  3472.,
      2119.,  4371.,  6758.,  9282.,  9510.,  9738.,  9966.,  7697.,  5281.,
      2716.,  1247.,  2566.,  3958.,  5424.,  5546.,  5668.,  5790.,  4462.,
      3055.,  1568.,  33.,    100.,   202.,   340.,   478.,   616.,   754.,
      628.,   461.,   252.,   301.,   681.,   1142.,  1686.,  1978.,  2270.,
      2562.,  2063.,  1471.,  784.,   832.,   1799.,  2904.,  4150.,  4612.,
      5074.,  5536.,  4389.,  3086.,  1624.,  1654.,  3510.,  5572.,  7844.,
      8492.,  9140.,  9788.,  7690.,  5362.,  2800.,  2746.,  5722.,  8932.,
      12380., 13028., 13676., 14324., 11134., 7686.,  3976.,  3838.,  7934.,
      12292., 16916., 17564., 18212., 18860., 14578., 10010., 5152.,  4930.,
      10146., 15652., 21452., 22100., 22748., 23396., 18022., 12334., 6328.,
      4372.,  8975.,  13812., 18886., 19396., 19906., 20416., 15693., 10718.,
      5488.,  3383.,  6931.,  10646., 14530., 14886., 15242., 15598., 11969.,
      8161.,  4172.,  1935.,  3958.,  6070.,  8272.,  8458.,  8644.,  8830.,
      6766.,  4607.,  2352.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6560.,  8376.,  10544., 11208., 10112., 10808., 12240., 11520., 10128.,
      8640.,  9020.,  11761., 14930., 17831., 17489., 16795., 17605., 14542.,
      10555., 7492.,  11168., 14296., 17936., 20504., 20796., 19840., 19236.,
      17656., 15020., 12400., 12940., 16605., 20874., 25227., 25937., 24375.,
      23933., 21022., 17779., 13636., 18172., 21025., 24530., 28039., 28109.,
      27059., 25977., 20614., 15767., 13300., 16108., 18053., 20570., 25155.,
      26985., 26927., 27861., 24238., 20059., 17572., 14172., 17609., 21666.,
      24415., 24229., 25227., 25937., 21142., 16639., 13012., 17392., 20404.,
      24008., 26140., 25968., 26212., 26072., 21904., 16952., 12192., 11644.,
      14129., 17042., 18183., 17665., 18939., 19957., 16654., 13675., 10340.,
      10688., 13328., 16352., 17424., 16808., 15936., 14808., 13072., 10728.,
      7648.,  5280.,  7672.,  10416., 13544., 14720., 14776., 15312., 13760.,
      11536., 9728.,  10076., 12425., 15106., 18159., 18457., 16611., 16013.,
      14142., 12307., 9956.,  13408., 14600., 16240., 20424., 21356., 21296.,
      21332., 17624., 14684., 12336., 16108., 18053., 20570., 25155., 26985.,
      26927., 27861., 24238., 20059., 17572., 14172., 17609., 21666., 24415.,
      24229., 25227., 25937., 21142., 16639., 13012., 17804., 21069., 25002.,
      27547., 27585., 28039., 28109., 24062., 19107., 14212., 14268., 17777.,
      21874., 24375., 23933., 25155., 26985., 23526., 20135., 16116., 15216.,
      18660., 22632., 24812., 23520., 21844., 21672., 18608., 14568., 11296.,
      11100., 14121., 17602., 19087., 19209., 19075., 19421., 17726., 15075.,
      12548., 7808.,  10000., 12576., 14992., 15016., 14784., 15928., 13968.,
      11304., 7904.,  8416.,  10488., 12912., 15720., 16000., 15416., 14576.,
      11328., 9168.,  7936.,  12092., 12737., 13746., 17207., 19137., 19307.,
      19221., 16110., 12747., 11396., 10720., 13656., 17104., 21016., 22204.,
      22656., 22724., 18040., 13804., 10608., 17804., 21069., 25002., 27547.,
      27585., 28039., 28109., 24062., 19107., 14212., 14268., 17777., 21874.,
      24375., 23933., 25155., 26985., 23526., 20135., 16116., 15916., 19765.,
      24250., 27059., 25977., 24415., 24229., 21006., 16651., 12900., 14364.,
      18681., 23682., 26927., 27861., 27547., 27585., 25206., 21551., 17684.,
      11952., 15156., 18952., 22812., 23792., 22628., 22712., 20496., 17144.,
      12960., 13436., 15457., 17970., 20311., 20945., 20587., 20325., 16430.,
      11547., 9316.,  9600.,  11856., 14496., 16944., 17832., 16960., 17208.,
      14928., 11944., 10272.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    59.,    124.,   196.,   268.,   340.,   365.,   322.,
      203.,   76.,    264.,   580.,   1040.,  1312.,  1584.,  1856.,  1744.,
      1408.,  832.,   437.,   1174.,  2235.,  3644.,  4244.,  4844.,  5444.,
      4809.,  3706.,  2111.,  1312.,  3200.,  5696.,  8832.,  9888.,  10944.,
      12000., 10232., 7664.,  4264.,  2824.,  6448.,  10904., 16224., 17088.,
      17696., 18048., 14000., 10144., 5488.,  4144.,  9056.,  14768., 21312.,
      21152., 20736., 20064., 14696., 10576., 5688.,  4440.,  9616.,  15560.,
      22304., 21120., 19680., 17984., 12320., 8960.,  4864.,  3605.,  7766.,
      12507., 17852., 15572., 13036., 10244., 5385.,  4090.,  2303.,  1136.,
      2560.,  4288.,  6336.,  7120.,  7904.,  8688.,  7132.,  5176.,  2804.,
      1097.,  2382.,  3863.,  5548.,  6004.,  6460.,  6916.,  5561.,  3962.,
      2111.,  101.,   342.,   731.,   1276.,  1860.,  2444.,  3028.,  2573.,
      1922.,  1067.,  1164.,  2696.,  4612.,  6928.,  8224.,  9520.,  10816.,
      8848.,  6400.,  3456.,  3413.,  7510.,  12315., 17852., 19988., 22124.,
      24260., 19497., 13882., 7391.,  7072.,  15232., 24512., 34944., 38048.,
      41152., 44256., 35192., 24816., 13096., 12168., 25648., 40472., 56672.,
      55488., 54048., 52352., 37424., 26272., 13808., 12976., 27232., 42800.,
      59712., 57504., 55040., 52320., 36584., 25680., 13496., 12760., 26768.,
      42056., 58656., 55424., 51936., 48192., 32672., 23040., 12160., 9141.,
      19222., 30267., 42300., 37460., 32364., 27012., 15465., 11194., 6047.,
      2992.,  6528.,  10624., 15296., 17104., 18912., 20720., 16540., 11704.,
      6196.,  2473.,  5262.,  8375.,  11820., 12788., 13756., 14724., 11609.,
      8122.,  4255.,  5.,     22.,    59.,    124.,   196.,   268.,   340.,
      365.,   322.,   203.,   76.,    264.,   580.,   1040.,  1312.,  1584.,
      1856.,  1744.,  1408.,  832.,   437.,   1174.,  2235.,  3644.,  4244.,
      4844.,  5444.,  4809.,  3706.,  2111.,  1312.,  3200.,  5696.,  8832.,
      9888.,  10944., 12000., 10232., 7664.,  4264.,  2824.,  6448.,  10904.,
      16224., 17088., 17696., 18048., 14000., 10144., 5488.,  4144.,  9056.,
      14768., 21312., 21152., 20736., 20064., 14696., 10576., 5688.,  4440.,
      9616.,  15560., 22304., 21120., 19680., 17984., 12320., 8960.,  4864.,
      3605.,  7766.,  12507., 17852., 15572., 13036., 10244., 5385.,  4090.,
      2303.,  1136.,  2560.,  4288.,  6336.,  7120.,  7904.,  8688.,  7132.,
      5176.,  2804.,  1097.,  2382.,  3863.,  5548.,  6004.,  6460.,  6916.,
      5561.,  3962.,  2111.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16672., 18696., 25520., 29912., 28664., 27096., 27384., 19632., 18472.,
      16160., 19704., 23582., 28244., 35226., 37394., 35338., 38210., 29444.,
      22710., 18904., 23280., 29628., 37096., 43188., 48004., 45012., 45924.,
      38856., 29196., 18288., 30984., 36578., 46572., 52070., 54990., 54710.,
      53214., 42492., 36586., 25704., 35656., 40018., 47628., 54710., 53214.,
      49862., 52782., 41756., 35674., 29864., 32008., 39234., 44460., 49862.,
      52782., 50454., 53374., 45116., 37834., 31976., 28360., 36210., 45516.,
      50454., 53374., 52070., 54990., 48476., 38650., 26792., 27952., 31948.,
      40264., 43940., 47092., 47556., 47316., 38632., 31836., 20592., 27320.,
      32542., 36692., 39962., 39378., 37962., 39938., 32068., 24374., 18072.,
      21216., 27752., 31856., 31416., 32472., 29624., 30168., 27696., 22024.,
      16672., 14624., 17672., 21424., 25816., 29688., 28120., 31480., 25776.,
      19496., 14112., 23928., 25598., 31892., 35130., 36466., 36458., 36258.,
      29380., 25110., 17880., 31600., 33788., 38632., 44980., 43332., 40340.,
      44132., 35272., 32332., 26608., 32008., 39234., 44460., 49862., 52782.,
      50454., 53374., 45116., 37834., 31976., 28360., 36210., 45516., 50454.,
      53374., 52070., 54990., 48476., 38650., 26792., 30984., 36578., 46572.,
      52070., 54990., 54710., 53214., 42492., 36586., 25704., 35656., 40018.,
      47628., 54710., 53214., 49862., 52782., 41756., 35674., 29864., 31152.,
      37644., 41800., 45732., 47028., 43396., 45524., 37096., 30364., 25840.,
      24248., 29822., 36116., 37498., 37938., 38570., 40354., 35204., 27414.,
      19224., 21216., 22632., 27760., 31416., 31448., 32696., 34264., 27696.,
      23048., 14624., 16672., 18696., 25520., 29912., 28664., 27096., 27384.,
      19632., 18472., 16160., 19704., 23582., 28244., 35226., 37394., 35338.,
      38210., 29444., 22710., 18904., 23280., 29628., 37096., 43188., 48004.,
      45012., 45924., 38856., 29196., 18288., 30984., 36578., 46572., 52070.,
      54990., 54710., 53214., 42492., 36586., 25704., 35656., 40018., 47628.,
      54710., 53214., 49862., 52782., 41756., 35674., 29864., 32008., 39234.,
      44460., 49862., 52782., 50454., 53374., 45116., 37834., 31976., 28360.,
      36210., 45516., 50454., 53374., 52070., 54990., 48476., 38650., 26792.,
      27952., 31948., 40264., 43940., 47092., 47556., 47316., 38632., 31836.,
      20592., 27320., 32542., 36692., 39962., 39378., 37962., 39938., 32068.,
      24374., 18072., 21216., 27752., 31856., 31416., 32472., 29624., 30168.,
      27696., 22024., 16672.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   856.,   1400.,  1944.,  2488.,  2722.,  2428.,
      1542.,  500.,   1544.,  3068.,  5200.,  5456.,  7568.,  9680.,  9260.,
      7592.,  4548.,  2562.,  4084.,  6294.,  9192.,  6600.,  7400.,  10056.,
      10206., 8708.,  5370.,  2696.,  7056.,  10776., 15648., 13792., 12768.,
      15136., 14968., 12560., 7656.,  4392.,  8656.,  14584., 19872., 15648.,
      13792., 12768., 11416., 9936.,  6216.,  3720.,  9424.,  15000., 22240.,
      19872., 15648., 13792., 9720.,  7312.,  4776.,  3048.,  7824.,  14584.,
      21216., 22240., 19872., 15648., 11416., 6544.,  3336.,  2306.,  5940.,
      11094., 17960., 19272., 19752., 16840., 10718., 6340.,  1978.,  1188.,
      3112.,  5900.,  9680.,  11792., 11536., 10448., 7484.,  2888.,  948.,
      782.,   2028.,  3802.,  6168.,  7736.,  9304.,  8504.,  6706.,  3996.,
      310.,   30.,    140.,   394.,   856.,   1400.,  1944.,  2488.,  2722.,
      2428.,  1542.,  500.,   1544.,  3068.,  5200.,  5456.,  7568.,  9680.,
      9260.,  7592.,  4548.,  2562.,  4084.,  6294.,  9192.,  6600.,  7400.,
      10056., 10206., 8708.,  5370.,  2696.,  7056.,  10776., 15648., 13792.,
      12768., 15136., 14968., 12560., 7656.,  4392.,  8656.,  14584., 19872.,
      15648., 13792., 12768., 11416., 9936.,  6216.,  3720.,  9424.,  15000.,
      22240., 19872., 15648., 13792., 9720.,  7312.,  4776.,  3048.,  7824.,
      14584., 21216., 22240., 19872., 15648., 11416., 6544.,  3336.,  2306.,
      5940.,  11094., 17960., 19272., 19752., 16840., 10718., 6340.,  1978.,
      1188.,  3112.,  5900.,  9680.,  11792., 11536., 10448., 7484.,  2888.,
      948.,   782.,   2028.,  3802.,  6168.,  7736.,  9304.,  8504.,  6706.,
      3996.,  310.,   30.,    140.,   394.,   856.,   1400.,  1944.,  2488.,
      2722.,  2428.,  1542.,  500.,   1544.,  3068.,  5200.,  5456.,  7568.,
      9680.,  9260.,  7592.,  4548.,  2562.,  4084.,  6294.,  9192.,  6600.,
      7400.,  10056., 10206., 8708.,  5370.,  2696.,  7056.,  10776., 15648.,
      13792., 12768., 15136., 14968., 12560., 7656.,  4392.,  8656.,  14584.,
      19872., 15648., 13792., 12768., 11416., 9936.,  6216.,  3720.,  9424.,
      15000., 22240., 19872., 15648., 13792., 9720.,  7312.,  4776.,  3048.,
      7824.,  14584., 21216., 22240., 19872., 15648., 11416., 6544.,  3336.,
      2306.,  5940.,  11094., 17960., 19272., 19752., 16840., 10718., 6340.,
      1978.,  1188.,  3112.,  5900.,  9680.,  11792., 11536., 10448., 7484.,
      2888.,  948.,   782.,   2028.,  3802.,  6168.,  7736.,  9304.,  8504.,
      6706.,  3996.,  310.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7664.,  8496.,  10464., 11512., 13624., 14904., 17160., 18688., 18024.,
      19544., 18760., 20272., 20328., 21896., 18872., 20264., 16960., 18160.,
      14576., 15568., 13788., 14944., 17997., 19396., 22602., 24264., 27623.,
      29568., 28089., 30040., 28427., 30384., 30493., 32520., 27538., 29308.,
      23939., 25432., 19676., 20872., 20328., 21688., 24684., 26348., 29540.,
      31532., 34920., 37264., 34672., 37036., 34296., 36680., 36544., 39012.,
      32580., 34740., 27844., 29672., 22312., 23784., 24308., 26008., 28277.,
      30312., 32790., 35188., 37875., 40664., 36661., 39420., 35191., 37920.,
      37113., 39876., 32030., 34400., 26939., 28952., 20980., 22608., 25236.,
      26984., 26873., 28968., 29078., 31548., 35975., 38848., 37065., 39908.,
      37899., 40712., 38925., 41772., 34094., 36536., 30127., 32200., 25268.,
      26944., 27188., 28984., 32893., 35048., 39190., 41732., 46107., 49064.,
      45405., 48332., 44447., 47344., 44577., 47508., 37694., 40208., 32547.,
      34680., 26484., 28208., 30164., 32008., 34049., 36264., 38550., 41164.,
      43631., 46608., 40945., 43828., 37875., 40664., 36661., 39420., 29006.,
      31336., 23959., 25896., 17972., 19488., 29384., 31080., 31464., 33516.,
      34148., 36580., 36500., 39272., 33908., 36636., 35156., 37840., 36148.,
      38788., 31876., 34092., 27048., 28880., 21320., 22744., 23772., 25312.,
      30285., 32132., 37322., 39496., 43047., 45504., 42465., 44864., 41627.,
      43968., 40533., 42816., 33474., 35372., 26859., 28416., 19452., 20648.,
      25264., 26512., 29624., 31096., 34360., 36072., 36736., 38640., 33872.,
      35704., 30752., 32512., 27376., 29064., 19832., 21208., 13800., 14912.,
      7152.,  7984.,  10096., 10928., 13600., 14680., 17528., 18872., 21896.,
      23520., 23464., 25144., 24072., 25744., 24552., 26216., 22136., 23592.,
      19200., 20432., 15728., 16720., 16348., 17536., 21269., 22740., 26666.,
      28440., 32559., 34656., 34625., 36792., 34835., 37008., 34917., 37096.,
      30546., 32428., 25451., 27016., 19612., 20840., 21416., 22840., 26604.,
      28380., 32388., 34540., 38792., 41344., 41040., 43676., 40536., 43192.,
      39904., 42580., 34468., 36788., 28164., 30104., 20968., 22504., 23348.,
      24888., 27869., 29800., 33046., 35396., 38907., 41704., 41533., 44428.,
      40511., 43440., 39361., 42324., 33470., 36048., 26627., 28792., 22900.,
      24624., 18900., 20488., 25185., 27176., 32150., 34572., 39823., 42704.,
      42449., 45428., 44627., 47640., 46677., 49724., 41934., 44584., 36215.,
      38440., 29492., 31264., 23668., 25304., 29925., 31976., 36886., 39380.,
      44579., 47544., 47205., 50268., 48487., 51584., 49641., 52772., 43742.,
      46464., 36843., 39128., 28916., 30736., 21012., 22568., 25129., 27048.,
      29846., 32156., 35191., 37920., 37113., 39876., 38907., 41704., 41533.,
      44428., 36590., 39128., 30751., 32904., 23988., 25728., 18056., 19560.,
      23752., 25596., 30020., 32228., 36884., 39480., 37812., 40428., 38612.,
      41248., 41140., 43860., 37284., 39660., 32584., 34592., 27016., 28632.,
      22876., 24192., 27829., 29428., 33258., 35160., 39183., 41408., 38921.,
      41152., 38531., 40768., 40765., 43072., 36034., 38044., 30579., 32272.,
      24380., 25736., 17968., 18960., 19576., 20760., 21496., 22888., 23744.,
      25360., 22096., 23704., 20320., 21920., 22064., 23720., 18872., 20312.,
      15144., 16352., 10864., 11824., 13296., 14256., 16800., 17976., 20664.,
      22072., 24904., 26560., 25128., 26776., 25224., 26864., 25192., 26824.,
      21560., 22952., 19200., 20400., 16368., 17360., 21468., 22816., 25501.,
      27108., 29962., 31848., 34871., 37056., 34697., 36888., 34395., 36592.,
      33965., 36168., 27922., 29788., 23827., 25400., 19036., 20296., 26856.,
      28472., 30380., 32332., 34468., 36780., 39080., 41712., 38000., 40588.,
      36664., 39208., 35072., 37572., 27396., 29492., 22404., 24136., 16552.,
      17896., 29556., 31320., 31749., 33896., 34582., 37140., 37123., 40056.,
      34629., 37532., 35975., 38848., 37065., 39908., 32862., 35264., 28043.,
      30040., 22260., 23824., 25108., 26920., 32265., 34472., 40086., 42716.,
      46743., 49760., 46553., 49540., 46107., 49064., 45405., 48332., 38254.,
      40728., 31359., 33416., 23476., 25088., 29876., 31736., 36109., 38376.,
      43030., 45732., 47915., 51016., 45933., 49004., 43631., 46608., 40945.,
      43828., 32382., 34800., 24947., 26936., 16500., 18032., 26452., 28104.,
      31633., 33704., 37526., 40044., 40511., 43440., 39361., 42324., 37123.,
      40056., 34629., 37532., 31630., 34120., 27623., 29672., 22580., 24160.,
      21576., 23144., 28264., 30220., 35620., 37988., 43220., 45960., 45172.,
      47932., 45140., 47856., 44852., 47524., 38852., 41132., 31912., 33776.,
      24008., 25432., 24028., 25376., 29789., 31460., 36106., 38120., 41655.,
      43968., 42417., 44736., 40299., 42560., 37925., 40128., 31170., 33036.,
      23611., 25120., 15228., 16360., 16304., 17296., 18424., 19640., 20920.,
      22376., 23808., 25520., 25552., 27320., 23648., 25408., 21616., 23368.,
      17144., 18648., 12072., 13312., 10480., 11440.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     6.,     16.,    19.,    40.,    44.,    80.,    76.,
      120.,   108.,   160.,   140.,   200.,   157.,   208.,   142.,   180.,
      91.,    112.,   24.,    52.,    100.,   164.,   236.,   344.,   440.,
      600.,   568.,   744.,   696.,   888.,   824.,   1032.,  788.,   956.,
      644.,   764.,   384.,   448.,   181.,   256.,   506.,   668.,   987.,
      1248.,  1636.,  2008.,  1924.,  2320.,  2212.,  2632.,  2500.,  2944.,
      2229.,  2580.,  1730.,  1976.,  991.,   1120.,  584.,   728.,   1448.,
      1752.,  2608.,  3088.,  4080.,  4752.,  4592.,  5296.,  5104.,  5840.,
      5616.,  6384.,  4816.,  5416.,  3624.,  4040.,  2024.,  2240.,  1312.,
      1512.,  3016.,  3432.,  5128.,  5776.,  7664.,  8560.,  8112.,  8976.,
      8432.,  9264.,  8624.,  9424.,  6712.,  7288.,  4872.,  5272.,  2640.,
      2848.,  1976.,  2168.,  4328.,  4728.,  7072.,  7696.,  10224., 11088.,
      10160., 10992., 9968.,  10768., 9648.,  10416., 7072.,  7624.,  5096.,
      5480.,  2744.,  2944.,  2128.,  2312.,  4616.,  5000.,  7480.,  8080.,
      10736., 11568., 10160., 10960., 9456.,  10224., 8624.,  9360.,  5896.,
      6424.,  4296.,  4664.,  2336.,  2528.,  1733.,  1872.,  3738.,  4028.,
      6027.,  6480.,  8612.,  9240.,  7492.,  8080.,  6244.,  6792.,  4868.,
      5376.,  2517.,  2868.,  1922.,  2168.,  1087.,  1216.,  532.,   604.,
      1204.,  1356.,  2024.,  2264.,  3000.,  3336.,  3384.,  3736.,  3768.,
      4136.,  4152.,  4536.,  3416.,  3716.,  2484.,  2692.,  1348.,  1456.,
      525.,   572.,   1142.,  1240.,  1855.,  2008.,  2668.,  2880.,  2892.,
      3112.,  3116.,  3344.,  3340.,  3576.,  2689.,  2872.,  1918.,  2044.,
      1023.,  1088.,  33.,    68.,    134.,   208.,   307.,   424.,   556.,
      720.,   844.,   1016.,  1132.,  1312.,  1420.,  1608.,  1213.,  1360.,
      910.,   1012.,  507.,   560.,   536.,   628.,   1252.,  1444.,  2156.,
      2456.,  3256.,  3672.,  3896.,  4328.,  4536.,  4984.,  5176.,  5640.,
      4244.,  4604.,  3076.,  3324.,  1664.,  1792.,  1621.,  1792.,  3578.,
      3932.,  5883.,  6432.,  8548.,  9304.,  9604.,  10384., 10660., 11464.,
      11716., 12544., 9429.,  10068., 6722.,  7160.,  3583.,  3808.,  3400.,
      3672.,  7336.,  7896.,  11824., 12688., 16880., 18064., 18416., 19632.,
      19952., 21200., 21488., 22768., 17104., 18088., 12072., 12744., 6376.,
      6720.,  5920.,  6248.,  12488., 13160., 19720., 20752., 27632., 29040.,
      27056., 28432., 26352., 27696., 25520., 26832., 18232., 19192., 12808.,
      13464., 6736.,  7072.,  6328.,  6648.,  13288., 13944., 20896., 21904.,
      29168., 30544., 28080., 29424., 26864., 28176., 25520., 26800., 17824.,
      18760., 12520., 13160., 6584.,  6912.,  6224.,  6536.,  13064., 13704.,
      20536., 21520., 28656., 30000., 27056., 28368., 25328., 26608., 23472.,
      24720., 15880., 16792., 11208., 11832., 5920.,  6240.,  4453.,  4688.,
      9370.,  9852.,  14763., 15504., 20644., 21656., 18244., 19216., 15716.,
      16648., 13060., 13952., 7413.,  8052.,  5378.,  5816.,  2911.,  3136.,
      1428.,  1564.,  3124.,  3404.,  5096.,  5528.,  7352.,  7944.,  8248.,
      8856.,  9144.,  9768.,  10040., 10680., 8024.,  8516.,  5684.,  6020.,
      3012.,  3184.,  1197.,  1276.,  2550.,  2712.,  4063.,  4312.,  5740.,
      6080.,  6220.,  6568.,  6700.,  7056.,  7180.,  7544.,  5665.,  5944.,
      3966.,  4156.,  2079.,  2176.,  1.,     4.,     6.,     16.,    19.,
      40.,    44.,    80.,    76.,    120.,   108.,   160.,   140.,   200.,
      157.,   208.,   142.,   180.,   91.,    112.,   24.,    52.,    100.,
      164.,   236.,   344.,   440.,   600.,   568.,   744.,   696.,   888.,
      824.,   1032.,  788.,   956.,   644.,   764.,   384.,   448.,   181.,
      256.,   506.,   668.,   987.,   1248.,  1636.,  2008.,  1924.,  2320.,
      2212.,  2632.,  2500.,  2944.,  2229.,  2580.,  1730.,  1976.,  991.,
      1120.,  584.,   728.,   1448.,  1752.,  2608.,  3088.,  4080.,  4752.,
      4592.,  5296.,  5104.,  5840.,  5616.,  6384.,  4816.,  5416.,  3624.,
      4040.,  2024.,  2240.,  1312.,  1512.,  3016.,  3432.,  5128.,  5776.,
      7664.,  8560.,  8112.,  8976.,  8432.,  9264.,  8624.,  9424.,  6712.,
      7288.,  4872.,  5272.,  2640.,  2848.,  1976.,  2168.,  4328.,  4728.,
      7072.,  7696.,  10224., 11088., 10160., 10992., 9968.,  10768., 9648.,
      10416., 7072.,  7624.,  5096.,  5480.,  2744.,  2944.,  2128.,  2312.,
      4616.,  5000.,  7480.,  8080.,  10736., 11568., 10160., 10960., 9456.,
      10224., 8624.,  9360.,  5896.,  6424.,  4296.,  4664.,  2336.,  2528.,
      1733.,  1872.,  3738.,  4028.,  6027.,  6480.,  8612.,  9240.,  7492.,
      8080.,  6244.,  6792.,  4868.,  5376.,  2517.,  2868.,  1922.,  2168.,
      1087.,  1216.,  532.,   604.,   1204.,  1356.,  2024.,  2264.,  3000.,
      3336.,  3384.,  3736.,  3768.,  4136.,  4152.,  4536.,  3416.,  3716.,
      2484.,  2692.,  1348.,  1456.,  525.,   572.,   1142.,  1240.,  1855.,
      2008.,  2668.,  2880.,  2892.,  3112.,  3116.,  3344.,  3340.,  3576.,
      2689.,  2872.,  1918.,  2044.,  1023.,  1088.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7344.,  9328.,  8140.,  10556., 11272., 14248., 13188., 16724., 12532.,
      16132., 11780., 15316., 11892., 15492., 8328.,  11304., 7996.,  10476.,
      7088.,  9072.,  8596.,  11108., 10277., 13305., 12270., 15974., 15407.,
      19819., 16403., 20991., 15415., 19923., 16827., 21383., 12822., 16622.,
      9785.,  12925., 8228.,  10676., 10088., 13192., 12890., 16738., 16220.,
      20876., 18894., 24294., 21222., 26782., 19774., 25238., 20214., 25710.,
      17132., 21724., 12722., 16474., 7720.,  10568., 13612., 17372., 15979.,
      20599., 20498., 26074., 22849., 29221., 24237., 30753., 24153., 30557.,
      23397., 29817., 18570., 23922., 16071., 20515., 11132., 14572., 15884.,
      19772., 17651., 22367., 20994., 26634., 24153., 30557., 23397., 29817.,
      21777., 28085., 23165., 29617., 18170., 23586., 15567., 20107., 13148.,
      16716., 14124., 17884., 17339., 21895., 19506., 24954., 21777., 28085.,
      23165., 29617., 22057., 28397., 23445., 29929., 19818., 25298., 16599.,
      21235., 14140., 17836., 12364., 15996., 15843., 20367., 20002., 25514.,
      22057., 28397., 23445., 29929., 22849., 29221., 24237., 30753., 21466.,
      27010., 17023., 21627., 11612., 15180., 12360., 15592., 13970., 17978.,
      17708., 22556., 19222., 24718., 20718., 26374., 20998., 26558., 20862.,
      26454., 16988., 21644., 14026., 17810., 8872.,  11720., 12212., 15108.,
      14501., 18041., 16238., 20454., 17647., 22315., 17331., 22047., 16663.,
      21299., 17627., 22311., 14070., 17998., 10617., 13757., 7876.,  10196.,
      9424.,  11792., 12444., 15308., 14248., 17608., 13844., 17572., 14340.,
      18132., 12948., 16676., 13188., 16980., 12232., 15464., 9676.,  12348.,
      7344.,  9328.,  6320.,  8304.,  7628.,  10044., 9224.,  12200., 11140.,
      14676., 13044., 16644., 12292., 15828., 13940., 17540., 11400., 14376.,
      8508.,  10988., 6064.,  8048.,  10580., 13348., 11189., 14409., 14030.,
      17862., 15327., 19803., 15971., 20495., 16007., 20451., 15883., 20375.,
      12854., 16526., 11017., 14093., 7716.,  10164., 14120., 17480., 14906.,
      18882., 16988., 21644., 19790., 25190., 18950., 24382., 17502., 22838.,
      19318., 24814., 15340., 19932., 14226., 18106., 11752., 14856., 14124.,
      17884., 17339., 21895., 19506., 24954., 21777., 28085., 23165., 29617.,
      22057., 28397., 23445., 29929., 19818., 25298., 16599., 21235., 14140.,
      17836., 12364., 15996., 15843., 20367., 20002., 25514., 22057., 28397.,
      23445., 29929., 22849., 29221., 24237., 30753., 21466., 27010., 17023.,
      21627., 11612., 15180., 13612., 17372., 15979., 20599., 20498., 26074.,
      22849., 29221., 24237., 30753., 24153., 30557., 23397., 29817., 18570.,
      23922., 16071., 20515., 11132., 14572., 15884., 19772., 17651., 22367.,
      20994., 26634., 24153., 30557., 23397., 29817., 21777., 28085., 23165.,
      29617., 18170., 23586., 15567., 20107., 13148., 16716., 13832., 17320.,
      16754., 20890., 18476., 23324., 20118., 25614., 20750., 26278., 18982.,
      24414., 19966., 25558., 16220., 20876., 13226., 17138., 11368., 14472.,
      10676., 13572., 13173., 16649., 16014., 20102., 16447., 21051., 16643.,
      21295., 16999., 21571., 17803., 22551., 15574., 19630., 12041., 15373.,
      8324.,  10900., 9424.,  11792., 9884.,  12748., 12200., 15560., 13844.,
      17572., 13828., 17620., 14484., 18212., 15236., 19028., 12232., 15464.,
      10188., 12860., 6320.,  8304.,  7344.,  9328.,  8140.,  10556., 11272.,
      14248., 13188., 16724., 12532., 16132., 11780., 15316., 11892., 15492.,
      8328.,  11304., 7996.,  10476., 7088.,  9072.,  8596.,  11108., 10277.,
      13305., 12270., 15974., 15407., 19819., 16403., 20991., 15415., 19923.,
      16827., 21383., 12822., 16622., 9785.,  12925., 8228.,  10676., 10088.,
      13192., 12890., 16738., 16220., 20876., 18894., 24294., 21222., 26782.,
      19774., 25238., 20214., 25710., 17132., 21724., 12722., 16474., 7720.,
      10568., 13612., 17372., 15979., 20599., 20498., 26074., 22849., 29221.,
      24237., 30753., 24153., 30557., 23397., 29817., 18570., 23922., 16071.,
      20515., 11132., 14572., 15884., 19772., 17651., 22367., 20994., 26634.,
      24153., 30557., 23397., 29817., 21777., 28085., 23165., 29617., 18170.,
      23586., 15567., 20107., 13148., 16716., 14124., 17884., 17339., 21895.,
      19506., 24954., 21777., 28085., 23165., 29617., 22057., 28397., 23445.,
      29929., 19818., 25298., 16599., 21235., 14140., 17836., 12364., 15996.,
      15843., 20367., 20002., 25514., 22057., 28397., 23445., 29929., 22849.,
      29221., 24237., 30753., 21466., 27010., 17023., 21627., 11612., 15180.,
      12360., 15592., 13970., 17978., 17708., 22556., 19222., 24718., 20718.,
      26374., 20998., 26558., 20862., 26454., 16988., 21644., 14026., 17810.,
      8872.,  11720., 12212., 15108., 14501., 18041., 16238., 20454., 17647.,
      22315., 17331., 22047., 16663., 21299., 17627., 22311., 14070., 17998.,
      10617., 13757., 7876.,  10196., 9424.,  11792., 12444., 15308., 14248.,
      17608., 13844., 17572., 14340., 18132., 12948., 16676., 13188., 16980.,
      12232., 15464., 9676.,  12348., 7344.,  9328.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    34.,    106.,   119.,   275.,   292.,   564.,   532.,
      868.,   772.,   1172.,  1012.,  1476.,  1163.,  1559.,  1066.,  1362.,
      689.,   853.,   142.,   358.,   684.,   1180.,  1690.,  2530.,  3224.,
      4472.,  4216.,  5592.,  5208.,  6712.,  6200.,  7832.,  5986.,  7306.,
      4924.,  5868.,  2950.,  3454.,  1307.,  1895.,  3742.,  5014.,  7209.,
      9005.,  11484., 13900., 12524., 14876., 13052., 15340., 15308., 17788.,
      13509., 15513., 10422., 11854., 5951.,  6715.,  4204.,  5084.,  10104.,
      11992., 15588., 18356., 22512., 26288., 23280., 27056., 23536., 27312.,
      27568., 31600., 23924., 27140., 18200., 20472., 10268., 11468., 7676.,
      8748.,  17432., 19704., 25108., 28452., 34608., 39152., 33136., 37424.,
      30640., 34672., 33456., 37488., 26852., 29876., 20024., 22168., 11116.,
      12252., 8908.,  9916.,  19768., 21912., 26372., 29524., 34672., 38960.,
      29104., 33136., 22512., 26288., 23280., 27056., 17492., 20324., 13656.,
      15672., 7868.,  8940.,  6044.,  6988.,  13912., 15928., 23732., 26948.,
      35632., 40176., 35376., 39920., 34608., 39152., 33136., 37424., 23364.,
      26516., 17208., 19352., 8716.,  9724.,  7259.,  8103.,  16158., 17942.,
      26793., 29613., 39260., 43212., 36716., 40604., 33660., 37484., 27852.,
      31356., 16709., 19225., 11638., 13326., 4671.,  5435.,  4118.,  4686.,
      9340.,  10540., 15730., 17626., 23352., 26008., 26392., 29176., 29432.,
      32344., 28184., 30968., 21946., 24066., 14156., 15548., 4750.,  5350.,
      4109.,  4481.,  8946.,  9722.,  14543., 15755., 20932., 22612., 22708.,
      24452., 24484., 26292., 19924., 21540., 14307., 15503., 7738.,  8482.,
      185.,   445.,   5.,     25.,    34.,    106.,   119.,   275.,   292.,
      564.,   532.,   868.,   772.,   1172.,  1012.,  1476.,  1163.,  1559.,
      1066.,  1362.,  689.,   853.,   142.,   358.,   684.,   1180.,  1690.,
      2530.,  3224.,  4472.,  4216.,  5592.,  5208.,  6712.,  6200.,  7832.,
      5986.,  7306.,  4924.,  5868.,  2950.,  3454.,  1307.,  1895.,  3742.,
      5014.,  7209.,  9005.,  11484., 13900., 12524., 14876., 13052., 15340.,
      15308., 17788., 13509., 15513., 10422., 11854., 5951.,  6715.,  4204.,
      5084.,  10104., 11992., 15588., 18356., 22512., 26288., 23280., 27056.,
      23536., 27312., 27568., 31600., 23924., 27140., 18200., 20472., 10268.,
      11468., 7676.,  8748.,  17432., 19704., 25108., 28452., 34608., 39152.,
      33136., 37424., 30640., 34672., 33456., 37488., 26852., 29876., 20024.,
      22168., 11116., 12252., 8908.,  9916.,  19768., 21912., 26372., 29524.,
      34672., 38960., 29104., 33136., 22512., 26288., 23280., 27056., 17492.,
      20324., 13656., 15672., 7868.,  8940.,  6044.,  6988.,  13912., 15928.,
      23732., 26948., 35632., 40176., 35376., 39920., 34608., 39152., 33136.,
      37424., 23364., 26516., 17208., 19352., 8716.,  9724.,  7259.,  8103.,
      16158., 17942., 26793., 29613., 39260., 43212., 36716., 40604., 33660.,
      37484., 27852., 31356., 16709., 19225., 11638., 13326., 4671.,  5435.,
      4118.,  4686.,  9340.,  10540., 15730., 17626., 23352., 26008., 26392.,
      29176., 29432., 32344., 28184., 30968., 21946., 24066., 14156., 15548.,
      4750.,  5350.,  4109.,  4481.,  8946.,  9722.,  14543., 15755., 20932.,
      22612., 22708., 24452., 24484., 26292., 19924., 21540., 14307., 15503.,
      7738.,  8482.,  185.,   445.,   5.,     25.,    34.,    106.,   119.,
      275.,   292.,   564.,   532.,   868.,   772.,   1172.,  1012.,  1476.,
      1163.,  1559.,  1066.,  1362.,  689.,   853.,   142.,   358.,   684.,
      1180.,  1690.,  2530.,  3224.,  4472.,  4216.,  5592.,  5208.,  6712.,
      6200.,  7832.,  5986.,  7306.,  4924.,  5868.,  2950.,  3454.,  1307.,
      1895.,  3742.,  5014.,  7209.,  9005.,  11484., 13900., 12524., 14876.,
      13052., 15340., 15308., 17788., 13509., 15513., 10422., 11854., 5951.,
      6715.,  4204.,  5084.,  10104., 11992., 15588., 18356., 22512., 26288.,
      23280., 27056., 23536., 27312., 27568., 31600., 23924., 27140., 18200.,
      20472., 10268., 11468., 7676.,  8748.,  17432., 19704., 25108., 28452.,
      34608., 39152., 33136., 37424., 30640., 34672., 33456., 37488., 26852.,
      29876., 20024., 22168., 11116., 12252., 8908.,  9916.,  19768., 21912.,
      26372., 29524., 34672., 38960., 29104., 33136., 22512., 26288., 23280.,
      27056., 17492., 20324., 13656., 15672., 7868.,  8940.,  6044.,  6988.,
      13912., 15928., 23732., 26948., 35632., 40176., 35376., 39920., 34608.,
      39152., 33136., 37424., 23364., 26516., 17208., 19352., 8716.,  9724.,
      7259.,  8103.,  16158., 17942., 26793., 29613., 39260., 43212., 36716.,
      40604., 33660., 37484., 27852., 31356., 16709., 19225., 11638., 13326.,
      4671.,  5435.,  4118.,  4686.,  9340.,  10540., 15730., 17626., 23352.,
      26008., 26392., 29176., 29432., 32344., 28184., 30968., 21946., 24066.,
      14156., 15548., 4750.,  5350.,  4109.,  4481.,  8946.,  9722.,  14543.,
      15755., 20932., 22612., 22708., 24452., 24484., 26292., 19924., 21540.,
      14307., 15503., 7738.,  8482.,  185.,   445.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4616., 12232., 5578., 14586., 6924., 18348., 8142., 20958., 8702., 22414.,
      8142., 20958., 8702., 22414., 7692., 19116., 6394., 16298., 5128., 12744.,
      4176., 10704., 4596., 12372., 6264., 16056., 6684., 17724., 7932., 19740.,
      6684., 17724., 7932., 19740., 6264., 16056., 5844., 14388., 4176., 10704.,
      3224., 8664.,  4046., 10462., 4836., 12996., 5914., 15050., 6058., 15834.,
      5914., 15050., 6058., 15834., 5604., 13764., 4446., 11502., 3736., 9176.,
      2784., 7136.,  3064., 8248.,  4176., 10704., 4456., 11816., 5288., 13160.,
      4456., 11816., 5288., 13160., 4176., 10704., 3896., 9592.,  2784., 7136.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   220.,   764.,   826.,   2026.,  2104.,  4216.,  3640.,
      5752.,  4152.,  6264.,  3640.,  5752.,  1834.,  3418.,  2492.,  3804.,
      1966.,  2750.,  300.,   972.,   1368.,  2712.,  3012.,  5540.,  5744.,
      9968.,  5744.,  9968.,  7792.,  12016., 7792.,  12016., 5284.,  8580.,
      3544.,  5912.,  3084.,  4524.,  490.,   1562.,  2420.,  4820.,  5534.,
      9518.,  9896.,  16232., 9384.,  15720., 9896.,  16232., 11432., 17768.,
      9326.,  14462., 6548.,  10228., 3354.,  5322.,  600.,   1944.,  3056.,
      6256.,  7368.,  12936., 13536., 21984., 13536., 21984., 13536., 21984.,
      13536., 21984., 12936., 20040., 10480., 15728., 6168.,  9048.,  600.,
      1944.,  3056.,  6256.,  7368.,  12936., 13536., 21984., 13536., 21984.,
      13536., 21984., 13536., 21984., 12936., 20040., 10480., 15728., 6168.,
      9048.,  600.,   1944.,  3056.,  6256.,  7368.,  12936., 13536., 21984.,
      13536., 21984., 13536., 21984., 13536., 21984., 12936., 20040., 10480.,
      15728., 6168.,  9048.,  600.,   1944.,  3056.,  6256.,  7368.,  12936.,
      13536., 21984., 13536., 21984., 13536., 21984., 13536., 21984., 12936.,
      20040., 10480., 15728., 6168.,  9048.,  490.,   1562.,  2420.,  4820.,
      5534.,  9518.,  9896.,  16232., 9384.,  15720., 9896.,  16232., 11432.,
      17768., 9326.,  14462., 6548.,  10228., 3354.,  5322.,  460.,   1388.,
      2200.,  4056.,  4708.,  7492.,  7792.,  12016., 5744.,  9968.,  5744.,
      9968.,  7792.,  12016., 7492.,  11044., 4056.,  6424.,  1388.,  2572.,
      190.,   590.,   1052.,  2108.,  2522.,  3978.,  4152.,  6264.,  3640.,
      5752.,  2104.,  4216.,  3640.,  5752.,  4042.,  5882.,  3004.,  4316.,
      270.,   798.,   30.,    174.,   220.,   764.,   826.,   2026.,  2104.,
      4216.,  3640.,  5752.,  4152.,  6264.,  3640.,  5752.,  1834.,  3418.,
      2492.,  3804.,  1966.,  2750.,  300.,   972.,   1368.,  2712.,  3012.,
      5540.,  5744.,  9968.,  5744.,  9968.,  7792.,  12016., 7792.,  12016.,
      5284.,  8580.,  3544.,  5912.,  3084.,  4524.,  490.,   1562.,  2420.,
      4820.,  5534.,  9518.,  9896.,  16232., 9384.,  15720., 9896.,  16232.,
      11432., 17768., 9326.,  14462., 6548.,  10228., 3354.,  5322.,  600.,
      1944.,  3056.,  6256.,  7368.,  12936., 13536., 21984., 13536., 21984.,
      13536., 21984., 13536., 21984., 12936., 20040., 10480., 15728., 6168.,
      9048.,  600.,   1944.,  3056.,  6256.,  7368.,  12936., 13536., 21984.,
      13536., 21984., 13536., 21984., 13536., 21984., 12936., 20040., 10480.,
      15728., 6168.,  9048.,  600.,   1944.,  3056.,  6256.,  7368.,  12936.,
      13536., 21984., 13536., 21984., 13536., 21984., 13536., 21984., 12936.,
      20040., 10480., 15728., 6168.,  9048.,  600.,   1944.,  3056.,  6256.,
      7368.,  12936., 13536., 21984., 13536., 21984., 13536., 21984., 13536.,
      21984., 12936., 20040., 10480., 15728., 6168.,  9048.,  490.,   1562.,
      2420.,  4820.,  5534.,  9518.,  9896.,  16232., 9384.,  15720., 9896.,
      16232., 11432., 17768., 9326.,  14462., 6548.,  10228., 3354.,  5322.,
      460.,   1388.,  2200.,  4056.,  4708.,  7492.,  7792.,  12016., 5744.,
      9968.,  5744.,  9968.,  7792.,  12016., 7492.,  11044., 4056.,  6424.,
      1388.,  2572.,  190.,   590.,   1052.,  2108.,  2522.,  3978.,  4152.,
      6264.,  3640.,  5752.,  2104.,  4216.,  3640.,  5752.,  4042.,  5882.,
      3004.,  4316.,  270.,   798.,   30.,    174.,   220.,   764.,   826.,
      2026.,  2104.,  4216.,  3640.,  5752.,  4152.,  6264.,  3640.,  5752.,
      1834.,  3418.,  2492.,  3804.,  1966.,  2750.,  300.,   972.,   1368.,
      2712.,  3012.,  5540.,  5744.,  9968.,  5744.,  9968.,  7792.,  12016.,
      7792.,  12016., 5284.,  8580.,  3544.,  5912.,  3084.,  4524.,  490.,
      1562.,  2420.,  4820.,  5534.,  9518.,  9896.,  16232., 9384.,  15720.,
      9896.,  16232., 11432., 17768., 9326.,  14462., 6548.,  10228., 3354.,
      5322.,  600.,   1944.,  3056.,  6256.,  7368.,  12936., 13536., 21984.,
      13536., 21984., 13536., 21984., 13536., 21984., 12936., 20040., 10480.,
      15728., 6168.,  9048.,  600.,   1944.,  3056.,  6256.,  7368.,  12936.,
      13536., 21984., 13536., 21984., 13536., 21984., 13536., 21984., 12936.,
      20040., 10480., 15728., 6168.,  9048.,  600.,   1944.,  3056.,  6256.,
      7368.,  12936., 13536., 21984., 13536., 21984., 13536., 21984., 13536.,
      21984., 12936., 20040., 10480., 15728., 6168.,  9048.,  600.,   1944.,
      3056.,  6256.,  7368.,  12936., 13536., 21984., 13536., 21984., 13536.,
      21984., 13536., 21984., 12936., 20040., 10480., 15728., 6168.,  9048.,
      490.,   1562.,  2420.,  4820.,  5534.,  9518.,  9896.,  16232., 9384.,
      15720., 9896.,  16232., 11432., 17768., 9326.,  14462., 6548.,  10228.,
      3354.,  5322.,  460.,   1388.,  2200.,  4056.,  4708.,  7492.,  7792.,
      12016., 5744.,  9968.,  5744.,  9968.,  7792.,  12016., 7492.,  11044.,
      4056.,  6424.,  1388.,  2572.,  190.,   590.,   1052.,  2108.,  2522.,
      3978.,  4152.,  6264.,  3640.,  5752.,  2104.,  4216.,  3640.,  5752.,
      4042.,  5882.,  3004.,  4316.,  270.,   798.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11376., 12224., 13104., 14016., 14540., 15616., 16732., 17888., 18344.,
      19680., 21064., 22496., 19204., 20768., 22388., 24064., 17044., 18592.,
      20196., 21856., 18468., 20000., 21588., 23232., 21236., 22816., 24452.,
      26144., 20232., 21600., 23016., 24480., 17948., 19072., 20236., 21440.,
      15408., 16320., 17264., 18240., 15524., 16752., 18020., 19328., 20433.,
      21940., 23497., 25104., 26118., 27944., 29830., 31776., 31315., 33436.,
      35627., 37888., 30607., 32740., 34943., 37216., 29323., 31404., 33555.,
      35776., 30919., 33012., 35175., 37408., 25422., 27208., 29054., 30960.,
      18157., 19596., 21085., 22624., 12692., 13808., 14964., 16160., 19528.,
      20896., 22312., 23776., 25098., 26800., 28562., 30384., 31596., 33680.,
      35836., 38064., 35982., 38432., 40966., 43584., 36486., 38976., 41550.,
      44208., 34622., 37088., 39638., 42272., 33334., 35840., 38430., 41104.,
      30876., 33040., 35276., 37584., 26402., 28176., 30010., 31904., 21928.,
      23328., 24776., 26272., 22236., 24016., 25852., 27744., 28759., 30932.,
      33175., 35488., 36378., 39000., 41706., 44496., 44309., 47308., 50405.,
      53600., 45721., 48724., 51825., 55024., 42717., 45660., 48701., 51840.,
      41825., 44772., 47817., 50960., 36914., 39416., 42002., 44672., 31323.,
      33388., 35523., 37728., 23916., 25552., 27244., 28992., 32508., 34384.,
      36316., 38304., 37359., 39652., 42015., 44448., 43402., 46168., 49018.,
      51952., 49597., 52764., 56029., 59392., 49729., 52900., 56169., 59536.,
      47749., 50860., 54069., 57376., 45577., 48692., 51905., 55216., 35810.,
      38456., 41186., 44000., 27059., 29244., 31499., 33824., 23052., 24784.,
      26572., 28416., 28700., 30416., 32188., 34016., 31815., 33908., 36071.,
      38304., 35962., 38488., 41098., 43792., 44261., 47212., 50261., 53408.,
      47785., 50804., 53921., 57136., 47661., 50684., 53805., 57024., 49393.,
      52484., 55673., 58960., 43026., 45688., 48434., 51264., 35531., 37772.,
      40083., 42464., 31404., 33232., 35116., 37056., 24636., 26448., 28316.,
      30240., 30687., 32900., 35183., 37536., 37866., 40536., 43290., 46128.,
      42573., 45628., 48781., 52032., 42193., 45252., 48409., 51664., 44309.,
      47308., 50405., 53600., 45721., 48724., 51825., 55024., 37058., 39608.,
      42242., 44960., 28963., 31068., 33243., 35488., 22604., 24272., 25996.,
      27776., 31400., 33056., 34760., 36512., 36658., 38688., 40778., 42928.,
      43004., 45456., 47980., 50576., 46566., 49360., 52238., 55200., 46142.,
      48976., 51894., 54896., 46678., 49488., 52382., 55360., 46446., 49232.,
      52102., 55056., 39020., 41360., 43772., 46256., 29994., 31904., 33874.,
      35904., 21320., 22816., 24360., 25952., 20516., 21872., 23268., 24704.,
      24913., 26548., 28233., 29968., 30086., 32040., 34054., 36128., 31891.,
      34076., 36331., 38656., 30831., 33028., 35295., 37632., 33355., 35564.,
      37843., 40192., 35367., 37588., 39879., 42240., 29518., 31368., 33278.,
      35248., 24269., 25772., 27325., 28928., 18260., 19440., 20660., 21920.,
      18992., 20160., 21360., 22592., 23772., 25184., 26636., 28128., 29256.,
      30944., 32680., 34464., 31028., 32896., 34820., 36800., 29828., 31680.,
      33588., 35552., 28116., 29952., 31844., 33792., 25892., 27712., 29588.,
      31520., 23016., 24544., 26120., 27744., 18860., 20128., 21436., 22784.,
      13296., 14272., 15280., 16320., 8816.,  9664.,  10544., 11456., 13132.,
      14208., 15324., 16480., 18088., 19424., 20808., 22240., 23748., 25376.,
      27060., 28800., 26004., 27680., 29412., 31200., 26148., 27808., 29524.,
      31296., 27124., 28832., 30596., 32416., 24456., 25952., 27496., 29088.,
      20508., 21760., 23052., 24384., 17328., 18368., 19440., 20544., 17508.,
      18800., 20132., 21504., 21729., 23252., 24825., 26448., 26534., 28328.,
      30182., 32096., 32003., 34108., 36283., 38528., 32575., 34692., 36879.,
      39136., 28987., 31052., 33187., 35392., 27767., 29844., 31991., 34208.,
      24686., 26440., 28254., 30128., 21629., 23084., 24589., 26144., 17492.,
      18672., 19892., 21152., 23752., 25248., 26792., 28384., 25514., 27312.,
      29170., 31088., 28076., 30224., 32444., 34736., 35630., 38176., 40806.,
      43520., 37414., 40000., 42670., 45424., 37342., 39904., 42550., 45280.,
      37334., 39936., 42622., 45392., 30684., 32912., 35212., 37584., 25538.,
      27408., 29338., 31328., 21544., 23072., 24648., 26272., 28700., 30416.,
      32188., 34016., 31815., 33908., 36071., 38304., 35962., 38488., 41098.,
      43792., 44261., 47212., 50261., 53408., 47785., 50804., 53921., 57136.,
      47661., 50684., 53805., 57024., 49393., 52484., 55673., 58960., 43026.,
      45688., 48434., 51264., 35531., 37772., 40083., 42464., 31404., 33232.,
      35116., 37056., 24636., 26448., 28316., 30240., 30687., 32900., 35183.,
      37536., 37866., 40536., 43290., 46128., 42573., 45628., 48781., 52032.,
      42193., 45252., 48409., 51664., 44309., 47308., 50405., 53600., 45721.,
      48724., 51825., 55024., 37058., 39608., 42242., 44960., 28963., 31068.,
      33243., 35488., 22604., 24272., 25996., 27776., 31964., 33744., 35580.,
      37472., 37623., 39828., 42103., 44448., 44506., 47192., 49962., 52816.,
      48757., 51852., 55045., 58336., 48697., 51860., 55121., 58480., 49597.,
      52764., 56029., 59392., 49729., 52900., 56169., 59536., 42610., 45304.,
      48082., 50944., 33659., 35884., 38179., 40544., 24812., 26576., 28396.,
      30272., 24956., 26704., 28508., 30368., 31183., 33316., 35519., 37792.,
      38474., 41048., 43706., 46448., 42717., 45660., 48701., 51840., 41825.,
      44772., 47817., 50960., 44261., 47212., 50261., 53408., 47785., 50804.,
      53921., 57136., 41762., 44344., 47010., 49760., 35859., 38012., 40235.,
      42528., 28684., 30416., 32204., 34048., 27048., 28704., 30408., 32160.,
      33234., 35232., 37290., 39408., 40380., 42768., 45228., 47760., 44102.,
      46800., 49582., 52448., 41566., 44240., 46998., 49840., 38262., 40912.,
      43646., 46464., 37838., 40528., 43302., 46160., 32556., 34832., 37180.,
      39600., 25290., 27168., 29106., 31104., 19528., 21024., 22568., 24160.,
      19556., 20848., 22180., 23552., 24993., 26580., 28217., 29904., 31270.,
      33192., 35174., 37216., 33731., 35900., 38139., 40448., 33951., 36132.,
      38383., 40704., 33659., 35852., 38115., 40448., 34199., 36468., 38807.,
      41216., 31470., 33416., 35422., 37488., 26909., 28492., 30125., 31808.,
      22548., 23792., 25076., 26400., 13488., 14528., 15600., 16704., 17372.,
      18656., 19980., 21344., 21960., 23520., 25128., 26784., 26420., 28160.,
      29956., 31808., 26500., 28224., 30004., 31840., 26068., 27776., 29540.,
      31360., 28260., 30016., 31828., 33696., 24808., 26336., 27912., 29536.,
      20012., 21280., 22588., 23936., 13808., 14784., 15792., 16832., 14832.,
      15808., 16816., 17856., 18508., 19712., 20956., 22240., 22824., 24288.,
      25800., 27360., 27844., 29600., 31412., 33280., 28308., 30112., 31972.,
      33888., 27172., 28960., 30804., 32704., 25524., 27296., 29124., 31008.,
      19592., 21088., 22632., 24224., 15772., 17024., 18316., 19648., 13744.,
      14784., 15856., 16960., 21668., 22896., 24164., 25472., 22449., 23924.,
      25449., 27024., 23878., 25640., 27462., 29344., 30131., 32220., 34379.,
      36608., 33839., 36004., 38239., 40544., 34155., 36332., 38579., 40896.,
      33959., 36148., 38407., 40736., 28430., 30280., 32190., 34160., 22349.,
      23884., 25469., 27104., 20244., 21488., 22772., 24096., 18376., 19872.,
      21416., 23008., 23562., 25392., 27282., 29232., 29676., 31888., 34172.,
      36528., 36750., 39328., 41990., 44736., 39046., 41664., 44366., 47152.,
      39998., 42592., 45270., 48032., 40182., 42752., 45406., 48144., 31644.,
      33808., 36044., 38352., 23970., 25744., 27578., 29472., 18344., 19744.,
      21192., 22688., 31964., 33744., 35580., 37472., 37623., 39828., 42103.,
      44448., 44506., 47192., 49962., 52816., 48757., 51852., 55045., 58336.,
      48697., 51860., 55121., 58480., 49597., 52764., 56029., 59392., 49729.,
      52900., 56169., 59536., 42610., 45304., 48082., 50944., 33659., 35884.,
      38179., 40544., 24812., 26576., 28396., 30272., 24956., 26704., 28508.,
      30368., 31183., 33316., 35519., 37792., 38474., 41048., 43706., 46448.,
      42717., 45660., 48701., 51840., 41825., 44772., 47817., 50960., 44261.,
      47212., 50261., 53408., 47785., 50804., 53921., 57136., 41762., 44344.,
      47010., 49760., 35859., 38012., 40235., 42528., 28684., 30416., 32204.,
      34048., 28060., 29904., 31804., 33760., 34919., 37172., 39495., 41888.,
      42938., 45656., 48458., 51344., 47749., 50860., 54069., 57376., 45577.,
      48692., 51905., 55216., 42573., 45628., 48781., 52032., 42193., 45252.,
      48409., 51664., 36690., 39288., 41970., 44736., 28907., 31052., 33267.,
      35552., 22316., 24016., 25772., 27584., 25276., 26960., 28700., 30496.,
      33023., 35140., 37327., 39584., 42026., 44632., 47322., 50096., 47661.,
      50684., 53805., 57024., 49393., 52484., 55673., 58960., 48757., 51852.,
      55045., 58336., 48697., 51860., 55121., 58480., 44802., 47544., 50370.,
      53280., 38467., 40732., 43067., 45472., 31692., 33488., 35340., 37248.,
      20776., 22304., 23880., 25504., 26418., 28320., 30282., 32304., 33148.,
      35472., 37868., 40336., 40166., 42832., 45582., 48416., 42046., 44752.,
      47542., 50416., 39766., 42448., 45214., 48064., 39854., 42576., 45382.,
      48272., 36204., 38544., 40956., 43440., 30378., 32288., 34258., 36288.,
      22856., 24352., 25896., 27488., 24100., 25456., 26852., 28288., 27505.,
      29172., 30889., 32656., 31814., 33832., 35910., 38048., 35955., 38236.,
      40587., 43008., 37199., 39492., 41855., 44288., 36587., 38828., 41139.,
      43520., 36039., 38292., 40615., 43008., 28942., 30856., 32830., 34864.,
      19949., 21484., 23069., 24704., 16212., 17392., 18612., 19872., 17072.,
      18112., 19184., 20288., 21084., 22368., 23692., 25056., 25800., 27360.,
      28968., 30624., 30196., 32000., 33860., 35776., 31876., 33728., 35636.,
      37600., 30164., 32000., 33892., 35840., 30564., 32448., 34388., 36384.,
      26472., 28128., 29832., 31584., 21036., 22432., 23868., 25344., 18288.,
      19392., 20528., 21696.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,
      76.,    115.,   160.,   116.,   176.,   244.,   320.,   228.,   304.,
      388.,   480.,   340.,   432.,   532.,   640.,   452.,   560.,   676.,
      800.,   535.,   628.,   727.,   832.,   498.,   568.,   642.,   720.,
      325.,   364.,   405.,   448.,   46.,    96.,    150.,   208.,   284.,
      400.,   524.,   656.,   746.,   944.,   1154.,  1376.,  1464.,  1760.,
      2072.,  2400.,  1944.,  2272.,  2616.,  2976.,  2424.,  2784.,  3160.,
      3552.,  2904.,  3296.,  3704.,  4128.,  2834.,  3152.,  3482.,  3824.,
      2348.,  2576.,  2812.,  3056.,  1414.,  1536.,  1662.,  1792.,  583.,
      724.,   871.,   1024.,  1718.,  2024.,  2342.,  2672.,  3389.,  3820.,
      4269.,  4736.,  5452.,  6032.,  6636.,  7264.,  5980.,  6544.,  7132.,
      7744.,  6252.,  6800.,  7372.,  7968.,  7356.,  7952.,  8572.,  9216.,
      6513.,  6996.,  7497.,  8016.,  5038.,  5384.,  5742.,  6112.,  2883.,
      3068.,  3259.,  3456.,  1996.,  2208.,  2428.,  2656.,  4824.,  5280.,
      5752.,  6240.,  7460.,  8128.,  8820.,  9536.,  10800., 11712., 12656.,
      13632., 11184., 12096., 13040., 14016., 11312., 12224., 13168., 14144.,
      13296., 14272., 15280., 16320., 11572., 12352., 13156., 13984., 8824.,
      9376.,  9944.,  10528., 4988.,  5280.,  5580.,  5888.,  3708.,  3968.,
      4236.,  4512.,  8440.,  8992.,  9560.,  10144., 12148., 12960., 13796.,
      14656., 16752., 17856., 18992., 20160., 16048., 17088., 18160., 19264.,
      14832., 15808., 16816., 17856., 16240., 17216., 18224., 19264., 13060.,
      13792., 14548., 15328., 9752.,  10272., 10808., 11360., 5420.,  5696.,
      5980.,  6272.,  4332.,  4576.,  4828.,  5088.,  9624.,  10144., 10680.,
      11232., 12804., 13568., 14356., 15168., 16816., 17856., 18928., 20032.,
      14064., 15040., 16048., 17088., 10800., 11712., 12656., 13632., 11184.,
      12096., 13040., 14016., 8404.,  9088.,  9796.,  10528., 6584.,  7072.,
      7576.,  8096.,  3804.,  4064.,  4332.,  4608.,  2908.,  3136.,  3372.,
      3616.,  6712.,  7200.,  7704.,  8224.,  11476., 12256., 13060., 13888.,
      17264., 18368., 19504., 20672., 17136., 18240., 19376., 20544., 16752.,
      17856., 18992., 20160., 16048., 17088., 18160., 19264., 11300., 12064.,
      12852., 13664., 8344.,  8864.,  9400.,  9952.,  4236.,  4480.,  4732.,
      4992.,  3527.,  3732.,  3943.,  4160.,  7862.,  8296.,  8742.,  9200.,
      13053., 13740., 14445., 15168., 19148., 20112., 21100., 22112., 17884.,
      18832., 19804., 20800., 16364., 17296., 18252., 19232., 13500., 14352.,
      15228., 16128., 8049.,  8660.,  9289.,  9936.,  5614.,  6024.,  6446.,
      6880.,  2243.,  2428.,  2619.,  2816.,  1990.,  2128.,  2270.,  2416.,
      4524.,  4816.,  5116.,  5424.,  7634.,  8096.,  8570.,  9056.,  11352.,
      12000., 12664., 13344., 12856., 13536., 14232., 14944., 14360., 15072.,
      15800., 16544., 13752., 14432., 15128., 15840., 10714., 11232., 11762.,
      12304., 6908.,  7248.,  7596.,  7952.,  2302.,  2448.,  2598.,  2752.,
      2009.,  2100.,  2193.,  2288.,  4378.,  4568.,  4762.,  4960.,  7123.,
      7420.,  7723.,  8032.,  10260., 10672., 11092., 11520., 11140., 11568.,
      12004., 12448., 12020., 12464., 12916., 13376., 9764.,  10160., 10564.,
      10976., 7007.,  7300.,  7599.,  7904.,  3778.,  3960.,  4146.,  4336.,
      61.,    124.,   189.,   256.,   1.,     4.,     9.,     16.,    10.,
      24.,    42.,    64.,    43.,    76.,    115.,   160.,   116.,   176.,
      244.,   320.,   228.,   304.,   388.,   480.,   340.,   432.,   532.,
      640.,   452.,   560.,   676.,   800.,   535.,   628.,   727.,   832.,
      498.,   568.,   642.,   720.,   325.,   364.,   405.,   448.,   46.,
      96.,    150.,   208.,   284.,   400.,   524.,   656.,   746.,   944.,
      1154.,  1376.,  1464.,  1760.,  2072.,  2400.,  1944.,  2272.,  2616.,
      2976.,  2424.,  2784.,  3160.,  3552.,  2904.,  3296.,  3704.,  4128.,
      2834.,  3152.,  3482.,  3824.,  2348.,  2576.,  2812.,  3056.,  1414.,
      1536.,  1662.,  1792.,  583.,   724.,   871.,   1024.,  1718.,  2024.,
      2342.,  2672.,  3389.,  3820.,  4269.,  4736.,  5452.,  6032.,  6636.,
      7264.,  5980.,  6544.,  7132.,  7744.,  6252.,  6800.,  7372.,  7968.,
      7356.,  7952.,  8572.,  9216.,  6513.,  6996.,  7497.,  8016.,  5038.,
      5384.,  5742.,  6112.,  2883.,  3068.,  3259.,  3456.,  1996.,  2208.,
      2428.,  2656.,  4824.,  5280.,  5752.,  6240.,  7460.,  8128.,  8820.,
      9536.,  10800., 11712., 12656., 13632., 11184., 12096., 13040., 14016.,
      11312., 12224., 13168., 14144., 13296., 14272., 15280., 16320., 11572.,
      12352., 13156., 13984., 8824.,  9376.,  9944.,  10528., 4988.,  5280.,
      5580.,  5888.,  3708.,  3968.,  4236.,  4512.,  8440.,  8992.,  9560.,
      10144., 12148., 12960., 13796., 14656., 16752., 17856., 18992., 20160.,
      16048., 17088., 18160., 19264., 14832., 15808., 16816., 17856., 16240.,
      17216., 18224., 19264., 13060., 13792., 14548., 15328., 9752.,  10272.,
      10808., 11360., 5420.,  5696.,  5980.,  6272.,  4332.,  4576.,  4828.,
      5088.,  9624.,  10144., 10680., 11232., 12804., 13568., 14356., 15168.,
      16816., 17856., 18928., 20032., 14064., 15040., 16048., 17088., 10800.,
      11712., 12656., 13632., 11184., 12096., 13040., 14016., 8404.,  9088.,
      9796.,  10528., 6584.,  7072.,  7576.,  8096.,  3804.,  4064.,  4332.,
      4608.,  2908.,  3136.,  3372.,  3616.,  6712.,  7200.,  7704.,  8224.,
      11476., 12256., 13060., 13888., 17264., 18368., 19504., 20672., 17136.,
      18240., 19376., 20544., 16752., 17856., 18992., 20160., 16048., 17088.,
      18160., 19264., 11300., 12064., 12852., 13664., 8344.,  8864.,  9400.,
      9952.,  4236.,  4480.,  4732.,  4992.,  3527.,  3732.,  3943.,  4160.,
      7862.,  8296.,  8742.,  9200.,  13053., 13740., 14445., 15168., 19148.,
      20112., 21100., 22112., 17884., 18832., 19804., 20800., 16364., 17296.,
      18252., 19232., 13500., 14352., 15228., 16128., 8049.,  8660.,  9289.,
      9936.,  5614.,  6024.,  6446.,  6880.,  2243.,  2428.,  2619.,  2816.,
      1990.,  2128.,  2270.,  2416.,  4524.,  4816.,  5116.,  5424.,  7634.,
      8096.,  8570.,  9056.,  11352., 12000., 12664., 13344., 12856., 13536.,
      14232., 14944., 14360., 15072., 15800., 16544., 13752., 14432., 15128.,
      15840., 10714., 11232., 11762., 12304., 6908.,  7248.,  7596.,  7952.,
      2302.,  2448.,  2598.,  2752.,  2009.,  2100.,  2193.,  2288.,  4378.,
      4568.,  4762.,  4960.,  7123.,  7420.,  7723.,  8032.,  10260., 10672.,
      11092., 11520., 11140., 11568., 12004., 12448., 12020., 12464., 12916.,
      13376., 9764.,  10160., 10564., 10976., 7007.,  7300.,  7599.,  7904.,
      3778.,  3960.,  4146.,  4336.,  61.,    124.,   189.,   256.,   1.,
      4.,     9.,     16.,    10.,    24.,    42.,    64.,    43.,    76.,
      115.,   160.,   116.,   176.,   244.,   320.,   228.,   304.,   388.,
      480.,   340.,   432.,   532.,   640.,   452.,   560.,   676.,   800.,
      535.,   628.,   727.,   832.,   498.,   568.,   642.,   720.,   325.,
      364.,   405.,   448.,   46.,    96.,    150.,   208.,   284.,   400.,
      524.,   656.,   746.,   944.,   1154.,  1376.,  1464.,  1760.,  2072.,
      2400.,  1944.,  2272.,  2616.,  2976.,  2424.,  2784.,  3160.,  3552.,
      2904.,  3296.,  3704.,  4128.,  2834.,  3152.,  3482.,  3824.,  2348.,
      2576.,  2812.,  3056.,  1414.,  1536.,  1662.,  1792.,  583.,   724.,
      871.,   1024.,  1718.,  2024.,  2342.,  2672.,  3389.,  3820.,  4269.,
      4736.,  5452.,  6032.,  6636.,  7264.,  5980.,  6544.,  7132.,  7744.,
      6252.,  6800.,  7372.,  7968.,  7356.,  7952.,  8572.,  9216.,  6513.,
      6996.,  7497.,  8016.,  5038.,  5384.,  5742.,  6112.,  2883.,  3068.,
      3259.,  3456.,  1996.,  2208.,  2428.,  2656.,  4824.,  5280.,  5752.,
      6240.,  7460.,  8128.,  8820.,  9536.,  10800., 11712., 12656., 13632.,
      11184., 12096., 13040., 14016., 11312., 12224., 13168., 14144., 13296.,
      14272., 15280., 16320., 11572., 12352., 13156., 13984., 8824.,  9376.,
      9944.,  10528., 4988.,  5280.,  5580.,  5888.,  3708.,  3968.,  4236.,
      4512.,  8440.,  8992.,  9560.,  10144., 12148., 12960., 13796., 14656.,
      16752., 17856., 18992., 20160., 16048., 17088., 18160., 19264., 14832.,
      15808., 16816., 17856., 16240., 17216., 18224., 19264., 13060., 13792.,
      14548., 15328., 9752.,  10272., 10808., 11360., 5420.,  5696.,  5980.,
      6272.,  4332.,  4576.,  4828.,  5088.,  9624.,  10144., 10680., 11232.,
      12804., 13568., 14356., 15168., 16816., 17856., 18928., 20032., 14064.,
      15040., 16048., 17088., 10800., 11712., 12656., 13632., 11184., 12096.,
      13040., 14016., 8404.,  9088.,  9796.,  10528., 6584.,  7072.,  7576.,
      8096.,  3804.,  4064.,  4332.,  4608.,  2908.,  3136.,  3372.,  3616.,
      6712.,  7200.,  7704.,  8224.,  11476., 12256., 13060., 13888., 17264.,
      18368., 19504., 20672., 17136., 18240., 19376., 20544., 16752., 17856.,
      18992., 20160., 16048., 17088., 18160., 19264., 11300., 12064., 12852.,
      13664., 8344.,  8864.,  9400.,  9952.,  4236.,  4480.,  4732.,  4992.,
      3527.,  3732.,  3943.,  4160.,  7862.,  8296.,  8742.,  9200.,  13053.,
      13740., 14445., 15168., 19148., 20112., 21100., 22112., 17884., 18832.,
      19804., 20800., 16364., 17296., 18252., 19232., 13500., 14352., 15228.,
      16128., 8049.,  8660.,  9289.,  9936.,  5614.,  6024.,  6446.,  6880.,
      2243.,  2428.,  2619.,  2816.,  1990.,  2128.,  2270.,  2416.,  4524.,
      4816.,  5116.,  5424.,  7634.,  8096.,  8570.,  9056.,  11352., 12000.,
      12664., 13344., 12856., 13536., 14232., 14944., 14360., 15072., 15800.,
      16544., 13752., 14432., 15128., 15840., 10714., 11232., 11762., 12304.,
      6908.,  7248.,  7596.,  7952.,  2302.,  2448.,  2598.,  2752.,  2009.,
      2100.,  2193.,  2288.,  4378.,  4568.,  4762.,  4960.,  7123.,  7420.,
      7723.,  8032.,  10260., 10672., 11092., 11520., 11140., 11568., 12004.,
      12448., 12020., 12464., 12916., 13376., 9764.,  10160., 10564., 10976.,
      7007.,  7300.,  7599.,  7904.,  3778.,  3960.,  4146.,  4336.,  61.,
      124.,   189.,   256.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5840.,  7696.,  9808.,  12176., 6612.,  8868.,  11444., 14340., 8760.,
      11544., 14712., 18264., 10044., 13228., 16860., 20940., 10396., 13708.,
      17468., 21676., 9532.,  12716., 16348., 20428., 10908., 14220., 17980.,
      22188., 8760.,  11544., 14712., 18264., 7476.,  9860.,  12564., 15588.,
      5840.,  7696.,  9808.,  12176., 6660.,  8980.,  11620., 14580., 8717.,
      11457., 14597., 18137., 10662., 14014., 17846., 22158., 11407., 15307.,
      19767., 24787., 12471., 16595., 21279., 26523., 12735., 16699., 21223.,
      26307., 13191., 17251., 21871., 27051., 10582., 13998., 17894., 22270.,
      9141.,  12105., 15469., 19233., 7428.,  9748.,  12388., 15348., 9272.,
      12056., 15224., 18776., 9150.,  12534., 16398., 20742., 12068., 16180.,
      20868., 26132., 15530., 20242., 25626., 31682., 16314., 21218., 26794.,
      33042., 12714., 17426., 22810., 28866., 15034., 19938., 25514., 31762.,
      13348., 17460., 22148., 27412., 11982., 15558., 19614., 24150., 8248.,
      11032., 14200., 17752., 10092., 13340., 17036., 21180., 13095., 17027.,
      21519., 26571., 14834., 19642., 25122., 31274., 15405., 20897., 27173.,
      34233., 18693., 24473., 31037., 38385., 18525., 24081., 30421., 37545.,
      17621., 23337., 29837., 37121., 13890., 18634., 24050., 30138., 13087.,
      17179., 21831., 27043., 10860., 14108., 17804., 21948., 10092., 13340.,
      17036., 21180., 11351., 15347., 19903., 25019., 15698., 20634., 26242.,
      32522., 18525., 24081., 30421., 37545., 17621., 23337., 29837., 37121.,
      15405., 20897., 27173., 34233., 18693., 24473., 31037., 38385., 16290.,
      21162., 26706., 32922., 12879., 17035., 21751., 27027., 9836.,  13084.,
      16780., 20924., 10092., 13340., 17036., 21180., 13095., 17027., 21519.,
      26571., 14834., 19642., 25122., 31274., 15405., 20897., 27173., 34233.,
      18693., 24473., 31037., 38385., 18525., 24081., 30421., 37545., 17621.,
      23337., 29837., 37121., 13890., 18634., 24050., 30138., 13087., 17179.,
      21831., 27043., 10860., 14108., 17804., 21948., 10092., 13340., 17036.,
      21180., 11351., 15347., 19903., 25019., 15698., 20634., 26242., 32522.,
      18525., 24081., 30421., 37545., 17621., 23337., 29837., 37121., 15405.,
      20897., 27173., 34233., 18693., 24473., 31037., 38385., 16290., 21162.,
      26706., 32922., 12879., 17035., 21751., 27027., 9836.,  13084., 16780.,
      20924., 9272.,  12056., 15224., 18776., 11502., 14950., 18878., 23286.,
      12932., 17172., 21988., 27380., 13530., 18306., 23754., 29874., 17130.,
      22098., 27738., 34050., 15834., 20610., 26058., 32178., 14826., 19794.,
      25434., 31746., 12068., 16180., 20868., 26132., 11934., 15446., 19438.,
      23910., 9272.,  12056., 15224., 18776., 6660.,  8980.,  11620., 14580.,
      8813.,  11681., 14949., 18617., 12390., 15998., 20086., 24654., 13039.,
      17067., 21655., 26803., 11703., 15827., 20511., 25755., 12223., 16187.,
      20711., 25795., 14567., 18755., 23503., 28811., 11702., 15246., 19270.,
      23774., 8373.,  11337., 14701., 18465., 7428.,  9748.,  12388., 15348.,
      5840.,  7696.,  9808.,  12176., 7124.,  9380.,  11956., 14852., 8760.,
      11544., 14712., 18264., 9532.,  12716., 16348., 20428., 10908., 14220.,
      17980., 22188., 10044., 13228., 16860., 20940., 10396., 13708., 17468.,
      21676., 8760.,  11544., 14712., 18264., 7988.,  10372., 13076., 16100.,
      5840.,  7696.,  9808.,  12176., 5840.,  7696.,  9808.,  12176., 6612.,
      8868.,  11444., 14340., 8760.,  11544., 14712., 18264., 10044., 13228.,
      16860., 20940., 10396., 13708., 17468., 21676., 9532.,  12716., 16348.,
      20428., 10908., 14220., 17980., 22188., 8760.,  11544., 14712., 18264.,
      7476.,  9860.,  12564., 15588., 5840.,  7696.,  9808.,  12176., 6660.,
      8980.,  11620., 14580., 8717.,  11457., 14597., 18137., 10662., 14014.,
      17846., 22158., 11407., 15307., 19767., 24787., 12471., 16595., 21279.,
      26523., 12735., 16699., 21223., 26307., 13191., 17251., 21871., 27051.,
      10582., 13998., 17894., 22270., 9141.,  12105., 15469., 19233., 7428.,
      9748.,  12388., 15348., 9272.,  12056., 15224., 18776., 9150.,  12534.,
      16398., 20742., 12068., 16180., 20868., 26132., 15530., 20242., 25626.,
      31682., 16314., 21218., 26794., 33042., 12714., 17426., 22810., 28866.,
      15034., 19938., 25514., 31762., 13348., 17460., 22148., 27412., 11982.,
      15558., 19614., 24150., 8248.,  11032., 14200., 17752., 10092., 13340.,
      17036., 21180., 13095., 17027., 21519., 26571., 14834., 19642., 25122.,
      31274., 15405., 20897., 27173., 34233., 18693., 24473., 31037., 38385.,
      18525., 24081., 30421., 37545., 17621., 23337., 29837., 37121., 13890.,
      18634., 24050., 30138., 13087., 17179., 21831., 27043., 10860., 14108.,
      17804., 21948., 10092., 13340., 17036., 21180., 11351., 15347., 19903.,
      25019., 15698., 20634., 26242., 32522., 18525., 24081., 30421., 37545.,
      17621., 23337., 29837., 37121., 15405., 20897., 27173., 34233., 18693.,
      24473., 31037., 38385., 16290., 21162., 26706., 32922., 12879., 17035.,
      21751., 27027., 9836.,  13084., 16780., 20924., 10092., 13340., 17036.,
      21180., 13095., 17027., 21519., 26571., 14834., 19642., 25122., 31274.,
      15405., 20897., 27173., 34233., 18693., 24473., 31037., 38385., 18525.,
      24081., 30421., 37545., 17621., 23337., 29837., 37121., 13890., 18634.,
      24050., 30138., 13087., 17179., 21831., 27043., 10860., 14108., 17804.,
      21948., 10092., 13340., 17036., 21180., 11351., 15347., 19903., 25019.,
      15698., 20634., 26242., 32522., 18525., 24081., 30421., 37545., 17621.,
      23337., 29837., 37121., 15405., 20897., 27173., 34233., 18693., 24473.,
      31037., 38385., 16290., 21162., 26706., 32922., 12879., 17035., 21751.,
      27027., 9836.,  13084., 16780., 20924., 9272.,  12056., 15224., 18776.,
      11502., 14950., 18878., 23286., 12932., 17172., 21988., 27380., 13530.,
      18306., 23754., 29874., 17130., 22098., 27738., 34050., 15834., 20610.,
      26058., 32178., 14826., 19794., 25434., 31746., 12068., 16180., 20868.,
      26132., 11934., 15446., 19438., 23910., 9272.,  12056., 15224., 18776.,
      6660.,  8980.,  11620., 14580., 8813.,  11681., 14949., 18617., 12390.,
      15998., 20086., 24654., 13039., 17067., 21655., 26803., 11703., 15827.,
      20511., 25755., 12223., 16187., 20711., 25795., 14567., 18755., 23503.,
      28811., 11702., 15246., 19270., 23774., 8373.,  11337., 14701., 18465.,
      7428.,  9748.,  12388., 15348., 5840.,  7696.,  9808.,  12176., 7124.,
      9380.,  11956., 14852., 8760.,  11544., 14712., 18264., 9532.,  12716.,
      16348., 20428., 10908., 14220., 17980., 22188., 10044., 13228., 16860.,
      20940., 10396., 13708., 17468., 21676., 8760.,  11544., 14712., 18264.,
      7988.,  10372., 13076., 16100., 5840.,  7696.,  9808.,  12176., 5840.,
      7696.,  9808.,  12176., 6612.,  8868.,  11444., 14340., 8760.,  11544.,
      14712., 18264., 10044., 13228., 16860., 20940., 10396., 13708., 17468.,
      21676., 9532.,  12716., 16348., 20428., 10908., 14220., 17980., 22188.,
      8760.,  11544., 14712., 18264., 7476.,  9860.,  12564., 15588., 5840.,
      7696.,  9808.,  12176., 6660.,  8980.,  11620., 14580., 8717.,  11457.,
      14597., 18137., 10662., 14014., 17846., 22158., 11407., 15307., 19767.,
      24787., 12471., 16595., 21279., 26523., 12735., 16699., 21223., 26307.,
      13191., 17251., 21871., 27051., 10582., 13998., 17894., 22270., 9141.,
      12105., 15469., 19233., 7428.,  9748.,  12388., 15348., 9272.,  12056.,
      15224., 18776., 9150.,  12534., 16398., 20742., 12068., 16180., 20868.,
      26132., 15530., 20242., 25626., 31682., 16314., 21218., 26794., 33042.,
      12714., 17426., 22810., 28866., 15034., 19938., 25514., 31762., 13348.,
      17460., 22148., 27412., 11982., 15558., 19614., 24150., 8248.,  11032.,
      14200., 17752., 10092., 13340., 17036., 21180., 13095., 17027., 21519.,
      26571., 14834., 19642., 25122., 31274., 15405., 20897., 27173., 34233.,
      18693., 24473., 31037., 38385., 18525., 24081., 30421., 37545., 17621.,
      23337., 29837., 37121., 13890., 18634., 24050., 30138., 13087., 17179.,
      21831., 27043., 10860., 14108., 17804., 21948., 10092., 13340., 17036.,
      21180., 11351., 15347., 19903., 25019., 15698., 20634., 26242., 32522.,
      18525., 24081., 30421., 37545., 17621., 23337., 29837., 37121., 15405.,
      20897., 27173., 34233., 18693., 24473., 31037., 38385., 16290., 21162.,
      26706., 32922., 12879., 17035., 21751., 27027., 9836.,  13084., 16780.,
      20924., 10092., 13340., 17036., 21180., 13095., 17027., 21519., 26571.,
      14834., 19642., 25122., 31274., 15405., 20897., 27173., 34233., 18693.,
      24473., 31037., 38385., 18525., 24081., 30421., 37545., 17621., 23337.,
      29837., 37121., 13890., 18634., 24050., 30138., 13087., 17179., 21831.,
      27043., 10860., 14108., 17804., 21948., 10092., 13340., 17036., 21180.,
      11351., 15347., 19903., 25019., 15698., 20634., 26242., 32522., 18525.,
      24081., 30421., 37545., 17621., 23337., 29837., 37121., 15405., 20897.,
      27173., 34233., 18693., 24473., 31037., 38385., 16290., 21162., 26706.,
      32922., 12879., 17035., 21751., 27027., 9836.,  13084., 16780., 20924.,
      9272.,  12056., 15224., 18776., 11502., 14950., 18878., 23286., 12932.,
      17172., 21988., 27380., 13530., 18306., 23754., 29874., 17130., 22098.,
      27738., 34050., 15834., 20610., 26058., 32178., 14826., 19794., 25434.,
      31746., 12068., 16180., 20868., 26132., 11934., 15446., 19438., 23910.,
      9272.,  12056., 15224., 18776., 6660.,  8980.,  11620., 14580., 8813.,
      11681., 14949., 18617., 12390., 15998., 20086., 24654., 13039., 17067.,
      21655., 26803., 11703., 15827., 20511., 25755., 12223., 16187., 20711.,
      25795., 14567., 18755., 23503., 28811., 11702., 15246., 19270., 23774.,
      8373.,  11337., 14701., 18465., 7428.,  9748.,  12388., 15348., 5840.,
      7696.,  9808.,  12176., 7124.,  9380.,  11956., 14852., 8760.,  11544.,
      14712., 18264., 9532.,  12716., 16348., 20428., 10908., 14220., 17980.,
      22188., 10044., 13228., 16860., 20940., 10396., 13708., 17468., 21676.,
      8760.,  11544., 14712., 18264., 7988.,  10372., 13076., 16100., 5840.,
      7696.,  9808.,  12176.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,
      539.,   839.,   1187.,  820.,   1284.,  1812.,  2404.,  1684.,  2276.,
      2932.,  3652.,  2548.,  3268.,  4052.,  4900.,  3412.,  4260.,  5172.,
      6148.,  4103.,  4835.,  5615.,  6443.,  3850.,  4402.,  4986.,  5602.,
      2525.,  2833.,  3157.,  3497.,  274.,   666.,   1090.,  1546.,  1860.,
      2516.,  3236.,  4020.,  4182.,  5230.,  6374.,  7614.,  7496.,  9064.,
      10760., 12584., 8008.,  9576.,  11272., 13096., 11784., 13608., 15560.,
      17640., 15560., 17640., 19848., 22184., 15334., 17086., 18934., 20878.,
      12836., 14132., 15492., 16916., 7810.,  8522.,  9266.,  10042., 4007.,
      4611.,  5263.,  5963.,  6046.,  7190.,  8430.,  9766.,  9573.,  11193.,
      12957., 14865., 14140., 16428., 18908., 21580., 9180.,  11340., 13692.,
      16236., 10556., 12844., 15324., 17996., 15196., 17868., 20732., 23788.,
      16221., 18513., 20949., 23529., 14286., 16006., 17822., 19734., 9007.,
      9963.,  10967., 12019., 3716.,  4628.,  5604.,  6644.,  10760., 12584.,
      14536., 16616., 16524., 19260., 22188., 25308., 24592., 28240., 32144.,
      36304., 21328., 24720., 28368., 32272., 19280., 22672., 26320., 30224.,
      23568., 27216., 31120., 35280., 24236., 27356., 30668., 34172., 20872.,
      23208., 25672., 28264., 12964., 14260., 15620., 17044., 6884.,  7924.,
      9028.,  10196., 13512., 15592., 17800., 20136., 23468., 26588., 29900.,
      33404., 32144., 36304., 40720., 45392., 24592., 28240., 32144., 36304.,
      21328., 24720., 28368., 32272., 19280., 22672., 26320., 30224., 17804.,
      20540., 23468., 26588., 16072., 18152., 20360., 22696., 10308., 11476.,
      12708., 14004., 5764.,  6676.,  7652.,  8692.,  15048., 17128., 19336.,
      21672., 24076., 27324., 30764., 34396., 36432., 40848., 45520., 50448.,
      32144., 36304., 40720., 45392., 24592., 28240., 32144., 36304., 21328.,
      24720., 28368., 32272., 14636., 17244., 20044., 23036., 11272., 13096.,
      15048., 17128., 7652.,  8692.,  9796.,  10964., 4644.,  5428.,  6276.,
      7188.,  12296., 14120., 16072., 18152., 23468., 26588., 29900., 33404.,
      34384., 38800., 43472., 48400., 36432., 40848., 45520., 50448., 32144.,
      36304., 40720., 45392., 24592., 28240., 32144., 36304., 17804., 20540.,
      23468., 26588., 9736.,  11560., 13512., 15592., 4996.,  5908.,  6884.,
      7924.,  3495.,  4099.,  4751.,  5451.,  9310.,  10710., 12206., 13798.,
      17829., 20217., 22749., 25425., 29436., 33004., 36764., 40716., 31836.,
      35532., 39420., 43500., 33020., 36588., 40348., 44300., 27868., 31052.,
      34428., 37996., 17245., 19537., 21973., 24553., 9998.,  11462., 13022.,
      14678., 2671.,  3371.,  4119.,  4915.,  1762.,  2090.,  2450.,  2842.,
      4772.,  5556.,  6404.,  7316.,  9286.,  10654., 12118., 13678., 15560.,
      17640., 19848., 22184., 19336., 21672., 24136., 26728., 18824., 21160.,
      23624., 26216., 17096., 19176., 21384., 23720., 12118., 13678., 15334.,
      17086., 4100.,  5012.,  5988.,  7028.,  1170.,  1562.,  1986.,  2442.,
      1173.,  1385.,  1613.,  1857.,  3162.,  3650.,  4170.,  4722.,  6095.,
      6923.,  7799.,  8723.,  10100., 11332., 12628., 13988., 13012., 14372.,
      15796., 17284., 15924., 17412., 18964., 20580., 14548., 15908., 17332.,
      18820., 11511., 12563., 13663., 14811., 6762.,  7442.,  8154.,  8898.,
      173.,   417.,   677.,   953.,   5.,     25.,    61.,    113.,   58.,
      162.,   298.,   466.,   287.,   539.,   839.,   1187.,  820.,   1284.,
      1812.,  2404.,  1684.,  2276.,  2932.,  3652.,  2548.,  3268.,  4052.,
      4900.,  3412.,  4260.,  5172.,  6148.,  4103.,  4835.,  5615.,  6443.,
      3850.,  4402.,  4986.,  5602.,  2525.,  2833.,  3157.,  3497.,  274.,
      666.,   1090.,  1546.,  1860.,  2516.,  3236.,  4020.,  4182.,  5230.,
      6374.,  7614.,  7496.,  9064.,  10760., 12584., 8008.,  9576.,  11272.,
      13096., 11784., 13608., 15560., 17640., 15560., 17640., 19848., 22184.,
      15334., 17086., 18934., 20878., 12836., 14132., 15492., 16916., 7810.,
      8522.,  9266.,  10042., 4007.,  4611.,  5263.,  5963.,  6046.,  7190.,
      8430.,  9766.,  9573.,  11193., 12957., 14865., 14140., 16428., 18908.,
      21580., 9180.,  11340., 13692., 16236., 10556., 12844., 15324., 17996.,
      15196., 17868., 20732., 23788., 16221., 18513., 20949., 23529., 14286.,
      16006., 17822., 19734., 9007.,  9963.,  10967., 12019., 3716.,  4628.,
      5604.,  6644.,  10760., 12584., 14536., 16616., 16524., 19260., 22188.,
      25308., 24592., 28240., 32144., 36304., 21328., 24720., 28368., 32272.,
      19280., 22672., 26320., 30224., 23568., 27216., 31120., 35280., 24236.,
      27356., 30668., 34172., 20872., 23208., 25672., 28264., 12964., 14260.,
      15620., 17044., 6884.,  7924.,  9028.,  10196., 13512., 15592., 17800.,
      20136., 23468., 26588., 29900., 33404., 32144., 36304., 40720., 45392.,
      24592., 28240., 32144., 36304., 21328., 24720., 28368., 32272., 19280.,
      22672., 26320., 30224., 17804., 20540., 23468., 26588., 16072., 18152.,
      20360., 22696., 10308., 11476., 12708., 14004., 5764.,  6676.,  7652.,
      8692.,  15048., 17128., 19336., 21672., 24076., 27324., 30764., 34396.,
      36432., 40848., 45520., 50448., 32144., 36304., 40720., 45392., 24592.,
      28240., 32144., 36304., 21328., 24720., 28368., 32272., 14636., 17244.,
      20044., 23036., 11272., 13096., 15048., 17128., 7652.,  8692.,  9796.,
      10964., 4644.,  5428.,  6276.,  7188.,  12296., 14120., 16072., 18152.,
      23468., 26588., 29900., 33404., 34384., 38800., 43472., 48400., 36432.,
      40848., 45520., 50448., 32144., 36304., 40720., 45392., 24592., 28240.,
      32144., 36304., 17804., 20540., 23468., 26588., 9736.,  11560., 13512.,
      15592., 4996.,  5908.,  6884.,  7924.,  3495.,  4099.,  4751.,  5451.,
      9310.,  10710., 12206., 13798., 17829., 20217., 22749., 25425., 29436.,
      33004., 36764., 40716., 31836., 35532., 39420., 43500., 33020., 36588.,
      40348., 44300., 27868., 31052., 34428., 37996., 17245., 19537., 21973.,
      24553., 9998.,  11462., 13022., 14678., 2671.,  3371.,  4119.,  4915.,
      1762.,  2090.,  2450.,  2842.,  4772.,  5556.,  6404.,  7316.,  9286.,
      10654., 12118., 13678., 15560., 17640., 19848., 22184., 19336., 21672.,
      24136., 26728., 18824., 21160., 23624., 26216., 17096., 19176., 21384.,
      23720., 12118., 13678., 15334., 17086., 4100.,  5012.,  5988.,  7028.,
      1170.,  1562.,  1986.,  2442.,  1173.,  1385.,  1613.,  1857.,  3162.,
      3650.,  4170.,  4722.,  6095.,  6923.,  7799.,  8723.,  10100., 11332.,
      12628., 13988., 13012., 14372., 15796., 17284., 15924., 17412., 18964.,
      20580., 14548., 15908., 17332., 18820., 11511., 12563., 13663., 14811.,
      6762.,  7442.,  8154.,  8898.,  173.,   417.,   677.,   953.,   5.,
      25.,    61.,    113.,   58.,    162.,   298.,   466.,   287.,   539.,
      839.,   1187.,  820.,   1284.,  1812.,  2404.,  1684.,  2276.,  2932.,
      3652.,  2548.,  3268.,  4052.,  4900.,  3412.,  4260.,  5172.,  6148.,
      4103.,  4835.,  5615.,  6443.,  3850.,  4402.,  4986.,  5602.,  2525.,
      2833.,  3157.,  3497.,  274.,   666.,   1090.,  1546.,  1860.,  2516.,
      3236.,  4020.,  4182.,  5230.,  6374.,  7614.,  7496.,  9064.,  10760.,
      12584., 8008.,  9576.,  11272., 13096., 11784., 13608., 15560., 17640.,
      15560., 17640., 19848., 22184., 15334., 17086., 18934., 20878., 12836.,
      14132., 15492., 16916., 7810.,  8522.,  9266.,  10042., 4007.,  4611.,
      5263.,  5963.,  6046.,  7190.,  8430.,  9766.,  9573.,  11193., 12957.,
      14865., 14140., 16428., 18908., 21580., 9180.,  11340., 13692., 16236.,
      10556., 12844., 15324., 17996., 15196., 17868., 20732., 23788., 16221.,
      18513., 20949., 23529., 14286., 16006., 17822., 19734., 9007.,  9963.,
      10967., 12019., 3716.,  4628.,  5604.,  6644.,  10760., 12584., 14536.,
      16616., 16524., 19260., 22188., 25308., 24592., 28240., 32144., 36304.,
      21328., 24720., 28368., 32272., 19280., 22672., 26320., 30224., 23568.,
      27216., 31120., 35280., 24236., 27356., 30668., 34172., 20872., 23208.,
      25672., 28264., 12964., 14260., 15620., 17044., 6884.,  7924.,  9028.,
      10196., 13512., 15592., 17800., 20136., 23468., 26588., 29900., 33404.,
      32144., 36304., 40720., 45392., 24592., 28240., 32144., 36304., 21328.,
      24720., 28368., 32272., 19280., 22672., 26320., 30224., 17804., 20540.,
      23468., 26588., 16072., 18152., 20360., 22696., 10308., 11476., 12708.,
      14004., 5764.,  6676.,  7652.,  8692.,  15048., 17128., 19336., 21672.,
      24076., 27324., 30764., 34396., 36432., 40848., 45520., 50448., 32144.,
      36304., 40720., 45392., 24592., 28240., 32144., 36304., 21328., 24720.,
      28368., 32272., 14636., 17244., 20044., 23036., 11272., 13096., 15048.,
      17128., 7652.,  8692.,  9796.,  10964., 4644.,  5428.,  6276.,  7188.,
      12296., 14120., 16072., 18152., 23468., 26588., 29900., 33404., 34384.,
      38800., 43472., 48400., 36432., 40848., 45520., 50448., 32144., 36304.,
      40720., 45392., 24592., 28240., 32144., 36304., 17804., 20540., 23468.,
      26588., 9736.,  11560., 13512., 15592., 4996.,  5908.,  6884.,  7924.,
      3495.,  4099.,  4751.,  5451.,  9310.,  10710., 12206., 13798., 17829.,
      20217., 22749., 25425., 29436., 33004., 36764., 40716., 31836., 35532.,
      39420., 43500., 33020., 36588., 40348., 44300., 27868., 31052., 34428.,
      37996., 17245., 19537., 21973., 24553., 9998.,  11462., 13022., 14678.,
      2671.,  3371.,  4119.,  4915.,  1762.,  2090.,  2450.,  2842.,  4772.,
      5556.,  6404.,  7316.,  9286.,  10654., 12118., 13678., 15560., 17640.,
      19848., 22184., 19336., 21672., 24136., 26728., 18824., 21160., 23624.,
      26216., 17096., 19176., 21384., 23720., 12118., 13678., 15334., 17086.,
      4100.,  5012.,  5988.,  7028.,  1170.,  1562.,  1986.,  2442.,  1173.,
      1385.,  1613.,  1857.,  3162.,  3650.,  4170.,  4722.,  6095.,  6923.,
      7799.,  8723.,  10100., 11332., 12628., 13988., 13012., 14372., 15796.,
      17284., 15924., 17412., 18964., 20580., 14548., 15908., 17332., 18820.,
      11511., 12563., 13663., 14811., 6762.,  7442.,  8154.,  8898.,  173.,
      417.,   677.,   953.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 750.,
      4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610.,
      29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380., 25380.,
      750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,  6264.,
      16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732.,
      35532., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532.,
      1080.,  6264.,  16056., 30456., 900.,   5220.,  13380., 25380., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 1050.,  6090.,
      15610., 29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854.,
      41454., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,
      6090.,  15610., 29610., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732.,
      35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,
      7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610.,
      29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1470.,
      8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,  6090.,
      15610., 29610., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732., 35532.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1470.,
      8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,
      18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488.,
      23688., 720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380.,
      1080.,  6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,
      7308.,  18732., 35532., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1080.,  6264.,  16056., 30456., 900.,   5220.,  13380.,
      25380., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920.,
      750.,   4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,
      6090.,  15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380.,
      25380., 750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,
      4176.,  10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920.,
      480.,   2784.,  7136.,  13536., 480.,   2784.,  7136.,  13536., 600.,
      3480.,  8920.,  16920., 720.,   4176.,  10704., 20304., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704., 20304.,
      600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536., 600.,
      3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,   5220.,
      13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610.,
      29610., 1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610., 29610.,
      900.,   5220.,  13380., 25380., 750.,   4350.,  11150., 21150., 600.,
      3480.,  8920.,  16920., 720.,   4176.,  10704., 20304., 900.,   5220.,
      13380., 25380., 1080.,  6264.,  16056., 30456., 1260.,  7308.,  18732.,
      35532., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532.,
      1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056., 30456., 900.,
      5220.,  13380., 25380., 720.,   4176.,  10704., 20304., 840.,   4872.,
      12488., 23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732.,
      35532., 1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,
      7308.,  18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610.,
      29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1470.,
      8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,  6090.,
      15610., 29610., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732., 35532.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1470.,
      8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,
      18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488.,
      23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610.,
      1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,
      8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,  6090.,  15610.,
      29610., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704., 20304.,
      900.,   5220.,  13380., 25380., 1080.,  6264.,  16056., 30456., 1260.,
      7308.,  18732., 35532., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,  6264.,  16056.,
      30456., 900.,   5220.,  13380., 25380., 720.,   4176.,  10704., 20304.,
      600.,   3480.,  8920.,  16920., 750.,   4350.,  11150., 21150., 900.,
      5220.,  13380., 25380., 1050.,  6090.,  15610., 29610., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610.,
      29610., 900.,   5220.,  13380., 25380., 750.,   4350.,  11150., 21150.,
      600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536., 600.,
      3480.,  8920.,  16920., 720.,   4176.,  10704., 20304., 840.,   4872.,
      12488., 23688., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 840.,   4872.,  12488., 23688., 720.,   4176.,  10704., 20304.,
      600.,   3480.,  8920.,  16920., 480.,   2784.,  7136.,  13536., 480.,
      2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,   4176.,
      10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488., 23688.,
      720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920., 480.,
      2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 750.,   4350.,
      11150., 21150., 900.,   5220.,  13380., 25380., 1050.,  6090.,  15610.,
      29610., 1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610., 29610.,
      1050.,  6090.,  15610., 29610., 900.,   5220.,  13380., 25380., 750.,
      4350.,  11150., 21150., 600.,   3480.,  8920.,  16920., 720.,   4176.,
      10704., 20304., 900.,   5220.,  13380., 25380., 1080.,  6264.,  16056.,
      30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532.,
      1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732., 35532., 1080.,
      6264.,  16056., 30456., 900.,   5220.,  13380., 25380., 720.,   4176.,
      10704., 20304., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610.,
      29610., 1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1470.,
      8526.,  21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,  6090.,
      15610., 29610., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732., 35532.,
      1470.,  8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1470.,
      8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,
      18732., 35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488.,
      23688., 840.,   4872.,  12488., 23688., 1050.,  6090.,  15610., 29610.,
      1260.,  7308.,  18732., 35532., 1470.,  8526.,  21854., 41454., 1470.,
      8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1260.,  7308.,  18732., 35532., 1050.,  6090.,  15610.,
      29610., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488., 23688.,
      1050.,  6090.,  15610., 29610., 1260.,  7308.,  18732., 35532., 1470.,
      8526.,  21854., 41454., 1470.,  8526.,  21854., 41454., 1470.,  8526.,
      21854., 41454., 1470.,  8526.,  21854., 41454., 1260.,  7308.,  18732.,
      35532., 1050.,  6090.,  15610., 29610., 840.,   4872.,  12488., 23688.,
      720.,   4176.,  10704., 20304., 900.,   5220.,  13380., 25380., 1080.,
      6264.,  16056., 30456., 1260.,  7308.,  18732., 35532., 1260.,  7308.,
      18732., 35532., 1260.,  7308.,  18732., 35532., 1260.,  7308.,  18732.,
      35532., 1080.,  6264.,  16056., 30456., 900.,   5220.,  13380., 25380.,
      720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920., 750.,
      4350.,  11150., 21150., 900.,   5220.,  13380., 25380., 1050.,  6090.,
      15610., 29610., 1050.,  6090.,  15610., 29610., 1050.,  6090.,  15610.,
      29610., 1050.,  6090.,  15610., 29610., 900.,   5220.,  13380., 25380.,
      750.,   4350.,  11150., 21150., 600.,   3480.,  8920.,  16920., 480.,
      2784.,  7136.,  13536., 600.,   3480.,  8920.,  16920., 720.,   4176.,
      10704., 20304., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488.,
      23688., 840.,   4872.,  12488., 23688., 840.,   4872.,  12488., 23688.,
      720.,   4176.,  10704., 20304., 600.,   3480.,  8920.,  16920., 480.,
      2784.,  7136.,  13536.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 16.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,
      2378.,  3706.,  5418.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,
      6520.,  9144.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,  6520.,
      9144.,  570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,  4572.,
      190.,   590.,   1118.,  1774.,  220.,   764.,   1564.,  2620.,  1784.,
      3384.,  5496.,  8120.,  2004.,  4148.,  7060.,  10740., 3568.,  6768.,
      10992., 16240., 3568.,  6768.,  10992., 16240., 3568.,  6768.,  10992.,
      16240., 3568.,  6768.,  10992., 16240., 3348.,  6004.,  9428.,  13620.,
      1784.,  3384.,  5496.,  8120.,  1564.,  2620.,  3932.,  5500.,  250.,
      938.,   2010.,  3466.,  2164.,  4564.,  7732.,  11668., 3438.,  6526.,
      10766., 16158., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512.,
      25384., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384.,
      3918.,  7774.,  12782., 18942., 3188.,  5588.,  8756.,  12692., 1754.,
      3210.,  5050.,  7274.,  440.,   1528.,  3128.,  5240.,  3568.,  6768.,
      10992., 16240., 4008.,  8296.,  14120., 21480., 7136.,  13536., 21984.,
      32480., 7136.,  13536., 21984., 32480., 7136.,  13536., 21984., 32480.,
      7136.,  13536., 21984., 32480., 6696.,  12008., 18856., 27240., 3568.,
      6768.,  10992., 16240., 3128.,  5240.,  7864.,  11000., 440.,   1528.,
      3128.,  5240.,  3568.,  6768.,  10992., 16240., 4008.,  8296.,  14120.,
      21480., 7136.,  13536., 21984., 32480., 7136.,  13536., 21984., 32480.,
      7136.,  13536., 21984., 32480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 3568.,  6768.,  10992., 16240., 3128.,  5240.,
      7864.,  11000., 440.,   1528.,  3128.,  5240.,  3568.,  6768.,  10992.,
      16240., 4008.,  8296.,  14120., 21480., 7136.,  13536., 21984., 32480.,
      7136.,  13536., 21984., 32480., 7136.,  13536., 21984., 32480., 7136.,
      13536., 21984., 32480., 6696.,  12008., 18856., 27240., 3568.,  6768.,
      10992., 16240., 3128.,  5240.,  7864.,  11000., 440.,   1528.,  3128.,
      5240.,  3568.,  6768.,  10992., 16240., 4008.,  8296.,  14120., 21480.,
      7136.,  13536., 21984., 32480., 7136.,  13536., 21984., 32480., 7136.,
      13536., 21984., 32480., 7136.,  13536., 21984., 32480., 6696.,  12008.,
      18856., 27240., 3568.,  6768.,  10992., 16240., 3128.,  5240.,  7864.,
      11000., 250.,   938.,   2010.,  3466.,  2164.,  4564.,  7732.,  11668.,
      3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6376.,
      11176., 17512., 25384., 4328.,  9128.,  15464., 23336., 6376.,  11176.,
      17512., 25384., 3918.,  7774.,  12782., 18942., 3188.,  5588.,  8756.,
      12692., 1754.,  3210.,  5050.,  7274.,  220.,   764.,   1564.,  2620.,
      1784.,  3384.,  5496.,  8120.,  2004.,  4148.,  7060.,  10740., 3568.,
      6768.,  10992., 16240., 3568.,  6768.,  10992., 16240., 3568.,  6768.,
      10992., 16240., 3568.,  6768.,  10992., 16240., 3348.,  6004.,  9428.,
      13620., 1784.,  3384.,  5496.,  8120.,  1564.,  2620.,  3932.,  5500.,
      30.,    174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,
      2378.,  3706.,  5418.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,
      6520.,  9144.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,  6520.,
      9144.,  570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,  4572.,
      190.,   590.,   1118.,  1774.,  30.,    174.,   446.,   846.,   380.,
      1180.,  2236.,  3548.,  1434.,  2378.,  3706.,  5418.,  760.,   2360.,
      4472.,  7096.,  2808.,  4408.,  6520.,  9144.,  760.,   2360.,  4472.,
      7096.,  2808.,  4408.,  6520.,  9144.,  570.,   1770.,  3354.,  5322.,
      1404.,  2204.,  3260.,  4572.,  190.,   590.,   1118.,  1774.,  220.,
      764.,   1564.,  2620.,  1784.,  3384.,  5496.,  8120.,  2004.,  4148.,
      7060.,  10740., 3568.,  6768.,  10992., 16240., 3568.,  6768.,  10992.,
      16240., 3568.,  6768.,  10992., 16240., 3568.,  6768.,  10992., 16240.,
      3348.,  6004.,  9428.,  13620., 1784.,  3384.,  5496.,  8120.,  1564.,
      2620.,  3932.,  5500.,  250.,   938.,   2010.,  3466.,  2164.,  4564.,
      7732.,  11668., 3438.,  6526.,  10766., 16158., 4328.,  9128.,  15464.,
      23336., 6376.,  11176., 17512., 25384., 4328.,  9128.,  15464., 23336.,
      6376.,  11176., 17512., 25384., 3918.,  7774.,  12782., 18942., 3188.,
      5588.,  8756.,  12692., 1754.,  3210.,  5050.,  7274.,  440.,   1528.,
      3128.,  5240.,  3568.,  6768.,  10992., 16240., 4008.,  8296.,  14120.,
      21480., 7136.,  13536., 21984., 32480., 7136.,  13536., 21984., 32480.,
      7136.,  13536., 21984., 32480., 7136.,  13536., 21984., 32480., 6696.,
      12008., 18856., 27240., 3568.,  6768.,  10992., 16240., 3128.,  5240.,
      7864.,  11000., 440.,   1528.,  3128.,  5240.,  3568.,  6768.,  10992.,
      16240., 4008.,  8296.,  14120., 21480., 7136.,  13536., 21984., 32480.,
      7136.,  13536., 21984., 32480., 7136.,  13536., 21984., 32480., 7136.,
      13536., 21984., 32480., 6696.,  12008., 18856., 27240., 3568.,  6768.,
      10992., 16240., 3128.,  5240.,  7864.,  11000., 440.,   1528.,  3128.,
      5240.,  3568.,  6768.,  10992., 16240., 4008.,  8296.,  14120., 21480.,
      7136.,  13536., 21984., 32480., 7136.,  13536., 21984., 32480., 7136.,
      13536., 21984., 32480., 7136.,  13536., 21984., 32480., 6696.,  12008.,
      18856., 27240., 3568.,  6768.,  10992., 16240., 3128.,  5240.,  7864.,
      11000., 440.,   1528.,  3128.,  5240.,  3568.,  6768.,  10992., 16240.,
      4008.,  8296.,  14120., 21480., 7136.,  13536., 21984., 32480., 7136.,
      13536., 21984., 32480., 7136.,  13536., 21984., 32480., 7136.,  13536.,
      21984., 32480., 6696.,  12008., 18856., 27240., 3568.,  6768.,  10992.,
      16240., 3128.,  5240.,  7864.,  11000., 250.,   938.,   2010.,  3466.,
      2164.,  4564.,  7732.,  11668., 3438.,  6526.,  10766., 16158., 4328.,
      9128.,  15464., 23336., 6376.,  11176., 17512., 25384., 4328.,  9128.,
      15464., 23336., 6376.,  11176., 17512., 25384., 3918.,  7774.,  12782.,
      18942., 3188.,  5588.,  8756.,  12692., 1754.,  3210.,  5050.,  7274.,
      220.,   764.,   1564.,  2620.,  1784.,  3384.,  5496.,  8120.,  2004.,
      4148.,  7060.,  10740., 3568.,  6768.,  10992., 16240., 3568.,  6768.,
      10992., 16240., 3568.,  6768.,  10992., 16240., 3568.,  6768.,  10992.,
      16240., 3348.,  6004.,  9428.,  13620., 1784.,  3384.,  5496.,  8120.,
      1564.,  2620.,  3932.,  5500.,  30.,    174.,   446.,   846.,   380.,
      1180.,  2236.,  3548.,  1434.,  2378.,  3706.,  5418.,  760.,   2360.,
      4472.,  7096.,  2808.,  4408.,  6520.,  9144.,  760.,   2360.,  4472.,
      7096.,  2808.,  4408.,  6520.,  9144.,  570.,   1770.,  3354.,  5322.,
      1404.,  2204.,  3260.,  4572.,  190.,   590.,   1118.,  1774.,  30.,
      174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,  2378.,
      3706.,  5418.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,  6520.,
      9144.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,  6520.,  9144.,
      570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,  4572.,  190.,
      590.,   1118.,  1774.,  220.,   764.,   1564.,  2620.,  1784.,  3384.,
      5496.,  8120.,  2004.,  4148.,  7060.,  10740., 3568.,  6768.,  10992.,
      16240., 3568.,  6768.,  10992., 16240., 3568.,  6768.,  10992., 16240.,
      3568.,  6768.,  10992., 16240., 3348.,  6004.,  9428.,  13620., 1784.,
      3384.,  5496.,  8120.,  1564.,  2620.,  3932.,  5500.,  250.,   938.,
      2010.,  3466.,  2164.,  4564.,  7732.,  11668., 3438.,  6526.,  10766.,
      16158., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384.,
      4328.,  9128.,  15464., 23336., 6376.,  11176., 17512., 25384., 3918.,
      7774.,  12782., 18942., 3188.,  5588.,  8756.,  12692., 1754.,  3210.,
      5050.,  7274.,  440.,   1528.,  3128.,  5240.,  3568.,  6768.,  10992.,
      16240., 4008.,  8296.,  14120., 21480., 7136.,  13536., 21984., 32480.,
      7136.,  13536., 21984., 32480., 7136.,  13536., 21984., 32480., 7136.,
      13536., 21984., 32480., 6696.,  12008., 18856., 27240., 3568.,  6768.,
      10992., 16240., 3128.,  5240.,  7864.,  11000., 440.,   1528.,  3128.,
      5240.,  3568.,  6768.,  10992., 16240., 4008.,  8296.,  14120., 21480.,
      7136.,  13536., 21984., 32480., 7136.,  13536., 21984., 32480., 7136.,
      13536., 21984., 32480., 7136.,  13536., 21984., 32480., 6696.,  12008.,
      18856., 27240., 3568.,  6768.,  10992., 16240., 3128.,  5240.,  7864.,
      11000., 440.,   1528.,  3128.,  5240.,  3568.,  6768.,  10992., 16240.,
      4008.,  8296.,  14120., 21480., 7136.,  13536., 21984., 32480., 7136.,
      13536., 21984., 32480., 7136.,  13536., 21984., 32480., 7136.,  13536.,
      21984., 32480., 6696.,  12008., 18856., 27240., 3568.,  6768.,  10992.,
      16240., 3128.,  5240.,  7864.,  11000., 440.,   1528.,  3128.,  5240.,
      3568.,  6768.,  10992., 16240., 4008.,  8296.,  14120., 21480., 7136.,
      13536., 21984., 32480., 7136.,  13536., 21984., 32480., 7136.,  13536.,
      21984., 32480., 7136.,  13536., 21984., 32480., 6696.,  12008., 18856.,
      27240., 3568.,  6768.,  10992., 16240., 3128.,  5240.,  7864.,  11000.,
      250.,   938.,   2010.,  3466.,  2164.,  4564.,  7732.,  11668., 3438.,
      6526.,  10766., 16158., 4328.,  9128.,  15464., 23336., 6376.,  11176.,
      17512., 25384., 4328.,  9128.,  15464., 23336., 6376.,  11176., 17512.,
      25384., 3918.,  7774.,  12782., 18942., 3188.,  5588.,  8756.,  12692.,
      1754.,  3210.,  5050.,  7274.,  220.,   764.,   1564.,  2620.,  1784.,
      3384.,  5496.,  8120.,  2004.,  4148.,  7060.,  10740., 3568.,  6768.,
      10992., 16240., 3568.,  6768.,  10992., 16240., 3568.,  6768.,  10992.,
      16240., 3568.,  6768.,  10992., 16240., 3348.,  6004.,  9428.,  13620.,
      1784.,  3384.,  5496.,  8120.,  1564.,  2620.,  3932.,  5500.,  30.,
      174.,   446.,   846.,   380.,   1180.,  2236.,  3548.,  1434.,  2378.,
      3706.,  5418.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,  6520.,
      9144.,  760.,   2360.,  4472.,  7096.,  2808.,  4408.,  6520.,  9144.,
      570.,   1770.,  3354.,  5322.,  1404.,  2204.,  3260.,  4572.,  190.,
      590.,   1118.,  1774.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}