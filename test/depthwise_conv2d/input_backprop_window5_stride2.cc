/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_depthwise_conv2d_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/depthwise_conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::DefaultBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;
using GTestTypePairs = sycldnn::types::ToGTestTypes<SNNTypePairs>::type;

template <typename Pair>
using InputBackpropWindow5Stride2 =
    sycldnn::depthwise_conv2d::WindowStrideTest<Pair, 5, 2>;
TYPED_TEST_SUITE(InputBackpropWindow5Stride2, GTestTypePairs);
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      56.,  70.,  124.,  102., 172.,  134., 156.,  126., 140., 244.,
      192., 322., 244.,  266., 233.,  266., 450.,  344., 567., 422.,
      467., 318., 348.,  556., 400.,  634., 452.,  490., 521., 578.,
      918., 656., 1035., 734., 803.,  510., 556.,  868., 608., 946.,
      660., 714., 740.,  786., 1228., 858., 1336., 930., 984.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,  5.,  8.,  11.,  8.,   10.,  6.,   7.,   20., 23., 26.,  18.,
      20.,  14., 18., 48., 58.,  68.,  44.,  50.,  34.,  38., 98., 108., 118.,
      74.,  80., 54., 58., 148., 158., 168., 104., 110., 48., 51., 118., 125.,
      132., 76., 80., 63., 66.,  153., 160., 167., 96.,  100.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      368.,  472.,  854.,  720.,  1226., 968.,  1136.,  888.,  992.,  1754.,
      1400., 2366., 1808., 1976., 1660., 1912., 3267.,  2524., 4185., 3136.,
      3484., 2392., 2624., 4202., 3032., 4814., 3440.,  3736., 3916., 4360.,
      6939., 4972., 7857., 5584., 6124., 3896., 4256.,  6650., 4664., 7262.,
      5072., 5496., 5696., 6056., 9470., 6624., 10322., 7192., 7616.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,  68.,   53.,   67.,   35.,  41.,  128.,
      148.,  168.,  123.,  137., 82.,   110.,  312.,  384., 456., 306.,
      350.,  222.,  250.,  672., 744.,  816.,  526.,  570., 362., 390.,
      1032., 1104., 1176., 746., 790.,  347.,  369.,  864., 916., 968.,
      563.,  593.,  457.,  479., 1124., 1176., 1228., 713., 743.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2632.,  3432.,  6292.,  5384.,  9220.,  7336.,  8648.,  5992.,  5128.,
      10948., 6312.,  13748., 7496.,  8808.,  10172., 12140., 19830., 14940.,
      24030., 17740., 20476., 13800., 9864.,  22148., 11048., 24948., 12232.,
      14568., 19836., 23340., 36630., 26140., 40830., 28940., 33212., 21608.,
      14600., 33348., 15784., 36148., 16968., 20328., 25992., 28840., 44788.,
      31304., 48484., 33768., 37128.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,  324.,  468.,  382.,  486.,  230.,  270.,  900.,
      1044., 1188., 902.,  1006., 540.,  748.,  2216., 2760., 3304., 2268.,
      2604., 1580., 1788., 4936., 5480., 6024., 3948., 4284., 2620., 2828.,
      7656., 8200., 8744., 5628., 5964., 2630., 2798., 6596., 6996., 7396.,
      4326., 4558., 3470., 3638., 8596., 8996., 9396., 5486., 5718.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      144.,  224.,  192.,  280.,  358.,  496.,  312.,  408.,  538.,  688.,
      432.,  536.,  512.,  624.,  384.,  504.,  432.,  560.,  778.,  976.,
      632.,  768.,  1078., 1288., 832.,  976.,  912.,  1064., 728.,  932.,
      848.,  1064., 1467., 1800., 1148., 1376., 1917., 2268., 1448., 1688.,
      1616., 1868., 1120., 1272., 1232., 1392., 1978., 2224., 1432., 1600.,
      2278., 2536., 1632., 1808., 1776., 1960., 1832., 2084., 2048., 2312.,
      3267., 3672., 2348., 2624., 3717., 4140., 2648., 2936., 2912., 3212.,
      1856., 2040., 2032., 2224., 3178., 3472., 2232., 2432., 3478., 3784.,
      2432., 2640., 2640., 2856., 2736., 2960., 2912., 3144., 4558., 4912.,
      3192., 3432., 4978., 5344., 3472., 3720., 3680., 3936.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   3.,   8.,   8.,   20.,  16.,  32.,  24.,  44.,  21.,
      32.,  27.,  40.,  11.,  24.,  13.,  28.,  48.,  80.,  56.,  92.,
      64.,  104., 51.,  72.,  57.,  80.,  26.,  56.,  38.,  72.,  120.,
      192., 152., 232., 184., 272., 130., 176., 150., 200., 86.,  136.,
      98.,  152., 280., 392., 312., 432., 344., 472., 230., 296., 250.,
      320., 146., 216., 158., 232., 440., 592., 472., 632., 504., 672.,
      330., 416., 350., 440., 155., 192., 165., 204., 392., 472., 416.,
      500., 440., 528., 259., 304., 273., 320., 205., 252., 215., 264.,
      512., 612., 536., 640., 560., 668., 329., 384., 343., 400.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1004.,  1628.,  1372.,  2060.,  2606.,  3686.,  2316.,  3068.,  4022.,
      5198.,  3260.,  4076.,  3884.,  4764.,  2844.,  3788.,  3212.,  4220.,
      5846.,  7406.,  4796.,  5868.,  8222.,  9878.,  6380.,  7516.,  7004.,
      8204.,  5434.,  7042.,  6370.,  8074.,  11097., 13725., 8746.,  10546.,
      14661., 17433., 11122., 13018., 12442., 14434., 8668.,  9868.,  9548.,
      10812., 15350., 17294., 11132., 12460., 17726., 19766., 12716., 14108.,
      13852., 15308., 14170., 16162., 15874., 17962., 25353., 28557., 18250.,
      20434., 28917., 32265., 20626., 22906., 22714., 25090., 14492., 15948.,
      15884., 17404., 24854., 27182., 17468., 19052., 27230., 29654., 19052.,
      20700., 20700., 22412., 21452., 23228., 22844., 24684., 35774., 38582.,
      25068., 26972., 39110., 42014., 27292., 29260., 28940., 30972.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    25.,   17.,   53.,   46.,   134.,  102.,  222.,  158.,  310.,
      149.,  233.,  193.,  293.,  65.,   165.,  77.,   193.,  326.,  574.,
      382.,  662.,  438.,  750.,  369.,  533.,  413.,  593.,  154.,  386.,
      242.,  506.,  828.,  1388., 1068., 1692., 1308., 1996., 954.,  1314.,
      1106., 1498., 594.,  986.,  682.,  1106., 2028., 2908., 2268., 3212.,
      2508., 3516., 1714., 2234., 1866., 2418., 1034., 1586., 1122., 1706.,
      3228., 4428., 3468., 4732., 3708., 5036., 2474., 3154., 2626., 3338.,
      1169., 1461., 1245., 1553., 2982., 3614., 3166., 3830., 3350., 4046.,
      1985., 2341., 2093., 2465., 1549., 1921., 1625., 2013., 3902., 4694.,
      4086., 4910., 4270., 5126., 2525., 2961., 2633., 3085.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4120.,  7000.,  7000.,  10392., 11764., 17236., 10392., 14296., 16852.,
      23092., 13784., 18200., 18712., 23640., 17880., 22296., 9240.,  12120.,
      25044., 31284., 11608., 15000., 31668., 38676., 13976., 17880., 18904.,
      23320., 10180., 14756., 13476., 18820., 22622., 30190., 20100., 26212.,
      30510., 39230., 26724., 33604., 28356., 34980., 13784., 18200., 5144.,
      8024.,  22996., 29236., 7512.,  10904., 29620., 36628., 9880.,  13784.,
      14808., 19224., 16964., 22564., 22308., 28676., 27678., 36782., 28932.,
      36068., 35566., 45822., 35556., 43460., 31044., 38692., 17880., 22296.,
      9240.,  12120., 25044., 31284., 11608., 15000., 31668., 38676., 13976.,
      17880., 18904., 23320., 9880.,  13784., 12760., 17176., 21300., 27284.,
      18200., 23128., 27412., 34164., 23640., 29080., 23832., 28760.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1132.,
      2316.,  1118.,  1774.,  1454.,  2238.,  430.,   1214.,  510.,   1422.,
      2380.,  4332.,  2796.,  5004.,  3212.,  5676.,  2798.,  4094.,  3134.,
      4558.,  1020.,  2844.,  1692.,  3772.,  6104.,  10520., 7960.,  12888.,
      9816.,  15256., 7292.,  10140., 8476.,  11580., 4380.,  7484.,  5052.,
      8412.,  15384., 22360., 17240., 24728., 19096., 27096., 13212., 17340.,
      14396., 18780., 7740.,  12124., 8412.,  13052., 24664., 34200., 26520.,
      36568., 28376., 38936., 19132., 24540., 20316., 25980., 9070.,  11390.,
      9662.,  12110., 23244., 28268., 24684., 29964., 26124., 31660., 15534.,
      18366., 16382., 19342., 12030., 14990., 12622., 15710., 30444., 36748.,
      31884., 38444., 33324., 40140., 19774., 23246., 20622., 24222.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      428.,   576.,   732.,   896.,   604.,   768.,   940.,   1120.,  1174.,
      1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,  2152.,
      2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,  2268.,
      2496.,  1308.,  1536.,  1772.,  2016.,  1484.,  1728.,  1980.,  2240.,
      2734.,  3112.,  3502.,  3904.,  2268.,  2528.,  2796.,  3072.,  3910.,
      4312.,  4726.,  5152.,  3052.,  3328.,  3612.,  3904.,  3356.,  3648.,
      3948.,  4256.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,  3818.,
      4256.,  5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,  5504.,
      6993.,  7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,  5978.,
      6464.,  6962.,  7472.,  4188.,  4480.,  4780.,  5088.,  4620.,  4928.,
      5244.,  5568.,  7438.,  7912.,  8398.,  8896.,  5404.,  5728.,  6060.,
      6400.,  8614.,  9112.,  9622.,  10144., 6188.,  6528.,  6876.,  7232.,
      6748.,  7104.,  7468.,  7840.,  6842.,  7328.,  7826.,  8336.,  7682.,
      8192.,  8714.,  9248.,  12285., 13068., 13869., 14688., 8858.,  9392.,
      9938.,  10496., 14049., 14868., 15705., 16560., 10034., 10592., 11162.,
      11744., 11066., 11648., 12242., 12848., 7068.,  7424.,  7788.,  8160.,
      7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294., 13888., 8540.,
      8928.,  9324.,  9728.,  13318., 13912., 14518., 15136., 9324.,  9728.,
      10140., 10560., 10140., 10560., 10988., 11424., 10508., 10944., 11388.,
      11840., 11196., 11648., 12108., 12576., 17542., 18232., 18934., 19648.,
      12300., 12768., 13244., 13728., 19198., 19912., 20638., 21376., 13404.,
      13888., 14380., 14880., 14220., 14720., 15228., 15744.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   5.,    12.,   21.,   32.,   14.,   32.,
      54.,   80.,   38.,   64.,   94.,   128.,  62.,   96.,   134.,  176.,
      65.,   84.,   105.,  128.,  85.,   108.,  133.,  160.,  21.,   44.,
      69.,   96.,   25.,   52.,   81.,   112.,  134.,  192.,  254.,  320.,
      158.,  224.,  294.,  368.,  182.,  256.,  334.,  416.,  165.,  204.,
      245.,  288.,  185.,  228.,  273.,  320.,  50.,   104.,  162.,  224.,
      90.,   152.,  218.,  288.,  348.,  480.,  620.,  768.,  460.,  608.,
      764.,  928.,  572.,  736.,  908.,  1088., 434.,  520.,  610.,  704.,
      506.,  600.,  698.,  800.,  250.,  344.,  442.,  544.,  290.,  392.,
      498.,  608.,  908.,  1120., 1340., 1568., 1020., 1248., 1484., 1728.,
      1132., 1376., 1628., 1888., 794.,  920.,  1050., 1184., 866.,  1000.,
      1138., 1280., 450.,  584.,  722.,  864.,  490.,  632.,  778.,  928.,
      1468., 1760., 2060., 2368., 1580., 1888., 2204., 2528., 1692., 2016.,
      2348., 2688., 1154., 1320., 1490., 1664., 1226., 1400., 1578., 1760.,
      549.,  620.,  693.,  768.,  585.,  660.,  737.,  816.,  1414., 1568.,
      1726., 1888., 1502., 1664., 1830., 2000., 1590., 1760., 1934., 2112.,
      949.,  1036., 1125., 1216., 1001., 1092., 1185., 1280., 729.,  820.,
      913.,  1008., 765.,  860.,  957.,  1056., 1854., 2048., 2246., 2448.,
      1942., 2144., 2350., 2560., 2030., 2240., 2454., 2672., 1209., 1316.,
      1425., 1536., 1261., 1372., 1485., 1600.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1732.,  2388.,  3108.,  3892.,  3108.,  3892.,  4740.,  5652.,  5246.,
      6518.,  7886.,  9350.,  4740.,  5652.,  6628.,  7668.,  7694.,  9158.,
      10718., 12374., 6372.,  7412.,  8516.,  9684.,  8772.,  9940.,  11172.,
      12468., 8420.,  9460.,  10564., 11732., 4292.,  4948.,  5668.,  6452.,
      11790., 13254., 14814., 16470., 5412.,  6196.,  7044.,  7956.,  15006.,
      16662., 18414., 20262., 6532.,  7444.,  8420.,  9460.,  8932.,  9972.,
      11076., 12244., 4566.,  5614.,  6758.,  7998.,  6118.,  7358.,  8694.,
      10126., 10437., 12185., 14077., 16113., 9334.,  10766., 12294., 13918.,
      14237., 16273., 18453., 20777., 12550., 14174., 15894., 17710., 13398.,
      14958., 16614., 18366., 6372.,  7412.,  8516.,  9684.,  2244.,  2900.,
      3620.,  4404.,  10766., 12230., 13790., 15446., 3364.,  4148.,  4996.,
      5908.,  13982., 15638., 17390., 19238., 4484.,  5396.,  6372.,  7412.,
      6884.,  7924.,  9028.,  10196., 7830.,  9134.,  10534., 12030., 10406.,
      11902., 13494., 15182., 12773., 14905., 17181., 19601., 13622., 15310.,
      17094., 18974., 16573., 18993., 21557., 24265., 16838., 18718., 20694.,
      22766., 14614., 16430., 18342., 20350., 8420.,  9460.,  10564., 11732.,
      4292.,  4948.,  5668.,  6452.,  11790., 13254., 14814., 16470., 5412.,
      6196.,  7044.,  7956.,  15006., 16662., 18414., 20262., 6532.,  7444.,
      8420.,  9460.,  8932.,  9972.,  11076., 12244., 4484.,  5396.,  6372.,
      7412.,  5860.,  6900.,  8004.,  9172.,  9950.,  11350., 12846., 14438.,
      8516.,  9684.,  10916., 12212., 12910., 14502., 16190., 17974., 11172.,
      12468., 13828., 15252., 11332., 12500., 13732., 15028.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  125.,   305.,   501.,   713.,   149.,   361.,   589.,   833.,
      962.,   1418.,  1906.,  2426.,  1138.,  1658.,  2210.,  2794.,  1314.,
      1898.,  2514.,  3162.,  1245.,  1553.,  1877.,  2217.,  1397.,  1737.,
      2093.,  2465.,  298.,   722.,   1178.,  1666.,  602.,   1090.,  1610.,
      2162.,  2532.,  3572.,  4676.,  5844.,  3396.,  4564.,  5796.,  7092.,
      4260.,  5556.,  6916.,  8340.,  3306.,  3986.,  4698.,  5442.,  3866.,
      4610.,  5386.,  6194.,  1818.,  2562.,  3338.,  4146.,  2122.,  2930.,
      3770.,  4642.,  6852.,  8532.,  10276., 12084., 7716.,  9524.,  11396.,
      13332., 8580.,  10516., 12516., 14580., 6106.,  7106.,  8138.,  9202.,
      6666.,  7730.,  8826.,  9954.,  3338.,  4402.,  5498.,  6626.,  3642.,
      4770.,  5930.,  7122.,  11172., 13492., 15876., 18324., 12036., 14484.,
      16996., 19572., 12900., 15476., 18116., 20820., 8906.,  10226., 11578.,
      12962., 9466.,  10850., 12266., 13714., 4253.,  4817.,  5397.,  5993.,
      4533.,  5129.,  5741.,  6369.,  11010., 12234., 13490., 14778., 11698.,
      12986., 14306., 15658., 12386., 13738., 15122., 16538., 7421.,  8113.,
      8821.,  9545.,  7829.,  8553.,  9293.,  10049., 5653.,  6377.,  7117.,
      7873.,  5933.,  6689.,  7461.,  8249.,  14450., 15994., 17570., 19178.,
      15138., 16746., 18386., 20058., 15826., 17498., 19202., 20938., 9461.,
      10313., 11181., 12065., 9869.,  10753., 11653., 12569.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600., 16760., 8244.,
      12180., 16884., 22356., 14648., 18808., 23480., 28664., 15348., 20820.,
      27060., 34068., 23480., 28664., 34360., 40568., 12600., 16760., 21432.,
      26616., 5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000.,
      15348., 20820., 27060., 34068., 7864.,  11000., 14648., 18808., 28596.,
      35604., 43380., 51924., 12600., 16760., 21432., 26616., 23480., 28664.,
      34360., 40568., 3668.,  6836.,  10772., 15476., 7700.,  12404., 17876.,
      24116., 11182., 16830., 23630., 31582., 20948., 27188., 34196., 41972.,
      20814., 28766., 37870., 48126., 34196., 41972., 50516., 59828., 19924.,
      26164., 33172., 40948., 5816.,  8952.,  12600., 16760., 3128.,  5240.,
      7864.,  11000., 15348., 20820., 27060., 34068., 7864.,  11000., 14648.,
      18808., 28596., 35604., 43380., 51924., 12600., 16760., 21432., 26616.,
      23480., 28664., 34360., 40568., 3668.,  6836.,  10772., 15476., 7700.,
      12404., 17876., 24116., 11182., 16830., 23630., 31582., 20948., 27188.,
      34196., 41972., 20814., 28766., 37870., 48126., 34196., 41972., 50516.,
      59828., 19924., 26164., 33172., 40948., 5816.,  8952.,  12600., 16760.,
      3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068., 7864.,
      11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600., 16760.,
      21432., 26616., 23480., 28664., 34360., 40568., 3128.,  5240.,  7864.,
      11000., 5816.,  8952.,  12600., 16760., 8244.,  12180., 16884., 22356.,
      14648., 18808., 23480., 28664., 15348., 20820., 27060., 34068., 23480.,
      28664., 34360., 40568., 12600., 16760., 21432., 26616.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,
      1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  3228.,  5308.,
      7644.,  10236., 3742.,  4910.,  6206.,  7630.,  4926.,  6350.,  7902.,
      9582.,  830.,   2254.,  3806.,  5486.,  990.,   2670.,  4478.,  6414.,
      7260.,  10876., 14748., 18876., 7324.,  9404.,  11740., 14332., 8668.,
      11260., 14108., 17212., 190.,   590.,   1118.,  1774.,  1374.,  2030.,
      2814.,  3726.,  700.,   2012.,  3580.,  5404.,  3068.,  4892.,  6972.,
      9308.,  8504.,  12664., 17336., 22520., 15288., 20472., 26168., 32376.,
      22072., 28280., 35000., 42232., 16316., 19676., 23292., 27164., 20732.,
      24604., 28732., 33116., 12540., 16412., 20540., 24924., 13628., 15964.,
      18556., 21404., 41144., 48376., 56120., 64376., 20792., 24952., 29624.,
      34808., 27576., 32760., 38456., 44664., 3068.,  4892.,  6972.,  9308.,
      7484.,  9820.,  12412., 15260., 5436.,  7772.,  10364., 13212., 7804.,
      10652., 13756., 17116., 22072., 28280., 35000., 42232., 28856., 36088.,
      43832., 52088., 34360., 40568., 47288., 54520., 25148., 29532., 34172.,
      39068., 20092., 22940., 26044., 29404., 15806., 18254., 20830., 23534.,
      350.,   1006.,  1790.,  2702.,  25692., 29308., 33180., 37308., 5276.,
      7356.,  9692.,  12284., 10716., 13308., 16156., 19260., 6974.,  8398.,
      9950.,  11630., 10206., 11886., 13694., 15630., 9182.,  10862., 12670.,
      14606., 11390., 13326., 15390., 17582., 27036., 31164., 35548., 40188.,
      32476., 37116., 42012., 47164., 20252., 23356., 26716., 30332., 23134.,
      25838., 28670., 31630., 510.,   1422.,  2462.,  3630.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22.,  56.,   70.,  124.,  102., 172.,  134., 156., 52.,  126., 140., 244.,
      192., 322.,  244., 266.,  100., 233.,  266., 450., 344., 567., 422., 467.,
      148., 318.,  348., 556.,  400., 634.,  452., 490., 244., 521., 578., 918.,
      656., 1035., 734., 803.,  244., 510.,  556., 868., 608., 946., 660., 714.,
      354., 740.,  786., 1228., 858., 1336., 930., 984.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,  10.,  0.,   6.,   7.,  20.,  23.,
      26.,  18.,  20.,  0.,   14.,  18., 48.,  58.,  68.,  44., 50.,  0.,
      34.,  38.,  98.,  108., 118., 74., 80.,  0.,   54.,  58., 148., 158.,
      168., 104., 110., 0.,   48.,  51., 118., 125., 132., 76., 80.,  0.,
      63.,  66.,  153., 160., 167., 96., 100., 0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      138.,  368.,  472.,  854.,   720.,  1226., 968.,  1136., 358.,  888.,
      992.,  1754., 1400., 2366.,  1808., 1976., 701.,  1660., 1912., 3267.,
      2524., 4185., 3136., 3484.,  1110., 2392., 2624., 4202., 3032., 4814.,
      3440., 3736., 1829., 3916.,  4360., 6939., 4972., 7857., 5584., 6124.,
      1862., 3896., 4256., 6650.,  4664., 7262., 5072., 5496., 2722., 5696.,
      6056., 9470., 6624., 10322., 7192., 7616.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,  68.,   53.,   67.,   0.,   35.,  41.,
      128.,  148.,  168.,  123., 137.,  0.,    82.,   110., 312., 384.,
      456.,  306.,  350.,  0.,   222.,  250.,  672.,  744., 816., 526.,
      570.,  0.,    362.,  390., 1032., 1104., 1176., 746., 790., 0.,
      347.,  369.,  864.,  916., 968.,  563.,  593.,  0.,   457., 479.,
      1124., 1176., 1228., 713., 743.,  0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      956.,   2632.,  3432.,  6292.,  5384.,  9220.,  7336.,  8648.,
      1996.,  5992.,  5128.,  10948., 6312.,  13748., 7496.,  8808.,
      4578.,  10172., 12140., 19830., 14940., 24030., 17740., 20476.,
      3852.,  13800., 9864.,  22148., 11048., 24948., 12232., 14568.,
      9410.,  19836., 23340., 36630., 26140., 40830., 28940., 33212.,
      5708.,  21608., 14600., 33348., 15784., 36148., 16968., 20328.,
      12508., 25992., 28840., 44788., 31304., 48484., 33768., 37128.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,  324.,  468.,  382.,  486.,  0.,    230.,  270.,
      900.,  1044., 1188., 902.,  1006., 0.,    540.,  748.,  2216., 2760.,
      3304., 2268., 2604., 0.,    1580., 1788., 4936., 5480., 6024., 3948.,
      4284., 0.,    2620., 2828., 7656., 8200., 8744., 5628., 5964., 0.,
      2630., 2798., 6596., 6996., 7396., 4326., 4558., 0.,    3470., 3638.,
      8596., 8996., 9396., 5486., 5718., 0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      50.,   88.,   144.,  224.,  192.,  280.,  358.,  496.,  312.,  408.,
      538.,  688.,  432.,  536.,  512.,  624.,  150.,  208.,  384.,  504.,
      432.,  560.,  778.,  976.,  632.,  768.,  1078., 1288., 832.,  976.,
      912.,  1064., 301.,  400.,  728.,  932.,  848.,  1064., 1467., 1800.,
      1148., 1376., 1917., 2268., 1448., 1688., 1616., 1868., 518.,  592.,
      1120., 1272., 1232., 1392., 1978., 2224., 1432., 1600., 2278., 2536.,
      1632., 1808., 1776., 1960., 853.,  976.,  1832., 2084., 2048., 2312.,
      3267., 3672., 2348., 2624., 3717., 4140., 2648., 2936., 2912., 3212.,
      886.,  976.,  1856., 2040., 2032., 2224., 3178., 3472., 2232., 2432.,
      3478., 3784., 2432., 2640., 2640., 2856., 1306., 1416., 2736., 2960.,
      2912., 3144., 4558., 4912., 3192., 3432., 4978., 5344., 3472., 3720.,
      3680., 3936.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   3.,   8.,   8.,   20.,  16.,  32.,  24.,  44.,  21.,  32.,
      27.,  40.,  0.,   0.,   11.,  24.,  13.,  28.,  48.,  80.,  56.,  92.,
      64.,  104., 51.,  72.,  57.,  80.,  0.,   0.,   26.,  56.,  38.,  72.,
      120., 192., 152., 232., 184., 272., 130., 176., 150., 200., 0.,   0.,
      86.,  136., 98.,  152., 280., 392., 312., 432., 344., 472., 230., 296.,
      250., 320., 0.,   0.,   146., 216., 158., 232., 440., 592., 472., 632.,
      504., 672., 330., 416., 350., 440., 0.,   0.,   155., 192., 165., 204.,
      392., 472., 416., 500., 440., 528., 259., 304., 273., 320., 0.,   0.,
      205., 252., 215., 264., 512., 612., 536., 640., 560., 668., 329., 384.,
      343., 400., 0.,   0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      330.,   626.,   1004.,  1628.,  1372.,  2060.,  2606.,  3686.,  2316.,
      3068.,  4022.,  5198.,  3260.,  4076.,  3884.,  4764.,  1090.,  1546.,
      2844.,  3788.,  3212.,  4220.,  5846.,  7406.,  4796.,  5868.,  8222.,
      9878.,  6380.,  7516.,  7004.,  8204.,  2219.,  2999.,  5434.,  7042.,
      6370.,  8074.,  11097., 13725., 8746.,  10546., 14661., 17433., 11122.,
      13018., 12442., 14434., 4002.,  4586.,  8668.,  9868.,  9548.,  10812.,
      15350., 17294., 11132., 12460., 17726., 19766., 12716., 14108., 13852.,
      15308., 6587.,  7559.,  14170., 16162., 15874., 17962., 25353., 28557.,
      18250., 20434., 28917., 32265., 20626., 22906., 22714., 25090., 6914.,
      7626.,  14492., 15948., 15884., 17404., 24854., 27182., 17468., 19052.,
      27230., 29654., 19052., 20700., 20700., 22412., 10234., 11106., 21452.,
      23228., 22844., 24684., 35774., 38582., 25068., 26972., 39110., 42014.,
      27292., 29260., 28940., 30972.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    25.,   17.,   53.,   46.,   134.,  102.,  222.,  158.,  310.,
      149.,  233.,  193.,  293.,  0.,    0.,    65.,   165.,  77.,   193.,
      326.,  574.,  382.,  662.,  438.,  750.,  369.,  533.,  413.,  593.,
      0.,    0.,    154.,  386.,  242.,  506.,  828.,  1388., 1068., 1692.,
      1308., 1996., 954.,  1314., 1106., 1498., 0.,    0.,    594.,  986.,
      682.,  1106., 2028., 2908., 2268., 3212., 2508., 3516., 1714., 2234.,
      1866., 2418., 0.,    0.,    1034., 1586., 1122., 1706., 3228., 4428.,
      3468., 4732., 3708., 5036., 2474., 3154., 2626., 3338., 0.,    0.,
      1169., 1461., 1245., 1553., 2982., 3614., 3166., 3830., 3350., 4046.,
      1985., 2341., 2093., 2465., 0.,    0.,    1549., 1921., 1625., 2013.,
      3902., 4694., 4086., 4910., 4270., 5126., 2525., 2961., 2633., 3085.,
      0.,    0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1724.,  3036.,  4120.,  7000.,  7000.,  10392., 11764., 17236., 10392.,
      14296., 16852., 23092., 13784., 18200., 18712., 23640., 7004.,  8572.,
      17880., 22296., 9240.,  12120., 25044., 31284., 11608., 15000., 31668.,
      38676., 13976., 17880., 18904., 23320., 4202.,  6298.,  10180., 14756.,
      13476., 18820., 22622., 30190., 20100., 26212., 30510., 39230., 26724.,
      33604., 28356., 34980., 860.,   2428.,  13784., 18200., 5144.,  8024.,
      22996., 29236., 7512.,  10904., 29620., 36628., 9880.,  13784., 14808.,
      19224., 7594.,  10202., 16964., 22564., 22308., 28676., 27678., 36782.,
      28932., 36068., 35566., 45822., 35556., 43460., 31044., 38692., 7004.,
      8572.,  17880., 22296., 9240.,  12120., 25044., 31284., 11608., 15000.,
      31668., 38676., 13976., 17880., 18904., 23320., 4092.,  5916.,  9880.,
      13784., 12760., 17176., 21300., 27284., 18200., 23128., 27412., 34164.,
      23640., 29080., 23832., 28760.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1132.,
      2316.,  1118.,  1774.,  1454.,  2238.,  0.,     0.,     430.,   1214.,
      510.,   1422.,  2380.,  4332.,  2796.,  5004.,  3212.,  5676.,  2798.,
      4094.,  3134.,  4558.,  0.,     0.,     1020.,  2844.,  1692.,  3772.,
      6104.,  10520., 7960.,  12888., 9816.,  15256., 7292.,  10140., 8476.,
      11580., 0.,     0.,     4380.,  7484.,  5052.,  8412.,  15384., 22360.,
      17240., 24728., 19096., 27096., 13212., 17340., 14396., 18780., 0.,
      0.,     7740.,  12124., 8412.,  13052., 24664., 34200., 26520., 36568.,
      28376., 38936., 19132., 24540., 20316., 25980., 0.,     0.,     9070.,
      11390., 9662.,  12110., 23244., 28268., 24684., 29964., 26124., 31660.,
      15534., 18366., 16382., 19342., 0.,     0.,     12030., 14990., 12622.,
      15710., 30444., 36748., 31884., 38444., 33324., 40140., 19774., 23246.,
      20622., 24222., 0.,     0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      130.,   200.,   274.,   352.,   428.,   576.,   732.,   896.,   604.,
      768.,   940.,   1120.,  1174.,  1432.,  1702.,  1984.,  1068.,  1248.,
      1436.,  1632.,  1870.,  2152.,  2446.,  2752.,  1532.,  1728.,  1932.,
      2144.,  1836.,  2048.,  2268.,  2496.,  490.,   600.,   714.,   832.,
      1308.,  1536.,  1772.,  2016.,  1484.,  1728.,  1980.,  2240.,  2734.,
      3112.,  3502.,  3904.,  2268.,  2528.,  2796.,  3072.,  3910.,  4312.,
      4726.,  5152.,  3052.,  3328.,  3612.,  3904.,  3356.,  3648.,  3948.,
      4256.,  1015.,  1204.,  1399.,  1600.,  2522.,  2912.,  3314.,  3728.,
      2978.,  3392.,  3818.,  4256.,  5229.,  5868.,  6525.,  7200.,  4154.,
      4592.,  5042.,  5504.,  6993.,  7668.,  8361.,  9072.,  5330.,  5792.,
      6266.,  6752.,  5978.,  6464.,  6962.,  7472.,  1930.,  2072.,  2218.,
      2368.,  4188.,  4480.,  4780.,  5088.,  4620.,  4928.,  5244.,  5568.,
      7438.,  7912.,  8398.,  8896.,  5404.,  5728.,  6060.,  6400.,  8614.,
      9112.,  9622.,  10144., 6188.,  6528.,  6876.,  7232.,  6748.,  7104.,
      7468.,  7840.,  3175.,  3412.,  3655.,  3904.,  6842.,  7328.,  7826.,
      8336.,  7682.,  8192.,  8714.,  9248.,  12285., 13068., 13869., 14688.,
      8858.,  9392.,  9938.,  10496., 14049., 14868., 15705., 16560., 10034.,
      10592., 11162., 11744., 11066., 11648., 12242., 12848., 3370.,  3544.,
      3722.,  3904.,  7068.,  7424.,  7788.,  8160.,  7756.,  8128.,  8508.,
      8896.,  12142., 12712., 13294., 13888., 8540.,  8928.,  9324.,  9728.,
      13318., 13912., 14518., 15136., 9324.,  9728.,  10140., 10560., 10140.,
      10560., 10988., 11424., 5010.,  5224.,  5442.,  5664.,  10508., 10944.,
      11388., 11840., 11196., 11648., 12108., 12576., 17542., 18232., 18934.,
      19648., 12300., 12768., 13244., 13728., 19198., 19912., 20638., 21376.,
      13404., 13888., 14380., 14880., 14220., 14720., 15228., 15744.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   5.,    12.,   21.,   32.,   14.,   32.,
      54.,   80.,   38.,   64.,   94.,   128.,  62.,   96.,   134.,  176.,
      65.,   84.,   105.,  128.,  85.,   108.,  133.,  160.,  0.,    0.,
      0.,    0.,    21.,   44.,   69.,   96.,   25.,   52.,   81.,   112.,
      134.,  192.,  254.,  320.,  158.,  224.,  294.,  368.,  182.,  256.,
      334.,  416.,  165.,  204.,  245.,  288.,  185.,  228.,  273.,  320.,
      0.,    0.,    0.,    0.,    50.,   104.,  162.,  224.,  90.,   152.,
      218.,  288.,  348.,  480.,  620.,  768.,  460.,  608.,  764.,  928.,
      572.,  736.,  908.,  1088., 434.,  520.,  610.,  704.,  506.,  600.,
      698.,  800.,  0.,    0.,    0.,    0.,    250.,  344.,  442.,  544.,
      290.,  392.,  498.,  608.,  908.,  1120., 1340., 1568., 1020., 1248.,
      1484., 1728., 1132., 1376., 1628., 1888., 794.,  920.,  1050., 1184.,
      866.,  1000., 1138., 1280., 0.,    0.,    0.,    0.,    450.,  584.,
      722.,  864.,  490.,  632.,  778.,  928.,  1468., 1760., 2060., 2368.,
      1580., 1888., 2204., 2528., 1692., 2016., 2348., 2688., 1154., 1320.,
      1490., 1664., 1226., 1400., 1578., 1760., 0.,    0.,    0.,    0.,
      549.,  620.,  693.,  768.,  585.,  660.,  737.,  816.,  1414., 1568.,
      1726., 1888., 1502., 1664., 1830., 2000., 1590., 1760., 1934., 2112.,
      949.,  1036., 1125., 1216., 1001., 1092., 1185., 1280., 0.,    0.,
      0.,    0.,    729.,  820.,  913.,  1008., 765.,  860.,  957.,  1056.,
      1854., 2048., 2246., 2448., 1942., 2144., 2350., 2560., 2030., 2240.,
      2454., 2672., 1209., 1316., 1425., 1536., 1261., 1372., 1485., 1600.,
      0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      714.,   1010.,  1338.,  1698.,  1732.,  2388.,  3108.,  3892.,  3108.,
      3892.,  4740.,  5652.,  5246.,  6518.,  7886.,  9350.,  4740.,  5652.,
      6628.,  7668.,  7694.,  9158.,  10718., 12374., 6372.,  7412.,  8516.,
      9684.,  8772.,  9940.,  11172., 12468., 3322.,  3682.,  4074.,  4498.,
      8420.,  9460.,  10564., 11732., 4292.,  4948.,  5668.,  6452.,  11790.,
      13254., 14814., 16470., 5412.,  6196.,  7044.,  7956.,  15006., 16662.,
      18414., 20262., 6532.,  7444.,  8420.,  9460.,  8932.,  9972.,  11076.,
      12244., 1863.,  2339.,  2863.,  3435.,  4566.,  5614.,  6758.,  7998.,
      6118.,  7358.,  8694.,  10126., 10437., 12185., 14077., 16113., 9334.,
      10766., 12294., 13918., 14237., 16273., 18453., 20777., 12550., 14174.,
      15894., 17710., 13398., 14958., 16614., 18366., 250.,   610.,   1002.,
      1426.,  6372.,  7412.,  8516.,  9684.,  2244.,  2900.,  3620.,  4404.,
      10766., 12230., 13790., 15446., 3364.,  4148.,  4996.,  5908.,  13982.,
      15638., 17390., 19238., 4484.,  5396.,  6372.,  7412.,  6884.,  7924.,
      9028.,  10196., 3495.,  4099.,  4751.,  5451.,  7830.,  9134.,  10534.,
      12030., 10406., 11902., 13494., 15182., 12773., 14905., 17181., 19601.,
      13622., 15310., 17094., 18974., 16573., 18993., 21557., 24265., 16838.,
      18718., 20694., 22766., 14614., 16430., 18342., 20350., 3322.,  3682.,
      4074.,  4498.,  8420.,  9460.,  10564., 11732., 4292.,  4948.,  5668.,
      6452.,  11790., 13254., 14814., 16470., 5412.,  6196.,  7044.,  7956.,
      15006., 16662., 18414., 20262., 6532.,  7444.,  8420.,  9460.,  8932.,
      9972.,  11076., 12244., 1834.,  2258.,  2714.,  3202.,  4484.,  5396.,
      6372.,  7412.,  5860.,  6900.,  8004.,  9172.,  9950.,  11350., 12846.,
      14438., 8516.,  9684.,  10916., 12212., 12910., 14502., 16190., 17974.,
      11172., 12468., 13828., 15252., 11332., 12500., 13732., 15028.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  0.,     0.,     0.,     0.,     125.,   305.,   501.,   713.,
      149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  1138.,
      1658.,  2210.,  2794.,  1314.,  1898.,  2514.,  3162.,  1245.,  1553.,
      1877.,  2217.,  1397.,  1737.,  2093.,  2465.,  0.,     0.,     0.,
      0.,     298.,   722.,   1178.,  1666.,  602.,   1090.,  1610.,  2162.,
      2532.,  3572.,  4676.,  5844.,  3396.,  4564.,  5796.,  7092.,  4260.,
      5556.,  6916.,  8340.,  3306.,  3986.,  4698.,  5442.,  3866.,  4610.,
      5386.,  6194.,  0.,     0.,     0.,     0.,     1818.,  2562.,  3338.,
      4146.,  2122.,  2930.,  3770.,  4642.,  6852.,  8532.,  10276., 12084.,
      7716.,  9524.,  11396., 13332., 8580.,  10516., 12516., 14580., 6106.,
      7106.,  8138.,  9202.,  6666.,  7730.,  8826.,  9954.,  0.,     0.,
      0.,     0.,     3338.,  4402.,  5498.,  6626.,  3642.,  4770.,  5930.,
      7122.,  11172., 13492., 15876., 18324., 12036., 14484., 16996., 19572.,
      12900., 15476., 18116., 20820., 8906.,  10226., 11578., 12962., 9466.,
      10850., 12266., 13714., 0.,     0.,     0.,     0.,     4253.,  4817.,
      5397.,  5993.,  4533.,  5129.,  5741.,  6369.,  11010., 12234., 13490.,
      14778., 11698., 12986., 14306., 15658., 12386., 13738., 15122., 16538.,
      7421.,  8113.,  8821.,  9545.,  7829.,  8553.,  9293.,  10049., 0.,
      0.,     0.,     0.,     5653.,  6377.,  7117.,  7873.,  5933.,  6689.,
      7461.,  8249.,  14450., 15994., 17570., 19178., 15138., 16746., 18386.,
      20058., 15826., 17498., 19202., 20938., 9461.,  10313., 11181., 12065.,
      9869.,  10753., 11653., 12569., 0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      700.,   2012.,  3580.,  5404.,  3128.,  5240.,  7864.,  11000., 5816.,
      8952.,  12600., 16760., 8244.,  12180., 16884., 22356., 14648., 18808.,
      23480., 28664., 15348., 20820., 27060., 34068., 23480., 28664., 34360.,
      40568., 12600., 16760., 21432., 26616., 380.,   1180.,  2236.,  3548.,
      5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000., 15348.,
      20820., 27060., 34068., 7864.,  11000., 14648., 18808., 28596., 35604.,
      43380., 51924., 12600., 16760., 21432., 26616., 23480., 28664., 34360.,
      40568., 890.,   2602.,  4698.,  7178.,  3668.,  6836.,  10772., 15476.,
      7700.,  12404., 17876., 24116., 11182., 16830., 23630., 31582., 20948.,
      27188., 34196., 41972., 20814., 28766., 37870., 48126., 34196., 41972.,
      50516., 59828., 19924., 26164., 33172., 40948., 380.,   1180.,  2236.,
      3548.,  5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000.,
      15348., 20820., 27060., 34068., 7864.,  11000., 14648., 18808., 28596.,
      35604., 43380., 51924., 12600., 16760., 21432., 26616., 23480., 28664.,
      34360., 40568., 890.,   2602.,  4698.,  7178.,  3668.,  6836.,  10772.,
      15476., 7700.,  12404., 17876., 24116., 11182., 16830., 23630., 31582.,
      20948., 27188., 34196., 41972., 20814., 28766., 37870., 48126., 34196.,
      41972., 50516., 59828., 19924., 26164., 33172., 40948., 380.,   1180.,
      2236.,  3548.,  5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,
      11000., 15348., 20820., 27060., 34068., 7864.,  11000., 14648., 18808.,
      28596., 35604., 43380., 51924., 12600., 16760., 21432., 26616., 23480.,
      28664., 34360., 40568., 700.,   2012.,  3580.,  5404.,  3128.,  5240.,
      7864.,  11000., 5816.,  8952.,  12600., 16760., 8244.,  12180., 16884.,
      22356., 14648., 18808., 23480., 28664., 15348., 20820., 27060., 34068.,
      23480., 28664., 34360., 40568., 12600., 16760., 21432., 26616.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,
      1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  3228.,  5308.,
      7644.,  10236., 3742.,  4910.,  6206.,  7630.,  4926.,  6350.,  7902.,
      9582.,  0.,     0.,     0.,     0.,     830.,   2254.,  3806.,  5486.,
      990.,   2670.,  4478.,  6414.,  7260.,  10876., 14748., 18876., 7324.,
      9404.,  11740., 14332., 8668.,  11260., 14108., 17212., 190.,   590.,
      1118.,  1774.,  1374.,  2030.,  2814.,  3726.,  0.,     0.,     0.,
      0.,     700.,   2012.,  3580.,  5404.,  3068.,  4892.,  6972.,  9308.,
      8504.,  12664., 17336., 22520., 15288., 20472., 26168., 32376., 22072.,
      28280., 35000., 42232., 16316., 19676., 23292., 27164., 20732., 24604.,
      28732., 33116., 0.,     0.,     0.,     0.,     12540., 16412., 20540.,
      24924., 13628., 15964., 18556., 21404., 41144., 48376., 56120., 64376.,
      20792., 24952., 29624., 34808., 27576., 32760., 38456., 44664., 3068.,
      4892.,  6972.,  9308.,  7484.,  9820.,  12412., 15260., 0.,     0.,
      0.,     0.,     5436.,  7772.,  10364., 13212., 7804.,  10652., 13756.,
      17116., 22072., 28280., 35000., 42232., 28856., 36088., 43832., 52088.,
      34360., 40568., 47288., 54520., 25148., 29532., 34172., 39068., 20092.,
      22940., 26044., 29404., 0.,     0.,     0.,     0.,     15806., 18254.,
      20830., 23534., 350.,   1006.,  1790.,  2702.,  25692., 29308., 33180.,
      37308., 5276.,  7356.,  9692.,  12284., 10716., 13308., 16156., 19260.,
      6974.,  8398.,  9950.,  11630., 10206., 11886., 13694., 15630., 0.,
      0.,     0.,     0.,     9182.,  10862., 12670., 14606., 11390., 13326.,
      15390., 17582., 27036., 31164., 35548., 40188., 32476., 37116., 42012.,
      47164., 20252., 23356., 26716., 30332., 23134., 25838., 28670., 31630.,
      510.,   1422.,  2462.,  3630.,  0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24.,  60.,  76.,  133.,  108.,  181.,  140.,  229.,  172.,  200.,
      59.,  140., 156., 268.,  208.,  346.,  260.,  424.,  312.,  340.,
      116., 265., 304., 507.,  382.,  624.,  460.,  741.,  538.,  595.,
      179., 380., 416., 658.,  468.,  736.,  520.,  814.,  572.,  620.,
      296., 625., 694., 1092., 772.,  1209., 850.,  1326., 928.,  1015.,
      299., 620., 676., 1048., 728.,  1126., 780.,  1204., 832.,  900.,
      434., 900., 956., 1483., 1028., 1591., 1100., 1699., 1172., 1240.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   14.,  14.,  19.,  12.,  15.,  0.,   6.,   7.,
      20.,  23.,  44.,  39.,  44.,  27.,  30.,  0.,   15.,  20.,  52.,  64.,
      115., 96.,  112., 66.,  75.,  0.,   40.,  45.,  112., 124., 220., 176.,
      192., 111., 120., 0.,   65.,  70.,  172., 184., 325., 256., 272., 156.,
      165., 0.,   64.,  68.,  152., 161., 266., 197., 208., 114., 120., 0.,
      84.,  88.,  197., 206., 341., 252., 263., 144., 150., 0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      152.,  396.,  516.,  920.,   764.,  1292.,  1012., 1664.,  1260., 1476.,
      412.,  996.,  1116., 1940.,  1524., 2552.,  1932., 3164.,  2340., 2556.,
      823.,  1904., 2204., 3705.,  2816., 4623.,  3428., 5541.,  4040., 4484.,
      1352., 2876., 3156., 5000.,  3564., 5612.,  3972., 6224.,  4380., 4756.,
      2233., 4724., 5264., 8295.,  5876., 9213.,  6488., 10131., 7100., 7784.,
      2292., 4756., 5196., 8060.,  5604., 8672.,  6012., 9284.,  6420., 6956.,
      3352., 6956., 7396., 11480., 7964., 12332., 8532., 13184., 9100., 9636.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,   11.,  28.,   48.,   85.,   92.,   128.,  83.,   105.,  0.,
      35.,  41.,  128.,  148.,  295.,  272.,  308.,  193.,  215.,  0.,
      88.,  124., 340.,  428.,  788.,  676.,  796.,  476.,  544.,  0.,
      268., 304., 780.,  868.,  1568., 1276., 1396., 816.,  884.,  0.,
      448., 484., 1220., 1308., 2348., 1876., 1996., 1156., 1224., 0.,
      473., 503., 1132., 1200., 1993., 1484., 1568., 863.,  909.,  0.,
      623., 653., 1472., 1540., 2563., 1904., 1988., 1093., 1139., 0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1060.,  2840.,  3768.,  6796.,  5720.,  9724.,  7672.,  12652., 9624.,
      11320., 2420.,  6840.,  6104.,  12412., 7288.,  15212., 8472.,  18012.,
      9656.,  11352., 5530.,  12076., 14428., 23262., 17228., 27462., 20028.,
      31662., 22828., 26332., 4740.,  16600., 12024., 26412., 13208., 29212.,
      14392., 32012., 15576., 18552., 11570., 23516., 26764., 40934., 25852.,
      40398., 28652., 44598., 31452., 34828., 7060.,  20600., 11160., 26844.,
      3512.,  19788., 4696.,  22588., 5880.,  8088.,  15460., 21016., 23480.,
      30796., 11992., 19516., 14456., 23212., 16920., 19128.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,   324.,   578.,   660.,   932.,   614.,  782.,  0.,
      230.,  270.,  900.,   1044.,  2138.,  2020.,  2292.,  1454., 1622., 0.,
      580.,  852.,  2424.,  3096.,  5788.,  5048.,  5976.,  3604., 4132., 0.,
      1940., 2212., 5784.,  6456.,  11788., 9688.,  10616., 6244., 6772., 0.,
      3300., 3572., 9144.,  9816.,  17788., 14328., 15256., 8884., 9412., 0.,
      3630., 3862., 8724.,  9252.,  15410., 11508., 12164., 6710., 7070., 0.,
      4790., 5022., 11364., 11892., 19850., 14788., 15444., 8510., 8870., 0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      56.,   96.,   156.,  240.,  212.,  304.,  388.,  532.,  332.,  432.,
      568.,  724.,  452.,  560.,  748.,  916.,  572.,  688.,  676.,  800.,
      176.,  236.,  436.,  560.,  492.,  624.,  868.,  1072., 692.,  832.,
      1168., 1384., 892.,  1040., 1468., 1696., 1092., 1248., 1196., 1360.,
      359.,  464.,  844.,  1060., 988.,  1216., 1677., 2028., 1288., 1528.,
      2127., 2496., 1588., 1840., 2577., 2964., 1888., 2152., 2104., 2380.,
      636.,  716.,  1356., 1520., 1492., 1664., 2368., 2632., 1692., 1872.,
      2668., 2944., 1892., 2080., 2968., 3256., 2092., 2288., 2276., 2480.,
      1049., 1184., 2224., 2500., 2488., 2776., 3927., 4368., 2788., 3088.,
      4377., 4836., 3088., 3400., 4827., 5304., 3388., 3712., 3724., 4060.,
      1096., 1196., 2276., 2480., 2492., 2704., 3868., 4192., 2692., 2912.,
      4168., 4504., 2892., 3120., 4468., 4816., 3092., 3328., 3356., 3600.,
      1616., 1736., 3356., 3600., 3572., 3824., 5548., 5932., 3852., 4112.,
      5968., 6364., 4132., 4400., 6388., 6796., 4412., 4688., 4676., 4960.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,   8.,    8.,   20.,   16.,  32.,   29.,   56.,  36.,
      56.,   52.,   76.,  35.,   48.,  45.,   60.,  0.,    0.,    11.,  24.,
      13.,   28.,   48.,  80.,   56.,  92.,   119., 176.,  116.,  156., 132.,
      176.,  85.,   108., 95.,   120., 0.,    0.,   28.,   60.,   44.,  80.,
      132.,  208.,  172., 256.,  328., 460.,  292., 384.,  348.,  448., 212.,
      264.,  244.,  300., 0.,    0.,   108.,  160., 124.,  180.,  332., 448.,
      372.,  496.,  688., 880.,  572., 704.,  628., 768.,  372.,  444., 404.,
      480.,  0.,    0.,   188.,  260., 204.,  280., 532.,  688.,  572., 736.,
      1048., 1300., 852., 1024., 908., 1088., 532., 624.,  564.,  660., 0.,
      0.,    217.,  256., 231.,  272., 524.,  608., 556.,  644.,  929., 1064.,
      696.,  788.,  736., 832.,  407., 456.,  429., 480.,  0.,    0.,   287.,
      336.,  301.,  352., 684.,  788., 716.,  824., 1199., 1364., 896., 1008.,
      936.,  1052., 517., 576.,  539., 600.,  0.,   0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      374.,   686.,   1092.,  1748.,  1524.,  2244.,  2834.,  3962.,  2468.,
      3252.,  4250.,  5474.,  3412.,  4260.,  5666.,  6986.,  4356.,  5268.,
      5172.,  6148.,  1294.,  1766.,  3252.,  4228.,  3684.,  4724.,  6554.,
      8162.,  5268.,  6372.,  8930.,  10634., 6852.,  8020.,  11306., 13106.,
      8436.,  9668.,  9252.,  10548., 2671.,  3499.,  6338.,  8042.,  7466.,
      9266.,  12741., 15513., 9842.,  11738., 16305., 19221., 12218., 14210.,
      19869., 22929., 14594., 16682., 16298., 18482., 4934.,  5566.,  10532.,
      11828., 11604., 12964., 18434., 20522., 13188., 14612., 20810., 22994.,
      14772., 16260., 23186., 25466., 16356., 17908., 17812., 19428., 8131.,
      9199.,  17258., 19442., 19346., 21626., 30561., 34053., 21722., 24098.,
      34125., 37761., 24098., 26570., 37689., 41469., 26474., 29042., 29138.,
      31802., 8574.,  9366.,  17812., 19428., 19524., 21204., 30314., 32882.,
      21108., 22852., 32690., 35354., 22692., 24500., 35066., 37826., 24276.,
      26148., 26372., 28308., 12694., 13646., 26372., 28308., 28084., 30084.,
      43634., 46682., 30308., 32372., 46970., 50114., 32532., 34660., 50306.,
      53546., 34756., 36948., 36852., 39108.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    25.,   17.,   53.,   46.,   134.,  102.,  222.,  187.,  391.,
      254.,  406.,  374.,  558.,  257.,  357.,  333.,  449.,  0.,    0.,
      65.,   165.,  77.,   193.,  326.,  574.,  382.,  662.,  847.,  1291.,
      854.,  1166., 974.,  1318., 637.,  817.,  713.,  909.,  0.,    0.,
      166.,  414.,  286.,  566.,  916.,  1508., 1220., 1876., 2378., 3410.,
      2164., 2884., 2596., 3380., 1598., 2006., 1846., 2286., 0.,    0.,
      766.,  1174., 886.,  1326., 2436., 3348., 2740., 3716., 5138., 6650.,
      4324., 5364., 4756., 5860., 2838., 3406., 3086., 3686., 0.,    0.,
      1366., 1934., 1486., 2086., 3956., 5188., 4260., 5556., 7898., 9890.,
      6484., 7844., 6916., 8340., 4078., 4806., 4326., 5086., 0.,    0.,
      1661., 1969., 1769., 2093., 4030., 4694., 4278., 4974., 7171., 8239.,
      5390., 6118., 5702., 6462., 3161., 3549., 3333., 3737., 0.,    0.,
      2201., 2589., 2309., 2713., 5270., 6094., 5518., 6374., 9271., 10579.,
      6950., 7838., 7262., 8182., 4021., 4489., 4193., 4677., 0.,    0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2060.,  3500.,  4792.,  7928.,  8184.,  11832., 13540., 19396., 11576.,
      15736., 17988., 23588., 12280., 15928., 18340., 23684., 8888.,  12024.,
      11256., 14904., 8620.,  10316., 21112., 25784., 10936., 14072., 28612.,
      35236., 13304., 16952., 24356., 30724., 2744.,  5880.,  16004., 22116.,
      4472.,  7096.,  6840.,  9976.,  5722.,  8202.,  13220., 18564., 18052.,
      24164., 29486., 38206., 24676., 31556., 32638., 41486., 24516., 31140.,
      31694., 40670., 20260., 26628., 18820., 24932., 4172.,  6124.,  22456.,
      27640., 9208.,  12856., 33188., 40580., 11576., 15736., 24836., 31972.,
      13304., 16952., 28772., 35652., 10936., 14072., 14328., 17976., 11658.,
      15034., 24452., 30564., 30820., 37700., 37054., 46414., 30660., 37284.,
      27278., 35742., 26404., 32772., 22238., 30830., 18052., 24164., 22244.,
      28100., 12012., 14220., 21112., 25784., 2744.,  5880.,  16004., 22116.,
      4472.,  7096.,  19940., 25796., 6840.,  9976.,  26564., 33188., 9208.,
      12856., 13624., 17784., 9356.,  11820., 15672., 19832., 19064., 23736.,
      23268., 29124., 13624., 17784., 16452., 22052., 19064., 23736., 22564.,
      28932., 24504., 29688., 18040., 22712.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1322.,
      2906.,  1900.,  3084.,  2828.,  4268.,  1966.,  2750.,  2558.,  3470.,
      0.,     0.,     430.,   1214.,  510.,   1422.,  2380.,  4332.,  2796.,
      5004.,  6362.,  9866.,  6540.,  9004.,  7468.,  10188., 4926.,  6350.,
      5518.,  7070.,  0.,     0.,     1100.,  3052.,  2028.,  4236.,  6776.,
      11448., 9144.,  14328., 18052., 26212., 16632., 22328., 20024., 26232.,
      12396., 15628., 14348., 17836., 0.,     0.,     5740.,  8972.,  5388.,
      6828.,  17336., 22520., 14328., 17976., 32996., 40900., 18744., 22904.,
      22136., 26808., 12684., 15148., 14636., 17356., 0.,     0.,     9100.,
      11564., 10028., 12748., 23800., 29496., 26168., 32376., 45124., 54820.,
      35704., 42424., 39096., 46328., 22444., 26188., 24396., 28396., 0.,
      0.,     12990., 15438., 270.,   798.,   18028., 21260., 2316.,  3756.,
      25098., 29498., 2988.,  4684.,  5452.,  7404.,  3150.,  4190.,  4510.,
      5678.,  0.,     0.,     3662.,  4702.,  4510.,  5678.,  10124., 12588.,
      12076., 14796., 19898., 24170., 15308., 18284., 17772., 21004., 9950.,
      11630., 11310., 13118., 0.,     0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      150.,   224.,   302.,   384.,   468.,   624.,   788.,   960.,   676.,
      848.,   1028.,  1216.,  1282.,  1552.,  1834.,  2128.,  1140.,  1328.,
      1524.,  1728.,  1978.,  2272.,  2578.,  2896.,  1604.,  1808.,  2020.,
      2240.,  2674.,  2992.,  3322.,  3664.,  2068.,  2288.,  2516.,  2752.,
      2468.,  2704.,  2948.,  3200.,  590.,   704.,   822.,   944.,   1508.,
      1744.,  1988.,  2240.,  1716.,  1968.,  2228.,  2496.,  3082.,  3472.,
      3874.,  4288.,  2500.,  2768.,  3044.,  3328.,  4258.,  4672.,  5098.,
      5536.,  3284.,  3568.,  3860.,  4160.,  5434.,  5872.,  6322.,  6784.,
      4068.,  4368.,  4676.,  4992.,  4468.,  4784.,  5108.,  5440.,  1235.,
      1436.,  1643.,  1856.,  2962.,  3376.,  3802.,  4240.,  3514.,  3952.,
      4402.,  4864.,  6033.,  6708.,  7401.,  8112.,  4690.,  5152.,  5626.,
      6112.,  7797.,  8508.,  9237.,  9984.,  5866.,  6352.,  6850.,  7360.,
      9561.,  10308., 11073., 11856., 7042.,  7552.,  8074.,  8608.,  7882.,
      8416.,  8962.,  9520.,  2390.,  2544.,  2702.,  2864.,  5108.,  5424.,
      5748.,  6080.,  5636.,  5968.,  6308.,  6656.,  8962.,  9472.,  9994.,
      10528., 6420.,  6768.,  7124.,  7488.,  10138., 10672., 11218., 11776.,
      7204.,  7568.,  7940.,  8320.,  11314., 11872., 12442., 13024., 7988.,
      8368.,  8756.,  9152.,  8708.,  9104.,  9508.,  9920.,  3935.,  4196.,
      4463.,  4736.,  8362.,  8896.,  9442.,  10000., 9394.,  9952.,  10522.,
      11104., 14853., 15708., 16581., 17472., 10570., 11152., 11746., 12352.,
      16617., 17508., 18417., 19344., 11746., 12352., 12970., 13600., 18381.,
      19308., 20253., 21216., 12922., 13552., 14194., 14848., 14242., 14896.,
      15562., 16240., 4190.,  4384.,  4582.,  4784.,  8708.,  9104.,  9508.,
      9920.,  9556.,  9968.,  10388., 10816., 14842., 15472., 16114., 16768.,
      10340., 10768., 11204., 11648., 16018., 16672., 17338., 18016., 11124.,
      11568., 12020., 12480., 17194., 17872., 18562., 19264., 11908., 12368.,
      12836., 13312., 12948., 13424., 13908., 14400., 6230.,  6464.,  6702.,
      6944.,  12948., 13424., 13908., 14400., 13796., 14288., 14788., 15296.,
      21442., 22192., 22954., 23728., 14900., 15408., 15924., 16448., 23098.,
      23872., 24658., 25456., 16004., 16528., 17060., 17600., 24754., 25552.,
      26362., 27184., 17108., 17648., 18196., 18752., 18148., 18704., 19268.,
      19840.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   5.,    12.,   21.,   32.,   14.,   32.,
      54.,   80.,   38.,   64.,   94.,   128.,  71.,   116.,  167.,  224.,
      110.,  144.,  182.,  224.,  166.,  208.,  254.,  304.,  117.,  140.,
      165.,  192.,  153.,  180.,  209.,  240.,  0.,    0.,    0.,    0.,
      21.,   44.,   69.,   96.,   25.,   52.,   81.,   112.,  134.,  192.,
      254.,  320.,  158.,  224.,  294.,  368.,  371.,  476.,  587.,  704.,
      390.,  464.,  542.,  624.,  446.,  528.,  614.,  704.,  297.,  340.,
      385.,  432.,  333.,  380.,  429.,  480.,  0.,    0.,    0.,    0.,
      54.,   112.,  174.,  240.,  110.,  176.,  246.,  320.,  388.,  528.,
      676.,  832.,  532.,  688.,  852.,  1024., 1066., 1312., 1570., 1840.,
      996.,  1168., 1348., 1536., 1204., 1392., 1588., 1792., 750.,  848.,
      950.,  1056., 870.,  976.,  1086., 1200., 0.,    0.,    0.,    0.,
      334.,  432.,  534.,  640.,  390.,  496.,  606.,  720.,  1108., 1328.,
      1556., 1792., 1252., 1488., 1732., 1984., 2386., 2752., 3130., 3520.,
      2036., 2288., 2548., 2816., 2244., 2512., 2788., 3072., 1350., 1488.,
      1630., 1776., 1470., 1616., 1766., 1920., 0.,    0.,    0.,    0.,
      614.,  752.,  894.,  1040., 670.,  816.,  966.,  1120., 1828., 2128.,
      2436., 2752., 1972., 2288., 2612., 2944., 3706., 4192., 4690., 5200.,
      3076., 3408., 3748., 4096., 3284., 3632., 3988., 4352., 1950., 2128.,
      2310., 2496., 2070., 2256., 2446., 2640., 0.,    0.,    0.,    0.,
      793.,  868.,  945.,  1024., 845.,  924.,  1005., 1088., 1934., 2096.,
      2262., 2432., 2054., 2224., 2398., 2576., 3455., 3716., 3983., 4256.,
      2606., 2784., 2966., 3152., 2758., 2944., 3134., 3328., 1533., 1628.,
      1725., 1824., 1617., 1716., 1817., 1920., 0.,    0.,    0.,    0.,
      1053., 1148., 1245., 1344., 1105., 1204., 1305., 1408., 2534., 2736.,
      2942., 3152., 2654., 2864., 3078., 3296., 4475., 4796., 5123., 5456.,
      3366., 3584., 3806., 4032., 3518., 3744., 3974., 4208., 1953., 2068.,
      2185., 2304., 2037., 2156., 2277., 2400., 0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      866.,   1194.,  1554.,  1946.,  2036.,  2756.,  3540.,  4388.,  3668.,
      4516.,  5428.,  6404.,  6086.,  7454.,  8918.,  10478., 5300.,  6276.,
      7316.,  8420.,  8342.,  9646.,  11046., 12542., 5716.,  6564.,  7476.,
      8452.,  8550.,  9790.,  11126., 12558., 4084.,  4804.,  5588.,  6436.,
      5204.,  6052.,  6964.,  7940.,  4114.,  4506.,  4930.,  5386.,  10004.,
      11108., 12276., 13508., 5108.,  5828.,  6612.,  7460.,  13526., 15086.,
      16742., 18494., 6228.,  7076.,  7988.,  8964.,  11430., 12926., 14518.,
      16206., 1012.,  1732.,  2516.,  3364.,  7286.,  8718.,  10246., 11870.,
      1940.,  2532.,  3188.,  3908.,  3060.,  3780.,  4564.,  5412.,  2575.,
      3147.,  3767.,  4435.,  5990.,  7230.,  8566.,  9998.,  8310.,  9742.,
      11270., 12894., 13725., 15761., 17941., 20265., 11526., 13150., 14870.,
      16686., 15285., 17353., 19565., 21921., 11478., 13038., 14694., 16446.,
      14797., 16897., 19141., 21529., 9382.,  10878., 12470., 14158., 8694.,
      10126., 11654., 13278., 1858.,  2314.,  2802.,  3322.,  10612., 11844.,
      13140., 14500., 4180.,  5028.,  5940.,  6916.,  15718., 17470., 19318.,
      21262., 5300.,  6276.,  7316.,  8420.,  11574., 13262., 15046., 16926.,
      6228.,  7076.,  7988.,  8964.,  13574., 15198., 16918., 18734., 5108.,
      5828.,  6612.,  7460.,  6740.,  7588.,  8500.,  9476.,  5431.,  6227.,
      7071.,  7963.,  11510., 12942., 14470., 16094., 14598., 16222., 17942.,
      19758., 17429., 19625., 21965., 24449., 14550., 16110., 17766., 19518.,
      12653., 14625., 16741., 19001., 12454., 13950., 15542., 17230., 10117.,
      12121., 14269., 16561., 8310.,  9742.,  11270., 12894., 10438., 11806.,
      13270., 14830., 5746.,  6266.,  6818.,  7402.,  10004., 11108., 12276.,
      13508., 1012.,  1732.,  2516.,  3364.,  7286.,  8718.,  10246., 11870.,
      1940.,  2532.,  3188.,  3908.,  9286.,  10654., 12118., 13678., 3060.,
      3780.,  4564.,  5412.,  12502., 14062., 15718., 17470., 4180.,  5028.,
      5940.,  6916.,  6324.,  7300.,  8340.,  9444.,  4386.,  4970.,  5586.,
      6234.,  7348.,  8324.,  9364.,  10468., 8980.,  10084., 11252., 12484.,
      10950., 12318., 13782., 15342., 6324.,  7300.,  8340.,  9444.,  7574.,
      8878.,  10278., 11774., 8980.,  10084., 11252., 12484., 10534., 12030.,
      13622., 15310., 11636., 12868., 14164., 15524., 8468.,  9572.,  10740.,
      11972.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   487.,   835.,
      1231.,  1675.,  818.,   1082.,  1378.,  1706.,  1250.,  1578.,  1938.,
      2330.,  893.,   1073.,  1269.,  1481.,  1173.,  1385.,  1613.,  1857.,
      0.,     0.,     0.,     0.,     125.,   305.,   501.,   713.,   149.,
      361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  1138.,  1658.,
      2210.,  2794.,  2767.,  3595.,  4471.,  5395.,  2978.,  3562.,  4178.,
      4826.,  3410.,  4058.,  4738.,  5450.,  2293.,  2633.,  2989.,  3361.,
      2573.,  2945.,  3333.,  3737.,  0.,     0.,     0.,     0.,     322.,
      778.,   1266.,  1786.,  754.,   1274.,  1826.,  2410.,  2836.,  3940.,
      5108.,  6340.,  3956.,  5188.,  6484.,  7844.,  8054.,  9998.,  12038.,
      14174., 7636.,  8996.,  10420., 11908., 9268.,  10756., 12308., 13924.,
      5810.,  6586.,  7394.,  8234.,  6754.,  7594.,  8466.,  9370.,  0.,
      0.,     0.,     0.,     2482.,  3258.,  4066.,  4906.,  2914.,  3754.,
      4626.,  5530.,  8436.,  10180., 11988., 13860., 9556.,  11428., 13364.,
      15364., 18374., 21278., 24278., 27374., 15796., 17796., 19860., 21988.,
      17428., 19556., 21748., 24004., 10530., 11626., 12754., 13914., 11474.,
      12634., 13826., 15050., 0.,     0.,     0.,     0.,     4642.,  5738.,
      6866.,  8026.,  5074.,  6234.,  7426.,  8650.,  14036., 16420., 18868.,
      21380., 15156., 17668., 20244., 22884., 28694., 32558., 36518., 40574.,
      23956., 26596., 29300., 32068., 25588., 28356., 31188., 34084., 15250.,
      16666., 18114., 19594., 16194., 17674., 19186., 20730., 0.,     0.,
      0.,     0.,     6197.,  6793.,  7405.,  8033.,  6605.,  7233.,  7877.,
      8537.,  15154., 16442., 17762., 19114., 16098., 17450., 18834., 20250.,
      27127., 29203., 31327., 33499., 20498., 21914., 23362., 24842., 21698.,
      23178., 24690., 26234., 12077., 12833., 13605., 14393., 12741., 13529.,
      14333., 15153., 0.,     0.,     0.,     0.,     8237.,  8993.,  9765.,
      10553., 8645.,  9433.,  10237., 11057., 19874., 21482., 23122., 24794.,
      20818., 22490., 24194., 25930., 35167., 37723., 40327., 42979., 26498.,
      28234., 30002., 31802., 27698., 29498., 31330., 33194., 15397., 16313.,
      17245., 18193., 16061., 17009., 17973., 18953., 0.,     0.,     0.,
      0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1884.,  3452.,  5276.,  7356.,  5496.,  8120.,  11256., 14904., 10232.,
      13880., 18040., 22712., 10772., 15476., 20948., 27188., 19064., 23736.,
      28920., 34616., 17236., 22452., 28436., 35188., 23160., 27832., 33016.,
      38712., 6676.,  11380., 16852., 23092., 6136.,  9784.,  13944., 18616.,
      9592.,  12216., 15352., 19000., 2588.,  3644.,  4956.,  6524.,  10232.,
      13880., 18040., 22712., 5496.,  8120.,  11256., 14904., 20948., 27188.,
      34196., 41972., 10232., 13880., 18040., 22712., 29460., 36212., 43732.,
      52020., 6136.,  9784.,  13944., 18616., 16852., 23092., 30100., 37876.,
      9592.,  12216., 15352., 19000., 14328., 17976., 22136., 26808., 6490.,
      8970.,  11834., 15082., 10772., 15476., 20948., 27188., 20948., 27188.,
      34196., 41972., 20174., 27102., 35182., 44414., 29460., 36212., 43732.,
      52020., 12142., 19326., 27662., 37150., 16852., 23092., 30100., 37876.,
      19854., 26270., 33838., 42558., 20628., 26356., 32852., 40116., 6356.,
      10548., 15508., 21236., 4956.,  6524.,  8348.,  10428., 19064., 23736.,
      28920., 34616., 10232., 13880., 18040., 22712., 29460., 36212., 43732.,
      52020., 6136.,  9784.,  13944., 18616., 16852., 23092., 30100., 37876.,
      9592.,  12216., 15352., 19000., 20628., 26356., 32852., 40116., 5496.,
      8120.,  11256., 14904., 10232., 13880., 18040., 22712., 12090., 15338.,
      18970., 22986., 17236., 22452., 28436., 35188., 29460., 36212., 43732.,
      52020., 12142., 19326., 27662., 37150., 16852., 23092., 30100., 37876.,
      19854., 26270., 33838., 42558., 20628., 26356., 32852., 40116., 11822.,
      18494., 26318., 35294., 20948., 27188., 34196., 41972., 12820., 17524.,
      22996., 29236., 7324.,  9404.,  11740., 14332., 23160., 27832., 33016.,
      38712., 6136.,  9784.,  13944., 18616., 16852., 23092., 30100., 37876.,
      9592.,  12216., 15352., 19000., 20628., 26356., 32852., 40116., 5496.,
      8120.,  11256., 14904., 20948., 27188., 34196., 41972., 10232., 13880.,
      18040., 22712., 19064., 23736., 28920., 34616., 12764., 15356., 18204.,
      21308., 6136.,  9784.,  13944., 18616., 14968., 19640., 24824., 30520.,
      16916., 21620., 27092., 33332., 14328., 17976., 22136., 26808., 6356.,
      10548., 15508., 21236., 10232., 13880., 18040., 22712., 12820., 17524.,
      22996., 29236., 19064., 23736., 28920., 34616., 10232., 13880., 18040.,
      22712.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,
      1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2938.,  4650.,
      6746.,  9226.,  6300.,  8380.,  10716., 13308., 4956.,  6524.,  8348.,
      10428., 6974.,  8398.,  9950.,  11630., 350.,   1006.,  1790.,  2702.,
      0.,     0.,     0.,     0.,     190.,   590.,   1118.,  1774.,  350.,
      1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,
      4956.,  6524.,  6490.,  8970.,  11834., 15082., 4956.,  6524.,  8348.,
      10428., 8348.,  10428., 12764., 15356., 350.,   1006.,  1790.,  2702.,
      2558.,  3470.,  4510.,  5678.,  0.,     0.,     0.,     0.,     860.,
      2428.,  4252.,  6332.,  4252.,  6332.,  8668.,  11260., 9592.,  12216.,
      15352., 19000., 14328., 17976., 22136., 26808., 6356.,  10548., 15508.,
      21236., 10232., 13880., 18040., 22712., 5496.,  8120.,  11256., 14904.,
      6300.,  8380.,  10716., 13308., 4956.,  6524.,  8348.,  10428., 0.,
      0.,     0.,     0.,     4252.,  6332.,  8668.,  11260., 7004.,  8572.,
      10396., 12476., 14328., 17976., 22136., 26808., 1400.,  4024.,  7160.,
      10808., 14484., 20212., 26708., 33972., 5496.,  8120.,  11256., 14904.,
      10232., 13880., 18040., 22712., 4956.,  6524.,  8348.,  10428., 8348.,
      10428., 12764., 15356., 0.,     0.,     0.,     0.,     7004.,  8572.,
      10396., 12476., 10396., 12476., 14812., 17404., 1400.,  4024.,  7160.,
      10808., 6136.,  9784.,  13944., 18616., 12500., 16692., 21652., 27380.,
      10232., 13880., 18040., 22712., 5496.,  8120.,  11256., 14904., 8348.,
      10428., 12764., 15356., 2908.,  4476.,  6300.,  8380.,  0.,     0.,
      0.,     0.,     10206., 11886., 13694., 15630., 510.,   1422.,  2462.,
      3630.,  4252.,  6332.,  8668.,  11260., 7004.,  8572.,  10396., 12476.,
      14138., 17386., 21018., 25034., 540.,   1596.,  2908.,  4476.,  1884.,
      3452.,  5276.,  7356.,  2558.,  3470.,  4510.,  5678.,  3742.,  4910.,
      6206.,  7630.,  0.,     0.,     0.,     0.,     510.,   1422.,  2462.,
      3630.,  3742.,  4910.,  6206.,  7630.,  7004.,  8572.,  10396., 12476.,
      10396., 12476., 14812., 17404., 1050.,  3018.,  5370.,  8106.,  1884.,
      3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  3742.,  4910.,
      6206.,  7630.,  190.,   590.,   1118.,  1774.,  0.,     0.,     0.,
      0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20.,  23.,  44.,  39.,   68.,  55.,   62.,  56.,  70.,  124., 102., 172.,
      134., 156., 126., 140.,  244., 192.,  322., 244., 266., 233., 266., 450.,
      344., 567., 422., 467.,  318., 348.,  556., 400., 634., 452., 490., 521.,
      578., 918., 656., 1035., 734., 803.,  510., 556., 868., 608., 946., 660.,
      714., 740., 786., 1228., 858., 1336., 930., 984.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11., 8.,  10.,  6.,   7.,   20.,  23.,  26.,
      18.,  20.,  14.,  18.,  48., 58., 68.,  44.,  50.,  34.,  38.,  98.,
      108., 118., 74.,  80.,  54., 58., 148., 158., 168., 104., 110., 48.,
      51.,  118., 125., 132., 76., 80., 63.,  66.,  153., 160., 167., 96.,
      100., 0.,   0.,   0.,   0.,  0.,  0.,   0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      128.,  148.,  295.,  272.,   481.,  396.,  448.,  368.,  472.,  854.,
      720.,  1226., 968.,  1136.,  888.,  992.,  1754., 1400., 2366., 1808.,
      1976., 1660., 1912., 3267.,  2524., 4185., 3136., 3484., 2392., 2624.,
      4202., 3032., 4814., 3440.,  3736., 3916., 4360., 6939., 4972., 7857.,
      5584., 6124., 3896., 4256.,  6650., 4664., 7262., 5072., 5496., 5696.,
      6056., 9470., 6624., 10322., 7192., 7616.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,  68.,   53.,   67.,   35.,  41.,  128.,
      148.,  168.,  123.,  137., 82.,   110.,  312.,  384., 456., 306.,
      350.,  222.,  250.,  672., 744.,  816.,  526.,  570., 362., 390.,
      1032., 1104., 1176., 746., 790.,  347.,  369.,  864., 916., 968.,
      563.,  593.,  457.,  479., 1124., 1176., 1228., 713., 743., 0.,
      0.,    0.,    0.,    0.,   0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      900.,   1044.,  2138.,  2020.,  3602.,  2996.,  3396.,  2632.,
      3432.,  6292.,  5384.,  9220.,  7336.,  8648.,  5992.,  5128.,
      10948., 6312.,  13748., 7496.,  8808.,  10172., 12140., 19830.,
      14940., 24030., 17740., 20476., 13800., 9864.,  22148., 11048.,
      24948., 12232., 14568., 19836., 23340., 36630., 26140., 40830.,
      28940., 33212., 21608., 14600., 33348., 15784., 36148., 16968.,
      20328., 25992., 28840., 44788., 31304., 48484., 33768., 37128.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,  324.,  468.,  382.,  486.,  230.,  270.,  900.,
      1044., 1188., 902.,  1006., 540.,  748.,  2216., 2760., 3304., 2268.,
      2604., 1580., 1788., 4936., 5480., 6024., 3948., 4284., 2620., 2828.,
      7656., 8200., 8744., 5628., 5964., 2630., 2798., 6596., 6996., 7396.,
      4326., 4558., 3470., 3638., 8596., 8996., 9396., 5486., 5718., 0.,
      0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48.,   80.,   56.,   92.,   119.,  176.,  116.,  156.,  209.,  272.,
      176.,  220.,  200.,  248.,  144.,  224.,  192.,  280.,  358.,  496.,
      312.,  408.,  538.,  688.,  432.,  536.,  512.,  624.,  384.,  504.,
      432.,  560.,  778.,  976.,  632.,  768.,  1078., 1288., 832.,  976.,
      912.,  1064., 728.,  932.,  848.,  1064., 1467., 1800., 1148., 1376.,
      1917., 2268., 1448., 1688., 1616., 1868., 1120., 1272., 1232., 1392.,
      1978., 2224., 1432., 1600., 2278., 2536., 1632., 1808., 1776., 1960.,
      1832., 2084., 2048., 2312., 3267., 3672., 2348., 2624., 3717., 4140.,
      2648., 2936., 2912., 3212., 1856., 2040., 2032., 2224., 3178., 3472.,
      2232., 2432., 3478., 3784., 2432., 2640., 2640., 2856., 2736., 2960.,
      2912., 3144., 4558., 4912., 3192., 3432., 4978., 5344., 3472., 3720.,
      3680., 3936.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   3.,   8.,   8.,   20.,  16.,  32.,  24.,  44.,  21.,  32.,
      27.,  40.,  11.,  24.,  13.,  28.,  48.,  80.,  56.,  92.,  64.,  104.,
      51.,  72.,  57.,  80.,  26.,  56.,  38.,  72.,  120., 192., 152., 232.,
      184., 272., 130., 176., 150., 200., 86.,  136., 98.,  152., 280., 392.,
      312., 432., 344., 472., 230., 296., 250., 320., 146., 216., 158., 232.,
      440., 592., 472., 632., 504., 672., 330., 416., 350., 440., 155., 192.,
      165., 204., 392., 472., 416., 500., 440., 528., 259., 304., 273., 320.,
      205., 252., 215., 264., 512., 612., 536., 640., 560., 668., 329., 384.,
      343., 400., 0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      326.,   574.,   382.,   662.,   847.,   1291.,  854.,   1166.,  1555.,
      2047.,  1326.,  1670.,  1510.,  1886.,  1004.,  1628.,  1372.,  2060.,
      2606.,  3686.,  2316.,  3068.,  4022.,  5198.,  3260.,  4076.,  3884.,
      4764.,  2844.,  3788.,  3212.,  4220.,  5846.,  7406.,  4796.,  5868.,
      8222.,  9878.,  6380.,  7516.,  7004.,  8204.,  5434.,  7042.,  6370.,
      8074.,  11097., 13725., 8746.,  10546., 14661., 17433., 11122., 13018.,
      12442., 14434., 8668.,  9868.,  9548.,  10812., 15350., 17294., 11132.,
      12460., 17726., 19766., 12716., 14108., 13852., 15308., 14170., 16162.,
      15874., 17962., 25353., 28557., 18250., 20434., 28917., 32265., 20626.,
      22906., 22714., 25090., 14492., 15948., 15884., 17404., 24854., 27182.,
      17468., 19052., 27230., 29654., 19052., 20700., 20700., 22412., 21452.,
      23228., 22844., 24684., 35774., 38582., 25068., 26972., 39110., 42014.,
      27292., 29260., 28940., 30972.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    25.,   17.,   53.,   46.,   134.,  102.,  222.,  158.,  310.,
      149.,  233.,  193.,  293.,  65.,   165.,  77.,   193.,  326.,  574.,
      382.,  662.,  438.,  750.,  369.,  533.,  413.,  593.,  154.,  386.,
      242.,  506.,  828.,  1388., 1068., 1692., 1308., 1996., 954.,  1314.,
      1106., 1498., 594.,  986.,  682.,  1106., 2028., 2908., 2268., 3212.,
      2508., 3516., 1714., 2234., 1866., 2418., 1034., 1586., 1122., 1706.,
      3228., 4428., 3468., 4732., 3708., 5036., 2474., 3154., 2626., 3338.,
      1169., 1461., 1245., 1553., 2982., 3614., 3166., 3830., 3350., 4046.,
      1985., 2341., 2093., 2465., 1549., 1921., 1625., 2013., 3902., 4694.,
      4086., 4910., 4270., 5126., 2525., 2961., 2633., 3085., 0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2380.,  4332.,  2156.,  3340.,  5722.,  8202.,  3852.,  5292.,  9290.,
      12154., 5548.,  7244.,  6988.,  8940.,  4120.,  7000.,  7000.,  10392.,
      11764., 17236., 10392., 14296., 16852., 23092., 13784., 18200., 18712.,
      23640., 17880., 22296., 9240.,  12120., 25044., 31284., 11608., 15000.,
      31668., 38676., 13976., 17880., 18904., 23320., 10180., 14756., 13476.,
      18820., 22622., 30190., 20100., 26212., 30510., 39230., 26724., 33604.,
      28356., 34980., 13784., 18200., 5144.,  8024.,  22996., 29236., 7512.,
      10904., 29620., 36628., 9880.,  13784., 14808., 19224., 16964., 22564.,
      22308., 28676., 27678., 36782., 28932., 36068., 35566., 45822., 35556.,
      43460., 31044., 38692., 17880., 22296., 9240.,  12120., 25044., 31284.,
      11608., 15000., 31668., 38676., 13976., 17880., 18904., 23320., 9880.,
      13784., 12760., 17176., 21300., 27284., 18200., 23128., 27412., 34164.,
      23640., 29080., 23832., 28760.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1132.,
      2316.,  1118.,  1774.,  1454.,  2238.,  430.,   1214.,  510.,   1422.,
      2380.,  4332.,  2796.,  5004.,  3212.,  5676.,  2798.,  4094.,  3134.,
      4558.,  1020.,  2844.,  1692.,  3772.,  6104.,  10520., 7960.,  12888.,
      9816.,  15256., 7292.,  10140., 8476.,  11580., 4380.,  7484.,  5052.,
      8412.,  15384., 22360., 17240., 24728., 19096., 27096., 13212., 17340.,
      14396., 18780., 7740.,  12124., 8412.,  13052., 24664., 34200., 26520.,
      36568., 28376., 38936., 19132., 24540., 20316., 25980., 9070.,  11390.,
      9662.,  12110., 23244., 28268., 24684., 29964., 26124., 31660., 15534.,
      18366., 16382., 19342., 12030., 14990., 12622., 15710., 30444., 36748.,
      31884., 38444., 33324., 40140., 19774., 23246., 20622., 24222., 0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      134.,   192.,   254.,   320.,   158.,   224.,   294.,   368.,   371.,
      476.,   587.,   704.,   390.,   464.,   542.,   624.,   719.,   836.,
      959.,   1088.,  622.,   704.,   790.,   880.,   710.,   800.,   894.,
      992.,   428.,   576.,   732.,   896.,   604.,   768.,   940.,   1120.,
      1174.,  1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,
      2152.,  2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,
      2268.,  2496.,  1308.,  1536.,  1772.,  2016.,  1484.,  1728.,  1980.,
      2240.,  2734.,  3112.,  3502.,  3904.,  2268.,  2528.,  2796.,  3072.,
      3910.,  4312.,  4726.,  5152.,  3052.,  3328.,  3612.,  3904.,  3356.,
      3648.,  3948.,  4256.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,
      3818.,  4256.,  5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,
      5504.,  6993.,  7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,
      5978.,  6464.,  6962.,  7472.,  4188.,  4480.,  4780.,  5088.,  4620.,
      4928.,  5244.,  5568.,  7438.,  7912.,  8398.,  8896.,  5404.,  5728.,
      6060.,  6400.,  8614.,  9112.,  9622.,  10144., 6188.,  6528.,  6876.,
      7232.,  6748.,  7104.,  7468.,  7840.,  6842.,  7328.,  7826.,  8336.,
      7682.,  8192.,  8714.,  9248.,  12285., 13068., 13869., 14688., 8858.,
      9392.,  9938.,  10496., 14049., 14868., 15705., 16560., 10034., 10592.,
      11162., 11744., 11066., 11648., 12242., 12848., 7068.,  7424.,  7788.,
      8160.,  7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294., 13888.,
      8540.,  8928.,  9324.,  9728.,  13318., 13912., 14518., 15136., 9324.,
      9728.,  10140., 10560., 10140., 10560., 10988., 11424., 10508., 10944.,
      11388., 11840., 11196., 11648., 12108., 12576., 17542., 18232., 18934.,
      19648., 12300., 12768., 13244., 13728., 19198., 19912., 20638., 21376.,
      13404., 13888., 14380., 14880., 14220., 14720., 15228., 15744.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   5.,    12.,   21.,   32.,   14.,   32.,
      54.,   80.,   38.,   64.,   94.,   128.,  62.,   96.,   134.,  176.,
      65.,   84.,   105.,  128.,  85.,   108.,  133.,  160.,  21.,   44.,
      69.,   96.,   25.,   52.,   81.,   112.,  134.,  192.,  254.,  320.,
      158.,  224.,  294.,  368.,  182.,  256.,  334.,  416.,  165.,  204.,
      245.,  288.,  185.,  228.,  273.,  320.,  50.,   104.,  162.,  224.,
      90.,   152.,  218.,  288.,  348.,  480.,  620.,  768.,  460.,  608.,
      764.,  928.,  572.,  736.,  908.,  1088., 434.,  520.,  610.,  704.,
      506.,  600.,  698.,  800.,  250.,  344.,  442.,  544.,  290.,  392.,
      498.,  608.,  908.,  1120., 1340., 1568., 1020., 1248., 1484., 1728.,
      1132., 1376., 1628., 1888., 794.,  920.,  1050., 1184., 866.,  1000.,
      1138., 1280., 450.,  584.,  722.,  864.,  490.,  632.,  778.,  928.,
      1468., 1760., 2060., 2368., 1580., 1888., 2204., 2528., 1692., 2016.,
      2348., 2688., 1154., 1320., 1490., 1664., 1226., 1400., 1578., 1760.,
      549.,  620.,  693.,  768.,  585.,  660.,  737.,  816.,  1414., 1568.,
      1726., 1888., 1502., 1664., 1830., 2000., 1590., 1760., 1934., 2112.,
      949.,  1036., 1125., 1216., 1001., 1092., 1185., 1280., 729.,  820.,
      913.,  1008., 765.,  860.,  957.,  1056., 1854., 2048., 2246., 2448.,
      1942., 2144., 2350., 2560., 2030., 2240., 2454., 2672., 1209., 1316.,
      1425., 1536., 1261., 1372., 1485., 1600., 0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      962.,   1418.,  1906.,  2426.,  946.,   1210.,  1506.,  1834.,  2575.,
      3147.,  3767.,  4435.,  1762.,  2090.,  2450.,  2842.,  4311.,  4979.,
      5695.,  6459.,  2578.,  2970.,  3394.,  3850.,  3266.,  3722.,  4210.,
      4730.,  1732.,  2388.,  3108.,  3892.,  3108.,  3892.,  4740.,  5652.,
      5246.,  6518.,  7886.,  9350.,  4740.,  5652.,  6628.,  7668.,  7694.,
      9158.,  10718., 12374., 6372.,  7412.,  8516.,  9684.,  8772.,  9940.,
      11172., 12468., 8420.,  9460.,  10564., 11732., 4292.,  4948.,  5668.,
      6452.,  11790., 13254., 14814., 16470., 5412.,  6196.,  7044.,  7956.,
      15006., 16662., 18414., 20262., 6532.,  7444.,  8420.,  9460.,  8932.,
      9972.,  11076., 12244., 4566.,  5614.,  6758.,  7998.,  6118.,  7358.,
      8694.,  10126., 10437., 12185., 14077., 16113., 9334.,  10766., 12294.,
      13918., 14237., 16273., 18453., 20777., 12550., 14174., 15894., 17710.,
      13398., 14958., 16614., 18366., 6372.,  7412.,  8516.,  9684.,  2244.,
      2900.,  3620.,  4404.,  10766., 12230., 13790., 15446., 3364.,  4148.,
      4996.,  5908.,  13982., 15638., 17390., 19238., 4484.,  5396.,  6372.,
      7412.,  6884.,  7924.,  9028.,  10196., 7830.,  9134.,  10534., 12030.,
      10406., 11902., 13494., 15182., 12773., 14905., 17181., 19601., 13622.,
      15310., 17094., 18974., 16573., 18993., 21557., 24265., 16838., 18718.,
      20694., 22766., 14614., 16430., 18342., 20350., 8420.,  9460.,  10564.,
      11732., 4292.,  4948.,  5668.,  6452.,  11790., 13254., 14814., 16470.,
      5412.,  6196.,  7044.,  7956.,  15006., 16662., 18414., 20262., 6532.,
      7444.,  8420.,  9460.,  8932.,  9972.,  11076., 12244., 4484.,  5396.,
      6372.,  7412.,  5860.,  6900.,  8004.,  9172.,  9950.,  11350., 12846.,
      14438., 8516.,  9684.,  10916., 12212., 12910., 14502., 16190., 17974.,
      11172., 12468., 13828., 15252., 11332., 12500., 13732., 15028.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  125.,   305.,   501.,   713.,   149.,   361.,   589.,   833.,
      962.,   1418.,  1906.,  2426.,  1138.,  1658.,  2210.,  2794.,  1314.,
      1898.,  2514.,  3162.,  1245.,  1553.,  1877.,  2217.,  1397.,  1737.,
      2093.,  2465.,  298.,   722.,   1178.,  1666.,  602.,   1090.,  1610.,
      2162.,  2532.,  3572.,  4676.,  5844.,  3396.,  4564.,  5796.,  7092.,
      4260.,  5556.,  6916.,  8340.,  3306.,  3986.,  4698.,  5442.,  3866.,
      4610.,  5386.,  6194.,  1818.,  2562.,  3338.,  4146.,  2122.,  2930.,
      3770.,  4642.,  6852.,  8532.,  10276., 12084., 7716.,  9524.,  11396.,
      13332., 8580.,  10516., 12516., 14580., 6106.,  7106.,  8138.,  9202.,
      6666.,  7730.,  8826.,  9954.,  3338.,  4402.,  5498.,  6626.,  3642.,
      4770.,  5930.,  7122.,  11172., 13492., 15876., 18324., 12036., 14484.,
      16996., 19572., 12900., 15476., 18116., 20820., 8906.,  10226., 11578.,
      12962., 9466.,  10850., 12266., 13714., 4253.,  4817.,  5397.,  5993.,
      4533.,  5129.,  5741.,  6369.,  11010., 12234., 13490., 14778., 11698.,
      12986., 14306., 15658., 12386., 13738., 15122., 16538., 7421.,  8113.,
      8821.,  9545.,  7829.,  8553.,  9293.,  10049., 5653.,  6377.,  7117.,
      7873.,  5933.,  6689.,  7461.,  8249.,  14450., 15994., 17570., 19178.,
      15138., 16746., 18386., 20058., 15826., 17498., 19202., 20938., 9461.,
      10313., 11181., 12065., 9869.,  10753., 11653., 12569., 0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  6490.,
      8970.,  11834., 15082., 4956.,  6524.,  8348.,  10428., 12090., 15338.,
      18970., 22986., 7324.,  9404.,  11740., 14332., 12764., 15356., 18204.,
      21308., 3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600., 16760.,
      8244.,  12180., 16884., 22356., 14648., 18808., 23480., 28664., 15348.,
      20820., 27060., 34068., 23480., 28664., 34360., 40568., 12600., 16760.,
      21432., 26616., 5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,
      11000., 15348., 20820., 27060., 34068., 7864.,  11000., 14648., 18808.,
      28596., 35604., 43380., 51924., 12600., 16760., 21432., 26616., 23480.,
      28664., 34360., 40568., 3668.,  6836.,  10772., 15476., 7700.,  12404.,
      17876., 24116., 11182., 16830., 23630., 31582., 20948., 27188., 34196.,
      41972., 20814., 28766., 37870., 48126., 34196., 41972., 50516., 59828.,
      19924., 26164., 33172., 40948., 5816.,  8952.,  12600., 16760., 3128.,
      5240.,  7864.,  11000., 15348., 20820., 27060., 34068., 7864.,  11000.,
      14648., 18808., 28596., 35604., 43380., 51924., 12600., 16760., 21432.,
      26616., 23480., 28664., 34360., 40568., 3668.,  6836.,  10772., 15476.,
      7700.,  12404., 17876., 24116., 11182., 16830., 23630., 31582., 20948.,
      27188., 34196., 41972., 20814., 28766., 37870., 48126., 34196., 41972.,
      50516., 59828., 19924., 26164., 33172., 40948., 5816.,  8952.,  12600.,
      16760., 3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068.,
      7864.,  11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600.,
      16760., 21432., 26616., 23480., 28664., 34360., 40568., 3128.,  5240.,
      7864.,  11000., 5816.,  8952.,  12600., 16760., 8244.,  12180., 16884.,
      22356., 14648., 18808., 23480., 28664., 15348., 20820., 27060., 34068.,
      23480., 28664., 34360., 40568., 12600., 16760., 21432., 26616.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,
      1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  3228.,  5308.,
      7644.,  10236., 3742.,  4910.,  6206.,  7630.,  4926.,  6350.,  7902.,
      9582.,  830.,   2254.,  3806.,  5486.,  990.,   2670.,  4478.,  6414.,
      7260.,  10876., 14748., 18876., 7324.,  9404.,  11740., 14332., 8668.,
      11260., 14108., 17212., 190.,   590.,   1118.,  1774.,  1374.,  2030.,
      2814.,  3726.,  700.,   2012.,  3580.,  5404.,  3068.,  4892.,  6972.,
      9308.,  8504.,  12664., 17336., 22520., 15288., 20472., 26168., 32376.,
      22072., 28280., 35000., 42232., 16316., 19676., 23292., 27164., 20732.,
      24604., 28732., 33116., 12540., 16412., 20540., 24924., 13628., 15964.,
      18556., 21404., 41144., 48376., 56120., 64376., 20792., 24952., 29624.,
      34808., 27576., 32760., 38456., 44664., 3068.,  4892.,  6972.,  9308.,
      7484.,  9820.,  12412., 15260., 5436.,  7772.,  10364., 13212., 7804.,
      10652., 13756., 17116., 22072., 28280., 35000., 42232., 28856., 36088.,
      43832., 52088., 34360., 40568., 47288., 54520., 25148., 29532., 34172.,
      39068., 20092., 22940., 26044., 29404., 15806., 18254., 20830., 23534.,
      350.,   1006.,  1790.,  2702.,  25692., 29308., 33180., 37308., 5276.,
      7356.,  9692.,  12284., 10716., 13308., 16156., 19260., 6974.,  8398.,
      9950.,  11630., 10206., 11886., 13694., 15630., 9182.,  10862., 12670.,
      14606., 11390., 13326., 15390., 17582., 27036., 31164., 35548., 40188.,
      32476., 37116., 42012., 47164., 20252., 23356., 26716., 30332., 23134.,
      25838., 28670., 31630., 510.,   1422.,  2462.,  3630.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,   20.,   23.,  44.,  39.,   68.,  55.,   62.,  22.,  56.,  70.,
      124., 102.,  172., 134., 156.,  52.,  126.,  140., 244., 192., 322.,
      244., 266.,  100., 233., 266.,  450., 344.,  567., 422., 467., 148.,
      318., 348.,  556., 400., 634.,  452., 490.,  244., 521., 578., 918.,
      656., 1035., 734., 803., 244.,  510., 556.,  868., 608., 946., 660.,
      714., 354.,  740., 786., 1228., 858., 1336., 930., 984.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  0.,   6.,   7.,   20.,
      23.,  26.,  18.,  20.,  0.,   14.,  18.,  48.,  58.,  68.,  44.,
      50.,  0.,   34.,  38.,  98.,  108., 118., 74.,  80.,  0.,   54.,
      58.,  148., 158., 168., 104., 110., 0.,   48.,  51.,  118., 125.,
      132., 76.,  80.,  0.,   63.,  66.,  153., 160., 167., 96.,  100.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,   128.,   148.,  295.,  272.,  481.,  396.,  448.,  138.,  368.,
      472.,  854.,   720.,  1226., 968.,  1136., 358.,  888.,  992.,  1754.,
      1400., 2366.,  1808., 1976., 701.,  1660., 1912., 3267., 2524., 4185.,
      3136., 3484.,  1110., 2392., 2624., 4202., 3032., 4814., 3440., 3736.,
      1829., 3916.,  4360., 6939., 4972., 7857., 5584., 6124., 1862., 3896.,
      4256., 6650.,  4664., 7262., 5072., 5496., 2722., 5696., 6056., 9470.,
      6624., 10322., 7192., 7616.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,   11.,   28.,   48.,   68.,  53.,  67.,   0.,    35.,   41.,  128.,
      148., 168.,  123.,  137.,  0.,   82.,  110.,  312.,  384.,  456., 306.,
      350., 0.,    222.,  250.,  672., 744., 816.,  526.,  570.,  0.,   362.,
      390., 1032., 1104., 1176., 746., 790., 0.,    347.,  369.,  864., 916.,
      968., 563.,  593.,  0.,    457., 479., 1124., 1176., 1228., 713., 743.,
      0.,   0.,    0.,    0.,    0.,   0.,   0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,   900.,   1044.,  2138.,  2020.,  3602.,  2996.,  3396.,
      956.,   2632.,  3432.,  6292.,  5384.,  9220.,  7336.,  8648.,
      1996.,  5992.,  5128.,  10948., 6312.,  13748., 7496.,  8808.,
      4578.,  10172., 12140., 19830., 14940., 24030., 17740., 20476.,
      3852.,  13800., 9864.,  22148., 11048., 24948., 12232., 14568.,
      9410.,  19836., 23340., 36630., 26140., 40830., 28940., 33212.,
      5708.,  21608., 14600., 33348., 15784., 36148., 16968., 20328.,
      12508., 25992., 28840., 44788., 31304., 48484., 33768., 37128.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,  324.,  468.,  382.,  486.,  0.,    230.,  270.,
      900.,  1044., 1188., 902.,  1006., 0.,    540.,  748.,  2216., 2760.,
      3304., 2268., 2604., 0.,    1580., 1788., 4936., 5480., 6024., 3948.,
      4284., 0.,    2620., 2828., 7656., 8200., 8744., 5628., 5964., 0.,
      2630., 2798., 6596., 6996., 7396., 4326., 4558., 0.,    3470., 3638.,
      8596., 8996., 9396., 5486., 5718., 0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,   28.,   48.,   80.,   56.,   92.,   119.,  176.,  116.,  156.,
      209.,  272.,  176.,  220.,  200.,  248.,  50.,   88.,   144.,  224.,
      192.,  280.,  358.,  496.,  312.,  408.,  538.,  688.,  432.,  536.,
      512.,  624.,  150.,  208.,  384.,  504.,  432.,  560.,  778.,  976.,
      632.,  768.,  1078., 1288., 832.,  976.,  912.,  1064., 301.,  400.,
      728.,  932.,  848.,  1064., 1467., 1800., 1148., 1376., 1917., 2268.,
      1448., 1688., 1616., 1868., 518.,  592.,  1120., 1272., 1232., 1392.,
      1978., 2224., 1432., 1600., 2278., 2536., 1632., 1808., 1776., 1960.,
      853.,  976.,  1832., 2084., 2048., 2312., 3267., 3672., 2348., 2624.,
      3717., 4140., 2648., 2936., 2912., 3212., 886.,  976.,  1856., 2040.,
      2032., 2224., 3178., 3472., 2232., 2432., 3478., 3784., 2432., 2640.,
      2640., 2856., 1306., 1416., 2736., 2960., 2912., 3144., 4558., 4912.,
      3192., 3432., 4978., 5344., 3472., 3720., 3680., 3936.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   3.,   8.,   8.,   20.,  16.,  32.,  24.,  44.,  21.,  32.,
      27.,  40.,  0.,   0.,   11.,  24.,  13.,  28.,  48.,  80.,  56.,  92.,
      64.,  104., 51.,  72.,  57.,  80.,  0.,   0.,   26.,  56.,  38.,  72.,
      120., 192., 152., 232., 184., 272., 130., 176., 150., 200., 0.,   0.,
      86.,  136., 98.,  152., 280., 392., 312., 432., 344., 472., 230., 296.,
      250., 320., 0.,   0.,   146., 216., 158., 232., 440., 592., 472., 632.,
      504., 672., 330., 416., 350., 440., 0.,   0.,   155., 192., 165., 204.,
      392., 472., 416., 500., 440., 528., 259., 304., 273., 320., 0.,   0.,
      205., 252., 215., 264., 512., 612., 536., 640., 560., 668., 329., 384.,
      343., 400., 0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    193.,   326.,   574.,   382.,   662.,   847.,   1291.,  854.,
      1166.,  1555.,  2047.,  1326.,  1670.,  1510.,  1886.,  330.,   626.,
      1004.,  1628.,  1372.,  2060.,  2606.,  3686.,  2316.,  3068.,  4022.,
      5198.,  3260.,  4076.,  3884.,  4764.,  1090.,  1546.,  2844.,  3788.,
      3212.,  4220.,  5846.,  7406.,  4796.,  5868.,  8222.,  9878.,  6380.,
      7516.,  7004.,  8204.,  2219.,  2999.,  5434.,  7042.,  6370.,  8074.,
      11097., 13725., 8746.,  10546., 14661., 17433., 11122., 13018., 12442.,
      14434., 4002.,  4586.,  8668.,  9868.,  9548.,  10812., 15350., 17294.,
      11132., 12460., 17726., 19766., 12716., 14108., 13852., 15308., 6587.,
      7559.,  14170., 16162., 15874., 17962., 25353., 28557., 18250., 20434.,
      28917., 32265., 20626., 22906., 22714., 25090., 6914.,  7626.,  14492.,
      15948., 15884., 17404., 24854., 27182., 17468., 19052., 27230., 29654.,
      19052., 20700., 20700., 22412., 10234., 11106., 21452., 23228., 22844.,
      24684., 35774., 38582., 25068., 26972., 39110., 42014., 27292., 29260.,
      28940., 30972.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    25.,   17.,   53.,   46.,   134.,  102.,  222.,  158.,  310.,
      149.,  233.,  193.,  293.,  0.,    0.,    65.,   165.,  77.,   193.,
      326.,  574.,  382.,  662.,  438.,  750.,  369.,  533.,  413.,  593.,
      0.,    0.,    154.,  386.,  242.,  506.,  828.,  1388., 1068., 1692.,
      1308., 1996., 954.,  1314., 1106., 1498., 0.,    0.,    594.,  986.,
      682.,  1106., 2028., 2908., 2268., 3212., 2508., 3516., 1714., 2234.,
      1866., 2418., 0.,    0.,    1034., 1586., 1122., 1706., 3228., 4428.,
      3468., 4732., 3708., 5036., 2474., 3154., 2626., 3338., 0.,    0.,
      1169., 1461., 1245., 1553., 2982., 3614., 3166., 3830., 3350., 4046.,
      1985., 2341., 2093., 2465., 0.,    0.,    1549., 1921., 1625., 2013.,
      3902., 4694., 4086., 4910., 4270., 5126., 2525., 2961., 2633., 3085.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,   1422.,  2380.,  4332.,  2156.,  3340.,  5722.,  8202.,  3852.,
      5292.,  9290.,  12154., 5548.,  7244.,  6988.,  8940.,  1724.,  3036.,
      4120.,  7000.,  7000.,  10392., 11764., 17236., 10392., 14296., 16852.,
      23092., 13784., 18200., 18712., 23640., 7004.,  8572.,  17880., 22296.,
      9240.,  12120., 25044., 31284., 11608., 15000., 31668., 38676., 13976.,
      17880., 18904., 23320., 4202.,  6298.,  10180., 14756., 13476., 18820.,
      22622., 30190., 20100., 26212., 30510., 39230., 26724., 33604., 28356.,
      34980., 860.,   2428.,  13784., 18200., 5144.,  8024.,  22996., 29236.,
      7512.,  10904., 29620., 36628., 9880.,  13784., 14808., 19224., 7594.,
      10202., 16964., 22564., 22308., 28676., 27678., 36782., 28932., 36068.,
      35566., 45822., 35556., 43460., 31044., 38692., 7004.,  8572.,  17880.,
      22296., 9240.,  12120., 25044., 31284., 11608., 15000., 31668., 38676.,
      13976., 17880., 18904., 23320., 4092.,  5916.,  9880.,  13784., 12760.,
      17176., 21300., 27284., 18200., 23128., 27412., 34164., 23640., 29080.,
      23832., 28760.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1132.,
      2316.,  1118.,  1774.,  1454.,  2238.,  0.,     0.,     430.,   1214.,
      510.,   1422.,  2380.,  4332.,  2796.,  5004.,  3212.,  5676.,  2798.,
      4094.,  3134.,  4558.,  0.,     0.,     1020.,  2844.,  1692.,  3772.,
      6104.,  10520., 7960.,  12888., 9816.,  15256., 7292.,  10140., 8476.,
      11580., 0.,     0.,     4380.,  7484.,  5052.,  8412.,  15384., 22360.,
      17240., 24728., 19096., 27096., 13212., 17340., 14396., 18780., 0.,
      0.,     7740.,  12124., 8412.,  13052., 24664., 34200., 26520., 36568.,
      28376., 38936., 19132., 24540., 20316., 25980., 0.,     0.,     9070.,
      11390., 9662.,  12110., 23244., 28268., 24684., 29964., 26124., 31660.,
      15534., 18366., 16382., 19342., 0.,     0.,     12030., 14990., 12622.,
      15710., 30444., 36748., 31884., 38444., 33324., 40140., 19774., 23246.,
      20622., 24222., 0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,
      542.,   624.,   719.,   836.,   959.,   1088.,  622.,   704.,   790.,
      880.,   710.,   800.,   894.,   992.,   130.,   200.,   274.,   352.,
      428.,   576.,   732.,   896.,   604.,   768.,   940.,   1120.,  1174.,
      1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,  2152.,
      2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,  2268.,
      2496.,  490.,   600.,   714.,   832.,   1308.,  1536.,  1772.,  2016.,
      1484.,  1728.,  1980.,  2240.,  2734.,  3112.,  3502.,  3904.,  2268.,
      2528.,  2796.,  3072.,  3910.,  4312.,  4726.,  5152.,  3052.,  3328.,
      3612.,  3904.,  3356.,  3648.,  3948.,  4256.,  1015.,  1204.,  1399.,
      1600.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,  3818.,  4256.,
      5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,  5504.,  6993.,
      7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,  5978.,  6464.,
      6962.,  7472.,  1930.,  2072.,  2218.,  2368.,  4188.,  4480.,  4780.,
      5088.,  4620.,  4928.,  5244.,  5568.,  7438.,  7912.,  8398.,  8896.,
      5404.,  5728.,  6060.,  6400.,  8614.,  9112.,  9622.,  10144., 6188.,
      6528.,  6876.,  7232.,  6748.,  7104.,  7468.,  7840.,  3175.,  3412.,
      3655.,  3904.,  6842.,  7328.,  7826.,  8336.,  7682.,  8192.,  8714.,
      9248.,  12285., 13068., 13869., 14688., 8858.,  9392.,  9938.,  10496.,
      14049., 14868., 15705., 16560., 10034., 10592., 11162., 11744., 11066.,
      11648., 12242., 12848., 3370.,  3544.,  3722.,  3904.,  7068.,  7424.,
      7788.,  8160.,  7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294.,
      13888., 8540.,  8928.,  9324.,  9728.,  13318., 13912., 14518., 15136.,
      9324.,  9728.,  10140., 10560., 10140., 10560., 10988., 11424., 5010.,
      5224.,  5442.,  5664.,  10508., 10944., 11388., 11840., 11196., 11648.,
      12108., 12576., 17542., 18232., 18934., 19648., 12300., 12768., 13244.,
      13728., 19198., 19912., 20638., 21376., 13404., 13888., 14380., 14880.,
      14220., 14720., 15228., 15744.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   5.,    12.,   21.,   32.,   14.,   32.,
      54.,   80.,   38.,   64.,   94.,   128.,  62.,   96.,   134.,  176.,
      65.,   84.,   105.,  128.,  85.,   108.,  133.,  160.,  0.,    0.,
      0.,    0.,    21.,   44.,   69.,   96.,   25.,   52.,   81.,   112.,
      134.,  192.,  254.,  320.,  158.,  224.,  294.,  368.,  182.,  256.,
      334.,  416.,  165.,  204.,  245.,  288.,  185.,  228.,  273.,  320.,
      0.,    0.,    0.,    0.,    50.,   104.,  162.,  224.,  90.,   152.,
      218.,  288.,  348.,  480.,  620.,  768.,  460.,  608.,  764.,  928.,
      572.,  736.,  908.,  1088., 434.,  520.,  610.,  704.,  506.,  600.,
      698.,  800.,  0.,    0.,    0.,    0.,    250.,  344.,  442.,  544.,
      290.,  392.,  498.,  608.,  908.,  1120., 1340., 1568., 1020., 1248.,
      1484., 1728., 1132., 1376., 1628., 1888., 794.,  920.,  1050., 1184.,
      866.,  1000., 1138., 1280., 0.,    0.,    0.,    0.,    450.,  584.,
      722.,  864.,  490.,  632.,  778.,  928.,  1468., 1760., 2060., 2368.,
      1580., 1888., 2204., 2528., 1692., 2016., 2348., 2688., 1154., 1320.,
      1490., 1664., 1226., 1400., 1578., 1760., 0.,    0.,    0.,    0.,
      549.,  620.,  693.,  768.,  585.,  660.,  737.,  816.,  1414., 1568.,
      1726., 1888., 1502., 1664., 1830., 2000., 1590., 1760., 1934., 2112.,
      949.,  1036., 1125., 1216., 1001., 1092., 1185., 1280., 0.,    0.,
      0.,    0.,    729.,  820.,  913.,  1008., 765.,  860.,  957.,  1056.,
      1854., 2048., 2246., 2448., 1942., 2144., 2350., 2560., 2030., 2240.,
      2454., 2672., 1209., 1316., 1425., 1536., 1261., 1372., 1485., 1600.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  946.,
      1210.,  1506.,  1834.,  2575.,  3147.,  3767.,  4435.,  1762.,  2090.,
      2450.,  2842.,  4311.,  4979.,  5695.,  6459.,  2578.,  2970.,  3394.,
      3850.,  3266.,  3722.,  4210.,  4730.,  714.,   1010.,  1338.,  1698.,
      1732.,  2388.,  3108.,  3892.,  3108.,  3892.,  4740.,  5652.,  5246.,
      6518.,  7886.,  9350.,  4740.,  5652.,  6628.,  7668.,  7694.,  9158.,
      10718., 12374., 6372.,  7412.,  8516.,  9684.,  8772.,  9940.,  11172.,
      12468., 3322.,  3682.,  4074.,  4498.,  8420.,  9460.,  10564., 11732.,
      4292.,  4948.,  5668.,  6452.,  11790., 13254., 14814., 16470., 5412.,
      6196.,  7044.,  7956.,  15006., 16662., 18414., 20262., 6532.,  7444.,
      8420.,  9460.,  8932.,  9972.,  11076., 12244., 1863.,  2339.,  2863.,
      3435.,  4566.,  5614.,  6758.,  7998.,  6118.,  7358.,  8694.,  10126.,
      10437., 12185., 14077., 16113., 9334.,  10766., 12294., 13918., 14237.,
      16273., 18453., 20777., 12550., 14174., 15894., 17710., 13398., 14958.,
      16614., 18366., 250.,   610.,   1002.,  1426.,  6372.,  7412.,  8516.,
      9684.,  2244.,  2900.,  3620.,  4404.,  10766., 12230., 13790., 15446.,
      3364.,  4148.,  4996.,  5908.,  13982., 15638., 17390., 19238., 4484.,
      5396.,  6372.,  7412.,  6884.,  7924.,  9028.,  10196., 3495.,  4099.,
      4751.,  5451.,  7830.,  9134.,  10534., 12030., 10406., 11902., 13494.,
      15182., 12773., 14905., 17181., 19601., 13622., 15310., 17094., 18974.,
      16573., 18993., 21557., 24265., 16838., 18718., 20694., 22766., 14614.,
      16430., 18342., 20350., 3322.,  3682.,  4074.,  4498.,  8420.,  9460.,
      10564., 11732., 4292.,  4948.,  5668.,  6452.,  11790., 13254., 14814.,
      16470., 5412.,  6196.,  7044.,  7956.,  15006., 16662., 18414., 20262.,
      6532.,  7444.,  8420.,  9460.,  8932.,  9972.,  11076., 12244., 1834.,
      2258.,  2714.,  3202.,  4484.,  5396.,  6372.,  7412.,  5860.,  6900.,
      8004.,  9172.,  9950.,  11350., 12846., 14438., 8516.,  9684.,  10916.,
      12212., 12910., 14502., 16190., 17974., 11172., 12468., 13828., 15252.,
      11332., 12500., 13732., 15028.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  0.,     0.,     0.,     0.,     125.,   305.,   501.,   713.,
      149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  1138.,
      1658.,  2210.,  2794.,  1314.,  1898.,  2514.,  3162.,  1245.,  1553.,
      1877.,  2217.,  1397.,  1737.,  2093.,  2465.,  0.,     0.,     0.,
      0.,     298.,   722.,   1178.,  1666.,  602.,   1090.,  1610.,  2162.,
      2532.,  3572.,  4676.,  5844.,  3396.,  4564.,  5796.,  7092.,  4260.,
      5556.,  6916.,  8340.,  3306.,  3986.,  4698.,  5442.,  3866.,  4610.,
      5386.,  6194.,  0.,     0.,     0.,     0.,     1818.,  2562.,  3338.,
      4146.,  2122.,  2930.,  3770.,  4642.,  6852.,  8532.,  10276., 12084.,
      7716.,  9524.,  11396., 13332., 8580.,  10516., 12516., 14580., 6106.,
      7106.,  8138.,  9202.,  6666.,  7730.,  8826.,  9954.,  0.,     0.,
      0.,     0.,     3338.,  4402.,  5498.,  6626.,  3642.,  4770.,  5930.,
      7122.,  11172., 13492., 15876., 18324., 12036., 14484., 16996., 19572.,
      12900., 15476., 18116., 20820., 8906.,  10226., 11578., 12962., 9466.,
      10850., 12266., 13714., 0.,     0.,     0.,     0.,     4253.,  4817.,
      5397.,  5993.,  4533.,  5129.,  5741.,  6369.,  11010., 12234., 13490.,
      14778., 11698., 12986., 14306., 15658., 12386., 13738., 15122., 16538.,
      7421.,  8113.,  8821.,  9545.,  7829.,  8553.,  9293.,  10049., 0.,
      0.,     0.,     0.,     5653.,  6377.,  7117.,  7873.,  5933.,  6689.,
      7461.,  8249.,  14450., 15994., 17570., 19178., 15138., 16746., 18386.,
      20058., 15826., 17498., 19202., 20938., 9461.,  10313., 11181., 12065.,
      9869.,  10753., 11653., 12569., 0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      350.,   1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,
      3644.,  4956.,  6524.,  6490.,  8970.,  11834., 15082., 4956.,  6524.,
      8348.,  10428., 12090., 15338., 18970., 22986., 7324.,  9404.,  11740.,
      14332., 12764., 15356., 18204., 21308., 700.,   2012.,  3580.,  5404.,
      3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600., 16760., 8244.,
      12180., 16884., 22356., 14648., 18808., 23480., 28664., 15348., 20820.,
      27060., 34068., 23480., 28664., 34360., 40568., 12600., 16760., 21432.,
      26616., 380.,   1180.,  2236.,  3548.,  5816.,  8952.,  12600., 16760.,
      3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068., 7864.,
      11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600., 16760.,
      21432., 26616., 23480., 28664., 34360., 40568., 890.,   2602.,  4698.,
      7178.,  3668.,  6836.,  10772., 15476., 7700.,  12404., 17876., 24116.,
      11182., 16830., 23630., 31582., 20948., 27188., 34196., 41972., 20814.,
      28766., 37870., 48126., 34196., 41972., 50516., 59828., 19924., 26164.,
      33172., 40948., 380.,   1180.,  2236.,  3548.,  5816.,  8952.,  12600.,
      16760., 3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068.,
      7864.,  11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600.,
      16760., 21432., 26616., 23480., 28664., 34360., 40568., 890.,   2602.,
      4698.,  7178.,  3668.,  6836.,  10772., 15476., 7700.,  12404., 17876.,
      24116., 11182., 16830., 23630., 31582., 20948., 27188., 34196., 41972.,
      20814., 28766., 37870., 48126., 34196., 41972., 50516., 59828., 19924.,
      26164., 33172., 40948., 380.,   1180.,  2236.,  3548.,  5816.,  8952.,
      12600., 16760., 3128.,  5240.,  7864.,  11000., 15348., 20820., 27060.,
      34068., 7864.,  11000., 14648., 18808., 28596., 35604., 43380., 51924.,
      12600., 16760., 21432., 26616., 23480., 28664., 34360., 40568., 700.,
      2012.,  3580.,  5404.,  3128.,  5240.,  7864.,  11000., 5816.,  8952.,
      12600., 16760., 8244.,  12180., 16884., 22356., 14648., 18808., 23480.,
      28664., 15348., 20820., 27060., 34068., 23480., 28664., 34360., 40568.,
      12600., 16760., 21432., 26616.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,
      1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  3228.,  5308.,
      7644.,  10236., 3742.,  4910.,  6206.,  7630.,  4926.,  6350.,  7902.,
      9582.,  0.,     0.,     0.,     0.,     830.,   2254.,  3806.,  5486.,
      990.,   2670.,  4478.,  6414.,  7260.,  10876., 14748., 18876., 7324.,
      9404.,  11740., 14332., 8668.,  11260., 14108., 17212., 190.,   590.,
      1118.,  1774.,  1374.,  2030.,  2814.,  3726.,  0.,     0.,     0.,
      0.,     700.,   2012.,  3580.,  5404.,  3068.,  4892.,  6972.,  9308.,
      8504.,  12664., 17336., 22520., 15288., 20472., 26168., 32376., 22072.,
      28280., 35000., 42232., 16316., 19676., 23292., 27164., 20732., 24604.,
      28732., 33116., 0.,     0.,     0.,     0.,     12540., 16412., 20540.,
      24924., 13628., 15964., 18556., 21404., 41144., 48376., 56120., 64376.,
      20792., 24952., 29624., 34808., 27576., 32760., 38456., 44664., 3068.,
      4892.,  6972.,  9308.,  7484.,  9820.,  12412., 15260., 0.,     0.,
      0.,     0.,     5436.,  7772.,  10364., 13212., 7804.,  10652., 13756.,
      17116., 22072., 28280., 35000., 42232., 28856., 36088., 43832., 52088.,
      34360., 40568., 47288., 54520., 25148., 29532., 34172., 39068., 20092.,
      22940., 26044., 29404., 0.,     0.,     0.,     0.,     15806., 18254.,
      20830., 23534., 350.,   1006.,  1790.,  2702.,  25692., 29308., 33180.,
      37308., 5276.,  7356.,  9692.,  12284., 10716., 13308., 16156., 19260.,
      6974.,  8398.,  9950.,  11630., 10206., 11886., 13694., 15630., 0.,
      0.,     0.,     0.,     9182.,  10862., 12670., 14606., 11390., 13326.,
      15390., 17582., 27036., 31164., 35548., 40188., 32476., 37116., 42012.,
      47164., 20252., 23356., 26716., 30332., 23134., 25838., 28670., 31630.,
      510.,   1422.,  2462.,  3630.,  0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,   20.,  23.,  44.,   39.,   68.,   55.,   92.,   71.,   80.,
      24.,  60.,  76.,  133.,  108.,  181.,  140.,  229.,  172.,  200.,
      59.,  140., 156., 268.,  208.,  346.,  260.,  424.,  312.,  340.,
      116., 265., 304., 507.,  382.,  624.,  460.,  741.,  538.,  595.,
      179., 380., 416., 658.,  468.,  736.,  520.,  814.,  572.,  620.,
      296., 625., 694., 1092., 772.,  1209., 850.,  1326., 928.,  1015.,
      299., 620., 676., 1048., 728.,  1126., 780.,  1204., 832.,  900.,
      434., 900., 956., 1483., 1028., 1591., 1100., 1699., 1172., 1240.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   14.,  14.,  19.,  12.,  15.,  0.,   6.,   7.,
      20.,  23.,  44.,  39.,  44.,  27.,  30.,  0.,   15.,  20.,  52.,  64.,
      115., 96.,  112., 66.,  75.,  0.,   40.,  45.,  112., 124., 220., 176.,
      192., 111., 120., 0.,   65.,  70.,  172., 184., 325., 256., 272., 156.,
      165., 0.,   64.,  68.,  152., 161., 266., 197., 208., 114., 120., 0.,
      84.,  88.,  197., 206., 341., 252., 263., 144., 150., 0.,   0.,   0.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,   128.,  148.,  295.,   272.,  481.,   396.,  667.,   520.,  588.,
      152.,  396.,  516.,  920.,   764.,  1292.,  1012., 1664.,  1260., 1476.,
      412.,  996.,  1116., 1940.,  1524., 2552.,  1932., 3164.,  2340., 2556.,
      823.,  1904., 2204., 3705.,  2816., 4623.,  3428., 5541.,  4040., 4484.,
      1352., 2876., 3156., 5000.,  3564., 5612.,  3972., 6224.,  4380., 4756.,
      2233., 4724., 5264., 8295.,  5876., 9213.,  6488., 10131., 7100., 7784.,
      2292., 4756., 5196., 8060.,  5604., 8672.,  6012., 9284.,  6420., 6956.,
      3352., 6956., 7396., 11480., 7964., 12332., 8532., 13184., 9100., 9636.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,   11.,  28.,   48.,   85.,   92.,   128.,  83.,   105.,  0.,
      35.,  41.,  128.,  148.,  295.,  272.,  308.,  193.,  215.,  0.,
      88.,  124., 340.,  428.,  788.,  676.,  796.,  476.,  544.,  0.,
      268., 304., 780.,  868.,  1568., 1276., 1396., 816.,  884.,  0.,
      448., 484., 1220., 1308., 2348., 1876., 1996., 1156., 1224., 0.,
      473., 503., 1132., 1200., 1993., 1484., 1568., 863.,  909.,  0.,
      623., 653., 1472., 1540., 2563., 1904., 1988., 1093., 1139., 0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,   900.,   1044.,  2138.,  2020.,  3602.,  2996.,  5066.,  3972.,
      4500.,  1060.,  2840.,  3768.,  6796.,  5720.,  9724.,  7672.,  12652.,
      9624.,  11320., 2420.,  6840.,  6104.,  12412., 7288.,  15212., 8472.,
      18012., 9656.,  11352., 5530.,  12076., 14428., 23262., 17228., 27462.,
      20028., 31662., 22828., 26332., 4740.,  16600., 12024., 26412., 13208.,
      29212., 14392., 32012., 15576., 18552., 11570., 23516., 26764., 40934.,
      25852., 40398., 28652., 44598., 31452., 34828., 7060.,  20600., 11160.,
      26844., 3512.,  19788., 4696.,  22588., 5880.,  8088.,  15460., 21016.,
      23480., 30796., 11992., 19516., 14456., 23212., 16920., 19128.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,   324.,   578.,   660.,   932.,   614.,  782.,  0.,
      230.,  270.,  900.,   1044.,  2138.,  2020.,  2292.,  1454., 1622., 0.,
      580.,  852.,  2424.,  3096.,  5788.,  5048.,  5976.,  3604., 4132., 0.,
      1940., 2212., 5784.,  6456.,  11788., 9688.,  10616., 6244., 6772., 0.,
      3300., 3572., 9144.,  9816.,  17788., 14328., 15256., 8884., 9412., 0.,
      3630., 3862., 8724.,  9252.,  15410., 11508., 12164., 6710., 7070., 0.,
      4790., 5022., 11364., 11892., 19850., 14788., 15444., 8510., 8870., 0.,
      0.,    0.,    0.,     0.,     0.,     0.,     0.,     0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,   28.,   48.,   80.,   56.,   92.,   119.,  176.,  116.,  156.,
      209.,  272.,  176.,  220.,  299.,  368.,  236.,  284.,  268.,  320.,
      56.,   96.,   156.,  240.,  212.,  304.,  388.,  532.,  332.,  432.,
      568.,  724.,  452.,  560.,  748.,  916.,  572.,  688.,  676.,  800.,
      176.,  236.,  436.,  560.,  492.,  624.,  868.,  1072., 692.,  832.,
      1168., 1384., 892.,  1040., 1468., 1696., 1092., 1248., 1196., 1360.,
      359.,  464.,  844.,  1060., 988.,  1216., 1677., 2028., 1288., 1528.,
      2127., 2496., 1588., 1840., 2577., 2964., 1888., 2152., 2104., 2380.,
      636.,  716.,  1356., 1520., 1492., 1664., 2368., 2632., 1692., 1872.,
      2668., 2944., 1892., 2080., 2968., 3256., 2092., 2288., 2276., 2480.,
      1049., 1184., 2224., 2500., 2488., 2776., 3927., 4368., 2788., 3088.,
      4377., 4836., 3088., 3400., 4827., 5304., 3388., 3712., 3724., 4060.,
      1096., 1196., 2276., 2480., 2492., 2704., 3868., 4192., 2692., 2912.,
      4168., 4504., 2892., 3120., 4468., 4816., 3092., 3328., 3356., 3600.,
      1616., 1736., 3356., 3600., 3572., 3824., 5548., 5932., 3852., 4112.,
      5968., 6364., 4132., 4400., 6388., 6796., 4412., 4688., 4676., 4960.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,   8.,    8.,   20.,   16.,  32.,   29.,   56.,  36.,
      56.,   52.,   76.,  35.,   48.,  45.,   60.,  0.,    0.,    11.,  24.,
      13.,   28.,   48.,  80.,   56.,  92.,   119., 176.,  116.,  156., 132.,
      176.,  85.,   108., 95.,   120., 0.,    0.,   28.,   60.,   44.,  80.,
      132.,  208.,  172., 256.,  328., 460.,  292., 384.,  348.,  448., 212.,
      264.,  244.,  300., 0.,    0.,   108.,  160., 124.,  180.,  332., 448.,
      372.,  496.,  688., 880.,  572., 704.,  628., 768.,  372.,  444., 404.,
      480.,  0.,    0.,   188.,  260., 204.,  280., 532.,  688.,  572., 736.,
      1048., 1300., 852., 1024., 908., 1088., 532., 624.,  564.,  660., 0.,
      0.,    217.,  256., 231.,  272., 524.,  608., 556.,  644.,  929., 1064.,
      696.,  788.,  736., 832.,  407., 456.,  429., 480.,  0.,    0.,   287.,
      336.,  301.,  352., 684.,  788., 716.,  824., 1199., 1364., 896., 1008.,
      936.,  1052., 517., 576.,  539., 600.,  0.,   0.,    0.,    0.,   0.,
      0.,    0.,    0.,   0.,    0.,   0.,    0.,   0.,    0.,    0.,   0.,
      0.,    0.,    0.,   0.,    0.,   0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    193.,   326.,   574.,   382.,   662.,   847.,   1291.,  854.,
      1166.,  1555.,  2047.,  1326.,  1670.,  2263.,  2803.,  1798.,  2174.,
      2046.,  2454.,  374.,   686.,   1092.,  1748.,  1524.,  2244.,  2834.,
      3962.,  2468.,  3252.,  4250.,  5474.,  3412.,  4260.,  5666.,  6986.,
      4356.,  5268.,  5172.,  6148.,  1294.,  1766.,  3252.,  4228.,  3684.,
      4724.,  6554.,  8162.,  5268.,  6372.,  8930.,  10634., 6852.,  8020.,
      11306., 13106., 8436.,  9668.,  9252.,  10548., 2671.,  3499.,  6338.,
      8042.,  7466.,  9266.,  12741., 15513., 9842.,  11738., 16305., 19221.,
      12218., 14210., 19869., 22929., 14594., 16682., 16298., 18482., 4934.,
      5566.,  10532., 11828., 11604., 12964., 18434., 20522., 13188., 14612.,
      20810., 22994., 14772., 16260., 23186., 25466., 16356., 17908., 17812.,
      19428., 8131.,  9199.,  17258., 19442., 19346., 21626., 30561., 34053.,
      21722., 24098., 34125., 37761., 24098., 26570., 37689., 41469., 26474.,
      29042., 29138., 31802., 8574.,  9366.,  17812., 19428., 19524., 21204.,
      30314., 32882., 21108., 22852., 32690., 35354., 22692., 24500., 35066.,
      37826., 24276., 26148., 26372., 28308., 12694., 13646., 26372., 28308.,
      28084., 30084., 43634., 46682., 30308., 32372., 46970., 50114., 32532.,
      34660., 50306., 53546., 34756., 36948., 36852., 39108.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    25.,   17.,   53.,   46.,   134.,  102.,  222.,  187.,  391.,
      254.,  406.,  374.,  558.,  257.,  357.,  333.,  449.,  0.,    0.,
      65.,   165.,  77.,   193.,  326.,  574.,  382.,  662.,  847.,  1291.,
      854.,  1166., 974.,  1318., 637.,  817.,  713.,  909.,  0.,    0.,
      166.,  414.,  286.,  566.,  916.,  1508., 1220., 1876., 2378., 3410.,
      2164., 2884., 2596., 3380., 1598., 2006., 1846., 2286., 0.,    0.,
      766.,  1174., 886.,  1326., 2436., 3348., 2740., 3716., 5138., 6650.,
      4324., 5364., 4756., 5860., 2838., 3406., 3086., 3686., 0.,    0.,
      1366., 1934., 1486., 2086., 3956., 5188., 4260., 5556., 7898., 9890.,
      6484., 7844., 6916., 8340., 4078., 4806., 4326., 5086., 0.,    0.,
      1661., 1969., 1769., 2093., 4030., 4694., 4278., 4974., 7171., 8239.,
      5390., 6118., 5702., 6462., 3161., 3549., 3333., 3737., 0.,    0.,
      2201., 2589., 2309., 2713., 5270., 6094., 5518., 6374., 9271., 10579.,
      6950., 7838., 7262., 8182., 4021., 4489., 4193., 4677., 0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,   1422.,  2380.,  4332.,  2156.,  3340.,  5722.,  8202.,  3852.,
      5292.,  9290.,  12154., 5548.,  7244.,  12858., 16106., 7244.,  9196.,
      9196.,  11404., 2060.,  3500.,  4792.,  7928.,  8184.,  11832., 13540.,
      19396., 11576., 15736., 17988., 23588., 12280., 15928., 18340., 23684.,
      8888.,  12024., 11256., 14904., 8620.,  10316., 21112., 25784., 10936.,
      14072., 28612., 35236., 13304., 16952., 24356., 30724., 2744.,  5880.,
      16004., 22116., 4472.,  7096.,  6840.,  9976.,  5722.,  8202.,  13220.,
      18564., 18052., 24164., 29486., 38206., 24676., 31556., 32638., 41486.,
      24516., 31140., 31694., 40670., 20260., 26628., 18820., 24932., 4172.,
      6124.,  22456., 27640., 9208.,  12856., 33188., 40580., 11576., 15736.,
      24836., 31972., 13304., 16952., 28772., 35652., 10936., 14072., 14328.,
      17976., 11658., 15034., 24452., 30564., 30820., 37700., 37054., 46414.,
      30660., 37284., 27278., 35742., 26404., 32772., 22238., 30830., 18052.,
      24164., 22244., 28100., 12012., 14220., 21112., 25784., 2744.,  5880.,
      16004., 22116., 4472.,  7096.,  19940., 25796., 6840.,  9976.,  26564.,
      33188., 9208.,  12856., 13624., 17784., 9356.,  11820., 15672., 19832.,
      19064., 23736., 23268., 29124., 13624., 17784., 16452., 22052., 19064.,
      23736., 22564., 28932., 24504., 29688., 18040., 22712.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1322.,
      2906.,  1900.,  3084.,  2828.,  4268.,  1966.,  2750.,  2558.,  3470.,
      0.,     0.,     430.,   1214.,  510.,   1422.,  2380.,  4332.,  2796.,
      5004.,  6362.,  9866.,  6540.,  9004.,  7468.,  10188., 4926.,  6350.,
      5518.,  7070.,  0.,     0.,     1100.,  3052.,  2028.,  4236.,  6776.,
      11448., 9144.,  14328., 18052., 26212., 16632., 22328., 20024., 26232.,
      12396., 15628., 14348., 17836., 0.,     0.,     5740.,  8972.,  5388.,
      6828.,  17336., 22520., 14328., 17976., 32996., 40900., 18744., 22904.,
      22136., 26808., 12684., 15148., 14636., 17356., 0.,     0.,     9100.,
      11564., 10028., 12748., 23800., 29496., 26168., 32376., 45124., 54820.,
      35704., 42424., 39096., 46328., 22444., 26188., 24396., 28396., 0.,
      0.,     12990., 15438., 270.,   798.,   18028., 21260., 2316.,  3756.,
      25098., 29498., 2988.,  4684.,  5452.,  7404.,  3150.,  4190.,  4510.,
      5678.,  0.,     0.,     3662.,  4702.,  4510.,  5678.,  10124., 12588.,
      12076., 14796., 19898., 24170., 15308., 18284., 17772., 21004., 9950.,
      11630., 11310., 13118., 0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,
      542.,   624.,   719.,   836.,   959.,   1088.,  622.,   704.,   790.,
      880.,   1067.,  1196.,  1331.,  1472.,  854.,   944.,   1038.,  1136.,
      974.,   1072.,  1174.,  1280.,  150.,   224.,   302.,   384.,   468.,
      624.,   788.,   960.,   676.,   848.,   1028.,  1216.,  1282.,  1552.,
      1834.,  2128.,  1140.,  1328.,  1524.,  1728.,  1978.,  2272.,  2578.,
      2896.,  1604.,  1808.,  2020.,  2240.,  2674.,  2992.,  3322.,  3664.,
      2068.,  2288.,  2516.,  2752.,  2468.,  2704.,  2948.,  3200.,  590.,
      704.,   822.,   944.,   1508.,  1744.,  1988.,  2240.,  1716.,  1968.,
      2228.,  2496.,  3082.,  3472.,  3874.,  4288.,  2500.,  2768.,  3044.,
      3328.,  4258.,  4672.,  5098.,  5536.,  3284.,  3568.,  3860.,  4160.,
      5434.,  5872.,  6322.,  6784.,  4068.,  4368.,  4676.,  4992.,  4468.,
      4784.,  5108.,  5440.,  1235.,  1436.,  1643.,  1856.,  2962.,  3376.,
      3802.,  4240.,  3514.,  3952.,  4402.,  4864.,  6033.,  6708.,  7401.,
      8112.,  4690.,  5152.,  5626.,  6112.,  7797.,  8508.,  9237.,  9984.,
      5866.,  6352.,  6850.,  7360.,  9561.,  10308., 11073., 11856., 7042.,
      7552.,  8074.,  8608.,  7882.,  8416.,  8962.,  9520.,  2390.,  2544.,
      2702.,  2864.,  5108.,  5424.,  5748.,  6080.,  5636.,  5968.,  6308.,
      6656.,  8962.,  9472.,  9994.,  10528., 6420.,  6768.,  7124.,  7488.,
      10138., 10672., 11218., 11776., 7204.,  7568.,  7940.,  8320.,  11314.,
      11872., 12442., 13024., 7988.,  8368.,  8756.,  9152.,  8708.,  9104.,
      9508.,  9920.,  3935.,  4196.,  4463.,  4736.,  8362.,  8896.,  9442.,
      10000., 9394.,  9952.,  10522., 11104., 14853., 15708., 16581., 17472.,
      10570., 11152., 11746., 12352., 16617., 17508., 18417., 19344., 11746.,
      12352., 12970., 13600., 18381., 19308., 20253., 21216., 12922., 13552.,
      14194., 14848., 14242., 14896., 15562., 16240., 4190.,  4384.,  4582.,
      4784.,  8708.,  9104.,  9508.,  9920.,  9556.,  9968.,  10388., 10816.,
      14842., 15472., 16114., 16768., 10340., 10768., 11204., 11648., 16018.,
      16672., 17338., 18016., 11124., 11568., 12020., 12480., 17194., 17872.,
      18562., 19264., 11908., 12368., 12836., 13312., 12948., 13424., 13908.,
      14400., 6230.,  6464.,  6702.,  6944.,  12948., 13424., 13908., 14400.,
      13796., 14288., 14788., 15296., 21442., 22192., 22954., 23728., 14900.,
      15408., 15924., 16448., 23098., 23872., 24658., 25456., 16004., 16528.,
      17060., 17600., 24754., 25552., 26362., 27184., 17108., 17648., 18196.,
      18752., 18148., 18704., 19268., 19840.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   5.,    12.,   21.,   32.,   14.,   32.,
      54.,   80.,   38.,   64.,   94.,   128.,  71.,   116.,  167.,  224.,
      110.,  144.,  182.,  224.,  166.,  208.,  254.,  304.,  117.,  140.,
      165.,  192.,  153.,  180.,  209.,  240.,  0.,    0.,    0.,    0.,
      21.,   44.,   69.,   96.,   25.,   52.,   81.,   112.,  134.,  192.,
      254.,  320.,  158.,  224.,  294.,  368.,  371.,  476.,  587.,  704.,
      390.,  464.,  542.,  624.,  446.,  528.,  614.,  704.,  297.,  340.,
      385.,  432.,  333.,  380.,  429.,  480.,  0.,    0.,    0.,    0.,
      54.,   112.,  174.,  240.,  110.,  176.,  246.,  320.,  388.,  528.,
      676.,  832.,  532.,  688.,  852.,  1024., 1066., 1312., 1570., 1840.,
      996.,  1168., 1348., 1536., 1204., 1392., 1588., 1792., 750.,  848.,
      950.,  1056., 870.,  976.,  1086., 1200., 0.,    0.,    0.,    0.,
      334.,  432.,  534.,  640.,  390.,  496.,  606.,  720.,  1108., 1328.,
      1556., 1792., 1252., 1488., 1732., 1984., 2386., 2752., 3130., 3520.,
      2036., 2288., 2548., 2816., 2244., 2512., 2788., 3072., 1350., 1488.,
      1630., 1776., 1470., 1616., 1766., 1920., 0.,    0.,    0.,    0.,
      614.,  752.,  894.,  1040., 670.,  816.,  966.,  1120., 1828., 2128.,
      2436., 2752., 1972., 2288., 2612., 2944., 3706., 4192., 4690., 5200.,
      3076., 3408., 3748., 4096., 3284., 3632., 3988., 4352., 1950., 2128.,
      2310., 2496., 2070., 2256., 2446., 2640., 0.,    0.,    0.,    0.,
      793.,  868.,  945.,  1024., 845.,  924.,  1005., 1088., 1934., 2096.,
      2262., 2432., 2054., 2224., 2398., 2576., 3455., 3716., 3983., 4256.,
      2606., 2784., 2966., 3152., 2758., 2944., 3134., 3328., 1533., 1628.,
      1725., 1824., 1617., 1716., 1817., 1920., 0.,    0.,    0.,    0.,
      1053., 1148., 1245., 1344., 1105., 1204., 1305., 1408., 2534., 2736.,
      2942., 3152., 2654., 2864., 3078., 3296., 4475., 4796., 5123., 5456.,
      3366., 3584., 3806., 4032., 3518., 3744., 3974., 4208., 1953., 2068.,
      2185., 2304., 2037., 2156., 2277., 2400., 0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  946.,
      1210.,  1506.,  1834.,  2575.,  3147.,  3767.,  4435.,  1762.,  2090.,
      2450.,  2842.,  4311.,  4979.,  5695.,  6459.,  2578.,  2970.,  3394.,
      3850.,  6047.,  6811.,  7623.,  8483.,  3394.,  3850.,  4338.,  4858.,
      4338.,  4858.,  5410.,  5994.,  866.,   1194.,  1554.,  1946.,  2036.,
      2756.,  3540.,  4388.,  3668.,  4516.,  5428.,  6404.,  6086.,  7454.,
      8918.,  10478., 5300.,  6276.,  7316.,  8420.,  8342.,  9646.,  11046.,
      12542., 5716.,  6564.,  7476.,  8452.,  8550.,  9790.,  11126., 12558.,
      4084.,  4804.,  5588.,  6436.,  5204.,  6052.,  6964.,  7940.,  4114.,
      4506.,  4930.,  5386.,  10004., 11108., 12276., 13508., 5108.,  5828.,
      6612.,  7460.,  13526., 15086., 16742., 18494., 6228.,  7076.,  7988.,
      8964.,  11430., 12926., 14518., 16206., 1012.,  1732.,  2516.,  3364.,
      7286.,  8718.,  10246., 11870., 1940.,  2532.,  3188.,  3908.,  3060.,
      3780.,  4564.,  5412.,  2575.,  3147.,  3767.,  4435.,  5990.,  7230.,
      8566.,  9998.,  8310.,  9742.,  11270., 12894., 13725., 15761., 17941.,
      20265., 11526., 13150., 14870., 16686., 15285., 17353., 19565., 21921.,
      11478., 13038., 14694., 16446., 14797., 16897., 19141., 21529., 9382.,
      10878., 12470., 14158., 8694.,  10126., 11654., 13278., 1858.,  2314.,
      2802.,  3322.,  10612., 11844., 13140., 14500., 4180.,  5028.,  5940.,
      6916.,  15718., 17470., 19318., 21262., 5300.,  6276.,  7316.,  8420.,
      11574., 13262., 15046., 16926., 6228.,  7076.,  7988.,  8964.,  13574.,
      15198., 16918., 18734., 5108.,  5828.,  6612.,  7460.,  6740.,  7588.,
      8500.,  9476.,  5431.,  6227.,  7071.,  7963.,  11510., 12942., 14470.,
      16094., 14598., 16222., 17942., 19758., 17429., 19625., 21965., 24449.,
      14550., 16110., 17766., 19518., 12653., 14625., 16741., 19001., 12454.,
      13950., 15542., 17230., 10117., 12121., 14269., 16561., 8310.,  9742.,
      11270., 12894., 10438., 11806., 13270., 14830., 5746.,  6266.,  6818.,
      7402.,  10004., 11108., 12276., 13508., 1012.,  1732.,  2516.,  3364.,
      7286.,  8718.,  10246., 11870., 1940.,  2532.,  3188.,  3908.,  9286.,
      10654., 12118., 13678., 3060.,  3780.,  4564.,  5412.,  12502., 14062.,
      15718., 17470., 4180.,  5028.,  5940.,  6916.,  6324.,  7300.,  8340.,
      9444.,  4386.,  4970.,  5586.,  6234.,  7348.,  8324.,  9364.,  10468.,
      8980.,  10084., 11252., 12484., 10950., 12318., 13782., 15342., 6324.,
      7300.,  8340.,  9444.,  7574.,  8878.,  10278., 11774., 8980.,  10084.,
      11252., 12484., 10534., 12030., 13622., 15310., 11636., 12868., 14164.,
      15524., 8468.,  9572.,  10740., 11972.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   487.,   835.,
      1231.,  1675.,  818.,   1082.,  1378.,  1706.,  1250.,  1578.,  1938.,
      2330.,  893.,   1073.,  1269.,  1481.,  1173.,  1385.,  1613.,  1857.,
      0.,     0.,     0.,     0.,     125.,   305.,   501.,   713.,   149.,
      361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  1138.,  1658.,
      2210.,  2794.,  2767.,  3595.,  4471.,  5395.,  2978.,  3562.,  4178.,
      4826.,  3410.,  4058.,  4738.,  5450.,  2293.,  2633.,  2989.,  3361.,
      2573.,  2945.,  3333.,  3737.,  0.,     0.,     0.,     0.,     322.,
      778.,   1266.,  1786.,  754.,   1274.,  1826.,  2410.,  2836.,  3940.,
      5108.,  6340.,  3956.,  5188.,  6484.,  7844.,  8054.,  9998.,  12038.,
      14174., 7636.,  8996.,  10420., 11908., 9268.,  10756., 12308., 13924.,
      5810.,  6586.,  7394.,  8234.,  6754.,  7594.,  8466.,  9370.,  0.,
      0.,     0.,     0.,     2482.,  3258.,  4066.,  4906.,  2914.,  3754.,
      4626.,  5530.,  8436.,  10180., 11988., 13860., 9556.,  11428., 13364.,
      15364., 18374., 21278., 24278., 27374., 15796., 17796., 19860., 21988.,
      17428., 19556., 21748., 24004., 10530., 11626., 12754., 13914., 11474.,
      12634., 13826., 15050., 0.,     0.,     0.,     0.,     4642.,  5738.,
      6866.,  8026.,  5074.,  6234.,  7426.,  8650.,  14036., 16420., 18868.,
      21380., 15156., 17668., 20244., 22884., 28694., 32558., 36518., 40574.,
      23956., 26596., 29300., 32068., 25588., 28356., 31188., 34084., 15250.,
      16666., 18114., 19594., 16194., 17674., 19186., 20730., 0.,     0.,
      0.,     0.,     6197.,  6793.,  7405.,  8033.,  6605.,  7233.,  7877.,
      8537.,  15154., 16442., 17762., 19114., 16098., 17450., 18834., 20250.,
      27127., 29203., 31327., 33499., 20498., 21914., 23362., 24842., 21698.,
      23178., 24690., 26234., 12077., 12833., 13605., 14393., 12741., 13529.,
      14333., 15153., 0.,     0.,     0.,     0.,     8237.,  8993.,  9765.,
      10553., 8645.,  9433.,  10237., 11057., 19874., 21482., 23122., 24794.,
      20818., 22490., 24194., 25930., 35167., 37723., 40327., 42979., 26498.,
      28234., 30002., 31802., 27698., 29498., 31330., 33194., 15397., 16313.,
      17245., 18193., 16061., 17009., 17973., 18953., 0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      350.,   1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,
      3644.,  4956.,  6524.,  6490.,  8970.,  11834., 15082., 4956.,  6524.,
      8348.,  10428., 12090., 15338., 18970., 22986., 7324.,  9404.,  11740.,
      14332., 12954., 15946., 19322., 23082., 860.,   2428.,  4252.,  6332.,
      4252.,  6332.,  8668.,  11260., 1884.,  3452.,  5276.,  7356.,  5496.,
      8120.,  11256., 14904., 10232., 13880., 18040., 22712., 10772., 15476.,
      20948., 27188., 19064., 23736., 28920., 34616., 17236., 22452., 28436.,
      35188., 23160., 27832., 33016., 38712., 6676.,  11380., 16852., 23092.,
      6136.,  9784.,  13944., 18616., 9592.,  12216., 15352., 19000., 2588.,
      3644.,  4956.,  6524.,  10232., 13880., 18040., 22712., 5496.,  8120.,
      11256., 14904., 20948., 27188., 34196., 41972., 10232., 13880., 18040.,
      22712., 29460., 36212., 43732., 52020., 6136.,  9784.,  13944., 18616.,
      16852., 23092., 30100., 37876., 9592.,  12216., 15352., 19000., 14328.,
      17976., 22136., 26808., 6490.,  8970.,  11834., 15082., 10772., 15476.,
      20948., 27188., 20948., 27188., 34196., 41972., 20174., 27102., 35182.,
      44414., 29460., 36212., 43732., 52020., 12142., 19326., 27662., 37150.,
      16852., 23092., 30100., 37876., 19854., 26270., 33838., 42558., 20628.,
      26356., 32852., 40116., 6356.,  10548., 15508., 21236., 4956.,  6524.,
      8348.,  10428., 19064., 23736., 28920., 34616., 10232., 13880., 18040.,
      22712., 29460., 36212., 43732., 52020., 6136.,  9784.,  13944., 18616.,
      16852., 23092., 30100., 37876., 9592.,  12216., 15352., 19000., 20628.,
      26356., 32852., 40116., 5496.,  8120.,  11256., 14904., 10232., 13880.,
      18040., 22712., 12090., 15338., 18970., 22986., 17236., 22452., 28436.,
      35188., 29460., 36212., 43732., 52020., 12142., 19326., 27662., 37150.,
      16852., 23092., 30100., 37876., 19854., 26270., 33838., 42558., 20628.,
      26356., 32852., 40116., 11822., 18494., 26318., 35294., 20948., 27188.,
      34196., 41972., 12820., 17524., 22996., 29236., 7324.,  9404.,  11740.,
      14332., 23160., 27832., 33016., 38712., 6136.,  9784.,  13944., 18616.,
      16852., 23092., 30100., 37876., 9592.,  12216., 15352., 19000., 20628.,
      26356., 32852., 40116., 5496.,  8120.,  11256., 14904., 20948., 27188.,
      34196., 41972., 10232., 13880., 18040., 22712., 19064., 23736., 28920.,
      34616., 12764., 15356., 18204., 21308., 6136.,  9784.,  13944., 18616.,
      14968., 19640., 24824., 30520., 16916., 21620., 27092., 33332., 14328.,
      17976., 22136., 26808., 6356.,  10548., 15508., 21236., 10232., 13880.,
      18040., 22712., 12820., 17524., 22996., 29236., 19064., 23736., 28920.,
      34616., 10232., 13880., 18040., 22712.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,
      1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2938.,  4650.,
      6746.,  9226.,  6300.,  8380.,  10716., 13308., 4956.,  6524.,  8348.,
      10428., 6974.,  8398.,  9950.,  11630., 350.,   1006.,  1790.,  2702.,
      0.,     0.,     0.,     0.,     190.,   590.,   1118.,  1774.,  350.,
      1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,
      4956.,  6524.,  6490.,  8970.,  11834., 15082., 4956.,  6524.,  8348.,
      10428., 8348.,  10428., 12764., 15356., 350.,   1006.,  1790.,  2702.,
      2558.,  3470.,  4510.,  5678.,  0.,     0.,     0.,     0.,     860.,
      2428.,  4252.,  6332.,  4252.,  6332.,  8668.,  11260., 9592.,  12216.,
      15352., 19000., 14328., 17976., 22136., 26808., 6356.,  10548., 15508.,
      21236., 10232., 13880., 18040., 22712., 5496.,  8120.,  11256., 14904.,
      6300.,  8380.,  10716., 13308., 4956.,  6524.,  8348.,  10428., 0.,
      0.,     0.,     0.,     4252.,  6332.,  8668.,  11260., 7004.,  8572.,
      10396., 12476., 14328., 17976., 22136., 26808., 1400.,  4024.,  7160.,
      10808., 14484., 20212., 26708., 33972., 5496.,  8120.,  11256., 14904.,
      10232., 13880., 18040., 22712., 4956.,  6524.,  8348.,  10428., 8348.,
      10428., 12764., 15356., 0.,     0.,     0.,     0.,     7004.,  8572.,
      10396., 12476., 10396., 12476., 14812., 17404., 1400.,  4024.,  7160.,
      10808., 6136.,  9784.,  13944., 18616., 12500., 16692., 21652., 27380.,
      10232., 13880., 18040., 22712., 5496.,  8120.,  11256., 14904., 8348.,
      10428., 12764., 15356., 2908.,  4476.,  6300.,  8380.,  0.,     0.,
      0.,     0.,     10206., 11886., 13694., 15630., 510.,   1422.,  2462.,
      3630.,  4252.,  6332.,  8668.,  11260., 7004.,  8572.,  10396., 12476.,
      14138., 17386., 21018., 25034., 540.,   1596.,  2908.,  4476.,  1884.,
      3452.,  5276.,  7356.,  2558.,  3470.,  4510.,  5678.,  3742.,  4910.,
      6206.,  7630.,  0.,     0.,     0.,     0.,     510.,   1422.,  2462.,
      3630.,  3742.,  4910.,  6206.,  7630.,  7004.,  8572.,  10396., 12476.,
      10396., 12476., 14812., 17404., 1050.,  3018.,  5370.,  8106.,  1884.,
      3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  3742.,  4910.,
      6206.,  7630.,  190.,   590.,   1118.,  1774.,  0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20.,   23.,   44.,  39.,   68.,   55.,   62.,   56.,   70.,   124.,
      102.,  172.,  134., 156.,  126.,  140.,  244.,  192.,  322.,  244.,
      266.,  233.,  266., 450.,  344.,  567.,  422.,  467.,  318.,  348.,
      556.,  400.,  634., 452.,  490.,  521.,  578.,  918.,  656.,  1035.,
      734.,  803.,  510., 556.,  868.,  608.,  946.,  660.,  714.,  809.,
      890.,  1386., 968., 1503., 1046., 1139., 702.,  764.,  1180., 816.,
      1258., 868.,  938., 1012., 1074., 1660., 1146., 1768., 1218., 1288.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  6.,   7.,   20.,  23.,  26.,
      18.,  20.,  14.,  18.,  48.,  58.,  68.,  44.,  50.,  34.,  38.,  98.,
      108., 118., 74.,  80.,  59.,  68.,  169., 190., 211., 128., 140., 78.,
      86.,  194., 212., 230., 130., 140., 118., 126., 284., 302., 320., 180.,
      190., 80.,  85.,  186., 197., 208., 114., 120., 105., 110., 241., 252.,
      263., 144., 150., 0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      128.,  148.,  295.,   272.,  481.,   396.,  448.,   368.,  472.,
      854.,  720.,  1226.,  968.,  1136.,  888.,  992.,   1754., 1400.,
      2366., 1808., 1976.,  1660., 1912.,  3267., 2524.,  4185., 3136.,
      3484., 2392., 2624.,  4202., 3032.,  4814., 3440.,  3736., 3916.,
      4360., 6939., 4972.,  7857., 5584.,  6124., 3896.,  4256., 6650.,
      4664., 7262., 5072.,  5496., 6172.,  6808., 10611., 7420., 11529.,
      8032., 8764., 5400.,  5888., 9098.,  6296., 9710.,  6704., 7256.,
      7840., 8328., 12878., 8896., 13730., 9464., 10016.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   35.,   41.,   128.,
      148.,  168.,  123.,  137.,  82.,   110.,  312.,  384.,  456.,  306.,
      350.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,  391.,  457.,
      1172., 1328., 1484., 919.,  1009., 566.,  626.,  1424., 1560., 1696.,
      966.,  1042., 866.,  926.,  2104., 2240., 2376., 1346., 1422., 599.,
      637.,  1400., 1484., 1568., 863.,  909.,  789.,  827.,  1820., 1904.,
      1988., 1093., 1139., 0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      900.,   1044.,  2138.,  2020.,  3602.,  2996.,  3396.,  2632.,  3432.,
      6292.,  5384.,  9220.,  7336.,  8648.,  5992.,  5128.,  10948., 6312.,
      13748., 7496.,  8808.,  10172., 12140., 19830., 14940., 24030., 17740.,
      20476., 13800., 9864.,  22148., 11048., 24948., 12232., 14568., 19836.,
      23340., 36630., 26140., 40830., 28940., 33212., 21608., 14600., 33348.,
      15784., 36148., 16968., 20328., 26172., 29164., 45366., 31964., 49566.,
      34764., 38524., 15848., 3720.,  21124., 4904.,  23924., 6088.,  8424.,
      11016., 12840., 20788., 15304., 24484., 17768., 20104.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   230.,   270.,
      900.,   1044.,  1188.,  902.,   1006.,  540.,   748.,   2216.,  2760.,
      3304.,  2268.,  2604.,  1580.,  1788.,  4936.,  5480.,  6024.,  3948.,
      4284.,  2810.,  3314.,  8668.,  9868.,  11068., 6938.,  7634.,  4300.,
      4764.,  10888., 11944., 13000., 7436.,  8028.,  6620.,  7084.,  16168.,
      17224., 18280., 10396., 10988., 4630.,  4926.,  10852., 11508., 12164.,
      6710.,  7070.,  6110.,  6406.,  14132., 14788., 15444., 8510.,  8870.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48.,   80.,   56.,   92.,   119.,  176.,  116.,  156.,  209.,  272.,
      176.,  220.,  200.,  248.,  144.,  224.,  192.,  280.,  358.,  496.,
      312.,  408.,  538.,  688.,  432.,  536.,  512.,  624.,  384.,  504.,
      432.,  560.,  778.,  976.,  632.,  768.,  1078., 1288., 832.,  976.,
      912.,  1064., 728.,  932.,  848.,  1064., 1467., 1800., 1148., 1376.,
      1917., 2268., 1448., 1688., 1616., 1868., 1120., 1272., 1232., 1392.,
      1978., 2224., 1432., 1600., 2278., 2536., 1632., 1808., 1776., 1960.,
      1832., 2084., 2048., 2312., 3267., 3672., 2348., 2624., 3717., 4140.,
      2648., 2936., 2912., 3212., 1856., 2040., 2032., 2224., 3178., 3472.,
      2232., 2432., 3478., 3784., 2432., 2640., 2640., 2856., 2936., 3236.,
      3248., 3560., 5067., 5544., 3548., 3872., 5517., 6012., 3848., 4184.,
      4208., 4556., 2592., 2808., 2832., 3056., 4378., 4720., 3032., 3264.,
      4678., 5032., 3232., 3472., 3504., 3752., 3792., 4048., 4032., 4296.,
      6238., 6640., 4312., 4584., 6658., 7072., 4592., 4872., 4864., 5152.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,  32.,  24.,  44.,   21.,
      32.,   27.,   40.,   11.,   24.,   13.,   28.,  48.,  80.,  56.,   92.,
      64.,   104.,  51.,   72.,   57.,   80.,   26.,  56.,  38.,  72.,   120.,
      192.,  152.,  232.,  184.,  272.,  130.,  176., 150., 200., 86.,   136.,
      98.,   152.,  280.,  392.,  312.,  432.,  344., 472., 230., 296.,  250.,
      320.,  155.,  236.,  185.,  272.,  496.,  676., 568., 760., 640.,  844.,
      407.,  512.,  449.,  560.,  254.,  312.,  282., 344., 648., 776.,  712.,
      848.,  776.,  920.,  446.,  520.,  482.,  560., 394., 472., 422.,  504.,
      968.,  1136., 1032., 1208., 1096., 1280., 626., 720., 662., 760.,  279.,
      320.,  297.,  340.,  656.,  744.,  696.,  788., 736., 832., 407.,  456.,
      429.,  480.,  369.,  420.,  387.,  440.,  856., 964., 896., 1008., 936.,
      1052., 517.,  576.,  539.,  600.,  0.,    0.,   0.,   0.,   0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,   0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      326.,   574.,   382.,   662.,   847.,   1291.,  854.,   1166.,  1555.,
      2047.,  1326.,  1670.,  1510.,  1886.,  1004.,  1628.,  1372.,  2060.,
      2606.,  3686.,  2316.,  3068.,  4022.,  5198.,  3260.,  4076.,  3884.,
      4764.,  2844.,  3788.,  3212.,  4220.,  5846.,  7406.,  4796.,  5868.,
      8222.,  9878.,  6380.,  7516.,  7004.,  8204.,  5434.,  7042.,  6370.,
      8074.,  11097., 13725., 8746.,  10546., 14661., 17433., 11122., 13018.,
      12442., 14434., 8668.,  9868.,  9548.,  10812., 15350., 17294., 11132.,
      12460., 17726., 19766., 12716., 14108., 13852., 15308., 14170., 16162.,
      15874., 17962., 25353., 28557., 18250., 20434., 28917., 32265., 20626.,
      22906., 22714., 25090., 14492., 15948., 15884., 17404., 24854., 27182.,
      17468., 19052., 27230., 29654., 19052., 20700., 20700., 22412., 22906.,
      25282., 25378., 27850., 39609., 43389., 27754., 30322., 43173., 47097.,
      30130., 32794., 32986., 35746., 20316., 22028., 22220., 23996., 34358.,
      37070., 23804., 25644., 36734., 39542., 25388., 27292., 27548., 29516.,
      29836., 31868., 31740., 33836., 49118., 52310., 33964., 36124., 52454.,
      55742., 36188., 38412., 38348., 40636.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    25.,   17.,   53.,   46.,   134.,  102.,  222.,  158.,  310.,
      149.,  233.,  193.,  293.,  65.,   165.,  77.,   193.,  326.,  574.,
      382.,  662.,  438.,  750.,  369.,  533.,  413.,  593.,  154.,  386.,
      242.,  506.,  828.,  1388., 1068., 1692., 1308., 1996., 954.,  1314.,
      1106., 1498., 594.,  986.,  682.,  1106., 2028., 2908., 2268., 3212.,
      2508., 3516., 1714., 2234., 1866., 2418., 1087., 1723., 1315., 1999.,
      3626., 5042., 4178., 5690., 4730., 6338., 3055., 3883., 3379., 4255.,
      1922., 2378., 2138., 2626., 4940., 5948., 5436., 6508., 5932., 7068.,
      3426., 4010., 3706., 4322., 3002., 3618., 3218., 3866., 7420., 8748.,
      7916., 9308., 8412., 9868., 4826., 5570., 5106., 5882., 2153., 2477.,
      2293., 2633., 5078., 5774., 5390., 6118., 5702., 6462., 3161., 3549.,
      3333., 3737., 2853., 3257., 2993., 3413., 6638., 7494., 6950., 7838.,
      7262., 8182., 4021., 4489., 4193., 4677., 0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2380.,  4332.,  2156.,  3340.,  5722.,  8202.,  3852.,  5292.,  9290.,
      12154., 5548.,  7244.,  6988.,  8940.,  4120.,  7000.,  7000.,  10392.,
      11764., 17236., 10392., 14296., 16852., 23092., 13784., 18200., 18712.,
      23640., 17880., 22296., 9240.,  12120., 25044., 31284., 11608., 15000.,
      31668., 38676., 13976., 17880., 18904., 23320., 10180., 14756., 13476.,
      18820., 22622., 30190., 20100., 26212., 30510., 39230., 26724., 33604.,
      28356., 34980., 13784., 18200., 5144.,  8024.,  22996., 29236., 7512.,
      10904., 29620., 36628., 9880.,  13784., 14808., 19224., 16964., 22564.,
      22308., 28676., 27678., 36782., 28932., 36068., 35566., 45822., 35556.,
      43460., 31044., 38692., 17880., 22296., 9240.,  12120., 25044., 31284.,
      11608., 15000., 31668., 38676., 13976., 17880., 18904., 23320., 10180.,
      14756., 13476., 18820., 22622., 30190., 20100., 26212., 30510., 39230.,
      26724., 33604., 28356., 34980., 13784., 18200., 5144.,  8024.,  22996.,
      29236., 7512.,  10904., 29620., 36628., 9880.,  13784., 14808., 19224.,
      13976., 17880., 16856., 21272., 19252., 25236., 22296., 27224., 25364.,
      32116., 27736., 33176., 19736., 24664.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1132.,
      2316.,  1118.,  1774.,  1454.,  2238.,  430.,   1214.,  510.,   1422.,
      2380.,  4332.,  2796.,  5004.,  3212.,  5676.,  2798.,  4094.,  3134.,
      4558.,  1020.,  2844.,  1692.,  3772.,  6104.,  10520., 7960.,  12888.,
      9816.,  15256., 7292.,  10140., 8476.,  11580., 4380.,  7484.,  3772.,
      5084.,  14104., 19032., 10584., 13976., 12440., 16344., 7836.,  9916.,
      9020.,  11356., 6810.,  9802.,  8586.,  11962., 20996., 28132., 25316.,
      33220., 29636., 38308., 18266., 22794., 20810., 25722., 14940., 18556.,
      7164.,  8988.,  29080., 35032., 19416., 23832., 23320., 28248., 13276.,
      15868., 15484., 18332., 13948., 16796., 15644., 18748., 35032., 41496.,
      38936., 45912., 42840., 50328., 24316., 28188., 26524., 30652., 16910.,
      19486., 350.,   1006.,  22284., 25772., 2988.,  4684.,  5452.,  7404.,
      3150.,  4190.,  4510.,  5678.,  4766.,  5934.,  5870.,  7166.,  12844.,
      15564., 15308., 18284., 17772., 21004., 9950.,  11630., 11310., 13118.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      134.,   192.,   254.,   320.,   158.,   224.,   294.,   368.,   371.,
      476.,   587.,   704.,   390.,   464.,   542.,   624.,   719.,   836.,
      959.,   1088.,  622.,   704.,   790.,   880.,   710.,   800.,   894.,
      992.,   428.,   576.,   732.,   896.,   604.,   768.,   940.,   1120.,
      1174.,  1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,
      2152.,  2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,
      2268.,  2496.,  1308.,  1536.,  1772.,  2016.,  1484.,  1728.,  1980.,
      2240.,  2734.,  3112.,  3502.,  3904.,  2268.,  2528.,  2796.,  3072.,
      3910.,  4312.,  4726.,  5152.,  3052.,  3328.,  3612.,  3904.,  3356.,
      3648.,  3948.,  4256.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,
      3818.,  4256.,  5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,
      5504.,  6993.,  7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,
      5978.,  6464.,  6962.,  7472.,  4188.,  4480.,  4780.,  5088.,  4620.,
      4928.,  5244.,  5568.,  7438.,  7912.,  8398.,  8896.,  5404.,  5728.,
      6060.,  6400.,  8614.,  9112.,  9622.,  10144., 6188.,  6528.,  6876.,
      7232.,  6748.,  7104.,  7468.,  7840.,  6842.,  7328.,  7826.,  8336.,
      7682.,  8192.,  8714.,  9248.,  12285., 13068., 13869., 14688., 8858.,
      9392.,  9938.,  10496., 14049., 14868., 15705., 16560., 10034., 10592.,
      11162., 11744., 11066., 11648., 12242., 12848., 7068.,  7424.,  7788.,
      8160.,  7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294., 13888.,
      8540.,  8928.,  9324.,  9728.,  13318., 13912., 14518., 15136., 9324.,
      9728.,  10140., 10560., 10140., 10560., 10988., 11424., 11162., 11744.,
      12338., 12944., 12386., 12992., 13610., 14240., 19341., 20268., 21213.,
      22176., 13562., 14192., 14834., 15488., 21105., 22068., 23049., 24048.,
      14738., 15392., 16058., 16736., 16154., 16832., 17522., 18224., 9948.,
      10368., 10796., 11232., 10892., 11328., 11772., 12224., 16846., 17512.,
      18190., 18880., 11676., 12128., 12588., 13056., 18022., 18712., 19414.,
      20128., 12460., 12928., 13404., 13888., 13532., 14016., 14508., 15008.,
      14668., 15168., 15676., 16192., 15612., 16128., 16652., 17184., 24166.,
      24952., 25750., 26560., 16716., 17248., 17788., 18336., 25822., 26632.,
      27454., 28288., 17820., 18368., 18924., 19488., 18892., 19456., 20028.,
      20608.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   5.,    12.,   21.,   32.,   14.,   32.,
      54.,   80.,   38.,   64.,   94.,   128.,  62.,   96.,   134.,  176.,
      65.,   84.,   105.,  128.,  85.,   108.,  133.,  160.,  21.,   44.,
      69.,   96.,   25.,   52.,   81.,   112.,  134.,  192.,  254.,  320.,
      158.,  224.,  294.,  368.,  182.,  256.,  334.,  416.,  165.,  204.,
      245.,  288.,  185.,  228.,  273.,  320.,  50.,   104.,  162.,  224.,
      90.,   152.,  218.,  288.,  348.,  480.,  620.,  768.,  460.,  608.,
      764.,  928.,  572.,  736.,  908.,  1088., 434.,  520.,  610.,  704.,
      506.,  600.,  698.,  800.,  250.,  344.,  442.,  544.,  290.,  392.,
      498.,  608.,  908.,  1120., 1340., 1568., 1020., 1248., 1484., 1728.,
      1132., 1376., 1628., 1888., 794.,  920.,  1050., 1184., 866.,  1000.,
      1138., 1280., 467.,  620.,  779.,  944.,  575.,  740.,  911.,  1088.,
      1642., 1984., 2338., 2704., 1906., 2272., 2650., 3040., 2170., 2560.,
      2962., 3376., 1427., 1628., 1835., 2048., 1583., 1796., 2015., 2240.,
      906.,  1016., 1130., 1248., 1010., 1128., 1250., 1376., 2348., 2592.,
      2844., 3104., 2588., 2848., 3116., 3392., 2828., 3104., 3388., 3680.,
      1642., 1784., 1930., 2080., 1778., 1928., 2082., 2240., 1426., 1576.,
      1730., 1888., 1530., 1688., 1850., 2016., 3548., 3872., 4204., 4544.,
      3788., 4128., 4476., 4832., 4028., 4384., 4748., 5120., 2322., 2504.,
      2690., 2880., 2458., 2648., 2842., 3040., 1037., 1116., 1197., 1280.,
      1105., 1188., 1273., 1360., 2454., 2624., 2798., 2976., 2606., 2784.,
      2966., 3152., 2758., 2944., 3134., 3328., 1533., 1628., 1725., 1824.,
      1617., 1716., 1817., 1920., 1377., 1476., 1577., 1680., 1445., 1548.,
      1653., 1760., 3214., 3424., 3638., 3856., 3366., 3584., 3806., 4032.,
      3518., 3744., 3974., 4208., 1953., 2068., 2185., 2304., 2037., 2156.,
      2277., 2400., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      962.,   1418.,  1906.,  2426.,  946.,   1210.,  1506.,  1834.,  2575.,
      3147.,  3767.,  4435.,  1762.,  2090.,  2450.,  2842.,  4311.,  4979.,
      5695.,  6459.,  2578.,  2970.,  3394.,  3850.,  3266.,  3722.,  4210.,
      4730.,  1732.,  2388.,  3108.,  3892.,  3108.,  3892.,  4740.,  5652.,
      5246.,  6518.,  7886.,  9350.,  4740.,  5652.,  6628.,  7668.,  7694.,
      9158.,  10718., 12374., 6372.,  7412.,  8516.,  9684.,  8772.,  9940.,
      11172., 12468., 8420.,  9460.,  10564., 11732., 4292.,  4948.,  5668.,
      6452.,  11790., 13254., 14814., 16470., 5412.,  6196.,  7044.,  7956.,
      15006., 16662., 18414., 20262., 6532.,  7444.,  8420.,  9460.,  8932.,
      9972.,  11076., 12244., 4566.,  5614.,  6758.,  7998.,  6118.,  7358.,
      8694.,  10126., 10437., 12185., 14077., 16113., 9334.,  10766., 12294.,
      13918., 14237., 16273., 18453., 20777., 12550., 14174., 15894., 17710.,
      13398., 14958., 16614., 18366., 6372.,  7412.,  8516.,  9684.,  2244.,
      2900.,  3620.,  4404.,  10766., 12230., 13790., 15446., 3364.,  4148.,
      4996.,  5908.,  13982., 15638., 17390., 19238., 4484.,  5396.,  6372.,
      7412.,  6884.,  7924.,  9028.,  10196., 7830.,  9134.,  10534., 12030.,
      10406., 11902., 13494., 15182., 12773., 14905., 17181., 19601., 13622.,
      15310., 17094., 18974., 16573., 18993., 21557., 24265., 16838., 18718.,
      20694., 22766., 14614., 16430., 18342., 20350., 8420.,  9460.,  10564.,
      11732., 4292.,  4948.,  5668.,  6452.,  11790., 13254., 14814., 16470.,
      5412.,  6196.,  7044.,  7956.,  15006., 16662., 18414., 20262., 6532.,
      7444.,  8420.,  9460.,  8932.,  9972.,  11076., 12244., 4566.,  5614.,
      6758.,  7998.,  6118.,  7358.,  8694.,  10126., 10437., 12185., 14077.,
      16113., 9334.,  10766., 12294., 13918., 14237., 16273., 18453., 20777.,
      12550., 14174., 15894., 17710., 13398., 14958., 16614., 18366., 6372.,
      7412.,  8516.,  9684.,  2244.,  2900.,  3620.,  4404.,  10766., 12230.,
      13790., 15446., 3364.,  4148.,  4996.,  5908.,  13982., 15638., 17390.,
      19238., 4484.,  5396.,  6372.,  7412.,  6884.,  7924.,  9028.,  10196.,
      6532.,  7444.,  8420.,  9460.,  7908.,  8948.,  10052., 11220., 8926.,
      10326., 11822., 13414., 10564., 11732., 12964., 14260., 11886., 13478.,
      15166., 16950., 13220., 14516., 15876., 17300., 9284.,  10452., 11684.,
      12980.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  125.,   305.,   501.,   713.,   149.,   361.,   589.,   833.,
      962.,   1418.,  1906.,  2426.,  1138.,  1658.,  2210.,  2794.,  1314.,
      1898.,  2514.,  3162.,  1245.,  1553.,  1877.,  2217.,  1397.,  1737.,
      2093.,  2465.,  298.,   722.,   1178.,  1666.,  602.,   1090.,  1610.,
      2162.,  2532.,  3572.,  4676.,  5844.,  3396.,  4564.,  5796.,  7092.,
      4260.,  5556.,  6916.,  8340.,  3306.,  3986.,  4698.,  5442.,  3866.,
      4610.,  5386.,  6194.,  1818.,  2562.,  3338.,  4146.,  2122.,  2930.,
      3770.,  4642.,  6852.,  8532.,  10276., 12084., 7716.,  9524.,  11396.,
      13332., 8580.,  10516., 12516., 14580., 6106.,  7106.,  8138.,  9202.,
      6666.,  7730.,  8826.,  9954.,  3439.,  4651.,  5911.,  7219.,  4279.,
      5587.,  6943.,  8347.,  12470., 15182., 17990., 20894., 14534., 17438.,
      20438., 23534., 16598., 19694., 22886., 26174., 11023., 12619., 14263.,
      15955., 12247., 13939., 15679., 17467., 7034.,  7906.,  8810.,  9746.,
      7850.,  8786.,  9754.,  10754., 18308., 20244., 22244., 24308., 20196.,
      22260., 24388., 26580., 22084., 24276., 26532., 28852., 12858., 13986.,
      15146., 16338., 13930., 15122., 16346., 17602., 11114., 12306., 13530.,
      14786., 11930., 13186., 14474., 15794., 27748., 30324., 32964., 35668.,
      29636., 32340., 35108., 37940., 31524., 34356., 37252., 40212., 18218.,
      19666., 21146., 22658., 19290., 20802., 22346., 23922., 8141.,  8769.,
      9413.,  10073., 8677.,  9337.,  10013., 10705., 19298., 20650., 22034.,
      23450., 20498., 21914., 23362., 24842., 21698., 23178., 24690., 26234.,
      12077., 12833., 13605., 14393., 12741., 13529., 14333., 15153., 10821.,
      11609., 12413., 13233., 11357., 12177., 13013., 13865., 25298., 26970.,
      28674., 30410., 26498., 28234., 30002., 31802., 27698., 29498., 31330.,
      33194., 15397., 16313., 17245., 18193., 16061., 17009., 17973., 18953.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  6490.,
      8970.,  11834., 15082., 4956.,  6524.,  8348.,  10428., 12090., 15338.,
      18970., 22986., 7324.,  9404.,  11740., 14332., 12764., 15356., 18204.,
      21308., 3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600., 16760.,
      8244.,  12180., 16884., 22356., 14648., 18808., 23480., 28664., 15348.,
      20820., 27060., 34068., 23480., 28664., 34360., 40568., 12600., 16760.,
      21432., 26616., 5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,
      11000., 15348., 20820., 27060., 34068., 7864.,  11000., 14648., 18808.,
      28596., 35604., 43380., 51924., 12600., 16760., 21432., 26616., 23480.,
      28664., 34360., 40568., 3668.,  6836.,  10772., 15476., 7700.,  12404.,
      17876., 24116., 11182., 16830., 23630., 31582., 20948., 27188., 34196.,
      41972., 20814., 28766., 37870., 48126., 34196., 41972., 50516., 59828.,
      19924., 26164., 33172., 40948., 5816.,  8952.,  12600., 16760., 3128.,
      5240.,  7864.,  11000., 15348., 20820., 27060., 34068., 7864.,  11000.,
      14648., 18808., 28596., 35604., 43380., 51924., 12600., 16760., 21432.,
      26616., 23480., 28664., 34360., 40568., 3668.,  6836.,  10772., 15476.,
      7700.,  12404., 17876., 24116., 11182., 16830., 23630., 31582., 20948.,
      27188., 34196., 41972., 20814., 28766., 37870., 48126., 34196., 41972.,
      50516., 59828., 19924., 26164., 33172., 40948., 5816.,  8952.,  12600.,
      16760., 3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068.,
      7864.,  11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600.,
      16760., 21432., 26616., 23480., 28664., 34360., 40568., 3668.,  6836.,
      10772., 15476., 7700.,  12404., 17876., 24116., 11182., 16830., 23630.,
      31582., 20948., 27188., 34196., 41972., 20814., 28766., 37870., 48126.,
      34196., 41972., 50516., 59828., 19924., 26164., 33172., 40948., 5816.,
      8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000., 15348., 20820.,
      27060., 34068., 7864.,  11000., 14648., 18808., 28596., 35604., 43380.,
      51924., 12600., 16760., 21432., 26616., 23480., 28664., 34360., 40568.,
      3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600., 16760., 8244.,
      12180., 16884., 22356., 14648., 18808., 23480., 28664., 15348., 20820.,
      27060., 34068., 23480., 28664., 34360., 40568., 12600., 16760., 21432.,
      26616.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,
      1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,
      4956.,  6524.,  3742.,  4910.,  6206.,  7630.,  190.,   590.,   1118.,
      1774.,  190.,   590.,   1118.,  1774.,  350.,   1006.,  1790.,  2702.,
      1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  3932.,
      5500.,  7324.,  9404.,  190.,   590.,   1118.,  1774.,  1374.,  2030.,
      2814.,  3726.,  700.,   2012.,  3580.,  5404.,  3068.,  4892.,  6972.,
      9308.,  7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664.,
      7864.,  11000., 14648., 18808., 11580., 13916., 16508., 19356., 3068.,
      4892.,  6972.,  9308.,  3068.,  4892.,  6972.,  9308.,  4796.,  6108.,
      7676.,  9500.,  14648., 18808., 23480., 28664., 7864.,  11000., 14648.,
      18808., 14648., 18808., 23480., 28664., 3068.,  4892.,  6972.,  9308.,
      7484.,  9820.,  12412., 15260., 4826.,  6282.,  8122.,  10346., 7354.,
      9578.,  12186., 15178., 8404.,  12596., 17556., 23284., 16532., 22260.,
      28756., 36020., 10452., 14644., 19604., 25332., 11226., 14730., 18618.,
      22890., 7354.,  9578.,  12186., 15178., 7164.,  8988.,  11068., 13404.,
      700.,   2012.,  3580.,  5404.,  14648., 18808., 23480., 28664., 7864.,
      11000., 14648., 18808., 14648., 18808., 23480., 28664., 7164.,  8988.,
      11068., 13404., 11580., 13916., 16508., 19356., 700.,   2012.,  3580.,
      5404.,  3068.,  4892.,  6972.,  9308.,  7864.,  11000., 14648., 18808.,
      14648., 18808., 23480., 28664., 7864.,  11000., 14648., 18808., 11580.,
      13916., 16508., 19356., 3068.,  4892.,  6972.,  9308.,  510.,   1422.,
      2462.,  3630.,  30.,    174.,   446.,   846.,   3932.,  5500.,  7324.,
      9404.,  540.,   1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,
      2558.,  3470.,  4510.,  5678.,  3742.,  4910.,  6206.,  7630.,  30.,
      174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,   1596.,
      2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,
      6524.,  3742.,  4910.,  6206.,  7630.,  190.,   590.,   1118.,  1774.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,   20.,   23.,   44.,   39.,   68.,   55.,   62.,   22.,   56.,
      70.,  124.,  102.,  172.,  134.,  156.,  52.,   126.,  140.,  244.,
      192., 322.,  244.,  266.,  100.,  233.,  266.,  450.,  344.,  567.,
      422., 467.,  148.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,
      244., 521.,  578.,  918.,  656.,  1035., 734.,  803.,  244.,  510.,
      556., 868.,  608.,  946.,  660.,  714.,  388.,  809.,  890.,  1386.,
      968., 1503., 1046., 1139., 340.,  702.,  764.,  1180., 816.,  1258.,
      868., 938.,  490.,  1012., 1074., 1660., 1146., 1768., 1218., 1288.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  0.,   6.,   7.,   20.,  23.,
      26.,  18.,  20.,  0.,   14.,  18.,  48.,  58.,  68.,  44.,  50.,  0.,
      34.,  38.,  98.,  108., 118., 74.,  80.,  0.,   59.,  68.,  169., 190.,
      211., 128., 140., 0.,   78.,  86.,  194., 212., 230., 130., 140., 0.,
      118., 126., 284., 302., 320., 180., 190., 0.,   80.,  85.,  186., 197.,
      208., 114., 120., 0.,   105., 110., 241., 252., 263., 144., 150., 0.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,   128.,   148.,  295.,  272.,  481.,   396.,  448.,   138.,  368.,
      472.,  854.,   720.,  1226., 968.,  1136.,  358.,  888.,   992.,  1754.,
      1400., 2366.,  1808., 1976., 701.,  1660.,  1912., 3267.,  2524., 4185.,
      3136., 3484.,  1110., 2392., 2624., 4202.,  3032., 4814.,  3440., 3736.,
      1829., 3916.,  4360., 6939., 4972., 7857.,  5584., 6124.,  1862., 3896.,
      4256., 6650.,  4664., 7262., 5072., 5496.,  2957., 6172.,  6808., 10611.,
      7420., 11529., 8032., 8764., 2614., 5400.,  5888., 9098.,  6296., 9710.,
      6704., 7256.,  3794., 7840., 8328., 12878., 8896., 13730., 9464., 10016.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   0.,    35.,   41.,
      128.,  148.,  168.,  123.,  137.,  0.,    82.,   110.,  312.,  384.,
      456.,  306.,  350.,  0.,    222.,  250.,  672.,  744.,  816.,  526.,
      570.,  0.,    391.,  457.,  1172., 1328., 1484., 919.,  1009., 0.,
      566.,  626.,  1424., 1560., 1696., 966.,  1042., 0.,    866.,  926.,
      2104., 2240., 2376., 1346., 1422., 0.,    599.,  637.,  1400., 1484.,
      1568., 863.,  909.,  0.,    789.,  827.,  1820., 1904., 1988., 1093.,
      1139., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,   900.,   1044.,  2138.,  2020.,  3602.,  2996.,  3396.,  956.,
      2632.,  3432.,  6292.,  5384.,  9220.,  7336.,  8648.,  1996.,  5992.,
      5128.,  10948., 6312.,  13748., 7496.,  8808.,  4578.,  10172., 12140.,
      19830., 14940., 24030., 17740., 20476., 3852.,  13800., 9864.,  22148.,
      11048., 24948., 12232., 14568., 9410.,  19836., 23340., 36630., 26140.,
      40830., 28940., 33212., 5708.,  21608., 14600., 33348., 15784., 36148.,
      16968., 20328., 12578., 26172., 29164., 45366., 31964., 49566., 34764.,
      38524., 780.,   15848., 3720.,  21124., 4904.,  23924., 6088.,  8424.,
      5020.,  11016., 12840., 20788., 15304., 24484., 17768., 20104.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,   180.,  324.,   468.,   382.,   486.,   0.,     230.,
      270.,   900.,  1044., 1188.,  902.,   1006.,  0.,     540.,   748.,
      2216.,  2760., 3304., 2268.,  2604.,  0.,     1580.,  1788.,  4936.,
      5480.,  6024., 3948., 4284.,  0.,     2810.,  3314.,  8668.,  9868.,
      11068., 6938., 7634., 0.,     4300.,  4764.,  10888., 11944., 13000.,
      7436.,  8028., 0.,    6620.,  7084.,  16168., 17224., 18280., 10396.,
      10988., 0.,    4630., 4926.,  10852., 11508., 12164., 6710.,  7070.,
      0.,     6110., 6406., 14132., 14788., 15444., 8510.,  8870.,  0.,
      0.,     0.,    0.,    0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,   28.,   48.,   80.,   56.,   92.,   119.,  176.,  116.,  156.,
      209.,  272.,  176.,  220.,  200.,  248.,  50.,   88.,   144.,  224.,
      192.,  280.,  358.,  496.,  312.,  408.,  538.,  688.,  432.,  536.,
      512.,  624.,  150.,  208.,  384.,  504.,  432.,  560.,  778.,  976.,
      632.,  768.,  1078., 1288., 832.,  976.,  912.,  1064., 301.,  400.,
      728.,  932.,  848.,  1064., 1467., 1800., 1148., 1376., 1917., 2268.,
      1448., 1688., 1616., 1868., 518.,  592.,  1120., 1272., 1232., 1392.,
      1978., 2224., 1432., 1600., 2278., 2536., 1632., 1808., 1776., 1960.,
      853.,  976.,  1832., 2084., 2048., 2312., 3267., 3672., 2348., 2624.,
      3717., 4140., 2648., 2936., 2912., 3212., 886.,  976.,  1856., 2040.,
      2032., 2224., 3178., 3472., 2232., 2432., 3478., 3784., 2432., 2640.,
      2640., 2856., 1405., 1552., 2936., 3236., 3248., 3560., 5067., 5544.,
      3548., 3872., 5517., 6012., 3848., 4184., 4208., 4556., 1254., 1360.,
      2592., 2808., 2832., 3056., 4378., 4720., 3032., 3264., 4678., 5032.,
      3232., 3472., 3504., 3752., 1834., 1960., 3792., 4048., 4032., 4296.,
      6238., 6640., 4312., 4584., 6658., 7072., 4592., 4872., 4864., 5152.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   3.,    8.,    8.,    20.,   16.,   32.,  24.,  44.,  21.,
      32.,  27.,  40.,   0.,    0.,    11.,   24.,   13.,  28.,  48.,  80.,
      56.,  92.,  64.,   104.,  51.,   72.,   57.,   80.,  0.,   0.,   26.,
      56.,  38.,  72.,   120.,  192.,  152.,  232.,  184., 272., 130., 176.,
      150., 200., 0.,    0.,    86.,   136.,  98.,   152., 280., 392., 312.,
      432., 344., 472.,  230.,  296.,  250.,  320.,  0.,   0.,   155., 236.,
      185., 272., 496.,  676.,  568.,  760.,  640.,  844., 407., 512., 449.,
      560., 0.,   0.,    254.,  312.,  282.,  344.,  648., 776., 712., 848.,
      776., 920., 446.,  520.,  482.,  560.,  0.,    0.,   394., 472., 422.,
      504., 968., 1136., 1032., 1208., 1096., 1280., 626., 720., 662., 760.,
      0.,   0.,   279.,  320.,  297.,  340.,  656.,  744., 696., 788., 736.,
      832., 407., 456.,  429.,  480.,  0.,    0.,    369., 420., 387., 440.,
      856., 964., 896.,  1008., 936.,  1052., 517.,  576., 539., 600., 0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,   0.,   0.,   0.,
      0.,   0.,   0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    193.,   326.,   574.,   382.,   662.,   847.,   1291.,  854.,
      1166.,  1555.,  2047.,  1326.,  1670.,  1510.,  1886.,  330.,   626.,
      1004.,  1628.,  1372.,  2060.,  2606.,  3686.,  2316.,  3068.,  4022.,
      5198.,  3260.,  4076.,  3884.,  4764.,  1090.,  1546.,  2844.,  3788.,
      3212.,  4220.,  5846.,  7406.,  4796.,  5868.,  8222.,  9878.,  6380.,
      7516.,  7004.,  8204.,  2219.,  2999.,  5434.,  7042.,  6370.,  8074.,
      11097., 13725., 8746.,  10546., 14661., 17433., 11122., 13018., 12442.,
      14434., 4002.,  4586.,  8668.,  9868.,  9548.,  10812., 15350., 17294.,
      11132., 12460., 17726., 19766., 12716., 14108., 13852., 15308., 6587.,
      7559.,  14170., 16162., 15874., 17962., 25353., 28557., 18250., 20434.,
      28917., 32265., 20626., 22906., 22714., 25090., 6914.,  7626.,  14492.,
      15948., 15884., 17404., 24854., 27182., 17468., 19052., 27230., 29654.,
      19052., 20700., 20700., 22412., 10955., 12119., 22906., 25282., 25378.,
      27850., 39609., 43389., 27754., 30322., 43173., 47097., 30130., 32794.,
      32986., 35746., 9826.,  10666., 20316., 22028., 22220., 23996., 34358.,
      37070., 23804., 25644., 36734., 39542., 25388., 27292., 27548., 29516.,
      14426., 15426., 29836., 31868., 31740., 33836., 49118., 52310., 33964.,
      36124., 52454., 55742., 36188., 38412., 38348., 40636.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    25.,   17.,   53.,   46.,   134.,  102.,  222.,  158.,  310.,
      149.,  233.,  193.,  293.,  0.,    0.,    65.,   165.,  77.,   193.,
      326.,  574.,  382.,  662.,  438.,  750.,  369.,  533.,  413.,  593.,
      0.,    0.,    154.,  386.,  242.,  506.,  828.,  1388., 1068., 1692.,
      1308., 1996., 954.,  1314., 1106., 1498., 0.,    0.,    594.,  986.,
      682.,  1106., 2028., 2908., 2268., 3212., 2508., 3516., 1714., 2234.,
      1866., 2418., 0.,    0.,    1087., 1723., 1315., 1999., 3626., 5042.,
      4178., 5690., 4730., 6338., 3055., 3883., 3379., 4255., 0.,    0.,
      1922., 2378., 2138., 2626., 4940., 5948., 5436., 6508., 5932., 7068.,
      3426., 4010., 3706., 4322., 0.,    0.,    3002., 3618., 3218., 3866.,
      7420., 8748., 7916., 9308., 8412., 9868., 4826., 5570., 5106., 5882.,
      0.,    0.,    2153., 2477., 2293., 2633., 5078., 5774., 5390., 6118.,
      5702., 6462., 3161., 3549., 3333., 3737., 0.,    0.,    2853., 3257.,
      2993., 3413., 6638., 7494., 6950., 7838., 7262., 8182., 4021., 4489.,
      4193., 4677., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,   1422.,  2380.,  4332.,  2156.,  3340.,  5722.,  8202.,  3852.,
      5292.,  9290.,  12154., 5548.,  7244.,  6988.,  8940.,  1724.,  3036.,
      4120.,  7000.,  7000.,  10392., 11764., 17236., 10392., 14296., 16852.,
      23092., 13784., 18200., 18712., 23640., 7004.,  8572.,  17880., 22296.,
      9240.,  12120., 25044., 31284., 11608., 15000., 31668., 38676., 13976.,
      17880., 18904., 23320., 4202.,  6298.,  10180., 14756., 13476., 18820.,
      22622., 30190., 20100., 26212., 30510., 39230., 26724., 33604., 28356.,
      34980., 860.,   2428.,  13784., 18200., 5144.,  8024.,  22996., 29236.,
      7512.,  10904., 29620., 36628., 9880.,  13784., 14808., 19224., 7594.,
      10202., 16964., 22564., 22308., 28676., 27678., 36782., 28932., 36068.,
      35566., 45822., 35556., 43460., 31044., 38692., 7004.,  8572.,  17880.,
      22296., 9240.,  12120., 25044., 31284., 11608., 15000., 31668., 38676.,
      13976., 17880., 18904., 23320., 4202.,  6298.,  10180., 14756., 13476.,
      18820., 22622., 30190., 20100., 26212., 30510., 39230., 26724., 33604.,
      28356., 34980., 860.,   2428.,  13784., 18200., 5144.,  8024.,  22996.,
      29236., 7512.,  10904., 29620., 36628., 9880.,  13784., 14808., 19224.,
      6140.,  7964.,  13976., 17880., 16856., 21272., 19252., 25236., 22296.,
      27224., 25364., 32116., 27736., 33176., 19736., 24664.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1132.,
      2316.,  1118.,  1774.,  1454.,  2238.,  0.,     0.,     430.,   1214.,
      510.,   1422.,  2380.,  4332.,  2796.,  5004.,  3212.,  5676.,  2798.,
      4094.,  3134.,  4558.,  0.,     0.,     1020.,  2844.,  1692.,  3772.,
      6104.,  10520., 7960.,  12888., 9816.,  15256., 7292.,  10140., 8476.,
      11580., 0.,     0.,     4380.,  7484.,  3772.,  5084.,  14104., 19032.,
      10584., 13976., 12440., 16344., 7836.,  9916.,  9020.,  11356., 0.,
      0.,     6810.,  9802.,  8586.,  11962., 20996., 28132., 25316., 33220.,
      29636., 38308., 18266., 22794., 20810., 25722., 0.,     0.,     14940.,
      18556., 7164.,  8988.,  29080., 35032., 19416., 23832., 23320., 28248.,
      13276., 15868., 15484., 18332., 0.,     0.,     13948., 16796., 15644.,
      18748., 35032., 41496., 38936., 45912., 42840., 50328., 24316., 28188.,
      26524., 30652., 0.,     0.,     16910., 19486., 350.,   1006.,  22284.,
      25772., 2988.,  4684.,  5452.,  7404.,  3150.,  4190.,  4510.,  5678.,
      0.,     0.,     4766.,  5934.,  5870.,  7166.,  12844., 15564., 15308.,
      18284., 17772., 21004., 9950.,  11630., 11310., 13118., 0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,
      542.,   624.,   719.,   836.,   959.,   1088.,  622.,   704.,   790.,
      880.,   710.,   800.,   894.,   992.,   130.,   200.,   274.,   352.,
      428.,   576.,   732.,   896.,   604.,   768.,   940.,   1120.,  1174.,
      1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,  2152.,
      2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,  2268.,
      2496.,  490.,   600.,   714.,   832.,   1308.,  1536.,  1772.,  2016.,
      1484.,  1728.,  1980.,  2240.,  2734.,  3112.,  3502.,  3904.,  2268.,
      2528.,  2796.,  3072.,  3910.,  4312.,  4726.,  5152.,  3052.,  3328.,
      3612.,  3904.,  3356.,  3648.,  3948.,  4256.,  1015.,  1204.,  1399.,
      1600.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,  3818.,  4256.,
      5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,  5504.,  6993.,
      7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,  5978.,  6464.,
      6962.,  7472.,  1930.,  2072.,  2218.,  2368.,  4188.,  4480.,  4780.,
      5088.,  4620.,  4928.,  5244.,  5568.,  7438.,  7912.,  8398.,  8896.,
      5404.,  5728.,  6060.,  6400.,  8614.,  9112.,  9622.,  10144., 6188.,
      6528.,  6876.,  7232.,  6748.,  7104.,  7468.,  7840.,  3175.,  3412.,
      3655.,  3904.,  6842.,  7328.,  7826.,  8336.,  7682.,  8192.,  8714.,
      9248.,  12285., 13068., 13869., 14688., 8858.,  9392.,  9938.,  10496.,
      14049., 14868., 15705., 16560., 10034., 10592., 11162., 11744., 11066.,
      11648., 12242., 12848., 3370.,  3544.,  3722.,  3904.,  7068.,  7424.,
      7788.,  8160.,  7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294.,
      13888., 8540.,  8928.,  9324.,  9728.,  13318., 13912., 14518., 15136.,
      9324.,  9728.,  10140., 10560., 10140., 10560., 10988., 11424., 5335.,
      5620.,  5911.,  6208.,  11162., 11744., 12338., 12944., 12386., 12992.,
      13610., 14240., 19341., 20268., 21213., 22176., 13562., 14192., 14834.,
      15488., 21105., 22068., 23049., 24048., 14738., 15392., 16058., 16736.,
      16154., 16832., 17522., 18224., 4810.,  5016.,  5226.,  5440.,  9948.,
      10368., 10796., 11232., 10892., 11328., 11772., 12224., 16846., 17512.,
      18190., 18880., 11676., 12128., 12588., 13056., 18022., 18712., 19414.,
      20128., 12460., 12928., 13404., 13888., 13532., 14016., 14508., 15008.,
      7090.,  7336.,  7586.,  7840.,  14668., 15168., 15676., 16192., 15612.,
      16128., 16652., 17184., 24166., 24952., 25750., 26560., 16716., 17248.,
      17788., 18336., 25822., 26632., 27454., 28288., 17820., 18368., 18924.,
      19488., 18892., 19456., 20028., 20608.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   5.,    12.,   21.,   32.,   14.,   32.,
      54.,   80.,   38.,   64.,   94.,   128.,  62.,   96.,   134.,  176.,
      65.,   84.,   105.,  128.,  85.,   108.,  133.,  160.,  0.,    0.,
      0.,    0.,    21.,   44.,   69.,   96.,   25.,   52.,   81.,   112.,
      134.,  192.,  254.,  320.,  158.,  224.,  294.,  368.,  182.,  256.,
      334.,  416.,  165.,  204.,  245.,  288.,  185.,  228.,  273.,  320.,
      0.,    0.,    0.,    0.,    50.,   104.,  162.,  224.,  90.,   152.,
      218.,  288.,  348.,  480.,  620.,  768.,  460.,  608.,  764.,  928.,
      572.,  736.,  908.,  1088., 434.,  520.,  610.,  704.,  506.,  600.,
      698.,  800.,  0.,    0.,    0.,    0.,    250.,  344.,  442.,  544.,
      290.,  392.,  498.,  608.,  908.,  1120., 1340., 1568., 1020., 1248.,
      1484., 1728., 1132., 1376., 1628., 1888., 794.,  920.,  1050., 1184.,
      866.,  1000., 1138., 1280., 0.,    0.,    0.,    0.,    467.,  620.,
      779.,  944.,  575.,  740.,  911.,  1088., 1642., 1984., 2338., 2704.,
      1906., 2272., 2650., 3040., 2170., 2560., 2962., 3376., 1427., 1628.,
      1835., 2048., 1583., 1796., 2015., 2240., 0.,    0.,    0.,    0.,
      906.,  1016., 1130., 1248., 1010., 1128., 1250., 1376., 2348., 2592.,
      2844., 3104., 2588., 2848., 3116., 3392., 2828., 3104., 3388., 3680.,
      1642., 1784., 1930., 2080., 1778., 1928., 2082., 2240., 0.,    0.,
      0.,    0.,    1426., 1576., 1730., 1888., 1530., 1688., 1850., 2016.,
      3548., 3872., 4204., 4544., 3788., 4128., 4476., 4832., 4028., 4384.,
      4748., 5120., 2322., 2504., 2690., 2880., 2458., 2648., 2842., 3040.,
      0.,    0.,    0.,    0.,    1037., 1116., 1197., 1280., 1105., 1188.,
      1273., 1360., 2454., 2624., 2798., 2976., 2606., 2784., 2966., 3152.,
      2758., 2944., 3134., 3328., 1533., 1628., 1725., 1824., 1617., 1716.,
      1817., 1920., 0.,    0.,    0.,    0.,    1377., 1476., 1577., 1680.,
      1445., 1548., 1653., 1760., 3214., 3424., 3638., 3856., 3366., 3584.,
      3806., 4032., 3518., 3744., 3974., 4208., 1953., 2068., 2185., 2304.,
      2037., 2156., 2277., 2400., 0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  946.,
      1210.,  1506.,  1834.,  2575.,  3147.,  3767.,  4435.,  1762.,  2090.,
      2450.,  2842.,  4311.,  4979.,  5695.,  6459.,  2578.,  2970.,  3394.,
      3850.,  3266.,  3722.,  4210.,  4730.,  714.,   1010.,  1338.,  1698.,
      1732.,  2388.,  3108.,  3892.,  3108.,  3892.,  4740.,  5652.,  5246.,
      6518.,  7886.,  9350.,  4740.,  5652.,  6628.,  7668.,  7694.,  9158.,
      10718., 12374., 6372.,  7412.,  8516.,  9684.,  8772.,  9940.,  11172.,
      12468., 3322.,  3682.,  4074.,  4498.,  8420.,  9460.,  10564., 11732.,
      4292.,  4948.,  5668.,  6452.,  11790., 13254., 14814., 16470., 5412.,
      6196.,  7044.,  7956.,  15006., 16662., 18414., 20262., 6532.,  7444.,
      8420.,  9460.,  8932.,  9972.,  11076., 12244., 1863.,  2339.,  2863.,
      3435.,  4566.,  5614.,  6758.,  7998.,  6118.,  7358.,  8694.,  10126.,
      10437., 12185., 14077., 16113., 9334.,  10766., 12294., 13918., 14237.,
      16273., 18453., 20777., 12550., 14174., 15894., 17710., 13398., 14958.,
      16614., 18366., 250.,   610.,   1002.,  1426.,  6372.,  7412.,  8516.,
      9684.,  2244.,  2900.,  3620.,  4404.,  10766., 12230., 13790., 15446.,
      3364.,  4148.,  4996.,  5908.,  13982., 15638., 17390., 19238., 4484.,
      5396.,  6372.,  7412.,  6884.,  7924.,  9028.,  10196., 3495.,  4099.,
      4751.,  5451.,  7830.,  9134.,  10534., 12030., 10406., 11902., 13494.,
      15182., 12773., 14905., 17181., 19601., 13622., 15310., 17094., 18974.,
      16573., 18993., 21557., 24265., 16838., 18718., 20694., 22766., 14614.,
      16430., 18342., 20350., 3322.,  3682.,  4074.,  4498.,  8420.,  9460.,
      10564., 11732., 4292.,  4948.,  5668.,  6452.,  11790., 13254., 14814.,
      16470., 5412.,  6196.,  7044.,  7956.,  15006., 16662., 18414., 20262.,
      6532.,  7444.,  8420.,  9460.,  8932.,  9972.,  11076., 12244., 1863.,
      2339.,  2863.,  3435.,  4566.,  5614.,  6758.,  7998.,  6118.,  7358.,
      8694.,  10126., 10437., 12185., 14077., 16113., 9334.,  10766., 12294.,
      13918., 14237., 16273., 18453., 20777., 12550., 14174., 15894., 17710.,
      13398., 14958., 16614., 18366., 250.,   610.,   1002.,  1426.,  6372.,
      7412.,  8516.,  9684.,  2244.,  2900.,  3620.,  4404.,  10766., 12230.,
      13790., 15446., 3364.,  4148.,  4996.,  5908.,  13982., 15638., 17390.,
      19238., 4484.,  5396.,  6372.,  7412.,  6884.,  7924.,  9028.,  10196.,
      2858.,  3282.,  3738.,  4226.,  6532.,  7444.,  8420.,  9460.,  7908.,
      8948.,  10052., 11220., 8926.,  10326., 11822., 13414., 10564., 11732.,
      12964., 14260., 11886., 13478., 15166., 16950., 13220., 14516., 15876.,
      17300., 9284.,  10452., 11684., 12980.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  0.,     0.,     0.,     0.,     125.,   305.,   501.,   713.,
      149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  1138.,
      1658.,  2210.,  2794.,  1314.,  1898.,  2514.,  3162.,  1245.,  1553.,
      1877.,  2217.,  1397.,  1737.,  2093.,  2465.,  0.,     0.,     0.,
      0.,     298.,   722.,   1178.,  1666.,  602.,   1090.,  1610.,  2162.,
      2532.,  3572.,  4676.,  5844.,  3396.,  4564.,  5796.,  7092.,  4260.,
      5556.,  6916.,  8340.,  3306.,  3986.,  4698.,  5442.,  3866.,  4610.,
      5386.,  6194.,  0.,     0.,     0.,     0.,     1818.,  2562.,  3338.,
      4146.,  2122.,  2930.,  3770.,  4642.,  6852.,  8532.,  10276., 12084.,
      7716.,  9524.,  11396., 13332., 8580.,  10516., 12516., 14580., 6106.,
      7106.,  8138.,  9202.,  6666.,  7730.,  8826.,  9954.,  0.,     0.,
      0.,     0.,     3439.,  4651.,  5911.,  7219.,  4279.,  5587.,  6943.,
      8347.,  12470., 15182., 17990., 20894., 14534., 17438., 20438., 23534.,
      16598., 19694., 22886., 26174., 11023., 12619., 14263., 15955., 12247.,
      13939., 15679., 17467., 0.,     0.,     0.,     0.,     7034.,  7906.,
      8810.,  9746.,  7850.,  8786.,  9754.,  10754., 18308., 20244., 22244.,
      24308., 20196., 22260., 24388., 26580., 22084., 24276., 26532., 28852.,
      12858., 13986., 15146., 16338., 13930., 15122., 16346., 17602., 0.,
      0.,     0.,     0.,     11114., 12306., 13530., 14786., 11930., 13186.,
      14474., 15794., 27748., 30324., 32964., 35668., 29636., 32340., 35108.,
      37940., 31524., 34356., 37252., 40212., 18218., 19666., 21146., 22658.,
      19290., 20802., 22346., 23922., 0.,     0.,     0.,     0.,     8141.,
      8769.,  9413.,  10073., 8677.,  9337.,  10013., 10705., 19298., 20650.,
      22034., 23450., 20498., 21914., 23362., 24842., 21698., 23178., 24690.,
      26234., 12077., 12833., 13605., 14393., 12741., 13529., 14333., 15153.,
      0.,     0.,     0.,     0.,     10821., 11609., 12413., 13233., 11357.,
      12177., 13013., 13865., 25298., 26970., 28674., 30410., 26498., 28234.,
      30002., 31802., 27698., 29498., 31330., 33194., 15397., 16313., 17245.,
      18193., 16061., 17009., 17973., 18953., 0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      350.,   1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,
      3644.,  4956.,  6524.,  6490.,  8970.,  11834., 15082., 4956.,  6524.,
      8348.,  10428., 12090., 15338., 18970., 22986., 7324.,  9404.,  11740.,
      14332., 12764., 15356., 18204., 21308., 700.,   2012.,  3580.,  5404.,
      3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600., 16760., 8244.,
      12180., 16884., 22356., 14648., 18808., 23480., 28664., 15348., 20820.,
      27060., 34068., 23480., 28664., 34360., 40568., 12600., 16760., 21432.,
      26616., 380.,   1180.,  2236.,  3548.,  5816.,  8952.,  12600., 16760.,
      3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068., 7864.,
      11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600., 16760.,
      21432., 26616., 23480., 28664., 34360., 40568., 890.,   2602.,  4698.,
      7178.,  3668.,  6836.,  10772., 15476., 7700.,  12404., 17876., 24116.,
      11182., 16830., 23630., 31582., 20948., 27188., 34196., 41972., 20814.,
      28766., 37870., 48126., 34196., 41972., 50516., 59828., 19924., 26164.,
      33172., 40948., 380.,   1180.,  2236.,  3548.,  5816.,  8952.,  12600.,
      16760., 3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068.,
      7864.,  11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600.,
      16760., 21432., 26616., 23480., 28664., 34360., 40568., 890.,   2602.,
      4698.,  7178.,  3668.,  6836.,  10772., 15476., 7700.,  12404., 17876.,
      24116., 11182., 16830., 23630., 31582., 20948., 27188., 34196., 41972.,
      20814., 28766., 37870., 48126., 34196., 41972., 50516., 59828., 19924.,
      26164., 33172., 40948., 380.,   1180.,  2236.,  3548.,  5816.,  8952.,
      12600., 16760., 3128.,  5240.,  7864.,  11000., 15348., 20820., 27060.,
      34068., 7864.,  11000., 14648., 18808., 28596., 35604., 43380., 51924.,
      12600., 16760., 21432., 26616., 23480., 28664., 34360., 40568., 890.,
      2602.,  4698.,  7178.,  3668.,  6836.,  10772., 15476., 7700.,  12404.,
      17876., 24116., 11182., 16830., 23630., 31582., 20948., 27188., 34196.,
      41972., 20814., 28766., 37870., 48126., 34196., 41972., 50516., 59828.,
      19924., 26164., 33172., 40948., 380.,   1180.,  2236.,  3548.,  5816.,
      8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000., 15348., 20820.,
      27060., 34068., 7864.,  11000., 14648., 18808., 28596., 35604., 43380.,
      51924., 12600., 16760., 21432., 26616., 23480., 28664., 34360., 40568.,
      700.,   2012.,  3580.,  5404.,  3128.,  5240.,  7864.,  11000., 5816.,
      8952.,  12600., 16760., 8244.,  12180., 16884., 22356., 14648., 18808.,
      23480., 28664., 15348., 20820., 27060., 34068., 23480., 28664., 34360.,
      40568., 12600., 16760., 21432., 26616.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,
      1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,
      4956.,  6524.,  3742.,  4910.,  6206.,  7630.,  190.,   590.,   1118.,
      1774.,  0.,     0.,     0.,     0.,     190.,   590.,   1118.,  1774.,
      350.,   1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,
      3644.,  4956.,  6524.,  3932.,  5500.,  7324.,  9404.,  190.,   590.,
      1118.,  1774.,  1374.,  2030.,  2814.,  3726.,  0.,     0.,     0.,
      0.,     700.,   2012.,  3580.,  5404.,  3068.,  4892.,  6972.,  9308.,
      7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664., 7864.,
      11000., 14648., 18808., 11580., 13916., 16508., 19356., 3068.,  4892.,
      6972.,  9308.,  0.,     0.,     0.,     0.,     3068.,  4892.,  6972.,
      9308.,  4796.,  6108.,  7676.,  9500.,  14648., 18808., 23480., 28664.,
      7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664., 3068.,
      4892.,  6972.,  9308.,  7484.,  9820.,  12412., 15260., 0.,     0.,
      0.,     0.,     4826.,  6282.,  8122.,  10346., 7354.,  9578.,  12186.,
      15178., 8404.,  12596., 17556., 23284., 16532., 22260., 28756., 36020.,
      10452., 14644., 19604., 25332., 11226., 14730., 18618., 22890., 7354.,
      9578.,  12186., 15178., 0.,     0.,     0.,     0.,     7164.,  8988.,
      11068., 13404., 700.,   2012.,  3580.,  5404.,  14648., 18808., 23480.,
      28664., 7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664.,
      7164.,  8988.,  11068., 13404., 11580., 13916., 16508., 19356., 0.,
      0.,     0.,     0.,     700.,   2012.,  3580.,  5404.,  3068.,  4892.,
      6972.,  9308.,  7864.,  11000., 14648., 18808., 14648., 18808., 23480.,
      28664., 7864.,  11000., 14648., 18808., 11580., 13916., 16508., 19356.,
      3068.,  4892.,  6972.,  9308.,  0.,     0.,     0.,     0.,     510.,
      1422.,  2462.,  3630.,  30.,    174.,   446.,   846.,   3932.,  5500.,
      7324.,  9404.,  540.,   1596.,  2908.,  4476.,  1884.,  3452.,  5276.,
      7356.,  2558.,  3470.,  4510.,  5678.,  3742.,  4910.,  6206.,  7630.,
      0.,     0.,     0.,     0.,     30.,    174.,   446.,   846.,   190.,
      590.,   1118.,  1774.,  540.,   1596.,  2908.,  4476.,  1884.,  3452.,
      5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  3742.,  4910.,  6206.,
      7630.,  190.,   590.,   1118.,  1774.,  0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,   20.,   23.,   44.,   39.,   68.,   55.,   92.,   71.,   80.,
      24.,  60.,   76.,   133.,  108.,  181.,  140.,  229.,  172.,  200.,
      59.,  140.,  156.,  268.,  208.,  346.,  260.,  424.,  312.,  340.,
      116., 265.,  304.,  507.,  382.,  624.,  460.,  741.,  538.,  595.,
      179., 380.,  416.,  658.,  468.,  736.,  520.,  814.,  572.,  620.,
      296., 625.,  694.,  1092., 772.,  1209., 850.,  1326., 928.,  1015.,
      299., 620.,  676.,  1048., 728.,  1126., 780.,  1204., 832.,  900.,
      476., 985.,  1084., 1677., 1162., 1794., 1240., 1911., 1318., 1435.,
      419., 860.,  936.,  1438., 988.,  1516., 1040., 1594., 1092., 1180.,
      604., 1240., 1316., 2023., 1388., 2131., 1460., 2239., 1532., 1620.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   14.,  14.,  19.,  12.,  15.,  0.,   6.,   7.,
      20.,  23.,  44.,  39.,  44.,  27.,  30.,  0.,   15.,  20.,  52.,  64.,
      115., 96.,  112., 66.,  75.,  0.,   40.,  45.,  112., 124., 220., 176.,
      192., 111., 120., 0.,   72.,  84.,  201., 228., 393., 306., 339., 192.,
      210., 0.,   106., 117., 256., 280., 454., 332., 360., 195., 210., 0.,
      161., 172., 376., 400., 649., 472., 500., 270., 285., 0.,   112., 119.,
      254., 269., 428., 305., 322., 171., 180., 0.,   147., 154., 329., 344.,
      548., 390., 407., 216., 225., 0.,   0.,   0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,   128.,   148.,   295.,   272.,   481.,   396.,   667.,   520.,
      588.,  152.,   396.,   516.,   920.,   764.,   1292.,  1012.,  1664.,
      1260., 1476.,  412.,   996.,   1116.,  1940.,  1524.,  2552.,  1932.,
      3164., 2340.,  2556.,  823.,   1904.,  2204.,  3705.,  2816.,  4623.,
      3428., 5541.,  4040.,  4484.,  1352.,  2876.,  3156.,  5000.,  3564.,
      5612., 3972.,  6224.,  4380.,  4756.,  2233.,  4724.,  5264.,  8295.,
      5876., 9213.,  6488.,  10131., 7100.,  7784.,  2292.,  4756.,  5196.,
      8060., 5604.,  8672.,  6012.,  9284.,  6420.,  6956.,  3643.,  7544.,
      8324., 12885., 8936.,  13803., 9548.,  14721., 10160., 11084., 3232.,
      6636., 7236.,  11120., 7644.,  11732., 8052.,  12344., 8460.,  9156.,
      4692., 9636.,  10236., 15740., 10804., 16592., 11372., 17444., 11940.,
      12636.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   85.,   92.,   128.,  83.,   105.,  0.,
      35.,   41.,   128.,  148.,  295.,  272.,  308.,  193.,  215.,  0.,
      88.,   124.,  340.,  428.,  788.,  676.,  796.,  476.,  544.,  0.,
      268.,  304.,  780.,  868.,  1568., 1276., 1396., 816.,  884.,  0.,
      489.,  579.,  1416., 1620., 2829., 2232., 2484., 1419., 1557., 0.,
      784.,  868.,  1908., 2092., 3404., 2500., 2716., 1476., 1592., 0.,
      1204., 1288., 2828., 3012., 4904., 3580., 3796., 2056., 2172., 0.,
      851.,  905.,  1936., 2052., 3271., 2336., 2468., 1313., 1383., 0.,
      1121., 1175., 2516., 2632., 4201., 2996., 3128., 1663., 1733., 0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,   900.,   1044.,  2138.,  2020.,  3602.,  2996.,  5066.,  3972.,
      4500.,  1060.,  2840.,  3768.,  6796.,  5720.,  9724.,  7672.,  12652.,
      9624.,  11320., 2420.,  6840.,  6104.,  12412., 7288.,  15212., 8472.,
      18012., 9656.,  11352., 5530.,  12076., 14428., 23262., 17228., 27462.,
      20028., 31662., 22828., 26332., 4740.,  16600., 12024., 26412., 13208.,
      29212., 14392., 32012., 15576., 18552., 11570., 23516., 26764., 40934.,
      25852., 40398., 28652., 44598., 31452., 34828., 7060.,  20600., 11160.,
      26844., 3512.,  19788., 4696.,  22588., 5880.,  8088.,  15946., 22028.,
      25148., 33390., 13996., 22614., 16796., 26814., 19596., 22844., 2596.,
      6552.,  7608.,  13324., 6104.,  12412., 7288.,  15212., 8472.,  9912.,
      9076.,  14392., 16088., 22780., 10744., 17644., 13208., 21340., 15672.,
      17112.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,   324.,   578.,   660.,   932.,   614.,   782.,   0.,
      230.,  270.,  900.,   1044.,  2138.,  2020.,  2292.,  1454.,  1622.,  0.,
      580.,  852.,  2424.,  3096.,  5788.,  5048.,  5976.,  3604.,  4132.,  0.,
      1940., 2212., 5784.,  6456.,  11788., 9688.,  10616., 6244.,  6772.,  0.,
      3570., 4266., 10572., 12156., 21390., 17004., 18972., 10890., 11970., 0.,
      6020., 6676., 14712., 16152., 26332., 19384., 21080., 11476., 12388., 0.,
      9300., 9956., 21912., 23352., 38092., 27864., 29560., 16036., 16948., 0.,
      6630., 7054., 15108., 16020., 25562., 18276., 19316., 10286., 10838., 0.,
      8750., 9174., 19668., 20580., 32882., 23476., 24516., 13046., 13598., 0.,
      0.,    0.,    0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,   28.,   48.,   80.,   56.,   92.,   119.,  176.,  116.,  156.,
      209.,  272.,  176.,  220.,  299.,  368.,  236.,  284.,  268.,  320.,
      56.,   96.,   156.,  240.,  212.,  304.,  388.,  532.,  332.,  432.,
      568.,  724.,  452.,  560.,  748.,  916.,  572.,  688.,  676.,  800.,
      176.,  236.,  436.,  560.,  492.,  624.,  868.,  1072., 692.,  832.,
      1168., 1384., 892.,  1040., 1468., 1696., 1092., 1248., 1196., 1360.,
      359.,  464.,  844.,  1060., 988.,  1216., 1677., 2028., 1288., 1528.,
      2127., 2496., 1588., 1840., 2577., 2964., 1888., 2152., 2104., 2380.,
      636.,  716.,  1356., 1520., 1492., 1664., 2368., 2632., 1692., 1872.,
      2668., 2944., 1892., 2080., 2968., 3256., 2092., 2288., 2276., 2480.,
      1049., 1184., 2224., 2500., 2488., 2776., 3927., 4368., 2788., 3088.,
      4377., 4836., 3088., 3400., 4827., 5304., 3388., 3712., 3724., 4060.,
      1096., 1196., 2276., 2480., 2492., 2704., 3868., 4192., 2692., 2912.,
      4168., 4504., 2892., 3120., 4468., 4816., 3092., 3328., 3356., 3600.,
      1739., 1904., 3604., 3940., 3988., 4336., 6177., 6708., 4288., 4648.,
      6627., 7176., 4588., 4960., 7077., 7644., 4888., 5272., 5344., 5740.,
      1556., 1676., 3196., 3440., 3492., 3744., 5368., 5752., 3692., 3952.,
      5668., 6064., 3892., 4160., 5968., 6376., 4092., 4368., 4436., 4720.,
      2276., 2416., 4676., 4960., 4972., 5264., 7648., 8092., 5252., 5552.,
      8068., 8524., 5532., 5840., 8488., 8956., 5812., 6128., 6156., 6480.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,   32.,   29.,   56.,
      36.,   56.,   52.,   76.,   35.,   48.,   45.,   60.,   0.,    0.,
      11.,   24.,   13.,   28.,   48.,   80.,   56.,   92.,   119.,  176.,
      116.,  156.,  132.,  176.,  85.,   108.,  95.,   120.,  0.,    0.,
      28.,   60.,   44.,   80.,   132.,  208.,  172.,  256.,  328.,  460.,
      292.,  384.,  348.,  448.,  212.,  264.,  244.,  300.,  0.,    0.,
      108.,  160.,  124.,  180.,  332.,  448.,  372.,  496.,  688.,  880.,
      572.,  704.,  628.,  768.,  372.,  444.,  404.,  480.,  0.,    0.,
      201.,  288.,  243.,  336.,  612.,  804.,  708.,  912.,  1257., 1572.,
      1008., 1224., 1128., 1356., 651.,  768.,  717.,  840.,  0.,    0.,
      360.,  424.,  400.,  468.,  884.,  1024., 972.,  1120., 1588., 1816.,
      1172., 1328., 1276., 1440., 696.,  780.,  752.,  840.,  0.,    0.,
      560.,  644.,  600.,  688.,  1324., 1504., 1412., 1600., 2308., 2596.,
      1692., 1888., 1796., 2000., 976.,  1080., 1032., 1140., 0.,    0.,
      403.,  448.,  429.,  476.,  920.,  1016., 976.,  1076., 1559., 1712.,
      1116., 1220., 1180., 1288., 629.,  684.,  663.,  720.,  0.,    0.,
      533.,  588.,  559.,  616.,  1200., 1316., 1256., 1376., 2009., 2192.,
      1436., 1560., 1500., 1628., 799.,  864.,  833.,  900.,  0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    193.,   326.,   574.,   382.,   662.,   847.,   1291.,  854.,
      1166.,  1555.,  2047.,  1326.,  1670.,  2263.,  2803.,  1798.,  2174.,
      2046.,  2454.,  374.,   686.,   1092.,  1748.,  1524.,  2244.,  2834.,
      3962.,  2468.,  3252.,  4250.,  5474.,  3412.,  4260.,  5666.,  6986.,
      4356.,  5268.,  5172.,  6148.,  1102.,  1318.,  3060.,  3780.,  2788.,
      3316.,  5658.,  6754.,  3348.,  3940.,  7010.,  8202.,  3908.,  4564.,
      8362.,  9650.,  4468.,  5188.,  5284.,  6068.,  2479.,  3051.,  5442.,
      6634.,  6570.,  7858.,  10629., 12633., 7922.,  9306.,  12657., 14805.,
      9274.,  10754., 14685., 16977., 10626., 12202., 12330., 14002., 2182.,
      2558.,  7780.,  8820.,  5588.,  6436.,  12418., 13994., 6148.,  7060.,
      13770., 15442., 6708.,  7684.,  15122., 16890., 7268.,  8308.,  8724.,
      9828.,  5379.,  6191.,  11050., 12466., 12626., 14138., 19361., 21573.,
      12250., 13602., 19149., 21249., 13602., 15050., 21177., 23421., 14954.,
      16498., 16594., 18234., 3262.,  3798.,  9748.,  10852., 5124.,  6036.,
      12650., 14194., 1396.,  2116.,  9202.,  10586., 1956.,  2740.,  10554.,
      12034., 2516.,  3364.,  3588.,  4500.,  7575.,  8371.,  10322., 11706.,
      11834., 13314., 15613., 17777., 6338.,  7658.,  10281., 12333., 7690.,
      9106.,  12309., 14505., 9042.,  10554., 10618., 12226., 1078.,  1518.,
      2820.,  3732.,  3444.,  4164.,  6034.,  7290.,  2788.,  3316.,  5658.,
      6754.,  3348.,  3940.,  7010.,  8202.,  3908.,  4564.,  4596.,  5316.,
      4238.,  4838.,  6708.,  7684.,  7524.,  8564.,  10650., 12130., 4948.,
      5796.,  8162.,  9482.,  6148.,  7060.,  9962.,  11378., 7348.,  8324.,
      8036.,  9076.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    17.,    53.,    46.,    134.,   102.,   222.,   187.,
      391.,   254.,   406.,   374.,   558.,   257.,   357.,   333.,   449.,
      0.,     0.,     65.,    165.,   77.,    193.,   326.,   574.,   382.,
      662.,   847.,   1291.,  854.,   1166.,  974.,   1318.,  637.,   817.,
      713.,   909.,   0.,     0.,     166.,   414.,   286.,   566.,   916.,
      1508.,  1220.,  1876.,  2378.,  3410.,  2164.,  2884.,  2596.,  3380.,
      1598.,  2006.,  1846.,  2286.,  0.,     0.,     766.,   1174.,  886.,
      1326.,  2436.,  3348.,  2740.,  3716.,  5138.,  6650.,  4324.,  5364.,
      4756.,  5860.,  2838.,  3406.,  3086.,  3686.,  0.,     0.,     1443.,
      2127.,  1767.,  2499.,  4530.,  6042.,  5274.,  6882.,  9453.,  11937.,
      7650.,  9354.,  8586.,  10386., 4983.,  5907.,  5499.,  6471.,  0.,
      0.,     2758.,  3262.,  3070.,  3606.,  6804.,  7908.,  7492.,  8660.,
      12266., 14066., 9076.,  10308., 9892.,  11188., 5406.,  6070.,  5846.,
      6542.,  0.,     0.,     4318.,  4982.,  4630.,  5326.,  10244., 11668.,
      10932., 12420., 17906., 20186., 13156., 14708., 13972., 15588., 7606.,
      8430.,  8046.,  8902.,  0.,     0.,     3137.,  3493.,  3341.,  3713.,
      7174.,  7934.,  7614.,  8406.,  12175., 13387., 8726.,  9550.,  9230.,
      10086., 4925.,  5361.,  5193.,  5645.,  0.,     0.,     4157.,  4593.,
      4361.,  4813.,  9374.,  10294., 9814.,  10766., 15715., 17167., 11246.,
      12230., 11750., 12766., 6265.,  6781.,  6533.,  7065.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,   1422.,  2380.,  4332.,  2156.,  3340.,  5722.,  8202.,  3852.,
      5292.,  9290.,  12154., 5548.,  7244.,  12858., 16106., 7244.,  9196.,
      9196.,  11404., 2060.,  3500.,  4792.,  7928.,  8184.,  11832., 13540.,
      19396., 11576., 15736., 17988., 23588., 12280., 15928., 18340., 23684.,
      8888.,  12024., 11256., 14904., 8620.,  10316., 21112., 25784., 10936.,
      14072., 28612., 35236., 13304., 16952., 24356., 30724., 2744.,  5880.,
      16004., 22116., 4472.,  7096.,  6840.,  9976.,  5722.,  8202.,  13220.,
      18564., 18052., 24164., 29486., 38206., 24676., 31556., 32638., 41486.,
      24516., 31140., 31694., 40670., 20260., 26628., 18820., 24932., 4172.,
      6124.,  22456., 27640., 9208.,  12856., 33188., 40580., 11576., 15736.,
      24836., 31972., 13304., 16952., 28772., 35652., 10936., 14072., 14328.,
      17976., 11658., 15034., 24452., 30564., 30820., 37700., 37054., 46414.,
      30660., 37284., 27278., 35742., 26404., 32772., 22238., 30830., 18052.,
      24164., 22244., 28100., 12012., 14220., 21112., 25784., 2744.,  5880.,
      16004., 22116., 4472.,  7096.,  19940., 25796., 6840.,  9976.,  26564.,
      33188., 9208.,  12856., 13624., 17784., 10810., 14058., 18660., 24516.,
      24516., 31140., 31694., 40670., 20260., 26628., 26654., 35758., 26884.,
      34020., 33902., 43134., 30820., 37700., 26308., 32932., 7564.,  10028.,
      18360., 23544., 13304., 16952., 28772., 35652., 10936., 14072., 28612.,
      35236., 13304., 16952., 24356., 30724., 2744.,  5880.,  6136.,  9784.,
      13612., 16332., 20088., 24760., 24504., 29688., 19140., 25764., 14968.,
      19640., 24612., 30980., 20408., 25592., 25988., 32100., 19064., 23736.,
      17720., 21880.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1322.,
      2906.,  1900.,  3084.,  2828.,  4268.,  1966.,  2750.,  2558.,  3470.,
      0.,     0.,     430.,   1214.,  510.,   1422.,  2380.,  4332.,  2156.,
      3340.,  5722.,  8202.,  3852.,  5292.,  4780.,  6476.,  190.,   590.,
      782.,   1310.,  0.,     0.,     460.,   1388.,  1388.,  2572.,  3448.,
      6072.,  5816.,  8952.,  9988.,  15076., 9208.,  12856., 12600., 16760.,
      7660.,  9868.,  9612.,  12076., 0.,     0.,     5100.,  7308.,  5388.,
      6828.,  14648., 18808., 7544.,  10168., 21476., 27332., 9912.,  13048.,
      13304., 16952., 1804.,  3244.,  3756.,  5452.,  0.,     0.,     2826.,
      5178.,  5370.,  8106.,  12516., 18372., 18372., 24996., 29326., 37790.,
      22308., 28676., 24964., 31076., 11834., 15082., 9130.,  11738., 0.,
      0.,     14796., 17772., 10476., 12684., 30968., 36664., 14648., 18808.,
      30468., 37604., 4088.,  7736.,  8504.,  12664., 3180.,  4364.,  4620.,
      6060.,  0.,     0.,     7404.,  9612.,  9868.,  12332., 21432., 26616.,
      26872., 32568., 31588., 38468., 25528., 30712., 21112., 25784., 10380.,
      12844., 940.,   2636.,  0.,     0.,     11822., 13630., 510.,   1422.,
      15820., 18796., 4332.,  6540.,  8410.,  11914., 4364.,  5804.,  6316.,
      8012.,  190.,   590.,   270.,   798.,   0.,     0.,     6974.,  8398.,
      8590.,  10142., 18284., 21516., 21772., 25260., 12682., 16058., 14124.,
      16844., 1100.,  3052.,  590.,   1630.,  30.,    174.,   0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,
      542.,   624.,   719.,   836.,   959.,   1088.,  622.,   704.,   790.,
      880.,   1067.,  1196.,  1331.,  1472.,  854.,   944.,   1038.,  1136.,
      974.,   1072.,  1174.,  1280.,  150.,   224.,   302.,   384.,   468.,
      624.,   788.,   960.,   676.,   848.,   1028.,  1216.,  1282.,  1552.,
      1834.,  2128.,  1140.,  1328.,  1524.,  1728.,  1978.,  2272.,  2578.,
      2896.,  1604.,  1808.,  2020.,  2240.,  2674.,  2992.,  3322.,  3664.,
      2068.,  2288.,  2516.,  2752.,  2468.,  2704.,  2948.,  3200.,  590.,
      704.,   822.,   944.,   1508.,  1744.,  1988.,  2240.,  1716.,  1968.,
      2228.,  2496.,  3082.,  3472.,  3874.,  4288.,  2500.,  2768.,  3044.,
      3328.,  4258.,  4672.,  5098.,  5536.,  3284.,  3568.,  3860.,  4160.,
      5434.,  5872.,  6322.,  6784.,  4068.,  4368.,  4676.,  4992.,  4468.,
      4784.,  5108.,  5440.,  1235.,  1436.,  1643.,  1856.,  2962.,  3376.,
      3802.,  4240.,  3514.,  3952.,  4402.,  4864.,  6033.,  6708.,  7401.,
      8112.,  4690.,  5152.,  5626.,  6112.,  7797.,  8508.,  9237.,  9984.,
      5866.,  6352.,  6850.,  7360.,  9561.,  10308., 11073., 11856., 7042.,
      7552.,  8074.,  8608.,  7882.,  8416.,  8962.,  9520.,  2390.,  2544.,
      2702.,  2864.,  5108.,  5424.,  5748.,  6080.,  5636.,  5968.,  6308.,
      6656.,  8962.,  9472.,  9994.,  10528., 6420.,  6768.,  7124.,  7488.,
      10138., 10672., 11218., 11776., 7204.,  7568.,  7940.,  8320.,  11314.,
      11872., 12442., 13024., 7988.,  8368.,  8756.,  9152.,  8708.,  9104.,
      9508.,  9920.,  3935.,  4196.,  4463.,  4736.,  8362.,  8896.,  9442.,
      10000., 9394.,  9952.,  10522., 11104., 14853., 15708., 16581., 17472.,
      10570., 11152., 11746., 12352., 16617., 17508., 18417., 19344., 11746.,
      12352., 12970., 13600., 18381., 19308., 20253., 21216., 12922., 13552.,
      14194., 14848., 14242., 14896., 15562., 16240., 4190.,  4384.,  4582.,
      4784.,  8708.,  9104.,  9508.,  9920.,  9556.,  9968.,  10388., 10816.,
      14842., 15472., 16114., 16768., 10340., 10768., 11204., 11648., 16018.,
      16672., 17338., 18016., 11124., 11568., 12020., 12480., 17194., 17872.,
      18562., 19264., 11908., 12368., 12836., 13312., 12948., 13424., 13908.,
      14400., 6635.,  6956.,  7283.,  7616.,  13762., 14416., 15082., 15760.,
      15274., 15952., 16642., 17344., 23673., 24708., 25761., 26832., 16450.,
      17152., 17866., 18592., 25437., 26508., 27597., 28704., 17626., 18352.,
      19090., 19840., 27201., 28308., 29433., 30576., 18802., 19552., 20314.,
      21088., 20602., 21376., 22162., 22960., 5990.,  6224.,  6462.,  6704.,
      12308., 12784., 13268., 13760., 13476., 13968., 14468., 14976., 20722.,
      21472., 22234., 23008., 14260., 14768., 15284., 15808., 21898., 22672.,
      23458., 24256., 15044., 15568., 16100., 16640., 23074., 23872., 24682.,
      25504., 15828., 16368., 16916., 17472., 17188., 17744., 18308., 18880.,
      8830.,  9104.,  9382.,  9664.,  18148., 18704., 19268., 19840., 19316.,
      19888., 20468., 21056., 29722., 30592., 31474., 32368., 20420., 21008.,
      21604., 22208., 31378., 32272., 33178., 34096., 21524., 22128., 22740.,
      23360., 33034., 33952., 34882., 35824., 22628., 23248., 23876., 24512.,
      23988., 24624., 25268., 25920.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   5.,    12.,   21.,   32.,   14.,   32.,
      54.,   80.,   38.,   64.,   94.,   128.,  71.,   116.,  167.,  224.,
      110.,  144.,  182.,  224.,  166.,  208.,  254.,  304.,  117.,  140.,
      165.,  192.,  153.,  180.,  209.,  240.,  0.,    0.,    0.,    0.,
      21.,   44.,   69.,   96.,   25.,   52.,   81.,   112.,  134.,  192.,
      254.,  320.,  158.,  224.,  294.,  368.,  371.,  476.,  587.,  704.,
      390.,  464.,  542.,  624.,  446.,  528.,  614.,  704.,  297.,  340.,
      385.,  432.,  333.,  380.,  429.,  480.,  0.,    0.,    0.,    0.,
      54.,   112.,  174.,  240.,  110.,  176.,  246.,  320.,  388.,  528.,
      676.,  832.,  532.,  688.,  852.,  1024., 1066., 1312., 1570., 1840.,
      996.,  1168., 1348., 1536., 1204., 1392., 1588., 1792., 750.,  848.,
      950.,  1056., 870.,  976.,  1086., 1200., 0.,    0.,    0.,    0.,
      334.,  432.,  534.,  640.,  390.,  496.,  606.,  720.,  1108., 1328.,
      1556., 1792., 1252., 1488., 1732., 1984., 2386., 2752., 3130., 3520.,
      2036., 2288., 2548., 2816., 2244., 2512., 2788., 3072., 1350., 1488.,
      1630., 1776., 1470., 1616., 1766., 1920., 0.,    0.,    0.,    0.,
      639.,  804.,  975.,  1152., 795.,  972.,  1155., 1344., 2082., 2448.,
      2826., 3216., 2442., 2832., 3234., 3648., 4425., 5028., 5649., 6288.,
      3618., 4032., 4458., 4896., 4074., 4512., 4962., 5424., 2379., 2604.,
      2835., 3072., 2631., 2868., 3111., 3360., 0.,    0.,    0.,    0.,
      1318., 1440., 1566., 1696., 1470., 1600., 1734., 1872., 3268., 3536.,
      3812., 4096., 3604., 3888., 4180., 4480., 5914., 6352., 6802., 7264.,
      4388., 4688., 4996., 5312., 4788., 5104., 5428., 5760., 2622., 2784.,
      2950., 3120., 2838., 3008., 3182., 3360., 0.,    0.,    0.,    0.,
      2078., 2240., 2406., 2576., 2230., 2400., 2574., 2752., 4948., 5296.,
      5652., 6016., 5284., 5648., 6020., 6400., 8674., 9232., 9802., 10384.,
      6388., 6768., 7156., 7552., 6788., 7184., 7588., 8000., 3702., 3904.,
      4110., 4320., 3918., 4128., 4342., 4560., 0.,    0.,    0.,    0.,
      1525., 1612., 1701., 1792., 1625., 1716., 1809., 1904., 3494., 3680.,
      3870., 4064., 3710., 3904., 4102., 4304., 5939., 6236., 6539., 6848.,
      4262., 4464., 4670., 4880., 4510., 4720., 4934., 5152., 2409., 2516.,
      2625., 2736., 2541., 2652., 2765., 2880., 0.,    0.,    0.,    0.,
      2025., 2132., 2241., 2352., 2125., 2236., 2349., 2464., 4574., 4800.,
      5030., 5264., 4790., 5024., 5262., 5504., 7679., 8036., 8399., 8768.,
      5502., 5744., 5990., 6240., 5750., 6000., 6254., 6512., 3069., 3196.,
      3325., 3456., 3201., 3332., 3465., 3600., 0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  946.,
      1210.,  1506.,  1834.,  2575.,  3147.,  3767.,  4435.,  1762.,  2090.,
      2450.,  2842.,  4311.,  4979.,  5695.,  6459.,  2578.,  2970.,  3394.,
      3850.,  6047.,  6811.,  7623.,  8483.,  3394.,  3850.,  4338.,  4858.,
      4338.,  4858.,  5410.,  5994.,  866.,   1194.,  1554.,  1946.,  2036.,
      2756.,  3540.,  4388.,  3668.,  4516.,  5428.,  6404.,  6086.,  7454.,
      8918.,  10478., 5300.,  6276.,  7316.,  8420.,  8342.,  9646.,  11046.,
      12542., 5716.,  6564.,  7476.,  8452.,  8550.,  9790.,  11126., 12558.,
      4084.,  4804.,  5588.,  6436.,  5204.,  6052.,  6964.,  7940.,  4114.,
      4506.,  4930.,  5386.,  10004., 11108., 12276., 13508., 5108.,  5828.,
      6612.,  7460.,  13526., 15086., 16742., 18494., 6228.,  7076.,  7988.,
      8964.,  11430., 12926., 14518., 16206., 1012.,  1732.,  2516.,  3364.,
      7286.,  8718.,  10246., 11870., 1940.,  2532.,  3188.,  3908.,  3060.,
      3780.,  4564.,  5412.,  2575.,  3147.,  3767.,  4435.,  5990.,  7230.,
      8566.,  9998.,  8310.,  9742.,  11270., 12894., 13725., 15761., 17941.,
      20265., 11526., 13150., 14870., 16686., 15285., 17353., 19565., 21921.,
      11478., 13038., 14694., 16446., 14797., 16897., 19141., 21529., 9382.,
      10878., 12470., 14158., 8694.,  10126., 11654., 13278., 1858.,  2314.,
      2802.,  3322.,  10612., 11844., 13140., 14500., 4180.,  5028.,  5940.,
      6916.,  15718., 17470., 19318., 21262., 5300.,  6276.,  7316.,  8420.,
      11574., 13262., 15046., 16926., 6228.,  7076.,  7988.,  8964.,  13574.,
      15198., 16918., 18734., 5108.,  5828.,  6612.,  7460.,  6740.,  7588.,
      8500.,  9476.,  5431.,  6227.,  7071.,  7963.,  11510., 12942., 14470.,
      16094., 14598., 16222., 17942., 19758., 17429., 19625., 21965., 24449.,
      14550., 16110., 17766., 19518., 12653., 14625., 16741., 19001., 12454.,
      13950., 15542., 17230., 10117., 12121., 14269., 16561., 8310.,  9742.,
      11270., 12894., 10438., 11806., 13270., 14830., 5746.,  6266.,  6818.,
      7402.,  10004., 11108., 12276., 13508., 1012.,  1732.,  2516.,  3364.,
      7286.,  8718.,  10246., 11870., 1940.,  2532.,  3188.,  3908.,  9286.,
      10654., 12118., 13678., 3060.,  3780.,  4564.,  5412.,  12502., 14062.,
      15718., 17470., 4180.,  5028.,  5940.,  6916.,  6324.,  7300.,  8340.,
      9444.,  5023.,  5787.,  6599.,  7459.,  8646.,  10014., 11478., 13038.,
      11478., 13038., 14694., 16446., 14797., 16897., 19141., 21529., 9382.,
      10878., 12470., 14158., 12261., 14393., 16669., 19089., 12598., 14286.,
      16070., 17950., 15869., 18033., 20341., 22793., 14598., 16222., 17942.,
      19758., 12374., 13934., 15590., 17342., 3490.,  4074.,  4690.,  5338.,
      8564.,  9796.,  11092., 12452., 6228.,  7076.,  7988.,  8964.,  13574.,
      15198., 16918., 18734., 5108.,  5828.,  6612.,  7460.,  13526., 15086.,
      16742., 18494., 6228.,  7076.,  7988.,  8964.,  11430., 12926., 14518.,
      16206., 1012.,  1732.,  2516.,  3364.,  2644.,  3492.,  4404.,  5380.,
      6482.,  7130.,  7810.,  8522.,  9492.,  10596., 11764., 12996., 11636.,
      12868., 14164., 15524., 8790.,  10350., 12006., 13758., 6932.,  8036.,
      9204.,  10436., 11558., 13054., 14646., 16334., 9588.,  10820., 12116.,
      13476., 12278., 13710., 15238., 16862., 8980.,  10084., 11252., 12484.,
      8372.,  9348.,  10388., 11492.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   487.,   835.,
      1231.,  1675.,  818.,   1082.,  1378.,  1706.,  1250.,  1578.,  1938.,
      2330.,  893.,   1073.,  1269.,  1481.,  1173.,  1385.,  1613.,  1857.,
      0.,     0.,     0.,     0.,     125.,   305.,   501.,   713.,   149.,
      361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  1138.,  1658.,
      2210.,  2794.,  2767.,  3595.,  4471.,  5395.,  2978.,  3562.,  4178.,
      4826.,  3410.,  4058.,  4738.,  5450.,  2293.,  2633.,  2989.,  3361.,
      2573.,  2945.,  3333.,  3737.,  0.,     0.,     0.,     0.,     322.,
      778.,   1266.,  1786.,  754.,   1274.,  1826.,  2410.,  2836.,  3940.,
      5108.,  6340.,  3956.,  5188.,  6484.,  7844.,  8054.,  9998.,  12038.,
      14174., 7636.,  8996.,  10420., 11908., 9268.,  10756., 12308., 13924.,
      5810.,  6586.,  7394.,  8234.,  6754.,  7594.,  8466.,  9370.,  0.,
      0.,     0.,     0.,     2482.,  3258.,  4066.,  4906.,  2530.,  2858.,
      3218.,  3610.,  8052.,  9284.,  10580., 11940., 6740.,  7588.,  8500.,
      9476.,  15558., 17438., 19414., 21486., 8884.,  9860.,  10900., 12004.,
      10516., 11620., 12788., 14020., 6050.,  6634.,  7250.,  7898.,  6994.,
      7642.,  8322.,  9034.,  0.,     0.,     0.,     0.,     4407.,  5203.,
      6047.,  6939.,  5631.,  6523.,  7463.,  8451.,  13126., 15006., 16982.,
      19054., 15958., 18030., 20198., 22462., 26925., 30177., 33573., 37113.,
      21222., 23486., 25846., 28302., 24822., 27278., 29830., 32478., 14111.,
      15387., 16711., 18083., 16103., 17475., 18895., 20363., 0.,     0.,
      0.,     0.,     10306., 11274., 12274., 13306., 4978.,  5498.,  6050.,
      6634.,  19092., 20708., 22388., 24132., 13172., 14404., 15700., 17060.,
      31350., 33806., 36358., 39006., 15316., 16676., 18100., 19588., 18484.,
      19972., 21524., 23140., 10034., 10810., 11618., 12458., 11746., 12586.,
      13458., 14362., 0.,     0.,     0.,     0.,     9778.,  10554., 11362.,
      12202., 10978., 11818., 12690., 13594., 23796., 25540., 27348., 29220.,
      26452., 28324., 30260., 32260., 42566., 45470., 48470., 51566., 31156.,
      33156., 35220., 37348., 34324., 36452., 38644., 40900., 18594., 19690.,
      20818., 21978., 20306., 21466., 22658., 23882., 0.,     0.,     0.,
      0.,     12029., 12721., 13429., 14153., 149.,   361.,   589.,   833.,
      14914., 15882., 16882., 17914., 1906.,  2426.,  2978.,  3562.,  19535.,
      20875., 22263., 23699., 2210.,  2794.,  3410.,  4058.,  4178.,  4826.,
      5506.,  6218.,  2293.,  2633.,  2989.,  3361.,  3341.,  3713.,  4101.,
      4505.,  0.,     0.,     0.,     0.,     3317.,  3657.,  4013.,  4385.,
      4109.,  4481.,  4869.,  5273.,  8754.,  9530.,  10338., 11178., 10466.,
      11306., 12178., 13082., 16567., 17875., 19231., 20635., 12050., 12954.,
      13890., 14858., 14018., 14986., 15986., 17018., 7533.,  8033.,  8549.,
      9081.,  8581.,  9113.,  9661.,  10225., 0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      350.,   1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,
      3644.,  4956.,  6524.,  6490.,  8970.,  11834., 15082., 4956.,  6524.,
      8348.,  10428., 12090., 15338., 18970., 22986., 7324.,  9404.,  11740.,
      14332., 12954., 15946., 19322., 23082., 860.,   2428.,  4252.,  6332.,
      4252.,  6332.,  8668.,  11260., 1884.,  3452.,  5276.,  7356.,  5496.,
      8120.,  11256., 14904., 10232., 13880., 18040., 22712., 10772., 15476.,
      20948., 27188., 19064., 23736., 28920., 34616., 17236., 22452., 28436.,
      35188., 23160., 27832., 33016., 38712., 6676.,  11380., 16852., 23092.,
      6136.,  9784.,  13944., 18616., 9592.,  12216., 15352., 19000., 2588.,
      3644.,  4956.,  6524.,  10232., 13880., 18040., 22712., 5496.,  8120.,
      11256., 14904., 20948., 27188., 34196., 41972., 10232., 13880., 18040.,
      22712., 29460., 36212., 43732., 52020., 6136.,  9784.,  13944., 18616.,
      16852., 23092., 30100., 37876., 9592.,  12216., 15352., 19000., 14328.,
      17976., 22136., 26808., 6490.,  8970.,  11834., 15082., 10772., 15476.,
      20948., 27188., 20948., 27188., 34196., 41972., 20174., 27102., 35182.,
      44414., 29460., 36212., 43732., 52020., 12142., 19326., 27662., 37150.,
      16852., 23092., 30100., 37876., 19854., 26270., 33838., 42558., 20628.,
      26356., 32852., 40116., 6356.,  10548., 15508., 21236., 4956.,  6524.,
      8348.,  10428., 19064., 23736., 28920., 34616., 10232., 13880., 18040.,
      22712., 29460., 36212., 43732., 52020., 6136.,  9784.,  13944., 18616.,
      16852., 23092., 30100., 37876., 9592.,  12216., 15352., 19000., 20628.,
      26356., 32852., 40116., 5496.,  8120.,  11256., 14904., 10232., 13880.,
      18040., 22712., 12090., 15338., 18970., 22986., 17236., 22452., 28436.,
      35188., 29460., 36212., 43732., 52020., 12142., 19326., 27662., 37150.,
      16852., 23092., 30100., 37876., 19854., 26270., 33838., 42558., 20628.,
      26356., 32852., 40116., 11822., 18494., 26318., 35294., 20948., 27188.,
      34196., 41972., 12820., 17524., 22996., 29236., 7324.,  9404.,  11740.,
      14332., 23160., 27832., 33016., 38712., 6136.,  9784.,  13944., 18616.,
      16852., 23092., 30100., 37876., 9592.,  12216., 15352., 19000., 20628.,
      26356., 32852., 40116., 5496.,  8120.,  11256., 14904., 20948., 27188.,
      34196., 41972., 10232., 13880., 18040., 22712., 19064., 23736., 28920.,
      34616., 12954., 15946., 19322., 23082., 6676.,  11380., 16852., 23092.,
      16852., 23092., 30100., 37876., 19854., 26270., 33838., 42558., 20628.,
      26356., 32852., 40116., 11822., 18494., 26318., 35294., 20948., 27188.,
      34196., 41972., 20174., 27102., 35182., 44414., 29460., 36212., 43732.,
      52020., 11092., 16308., 22292., 29044., 860.,   2428.,  4252.,  6332.,
      6136.,  9784.,  13944., 18616., 9592.,  12216., 15352., 19000., 20628.,
      26356., 32852., 40116., 5496.,  8120.,  11256., 14904., 20948., 27188.,
      34196., 41972., 10232., 13880., 18040., 22712., 29460., 36212., 43732.,
      52020., 6136.,  9784.,  13944., 18616., 14968., 19640., 24824., 30520.,
      4252.,  6332.,  8668.,  11260., 9592.,  12216., 15352., 19000., 14328.,
      17976., 22136., 26808., 6356.,  10548., 15508., 21236., 10232., 13880.,
      18040., 22712., 12820., 17524., 22996., 29236., 19064., 23736., 28920.,
      34616., 11092., 16308., 22292., 29044., 14968., 19640., 24824., 30520.,
      14328., 17976., 22136., 26808.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,
      1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2938.,  4650.,
      6746.,  9226.,  6300.,  8380.,  10716., 13308., 4956.,  6524.,  8348.,
      10428., 6974.,  8398.,  9950.,  11630., 350.,   1006.,  1790.,  2702.,
      0.,     0.,     0.,     0.,     190.,   590.,   1118.,  1774.,  350.,
      1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,
      4956.,  6524.,  6490.,  8970.,  11834., 15082., 4956.,  6524.,  8348.,
      10428., 8348.,  10428., 12764., 15356., 350.,   1006.,  1790.,  2702.,
      2558.,  3470.,  4510.,  5678.,  0.,     0.,     0.,     0.,     860.,
      2428.,  4252.,  6332.,  4252.,  6332.,  8668.,  11260., 9592.,  12216.,
      15352., 19000., 14328., 17976., 22136., 26808., 6356.,  10548., 15508.,
      21236., 10232., 13880., 18040., 22712., 5496.,  8120.,  11256., 14904.,
      6300.,  8380.,  10716., 13308., 4956.,  6524.,  8348.,  10428., 0.,
      0.,     0.,     0.,     4252.,  6332.,  8668.,  11260., 7004.,  8572.,
      10396., 12476., 14328., 17976., 22136., 26808., 1400.,  4024.,  7160.,
      10808., 14484., 20212., 26708., 33972., 5496.,  8120.,  11256., 14904.,
      10232., 13880., 18040., 22712., 4956.,  6524.,  8348.,  10428., 8348.,
      10428., 12764., 15356., 0.,     0.,     0.,     0.,     7354.,  9578.,
      12186., 15178., 12954., 15946., 19322., 23082., 6676.,  11380., 16852.,
      23092., 16852., 23092., 30100., 37876., 19854., 26270., 33838., 42558.,
      20628., 26356., 32852., 40116., 6356.,  10548., 15508., 21236., 8858.,
      11850., 15226., 18986., 2938.,  4650.,  6746.,  9226.,  0.,     0.,
      0.,     0.,     12764., 15356., 18204., 21308., 5276.,  7356.,  9692.,
      12284., 14968., 19640., 24824., 30520., 14328., 17976., 22136., 26808.,
      27092., 33332., 40340., 48116., 1400.,  4024.,  7160.,  10808., 6136.,
      9784.,  13944., 18616., 2588.,  3644.,  4956.,  6524.,  3932.,  5500.,
      7324.,  9404.,  0.,     0.,     0.,     0.,     5276.,  7356.,  9692.,
      12284., 10716., 13308., 16156., 19260., 14328., 17976., 22136., 26808.,
      23160., 27832., 33016., 38712., 6676.,  11380., 16852., 23092., 6136.,
      9784.,  13944., 18616., 9592.,  12216., 15352., 19000., 3932.,  5500.,
      7324.,  9404.,  540.,   1596.,  2908.,  4476.,  0.,     0.,     0.,
      0.,     6974.,  8398.,  9950.,  11630., 350.,   1006.,  1790.,  2702.,
      12764., 15356., 18204., 21308., 5276.,  7356.,  9692.,  12284., 11226.,
      14730., 18618., 22890., 7004.,  8572.,  10396., 12476., 10396., 12476.,
      14812., 17404., 350.,   1006.,  1790.,  2702.,  510.,   1422.,  2462.,
      3630.,  0.,     0.,     0.,     0.,     350.,   1006.,  1790.,  2702.,
      2558.,  3470.,  4510.,  5678.,  5276.,  7356.,  9692.,  12284., 10716.,
      13308., 16156., 19260., 7354.,  9578.,  12186., 15178., 10396., 12476.,
      14812., 17404., 860.,   2428.,  4252.,  6332.,  510.,   1422.,  2462.,
      3630.,  30.,    174.,   446.,   846.,   0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      56.,   70.,   124.,  102.,  172.,  134.,  156.,  126.,  140.,  244.,
      192.,  322.,  244.,  266.,  233.,  266.,  450.,  344.,  567.,  422.,
      467.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,  521.,  578.,
      918.,  656.,  1035., 734.,  803.,  510.,  556.,  868.,  608.,  946.,
      660.,  714.,  740.,  786.,  1228., 858.,  1336., 930.,  984.,  504.,
      582.,  892.,  614.,  940.,  646.,  732.,  894.,  972.,  1492., 1024.,
      1570., 1076., 1162., 1385., 1514., 2322., 1592., 2439., 1670., 1811.,
      1086., 1180., 1804., 1232., 1882., 1284., 1386., 1673., 1826., 2790.,
      1904., 2907., 1982., 2147., 1278., 1388., 2116., 1440., 2194., 1492.,
      1610., 1828., 1938., 2956., 2010., 3064., 2082., 2200., 952.,  1094.,
      1660., 1126., 1708., 1158., 1308., 1662., 1804., 2740., 1856., 2818.,
      1908., 2058., 2537., 2762., 4194., 2840., 4311., 2918., 3155., 1854.,
      2012., 3052., 2064., 3130., 2116., 2282., 2825., 3074., 4662., 3152.,
      4779., 3230., 3491., 2046., 2220., 3364., 2272., 3442., 2324., 2506.,
      2916., 3090., 4684., 3162., 4792., 3234., 3416.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  6.,   7.,   20.,  23.,  26.,
      18.,  20.,  14.,  18.,  48.,  58.,  68.,  44.,  50.,  34.,  38.,  98.,
      108., 118., 74.,  80.,  54.,  58.,  148., 158., 168., 104., 110., 48.,
      51.,  118., 125., 132., 76.,  80.,  63.,  66.,  153., 160., 167., 96.,
      100., 5.,   10.,  21.,  32.,  43.,  24.,  30.,  30.,  35.,  76.,  87.,
      98.,  54.,  60.,  62.,  74.,  160., 186., 212., 116., 130., 122., 134.,
      290., 316., 342., 186., 200., 182., 194., 420., 446., 472., 256., 270.,
      112., 119., 254., 269., 284., 152., 160., 147., 154., 329., 344., 359.,
      192., 200., 9.,   18.,  37.,  56.,  75.,  40.,  50.,  54.,  63.,  132.,
      151., 170., 90.,  100., 110., 130., 272., 314., 356., 188., 210., 210.,
      230., 482., 524., 566., 298., 320., 310., 330., 692., 734., 776., 408.,
      430., 176., 187., 390., 413., 436., 228., 240., 231., 242., 505., 528.,
      551., 288., 300.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      368.,   472.,   854.,   720.,   1226.,  968.,   1136.,  888.,   992.,
      1754.,  1400.,  2366.,  1808.,  1976.,  1660.,  1912.,  3267.,  2524.,
      4185.,  3136.,  3484.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,
      3736.,  3916.,  4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  3896.,
      4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  5696.,  6056.,  9470.,
      6624.,  10322., 7192.,  7616.,  3824.,  4440.,  6806.,  4688.,  7178.,
      4936.,  5616.,  6904.,  7520.,  11546., 7928.,  12158., 8336.,  9016.,
      10684., 11704., 17955., 12316., 18873., 12928., 14044., 8408.,  9152.,
      13994., 9560.,  14606., 9968.,  10776., 12940., 14152., 21627., 14764.,
      22545., 15376., 16684., 9912.,  10784., 16442., 11192., 17054., 11600.,
      12536., 14272., 15144., 23102., 15712., 23954., 16280., 17216., 7280.,
      8408.,  12758., 8656.,  13130., 8904.,  10096., 12920., 14048., 21338.,
      14456., 21950., 14864., 16056., 19708., 21496., 32643., 22108., 33561.,
      22720., 24604., 14424., 15680., 23786., 16088., 24398., 16496., 17816.,
      21964., 23944., 36315., 24556., 37233., 25168., 27244., 15928., 17312.,
      26234., 17720., 26846., 18128., 19576., 22848., 24232., 36734., 24800.,
      37586., 25368., 26816.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   35.,   41.,   128.,
      148.,  168.,  123.,  137.,  82.,   110.,  312.,  384.,  456.,  306.,
      350.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,  362.,  390.,
      1032., 1104., 1176., 746.,  790.,  347.,  369.,  864.,  916.,  968.,
      563.,  593.,  457.,  479.,  1124., 1176., 1228., 713.,  743.,  29.,
      67.,   140.,  224.,  308.,  173.,  219.,  219.,  257.,  560.,  644.,
      728.,  403.,  449.,  450.,  542.,  1176., 1376., 1576., 866.,  974.,
      910.,  1002., 2176., 2376., 2576., 1406., 1514., 1370., 1462., 3176.,
      3376., 3576., 1946., 2054., 851.,  905.,  1936., 2052., 2168., 1163.,
      1225., 1121., 1175., 2516., 2632., 2748., 1473., 1535., 53.,   123.,
      252.,  400.,  548.,  293.,  371.,  403.,  473.,  992.,  1140., 1288.,
      683.,  761.,  818.,  974.,  2040., 2368., 2696., 1426., 1598., 1598.,
      1754., 3680., 4008., 4336., 2286., 2458., 2378., 2534., 5320., 5648.,
      5976., 3146., 3318., 1355., 1441., 3008., 3188., 3368., 1763., 1857.,
      1785., 1871., 3908., 4088., 4268., 2233., 2327.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2632.,  3432.,  6292.,  5384.,  9220.,  7336.,  8648.,  5992.,  5128.,
      10948., 6312.,  13748., 7496.,  8808.,  10172., 12140., 19830., 14940.,
      24030., 17740., 20476., 13800., 9864.,  22148., 11048., 24948., 12232.,
      14568., 19836., 23340., 36630., 26140., 40830., 28940., 33212., 21608.,
      14600., 33348., 15784., 36148., 16968., 20328., 25992., 28840., 44788.,
      31304., 48484., 33768., 37128., 2632.,  3432.,  6292.,  5384.,  9220.,
      7336.,  8648.,  5992.,  5128.,  10948., 6312.,  13748., 7496.,  8808.,
      10172., 12140., 19830., 14940., 24030., 17740., 20476., 13800., 9864.,
      22148., 11048., 24948., 12232., 14568., 19836., 23340., 36630., 26140.,
      40830., 28940., 33212., 21608., 14600., 33348., 15784., 36148., 16968.,
      20328., 25992., 28840., 44788., 31304., 48484., 33768., 37128., 2632.,
      3432.,  6292.,  5384.,  9220.,  7336.,  8648.,  5992.,  5128.,  10948.,
      6312.,  13748., 7496.,  8808.,  10172., 12140., 19830., 14940., 24030.,
      17740., 20476., 13800., 9864.,  22148., 11048., 24948., 12232., 14568.,
      19836., 23340., 36630., 26140., 40830., 28940., 33212., 21608., 14600.,
      33348., 15784., 36148., 16968., 20328., 25992., 28840., 44788., 31304.,
      48484., 33768., 37128.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   230.,   270.,
      900.,   1044.,  1188.,  902.,   1006.,  540.,   748.,   2216.,  2760.,
      3304.,  2268.,  2604.,  1580.,  1788.,  4936.,  5480.,  6024.,  3948.,
      4284.,  2620.,  2828.,  7656.,  8200.,  8744.,  5628.,  5964.,  2630.,
      2798.,  6596.,  6996.,  7396.,  4326.,  4558.,  3470.,  3638.,  8596.,
      8996.,  9396.,  5486.,  5718.,  190.,   486.,   1012.,  1668.,  2324.,
      1310.,  1670.,  1670.,  1966.,  4292.,  4948.,  5604.,  3110.,  3470.,
      3420.,  4140.,  9000.,  10568., 12136., 6684.,  7532.,  7020.,  7740.,
      16840., 18408., 19976., 10924., 11772., 10620., 11340., 24680., 26248.,
      27816., 15164., 16012., 6630.,  7054.,  15108., 16020., 16932., 9094.,
      9582.,  8750.,  9174.,  19668., 20580., 21492., 11534., 12022., 350.,
      902.,   1844.,  3012.,  4180.,  2238.,  2854.,  3110.,  3662.,  7684.,
      8852.,  10020., 5318.,  5934.,  6300.,  7532.,  15784., 18376., 20968.,
      11100., 12460., 12460., 13692., 28744., 31336., 33928., 17900., 19260.,
      18620., 19852., 41704., 44296., 46888., 24700., 26060., 10630., 11310.,
      23620., 25044., 26468., 13862., 14606., 14030., 14710., 30740., 32164.,
      33588., 17582., 18326.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      144.,   224.,   192.,   280.,   358.,   496.,   312.,   408.,   538.,
      688.,   432.,   536.,   512.,   624.,   384.,   504.,   432.,   560.,
      778.,   976.,   632.,   768.,   1078.,  1288.,  832.,   976.,   912.,
      1064.,  728.,   932.,   848.,   1064.,  1467.,  1800.,  1148.,  1376.,
      1917.,  2268.,  1448.,  1688.,  1616.,  1868.,  1120.,  1272.,  1232.,
      1392.,  1978.,  2224.,  1432.,  1600.,  2278.,  2536.,  1632.,  1808.,
      1776.,  1960.,  1832.,  2084.,  2048.,  2312.,  3267.,  3672.,  2348.,
      2624.,  3717.,  4140.,  2648.,  2936.,  2912.,  3212.,  1856.,  2040.,
      2032.,  2224.,  3178.,  3472.,  2232.,  2432.,  3478.,  3784.,  2432.,
      2640.,  2640.,  2856.,  2736.,  2960.,  2912.,  3144.,  4558.,  4912.,
      3192.,  3432.,  4978.,  5344.,  3472.,  3720.,  3680.,  3936.,  1808.,
      2016.,  2112.,  2328.,  3238.,  3568.,  2232.,  2456.,  3418.,  3760.,
      2352.,  2584.,  2688.,  2928.,  3328.,  3576.,  3632.,  3888.,  5578.,
      5968.,  3832.,  4096.,  5878.,  6280.,  4032.,  4304.,  4368.,  4648.,
      5144.,  5540.,  5648.,  6056.,  8667.,  9288.,  5948.,  6368.,  9117.,
      9756.,  6248.,  6680.,  6800.,  7244.,  4064.,  4344.,  4432.,  4720.,
      6778.,  7216.,  4632.,  4928.,  7078.,  7528.,  4832.,  5136.,  5232.,
      5544.,  6248.,  6692.,  6848.,  7304.,  10467., 11160., 7148.,  7616.,
      10917., 11628., 7448.,  7928.,  8096.,  8588.,  4800.,  5112.,  5232.,
      5552.,  7978.,  8464.,  5432.,  5760.,  8278.,  8776.,  5632.,  5968.,
      6096.,  6440.,  6960.,  7312.,  7392.,  7752.,  11278., 11824., 7672.,
      8040.,  11698., 12256., 7952.,  8328.,  8416.,  8800.,  3472.,  3808.,
      4032.,  4376.,  6118.,  6640.,  4152.,  4504.,  6298.,  6832.,  4272.,
      4632.,  4864.,  5232.,  6272.,  6648.,  6832.,  7216.,  10378., 10960.,
      7032.,  7424.,  10678., 11272., 7232.,  7632.,  7824.,  8232.,  9560.,
      10148., 10448., 11048., 15867., 16776., 10748., 11360., 16317., 17244.,
      11048., 11672., 11984., 12620., 7008.,  7416.,  7632.,  8048.,  11578.,
      12208., 7832.,  8256.,  11878., 12520., 8032.,  8464.,  8688.,  9128.,
      10664., 11300., 11648., 12296., 17667., 18648., 11948., 12608., 18117.,
      19116., 12248., 12920., 13280., 13964., 7744.,  8184.,  8432.,  8880.,
      12778., 13456., 8632.,  9088.,  13078., 13768., 8832.,  9296.,  9552.,
      10024., 11184., 11664., 11872., 12360., 17998., 18736., 12152., 12648.,
      18418., 19168., 12432., 12936., 13152., 13664.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,   32.,   24.,   44.,
      21.,   32.,   27.,   40.,   11.,   24.,   13.,   28.,   48.,   80.,
      56.,   92.,   64.,   104.,  51.,   72.,   57.,   80.,   26.,   56.,
      38.,   72.,   120.,  192.,  152.,  232.,  184.,  272.,  130.,  176.,
      150.,  200.,  86.,   136.,  98.,   152.,  280.,  392.,  312.,  432.,
      344.,  472.,  230.,  296.,  250.,  320.,  146.,  216.,  158.,  232.,
      440.,  592.,  472.,  632.,  504.,  672.,  330.,  416.,  350.,  440.,
      155.,  192.,  165.,  204.,  392.,  472.,  416.,  500.,  440.,  528.,
      259.,  304.,  273.,  320.,  205.,  252.,  215.,  264.,  512.,  612.,
      536.,  640.,  560.,  668.,  329.,  384.,  343.,  400.,  9.,    20.,
      27.,   40.,   56.,   84.,   96.,   128.,  136.,  172.,  77.,   96.,
      99.,   120.,  99.,   120.,  117.,  140.,  256.,  304.,  296.,  348.,
      336.,  392.,  187.,  216.,  209.,  240.,  202.,  248.,  246.,  296.,
      536.,  640.,  632.,  744.,  728.,  848.,  402.,  464.,  454.,  520.,
      422.,  488.,  466.,  536.,  1016., 1160., 1112., 1264., 1208., 1368.,
      662.,  744.,  714.,  800.,  642.,  728.,  686.,  776.,  1496., 1680.,
      1592., 1784., 1688., 1888., 922.,  1024., 974.,  1080., 403.,  448.,
      429.,  476.,  920.,  1016., 976.,  1076., 1032., 1136., 555.,  608.,
      585.,  640.,  533.,  588.,  559.,  616.,  1200., 1316., 1256., 1376.,
      1312., 1436., 705.,  768.,  735.,  800.,  17.,   36.,   51.,   72.,
      104.,  148.,  176.,  224.,  248.,  300.,  133.,  160.,  171.,  200.,
      187.,  216.,  221.,  252.,  464.,  528.,  536.,  604.,  608.,  680.,
      323.,  360.,  361.,  400.,  378.,  440.,  454.,  520.,  952.,  1088.,
      1112., 1256., 1272., 1424., 674.,  752.,  758.,  840.,  758.,  840.,
      834.,  920.,  1752., 1928., 1912., 2096., 2072., 2264., 1094., 1192.,
      1178., 1280., 1138., 1240., 1214., 1320., 2552., 2768., 2712., 2936.,
      2872., 3104., 1514., 1632., 1598., 1720., 651.,  704.,  693.,  748.,
      1448., 1560., 1536., 1652., 1624., 1744., 851.,  912.,  897.,  960.,
      861.,  924.,  903.,  968.,  1888., 2020., 1976., 2112., 2064., 2204.,
      1081., 1152., 1127., 1200.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1004.,  1628.,  1372.,  2060.,  2606.,  3686.,  2316.,  3068.,  4022.,
      5198.,  3260.,  4076.,  3884.,  4764.,  2652.,  3340.,  2316.,  2812.,
      4950.,  5998.,  2876.,  3436.,  6302.,  7446.,  3436.,  4060.,  4060.,
      4748.,  4538.,  5634.,  5474.,  6666.,  8985.,  10845., 6826.,  8114.,
      11013., 13017., 8178.,  9562.,  9498.,  10978., 6428.,  7372.,  4556.,
      5308.,  10358., 11790., 5116.,  5932.,  11710., 13238., 5676.,  6556.,
      6812.,  7756.,  9178.,  10658., 10882., 12458., 17097., 19533., 12234.,
      13906., 19125., 21705., 13586., 15354., 15674., 17538., 10204., 11404.,
      6796.,  7804.,  15766., 17582., 7356.,  8428.,  17118., 19030., 7916.,
      9052.,  9564.,  10764., 12364., 13628., 13756., 15084., 21374., 23414.,
      14956., 16348., 23174., 25310., 16156., 17612., 17804., 19324., 1004.,
      1628.,  1372.,  2060.,  2606.,  3686.,  2316.,  3068.,  4022.,  5198.,
      3260.,  4076.,  3884.,  4764.,  2652.,  3340.,  2316.,  2812.,  4950.,
      5998.,  2876.,  3436.,  6302.,  7446.,  3436.,  4060.,  4060.,  4748.,
      4538.,  5634.,  5474.,  6666.,  8985.,  10845., 6826.,  8114.,  11013.,
      13017., 8178.,  9562.,  9498.,  10978., 6428.,  7372.,  4556.,  5308.,
      10358., 11790., 5116.,  5932.,  11710., 13238., 5676.,  6556.,  6812.,
      7756.,  9178.,  10658., 10882., 12458., 17097., 19533., 12234., 13906.,
      19125., 21705., 13586., 15354., 15674., 17538., 10204., 11404., 6796.,
      7804.,  15766., 17582., 7356.,  8428.,  17118., 19030., 7916.,  9052.,
      9564.,  10764., 12364., 13628., 13756., 15084., 21374., 23414., 14956.,
      16348., 23174., 25310., 16156., 17612., 17804., 19324., 1004.,  1628.,
      1372.,  2060.,  2606.,  3686.,  2316.,  3068.,  4022.,  5198.,  3260.,
      4076.,  3884.,  4764.,  2652.,  3340.,  2316.,  2812.,  4950.,  5998.,
      2876.,  3436.,  6302.,  7446.,  3436.,  4060.,  4060.,  4748.,  4538.,
      5634.,  5474.,  6666.,  8985.,  10845., 6826.,  8114.,  11013., 13017.,
      8178.,  9562.,  9498.,  10978., 6428.,  7372.,  4556.,  5308.,  10358.,
      11790., 5116.,  5932.,  11710., 13238., 5676.,  6556.,  6812.,  7756.,
      9178.,  10658., 10882., 12458., 17097., 19533., 12234., 13906., 19125.,
      21705., 13586., 15354., 15674., 17538., 10204., 11404., 6796.,  7804.,
      15766., 17582., 7356.,  8428.,  17118., 19030., 7916.,  9052.,  9564.,
      10764., 12364., 13628., 13756., 15084., 21374., 23414., 14956., 16348.,
      23174., 25310., 16156., 17612., 17804., 19324.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    17.,    53.,    46.,    134.,   102.,   222.,   158.,
      310.,   149.,   233.,   193.,   293.,   65.,    165.,   77.,    193.,
      326.,   574.,   382.,   662.,   438.,   750.,   369.,   533.,   413.,
      593.,   154.,   386.,   242.,   506.,   828.,   1388.,  1068.,  1692.,
      1308.,  1996.,  954.,   1314.,  1106.,  1498.,  594.,   986.,   682.,
      1106.,  2028.,  2908.,  2268.,  3212.,  2508.,  3516.,  1714.,  2234.,
      1866.,  2418.,  1034.,  1586.,  1122.,  1706.,  3228.,  4428.,  3468.,
      4732.,  3708.,  5036.,  2474.,  3154.,  2626.,  3338.,  1169.,  1461.,
      1245.,  1553.,  2982.,  3614.,  3166.,  3830.,  3350.,  4046.,  1985.,
      2341.,  2093.,  2465.,  1549.,  1921.,  1625.,  2013.,  3902.,  4694.,
      4086.,  4910.,  4270.,  5126.,  2525.,  2961.,  2633.,  3085.,  53.,
      137.,   193.,   293.,   398.,   614.,   710.,   958.,   1022.,  1302.,
      581.,   729.,   753.,   917.,   753.,   917.,   893.,   1073.,  1958.,
      2334.,  2270.,  2678.,  2582.,  3022.,  1441.,  1669.,  1613.,  1857.,
      1530.,  1890.,  1874.,  2266.,  4092.,  4908.,  4844.,  5724.,  5596.,
      6540.,  3098.,  3586.,  3506.,  4026.,  3250.,  3770.,  3594.,  4146.,
      7852.,  8988.,  8604.,  9804.,  9356.,  10620., 5138.,  5786.,  5546.,
      6226.,  4970.,  5650.,  5314.,  6026.,  11612., 13068., 12364., 13884.,
      13116., 14700., 7178.,  7986.,  7586.,  8426.,  3137.,  3493.,  3341.,
      3713.,  7174.,  7934.,  7614.,  8406.,  8054.,  8878.,  4337.,  4757.,
      4573.,  5009.,  4157.,  4593.,  4361.,  4813.,  9374.,  10294., 9814.,
      10766., 10254., 11238., 5517.,  6017.,  5753.,  6269.,  101.,   249.,
      369.,   533.,   750.,   1094.,  1318.,  1694.,  1886.,  2294.,  1013.,
      1225.,  1313.,  1541.,  1441.,  1669.,  1709.,  1953.,  3590.,  4094.,
      4158.,  4694.,  4726.,  5294.,  2513.,  2805.,  2813.,  3121.,  2906.,
      3394.,  3506.,  4026.,  7356.,  8428.,  8620.,  9756.,  9884.,  11084.,
      5242.,  5858.,  5906.,  6554.,  5906.,  6554.,  6506.,  7186.,  13676.,
      15068., 14940., 16396., 16204., 17724., 8562.,  9338.,  9226.,  10034.,
      8906.,  9714.,  9506.,  10346., 19996., 21708., 21260., 23036., 22524.,
      24364., 11882., 12818., 12546., 13514., 5105.,  5525.,  5437.,  5873.,
      11366., 12254., 12062., 12982., 12758., 13710., 6689.,  7173.,  7053.,
      7553.,  6765.,  7265.,  7097.,  7613.,  14846., 15894., 15542., 16622.,
      16238., 17350., 8509.,  9073.,  8873.,  9453.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4120.,  7000.,  7000.,  10392., 11764., 17236., 10392., 14296., 16852.,
      23092., 13784., 18200., 18712., 23640., 17880., 22296., 9240.,  12120.,
      25044., 31284., 11608., 15000., 31668., 38676., 13976., 17880., 18904.,
      23320., 10180., 14756., 13476., 18820., 22622., 30190., 20100., 26212.,
      30510., 39230., 26724., 33604., 28356., 34980., 13784., 18200., 5144.,
      8024.,  22996., 29236., 7512.,  10904., 29620., 36628., 9880.,  13784.,
      14808., 19224., 16964., 22564., 22308., 28676., 27678., 36782., 28932.,
      36068., 35566., 45822., 35556., 43460., 31044., 38692., 17880., 22296.,
      9240.,  12120., 25044., 31284., 11608., 15000., 31668., 38676., 13976.,
      17880., 18904., 23320., 9880.,  13784., 12760., 17176., 21300., 27284.,
      18200., 23128., 27412., 34164., 23640., 29080., 23832., 28760., 4120.,
      7000.,  7000.,  10392., 11764., 17236., 10392., 14296., 16852., 23092.,
      13784., 18200., 18712., 23640., 17880., 22296., 9240.,  12120., 25044.,
      31284., 11608., 15000., 31668., 38676., 13976., 17880., 18904., 23320.,
      10180., 14756., 13476., 18820., 22622., 30190., 20100., 26212., 30510.,
      39230., 26724., 33604., 28356., 34980., 13784., 18200., 5144.,  8024.,
      22996., 29236., 7512.,  10904., 29620., 36628., 9880.,  13784., 14808.,
      19224., 16964., 22564., 22308., 28676., 27678., 36782., 28932., 36068.,
      35566., 45822., 35556., 43460., 31044., 38692., 17880., 22296., 9240.,
      12120., 25044., 31284., 11608., 15000., 31668., 38676., 13976., 17880.,
      18904., 23320., 9880.,  13784., 12760., 17176., 21300., 27284., 18200.,
      23128., 27412., 34164., 23640., 29080., 23832., 28760., 4120.,  7000.,
      7000.,  10392., 11764., 17236., 10392., 14296., 16852., 23092., 13784.,
      18200., 18712., 23640., 17880., 22296., 9240.,  12120., 25044., 31284.,
      11608., 15000., 31668., 38676., 13976., 17880., 18904., 23320., 10180.,
      14756., 13476., 18820., 22622., 30190., 20100., 26212., 30510., 39230.,
      26724., 33604., 28356., 34980., 13784., 18200., 5144.,  8024.,  22996.,
      29236., 7512.,  10904., 29620., 36628., 9880.,  13784., 14808., 19224.,
      16964., 22564., 22308., 28676., 27678., 36782., 28932., 36068., 35566.,
      45822., 35556., 43460., 31044., 38692., 17880., 22296., 9240.,  12120.,
      25044., 31284., 11608., 15000., 31668., 38676., 13976., 17880., 18904.,
      23320., 9880.,  13784., 12760., 17176., 21300., 27284., 18200., 23128.,
      27412., 34164., 23640., 29080., 23832., 28760.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1132.,
      2316.,  1118.,  1774.,  1454.,  2238.,  430.,   1214.,  510.,   1422.,
      2380.,  4332.,  2156.,  3340.,  2572.,  4012.,  110.,   382.,   446.,
      846.,   380.,   1180.,  1052.,  2108.,  2776.,  5144.,  4632.,  7512.,
      6488.,  9880.,  4604.,  6428.,  5788.,  7868.,  3740.,  5820.,  3772.,
      5084.,  11416., 15320., 5848.,  8216.,  7704.,  10584., 1052.,  2108.,
      2236.,  3548.,  1724.,  3036.,  2396.,  3964.,  6488.,  9880.,  8344.,
      12248., 9560.,  12952., 6972.,  9308.,  5468.,  7036.,  4334.,  5630.,
      190.,   590.,   6988.,  8940.,  1644.,  2828.,  3084.,  4524.,  1966.,
      2750.,  2814.,  3726.,  2558.,  3470.,  3150.,  4190.,  7404.,  9612.,
      8844.,  11308., 5548.,  7244.,  6206.,  7630.,  270.,   798.,   350.,
      1006.,  1454.,  2238.,  2988.,  4684.,  5452.,  7404.,  7916.,  10124.,
      4510.,  5678.,  5870.,  7166.,  5870.,  7166.,  6974.,  8398.,  15308.,
      18284., 8940.,  11148., 11404., 13868., 430.,   1214.,  1790.,  2702.,
      3068.,  4892.,  5788.,  7868.,  12248., 16664., 18200., 23128., 24152.,
      29592., 13436., 16284., 16668., 19772., 16668., 19772., 10556., 12892.,
      33176., 39128., 15320., 19736., 21272., 26200., 3740.,  5820.,  6972.,
      9308.,  8508.,  10844., 11228., 13820., 24152., 29592., 30104., 36056.,
      27224., 32664., 19900., 23260., 12252., 14844., 11822., 13630., 510.,
      1422.,  15820., 18796., 4332.,  6540.,  7820.,  10284., 4334.,  5630.,
      6206.,  7630.,  6974.,  8398.,  8590.,  10142., 18284., 21516., 21772.,
      25260., 12332., 15052., 13694., 15630., 590.,   1630.,  30.,    174.,
      110.,   382.,   300.,   972.,   716.,   1644.,  1132.,  2316.,  1118.,
      1774.,  1454.,  2238.,  430.,   1214.,  510.,   1422.,  2380.,  4332.,
      2156.,  3340.,  2572.,  4012.,  110.,   382.,   446.,   846.,   380.,
      1180.,  1052.,  2108.,  2776.,  5144.,  4632.,  7512.,  6488.,  9880.,
      4604.,  6428.,  5788.,  7868.,  3740.,  5820.,  3772.,  5084.,  11416.,
      15320., 5848.,  8216.,  7704.,  10584., 1052.,  2108.,  2236.,  3548.,
      1724.,  3036.,  2396.,  3964.,  6488.,  9880.,  8344.,  12248., 9560.,
      12952., 6972.,  9308.,  5468.,  7036.,  4334.,  5630.,  190.,   590.,
      6988.,  8940.,  1644.,  2828.,  3084.,  4524.,  1966.,  2750.,  2814.,
      3726.,  2558.,  3470.,  3150.,  4190.,  7404.,  9612.,  8844.,  11308.,
      5548.,  7244.,  6206.,  7630.,  270.,   798.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      428.,   576.,   732.,   896.,   604.,   768.,   940.,   1120.,  1174.,
      1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,  2152.,
      2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,  2268.,
      2496.,  1308.,  1536.,  1772.,  2016.,  1484.,  1728.,  1980.,  2240.,
      2734.,  3112.,  3502.,  3904.,  2268.,  2528.,  2796.,  3072.,  3910.,
      4312.,  4726.,  5152.,  3052.,  3328.,  3612.,  3904.,  3356.,  3648.,
      3948.,  4256.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,  3818.,
      4256.,  5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,  5504.,
      6993.,  7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,  5978.,
      6464.,  6962.,  7472.,  4188.,  4480.,  4780.,  5088.,  4620.,  4928.,
      5244.,  5568.,  7438.,  7912.,  8398.,  8896.,  5404.,  5728.,  6060.,
      6400.,  8614.,  9112.,  9622.,  10144., 6188.,  6528.,  6876.,  7232.,
      6748.,  7104.,  7468.,  7840.,  6842.,  7328.,  7826.,  8336.,  7682.,
      8192.,  8714.,  9248.,  12285., 13068., 13869., 14688., 8858.,  9392.,
      9938.,  10496., 14049., 14868., 15705., 16560., 10034., 10592., 11162.,
      11744., 11066., 11648., 12242., 12848., 7068.,  7424.,  7788.,  8160.,
      7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294., 13888., 8540.,
      8928.,  9324.,  9728.,  13318., 13912., 14518., 15136., 9324.,  9728.,
      10140., 10560., 10140., 10560., 10988., 11424., 10508., 10944., 11388.,
      11840., 11196., 11648., 12108., 12576., 17542., 18232., 18934., 19648.,
      12300., 12768., 13244., 13728., 19198., 19912., 20638., 21376., 13404.,
      13888., 14380., 14880., 14220., 14720., 15228., 15744., 6828.,  7232.,
      7644.,  8064.,  8028.,  8448.,  8876.,  9312.,  12310., 12952., 13606.,
      14272., 8492.,  8928.,  9372.,  9824.,  13006., 13672., 14350., 15040.,
      8956.,  9408.,  9868.,  10336., 10284., 10752., 11228., 11712., 12828.,
      13312., 13804., 14304., 14028., 14528., 15036., 15552., 21550., 22312.,
      23086., 23872., 14812., 15328., 15852., 16384., 22726., 23512., 24310.,
      25120., 15596., 16128., 16668., 17216., 16924., 17472., 18028., 18592.,
      19802., 20576., 21362., 22160., 21794., 22592., 23402., 24224., 33453.,
      34668., 35901., 37152., 22970., 23792., 24626., 25472., 35217., 36468.,
      37737., 39024., 24146., 24992., 25850., 26720., 26330., 27200., 28082.,
      28976., 15708., 16256., 16812., 17376., 17164., 17728., 18300., 18880.,
      26254., 27112., 27982., 28864., 17948., 18528., 19116., 19712., 27430.,
      28312., 29206., 30112., 18732., 19328., 19932., 20544., 20316., 20928.,
      21548., 22176., 24122., 24992., 25874., 26768., 26498., 27392., 28298.,
      29216., 40509., 41868., 43245., 44640., 27674., 28592., 29522., 30464.,
      42273., 43668., 45081., 46512., 28850., 29792., 30746., 31712., 31418.,
      32384., 33362., 34352., 18588., 19200., 19820., 20448., 20300., 20928.,
      21564., 22208., 30958., 31912., 32878., 33856., 21084., 21728., 22380.,
      23040., 32134., 33112., 34102., 35104., 21868., 22528., 23196., 23872.,
      23708., 24384., 25068., 25760., 27148., 27840., 28540., 29248., 28860.,
      29568., 30284., 31008., 44038., 45112., 46198., 47296., 29964., 30688.,
      31420., 32160., 45694., 46792., 47902., 49024., 31068., 31808., 32556.,
      33312., 32908., 33664., 34428., 35200., 428.,   576.,   732.,   896.,
      604.,   768.,   940.,   1120.,  1174.,  1432.,  1702.,  1984.,  1068.,
      1248.,  1436.,  1632.,  1870.,  2152.,  2446.,  2752.,  1532.,  1728.,
      1932.,  2144.,  1836.,  2048.,  2268.,  2496.,  1308.,  1536.,  1772.,
      2016.,  1484.,  1728.,  1980.,  2240.,  2734.,  3112.,  3502.,  3904.,
      2268.,  2528.,  2796.,  3072.,  3910.,  4312.,  4726.,  5152.,  3052.,
      3328.,  3612.,  3904.,  3356.,  3648.,  3948.,  4256.,  2522.,  2912.,
      3314.,  3728.,  2978.,  3392.,  3818.,  4256.,  5229.,  5868.,  6525.,
      7200.,  4154.,  4592.,  5042.,  5504.,  6993.,  7668.,  8361.,  9072.,
      5330.,  5792.,  6266.,  6752.,  5978.,  6464.,  6962.,  7472.,  4188.,
      4480.,  4780.,  5088.,  4620.,  4928.,  5244.,  5568.,  7438.,  7912.,
      8398.,  8896.,  5404.,  5728.,  6060.,  6400.,  8614.,  9112.,  9622.,
      10144., 6188.,  6528.,  6876.,  7232.,  6748.,  7104.,  7468.,  7840.,
      6842.,  7328.,  7826.,  8336.,  7682.,  8192.,  8714.,  9248.,  12285.,
      13068., 13869., 14688., 8858.,  9392.,  9938.,  10496., 14049., 14868.,
      15705., 16560., 10034., 10592., 11162., 11744., 11066., 11648., 12242.,
      12848., 7068.,  7424.,  7788.,  8160.,  7756.,  8128.,  8508.,  8896.,
      12142., 12712., 13294., 13888., 8540.,  8928.,  9324.,  9728.,  13318.,
      13912., 14518., 15136., 9324.,  9728.,  10140., 10560., 10140., 10560.,
      10988., 11424., 10508., 10944., 11388., 11840., 11196., 11648., 12108.,
      12576., 17542., 18232., 18934., 19648., 12300., 12768., 13244., 13728.,
      19198., 19912., 20638., 21376., 13404., 13888., 14380., 14880., 14220.,
      14720., 15228., 15744.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    5.,     12.,    21.,    32.,    14.,
      32.,    54.,    80.,    38.,    64.,    94.,    128.,   62.,    96.,
      134.,   176.,   65.,    84.,    105.,   128.,   85.,    108.,   133.,
      160.,   21.,    44.,    69.,    96.,    25.,    52.,    81.,    112.,
      134.,   192.,   254.,   320.,   158.,   224.,   294.,   368.,   182.,
      256.,   334.,   416.,   165.,   204.,   245.,   288.,   185.,   228.,
      273.,   320.,   50.,    104.,   162.,   224.,   90.,    152.,   218.,
      288.,   348.,   480.,   620.,   768.,   460.,   608.,   764.,   928.,
      572.,   736.,   908.,   1088.,  434.,   520.,   610.,   704.,   506.,
      600.,   698.,   800.,   250.,   344.,   442.,   544.,   290.,   392.,
      498.,   608.,   908.,   1120.,  1340.,  1568.,  1020.,  1248.,  1484.,
      1728.,  1132.,  1376.,  1628.,  1888.,  794.,   920.,   1050.,  1184.,
      866.,   1000.,  1138.,  1280.,  450.,   584.,   722.,   864.,   490.,
      632.,   778.,   928.,   1468.,  1760.,  2060.,  2368.,  1580.,  1888.,
      2204.,  2528.,  1692.,  2016.,  2348.,  2688.,  1154.,  1320.,  1490.,
      1664.,  1226.,  1400.,  1578.,  1760.,  549.,   620.,   693.,   768.,
      585.,   660.,   737.,   816.,   1414.,  1568.,  1726.,  1888.,  1502.,
      1664.,  1830.,  2000.,  1590.,  1760.,  1934.,  2112.,  949.,   1036.,
      1125.,  1216.,  1001.,  1092.,  1185.,  1280.,  729.,   820.,   913.,
      1008.,  765.,   860.,   957.,   1056.,  1854.,  2048.,  2246.,  2448.,
      1942.,  2144.,  2350.,  2560.,  2030.,  2240.,  2454.,  2672.,  1209.,
      1316.,  1425.,  1536.,  1261.,  1372.,  1485.,  1600.,  17.,    36.,
      57.,    80.,    85.,    108.,   133.,   160.,   174.,   224.,   278.,
      336.,   326.,   384.,   446.,   512.,   478.,   544.,   614.,   688.,
      273.,   308.,   345.,   384.,   357.,   396.,   437.,   480.,   357.,
      396.,   437.,   480.,   425.,   468.,   513.,   560.,   934.,   1024.,
      1118.,  1216.,  1086.,  1184.,  1286.,  1392.,  1238.,  1344.,  1454.,
      1568.,  693.,   748.,   805.,   864.,   777.,   836.,   897.,   960.,
      722.,   808.,   898.,   992.,   890.,   984.,   1082.,  1184.,  1948.,
      2144.,  2348.,  2560.,  2316.,  2528.,  2748.,  2976.,  2684.,  2912.,
      3148.,  3392.,  1490.,  1608.,  1730.,  1856.,  1690.,  1816.,  1946.,
      2080.,  1562.,  1688.,  1818.,  1952.,  1730.,  1864.,  2002.,  2144.,
      3788.,  4064.,  4348.,  4640.,  4156.,  4448.,  4748.,  5056.,  4524.,
      4832.,  5148.,  5472.,  2490.,  2648.,  2810.,  2976.,  2690.,  2856.,
      3026.,  3200.,  2402.,  2568.,  2738.,  2912.,  2570.,  2744.,  2922.,
      3104.,  5628.,  5984.,  6348.,  6720.,  5996.,  6368.,  6748.,  7136.,
      6364.,  6752.,  7148.,  7552.,  3490.,  3688.,  3890.,  4096.,  3690.,
      3896.,  4106.,  4320.,  1525.,  1612.,  1701.,  1792.,  1625.,  1716.,
      1809.,  1904.,  3494.,  3680.,  3870.,  4064.,  3710.,  3904.,  4102.,
      4304.,  3926.,  4128.,  4334.,  4544.,  2117.,  2220.,  2325.,  2432.,
      2233.,  2340.,  2449.,  2560.,  2025.,  2132.,  2241.,  2352.,  2125.,
      2236.,  2349.,  2464.,  4574.,  4800.,  5030.,  5264.,  4790.,  5024.,
      5262.,  5504.,  5006.,  5248.,  5494.,  5744.,  2697.,  2820.,  2945.,
      3072.,  2813.,  2940.,  3069.,  3200.,  33.,    68.,    105.,   144.,
      165.,   204.,   245.,   288.,   334.,   416.,   502.,   592.,   614.,
      704.,   798.,   896.,   894.,   992.,   1094.,  1200.,  481.,   532.,
      585.,   640.,   629.,   684.,   741.,   800.,   693.,   748.,   805.,
      864.,   825.,   884.,   945.,   1008.,  1734.,  1856.,  1982.,  2112.,
      2014.,  2144.,  2278.,  2416.,  2294.,  2432.,  2574.,  2720.,  1221.,
      1292.,  1365.,  1440.,  1369.,  1444.,  1521.,  1600.,  1394.,  1512.,
      1634.,  1760.,  1690.,  1816.,  1946.,  2080.,  3548.,  3808.,  4076.,
      4352.,  4172.,  4448.,  4732.,  5024.,  4796.,  5088.,  5388.,  5696.,
      2546.,  2696.,  2850.,  3008.,  2874.,  3032.,  3194.,  3360.,  2874.,
      3032.,  3194.,  3360.,  3170.,  3336.,  3506.,  3680.,  6668.,  7008.,
      7356.,  7712.,  7292.,  7648.,  8012.,  8384.,  7916.,  8288.,  8668.,
      9056.,  4186.,  4376.,  4570.,  4768.,  4514.,  4712.,  4914.,  5120.,
      4354.,  4552.,  4754.,  4960.,  4650.,  4856.,  5066.,  5280.,  9788.,
      10208., 10636., 11072., 10412., 10848., 11292., 11744., 11036., 11488.,
      11948., 12416., 5826.,  6056.,  6290.,  6528.,  6154.,  6392.,  6634.,
      6880.,  2501.,  2604.,  2709.,  2816.,  2665.,  2772.,  2881.,  2992.,
      5574.,  5792.,  6014.,  6240.,  5918.,  6144.,  6374.,  6608.,  6262.,
      6496.,  6734.,  6976.,  3285.,  3404.,  3525.,  3648.,  3465.,  3588.,
      3713.,  3840.,  3321.,  3444.,  3569.,  3696.,  3485.,  3612.,  3741.,
      3872.,  7294.,  7552.,  7814.,  8080.,  7638.,  7904.,  8174.,  8448.,
      7982.,  8256.,  8534.,  8816.,  4185.,  4324.,  4465.,  4608.,  4365.,
      4508.,  4653.,  4800.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1732.,  2388.,  3108.,  3892.,  3108.,  3892.,  4740.,  5652.,  5246.,
      6518.,  7886.,  9350.,  4740.,  5652.,  6628.,  7668.,  7694.,  9158.,
      10718., 12374., 6372.,  7412.,  8516.,  9684.,  8772.,  9940.,  11172.,
      12468., 8420.,  9460.,  10564., 11732., 4292.,  4948.,  5668.,  6452.,
      11790., 13254., 14814., 16470., 5412.,  6196.,  7044.,  7956.,  15006.,
      16662., 18414., 20262., 6532.,  7444.,  8420.,  9460.,  8932.,  9972.,
      11076., 12244., 4566.,  5614.,  6758.,  7998.,  6118.,  7358.,  8694.,
      10126., 10437., 12185., 14077., 16113., 9334.,  10766., 12294., 13918.,
      14237., 16273., 18453., 20777., 12550., 14174., 15894., 17710., 13398.,
      14958., 16614., 18366., 6372.,  7412.,  8516.,  9684.,  2244.,  2900.,
      3620.,  4404.,  10766., 12230., 13790., 15446., 3364.,  4148.,  4996.,
      5908.,  13982., 15638., 17390., 19238., 4484.,  5396.,  6372.,  7412.,
      6884.,  7924.,  9028.,  10196., 7830.,  9134.,  10534., 12030., 10406.,
      11902., 13494., 15182., 12773., 14905., 17181., 19601., 13622., 15310.,
      17094., 18974., 16573., 18993., 21557., 24265., 16838., 18718., 20694.,
      22766., 14614., 16430., 18342., 20350., 8420.,  9460.,  10564., 11732.,
      4292.,  4948.,  5668.,  6452.,  11790., 13254., 14814., 16470., 5412.,
      6196.,  7044.,  7956.,  15006., 16662., 18414., 20262., 6532.,  7444.,
      8420.,  9460.,  8932.,  9972.,  11076., 12244., 4484.,  5396.,  6372.,
      7412.,  5860.,  6900.,  8004.,  9172.,  9950.,  11350., 12846., 14438.,
      8516.,  9684.,  10916., 12212., 12910., 14502., 16190., 17974., 11172.,
      12468., 13828., 15252., 11332., 12500., 13732., 15028., 1732.,  2388.,
      3108.,  3892.,  3108.,  3892.,  4740.,  5652.,  5246.,  6518.,  7886.,
      9350.,  4740.,  5652.,  6628.,  7668.,  7694.,  9158.,  10718., 12374.,
      6372.,  7412.,  8516.,  9684.,  8772.,  9940.,  11172., 12468., 8420.,
      9460.,  10564., 11732., 4292.,  4948.,  5668.,  6452.,  11790., 13254.,
      14814., 16470., 5412.,  6196.,  7044.,  7956.,  15006., 16662., 18414.,
      20262., 6532.,  7444.,  8420.,  9460.,  8932.,  9972.,  11076., 12244.,
      4566.,  5614.,  6758.,  7998.,  6118.,  7358.,  8694.,  10126., 10437.,
      12185., 14077., 16113., 9334.,  10766., 12294., 13918., 14237., 16273.,
      18453., 20777., 12550., 14174., 15894., 17710., 13398., 14958., 16614.,
      18366., 6372.,  7412.,  8516.,  9684.,  2244.,  2900.,  3620.,  4404.,
      10766., 12230., 13790., 15446., 3364.,  4148.,  4996.,  5908.,  13982.,
      15638., 17390., 19238., 4484.,  5396.,  6372.,  7412.,  6884.,  7924.,
      9028.,  10196., 7830.,  9134.,  10534., 12030., 10406., 11902., 13494.,
      15182., 12773., 14905., 17181., 19601., 13622., 15310., 17094., 18974.,
      16573., 18993., 21557., 24265., 16838., 18718., 20694., 22766., 14614.,
      16430., 18342., 20350., 8420.,  9460.,  10564., 11732., 4292.,  4948.,
      5668.,  6452.,  11790., 13254., 14814., 16470., 5412.,  6196.,  7044.,
      7956.,  15006., 16662., 18414., 20262., 6532.,  7444.,  8420.,  9460.,
      8932.,  9972.,  11076., 12244., 4484.,  5396.,  6372.,  7412.,  5860.,
      6900.,  8004.,  9172.,  9950.,  11350., 12846., 14438., 8516.,  9684.,
      10916., 12212., 12910., 14502., 16190., 17974., 11172., 12468., 13828.,
      15252., 11332., 12500., 13732., 15028., 1732.,  2388.,  3108.,  3892.,
      3108.,  3892.,  4740.,  5652.,  5246.,  6518.,  7886.,  9350.,  4740.,
      5652.,  6628.,  7668.,  7694.,  9158.,  10718., 12374., 6372.,  7412.,
      8516.,  9684.,  8772.,  9940.,  11172., 12468., 8420.,  9460.,  10564.,
      11732., 4292.,  4948.,  5668.,  6452.,  11790., 13254., 14814., 16470.,
      5412.,  6196.,  7044.,  7956.,  15006., 16662., 18414., 20262., 6532.,
      7444.,  8420.,  9460.,  8932.,  9972.,  11076., 12244., 4566.,  5614.,
      6758.,  7998.,  6118.,  7358.,  8694.,  10126., 10437., 12185., 14077.,
      16113., 9334.,  10766., 12294., 13918., 14237., 16273., 18453., 20777.,
      12550., 14174., 15894., 17710., 13398., 14958., 16614., 18366., 6372.,
      7412.,  8516.,  9684.,  2244.,  2900.,  3620.,  4404.,  10766., 12230.,
      13790., 15446., 3364.,  4148.,  4996.,  5908.,  13982., 15638., 17390.,
      19238., 4484.,  5396.,  6372.,  7412.,  6884.,  7924.,  9028.,  10196.,
      7830.,  9134.,  10534., 12030., 10406., 11902., 13494., 15182., 12773.,
      14905., 17181., 19601., 13622., 15310., 17094., 18974., 16573., 18993.,
      21557., 24265., 16838., 18718., 20694., 22766., 14614., 16430., 18342.,
      20350., 8420.,  9460.,  10564., 11732., 4292.,  4948.,  5668.,  6452.,
      11790., 13254., 14814., 16470., 5412.,  6196.,  7044.,  7956.,  15006.,
      16662., 18414., 20262., 6532.,  7444.,  8420.,  9460.,  8932.,  9972.,
      11076., 12244., 4484.,  5396.,  6372.,  7412.,  5860.,  6900.,  8004.,
      9172.,  9950.,  11350., 12846., 14438., 8516.,  9684.,  10916., 12212.,
      12910., 14502., 16190., 17974., 11172., 12468., 13828., 15252., 11332.,
      12500., 13732., 15028.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  125.,   305.,   501.,   713.,   149.,   361.,   589.,   833.,
      962.,   1418.,  1906.,  2426.,  1138.,  1658.,  2210.,  2794.,  1314.,
      1898.,  2514.,  3162.,  1245.,  1553.,  1877.,  2217.,  1397.,  1737.,
      2093.,  2465.,  298.,   722.,   1178.,  1666.,  602.,   1090.,  1610.,
      2162.,  2532.,  3572.,  4676.,  5844.,  3396.,  4564.,  5796.,  7092.,
      4260.,  5556.,  6916.,  8340.,  3306.,  3986.,  4698.,  5442.,  3866.,
      4610.,  5386.,  6194.,  1818.,  2562.,  3338.,  4146.,  1738.,  2034.,
      2362.,  2722.,  6468.,  7636.,  8868.,  10164., 4900.,  5684.,  6532.,
      7444.,  5764.,  6676.,  7652.,  8692.,  3674.,  4162.,  4682.,  5234.,
      4234.,  4786.,  5370.,  5986.,  2954.,  3506.,  4090.,  4706.,  3258.,
      3874.,  4522.,  5202.,  8356.,  9652.,  11012., 12436., 9220.,  10644.,
      12132., 13684., 10084., 11636., 13252., 14932., 6474.,  7282.,  8122.,
      8994.,  7034.,  7906.,  8810.,  9746.,  4253.,  4817.,  5397.,  5993.,
      53.,    137.,   237.,   353.,   6530.,  7242.,  7986.,  8762.,  690.,
      954.,   1250.,  1578.,  1378.,  1706.,  2066.,  2458.,  893.,   1073.,
      1269.,  1481.,  1301.,  1513.,  1741.,  1985.,  1173.,  1385.,  1613.,
      1857.,  1453.,  1697.,  1957.,  2233.,  3442.,  3962.,  4514.,  5098.,
      4130.,  4714.,  5330.,  5978.,  4818.,  5466.,  6146.,  6858.,  2933.,
      3273.,  3629.,  4001.,  3341.,  3713.,  4101.,  4505.,  101.,   249.,
      413.,   593.,   637.,   817.,   1013.,  1225.,  1298.,  1690.,  2114.,
      2570.,  2498.,  2954.,  3442.,  3962.,  3698.,  4218.,  4770.,  5354.,
      2117.,  2393.,  2685.,  2993.,  2781.,  3089.,  3413.,  3753.,  2781.,
      3089.,  3413.,  3753.,  3317.,  3657.,  4013.,  4385.,  7298.,  8010.,
      8754.,  9530.,  8498.,  9274.,  10082., 10922., 9698.,  10538., 11410.,
      12314., 5437.,  5873.,  6325.,  6793.,  6101.,  6569.,  7053.,  7553.,
      5610.,  6290.,  7002.,  7746.,  6938.,  7682.,  8458.,  9266.,  15204.,
      16756., 18372., 20052., 18116., 19796., 21540., 23348., 21028., 22836.,
      24708., 26644., 11690., 12626., 13594., 14594., 13274., 14274., 15306.,
      16370., 12250., 13250., 14282., 15346., 5002.,  5554.,  6138.,  6754.,
      21188., 22868., 24612., 26420., 13476., 14772., 16132., 17556., 16388.,
      17812., 19300., 20852., 8986.,  9730.,  10506., 11314., 10570., 11378.,
      12218., 13090., 10314., 11122., 11962., 12834., 11642., 12514., 13418.,
      14354., 25124., 26932., 28804., 30740., 28036., 29972., 31972., 34036.,
      30948., 33012., 35140., 37332., 16906., 17970., 19066., 20194., 18490.,
      19618., 20778., 21970., 12029., 12721., 13429., 14153., 149.,   361.,
      589.,   833.,   14914., 15882., 16882., 17914., 1906.,  2426.,  2978.,
      3562.,  3618.,  4202.,  4818.,  5466.,  2013.,  2321.,  2645.,  2985.,
      2933.,  3273.,  3629.,  4001.,  3317.,  3657.,  4013.,  4385.,  4109.,
      4481.,  4869.,  5273.,  8754.,  9530.,  10338., 11178., 10466., 11306.,
      12178., 13082., 12178., 13082., 14018., 14986., 6613.,  7081.,  7565.,
      8065.,  7533.,  8033.,  8549.,  9081.,  197.,   473.,   765.,   1073.,
      1245.,  1553.,  1877.,  2217.,  2514.,  3162.,  3842.,  4554.,  4738.,
      5450.,  6194.,  6970.,  6962.,  7738.,  8546.,  9386.,  3749.,  4153.,
      4573.,  5009.,  4925.,  5361.,  5813.,  6281.,  5437.,  5873.,  6325.,
      6793.,  6485.,  6953.,  7437.,  7937.,  13634., 14602., 15602., 16634.,
      15858., 16890., 17954., 19050., 18082., 19178., 20306., 21466., 9629.,
      10193., 10773., 11369., 10805., 11401., 12013., 12641., 10922., 11858.,
      12826., 13826., 13274., 14274., 15306., 16370., 27876., 29940., 32068.,
      34260., 32836., 35028., 37284., 39604., 37796., 40116., 42500., 44948.,
      20074., 21266., 22490., 23746., 22682., 23938., 25226., 26546., 22682.,
      23938., 25226., 26546., 8266.,  9074.,  9914.,  10786., 35908., 38100.,
      40356., 42676., 22052., 23860., 25732., 27668., 27012., 28948., 30948.,
      33012., 14298., 15298., 16330., 17394., 16906., 17970., 19066., 20194.,
      17674., 18738., 19834., 20962., 20026., 21154., 22314., 23506., 41892.,
      44212., 46596., 49044., 46852., 49300., 51812., 54388., 51812., 54388.,
      57028., 59732., 27338., 28658., 30010., 31394., 29946., 31330., 32746.,
      34194., 19805., 20625., 21461., 22313., 245.,   585.,   941.,   1313.,
      23298., 24522., 25778., 27066., 3122.,  3898.,  4706.,  5546.,  5858.,
      6698.,  7570.,  8474.,  3133.,  3569.,  4021.,  4489.,  4565.,  5033.,
      5517.,  6017.,  5461.,  5929.,  6413.,  6913.,  6765.,  7265.,  7781.,
      8313.,  14066., 15098., 16162., 17258., 16802., 17898., 19026., 20186.,
      19538., 20698., 21890., 23114., 10293., 10889., 11501., 12129., 11725.,
      12353., 12997., 13657.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600., 16760., 8244.,
      12180., 16884., 22356., 14648., 18808., 23480., 28664., 15348., 20820.,
      27060., 34068., 23480., 28664., 34360., 40568., 12600., 16760., 21432.,
      26616., 5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000.,
      15348., 20820., 27060., 34068., 7864.,  11000., 14648., 18808., 28596.,
      35604., 43380., 51924., 12600., 16760., 21432., 26616., 23480., 28664.,
      34360., 40568., 3668.,  6836.,  10772., 15476., 7700.,  12404., 17876.,
      24116., 11182., 16830., 23630., 31582., 20948., 27188., 34196., 41972.,
      20814., 28766., 37870., 48126., 34196., 41972., 50516., 59828., 19924.,
      26164., 33172., 40948., 5816.,  8952.,  12600., 16760., 3128.,  5240.,
      7864.,  11000., 15348., 20820., 27060., 34068., 7864.,  11000., 14648.,
      18808., 28596., 35604., 43380., 51924., 12600., 16760., 21432., 26616.,
      23480., 28664., 34360., 40568., 3668.,  6836.,  10772., 15476., 7700.,
      12404., 17876., 24116., 11182., 16830., 23630., 31582., 20948., 27188.,
      34196., 41972., 20814., 28766., 37870., 48126., 34196., 41972., 50516.,
      59828., 19924., 26164., 33172., 40948., 5816.,  8952.,  12600., 16760.,
      3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068., 7864.,
      11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600., 16760.,
      21432., 26616., 23480., 28664., 34360., 40568., 3128.,  5240.,  7864.,
      11000., 5816.,  8952.,  12600., 16760., 8244.,  12180., 16884., 22356.,
      14648., 18808., 23480., 28664., 15348., 20820., 27060., 34068., 23480.,
      28664., 34360., 40568., 12600., 16760., 21432., 26616., 3128.,  5240.,
      7864.,  11000., 5816.,  8952.,  12600., 16760., 8244.,  12180., 16884.,
      22356., 14648., 18808., 23480., 28664., 15348., 20820., 27060., 34068.,
      23480., 28664., 34360., 40568., 12600., 16760., 21432., 26616., 5816.,
      8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000., 15348., 20820.,
      27060., 34068., 7864.,  11000., 14648., 18808., 28596., 35604., 43380.,
      51924., 12600., 16760., 21432., 26616., 23480., 28664., 34360., 40568.,
      3668.,  6836.,  10772., 15476., 7700.,  12404., 17876., 24116., 11182.,
      16830., 23630., 31582., 20948., 27188., 34196., 41972., 20814., 28766.,
      37870., 48126., 34196., 41972., 50516., 59828., 19924., 26164., 33172.,
      40948., 5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000.,
      15348., 20820., 27060., 34068., 7864.,  11000., 14648., 18808., 28596.,
      35604., 43380., 51924., 12600., 16760., 21432., 26616., 23480., 28664.,
      34360., 40568., 3668.,  6836.,  10772., 15476., 7700.,  12404., 17876.,
      24116., 11182., 16830., 23630., 31582., 20948., 27188., 34196., 41972.,
      20814., 28766., 37870., 48126., 34196., 41972., 50516., 59828., 19924.,
      26164., 33172., 40948., 5816.,  8952.,  12600., 16760., 3128.,  5240.,
      7864.,  11000., 15348., 20820., 27060., 34068., 7864.,  11000., 14648.,
      18808., 28596., 35604., 43380., 51924., 12600., 16760., 21432., 26616.,
      23480., 28664., 34360., 40568., 3128.,  5240.,  7864.,  11000., 5816.,
      8952.,  12600., 16760., 8244.,  12180., 16884., 22356., 14648., 18808.,
      23480., 28664., 15348., 20820., 27060., 34068., 23480., 28664., 34360.,
      40568., 12600., 16760., 21432., 26616., 3128.,  5240.,  7864.,  11000.,
      5816.,  8952.,  12600., 16760., 8244.,  12180., 16884., 22356., 14648.,
      18808., 23480., 28664., 15348., 20820., 27060., 34068., 23480., 28664.,
      34360., 40568., 12600., 16760., 21432., 26616., 5816.,  8952.,  12600.,
      16760., 3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068.,
      7864.,  11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600.,
      16760., 21432., 26616., 23480., 28664., 34360., 40568., 3668.,  6836.,
      10772., 15476., 7700.,  12404., 17876., 24116., 11182., 16830., 23630.,
      31582., 20948., 27188., 34196., 41972., 20814., 28766., 37870., 48126.,
      34196., 41972., 50516., 59828., 19924., 26164., 33172., 40948., 5816.,
      8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000., 15348., 20820.,
      27060., 34068., 7864.,  11000., 14648., 18808., 28596., 35604., 43380.,
      51924., 12600., 16760., 21432., 26616., 23480., 28664., 34360., 40568.,
      3668.,  6836.,  10772., 15476., 7700.,  12404., 17876., 24116., 11182.,
      16830., 23630., 31582., 20948., 27188., 34196., 41972., 20814., 28766.,
      37870., 48126., 34196., 41972., 50516., 59828., 19924., 26164., 33172.,
      40948., 5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000.,
      15348., 20820., 27060., 34068., 7864.,  11000., 14648., 18808., 28596.,
      35604., 43380., 51924., 12600., 16760., 21432., 26616., 23480., 28664.,
      34360., 40568., 3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600.,
      16760., 8244.,  12180., 16884., 22356., 14648., 18808., 23480., 28664.,
      15348., 20820., 27060., 34068., 23480., 28664., 34360., 40568., 12600.,
      16760., 21432., 26616.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,
      1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,
      4956.,  6524.,  3742.,  4910.,  6206.,  7630.,  190.,   590.,   1118.,
      1774.,  190.,   590.,   1118.,  1774.,  350.,   1006.,  1790.,  2702.,
      1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  3932.,
      5500.,  7324.,  9404.,  190.,   590.,   1118.,  1774.,  1374.,  2030.,
      2814.,  3726.,  700.,   2012.,  3580.,  5404.,  3068.,  4892.,  6972.,
      9308.,  7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664.,
      7864.,  11000., 14648., 18808., 11580., 13916., 16508., 19356., 3068.,
      4892.,  6972.,  9308.,  3068.,  4892.,  6972.,  9308.,  4796.,  6108.,
      7676.,  9500.,  14648., 18808., 23480., 28664., 7864.,  11000., 14648.,
      18808., 14648., 18808., 23480., 28664., 3068.,  4892.,  6972.,  9308.,
      7484.,  9820.,  12412., 15260., 4796.,  6108.,  7676.,  9500.,  7164.,
      8988.,  11068., 13404., 7864.,  11000., 14648., 18808., 14648., 18808.,
      23480., 28664., 7864.,  11000., 14648., 18808., 7484.,  9820.,  12412.,
      15260., 7164.,  8988.,  11068., 13404., 6974.,  8398.,  9950.,  11630.,
      350.,   1006.,  1790.,  2702.,  12764., 15356., 18204., 21308., 5276.,
      7356.,  9692.,  12284., 10716., 13308., 16156., 19260., 6974.,  8398.,
      9950.,  11630., 10206., 11886., 13694., 15630., 350.,   1006.,  1790.,
      2702.,  2558.,  3470.,  4510.,  5678.,  5276.,  7356.,  9692.,  12284.,
      10716., 13308., 16156., 19260., 7324.,  9404.,  11740., 14332., 10206.,
      11886., 13694., 15630., 510.,   1422.,  2462.,  3630.,  30.,    174.,
      446.,   846.,   190.,   590.,   1118.,  1774.,  540.,   1596.,  2908.,
      4476.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,
      3742.,  4910.,  6206.,  7630.,  190.,   590.,   1118.,  1774.,  190.,
      590.,   1118.,  1774.,  350.,   1006.,  1790.,  2702.,  1884.,  3452.,
      5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  3932.,  5500.,  7324.,
      9404.,  190.,   590.,   1118.,  1774.,  1374.,  2030.,  2814.,  3726.,
      700.,   2012.,  3580.,  5404.,  3068.,  4892.,  6972.,  9308.,  7864.,
      11000., 14648., 18808., 14648., 18808., 23480., 28664., 7864.,  11000.,
      14648., 18808., 11580., 13916., 16508., 19356., 3068.,  4892.,  6972.,
      9308.,  3068.,  4892.,  6972.,  9308.,  4796.,  6108.,  7676.,  9500.,
      14648., 18808., 23480., 28664., 7864.,  11000., 14648., 18808., 14648.,
      18808., 23480., 28664., 3068.,  4892.,  6972.,  9308.,  7484.,  9820.,
      12412., 15260., 4796.,  6108.,  7676.,  9500.,  7164.,  8988.,  11068.,
      13404., 7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664.,
      7864.,  11000., 14648., 18808., 7484.,  9820.,  12412., 15260., 7164.,
      8988.,  11068., 13404., 6974.,  8398.,  9950.,  11630., 350.,   1006.,
      1790.,  2702.,  12764., 15356., 18204., 21308., 5276.,  7356.,  9692.,
      12284., 10716., 13308., 16156., 19260., 6974.,  8398.,  9950.,  11630.,
      10206., 11886., 13694., 15630., 350.,   1006.,  1790.,  2702.,  2558.,
      3470.,  4510.,  5678.,  5276.,  7356.,  9692.,  12284., 10716., 13308.,
      16156., 19260., 7324.,  9404.,  11740., 14332., 10206., 11886., 13694.,
      15630., 510.,   1422.,  2462.,  3630.,  30.,    174.,   446.,   846.,
      190.,   590.,   1118.,  1774.,  540.,   1596.,  2908.,  4476.,  1884.,
      3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  3742.,  4910.,
      6206.,  7630.,  190.,   590.,   1118.,  1774.,  190.,   590.,   1118.,
      1774.,  350.,   1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,
      2588.,  3644.,  4956.,  6524.,  3932.,  5500.,  7324.,  9404.,  190.,
      590.,   1118.,  1774.,  1374.,  2030.,  2814.,  3726.,  700.,   2012.,
      3580.,  5404.,  3068.,  4892.,  6972.,  9308.,  7864.,  11000., 14648.,
      18808., 14648., 18808., 23480., 28664., 7864.,  11000., 14648., 18808.,
      11580., 13916., 16508., 19356., 3068.,  4892.,  6972.,  9308.,  3068.,
      4892.,  6972.,  9308.,  4796.,  6108.,  7676.,  9500.,  14648., 18808.,
      23480., 28664., 7864.,  11000., 14648., 18808., 14648., 18808., 23480.,
      28664., 3068.,  4892.,  6972.,  9308.,  7484.,  9820.,  12412., 15260.,
      4796.,  6108.,  7676.,  9500.,  7164.,  8988.,  11068., 13404., 7864.,
      11000., 14648., 18808., 14648., 18808., 23480., 28664., 7864.,  11000.,
      14648., 18808., 7484.,  9820.,  12412., 15260., 7164.,  8988.,  11068.,
      13404., 6974.,  8398.,  9950.,  11630., 350.,   1006.,  1790.,  2702.,
      12764., 15356., 18204., 21308., 5276.,  7356.,  9692.,  12284., 10716.,
      13308., 16156., 19260., 6974.,  8398.,  9950.,  11630., 10206., 11886.,
      13694., 15630., 350.,   1006.,  1790.,  2702.,  2558.,  3470.,  4510.,
      5678.,  5276.,  7356.,  9692.,  12284., 10716., 13308., 16156., 19260.,
      7324.,  9404.,  11740., 14332., 10206., 11886., 13694., 15630., 510.,
      1422.,  2462.,  3630.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22.,   56.,   70.,   124.,  102.,  172.,  134.,  156.,  52.,   126.,
      140.,  244.,  192.,  322.,  244.,  266.,  100.,  233.,  266.,  450.,
      344.,  567.,  422.,  467.,  148.,  318.,  348.,  556.,  400.,  634.,
      452.,  490.,  244.,  521.,  578.,  918.,  656.,  1035., 734.,  803.,
      244.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  354.,  740.,
      786.,  1228., 858.,  1336., 930.,  984.,  246.,  504.,  582.,  892.,
      614.,  940.,  646.,  732.,  436.,  894.,  972.,  1492., 1024., 1570.,
      1076., 1162., 676.,  1385., 1514., 2322., 1592., 2439., 1670., 1811.,
      532.,  1086., 1180., 1804., 1232., 1882., 1284., 1386., 820.,  1673.,
      1826., 2790., 1904., 2907., 1982., 2147., 628.,  1278., 1388., 2116.,
      1440., 2194., 1492., 1610., 898.,  1828., 1938., 2956., 2010., 3064.,
      2082., 2200., 470.,  952.,  1094., 1660., 1126., 1708., 1158., 1308.,
      820.,  1662., 1804., 2740., 1856., 2818., 1908., 2058., 1252., 2537.,
      2762., 4194., 2840., 4311., 2918., 3155., 916.,  1854., 2012., 3052.,
      2064., 3130., 2116., 2282., 1396., 2825., 3074., 4662., 3152., 4779.,
      3230., 3491., 1012., 2046., 2220., 3364., 2272., 3442., 2324., 2506.,
      1442., 2916., 3090., 4684., 3162., 4792., 3234., 3416.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  0.,   6.,   7.,   20.,  23.,
      26.,  18.,  20.,  0.,   14.,  18.,  48.,  58.,  68.,  44.,  50.,  0.,
      34.,  38.,  98.,  108., 118., 74.,  80.,  0.,   54.,  58.,  148., 158.,
      168., 104., 110., 0.,   48.,  51.,  118., 125., 132., 76.,  80.,  0.,
      63.,  66.,  153., 160., 167., 96.,  100., 0.,   5.,   10.,  21.,  32.,
      43.,  24.,  30.,  0.,   30.,  35.,  76.,  87.,  98.,  54.,  60.,  0.,
      62.,  74.,  160., 186., 212., 116., 130., 0.,   122., 134., 290., 316.,
      342., 186., 200., 0.,   182., 194., 420., 446., 472., 256., 270., 0.,
      112., 119., 254., 269., 284., 152., 160., 0.,   147., 154., 329., 344.,
      359., 192., 200., 0.,   9.,   18.,  37.,  56.,  75.,  40.,  50.,  0.,
      54.,  63.,  132., 151., 170., 90.,  100., 0.,   110., 130., 272., 314.,
      356., 188., 210., 0.,   210., 230., 482., 524., 566., 298., 320., 0.,
      310., 330., 692., 734., 776., 408., 430., 0.,   176., 187., 390., 413.,
      436., 228., 240., 0.,   231., 242., 505., 528., 551., 288., 300., 0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      138.,   368.,   472.,   854.,   720.,   1226.,  968.,   1136.,  358.,
      888.,   992.,   1754.,  1400.,  2366.,  1808.,  1976.,  701.,   1660.,
      1912.,  3267.,  2524.,  4185.,  3136.,  3484.,  1110.,  2392.,  2624.,
      4202.,  3032.,  4814.,  3440.,  3736.,  1829.,  3916.,  4360.,  6939.,
      4972.,  7857.,  5584.,  6124.,  1862.,  3896.,  4256.,  6650.,  4664.,
      7262.,  5072.,  5496.,  2722.,  5696.,  6056.,  9470.,  6624.,  10322.,
      7192.,  7616.,  1866.,  3824.,  4440.,  6806.,  4688.,  7178.,  4936.,
      5616.,  3366.,  6904.,  7520.,  11546., 7928.,  12158., 8336.,  9016.,
      5213.,  10684., 11704., 17955., 12316., 18873., 12928., 14044., 4118.,
      8408.,  9152.,  13994., 9560.,  14606., 9968.,  10776., 6341.,  12940.,
      14152., 21627., 14764., 22545., 15376., 16684., 4870.,  9912.,  10784.,
      16442., 11192., 17054., 11600., 12536., 7010.,  14272., 15144., 23102.,
      15712., 23954., 16280., 17216., 3594.,  7280.,  8408.,  12758., 8656.,
      13130., 8904.,  10096., 6374.,  12920., 14048., 21338., 14456., 21950.,
      14864., 16056., 9725.,  19708., 21496., 32643., 22108., 33561., 22720.,
      24604., 7126.,  14424., 15680., 23786., 16088., 24398., 16496., 17816.,
      10853., 21964., 23944., 36315., 24556., 37233., 25168., 27244., 7878.,
      15928., 17312., 26234., 17720., 26846., 18128., 19576., 11298., 22848.,
      24232., 36734., 24800., 37586., 25368., 26816.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   0.,    35.,   41.,
      128.,  148.,  168.,  123.,  137.,  0.,    82.,   110.,  312.,  384.,
      456.,  306.,  350.,  0.,    222.,  250.,  672.,  744.,  816.,  526.,
      570.,  0.,    362.,  390.,  1032., 1104., 1176., 746.,  790.,  0.,
      347.,  369.,  864.,  916.,  968.,  563.,  593.,  0.,    457.,  479.,
      1124., 1176., 1228., 713.,  743.,  0.,    29.,   67.,   140.,  224.,
      308.,  173.,  219.,  0.,    219.,  257.,  560.,  644.,  728.,  403.,
      449.,  0.,    450.,  542.,  1176., 1376., 1576., 866.,  974.,  0.,
      910.,  1002., 2176., 2376., 2576., 1406., 1514., 0.,    1370., 1462.,
      3176., 3376., 3576., 1946., 2054., 0.,    851.,  905.,  1936., 2052.,
      2168., 1163., 1225., 0.,    1121., 1175., 2516., 2632., 2748., 1473.,
      1535., 0.,    53.,   123.,  252.,  400.,  548.,  293.,  371.,  0.,
      403.,  473.,  992.,  1140., 1288., 683.,  761.,  0.,    818.,  974.,
      2040., 2368., 2696., 1426., 1598., 0.,    1598., 1754., 3680., 4008.,
      4336., 2286., 2458., 0.,    2378., 2534., 5320., 5648., 5976., 3146.,
      3318., 0.,    1355., 1441., 3008., 3188., 3368., 1763., 1857., 0.,
      1785., 1871., 3908., 4088., 4268., 2233., 2327., 0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      956.,   2632.,  3432.,  6292.,  5384.,  9220.,  7336.,  8648.,  1996.,
      5992.,  5128.,  10948., 6312.,  13748., 7496.,  8808.,  4578.,  10172.,
      12140., 19830., 14940., 24030., 17740., 20476., 3852.,  13800., 9864.,
      22148., 11048., 24948., 12232., 14568., 9410.,  19836., 23340., 36630.,
      26140., 40830., 28940., 33212., 5708.,  21608., 14600., 33348., 15784.,
      36148., 16968., 20328., 12508., 25992., 28840., 44788., 31304., 48484.,
      33768., 37128., 956.,   2632.,  3432.,  6292.,  5384.,  9220.,  7336.,
      8648.,  1996.,  5992.,  5128.,  10948., 6312.,  13748., 7496.,  8808.,
      4578.,  10172., 12140., 19830., 14940., 24030., 17740., 20476., 3852.,
      13800., 9864.,  22148., 11048., 24948., 12232., 14568., 9410.,  19836.,
      23340., 36630., 26140., 40830., 28940., 33212., 5708.,  21608., 14600.,
      33348., 15784., 36148., 16968., 20328., 12508., 25992., 28840., 44788.,
      31304., 48484., 33768., 37128., 956.,   2632.,  3432.,  6292.,  5384.,
      9220.,  7336.,  8648.,  1996.,  5992.,  5128.,  10948., 6312.,  13748.,
      7496.,  8808.,  4578.,  10172., 12140., 19830., 14940., 24030., 17740.,
      20476., 3852.,  13800., 9864.,  22148., 11048., 24948., 12232., 14568.,
      9410.,  19836., 23340., 36630., 26140., 40830., 28940., 33212., 5708.,
      21608., 14600., 33348., 15784., 36148., 16968., 20328., 12508., 25992.,
      28840., 44788., 31304., 48484., 33768., 37128.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   0.,     230.,
      270.,   900.,   1044.,  1188.,  902.,   1006.,  0.,     540.,   748.,
      2216.,  2760.,  3304.,  2268.,  2604.,  0.,     1580.,  1788.,  4936.,
      5480.,  6024.,  3948.,  4284.,  0.,     2620.,  2828.,  7656.,  8200.,
      8744.,  5628.,  5964.,  0.,     2630.,  2798.,  6596.,  6996.,  7396.,
      4326.,  4558.,  0.,     3470.,  3638.,  8596.,  8996.,  9396.,  5486.,
      5718.,  0.,     190.,   486.,   1012.,  1668.,  2324.,  1310.,  1670.,
      0.,     1670.,  1966.,  4292.,  4948.,  5604.,  3110.,  3470.,  0.,
      3420.,  4140.,  9000.,  10568., 12136., 6684.,  7532.,  0.,     7020.,
      7740.,  16840., 18408., 19976., 10924., 11772., 0.,     10620., 11340.,
      24680., 26248., 27816., 15164., 16012., 0.,     6630.,  7054.,  15108.,
      16020., 16932., 9094.,  9582.,  0.,     8750.,  9174.,  19668., 20580.,
      21492., 11534., 12022., 0.,     350.,   902.,   1844.,  3012.,  4180.,
      2238.,  2854.,  0.,     3110.,  3662.,  7684.,  8852.,  10020., 5318.,
      5934.,  0.,     6300.,  7532.,  15784., 18376., 20968., 11100., 12460.,
      0.,     12460., 13692., 28744., 31336., 33928., 17900., 19260., 0.,
      18620., 19852., 41704., 44296., 46888., 24700., 26060., 0.,     10630.,
      11310., 23620., 25044., 26468., 13862., 14606., 0.,     14030., 14710.,
      30740., 32164., 33588., 17582., 18326., 0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      50.,    88.,    144.,   224.,   192.,   280.,   358.,   496.,   312.,
      408.,   538.,   688.,   432.,   536.,   512.,   624.,   150.,   208.,
      384.,   504.,   432.,   560.,   778.,   976.,   632.,   768.,   1078.,
      1288.,  832.,   976.,   912.,   1064.,  301.,   400.,   728.,   932.,
      848.,   1064.,  1467.,  1800.,  1148.,  1376.,  1917.,  2268.,  1448.,
      1688.,  1616.,  1868.,  518.,   592.,   1120.,  1272.,  1232.,  1392.,
      1978.,  2224.,  1432.,  1600.,  2278.,  2536.,  1632.,  1808.,  1776.,
      1960.,  853.,   976.,   1832.,  2084.,  2048.,  2312.,  3267.,  3672.,
      2348.,  2624.,  3717.,  4140.,  2648.,  2936.,  2912.,  3212.,  886.,
      976.,   1856.,  2040.,  2032.,  2224.,  3178.,  3472.,  2232.,  2432.,
      3478.,  3784.,  2432.,  2640.,  2640.,  2856.,  1306.,  1416.,  2736.,
      2960.,  2912.,  3144.,  4558.,  4912.,  3192.,  3432.,  4978.,  5344.,
      3472.,  3720.,  3680.,  3936.,  882.,   984.,   1808.,  2016.,  2112.,
      2328.,  3238.,  3568.,  2232.,  2456.,  3418.,  3760.,  2352.,  2584.,
      2688.,  2928.,  1622.,  1744.,  3328.,  3576.,  3632.,  3888.,  5578.,
      5968.,  3832.,  4096.,  5878.,  6280.,  4032.,  4304.,  4368.,  4648.,
      2509.,  2704.,  5144.,  5540.,  5648.,  6056.,  8667.,  9288.,  5948.,
      6368.,  9117.,  9756.,  6248.,  6680.,  6800.,  7244.,  1990.,  2128.,
      4064.,  4344.,  4432.,  4720.,  6778.,  7216.,  4632.,  4928.,  7078.,
      7528.,  4832.,  5136.,  5232.,  5544.,  3061.,  3280.,  6248.,  6692.,
      6848.,  7304.,  10467., 11160., 7148.,  7616.,  10917., 11628., 7448.,
      7928.,  8096.,  8588.,  2358.,  2512.,  4800.,  5112.,  5232.,  5552.,
      7978.,  8464.,  5432.,  5760.,  8278.,  8776.,  5632.,  5968.,  6096.,
      6440.,  3418.,  3592.,  6960.,  7312.,  7392.,  7752.,  11278., 11824.,
      7672.,  8040.,  11698., 12256., 7952.,  8328.,  8416.,  8800.,  1714.,
      1880.,  3472.,  3808.,  4032.,  4376.,  6118.,  6640.,  4152.,  4504.,
      6298.,  6832.,  4272.,  4632.,  4864.,  5232.,  3094.,  3280.,  6272.,
      6648.,  6832.,  7216.,  10378., 10960., 7032.,  7424.,  10678., 11272.,
      7232.,  7632.,  7824.,  8232.,  4717.,  5008.,  9560.,  10148., 10448.,
      11048., 15867., 16776., 10748., 11360., 16317., 17244., 11048., 11672.,
      11984., 12620., 3462.,  3664.,  7008.,  7416.,  7632.,  8048.,  11578.,
      12208., 7832.,  8256.,  11878., 12520., 8032.,  8464.,  8688.,  9128.,
      5269.,  5584.,  10664., 11300., 11648., 12296., 17667., 18648., 11948.,
      12608., 18117., 19116., 12248., 12920., 13280., 13964., 3830.,  4048.,
      7744.,  8184.,  8432.,  8880.,  12778., 13456., 8632.,  9088.,  13078.,
      13768., 8832.,  9296.,  9552.,  10024., 5530.,  5768.,  11184., 11664.,
      11872., 12360., 17998., 18736., 12152., 12648., 18418., 19168., 12432.,
      12936., 13152., 13664.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,   32.,   24.,   44.,
      21.,   32.,   27.,   40.,   0.,    0.,    11.,   24.,   13.,   28.,
      48.,   80.,   56.,   92.,   64.,   104.,  51.,   72.,   57.,   80.,
      0.,    0.,    26.,   56.,   38.,   72.,   120.,  192.,  152.,  232.,
      184.,  272.,  130.,  176.,  150.,  200.,  0.,    0.,    86.,   136.,
      98.,   152.,  280.,  392.,  312.,  432.,  344.,  472.,  230.,  296.,
      250.,  320.,  0.,    0.,    146.,  216.,  158.,  232.,  440.,  592.,
      472.,  632.,  504.,  672.,  330.,  416.,  350.,  440.,  0.,    0.,
      155.,  192.,  165.,  204.,  392.,  472.,  416.,  500.,  440.,  528.,
      259.,  304.,  273.,  320.,  0.,    0.,    205.,  252.,  215.,  264.,
      512.,  612.,  536.,  640.,  560.,  668.,  329.,  384.,  343.,  400.,
      0.,    0.,    9.,    20.,   27.,   40.,   56.,   84.,   96.,   128.,
      136.,  172.,  77.,   96.,   99.,   120.,  0.,    0.,    99.,   120.,
      117.,  140.,  256.,  304.,  296.,  348.,  336.,  392.,  187.,  216.,
      209.,  240.,  0.,    0.,    202.,  248.,  246.,  296.,  536.,  640.,
      632.,  744.,  728.,  848.,  402.,  464.,  454.,  520.,  0.,    0.,
      422.,  488.,  466.,  536.,  1016., 1160., 1112., 1264., 1208., 1368.,
      662.,  744.,  714.,  800.,  0.,    0.,    642.,  728.,  686.,  776.,
      1496., 1680., 1592., 1784., 1688., 1888., 922.,  1024., 974.,  1080.,
      0.,    0.,    403.,  448.,  429.,  476.,  920.,  1016., 976.,  1076.,
      1032., 1136., 555.,  608.,  585.,  640.,  0.,    0.,    533.,  588.,
      559.,  616.,  1200., 1316., 1256., 1376., 1312., 1436., 705.,  768.,
      735.,  800.,  0.,    0.,    17.,   36.,   51.,   72.,   104.,  148.,
      176.,  224.,  248.,  300.,  133.,  160.,  171.,  200.,  0.,    0.,
      187.,  216.,  221.,  252.,  464.,  528.,  536.,  604.,  608.,  680.,
      323.,  360.,  361.,  400.,  0.,    0.,    378.,  440.,  454.,  520.,
      952.,  1088., 1112., 1256., 1272., 1424., 674.,  752.,  758.,  840.,
      0.,    0.,    758.,  840.,  834.,  920.,  1752., 1928., 1912., 2096.,
      2072., 2264., 1094., 1192., 1178., 1280., 0.,    0.,    1138., 1240.,
      1214., 1320., 2552., 2768., 2712., 2936., 2872., 3104., 1514., 1632.,
      1598., 1720., 0.,    0.,    651.,  704.,  693.,  748.,  1448., 1560.,
      1536., 1652., 1624., 1744., 851.,  912.,  897.,  960.,  0.,    0.,
      861.,  924.,  903.,  968.,  1888., 2020., 1976., 2112., 2064., 2204.,
      1081., 1152., 1127., 1200., 0.,    0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      330.,   626.,   1004.,  1628.,  1372.,  2060.,  2606.,  3686.,  2316.,
      3068.,  4022.,  5198.,  3260.,  4076.,  3884.,  4764.,  898.,   1098.,
      2652.,  3340.,  2316.,  2812.,  4950.,  5998.,  2876.,  3436.,  6302.,
      7446.,  3436.,  4060.,  4060.,  4748.,  2027.,  2551.,  4538.,  5634.,
      5474.,  6666.,  8985.,  10845., 6826.,  8114.,  11013., 13017., 8178.,
      9562.,  9498.,  10978., 1762.,  2090.,  6428.,  7372.,  4556.,  5308.,
      10358., 11790., 5116.,  5932.,  11710., 13238., 5676.,  6556.,  6812.,
      7756.,  4347.,  5063.,  9178.,  10658., 10882., 12458., 17097., 19533.,
      12234., 13906., 19125., 21705., 13586., 15354., 15674., 17538., 2626.,
      3082.,  10204., 11404., 6796.,  7804.,  15766., 17582., 7356.,  8428.,
      17118., 19030., 7916.,  9052.,  9564.,  10764., 5946.,  6562.,  12364.,
      13628., 13756., 15084., 21374., 23414., 14956., 16348., 23174., 25310.,
      16156., 17612., 17804., 19324., 330.,   626.,   1004.,  1628.,  1372.,
      2060.,  2606.,  3686.,  2316.,  3068.,  4022.,  5198.,  3260.,  4076.,
      3884.,  4764.,  898.,   1098.,  2652.,  3340.,  2316.,  2812.,  4950.,
      5998.,  2876.,  3436.,  6302.,  7446.,  3436.,  4060.,  4060.,  4748.,
      2027.,  2551.,  4538.,  5634.,  5474.,  6666.,  8985.,  10845., 6826.,
      8114.,  11013., 13017., 8178.,  9562.,  9498.,  10978., 1762.,  2090.,
      6428.,  7372.,  4556.,  5308.,  10358., 11790., 5116.,  5932.,  11710.,
      13238., 5676.,  6556.,  6812.,  7756.,  4347.,  5063.,  9178.,  10658.,
      10882., 12458., 17097., 19533., 12234., 13906., 19125., 21705., 13586.,
      15354., 15674., 17538., 2626.,  3082.,  10204., 11404., 6796.,  7804.,
      15766., 17582., 7356.,  8428.,  17118., 19030., 7916.,  9052.,  9564.,
      10764., 5946.,  6562.,  12364., 13628., 13756., 15084., 21374., 23414.,
      14956., 16348., 23174., 25310., 16156., 17612., 17804., 19324., 330.,
      626.,   1004.,  1628.,  1372.,  2060.,  2606.,  3686.,  2316.,  3068.,
      4022.,  5198.,  3260.,  4076.,  3884.,  4764.,  898.,   1098.,  2652.,
      3340.,  2316.,  2812.,  4950.,  5998.,  2876.,  3436.,  6302.,  7446.,
      3436.,  4060.,  4060.,  4748.,  2027.,  2551.,  4538.,  5634.,  5474.,
      6666.,  8985.,  10845., 6826.,  8114.,  11013., 13017., 8178.,  9562.,
      9498.,  10978., 1762.,  2090.,  6428.,  7372.,  4556.,  5308.,  10358.,
      11790., 5116.,  5932.,  11710., 13238., 5676.,  6556.,  6812.,  7756.,
      4347.,  5063.,  9178.,  10658., 10882., 12458., 17097., 19533., 12234.,
      13906., 19125., 21705., 13586., 15354., 15674., 17538., 2626.,  3082.,
      10204., 11404., 6796.,  7804.,  15766., 17582., 7356.,  8428.,  17118.,
      19030., 7916.,  9052.,  9564.,  10764., 5946.,  6562.,  12364., 13628.,
      13756., 15084., 21374., 23414., 14956., 16348., 23174., 25310., 16156.,
      17612., 17804., 19324.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    17.,    53.,    46.,    134.,   102.,   222.,   158.,
      310.,   149.,   233.,   193.,   293.,   0.,     0.,     65.,    165.,
      77.,    193.,   326.,   574.,   382.,   662.,   438.,   750.,   369.,
      533.,   413.,   593.,   0.,     0.,     154.,   386.,   242.,   506.,
      828.,   1388.,  1068.,  1692.,  1308.,  1996.,  954.,   1314.,  1106.,
      1498.,  0.,     0.,     594.,   986.,   682.,   1106.,  2028.,  2908.,
      2268.,  3212.,  2508.,  3516.,  1714.,  2234.,  1866.,  2418.,  0.,
      0.,     1034.,  1586.,  1122.,  1706.,  3228.,  4428.,  3468.,  4732.,
      3708.,  5036.,  2474.,  3154.,  2626.,  3338.,  0.,     0.,     1169.,
      1461.,  1245.,  1553.,  2982.,  3614.,  3166.,  3830.,  3350.,  4046.,
      1985.,  2341.,  2093.,  2465.,  0.,     0.,     1549.,  1921.,  1625.,
      2013.,  3902.,  4694.,  4086.,  4910.,  4270.,  5126.,  2525.,  2961.,
      2633.,  3085.,  0.,     0.,     53.,    137.,   193.,   293.,   398.,
      614.,   710.,   958.,   1022.,  1302.,  581.,   729.,   753.,   917.,
      0.,     0.,     753.,   917.,   893.,   1073.,  1958.,  2334.,  2270.,
      2678.,  2582.,  3022.,  1441.,  1669.,  1613.,  1857.,  0.,     0.,
      1530.,  1890.,  1874.,  2266.,  4092.,  4908.,  4844.,  5724.,  5596.,
      6540.,  3098.,  3586.,  3506.,  4026.,  0.,     0.,     3250.,  3770.,
      3594.,  4146.,  7852.,  8988.,  8604.,  9804.,  9356.,  10620., 5138.,
      5786.,  5546.,  6226.,  0.,     0.,     4970.,  5650.,  5314.,  6026.,
      11612., 13068., 12364., 13884., 13116., 14700., 7178.,  7986.,  7586.,
      8426.,  0.,     0.,     3137.,  3493.,  3341.,  3713.,  7174.,  7934.,
      7614.,  8406.,  8054.,  8878.,  4337.,  4757.,  4573.,  5009.,  0.,
      0.,     4157.,  4593.,  4361.,  4813.,  9374.,  10294., 9814.,  10766.,
      10254., 11238., 5517.,  6017.,  5753.,  6269.,  0.,     0.,     101.,
      249.,   369.,   533.,   750.,   1094.,  1318.,  1694.,  1886.,  2294.,
      1013.,  1225.,  1313.,  1541.,  0.,     0.,     1441.,  1669.,  1709.,
      1953.,  3590.,  4094.,  4158.,  4694.,  4726.,  5294.,  2513.,  2805.,
      2813.,  3121.,  0.,     0.,     2906.,  3394.,  3506.,  4026.,  7356.,
      8428.,  8620.,  9756.,  9884.,  11084., 5242.,  5858.,  5906.,  6554.,
      0.,     0.,     5906.,  6554.,  6506.,  7186.,  13676., 15068., 14940.,
      16396., 16204., 17724., 8562.,  9338.,  9226.,  10034., 0.,     0.,
      8906.,  9714.,  9506.,  10346., 19996., 21708., 21260., 23036., 22524.,
      24364., 11882., 12818., 12546., 13514., 0.,     0.,     5105.,  5525.,
      5437.,  5873.,  11366., 12254., 12062., 12982., 12758., 13710., 6689.,
      7173.,  7053.,  7553.,  0.,     0.,     6765.,  7265.,  7097.,  7613.,
      14846., 15894., 15542., 16622., 16238., 17350., 8509.,  9073.,  8873.,
      9453.,  0.,     0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1724.,  3036.,  4120.,  7000.,  7000.,  10392., 11764., 17236., 10392.,
      14296., 16852., 23092., 13784., 18200., 18712., 23640., 7004.,  8572.,
      17880., 22296., 9240.,  12120., 25044., 31284., 11608., 15000., 31668.,
      38676., 13976., 17880., 18904., 23320., 4202.,  6298.,  10180., 14756.,
      13476., 18820., 22622., 30190., 20100., 26212., 30510., 39230., 26724.,
      33604., 28356., 34980., 860.,   2428.,  13784., 18200., 5144.,  8024.,
      22996., 29236., 7512.,  10904., 29620., 36628., 9880.,  13784., 14808.,
      19224., 7594.,  10202., 16964., 22564., 22308., 28676., 27678., 36782.,
      28932., 36068., 35566., 45822., 35556., 43460., 31044., 38692., 7004.,
      8572.,  17880., 22296., 9240.,  12120., 25044., 31284., 11608., 15000.,
      31668., 38676., 13976., 17880., 18904., 23320., 4092.,  5916.,  9880.,
      13784., 12760., 17176., 21300., 27284., 18200., 23128., 27412., 34164.,
      23640., 29080., 23832., 28760., 1724.,  3036.,  4120.,  7000.,  7000.,
      10392., 11764., 17236., 10392., 14296., 16852., 23092., 13784., 18200.,
      18712., 23640., 7004.,  8572.,  17880., 22296., 9240.,  12120., 25044.,
      31284., 11608., 15000., 31668., 38676., 13976., 17880., 18904., 23320.,
      4202.,  6298.,  10180., 14756., 13476., 18820., 22622., 30190., 20100.,
      26212., 30510., 39230., 26724., 33604., 28356., 34980., 860.,   2428.,
      13784., 18200., 5144.,  8024.,  22996., 29236., 7512.,  10904., 29620.,
      36628., 9880.,  13784., 14808., 19224., 7594.,  10202., 16964., 22564.,
      22308., 28676., 27678., 36782., 28932., 36068., 35566., 45822., 35556.,
      43460., 31044., 38692., 7004.,  8572.,  17880., 22296., 9240.,  12120.,
      25044., 31284., 11608., 15000., 31668., 38676., 13976., 17880., 18904.,
      23320., 4092.,  5916.,  9880.,  13784., 12760., 17176., 21300., 27284.,
      18200., 23128., 27412., 34164., 23640., 29080., 23832., 28760., 1724.,
      3036.,  4120.,  7000.,  7000.,  10392., 11764., 17236., 10392., 14296.,
      16852., 23092., 13784., 18200., 18712., 23640., 7004.,  8572.,  17880.,
      22296., 9240.,  12120., 25044., 31284., 11608., 15000., 31668., 38676.,
      13976., 17880., 18904., 23320., 4202.,  6298.,  10180., 14756., 13476.,
      18820., 22622., 30190., 20100., 26212., 30510., 39230., 26724., 33604.,
      28356., 34980., 860.,   2428.,  13784., 18200., 5144.,  8024.,  22996.,
      29236., 7512.,  10904., 29620., 36628., 9880.,  13784., 14808., 19224.,
      7594.,  10202., 16964., 22564., 22308., 28676., 27678., 36782., 28932.,
      36068., 35566., 45822., 35556., 43460., 31044., 38692., 7004.,  8572.,
      17880., 22296., 9240.,  12120., 25044., 31284., 11608., 15000., 31668.,
      38676., 13976., 17880., 18904., 23320., 4092.,  5916.,  9880.,  13784.,
      12760., 17176., 21300., 27284., 18200., 23128., 27412., 34164., 23640.,
      29080., 23832., 28760.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1132.,
      2316.,  1118.,  1774.,  1454.,  2238.,  0.,     0.,     430.,   1214.,
      510.,   1422.,  2380.,  4332.,  2156.,  3340.,  2572.,  4012.,  110.,
      382.,   446.,   846.,   0.,     0.,     380.,   1180.,  1052.,  2108.,
      2776.,  5144.,  4632.,  7512.,  6488.,  9880.,  4604.,  6428.,  5788.,
      7868.,  0.,     0.,     3740.,  5820.,  3772.,  5084.,  11416., 15320.,
      5848.,  8216.,  7704.,  10584., 1052.,  2108.,  2236.,  3548.,  0.,
      0.,     1724.,  3036.,  2396.,  3964.,  6488.,  9880.,  8344.,  12248.,
      9560.,  12952., 6972.,  9308.,  5468.,  7036.,  0.,     0.,     4334.,
      5630.,  190.,   590.,   6988.,  8940.,  1644.,  2828.,  3084.,  4524.,
      1966.,  2750.,  2814.,  3726.,  0.,     0.,     2558.,  3470.,  3150.,
      4190.,  7404.,  9612.,  8844.,  11308., 5548.,  7244.,  6206.,  7630.,
      270.,   798.,   0.,     0.,     350.,   1006.,  1454.,  2238.,  2988.,
      4684.,  5452.,  7404.,  7916.,  10124., 4510.,  5678.,  5870.,  7166.,
      0.,     0.,     5870.,  7166.,  6974.,  8398.,  15308., 18284., 8940.,
      11148., 11404., 13868., 430.,   1214.,  1790.,  2702.,  0.,     0.,
      3068.,  4892.,  5788.,  7868.,  12248., 16664., 18200., 23128., 24152.,
      29592., 13436., 16284., 16668., 19772., 0.,     0.,     16668., 19772.,
      10556., 12892., 33176., 39128., 15320., 19736., 21272., 26200., 3740.,
      5820.,  6972.,  9308.,  0.,     0.,     8508.,  10844., 11228., 13820.,
      24152., 29592., 30104., 36056., 27224., 32664., 19900., 23260., 12252.,
      14844., 0.,     0.,     11822., 13630., 510.,   1422.,  15820., 18796.,
      4332.,  6540.,  7820.,  10284., 4334.,  5630.,  6206.,  7630.,  0.,
      0.,     6974.,  8398.,  8590.,  10142., 18284., 21516., 21772., 25260.,
      12332., 15052., 13694., 15630., 590.,   1630.,  0.,     0.,     30.,
      174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1132.,  2316.,
      1118.,  1774.,  1454.,  2238.,  0.,     0.,     430.,   1214.,  510.,
      1422.,  2380.,  4332.,  2156.,  3340.,  2572.,  4012.,  110.,   382.,
      446.,   846.,   0.,     0.,     380.,   1180.,  1052.,  2108.,  2776.,
      5144.,  4632.,  7512.,  6488.,  9880.,  4604.,  6428.,  5788.,  7868.,
      0.,     0.,     3740.,  5820.,  3772.,  5084.,  11416., 15320., 5848.,
      8216.,  7704.,  10584., 1052.,  2108.,  2236.,  3548.,  0.,     0.,
      1724.,  3036.,  2396.,  3964.,  6488.,  9880.,  8344.,  12248., 9560.,
      12952., 6972.,  9308.,  5468.,  7036.,  0.,     0.,     4334.,  5630.,
      190.,   590.,   6988.,  8940.,  1644.,  2828.,  3084.,  4524.,  1966.,
      2750.,  2814.,  3726.,  0.,     0.,     2558.,  3470.,  3150.,  4190.,
      7404.,  9612.,  8844.,  11308., 5548.,  7244.,  6206.,  7630.,  270.,
      798.,   0.,     0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      130.,   200.,   274.,   352.,   428.,   576.,   732.,   896.,   604.,
      768.,   940.,   1120.,  1174.,  1432.,  1702.,  1984.,  1068.,  1248.,
      1436.,  1632.,  1870.,  2152.,  2446.,  2752.,  1532.,  1728.,  1932.,
      2144.,  1836.,  2048.,  2268.,  2496.,  490.,   600.,   714.,   832.,
      1308.,  1536.,  1772.,  2016.,  1484.,  1728.,  1980.,  2240.,  2734.,
      3112.,  3502.,  3904.,  2268.,  2528.,  2796.,  3072.,  3910.,  4312.,
      4726.,  5152.,  3052.,  3328.,  3612.,  3904.,  3356.,  3648.,  3948.,
      4256.,  1015.,  1204.,  1399.,  1600.,  2522.,  2912.,  3314.,  3728.,
      2978.,  3392.,  3818.,  4256.,  5229.,  5868.,  6525.,  7200.,  4154.,
      4592.,  5042.,  5504.,  6993.,  7668.,  8361.,  9072.,  5330.,  5792.,
      6266.,  6752.,  5978.,  6464.,  6962.,  7472.,  1930.,  2072.,  2218.,
      2368.,  4188.,  4480.,  4780.,  5088.,  4620.,  4928.,  5244.,  5568.,
      7438.,  7912.,  8398.,  8896.,  5404.,  5728.,  6060.,  6400.,  8614.,
      9112.,  9622.,  10144., 6188.,  6528.,  6876.,  7232.,  6748.,  7104.,
      7468.,  7840.,  3175.,  3412.,  3655.,  3904.,  6842.,  7328.,  7826.,
      8336.,  7682.,  8192.,  8714.,  9248.,  12285., 13068., 13869., 14688.,
      8858.,  9392.,  9938.,  10496., 14049., 14868., 15705., 16560., 10034.,
      10592., 11162., 11744., 11066., 11648., 12242., 12848., 3370.,  3544.,
      3722.,  3904.,  7068.,  7424.,  7788.,  8160.,  7756.,  8128.,  8508.,
      8896.,  12142., 12712., 13294., 13888., 8540.,  8928.,  9324.,  9728.,
      13318., 13912., 14518., 15136., 9324.,  9728.,  10140., 10560., 10140.,
      10560., 10988., 11424., 5010.,  5224.,  5442.,  5664.,  10508., 10944.,
      11388., 11840., 11196., 11648., 12108., 12576., 17542., 18232., 18934.,
      19648., 12300., 12768., 13244., 13728., 19198., 19912., 20638., 21376.,
      13404., 13888., 14380., 14880., 14220., 14720., 15228., 15744., 3330.,
      3528.,  3730.,  3936.,  6828.,  7232.,  7644.,  8064.,  8028.,  8448.,
      8876.,  9312.,  12310., 12952., 13606., 14272., 8492.,  8928.,  9372.,
      9824.,  13006., 13672., 14350., 15040., 8956.,  9408.,  9868.,  10336.,
      10284., 10752., 11228., 11712., 6250.,  6488.,  6730.,  6976.,  12828.,
      13312., 13804., 14304., 14028., 14528., 15036., 15552., 21550., 22312.,
      23086., 23872., 14812., 15328., 15852., 16384., 22726., 23512., 24310.,
      25120., 15596., 16128., 16668., 17216., 16924., 17472., 18028., 18592.,
      9655.,  10036., 10423., 10816., 19802., 20576., 21362., 22160., 21794.,
      22592., 23402., 24224., 33453., 34668., 35901., 37152., 22970., 23792.,
      24626., 25472., 35217., 36468., 37737., 39024., 24146., 24992., 25850.,
      26720., 26330., 27200., 28082., 28976., 7690.,  7960.,  8234.,  8512.,
      15708., 16256., 16812., 17376., 17164., 17728., 18300., 18880., 26254.,
      27112., 27982., 28864., 17948., 18528., 19116., 19712., 27430., 28312.,
      29206., 30112., 18732., 19328., 19932., 20544., 20316., 20928., 21548.,
      22176., 11815., 12244., 12679., 13120., 24122., 24992., 25874., 26768.,
      26498., 27392., 28298., 29216., 40509., 41868., 43245., 44640., 27674.,
      28592., 29522., 30464., 42273., 43668., 45081., 46512., 28850., 29792.,
      30746., 31712., 31418., 32384., 33362., 34352., 9130.,  9432.,  9738.,
      10048., 18588., 19200., 19820., 20448., 20300., 20928., 21564., 22208.,
      30958., 31912., 32878., 33856., 21084., 21728., 22380., 23040., 32134.,
      33112., 34102., 35104., 21868., 22528., 23196., 23872., 23708., 24384.,
      25068., 25760., 13330., 13672., 14018., 14368., 27148., 27840., 28540.,
      29248., 28860., 29568., 30284., 31008., 44038., 45112., 46198., 47296.,
      29964., 30688., 31420., 32160., 45694., 46792., 47902., 49024., 31068.,
      31808., 32556., 33312., 32908., 33664., 34428., 35200., 130.,   200.,
      274.,   352.,   428.,   576.,   732.,   896.,   604.,   768.,   940.,
      1120.,  1174.,  1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,
      1870.,  2152.,  2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,
      2048.,  2268.,  2496.,  490.,   600.,   714.,   832.,   1308.,  1536.,
      1772.,  2016.,  1484.,  1728.,  1980.,  2240.,  2734.,  3112.,  3502.,
      3904.,  2268.,  2528.,  2796.,  3072.,  3910.,  4312.,  4726.,  5152.,
      3052.,  3328.,  3612.,  3904.,  3356.,  3648.,  3948.,  4256.,  1015.,
      1204.,  1399.,  1600.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,
      3818.,  4256.,  5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,
      5504.,  6993.,  7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,
      5978.,  6464.,  6962.,  7472.,  1930.,  2072.,  2218.,  2368.,  4188.,
      4480.,  4780.,  5088.,  4620.,  4928.,  5244.,  5568.,  7438.,  7912.,
      8398.,  8896.,  5404.,  5728.,  6060.,  6400.,  8614.,  9112.,  9622.,
      10144., 6188.,  6528.,  6876.,  7232.,  6748.,  7104.,  7468.,  7840.,
      3175.,  3412.,  3655.,  3904.,  6842.,  7328.,  7826.,  8336.,  7682.,
      8192.,  8714.,  9248.,  12285., 13068., 13869., 14688., 8858.,  9392.,
      9938.,  10496., 14049., 14868., 15705., 16560., 10034., 10592., 11162.,
      11744., 11066., 11648., 12242., 12848., 3370.,  3544.,  3722.,  3904.,
      7068.,  7424.,  7788.,  8160.,  7756.,  8128.,  8508.,  8896.,  12142.,
      12712., 13294., 13888., 8540.,  8928.,  9324.,  9728.,  13318., 13912.,
      14518., 15136., 9324.,  9728.,  10140., 10560., 10140., 10560., 10988.,
      11424., 5010.,  5224.,  5442.,  5664.,  10508., 10944., 11388., 11840.,
      11196., 11648., 12108., 12576., 17542., 18232., 18934., 19648., 12300.,
      12768., 13244., 13728., 19198., 19912., 20638., 21376., 13404., 13888.,
      14380., 14880., 14220., 14720., 15228., 15744.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    5.,     12.,    21.,    32.,    14.,
      32.,    54.,    80.,    38.,    64.,    94.,    128.,   62.,    96.,
      134.,   176.,   65.,    84.,    105.,   128.,   85.,    108.,   133.,
      160.,   0.,     0.,     0.,     0.,     21.,    44.,    69.,    96.,
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   182.,   256.,   334.,   416.,   165.,   204.,
      245.,   288.,   185.,   228.,   273.,   320.,   0.,     0.,     0.,
      0.,     50.,    104.,   162.,   224.,   90.,    152.,   218.,   288.,
      348.,   480.,   620.,   768.,   460.,   608.,   764.,   928.,   572.,
      736.,   908.,   1088.,  434.,   520.,   610.,   704.,   506.,   600.,
      698.,   800.,   0.,     0.,     0.,     0.,     250.,   344.,   442.,
      544.,   290.,   392.,   498.,   608.,   908.,   1120.,  1340.,  1568.,
      1020.,  1248.,  1484.,  1728.,  1132.,  1376.,  1628.,  1888.,  794.,
      920.,   1050.,  1184.,  866.,   1000.,  1138.,  1280.,  0.,     0.,
      0.,     0.,     450.,   584.,   722.,   864.,   490.,   632.,   778.,
      928.,   1468.,  1760.,  2060.,  2368.,  1580.,  1888.,  2204.,  2528.,
      1692.,  2016.,  2348.,  2688.,  1154.,  1320.,  1490.,  1664.,  1226.,
      1400.,  1578.,  1760.,  0.,     0.,     0.,     0.,     549.,   620.,
      693.,   768.,   585.,   660.,   737.,   816.,   1414.,  1568.,  1726.,
      1888.,  1502.,  1664.,  1830.,  2000.,  1590.,  1760.,  1934.,  2112.,
      949.,   1036.,  1125.,  1216.,  1001.,  1092.,  1185.,  1280.,  0.,
      0.,     0.,     0.,     729.,   820.,   913.,   1008.,  765.,   860.,
      957.,   1056.,  1854.,  2048.,  2246.,  2448.,  1942.,  2144.,  2350.,
      2560.,  2030.,  2240.,  2454.,  2672.,  1209.,  1316.,  1425.,  1536.,
      1261.,  1372.,  1485.,  1600.,  0.,     0.,     0.,     0.,     17.,
      36.,    57.,    80.,    85.,    108.,   133.,   160.,   174.,   224.,
      278.,   336.,   326.,   384.,   446.,   512.,   478.,   544.,   614.,
      688.,   273.,   308.,   345.,   384.,   357.,   396.,   437.,   480.,
      0.,     0.,     0.,     0.,     357.,   396.,   437.,   480.,   425.,
      468.,   513.,   560.,   934.,   1024.,  1118.,  1216.,  1086.,  1184.,
      1286.,  1392.,  1238.,  1344.,  1454.,  1568.,  693.,   748.,   805.,
      864.,   777.,   836.,   897.,   960.,   0.,     0.,     0.,     0.,
      722.,   808.,   898.,   992.,   890.,   984.,   1082.,  1184.,  1948.,
      2144.,  2348.,  2560.,  2316.,  2528.,  2748.,  2976.,  2684.,  2912.,
      3148.,  3392.,  1490.,  1608.,  1730.,  1856.,  1690.,  1816.,  1946.,
      2080.,  0.,     0.,     0.,     0.,     1562.,  1688.,  1818.,  1952.,
      1730.,  1864.,  2002.,  2144.,  3788.,  4064.,  4348.,  4640.,  4156.,
      4448.,  4748.,  5056.,  4524.,  4832.,  5148.,  5472.,  2490.,  2648.,
      2810.,  2976.,  2690.,  2856.,  3026.,  3200.,  0.,     0.,     0.,
      0.,     2402.,  2568.,  2738.,  2912.,  2570.,  2744.,  2922.,  3104.,
      5628.,  5984.,  6348.,  6720.,  5996.,  6368.,  6748.,  7136.,  6364.,
      6752.,  7148.,  7552.,  3490.,  3688.,  3890.,  4096.,  3690.,  3896.,
      4106.,  4320.,  0.,     0.,     0.,     0.,     1525.,  1612.,  1701.,
      1792.,  1625.,  1716.,  1809.,  1904.,  3494.,  3680.,  3870.,  4064.,
      3710.,  3904.,  4102.,  4304.,  3926.,  4128.,  4334.,  4544.,  2117.,
      2220.,  2325.,  2432.,  2233.,  2340.,  2449.,  2560.,  0.,     0.,
      0.,     0.,     2025.,  2132.,  2241.,  2352.,  2125.,  2236.,  2349.,
      2464.,  4574.,  4800.,  5030.,  5264.,  4790.,  5024.,  5262.,  5504.,
      5006.,  5248.,  5494.,  5744.,  2697.,  2820.,  2945.,  3072.,  2813.,
      2940.,  3069.,  3200.,  0.,     0.,     0.,     0.,     33.,    68.,
      105.,   144.,   165.,   204.,   245.,   288.,   334.,   416.,   502.,
      592.,   614.,   704.,   798.,   896.,   894.,   992.,   1094.,  1200.,
      481.,   532.,   585.,   640.,   629.,   684.,   741.,   800.,   0.,
      0.,     0.,     0.,     693.,   748.,   805.,   864.,   825.,   884.,
      945.,   1008.,  1734.,  1856.,  1982.,  2112.,  2014.,  2144.,  2278.,
      2416.,  2294.,  2432.,  2574.,  2720.,  1221.,  1292.,  1365.,  1440.,
      1369.,  1444.,  1521.,  1600.,  0.,     0.,     0.,     0.,     1394.,
      1512.,  1634.,  1760.,  1690.,  1816.,  1946.,  2080.,  3548.,  3808.,
      4076.,  4352.,  4172.,  4448.,  4732.,  5024.,  4796.,  5088.,  5388.,
      5696.,  2546.,  2696.,  2850.,  3008.,  2874.,  3032.,  3194.,  3360.,
      0.,     0.,     0.,     0.,     2874.,  3032.,  3194.,  3360.,  3170.,
      3336.,  3506.,  3680.,  6668.,  7008.,  7356.,  7712.,  7292.,  7648.,
      8012.,  8384.,  7916.,  8288.,  8668.,  9056.,  4186.,  4376.,  4570.,
      4768.,  4514.,  4712.,  4914.,  5120.,  0.,     0.,     0.,     0.,
      4354.,  4552.,  4754.,  4960.,  4650.,  4856.,  5066.,  5280.,  9788.,
      10208., 10636., 11072., 10412., 10848., 11292., 11744., 11036., 11488.,
      11948., 12416., 5826.,  6056.,  6290.,  6528.,  6154.,  6392.,  6634.,
      6880.,  0.,     0.,     0.,     0.,     2501.,  2604.,  2709.,  2816.,
      2665.,  2772.,  2881.,  2992.,  5574.,  5792.,  6014.,  6240.,  5918.,
      6144.,  6374.,  6608.,  6262.,  6496.,  6734.,  6976.,  3285.,  3404.,
      3525.,  3648.,  3465.,  3588.,  3713.,  3840.,  0.,     0.,     0.,
      0.,     3321.,  3444.,  3569.,  3696.,  3485.,  3612.,  3741.,  3872.,
      7294.,  7552.,  7814.,  8080.,  7638.,  7904.,  8174.,  8448.,  7982.,
      8256.,  8534.,  8816.,  4185.,  4324.,  4465.,  4608.,  4365.,  4508.,
      4653.,  4800.,  0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      714.,   1010.,  1338.,  1698.,  1732.,  2388.,  3108.,  3892.,  3108.,
      3892.,  4740.,  5652.,  5246.,  6518.,  7886.,  9350.,  4740.,  5652.,
      6628.,  7668.,  7694.,  9158.,  10718., 12374., 6372.,  7412.,  8516.,
      9684.,  8772.,  9940.,  11172., 12468., 3322.,  3682.,  4074.,  4498.,
      8420.,  9460.,  10564., 11732., 4292.,  4948.,  5668.,  6452.,  11790.,
      13254., 14814., 16470., 5412.,  6196.,  7044.,  7956.,  15006., 16662.,
      18414., 20262., 6532.,  7444.,  8420.,  9460.,  8932.,  9972.,  11076.,
      12244., 1863.,  2339.,  2863.,  3435.,  4566.,  5614.,  6758.,  7998.,
      6118.,  7358.,  8694.,  10126., 10437., 12185., 14077., 16113., 9334.,
      10766., 12294., 13918., 14237., 16273., 18453., 20777., 12550., 14174.,
      15894., 17710., 13398., 14958., 16614., 18366., 250.,   610.,   1002.,
      1426.,  6372.,  7412.,  8516.,  9684.,  2244.,  2900.,  3620.,  4404.,
      10766., 12230., 13790., 15446., 3364.,  4148.,  4996.,  5908.,  13982.,
      15638., 17390., 19238., 4484.,  5396.,  6372.,  7412.,  6884.,  7924.,
      9028.,  10196., 3495.,  4099.,  4751.,  5451.,  7830.,  9134.,  10534.,
      12030., 10406., 11902., 13494., 15182., 12773., 14905., 17181., 19601.,
      13622., 15310., 17094., 18974., 16573., 18993., 21557., 24265., 16838.,
      18718., 20694., 22766., 14614., 16430., 18342., 20350., 3322.,  3682.,
      4074.,  4498.,  8420.,  9460.,  10564., 11732., 4292.,  4948.,  5668.,
      6452.,  11790., 13254., 14814., 16470., 5412.,  6196.,  7044.,  7956.,
      15006., 16662., 18414., 20262., 6532.,  7444.,  8420.,  9460.,  8932.,
      9972.,  11076., 12244., 1834.,  2258.,  2714.,  3202.,  4484.,  5396.,
      6372.,  7412.,  5860.,  6900.,  8004.,  9172.,  9950.,  11350., 12846.,
      14438., 8516.,  9684.,  10916., 12212., 12910., 14502., 16190., 17974.,
      11172., 12468., 13828., 15252., 11332., 12500., 13732., 15028., 714.,
      1010.,  1338.,  1698.,  1732.,  2388.,  3108.,  3892.,  3108.,  3892.,
      4740.,  5652.,  5246.,  6518.,  7886.,  9350.,  4740.,  5652.,  6628.,
      7668.,  7694.,  9158.,  10718., 12374., 6372.,  7412.,  8516.,  9684.,
      8772.,  9940.,  11172., 12468., 3322.,  3682.,  4074.,  4498.,  8420.,
      9460.,  10564., 11732., 4292.,  4948.,  5668.,  6452.,  11790., 13254.,
      14814., 16470., 5412.,  6196.,  7044.,  7956.,  15006., 16662., 18414.,
      20262., 6532.,  7444.,  8420.,  9460.,  8932.,  9972.,  11076., 12244.,
      1863.,  2339.,  2863.,  3435.,  4566.,  5614.,  6758.,  7998.,  6118.,
      7358.,  8694.,  10126., 10437., 12185., 14077., 16113., 9334.,  10766.,
      12294., 13918., 14237., 16273., 18453., 20777., 12550., 14174., 15894.,
      17710., 13398., 14958., 16614., 18366., 250.,   610.,   1002.,  1426.,
      6372.,  7412.,  8516.,  9684.,  2244.,  2900.,  3620.,  4404.,  10766.,
      12230., 13790., 15446., 3364.,  4148.,  4996.,  5908.,  13982., 15638.,
      17390., 19238., 4484.,  5396.,  6372.,  7412.,  6884.,  7924.,  9028.,
      10196., 3495.,  4099.,  4751.,  5451.,  7830.,  9134.,  10534., 12030.,
      10406., 11902., 13494., 15182., 12773., 14905., 17181., 19601., 13622.,
      15310., 17094., 18974., 16573., 18993., 21557., 24265., 16838., 18718.,
      20694., 22766., 14614., 16430., 18342., 20350., 3322.,  3682.,  4074.,
      4498.,  8420.,  9460.,  10564., 11732., 4292.,  4948.,  5668.,  6452.,
      11790., 13254., 14814., 16470., 5412.,  6196.,  7044.,  7956.,  15006.,
      16662., 18414., 20262., 6532.,  7444.,  8420.,  9460.,  8932.,  9972.,
      11076., 12244., 1834.,  2258.,  2714.,  3202.,  4484.,  5396.,  6372.,
      7412.,  5860.,  6900.,  8004.,  9172.,  9950.,  11350., 12846., 14438.,
      8516.,  9684.,  10916., 12212., 12910., 14502., 16190., 17974., 11172.,
      12468., 13828., 15252., 11332., 12500., 13732., 15028., 714.,   1010.,
      1338.,  1698.,  1732.,  2388.,  3108.,  3892.,  3108.,  3892.,  4740.,
      5652.,  5246.,  6518.,  7886.,  9350.,  4740.,  5652.,  6628.,  7668.,
      7694.,  9158.,  10718., 12374., 6372.,  7412.,  8516.,  9684.,  8772.,
      9940.,  11172., 12468., 3322.,  3682.,  4074.,  4498.,  8420.,  9460.,
      10564., 11732., 4292.,  4948.,  5668.,  6452.,  11790., 13254., 14814.,
      16470., 5412.,  6196.,  7044.,  7956.,  15006., 16662., 18414., 20262.,
      6532.,  7444.,  8420.,  9460.,  8932.,  9972.,  11076., 12244., 1863.,
      2339.,  2863.,  3435.,  4566.,  5614.,  6758.,  7998.,  6118.,  7358.,
      8694.,  10126., 10437., 12185., 14077., 16113., 9334.,  10766., 12294.,
      13918., 14237., 16273., 18453., 20777., 12550., 14174., 15894., 17710.,
      13398., 14958., 16614., 18366., 250.,   610.,   1002.,  1426.,  6372.,
      7412.,  8516.,  9684.,  2244.,  2900.,  3620.,  4404.,  10766., 12230.,
      13790., 15446., 3364.,  4148.,  4996.,  5908.,  13982., 15638., 17390.,
      19238., 4484.,  5396.,  6372.,  7412.,  6884.,  7924.,  9028.,  10196.,
      3495.,  4099.,  4751.,  5451.,  7830.,  9134.,  10534., 12030., 10406.,
      11902., 13494., 15182., 12773., 14905., 17181., 19601., 13622., 15310.,
      17094., 18974., 16573., 18993., 21557., 24265., 16838., 18718., 20694.,
      22766., 14614., 16430., 18342., 20350., 3322.,  3682.,  4074.,  4498.,
      8420.,  9460.,  10564., 11732., 4292.,  4948.,  5668.,  6452.,  11790.,
      13254., 14814., 16470., 5412.,  6196.,  7044.,  7956.,  15006., 16662.,
      18414., 20262., 6532.,  7444.,  8420.,  9460.,  8932.,  9972.,  11076.,
      12244., 1834.,  2258.,  2714.,  3202.,  4484.,  5396.,  6372.,  7412.,
      5860.,  6900.,  8004.,  9172.,  9950.,  11350., 12846., 14438., 8516.,
      9684.,  10916., 12212., 12910., 14502., 16190., 17974., 11172., 12468.,
      13828., 15252., 11332., 12500., 13732., 15028.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  0.,     0.,     0.,     0.,     125.,   305.,   501.,   713.,
      149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  1138.,
      1658.,  2210.,  2794.,  1314.,  1898.,  2514.,  3162.,  1245.,  1553.,
      1877.,  2217.,  1397.,  1737.,  2093.,  2465.,  0.,     0.,     0.,
      0.,     298.,   722.,   1178.,  1666.,  602.,   1090.,  1610.,  2162.,
      2532.,  3572.,  4676.,  5844.,  3396.,  4564.,  5796.,  7092.,  4260.,
      5556.,  6916.,  8340.,  3306.,  3986.,  4698.,  5442.,  3866.,  4610.,
      5386.,  6194.,  0.,     0.,     0.,     0.,     1818.,  2562.,  3338.,
      4146.,  1738.,  2034.,  2362.,  2722.,  6468.,  7636.,  8868.,  10164.,
      4900.,  5684.,  6532.,  7444.,  5764.,  6676.,  7652.,  8692.,  3674.,
      4162.,  4682.,  5234.,  4234.,  4786.,  5370.,  5986.,  0.,     0.,
      0.,     0.,     2954.,  3506.,  4090.,  4706.,  3258.,  3874.,  4522.,
      5202.,  8356.,  9652.,  11012., 12436., 9220.,  10644., 12132., 13684.,
      10084., 11636., 13252., 14932., 6474.,  7282.,  8122.,  8994.,  7034.,
      7906.,  8810.,  9746.,  0.,     0.,     0.,     0.,     4253.,  4817.,
      5397.,  5993.,  53.,    137.,   237.,   353.,   6530.,  7242.,  7986.,
      8762.,  690.,   954.,   1250.,  1578.,  1378.,  1706.,  2066.,  2458.,
      893.,   1073.,  1269.,  1481.,  1301.,  1513.,  1741.,  1985.,  0.,
      0.,     0.,     0.,     1173.,  1385.,  1613.,  1857.,  1453.,  1697.,
      1957.,  2233.,  3442.,  3962.,  4514.,  5098.,  4130.,  4714.,  5330.,
      5978.,  4818.,  5466.,  6146.,  6858.,  2933.,  3273.,  3629.,  4001.,
      3341.,  3713.,  4101.,  4505.,  0.,     0.,     0.,     0.,     101.,
      249.,   413.,   593.,   637.,   817.,   1013.,  1225.,  1298.,  1690.,
      2114.,  2570.,  2498.,  2954.,  3442.,  3962.,  3698.,  4218.,  4770.,
      5354.,  2117.,  2393.,  2685.,  2993.,  2781.,  3089.,  3413.,  3753.,
      0.,     0.,     0.,     0.,     2781.,  3089.,  3413.,  3753.,  3317.,
      3657.,  4013.,  4385.,  7298.,  8010.,  8754.,  9530.,  8498.,  9274.,
      10082., 10922., 9698.,  10538., 11410., 12314., 5437.,  5873.,  6325.,
      6793.,  6101.,  6569.,  7053.,  7553.,  0.,     0.,     0.,     0.,
      5610.,  6290.,  7002.,  7746.,  6938.,  7682.,  8458.,  9266.,  15204.,
      16756., 18372., 20052., 18116., 19796., 21540., 23348., 21028., 22836.,
      24708., 26644., 11690., 12626., 13594., 14594., 13274., 14274., 15306.,
      16370., 0.,     0.,     0.,     0.,     12250., 13250., 14282., 15346.,
      5002.,  5554.,  6138.,  6754.,  21188., 22868., 24612., 26420., 13476.,
      14772., 16132., 17556., 16388., 17812., 19300., 20852., 8986.,  9730.,
      10506., 11314., 10570., 11378., 12218., 13090., 0.,     0.,     0.,
      0.,     10314., 11122., 11962., 12834., 11642., 12514., 13418., 14354.,
      25124., 26932., 28804., 30740., 28036., 29972., 31972., 34036., 30948.,
      33012., 35140., 37332., 16906., 17970., 19066., 20194., 18490., 19618.,
      20778., 21970., 0.,     0.,     0.,     0.,     12029., 12721., 13429.,
      14153., 149.,   361.,   589.,   833.,   14914., 15882., 16882., 17914.,
      1906.,  2426.,  2978.,  3562.,  3618.,  4202.,  4818.,  5466.,  2013.,
      2321.,  2645.,  2985.,  2933.,  3273.,  3629.,  4001.,  0.,     0.,
      0.,     0.,     3317.,  3657.,  4013.,  4385.,  4109.,  4481.,  4869.,
      5273.,  8754.,  9530.,  10338., 11178., 10466., 11306., 12178., 13082.,
      12178., 13082., 14018., 14986., 6613.,  7081.,  7565.,  8065.,  7533.,
      8033.,  8549.,  9081.,  0.,     0.,     0.,     0.,     197.,   473.,
      765.,   1073.,  1245.,  1553.,  1877.,  2217.,  2514.,  3162.,  3842.,
      4554.,  4738.,  5450.,  6194.,  6970.,  6962.,  7738.,  8546.,  9386.,
      3749.,  4153.,  4573.,  5009.,  4925.,  5361.,  5813.,  6281.,  0.,
      0.,     0.,     0.,     5437.,  5873.,  6325.,  6793.,  6485.,  6953.,
      7437.,  7937.,  13634., 14602., 15602., 16634., 15858., 16890., 17954.,
      19050., 18082., 19178., 20306., 21466., 9629.,  10193., 10773., 11369.,
      10805., 11401., 12013., 12641., 0.,     0.,     0.,     0.,     10922.,
      11858., 12826., 13826., 13274., 14274., 15306., 16370., 27876., 29940.,
      32068., 34260., 32836., 35028., 37284., 39604., 37796., 40116., 42500.,
      44948., 20074., 21266., 22490., 23746., 22682., 23938., 25226., 26546.,
      0.,     0.,     0.,     0.,     22682., 23938., 25226., 26546., 8266.,
      9074.,  9914.,  10786., 35908., 38100., 40356., 42676., 22052., 23860.,
      25732., 27668., 27012., 28948., 30948., 33012., 14298., 15298., 16330.,
      17394., 16906., 17970., 19066., 20194., 0.,     0.,     0.,     0.,
      17674., 18738., 19834., 20962., 20026., 21154., 22314., 23506., 41892.,
      44212., 46596., 49044., 46852., 49300., 51812., 54388., 51812., 54388.,
      57028., 59732., 27338., 28658., 30010., 31394., 29946., 31330., 32746.,
      34194., 0.,     0.,     0.,     0.,     19805., 20625., 21461., 22313.,
      245.,   585.,   941.,   1313.,  23298., 24522., 25778., 27066., 3122.,
      3898.,  4706.,  5546.,  5858.,  6698.,  7570.,  8474.,  3133.,  3569.,
      4021.,  4489.,  4565.,  5033.,  5517.,  6017.,  0.,     0.,     0.,
      0.,     5461.,  5929.,  6413.,  6913.,  6765.,  7265.,  7781.,  8313.,
      14066., 15098., 16162., 17258., 16802., 17898., 19026., 20186., 19538.,
      20698., 21890., 23114., 10293., 10889., 11501., 12129., 11725., 12353.,
      12997., 13657., 0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      700.,   2012.,  3580.,  5404.,  3128.,  5240.,  7864.,  11000., 5816.,
      8952.,  12600., 16760., 8244.,  12180., 16884., 22356., 14648., 18808.,
      23480., 28664., 15348., 20820., 27060., 34068., 23480., 28664., 34360.,
      40568., 12600., 16760., 21432., 26616., 380.,   1180.,  2236.,  3548.,
      5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000., 15348.,
      20820., 27060., 34068., 7864.,  11000., 14648., 18808., 28596., 35604.,
      43380., 51924., 12600., 16760., 21432., 26616., 23480., 28664., 34360.,
      40568., 890.,   2602.,  4698.,  7178.,  3668.,  6836.,  10772., 15476.,
      7700.,  12404., 17876., 24116., 11182., 16830., 23630., 31582., 20948.,
      27188., 34196., 41972., 20814., 28766., 37870., 48126., 34196., 41972.,
      50516., 59828., 19924., 26164., 33172., 40948., 380.,   1180.,  2236.,
      3548.,  5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000.,
      15348., 20820., 27060., 34068., 7864.,  11000., 14648., 18808., 28596.,
      35604., 43380., 51924., 12600., 16760., 21432., 26616., 23480., 28664.,
      34360., 40568., 890.,   2602.,  4698.,  7178.,  3668.,  6836.,  10772.,
      15476., 7700.,  12404., 17876., 24116., 11182., 16830., 23630., 31582.,
      20948., 27188., 34196., 41972., 20814., 28766., 37870., 48126., 34196.,
      41972., 50516., 59828., 19924., 26164., 33172., 40948., 380.,   1180.,
      2236.,  3548.,  5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,
      11000., 15348., 20820., 27060., 34068., 7864.,  11000., 14648., 18808.,
      28596., 35604., 43380., 51924., 12600., 16760., 21432., 26616., 23480.,
      28664., 34360., 40568., 700.,   2012.,  3580.,  5404.,  3128.,  5240.,
      7864.,  11000., 5816.,  8952.,  12600., 16760., 8244.,  12180., 16884.,
      22356., 14648., 18808., 23480., 28664., 15348., 20820., 27060., 34068.,
      23480., 28664., 34360., 40568., 12600., 16760., 21432., 26616., 700.,
      2012.,  3580.,  5404.,  3128.,  5240.,  7864.,  11000., 5816.,  8952.,
      12600., 16760., 8244.,  12180., 16884., 22356., 14648., 18808., 23480.,
      28664., 15348., 20820., 27060., 34068., 23480., 28664., 34360., 40568.,
      12600., 16760., 21432., 26616., 380.,   1180.,  2236.,  3548.,  5816.,
      8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000., 15348., 20820.,
      27060., 34068., 7864.,  11000., 14648., 18808., 28596., 35604., 43380.,
      51924., 12600., 16760., 21432., 26616., 23480., 28664., 34360., 40568.,
      890.,   2602.,  4698.,  7178.,  3668.,  6836.,  10772., 15476., 7700.,
      12404., 17876., 24116., 11182., 16830., 23630., 31582., 20948., 27188.,
      34196., 41972., 20814., 28766., 37870., 48126., 34196., 41972., 50516.,
      59828., 19924., 26164., 33172., 40948., 380.,   1180.,  2236.,  3548.,
      5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000., 15348.,
      20820., 27060., 34068., 7864.,  11000., 14648., 18808., 28596., 35604.,
      43380., 51924., 12600., 16760., 21432., 26616., 23480., 28664., 34360.,
      40568., 890.,   2602.,  4698.,  7178.,  3668.,  6836.,  10772., 15476.,
      7700.,  12404., 17876., 24116., 11182., 16830., 23630., 31582., 20948.,
      27188., 34196., 41972., 20814., 28766., 37870., 48126., 34196., 41972.,
      50516., 59828., 19924., 26164., 33172., 40948., 380.,   1180.,  2236.,
      3548.,  5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000.,
      15348., 20820., 27060., 34068., 7864.,  11000., 14648., 18808., 28596.,
      35604., 43380., 51924., 12600., 16760., 21432., 26616., 23480., 28664.,
      34360., 40568., 700.,   2012.,  3580.,  5404.,  3128.,  5240.,  7864.,
      11000., 5816.,  8952.,  12600., 16760., 8244.,  12180., 16884., 22356.,
      14648., 18808., 23480., 28664., 15348., 20820., 27060., 34068., 23480.,
      28664., 34360., 40568., 12600., 16760., 21432., 26616., 700.,   2012.,
      3580.,  5404.,  3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600.,
      16760., 8244.,  12180., 16884., 22356., 14648., 18808., 23480., 28664.,
      15348., 20820., 27060., 34068., 23480., 28664., 34360., 40568., 12600.,
      16760., 21432., 26616., 380.,   1180.,  2236.,  3548.,  5816.,  8952.,
      12600., 16760., 3128.,  5240.,  7864.,  11000., 15348., 20820., 27060.,
      34068., 7864.,  11000., 14648., 18808., 28596., 35604., 43380., 51924.,
      12600., 16760., 21432., 26616., 23480., 28664., 34360., 40568., 890.,
      2602.,  4698.,  7178.,  3668.,  6836.,  10772., 15476., 7700.,  12404.,
      17876., 24116., 11182., 16830., 23630., 31582., 20948., 27188., 34196.,
      41972., 20814., 28766., 37870., 48126., 34196., 41972., 50516., 59828.,
      19924., 26164., 33172., 40948., 380.,   1180.,  2236.,  3548.,  5816.,
      8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000., 15348., 20820.,
      27060., 34068., 7864.,  11000., 14648., 18808., 28596., 35604., 43380.,
      51924., 12600., 16760., 21432., 26616., 23480., 28664., 34360., 40568.,
      890.,   2602.,  4698.,  7178.,  3668.,  6836.,  10772., 15476., 7700.,
      12404., 17876., 24116., 11182., 16830., 23630., 31582., 20948., 27188.,
      34196., 41972., 20814., 28766., 37870., 48126., 34196., 41972., 50516.,
      59828., 19924., 26164., 33172., 40948., 380.,   1180.,  2236.,  3548.,
      5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000., 15348.,
      20820., 27060., 34068., 7864.,  11000., 14648., 18808., 28596., 35604.,
      43380., 51924., 12600., 16760., 21432., 26616., 23480., 28664., 34360.,
      40568., 700.,   2012.,  3580.,  5404.,  3128.,  5240.,  7864.,  11000.,
      5816.,  8952.,  12600., 16760., 8244.,  12180., 16884., 22356., 14648.,
      18808., 23480., 28664., 15348., 20820., 27060., 34068., 23480., 28664.,
      34360., 40568., 12600., 16760., 21432., 26616.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,
      1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,
      4956.,  6524.,  3742.,  4910.,  6206.,  7630.,  190.,   590.,   1118.,
      1774.,  0.,     0.,     0.,     0.,     190.,   590.,   1118.,  1774.,
      350.,   1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,
      3644.,  4956.,  6524.,  3932.,  5500.,  7324.,  9404.,  190.,   590.,
      1118.,  1774.,  1374.,  2030.,  2814.,  3726.,  0.,     0.,     0.,
      0.,     700.,   2012.,  3580.,  5404.,  3068.,  4892.,  6972.,  9308.,
      7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664., 7864.,
      11000., 14648., 18808., 11580., 13916., 16508., 19356., 3068.,  4892.,
      6972.,  9308.,  0.,     0.,     0.,     0.,     3068.,  4892.,  6972.,
      9308.,  4796.,  6108.,  7676.,  9500.,  14648., 18808., 23480., 28664.,
      7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664., 3068.,
      4892.,  6972.,  9308.,  7484.,  9820.,  12412., 15260., 0.,     0.,
      0.,     0.,     4796.,  6108.,  7676.,  9500.,  7164.,  8988.,  11068.,
      13404., 7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664.,
      7864.,  11000., 14648., 18808., 7484.,  9820.,  12412., 15260., 7164.,
      8988.,  11068., 13404., 0.,     0.,     0.,     0.,     6974.,  8398.,
      9950.,  11630., 350.,   1006.,  1790.,  2702.,  12764., 15356., 18204.,
      21308., 5276.,  7356.,  9692.,  12284., 10716., 13308., 16156., 19260.,
      6974.,  8398.,  9950.,  11630., 10206., 11886., 13694., 15630., 0.,
      0.,     0.,     0.,     350.,   1006.,  1790.,  2702.,  2558.,  3470.,
      4510.,  5678.,  5276.,  7356.,  9692.,  12284., 10716., 13308., 16156.,
      19260., 7324.,  9404.,  11740., 14332., 10206., 11886., 13694., 15630.,
      510.,   1422.,  2462.,  3630.,  0.,     0.,     0.,     0.,     30.,
      174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,   1596.,
      2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,
      6524.,  3742.,  4910.,  6206.,  7630.,  190.,   590.,   1118.,  1774.,
      0.,     0.,     0.,     0.,     190.,   590.,   1118.,  1774.,  350.,
      1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,
      4956.,  6524.,  3932.,  5500.,  7324.,  9404.,  190.,   590.,   1118.,
      1774.,  1374.,  2030.,  2814.,  3726.,  0.,     0.,     0.,     0.,
      700.,   2012.,  3580.,  5404.,  3068.,  4892.,  6972.,  9308.,  7864.,
      11000., 14648., 18808., 14648., 18808., 23480., 28664., 7864.,  11000.,
      14648., 18808., 11580., 13916., 16508., 19356., 3068.,  4892.,  6972.,
      9308.,  0.,     0.,     0.,     0.,     3068.,  4892.,  6972.,  9308.,
      4796.,  6108.,  7676.,  9500.,  14648., 18808., 23480., 28664., 7864.,
      11000., 14648., 18808., 14648., 18808., 23480., 28664., 3068.,  4892.,
      6972.,  9308.,  7484.,  9820.,  12412., 15260., 0.,     0.,     0.,
      0.,     4796.,  6108.,  7676.,  9500.,  7164.,  8988.,  11068., 13404.,
      7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664., 7864.,
      11000., 14648., 18808., 7484.,  9820.,  12412., 15260., 7164.,  8988.,
      11068., 13404., 0.,     0.,     0.,     0.,     6974.,  8398.,  9950.,
      11630., 350.,   1006.,  1790.,  2702.,  12764., 15356., 18204., 21308.,
      5276.,  7356.,  9692.,  12284., 10716., 13308., 16156., 19260., 6974.,
      8398.,  9950.,  11630., 10206., 11886., 13694., 15630., 0.,     0.,
      0.,     0.,     350.,   1006.,  1790.,  2702.,  2558.,  3470.,  4510.,
      5678.,  5276.,  7356.,  9692.,  12284., 10716., 13308., 16156., 19260.,
      7324.,  9404.,  11740., 14332., 10206., 11886., 13694., 15630., 510.,
      1422.,  2462.,  3630.,  0.,     0.,     0.,     0.,     30.,    174.,
      446.,   846.,   190.,   590.,   1118.,  1774.,  540.,   1596.,  2908.,
      4476.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,
      3742.,  4910.,  6206.,  7630.,  190.,   590.,   1118.,  1774.,  0.,
      0.,     0.,     0.,     190.,   590.,   1118.,  1774.,  350.,   1006.,
      1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,
      6524.,  3932.,  5500.,  7324.,  9404.,  190.,   590.,   1118.,  1774.,
      1374.,  2030.,  2814.,  3726.,  0.,     0.,     0.,     0.,     700.,
      2012.,  3580.,  5404.,  3068.,  4892.,  6972.,  9308.,  7864.,  11000.,
      14648., 18808., 14648., 18808., 23480., 28664., 7864.,  11000., 14648.,
      18808., 11580., 13916., 16508., 19356., 3068.,  4892.,  6972.,  9308.,
      0.,     0.,     0.,     0.,     3068.,  4892.,  6972.,  9308.,  4796.,
      6108.,  7676.,  9500.,  14648., 18808., 23480., 28664., 7864.,  11000.,
      14648., 18808., 14648., 18808., 23480., 28664., 3068.,  4892.,  6972.,
      9308.,  7484.,  9820.,  12412., 15260., 0.,     0.,     0.,     0.,
      4796.,  6108.,  7676.,  9500.,  7164.,  8988.,  11068., 13404., 7864.,
      11000., 14648., 18808., 14648., 18808., 23480., 28664., 7864.,  11000.,
      14648., 18808., 7484.,  9820.,  12412., 15260., 7164.,  8988.,  11068.,
      13404., 0.,     0.,     0.,     0.,     6974.,  8398.,  9950.,  11630.,
      350.,   1006.,  1790.,  2702.,  12764., 15356., 18204., 21308., 5276.,
      7356.,  9692.,  12284., 10716., 13308., 16156., 19260., 6974.,  8398.,
      9950.,  11630., 10206., 11886., 13694., 15630., 0.,     0.,     0.,
      0.,     350.,   1006.,  1790.,  2702.,  2558.,  3470.,  4510.,  5678.,
      5276.,  7356.,  9692.,  12284., 10716., 13308., 16156., 19260., 7324.,
      9404.,  11740., 14332., 10206., 11886., 13694., 15630., 510.,   1422.,
      2462.,  3630.,  0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24.,   60.,   76.,   133.,  108.,  181.,  140.,  229.,  172.,  200.,
      59.,   140.,  156.,  268.,  208.,  346.,  260.,  424.,  312.,  340.,
      116.,  265.,  304.,  507.,  382.,  624.,  460.,  741.,  538.,  595.,
      179.,  380.,  416.,  658.,  468.,  736.,  520.,  814.,  572.,  620.,
      296.,  625.,  694.,  1092., 772.,  1209., 850.,  1326., 928.,  1015.,
      299.,  620.,  676.,  1048., 728.,  1126., 780.,  1204., 832.,  900.,
      434.,  900.,  956.,  1483., 1028., 1591., 1100., 1699., 1172., 1240.,
      304.,  620.,  716.,  1093., 748.,  1141., 780.,  1189., 812.,  920.,
      539.,  1100., 1196., 1828., 1248., 1906., 1300., 1984., 1352., 1460.,
      836.,  1705., 1864., 2847., 1942., 2964., 2020., 3081., 2098., 2275.,
      659.,  1340., 1456., 2218., 1508., 2296., 1560., 2374., 1612., 1740.,
      1016., 2065., 2254., 3432., 2332., 3549., 2410., 3666., 2488., 2695.,
      779.,  1580., 1716., 2608., 1768., 2686., 1820., 2764., 1872., 2020.,
      1114., 2260., 2396., 3643., 2468., 3751., 2540., 3859., 2612., 2760.,
      584.,  1180., 1356., 2053., 1388., 2101., 1420., 2149., 1452., 1640.,
      1019., 2060., 2236., 3388., 2288., 3466., 2340., 3544., 2392., 2580.,
      1556., 3145., 3424., 5187., 3502., 5304., 3580., 5421., 3658., 3955.,
      1139., 2300., 2496., 3778., 2548., 3856., 2600., 3934., 2652., 2860.,
      1736., 3505., 3814., 5772., 3892., 5889., 3970., 6006., 4048., 4375.,
      1259., 2540., 2756., 4168., 2808., 4246., 2860., 4324., 2912., 3140.,
      1794., 3620., 3836., 5803., 3908., 5911., 3980., 6019., 4052., 4280.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   14.,  14.,  19.,   12.,   15.,   0.,    6.,
      7.,   20.,  23.,  44.,  39.,  44.,  27.,   30.,   0.,    15.,   20.,
      52.,  64.,  115., 96.,  112., 66.,  75.,   0.,    40.,   45.,   112.,
      124., 220., 176., 192., 111., 120., 0.,    65.,   70.,   172.,  184.,
      325., 256., 272., 156., 165., 0.,   64.,   68.,   152.,  161.,  266.,
      197., 208., 114., 120., 0.,   84.,  88.,   197.,  206.,  341.,  252.,
      263., 144., 150., 0.,   7.,   14.,  29.,   44.,   68.,   50.,   67.,
      36.,  45.,  0.,   42.,  49.,  104., 119.,  188.,  135.,  152.,  81.,
      90.,  0.,   87.,  104., 220., 256., 403.,  288.,  328.,  174.,  195.,
      0.,   172., 189., 400., 436., 688., 488.,  528.,  279.,  300.,  0.,
      257., 274., 580., 616., 973., 688., 728.,  384.,  405.,  0.,    160.,
      170., 356., 377., 590., 413., 436., 228.,  240.,  0.,    210.,  220.,
      461., 482., 755., 528., 551., 288., 300.,  0.,    13.,   26.,   53.,
      80.,  122., 86.,  115., 60.,  75.,  0.,    78.,   91.,   188.,  215.,
      332., 231., 260., 135., 150., 0.,   159.,  188.,  388.,  448.,  691.,
      480., 544., 282., 315., 0.,   304., 333.,  688.,  748.,  1156., 800.,
      864., 447., 480., 0.,   449., 478., 988.,  1048., 1621., 1120., 1184.,
      612., 645., 0.,   256., 272., 560., 593.,  914.,  629.,  664.,  342.,
      360., 0.,   336., 352., 725., 758., 1169., 804.,  839.,  432.,  450.,
      0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      152.,   396.,   516.,   920.,   764.,   1292.,  1012.,  1664.,  1260.,
      1476.,  412.,   996.,   1116.,  1940.,  1524.,  2552.,  1932.,  3164.,
      2340.,  2556.,  823.,   1904.,  2204.,  3705.,  2816.,  4623.,  3428.,
      5541.,  4040.,  4484.,  1352.,  2876.,  3156.,  5000.,  3564.,  5612.,
      3972.,  6224.,  4380.,  4756.,  2233.,  4724.,  5264.,  8295.,  5876.,
      9213.,  6488.,  10131., 7100.,  7784.,  2292.,  4756.,  5196.,  8060.,
      5604.,  8672.,  6012.,  9284.,  6420.,  6956.,  3352.,  6956.,  7396.,
      11480., 7964.,  12332., 8532.,  13184., 9100.,  9636.,  2312.,  4716.,
      5476.,  8360.,  5724.,  8732.,  5972.,  9104.,  6220.,  7076.,  4172.,
      8516.,  9276.,  14180., 9684.,  14792., 10092., 15404., 10500., 11356.,
      6463.,  13184., 14444., 22065., 15056., 22983., 15668., 23901., 16280.,
      17684., 5112.,  10396., 11316., 17240., 11724., 17852., 12132., 18464.,
      12540., 13556., 7873.,  16004., 17504., 26655., 18116., 27573., 18728.,
      28491., 19340., 20984., 6052.,  12276., 13356., 20300., 13764., 20912.,
      14172., 21524., 14580., 15756., 8712.,  17676., 18756., 28520., 19324.,
      29372., 19892., 30224., 20460., 21636., 4472.,  9036.,  10436., 15800.,
      10684., 16172., 10932., 16544., 11180., 12676., 7932.,  16036., 17436.,
      26420., 17844., 27032., 18252., 27644., 18660., 20156., 12103., 24464.,
      26684., 40425., 27296., 41343., 27908., 42261., 28520., 30884., 8872.,
      17916., 19476., 29480., 19884., 30092., 20292., 30704., 20700., 22356.,
      13513., 27284., 29744., 45015., 30356., 45933., 30968., 46851., 31580.,
      34184., 9812.,  19796., 21516., 32540., 21924., 33152., 22332., 33764.,
      22740., 24556., 14072., 28396., 30116., 45560., 30684., 46412., 31252.,
      47264., 31820., 33636.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   85.,    92.,   128.,  83.,   105.,  0.,
      35.,   41.,   128.,  148.,  295.,   272.,  308.,  193.,  215.,  0.,
      88.,   124.,  340.,  428.,  788.,   676.,  796.,  476.,  544.,  0.,
      268.,  304.,  780.,  868.,  1568.,  1276., 1396., 816.,  884.,  0.,
      448.,  484.,  1220., 1308., 2348.,  1876., 1996., 1156., 1224., 0.,
      473.,  503.,  1132., 1200., 1993.,  1484., 1568., 863.,  909.,  0.,
      623.,  653.,  1472., 1540., 2563.,  1904., 1988., 1093., 1139., 0.,
      41.,   95.,   196.,  312.,  481.,   356.,  488.,  263.,  333.,  0.,
      311.,  365.,  776.,  892.,  1411.,  1016., 1148., 613.,  683.,  0.,
      640.,  772.,  1636., 1916., 3020.,  2164., 2476., 1316., 1480., 0.,
      1300., 1432., 3036., 3316., 5240.,  3724., 4036., 2136., 2300., 0.,
      1960., 2092., 4436., 4716., 7460.,  5284., 5596., 2956., 3120., 0.,
      1229., 1307., 2740., 2904., 4549.,  3188., 3368., 1763., 1857., 0.,
      1619., 1697., 3560., 3724., 5839.,  4088., 4268., 2233., 2327., 0.,
      77.,   179.,  364.,  576.,  877.,   620.,  848.,  443.,  561.,  0.,
      587.,  689.,  1424., 1636., 2527.,  1760., 1988., 1033., 1151., 0.,
      1192., 1420., 2932., 3404., 5252.,  3652., 4156., 2156., 2416., 0.,
      2332., 2560., 5292., 5764., 8912.,  6172., 6676., 3456., 3716., 0.,
      3472., 3700., 7652., 8124., 12572., 8692., 9196., 4756., 5016., 0.,
      1985., 2111., 4348., 4608., 7105.,  4892., 5168., 2663., 2805., 0.,
      2615., 2741., 5648., 5908., 9115.,  6272., 6548., 3373., 3515., 0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1060.,  2840.,  3768.,  6796.,  5720.,  9724.,  7672.,  12652., 9624.,
      11320., 2420.,  6840.,  6104.,  12412., 7288.,  15212., 8472.,  18012.,
      9656.,  11352., 5530.,  12076., 14428., 23262., 17228., 27462., 20028.,
      31662., 22828., 26332., 4740.,  16600., 12024., 26412., 13208., 29212.,
      14392., 32012., 15576., 18552., 11570., 23516., 26764., 40934., 25852.,
      40398., 28652., 44598., 31452., 34828., 7060.,  20600., 11160., 26844.,
      3512.,  19788., 4696.,  22588., 5880.,  8088.,  15460., 21016., 23480.,
      30796., 11992., 19516., 14456., 23212., 16920., 19128., 4452.,  9624.,
      11576., 18508., 13528., 21436., 15480., 24364., 17432., 20152., 4276.,
      14648., 10840., 23612., 12024., 26412., 13208., 29212., 14392., 17112.,
      10362., 21740., 25628., 39422., 26764., 40934., 25852., 40398., 28652.,
      31644., 6596.,  24408., 16760., 31852., 11160., 26844., 3512.,  19788.,
      4696.,  6648.,  14738., 30492., 34252., 42118., 25148., 33390., 13996.,
      22614., 16796., 19660., 2132.,  20600., 7064.,  12188., 7608.,  13324.,
      6104.,  12412., 7288.,  8472.,  7972.,  16920., 19384., 25868., 16088.,
      22780., 10744., 17644., 13208., 14392., 7844.,  16408., 19384., 30220.,
      21336., 32508., 21624., 32748., 19864., 21560., 6132.,  22456., 15576.,
      34812., 16760., 31852., 11160., 26844., 3512.,  5208.,  13530., 28076.,
      31452., 48798., 34252., 42118., 25148., 33390., 13996., 16476., 1668.,
      18648., 5880.,  25388., 7064.,  12188., 7608.,  13324., 6104.,  7032.,
      7666.,  16348., 19596., 31014., 22396., 30478., 19436., 27894., 14428.,
      16780., 3348.,  10744., 8472.,  18012., 9656.,  20812., 10840., 23612.,
      12024., 14232., 6628.,  14232., 15672., 25036., 18136., 28732., 20600.,
      32428., 23064., 25272.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   578.,   660.,   932.,   614.,   782.,
      0.,     230.,   270.,   900.,   1044.,  2138.,  2020.,  2292.,  1454.,
      1622.,  0.,     580.,   852.,   2424.,  3096.,  5788.,  5048.,  5976.,
      3604.,  4132.,  0.,     1940.,  1572.,  5144.,  4152.,  9484.,  5336.,
      6264.,  3556.,  4084.,  0.,     2660.,  2932.,  6840.,  7512.,  12796.,
      9976.,  10904., 6196.,  6724.,  0.,     3630.,  150.,   5012.,  804.,
      6962.,  1012.,  1668.,  950.,   1310.,  0.,     1078.,  1310.,  2916.,
      3444.,  5642.,  4292.,  4948.,  2750.,  3110.,  0.,     270.,   694.,
      1428.,  2340.,  3602.,  2676.,  3716.,  2006.,  2558.,  0.,     2390.,
      2814.,  5988.,  6900.,  10922., 7876.,  8916.,  4766.,  5318.,  0.,
      4900.,  5940.,  12600., 14808., 23356., 16760., 19224., 10228., 11524.,
      0.,     10100., 4356.,  16856., 11256., 26284., 12440., 14904., 7876.,
      9172.,  0.,     8516.,  9556.,  20088., 22296., 34972., 24760., 27224.,
      14356., 15652., 0.,     9630.,  390.,   11636., 2052.,  14978., 2260.,
      3684.,  1958.,  2702.,  0.,     2854.,  3470.,  7236.,  8532.,  13274.,
      9380.,  10804., 5678.,  6422.,  0.,     510.,   1318.,  2676.,  4356.,
      6626.,  4692.,  6500.,  3398.,  4334.,  0.,     4550.,  5358.,  11076.,
      12756., 19706., 13732., 15540., 8078.,  9014.,  0.,     9220.,  11028.,
      22136., 24856., 37596., 23096., 25048., 13140., 14180., 0.,     18260.,
      7140.,  22808., 11576., 29516., 3928.,  5880.,  3364.,  4404.,  0.,
      14372., 16180., 22456., 25176., 33340., 13688., 15640., 8564.,  9604.,
      0.,     15630., 630.,   2260.,  2660.,  5330.,  180.,   324.,   278.,
      382.,   0.,     4630.,  5630.,  6820.,  7860.,  9386.,  900.,   1044.,
      798.,   902.,   0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      56.,    96.,    156.,   240.,   212.,   304.,   388.,   532.,   332.,
      432.,   568.,   724.,   452.,   560.,   748.,   916.,   572.,   688.,
      676.,   800.,   176.,   236.,   436.,   560.,   492.,   624.,   868.,
      1072.,  692.,   832.,   1168.,  1384.,  892.,   1040.,  1468.,  1696.,
      1092.,  1248.,  1196.,  1360.,  359.,   464.,   844.,   1060.,  988.,
      1216.,  1677.,  2028.,  1288.,  1528.,  2127.,  2496.,  1588.,  1840.,
      2577.,  2964.,  1888.,  2152.,  2104.,  2380.,  636.,   716.,   1356.,
      1520.,  1492.,  1664.,  2368.,  2632.,  1692.,  1872.,  2668.,  2944.,
      1892.,  2080.,  2968.,  3256.,  2092.,  2288.,  2276.,  2480.,  1049.,
      1184.,  2224.,  2500.,  2488.,  2776.,  3927.,  4368.,  2788.,  3088.,
      4377.,  4836.,  3088.,  3400.,  4827.,  5304.,  3388.,  3712.,  3724.,
      4060.,  1096.,  1196.,  2276.,  2480.,  2492.,  2704.,  3868.,  4192.,
      2692.,  2912.,  4168.,  4504.,  2892.,  3120.,  4468.,  4816.,  3092.,
      3328.,  3356.,  3600.,  1616.,  1736.,  3356.,  3600.,  3572.,  3824.,
      5548.,  5932.,  3852.,  4112.,  5968.,  6364.,  4132.,  4400.,  6388.,
      6796.,  4412.,  4688.,  4676.,  4960.,  1096.,  1216.,  2236.,  2480.,
      2612.,  2864.,  3988.,  4372.,  2732.,  2992.,  4168.,  4564.,  2852.,
      3120.,  4348.,  4756.,  2972.,  3248.,  3396.,  3680.,  2016.,  2156.,
      4116.,  4400.,  4492.,  4784.,  6868.,  7312.,  4692.,  4992.,  7168.,
      7624.,  4892.,  5200.,  7468.,  7936.,  5092.,  5408.,  5516.,  5840.,
      3119.,  3344.,  6364.,  6820.,  6988.,  7456.,  10677., 11388., 7288.,
      7768.,  11127., 11856., 7588.,  8080.,  11577., 12324., 7888.,  8392.,
      8584.,  9100.,  2476.,  2636.,  5036.,  5360.,  5492.,  5824.,  8368.,
      8872.,  5692.,  6032.,  8668.,  9184.,  5892.,  6240.,  8968.,  9496.,
      6092.,  6448.,  6596.,  6960.,  3809.,  4064.,  7744.,  8260.,  8488.,
      9016.,  12927., 13728., 8788.,  9328.,  13377., 14196., 9088.,  9640.,
      13827., 14664., 9388.,  9952.,  10204., 10780., 2936.,  3116.,  5956.,
      6320.,  6492.,  6864.,  9868.,  10432., 6692.,  7072.,  10168., 10744.,
      6892.,  7280.,  10468., 11056., 7092.,  7488.,  7676.,  8080.,  4256.,
      4456.,  8636.,  9040.,  9172.,  9584.,  13948., 14572., 9452.,  9872.,
      14368., 15004., 9732.,  10160., 14788., 15436., 10012., 10448., 10596.,
      11040., 2136.,  2336.,  4316.,  4720.,  5012.,  5424.,  7588.,  8212.,
      5132.,  5552.,  7768.,  8404.,  5252.,  5680.,  7948.,  8596.,  5372.,
      5808.,  6116.,  6560.,  3856.,  4076.,  7796.,  8240.,  8492.,  8944.,
      12868., 13552., 8692.,  9152.,  13168., 13864., 8892.,  9360.,  13468.,
      14176., 9092.,  9568.,  9836.,  10320., 5879.,  6224.,  11884., 12580.,
      12988., 13696., 19677., 20748., 13288., 14008., 20127., 21216., 13588.,
      14320., 20577., 21684., 13888., 14632., 15064., 15820., 4316.,  4556.,
      8716.,  9200.,  9492.,  9984.,  14368., 15112., 9692.,  10192., 14668.,
      15424., 9892.,  10400., 14968., 15736., 10092., 10608., 10916., 11440.,
      6569.,  6944.,  13264., 14020., 14488., 15256., 21927., 23088., 14788.,
      15568., 22377., 23556., 15088., 15880., 22827., 24024., 15388., 16192.,
      16684., 17500., 4776.,  5036.,  9636.,  10160., 10492., 11024., 15868.,
      16672., 10692., 11232., 16168., 16984., 10892., 11440., 16468., 17296.,
      11092., 11648., 11996., 12560., 6896.,  7176.,  13916., 14480., 14772.,
      15344., 22348., 23212., 15052., 15632., 22768., 23644., 15332., 15920.,
      23188., 24076., 15612., 16208., 16516., 17120.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,   32.,   29.,   56.,
      36.,   56.,   52.,   76.,   35.,   48.,   45.,   60.,   0.,    0.,
      11.,   24.,   13.,   28.,   48.,   80.,   56.,   92.,   119.,  176.,
      116.,  156.,  132.,  176.,  85.,   108.,  95.,   120.,  0.,    0.,
      28.,   60.,   44.,   80.,   132.,  208.,  172.,  256.,  328.,  460.,
      292.,  384.,  348.,  448.,  212.,  264.,  244.,  300.,  0.,    0.,
      108.,  160.,  124.,  180.,  332.,  448.,  372.,  496.,  688.,  880.,
      572.,  704.,  628.,  768.,  372.,  444.,  404.,  480.,  0.,    0.,
      188.,  260.,  204.,  280.,  532.,  688.,  572.,  736.,  1048., 1300.,
      852.,  1024., 908.,  1088., 532.,  624.,  564.,  660.,  0.,    0.,
      217.,  256.,  231.,  272.,  524.,  608.,  556.,  644.,  929.,  1064.,
      696.,  788.,  736.,  832.,  407.,  456.,  429.,  480.,  0.,    0.,
      287.,  336.,  301.,  352.,  684.,  788.,  716.,  824.,  1199., 1364.,
      896.,  1008., 936.,  1052., 517.,  576.,  539.,  600.,  0.,    0.,
      13.,   28.,   39.,   56.,   80.,   116.,  136.,  176.,  209.,  272.,
      156.,  200.,  220.,  268.,  119.,  144.,  153.,  180.,  0.,    0.,
      143.,  168.,  169.,  196.,  360.,  416.,  416.,  476.,  659.,  752.,
      476.,  540.,  540.,  608.,  289.,  324.,  323.,  360.,  0.,    0.,
      292.,  348.,  356.,  416.,  756.,  880.,  892.,  1024., 1408., 1612.,
      1012., 1152., 1164., 1312., 620.,  696.,  700.,  780.,  0.,    0.,
      612.,  688.,  676.,  756.,  1436., 1600., 1572., 1744., 2488., 2752.,
      1772., 1952., 1924., 2112., 1020., 1116., 1100., 1200., 0.,    0.,
      932.,  1028., 996.,  1096., 2116., 2320., 2252., 2464., 3568., 3892.,
      2532., 2752., 2684., 2912., 1420., 1536., 1500., 1620., 0.,    0.,
      589.,  640.,  627.,  680.,  1316., 1424., 1396., 1508., 2189., 2360.,
      1536., 1652., 1624., 1744., 851.,  912.,  897.,  960.,  0.,    0.,
      779.,  840.,  817.,  880.,  1716., 1844., 1796., 1928., 2819., 3020.,
      1976., 2112., 2064., 2204., 1081., 1152., 1127., 1200., 0.,    0.,
      25.,   52.,   75.,   104.,  152.,  212.,  256.,  320.,  389.,  488.,
      276.,  344.,  388.,  460.,  203.,  240.,  261.,  300.,  0.,    0.,
      275.,  312.,  325.,  364.,  672.,  752.,  776.,  860.,  1199., 1328.,
      836.,  924.,  948.,  1040., 493.,  540.,  551.,  600.,  0.,    0.,
      556.,  636.,  668.,  752.,  1380., 1552., 1612., 1792., 2488., 2764.,
      1732., 1920., 1980., 2176., 1028., 1128., 1156., 1260., 0.,    0.,
      1116., 1216., 1228., 1332., 2540., 2752., 2772., 2992., 4288., 4624.,
      2972., 3200., 3220., 3456., 1668., 1788., 1796., 1920., 0.,    0.,
      1676., 1796., 1788., 1912., 3700., 3952., 3932., 4192., 6088., 6484.,
      4212., 4480., 4460., 4736., 2308., 2448., 2436., 2580., 0.,    0.,
      961.,  1024., 1023., 1088., 2108., 2240., 2236., 2372., 3449., 3656.,
      2376., 2516., 2512., 2656., 1295., 1368., 1365., 1440., 0.,    0.,
      1271., 1344., 1333., 1408., 2748., 2900., 2876., 3032., 4439., 4676.,
      3056., 3216., 3192., 3356., 1645., 1728., 1715., 1800., 0.,    0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      374.,   686.,   1092.,  1748.,  1524.,  2244.,  2834.,  3962.,  2468.,
      3252.,  4250.,  5474.,  3412.,  4260.,  5666.,  6986.,  4356.,  5268.,
      5172.,  6148.,  1102.,  1318.,  3060.,  3780.,  2788.,  3316.,  5658.,
      6754.,  3348.,  3940.,  7010.,  8202.,  3908.,  4564.,  8362.,  9650.,
      4468.,  5188.,  5284.,  6068.,  2479.,  3051.,  5442.,  6634.,  6570.,
      7858.,  10629., 12633., 7922.,  9306.,  12657., 14805., 9274.,  10754.,
      14685., 16977., 10626., 12202., 12330., 14002., 2182.,  2558.,  7780.,
      8820.,  5588.,  6436.,  12418., 13994., 6148.,  7060.,  13770., 15442.,
      6708.,  7684.,  15122., 16890., 7268.,  8308.,  8724.,  9828.,  5379.,
      6191.,  11050., 12466., 12626., 14138., 19361., 21573., 12250., 13602.,
      19149., 21249., 13602., 15050., 21177., 23421., 14954., 16498., 16594.,
      18234., 3262.,  3798.,  9748.,  10852., 5124.,  6036.,  12650., 14194.,
      1396.,  2116.,  9202.,  10586., 1956.,  2740.,  10554., 12034., 2516.,
      3364.,  3588.,  4500.,  7382.,  8078.,  9924.,  11092., 11124., 12356.,
      14514., 16282., 5476.,  6516.,  8954.,  10562., 6676.,  7780.,  10754.,
      12458., 7876.,  9044.,  8948.,  10180., 2006.,  2446.,  4356.,  5268.,
      5300.,  6276.,  8498.,  10010., 6244.,  7284.,  9914.,  11522., 7188.,
      8292.,  11330., 13034., 8132.,  9300.,  9460.,  10692., 1966.,  2310.,
      6836.,  7812.,  5028.,  5812.,  11066., 12546., 5588.,  6436.,  12418.,
      13994., 6148.,  7060.,  13770., 15442., 6708.,  7684.,  8036.,  9076.,
      4799.,  5563.,  10082., 11658., 11978., 13650., 18549., 20873., 12626.,
      14138., 19361., 21573., 12250., 13602., 19149., 21249., 13602., 15050.,
      15050., 16594., 3046.,  3550.,  11556., 12852., 7828.,  8932.,  15074.,
      16778., 5124.,  6036.,  12650., 14194., 1396.,  2116.,  9202.,  10586.,
      1956.,  2740.,  2900.,  3748.,  6995.,  7743.,  14474., 16018., 16306.,
      17946., 19921., 22197., 11834., 13314., 15613., 17777., 6338.,  7658.,
      10281., 12333., 7690.,  9106.,  9074.,  10586., 862.,   1270.,  9748.,
      10852., 3076.,  3988.,  5386.,  6802.,  3444.,  4164.,  6034.,  7290.,
      2788.,  3316.,  5658.,  6754.,  3348.,  3940.,  3908.,  4564.,  3702.,
      4270.,  7876.,  9044.,  9076.,  10308., 12114., 13754., 7524.,  8564.,
      10650., 12130., 4948.,  5796.,  8162.,  9482.,  6148.,  7060.,  6708.,
      7684.,  3638.,  4206.,  7620.,  8788.,  9076.,  10308., 14162., 16058.,
      10020., 11316., 15386., 17122., 10260., 11364., 15586., 17162., 9476.,
      10388., 10292., 11268., 2830.,  3302.,  10612., 11844., 7268.,  8308.,
      16474., 18338., 7828.,  8932.,  15074., 16778., 5124.,  6036.,  12650.,
      14194., 1396.,  2116.,  2212.,  2996.,  6415.,  7115.,  13314., 14762.,
      14954., 16498., 23205., 25593., 16306., 17946., 19921., 22197., 11834.,
      13314., 15613., 17777., 6338.,  7658.,  7530.,  8946.,  646.,   1022.,
      8804.,  9844.,  2516.,  3364.,  11906., 13482., 3076.,  3988.,  5386.,
      6802.,  3444.,  4164.,  6034.,  7290.,  2788.,  3316.,  3220.,  3812.,
      3491.,  4175.,  7466.,  8882.,  9042.,  10554., 14337., 16677., 10394.,
      12002., 14125., 16353., 8994.,  10442., 12889., 15005., 6570.,  7858.,
      7698.,  9082.,  1534.,  1814.,  4948.,  5796.,  3908.,  4564.,  8362.,
      9650.,  4468.,  5188.,  9714.,  11098., 5028.,  5812.,  11066., 12546.,
      5588.,  6436.,  6660.,  7572.,  3094.,  3534.,  6660.,  7572.,  7348.,
      8324.,  11762., 13274., 8548.,  9588.,  13562., 15170., 9748.,  10852.,
      15362., 17066., 10948., 12116., 12020., 13252.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    17.,    53.,    46.,    134.,   102.,   222.,   187.,
      391.,   254.,   406.,   374.,   558.,   257.,   357.,   333.,   449.,
      0.,     0.,     65.,    165.,   77.,    193.,   326.,   574.,   382.,
      662.,   847.,   1291.,  854.,   1166.,  974.,   1318.,  637.,   817.,
      713.,   909.,   0.,     0.,     166.,   414.,   286.,   566.,   916.,
      1508.,  1220.,  1876.,  2378.,  3410.,  2164.,  2884.,  2596.,  3380.,
      1598.,  2006.,  1846.,  2286.,  0.,     0.,     766.,   1174.,  886.,
      1326.,  2436.,  3348.,  2740.,  3716.,  5138.,  6650.,  4324.,  5364.,
      4756.,  5860.,  2838.,  3406.,  3086.,  3686.,  0.,     0.,     1366.,
      1934.,  1486.,  2086.,  3956.,  5188.,  4260.,  5556.,  7898.,  9890.,
      6484.,  7844.,  6916.,  8340.,  4078.,  4806.,  4326.,  5086.,  0.,
      0.,     1661.,  1969.,  1769.,  2093.,  4030.,  4694.,  4278.,  4974.,
      7171.,  8239.,  5390.,  6118.,  5702.,  6462.,  3161.,  3549.,  3333.,
      3737.,  0.,     0.,     2201.,  2589.,  2309.,  2713.,  5270.,  6094.,
      5518.,  6374.,  9271.,  10579., 6950.,  7838.,  7262.,  8182.,  4021.,
      4489.,  4193.,  4677.,  0.,     0.,     77.,    193.,   281.,   413.,
      574.,   854.,   1014.,  1326.,  1555.,  2047.,  1166.,  1510.,  1670.,
      2046.,  905.,   1101.,  1173.,  1385.,  0.,     0.,     1097.,  1293.,
      1301.,  1513.,  2774.,  3214.,  3214.,  3686.,  5095.,  5827.,  3686.,
      4190.,  4190.,  4726.,  2245.,  2521.,  2513.,  2805.,  0.,     0.,
      2230.,  2670.,  2734.,  3206.,  5812.,  6788.,  6884.,  7924.,  10874.,
      12482., 7828.,  8932.,  9028.,  10196., 4814.,  5414.,  5446.,  6078.,
      0.,     0.,     4750.,  5350.,  5254.,  5886.,  11172., 12468., 12244.,
      13604., 19394., 21482., 13828., 15252., 15028., 16516., 7974.,  8734.,
      8606.,  9398.,  0.,     0.,     7270.,  8030.,  7774.,  8566.,  16532.,
      18148., 17604., 19284., 27914., 30482., 19828., 21572., 21028., 22836.,
      11134., 12054., 11766., 12718., 0.,     0.,     4613.,  5017.,  4913.,
      5333.,  10318., 11174., 10950., 11838., 17179., 18535., 12062., 12982.,
      12758., 13710., 6689.,  7173.,  7053.,  7553.,  0.,     0.,     6113.,
      6597.,  6413.,  6913.,  13478., 14494., 14110., 15158., 22159., 23755.,
      15542., 16622., 16238., 17350., 8509.,  9073.,  8873.,  9453.,  0.,
      0.,     149.,   361.,   545.,   773.,   1102.,  1574.,  1926.,  2430.,
      2923.,  3703.,  2078.,  2614.,  2966.,  3534.,  1553.,  1845.,  2013.,
      2321.,  0.,     0.,     2129.,  2421.,  2525.,  2833.,  5222.,  5854.,
      6046.,  6710.,  9343.,  10363., 6518.,  7214.,  7406.,  8134.,  3853.,
      4225.,  4313.,  4701.,  0.,     0.,     4294.,  4926.,  5182.,  5846.,
      10708., 12068., 12548., 13972., 19370., 21554., 13492., 14980., 15460.,
      17012., 8030.,  8822.,  9046.,  9870.,  0.,     0.,     8734.,  9526.,
      9622.,  10446., 19908., 21588., 21748., 23492., 33650., 36314., 23332.,
      25140., 25300., 27172., 13110., 14062., 14126., 15110., 0.,     0.,
      13174., 14126., 14062., 15046., 29108., 31108., 30948., 33012., 47930.,
      51074., 33172., 35300., 35140., 37332., 18190., 19302., 19206., 20350.,
      0.,     0.,     7565.,  8065.,  8057.,  8573.,  16606., 17654., 17622.,
      18702., 27187., 28831., 18734., 19846., 19814., 20958., 10217., 10797.,
      10773., 11369., 0.,     0.,     10025., 10605., 10517., 11113., 21686.,
      22894., 22702., 23942., 35047., 36931., 24134., 25406., 25214., 26518.,
      12997., 13657., 13553., 14229., 0.,     0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2060.,  3500.,  4792.,  7928.,  8184.,  11832., 13540., 19396., 11576.,
      15736., 17988., 23588., 12280., 15928., 18340., 23684., 8888.,  12024.,
      11256., 14904., 8620.,  10316., 21112., 25784., 10936., 14072., 28612.,
      35236., 13304., 16952., 24356., 30724., 2744.,  5880.,  16004., 22116.,
      4472.,  7096.,  6840.,  9976.,  5722.,  8202.,  13220., 18564., 18052.,
      24164., 29486., 38206., 24676., 31556., 32638., 41486., 24516., 31140.,
      31694., 40670., 20260., 26628., 18820., 24932., 4172.,  6124.,  22456.,
      27640., 9208.,  12856., 33188., 40580., 11576., 15736., 24836., 31972.,
      13304., 16952., 28772., 35652., 10936., 14072., 14328., 17976., 11658.,
      15034., 24452., 30564., 30820., 37700., 37054., 46414., 30660., 37284.,
      27278., 35742., 26404., 32772., 22238., 30830., 18052., 24164., 22244.,
      28100., 12012., 14220., 21112., 25784., 2744.,  5880.,  16004., 22116.,
      4472.,  7096.,  19940., 25796., 6840.,  9976.,  26564., 33188., 9208.,
      12856., 13624., 17784., 9356.,  11820., 15672., 19832., 19064., 23736.,
      23268., 29124., 13624., 17784., 16452., 22052., 19064., 23736., 22564.,
      28932., 24504., 29688., 18040., 22712., 4108.,  5548.,  8888.,  12024.,
      12280., 15928., 19684., 25540., 15672., 19832., 24772., 31396., 19064.,
      23736., 25124., 31492., 15672., 19832., 20088., 24760., 2476.,  4172.,
      17016., 21688., 6840.,  9976.,  26564., 33188., 9208.,  12856., 33188.,
      40580., 11576., 15736., 24836., 31972., 13304., 16952., 17720., 21880.,
      9114.,  12106., 20004., 26372., 26884., 34020., 33902., 43134., 30820.,
      37700., 37054., 46414., 30660., 37284., 27278., 35742., 26404., 32772.,
      16772., 22884., 10316., 12268., 26552., 31736., 13304., 16952., 24356.,
      30724., 2744.,  5880.,  16004., 22116., 4472.,  7096.,  19940., 25796.,
      6840.,  9976.,  10232., 13880., 8266.,  11130., 18308., 24420., 24676.,
      31556., 32638., 41486., 24516., 31140., 31694., 40670., 20260., 26628.,
      26654., 35758., 26884., 34020., 24932., 31812., 5868.,  8076.,  27896.,
      33592., 11576., 15736., 24836., 31972., 13304., 16952., 28772., 35652.,
      10936., 14072., 28612., 35236., 13304., 16952., 17720., 21880., 11404.,
      13868., 24504., 29688., 29944., 35640., 25956., 32836., 24504., 29688.,
      19140., 25764., 14968., 19640., 24612., 30980., 20408., 25592., 22136.,
      26808., 2060.,  3500.,  4792.,  7928.,  8184.,  11832., 13540., 19396.,
      11576., 15736., 17988., 23588., 12280., 15928., 18340., 23684., 8888.,
      12024., 11256., 14904., 8620.,  10316., 21112., 25784., 10936., 14072.,
      28612., 35236., 13304., 16952., 24356., 30724., 2744.,  5880.,  16004.,
      22116., 4472.,  7096.,  6840.,  9976.,  5722.,  8202.,  13220., 18564.,
      18052., 24164., 29486., 38206., 24676., 31556., 32638., 41486., 24516.,
      31140., 31694., 40670., 20260., 26628., 18820., 24932., 4172.,  6124.,
      22456., 27640., 9208.,  12856., 33188., 40580., 11576., 15736., 24836.,
      31972., 13304., 16952., 28772., 35652., 10936., 14072., 14328., 17976.,
      11658., 15034., 24452., 30564., 30820., 37700., 37054., 46414., 30660.,
      37284., 27278., 35742., 26404., 32772., 22238., 30830., 18052., 24164.,
      22244., 28100., 12012., 14220., 21112., 25784., 2744.,  5880.,  16004.,
      22116., 4472.,  7096.,  19940., 25796., 6840.,  9976.,  26564., 33188.,
      9208.,  12856., 13624., 17784., 9356.,  11820., 15672., 19832., 19064.,
      23736., 23268., 29124., 13624., 17784., 16452., 22052., 19064., 23736.,
      22564., 28932., 24504., 29688., 18040., 22712.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1322.,
      2906.,  1900.,  3084.,  2828.,  4268.,  1966.,  2750.,  2558.,  3470.,
      0.,     0.,     430.,   1214.,  510.,   1422.,  2380.,  4332.,  2156.,
      3340.,  5722.,  8202.,  3852.,  5292.,  4780.,  6476.,  190.,   590.,
      782.,   1310.,  0.,     0.,     460.,   1388.,  1388.,  2572.,  3448.,
      6072.,  5816.,  8952.,  9988.,  15076., 9208.,  12856., 12600., 16760.,
      7660.,  9868.,  9612.,  12076., 0.,     0.,     5100.,  7308.,  5388.,
      6828.,  14648., 18808., 7544.,  10168., 21476., 27332., 9912.,  13048.,
      13304., 16952., 1804.,  3244.,  3756.,  5452.,  0.,     0.,     2316.,
      3756.,  3244.,  4940.,  8184.,  11832., 10552., 14712., 17988., 23588.,
      15992., 20664., 16696., 20856., 11564., 14284., 8780.,  10732., 0.,
      0.,     6206.,  7630.,  270.,   798.,   9196.,  11404., 2316.,  3756.,
      14218., 17594., 2988.,  4684.,  5452.,  7404.,  3150.,  4190.,  4510.,
      5678.,  0.,     0.,     3662.,  4702.,  4510.,  5678.,  10124., 12588.,
      12076., 14796., 13114., 16362., 15308., 18284., 8940.,  11148., 9950.,
      11630., 430.,   1214.,  0.,     0.,     510.,   1422.,  2126.,  3166.,
      4332.,  6540.,  7820.,  10284., 11338., 14202., 6316.,  8012.,  8268.,
      10220., 270.,   798.,   350.,   1006.,  0.,     0.,     8590.,  10142.,
      10206., 11886., 21772., 25260., 12332., 15052., 16250., 20010., 1100.,
      3052.,  3052.,  5260.,  30.,    174.,   110.,   382.,   0.,     0.,
      3852.,  5292.,  5804.,  7500.,  12280., 15928., 16696., 20856., 21572.,
      27172., 13304., 16952., 16696., 20856., 3244.,  4940.,  4172.,  6124.,
      0.,     0.,     13612., 16332., 2636.,  4588.,  21432., 26616., 8184.,
      11832., 17700., 24068., 9912.,  13048., 13304., 16952., 460.,   1388.,
      1388.,  2572.,  0.,     0.,     7756.,  9708.,  9708.,  11916., 21112.,
      25784., 25528., 30712., 19332., 25444., 20088., 24760., 8504.,  12664.,
      5100.,  7308.,  5388.,  6828.,  0.,     0.,     2462.,  3630.,  110.,
      382.,   4780.,  6476.,  972.,   1900.,  8106.,  10714., 1644.,  2828.,
      3084.,  4524.,  1966.,  2750.,  2814.,  3726.,  0.,     0.,     1454.,
      2238.,  1790.,  2702.,  4684.,  6636.,  5612.,  7820.,  7514.,  9994.,
      8844.,  11308., 5548.,  7244.,  6206.,  7630.,  270.,   798.,   0.,
      0.,     350.,   1006.,  1454.,  2238.,  2988.,  4684.,  5452.,  7404.,
      8426.,  11546., 6636.,  8844.,  9612.,  12076., 5358.,  6654.,  6974.,
      8398.,  0.,     0.,     5870.,  7166.,  6974.,  8398.,  15308., 18284.,
      8940.,  11148., 19994., 24010., 10636., 13100., 13612., 16332., 510.,
      1422.,  2126.,  3166.,  0.,     0.,     3148.,  5100.,  6124.,  8332.,
      12280., 15928., 16696., 20856., 24964., 31076., 13304., 16952., 16696.,
      20856., 9708.,  11916., 11660., 14124., 0.,     0.,     18028., 21260.,
      12172., 14636., 25528., 30712., 4088.,  7736.,  22116., 28996., 5816.,
      8952.,  9208.,  12856., 3852.,  5292.,  5804.,  7500.,  0.,     0.,
      9100.,  11564., 12076., 14796., 21112., 25784., 25528., 30712., 28868.,
      35492., 20088., 24760., 12600., 16760., 13612., 16332., 2636.,  4588.,
      0.,     0.,     13694., 15630., 590.,   1630.,  3052.,  5260.,  4364.,
      5804.,  8778.,  11642., 300.,   972.,   716.,   1644.,  782.,   1310.,
      1118.,  1774.,  0.,     0.,     8078.,  9630.,  9950.,  11630., 12172.,
      14636., 14124., 16844., 2554.,  5290.,  2380.,  4332.,  2156.,  3340.,
      2462.,  3630.,  110.,   382.,   0.,     0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      150.,   224.,   302.,   384.,   468.,   624.,   788.,   960.,   676.,
      848.,   1028.,  1216.,  1282.,  1552.,  1834.,  2128.,  1140.,  1328.,
      1524.,  1728.,  1978.,  2272.,  2578.,  2896.,  1604.,  1808.,  2020.,
      2240.,  2674.,  2992.,  3322.,  3664.,  2068.,  2288.,  2516.,  2752.,
      2468.,  2704.,  2948.,  3200.,  590.,   704.,   822.,   944.,   1508.,
      1744.,  1988.,  2240.,  1716.,  1968.,  2228.,  2496.,  3082.,  3472.,
      3874.,  4288.,  2500.,  2768.,  3044.,  3328.,  4258.,  4672.,  5098.,
      5536.,  3284.,  3568.,  3860.,  4160.,  5434.,  5872.,  6322.,  6784.,
      4068.,  4368.,  4676.,  4992.,  4468.,  4784.,  5108.,  5440.,  1235.,
      1436.,  1643.,  1856.,  2962.,  3376.,  3802.,  4240.,  3514.,  3952.,
      4402.,  4864.,  6033.,  6708.,  7401.,  8112.,  4690.,  5152.,  5626.,
      6112.,  7797.,  8508.,  9237.,  9984.,  5866.,  6352.,  6850.,  7360.,
      9561.,  10308., 11073., 11856., 7042.,  7552.,  8074.,  8608.,  7882.,
      8416.,  8962.,  9520.,  2390.,  2544.,  2702.,  2864.,  5108.,  5424.,
      5748.,  6080.,  5636.,  5968.,  6308.,  6656.,  8962.,  9472.,  9994.,
      10528., 6420.,  6768.,  7124.,  7488.,  10138., 10672., 11218., 11776.,
      7204.,  7568.,  7940.,  8320.,  11314., 11872., 12442., 13024., 7988.,
      8368.,  8756.,  9152.,  8708.,  9104.,  9508.,  9920.,  3935.,  4196.,
      4463.,  4736.,  8362.,  8896.,  9442.,  10000., 9394.,  9952.,  10522.,
      11104., 14853., 15708., 16581., 17472., 10570., 11152., 11746., 12352.,
      16617., 17508., 18417., 19344., 11746., 12352., 12970., 13600., 18381.,
      19308., 20253., 21216., 12922., 13552., 14194., 14848., 14242., 14896.,
      15562., 16240., 4190.,  4384.,  4582.,  4784.,  8708.,  9104.,  9508.,
      9920.,  9556.,  9968.,  10388., 10816., 14842., 15472., 16114., 16768.,
      10340., 10768., 11204., 11648., 16018., 16672., 17338., 18016., 11124.,
      11568., 12020., 12480., 17194., 17872., 18562., 19264., 11908., 12368.,
      12836., 13312., 12948., 13424., 13908., 14400., 6230.,  6464.,  6702.,
      6944.,  12948., 13424., 13908., 14400., 13796., 14288., 14788., 15296.,
      21442., 22192., 22954., 23728., 14900., 15408., 15924., 16448., 23098.,
      23872., 24658., 25456., 16004., 16528., 17060., 17600., 24754., 25552.,
      26362., 27184., 17108., 17648., 18196., 18752., 18148., 18704., 19268.,
      19840., 4150.,  4384.,  4622.,  4864.,  8468.,  8944.,  9428.,  9920.,
      9956.,  10448., 10948., 11456., 15202., 15952., 16714., 17488., 10420.,
      10928., 11444., 11968., 15898., 16672., 17458., 18256., 10884., 11408.,
      11940., 12480., 16594., 17392., 18202., 19024., 11348., 11888., 12436.,
      12992., 13028., 13584., 14148., 14720., 7790.,  8064.,  8342.,  8624.,
      15908., 16464., 17028., 17600., 17396., 17968., 18548., 19136., 26602.,
      27472., 28354., 29248., 18180., 18768., 19364., 19968., 27778., 28672.,
      29578., 30496., 18964., 19568., 20180., 20800., 28954., 29872., 30802.,
      31744., 19748., 20368., 20996., 21632., 21428., 22064., 22708., 23360.,
      12035., 12476., 12923., 13376., 24562., 25456., 26362., 27280., 27034.,
      27952., 28882., 29824., 41185., 42452., 43737., 45040., 27570., 28384.,
      29210., 30048., 41797., 42972., 44165., 45376., 27082., 27792., 28514.,
      29248., 41385., 42468., 43569., 44688., 28258., 28992., 29738., 30496.,
      29994., 30752., 31522., 32304., 9590.,  9904.,  10222., 10544., 19508.,
      20144., 20788., 21440., 21316., 21968., 22628., 23296., 29794., 30656.,
      31530., 32416., 18900., 19440., 19988., 20544., 27258., 28016., 28786.,
      29568., 15460., 15888., 16324., 16768., 23698., 24352., 25018., 25696.,
      16244., 16688., 17140., 17600., 17220., 17680., 18148., 18624., 14095.,
      14468., 14847., 15232., 28682., 29440., 30210., 30992., 30610., 31392.,
      32186., 32992., 41429., 42492., 43573., 44672., 26026., 26704., 27394.,
      28096., 36921., 37892., 38881., 39888., 20418., 20992., 21578., 22176.,
      31389., 32268., 33165., 34080., 21594., 22192., 22802., 23424., 22786.,
      23408., 24042., 24688., 8190.,  8416.,  8646.,  8880.,  16708., 17168.,
      17636., 18112., 17812., 18288., 18772., 19264., 19418., 20016., 20626.,
      21248., 10276., 10640., 11012., 11392., 11762., 12256., 12762., 13280.,
      1716.,  1968.,  2228.,  2496.,  3082.,  3472.,  3874.,  4288.,  2500.,
      2768.,  3044.,  3328.,  2772.,  3056.,  3348.,  3648.,  10870., 11136.,
      11406., 11680., 22228., 22768., 23316., 23872., 23332., 23888., 24452.,
      25024., 25378., 26096., 26826., 27568., 13556., 14000., 14452., 14912.,
      15642., 16256., 16882., 17520., 2756.,  3088.,  3428.,  3776.,  4882.,
      5392.,  5914.,  6448.,  3860.,  4208.,  4564.,  4928.,  4132.,  4496.,
      4868.,  5248.,  1750.,  1888.,  2030.,  2176.,  3668.,  3952.,  4244.,
      4544.,  4388.,  4688.,  4996.,  5312.,  6850.,  7312.,  7786.,  8272.,
      4852.,  5168.,  5492.,  5824.,  7546.,  8032.,  8530.,  9040.,  5316.,
      5648.,  5988.,  6336.,  8242.,  8752.,  9274.,  9808.,  5780.,  6128.,
      6484.,  6848.,  6692.,  7056.,  7428.,  7808.,  3470.,  3648.,  3830.,
      4016.,  7268.,  7632.,  8004.,  8384.,  7988.,  8368.,  8756.,  9152.,
      12490., 13072., 13666., 14272., 8772.,  9168.,  9572.,  9984.,  13666.,
      14272., 14890., 15520., 9556.,  9968.,  10388., 10816., 14842., 15472.,
      16114., 16768., 10340., 10768., 11204., 11648., 11252., 11696., 12148.,
      12608., 5555.,  5852.,  6155.,  6464.,  11602., 12208., 12826., 13456.,
      12922., 13552., 14194., 14848., 20145., 21108., 22089., 23088., 14098.,
      14752., 15418., 16096., 21909., 22908., 23925., 24960., 15274., 15952.,
      16642., 17344., 23673., 24708., 25761., 26832., 16450., 17152., 17866.,
      18592., 18058., 18784., 19522., 20272., 5270.,  5488.,  5710.,  5936.,
      10868., 11312., 11764., 12224., 11908., 12368., 12836., 13312., 18370.,
      19072., 19786., 20512., 12692., 13168., 13652., 14144., 19546., 20272.,
      21010., 21760., 13476., 13968., 14468., 14976., 20722., 21472., 22234.,
      23008., 14260., 14768., 15284., 15808., 15492., 16016., 16548., 17088.,
      8255.,  8612.,  8975.,  9344.,  17002., 17728., 18466., 19216., 18802.,
      19552., 20314., 21088., 28965., 30108., 31269., 32448., 19978., 20752.,
      21538., 22336., 30729., 31908., 33105., 34320., 21154., 21952., 22762.,
      23584., 32493., 33708., 34941., 36192., 22330., 23152., 23986., 24832.,
      24418., 25264., 26122., 26992., 7070.,  7328.,  7590.,  7856.,  14468.,
      14992., 15524., 16064., 15828., 16368., 16916., 17472., 24250., 25072.,
      25906., 26752., 16612., 17168., 17732., 18304., 25426., 26272., 27130.,
      28000., 17396., 17968., 18548., 19136., 26602., 27472., 28354., 29248.,
      18180., 18768., 19364., 19968., 19732., 20336., 20948., 21568., 10390.,
      10688., 10990., 11296., 21268., 21872., 22484., 23104., 22628., 23248.,
      23876., 24512., 34690., 35632., 36586., 37552., 23732., 24368., 25012.,
      25664., 36346., 37312., 38290., 39280., 24836., 25488., 26148., 26816.,
      38002., 38992., 39994., 41008., 25940., 26608., 27284., 27968., 27492.,
      28176., 28868., 29568.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    5.,     12.,    21.,    32.,    14.,
      32.,    54.,    80.,    38.,    64.,    94.,    128.,   71.,    116.,
      167.,   224.,   110.,   144.,   182.,   224.,   166.,   208.,   254.,
      304.,   117.,   140.,   165.,   192.,   153.,   180.,   209.,   240.,
      0.,     0.,     0.,     0.,     21.,    44.,    69.,    96.,    25.,
      52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,   224.,
      294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,   542.,
      624.,   446.,   528.,   614.,   704.,   297.,   340.,   385.,   432.,
      333.,   380.,   429.,   480.,   0.,     0.,     0.,     0.,     54.,
      112.,   174.,   240.,   110.,   176.,   246.,   320.,   388.,   528.,
      676.,   832.,   532.,   688.,   852.,   1024.,  1066.,  1312.,  1570.,
      1840.,  996.,   1168.,  1348.,  1536.,  1204.,  1392.,  1588.,  1792.,
      750.,   848.,   950.,   1056.,  870.,   976.,   1086.,  1200.,  0.,
      0.,     0.,     0.,     334.,   432.,   534.,   640.,   390.,   496.,
      606.,   720.,   1108.,  1328.,  1556.,  1792.,  1252.,  1488.,  1732.,
      1984.,  2386.,  2752.,  3130.,  3520.,  2036.,  2288.,  2548.,  2816.,
      2244.,  2512.,  2788.,  3072.,  1350.,  1488.,  1630.,  1776.,  1470.,
      1616.,  1766.,  1920.,  0.,     0.,     0.,     0.,     614.,   752.,
      894.,   1040.,  670.,   816.,   966.,   1120.,  1828.,  2128.,  2436.,
      2752.,  1972.,  2288.,  2612.,  2944.,  3706.,  4192.,  4690.,  5200.,
      3076.,  3408.,  3748.,  4096.,  3284.,  3632.,  3988.,  4352.,  1950.,
      2128.,  2310.,  2496.,  2070.,  2256.,  2446.,  2640.,  0.,     0.,
      0.,     0.,     793.,   868.,   945.,   1024.,  845.,   924.,   1005.,
      1088.,  1934.,  2096.,  2262.,  2432.,  2054.,  2224.,  2398.,  2576.,
      3455.,  3716.,  3983.,  4256.,  2606.,  2784.,  2966.,  3152.,  2758.,
      2944.,  3134.,  3328.,  1533.,  1628.,  1725.,  1824.,  1617.,  1716.,
      1817.,  1920.,  0.,     0.,     0.,     0.,     1053.,  1148.,  1245.,
      1344.,  1105.,  1204.,  1305.,  1408.,  2534.,  2736.,  2942.,  3152.,
      2654.,  2864.,  3078.,  3296.,  4475.,  4796.,  5123.,  5456.,  3366.,
      3584.,  3806.,  4032.,  3518.,  3744.,  3974.,  4208.,  1953.,  2068.,
      2185.,  2304.,  2037.,  2156.,  2277.,  2400.,  0.,     0.,     0.,
      0.,     25.,    52.,    81.,    112.,   125.,   156.,   189.,   224.,
      254.,   320.,   390.,   464.,   470.,   544.,   622.,   704.,   719.,
      836.,   959.,   1088.,  542.,   624.,   710.,   800.,   790.,   880.,
      974.,   1072.,  429.,   476.,   525.,   576.,   561.,   612.,   665.,
      720.,   0.,     0.,     0.,     0.,     525.,   572.,   621.,   672.,
      625.,   676.,   729.,   784.,   1334.,  1440.,  1550.,  1664.,  1550.,
      1664.,  1782.,  1904.,  2459.,  2636.,  2819.,  3008.,  1782.,  1904.,
      2030.,  2160.,  2030.,  2160.,  2294.,  2432.,  1089.,  1156.,  1225.,
      1296.,  1221.,  1292.,  1365.,  1440.,  0.,     0.,     0.,     0.,
      1062.,  1168.,  1278.,  1392.,  1310.,  1424.,  1542.,  1664.,  2788.,
      3024.,  3268.,  3520.,  3316.,  3568.,  3828.,  4096.,  5242.,  5632.,
      6034.,  6448.,  3780.,  4048.,  4324.,  4608.,  4372.,  4656.,  4948.,
      5248.,  2334.,  2480.,  2630.,  2784.,  2646.,  2800.,  2958.,  3120.,
      0.,     0.,     0.,     0.,     2302.,  2448.,  2598.,  2752.,  2550.,
      2704.,  2862.,  3024.,  5428.,  5744.,  6068.,  6400.,  5956.,  6288.,
      6628.,  6976.,  9442.,  9952.,  10474., 11008., 6740.,  7088.,  7444.,
      7808.,  7332.,  7696.,  8068.,  8448.,  3894.,  4080.,  4270.,  4464.,
      4206.,  4400.,  4598.,  4800.,  0.,     0.,     0.,     0.,     3542.,
      3728.,  3918.,  4112.,  3790.,  3984.,  4182.,  4384.,  8068.,  8464.,
      8868.,  9280.,  8596.,  9008.,  9428.,  9856.,  13642., 14272., 14914.,
      15568., 9700.,  10128., 10564., 11008., 10292., 10736., 11188., 11648.,
      5454.,  5680.,  5910.,  6144.,  5766.,  6000.,  6238.,  6480.,  0.,
      0.,     0.,     0.,     2257.,  2356.,  2457.,  2560.,  2405.,  2508.,
      2613.,  2720.,  5054.,  5264.,  5478.,  5696.,  5366.,  5584.,  5806.,
      6032.,  8423.,  8756.,  9095.,  9440.,  5918.,  6144.,  6374.,  6608.,
      6262.,  6496.,  6734.,  6976.,  3285.,  3404.,  3525.,  3648.,  3465.,
      3588.,  3713.,  3840.,  0.,     0.,     0.,     0.,     2997.,  3116.,
      3237.,  3360.,  3145.,  3268.,  3393.,  3520.,  6614.,  6864.,  7118.,
      7376.,  6926.,  7184.,  7446.,  7712.,  10883., 11276., 11675., 12080.,
      7638.,  7904.,  8174.,  8448.,  7982.,  8256.,  8534.,  8816.,  4185.,
      4324.,  4465.,  4608.,  4365.,  4508.,  4653.,  4800.,  0.,     0.,
      0.,     0.,     49.,    100.,   153.,   208.,   245.,   300.,   357.,
      416.,   494.,   608.,   726.,   848.,   902.,   1024.,  1150.,  1280.,
      1367.,  1556.,  1751.,  1952.,  974.,   1104.,  1238.,  1376.,  1414.,
      1552.,  1694.,  1840.,  741.,   812.,   885.,   960.,   969.,   1044.,
      1121.,  1200.,  0.,     0.,     0.,     0.,     1029.,  1100.,  1173.,
      1248.,  1225.,  1300.,  1377.,  1456.,  2534.,  2688.,  2846.,  3008.,
      2942.,  3104.,  3270.,  3440.,  4547.,  4796.,  5051.,  5312.,  3174.,
      3344.,  3518.,  3696.,  3614.,  3792.,  3974.,  4160.,  1881.,  1972.,
      2065.,  2160.,  2109.,  2204.,  2301.,  2400.,  0.,     0.,     0.,
      0.,     2070.,  2224.,  2382.,  2544.,  2510.,  2672.,  2838.,  3008.,
      5188.,  5520.,  5860.,  6208.,  6100.,  6448.,  6804.,  7168.,  9418.,
      9952.,  10498., 11056., 6564.,  6928.,  7300.,  7680.,  7540.,  7920.,
      8308.,  8704.,  3918.,  4112.,  4310.,  4512.,  4422.,  4624.,  4830.,
      5040.,  0.,     0.,     0.,     0.,     4270.,  4464.,  4662.,  4864.,
      4710.,  4912.,  5118.,  5328.,  9748.,  10160., 10580., 11008., 10660.,
      11088., 11524., 11968., 16498., 17152., 17818., 18496., 11444., 11888.,
      12340., 12800., 12420., 12880., 13348., 13824., 6438.,  6672.,  6910.,
      7152.,  6942.,  7184.,  7430.,  7680.,  0.,     0.,     0.,     0.,
      6470.,  6704.,  6942.,  7184.,  6910.,  7152.,  7398.,  7648.,  14308.,
      14800., 15300., 15808., 15220., 15728., 16244., 16768., 23578., 24352.,
      25138., 25936., 16324., 16848., 17380., 17920., 17300., 17840., 18388.,
      18944., 8958.,  9232.,  9510.,  9792.,  9462.,  9744.,  10030., 10320.,
      0.,     0.,     0.,     0.,     3721.,  3844.,  3969.,  4096.,  3965.,
      4092.,  4221.,  4352.,  8174.,  8432.,  8694.,  8960.,  8678.,  8944.,
      9214.,  9488.,  13391., 13796., 14207., 14624., 9230.,  9504.,  9782.,
      10064., 9766.,  10048., 10334., 10624., 5037.,  5180.,  5325.,  5472.,
      5313.,  5460.,  5609.,  5760.,  0.,     0.,     0.,     0.,     4941.,
      5084.,  5229.,  5376.,  5185.,  5332.,  5481.,  5632.,  10694., 10992.,
      11294., 11600., 11198., 11504., 11814., 12128., 17291., 17756., 18227.,
      18704., 11910., 12224., 12542., 12864., 12446., 12768., 13094., 13424.,
      6417.,  6580.,  6745.,  6912.,  6693.,  6860.,  7029.,  7200.,  0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      866.,   1194.,  1554.,  1946.,  2036.,  2756.,  3540.,  4388.,  3668.,
      4516.,  5428.,  6404.,  6086.,  7454.,  8918.,  10478., 5300.,  6276.,
      7316.,  8420.,  8342.,  9646.,  11046., 12542., 5716.,  6564.,  7476.,
      8452.,  8550.,  9790.,  11126., 12558., 4084.,  4804.,  5588.,  6436.,
      5204.,  6052.,  6964.,  7940.,  4114.,  4506.,  4930.,  5386.,  10004.,
      11108., 12276., 13508., 5108.,  5828.,  6612.,  7460.,  13526., 15086.,
      16742., 18494., 6228.,  7076.,  7988.,  8964.,  11430., 12926., 14518.,
      16206., 1012.,  1732.,  2516.,  3364.,  7286.,  8718.,  10246., 11870.,
      1940.,  2532.,  3188.,  3908.,  3060.,  3780.,  4564.,  5412.,  2575.,
      3147.,  3767.,  4435.,  5990.,  7230.,  8566.,  9998.,  8310.,  9742.,
      11270., 12894., 13725., 15761., 17941., 20265., 11526., 13150., 14870.,
      16686., 15285., 17353., 19565., 21921., 11478., 13038., 14694., 16446.,
      14797., 16897., 19141., 21529., 9382.,  10878., 12470., 14158., 8694.,
      10126., 11654., 13278., 1858.,  2314.,  2802.,  3322.,  10612., 11844.,
      13140., 14500., 4180.,  5028.,  5940.,  6916.,  15718., 17470., 19318.,
      21262., 5300.,  6276.,  7316.,  8420.,  11574., 13262., 15046., 16926.,
      6228.,  7076.,  7988.,  8964.,  13574., 15198., 16918., 18734., 5108.,
      5828.,  6612.,  7460.,  6740.,  7588.,  8500.,  9476.,  5431.,  6227.,
      7071.,  7963.,  11510., 12942., 14470., 16094., 14598., 16222., 17942.,
      19758., 17429., 19625., 21965., 24449., 14550., 16110., 17766., 19518.,
      12653., 14625., 16741., 19001., 12454., 13950., 15542., 17230., 10117.,
      12121., 14269., 16561., 8310.,  9742.,  11270., 12894., 10438., 11806.,
      13270., 14830., 5746.,  6266.,  6818.,  7402.,  10004., 11108., 12276.,
      13508., 1012.,  1732.,  2516.,  3364.,  7286.,  8718.,  10246., 11870.,
      1940.,  2532.,  3188.,  3908.,  9286.,  10654., 12118., 13678., 3060.,
      3780.,  4564.,  5412.,  12502., 14062., 15718., 17470., 4180.,  5028.,
      5940.,  6916.,  6324.,  7300.,  8340.,  9444.,  4386.,  4970.,  5586.,
      6234.,  7348.,  8324.,  9364.,  10468., 8980.,  10084., 11252., 12484.,
      10950., 12318., 13782., 15342., 6324.,  7300.,  8340.,  9444.,  7574.,
      8878.,  10278., 11774., 8980.,  10084., 11252., 12484., 10534., 12030.,
      13622., 15310., 11636., 12868., 14164., 15524., 8468.,  9572.,  10740.,
      11972., 1890.,  2218.,  2578.,  2970.,  4084.,  4804.,  5588.,  6436.,
      5716.,  6564.,  7476.,  8452.,  9158.,  10526., 11990., 13550., 7348.,
      8324.,  9364.,  10468., 11606., 13166., 14822., 16574., 8980.,  10084.,
      11252., 12484., 11814., 13310., 14902., 16590., 7348.,  8324.,  9364.,
      10468., 9492.,  10596., 11764., 12996., 1042.,  1434.,  1858.,  2314.,
      7956.,  9060.,  10228., 11460., 3060.,  3780.,  4564.,  5412.,  12502.,
      14062., 15718., 17470., 4180.,  5028.,  5940.,  6916.,  15718., 17470.,
      19318., 21262., 5300.,  6276.,  7316.,  8420.,  11574., 13262., 15046.,
      16926., 6228.,  7076.,  7988.,  8964.,  8372.,  9348.,  10388., 11492.,
      4207.,  4907.,  5655.,  6451.,  9254.,  10750., 12342., 14030., 12598.,
      14286., 16070., 17950., 15869., 18033., 20341., 22793., 14598., 16222.,
      17942., 19758., 17429., 19625., 21965., 24449., 14550., 16110., 17766.,
      19518., 12653., 14625., 16741., 19001., 12454., 13950., 15542., 17230.,
      7670.,  9102.,  10630., 12254., 4930.,  5386.,  5874.,  6394.,  12660.,
      13892., 15188., 16548., 6228.,  7076.,  7988.,  8964.,  11430., 12926.,
      14518., 16206., 1012.,  1732.,  2516.,  3364.,  7286.,  8718.,  10246.,
      11870., 1940.,  2532.,  3188.,  3908.,  9286.,  10654., 12118., 13678.,
      3060.,  3780.,  4564.,  5412.,  4692.,  5540.,  6452.,  7428.,  3799.,
      4467.,  5183.,  5947.,  8438.,  9870.,  11398., 13022., 11526., 13150.,
      14870., 16686., 15285., 17353., 19565., 21921., 11478., 13038., 14694.,
      16446., 14797., 16897., 19141., 21529., 9382.,  10878., 12470., 14158.,
      12261., 14393., 16669., 19089., 12598., 14286., 16070., 17950., 11654.,
      13278., 14998., 16814., 2674.,  3194.,  3746.,  4330.,  13268., 14628.,
      16052., 17540., 5300.,  6276.,  7316.,  8420.,  11574., 13262., 15046.,
      16926., 6228.,  7076.,  7988.,  8964.,  13574., 15198., 16918., 18734.,
      5108.,  5828.,  6612.,  7460.,  13526., 15086., 16742., 18494., 6228.,
      7076.,  7988.,  8964.,  8372.,  9348.,  10388., 11492., 5410.,  5994.,
      6610.,  7258.,  11636., 12868., 14164., 15524., 14292., 15652., 17076.,
      18564., 12166., 13790., 15510., 17326., 11636., 12868., 14164., 15524.,
      8790.,  10350., 12006., 13758., 6932.,  8036.,  9204.,  10436., 11558.,
      13054., 14646., 16334., 9588.,  10820., 12116., 13476., 10516., 11620.,
      12788., 14020., 866.,   1194.,  1554.,  1946.,  2036.,  2756.,  3540.,
      4388.,  3668.,  4516.,  5428.,  6404.,  6086.,  7454.,  8918.,  10478.,
      5300.,  6276.,  7316.,  8420.,  8342.,  9646.,  11046., 12542., 5716.,
      6564.,  7476.,  8452.,  8550.,  9790.,  11126., 12558., 4084.,  4804.,
      5588.,  6436.,  5204.,  6052.,  6964.,  7940.,  4114.,  4506.,  4930.,
      5386.,  10004., 11108., 12276., 13508., 5108.,  5828.,  6612.,  7460.,
      13526., 15086., 16742., 18494., 6228.,  7076.,  7988.,  8964.,  11430.,
      12926., 14518., 16206., 1012.,  1732.,  2516.,  3364.,  7286.,  8718.,
      10246., 11870., 1940.,  2532.,  3188.,  3908.,  3060.,  3780.,  4564.,
      5412.,  2575.,  3147.,  3767.,  4435.,  5990.,  7230.,  8566.,  9998.,
      8310.,  9742.,  11270., 12894., 13725., 15761., 17941., 20265., 11526.,
      13150., 14870., 16686., 15285., 17353., 19565., 21921., 11478., 13038.,
      14694., 16446., 14797., 16897., 19141., 21529., 9382.,  10878., 12470.,
      14158., 8694.,  10126., 11654., 13278., 1858.,  2314.,  2802.,  3322.,
      10612., 11844., 13140., 14500., 4180.,  5028.,  5940.,  6916.,  15718.,
      17470., 19318., 21262., 5300.,  6276.,  7316.,  8420.,  11574., 13262.,
      15046., 16926., 6228.,  7076.,  7988.,  8964.,  13574., 15198., 16918.,
      18734., 5108.,  5828.,  6612.,  7460.,  6740.,  7588.,  8500.,  9476.,
      5431.,  6227.,  7071.,  7963.,  11510., 12942., 14470., 16094., 14598.,
      16222., 17942., 19758., 17429., 19625., 21965., 24449., 14550., 16110.,
      17766., 19518., 12653., 14625., 16741., 19001., 12454., 13950., 15542.,
      17230., 10117., 12121., 14269., 16561., 8310.,  9742.,  11270., 12894.,
      10438., 11806., 13270., 14830., 5746.,  6266.,  6818.,  7402.,  10004.,
      11108., 12276., 13508., 1012.,  1732.,  2516.,  3364.,  7286.,  8718.,
      10246., 11870., 1940.,  2532.,  3188.,  3908.,  9286.,  10654., 12118.,
      13678., 3060.,  3780.,  4564.,  5412.,  12502., 14062., 15718., 17470.,
      4180.,  5028.,  5940.,  6916.,  6324.,  7300.,  8340.,  9444.,  4386.,
      4970.,  5586.,  6234.,  7348.,  8324.,  9364.,  10468., 8980.,  10084.,
      11252., 12484., 10950., 12318., 13782., 15342., 6324.,  7300.,  8340.,
      9444.,  7574.,  8878.,  10278., 11774., 8980.,  10084., 11252., 12484.,
      10534., 12030., 13622., 15310., 11636., 12868., 14164., 15524., 8468.,
      9572.,  10740., 11972.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   487.,   835.,
      1231.,  1675.,  818.,   1082.,  1378.,  1706.,  1250.,  1578.,  1938.,
      2330.,  893.,   1073.,  1269.,  1481.,  1173.,  1385.,  1613.,  1857.,
      0.,     0.,     0.,     0.,     125.,   305.,   501.,   713.,   149.,
      361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  946.,   1210.,
      1506.,  1834.,  2575.,  3147.,  3767.,  4435.,  1762.,  2090.,  2450.,
      2842.,  2194.,  2586.,  3010.,  3466.,  53.,    137.,   237.,   353.,
      333.,   449.,   581.,   729.,   0.,     0.,     0.,     0.,     130.,
      330.,   562.,   826.,   562.,   826.,   1122.,  1450.,  1428.,  2020.,
      2676.,  3396.,  2548.,  3268.,  4052.,  4900.,  4406.,  5582.,  6854.,
      8222.,  4180.,  5028.,  5940.,  6916.,  5812.,  6788.,  7828.,  8932.,
      3570.,  4090.,  4642.,  5226.,  4514.,  5098.,  5714.,  6362.,  0.,
      0.,     0.,     0.,     2290.,  2810.,  3362.,  3946.,  2530.,  2858.,
      3218.,  3610.,  6836.,  7812.,  8852.,  9956.,  3476.,  4068.,  4724.,
      5444.,  10054., 11422., 12886., 14446., 4596.,  5316.,  6100.,  6948.,
      6228.,  7076.,  7988.,  8964.,  738.,   1066.,  1426.,  1818.,  1682.,
      2074.,  2498.,  2954.,  0.,     0.,     0.,     0.,     994.,   1322.,
      1682.,  2074.,  1426.,  1818.,  2242.,  2698.,  3668.,  4516.,  5428.,
      6404.,  4788.,  5764.,  6804.,  7908.,  8342.,  9646.,  11046., 12542.,
      7444.,  8548.,  9716.,  10948., 7860.,  8836.,  9876.,  10980., 5458.,
      6106.,  6786.,  7498.,  4162.,  4618.,  5106.,  5626.,  0.,     0.,
      0.,     0.,     2933.,  3273.,  3629.,  4001.,  77.,    193.,   325.,
      473.,   4338.,  4858.,  5410.,  5994.,  994.,   1322.,  1682.,  2074.,
      6711.,  7507.,  8351.,  9243.,  1298.,  1690.,  2114.,  2570.,  2498.,
      2954.,  3442.,  3962.,  1453.,  1697.,  1957.,  2233.,  2117.,  2393.,
      2685.,  2993.,  0.,     0.,     0.,     0.,     1709.,  1953.,  2213.,
      2489.,  2117.,  2393.,  2685.,  2993.,  4770.,  5354.,  5970.,  6618.,
      5714.,  6362.,  7042.,  7754.,  6175.,  6939.,  7751.,  8611.,  7298.,
      8010.,  8754.,  9530.,  4210.,  4730.,  5282.,  5866.,  4773.,  5177.,
      5597.,  6033.,  125.,   305.,   501.,   713.,   0.,     0.,     0.,
      0.,     149.,   361.,   589.,   833.,   941.,   1185.,  1445.,  1721.,
      1906.,  2426.,  2978.,  3562.,  3618.,  4202.,  4818.,  5466.,  5335.,
      6003.,  6719.,  7483.,  2962.,  3354.,  3778.,  4234.,  3906.,  4362.,
      4850.,  5370.,  77.,    193.,   325.,   473.,   101.,   249.,   413.,
      593.,   0.,     0.,     0.,     0.,     4109.,  4481.,  4869.,  5273.,
      4901.,  5305.,  5725.,  6161.,  10466., 11306., 12178., 13082., 5842.,
      6490.,  7170.,  7882.,  7679.,  8571.,  9511.,  10499., 322.,   778.,
      1266.,  1786.,  1266.,  1786.,  2338.,  2922.,  5.,     25.,    61.,
      113.,   29.,    81.,    149.,   233.,   0.,     0.,     0.,     0.,
      1762.,  2090.,  2450.,  2842.,  2706.,  3098.,  3522.,  3978.,  5716.,
      6564.,  7476.,  8452.,  7860.,  8836.,  9876.,  10980., 10134., 11438.,
      12838., 14334., 6228.,  7076.,  7988.,  8964.,  7860.,  8836.,  9876.,
      10980., 1426.,  1818.,  2242.,  2698.,  1858.,  2314.,  2802.,  3322.,
      0.,     0.,     0.,     0.,     6482.,  7130.,  7810.,  8522.,  1090.,
      1546.,  2034.,  2554.,  10100., 11332., 12628., 13988., 3668.,  4516.,
      5428.,  6404.,  8102.,  9598.,  11190., 12878., 4596.,  5316.,  6100.,
      6948.,  6228.,  7076.,  7988.,  8964.,  130.,   330.,   562.,   826.,
      562.,   826.,   1122.,  1450.,  0.,     0.,     0.,     0.,     3650.,
      4106.,  4594.,  5114.,  4594.,  5114.,  5666.,  6250.,  10004., 11108.,
      12276., 13508., 12148., 13380., 14676., 16036., 8950.,  10382., 11910.,
      13534., 9492.,  10596., 11764., 12996., 3764.,  4740.,  5780.,  6884.,
      2290.,  2810.,  3362.,  3946.,  2530.,  2858.,  3218.,  3610.,  0.,
      0.,     0.,     0.,     1093.,  1369.,  1661.,  1969.,  29.,    81.,
      149.,   233.,   2194.,  2586.,  3010.,  3466.,  386.,   586.,   818.,
      1082.,  3751.,  4355.,  5007.,  5707.,  690.,   954.,   1250.,  1578.,
      1378.,  1706.,  2066.,  2458.,  893.,   1073.,  1269.,  1481.,  1301.,
      1513.,  1741.,  1985.,  0.,     0.,     0.,     0.,     637.,   817.,
      1013.,  1225.,  789.,   1001.,  1229.,  1473.,  2114.,  2570.,  3058.,
      3578.,  2546.,  3066.,  3618.,  4202.,  3471.,  4043.,  4663.,  5331.,
      4130.,  4714.,  5330.,  5978.,  2578.,  2970.,  3394.,  3850.,  2933.,
      3273.,  3629.,  4001.,  77.,    193.,   325.,   473.,   0.,     0.,
      0.,     0.,     101.,   249.,   413.,   593.,   637.,   817.,   1013.,
      1225.,  1298.,  1690.,  2114.,  2570.,  2498.,  2954.,  3442.,  3962.,
      3847.,  4579.,  5359.,  6187.,  3058.,  3578.,  4130.,  4714.,  4514.,
      5098.,  5714.,  6362.,  2525.,  2833.,  3157.,  3497.,  3317.,  3657.,
      4013.,  4385.,  0.,     0.,     0.,     0.,     2781.,  3089.,  3413.,
      3753.,  3317.,  3657.,  4013.,  4385.,  7298.,  8010.,  8754.,  9530.,
      4210.,  4730.,  5282.,  5866.,  9519.,  10475., 11479., 12531., 5026.,
      5610.,  6226.,  6874.,  6482.,  7130.,  7810.,  8522.,  149.,   361.,
      589.,   833.,   941.,   1185.,  1445.,  1721.,  0.,     0.,     0.,
      0.,     1346.,  1802.,  2290.,  2810.,  2802.,  3322.,  3874.,  4458.,
      5716.,  6564.,  7476.,  8452.,  7860.,  8836.,  9876.,  10980., 11766.,
      13198., 14726., 16350., 6228.,  7076.,  7988.,  8964.,  7860.,  8836.,
      9876.,  10980., 4594.,  5114.,  5666.,  6250.,  5538.,  6122.,  6738.,
      7386.,  0.,     0.,     0.,     0.,     8626.,  9402.,  10210., 11050.,
      5794.,  6378.,  6994.,  7642.,  12148., 13380., 14676., 16036., 1620.,
      2468.,  3380.,  4356.,  10246., 11870., 13590., 15406., 2548.,  3268.,
      4052.,  4900.,  4180.,  5028.,  5940.,  6916.,  1762.,  2090.,  2450.,
      2842.,  2706.,  3098.,  3522.,  3978.,  0.,     0.,     0.,     0.,
      4258.,  4842.,  5458.,  6106.,  5714.,  6362.,  7042.,  7754.,  10004.,
      11108., 12276., 13508., 12148., 13380., 14676., 16036., 13654., 15214.,
      16870., 18622., 9492.,  10596., 11764., 12996., 5812.,  6788.,  7828.,
      8932.,  6482.,  7130.,  7810.,  8522.,  1090.,  1546.,  2034.,  2554.,
      0.,     0.,     0.,     0.,     6613.,  7081.,  7565.,  8065.,  173.,
      417.,   677.,   953.,   1266.,  1786.,  2338.,  2922.,  2018.,  2346.,
      2706.,  3098.,  4055.,  4723.,  5439.,  6203.,  82.,    218.,   386.,
      586.,   258.,   458.,   690.,   954.,   333.,   449.,   581.,   729.,
      485.,   633.,   797.,   977.,   0.,     0.,     0.,     0.,     3853.,
      4225.,  4613.,  5017.,  4773.,  5177.,  5597.,  6033.,  5794.,  6378.,
      6994.,  7642.,  6738.,  7386.,  8066.,  8778.,  959.,   1595.,  2279.,
      3011.,  962.,   1418.,  1906.,  2426.,  946.,   1210.,  1506.,  1834.,
      1093.,  1369.,  1661.,  1969.,  29.,    81.,    149.,   233.,   0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1884.,  3452.,  5276.,  7356.,  5496.,  8120.,  11256., 14904., 10232.,
      13880., 18040., 22712., 10772., 15476., 20948., 27188., 19064., 23736.,
      28920., 34616., 17236., 22452., 28436., 35188., 23160., 27832., 33016.,
      38712., 6676.,  11380., 16852., 23092., 6136.,  9784.,  13944., 18616.,
      9592.,  12216., 15352., 19000., 2588.,  3644.,  4956.,  6524.,  10232.,
      13880., 18040., 22712., 5496.,  8120.,  11256., 14904., 20948., 27188.,
      34196., 41972., 10232., 13880., 18040., 22712., 29460., 36212., 43732.,
      52020., 6136.,  9784.,  13944., 18616., 16852., 23092., 30100., 37876.,
      9592.,  12216., 15352., 19000., 14328., 17976., 22136., 26808., 6490.,
      8970.,  11834., 15082., 10772., 15476., 20948., 27188., 20948., 27188.,
      34196., 41972., 20174., 27102., 35182., 44414., 29460., 36212., 43732.,
      52020., 12142., 19326., 27662., 37150., 16852., 23092., 30100., 37876.,
      19854., 26270., 33838., 42558., 20628., 26356., 32852., 40116., 6356.,
      10548., 15508., 21236., 4956.,  6524.,  8348.,  10428., 19064., 23736.,
      28920., 34616., 10232., 13880., 18040., 22712., 29460., 36212., 43732.,
      52020., 6136.,  9784.,  13944., 18616., 16852., 23092., 30100., 37876.,
      9592.,  12216., 15352., 19000., 20628., 26356., 32852., 40116., 5496.,
      8120.,  11256., 14904., 10232., 13880., 18040., 22712., 12090., 15338.,
      18970., 22986., 17236., 22452., 28436., 35188., 29460., 36212., 43732.,
      52020., 12142., 19326., 27662., 37150., 16852., 23092., 30100., 37876.,
      19854., 26270., 33838., 42558., 20628., 26356., 32852., 40116., 11822.,
      18494., 26318., 35294., 20948., 27188., 34196., 41972., 12820., 17524.,
      22996., 29236., 7324.,  9404.,  11740., 14332., 23160., 27832., 33016.,
      38712., 6136.,  9784.,  13944., 18616., 16852., 23092., 30100., 37876.,
      9592.,  12216., 15352., 19000., 20628., 26356., 32852., 40116., 5496.,
      8120.,  11256., 14904., 20948., 27188., 34196., 41972., 10232., 13880.,
      18040., 22712., 19064., 23736., 28920., 34616., 12764., 15356., 18204.,
      21308., 6136.,  9784.,  13944., 18616., 14968., 19640., 24824., 30520.,
      16916., 21620., 27092., 33332., 14328., 17976., 22136., 26808., 6356.,
      10548., 15508., 21236., 10232., 13880., 18040., 22712., 12820., 17524.,
      22996., 29236., 19064., 23736., 28920., 34616., 10232., 13880., 18040.,
      22712., 1884.,  3452.,  5276.,  7356.,  5496.,  8120.,  11256., 14904.,
      10232., 13880., 18040., 22712., 10772., 15476., 20948., 27188., 19064.,
      23736., 28920., 34616., 17236., 22452., 28436., 35188., 23160., 27832.,
      33016., 38712., 6676.,  11380., 16852., 23092., 6136.,  9784.,  13944.,
      18616., 9592.,  12216., 15352., 19000., 2588.,  3644.,  4956.,  6524.,
      10232., 13880., 18040., 22712., 5496.,  8120.,  11256., 14904., 20948.,
      27188., 34196., 41972., 10232., 13880., 18040., 22712., 29460., 36212.,
      43732., 52020., 6136.,  9784.,  13944., 18616., 16852., 23092., 30100.,
      37876., 9592.,  12216., 15352., 19000., 14328., 17976., 22136., 26808.,
      6490.,  8970.,  11834., 15082., 10772., 15476., 20948., 27188., 20948.,
      27188., 34196., 41972., 20174., 27102., 35182., 44414., 29460., 36212.,
      43732., 52020., 12142., 19326., 27662., 37150., 16852., 23092., 30100.,
      37876., 19854., 26270., 33838., 42558., 20628., 26356., 32852., 40116.,
      6356.,  10548., 15508., 21236., 4956.,  6524.,  8348.,  10428., 19064.,
      23736., 28920., 34616., 10232., 13880., 18040., 22712., 29460., 36212.,
      43732., 52020., 6136.,  9784.,  13944., 18616., 16852., 23092., 30100.,
      37876., 9592.,  12216., 15352., 19000., 20628., 26356., 32852., 40116.,
      5496.,  8120.,  11256., 14904., 10232., 13880., 18040., 22712., 12090.,
      15338., 18970., 22986., 17236., 22452., 28436., 35188., 29460., 36212.,
      43732., 52020., 12142., 19326., 27662., 37150., 16852., 23092., 30100.,
      37876., 19854., 26270., 33838., 42558., 20628., 26356., 32852., 40116.,
      11822., 18494., 26318., 35294., 20948., 27188., 34196., 41972., 12820.,
      17524., 22996., 29236., 7324.,  9404.,  11740., 14332., 23160., 27832.,
      33016., 38712., 6136.,  9784.,  13944., 18616., 16852., 23092., 30100.,
      37876., 9592.,  12216., 15352., 19000., 20628., 26356., 32852., 40116.,
      5496.,  8120.,  11256., 14904., 20948., 27188., 34196., 41972., 10232.,
      13880., 18040., 22712., 19064., 23736., 28920., 34616., 12764., 15356.,
      18204., 21308., 6136.,  9784.,  13944., 18616., 14968., 19640., 24824.,
      30520., 16916., 21620., 27092., 33332., 14328., 17976., 22136., 26808.,
      6356.,  10548., 15508., 21236., 10232., 13880., 18040., 22712., 12820.,
      17524., 22996., 29236., 19064., 23736., 28920., 34616., 10232., 13880.,
      18040., 22712., 1884.,  3452.,  5276.,  7356.,  5496.,  8120.,  11256.,
      14904., 10232., 13880., 18040., 22712., 10772., 15476., 20948., 27188.,
      19064., 23736., 28920., 34616., 17236., 22452., 28436., 35188., 23160.,
      27832., 33016., 38712., 6676.,  11380., 16852., 23092., 6136.,  9784.,
      13944., 18616., 9592.,  12216., 15352., 19000., 2588.,  3644.,  4956.,
      6524.,  10232., 13880., 18040., 22712., 5496.,  8120.,  11256., 14904.,
      20948., 27188., 34196., 41972., 10232., 13880., 18040., 22712., 29460.,
      36212., 43732., 52020., 6136.,  9784.,  13944., 18616., 16852., 23092.,
      30100., 37876., 9592.,  12216., 15352., 19000., 14328., 17976., 22136.,
      26808., 6490.,  8970.,  11834., 15082., 10772., 15476., 20948., 27188.,
      20948., 27188., 34196., 41972., 20174., 27102., 35182., 44414., 29460.,
      36212., 43732., 52020., 12142., 19326., 27662., 37150., 16852., 23092.,
      30100., 37876., 19854., 26270., 33838., 42558., 20628., 26356., 32852.,
      40116., 6356.,  10548., 15508., 21236., 4956.,  6524.,  8348.,  10428.,
      19064., 23736., 28920., 34616., 10232., 13880., 18040., 22712., 29460.,
      36212., 43732., 52020., 6136.,  9784.,  13944., 18616., 16852., 23092.,
      30100., 37876., 9592.,  12216., 15352., 19000., 20628., 26356., 32852.,
      40116., 5496.,  8120.,  11256., 14904., 10232., 13880., 18040., 22712.,
      12090., 15338., 18970., 22986., 17236., 22452., 28436., 35188., 29460.,
      36212., 43732., 52020., 12142., 19326., 27662., 37150., 16852., 23092.,
      30100., 37876., 19854., 26270., 33838., 42558., 20628., 26356., 32852.,
      40116., 11822., 18494., 26318., 35294., 20948., 27188., 34196., 41972.,
      12820., 17524., 22996., 29236., 7324.,  9404.,  11740., 14332., 23160.,
      27832., 33016., 38712., 6136.,  9784.,  13944., 18616., 16852., 23092.,
      30100., 37876., 9592.,  12216., 15352., 19000., 20628., 26356., 32852.,
      40116., 5496.,  8120.,  11256., 14904., 20948., 27188., 34196., 41972.,
      10232., 13880., 18040., 22712., 19064., 23736., 28920., 34616., 12764.,
      15356., 18204., 21308., 6136.,  9784.,  13944., 18616., 14968., 19640.,
      24824., 30520., 16916., 21620., 27092., 33332., 14328., 17976., 22136.,
      26808., 6356.,  10548., 15508., 21236., 10232., 13880., 18040., 22712.,
      12820., 17524., 22996., 29236., 19064., 23736., 28920., 34616., 10232.,
      13880., 18040., 22712.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,
      1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2938.,  4650.,
      6746.,  9226.,  6300.,  8380.,  10716., 13308., 4956.,  6524.,  8348.,
      10428., 6974.,  8398.,  9950.,  11630., 350.,   1006.,  1790.,  2702.,
      0.,     0.,     0.,     0.,     190.,   590.,   1118.,  1774.,  350.,
      1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,
      4956.,  6524.,  6490.,  8970.,  11834., 15082., 4956.,  6524.,  8348.,
      10428., 8348.,  10428., 12764., 15356., 350.,   1006.,  1790.,  2702.,
      2558.,  3470.,  4510.,  5678.,  0.,     0.,     0.,     0.,     860.,
      2428.,  4252.,  6332.,  4252.,  6332.,  8668.,  11260., 9592.,  12216.,
      15352., 19000., 14328., 17976., 22136., 26808., 6356.,  10548., 15508.,
      21236., 10232., 13880., 18040., 22712., 5496.,  8120.,  11256., 14904.,
      6300.,  8380.,  10716., 13308., 4956.,  6524.,  8348.,  10428., 0.,
      0.,     0.,     0.,     4252.,  6332.,  8668.,  11260., 7004.,  8572.,
      10396., 12476., 14328., 17976., 22136., 26808., 1400.,  4024.,  7160.,
      10808., 14484., 20212., 26708., 33972., 5496.,  8120.,  11256., 14904.,
      10232., 13880., 18040., 22712., 4956.,  6524.,  8348.,  10428., 8348.,
      10428., 12764., 15356., 0.,     0.,     0.,     0.,     7004.,  8572.,
      10396., 12476., 10396., 12476., 14812., 17404., 1400.,  4024.,  7160.,
      10808., 6136.,  9784.,  13944., 18616., 12500., 16692., 21652., 27380.,
      10232., 13880., 18040., 22712., 5496.,  8120.,  11256., 14904., 8348.,
      10428., 12764., 15356., 2908.,  4476.,  6300.,  8380.,  0.,     0.,
      0.,     0.,     10206., 11886., 13694., 15630., 510.,   1422.,  2462.,
      3630.,  4252.,  6332.,  8668.,  11260., 7004.,  8572.,  10396., 12476.,
      14138., 17386., 21018., 25034., 540.,   1596.,  2908.,  4476.,  1884.,
      3452.,  5276.,  7356.,  2558.,  3470.,  4510.,  5678.,  3742.,  4910.,
      6206.,  7630.,  0.,     0.,     0.,     0.,     510.,   1422.,  2462.,
      3630.,  3742.,  4910.,  6206.,  7630.,  7004.,  8572.,  10396., 12476.,
      10396., 12476., 14812., 17404., 1050.,  3018.,  5370.,  8106.,  1884.,
      3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  3742.,  4910.,
      6206.,  7630.,  190.,   590.,   1118.,  1774.,  0.,     0.,     0.,
      0.,     350.,   1006.,  1790.,  2702.,  2558.,  3470.,  4510.,  5678.,
      5276.,  7356.,  9692.,  12284., 10716., 13308., 16156., 19260., 7354.,
      9578.,  12186., 15178., 10396., 12476., 14812., 17404., 860.,   2428.,
      4252.,  6332.,  510.,   1422.,  2462.,  3630.,  30.,    174.,   446.,
      846.,   0.,     0.,     0.,     0.,     2558.,  3470.,  4510.,  5678.,
      4766.,  5934.,  7230.,  8654.,  10716., 13308., 16156., 19260., 7324.,
      9404.,  11740., 14332., 12954., 15946., 19322., 23082., 860.,   2428.,
      4252.,  6332.,  4252.,  6332.,  8668.,  11260., 30.,    174.,   446.,
      846.,   190.,   590.,   1118.,  1774.,  0.,     0.,     0.,     0.,
      4956.,  6524.,  8348.,  10428., 8348.,  10428., 12764., 15356., 10232.,
      13880., 18040., 22712., 19064., 23736., 28920., 34616., 11092., 16308.,
      22292., 29044., 14968., 19640., 24824., 30520., 14328., 17976., 22136.,
      26808., 10396., 12476., 14812., 17404., 860.,   2428.,  4252.,  6332.,
      0.,     0.,     0.,     0.,     8348.,  10428., 12764., 15356., 2908.,
      4476.,  6300.,  8380.,  19064., 23736., 28920., 34616., 10232., 13880.,
      18040., 22712., 23316., 30068., 37588., 45876., 14328., 17976., 22136.,
      26808., 23160., 27832., 33016., 38712., 860.,   2428.,  4252.,  6332.,
      4252.,  6332.,  8668.,  11260., 0.,     0.,     0.,     0.,     2908.,
      4476.,  6300.,  8380.,  6300.,  8380.,  10716., 13308., 10232., 13880.,
      18040., 22712., 19064., 23736., 28920., 34616., 17236., 22452., 28436.,
      35188., 23160., 27832., 33016., 38712., 6136.,  9784.,  13944., 18616.,
      4252.,  6332.,  8668.,  11260., 7004.,  8572.,  10396., 12476., 0.,
      0.,     0.,     0.,     3742.,  4910.,  6206.,  7630.,  190.,   590.,
      1118.,  1774.,  8348.,  10428., 12764., 15356., 2908.,  4476.,  6300.,
      8380.,  16506., 20266., 24410., 28938., 5276.,  7356.,  9692.,  12284.,
      10716., 13308., 16156., 19260., 6974.,  8398.,  9950.,  11630., 10206.,
      11886., 13694., 15630., 0.,     0.,     0.,     0.,     190.,   590.,
      1118.,  1774.,  1374.,  2030.,  2814.,  3726.,  2908.,  4476.,  6300.,
      8380.,  6300.,  8380.,  10716., 13308., 5466.,  7946.,  10810., 14058.,
      10716., 13308., 16156., 19260., 7324.,  9404.,  11740., 14332., 10206.,
      11886., 13694., 15630., 510.,   1422.,  2462.,  3630.,  0.,     0.,
      0.,     0.,     30.,    174.,   446.,   846.,   190.,   590.,   1118.,
      1774.,  540.,   1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,
      2938.,  4650.,  6746.,  9226.,  6300.,  8380.,  10716., 13308., 4956.,
      6524.,  8348.,  10428., 6974.,  8398.,  9950.,  11630., 350.,   1006.,
      1790.,  2702.,  0.,     0.,     0.,     0.,     190.,   590.,   1118.,
      1774.,  350.,   1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,
      2588.,  3644.,  4956.,  6524.,  6490.,  8970.,  11834., 15082., 4956.,
      6524.,  8348.,  10428., 8348.,  10428., 12764., 15356., 350.,   1006.,
      1790.,  2702.,  2558.,  3470.,  4510.,  5678.,  0.,     0.,     0.,
      0.,     860.,   2428.,  4252.,  6332.,  4252.,  6332.,  8668.,  11260.,
      9592.,  12216., 15352., 19000., 14328., 17976., 22136., 26808., 6356.,
      10548., 15508., 21236., 10232., 13880., 18040., 22712., 5496.,  8120.,
      11256., 14904., 6300.,  8380.,  10716., 13308., 4956.,  6524.,  8348.,
      10428., 0.,     0.,     0.,     0.,     4252.,  6332.,  8668.,  11260.,
      7004.,  8572.,  10396., 12476., 14328., 17976., 22136., 26808., 1400.,
      4024.,  7160.,  10808., 14484., 20212., 26708., 33972., 5496.,  8120.,
      11256., 14904., 10232., 13880., 18040., 22712., 4956.,  6524.,  8348.,
      10428., 8348.,  10428., 12764., 15356., 0.,     0.,     0.,     0.,
      7004.,  8572.,  10396., 12476., 10396., 12476., 14812., 17404., 1400.,
      4024.,  7160.,  10808., 6136.,  9784.,  13944., 18616., 12500., 16692.,
      21652., 27380., 10232., 13880., 18040., 22712., 5496.,  8120.,  11256.,
      14904., 8348.,  10428., 12764., 15356., 2908.,  4476.,  6300.,  8380.,
      0.,     0.,     0.,     0.,     10206., 11886., 13694., 15630., 510.,
      1422.,  2462.,  3630.,  4252.,  6332.,  8668.,  11260., 7004.,  8572.,
      10396., 12476., 14138., 17386., 21018., 25034., 540.,   1596.,  2908.,
      4476.,  1884.,  3452.,  5276.,  7356.,  2558.,  3470.,  4510.,  5678.,
      3742.,  4910.,  6206.,  7630.,  0.,     0.,     0.,     0.,     510.,
      1422.,  2462.,  3630.,  3742.,  4910.,  6206.,  7630.,  7004.,  8572.,
      10396., 12476., 10396., 12476., 14812., 17404., 1050.,  3018.,  5370.,
      8106.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,
      3742.,  4910.,  6206.,  7630.,  190.,   590.,   1118.,  1774.,  0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20.,   23.,   44.,   39.,   68.,   55.,   62.,   56.,   70.,   124.,
      102.,  172.,  134.,  156.,  126.,  140.,  244.,  192.,  322.,  244.,
      266.,  233.,  266.,  450.,  344.,  567.,  422.,  467.,  318.,  348.,
      556.,  400.,  634.,  452.,  490.,  521.,  578.,  918.,  656.,  1035.,
      734.,  803.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  740.,
      786.,  1228., 858.,  1336., 930.,  984.,  244.,  279.,  428.,  295.,
      452.,  311.,  350.,  504.,  582.,  892.,  614.,  940.,  646.,  732.,
      894.,  972.,  1492., 1024., 1570., 1076., 1162., 1385., 1514., 2322.,
      1592., 2439., 1670., 1811., 1086., 1180., 1804., 1232., 1882., 1284.,
      1386., 1673., 1826., 2790., 1904., 2907., 1982., 2147., 1278., 1388.,
      2116., 1440., 2194., 1492., 1610., 1828., 1938., 2956., 2010., 3064.,
      2082., 2200., 468.,  535.,  812.,  551.,  836.,  567.,  638.,  952.,
      1094., 1660., 1126., 1708., 1158., 1308., 1662., 1804., 2740., 1856.,
      2818., 1908., 2058., 2537., 2762., 4194., 2840., 4311., 2918., 3155.,
      1854., 2012., 3052., 2064., 3130., 2116., 2282., 2825., 3074., 4662.,
      3152., 4779., 3230., 3491., 2046., 2220., 3364., 2272., 3442., 2324.,
      2506., 2916., 3090., 4684., 3162., 4792., 3234., 3416.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  6.,   7.,   20.,  23.,  26.,
      18.,  20.,  14.,  18.,  48.,  58.,  68.,  44.,  50.,  34.,  38.,  98.,
      108., 118., 74.,  80.,  54.,  58.,  148., 158., 168., 104., 110., 48.,
      51.,  118., 125., 132., 76.,  80.,  63.,  66.,  153., 160., 167., 96.,
      100., 0.,   0.,   0.,   0.,   0.,   0.,   0.,   5.,   10.,  21.,  32.,
      43.,  24.,  30.,  30.,  35.,  76.,  87.,  98.,  54.,  60.,  62.,  74.,
      160., 186., 212., 116., 130., 122., 134., 290., 316., 342., 186., 200.,
      182., 194., 420., 446., 472., 256., 270., 112., 119., 254., 269., 284.,
      152., 160., 147., 154., 329., 344., 359., 192., 200., 0.,   0.,   0.,
      0.,   0.,   0.,   0.,   9.,   18.,  37.,  56.,  75.,  40.,  50.,  54.,
      63.,  132., 151., 170., 90.,  100., 110., 130., 272., 314., 356., 188.,
      210., 210., 230., 482., 524., 566., 298., 320., 310., 330., 692., 734.,
      776., 408., 430., 176., 187., 390., 413., 436., 228., 240., 231., 242.,
      505., 528., 551., 288., 300., 0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      128.,   148.,   295.,   272.,   481.,   396.,   448.,   368.,   472.,
      854.,   720.,   1226.,  968.,   1136.,  888.,   992.,   1754.,  1400.,
      2366.,  1808.,  1976.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,
      3484.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  3916.,
      4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  3896.,  4256.,  6650.,
      4664.,  7262.,  5072.,  5496.,  5696.,  6056.,  9470.,  6624.,  10322.,
      7192.,  7616.,  1856.,  2132.,  3271.,  2256.,  3457.,  2380.,  2688.,
      3824.,  4440.,  6806.,  4688.,  7178.,  4936.,  5616.,  6904.,  7520.,
      11546., 7928.,  12158., 8336.,  9016.,  10684., 11704., 17955., 12316.,
      18873., 12928., 14044., 8408.,  9152.,  13994., 9560.,  14606., 9968.,
      10776., 12940., 14152., 21627., 14764., 22545., 15376., 16684., 9912.,
      10784., 16442., 11192., 17054., 11600., 12536., 14272., 15144., 23102.,
      15712., 23954., 16280., 17216., 3584.,  4116.,  6247.,  4240.,  6433.,
      4364.,  4928.,  7280.,  8408.,  12758., 8656.,  13130., 8904.,  10096.,
      12920., 14048., 21338., 14456., 21950., 14864., 16056., 19708., 21496.,
      32643., 22108., 33561., 22720., 24604., 14424., 15680., 23786., 16088.,
      24398., 16496., 17816., 21964., 23944., 36315., 24556., 37233., 25168.,
      27244., 15928., 17312., 26234., 17720., 26846., 18128., 19576., 22848.,
      24232., 36734., 24800., 37586., 25368., 26816.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   35.,   41.,   128.,
      148.,  168.,  123.,  137.,  82.,   110.,  312.,  384.,  456.,  306.,
      350.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,  362.,  390.,
      1032., 1104., 1176., 746.,  790.,  347.,  369.,  864.,  916.,  968.,
      563.,  593.,  457.,  479.,  1124., 1176., 1228., 713.,  743.,  0.,
      0.,    0.,    0.,    0.,    0.,    0.,    29.,   67.,   140.,  224.,
      308.,  173.,  219.,  219.,  257.,  560.,  644.,  728.,  403.,  449.,
      450.,  542.,  1176., 1376., 1576., 866.,  974.,  910.,  1002., 2176.,
      2376., 2576., 1406., 1514., 1370., 1462., 3176., 3376., 3576., 1946.,
      2054., 851.,  905.,  1936., 2052., 2168., 1163., 1225., 1121., 1175.,
      2516., 2632., 2748., 1473., 1535., 0.,    0.,    0.,    0.,    0.,
      0.,    0.,    53.,   123.,  252.,  400.,  548.,  293.,  371.,  403.,
      473.,  992.,  1140., 1288., 683.,  761.,  818.,  974.,  2040., 2368.,
      2696., 1426., 1598., 1598., 1754., 3680., 4008., 4336., 2286., 2458.,
      2378., 2534., 5320., 5648., 5976., 3146., 3318., 1355., 1441., 3008.,
      3188., 3368., 1763., 1857., 1785., 1871., 3908., 4088., 4268., 2233.,
      2327., 0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      900.,   1044.,  2138.,  2020.,  3602.,  2996.,  3396.,  2632.,  3432.,
      6292.,  5384.,  9220.,  7336.,  8648.,  5992.,  5128.,  10948., 6312.,
      13748., 7496.,  8808.,  10172., 12140., 19830., 14940., 24030., 17740.,
      20476., 13800., 9864.,  22148., 11048., 24948., 12232., 14568., 19836.,
      23340., 36630., 26140., 40830., 28940., 33212., 21608., 14600., 33348.,
      15784., 36148., 16968., 20328., 25992., 28840., 44788., 31304., 48484.,
      33768., 37128., 900.,   1044.,  2138.,  2020.,  3602.,  2996.,  3396.,
      2632.,  3432.,  6292.,  5384.,  9220.,  7336.,  8648.,  5992.,  5128.,
      10948., 6312.,  13748., 7496.,  8808.,  10172., 12140., 19830., 14940.,
      24030., 17740., 20476., 13800., 9864.,  22148., 11048., 24948., 12232.,
      14568., 19836., 23340., 36630., 26140., 40830., 28940., 33212., 21608.,
      14600., 33348., 15784., 36148., 16968., 20328., 25992., 28840., 44788.,
      31304., 48484., 33768., 37128., 900.,   1044.,  2138.,  2020.,  3602.,
      2996.,  3396.,  2632.,  3432.,  6292.,  5384.,  9220.,  7336.,  8648.,
      5992.,  5128.,  10948., 6312.,  13748., 7496.,  8808.,  10172., 12140.,
      19830., 14940., 24030., 17740., 20476., 13800., 9864.,  22148., 11048.,
      24948., 12232., 14568., 19836., 23340., 36630., 26140., 40830., 28940.,
      33212., 21608., 14600., 33348., 15784., 36148., 16968., 20328., 25992.,
      28840., 44788., 31304., 48484., 33768., 37128.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   230.,   270.,
      900.,   1044.,  1188.,  902.,   1006.,  540.,   748.,   2216.,  2760.,
      3304.,  2268.,  2604.,  1580.,  1788.,  4936.,  5480.,  6024.,  3948.,
      4284.,  2620.,  2828.,  7656.,  8200.,  8744.,  5628.,  5964.,  2630.,
      2798.,  6596.,  6996.,  7396.,  4326.,  4558.,  3470.,  3638.,  8596.,
      8996.,  9396.,  5486.,  5718.,  0.,     0.,     0.,     0.,     0.,
      0.,     0.,     190.,   486.,   1012.,  1668.,  2324.,  1310.,  1670.,
      1670.,  1966.,  4292.,  4948.,  5604.,  3110.,  3470.,  3420.,  4140.,
      9000.,  10568., 12136., 6684.,  7532.,  7020.,  7740.,  16840., 18408.,
      19976., 10924., 11772., 10620., 11340., 24680., 26248., 27816., 15164.,
      16012., 6630.,  7054.,  15108., 16020., 16932., 9094.,  9582.,  8750.,
      9174.,  19668., 20580., 21492., 11534., 12022., 0.,     0.,     0.,
      0.,     0.,     0.,     0.,     350.,   902.,   1844.,  3012.,  4180.,
      2238.,  2854.,  3110.,  3662.,  7684.,  8852.,  10020., 5318.,  5934.,
      6300.,  7532.,  15784., 18376., 20968., 11100., 12460., 12460., 13692.,
      28744., 31336., 33928., 17900., 19260., 18620., 19852., 41704., 44296.,
      46888., 24700., 26060., 10630., 11310., 23620., 25044., 26468., 13862.,
      14606., 14030., 14710., 30740., 32164., 33588., 17582., 18326., 0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48.,    80.,    56.,    92.,    119.,   176.,   116.,   156.,   209.,
      272.,   176.,   220.,   200.,   248.,   144.,   224.,   192.,   280.,
      358.,   496.,   312.,   408.,   538.,   688.,   432.,   536.,   512.,
      624.,   384.,   504.,   432.,   560.,   778.,   976.,   632.,   768.,
      1078.,  1288.,  832.,   976.,   912.,   1064.,  728.,   932.,   848.,
      1064.,  1467.,  1800.,  1148.,  1376.,  1917.,  2268.,  1448.,  1688.,
      1616.,  1868.,  1120.,  1272.,  1232.,  1392.,  1978.,  2224.,  1432.,
      1600.,  2278.,  2536.,  1632.,  1808.,  1776.,  1960.,  1832.,  2084.,
      2048.,  2312.,  3267.,  3672.,  2348.,  2624.,  3717.,  4140.,  2648.,
      2936.,  2912.,  3212.,  1856.,  2040.,  2032.,  2224.,  3178.,  3472.,
      2232.,  2432.,  3478.,  3784.,  2432.,  2640.,  2640.,  2856.,  2736.,
      2960.,  2912.,  3144.,  4558.,  4912.,  3192.,  3432.,  4978.,  5344.,
      3472.,  3720.,  3680.,  3936.,  880.,   976.,   1016.,  1116.,  1559.,
      1712.,  1076.,  1180.,  1649.,  1808.,  1136.,  1244.,  1288.,  1400.,
      1808.,  2016.,  2112.,  2328.,  3238.,  3568.,  2232.,  2456.,  3418.,
      3760.,  2352.,  2584.,  2688.,  2928.,  3328.,  3576.,  3632.,  3888.,
      5578.,  5968.,  3832.,  4096.,  5878.,  6280.,  4032.,  4304.,  4368.,
      4648.,  5144.,  5540.,  5648.,  6056.,  8667.,  9288.,  5948.,  6368.,
      9117.,  9756.,  6248.,  6680.,  6800.,  7244.,  4064.,  4344.,  4432.,
      4720.,  6778.,  7216.,  4632.,  4928.,  7078.,  7528.,  4832.,  5136.,
      5232.,  5544.,  6248.,  6692.,  6848.,  7304.,  10467., 11160., 7148.,
      7616.,  10917., 11628., 7448.,  7928.,  8096.,  8588.,  4800.,  5112.,
      5232.,  5552.,  7978.,  8464.,  5432.,  5760.,  8278.,  8776.,  5632.,
      5968.,  6096.,  6440.,  6960.,  7312.,  7392.,  7752.,  11278., 11824.,
      7672.,  8040.,  11698., 12256., 7952.,  8328.,  8416.,  8800.,  1712.,
      1872.,  1976.,  2140.,  2999.,  3248.,  2036.,  2204.,  3089.,  3344.,
      2096.,  2268.,  2376.,  2552.,  3472.,  3808.,  4032.,  4376.,  6118.,
      6640.,  4152.,  4504.,  6298.,  6832.,  4272.,  4632.,  4864.,  5232.,
      6272.,  6648.,  6832.,  7216.,  10378., 10960., 7032.,  7424.,  10678.,
      11272., 7232.,  7632.,  7824.,  8232.,  9560.,  10148., 10448., 11048.,
      15867., 16776., 10748., 11360., 16317., 17244., 11048., 11672., 11984.,
      12620., 7008.,  7416.,  7632.,  8048.,  11578., 12208., 7832.,  8256.,
      11878., 12520., 8032.,  8464.,  8688.,  9128.,  10664., 11300., 11648.,
      12296., 17667., 18648., 11948., 12608., 18117., 19116., 12248., 12920.,
      13280., 13964., 7744.,  8184.,  8432.,  8880.,  12778., 13456., 8632.,
      9088.,  13078., 13768., 8832.,  9296.,  9552.,  10024., 11184., 11664.,
      11872., 12360., 17998., 18736., 12152., 12648., 18418., 19168., 12432.,
      12936., 13152., 13664.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,   32.,   24.,   44.,
      21.,   32.,   27.,   40.,   11.,   24.,   13.,   28.,   48.,   80.,
      56.,   92.,   64.,   104.,  51.,   72.,   57.,   80.,   26.,   56.,
      38.,   72.,   120.,  192.,  152.,  232.,  184.,  272.,  130.,  176.,
      150.,  200.,  86.,   136.,  98.,   152.,  280.,  392.,  312.,  432.,
      344.,  472.,  230.,  296.,  250.,  320.,  146.,  216.,  158.,  232.,
      440.,  592.,  472.,  632.,  504.,  672.,  330.,  416.,  350.,  440.,
      155.,  192.,  165.,  204.,  392.,  472.,  416.,  500.,  440.,  528.,
      259.,  304.,  273.,  320.,  205.,  252.,  215.,  264.,  512.,  612.,
      536.,  640.,  560.,  668.,  329.,  384.,  343.,  400.,  0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    9.,    20.,   27.,   40.,   56.,   84.,   96.,   128.,
      136.,  172.,  77.,   96.,   99.,   120.,  99.,   120.,  117.,  140.,
      256.,  304.,  296.,  348.,  336.,  392.,  187.,  216.,  209.,  240.,
      202.,  248.,  246.,  296.,  536.,  640.,  632.,  744.,  728.,  848.,
      402.,  464.,  454.,  520.,  422.,  488.,  466.,  536.,  1016., 1160.,
      1112., 1264., 1208., 1368., 662.,  744.,  714.,  800.,  642.,  728.,
      686.,  776.,  1496., 1680., 1592., 1784., 1688., 1888., 922.,  1024.,
      974.,  1080., 403.,  448.,  429.,  476.,  920.,  1016., 976.,  1076.,
      1032., 1136., 555.,  608.,  585.,  640.,  533.,  588.,  559.,  616.,
      1200., 1316., 1256., 1376., 1312., 1436., 705.,  768.,  735.,  800.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    17.,   36.,   51.,   72.,   104.,  148.,
      176.,  224.,  248.,  300.,  133.,  160.,  171.,  200.,  187.,  216.,
      221.,  252.,  464.,  528.,  536.,  604.,  608.,  680.,  323.,  360.,
      361.,  400.,  378.,  440.,  454.,  520.,  952.,  1088., 1112., 1256.,
      1272., 1424., 674.,  752.,  758.,  840.,  758.,  840.,  834.,  920.,
      1752., 1928., 1912., 2096., 2072., 2264., 1094., 1192., 1178., 1280.,
      1138., 1240., 1214., 1320., 2552., 2768., 2712., 2936., 2872., 3104.,
      1514., 1632., 1598., 1720., 651.,  704.,  693.,  748.,  1448., 1560.,
      1536., 1652., 1624., 1744., 851.,  912.,  897.,  960.,  861.,  924.,
      903.,  968.,  1888., 2020., 1976., 2112., 2064., 2204., 1081., 1152.,
      1127., 1200., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      326.,   574.,   382.,   662.,   847.,   1291.,  854.,   1166.,  1555.,
      2047.,  1326.,  1670.,  1510.,  1886.,  1004.,  1628.,  1372.,  2060.,
      2606.,  3686.,  2316.,  3068.,  4022.,  5198.,  3260.,  4076.,  3884.,
      4764.,  2652.,  3340.,  2316.,  2812.,  4950.,  5998.,  2876.,  3436.,
      6302.,  7446.,  3436.,  4060.,  4060.,  4748.,  4538.,  5634.,  5474.,
      6666.,  8985.,  10845., 6826.,  8114.,  11013., 13017., 8178.,  9562.,
      9498.,  10978., 6428.,  7372.,  4556.,  5308.,  10358., 11790., 5116.,
      5932.,  11710., 13238., 5676.,  6556.,  6812.,  7756.,  9178.,  10658.,
      10882., 12458., 17097., 19533., 12234., 13906., 19125., 21705., 13586.,
      15354., 15674., 17538., 10204., 11404., 6796.,  7804.,  15766., 17582.,
      7356.,  8428.,  17118., 19030., 7916.,  9052.,  9564.,  10764., 12364.,
      13628., 13756., 15084., 21374., 23414., 14956., 16348., 23174., 25310.,
      16156., 17612., 17804., 19324., 326.,   574.,   382.,   662.,   847.,
      1291.,  854.,   1166.,  1555.,  2047.,  1326.,  1670.,  1510.,  1886.,
      1004.,  1628.,  1372.,  2060.,  2606.,  3686.,  2316.,  3068.,  4022.,
      5198.,  3260.,  4076.,  3884.,  4764.,  2652.,  3340.,  2316.,  2812.,
      4950.,  5998.,  2876.,  3436.,  6302.,  7446.,  3436.,  4060.,  4060.,
      4748.,  4538.,  5634.,  5474.,  6666.,  8985.,  10845., 6826.,  8114.,
      11013., 13017., 8178.,  9562.,  9498.,  10978., 6428.,  7372.,  4556.,
      5308.,  10358., 11790., 5116.,  5932.,  11710., 13238., 5676.,  6556.,
      6812.,  7756.,  9178.,  10658., 10882., 12458., 17097., 19533., 12234.,
      13906., 19125., 21705., 13586., 15354., 15674., 17538., 10204., 11404.,
      6796.,  7804.,  15766., 17582., 7356.,  8428.,  17118., 19030., 7916.,
      9052.,  9564.,  10764., 12364., 13628., 13756., 15084., 21374., 23414.,
      14956., 16348., 23174., 25310., 16156., 17612., 17804., 19324., 326.,
      574.,   382.,   662.,   847.,   1291.,  854.,   1166.,  1555.,  2047.,
      1326.,  1670.,  1510.,  1886.,  1004.,  1628.,  1372.,  2060.,  2606.,
      3686.,  2316.,  3068.,  4022.,  5198.,  3260.,  4076.,  3884.,  4764.,
      2652.,  3340.,  2316.,  2812.,  4950.,  5998.,  2876.,  3436.,  6302.,
      7446.,  3436.,  4060.,  4060.,  4748.,  4538.,  5634.,  5474.,  6666.,
      8985.,  10845., 6826.,  8114.,  11013., 13017., 8178.,  9562.,  9498.,
      10978., 6428.,  7372.,  4556.,  5308.,  10358., 11790., 5116.,  5932.,
      11710., 13238., 5676.,  6556.,  6812.,  7756.,  9178.,  10658., 10882.,
      12458., 17097., 19533., 12234., 13906., 19125., 21705., 13586., 15354.,
      15674., 17538., 10204., 11404., 6796.,  7804.,  15766., 17582., 7356.,
      8428.,  17118., 19030., 7916.,  9052.,  9564.,  10764., 12364., 13628.,
      13756., 15084., 21374., 23414., 14956., 16348., 23174., 25310., 16156.,
      17612., 17804., 19324.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    17.,    53.,    46.,    134.,   102.,   222.,   158.,
      310.,   149.,   233.,   193.,   293.,   65.,    165.,   77.,    193.,
      326.,   574.,   382.,   662.,   438.,   750.,   369.,   533.,   413.,
      593.,   154.,   386.,   242.,   506.,   828.,   1388.,  1068.,  1692.,
      1308.,  1996.,  954.,   1314.,  1106.,  1498.,  594.,   986.,   682.,
      1106.,  2028.,  2908.,  2268.,  3212.,  2508.,  3516.,  1714.,  2234.,
      1866.,  2418.,  1034.,  1586.,  1122.,  1706.,  3228.,  4428.,  3468.,
      4732.,  3708.,  5036.,  2474.,  3154.,  2626.,  3338.,  1169.,  1461.,
      1245.,  1553.,  2982.,  3614.,  3166.,  3830.,  3350.,  4046.,  1985.,
      2341.,  2093.,  2465.,  1549.,  1921.,  1625.,  2013.,  3902.,  4694.,
      4086.,  4910.,  4270.,  5126.,  2525.,  2961.,  2633.,  3085.,  0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     53.,    137.,   193.,   293.,   398.,
      614.,   710.,   958.,   1022.,  1302.,  581.,   729.,   753.,   917.,
      753.,   917.,   893.,   1073.,  1958.,  2334.,  2270.,  2678.,  2582.,
      3022.,  1441.,  1669.,  1613.,  1857.,  1530.,  1890.,  1874.,  2266.,
      4092.,  4908.,  4844.,  5724.,  5596.,  6540.,  3098.,  3586.,  3506.,
      4026.,  3250.,  3770.,  3594.,  4146.,  7852.,  8988.,  8604.,  9804.,
      9356.,  10620., 5138.,  5786.,  5546.,  6226.,  4970.,  5650.,  5314.,
      6026.,  11612., 13068., 12364., 13884., 13116., 14700., 7178.,  7986.,
      7586.,  8426.,  3137.,  3493.,  3341.,  3713.,  7174.,  7934.,  7614.,
      8406.,  8054.,  8878.,  4337.,  4757.,  4573.,  5009.,  4157.,  4593.,
      4361.,  4813.,  9374.,  10294., 9814.,  10766., 10254., 11238., 5517.,
      6017.,  5753.,  6269.,  0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     101.,
      249.,   369.,   533.,   750.,   1094.,  1318.,  1694.,  1886.,  2294.,
      1013.,  1225.,  1313.,  1541.,  1441.,  1669.,  1709.,  1953.,  3590.,
      4094.,  4158.,  4694.,  4726.,  5294.,  2513.,  2805.,  2813.,  3121.,
      2906.,  3394.,  3506.,  4026.,  7356.,  8428.,  8620.,  9756.,  9884.,
      11084., 5242.,  5858.,  5906.,  6554.,  5906.,  6554.,  6506.,  7186.,
      13676., 15068., 14940., 16396., 16204., 17724., 8562.,  9338.,  9226.,
      10034., 8906.,  9714.,  9506.,  10346., 19996., 21708., 21260., 23036.,
      22524., 24364., 11882., 12818., 12546., 13514., 5105.,  5525.,  5437.,
      5873.,  11366., 12254., 12062., 12982., 12758., 13710., 6689.,  7173.,
      7053.,  7553.,  6765.,  7265.,  7097.,  7613.,  14846., 15894., 15542.,
      16622., 16238., 17350., 8509.,  9073.,  8873.,  9453.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2380.,  4332.,  2156.,  3340.,  5722.,  8202.,  3852.,  5292.,  9290.,
      12154., 5548.,  7244.,  6988.,  8940.,  4120.,  7000.,  7000.,  10392.,
      11764., 17236., 10392., 14296., 16852., 23092., 13784., 18200., 18712.,
      23640., 17880., 22296., 9240.,  12120., 25044., 31284., 11608., 15000.,
      31668., 38676., 13976., 17880., 18904., 23320., 10180., 14756., 13476.,
      18820., 22622., 30190., 20100., 26212., 30510., 39230., 26724., 33604.,
      28356., 34980., 13784., 18200., 5144.,  8024.,  22996., 29236., 7512.,
      10904., 29620., 36628., 9880.,  13784., 14808., 19224., 16964., 22564.,
      22308., 28676., 27678., 36782., 28932., 36068., 35566., 45822., 35556.,
      43460., 31044., 38692., 17880., 22296., 9240.,  12120., 25044., 31284.,
      11608., 15000., 31668., 38676., 13976., 17880., 18904., 23320., 9880.,
      13784., 12760., 17176., 21300., 27284., 18200., 23128., 27412., 34164.,
      23640., 29080., 23832., 28760., 2380.,  4332.,  2156.,  3340.,  5722.,
      8202.,  3852.,  5292.,  9290.,  12154., 5548.,  7244.,  6988.,  8940.,
      4120.,  7000.,  7000.,  10392., 11764., 17236., 10392., 14296., 16852.,
      23092., 13784., 18200., 18712., 23640., 17880., 22296., 9240.,  12120.,
      25044., 31284., 11608., 15000., 31668., 38676., 13976., 17880., 18904.,
      23320., 10180., 14756., 13476., 18820., 22622., 30190., 20100., 26212.,
      30510., 39230., 26724., 33604., 28356., 34980., 13784., 18200., 5144.,
      8024.,  22996., 29236., 7512.,  10904., 29620., 36628., 9880.,  13784.,
      14808., 19224., 16964., 22564., 22308., 28676., 27678., 36782., 28932.,
      36068., 35566., 45822., 35556., 43460., 31044., 38692., 17880., 22296.,
      9240.,  12120., 25044., 31284., 11608., 15000., 31668., 38676., 13976.,
      17880., 18904., 23320., 9880.,  13784., 12760., 17176., 21300., 27284.,
      18200., 23128., 27412., 34164., 23640., 29080., 23832., 28760., 2380.,
      4332.,  2156.,  3340.,  5722.,  8202.,  3852.,  5292.,  9290.,  12154.,
      5548.,  7244.,  6988.,  8940.,  4120.,  7000.,  7000.,  10392., 11764.,
      17236., 10392., 14296., 16852., 23092., 13784., 18200., 18712., 23640.,
      17880., 22296., 9240.,  12120., 25044., 31284., 11608., 15000., 31668.,
      38676., 13976., 17880., 18904., 23320., 10180., 14756., 13476., 18820.,
      22622., 30190., 20100., 26212., 30510., 39230., 26724., 33604., 28356.,
      34980., 13784., 18200., 5144.,  8024.,  22996., 29236., 7512.,  10904.,
      29620., 36628., 9880.,  13784., 14808., 19224., 16964., 22564., 22308.,
      28676., 27678., 36782., 28932., 36068., 35566., 45822., 35556., 43460.,
      31044., 38692., 17880., 22296., 9240.,  12120., 25044., 31284., 11608.,
      15000., 31668., 38676., 13976., 17880., 18904., 23320., 9880.,  13784.,
      12760., 17176., 21300., 27284., 18200., 23128., 27412., 34164., 23640.,
      29080., 23832., 28760.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1132.,
      2316.,  1118.,  1774.,  1454.,  2238.,  430.,   1214.,  510.,   1422.,
      2380.,  4332.,  2156.,  3340.,  2572.,  4012.,  110.,   382.,   446.,
      846.,   380.,   1180.,  1052.,  2108.,  2776.,  5144.,  4632.,  7512.,
      6488.,  9880.,  4604.,  6428.,  5788.,  7868.,  3740.,  5820.,  3772.,
      5084.,  11416., 15320., 5848.,  8216.,  7704.,  10584., 1052.,  2108.,
      2236.,  3548.,  1724.,  3036.,  2396.,  3964.,  6488.,  9880.,  8344.,
      12248., 9560.,  12952., 6972.,  9308.,  5468.,  7036.,  4334.,  5630.,
      190.,   590.,   6988.,  8940.,  1644.,  2828.,  3084.,  4524.,  1966.,
      2750.,  2814.,  3726.,  2558.,  3470.,  3150.,  4190.,  7404.,  9612.,
      8844.,  11308., 5548.,  7244.,  6206.,  7630.,  270.,   798.,   0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     350.,   1006.,  1454.,  2238.,  2988.,
      4684.,  5452.,  7404.,  7916.,  10124., 4510.,  5678.,  5870.,  7166.,
      5870.,  7166.,  6974.,  8398.,  15308., 18284., 8940.,  11148., 11404.,
      13868., 430.,   1214.,  1790.,  2702.,  3068.,  4892.,  5788.,  7868.,
      12248., 16664., 18200., 23128., 24152., 29592., 13436., 16284., 16668.,
      19772., 16668., 19772., 10556., 12892., 33176., 39128., 15320., 19736.,
      21272., 26200., 3740.,  5820.,  6972.,  9308.,  8508.,  10844., 11228.,
      13820., 24152., 29592., 30104., 36056., 27224., 32664., 19900., 23260.,
      12252., 14844., 11822., 13630., 510.,   1422.,  15820., 18796., 4332.,
      6540.,  7820.,  10284., 4334.,  5630.,  6206.,  7630.,  6974.,  8398.,
      8590.,  10142., 18284., 21516., 21772., 25260., 12332., 15052., 13694.,
      15630., 590.,   1630.,  0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     30.,
      174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1132.,  2316.,
      1118.,  1774.,  1454.,  2238.,  430.,   1214.,  510.,   1422.,  2380.,
      4332.,  2156.,  3340.,  2572.,  4012.,  110.,   382.,   446.,   846.,
      380.,   1180.,  1052.,  2108.,  2776.,  5144.,  4632.,  7512.,  6488.,
      9880.,  4604.,  6428.,  5788.,  7868.,  3740.,  5820.,  3772.,  5084.,
      11416., 15320., 5848.,  8216.,  7704.,  10584., 1052.,  2108.,  2236.,
      3548.,  1724.,  3036.,  2396.,  3964.,  6488.,  9880.,  8344.,  12248.,
      9560.,  12952., 6972.,  9308.,  5468.,  7036.,  4334.,  5630.,  190.,
      590.,   6988.,  8940.,  1644.,  2828.,  3084.,  4524.,  1966.,  2750.,
      2814.,  3726.,  2558.,  3470.,  3150.,  4190.,  7404.,  9612.,  8844.,
      11308., 5548.,  7244.,  6206.,  7630.,  270.,   798.,   0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      134.,   192.,   254.,   320.,   158.,   224.,   294.,   368.,   371.,
      476.,   587.,   704.,   390.,   464.,   542.,   624.,   719.,   836.,
      959.,   1088.,  622.,   704.,   790.,   880.,   710.,   800.,   894.,
      992.,   428.,   576.,   732.,   896.,   604.,   768.,   940.,   1120.,
      1174.,  1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,
      2152.,  2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,
      2268.,  2496.,  1308.,  1536.,  1772.,  2016.,  1484.,  1728.,  1980.,
      2240.,  2734.,  3112.,  3502.,  3904.,  2268.,  2528.,  2796.,  3072.,
      3910.,  4312.,  4726.,  5152.,  3052.,  3328.,  3612.,  3904.,  3356.,
      3648.,  3948.,  4256.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,
      3818.,  4256.,  5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,
      5504.,  6993.,  7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,
      5978.,  6464.,  6962.,  7472.,  4188.,  4480.,  4780.,  5088.,  4620.,
      4928.,  5244.,  5568.,  7438.,  7912.,  8398.,  8896.,  5404.,  5728.,
      6060.,  6400.,  8614.,  9112.,  9622.,  10144., 6188.,  6528.,  6876.,
      7232.,  6748.,  7104.,  7468.,  7840.,  6842.,  7328.,  7826.,  8336.,
      7682.,  8192.,  8714.,  9248.,  12285., 13068., 13869., 14688., 8858.,
      9392.,  9938.,  10496., 14049., 14868., 15705., 16560., 10034., 10592.,
      11162., 11744., 11066., 11648., 12242., 12848., 7068.,  7424.,  7788.,
      8160.,  7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294., 13888.,
      8540.,  8928.,  9324.,  9728.,  13318., 13912., 14518., 15136., 9324.,
      9728.,  10140., 10560., 10140., 10560., 10988., 11424., 10508., 10944.,
      11388., 11840., 11196., 11648., 12108., 12576., 17542., 18232., 18934.,
      19648., 12300., 12768., 13244., 13728., 19198., 19912., 20638., 21376.,
      13404., 13888., 14380., 14880., 14220., 14720., 15228., 15744., 3334.,
      3520.,  3710.,  3904.,  3870.,  4064.,  4262.,  4464.,  5939.,  6236.,
      6539.,  6848.,  4102.,  4304.,  4510.,  4720.,  6287.,  6596.,  6911.,
      7232.,  4334.,  4544.,  4758.,  4976.,  4934.,  5152.,  5374.,  5600.,
      6828.,  7232.,  7644.,  8064.,  8028.,  8448.,  8876.,  9312.,  12310.,
      12952., 13606., 14272., 8492.,  8928.,  9372.,  9824.,  13006., 13672.,
      14350., 15040., 8956.,  9408.,  9868.,  10336., 10284., 10752., 11228.,
      11712., 12828., 13312., 13804., 14304., 14028., 14528., 15036., 15552.,
      21550., 22312., 23086., 23872., 14812., 15328., 15852., 16384., 22726.,
      23512., 24310., 25120., 15596., 16128., 16668., 17216., 16924., 17472.,
      18028., 18592., 19802., 20576., 21362., 22160., 21794., 22592., 23402.,
      24224., 33453., 34668., 35901., 37152., 22970., 23792., 24626., 25472.,
      35217., 36468., 37737., 39024., 24146., 24992., 25850., 26720., 26330.,
      27200., 28082., 28976., 15708., 16256., 16812., 17376., 17164., 17728.,
      18300., 18880., 26254., 27112., 27982., 28864., 17948., 18528., 19116.,
      19712., 27430., 28312., 29206., 30112., 18732., 19328., 19932., 20544.,
      20316., 20928., 21548., 22176., 24122., 24992., 25874., 26768., 26498.,
      27392., 28298., 29216., 40509., 41868., 43245., 44640., 27674., 28592.,
      29522., 30464., 42273., 43668., 45081., 46512., 28850., 29792., 30746.,
      31712., 31418., 32384., 33362., 34352., 18588., 19200., 19820., 20448.,
      20300., 20928., 21564., 22208., 30958., 31912., 32878., 33856., 21084.,
      21728., 22380., 23040., 32134., 33112., 34102., 35104., 21868., 22528.,
      23196., 23872., 23708., 24384., 25068., 25760., 27148., 27840., 28540.,
      29248., 28860., 29568., 30284., 31008., 44038., 45112., 46198., 47296.,
      29964., 30688., 31420., 32160., 45694., 46792., 47902., 49024., 31068.,
      31808., 32556., 33312., 32908., 33664., 34428., 35200., 134.,   192.,
      254.,   320.,   158.,   224.,   294.,   368.,   371.,   476.,   587.,
      704.,   390.,   464.,   542.,   624.,   719.,   836.,   959.,   1088.,
      622.,   704.,   790.,   880.,   710.,   800.,   894.,   992.,   428.,
      576.,   732.,   896.,   604.,   768.,   940.,   1120.,  1174.,  1432.,
      1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,  2152.,  2446.,
      2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,  2268.,  2496.,
      1308.,  1536.,  1772.,  2016.,  1484.,  1728.,  1980.,  2240.,  2734.,
      3112.,  3502.,  3904.,  2268.,  2528.,  2796.,  3072.,  3910.,  4312.,
      4726.,  5152.,  3052.,  3328.,  3612.,  3904.,  3356.,  3648.,  3948.,
      4256.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,  3818.,  4256.,
      5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,  5504.,  6993.,
      7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,  5978.,  6464.,
      6962.,  7472.,  4188.,  4480.,  4780.,  5088.,  4620.,  4928.,  5244.,
      5568.,  7438.,  7912.,  8398.,  8896.,  5404.,  5728.,  6060.,  6400.,
      8614.,  9112.,  9622.,  10144., 6188.,  6528.,  6876.,  7232.,  6748.,
      7104.,  7468.,  7840.,  6842.,  7328.,  7826.,  8336.,  7682.,  8192.,
      8714.,  9248.,  12285., 13068., 13869., 14688., 8858.,  9392.,  9938.,
      10496., 14049., 14868., 15705., 16560., 10034., 10592., 11162., 11744.,
      11066., 11648., 12242., 12848., 7068.,  7424.,  7788.,  8160.,  7756.,
      8128.,  8508.,  8896.,  12142., 12712., 13294., 13888., 8540.,  8928.,
      9324.,  9728.,  13318., 13912., 14518., 15136., 9324.,  9728.,  10140.,
      10560., 10140., 10560., 10988., 11424., 10508., 10944., 11388., 11840.,
      11196., 11648., 12108., 12576., 17542., 18232., 18934., 19648., 12300.,
      12768., 13244., 13728., 19198., 19912., 20638., 21376., 13404., 13888.,
      14380., 14880., 14220., 14720., 15228., 15744.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    5.,     12.,    21.,    32.,    14.,
      32.,    54.,    80.,    38.,    64.,    94.,    128.,   62.,    96.,
      134.,   176.,   65.,    84.,    105.,   128.,   85.,    108.,   133.,
      160.,   21.,    44.,    69.,    96.,    25.,    52.,    81.,    112.,
      134.,   192.,   254.,   320.,   158.,   224.,   294.,   368.,   182.,
      256.,   334.,   416.,   165.,   204.,   245.,   288.,   185.,   228.,
      273.,   320.,   50.,    104.,   162.,   224.,   90.,    152.,   218.,
      288.,   348.,   480.,   620.,   768.,   460.,   608.,   764.,   928.,
      572.,   736.,   908.,   1088.,  434.,   520.,   610.,   704.,   506.,
      600.,   698.,   800.,   250.,   344.,   442.,   544.,   290.,   392.,
      498.,   608.,   908.,   1120.,  1340.,  1568.,  1020.,  1248.,  1484.,
      1728.,  1132.,  1376.,  1628.,  1888.,  794.,   920.,   1050.,  1184.,
      866.,   1000.,  1138.,  1280.,  450.,   584.,   722.,   864.,   490.,
      632.,   778.,   928.,   1468.,  1760.,  2060.,  2368.,  1580.,  1888.,
      2204.,  2528.,  1692.,  2016.,  2348.,  2688.,  1154.,  1320.,  1490.,
      1664.,  1226.,  1400.,  1578.,  1760.,  549.,   620.,   693.,   768.,
      585.,   660.,   737.,   816.,   1414.,  1568.,  1726.,  1888.,  1502.,
      1664.,  1830.,  2000.,  1590.,  1760.,  1934.,  2112.,  949.,   1036.,
      1125.,  1216.,  1001.,  1092.,  1185.,  1280.,  729.,   820.,   913.,
      1008.,  765.,   860.,   957.,   1056.,  1854.,  2048.,  2246.,  2448.,
      1942.,  2144.,  2350.,  2560.,  2030.,  2240.,  2454.,  2672.,  1209.,
      1316.,  1425.,  1536.,  1261.,  1372.,  1485.,  1600.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     17.,
      36.,    57.,    80.,    85.,    108.,   133.,   160.,   174.,   224.,
      278.,   336.,   326.,   384.,   446.,   512.,   478.,   544.,   614.,
      688.,   273.,   308.,   345.,   384.,   357.,   396.,   437.,   480.,
      357.,   396.,   437.,   480.,   425.,   468.,   513.,   560.,   934.,
      1024.,  1118.,  1216.,  1086.,  1184.,  1286.,  1392.,  1238.,  1344.,
      1454.,  1568.,  693.,   748.,   805.,   864.,   777.,   836.,   897.,
      960.,   722.,   808.,   898.,   992.,   890.,   984.,   1082.,  1184.,
      1948.,  2144.,  2348.,  2560.,  2316.,  2528.,  2748.,  2976.,  2684.,
      2912.,  3148.,  3392.,  1490.,  1608.,  1730.,  1856.,  1690.,  1816.,
      1946.,  2080.,  1562.,  1688.,  1818.,  1952.,  1730.,  1864.,  2002.,
      2144.,  3788.,  4064.,  4348.,  4640.,  4156.,  4448.,  4748.,  5056.,
      4524.,  4832.,  5148.,  5472.,  2490.,  2648.,  2810.,  2976.,  2690.,
      2856.,  3026.,  3200.,  2402.,  2568.,  2738.,  2912.,  2570.,  2744.,
      2922.,  3104.,  5628.,  5984.,  6348.,  6720.,  5996.,  6368.,  6748.,
      7136.,  6364.,  6752.,  7148.,  7552.,  3490.,  3688.,  3890.,  4096.,
      3690.,  3896.,  4106.,  4320.,  1525.,  1612.,  1701.,  1792.,  1625.,
      1716.,  1809.,  1904.,  3494.,  3680.,  3870.,  4064.,  3710.,  3904.,
      4102.,  4304.,  3926.,  4128.,  4334.,  4544.,  2117.,  2220.,  2325.,
      2432.,  2233.,  2340.,  2449.,  2560.,  2025.,  2132.,  2241.,  2352.,
      2125.,  2236.,  2349.,  2464.,  4574.,  4800.,  5030.,  5264.,  4790.,
      5024.,  5262.,  5504.,  5006.,  5248.,  5494.,  5744.,  2697.,  2820.,
      2945.,  3072.,  2813.,  2940.,  3069.,  3200.,  0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     33.,    68.,
      105.,   144.,   165.,   204.,   245.,   288.,   334.,   416.,   502.,
      592.,   614.,   704.,   798.,   896.,   894.,   992.,   1094.,  1200.,
      481.,   532.,   585.,   640.,   629.,   684.,   741.,   800.,   693.,
      748.,   805.,   864.,   825.,   884.,   945.,   1008.,  1734.,  1856.,
      1982.,  2112.,  2014.,  2144.,  2278.,  2416.,  2294.,  2432.,  2574.,
      2720.,  1221.,  1292.,  1365.,  1440.,  1369.,  1444.,  1521.,  1600.,
      1394.,  1512.,  1634.,  1760.,  1690.,  1816.,  1946.,  2080.,  3548.,
      3808.,  4076.,  4352.,  4172.,  4448.,  4732.,  5024.,  4796.,  5088.,
      5388.,  5696.,  2546.,  2696.,  2850.,  3008.,  2874.,  3032.,  3194.,
      3360.,  2874.,  3032.,  3194.,  3360.,  3170.,  3336.,  3506.,  3680.,
      6668.,  7008.,  7356.,  7712.,  7292.,  7648.,  8012.,  8384.,  7916.,
      8288.,  8668.,  9056.,  4186.,  4376.,  4570.,  4768.,  4514.,  4712.,
      4914.,  5120.,  4354.,  4552.,  4754.,  4960.,  4650.,  4856.,  5066.,
      5280.,  9788.,  10208., 10636., 11072., 10412., 10848., 11292., 11744.,
      11036., 11488., 11948., 12416., 5826.,  6056.,  6290.,  6528.,  6154.,
      6392.,  6634.,  6880.,  2501.,  2604.,  2709.,  2816.,  2665.,  2772.,
      2881.,  2992.,  5574.,  5792.,  6014.,  6240.,  5918.,  6144.,  6374.,
      6608.,  6262.,  6496.,  6734.,  6976.,  3285.,  3404.,  3525.,  3648.,
      3465.,  3588.,  3713.,  3840.,  3321.,  3444.,  3569.,  3696.,  3485.,
      3612.,  3741.,  3872.,  7294.,  7552.,  7814.,  8080.,  7638.,  7904.,
      8174.,  8448.,  7982.,  8256.,  8534.,  8816.,  4185.,  4324.,  4465.,
      4608.,  4365.,  4508.,  4653.,  4800.,  0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      962.,   1418.,  1906.,  2426.,  946.,   1210.,  1506.,  1834.,  2575.,
      3147.,  3767.,  4435.,  1762.,  2090.,  2450.,  2842.,  4311.,  4979.,
      5695.,  6459.,  2578.,  2970.,  3394.,  3850.,  3266.,  3722.,  4210.,
      4730.,  1732.,  2388.,  3108.,  3892.,  3108.,  3892.,  4740.,  5652.,
      5246.,  6518.,  7886.,  9350.,  4740.,  5652.,  6628.,  7668.,  7694.,
      9158.,  10718., 12374., 6372.,  7412.,  8516.,  9684.,  8772.,  9940.,
      11172., 12468., 8420.,  9460.,  10564., 11732., 4292.,  4948.,  5668.,
      6452.,  11790., 13254., 14814., 16470., 5412.,  6196.,  7044.,  7956.,
      15006., 16662., 18414., 20262., 6532.,  7444.,  8420.,  9460.,  8932.,
      9972.,  11076., 12244., 4566.,  5614.,  6758.,  7998.,  6118.,  7358.,
      8694.,  10126., 10437., 12185., 14077., 16113., 9334.,  10766., 12294.,
      13918., 14237., 16273., 18453., 20777., 12550., 14174., 15894., 17710.,
      13398., 14958., 16614., 18366., 6372.,  7412.,  8516.,  9684.,  2244.,
      2900.,  3620.,  4404.,  10766., 12230., 13790., 15446., 3364.,  4148.,
      4996.,  5908.,  13982., 15638., 17390., 19238., 4484.,  5396.,  6372.,
      7412.,  6884.,  7924.,  9028.,  10196., 7830.,  9134.,  10534., 12030.,
      10406., 11902., 13494., 15182., 12773., 14905., 17181., 19601., 13622.,
      15310., 17094., 18974., 16573., 18993., 21557., 24265., 16838., 18718.,
      20694., 22766., 14614., 16430., 18342., 20350., 8420.,  9460.,  10564.,
      11732., 4292.,  4948.,  5668.,  6452.,  11790., 13254., 14814., 16470.,
      5412.,  6196.,  7044.,  7956.,  15006., 16662., 18414., 20262., 6532.,
      7444.,  8420.,  9460.,  8932.,  9972.,  11076., 12244., 4484.,  5396.,
      6372.,  7412.,  5860.,  6900.,  8004.,  9172.,  9950.,  11350., 12846.,
      14438., 8516.,  9684.,  10916., 12212., 12910., 14502., 16190., 17974.,
      11172., 12468., 13828., 15252., 11332., 12500., 13732., 15028., 962.,
      1418.,  1906.,  2426.,  946.,   1210.,  1506.,  1834.,  2575.,  3147.,
      3767.,  4435.,  1762.,  2090.,  2450.,  2842.,  4311.,  4979.,  5695.,
      6459.,  2578.,  2970.,  3394.,  3850.,  3266.,  3722.,  4210.,  4730.,
      1732.,  2388.,  3108.,  3892.,  3108.,  3892.,  4740.,  5652.,  5246.,
      6518.,  7886.,  9350.,  4740.,  5652.,  6628.,  7668.,  7694.,  9158.,
      10718., 12374., 6372.,  7412.,  8516.,  9684.,  8772.,  9940.,  11172.,
      12468., 8420.,  9460.,  10564., 11732., 4292.,  4948.,  5668.,  6452.,
      11790., 13254., 14814., 16470., 5412.,  6196.,  7044.,  7956.,  15006.,
      16662., 18414., 20262., 6532.,  7444.,  8420.,  9460.,  8932.,  9972.,
      11076., 12244., 4566.,  5614.,  6758.,  7998.,  6118.,  7358.,  8694.,
      10126., 10437., 12185., 14077., 16113., 9334.,  10766., 12294., 13918.,
      14237., 16273., 18453., 20777., 12550., 14174., 15894., 17710., 13398.,
      14958., 16614., 18366., 6372.,  7412.,  8516.,  9684.,  2244.,  2900.,
      3620.,  4404.,  10766., 12230., 13790., 15446., 3364.,  4148.,  4996.,
      5908.,  13982., 15638., 17390., 19238., 4484.,  5396.,  6372.,  7412.,
      6884.,  7924.,  9028.,  10196., 7830.,  9134.,  10534., 12030., 10406.,
      11902., 13494., 15182., 12773., 14905., 17181., 19601., 13622., 15310.,
      17094., 18974., 16573., 18993., 21557., 24265., 16838., 18718., 20694.,
      22766., 14614., 16430., 18342., 20350., 8420.,  9460.,  10564., 11732.,
      4292.,  4948.,  5668.,  6452.,  11790., 13254., 14814., 16470., 5412.,
      6196.,  7044.,  7956.,  15006., 16662., 18414., 20262., 6532.,  7444.,
      8420.,  9460.,  8932.,  9972.,  11076., 12244., 4484.,  5396.,  6372.,
      7412.,  5860.,  6900.,  8004.,  9172.,  9950.,  11350., 12846., 14438.,
      8516.,  9684.,  10916., 12212., 12910., 14502., 16190., 17974., 11172.,
      12468., 13828., 15252., 11332., 12500., 13732., 15028., 962.,   1418.,
      1906.,  2426.,  946.,   1210.,  1506.,  1834.,  2575.,  3147.,  3767.,
      4435.,  1762.,  2090.,  2450.,  2842.,  4311.,  4979.,  5695.,  6459.,
      2578.,  2970.,  3394.,  3850.,  3266.,  3722.,  4210.,  4730.,  1732.,
      2388.,  3108.,  3892.,  3108.,  3892.,  4740.,  5652.,  5246.,  6518.,
      7886.,  9350.,  4740.,  5652.,  6628.,  7668.,  7694.,  9158.,  10718.,
      12374., 6372.,  7412.,  8516.,  9684.,  8772.,  9940.,  11172., 12468.,
      8420.,  9460.,  10564., 11732., 4292.,  4948.,  5668.,  6452.,  11790.,
      13254., 14814., 16470., 5412.,  6196.,  7044.,  7956.,  15006., 16662.,
      18414., 20262., 6532.,  7444.,  8420.,  9460.,  8932.,  9972.,  11076.,
      12244., 4566.,  5614.,  6758.,  7998.,  6118.,  7358.,  8694.,  10126.,
      10437., 12185., 14077., 16113., 9334.,  10766., 12294., 13918., 14237.,
      16273., 18453., 20777., 12550., 14174., 15894., 17710., 13398., 14958.,
      16614., 18366., 6372.,  7412.,  8516.,  9684.,  2244.,  2900.,  3620.,
      4404.,  10766., 12230., 13790., 15446., 3364.,  4148.,  4996.,  5908.,
      13982., 15638., 17390., 19238., 4484.,  5396.,  6372.,  7412.,  6884.,
      7924.,  9028.,  10196., 7830.,  9134.,  10534., 12030., 10406., 11902.,
      13494., 15182., 12773., 14905., 17181., 19601., 13622., 15310., 17094.,
      18974., 16573., 18993., 21557., 24265., 16838., 18718., 20694., 22766.,
      14614., 16430., 18342., 20350., 8420.,  9460.,  10564., 11732., 4292.,
      4948.,  5668.,  6452.,  11790., 13254., 14814., 16470., 5412.,  6196.,
      7044.,  7956.,  15006., 16662., 18414., 20262., 6532.,  7444.,  8420.,
      9460.,  8932.,  9972.,  11076., 12244., 4484.,  5396.,  6372.,  7412.,
      5860.,  6900.,  8004.,  9172.,  9950.,  11350., 12846., 14438., 8516.,
      9684.,  10916., 12212., 12910., 14502., 16190., 17974., 11172., 12468.,
      13828., 15252., 11332., 12500., 13732., 15028.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  125.,   305.,   501.,   713.,   149.,   361.,   589.,   833.,
      962.,   1418.,  1906.,  2426.,  1138.,  1658.,  2210.,  2794.,  1314.,
      1898.,  2514.,  3162.,  1245.,  1553.,  1877.,  2217.,  1397.,  1737.,
      2093.,  2465.,  298.,   722.,   1178.,  1666.,  602.,   1090.,  1610.,
      2162.,  2532.,  3572.,  4676.,  5844.,  3396.,  4564.,  5796.,  7092.,
      4260.,  5556.,  6916.,  8340.,  3306.,  3986.,  4698.,  5442.,  3866.,
      4610.,  5386.,  6194.,  1818.,  2562.,  3338.,  4146.,  1738.,  2034.,
      2362.,  2722.,  6468.,  7636.,  8868.,  10164., 4900.,  5684.,  6532.,
      7444.,  5764.,  6676.,  7652.,  8692.,  3674.,  4162.,  4682.,  5234.,
      4234.,  4786.,  5370.,  5986.,  2954.,  3506.,  4090.,  4706.,  3258.,
      3874.,  4522.,  5202.,  8356.,  9652.,  11012., 12436., 9220.,  10644.,
      12132., 13684., 10084., 11636., 13252., 14932., 6474.,  7282.,  8122.,
      8994.,  7034.,  7906.,  8810.,  9746.,  4253.,  4817.,  5397.,  5993.,
      53.,    137.,   237.,   353.,   6530.,  7242.,  7986.,  8762.,  690.,
      954.,   1250.,  1578.,  1378.,  1706.,  2066.,  2458.,  893.,   1073.,
      1269.,  1481.,  1301.,  1513.,  1741.,  1985.,  1173.,  1385.,  1613.,
      1857.,  1453.,  1697.,  1957.,  2233.,  3442.,  3962.,  4514.,  5098.,
      4130.,  4714.,  5330.,  5978.,  4818.,  5466.,  6146.,  6858.,  2933.,
      3273.,  3629.,  4001.,  3341.,  3713.,  4101.,  4505.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     101.,
      249.,   413.,   593.,   637.,   817.,   1013.,  1225.,  1298.,  1690.,
      2114.,  2570.,  2498.,  2954.,  3442.,  3962.,  3698.,  4218.,  4770.,
      5354.,  2117.,  2393.,  2685.,  2993.,  2781.,  3089.,  3413.,  3753.,
      2781.,  3089.,  3413.,  3753.,  3317.,  3657.,  4013.,  4385.,  7298.,
      8010.,  8754.,  9530.,  8498.,  9274.,  10082., 10922., 9698.,  10538.,
      11410., 12314., 5437.,  5873.,  6325.,  6793.,  6101.,  6569.,  7053.,
      7553.,  5610.,  6290.,  7002.,  7746.,  6938.,  7682.,  8458.,  9266.,
      15204., 16756., 18372., 20052., 18116., 19796., 21540., 23348., 21028.,
      22836., 24708., 26644., 11690., 12626., 13594., 14594., 13274., 14274.,
      15306., 16370., 12250., 13250., 14282., 15346., 5002.,  5554.,  6138.,
      6754.,  21188., 22868., 24612., 26420., 13476., 14772., 16132., 17556.,
      16388., 17812., 19300., 20852., 8986.,  9730.,  10506., 11314., 10570.,
      11378., 12218., 13090., 10314., 11122., 11962., 12834., 11642., 12514.,
      13418., 14354., 25124., 26932., 28804., 30740., 28036., 29972., 31972.,
      34036., 30948., 33012., 35140., 37332., 16906., 17970., 19066., 20194.,
      18490., 19618., 20778., 21970., 12029., 12721., 13429., 14153., 149.,
      361.,   589.,   833.,   14914., 15882., 16882., 17914., 1906.,  2426.,
      2978.,  3562.,  3618.,  4202.,  4818.,  5466.,  2013.,  2321.,  2645.,
      2985.,  2933.,  3273.,  3629.,  4001.,  3317.,  3657.,  4013.,  4385.,
      4109.,  4481.,  4869.,  5273.,  8754.,  9530.,  10338., 11178., 10466.,
      11306., 12178., 13082., 12178., 13082., 14018., 14986., 6613.,  7081.,
      7565.,  8065.,  7533.,  8033.,  8549.,  9081.,  0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     197.,   473.,
      765.,   1073.,  1245.,  1553.,  1877.,  2217.,  2514.,  3162.,  3842.,
      4554.,  4738.,  5450.,  6194.,  6970.,  6962.,  7738.,  8546.,  9386.,
      3749.,  4153.,  4573.,  5009.,  4925.,  5361.,  5813.,  6281.,  5437.,
      5873.,  6325.,  6793.,  6485.,  6953.,  7437.,  7937.,  13634., 14602.,
      15602., 16634., 15858., 16890., 17954., 19050., 18082., 19178., 20306.,
      21466., 9629.,  10193., 10773., 11369., 10805., 11401., 12013., 12641.,
      10922., 11858., 12826., 13826., 13274., 14274., 15306., 16370., 27876.,
      29940., 32068., 34260., 32836., 35028., 37284., 39604., 37796., 40116.,
      42500., 44948., 20074., 21266., 22490., 23746., 22682., 23938., 25226.,
      26546., 22682., 23938., 25226., 26546., 8266.,  9074.,  9914.,  10786.,
      35908., 38100., 40356., 42676., 22052., 23860., 25732., 27668., 27012.,
      28948., 30948., 33012., 14298., 15298., 16330., 17394., 16906., 17970.,
      19066., 20194., 17674., 18738., 19834., 20962., 20026., 21154., 22314.,
      23506., 41892., 44212., 46596., 49044., 46852., 49300., 51812., 54388.,
      51812., 54388., 57028., 59732., 27338., 28658., 30010., 31394., 29946.,
      31330., 32746., 34194., 19805., 20625., 21461., 22313., 245.,   585.,
      941.,   1313.,  23298., 24522., 25778., 27066., 3122.,  3898.,  4706.,
      5546.,  5858.,  6698.,  7570.,  8474.,  3133.,  3569.,  4021.,  4489.,
      4565.,  5033.,  5517.,  6017.,  5461.,  5929.,  6413.,  6913.,  6765.,
      7265.,  7781.,  8313.,  14066., 15098., 16162., 17258., 16802., 17898.,
      19026., 20186., 19538., 20698., 21890., 23114., 10293., 10889., 11501.,
      12129., 11725., 12353., 12997., 13657., 0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  6490.,
      8970.,  11834., 15082., 4956.,  6524.,  8348.,  10428., 12090., 15338.,
      18970., 22986., 7324.,  9404.,  11740., 14332., 12764., 15356., 18204.,
      21308., 3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600., 16760.,
      8244.,  12180., 16884., 22356., 14648., 18808., 23480., 28664., 15348.,
      20820., 27060., 34068., 23480., 28664., 34360., 40568., 12600., 16760.,
      21432., 26616., 5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,
      11000., 15348., 20820., 27060., 34068., 7864.,  11000., 14648., 18808.,
      28596., 35604., 43380., 51924., 12600., 16760., 21432., 26616., 23480.,
      28664., 34360., 40568., 3668.,  6836.,  10772., 15476., 7700.,  12404.,
      17876., 24116., 11182., 16830., 23630., 31582., 20948., 27188., 34196.,
      41972., 20814., 28766., 37870., 48126., 34196., 41972., 50516., 59828.,
      19924., 26164., 33172., 40948., 5816.,  8952.,  12600., 16760., 3128.,
      5240.,  7864.,  11000., 15348., 20820., 27060., 34068., 7864.,  11000.,
      14648., 18808., 28596., 35604., 43380., 51924., 12600., 16760., 21432.,
      26616., 23480., 28664., 34360., 40568., 3668.,  6836.,  10772., 15476.,
      7700.,  12404., 17876., 24116., 11182., 16830., 23630., 31582., 20948.,
      27188., 34196., 41972., 20814., 28766., 37870., 48126., 34196., 41972.,
      50516., 59828., 19924., 26164., 33172., 40948., 5816.,  8952.,  12600.,
      16760., 3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068.,
      7864.,  11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600.,
      16760., 21432., 26616., 23480., 28664., 34360., 40568., 3128.,  5240.,
      7864.,  11000., 5816.,  8952.,  12600., 16760., 8244.,  12180., 16884.,
      22356., 14648., 18808., 23480., 28664., 15348., 20820., 27060., 34068.,
      23480., 28664., 34360., 40568., 12600., 16760., 21432., 26616., 1884.,
      3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  6490.,  8970.,
      11834., 15082., 4956.,  6524.,  8348.,  10428., 12090., 15338., 18970.,
      22986., 7324.,  9404.,  11740., 14332., 12764., 15356., 18204., 21308.,
      3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600., 16760., 8244.,
      12180., 16884., 22356., 14648., 18808., 23480., 28664., 15348., 20820.,
      27060., 34068., 23480., 28664., 34360., 40568., 12600., 16760., 21432.,
      26616., 5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000.,
      15348., 20820., 27060., 34068., 7864.,  11000., 14648., 18808., 28596.,
      35604., 43380., 51924., 12600., 16760., 21432., 26616., 23480., 28664.,
      34360., 40568., 3668.,  6836.,  10772., 15476., 7700.,  12404., 17876.,
      24116., 11182., 16830., 23630., 31582., 20948., 27188., 34196., 41972.,
      20814., 28766., 37870., 48126., 34196., 41972., 50516., 59828., 19924.,
      26164., 33172., 40948., 5816.,  8952.,  12600., 16760., 3128.,  5240.,
      7864.,  11000., 15348., 20820., 27060., 34068., 7864.,  11000., 14648.,
      18808., 28596., 35604., 43380., 51924., 12600., 16760., 21432., 26616.,
      23480., 28664., 34360., 40568., 3668.,  6836.,  10772., 15476., 7700.,
      12404., 17876., 24116., 11182., 16830., 23630., 31582., 20948., 27188.,
      34196., 41972., 20814., 28766., 37870., 48126., 34196., 41972., 50516.,
      59828., 19924., 26164., 33172., 40948., 5816.,  8952.,  12600., 16760.,
      3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068., 7864.,
      11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600., 16760.,
      21432., 26616., 23480., 28664., 34360., 40568., 3128.,  5240.,  7864.,
      11000., 5816.,  8952.,  12600., 16760., 8244.,  12180., 16884., 22356.,
      14648., 18808., 23480., 28664., 15348., 20820., 27060., 34068., 23480.,
      28664., 34360., 40568., 12600., 16760., 21432., 26616., 1884.,  3452.,
      5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  6490.,  8970.,  11834.,
      15082., 4956.,  6524.,  8348.,  10428., 12090., 15338., 18970., 22986.,
      7324.,  9404.,  11740., 14332., 12764., 15356., 18204., 21308., 3128.,
      5240.,  7864.,  11000., 5816.,  8952.,  12600., 16760., 8244.,  12180.,
      16884., 22356., 14648., 18808., 23480., 28664., 15348., 20820., 27060.,
      34068., 23480., 28664., 34360., 40568., 12600., 16760., 21432., 26616.,
      5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000., 15348.,
      20820., 27060., 34068., 7864.,  11000., 14648., 18808., 28596., 35604.,
      43380., 51924., 12600., 16760., 21432., 26616., 23480., 28664., 34360.,
      40568., 3668.,  6836.,  10772., 15476., 7700.,  12404., 17876., 24116.,
      11182., 16830., 23630., 31582., 20948., 27188., 34196., 41972., 20814.,
      28766., 37870., 48126., 34196., 41972., 50516., 59828., 19924., 26164.,
      33172., 40948., 5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,
      11000., 15348., 20820., 27060., 34068., 7864.,  11000., 14648., 18808.,
      28596., 35604., 43380., 51924., 12600., 16760., 21432., 26616., 23480.,
      28664., 34360., 40568., 3668.,  6836.,  10772., 15476., 7700.,  12404.,
      17876., 24116., 11182., 16830., 23630., 31582., 20948., 27188., 34196.,
      41972., 20814., 28766., 37870., 48126., 34196., 41972., 50516., 59828.,
      19924., 26164., 33172., 40948., 5816.,  8952.,  12600., 16760., 3128.,
      5240.,  7864.,  11000., 15348., 20820., 27060., 34068., 7864.,  11000.,
      14648., 18808., 28596., 35604., 43380., 51924., 12600., 16760., 21432.,
      26616., 23480., 28664., 34360., 40568., 3128.,  5240.,  7864.,  11000.,
      5816.,  8952.,  12600., 16760., 8244.,  12180., 16884., 22356., 14648.,
      18808., 23480., 28664., 15348., 20820., 27060., 34068., 23480., 28664.,
      34360., 40568., 12600., 16760., 21432., 26616.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,
      1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,
      4956.,  6524.,  3742.,  4910.,  6206.,  7630.,  190.,   590.,   1118.,
      1774.,  190.,   590.,   1118.,  1774.,  350.,   1006.,  1790.,  2702.,
      1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  3932.,
      5500.,  7324.,  9404.,  190.,   590.,   1118.,  1774.,  1374.,  2030.,
      2814.,  3726.,  700.,   2012.,  3580.,  5404.,  3068.,  4892.,  6972.,
      9308.,  7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664.,
      7864.,  11000., 14648., 18808., 11580., 13916., 16508., 19356., 3068.,
      4892.,  6972.,  9308.,  3068.,  4892.,  6972.,  9308.,  4796.,  6108.,
      7676.,  9500.,  14648., 18808., 23480., 28664., 7864.,  11000., 14648.,
      18808., 14648., 18808., 23480., 28664., 3068.,  4892.,  6972.,  9308.,
      7484.,  9820.,  12412., 15260., 4796.,  6108.,  7676.,  9500.,  7164.,
      8988.,  11068., 13404., 7864.,  11000., 14648., 18808., 14648., 18808.,
      23480., 28664., 7864.,  11000., 14648., 18808., 7484.,  9820.,  12412.,
      15260., 7164.,  8988.,  11068., 13404., 6974.,  8398.,  9950.,  11630.,
      350.,   1006.,  1790.,  2702.,  12764., 15356., 18204., 21308., 5276.,
      7356.,  9692.,  12284., 10716., 13308., 16156., 19260., 6974.,  8398.,
      9950.,  11630., 10206., 11886., 13694., 15630., 350.,   1006.,  1790.,
      2702.,  2558.,  3470.,  4510.,  5678.,  5276.,  7356.,  9692.,  12284.,
      10716., 13308., 16156., 19260., 7324.,  9404.,  11740., 14332., 10206.,
      11886., 13694., 15630., 510.,   1422.,  2462.,  3630.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     30.,
      174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,   1596.,
      2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,
      6524.,  3742.,  4910.,  6206.,  7630.,  190.,   590.,   1118.,  1774.,
      190.,   590.,   1118.,  1774.,  350.,   1006.,  1790.,  2702.,  1884.,
      3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  3932.,  5500.,
      7324.,  9404.,  190.,   590.,   1118.,  1774.,  1374.,  2030.,  2814.,
      3726.,  700.,   2012.,  3580.,  5404.,  3068.,  4892.,  6972.,  9308.,
      7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664., 7864.,
      11000., 14648., 18808., 11580., 13916., 16508., 19356., 3068.,  4892.,
      6972.,  9308.,  3068.,  4892.,  6972.,  9308.,  4796.,  6108.,  7676.,
      9500.,  14648., 18808., 23480., 28664., 7864.,  11000., 14648., 18808.,
      14648., 18808., 23480., 28664., 3068.,  4892.,  6972.,  9308.,  7484.,
      9820.,  12412., 15260., 4796.,  6108.,  7676.,  9500.,  7164.,  8988.,
      11068., 13404., 7864.,  11000., 14648., 18808., 14648., 18808., 23480.,
      28664., 7864.,  11000., 14648., 18808., 7484.,  9820.,  12412., 15260.,
      7164.,  8988.,  11068., 13404., 6974.,  8398.,  9950.,  11630., 350.,
      1006.,  1790.,  2702.,  12764., 15356., 18204., 21308., 5276.,  7356.,
      9692.,  12284., 10716., 13308., 16156., 19260., 6974.,  8398.,  9950.,
      11630., 10206., 11886., 13694., 15630., 350.,   1006.,  1790.,  2702.,
      2558.,  3470.,  4510.,  5678.,  5276.,  7356.,  9692.,  12284., 10716.,
      13308., 16156., 19260., 7324.,  9404.,  11740., 14332., 10206., 11886.,
      13694., 15630., 510.,   1422.,  2462.,  3630.,  0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     30.,    174.,
      446.,   846.,   190.,   590.,   1118.,  1774.,  540.,   1596.,  2908.,
      4476.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,
      3742.,  4910.,  6206.,  7630.,  190.,   590.,   1118.,  1774.,  190.,
      590.,   1118.,  1774.,  350.,   1006.,  1790.,  2702.,  1884.,  3452.,
      5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  3932.,  5500.,  7324.,
      9404.,  190.,   590.,   1118.,  1774.,  1374.,  2030.,  2814.,  3726.,
      700.,   2012.,  3580.,  5404.,  3068.,  4892.,  6972.,  9308.,  7864.,
      11000., 14648., 18808., 14648., 18808., 23480., 28664., 7864.,  11000.,
      14648., 18808., 11580., 13916., 16508., 19356., 3068.,  4892.,  6972.,
      9308.,  3068.,  4892.,  6972.,  9308.,  4796.,  6108.,  7676.,  9500.,
      14648., 18808., 23480., 28664., 7864.,  11000., 14648., 18808., 14648.,
      18808., 23480., 28664., 3068.,  4892.,  6972.,  9308.,  7484.,  9820.,
      12412., 15260., 4796.,  6108.,  7676.,  9500.,  7164.,  8988.,  11068.,
      13404., 7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664.,
      7864.,  11000., 14648., 18808., 7484.,  9820.,  12412., 15260., 7164.,
      8988.,  11068., 13404., 6974.,  8398.,  9950.,  11630., 350.,   1006.,
      1790.,  2702.,  12764., 15356., 18204., 21308., 5276.,  7356.,  9692.,
      12284., 10716., 13308., 16156., 19260., 6974.,  8398.,  9950.,  11630.,
      10206., 11886., 13694., 15630., 350.,   1006.,  1790.,  2702.,  2558.,
      3470.,  4510.,  5678.,  5276.,  7356.,  9692.,  12284., 10716., 13308.,
      16156., 19260., 7324.,  9404.,  11740., 14332., 10206., 11886., 13694.,
      15630., 510.,   1422.,  2462.,  3630.,  0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,    20.,   23.,   44.,   39.,   68.,   55.,   62.,   22.,   56.,
      70.,   124.,  102.,  172.,  134.,  156.,  52.,   126.,  140.,  244.,
      192.,  322.,  244.,  266.,  100.,  233.,  266.,  450.,  344.,  567.,
      422.,  467.,  148.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,
      244.,  521.,  578.,  918.,  656.,  1035., 734.,  803.,  244.,  510.,
      556.,  868.,  608.,  946.,  660.,  714.,  354.,  740.,  786.,  1228.,
      858.,  1336., 930.,  984.,  119.,  244.,  279.,  428.,  295.,  452.,
      311.,  350.,  246.,  504.,  582.,  892.,  614.,  940.,  646.,  732.,
      436.,  894.,  972.,  1492., 1024., 1570., 1076., 1162., 676.,  1385.,
      1514., 2322., 1592., 2439., 1670., 1811., 532.,  1086., 1180., 1804.,
      1232., 1882., 1284., 1386., 820.,  1673., 1826., 2790., 1904., 2907.,
      1982., 2147., 628.,  1278., 1388., 2116., 1440., 2194., 1492., 1610.,
      898.,  1828., 1938., 2956., 2010., 3064., 2082., 2200., 231.,  468.,
      535.,  812.,  551.,  836.,  567.,  638.,  470.,  952.,  1094., 1660.,
      1126., 1708., 1158., 1308., 820.,  1662., 1804., 2740., 1856., 2818.,
      1908., 2058., 1252., 2537., 2762., 4194., 2840., 4311., 2918., 3155.,
      916.,  1854., 2012., 3052., 2064., 3130., 2116., 2282., 1396., 2825.,
      3074., 4662., 3152., 4779., 3230., 3491., 1012., 2046., 2220., 3364.,
      2272., 3442., 2324., 2506., 1442., 2916., 3090., 4684., 3162., 4792.,
      3234., 3416.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  0.,   6.,   7.,   20.,  23.,
      26.,  18.,  20.,  0.,   14.,  18.,  48.,  58.,  68.,  44.,  50.,  0.,
      34.,  38.,  98.,  108., 118., 74.,  80.,  0.,   54.,  58.,  148., 158.,
      168., 104., 110., 0.,   48.,  51.,  118., 125., 132., 76.,  80.,  0.,
      63.,  66.,  153., 160., 167., 96.,  100., 0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.,   5.,   10.,  21.,  32.,  43.,  24.,  30.,  0.,
      30.,  35.,  76.,  87.,  98.,  54.,  60.,  0.,   62.,  74.,  160., 186.,
      212., 116., 130., 0.,   122., 134., 290., 316., 342., 186., 200., 0.,
      182., 194., 420., 446., 472., 256., 270., 0.,   112., 119., 254., 269.,
      284., 152., 160., 0.,   147., 154., 329., 344., 359., 192., 200., 0.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   9.,   18.,  37.,  56.,
      75.,  40.,  50.,  0.,   54.,  63.,  132., 151., 170., 90.,  100., 0.,
      110., 130., 272., 314., 356., 188., 210., 0.,   210., 230., 482., 524.,
      566., 298., 320., 0.,   310., 330., 692., 734., 776., 408., 430., 0.,
      176., 187., 390., 413., 436., 228., 240., 0.,   231., 242., 505., 528.,
      551., 288., 300., 0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,    128.,   148.,   295.,   272.,   481.,   396.,   448.,   138.,
      368.,   472.,   854.,   720.,   1226.,  968.,   1136.,  358.,   888.,
      992.,   1754.,  1400.,  2366.,  1808.,  1976.,  701.,   1660.,  1912.,
      3267.,  2524.,  4185.,  3136.,  3484.,  1110.,  2392.,  2624.,  4202.,
      3032.,  4814.,  3440.,  3736.,  1829.,  3916.,  4360.,  6939.,  4972.,
      7857.,  5584.,  6124.,  1862.,  3896.,  4256.,  6650.,  4664.,  7262.,
      5072.,  5496.,  2722.,  5696.,  6056.,  9470.,  6624.,  10322., 7192.,
      7616.,  905.,   1856.,  2132.,  3271.,  2256.,  3457.,  2380.,  2688.,
      1866.,  3824.,  4440.,  6806.,  4688.,  7178.,  4936.,  5616.,  3366.,
      6904.,  7520.,  11546., 7928.,  12158., 8336.,  9016.,  5213.,  10684.,
      11704., 17955., 12316., 18873., 12928., 14044., 4118.,  8408.,  9152.,
      13994., 9560.,  14606., 9968.,  10776., 6341.,  12940., 14152., 21627.,
      14764., 22545., 15376., 16684., 4870.,  9912.,  10784., 16442., 11192.,
      17054., 11600., 12536., 7010.,  14272., 15144., 23102., 15712., 23954.,
      16280., 17216., 1769.,  3584.,  4116.,  6247.,  4240.,  6433.,  4364.,
      4928.,  3594.,  7280.,  8408.,  12758., 8656.,  13130., 8904.,  10096.,
      6374.,  12920., 14048., 21338., 14456., 21950., 14864., 16056., 9725.,
      19708., 21496., 32643., 22108., 33561., 22720., 24604., 7126.,  14424.,
      15680., 23786., 16088., 24398., 16496., 17816., 10853., 21964., 23944.,
      36315., 24556., 37233., 25168., 27244., 7878.,  15928., 17312., 26234.,
      17720., 26846., 18128., 19576., 11298., 22848., 24232., 36734., 24800.,
      37586., 25368., 26816.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   0.,    35.,   41.,
      128.,  148.,  168.,  123.,  137.,  0.,    82.,   110.,  312.,  384.,
      456.,  306.,  350.,  0.,    222.,  250.,  672.,  744.,  816.,  526.,
      570.,  0.,    362.,  390.,  1032., 1104., 1176., 746.,  790.,  0.,
      347.,  369.,  864.,  916.,  968.,  563.,  593.,  0.,    457.,  479.,
      1124., 1176., 1228., 713.,  743.,  0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    29.,   67.,   140.,  224.,  308.,  173.,
      219.,  0.,    219.,  257.,  560.,  644.,  728.,  403.,  449.,  0.,
      450.,  542.,  1176., 1376., 1576., 866.,  974.,  0.,    910.,  1002.,
      2176., 2376., 2576., 1406., 1514., 0.,    1370., 1462., 3176., 3376.,
      3576., 1946., 2054., 0.,    851.,  905.,  1936., 2052., 2168., 1163.,
      1225., 0.,    1121., 1175., 2516., 2632., 2748., 1473., 1535., 0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    53.,   123.,
      252.,  400.,  548.,  293.,  371.,  0.,    403.,  473.,  992.,  1140.,
      1288., 683.,  761.,  0.,    818.,  974.,  2040., 2368., 2696., 1426.,
      1598., 0.,    1598., 1754., 3680., 4008., 4336., 2286., 2458., 0.,
      2378., 2534., 5320., 5648., 5976., 3146., 3318., 0.,    1355., 1441.,
      3008., 3188., 3368., 1763., 1857., 0.,    1785., 1871., 3908., 4088.,
      4268., 2233., 2327., 0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,   900.,   1044.,  2138.,  2020.,  3602.,  2996.,  3396.,  956.,
      2632.,  3432.,  6292.,  5384.,  9220.,  7336.,  8648.,  1996.,  5992.,
      5128.,  10948., 6312.,  13748., 7496.,  8808.,  4578.,  10172., 12140.,
      19830., 14940., 24030., 17740., 20476., 3852.,  13800., 9864.,  22148.,
      11048., 24948., 12232., 14568., 9410.,  19836., 23340., 36630., 26140.,
      40830., 28940., 33212., 5708.,  21608., 14600., 33348., 15784., 36148.,
      16968., 20328., 12508., 25992., 28840., 44788., 31304., 48484., 33768.,
      37128., 270.,   900.,   1044.,  2138.,  2020.,  3602.,  2996.,  3396.,
      956.,   2632.,  3432.,  6292.,  5384.,  9220.,  7336.,  8648.,  1996.,
      5992.,  5128.,  10948., 6312.,  13748., 7496.,  8808.,  4578.,  10172.,
      12140., 19830., 14940., 24030., 17740., 20476., 3852.,  13800., 9864.,
      22148., 11048., 24948., 12232., 14568., 9410.,  19836., 23340., 36630.,
      26140., 40830., 28940., 33212., 5708.,  21608., 14600., 33348., 15784.,
      36148., 16968., 20328., 12508., 25992., 28840., 44788., 31304., 48484.,
      33768., 37128., 270.,   900.,   1044.,  2138.,  2020.,  3602.,  2996.,
      3396.,  956.,   2632.,  3432.,  6292.,  5384.,  9220.,  7336.,  8648.,
      1996.,  5992.,  5128.,  10948., 6312.,  13748., 7496.,  8808.,  4578.,
      10172., 12140., 19830., 14940., 24030., 17740., 20476., 3852.,  13800.,
      9864.,  22148., 11048., 24948., 12232., 14568., 9410.,  19836., 23340.,
      36630., 26140., 40830., 28940., 33212., 5708.,  21608., 14600., 33348.,
      15784., 36148., 16968., 20328., 12508., 25992., 28840., 44788., 31304.,
      48484., 33768., 37128.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   0.,     230.,
      270.,   900.,   1044.,  1188.,  902.,   1006.,  0.,     540.,   748.,
      2216.,  2760.,  3304.,  2268.,  2604.,  0.,     1580.,  1788.,  4936.,
      5480.,  6024.,  3948.,  4284.,  0.,     2620.,  2828.,  7656.,  8200.,
      8744.,  5628.,  5964.,  0.,     2630.,  2798.,  6596.,  6996.,  7396.,
      4326.,  4558.,  0.,     3470.,  3638.,  8596.,  8996.,  9396.,  5486.,
      5718.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     190.,   486.,   1012.,  1668.,  2324.,  1310.,  1670.,  0.,
      1670.,  1966.,  4292.,  4948.,  5604.,  3110.,  3470.,  0.,     3420.,
      4140.,  9000.,  10568., 12136., 6684.,  7532.,  0.,     7020.,  7740.,
      16840., 18408., 19976., 10924., 11772., 0.,     10620., 11340., 24680.,
      26248., 27816., 15164., 16012., 0.,     6630.,  7054.,  15108., 16020.,
      16932., 9094.,  9582.,  0.,     8750.,  9174.,  19668., 20580., 21492.,
      11534., 12022., 0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     350.,   902.,   1844.,  3012.,  4180.,  2238.,  2854.,
      0.,     3110.,  3662.,  7684.,  8852.,  10020., 5318.,  5934.,  0.,
      6300.,  7532.,  15784., 18376., 20968., 11100., 12460., 0.,     12460.,
      13692., 28744., 31336., 33928., 17900., 19260., 0.,     18620., 19852.,
      41704., 44296., 46888., 24700., 26060., 0.,     10630., 11310., 23620.,
      25044., 26468., 13862., 14606., 0.,     14030., 14710., 30740., 32164.,
      33588., 17582., 18326., 0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,    28.,    48.,    80.,    56.,    92.,    119.,   176.,   116.,
      156.,   209.,   272.,   176.,   220.,   200.,   248.,   50.,    88.,
      144.,   224.,   192.,   280.,   358.,   496.,   312.,   408.,   538.,
      688.,   432.,   536.,   512.,   624.,   150.,   208.,   384.,   504.,
      432.,   560.,   778.,   976.,   632.,   768.,   1078.,  1288.,  832.,
      976.,   912.,   1064.,  301.,   400.,   728.,   932.,   848.,   1064.,
      1467.,  1800.,  1148.,  1376.,  1917.,  2268.,  1448.,  1688.,  1616.,
      1868.,  518.,   592.,   1120.,  1272.,  1232.,  1392.,  1978.,  2224.,
      1432.,  1600.,  2278.,  2536.,  1632.,  1808.,  1776.,  1960.,  853.,
      976.,   1832.,  2084.,  2048.,  2312.,  3267.,  3672.,  2348.,  2624.,
      3717.,  4140.,  2648.,  2936.,  2912.,  3212.,  886.,   976.,   1856.,
      2040.,  2032.,  2224.,  3178.,  3472.,  2232.,  2432.,  3478.,  3784.,
      2432.,  2640.,  2640.,  2856.,  1306.,  1416.,  2736.,  2960.,  2912.,
      3144.,  4558.,  4912.,  3192.,  3432.,  4978.,  5344.,  3472.,  3720.,
      3680.,  3936.,  429.,   476.,   880.,   976.,   1016.,  1116.,  1559.,
      1712.,  1076.,  1180.,  1649.,  1808.,  1136.,  1244.,  1288.,  1400.,
      882.,   984.,   1808.,  2016.,  2112.,  2328.,  3238.,  3568.,  2232.,
      2456.,  3418.,  3760.,  2352.,  2584.,  2688.,  2928.,  1622.,  1744.,
      3328.,  3576.,  3632.,  3888.,  5578.,  5968.,  3832.,  4096.,  5878.,
      6280.,  4032.,  4304.,  4368.,  4648.,  2509.,  2704.,  5144.,  5540.,
      5648.,  6056.,  8667.,  9288.,  5948.,  6368.,  9117.,  9756.,  6248.,
      6680.,  6800.,  7244.,  1990.,  2128.,  4064.,  4344.,  4432.,  4720.,
      6778.,  7216.,  4632.,  4928.,  7078.,  7528.,  4832.,  5136.,  5232.,
      5544.,  3061.,  3280.,  6248.,  6692.,  6848.,  7304.,  10467., 11160.,
      7148.,  7616.,  10917., 11628., 7448.,  7928.,  8096.,  8588.,  2358.,
      2512.,  4800.,  5112.,  5232.,  5552.,  7978.,  8464.,  5432.,  5760.,
      8278.,  8776.,  5632.,  5968.,  6096.,  6440.,  3418.,  3592.,  6960.,
      7312.,  7392.,  7752.,  11278., 11824., 7672.,  8040.,  11698., 12256.,
      7952.,  8328.,  8416.,  8800.,  845.,   924.,   1712.,  1872.,  1976.,
      2140.,  2999.,  3248.,  2036.,  2204.,  3089.,  3344.,  2096.,  2268.,
      2376.,  2552.,  1714.,  1880.,  3472.,  3808.,  4032.,  4376.,  6118.,
      6640.,  4152.,  4504.,  6298.,  6832.,  4272.,  4632.,  4864.,  5232.,
      3094.,  3280.,  6272.,  6648.,  6832.,  7216.,  10378., 10960., 7032.,
      7424.,  10678., 11272., 7232.,  7632.,  7824.,  8232.,  4717.,  5008.,
      9560.,  10148., 10448., 11048., 15867., 16776., 10748., 11360., 16317.,
      17244., 11048., 11672., 11984., 12620., 3462.,  3664.,  7008.,  7416.,
      7632.,  8048.,  11578., 12208., 7832.,  8256.,  11878., 12520., 8032.,
      8464.,  8688.,  9128.,  5269.,  5584.,  10664., 11300., 11648., 12296.,
      17667., 18648., 11948., 12608., 18117., 19116., 12248., 12920., 13280.,
      13964., 3830.,  4048.,  7744.,  8184.,  8432.,  8880.,  12778., 13456.,
      8632.,  9088.,  13078., 13768., 8832.,  9296.,  9552.,  10024., 5530.,
      5768.,  11184., 11664., 11872., 12360., 17998., 18736., 12152., 12648.,
      18418., 19168., 12432., 12936., 13152., 13664.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,   32.,   24.,   44.,
      21.,   32.,   27.,   40.,   0.,    0.,    11.,   24.,   13.,   28.,
      48.,   80.,   56.,   92.,   64.,   104.,  51.,   72.,   57.,   80.,
      0.,    0.,    26.,   56.,   38.,   72.,   120.,  192.,  152.,  232.,
      184.,  272.,  130.,  176.,  150.,  200.,  0.,    0.,    86.,   136.,
      98.,   152.,  280.,  392.,  312.,  432.,  344.,  472.,  230.,  296.,
      250.,  320.,  0.,    0.,    146.,  216.,  158.,  232.,  440.,  592.,
      472.,  632.,  504.,  672.,  330.,  416.,  350.,  440.,  0.,    0.,
      155.,  192.,  165.,  204.,  392.,  472.,  416.,  500.,  440.,  528.,
      259.,  304.,  273.,  320.,  0.,    0.,    205.,  252.,  215.,  264.,
      512.,  612.,  536.,  640.,  560.,  668.,  329.,  384.,  343.,  400.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    9.,    20.,
      27.,   40.,   56.,   84.,   96.,   128.,  136.,  172.,  77.,   96.,
      99.,   120.,  0.,    0.,    99.,   120.,  117.,  140.,  256.,  304.,
      296.,  348.,  336.,  392.,  187.,  216.,  209.,  240.,  0.,    0.,
      202.,  248.,  246.,  296.,  536.,  640.,  632.,  744.,  728.,  848.,
      402.,  464.,  454.,  520.,  0.,    0.,    422.,  488.,  466.,  536.,
      1016., 1160., 1112., 1264., 1208., 1368., 662.,  744.,  714.,  800.,
      0.,    0.,    642.,  728.,  686.,  776.,  1496., 1680., 1592., 1784.,
      1688., 1888., 922.,  1024., 974.,  1080., 0.,    0.,    403.,  448.,
      429.,  476.,  920.,  1016., 976.,  1076., 1032., 1136., 555.,  608.,
      585.,  640.,  0.,    0.,    533.,  588.,  559.,  616.,  1200., 1316.,
      1256., 1376., 1312., 1436., 705.,  768.,  735.,  800.,  0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    17.,   36.,   51.,   72.,
      104.,  148.,  176.,  224.,  248.,  300.,  133.,  160.,  171.,  200.,
      0.,    0.,    187.,  216.,  221.,  252.,  464.,  528.,  536.,  604.,
      608.,  680.,  323.,  360.,  361.,  400.,  0.,    0.,    378.,  440.,
      454.,  520.,  952.,  1088., 1112., 1256., 1272., 1424., 674.,  752.,
      758.,  840.,  0.,    0.,    758.,  840.,  834.,  920.,  1752., 1928.,
      1912., 2096., 2072., 2264., 1094., 1192., 1178., 1280., 0.,    0.,
      1138., 1240., 1214., 1320., 2552., 2768., 2712., 2936., 2872., 3104.,
      1514., 1632., 1598., 1720., 0.,    0.,    651.,  704.,  693.,  748.,
      1448., 1560., 1536., 1652., 1624., 1744., 851.,  912.,  897.,  960.,
      0.,    0.,    861.,  924.,  903.,  968.,  1888., 2020., 1976., 2112.,
      2064., 2204., 1081., 1152., 1127., 1200., 0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    193.,   326.,   574.,   382.,   662.,   847.,   1291.,  854.,
      1166.,  1555.,  2047.,  1326.,  1670.,  1510.,  1886.,  330.,   626.,
      1004.,  1628.,  1372.,  2060.,  2606.,  3686.,  2316.,  3068.,  4022.,
      5198.,  3260.,  4076.,  3884.,  4764.,  898.,   1098.,  2652.,  3340.,
      2316.,  2812.,  4950.,  5998.,  2876.,  3436.,  6302.,  7446.,  3436.,
      4060.,  4060.,  4748.,  2027.,  2551.,  4538.,  5634.,  5474.,  6666.,
      8985.,  10845., 6826.,  8114.,  11013., 13017., 8178.,  9562.,  9498.,
      10978., 1762.,  2090.,  6428.,  7372.,  4556.,  5308.,  10358., 11790.,
      5116.,  5932.,  11710., 13238., 5676.,  6556.,  6812.,  7756.,  4347.,
      5063.,  9178.,  10658., 10882., 12458., 17097., 19533., 12234., 13906.,
      19125., 21705., 13586., 15354., 15674., 17538., 2626.,  3082.,  10204.,
      11404., 6796.,  7804.,  15766., 17582., 7356.,  8428.,  17118., 19030.,
      7916.,  9052.,  9564.,  10764., 5946.,  6562.,  12364., 13628., 13756.,
      15084., 21374., 23414., 14956., 16348., 23174., 25310., 16156., 17612.,
      17804., 19324., 77.,    193.,   326.,   574.,   382.,   662.,   847.,
      1291.,  854.,   1166.,  1555.,  2047.,  1326.,  1670.,  1510.,  1886.,
      330.,   626.,   1004.,  1628.,  1372.,  2060.,  2606.,  3686.,  2316.,
      3068.,  4022.,  5198.,  3260.,  4076.,  3884.,  4764.,  898.,   1098.,
      2652.,  3340.,  2316.,  2812.,  4950.,  5998.,  2876.,  3436.,  6302.,
      7446.,  3436.,  4060.,  4060.,  4748.,  2027.,  2551.,  4538.,  5634.,
      5474.,  6666.,  8985.,  10845., 6826.,  8114.,  11013., 13017., 8178.,
      9562.,  9498.,  10978., 1762.,  2090.,  6428.,  7372.,  4556.,  5308.,
      10358., 11790., 5116.,  5932.,  11710., 13238., 5676.,  6556.,  6812.,
      7756.,  4347.,  5063.,  9178.,  10658., 10882., 12458., 17097., 19533.,
      12234., 13906., 19125., 21705., 13586., 15354., 15674., 17538., 2626.,
      3082.,  10204., 11404., 6796.,  7804.,  15766., 17582., 7356.,  8428.,
      17118., 19030., 7916.,  9052.,  9564.,  10764., 5946.,  6562.,  12364.,
      13628., 13756., 15084., 21374., 23414., 14956., 16348., 23174., 25310.,
      16156., 17612., 17804., 19324., 77.,    193.,   326.,   574.,   382.,
      662.,   847.,   1291.,  854.,   1166.,  1555.,  2047.,  1326.,  1670.,
      1510.,  1886.,  330.,   626.,   1004.,  1628.,  1372.,  2060.,  2606.,
      3686.,  2316.,  3068.,  4022.,  5198.,  3260.,  4076.,  3884.,  4764.,
      898.,   1098.,  2652.,  3340.,  2316.,  2812.,  4950.,  5998.,  2876.,
      3436.,  6302.,  7446.,  3436.,  4060.,  4060.,  4748.,  2027.,  2551.,
      4538.,  5634.,  5474.,  6666.,  8985.,  10845., 6826.,  8114.,  11013.,
      13017., 8178.,  9562.,  9498.,  10978., 1762.,  2090.,  6428.,  7372.,
      4556.,  5308.,  10358., 11790., 5116.,  5932.,  11710., 13238., 5676.,
      6556.,  6812.,  7756.,  4347.,  5063.,  9178.,  10658., 10882., 12458.,
      17097., 19533., 12234., 13906., 19125., 21705., 13586., 15354., 15674.,
      17538., 2626.,  3082.,  10204., 11404., 6796.,  7804.,  15766., 17582.,
      7356.,  8428.,  17118., 19030., 7916.,  9052.,  9564.,  10764., 5946.,
      6562.,  12364., 13628., 13756., 15084., 21374., 23414., 14956., 16348.,
      23174., 25310., 16156., 17612., 17804., 19324.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    17.,    53.,    46.,    134.,   102.,   222.,   158.,
      310.,   149.,   233.,   193.,   293.,   0.,     0.,     65.,    165.,
      77.,    193.,   326.,   574.,   382.,   662.,   438.,   750.,   369.,
      533.,   413.,   593.,   0.,     0.,     154.,   386.,   242.,   506.,
      828.,   1388.,  1068.,  1692.,  1308.,  1996.,  954.,   1314.,  1106.,
      1498.,  0.,     0.,     594.,   986.,   682.,   1106.,  2028.,  2908.,
      2268.,  3212.,  2508.,  3516.,  1714.,  2234.,  1866.,  2418.,  0.,
      0.,     1034.,  1586.,  1122.,  1706.,  3228.,  4428.,  3468.,  4732.,
      3708.,  5036.,  2474.,  3154.,  2626.,  3338.,  0.,     0.,     1169.,
      1461.,  1245.,  1553.,  2982.,  3614.,  3166.,  3830.,  3350.,  4046.,
      1985.,  2341.,  2093.,  2465.,  0.,     0.,     1549.,  1921.,  1625.,
      2013.,  3902.,  4694.,  4086.,  4910.,  4270.,  5126.,  2525.,  2961.,
      2633.,  3085.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     53.,    137.,   193.,   293.,   398.,   614.,   710.,
      958.,   1022.,  1302.,  581.,   729.,   753.,   917.,   0.,     0.,
      753.,   917.,   893.,   1073.,  1958.,  2334.,  2270.,  2678.,  2582.,
      3022.,  1441.,  1669.,  1613.,  1857.,  0.,     0.,     1530.,  1890.,
      1874.,  2266.,  4092.,  4908.,  4844.,  5724.,  5596.,  6540.,  3098.,
      3586.,  3506.,  4026.,  0.,     0.,     3250.,  3770.,  3594.,  4146.,
      7852.,  8988.,  8604.,  9804.,  9356.,  10620., 5138.,  5786.,  5546.,
      6226.,  0.,     0.,     4970.,  5650.,  5314.,  6026.,  11612., 13068.,
      12364., 13884., 13116., 14700., 7178.,  7986.,  7586.,  8426.,  0.,
      0.,     3137.,  3493.,  3341.,  3713.,  7174.,  7934.,  7614.,  8406.,
      8054.,  8878.,  4337.,  4757.,  4573.,  5009.,  0.,     0.,     4157.,
      4593.,  4361.,  4813.,  9374.,  10294., 9814.,  10766., 10254., 11238.,
      5517.,  6017.,  5753.,  6269.,  0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     101.,   249.,   369.,   533.,   750.,
      1094.,  1318.,  1694.,  1886.,  2294.,  1013.,  1225.,  1313.,  1541.,
      0.,     0.,     1441.,  1669.,  1709.,  1953.,  3590.,  4094.,  4158.,
      4694.,  4726.,  5294.,  2513.,  2805.,  2813.,  3121.,  0.,     0.,
      2906.,  3394.,  3506.,  4026.,  7356.,  8428.,  8620.,  9756.,  9884.,
      11084., 5242.,  5858.,  5906.,  6554.,  0.,     0.,     5906.,  6554.,
      6506.,  7186.,  13676., 15068., 14940., 16396., 16204., 17724., 8562.,
      9338.,  9226.,  10034., 0.,     0.,     8906.,  9714.,  9506.,  10346.,
      19996., 21708., 21260., 23036., 22524., 24364., 11882., 12818., 12546.,
      13514., 0.,     0.,     5105.,  5525.,  5437.,  5873.,  11366., 12254.,
      12062., 12982., 12758., 13710., 6689.,  7173.,  7053.,  7553.,  0.,
      0.,     6765.,  7265.,  7097.,  7613.,  14846., 15894., 15542., 16622.,
      16238., 17350., 8509.,  9073.,  8873.,  9453.,  0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,   1422.,  2380.,  4332.,  2156.,  3340.,  5722.,  8202.,  3852.,
      5292.,  9290.,  12154., 5548.,  7244.,  6988.,  8940.,  1724.,  3036.,
      4120.,  7000.,  7000.,  10392., 11764., 17236., 10392., 14296., 16852.,
      23092., 13784., 18200., 18712., 23640., 7004.,  8572.,  17880., 22296.,
      9240.,  12120., 25044., 31284., 11608., 15000., 31668., 38676., 13976.,
      17880., 18904., 23320., 4202.,  6298.,  10180., 14756., 13476., 18820.,
      22622., 30190., 20100., 26212., 30510., 39230., 26724., 33604., 28356.,
      34980., 860.,   2428.,  13784., 18200., 5144.,  8024.,  22996., 29236.,
      7512.,  10904., 29620., 36628., 9880.,  13784., 14808., 19224., 7594.,
      10202., 16964., 22564., 22308., 28676., 27678., 36782., 28932., 36068.,
      35566., 45822., 35556., 43460., 31044., 38692., 7004.,  8572.,  17880.,
      22296., 9240.,  12120., 25044., 31284., 11608., 15000., 31668., 38676.,
      13976., 17880., 18904., 23320., 4092.,  5916.,  9880.,  13784., 12760.,
      17176., 21300., 27284., 18200., 23128., 27412., 34164., 23640., 29080.,
      23832., 28760., 510.,   1422.,  2380.,  4332.,  2156.,  3340.,  5722.,
      8202.,  3852.,  5292.,  9290.,  12154., 5548.,  7244.,  6988.,  8940.,
      1724.,  3036.,  4120.,  7000.,  7000.,  10392., 11764., 17236., 10392.,
      14296., 16852., 23092., 13784., 18200., 18712., 23640., 7004.,  8572.,
      17880., 22296., 9240.,  12120., 25044., 31284., 11608., 15000., 31668.,
      38676., 13976., 17880., 18904., 23320., 4202.,  6298.,  10180., 14756.,
      13476., 18820., 22622., 30190., 20100., 26212., 30510., 39230., 26724.,
      33604., 28356., 34980., 860.,   2428.,  13784., 18200., 5144.,  8024.,
      22996., 29236., 7512.,  10904., 29620., 36628., 9880.,  13784., 14808.,
      19224., 7594.,  10202., 16964., 22564., 22308., 28676., 27678., 36782.,
      28932., 36068., 35566., 45822., 35556., 43460., 31044., 38692., 7004.,
      8572.,  17880., 22296., 9240.,  12120., 25044., 31284., 11608., 15000.,
      31668., 38676., 13976., 17880., 18904., 23320., 4092.,  5916.,  9880.,
      13784., 12760., 17176., 21300., 27284., 18200., 23128., 27412., 34164.,
      23640., 29080., 23832., 28760., 510.,   1422.,  2380.,  4332.,  2156.,
      3340.,  5722.,  8202.,  3852.,  5292.,  9290.,  12154., 5548.,  7244.,
      6988.,  8940.,  1724.,  3036.,  4120.,  7000.,  7000.,  10392., 11764.,
      17236., 10392., 14296., 16852., 23092., 13784., 18200., 18712., 23640.,
      7004.,  8572.,  17880., 22296., 9240.,  12120., 25044., 31284., 11608.,
      15000., 31668., 38676., 13976., 17880., 18904., 23320., 4202.,  6298.,
      10180., 14756., 13476., 18820., 22622., 30190., 20100., 26212., 30510.,
      39230., 26724., 33604., 28356., 34980., 860.,   2428.,  13784., 18200.,
      5144.,  8024.,  22996., 29236., 7512.,  10904., 29620., 36628., 9880.,
      13784., 14808., 19224., 7594.,  10202., 16964., 22564., 22308., 28676.,
      27678., 36782., 28932., 36068., 35566., 45822., 35556., 43460., 31044.,
      38692., 7004.,  8572.,  17880., 22296., 9240.,  12120., 25044., 31284.,
      11608., 15000., 31668., 38676., 13976., 17880., 18904., 23320., 4092.,
      5916.,  9880.,  13784., 12760., 17176., 21300., 27284., 18200., 23128.,
      27412., 34164., 23640., 29080., 23832., 28760.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1132.,
      2316.,  1118.,  1774.,  1454.,  2238.,  0.,     0.,     430.,   1214.,
      510.,   1422.,  2380.,  4332.,  2156.,  3340.,  2572.,  4012.,  110.,
      382.,   446.,   846.,   0.,     0.,     380.,   1180.,  1052.,  2108.,
      2776.,  5144.,  4632.,  7512.,  6488.,  9880.,  4604.,  6428.,  5788.,
      7868.,  0.,     0.,     3740.,  5820.,  3772.,  5084.,  11416., 15320.,
      5848.,  8216.,  7704.,  10584., 1052.,  2108.,  2236.,  3548.,  0.,
      0.,     1724.,  3036.,  2396.,  3964.,  6488.,  9880.,  8344.,  12248.,
      9560.,  12952., 6972.,  9308.,  5468.,  7036.,  0.,     0.,     4334.,
      5630.,  190.,   590.,   6988.,  8940.,  1644.,  2828.,  3084.,  4524.,
      1966.,  2750.,  2814.,  3726.,  0.,     0.,     2558.,  3470.,  3150.,
      4190.,  7404.,  9612.,  8844.,  11308., 5548.,  7244.,  6206.,  7630.,
      270.,   798.,   0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     350.,   1006.,  1454.,  2238.,  2988.,  4684.,  5452.,
      7404.,  7916.,  10124., 4510.,  5678.,  5870.,  7166.,  0.,     0.,
      5870.,  7166.,  6974.,  8398.,  15308., 18284., 8940.,  11148., 11404.,
      13868., 430.,   1214.,  1790.,  2702.,  0.,     0.,     3068.,  4892.,
      5788.,  7868.,  12248., 16664., 18200., 23128., 24152., 29592., 13436.,
      16284., 16668., 19772., 0.,     0.,     16668., 19772., 10556., 12892.,
      33176., 39128., 15320., 19736., 21272., 26200., 3740.,  5820.,  6972.,
      9308.,  0.,     0.,     8508.,  10844., 11228., 13820., 24152., 29592.,
      30104., 36056., 27224., 32664., 19900., 23260., 12252., 14844., 0.,
      0.,     11822., 13630., 510.,   1422.,  15820., 18796., 4332.,  6540.,
      7820.,  10284., 4334.,  5630.,  6206.,  7630.,  0.,     0.,     6974.,
      8398.,  8590.,  10142., 18284., 21516., 21772., 25260., 12332., 15052.,
      13694., 15630., 590.,   1630.,  0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     30.,    174.,   110.,   382.,   300.,
      972.,   716.,   1644.,  1132.,  2316.,  1118.,  1774.,  1454.,  2238.,
      0.,     0.,     430.,   1214.,  510.,   1422.,  2380.,  4332.,  2156.,
      3340.,  2572.,  4012.,  110.,   382.,   446.,   846.,   0.,     0.,
      380.,   1180.,  1052.,  2108.,  2776.,  5144.,  4632.,  7512.,  6488.,
      9880.,  4604.,  6428.,  5788.,  7868.,  0.,     0.,     3740.,  5820.,
      3772.,  5084.,  11416., 15320., 5848.,  8216.,  7704.,  10584., 1052.,
      2108.,  2236.,  3548.,  0.,     0.,     1724.,  3036.,  2396.,  3964.,
      6488.,  9880.,  8344.,  12248., 9560.,  12952., 6972.,  9308.,  5468.,
      7036.,  0.,     0.,     4334.,  5630.,  190.,   590.,   6988.,  8940.,
      1644.,  2828.,  3084.,  4524.,  1966.,  2750.,  2814.,  3726.,  0.,
      0.,     2558.,  3470.,  3150.,  4190.,  7404.,  9612.,  8844.,  11308.,
      5548.,  7244.,  6206.,  7630.,  270.,   798.,   0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,
      542.,   624.,   719.,   836.,   959.,   1088.,  622.,   704.,   790.,
      880.,   710.,   800.,   894.,   992.,   130.,   200.,   274.,   352.,
      428.,   576.,   732.,   896.,   604.,   768.,   940.,   1120.,  1174.,
      1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,  2152.,
      2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,  2268.,
      2496.,  490.,   600.,   714.,   832.,   1308.,  1536.,  1772.,  2016.,
      1484.,  1728.,  1980.,  2240.,  2734.,  3112.,  3502.,  3904.,  2268.,
      2528.,  2796.,  3072.,  3910.,  4312.,  4726.,  5152.,  3052.,  3328.,
      3612.,  3904.,  3356.,  3648.,  3948.,  4256.,  1015.,  1204.,  1399.,
      1600.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,  3818.,  4256.,
      5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,  5504.,  6993.,
      7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,  5978.,  6464.,
      6962.,  7472.,  1930.,  2072.,  2218.,  2368.,  4188.,  4480.,  4780.,
      5088.,  4620.,  4928.,  5244.,  5568.,  7438.,  7912.,  8398.,  8896.,
      5404.,  5728.,  6060.,  6400.,  8614.,  9112.,  9622.,  10144., 6188.,
      6528.,  6876.,  7232.,  6748.,  7104.,  7468.,  7840.,  3175.,  3412.,
      3655.,  3904.,  6842.,  7328.,  7826.,  8336.,  7682.,  8192.,  8714.,
      9248.,  12285., 13068., 13869., 14688., 8858.,  9392.,  9938.,  10496.,
      14049., 14868., 15705., 16560., 10034., 10592., 11162., 11744., 11066.,
      11648., 12242., 12848., 3370.,  3544.,  3722.,  3904.,  7068.,  7424.,
      7788.,  8160.,  7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294.,
      13888., 8540.,  8928.,  9324.,  9728.,  13318., 13912., 14518., 15136.,
      9324.,  9728.,  10140., 10560., 10140., 10560., 10988., 11424., 5010.,
      5224.,  5442.,  5664.,  10508., 10944., 11388., 11840., 11196., 11648.,
      12108., 12576., 17542., 18232., 18934., 19648., 12300., 12768., 13244.,
      13728., 19198., 19912., 20638., 21376., 13404., 13888., 14380., 14880.,
      14220., 14720., 15228., 15744., 1625.,  1716.,  1809.,  1904.,  3334.,
      3520.,  3710.,  3904.,  3870.,  4064.,  4262.,  4464.,  5939.,  6236.,
      6539.,  6848.,  4102.,  4304.,  4510.,  4720.,  6287.,  6596.,  6911.,
      7232.,  4334.,  4544.,  4758.,  4976.,  4934.,  5152.,  5374.,  5600.,
      3330.,  3528.,  3730.,  3936.,  6828.,  7232.,  7644.,  8064.,  8028.,
      8448.,  8876.,  9312.,  12310., 12952., 13606., 14272., 8492.,  8928.,
      9372.,  9824.,  13006., 13672., 14350., 15040., 8956.,  9408.,  9868.,
      10336., 10284., 10752., 11228., 11712., 6250.,  6488.,  6730.,  6976.,
      12828., 13312., 13804., 14304., 14028., 14528., 15036., 15552., 21550.,
      22312., 23086., 23872., 14812., 15328., 15852., 16384., 22726., 23512.,
      24310., 25120., 15596., 16128., 16668., 17216., 16924., 17472., 18028.,
      18592., 9655.,  10036., 10423., 10816., 19802., 20576., 21362., 22160.,
      21794., 22592., 23402., 24224., 33453., 34668., 35901., 37152., 22970.,
      23792., 24626., 25472., 35217., 36468., 37737., 39024., 24146., 24992.,
      25850., 26720., 26330., 27200., 28082., 28976., 7690.,  7960.,  8234.,
      8512.,  15708., 16256., 16812., 17376., 17164., 17728., 18300., 18880.,
      26254., 27112., 27982., 28864., 17948., 18528., 19116., 19712., 27430.,
      28312., 29206., 30112., 18732., 19328., 19932., 20544., 20316., 20928.,
      21548., 22176., 11815., 12244., 12679., 13120., 24122., 24992., 25874.,
      26768., 26498., 27392., 28298., 29216., 40509., 41868., 43245., 44640.,
      27674., 28592., 29522., 30464., 42273., 43668., 45081., 46512., 28850.,
      29792., 30746., 31712., 31418., 32384., 33362., 34352., 9130.,  9432.,
      9738.,  10048., 18588., 19200., 19820., 20448., 20300., 20928., 21564.,
      22208., 30958., 31912., 32878., 33856., 21084., 21728., 22380., 23040.,
      32134., 33112., 34102., 35104., 21868., 22528., 23196., 23872., 23708.,
      24384., 25068., 25760., 13330., 13672., 14018., 14368., 27148., 27840.,
      28540., 29248., 28860., 29568., 30284., 31008., 44038., 45112., 46198.,
      47296., 29964., 30688., 31420., 32160., 45694., 46792., 47902., 49024.,
      31068., 31808., 32556., 33312., 32908., 33664., 34428., 35200., 25.,
      52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,   224.,
      294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,   542.,
      624.,   719.,   836.,   959.,   1088.,  622.,   704.,   790.,   880.,
      710.,   800.,   894.,   992.,   130.,   200.,   274.,   352.,   428.,
      576.,   732.,   896.,   604.,   768.,   940.,   1120.,  1174.,  1432.,
      1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,  2152.,  2446.,
      2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,  2268.,  2496.,
      490.,   600.,   714.,   832.,   1308.,  1536.,  1772.,  2016.,  1484.,
      1728.,  1980.,  2240.,  2734.,  3112.,  3502.,  3904.,  2268.,  2528.,
      2796.,  3072.,  3910.,  4312.,  4726.,  5152.,  3052.,  3328.,  3612.,
      3904.,  3356.,  3648.,  3948.,  4256.,  1015.,  1204.,  1399.,  1600.,
      2522.,  2912.,  3314.,  3728.,  2978.,  3392.,  3818.,  4256.,  5229.,
      5868.,  6525.,  7200.,  4154.,  4592.,  5042.,  5504.,  6993.,  7668.,
      8361.,  9072.,  5330.,  5792.,  6266.,  6752.,  5978.,  6464.,  6962.,
      7472.,  1930.,  2072.,  2218.,  2368.,  4188.,  4480.,  4780.,  5088.,
      4620.,  4928.,  5244.,  5568.,  7438.,  7912.,  8398.,  8896.,  5404.,
      5728.,  6060.,  6400.,  8614.,  9112.,  9622.,  10144., 6188.,  6528.,
      6876.,  7232.,  6748.,  7104.,  7468.,  7840.,  3175.,  3412.,  3655.,
      3904.,  6842.,  7328.,  7826.,  8336.,  7682.,  8192.,  8714.,  9248.,
      12285., 13068., 13869., 14688., 8858.,  9392.,  9938.,  10496., 14049.,
      14868., 15705., 16560., 10034., 10592., 11162., 11744., 11066., 11648.,
      12242., 12848., 3370.,  3544.,  3722.,  3904.,  7068.,  7424.,  7788.,
      8160.,  7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294., 13888.,
      8540.,  8928.,  9324.,  9728.,  13318., 13912., 14518., 15136., 9324.,
      9728.,  10140., 10560., 10140., 10560., 10988., 11424., 5010.,  5224.,
      5442.,  5664.,  10508., 10944., 11388., 11840., 11196., 11648., 12108.,
      12576., 17542., 18232., 18934., 19648., 12300., 12768., 13244., 13728.,
      19198., 19912., 20638., 21376., 13404., 13888., 14380., 14880., 14220.,
      14720., 15228., 15744.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    5.,     12.,    21.,    32.,    14.,
      32.,    54.,    80.,    38.,    64.,    94.,    128.,   62.,    96.,
      134.,   176.,   65.,    84.,    105.,   128.,   85.,    108.,   133.,
      160.,   0.,     0.,     0.,     0.,     21.,    44.,    69.,    96.,
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   182.,   256.,   334.,   416.,   165.,   204.,
      245.,   288.,   185.,   228.,   273.,   320.,   0.,     0.,     0.,
      0.,     50.,    104.,   162.,   224.,   90.,    152.,   218.,   288.,
      348.,   480.,   620.,   768.,   460.,   608.,   764.,   928.,   572.,
      736.,   908.,   1088.,  434.,   520.,   610.,   704.,   506.,   600.,
      698.,   800.,   0.,     0.,     0.,     0.,     250.,   344.,   442.,
      544.,   290.,   392.,   498.,   608.,   908.,   1120.,  1340.,  1568.,
      1020.,  1248.,  1484.,  1728.,  1132.,  1376.,  1628.,  1888.,  794.,
      920.,   1050.,  1184.,  866.,   1000.,  1138.,  1280.,  0.,     0.,
      0.,     0.,     450.,   584.,   722.,   864.,   490.,   632.,   778.,
      928.,   1468.,  1760.,  2060.,  2368.,  1580.,  1888.,  2204.,  2528.,
      1692.,  2016.,  2348.,  2688.,  1154.,  1320.,  1490.,  1664.,  1226.,
      1400.,  1578.,  1760.,  0.,     0.,     0.,     0.,     549.,   620.,
      693.,   768.,   585.,   660.,   737.,   816.,   1414.,  1568.,  1726.,
      1888.,  1502.,  1664.,  1830.,  2000.,  1590.,  1760.,  1934.,  2112.,
      949.,   1036.,  1125.,  1216.,  1001.,  1092.,  1185.,  1280.,  0.,
      0.,     0.,     0.,     729.,   820.,   913.,   1008.,  765.,   860.,
      957.,   1056.,  1854.,  2048.,  2246.,  2448.,  1942.,  2144.,  2350.,
      2560.,  2030.,  2240.,  2454.,  2672.,  1209.,  1316.,  1425.,  1536.,
      1261.,  1372.,  1485.,  1600.,  0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     17.,    36.,    57.,    80.,    85.,
      108.,   133.,   160.,   174.,   224.,   278.,   336.,   326.,   384.,
      446.,   512.,   478.,   544.,   614.,   688.,   273.,   308.,   345.,
      384.,   357.,   396.,   437.,   480.,   0.,     0.,     0.,     0.,
      357.,   396.,   437.,   480.,   425.,   468.,   513.,   560.,   934.,
      1024.,  1118.,  1216.,  1086.,  1184.,  1286.,  1392.,  1238.,  1344.,
      1454.,  1568.,  693.,   748.,   805.,   864.,   777.,   836.,   897.,
      960.,   0.,     0.,     0.,     0.,     722.,   808.,   898.,   992.,
      890.,   984.,   1082.,  1184.,  1948.,  2144.,  2348.,  2560.,  2316.,
      2528.,  2748.,  2976.,  2684.,  2912.,  3148.,  3392.,  1490.,  1608.,
      1730.,  1856.,  1690.,  1816.,  1946.,  2080.,  0.,     0.,     0.,
      0.,     1562.,  1688.,  1818.,  1952.,  1730.,  1864.,  2002.,  2144.,
      3788.,  4064.,  4348.,  4640.,  4156.,  4448.,  4748.,  5056.,  4524.,
      4832.,  5148.,  5472.,  2490.,  2648.,  2810.,  2976.,  2690.,  2856.,
      3026.,  3200.,  0.,     0.,     0.,     0.,     2402.,  2568.,  2738.,
      2912.,  2570.,  2744.,  2922.,  3104.,  5628.,  5984.,  6348.,  6720.,
      5996.,  6368.,  6748.,  7136.,  6364.,  6752.,  7148.,  7552.,  3490.,
      3688.,  3890.,  4096.,  3690.,  3896.,  4106.,  4320.,  0.,     0.,
      0.,     0.,     1525.,  1612.,  1701.,  1792.,  1625.,  1716.,  1809.,
      1904.,  3494.,  3680.,  3870.,  4064.,  3710.,  3904.,  4102.,  4304.,
      3926.,  4128.,  4334.,  4544.,  2117.,  2220.,  2325.,  2432.,  2233.,
      2340.,  2449.,  2560.,  0.,     0.,     0.,     0.,     2025.,  2132.,
      2241.,  2352.,  2125.,  2236.,  2349.,  2464.,  4574.,  4800.,  5030.,
      5264.,  4790.,  5024.,  5262.,  5504.,  5006.,  5248.,  5494.,  5744.,
      2697.,  2820.,  2945.,  3072.,  2813.,  2940.,  3069.,  3200.,  0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     33.,
      68.,    105.,   144.,   165.,   204.,   245.,   288.,   334.,   416.,
      502.,   592.,   614.,   704.,   798.,   896.,   894.,   992.,   1094.,
      1200.,  481.,   532.,   585.,   640.,   629.,   684.,   741.,   800.,
      0.,     0.,     0.,     0.,     693.,   748.,   805.,   864.,   825.,
      884.,   945.,   1008.,  1734.,  1856.,  1982.,  2112.,  2014.,  2144.,
      2278.,  2416.,  2294.,  2432.,  2574.,  2720.,  1221.,  1292.,  1365.,
      1440.,  1369.,  1444.,  1521.,  1600.,  0.,     0.,     0.,     0.,
      1394.,  1512.,  1634.,  1760.,  1690.,  1816.,  1946.,  2080.,  3548.,
      3808.,  4076.,  4352.,  4172.,  4448.,  4732.,  5024.,  4796.,  5088.,
      5388.,  5696.,  2546.,  2696.,  2850.,  3008.,  2874.,  3032.,  3194.,
      3360.,  0.,     0.,     0.,     0.,     2874.,  3032.,  3194.,  3360.,
      3170.,  3336.,  3506.,  3680.,  6668.,  7008.,  7356.,  7712.,  7292.,
      7648.,  8012.,  8384.,  7916.,  8288.,  8668.,  9056.,  4186.,  4376.,
      4570.,  4768.,  4514.,  4712.,  4914.,  5120.,  0.,     0.,     0.,
      0.,     4354.,  4552.,  4754.,  4960.,  4650.,  4856.,  5066.,  5280.,
      9788.,  10208., 10636., 11072., 10412., 10848., 11292., 11744., 11036.,
      11488., 11948., 12416., 5826.,  6056.,  6290.,  6528.,  6154.,  6392.,
      6634.,  6880.,  0.,     0.,     0.,     0.,     2501.,  2604.,  2709.,
      2816.,  2665.,  2772.,  2881.,  2992.,  5574.,  5792.,  6014.,  6240.,
      5918.,  6144.,  6374.,  6608.,  6262.,  6496.,  6734.,  6976.,  3285.,
      3404.,  3525.,  3648.,  3465.,  3588.,  3713.,  3840.,  0.,     0.,
      0.,     0.,     3321.,  3444.,  3569.,  3696.,  3485.,  3612.,  3741.,
      3872.,  7294.,  7552.,  7814.,  8080.,  7638.,  7904.,  8174.,  8448.,
      7982.,  8256.,  8534.,  8816.,  4185.,  4324.,  4465.,  4608.,  4365.,
      4508.,  4653.,  4800.,  0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  946.,
      1210.,  1506.,  1834.,  2575.,  3147.,  3767.,  4435.,  1762.,  2090.,
      2450.,  2842.,  4311.,  4979.,  5695.,  6459.,  2578.,  2970.,  3394.,
      3850.,  3266.,  3722.,  4210.,  4730.,  714.,   1010.,  1338.,  1698.,
      1732.,  2388.,  3108.,  3892.,  3108.,  3892.,  4740.,  5652.,  5246.,
      6518.,  7886.,  9350.,  4740.,  5652.,  6628.,  7668.,  7694.,  9158.,
      10718., 12374., 6372.,  7412.,  8516.,  9684.,  8772.,  9940.,  11172.,
      12468., 3322.,  3682.,  4074.,  4498.,  8420.,  9460.,  10564., 11732.,
      4292.,  4948.,  5668.,  6452.,  11790., 13254., 14814., 16470., 5412.,
      6196.,  7044.,  7956.,  15006., 16662., 18414., 20262., 6532.,  7444.,
      8420.,  9460.,  8932.,  9972.,  11076., 12244., 1863.,  2339.,  2863.,
      3435.,  4566.,  5614.,  6758.,  7998.,  6118.,  7358.,  8694.,  10126.,
      10437., 12185., 14077., 16113., 9334.,  10766., 12294., 13918., 14237.,
      16273., 18453., 20777., 12550., 14174., 15894., 17710., 13398., 14958.,
      16614., 18366., 250.,   610.,   1002.,  1426.,  6372.,  7412.,  8516.,
      9684.,  2244.,  2900.,  3620.,  4404.,  10766., 12230., 13790., 15446.,
      3364.,  4148.,  4996.,  5908.,  13982., 15638., 17390., 19238., 4484.,
      5396.,  6372.,  7412.,  6884.,  7924.,  9028.,  10196., 3495.,  4099.,
      4751.,  5451.,  7830.,  9134.,  10534., 12030., 10406., 11902., 13494.,
      15182., 12773., 14905., 17181., 19601., 13622., 15310., 17094., 18974.,
      16573., 18993., 21557., 24265., 16838., 18718., 20694., 22766., 14614.,
      16430., 18342., 20350., 3322.,  3682.,  4074.,  4498.,  8420.,  9460.,
      10564., 11732., 4292.,  4948.,  5668.,  6452.,  11790., 13254., 14814.,
      16470., 5412.,  6196.,  7044.,  7956.,  15006., 16662., 18414., 20262.,
      6532.,  7444.,  8420.,  9460.,  8932.,  9972.,  11076., 12244., 1834.,
      2258.,  2714.,  3202.,  4484.,  5396.,  6372.,  7412.,  5860.,  6900.,
      8004.,  9172.,  9950.,  11350., 12846., 14438., 8516.,  9684.,  10916.,
      12212., 12910., 14502., 16190., 17974., 11172., 12468., 13828., 15252.,
      11332., 12500., 13732., 15028., 149.,   361.,   589.,   833.,   962.,
      1418.,  1906.,  2426.,  946.,   1210.,  1506.,  1834.,  2575.,  3147.,
      3767.,  4435.,  1762.,  2090.,  2450.,  2842.,  4311.,  4979.,  5695.,
      6459.,  2578.,  2970.,  3394.,  3850.,  3266.,  3722.,  4210.,  4730.,
      714.,   1010.,  1338.,  1698.,  1732.,  2388.,  3108.,  3892.,  3108.,
      3892.,  4740.,  5652.,  5246.,  6518.,  7886.,  9350.,  4740.,  5652.,
      6628.,  7668.,  7694.,  9158.,  10718., 12374., 6372.,  7412.,  8516.,
      9684.,  8772.,  9940.,  11172., 12468., 3322.,  3682.,  4074.,  4498.,
      8420.,  9460.,  10564., 11732., 4292.,  4948.,  5668.,  6452.,  11790.,
      13254., 14814., 16470., 5412.,  6196.,  7044.,  7956.,  15006., 16662.,
      18414., 20262., 6532.,  7444.,  8420.,  9460.,  8932.,  9972.,  11076.,
      12244., 1863.,  2339.,  2863.,  3435.,  4566.,  5614.,  6758.,  7998.,
      6118.,  7358.,  8694.,  10126., 10437., 12185., 14077., 16113., 9334.,
      10766., 12294., 13918., 14237., 16273., 18453., 20777., 12550., 14174.,
      15894., 17710., 13398., 14958., 16614., 18366., 250.,   610.,   1002.,
      1426.,  6372.,  7412.,  8516.,  9684.,  2244.,  2900.,  3620.,  4404.,
      10766., 12230., 13790., 15446., 3364.,  4148.,  4996.,  5908.,  13982.,
      15638., 17390., 19238., 4484.,  5396.,  6372.,  7412.,  6884.,  7924.,
      9028.,  10196., 3495.,  4099.,  4751.,  5451.,  7830.,  9134.,  10534.,
      12030., 10406., 11902., 13494., 15182., 12773., 14905., 17181., 19601.,
      13622., 15310., 17094., 18974., 16573., 18993., 21557., 24265., 16838.,
      18718., 20694., 22766., 14614., 16430., 18342., 20350., 3322.,  3682.,
      4074.,  4498.,  8420.,  9460.,  10564., 11732., 4292.,  4948.,  5668.,
      6452.,  11790., 13254., 14814., 16470., 5412.,  6196.,  7044.,  7956.,
      15006., 16662., 18414., 20262., 6532.,  7444.,  8420.,  9460.,  8932.,
      9972.,  11076., 12244., 1834.,  2258.,  2714.,  3202.,  4484.,  5396.,
      6372.,  7412.,  5860.,  6900.,  8004.,  9172.,  9950.,  11350., 12846.,
      14438., 8516.,  9684.,  10916., 12212., 12910., 14502., 16190., 17974.,
      11172., 12468., 13828., 15252., 11332., 12500., 13732., 15028., 149.,
      361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  946.,   1210.,
      1506.,  1834.,  2575.,  3147.,  3767.,  4435.,  1762.,  2090.,  2450.,
      2842.,  4311.,  4979.,  5695.,  6459.,  2578.,  2970.,  3394.,  3850.,
      3266.,  3722.,  4210.,  4730.,  714.,   1010.,  1338.,  1698.,  1732.,
      2388.,  3108.,  3892.,  3108.,  3892.,  4740.,  5652.,  5246.,  6518.,
      7886.,  9350.,  4740.,  5652.,  6628.,  7668.,  7694.,  9158.,  10718.,
      12374., 6372.,  7412.,  8516.,  9684.,  8772.,  9940.,  11172., 12468.,
      3322.,  3682.,  4074.,  4498.,  8420.,  9460.,  10564., 11732., 4292.,
      4948.,  5668.,  6452.,  11790., 13254., 14814., 16470., 5412.,  6196.,
      7044.,  7956.,  15006., 16662., 18414., 20262., 6532.,  7444.,  8420.,
      9460.,  8932.,  9972.,  11076., 12244., 1863.,  2339.,  2863.,  3435.,
      4566.,  5614.,  6758.,  7998.,  6118.,  7358.,  8694.,  10126., 10437.,
      12185., 14077., 16113., 9334.,  10766., 12294., 13918., 14237., 16273.,
      18453., 20777., 12550., 14174., 15894., 17710., 13398., 14958., 16614.,
      18366., 250.,   610.,   1002.,  1426.,  6372.,  7412.,  8516.,  9684.,
      2244.,  2900.,  3620.,  4404.,  10766., 12230., 13790., 15446., 3364.,
      4148.,  4996.,  5908.,  13982., 15638., 17390., 19238., 4484.,  5396.,
      6372.,  7412.,  6884.,  7924.,  9028.,  10196., 3495.,  4099.,  4751.,
      5451.,  7830.,  9134.,  10534., 12030., 10406., 11902., 13494., 15182.,
      12773., 14905., 17181., 19601., 13622., 15310., 17094., 18974., 16573.,
      18993., 21557., 24265., 16838., 18718., 20694., 22766., 14614., 16430.,
      18342., 20350., 3322.,  3682.,  4074.,  4498.,  8420.,  9460.,  10564.,
      11732., 4292.,  4948.,  5668.,  6452.,  11790., 13254., 14814., 16470.,
      5412.,  6196.,  7044.,  7956.,  15006., 16662., 18414., 20262., 6532.,
      7444.,  8420.,  9460.,  8932.,  9972.,  11076., 12244., 1834.,  2258.,
      2714.,  3202.,  4484.,  5396.,  6372.,  7412.,  5860.,  6900.,  8004.,
      9172.,  9950.,  11350., 12846., 14438., 8516.,  9684.,  10916., 12212.,
      12910., 14502., 16190., 17974., 11172., 12468., 13828., 15252., 11332.,
      12500., 13732., 15028.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  0.,     0.,     0.,     0.,     125.,   305.,   501.,   713.,
      149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  1138.,
      1658.,  2210.,  2794.,  1314.,  1898.,  2514.,  3162.,  1245.,  1553.,
      1877.,  2217.,  1397.,  1737.,  2093.,  2465.,  0.,     0.,     0.,
      0.,     298.,   722.,   1178.,  1666.,  602.,   1090.,  1610.,  2162.,
      2532.,  3572.,  4676.,  5844.,  3396.,  4564.,  5796.,  7092.,  4260.,
      5556.,  6916.,  8340.,  3306.,  3986.,  4698.,  5442.,  3866.,  4610.,
      5386.,  6194.,  0.,     0.,     0.,     0.,     1818.,  2562.,  3338.,
      4146.,  1738.,  2034.,  2362.,  2722.,  6468.,  7636.,  8868.,  10164.,
      4900.,  5684.,  6532.,  7444.,  5764.,  6676.,  7652.,  8692.,  3674.,
      4162.,  4682.,  5234.,  4234.,  4786.,  5370.,  5986.,  0.,     0.,
      0.,     0.,     2954.,  3506.,  4090.,  4706.,  3258.,  3874.,  4522.,
      5202.,  8356.,  9652.,  11012., 12436., 9220.,  10644., 12132., 13684.,
      10084., 11636., 13252., 14932., 6474.,  7282.,  8122.,  8994.,  7034.,
      7906.,  8810.,  9746.,  0.,     0.,     0.,     0.,     4253.,  4817.,
      5397.,  5993.,  53.,    137.,   237.,   353.,   6530.,  7242.,  7986.,
      8762.,  690.,   954.,   1250.,  1578.,  1378.,  1706.,  2066.,  2458.,
      893.,   1073.,  1269.,  1481.,  1301.,  1513.,  1741.,  1985.,  0.,
      0.,     0.,     0.,     1173.,  1385.,  1613.,  1857.,  1453.,  1697.,
      1957.,  2233.,  3442.,  3962.,  4514.,  5098.,  4130.,  4714.,  5330.,
      5978.,  4818.,  5466.,  6146.,  6858.,  2933.,  3273.,  3629.,  4001.,
      3341.,  3713.,  4101.,  4505.,  0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     101.,   249.,   413.,   593.,   637.,
      817.,   1013.,  1225.,  1298.,  1690.,  2114.,  2570.,  2498.,  2954.,
      3442.,  3962.,  3698.,  4218.,  4770.,  5354.,  2117.,  2393.,  2685.,
      2993.,  2781.,  3089.,  3413.,  3753.,  0.,     0.,     0.,     0.,
      2781.,  3089.,  3413.,  3753.,  3317.,  3657.,  4013.,  4385.,  7298.,
      8010.,  8754.,  9530.,  8498.,  9274.,  10082., 10922., 9698.,  10538.,
      11410., 12314., 5437.,  5873.,  6325.,  6793.,  6101.,  6569.,  7053.,
      7553.,  0.,     0.,     0.,     0.,     5610.,  6290.,  7002.,  7746.,
      6938.,  7682.,  8458.,  9266.,  15204., 16756., 18372., 20052., 18116.,
      19796., 21540., 23348., 21028., 22836., 24708., 26644., 11690., 12626.,
      13594., 14594., 13274., 14274., 15306., 16370., 0.,     0.,     0.,
      0.,     12250., 13250., 14282., 15346., 5002.,  5554.,  6138.,  6754.,
      21188., 22868., 24612., 26420., 13476., 14772., 16132., 17556., 16388.,
      17812., 19300., 20852., 8986.,  9730.,  10506., 11314., 10570., 11378.,
      12218., 13090., 0.,     0.,     0.,     0.,     10314., 11122., 11962.,
      12834., 11642., 12514., 13418., 14354., 25124., 26932., 28804., 30740.,
      28036., 29972., 31972., 34036., 30948., 33012., 35140., 37332., 16906.,
      17970., 19066., 20194., 18490., 19618., 20778., 21970., 0.,     0.,
      0.,     0.,     12029., 12721., 13429., 14153., 149.,   361.,   589.,
      833.,   14914., 15882., 16882., 17914., 1906.,  2426.,  2978.,  3562.,
      3618.,  4202.,  4818.,  5466.,  2013.,  2321.,  2645.,  2985.,  2933.,
      3273.,  3629.,  4001.,  0.,     0.,     0.,     0.,     3317.,  3657.,
      4013.,  4385.,  4109.,  4481.,  4869.,  5273.,  8754.,  9530.,  10338.,
      11178., 10466., 11306., 12178., 13082., 12178., 13082., 14018., 14986.,
      6613.,  7081.,  7565.,  8065.,  7533.,  8033.,  8549.,  9081.,  0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     197.,
      473.,   765.,   1073.,  1245.,  1553.,  1877.,  2217.,  2514.,  3162.,
      3842.,  4554.,  4738.,  5450.,  6194.,  6970.,  6962.,  7738.,  8546.,
      9386.,  3749.,  4153.,  4573.,  5009.,  4925.,  5361.,  5813.,  6281.,
      0.,     0.,     0.,     0.,     5437.,  5873.,  6325.,  6793.,  6485.,
      6953.,  7437.,  7937.,  13634., 14602., 15602., 16634., 15858., 16890.,
      17954., 19050., 18082., 19178., 20306., 21466., 9629.,  10193., 10773.,
      11369., 10805., 11401., 12013., 12641., 0.,     0.,     0.,     0.,
      10922., 11858., 12826., 13826., 13274., 14274., 15306., 16370., 27876.,
      29940., 32068., 34260., 32836., 35028., 37284., 39604., 37796., 40116.,
      42500., 44948., 20074., 21266., 22490., 23746., 22682., 23938., 25226.,
      26546., 0.,     0.,     0.,     0.,     22682., 23938., 25226., 26546.,
      8266.,  9074.,  9914.,  10786., 35908., 38100., 40356., 42676., 22052.,
      23860., 25732., 27668., 27012., 28948., 30948., 33012., 14298., 15298.,
      16330., 17394., 16906., 17970., 19066., 20194., 0.,     0.,     0.,
      0.,     17674., 18738., 19834., 20962., 20026., 21154., 22314., 23506.,
      41892., 44212., 46596., 49044., 46852., 49300., 51812., 54388., 51812.,
      54388., 57028., 59732., 27338., 28658., 30010., 31394., 29946., 31330.,
      32746., 34194., 0.,     0.,     0.,     0.,     19805., 20625., 21461.,
      22313., 245.,   585.,   941.,   1313.,  23298., 24522., 25778., 27066.,
      3122.,  3898.,  4706.,  5546.,  5858.,  6698.,  7570.,  8474.,  3133.,
      3569.,  4021.,  4489.,  4565.,  5033.,  5517.,  6017.,  0.,     0.,
      0.,     0.,     5461.,  5929.,  6413.,  6913.,  6765.,  7265.,  7781.,
      8313.,  14066., 15098., 16162., 17258., 16802., 17898., 19026., 20186.,
      19538., 20698., 21890., 23114., 10293., 10889., 11501., 12129., 11725.,
      12353., 12997., 13657., 0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      350.,   1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,
      3644.,  4956.,  6524.,  6490.,  8970.,  11834., 15082., 4956.,  6524.,
      8348.,  10428., 12090., 15338., 18970., 22986., 7324.,  9404.,  11740.,
      14332., 12764., 15356., 18204., 21308., 700.,   2012.,  3580.,  5404.,
      3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600., 16760., 8244.,
      12180., 16884., 22356., 14648., 18808., 23480., 28664., 15348., 20820.,
      27060., 34068., 23480., 28664., 34360., 40568., 12600., 16760., 21432.,
      26616., 380.,   1180.,  2236.,  3548.,  5816.,  8952.,  12600., 16760.,
      3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068., 7864.,
      11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600., 16760.,
      21432., 26616., 23480., 28664., 34360., 40568., 890.,   2602.,  4698.,
      7178.,  3668.,  6836.,  10772., 15476., 7700.,  12404., 17876., 24116.,
      11182., 16830., 23630., 31582., 20948., 27188., 34196., 41972., 20814.,
      28766., 37870., 48126., 34196., 41972., 50516., 59828., 19924., 26164.,
      33172., 40948., 380.,   1180.,  2236.,  3548.,  5816.,  8952.,  12600.,
      16760., 3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068.,
      7864.,  11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600.,
      16760., 21432., 26616., 23480., 28664., 34360., 40568., 890.,   2602.,
      4698.,  7178.,  3668.,  6836.,  10772., 15476., 7700.,  12404., 17876.,
      24116., 11182., 16830., 23630., 31582., 20948., 27188., 34196., 41972.,
      20814., 28766., 37870., 48126., 34196., 41972., 50516., 59828., 19924.,
      26164., 33172., 40948., 380.,   1180.,  2236.,  3548.,  5816.,  8952.,
      12600., 16760., 3128.,  5240.,  7864.,  11000., 15348., 20820., 27060.,
      34068., 7864.,  11000., 14648., 18808., 28596., 35604., 43380., 51924.,
      12600., 16760., 21432., 26616., 23480., 28664., 34360., 40568., 700.,
      2012.,  3580.,  5404.,  3128.,  5240.,  7864.,  11000., 5816.,  8952.,
      12600., 16760., 8244.,  12180., 16884., 22356., 14648., 18808., 23480.,
      28664., 15348., 20820., 27060., 34068., 23480., 28664., 34360., 40568.,
      12600., 16760., 21432., 26616., 350.,   1006.,  1790.,  2702.,  1884.,
      3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  6490.,  8970.,
      11834., 15082., 4956.,  6524.,  8348.,  10428., 12090., 15338., 18970.,
      22986., 7324.,  9404.,  11740., 14332., 12764., 15356., 18204., 21308.,
      700.,   2012.,  3580.,  5404.,  3128.,  5240.,  7864.,  11000., 5816.,
      8952.,  12600., 16760., 8244.,  12180., 16884., 22356., 14648., 18808.,
      23480., 28664., 15348., 20820., 27060., 34068., 23480., 28664., 34360.,
      40568., 12600., 16760., 21432., 26616., 380.,   1180.,  2236.,  3548.,
      5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000., 15348.,
      20820., 27060., 34068., 7864.,  11000., 14648., 18808., 28596., 35604.,
      43380., 51924., 12600., 16760., 21432., 26616., 23480., 28664., 34360.,
      40568., 890.,   2602.,  4698.,  7178.,  3668.,  6836.,  10772., 15476.,
      7700.,  12404., 17876., 24116., 11182., 16830., 23630., 31582., 20948.,
      27188., 34196., 41972., 20814., 28766., 37870., 48126., 34196., 41972.,
      50516., 59828., 19924., 26164., 33172., 40948., 380.,   1180.,  2236.,
      3548.,  5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000.,
      15348., 20820., 27060., 34068., 7864.,  11000., 14648., 18808., 28596.,
      35604., 43380., 51924., 12600., 16760., 21432., 26616., 23480., 28664.,
      34360., 40568., 890.,   2602.,  4698.,  7178.,  3668.,  6836.,  10772.,
      15476., 7700.,  12404., 17876., 24116., 11182., 16830., 23630., 31582.,
      20948., 27188., 34196., 41972., 20814., 28766., 37870., 48126., 34196.,
      41972., 50516., 59828., 19924., 26164., 33172., 40948., 380.,   1180.,
      2236.,  3548.,  5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,
      11000., 15348., 20820., 27060., 34068., 7864.,  11000., 14648., 18808.,
      28596., 35604., 43380., 51924., 12600., 16760., 21432., 26616., 23480.,
      28664., 34360., 40568., 700.,   2012.,  3580.,  5404.,  3128.,  5240.,
      7864.,  11000., 5816.,  8952.,  12600., 16760., 8244.,  12180., 16884.,
      22356., 14648., 18808., 23480., 28664., 15348., 20820., 27060., 34068.,
      23480., 28664., 34360., 40568., 12600., 16760., 21432., 26616., 350.,
      1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,
      4956.,  6524.,  6490.,  8970.,  11834., 15082., 4956.,  6524.,  8348.,
      10428., 12090., 15338., 18970., 22986., 7324.,  9404.,  11740., 14332.,
      12764., 15356., 18204., 21308., 700.,   2012.,  3580.,  5404.,  3128.,
      5240.,  7864.,  11000., 5816.,  8952.,  12600., 16760., 8244.,  12180.,
      16884., 22356., 14648., 18808., 23480., 28664., 15348., 20820., 27060.,
      34068., 23480., 28664., 34360., 40568., 12600., 16760., 21432., 26616.,
      380.,   1180.,  2236.,  3548.,  5816.,  8952.,  12600., 16760., 3128.,
      5240.,  7864.,  11000., 15348., 20820., 27060., 34068., 7864.,  11000.,
      14648., 18808., 28596., 35604., 43380., 51924., 12600., 16760., 21432.,
      26616., 23480., 28664., 34360., 40568., 890.,   2602.,  4698.,  7178.,
      3668.,  6836.,  10772., 15476., 7700.,  12404., 17876., 24116., 11182.,
      16830., 23630., 31582., 20948., 27188., 34196., 41972., 20814., 28766.,
      37870., 48126., 34196., 41972., 50516., 59828., 19924., 26164., 33172.,
      40948., 380.,   1180.,  2236.,  3548.,  5816.,  8952.,  12600., 16760.,
      3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068., 7864.,
      11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600., 16760.,
      21432., 26616., 23480., 28664., 34360., 40568., 890.,   2602.,  4698.,
      7178.,  3668.,  6836.,  10772., 15476., 7700.,  12404., 17876., 24116.,
      11182., 16830., 23630., 31582., 20948., 27188., 34196., 41972., 20814.,
      28766., 37870., 48126., 34196., 41972., 50516., 59828., 19924., 26164.,
      33172., 40948., 380.,   1180.,  2236.,  3548.,  5816.,  8952.,  12600.,
      16760., 3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068.,
      7864.,  11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600.,
      16760., 21432., 26616., 23480., 28664., 34360., 40568., 700.,   2012.,
      3580.,  5404.,  3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600.,
      16760., 8244.,  12180., 16884., 22356., 14648., 18808., 23480., 28664.,
      15348., 20820., 27060., 34068., 23480., 28664., 34360., 40568., 12600.,
      16760., 21432., 26616.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,
      1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,
      4956.,  6524.,  3742.,  4910.,  6206.,  7630.,  190.,   590.,   1118.,
      1774.,  0.,     0.,     0.,     0.,     190.,   590.,   1118.,  1774.,
      350.,   1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,
      3644.,  4956.,  6524.,  3932.,  5500.,  7324.,  9404.,  190.,   590.,
      1118.,  1774.,  1374.,  2030.,  2814.,  3726.,  0.,     0.,     0.,
      0.,     700.,   2012.,  3580.,  5404.,  3068.,  4892.,  6972.,  9308.,
      7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664., 7864.,
      11000., 14648., 18808., 11580., 13916., 16508., 19356., 3068.,  4892.,
      6972.,  9308.,  0.,     0.,     0.,     0.,     3068.,  4892.,  6972.,
      9308.,  4796.,  6108.,  7676.,  9500.,  14648., 18808., 23480., 28664.,
      7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664., 3068.,
      4892.,  6972.,  9308.,  7484.,  9820.,  12412., 15260., 0.,     0.,
      0.,     0.,     4796.,  6108.,  7676.,  9500.,  7164.,  8988.,  11068.,
      13404., 7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664.,
      7864.,  11000., 14648., 18808., 7484.,  9820.,  12412., 15260., 7164.,
      8988.,  11068., 13404., 0.,     0.,     0.,     0.,     6974.,  8398.,
      9950.,  11630., 350.,   1006.,  1790.,  2702.,  12764., 15356., 18204.,
      21308., 5276.,  7356.,  9692.,  12284., 10716., 13308., 16156., 19260.,
      6974.,  8398.,  9950.,  11630., 10206., 11886., 13694., 15630., 0.,
      0.,     0.,     0.,     350.,   1006.,  1790.,  2702.,  2558.,  3470.,
      4510.,  5678.,  5276.,  7356.,  9692.,  12284., 10716., 13308., 16156.,
      19260., 7324.,  9404.,  11740., 14332., 10206., 11886., 13694., 15630.,
      510.,   1422.,  2462.,  3630.,  0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     30.,    174.,   446.,   846.,   190.,
      590.,   1118.,  1774.,  540.,   1596.,  2908.,  4476.,  1884.,  3452.,
      5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  3742.,  4910.,  6206.,
      7630.,  190.,   590.,   1118.,  1774.,  0.,     0.,     0.,     0.,
      190.,   590.,   1118.,  1774.,  350.,   1006.,  1790.,  2702.,  1884.,
      3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  3932.,  5500.,
      7324.,  9404.,  190.,   590.,   1118.,  1774.,  1374.,  2030.,  2814.,
      3726.,  0.,     0.,     0.,     0.,     700.,   2012.,  3580.,  5404.,
      3068.,  4892.,  6972.,  9308.,  7864.,  11000., 14648., 18808., 14648.,
      18808., 23480., 28664., 7864.,  11000., 14648., 18808., 11580., 13916.,
      16508., 19356., 3068.,  4892.,  6972.,  9308.,  0.,     0.,     0.,
      0.,     3068.,  4892.,  6972.,  9308.,  4796.,  6108.,  7676.,  9500.,
      14648., 18808., 23480., 28664., 7864.,  11000., 14648., 18808., 14648.,
      18808., 23480., 28664., 3068.,  4892.,  6972.,  9308.,  7484.,  9820.,
      12412., 15260., 0.,     0.,     0.,     0.,     4796.,  6108.,  7676.,
      9500.,  7164.,  8988.,  11068., 13404., 7864.,  11000., 14648., 18808.,
      14648., 18808., 23480., 28664., 7864.,  11000., 14648., 18808., 7484.,
      9820.,  12412., 15260., 7164.,  8988.,  11068., 13404., 0.,     0.,
      0.,     0.,     6974.,  8398.,  9950.,  11630., 350.,   1006.,  1790.,
      2702.,  12764., 15356., 18204., 21308., 5276.,  7356.,  9692.,  12284.,
      10716., 13308., 16156., 19260., 6974.,  8398.,  9950.,  11630., 10206.,
      11886., 13694., 15630., 0.,     0.,     0.,     0.,     350.,   1006.,
      1790.,  2702.,  2558.,  3470.,  4510.,  5678.,  5276.,  7356.,  9692.,
      12284., 10716., 13308., 16156., 19260., 7324.,  9404.,  11740., 14332.,
      10206., 11886., 13694., 15630., 510.,   1422.,  2462.,  3630.,  0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     30.,
      174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,   1596.,
      2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,
      6524.,  3742.,  4910.,  6206.,  7630.,  190.,   590.,   1118.,  1774.,
      0.,     0.,     0.,     0.,     190.,   590.,   1118.,  1774.,  350.,
      1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,
      4956.,  6524.,  3932.,  5500.,  7324.,  9404.,  190.,   590.,   1118.,
      1774.,  1374.,  2030.,  2814.,  3726.,  0.,     0.,     0.,     0.,
      700.,   2012.,  3580.,  5404.,  3068.,  4892.,  6972.,  9308.,  7864.,
      11000., 14648., 18808., 14648., 18808., 23480., 28664., 7864.,  11000.,
      14648., 18808., 11580., 13916., 16508., 19356., 3068.,  4892.,  6972.,
      9308.,  0.,     0.,     0.,     0.,     3068.,  4892.,  6972.,  9308.,
      4796.,  6108.,  7676.,  9500.,  14648., 18808., 23480., 28664., 7864.,
      11000., 14648., 18808., 14648., 18808., 23480., 28664., 3068.,  4892.,
      6972.,  9308.,  7484.,  9820.,  12412., 15260., 0.,     0.,     0.,
      0.,     4796.,  6108.,  7676.,  9500.,  7164.,  8988.,  11068., 13404.,
      7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664., 7864.,
      11000., 14648., 18808., 7484.,  9820.,  12412., 15260., 7164.,  8988.,
      11068., 13404., 0.,     0.,     0.,     0.,     6974.,  8398.,  9950.,
      11630., 350.,   1006.,  1790.,  2702.,  12764., 15356., 18204., 21308.,
      5276.,  7356.,  9692.,  12284., 10716., 13308., 16156., 19260., 6974.,
      8398.,  9950.,  11630., 10206., 11886., 13694., 15630., 0.,     0.,
      0.,     0.,     350.,   1006.,  1790.,  2702.,  2558.,  3470.,  4510.,
      5678.,  5276.,  7356.,  9692.,  12284., 10716., 13308., 16156., 19260.,
      7324.,  9404.,  11740., 14332., 10206., 11886., 13694., 15630., 510.,
      1422.,  2462.,  3630.,  0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,    20.,   23.,   44.,   39.,   68.,   55.,   92.,   71.,   80.,
      24.,   60.,   76.,   133.,  108.,  181.,  140.,  229.,  172.,  200.,
      59.,   140.,  156.,  268.,  208.,  346.,  260.,  424.,  312.,  340.,
      116.,  265.,  304.,  507.,  382.,  624.,  460.,  741.,  538.,  595.,
      179.,  380.,  416.,  658.,  468.,  736.,  520.,  814.,  572.,  620.,
      296.,  625.,  694.,  1092., 772.,  1209., 850.,  1326., 928.,  1015.,
      299.,  620.,  676.,  1048., 728.,  1126., 780.,  1204., 832.,  900.,
      434.,  900.,  956.,  1483., 1028., 1591., 1100., 1699., 1172., 1240.,
      147.,  300.,  343.,  524.,  359.,  548.,  375.,  572.,  391.,  440.,
      304.,  620.,  716.,  1093., 748.,  1141., 780.,  1189., 812.,  920.,
      539.,  1100., 1196., 1828., 1248., 1906., 1300., 1984., 1352., 1460.,
      836.,  1705., 1864., 2847., 1942., 2964., 2020., 3081., 2098., 2275.,
      659.,  1340., 1456., 2218., 1508., 2296., 1560., 2374., 1612., 1740.,
      1016., 2065., 2254., 3432., 2332., 3549., 2410., 3666., 2488., 2695.,
      779.,  1580., 1716., 2608., 1768., 2686., 1820., 2764., 1872., 2020.,
      1114., 2260., 2396., 3643., 2468., 3751., 2540., 3859., 2612., 2760.,
      287.,  580.,  663.,  1004., 679.,  1028., 695.,  1052., 711.,  800.,
      584.,  1180., 1356., 2053., 1388., 2101., 1420., 2149., 1452., 1640.,
      1019., 2060., 2236., 3388., 2288., 3466., 2340., 3544., 2392., 2580.,
      1556., 3145., 3424., 5187., 3502., 5304., 3580., 5421., 3658., 3955.,
      1139., 2300., 2496., 3778., 2548., 3856., 2600., 3934., 2652., 2860.,
      1736., 3505., 3814., 5772., 3892., 5889., 3970., 6006., 4048., 4375.,
      1259., 2540., 2756., 4168., 2808., 4246., 2860., 4324., 2912., 3140.,
      1794., 3620., 3836., 5803., 3908., 5911., 3980., 6019., 4052., 4280.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   14.,   14.,   19.,   12.,   15.,   0.,   6.,
      7.,   20.,  23.,  44.,  39.,   44.,   27.,   30.,   0.,    15.,  20.,
      52.,  64.,  115., 96.,  112.,  66.,   75.,   0.,    40.,   45.,  112.,
      124., 220., 176., 192., 111.,  120.,  0.,    65.,   70.,   172., 184.,
      325., 256., 272., 156., 165.,  0.,    64.,   68.,   152.,  161., 266.,
      197., 208., 114., 120., 0.,    84.,   88.,   197.,  206.,  341., 252.,
      263., 144., 150., 0.,   0.,    0.,    0.,    0.,    0.,    0.,   0.,
      0.,   0.,   0.,   7.,   14.,   29.,   44.,   68.,   50.,   67.,  36.,
      45.,  0.,   42.,  49.,  104.,  119.,  188.,  135.,  152.,  81.,  90.,
      0.,   87.,  104., 220., 256.,  403.,  288.,  328.,  174.,  195., 0.,
      172., 189., 400., 436., 688.,  488.,  528.,  279.,  300.,  0.,   257.,
      274., 580., 616., 973., 688.,  728.,  384.,  405.,  0.,    160., 170.,
      356., 377., 590., 413., 436.,  228.,  240.,  0.,    210.,  220., 461.,
      482., 755., 528., 551., 288.,  300.,  0.,    0.,    0.,    0.,   0.,
      0.,   0.,   0.,   0.,   0.,    0.,    13.,   26.,   53.,   80.,  122.,
      86.,  115., 60.,  75.,  0.,    78.,   91.,   188.,  215.,  332., 231.,
      260., 135., 150., 0.,   159.,  188.,  388.,  448.,  691.,  480., 544.,
      282., 315., 0.,   304., 333.,  688.,  748.,  1156., 800.,  864., 447.,
      480., 0.,   449., 478., 988.,  1048., 1621., 1120., 1184., 612., 645.,
      0.,   256., 272., 560., 593.,  914.,  629.,  664.,  342.,  360., 0.,
      336., 352., 725., 758., 1169., 804.,  839.,  432.,  450.,  0.,   0.,
      0.,   0.,   0.,   0.,   0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,    128.,   148.,   295.,   272.,   481.,   396.,   667.,   520.,
      588.,   152.,   396.,   516.,   920.,   764.,   1292.,  1012.,  1664.,
      1260.,  1476.,  412.,   996.,   1116.,  1940.,  1524.,  2552.,  1932.,
      3164.,  2340.,  2556.,  823.,   1904.,  2204.,  3705.,  2816.,  4623.,
      3428.,  5541.,  4040.,  4484.,  1352.,  2876.,  3156.,  5000.,  3564.,
      5612.,  3972.,  6224.,  4380.,  4756.,  2233.,  4724.,  5264.,  8295.,
      5876.,  9213.,  6488.,  10131., 7100.,  7784.,  2292.,  4756.,  5196.,
      8060.,  5604.,  8672.,  6012.,  9284.,  6420.,  6956.,  3352.,  6956.,
      7396.,  11480., 7964.,  12332., 8532.,  13184., 9100.,  9636.,  1121.,
      2288.,  2628.,  4015.,  2752.,  4201.,  2876.,  4387.,  3000.,  3388.,
      2312.,  4716.,  5476.,  8360.,  5724.,  8732.,  5972.,  9104.,  6220.,
      7076.,  4172.,  8516.,  9276.,  14180., 9684.,  14792., 10092., 15404.,
      10500., 11356., 6463.,  13184., 14444., 22065., 15056., 22983., 15668.,
      23901., 16280., 17684., 5112.,  10396., 11316., 17240., 11724., 17852.,
      12132., 18464., 12540., 13556., 7873.,  16004., 17504., 26655., 18116.,
      27573., 18728., 28491., 19340., 20984., 6052.,  12276., 13356., 20300.,
      13764., 20912., 14172., 21524., 14580., 15756., 8712.,  17676., 18756.,
      28520., 19324., 29372., 19892., 30224., 20460., 21636., 2201.,  4448.,
      5108.,  7735.,  5232.,  7921.,  5356.,  8107.,  5480.,  6188.,  4472.,
      9036.,  10436., 15800., 10684., 16172., 10932., 16544., 11180., 12676.,
      7932.,  16036., 17436., 26420., 17844., 27032., 18252., 27644., 18660.,
      20156., 12103., 24464., 26684., 40425., 27296., 41343., 27908., 42261.,
      28520., 30884., 8872.,  17916., 19476., 29480., 19884., 30092., 20292.,
      30704., 20700., 22356., 13513., 27284., 29744., 45015., 30356., 45933.,
      30968., 46851., 31580., 34184., 9812.,  19796., 21516., 32540., 21924.,
      33152., 22332., 33764., 22740., 24556., 14072., 28396., 30116., 45560.,
      30684., 46412., 31252., 47264., 31820., 33636.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   85.,    92.,   128.,  83.,   105.,  0.,
      35.,   41.,   128.,  148.,  295.,   272.,  308.,  193.,  215.,  0.,
      88.,   124.,  340.,  428.,  788.,   676.,  796.,  476.,  544.,  0.,
      268.,  304.,  780.,  868.,  1568.,  1276., 1396., 816.,  884.,  0.,
      448.,  484.,  1220., 1308., 2348.,  1876., 1996., 1156., 1224., 0.,
      473.,  503.,  1132., 1200., 1993.,  1484., 1568., 863.,  909.,  0.,
      623.,  653.,  1472., 1540., 2563.,  1904., 1988., 1093., 1139., 0.,
      0.,    0.,    0.,    0.,    0.,     0.,    0.,    0.,    0.,    0.,
      41.,   95.,   196.,  312.,  481.,   356.,  488.,  263.,  333.,  0.,
      311.,  365.,  776.,  892.,  1411.,  1016., 1148., 613.,  683.,  0.,
      640.,  772.,  1636., 1916., 3020.,  2164., 2476., 1316., 1480., 0.,
      1300., 1432., 3036., 3316., 5240.,  3724., 4036., 2136., 2300., 0.,
      1960., 2092., 4436., 4716., 7460.,  5284., 5596., 2956., 3120., 0.,
      1229., 1307., 2740., 2904., 4549.,  3188., 3368., 1763., 1857., 0.,
      1619., 1697., 3560., 3724., 5839.,  4088., 4268., 2233., 2327., 0.,
      0.,    0.,    0.,    0.,    0.,     0.,    0.,    0.,    0.,    0.,
      77.,   179.,  364.,  576.,  877.,   620.,  848.,  443.,  561.,  0.,
      587.,  689.,  1424., 1636., 2527.,  1760., 1988., 1033., 1151., 0.,
      1192., 1420., 2932., 3404., 5252.,  3652., 4156., 2156., 2416., 0.,
      2332., 2560., 5292., 5764., 8912.,  6172., 6676., 3456., 3716., 0.,
      3472., 3700., 7652., 8124., 12572., 8692., 9196., 4756., 5016., 0.,
      1985., 2111., 4348., 4608., 7105.,  4892., 5168., 2663., 2805., 0.,
      2615., 2741., 5648., 5908., 9115.,  6272., 6548., 3373., 3515., 0.,
      0.,    0.,    0.,    0.,    0.,     0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,   900.,   1044.,  2138.,  2020.,  3602.,  2996.,  5066.,  3972.,
      4500.,  1060.,  2840.,  3768.,  6796.,  5720.,  9724.,  7672.,  12652.,
      9624.,  11320., 2420.,  6840.,  6104.,  12412., 7288.,  15212., 8472.,
      18012., 9656.,  11352., 5530.,  12076., 14428., 23262., 17228., 27462.,
      20028., 31662., 22828., 26332., 4740.,  16600., 12024., 26412., 13208.,
      29212., 14392., 32012., 15576., 18552., 11570., 23516., 26764., 40934.,
      25852., 40398., 28652., 44598., 31452., 34828., 7060.,  20600., 11160.,
      26844., 3512.,  19788., 4696.,  22588., 5880.,  8088.,  15460., 21016.,
      23480., 30796., 11992., 19516., 14456., 23212., 16920., 19128., 1966.,
      4292.,  4948.,  7994.,  5924.,  9458.,  6900.,  10922., 7876.,  8916.,
      4452.,  9624.,  11576., 18508., 13528., 21436., 15480., 24364., 17432.,
      20152., 4276.,  14648., 10840., 23612., 12024., 26412., 13208., 29212.,
      14392., 17112., 10362., 21740., 25628., 39422., 26764., 40934., 25852.,
      40398., 28652., 31644., 6596.,  24408., 16760., 31852., 11160., 26844.,
      3512.,  19788., 4696.,  6648.,  14738., 30492., 34252., 42118., 25148.,
      33390., 13996., 22614., 16796., 19660., 2132.,  20600., 7064.,  12188.,
      7608.,  13324., 6104.,  12412., 7288.,  8472.,  7972.,  16920., 19384.,
      25868., 16088., 22780., 10744., 17644., 13208., 14392., 3662.,  7684.,
      8852.,  13850., 9828.,  15314., 10804., 16778., 11780., 13332., 7844.,
      16408., 19384., 30220., 21336., 32508., 21624., 32748., 19864., 21560.,
      6132.,  22456., 15576., 34812., 16760., 31852., 11160., 26844., 3512.,
      5208.,  13530., 28076., 31452., 48798., 34252., 42118., 25148., 33390.,
      13996., 16476., 1668.,  18648., 5880.,  25388., 7064.,  12188., 7608.,
      13324., 6104.,  7032.,  7666.,  16348., 19596., 31014., 22396., 30478.,
      19436., 27894., 14428., 16780., 3348.,  10744., 8472.,  18012., 9656.,
      20812., 10840., 23612., 12024., 14232., 6628.,  14232., 15672., 25036.,
      18136., 28732., 20600., 32428., 23064., 25272.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   578.,   660.,   932.,   614.,   782.,
      0.,     230.,   270.,   900.,   1044.,  2138.,  2020.,  2292.,  1454.,
      1622.,  0.,     580.,   852.,   2424.,  3096.,  5788.,  5048.,  5976.,
      3604.,  4132.,  0.,     1940.,  1572.,  5144.,  4152.,  9484.,  5336.,
      6264.,  3556.,  4084.,  0.,     2660.,  2932.,  6840.,  7512.,  12796.,
      9976.,  10904., 6196.,  6724.,  0.,     3630.,  150.,   5012.,  804.,
      6962.,  1012.,  1668.,  950.,   1310.,  0.,     1078.,  1310.,  2916.,
      3444.,  5642.,  4292.,  4948.,  2750.,  3110.,  0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     270.,
      694.,   1428.,  2340.,  3602.,  2676.,  3716.,  2006.,  2558.,  0.,
      2390.,  2814.,  5988.,  6900.,  10922., 7876.,  8916.,  4766.,  5318.,
      0.,     4900.,  5940.,  12600., 14808., 23356., 16760., 19224., 10228.,
      11524., 0.,     10100., 4356.,  16856., 11256., 26284., 12440., 14904.,
      7876.,  9172.,  0.,     8516.,  9556.,  20088., 22296., 34972., 24760.,
      27224., 14356., 15652., 0.,     9630.,  390.,   11636., 2052.,  14978.,
      2260.,  3684.,  1958.,  2702.,  0.,     2854.,  3470.,  7236.,  8532.,
      13274., 9380.,  10804., 5678.,  6422.,  0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     510.,   1318.,
      2676.,  4356.,  6626.,  4692.,  6500.,  3398.,  4334.,  0.,     4550.,
      5358.,  11076., 12756., 19706., 13732., 15540., 8078.,  9014.,  0.,
      9220.,  11028., 22136., 24856., 37596., 23096., 25048., 13140., 14180.,
      0.,     18260., 7140.,  22808., 11576., 29516., 3928.,  5880.,  3364.,
      4404.,  0.,     14372., 16180., 22456., 25176., 33340., 13688., 15640.,
      8564.,  9604.,  0.,     15630., 630.,   2260.,  2660.,  5330.,  180.,
      324.,   278.,   382.,   0.,     4630.,  5630.,  6820.,  7860.,  9386.,
      900.,   1044.,  798.,   902.,   0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,    28.,    48.,    80.,    56.,    92.,    119.,   176.,   116.,
      156.,   209.,   272.,   176.,   220.,   299.,   368.,   236.,   284.,
      268.,   320.,   56.,    96.,    156.,   240.,   212.,   304.,   388.,
      532.,   332.,   432.,   568.,   724.,   452.,   560.,   748.,   916.,
      572.,   688.,   676.,   800.,   176.,   236.,   436.,   560.,   492.,
      624.,   868.,   1072.,  692.,   832.,   1168.,  1384.,  892.,   1040.,
      1468.,  1696.,  1092.,  1248.,  1196.,  1360.,  359.,   464.,   844.,
      1060.,  988.,   1216.,  1677.,  2028.,  1288.,  1528.,  2127.,  2496.,
      1588.,  1840.,  2577.,  2964.,  1888.,  2152.,  2104.,  2380.,  636.,
      716.,   1356.,  1520.,  1492.,  1664.,  2368.,  2632.,  1692.,  1872.,
      2668.,  2944.,  1892.,  2080.,  2968.,  3256.,  2092.,  2288.,  2276.,
      2480.,  1049.,  1184.,  2224.,  2500.,  2488.,  2776.,  3927.,  4368.,
      2788.,  3088.,  4377.,  4836.,  3088.,  3400.,  4827.,  5304.,  3388.,
      3712.,  3724.,  4060.,  1096.,  1196.,  2276.,  2480.,  2492.,  2704.,
      3868.,  4192.,  2692.,  2912.,  4168.,  4504.,  2892.,  3120.,  4468.,
      4816.,  3092.,  3328.,  3356.,  3600.,  1616.,  1736.,  3356.,  3600.,
      3572.,  3824.,  5548.,  5932.,  3852.,  4112.,  5968.,  6364.,  4132.,
      4400.,  6388.,  6796.,  4412.,  4688.,  4676.,  4960.,  533.,   588.,
      1088.,  1200.,  1256.,  1372.,  1919.,  2096.,  1316.,  1436.,  2009.,
      2192.,  1376.,  1500.,  2099.,  2288.,  1436.,  1564.,  1628.,  1760.,
      1096.,  1216.,  2236.,  2480.,  2612.,  2864.,  3988.,  4372.,  2732.,
      2992.,  4168.,  4564.,  2852.,  3120.,  4348.,  4756.,  2972.,  3248.,
      3396.,  3680.,  2016.,  2156.,  4116.,  4400.,  4492.,  4784.,  6868.,
      7312.,  4692.,  4992.,  7168.,  7624.,  4892.,  5200.,  7468.,  7936.,
      5092.,  5408.,  5516.,  5840.,  3119.,  3344.,  6364.,  6820.,  6988.,
      7456.,  10677., 11388., 7288.,  7768.,  11127., 11856., 7588.,  8080.,
      11577., 12324., 7888.,  8392.,  8584.,  9100.,  2476.,  2636.,  5036.,
      5360.,  5492.,  5824.,  8368.,  8872.,  5692.,  6032.,  8668.,  9184.,
      5892.,  6240.,  8968.,  9496.,  6092.,  6448.,  6596.,  6960.,  3809.,
      4064.,  7744.,  8260.,  8488.,  9016.,  12927., 13728., 8788.,  9328.,
      13377., 14196., 9088.,  9640.,  13827., 14664., 9388.,  9952.,  10204.,
      10780., 2936.,  3116.,  5956.,  6320.,  6492.,  6864.,  9868.,  10432.,
      6692.,  7072.,  10168., 10744., 6892.,  7280.,  10468., 11056., 7092.,
      7488.,  7676.,  8080.,  4256.,  4456.,  8636.,  9040.,  9172.,  9584.,
      13948., 14572., 9452.,  9872.,  14368., 15004., 9732.,  10160., 14788.,
      15436., 10012., 10448., 10596., 11040., 1053.,  1148.,  2128.,  2320.,
      2456.,  2652.,  3719.,  4016.,  2516.,  2716.,  3809.,  4112.,  2576.,
      2780.,  3899.,  4208.,  2636.,  2844.,  2988.,  3200.,  2136.,  2336.,
      4316.,  4720.,  5012.,  5424.,  7588.,  8212.,  5132.,  5552.,  7768.,
      8404.,  5252.,  5680.,  7948.,  8596.,  5372.,  5808.,  6116.,  6560.,
      3856.,  4076.,  7796.,  8240.,  8492.,  8944.,  12868., 13552., 8692.,
      9152.,  13168., 13864., 8892.,  9360.,  13468., 14176., 9092.,  9568.,
      9836.,  10320., 5879.,  6224.,  11884., 12580., 12988., 13696., 19677.,
      20748., 13288., 14008., 20127., 21216., 13588., 14320., 20577., 21684.,
      13888., 14632., 15064., 15820., 4316.,  4556.,  8716.,  9200.,  9492.,
      9984.,  14368., 15112., 9692.,  10192., 14668., 15424., 9892.,  10400.,
      14968., 15736., 10092., 10608., 10916., 11440., 6569.,  6944.,  13264.,
      14020., 14488., 15256., 21927., 23088., 14788., 15568., 22377., 23556.,
      15088., 15880., 22827., 24024., 15388., 16192., 16684., 17500., 4776.,
      5036.,  9636.,  10160., 10492., 11024., 15868., 16672., 10692., 11232.,
      16168., 16984., 10892., 11440., 16468., 17296., 11092., 11648., 11996.,
      12560., 6896.,  7176.,  13916., 14480., 14772., 15344., 22348., 23212.,
      15052., 15632., 22768., 23644., 15332., 15920., 23188., 24076., 15612.,
      16208., 16516., 17120.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,   32.,   29.,   56.,
      36.,   56.,   52.,   76.,   35.,   48.,   45.,   60.,   0.,    0.,
      11.,   24.,   13.,   28.,   48.,   80.,   56.,   92.,   119.,  176.,
      116.,  156.,  132.,  176.,  85.,   108.,  95.,   120.,  0.,    0.,
      28.,   60.,   44.,   80.,   132.,  208.,  172.,  256.,  328.,  460.,
      292.,  384.,  348.,  448.,  212.,  264.,  244.,  300.,  0.,    0.,
      108.,  160.,  124.,  180.,  332.,  448.,  372.,  496.,  688.,  880.,
      572.,  704.,  628.,  768.,  372.,  444.,  404.,  480.,  0.,    0.,
      188.,  260.,  204.,  280.,  532.,  688.,  572.,  736.,  1048., 1300.,
      852.,  1024., 908.,  1088., 532.,  624.,  564.,  660.,  0.,    0.,
      217.,  256.,  231.,  272.,  524.,  608.,  556.,  644.,  929.,  1064.,
      696.,  788.,  736.,  832.,  407.,  456.,  429.,  480.,  0.,    0.,
      287.,  336.,  301.,  352.,  684.,  788.,  716.,  824.,  1199., 1364.,
      896.,  1008., 936.,  1052., 517.,  576.,  539.,  600.,  0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      13.,   28.,   39.,   56.,   80.,   116.,  136.,  176.,  209.,  272.,
      156.,  200.,  220.,  268.,  119.,  144.,  153.,  180.,  0.,    0.,
      143.,  168.,  169.,  196.,  360.,  416.,  416.,  476.,  659.,  752.,
      476.,  540.,  540.,  608.,  289.,  324.,  323.,  360.,  0.,    0.,
      292.,  348.,  356.,  416.,  756.,  880.,  892.,  1024., 1408., 1612.,
      1012., 1152., 1164., 1312., 620.,  696.,  700.,  780.,  0.,    0.,
      612.,  688.,  676.,  756.,  1436., 1600., 1572., 1744., 2488., 2752.,
      1772., 1952., 1924., 2112., 1020., 1116., 1100., 1200., 0.,    0.,
      932.,  1028., 996.,  1096., 2116., 2320., 2252., 2464., 3568., 3892.,
      2532., 2752., 2684., 2912., 1420., 1536., 1500., 1620., 0.,    0.,
      589.,  640.,  627.,  680.,  1316., 1424., 1396., 1508., 2189., 2360.,
      1536., 1652., 1624., 1744., 851.,  912.,  897.,  960.,  0.,    0.,
      779.,  840.,  817.,  880.,  1716., 1844., 1796., 1928., 2819., 3020.,
      1976., 2112., 2064., 2204., 1081., 1152., 1127., 1200., 0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      25.,   52.,   75.,   104.,  152.,  212.,  256.,  320.,  389.,  488.,
      276.,  344.,  388.,  460.,  203.,  240.,  261.,  300.,  0.,    0.,
      275.,  312.,  325.,  364.,  672.,  752.,  776.,  860.,  1199., 1328.,
      836.,  924.,  948.,  1040., 493.,  540.,  551.,  600.,  0.,    0.,
      556.,  636.,  668.,  752.,  1380., 1552., 1612., 1792., 2488., 2764.,
      1732., 1920., 1980., 2176., 1028., 1128., 1156., 1260., 0.,    0.,
      1116., 1216., 1228., 1332., 2540., 2752., 2772., 2992., 4288., 4624.,
      2972., 3200., 3220., 3456., 1668., 1788., 1796., 1920., 0.,    0.,
      1676., 1796., 1788., 1912., 3700., 3952., 3932., 4192., 6088., 6484.,
      4212., 4480., 4460., 4736., 2308., 2448., 2436., 2580., 0.,    0.,
      961.,  1024., 1023., 1088., 2108., 2240., 2236., 2372., 3449., 3656.,
      2376., 2516., 2512., 2656., 1295., 1368., 1365., 1440., 0.,    0.,
      1271., 1344., 1333., 1408., 2748., 2900., 2876., 3032., 4439., 4676.,
      3056., 3216., 3192., 3356., 1645., 1728., 1715., 1800., 0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    193.,   326.,   574.,   382.,   662.,   847.,   1291.,  854.,
      1166.,  1555.,  2047.,  1326.,  1670.,  2263.,  2803.,  1798.,  2174.,
      2046.,  2454.,  374.,   686.,   1092.,  1748.,  1524.,  2244.,  2834.,
      3962.,  2468.,  3252.,  4250.,  5474.,  3412.,  4260.,  5666.,  6986.,
      4356.,  5268.,  5172.,  6148.,  1102.,  1318.,  3060.,  3780.,  2788.,
      3316.,  5658.,  6754.,  3348.,  3940.,  7010.,  8202.,  3908.,  4564.,
      8362.,  9650.,  4468.,  5188.,  5284.,  6068.,  2479.,  3051.,  5442.,
      6634.,  6570.,  7858.,  10629., 12633., 7922.,  9306.,  12657., 14805.,
      9274.,  10754., 14685., 16977., 10626., 12202., 12330., 14002., 2182.,
      2558.,  7780.,  8820.,  5588.,  6436.,  12418., 13994., 6148.,  7060.,
      13770., 15442., 6708.,  7684.,  15122., 16890., 7268.,  8308.,  8724.,
      9828.,  5379.,  6191.,  11050., 12466., 12626., 14138., 19361., 21573.,
      12250., 13602., 19149., 21249., 13602., 15050., 21177., 23421., 14954.,
      16498., 16594., 18234., 3262.,  3798.,  9748.,  10852., 5124.,  6036.,
      12650., 14194., 1396.,  2116.,  9202.,  10586., 1956.,  2740.,  10554.,
      12034., 2516.,  3364.,  3588.,  4500.,  7382.,  8078.,  9924.,  11092.,
      11124., 12356., 14514., 16282., 5476.,  6516.,  8954.,  10562., 6676.,
      7780.,  10754., 12458., 7876.,  9044.,  8948.,  10180., 893.,   1073.,
      1958.,  2334.,  2270.,  2678.,  3679.,  4315.,  2742.,  3182.,  4387.,
      5071.,  3214.,  3686.,  5095.,  5827.,  3686.,  4190.,  4190.,  4726.,
      2006.,  2446.,  4356.,  5268.,  5300.,  6276.,  8498.,  10010., 6244.,
      7284.,  9914.,  11522., 7188.,  8292.,  11330., 13034., 8132.,  9300.,
      9460.,  10692., 1966.,  2310.,  6836.,  7812.,  5028.,  5812.,  11066.,
      12546., 5588.,  6436.,  12418., 13994., 6148.,  7060.,  13770., 15442.,
      6708.,  7684.,  8036.,  9076.,  4799.,  5563.,  10082., 11658., 11978.,
      13650., 18549., 20873., 12626., 14138., 19361., 21573., 12250., 13602.,
      19149., 21249., 13602., 15050., 15050., 16594., 3046.,  3550.,  11556.,
      12852., 7828.,  8932.,  15074., 16778., 5124.,  6036.,  12650., 14194.,
      1396.,  2116.,  9202.,  10586., 1956.,  2740.,  2900.,  3748.,  6995.,
      7743.,  14474., 16018., 16306., 17946., 19921., 22197., 11834., 13314.,
      15613., 17777., 6338.,  7658.,  10281., 12333., 7690.,  9106.,  9074.,
      10586., 862.,   1270.,  9748.,  10852., 3076.,  3988.,  5386.,  6802.,
      3444.,  4164.,  6034.,  7290.,  2788.,  3316.,  5658.,  6754.,  3348.,
      3940.,  3908.,  4564.,  3702.,  4270.,  7876.,  9044.,  9076.,  10308.,
      12114., 13754., 7524.,  8564.,  10650., 12130., 4948.,  5796.,  8162.,
      9482.,  6148.,  7060.,  6708.,  7684.,  1709.,  1953.,  3590.,  4094.,
      4158.,  4694.,  6511.,  7339.,  4630.,  5198.,  7219.,  8095.,  5102.,
      5702.,  7927.,  8851.,  5574.,  6206.,  6334.,  6998.,  3638.,  4206.,
      7620.,  8788.,  9076.,  10308., 14162., 16058., 10020., 11316., 15386.,
      17122., 10260., 11364., 15586., 17162., 9476.,  10388., 10292., 11268.,
      2830.,  3302.,  10612., 11844., 7268.,  8308.,  16474., 18338., 7828.,
      8932.,  15074., 16778., 5124.,  6036.,  12650., 14194., 1396.,  2116.,
      2212.,  2996.,  6415.,  7115.,  13314., 14762., 14954., 16498., 23205.,
      25593., 16306., 17946., 19921., 22197., 11834., 13314., 15613., 17777.,
      6338.,  7658.,  7530.,  8946.,  646.,   1022.,  8804.,  9844.,  2516.,
      3364.,  11906., 13482., 3076.,  3988.,  5386.,  6802.,  3444.,  4164.,
      6034.,  7290.,  2788.,  3316.,  3220.,  3812.,  3491.,  4175.,  7466.,
      8882.,  9042.,  10554., 14337., 16677., 10394., 12002., 14125., 16353.,
      8994.,  10442., 12889., 15005., 6570.,  7858.,  7698.,  9082.,  1534.,
      1814.,  4948.,  5796.,  3908.,  4564.,  8362.,  9650.,  4468.,  5188.,
      9714.,  11098., 5028.,  5812.,  11066., 12546., 5588.,  6436.,  6660.,
      7572.,  3094.,  3534.,  6660.,  7572.,  7348.,  8324.,  11762., 13274.,
      8548.,  9588.,  13562., 15170., 9748.,  10852., 15362., 17066., 10948.,
      12116., 12020., 13252.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    17.,    53.,    46.,    134.,   102.,   222.,   187.,
      391.,   254.,   406.,   374.,   558.,   257.,   357.,   333.,   449.,
      0.,     0.,     65.,    165.,   77.,    193.,   326.,   574.,   382.,
      662.,   847.,   1291.,  854.,   1166.,  974.,   1318.,  637.,   817.,
      713.,   909.,   0.,     0.,     166.,   414.,   286.,   566.,   916.,
      1508.,  1220.,  1876.,  2378.,  3410.,  2164.,  2884.,  2596.,  3380.,
      1598.,  2006.,  1846.,  2286.,  0.,     0.,     766.,   1174.,  886.,
      1326.,  2436.,  3348.,  2740.,  3716.,  5138.,  6650.,  4324.,  5364.,
      4756.,  5860.,  2838.,  3406.,  3086.,  3686.,  0.,     0.,     1366.,
      1934.,  1486.,  2086.,  3956.,  5188.,  4260.,  5556.,  7898.,  9890.,
      6484.,  7844.,  6916.,  8340.,  4078.,  4806.,  4326.,  5086.,  0.,
      0.,     1661.,  1969.,  1769.,  2093.,  4030.,  4694.,  4278.,  4974.,
      7171.,  8239.,  5390.,  6118.,  5702.,  6462.,  3161.,  3549.,  3333.,
      3737.,  0.,     0.,     2201.,  2589.,  2309.,  2713.,  5270.,  6094.,
      5518.,  6374.,  9271.,  10579., 6950.,  7838.,  7262.,  8182.,  4021.,
      4489.,  4193.,  4677.,  0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     77.,    193.,
      281.,   413.,   574.,   854.,   1014.,  1326.,  1555.,  2047.,  1166.,
      1510.,  1670.,  2046.,  905.,   1101.,  1173.,  1385.,  0.,     0.,
      1097.,  1293.,  1301.,  1513.,  2774.,  3214.,  3214.,  3686.,  5095.,
      5827.,  3686.,  4190.,  4190.,  4726.,  2245.,  2521.,  2513.,  2805.,
      0.,     0.,     2230.,  2670.,  2734.,  3206.,  5812.,  6788.,  6884.,
      7924.,  10874., 12482., 7828.,  8932.,  9028.,  10196., 4814.,  5414.,
      5446.,  6078.,  0.,     0.,     4750.,  5350.,  5254.,  5886.,  11172.,
      12468., 12244., 13604., 19394., 21482., 13828., 15252., 15028., 16516.,
      7974.,  8734.,  8606.,  9398.,  0.,     0.,     7270.,  8030.,  7774.,
      8566.,  16532., 18148., 17604., 19284., 27914., 30482., 19828., 21572.,
      21028., 22836., 11134., 12054., 11766., 12718., 0.,     0.,     4613.,
      5017.,  4913.,  5333.,  10318., 11174., 10950., 11838., 17179., 18535.,
      12062., 12982., 12758., 13710., 6689.,  7173.,  7053.,  7553.,  0.,
      0.,     6113.,  6597.,  6413.,  6913.,  13478., 14494., 14110., 15158.,
      22159., 23755., 15542., 16622., 16238., 17350., 8509.,  9073.,  8873.,
      9453.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     149.,   361.,   545.,   773.,
      1102.,  1574.,  1926.,  2430.,  2923.,  3703.,  2078.,  2614.,  2966.,
      3534.,  1553.,  1845.,  2013.,  2321.,  0.,     0.,     2129.,  2421.,
      2525.,  2833.,  5222.,  5854.,  6046.,  6710.,  9343.,  10363., 6518.,
      7214.,  7406.,  8134.,  3853.,  4225.,  4313.,  4701.,  0.,     0.,
      4294.,  4926.,  5182.,  5846.,  10708., 12068., 12548., 13972., 19370.,
      21554., 13492., 14980., 15460., 17012., 8030.,  8822.,  9046.,  9870.,
      0.,     0.,     8734.,  9526.,  9622.,  10446., 19908., 21588., 21748.,
      23492., 33650., 36314., 23332., 25140., 25300., 27172., 13110., 14062.,
      14126., 15110., 0.,     0.,     13174., 14126., 14062., 15046., 29108.,
      31108., 30948., 33012., 47930., 51074., 33172., 35300., 35140., 37332.,
      18190., 19302., 19206., 20350., 0.,     0.,     7565.,  8065.,  8057.,
      8573.,  16606., 17654., 17622., 18702., 27187., 28831., 18734., 19846.,
      19814., 20958., 10217., 10797., 10773., 11369., 0.,     0.,     10025.,
      10605., 10517., 11113., 21686., 22894., 22702., 23942., 35047., 36931.,
      24134., 25406., 25214., 26518., 12997., 13657., 13553., 14229., 0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,   1422.,  2380.,  4332.,  2156.,  3340.,  5722.,  8202.,  3852.,
      5292.,  9290.,  12154., 5548.,  7244.,  12858., 16106., 7244.,  9196.,
      9196.,  11404., 2060.,  3500.,  4792.,  7928.,  8184.,  11832., 13540.,
      19396., 11576., 15736., 17988., 23588., 12280., 15928., 18340., 23684.,
      8888.,  12024., 11256., 14904., 8620.,  10316., 21112., 25784., 10936.,
      14072., 28612., 35236., 13304., 16952., 24356., 30724., 2744.,  5880.,
      16004., 22116., 4472.,  7096.,  6840.,  9976.,  5722.,  8202.,  13220.,
      18564., 18052., 24164., 29486., 38206., 24676., 31556., 32638., 41486.,
      24516., 31140., 31694., 40670., 20260., 26628., 18820., 24932., 4172.,
      6124.,  22456., 27640., 9208.,  12856., 33188., 40580., 11576., 15736.,
      24836., 31972., 13304., 16952., 28772., 35652., 10936., 14072., 14328.,
      17976., 11658., 15034., 24452., 30564., 30820., 37700., 37054., 46414.,
      30660., 37284., 27278., 35742., 26404., 32772., 22238., 30830., 18052.,
      24164., 22244., 28100., 12012., 14220., 21112., 25784., 2744.,  5880.,
      16004., 22116., 4472.,  7096.,  19940., 25796., 6840.,  9976.,  26564.,
      33188., 9208.,  12856., 13624., 17784., 9356.,  11820., 15672., 19832.,
      19064., 23736., 23268., 29124., 13624., 17784., 16452., 22052., 19064.,
      23736., 22564., 28932., 24504., 29688., 18040., 22712., 6974.,  8398.,
      15308., 18284., 8940.,  11148., 19994., 24010., 10636., 13100., 23562.,
      27962., 12332., 15052., 16250., 20010., 1100.,  3052.,  3052.,  5260.,
      4108.,  5548.,  8888.,  12024., 12280., 15928., 19684., 25540., 15672.,
      19832., 24772., 31396., 19064., 23736., 25124., 31492., 15672., 19832.,
      20088., 24760., 2476.,  4172.,  17016., 21688., 6840.,  9976.,  26564.,
      33188., 9208.,  12856., 33188., 40580., 11576., 15736., 24836., 31972.,
      13304., 16952., 17720., 21880., 9114.,  12106., 20004., 26372., 26884.,
      34020., 33902., 43134., 30820., 37700., 37054., 46414., 30660., 37284.,
      27278., 35742., 26404., 32772., 16772., 22884., 10316., 12268., 26552.,
      31736., 13304., 16952., 24356., 30724., 2744.,  5880.,  16004., 22116.,
      4472.,  7096.,  19940., 25796., 6840.,  9976.,  10232., 13880., 8266.,
      11130., 18308., 24420., 24676., 31556., 32638., 41486., 24516., 31140.,
      31694., 40670., 20260., 26628., 26654., 35758., 26884., 34020., 24932.,
      31812., 5868.,  8076.,  27896., 33592., 11576., 15736., 24836., 31972.,
      13304., 16952., 28772., 35652., 10936., 14072., 28612., 35236., 13304.,
      16952., 17720., 21880., 11404., 13868., 24504., 29688., 29944., 35640.,
      25956., 32836., 24504., 29688., 19140., 25764., 14968., 19640., 24612.,
      30980., 20408., 25592., 22136., 26808., 510.,   1422.,  2380.,  4332.,
      2156.,  3340.,  5722.,  8202.,  3852.,  5292.,  9290.,  12154., 5548.,
      7244.,  12858., 16106., 7244.,  9196.,  9196.,  11404., 2060.,  3500.,
      4792.,  7928.,  8184.,  11832., 13540., 19396., 11576., 15736., 17988.,
      23588., 12280., 15928., 18340., 23684., 8888.,  12024., 11256., 14904.,
      8620.,  10316., 21112., 25784., 10936., 14072., 28612., 35236., 13304.,
      16952., 24356., 30724., 2744.,  5880.,  16004., 22116., 4472.,  7096.,
      6840.,  9976.,  5722.,  8202.,  13220., 18564., 18052., 24164., 29486.,
      38206., 24676., 31556., 32638., 41486., 24516., 31140., 31694., 40670.,
      20260., 26628., 18820., 24932., 4172.,  6124.,  22456., 27640., 9208.,
      12856., 33188., 40580., 11576., 15736., 24836., 31972., 13304., 16952.,
      28772., 35652., 10936., 14072., 14328., 17976., 11658., 15034., 24452.,
      30564., 30820., 37700., 37054., 46414., 30660., 37284., 27278., 35742.,
      26404., 32772., 22238., 30830., 18052., 24164., 22244., 28100., 12012.,
      14220., 21112., 25784., 2744.,  5880.,  16004., 22116., 4472.,  7096.,
      19940., 25796., 6840.,  9976.,  26564., 33188., 9208.,  12856., 13624.,
      17784., 9356.,  11820., 15672., 19832., 19064., 23736., 23268., 29124.,
      13624., 17784., 16452., 22052., 19064., 23736., 22564., 28932., 24504.,
      29688., 18040., 22712.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1322.,
      2906.,  1900.,  3084.,  2828.,  4268.,  1966.,  2750.,  2558.,  3470.,
      0.,     0.,     430.,   1214.,  510.,   1422.,  2380.,  4332.,  2156.,
      3340.,  5722.,  8202.,  3852.,  5292.,  4780.,  6476.,  190.,   590.,
      782.,   1310.,  0.,     0.,     460.,   1388.,  1388.,  2572.,  3448.,
      6072.,  5816.,  8952.,  9988.,  15076., 9208.,  12856., 12600., 16760.,
      7660.,  9868.,  9612.,  12076., 0.,     0.,     5100.,  7308.,  5388.,
      6828.,  14648., 18808., 7544.,  10168., 21476., 27332., 9912.,  13048.,
      13304., 16952., 1804.,  3244.,  3756.,  5452.,  0.,     0.,     2316.,
      3756.,  3244.,  4940.,  8184.,  11832., 10552., 14712., 17988., 23588.,
      15992., 20664., 16696., 20856., 11564., 14284., 8780.,  10732., 0.,
      0.,     6206.,  7630.,  270.,   798.,   9196.,  11404., 2316.,  3756.,
      14218., 17594., 2988.,  4684.,  5452.,  7404.,  3150.,  4190.,  4510.,
      5678.,  0.,     0.,     3662.,  4702.,  4510.,  5678.,  10124., 12588.,
      12076., 14796., 13114., 16362., 15308., 18284., 8940.,  11148., 9950.,
      11630., 430.,   1214.,  0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     510.,   1422.,
      2126.,  3166.,  4332.,  6540.,  7820.,  10284., 11338., 14202., 6316.,
      8012.,  8268.,  10220., 270.,   798.,   350.,   1006.,  0.,     0.,
      8590.,  10142., 10206., 11886., 21772., 25260., 12332., 15052., 16250.,
      20010., 1100.,  3052.,  3052.,  5260.,  30.,    174.,   110.,   382.,
      0.,     0.,     3852.,  5292.,  5804.,  7500.,  12280., 15928., 16696.,
      20856., 21572., 27172., 13304., 16952., 16696., 20856., 3244.,  4940.,
      4172.,  6124.,  0.,     0.,     13612., 16332., 2636.,  4588.,  21432.,
      26616., 8184.,  11832., 17700., 24068., 9912.,  13048., 13304., 16952.,
      460.,   1388.,  1388.,  2572.,  0.,     0.,     7756.,  9708.,  9708.,
      11916., 21112., 25784., 25528., 30712., 19332., 25444., 20088., 24760.,
      8504.,  12664., 5100.,  7308.,  5388.,  6828.,  0.,     0.,     2462.,
      3630.,  110.,   382.,   4780.,  6476.,  972.,   1900.,  8106.,  10714.,
      1644.,  2828.,  3084.,  4524.,  1966.,  2750.,  2814.,  3726.,  0.,
      0.,     1454.,  2238.,  1790.,  2702.,  4684.,  6636.,  5612.,  7820.,
      7514.,  9994.,  8844.,  11308., 5548.,  7244.,  6206.,  7630.,  270.,
      798.,   0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     350.,   1006.,  1454.,  2238.,
      2988.,  4684.,  5452.,  7404.,  8426.,  11546., 6636.,  8844.,  9612.,
      12076., 5358.,  6654.,  6974.,  8398.,  0.,     0.,     5870.,  7166.,
      6974.,  8398.,  15308., 18284., 8940.,  11148., 19994., 24010., 10636.,
      13100., 13612., 16332., 510.,   1422.,  2126.,  3166.,  0.,     0.,
      3148.,  5100.,  6124.,  8332.,  12280., 15928., 16696., 20856., 24964.,
      31076., 13304., 16952., 16696., 20856., 9708.,  11916., 11660., 14124.,
      0.,     0.,     18028., 21260., 12172., 14636., 25528., 30712., 4088.,
      7736.,  22116., 28996., 5816.,  8952.,  9208.,  12856., 3852.,  5292.,
      5804.,  7500.,  0.,     0.,     9100.,  11564., 12076., 14796., 21112.,
      25784., 25528., 30712., 28868., 35492., 20088., 24760., 12600., 16760.,
      13612., 16332., 2636.,  4588.,  0.,     0.,     13694., 15630., 590.,
      1630.,  3052.,  5260.,  4364.,  5804.,  8778.,  11642., 300.,   972.,
      716.,   1644.,  782.,   1310.,  1118.,  1774.,  0.,     0.,     8078.,
      9630.,  9950.,  11630., 12172., 14636., 14124., 16844., 2554.,  5290.,
      2380.,  4332.,  2156.,  3340.,  2462.,  3630.,  110.,   382.,   0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,
      542.,   624.,   719.,   836.,   959.,   1088.,  622.,   704.,   790.,
      880.,   1067.,  1196.,  1331.,  1472.,  854.,   944.,   1038.,  1136.,
      974.,   1072.,  1174.,  1280.,  150.,   224.,   302.,   384.,   468.,
      624.,   788.,   960.,   676.,   848.,   1028.,  1216.,  1282.,  1552.,
      1834.,  2128.,  1140.,  1328.,  1524.,  1728.,  1978.,  2272.,  2578.,
      2896.,  1604.,  1808.,  2020.,  2240.,  2674.,  2992.,  3322.,  3664.,
      2068.,  2288.,  2516.,  2752.,  2468.,  2704.,  2948.,  3200.,  590.,
      704.,   822.,   944.,   1508.,  1744.,  1988.,  2240.,  1716.,  1968.,
      2228.,  2496.,  3082.,  3472.,  3874.,  4288.,  2500.,  2768.,  3044.,
      3328.,  4258.,  4672.,  5098.,  5536.,  3284.,  3568.,  3860.,  4160.,
      5434.,  5872.,  6322.,  6784.,  4068.,  4368.,  4676.,  4992.,  4468.,
      4784.,  5108.,  5440.,  1235.,  1436.,  1643.,  1856.,  2962.,  3376.,
      3802.,  4240.,  3514.,  3952.,  4402.,  4864.,  6033.,  6708.,  7401.,
      8112.,  4690.,  5152.,  5626.,  6112.,  7797.,  8508.,  9237.,  9984.,
      5866.,  6352.,  6850.,  7360.,  9561.,  10308., 11073., 11856., 7042.,
      7552.,  8074.,  8608.,  7882.,  8416.,  8962.,  9520.,  2390.,  2544.,
      2702.,  2864.,  5108.,  5424.,  5748.,  6080.,  5636.,  5968.,  6308.,
      6656.,  8962.,  9472.,  9994.,  10528., 6420.,  6768.,  7124.,  7488.,
      10138., 10672., 11218., 11776., 7204.,  7568.,  7940.,  8320.,  11314.,
      11872., 12442., 13024., 7988.,  8368.,  8756.,  9152.,  8708.,  9104.,
      9508.,  9920.,  3935.,  4196.,  4463.,  4736.,  8362.,  8896.,  9442.,
      10000., 9394.,  9952.,  10522., 11104., 14853., 15708., 16581., 17472.,
      10570., 11152., 11746., 12352., 16617., 17508., 18417., 19344., 11746.,
      12352., 12970., 13600., 18381., 19308., 20253., 21216., 12922., 13552.,
      14194., 14848., 14242., 14896., 15562., 16240., 4190.,  4384.,  4582.,
      4784.,  8708.,  9104.,  9508.,  9920.,  9556.,  9968.,  10388., 10816.,
      14842., 15472., 16114., 16768., 10340., 10768., 11204., 11648., 16018.,
      16672., 17338., 18016., 11124., 11568., 12020., 12480., 17194., 17872.,
      18562., 19264., 11908., 12368., 12836., 13312., 12948., 13424., 13908.,
      14400., 6230.,  6464.,  6702.,  6944.,  12948., 13424., 13908., 14400.,
      13796., 14288., 14788., 15296., 21442., 22192., 22954., 23728., 14900.,
      15408., 15924., 16448., 23098., 23872., 24658., 25456., 16004., 16528.,
      17060., 17600., 24754., 25552., 26362., 27184., 17108., 17648., 18196.,
      18752., 18148., 18704., 19268., 19840., 2025.,  2132.,  2241.,  2352.,
      4134.,  4352.,  4574.,  4800.,  4798.,  5024.,  5254.,  5488.,  7331.,
      7676.,  8027.,  8384.,  5030.,  5264.,  5502.,  5744.,  7679.,  8036.,
      8399.,  8768.,  5262.,  5504.,  5750.,  6000.,  8027.,  8396.,  8771.,
      9152.,  5494.,  5744.,  5998.,  6256.,  6254.,  6512.,  6774.,  7040.,
      4150.,  4384.,  4622.,  4864.,  8468.,  8944.,  9428.,  9920.,  9956.,
      10448., 10948., 11456., 15202., 15952., 16714., 17488., 10420., 10928.,
      11444., 11968., 15898., 16672., 17458., 18256., 10884., 11408., 11940.,
      12480., 16594., 17392., 18202., 19024., 11348., 11888., 12436., 12992.,
      13028., 13584., 14148., 14720., 7790.,  8064.,  8342.,  8624.,  15908.,
      16464., 17028., 17600., 17396., 17968., 18548., 19136., 26602., 27472.,
      28354., 29248., 18180., 18768., 19364., 19968., 27778., 28672., 29578.,
      30496., 18964., 19568., 20180., 20800., 28954., 29872., 30802., 31744.,
      19748., 20368., 20996., 21632., 21428., 22064., 22708., 23360., 12035.,
      12476., 12923., 13376., 24562., 25456., 26362., 27280., 27034., 27952.,
      28882., 29824., 41185., 42452., 43737., 45040., 27570., 28384., 29210.,
      30048., 41797., 42972., 44165., 45376., 27082., 27792., 28514., 29248.,
      41385., 42468., 43569., 44688., 28258., 28992., 29738., 30496., 29994.,
      30752., 31522., 32304., 9590.,  9904.,  10222., 10544., 19508., 20144.,
      20788., 21440., 21316., 21968., 22628., 23296., 29794., 30656., 31530.,
      32416., 18900., 19440., 19988., 20544., 27258., 28016., 28786., 29568.,
      15460., 15888., 16324., 16768., 23698., 24352., 25018., 25696., 16244.,
      16688., 17140., 17600., 17220., 17680., 18148., 18624., 14095., 14468.,
      14847., 15232., 28682., 29440., 30210., 30992., 30610., 31392., 32186.,
      32992., 41429., 42492., 43573., 44672., 26026., 26704., 27394., 28096.,
      36921., 37892., 38881., 39888., 20418., 20992., 21578., 22176., 31389.,
      32268., 33165., 34080., 21594., 22192., 22802., 23424., 22786., 23408.,
      24042., 24688., 8190.,  8416.,  8646.,  8880.,  16708., 17168., 17636.,
      18112., 17812., 18288., 18772., 19264., 19418., 20016., 20626., 21248.,
      10276., 10640., 11012., 11392., 11762., 12256., 12762., 13280., 1716.,
      1968.,  2228.,  2496.,  3082.,  3472.,  3874.,  4288.,  2500.,  2768.,
      3044.,  3328.,  2772.,  3056.,  3348.,  3648.,  10870., 11136., 11406.,
      11680., 22228., 22768., 23316., 23872., 23332., 23888., 24452., 25024.,
      25378., 26096., 26826., 27568., 13556., 14000., 14452., 14912., 15642.,
      16256., 16882., 17520., 2756.,  3088.,  3428.,  3776.,  4882.,  5392.,
      5914.,  6448.,  3860.,  4208.,  4564.,  4928.,  4132.,  4496.,  4868.,
      5248.,  825.,   884.,   945.,   1008.,  1734.,  1856.,  1982.,  2112.,
      2014.,  2144.,  2278.,  2416.,  3155.,  3356.,  3563.,  3776.,  2246.,
      2384.,  2526.,  2672.,  3503.,  3716.,  3935.,  4160.,  2478.,  2624.,
      2774.,  2928.,  3851.,  4076.,  4307.,  4544.,  2710.,  2864.,  3022.,
      3184.,  3086.,  3248.,  3414.,  3584.,  1750.,  1888.,  2030.,  2176.,
      3668.,  3952.,  4244.,  4544.,  4388.,  4688.,  4996.,  5312.,  6850.,
      7312.,  7786.,  8272.,  4852.,  5168.,  5492.,  5824.,  7546.,  8032.,
      8530.,  9040.,  5316.,  5648.,  5988.,  6336.,  8242.,  8752.,  9274.,
      9808.,  5780.,  6128.,  6484.,  6848.,  6692.,  7056.,  7428.,  7808.,
      3470.,  3648.,  3830.,  4016.,  7268.,  7632.,  8004.,  8384.,  7988.,
      8368.,  8756.,  9152.,  12490., 13072., 13666., 14272., 8772.,  9168.,
      9572.,  9984.,  13666., 14272., 14890., 15520., 9556.,  9968.,  10388.,
      10816., 14842., 15472., 16114., 16768., 10340., 10768., 11204., 11648.,
      11252., 11696., 12148., 12608., 5555.,  5852.,  6155.,  6464.,  11602.,
      12208., 12826., 13456., 12922., 13552., 14194., 14848., 20145., 21108.,
      22089., 23088., 14098., 14752., 15418., 16096., 21909., 22908., 23925.,
      24960., 15274., 15952., 16642., 17344., 23673., 24708., 25761., 26832.,
      16450., 17152., 17866., 18592., 18058., 18784., 19522., 20272., 5270.,
      5488.,  5710.,  5936.,  10868., 11312., 11764., 12224., 11908., 12368.,
      12836., 13312., 18370., 19072., 19786., 20512., 12692., 13168., 13652.,
      14144., 19546., 20272., 21010., 21760., 13476., 13968., 14468., 14976.,
      20722., 21472., 22234., 23008., 14260., 14768., 15284., 15808., 15492.,
      16016., 16548., 17088., 8255.,  8612.,  8975.,  9344.,  17002., 17728.,
      18466., 19216., 18802., 19552., 20314., 21088., 28965., 30108., 31269.,
      32448., 19978., 20752., 21538., 22336., 30729., 31908., 33105., 34320.,
      21154., 21952., 22762., 23584., 32493., 33708., 34941., 36192., 22330.,
      23152., 23986., 24832., 24418., 25264., 26122., 26992., 7070.,  7328.,
      7590.,  7856.,  14468., 14992., 15524., 16064., 15828., 16368., 16916.,
      17472., 24250., 25072., 25906., 26752., 16612., 17168., 17732., 18304.,
      25426., 26272., 27130., 28000., 17396., 17968., 18548., 19136., 26602.,
      27472., 28354., 29248., 18180., 18768., 19364., 19968., 19732., 20336.,
      20948., 21568., 10390., 10688., 10990., 11296., 21268., 21872., 22484.,
      23104., 22628., 23248., 23876., 24512., 34690., 35632., 36586., 37552.,
      23732., 24368., 25012., 25664., 36346., 37312., 38290., 39280., 24836.,
      25488., 26148., 26816., 38002., 38992., 39994., 41008., 25940., 26608.,
      27284., 27968., 27492., 28176., 28868., 29568.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    5.,     12.,    21.,    32.,    14.,
      32.,    54.,    80.,    38.,    64.,    94.,    128.,   71.,    116.,
      167.,   224.,   110.,   144.,   182.,   224.,   166.,   208.,   254.,
      304.,   117.,   140.,   165.,   192.,   153.,   180.,   209.,   240.,
      0.,     0.,     0.,     0.,     21.,    44.,    69.,    96.,    25.,
      52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,   224.,
      294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,   542.,
      624.,   446.,   528.,   614.,   704.,   297.,   340.,   385.,   432.,
      333.,   380.,   429.,   480.,   0.,     0.,     0.,     0.,     54.,
      112.,   174.,   240.,   110.,   176.,   246.,   320.,   388.,   528.,
      676.,   832.,   532.,   688.,   852.,   1024.,  1066.,  1312.,  1570.,
      1840.,  996.,   1168.,  1348.,  1536.,  1204.,  1392.,  1588.,  1792.,
      750.,   848.,   950.,   1056.,  870.,   976.,   1086.,  1200.,  0.,
      0.,     0.,     0.,     334.,   432.,   534.,   640.,   390.,   496.,
      606.,   720.,   1108.,  1328.,  1556.,  1792.,  1252.,  1488.,  1732.,
      1984.,  2386.,  2752.,  3130.,  3520.,  2036.,  2288.,  2548.,  2816.,
      2244.,  2512.,  2788.,  3072.,  1350.,  1488.,  1630.,  1776.,  1470.,
      1616.,  1766.,  1920.,  0.,     0.,     0.,     0.,     614.,   752.,
      894.,   1040.,  670.,   816.,   966.,   1120.,  1828.,  2128.,  2436.,
      2752.,  1972.,  2288.,  2612.,  2944.,  3706.,  4192.,  4690.,  5200.,
      3076.,  3408.,  3748.,  4096.,  3284.,  3632.,  3988.,  4352.,  1950.,
      2128.,  2310.,  2496.,  2070.,  2256.,  2446.,  2640.,  0.,     0.,
      0.,     0.,     793.,   868.,   945.,   1024.,  845.,   924.,   1005.,
      1088.,  1934.,  2096.,  2262.,  2432.,  2054.,  2224.,  2398.,  2576.,
      3455.,  3716.,  3983.,  4256.,  2606.,  2784.,  2966.,  3152.,  2758.,
      2944.,  3134.,  3328.,  1533.,  1628.,  1725.,  1824.,  1617.,  1716.,
      1817.,  1920.,  0.,     0.,     0.,     0.,     1053.,  1148.,  1245.,
      1344.,  1105.,  1204.,  1305.,  1408.,  2534.,  2736.,  2942.,  3152.,
      2654.,  2864.,  3078.,  3296.,  4475.,  4796.,  5123.,  5456.,  3366.,
      3584.,  3806.,  4032.,  3518.,  3744.,  3974.,  4208.,  1953.,  2068.,
      2185.,  2304.,  2037.,  2156.,  2277.,  2400.,  0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     25.,    52.,    81.,    112.,
      125.,   156.,   189.,   224.,   254.,   320.,   390.,   464.,   470.,
      544.,   622.,   704.,   719.,   836.,   959.,   1088.,  542.,   624.,
      710.,   800.,   790.,   880.,   974.,   1072.,  429.,   476.,   525.,
      576.,   561.,   612.,   665.,   720.,   0.,     0.,     0.,     0.,
      525.,   572.,   621.,   672.,   625.,   676.,   729.,   784.,   1334.,
      1440.,  1550.,  1664.,  1550.,  1664.,  1782.,  1904.,  2459.,  2636.,
      2819.,  3008.,  1782.,  1904.,  2030.,  2160.,  2030.,  2160.,  2294.,
      2432.,  1089.,  1156.,  1225.,  1296.,  1221.,  1292.,  1365.,  1440.,
      0.,     0.,     0.,     0.,     1062.,  1168.,  1278.,  1392.,  1310.,
      1424.,  1542.,  1664.,  2788.,  3024.,  3268.,  3520.,  3316.,  3568.,
      3828.,  4096.,  5242.,  5632.,  6034.,  6448.,  3780.,  4048.,  4324.,
      4608.,  4372.,  4656.,  4948.,  5248.,  2334.,  2480.,  2630.,  2784.,
      2646.,  2800.,  2958.,  3120.,  0.,     0.,     0.,     0.,     2302.,
      2448.,  2598.,  2752.,  2550.,  2704.,  2862.,  3024.,  5428.,  5744.,
      6068.,  6400.,  5956.,  6288.,  6628.,  6976.,  9442.,  9952.,  10474.,
      11008., 6740.,  7088.,  7444.,  7808.,  7332.,  7696.,  8068.,  8448.,
      3894.,  4080.,  4270.,  4464.,  4206.,  4400.,  4598.,  4800.,  0.,
      0.,     0.,     0.,     3542.,  3728.,  3918.,  4112.,  3790.,  3984.,
      4182.,  4384.,  8068.,  8464.,  8868.,  9280.,  8596.,  9008.,  9428.,
      9856.,  13642., 14272., 14914., 15568., 9700.,  10128., 10564., 11008.,
      10292., 10736., 11188., 11648., 5454.,  5680.,  5910.,  6144.,  5766.,
      6000.,  6238.,  6480.,  0.,     0.,     0.,     0.,     2257.,  2356.,
      2457.,  2560.,  2405.,  2508.,  2613.,  2720.,  5054.,  5264.,  5478.,
      5696.,  5366.,  5584.,  5806.,  6032.,  8423.,  8756.,  9095.,  9440.,
      5918.,  6144.,  6374.,  6608.,  6262.,  6496.,  6734.,  6976.,  3285.,
      3404.,  3525.,  3648.,  3465.,  3588.,  3713.,  3840.,  0.,     0.,
      0.,     0.,     2997.,  3116.,  3237.,  3360.,  3145.,  3268.,  3393.,
      3520.,  6614.,  6864.,  7118.,  7376.,  6926.,  7184.,  7446.,  7712.,
      10883., 11276., 11675., 12080., 7638.,  7904.,  8174.,  8448.,  7982.,
      8256.,  8534.,  8816.,  4185.,  4324.,  4465.,  4608.,  4365.,  4508.,
      4653.,  4800.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     49.,    100.,   153.,   208.,   245.,   300.,   357.,   416.,
      494.,   608.,   726.,   848.,   902.,   1024.,  1150.,  1280.,  1367.,
      1556.,  1751.,  1952.,  974.,   1104.,  1238.,  1376.,  1414.,  1552.,
      1694.,  1840.,  741.,   812.,   885.,   960.,   969.,   1044.,  1121.,
      1200.,  0.,     0.,     0.,     0.,     1029.,  1100.,  1173.,  1248.,
      1225.,  1300.,  1377.,  1456.,  2534.,  2688.,  2846.,  3008.,  2942.,
      3104.,  3270.,  3440.,  4547.,  4796.,  5051.,  5312.,  3174.,  3344.,
      3518.,  3696.,  3614.,  3792.,  3974.,  4160.,  1881.,  1972.,  2065.,
      2160.,  2109.,  2204.,  2301.,  2400.,  0.,     0.,     0.,     0.,
      2070.,  2224.,  2382.,  2544.,  2510.,  2672.,  2838.,  3008.,  5188.,
      5520.,  5860.,  6208.,  6100.,  6448.,  6804.,  7168.,  9418.,  9952.,
      10498., 11056., 6564.,  6928.,  7300.,  7680.,  7540.,  7920.,  8308.,
      8704.,  3918.,  4112.,  4310.,  4512.,  4422.,  4624.,  4830.,  5040.,
      0.,     0.,     0.,     0.,     4270.,  4464.,  4662.,  4864.,  4710.,
      4912.,  5118.,  5328.,  9748.,  10160., 10580., 11008., 10660., 11088.,
      11524., 11968., 16498., 17152., 17818., 18496., 11444., 11888., 12340.,
      12800., 12420., 12880., 13348., 13824., 6438.,  6672.,  6910.,  7152.,
      6942.,  7184.,  7430.,  7680.,  0.,     0.,     0.,     0.,     6470.,
      6704.,  6942.,  7184.,  6910.,  7152.,  7398.,  7648.,  14308., 14800.,
      15300., 15808., 15220., 15728., 16244., 16768., 23578., 24352., 25138.,
      25936., 16324., 16848., 17380., 17920., 17300., 17840., 18388., 18944.,
      8958.,  9232.,  9510.,  9792.,  9462.,  9744.,  10030., 10320., 0.,
      0.,     0.,     0.,     3721.,  3844.,  3969.,  4096.,  3965.,  4092.,
      4221.,  4352.,  8174.,  8432.,  8694.,  8960.,  8678.,  8944.,  9214.,
      9488.,  13391., 13796., 14207., 14624., 9230.,  9504.,  9782.,  10064.,
      9766.,  10048., 10334., 10624., 5037.,  5180.,  5325.,  5472.,  5313.,
      5460.,  5609.,  5760.,  0.,     0.,     0.,     0.,     4941.,  5084.,
      5229.,  5376.,  5185.,  5332.,  5481.,  5632.,  10694., 10992., 11294.,
      11600., 11198., 11504., 11814., 12128., 17291., 17756., 18227., 18704.,
      11910., 12224., 12542., 12864., 12446., 12768., 13094., 13424., 6417.,
      6580.,  6745.,  6912.,  6693.,  6860.,  7029.,  7200.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  946.,
      1210.,  1506.,  1834.,  2575.,  3147.,  3767.,  4435.,  1762.,  2090.,
      2450.,  2842.,  4311.,  4979.,  5695.,  6459.,  2578.,  2970.,  3394.,
      3850.,  6047.,  6811.,  7623.,  8483.,  3394.,  3850.,  4338.,  4858.,
      4338.,  4858.,  5410.,  5994.,  866.,   1194.,  1554.,  1946.,  2036.,
      2756.,  3540.,  4388.,  3668.,  4516.,  5428.,  6404.,  6086.,  7454.,
      8918.,  10478., 5300.,  6276.,  7316.,  8420.,  8342.,  9646.,  11046.,
      12542., 5716.,  6564.,  7476.,  8452.,  8550.,  9790.,  11126., 12558.,
      4084.,  4804.,  5588.,  6436.,  5204.,  6052.,  6964.,  7940.,  4114.,
      4506.,  4930.,  5386.,  10004., 11108., 12276., 13508., 5108.,  5828.,
      6612.,  7460.,  13526., 15086., 16742., 18494., 6228.,  7076.,  7988.,
      8964.,  11430., 12926., 14518., 16206., 1012.,  1732.,  2516.,  3364.,
      7286.,  8718.,  10246., 11870., 1940.,  2532.,  3188.,  3908.,  3060.,
      3780.,  4564.,  5412.,  2575.,  3147.,  3767.,  4435.,  5990.,  7230.,
      8566.,  9998.,  8310.,  9742.,  11270., 12894., 13725., 15761., 17941.,
      20265., 11526., 13150., 14870., 16686., 15285., 17353., 19565., 21921.,
      11478., 13038., 14694., 16446., 14797., 16897., 19141., 21529., 9382.,
      10878., 12470., 14158., 8694.,  10126., 11654., 13278., 1858.,  2314.,
      2802.,  3322.,  10612., 11844., 13140., 14500., 4180.,  5028.,  5940.,
      6916.,  15718., 17470., 19318., 21262., 5300.,  6276.,  7316.,  8420.,
      11574., 13262., 15046., 16926., 6228.,  7076.,  7988.,  8964.,  13574.,
      15198., 16918., 18734., 5108.,  5828.,  6612.,  7460.,  6740.,  7588.,
      8500.,  9476.,  5431.,  6227.,  7071.,  7963.,  11510., 12942., 14470.,
      16094., 14598., 16222., 17942., 19758., 17429., 19625., 21965., 24449.,
      14550., 16110., 17766., 19518., 12653., 14625., 16741., 19001., 12454.,
      13950., 15542., 17230., 10117., 12121., 14269., 16561., 8310.,  9742.,
      11270., 12894., 10438., 11806., 13270., 14830., 5746.,  6266.,  6818.,
      7402.,  10004., 11108., 12276., 13508., 1012.,  1732.,  2516.,  3364.,
      7286.,  8718.,  10246., 11870., 1940.,  2532.,  3188.,  3908.,  9286.,
      10654., 12118., 13678., 3060.,  3780.,  4564.,  5412.,  12502., 14062.,
      15718., 17470., 4180.,  5028.,  5940.,  6916.,  6324.,  7300.,  8340.,
      9444.,  4386.,  4970.,  5586.,  6234.,  7348.,  8324.,  9364.,  10468.,
      8980.,  10084., 11252., 12484., 10950., 12318., 13782., 15342., 6324.,
      7300.,  8340.,  9444.,  7574.,  8878.,  10278., 11774., 8980.,  10084.,
      11252., 12484., 10534., 12030., 13622., 15310., 11636., 12868., 14164.,
      15524., 8468.,  9572.,  10740., 11972., 3317.,  3657.,  4013.,  4385.,
      7298.,  8010.,  8754.,  9530.,  4210.,  4730.,  5282.,  5866.,  9519.,
      10475., 11479., 12531., 5026.,  5610.,  6226.,  6874.,  11255., 12307.,
      13407., 14555., 5842.,  6490.,  7170.,  7882.,  7679.,  8571.,  9511.,
      10499., 322.,   778.,   1266.,  1786.,  1266.,  1786.,  2338.,  2922.,
      1890.,  2218.,  2578.,  2970.,  4084.,  4804.,  5588.,  6436.,  5716.,
      6564.,  7476.,  8452.,  9158.,  10526., 11990., 13550., 7348.,  8324.,
      9364.,  10468., 11606., 13166., 14822., 16574., 8980.,  10084., 11252.,
      12484., 11814., 13310., 14902., 16590., 7348.,  8324.,  9364.,  10468.,
      9492.,  10596., 11764., 12996., 1042.,  1434.,  1858.,  2314.,  7956.,
      9060.,  10228., 11460., 3060.,  3780.,  4564.,  5412.,  12502., 14062.,
      15718., 17470., 4180.,  5028.,  5940.,  6916.,  15718., 17470., 19318.,
      21262., 5300.,  6276.,  7316.,  8420.,  11574., 13262., 15046., 16926.,
      6228.,  7076.,  7988.,  8964.,  8372.,  9348.,  10388., 11492., 4207.,
      4907.,  5655.,  6451.,  9254.,  10750., 12342., 14030., 12598., 14286.,
      16070., 17950., 15869., 18033., 20341., 22793., 14598., 16222., 17942.,
      19758., 17429., 19625., 21965., 24449., 14550., 16110., 17766., 19518.,
      12653., 14625., 16741., 19001., 12454., 13950., 15542., 17230., 7670.,
      9102.,  10630., 12254., 4930.,  5386.,  5874.,  6394.,  12660., 13892.,
      15188., 16548., 6228.,  7076.,  7988.,  8964.,  11430., 12926., 14518.,
      16206., 1012.,  1732.,  2516.,  3364.,  7286.,  8718.,  10246., 11870.,
      1940.,  2532.,  3188.,  3908.,  9286.,  10654., 12118., 13678., 3060.,
      3780.,  4564.,  5412.,  4692.,  5540.,  6452.,  7428.,  3799.,  4467.,
      5183.,  5947.,  8438.,  9870.,  11398., 13022., 11526., 13150., 14870.,
      16686., 15285., 17353., 19565., 21921., 11478., 13038., 14694., 16446.,
      14797., 16897., 19141., 21529., 9382.,  10878., 12470., 14158., 12261.,
      14393., 16669., 19089., 12598., 14286., 16070., 17950., 11654., 13278.,
      14998., 16814., 2674.,  3194.,  3746.,  4330.,  13268., 14628., 16052.,
      17540., 5300.,  6276.,  7316.,  8420.,  11574., 13262., 15046., 16926.,
      6228.,  7076.,  7988.,  8964.,  13574., 15198., 16918., 18734., 5108.,
      5828.,  6612.,  7460.,  13526., 15086., 16742., 18494., 6228.,  7076.,
      7988.,  8964.,  8372.,  9348.,  10388., 11492., 5410.,  5994.,  6610.,
      7258.,  11636., 12868., 14164., 15524., 14292., 15652., 17076., 18564.,
      12166., 13790., 15510., 17326., 11636., 12868., 14164., 15524., 8790.,
      10350., 12006., 13758., 6932.,  8036.,  9204.,  10436., 11558., 13054.,
      14646., 16334., 9588.,  10820., 12116., 13476., 10516., 11620., 12788.,
      14020., 149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,
      946.,   1210.,  1506.,  1834.,  2575.,  3147.,  3767.,  4435.,  1762.,
      2090.,  2450.,  2842.,  4311.,  4979.,  5695.,  6459.,  2578.,  2970.,
      3394.,  3850.,  6047.,  6811.,  7623.,  8483.,  3394.,  3850.,  4338.,
      4858.,  4338.,  4858.,  5410.,  5994.,  866.,   1194.,  1554.,  1946.,
      2036.,  2756.,  3540.,  4388.,  3668.,  4516.,  5428.,  6404.,  6086.,
      7454.,  8918.,  10478., 5300.,  6276.,  7316.,  8420.,  8342.,  9646.,
      11046., 12542., 5716.,  6564.,  7476.,  8452.,  8550.,  9790.,  11126.,
      12558., 4084.,  4804.,  5588.,  6436.,  5204.,  6052.,  6964.,  7940.,
      4114.,  4506.,  4930.,  5386.,  10004., 11108., 12276., 13508., 5108.,
      5828.,  6612.,  7460.,  13526., 15086., 16742., 18494., 6228.,  7076.,
      7988.,  8964.,  11430., 12926., 14518., 16206., 1012.,  1732.,  2516.,
      3364.,  7286.,  8718.,  10246., 11870., 1940.,  2532.,  3188.,  3908.,
      3060.,  3780.,  4564.,  5412.,  2575.,  3147.,  3767.,  4435.,  5990.,
      7230.,  8566.,  9998.,  8310.,  9742.,  11270., 12894., 13725., 15761.,
      17941., 20265., 11526., 13150., 14870., 16686., 15285., 17353., 19565.,
      21921., 11478., 13038., 14694., 16446., 14797., 16897., 19141., 21529.,
      9382.,  10878., 12470., 14158., 8694.,  10126., 11654., 13278., 1858.,
      2314.,  2802.,  3322.,  10612., 11844., 13140., 14500., 4180.,  5028.,
      5940.,  6916.,  15718., 17470., 19318., 21262., 5300.,  6276.,  7316.,
      8420.,  11574., 13262., 15046., 16926., 6228.,  7076.,  7988.,  8964.,
      13574., 15198., 16918., 18734., 5108.,  5828.,  6612.,  7460.,  6740.,
      7588.,  8500.,  9476.,  5431.,  6227.,  7071.,  7963.,  11510., 12942.,
      14470., 16094., 14598., 16222., 17942., 19758., 17429., 19625., 21965.,
      24449., 14550., 16110., 17766., 19518., 12653., 14625., 16741., 19001.,
      12454., 13950., 15542., 17230., 10117., 12121., 14269., 16561., 8310.,
      9742.,  11270., 12894., 10438., 11806., 13270., 14830., 5746.,  6266.,
      6818.,  7402.,  10004., 11108., 12276., 13508., 1012.,  1732.,  2516.,
      3364.,  7286.,  8718.,  10246., 11870., 1940.,  2532.,  3188.,  3908.,
      9286.,  10654., 12118., 13678., 3060.,  3780.,  4564.,  5412.,  12502.,
      14062., 15718., 17470., 4180.,  5028.,  5940.,  6916.,  6324.,  7300.,
      8340.,  9444.,  4386.,  4970.,  5586.,  6234.,  7348.,  8324.,  9364.,
      10468., 8980.,  10084., 11252., 12484., 10950., 12318., 13782., 15342.,
      6324.,  7300.,  8340.,  9444.,  7574.,  8878.,  10278., 11774., 8980.,
      10084., 11252., 12484., 10534., 12030., 13622., 15310., 11636., 12868.,
      14164., 15524., 8468.,  9572.,  10740., 11972.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   487.,   835.,
      1231.,  1675.,  818.,   1082.,  1378.,  1706.,  1250.,  1578.,  1938.,
      2330.,  893.,   1073.,  1269.,  1481.,  1173.,  1385.,  1613.,  1857.,
      0.,     0.,     0.,     0.,     125.,   305.,   501.,   713.,   149.,
      361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  946.,   1210.,
      1506.,  1834.,  2575.,  3147.,  3767.,  4435.,  1762.,  2090.,  2450.,
      2842.,  2194.,  2586.,  3010.,  3466.,  53.,    137.,   237.,   353.,
      333.,   449.,   581.,   729.,   0.,     0.,     0.,     0.,     130.,
      330.,   562.,   826.,   562.,   826.,   1122.,  1450.,  1428.,  2020.,
      2676.,  3396.,  2548.,  3268.,  4052.,  4900.,  4406.,  5582.,  6854.,
      8222.,  4180.,  5028.,  5940.,  6916.,  5812.,  6788.,  7828.,  8932.,
      3570.,  4090.,  4642.,  5226.,  4514.,  5098.,  5714.,  6362.,  0.,
      0.,     0.,     0.,     2290.,  2810.,  3362.,  3946.,  2530.,  2858.,
      3218.,  3610.,  6836.,  7812.,  8852.,  9956.,  3476.,  4068.,  4724.,
      5444.,  10054., 11422., 12886., 14446., 4596.,  5316.,  6100.,  6948.,
      6228.,  7076.,  7988.,  8964.,  738.,   1066.,  1426.,  1818.,  1682.,
      2074.,  2498.,  2954.,  0.,     0.,     0.,     0.,     994.,   1322.,
      1682.,  2074.,  1426.,  1818.,  2242.,  2698.,  3668.,  4516.,  5428.,
      6404.,  4788.,  5764.,  6804.,  7908.,  8342.,  9646.,  11046., 12542.,
      7444.,  8548.,  9716.,  10948., 7860.,  8836.,  9876.,  10980., 5458.,
      6106.,  6786.,  7498.,  4162.,  4618.,  5106.,  5626.,  0.,     0.,
      0.,     0.,     2933.,  3273.,  3629.,  4001.,  77.,    193.,   325.,
      473.,   4338.,  4858.,  5410.,  5994.,  994.,   1322.,  1682.,  2074.,
      6711.,  7507.,  8351.,  9243.,  1298.,  1690.,  2114.,  2570.,  2498.,
      2954.,  3442.,  3962.,  1453.,  1697.,  1957.,  2233.,  2117.,  2393.,
      2685.,  2993.,  0.,     0.,     0.,     0.,     1709.,  1953.,  2213.,
      2489.,  2117.,  2393.,  2685.,  2993.,  4770.,  5354.,  5970.,  6618.,
      5714.,  6362.,  7042.,  7754.,  6175.,  6939.,  7751.,  8611.,  7298.,
      8010.,  8754.,  9530.,  4210.,  4730.,  5282.,  5866.,  4773.,  5177.,
      5597.,  6033.,  125.,   305.,   501.,   713.,   0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     149.,   361.,   589.,   833.,
      941.,   1185.,  1445.,  1721.,  1906.,  2426.,  2978.,  3562.,  3618.,
      4202.,  4818.,  5466.,  5335.,  6003.,  6719.,  7483.,  2962.,  3354.,
      3778.,  4234.,  3906.,  4362.,  4850.,  5370.,  77.,    193.,   325.,
      473.,   101.,   249.,   413.,   593.,   0.,     0.,     0.,     0.,
      4109.,  4481.,  4869.,  5273.,  4901.,  5305.,  5725.,  6161.,  10466.,
      11306., 12178., 13082., 5842.,  6490.,  7170.,  7882.,  7679.,  8571.,
      9511.,  10499., 322.,   778.,   1266.,  1786.,  1266.,  1786.,  2338.,
      2922.,  5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,
      0.,     0.,     0.,     0.,     1762.,  2090.,  2450.,  2842.,  2706.,
      3098.,  3522.,  3978.,  5716.,  6564.,  7476.,  8452.,  7860.,  8836.,
      9876.,  10980., 10134., 11438., 12838., 14334., 6228.,  7076.,  7988.,
      8964.,  7860.,  8836.,  9876.,  10980., 1426.,  1818.,  2242.,  2698.,
      1858.,  2314.,  2802.,  3322.,  0.,     0.,     0.,     0.,     6482.,
      7130.,  7810.,  8522.,  1090.,  1546.,  2034.,  2554.,  10100., 11332.,
      12628., 13988., 3668.,  4516.,  5428.,  6404.,  8102.,  9598.,  11190.,
      12878., 4596.,  5316.,  6100.,  6948.,  6228.,  7076.,  7988.,  8964.,
      130.,   330.,   562.,   826.,   562.,   826.,   1122.,  1450.,  0.,
      0.,     0.,     0.,     3650.,  4106.,  4594.,  5114.,  4594.,  5114.,
      5666.,  6250.,  10004., 11108., 12276., 13508., 12148., 13380., 14676.,
      16036., 8950.,  10382., 11910., 13534., 9492.,  10596., 11764., 12996.,
      3764.,  4740.,  5780.,  6884.,  2290.,  2810.,  3362.,  3946.,  2530.,
      2858.,  3218.,  3610.,  0.,     0.,     0.,     0.,     1093.,  1369.,
      1661.,  1969.,  29.,    81.,    149.,   233.,   2194.,  2586.,  3010.,
      3466.,  386.,   586.,   818.,   1082.,  3751.,  4355.,  5007.,  5707.,
      690.,   954.,   1250.,  1578.,  1378.,  1706.,  2066.,  2458.,  893.,
      1073.,  1269.,  1481.,  1301.,  1513.,  1741.,  1985.,  0.,     0.,
      0.,     0.,     637.,   817.,   1013.,  1225.,  789.,   1001.,  1229.,
      1473.,  2114.,  2570.,  3058.,  3578.,  2546.,  3066.,  3618.,  4202.,
      3471.,  4043.,  4663.,  5331.,  4130.,  4714.,  5330.,  5978.,  2578.,
      2970.,  3394.,  3850.,  2933.,  3273.,  3629.,  4001.,  77.,    193.,
      325.,   473.,   0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     101.,   249.,   413.,   593.,   637.,   817.,   1013.,  1225.,
      1298.,  1690.,  2114.,  2570.,  2498.,  2954.,  3442.,  3962.,  3847.,
      4579.,  5359.,  6187.,  3058.,  3578.,  4130.,  4714.,  4514.,  5098.,
      5714.,  6362.,  2525.,  2833.,  3157.,  3497.,  3317.,  3657.,  4013.,
      4385.,  0.,     0.,     0.,     0.,     2781.,  3089.,  3413.,  3753.,
      3317.,  3657.,  4013.,  4385.,  7298.,  8010.,  8754.,  9530.,  4210.,
      4730.,  5282.,  5866.,  9519.,  10475., 11479., 12531., 5026.,  5610.,
      6226.,  6874.,  6482.,  7130.,  7810.,  8522.,  149.,   361.,   589.,
      833.,   941.,   1185.,  1445.,  1721.,  0.,     0.,     0.,     0.,
      1346.,  1802.,  2290.,  2810.,  2802.,  3322.,  3874.,  4458.,  5716.,
      6564.,  7476.,  8452.,  7860.,  8836.,  9876.,  10980., 11766., 13198.,
      14726., 16350., 6228.,  7076.,  7988.,  8964.,  7860.,  8836.,  9876.,
      10980., 4594.,  5114.,  5666.,  6250.,  5538.,  6122.,  6738.,  7386.,
      0.,     0.,     0.,     0.,     8626.,  9402.,  10210., 11050., 5794.,
      6378.,  6994.,  7642.,  12148., 13380., 14676., 16036., 1620.,  2468.,
      3380.,  4356.,  10246., 11870., 13590., 15406., 2548.,  3268.,  4052.,
      4900.,  4180.,  5028.,  5940.,  6916.,  1762.,  2090.,  2450.,  2842.,
      2706.,  3098.,  3522.,  3978.,  0.,     0.,     0.,     0.,     4258.,
      4842.,  5458.,  6106.,  5714.,  6362.,  7042.,  7754.,  10004., 11108.,
      12276., 13508., 12148., 13380., 14676., 16036., 13654., 15214., 16870.,
      18622., 9492.,  10596., 11764., 12996., 5812.,  6788.,  7828.,  8932.,
      6482.,  7130.,  7810.,  8522.,  1090.,  1546.,  2034.,  2554.,  0.,
      0.,     0.,     0.,     6613.,  7081.,  7565.,  8065.,  173.,   417.,
      677.,   953.,   1266.,  1786.,  2338.,  2922.,  2018.,  2346.,  2706.,
      3098.,  4055.,  4723.,  5439.,  6203.,  82.,    218.,   386.,   586.,
      258.,   458.,   690.,   954.,   333.,   449.,   581.,   729.,   485.,
      633.,   797.,   977.,   0.,     0.,     0.,     0.,     3853.,  4225.,
      4613.,  5017.,  4773.,  5177.,  5597.,  6033.,  5794.,  6378.,  6994.,
      7642.,  6738.,  7386.,  8066.,  8778.,  959.,   1595.,  2279.,  3011.,
      962.,   1418.,  1906.,  2426.,  946.,   1210.,  1506.,  1834.,  1093.,
      1369.,  1661.,  1969.,  29.,    81.,    149.,   233.,   0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      350.,   1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,
      3644.,  4956.,  6524.,  6490.,  8970.,  11834., 15082., 4956.,  6524.,
      8348.,  10428., 12090., 15338., 18970., 22986., 7324.,  9404.,  11740.,
      14332., 12954., 15946., 19322., 23082., 860.,   2428.,  4252.,  6332.,
      4252.,  6332.,  8668.,  11260., 1884.,  3452.,  5276.,  7356.,  5496.,
      8120.,  11256., 14904., 10232., 13880., 18040., 22712., 10772., 15476.,
      20948., 27188., 19064., 23736., 28920., 34616., 17236., 22452., 28436.,
      35188., 23160., 27832., 33016., 38712., 6676.,  11380., 16852., 23092.,
      6136.,  9784.,  13944., 18616., 9592.,  12216., 15352., 19000., 2588.,
      3644.,  4956.,  6524.,  10232., 13880., 18040., 22712., 5496.,  8120.,
      11256., 14904., 20948., 27188., 34196., 41972., 10232., 13880., 18040.,
      22712., 29460., 36212., 43732., 52020., 6136.,  9784.,  13944., 18616.,
      16852., 23092., 30100., 37876., 9592.,  12216., 15352., 19000., 14328.,
      17976., 22136., 26808., 6490.,  8970.,  11834., 15082., 10772., 15476.,
      20948., 27188., 20948., 27188., 34196., 41972., 20174., 27102., 35182.,
      44414., 29460., 36212., 43732., 52020., 12142., 19326., 27662., 37150.,
      16852., 23092., 30100., 37876., 19854., 26270., 33838., 42558., 20628.,
      26356., 32852., 40116., 6356.,  10548., 15508., 21236., 4956.,  6524.,
      8348.,  10428., 19064., 23736., 28920., 34616., 10232., 13880., 18040.,
      22712., 29460., 36212., 43732., 52020., 6136.,  9784.,  13944., 18616.,
      16852., 23092., 30100., 37876., 9592.,  12216., 15352., 19000., 20628.,
      26356., 32852., 40116., 5496.,  8120.,  11256., 14904., 10232., 13880.,
      18040., 22712., 12090., 15338., 18970., 22986., 17236., 22452., 28436.,
      35188., 29460., 36212., 43732., 52020., 12142., 19326., 27662., 37150.,
      16852., 23092., 30100., 37876., 19854., 26270., 33838., 42558., 20628.,
      26356., 32852., 40116., 11822., 18494., 26318., 35294., 20948., 27188.,
      34196., 41972., 12820., 17524., 22996., 29236., 7324.,  9404.,  11740.,
      14332., 23160., 27832., 33016., 38712., 6136.,  9784.,  13944., 18616.,
      16852., 23092., 30100., 37876., 9592.,  12216., 15352., 19000., 20628.,
      26356., 32852., 40116., 5496.,  8120.,  11256., 14904., 20948., 27188.,
      34196., 41972., 10232., 13880., 18040., 22712., 19064., 23736., 28920.,
      34616., 12764., 15356., 18204., 21308., 6136.,  9784.,  13944., 18616.,
      14968., 19640., 24824., 30520., 16916., 21620., 27092., 33332., 14328.,
      17976., 22136., 26808., 6356.,  10548., 15508., 21236., 10232., 13880.,
      18040., 22712., 12820., 17524., 22996., 29236., 19064., 23736., 28920.,
      34616., 10232., 13880., 18040., 22712., 350.,   1006.,  1790.,  2702.,
      1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  6490.,
      8970.,  11834., 15082., 4956.,  6524.,  8348.,  10428., 12090., 15338.,
      18970., 22986., 7324.,  9404.,  11740., 14332., 12954., 15946., 19322.,
      23082., 860.,   2428.,  4252.,  6332.,  4252.,  6332.,  8668.,  11260.,
      1884.,  3452.,  5276.,  7356.,  5496.,  8120.,  11256., 14904., 10232.,
      13880., 18040., 22712., 10772., 15476., 20948., 27188., 19064., 23736.,
      28920., 34616., 17236., 22452., 28436., 35188., 23160., 27832., 33016.,
      38712., 6676.,  11380., 16852., 23092., 6136.,  9784.,  13944., 18616.,
      9592.,  12216., 15352., 19000., 2588.,  3644.,  4956.,  6524.,  10232.,
      13880., 18040., 22712., 5496.,  8120.,  11256., 14904., 20948., 27188.,
      34196., 41972., 10232., 13880., 18040., 22712., 29460., 36212., 43732.,
      52020., 6136.,  9784.,  13944., 18616., 16852., 23092., 30100., 37876.,
      9592.,  12216., 15352., 19000., 14328., 17976., 22136., 26808., 6490.,
      8970.,  11834., 15082., 10772., 15476., 20948., 27188., 20948., 27188.,
      34196., 41972., 20174., 27102., 35182., 44414., 29460., 36212., 43732.,
      52020., 12142., 19326., 27662., 37150., 16852., 23092., 30100., 37876.,
      19854., 26270., 33838., 42558., 20628., 26356., 32852., 40116., 6356.,
      10548., 15508., 21236., 4956.,  6524.,  8348.,  10428., 19064., 23736.,
      28920., 34616., 10232., 13880., 18040., 22712., 29460., 36212., 43732.,
      52020., 6136.,  9784.,  13944., 18616., 16852., 23092., 30100., 37876.,
      9592.,  12216., 15352., 19000., 20628., 26356., 32852., 40116., 5496.,
      8120.,  11256., 14904., 10232., 13880., 18040., 22712., 12090., 15338.,
      18970., 22986., 17236., 22452., 28436., 35188., 29460., 36212., 43732.,
      52020., 12142., 19326., 27662., 37150., 16852., 23092., 30100., 37876.,
      19854., 26270., 33838., 42558., 20628., 26356., 32852., 40116., 11822.,
      18494., 26318., 35294., 20948., 27188., 34196., 41972., 12820., 17524.,
      22996., 29236., 7324.,  9404.,  11740., 14332., 23160., 27832., 33016.,
      38712., 6136.,  9784.,  13944., 18616., 16852., 23092., 30100., 37876.,
      9592.,  12216., 15352., 19000., 20628., 26356., 32852., 40116., 5496.,
      8120.,  11256., 14904., 20948., 27188., 34196., 41972., 10232., 13880.,
      18040., 22712., 19064., 23736., 28920., 34616., 12764., 15356., 18204.,
      21308., 6136.,  9784.,  13944., 18616., 14968., 19640., 24824., 30520.,
      16916., 21620., 27092., 33332., 14328., 17976., 22136., 26808., 6356.,
      10548., 15508., 21236., 10232., 13880., 18040., 22712., 12820., 17524.,
      22996., 29236., 19064., 23736., 28920., 34616., 10232., 13880., 18040.,
      22712., 350.,   1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,
      2588.,  3644.,  4956.,  6524.,  6490.,  8970.,  11834., 15082., 4956.,
      6524.,  8348.,  10428., 12090., 15338., 18970., 22986., 7324.,  9404.,
      11740., 14332., 12954., 15946., 19322., 23082., 860.,   2428.,  4252.,
      6332.,  4252.,  6332.,  8668.,  11260., 1884.,  3452.,  5276.,  7356.,
      5496.,  8120.,  11256., 14904., 10232., 13880., 18040., 22712., 10772.,
      15476., 20948., 27188., 19064., 23736., 28920., 34616., 17236., 22452.,
      28436., 35188., 23160., 27832., 33016., 38712., 6676.,  11380., 16852.,
      23092., 6136.,  9784.,  13944., 18616., 9592.,  12216., 15352., 19000.,
      2588.,  3644.,  4956.,  6524.,  10232., 13880., 18040., 22712., 5496.,
      8120.,  11256., 14904., 20948., 27188., 34196., 41972., 10232., 13880.,
      18040., 22712., 29460., 36212., 43732., 52020., 6136.,  9784.,  13944.,
      18616., 16852., 23092., 30100., 37876., 9592.,  12216., 15352., 19000.,
      14328., 17976., 22136., 26808., 6490.,  8970.,  11834., 15082., 10772.,
      15476., 20948., 27188., 20948., 27188., 34196., 41972., 20174., 27102.,
      35182., 44414., 29460., 36212., 43732., 52020., 12142., 19326., 27662.,
      37150., 16852., 23092., 30100., 37876., 19854., 26270., 33838., 42558.,
      20628., 26356., 32852., 40116., 6356.,  10548., 15508., 21236., 4956.,
      6524.,  8348.,  10428., 19064., 23736., 28920., 34616., 10232., 13880.,
      18040., 22712., 29460., 36212., 43732., 52020., 6136.,  9784.,  13944.,
      18616., 16852., 23092., 30100., 37876., 9592.,  12216., 15352., 19000.,
      20628., 26356., 32852., 40116., 5496.,  8120.,  11256., 14904., 10232.,
      13880., 18040., 22712., 12090., 15338., 18970., 22986., 17236., 22452.,
      28436., 35188., 29460., 36212., 43732., 52020., 12142., 19326., 27662.,
      37150., 16852., 23092., 30100., 37876., 19854., 26270., 33838., 42558.,
      20628., 26356., 32852., 40116., 11822., 18494., 26318., 35294., 20948.,
      27188., 34196., 41972., 12820., 17524., 22996., 29236., 7324.,  9404.,
      11740., 14332., 23160., 27832., 33016., 38712., 6136.,  9784.,  13944.,
      18616., 16852., 23092., 30100., 37876., 9592.,  12216., 15352., 19000.,
      20628., 26356., 32852., 40116., 5496.,  8120.,  11256., 14904., 20948.,
      27188., 34196., 41972., 10232., 13880., 18040., 22712., 19064., 23736.,
      28920., 34616., 12764., 15356., 18204., 21308., 6136.,  9784.,  13944.,
      18616., 14968., 19640., 24824., 30520., 16916., 21620., 27092., 33332.,
      14328., 17976., 22136., 26808., 6356.,  10548., 15508., 21236., 10232.,
      13880., 18040., 22712., 12820., 17524., 22996., 29236., 19064., 23736.,
      28920., 34616., 10232., 13880., 18040., 22712.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,
      1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2938.,  4650.,
      6746.,  9226.,  6300.,  8380.,  10716., 13308., 4956.,  6524.,  8348.,
      10428., 6974.,  8398.,  9950.,  11630., 350.,   1006.,  1790.,  2702.,
      0.,     0.,     0.,     0.,     190.,   590.,   1118.,  1774.,  350.,
      1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,
      4956.,  6524.,  6490.,  8970.,  11834., 15082., 4956.,  6524.,  8348.,
      10428., 8348.,  10428., 12764., 15356., 350.,   1006.,  1790.,  2702.,
      2558.,  3470.,  4510.,  5678.,  0.,     0.,     0.,     0.,     860.,
      2428.,  4252.,  6332.,  4252.,  6332.,  8668.,  11260., 9592.,  12216.,
      15352., 19000., 14328., 17976., 22136., 26808., 6356.,  10548., 15508.,
      21236., 10232., 13880., 18040., 22712., 5496.,  8120.,  11256., 14904.,
      6300.,  8380.,  10716., 13308., 4956.,  6524.,  8348.,  10428., 0.,
      0.,     0.,     0.,     4252.,  6332.,  8668.,  11260., 7004.,  8572.,
      10396., 12476., 14328., 17976., 22136., 26808., 1400.,  4024.,  7160.,
      10808., 14484., 20212., 26708., 33972., 5496.,  8120.,  11256., 14904.,
      10232., 13880., 18040., 22712., 4956.,  6524.,  8348.,  10428., 8348.,
      10428., 12764., 15356., 0.,     0.,     0.,     0.,     7004.,  8572.,
      10396., 12476., 10396., 12476., 14812., 17404., 1400.,  4024.,  7160.,
      10808., 6136.,  9784.,  13944., 18616., 12500., 16692., 21652., 27380.,
      10232., 13880., 18040., 22712., 5496.,  8120.,  11256., 14904., 8348.,
      10428., 12764., 15356., 2908.,  4476.,  6300.,  8380.,  0.,     0.,
      0.,     0.,     10206., 11886., 13694., 15630., 510.,   1422.,  2462.,
      3630.,  4252.,  6332.,  8668.,  11260., 7004.,  8572.,  10396., 12476.,
      14138., 17386., 21018., 25034., 540.,   1596.,  2908.,  4476.,  1884.,
      3452.,  5276.,  7356.,  2558.,  3470.,  4510.,  5678.,  3742.,  4910.,
      6206.,  7630.,  0.,     0.,     0.,     0.,     510.,   1422.,  2462.,
      3630.,  3742.,  4910.,  6206.,  7630.,  7004.,  8572.,  10396., 12476.,
      10396., 12476., 14812., 17404., 1050.,  3018.,  5370.,  8106.,  1884.,
      3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  3742.,  4910.,
      6206.,  7630.,  190.,   590.,   1118.,  1774.,  0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     350.,   1006.,  1790.,  2702.,
      2558.,  3470.,  4510.,  5678.,  5276.,  7356.,  9692.,  12284., 10716.,
      13308., 16156., 19260., 7354.,  9578.,  12186., 15178., 10396., 12476.,
      14812., 17404., 860.,   2428.,  4252.,  6332.,  510.,   1422.,  2462.,
      3630.,  30.,    174.,   446.,   846.,   0.,     0.,     0.,     0.,
      2558.,  3470.,  4510.,  5678.,  4766.,  5934.,  7230.,  8654.,  10716.,
      13308., 16156., 19260., 7324.,  9404.,  11740., 14332., 12954., 15946.,
      19322., 23082., 860.,   2428.,  4252.,  6332.,  4252.,  6332.,  8668.,
      11260., 30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,
      0.,     0.,     0.,     0.,     4956.,  6524.,  8348.,  10428., 8348.,
      10428., 12764., 15356., 10232., 13880., 18040., 22712., 19064., 23736.,
      28920., 34616., 11092., 16308., 22292., 29044., 14968., 19640., 24824.,
      30520., 14328., 17976., 22136., 26808., 10396., 12476., 14812., 17404.,
      860.,   2428.,  4252.,  6332.,  0.,     0.,     0.,     0.,     8348.,
      10428., 12764., 15356., 2908.,  4476.,  6300.,  8380.,  19064., 23736.,
      28920., 34616., 10232., 13880., 18040., 22712., 23316., 30068., 37588.,
      45876., 14328., 17976., 22136., 26808., 23160., 27832., 33016., 38712.,
      860.,   2428.,  4252.,  6332.,  4252.,  6332.,  8668.,  11260., 0.,
      0.,     0.,     0.,     2908.,  4476.,  6300.,  8380.,  6300.,  8380.,
      10716., 13308., 10232., 13880., 18040., 22712., 19064., 23736., 28920.,
      34616., 17236., 22452., 28436., 35188., 23160., 27832., 33016., 38712.,
      6136.,  9784.,  13944., 18616., 4252.,  6332.,  8668.,  11260., 7004.,
      8572.,  10396., 12476., 0.,     0.,     0.,     0.,     3742.,  4910.,
      6206.,  7630.,  190.,   590.,   1118.,  1774.,  8348.,  10428., 12764.,
      15356., 2908.,  4476.,  6300.,  8380.,  16506., 20266., 24410., 28938.,
      5276.,  7356.,  9692.,  12284., 10716., 13308., 16156., 19260., 6974.,
      8398.,  9950.,  11630., 10206., 11886., 13694., 15630., 0.,     0.,
      0.,     0.,     190.,   590.,   1118.,  1774.,  1374.,  2030.,  2814.,
      3726.,  2908.,  4476.,  6300.,  8380.,  6300.,  8380.,  10716., 13308.,
      5466.,  7946.,  10810., 14058., 10716., 13308., 16156., 19260., 7324.,
      9404.,  11740., 14332., 10206., 11886., 13694., 15630., 510.,   1422.,
      2462.,  3630.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,
      540.,   1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2938.,
      4650.,  6746.,  9226.,  6300.,  8380.,  10716., 13308., 4956.,  6524.,
      8348.,  10428., 6974.,  8398.,  9950.,  11630., 350.,   1006.,  1790.,
      2702.,  0.,     0.,     0.,     0.,     190.,   590.,   1118.,  1774.,
      350.,   1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,
      3644.,  4956.,  6524.,  6490.,  8970.,  11834., 15082., 4956.,  6524.,
      8348.,  10428., 8348.,  10428., 12764., 15356., 350.,   1006.,  1790.,
      2702.,  2558.,  3470.,  4510.,  5678.,  0.,     0.,     0.,     0.,
      860.,   2428.,  4252.,  6332.,  4252.,  6332.,  8668.,  11260., 9592.,
      12216., 15352., 19000., 14328., 17976., 22136., 26808., 6356.,  10548.,
      15508., 21236., 10232., 13880., 18040., 22712., 5496.,  8120.,  11256.,
      14904., 6300.,  8380.,  10716., 13308., 4956.,  6524.,  8348.,  10428.,
      0.,     0.,     0.,     0.,     4252.,  6332.,  8668.,  11260., 7004.,
      8572.,  10396., 12476., 14328., 17976., 22136., 26808., 1400.,  4024.,
      7160.,  10808., 14484., 20212., 26708., 33972., 5496.,  8120.,  11256.,
      14904., 10232., 13880., 18040., 22712., 4956.,  6524.,  8348.,  10428.,
      8348.,  10428., 12764., 15356., 0.,     0.,     0.,     0.,     7004.,
      8572.,  10396., 12476., 10396., 12476., 14812., 17404., 1400.,  4024.,
      7160.,  10808., 6136.,  9784.,  13944., 18616., 12500., 16692., 21652.,
      27380., 10232., 13880., 18040., 22712., 5496.,  8120.,  11256., 14904.,
      8348.,  10428., 12764., 15356., 2908.,  4476.,  6300.,  8380.,  0.,
      0.,     0.,     0.,     10206., 11886., 13694., 15630., 510.,   1422.,
      2462.,  3630.,  4252.,  6332.,  8668.,  11260., 7004.,  8572.,  10396.,
      12476., 14138., 17386., 21018., 25034., 540.,   1596.,  2908.,  4476.,
      1884.,  3452.,  5276.,  7356.,  2558.,  3470.,  4510.,  5678.,  3742.,
      4910.,  6206.,  7630.,  0.,     0.,     0.,     0.,     510.,   1422.,
      2462.,  3630.,  3742.,  4910.,  6206.,  7630.,  7004.,  8572.,  10396.,
      12476., 10396., 12476., 14812., 17404., 1050.,  3018.,  5370.,  8106.,
      1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  3742.,
      4910.,  6206.,  7630.,  190.,   590.,   1118.,  1774.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20.,   23.,   44.,   39.,   68.,   55.,   62.,   56.,   70.,   124.,
      102.,  172.,  134.,  156.,  126.,  140.,  244.,  192.,  322.,  244.,
      266.,  233.,  266.,  450.,  344.,  567.,  422.,  467.,  318.,  348.,
      556.,  400.,  634.,  452.,  490.,  521.,  578.,  918.,  656.,  1035.,
      734.,  803.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  809.,
      890.,  1386., 968.,  1503., 1046., 1139., 702.,  764.,  1180., 816.,
      1258., 868.,  938.,  1012., 1074., 1660., 1146., 1768., 1218., 1288.,
      300.,  343.,  524.,  359.,  548.,  375.,  422.,  616.,  710.,  1084.,
      742.,  1132., 774.,  876.,  1086., 1180., 1804., 1232., 1882., 1284.,
      1386., 1673., 1826., 2790., 1904., 2907., 1982., 2147., 1278., 1388.,
      2116., 1440., 2194., 1492., 1610., 1961., 2138., 3258., 2216., 3375.,
      2294., 2483., 1470., 1596., 2428., 1648., 2506., 1700., 1834., 2249.,
      2450., 3726., 2528., 3843., 2606., 2819., 1662., 1804., 2740., 1856.,
      2818., 1908., 2058., 2372., 2514., 3820., 2586., 3928., 2658., 2808.,
      580.,  663.,  1004., 679.,  1028., 695.,  782.,  1176., 1350., 2044.,
      1382., 2092., 1414., 1596., 2046., 2220., 3364., 2272., 3442., 2324.,
      2506., 3113., 3386., 5130., 3464., 5247., 3542., 3827., 2238., 2428.,
      3676., 2480., 3754., 2532., 2730., 3401., 3698., 5598., 3776., 5715.,
      3854., 4163., 2430., 2636., 3988., 2688., 4066., 2740., 2954., 3689.,
      4010., 6066., 4088., 6183., 4166., 4499., 2622., 2844., 4300., 2896.,
      4378., 2948., 3178., 3732., 3954., 5980., 4026., 6088., 4098., 4328.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,    10.,   6.,    7.,    20.,   23.,
      26.,  18.,  20.,  14.,  18.,  48.,   58.,   68.,   44.,   50.,   34.,
      38.,  98.,  108., 118., 74.,  80.,   59.,   68.,   169.,  190.,  211.,
      128., 140., 78.,  86.,  194., 212.,  230.,  130.,  140.,  118.,  126.,
      284., 302., 320., 180., 190., 80.,   85.,   186.,  197.,  208.,  114.,
      120., 105., 110., 241., 252., 263.,  144.,  150.,  0.,    0.,    0.,
      0.,   0.,   0.,   0.,   7.,   14.,   29.,   44.,   59.,   32.,   40.,
      42.,  49.,  104., 119., 134., 72.,   80.,   86.,   102.,  216.,  250.,
      284., 152., 170., 166., 182., 386.,  420.,  454.,  242.,  260.,  257.,
      284., 601., 658., 715., 380., 410.,  210.,  230.,  482.,  524.,  566.,
      298., 320., 310., 330., 692., 734.,  776.,  408.,  430.,  176.,  187.,
      390., 413., 436., 228., 240., 231.,  242.,  505.,  528.,  551.,  288.,
      300., 0.,   0.,   0.,   0.,   0.,    0.,    0.,    13.,   26.,   53.,
      80.,  107., 56.,  70.,  78.,  91.,   188.,  215.,  242.,  126.,  140.,
      158., 186., 384., 442., 500., 260.,  290.,  298.,  326.,  674.,  732.,
      790., 410., 440., 455., 500., 1033., 1126., 1219., 632.,  680.,  342.,
      374., 770., 836., 902., 466., 500.,  502.,  534.,  1100., 1166., 1232.,
      636., 670., 272., 289., 594., 629.,  664.,  342.,  360.,  357.,  374.,
      769., 804., 839., 432., 450., 0.,    0.,    0.,    0.,    0.,    0.,
      0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      128.,   148.,   295.,   272.,   481.,   396.,   448.,   368.,   472.,
      854.,   720.,   1226.,  968.,   1136.,  888.,   992.,   1754.,  1400.,
      2366.,  1808.,  1976.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,
      3484.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  3916.,
      4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  3896.,  4256.,  6650.,
      4664.,  7262.,  5072.,  5496.,  6172.,  6808.,  10611., 7420.,  11529.,
      8032.,  8764.,  5400.,  5888.,  9098.,  6296.,  9710.,  6704.,  7256.,
      7840.,  8328.,  12878., 8896.,  13730., 9464.,  10016., 2288.,  2628.,
      4015.,  2752.,  4201.,  2876.,  3248.,  4688.,  5432.,  8294.,  5680.,
      8666.,  5928.,  6736.,  8408.,  9152.,  13994., 9560.,  14606., 9968.,
      10776., 12940., 14152., 21627., 14764., 22545., 15376., 16684., 9912.,
      10784., 16442., 11192., 17054., 11600., 12536., 15196., 16600., 25299.,
      17212., 26217., 17824., 19324., 11416., 12416., 18890., 12824., 19502.,
      13232., 14296., 17452., 19048., 28971., 19660., 29889., 20272., 21964.,
      12920., 14048., 21338., 14456., 21950., 14864., 16056., 18560., 19688.,
      29918., 20256., 30770., 20824., 22016., 4448.,  5108.,  7735.,  5232.,
      7921.,  5356.,  6048.,  9008.,  10392., 15734., 10640., 16106., 10888.,
      12336., 15928., 17312., 26234., 17720., 26846., 18128., 19576., 24220.,
      26392., 39987., 27004., 40905., 27616., 29884., 17432., 18944., 28682.,
      19352., 29294., 19760., 21336., 26476., 28840., 43659., 29452., 44577.,
      30064., 32524., 18936., 20576., 31130., 20984., 31742., 21392., 23096.,
      28732., 31288., 47331., 31900., 48249., 32512., 35164., 20440., 22208.,
      33578., 22616., 34190., 23024., 24856., 29280., 31048., 46958., 31616.,
      47810., 32184., 34016.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   35.,   41.,   128.,
      148.,  168.,  123.,  137.,  82.,   110.,  312.,  384.,  456.,  306.,
      350.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,  391.,  457.,
      1172., 1328., 1484., 919.,  1009., 566.,  626.,  1424., 1560., 1696.,
      966.,  1042., 866.,  926.,  2104., 2240., 2376., 1346., 1422., 599.,
      637.,  1400., 1484., 1568., 863.,  909.,  789.,  827.,  1820., 1904.,
      1988., 1093., 1139., 0.,    0.,    0.,    0.,    0.,    0.,    0.,
      41.,   95.,   196.,  312.,  428.,  233.,  295.,  311.,  365.,  776.,
      892.,  1008., 543.,  605.,  634.,  758.,  1608., 1872., 2136., 1146.,
      1286., 1254., 1378., 2928., 3192., 3456., 1846., 1986., 1939., 2149.,
      4556., 5000., 5444., 2899., 3133., 1598., 1754., 3680., 4008., 4336.,
      2286., 2458., 2378., 2534., 5320., 5648., 5976., 3146., 3318., 1355.,
      1441., 3008., 3188., 3368., 1763., 1857., 1785., 1871., 3908., 4088.,
      4268., 2233., 2327., 0.,    0.,    0.,    0.,    0.,    0.,    0.,
      77.,   179.,  364.,  576.,  788.,  413.,  523.,  587.,  689.,  1424.,
      1636., 1848., 963.,  1073., 1186., 1406., 2904., 3360., 3816., 1986.,
      2222., 2286., 2506., 5184., 5640., 6096., 3166., 3402., 3487., 3841.,
      7940., 8672., 9404., 4879., 5257., 2630., 2882., 5936., 6456., 6976.,
      3606., 3874., 3890., 4142., 8536., 9056., 9576., 4946., 5214., 2111.,
      2245., 4616., 4892., 5168., 2663., 2805., 2781., 2915., 5996., 6272.,
      6548., 3373., 3515., 0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      900.,   1044.,  2138.,  2020.,  3602.,  2996.,  3396.,  2632.,  3432.,
      6292.,  5384.,  9220.,  7336.,  8648.,  5992.,  5128.,  10948., 6312.,
      13748., 7496.,  8808.,  10172., 12140., 19830., 14940., 24030., 17740.,
      20476., 13800., 9864.,  22148., 11048., 24948., 12232., 14568., 19836.,
      23340., 36630., 26140., 40830., 28940., 33212., 21608., 14600., 33348.,
      15784., 36148., 16968., 20328., 26172., 29164., 45366., 31964., 49566.,
      34764., 38524., 15848., 3720.,  21124., 4904.,  23924., 6088.,  8424.,
      11016., 12840., 20788., 15304., 24484., 17768., 20104., 4292.,  4948.,
      7994.,  5924.,  9458.,  6900.,  7812.,  9416.,  11240., 18004., 13192.,
      20932., 15144., 17480., 13800., 9864.,  22148., 11048., 24948., 12232.,
      14568., 19836., 23340., 36630., 26140., 40830., 28940., 33212., 21608.,
      14600., 33348., 15784., 36148., 16968., 20328., 26172., 29164., 45366.,
      31964., 49566., 34764., 38524., 15848., 3720.,  21124., 4904.,  23924.,
      6088.,  8424.,  12028., 14508., 23382., 17308., 27582., 20108., 23356.,
      5992.,  5128.,  10948., 6312.,  13748., 7496.,  8808.,  8328.,  9128.,
      15220., 11592., 18916., 14056., 15368., 7684.,  8852.,  13850., 9828.,
      15314., 10804., 12228., 16200., 19048., 29716., 21000., 32644., 22952.,
      26312., 21608., 14600., 33348., 15784., 36148., 16968., 20328., 26172.,
      29164., 45366., 31964., 49566., 34764., 38524., 15848., 3720.,  21124.,
      4904.,  23924., 6088.,  8424.,  12028., 14508., 23382., 17308., 27582.,
      20108., 23356., 5992.,  5128.,  10948., 6312.,  13748., 7496.,  8808.,
      10172., 12140., 19830., 14940., 24030., 17740., 20476., 13800., 9864.,
      22148., 11048., 24948., 12232., 14568., 17160., 18984., 30004., 21448.,
      33700., 23912., 26248.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   230.,   270.,
      900.,   1044.,  1188.,  902.,   1006.,  540.,   748.,   2216.,  2760.,
      3304.,  2268.,  2604.,  1580.,  1148.,  4296.,  3176.,  3720.,  2284.,
      2620.,  2170.,  2674.,  6364.,  7564.,  8764.,  5274.,  5970.,  4300.,
      2076.,  8200.,  5544.,  6600.,  3724.,  4316.,  3932.,  4396.,  9768.,
      10824., 11880., 6684.,  7276.,  4630.,  190.,   6116.,  1012.,  1668.,
      950.,   1310.,  1374.,  1670.,  3636.,  4292.,  4948.,  2750.,  3110.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     270.,   694.,
      1428.,  2340.,  3252.,  1774.,  2262.,  2390.,  2814.,  5988.,  6900.,
      7812.,  4214.,  4702.,  4860.,  5836.,  12392., 14472., 16552., 8892.,
      9996.,  9740.,  3932.,  16008., 10280., 12360., 6604.,  7708.,  8266.,
      9922.,  20860., 24364., 27868., 14826., 16674., 12460., 4860.,  19912.,
      12648., 15240., 8044.,  9404.,  9788.,  11020., 23016., 25608., 28200.,
      14844., 16204., 10630., 430.,   12740., 2260.,  3684.,  1958.,  2702.,
      3150.,  3830.,  7956.,  9380.,  10804., 5678.,  6422.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     510.,   1318.,  2676.,  4356.,
      6036.,  3166.,  4038.,  4550.,  5358.,  11076., 12756., 14436., 7526.,
      8398.,  9180.,  10924., 22568., 26184., 29800., 15516., 17388., 17900.,
      6716.,  27720., 17384., 21000., 10924., 12796., 13722., 15506., 32028.,
      35788., 39548., 20666., 22642., 14860., 860.,   18056., 4136.,  6216.,
      3532.,  4636.,  4764.,  5740.,  12456., 14536., 16616., 9052.,  10156.,
      630.,   30.,    1700.,  180.,   324.,   278.,   382.,   190.,   230.,
      756.,   900.,   1044.,  798.,   902.,   0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48.,    80.,    56.,    92.,    119.,   176.,   116.,   156.,   209.,
      272.,   176.,   220.,   200.,   248.,   144.,   224.,   192.,   280.,
      358.,   496.,   312.,   408.,   538.,   688.,   432.,   536.,   512.,
      624.,   384.,   504.,   432.,   560.,   778.,   976.,   632.,   768.,
      1078.,  1288.,  832.,   976.,   912.,   1064.,  728.,   932.,   848.,
      1064.,  1467.,  1800.,  1148.,  1376.,  1917.,  2268.,  1448.,  1688.,
      1616.,  1868.,  1120.,  1272.,  1232.,  1392.,  1978.,  2224.,  1432.,
      1600.,  2278.,  2536.,  1632.,  1808.,  1776.,  1960.,  1832.,  2084.,
      2048.,  2312.,  3267.,  3672.,  2348.,  2624.,  3717.,  4140.,  2648.,
      2936.,  2912.,  3212.,  1856.,  2040.,  2032.,  2224.,  3178.,  3472.,
      2232.,  2432.,  3478.,  3784.,  2432.,  2640.,  2640.,  2856.,  2936.,
      3236.,  3248.,  3560.,  5067.,  5544.,  3548.,  3872.,  5517.,  6012.,
      3848.,  4184.,  4208.,  4556.,  2592.,  2808.,  2832.,  3056.,  4378.,
      4720.,  3032.,  3264.,  4678.,  5032.,  3232.,  3472.,  3504.,  3752.,
      3792.,  4048.,  4032.,  4296.,  6238.,  6640.,  4312.,  4584.,  6658.,
      7072.,  4592.,  4872.,  4864.,  5152.,  1088.,  1200.,  1256.,  1372.,
      1919.,  2096.,  1316.,  1436.,  2009.,  2192.,  1376.,  1500.,  1560.,
      1688.,  2224.,  2464.,  2592.,  2840.,  3958.,  4336.,  2712.,  2968.,
      4138.,  4528.,  2832.,  3096.,  3232.,  3504.,  4064.,  4344.,  4432.,
      4720.,  6778.,  7216.,  4632.,  4928.,  7078.,  7528.,  4832.,  5136.,
      5232.,  5544.,  6248.,  6692.,  6848.,  7304.,  10467., 11160., 7148.,
      7616.,  10917., 11628., 7448.,  7928.,  8096.,  8588.,  4800.,  5112.,
      5232.,  5552.,  7978.,  8464.,  5432.,  5760.,  8278.,  8776.,  5632.,
      5968.,  6096.,  6440.,  7352.,  7844.,  8048.,  8552.,  12267., 13032.,
      8348.,  8864.,  12717., 13500., 8648.,  9176.,  9392.,  9932.,  5536.,
      5880.,  6032.,  6384.,  9178.,  9712.,  6232.,  6592.,  9478.,  10024.,
      6432.,  6800.,  6960.,  7336.,  8456.,  8996.,  9248.,  9800.,  14067.,
      14904., 9548.,  10112., 14517., 15372., 9848.,  10424., 10688., 11276.,
      6272.,  6648.,  6832.,  7216.,  10378., 10960., 7032.,  7424.,  10678.,
      11272., 7232.,  7632.,  7824.,  8232.,  9072.,  9488.,  9632.,  10056.,
      14638., 15280., 9912.,  10344., 15058., 15712., 10192., 10632., 10784.,
      11232., 2128.,  2320.,  2456.,  2652.,  3719.,  4016.,  2516.,  2716.,
      3809.,  4112.,  2576.,  2780.,  2920.,  3128.,  4304.,  4704.,  4992.,
      5400.,  7558.,  8176.,  5112.,  5528.,  7738.,  8368.,  5232.,  5656.,
      5952.,  6384.,  7744.,  8184.,  8432.,  8880.,  12778., 13456., 8632.,
      9088.,  13078., 13768., 8832.,  9296.,  9552.,  10024., 11768., 12452.,
      12848., 13544., 19467., 20520., 13148., 13856., 19917., 20988., 13448.,
      14168., 14576., 15308., 8480.,  8952.,  9232.,  9712.,  13978., 14704.,
      9432.,  9920.,  14278., 15016., 9632.,  10128., 10416., 10920., 12872.,
      13604., 14048., 14792., 21267., 22392., 14348., 15104., 21717., 22860.,
      14648., 15416., 15872., 16652., 9216.,  9720.,  10032., 10544., 15178.,
      15952., 10232., 10752., 15478., 16264., 10432., 10960., 11280., 11816.,
      13976., 14756., 15248., 16040., 23067., 24264., 15548., 16352., 23517.,
      24732., 15848., 16664., 17168., 17996., 9952.,  10488., 10832., 11376.,
      16378., 17200., 11032., 11584., 16678., 17512., 11232., 11792., 12144.,
      12712., 14352., 14928., 15232., 15816., 23038., 23920., 15512., 16104.,
      23458., 24352., 15792., 16392., 16704., 17312.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,   32.,   24.,   44.,
      21.,   32.,   27.,   40.,   11.,   24.,   13.,   28.,   48.,   80.,
      56.,   92.,   64.,   104.,  51.,   72.,   57.,   80.,   26.,   56.,
      38.,   72.,   120.,  192.,  152.,  232.,  184.,  272.,  130.,  176.,
      150.,  200.,  86.,   136.,  98.,   152.,  280.,  392.,  312.,  432.,
      344.,  472.,  230.,  296.,  250.,  320.,  155.,  236.,  185.,  272.,
      496.,  676.,  568.,  760.,  640.,  844.,  407.,  512.,  449.,  560.,
      254.,  312.,  282.,  344.,  648.,  776.,  712.,  848.,  776.,  920.,
      446.,  520.,  482.,  560.,  394.,  472.,  422.,  504.,  968.,  1136.,
      1032., 1208., 1096., 1280., 626.,  720.,  662.,  760.,  279.,  320.,
      297.,  340.,  656.,  744.,  696.,  788.,  736.,  832.,  407.,  456.,
      429.,  480.,  369.,  420.,  387.,  440.,  856.,  964.,  896.,  1008.,
      936.,  1052., 517.,  576.,  539.,  600.,  0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      13.,   28.,   39.,   56.,   80.,   116.,  136.,  176.,  192.,  236.,
      105.,  128.,  135.,  160.,  143.,  168.,  169.,  196.,  360.,  416.,
      416.,  476.,  472.,  536.,  255.,  288.,  285.,  320.,  290.,  344.,
      350.,  408.,  744.,  864.,  872.,  1000., 1000., 1136., 538.,  608.,
      606.,  680.,  590.,  664.,  650.,  728.,  1384., 1544., 1512., 1680.,
      1640., 1816., 878.,  968.,  946.,  1040., 911.,  1028., 1013., 1136.,
      2152., 2404., 2368., 2632., 2584., 2860., 1379., 1520., 1493., 1640.,
      758.,  840.,  834.,  920.,  1752., 1928., 1912., 2096., 2072., 2264.,
      1094., 1192., 1178., 1280., 1138., 1240., 1214., 1320., 2552., 2768.,
      2712., 2936., 2872., 3104., 1514., 1632., 1598., 1720., 651.,  704.,
      693.,  748.,  1448., 1560., 1536., 1652., 1624., 1744., 851.,  912.,
      897.,  960.,  861.,  924.,  903.,  968.,  1888., 2020., 1976., 2112.,
      2064., 2204., 1081., 1152., 1127., 1200., 0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      25.,   52.,   75.,   104.,  152.,  212.,  256.,  320.,  360.,  428.,
      189.,  224.,  243.,  280.,  275.,  312.,  325.,  364.,  672.,  752.,
      776.,  860.,  880.,  968.,  459.,  504.,  513.,  560.,  554.,  632.,
      662.,  744.,  1368., 1536., 1592., 1768., 1816., 2000., 946.,  1040.,
      1062., 1160., 1094., 1192., 1202., 1304., 2488., 2696., 2712., 2928.,
      2936., 3160., 1526., 1640., 1642., 1760., 1667., 1820., 1841., 2000.,
      3808., 4132., 4168., 4504., 4528., 4876., 2351., 2528., 2537., 2720.,
      1262., 1368., 1386., 1496., 2856., 3080., 3112., 3344., 3368., 3608.,
      1742., 1864., 1874., 2000., 1882., 2008., 2006., 2136., 4136., 4400.,
      4392., 4664., 4648., 4928., 2402., 2544., 2534., 2680., 1023., 1088.,
      1089., 1156., 2240., 2376., 2376., 2516., 2512., 2656., 1295., 1368.,
      1365., 1440., 1353., 1428., 1419., 1496., 2920., 3076., 3056., 3216.,
      3192., 3356., 1645., 1728., 1715., 1800., 0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      326.,   574.,   382.,   662.,   847.,   1291.,  854.,   1166.,  1555.,
      2047.,  1326.,  1670.,  1510.,  1886.,  1004.,  1628.,  1372.,  2060.,
      2606.,  3686.,  2316.,  3068.,  4022.,  5198.,  3260.,  4076.,  3884.,
      4764.,  2652.,  3340.,  2316.,  2812.,  4950.,  5998.,  2876.,  3436.,
      6302.,  7446.,  3436.,  4060.,  4060.,  4748.,  4538.,  5634.,  5474.,
      6666.,  8985.,  10845., 6826.,  8114.,  11013., 13017., 8178.,  9562.,
      9498.,  10978., 6428.,  7372.,  4556.,  5308.,  10358., 11790., 5116.,
      5932.,  11710., 13238., 5676.,  6556.,  6812.,  7756.,  9178.,  10658.,
      10882., 12458., 17097., 19533., 12234., 13906., 19125., 21705., 13586.,
      15354., 15674., 17538., 10204., 11404., 6796.,  7804.,  15766., 17582.,
      7356.,  8428.,  17118., 19030., 7916.,  9052.,  9564.,  10764., 12410.,
      13762., 13858., 15306., 21561., 23805., 15210., 16754., 23589., 25977.,
      16562., 18202., 18394., 20130., 7452.,  8396.,  1484.,  2236.,  9846.,
      11278., 2044.,  2860.,  11198., 12726., 2604.,  3484.,  3740.,  4684.,
      5004.,  6012.,  5884.,  6956.,  9566.,  11222., 7084.,  8220.,  11366.,
      13118., 8284.,  9484.,  9420.,  10684., 1958.,  2334.,  2270.,  2678.,
      3679.,  4315.,  2742.,  3182.,  4387.,  5071.,  3214.,  3686.,  3654.,
      4158.,  4268.,  5148.,  5148.,  6092.,  8270.,  9734.,  6092.,  7100.,
      9686.,  11246., 7036.,  8108.,  8172.,  9308.,  6428.,  7372.,  4556.,
      5308.,  10358., 11790., 5116.,  5932.,  11710., 13238., 5676.,  6556.,
      6812.,  7756.,  9178.,  10658., 10882., 12458., 17097., 19533., 12234.,
      13906., 19125., 21705., 13586., 15354., 15674., 17538., 10204., 11404.,
      6796.,  7804.,  15766., 17582., 7356.,  8428.,  17118., 19030., 7916.,
      9052.,  9564.,  10764., 12410., 13762., 13858., 15306., 21561., 23805.,
      15210., 16754., 23589., 25977., 16562., 18202., 18394., 20130., 7452.,
      8396.,  1484.,  2236.,  9846.,  11278., 2044.,  2860.,  11198., 12726.,
      2604.,  3484.,  3740.,  4684.,  5402.,  6626.,  6594.,  7914.,  10665.,
      12717., 7946.,  9362.,  12693., 14889., 9298.,  10810., 10874., 12482.,
      2652.,  3340.,  2316.,  2812.,  4950.,  5998.,  2876.,  3436.,  6302.,
      7446.,  3436.,  4060.,  4060.,  4748.,  3788.,  4540.,  4156.,  4972.,
      6974.,  8246.,  5356.,  6236.,  8774.,  10142., 6556.,  7500.,  7180.,
      8188.,  3590.,  4094.,  4158.,  4694.,  6511.,  7339.,  4630.,  5198.,
      7219.,  8095.,  5102.,  5702.,  5798.,  6430.,  7532.,  8668.,  8924.,
      10124., 13934., 15782., 9868.,  11132., 15350., 17294., 10812., 12140.,
      12460., 13852., 10204., 11404., 6796.,  7804.,  15766., 17582., 7356.,
      8428.,  17118., 19030., 7916.,  9052.,  9564.,  10764., 12410., 13762.,
      13858., 15306., 21561., 23805., 15210., 16754., 23589., 25977., 16562.,
      18202., 18394., 20130., 7452.,  8396.,  1484.,  2236.,  9846.,  11278.,
      2044.,  2860.,  11198., 12726., 2604.,  3484.,  3740.,  4684.,  5402.,
      6626.,  6594.,  7914.,  10665., 12717., 7946.,  9362.,  12693., 14889.,
      9298.,  10810., 10874., 12482., 2652.,  3340.,  2316.,  2812.,  4950.,
      5998.,  2876.,  3436.,  6302.,  7446.,  3436.,  4060.,  4060.,  4748.,
      4538.,  5634.,  5474.,  6666.,  8985.,  10845., 6826.,  8114.,  11013.,
      13017., 8178.,  9562.,  9498.,  10978., 6428.,  7372.,  4556.,  5308.,
      10358., 11790., 5116.,  5932.,  11710., 13238., 5676.,  6556.,  6812.,
      7756.,  8076.,  9084.,  8956.,  10028., 14174., 15830., 10156., 11292.,
      15974., 17726., 11356., 12556., 12492., 13756.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    17.,    53.,    46.,    134.,   102.,   222.,   158.,
      310.,   149.,   233.,   193.,   293.,   65.,    165.,   77.,    193.,
      326.,   574.,   382.,   662.,   438.,   750.,   369.,   533.,   413.,
      593.,   154.,   386.,   242.,   506.,   828.,   1388.,  1068.,  1692.,
      1308.,  1996.,  954.,   1314.,  1106.,  1498.,  594.,   986.,   682.,
      1106.,  2028.,  2908.,  2268.,  3212.,  2508.,  3516.,  1714.,  2234.,
      1866.,  2418.,  1087.,  1723.,  1315.,  1999.,  3626.,  5042.,  4178.,
      5690.,  4730.,  6338.,  3055.,  3883.,  3379.,  4255.,  1922.,  2378.,
      2138.,  2626.,  4940.,  5948.,  5436.,  6508.,  5932.,  7068.,  3426.,
      4010.,  3706.,  4322.,  3002.,  3618.,  3218.,  3866.,  7420.,  8748.,
      7916.,  9308.,  8412.,  9868.,  4826.,  5570.,  5106.,  5882.,  2153.,
      2477.,  2293.,  2633.,  5078.,  5774.,  5390.,  6118.,  5702.,  6462.,
      3161.,  3549.,  3333.,  3737.,  2853.,  3257.,  2993.,  3413.,  6638.,
      7494.,  6950.,  7838.,  7262.,  8182.,  4021.,  4489.,  4193.,  4677.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     77.,    193.,   281.,   413.,
      574.,   854.,   1014.,  1326.,  1454.,  1798.,  797.,   977.,   1033.,
      1229.,  1097.,  1293.,  1301.,  1513.,  2774.,  3214.,  3214.,  3686.,
      3654.,  4158.,  1977.,  2237.,  2213.,  2489.,  2218.,  2642.,  2690.,
      3146.,  5724.,  6668.,  6732.,  7740.,  7740.,  8812.,  4170.,  4722.,
      4706.,  5290.,  4578.,  5162.,  5050.,  5666.,  10764., 12028., 11772.,
      13100., 12780., 14172., 6850.,  7562.,  7386.,  8130.,  7063.,  7987.,
      7867.,  8839.,  16730., 18722., 18434., 20522., 20138., 22322., 10759.,
      11875., 11659., 12823., 5906.,  6554.,  6506.,  7186.,  13676., 15068.,
      14940., 16396., 16204., 17724., 8562.,  9338.,  9226.,  10034., 8906.,
      9714.,  9506.,  10346., 19996., 21708., 21260., 23036., 22524., 24364.,
      11882., 12818., 12546., 13514., 5105.,  5525.,  5437.,  5873.,  11366.,
      12254., 12062., 12982., 12758., 13710., 6689.,  7173.,  7053.,  7553.,
      6765.,  7265.,  7097.,  7613.,  14846., 15894., 15542., 16622., 16238.,
      17350., 8509.,  9073.,  8873.,  9453.,  0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     149.,   361.,   545.,   773.,   1102.,  1574.,  1926.,  2430.,
      2750.,  3286.,  1445.,  1721.,  1873.,  2165.,  2129.,  2421.,  2525.,
      2833.,  5222.,  5854.,  6046.,  6710.,  6870.,  7566.,  3585.,  3941.,
      4013.,  4385.,  4282.,  4898.,  5138.,  5786.,  10620., 11948., 12396.,
      13788., 14172., 15628., 7386.,  8130.,  8306.,  9082.,  8562.,  9338.,
      9418.,  10226., 19500., 21148., 21276., 22988., 23052., 24828., 11986.,
      12890., 12906., 13842., 13039., 14251., 14419., 15679., 29834., 32402.,
      32690., 35354., 35546., 38306., 18463., 19867., 19939., 21391., 9890.,
      10730., 10874., 11746., 22412., 24188., 24444., 26284., 26476., 28380.,
      13698., 14666., 14746., 15746., 14810., 15810., 15794., 16826., 32572.,
      34668., 34604., 36764., 36636., 38860., 18938., 20066., 19986., 21146.,
      8057.,  8573.,  8581.,  9113.,  17654., 18734., 18734., 19846., 19814.,
      20958., 10217., 10797., 10773., 11369., 10677., 11273., 11201., 11813.,
      23054., 24294., 24134., 25406., 25214., 26518., 12997., 13657., 13553.,
      14229., 0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2380.,  4332.,  2156.,  3340.,  5722.,  8202.,  3852.,  5292.,  9290.,
      12154., 5548.,  7244.,  6988.,  8940.,  4120.,  7000.,  7000.,  10392.,
      11764., 17236., 10392., 14296., 16852., 23092., 13784., 18200., 18712.,
      23640., 17880., 22296., 9240.,  12120., 25044., 31284., 11608., 15000.,
      31668., 38676., 13976., 17880., 18904., 23320., 10180., 14756., 13476.,
      18820., 22622., 30190., 20100., 26212., 30510., 39230., 26724., 33604.,
      28356., 34980., 13784., 18200., 5144.,  8024.,  22996., 29236., 7512.,
      10904., 29620., 36628., 9880.,  13784., 14808., 19224., 16964., 22564.,
      22308., 28676., 27678., 36782., 28932., 36068., 35566., 45822., 35556.,
      43460., 31044., 38692., 17880., 22296., 9240.,  12120., 25044., 31284.,
      11608., 15000., 31668., 38676., 13976., 17880., 18904., 23320., 10180.,
      14756., 13476., 18820., 22622., 30190., 20100., 26212., 30510., 39230.,
      26724., 33604., 28356., 34980., 13784., 18200., 5144.,  8024.,  22996.,
      29236., 7512.,  10904., 29620., 36628., 9880.,  13784., 14808., 19224.,
      13976., 17880., 16856., 21272., 19252., 25236., 22296., 27224., 25364.,
      32116., 27736., 33176., 19736., 24664., 15308., 18284., 8940.,  11148.,
      19994., 24010., 10636., 13100., 23562., 27962., 12332., 15052., 15820.,
      18796., 8216.,  11096., 11096., 14488., 17908., 23380., 14488., 18392.,
      22996., 29236., 17880., 22296., 22808., 27736., 13784., 18200., 5144.,
      8024.,  22996., 29236., 7512.,  10904., 29620., 36628., 9880.,  13784.,
      14808., 19224., 16964., 22564., 22308., 28676., 27678., 36782., 28932.,
      36068., 35566., 45822., 35556., 43460., 31044., 38692., 17880., 22296.,
      9240.,  12120., 25044., 31284., 11608., 15000., 31668., 38676., 13976.,
      17880., 18904., 23320., 10180., 14756., 13476., 18820., 22622., 30190.,
      20100., 26212., 30510., 39230., 26724., 33604., 28356., 34980., 13784.,
      18200., 5144.,  8024.,  22996., 29236., 7512.,  10904., 29620., 36628.,
      9880.,  13784., 14808., 19224., 16964., 22564., 22308., 28676., 27678.,
      36782., 28932., 36068., 35566., 45822., 35556., 43460., 31044., 38692.,
      17880., 22296., 9240.,  12120., 25044., 31284., 11608., 15000., 31668.,
      38676., 13976., 17880., 18904., 23320., 9880.,  13784., 12760., 17176.,
      21300., 27284., 18200., 23128., 27412., 34164., 23640., 29080., 23832.,
      28760., 2380.,  4332.,  2156.,  3340.,  5722.,  8202.,  3852.,  5292.,
      9290.,  12154., 5548.,  7244.,  6988.,  8940.,  4120.,  7000.,  7000.,
      10392., 11764., 17236., 10392., 14296., 16852., 23092., 13784., 18200.,
      18712., 23640., 17880., 22296., 9240.,  12120., 25044., 31284., 11608.,
      15000., 31668., 38676., 13976., 17880., 18904., 23320., 10180., 14756.,
      13476., 18820., 22622., 30190., 20100., 26212., 30510., 39230., 26724.,
      33604., 28356., 34980., 13784., 18200., 5144.,  8024.,  22996., 29236.,
      7512.,  10904., 29620., 36628., 9880.,  13784., 14808., 19224., 16964.,
      22564., 22308., 28676., 27678., 36782., 28932., 36068., 35566., 45822.,
      35556., 43460., 31044., 38692., 17880., 22296., 9240.,  12120., 25044.,
      31284., 11608., 15000., 31668., 38676., 13976., 17880., 18904., 23320.,
      10180., 14756., 13476., 18820., 22622., 30190., 20100., 26212., 30510.,
      39230., 26724., 33604., 28356., 34980., 13784., 18200., 5144.,  8024.,
      22996., 29236., 7512.,  10904., 29620., 36628., 9880.,  13784., 14808.,
      19224., 13976., 17880., 16856., 21272., 19252., 25236., 22296., 27224.,
      25364., 32116., 27736., 33176., 19736., 24664.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1132.,
      2316.,  1118.,  1774.,  1454.,  2238.,  430.,   1214.,  510.,   1422.,
      2380.,  4332.,  2156.,  3340.,  2572.,  4012.,  110.,   382.,   446.,
      846.,   380.,   1180.,  1052.,  2108.,  2776.,  5144.,  4632.,  7512.,
      6488.,  9880.,  4604.,  6428.,  5788.,  7868.,  3740.,  5820.,  3772.,
      5084.,  11416., 15320., 5848.,  8216.,  7704.,  10584., 1052.,  2108.,
      2236.,  3548.,  2074.,  4042.,  3850.,  6202.,  9476.,  14564., 13796.,
      19652., 17476., 23076., 11482., 14986., 11338., 14202., 10204., 12796.,
      7164.,  8988.,  22296., 27224., 10584., 13976., 14488., 18392., 2396.,
      3964.,  4604.,  6428.,  5116.,  6940.,  6812.,  8892.,  15320., 19736.,
      19224., 24152., 18392., 22808., 13436., 16284., 8860.,  10940., 8078.,
      9630.,  350.,   1006.,  11404., 13868., 2988.,  4684.,  5452.,  7404.,
      3150.,  4190.,  4510.,  5678.,  4766.,  5934.,  5870.,  7166.,  12844.,
      15564., 15308., 18284., 8940.,  11148., 9950.,  11630., 430.,   1214.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     510.,   1422.,  2126.,  3166.,
      4332.,  6540.,  7820.,  10284., 11308., 14028., 6206.,  7630.,  8078.,
      9630.,  8590.,  10142., 10206., 11886., 21772., 25260., 12332., 15052.,
      15820., 18796., 590.,   1630.,  2462.,  3630.,  3772.,  5084.,  5468.,
      7036.,  11608., 15000., 15512., 19416., 19416., 23832., 11068., 13404.,
      13276., 15868., 12252., 14844., 1020.,  2844.,  18200., 23128., 6488.,
      9880.,  10392., 14296., 4444.,  6012.,  6652.,  8476.,  7354.,  9578.,
      9642.,  12250., 21060., 26660., 26404., 32772., 18820., 24932., 18298.,
      22058., 6378.,  9498.,  3740.,  5820.,  3772.,  5084.,  11416., 15320.,
      5848.,  8216.,  7704.,  10584., 1052.,  2108.,  2236.,  3548.,  1724.,
      3036.,  2396.,  3964.,  6488.,  9880.,  8344.,  12248., 9560.,  12952.,
      6972.,  9308.,  5468.,  7036.,  4334.,  5630.,  190.,   590.,   6988.,
      8940.,  1644.,  2828.,  3084.,  4524.,  1966.,  2750.,  2814.,  3726.,
      2558.,  3470.,  3150.,  4190.,  7404.,  9612.,  8844.,  11308., 5548.,
      7244.,  6206.,  7630.,  270.,   798.,   0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     350.,   1006.,  1454.,  2238.,  2988.,  4684.,  5452.,  7404.,
      7916.,  10124., 4510.,  5678.,  5870.,  7166.,  5870.,  7166.,  6974.,
      8398.,  15308., 18284., 8940.,  11148., 11404., 13868., 430.,   1214.,
      1790.,  2702.,  3068.,  4892.,  5788.,  7868.,  12248., 16664., 18200.,
      23128., 24152., 29592., 13436., 16284., 16668., 19772., 16668., 19772.,
      10556., 12892., 33176., 39128., 15320., 19736., 21272., 26200., 3740.,
      5820.,  6972.,  9308.,  8538.,  11018., 11338., 14202., 24452., 30564.,
      30820., 37700., 28356., 34980., 21018., 25034., 13706., 17082., 12252.,
      14844., 1020.,  2844.,  18200., 23128., 6488.,  9880.,  10392., 14296.,
      4444.,  6012.,  6652.,  8476.,  7164.,  8988.,  8860.,  10940., 19416.,
      23832., 23320., 28248., 14296., 18712., 15484., 18332., 2716.,  4796.,
      590.,   1630.,  30.,    174.,   2572.,  4012.,  300.,   972.,   716.,
      1644.,  782.,   1310.,  1118.,  1774.,  350.,   1006.,  430.,   1214.,
      1964.,  3660.,  2380.,  4332.,  2156.,  3340.,  2462.,  3630.,  110.,
      382.,   0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      134.,   192.,   254.,   320.,   158.,   224.,   294.,   368.,   371.,
      476.,   587.,   704.,   390.,   464.,   542.,   624.,   719.,   836.,
      959.,   1088.,  622.,   704.,   790.,   880.,   710.,   800.,   894.,
      992.,   428.,   576.,   732.,   896.,   604.,   768.,   940.,   1120.,
      1174.,  1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,
      2152.,  2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,
      2268.,  2496.,  1308.,  1536.,  1772.,  2016.,  1484.,  1728.,  1980.,
      2240.,  2734.,  3112.,  3502.,  3904.,  2268.,  2528.,  2796.,  3072.,
      3910.,  4312.,  4726.,  5152.,  3052.,  3328.,  3612.,  3904.,  3356.,
      3648.,  3948.,  4256.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,
      3818.,  4256.,  5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,
      5504.,  6993.,  7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,
      5978.,  6464.,  6962.,  7472.,  4188.,  4480.,  4780.,  5088.,  4620.,
      4928.,  5244.,  5568.,  7438.,  7912.,  8398.,  8896.,  5404.,  5728.,
      6060.,  6400.,  8614.,  9112.,  9622.,  10144., 6188.,  6528.,  6876.,
      7232.,  6748.,  7104.,  7468.,  7840.,  6842.,  7328.,  7826.,  8336.,
      7682.,  8192.,  8714.,  9248.,  12285., 13068., 13869., 14688., 8858.,
      9392.,  9938.,  10496., 14049., 14868., 15705., 16560., 10034., 10592.,
      11162., 11744., 11066., 11648., 12242., 12848., 7068.,  7424.,  7788.,
      8160.,  7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294., 13888.,
      8540.,  8928.,  9324.,  9728.,  13318., 13912., 14518., 15136., 9324.,
      9728.,  10140., 10560., 10140., 10560., 10988., 11424., 11162., 11744.,
      12338., 12944., 12386., 12992., 13610., 14240., 19341., 20268., 21213.,
      22176., 13562., 14192., 14834., 15488., 21105., 22068., 23049., 24048.,
      14738., 15392., 16058., 16736., 16154., 16832., 17522., 18224., 9948.,
      10368., 10796., 11232., 10892., 11328., 11772., 12224., 16846., 17512.,
      18190., 18880., 11676., 12128., 12588., 13056., 18022., 18712., 19414.,
      20128., 12460., 12928., 13404., 13888., 13532., 14016., 14508., 15008.,
      14668., 15168., 15676., 16192., 15612., 16128., 16652., 17184., 24166.,
      24952., 25750., 26560., 16716., 17248., 17788., 18336., 25822., 26632.,
      27454., 28288., 17820., 18368., 18924., 19488., 18892., 19456., 20028.,
      20608., 4134.,  4352.,  4574.,  4800.,  4798.,  5024.,  5254.,  5488.,
      7331.,  7676.,  8027.,  8384.,  5030.,  5264.,  5502.,  5744.,  7679.,
      8036.,  8399.,  8768.,  5262.,  5504.,  5750.,  6000.,  5990.,  6240.,
      6494.,  6752.,  8428.,  8896.,  9372.,  9856.,  9884.,  10368., 10860.,
      11360., 15094., 15832., 16582., 17344., 10348., 10848., 11356., 11872.,
      15790., 16552., 17326., 18112., 10812., 11328., 11852., 12384., 12396.,
      12928., 13468., 14016., 15708., 16256., 16812., 17376., 17164., 17728.,
      18300., 18880., 26254., 27112., 27982., 28864., 17948., 18528., 19116.,
      19712., 27430., 28312., 29206., 30112., 18732., 19328., 19932., 20544.,
      20316., 20928., 21548., 22176., 24122., 24992., 25874., 26768., 26498.,
      27392., 28298., 29216., 40509., 41868., 43245., 44640., 27674., 28592.,
      29522., 30464., 42273., 43668., 45081., 46512., 28850., 29792., 30746.,
      31712., 31418., 32384., 33362., 34352., 18588., 19200., 19820., 20448.,
      20300., 20928., 21564., 22208., 30958., 31912., 32878., 33856., 21084.,
      21728., 22380., 23040., 32134., 33112., 34102., 35104., 21868., 22528.,
      23196., 23872., 23708., 24384., 25068., 25760., 27162., 27872., 28594.,
      29328., 28898., 29632., 30378., 31136., 44109., 45228., 46365., 47520.,
      30074., 30832., 31602., 32384., 45873., 47028., 48201., 49392., 31250.,
      32032., 32826., 33632., 33178., 33984., 34802., 35632., 15068., 15488.,
      15916., 16352., 16012., 16448., 16892., 17344., 24526., 25192., 25870.,
      26560., 16796., 17248., 17708., 18176., 25702., 26392., 27094., 27808.,
      17580., 18048., 18524., 19008., 18652., 19136., 19628., 20128., 19962.,
      20512., 21074., 21648., 21058., 21632., 22218., 22816., 32349., 33228.,
      34125., 35040., 22234., 22832., 23442., 24064., 34113., 35028., 35961.,
      36912., 23410., 24032., 24666., 25312., 24698., 25344., 26002., 26672.,
      1308.,  1536.,  1772.,  2016.,  1484.,  1728.,  1980.,  2240.,  2734.,
      3112.,  3502.,  3904.,  2268.,  2528.,  2796.,  3072.,  3910.,  4312.,
      4726.,  5152.,  3052.,  3328.,  3612.,  3904.,  3356.,  3648.,  3948.,
      4256.,  2188.,  2496.,  2812.,  3136.,  2364.,  2688.,  3020.,  3360.,
      4294.,  4792.,  5302.,  5824.,  3468.,  3808.,  4156.,  4512.,  5950.,
      6472.,  7006.,  7552.,  4572.,  4928.,  5292.,  5664.,  4876.,  5248.,
      5628.,  6016.,  1734.,  1856.,  1982.,  2112.,  2014.,  2144.,  2278.,
      2416.,  3155.,  3356.,  3563.,  3776.,  2246.,  2384.,  2526.,  2672.,
      3503.,  3716.,  3935.,  4160.,  2478.,  2624.,  2774.,  2928.,  2822.,
      2976.,  3134.,  3296.,  3628.,  3904.,  4188.,  4480.,  4316.,  4608.,
      4908.,  5216.,  6742.,  7192.,  7654.,  8128.,  4780.,  5088.,  5404.,
      5728.,  7438.,  7912.,  8398.,  8896.,  5244.,  5568.,  5900.,  6240.,
      6060.,  6400.,  6748.,  7104.,  7068.,  7424.,  7788.,  8160.,  7756.,
      8128.,  8508.,  8896.,  12142., 12712., 13294., 13888., 8540.,  8928.,
      9324.,  9728.,  13318., 13912., 14518., 15136., 9324.,  9728.,  10140.,
      10560., 10140., 10560., 10988., 11424., 11162., 11744., 12338., 12944.,
      12386., 12992., 13610., 14240., 19341., 20268., 21213., 22176., 13562.,
      14192., 14834., 15488., 21105., 22068., 23049., 24048., 14738., 15392.,
      16058., 16736., 16154., 16832., 17522., 18224., 9948.,  10368., 10796.,
      11232., 10892., 11328., 11772., 12224., 16846., 17512., 18190., 18880.,
      11676., 12128., 12588., 13056., 18022., 18712., 19414., 20128., 12460.,
      12928., 13404., 13888., 13532., 14016., 14508., 15008., 15482., 16160.,
      16850., 17552., 17090., 17792., 18506., 19232., 26397., 27468., 28557.,
      29664., 18266., 18992., 19730., 20480., 28161., 29268., 30393., 31536.,
      19442., 20192., 20954., 21728., 21242., 22016., 22802., 23600., 12828.,
      13312., 13804., 14304., 14028., 14528., 15036., 15552., 21550., 22312.,
      23086., 23872., 14812., 15328., 15852., 16384., 22726., 23512., 24310.,
      25120., 15596., 16128., 16668., 17216., 16924., 17472., 18028., 18592.,
      19802., 20576., 21362., 22160., 21794., 22592., 23402., 24224., 33453.,
      34668., 35901., 37152., 22970., 23792., 24626., 25472., 35217., 36468.,
      37737., 39024., 24146., 24992., 25850., 26720., 26330., 27200., 28082.,
      28976., 15708., 16256., 16812., 17376., 17164., 17728., 18300., 18880.,
      26254., 27112., 27982., 28864., 17948., 18528., 19116., 19712., 27430.,
      28312., 29206., 30112., 18732., 19328., 19932., 20544., 20316., 20928.,
      21548., 22176., 22988., 23616., 24252., 24896., 24444., 25088., 25740.,
      26400., 37414., 38392., 39382., 40384., 25548., 26208., 26876., 27552.,
      39070., 40072., 41086., 42112., 26652., 27328., 28012., 28704., 28236.,
      28928., 29628., 30336.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    5.,     12.,    21.,    32.,    14.,
      32.,    54.,    80.,    38.,    64.,    94.,    128.,   62.,    96.,
      134.,   176.,   65.,    84.,    105.,   128.,   85.,    108.,   133.,
      160.,   21.,    44.,    69.,    96.,    25.,    52.,    81.,    112.,
      134.,   192.,   254.,   320.,   158.,   224.,   294.,   368.,   182.,
      256.,   334.,   416.,   165.,   204.,   245.,   288.,   185.,   228.,
      273.,   320.,   50.,    104.,   162.,   224.,   90.,    152.,   218.,
      288.,   348.,   480.,   620.,   768.,   460.,   608.,   764.,   928.,
      572.,   736.,   908.,   1088.,  434.,   520.,   610.,   704.,   506.,
      600.,   698.,   800.,   250.,   344.,   442.,   544.,   290.,   392.,
      498.,   608.,   908.,   1120.,  1340.,  1568.,  1020.,  1248.,  1484.,
      1728.,  1132.,  1376.,  1628.,  1888.,  794.,   920.,   1050.,  1184.,
      866.,   1000.,  1138.,  1280.,  467.,   620.,   779.,   944.,   575.,
      740.,   911.,   1088.,  1642.,  1984.,  2338.,  2704.,  1906.,  2272.,
      2650.,  3040.,  2170.,  2560.,  2962.,  3376.,  1427.,  1628.,  1835.,
      2048.,  1583.,  1796.,  2015.,  2240.,  906.,   1016.,  1130.,  1248.,
      1010.,  1128.,  1250.,  1376.,  2348.,  2592.,  2844.,  3104.,  2588.,
      2848.,  3116.,  3392.,  2828.,  3104.,  3388.,  3680.,  1642.,  1784.,
      1930.,  2080.,  1778.,  1928.,  2082.,  2240.,  1426.,  1576.,  1730.,
      1888.,  1530.,  1688.,  1850.,  2016.,  3548.,  3872.,  4204.,  4544.,
      3788.,  4128.,  4476.,  4832.,  4028.,  4384.,  4748.,  5120.,  2322.,
      2504.,  2690.,  2880.,  2458.,  2648.,  2842.,  3040.,  1037.,  1116.,
      1197.,  1280.,  1105.,  1188.,  1273.,  1360.,  2454.,  2624.,  2798.,
      2976.,  2606.,  2784.,  2966.,  3152.,  2758.,  2944.,  3134.,  3328.,
      1533.,  1628.,  1725.,  1824.,  1617.,  1716.,  1817.,  1920.,  1377.,
      1476.,  1577.,  1680.,  1445.,  1548.,  1653.,  1760.,  3214.,  3424.,
      3638.,  3856.,  3366.,  3584.,  3806.,  4032.,  3518.,  3744.,  3974.,
      4208.,  1953.,  2068.,  2185.,  2304.,  2037.,  2156.,  2277.,  2400.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     25.,    52.,    81.,    112.,   125.,   156.,   189.,   224.,
      254.,   320.,   390.,   464.,   470.,   544.,   622.,   704.,   686.,
      768.,   854.,   944.,   377.,   420.,   465.,   512.,   493.,   540.,
      589.,   640.,   525.,   572.,   621.,   672.,   625.,   676.,   729.,
      784.,   1334.,  1440.,  1550.,  1664.,  1550.,  1664.,  1782.,  1904.,
      1766.,  1888.,  2014.,  2144.,  957.,   1020.,  1085.,  1152.,  1073.,
      1140.,  1209.,  1280.,  1058.,  1160.,  1266.,  1376.,  1290.,  1400.,
      1514.,  1632.,  2748.,  2976.,  3212.,  3456.,  3244.,  3488.,  3740.,
      4000.,  3740.,  4000.,  4268.,  4544.,  2018.,  2152.,  2290.,  2432.,
      2282.,  2424.,  2570.,  2720.,  2218.,  2360.,  2506.,  2656.,  2450.,
      2600.,  2754.,  2912.,  5228.,  5536.,  5852.,  6176.,  5724.,  6048.,
      6380.,  6720.,  6220.,  6560.,  6908.,  7264.,  3338.,  3512.,  3690.,
      3872.,  3602.,  3784.,  3970.,  4160.,  3419.,  3644.,  3875.,  4112.,
      3815.,  4052.,  4295.,  4544.,  8122.,  8608.,  9106.,  9616.,  8962.,
      9472.,  9994.,  10528., 9802.,  10336., 10882., 11440., 5243.,  5516.,
      5795.,  6080.,  5687.,  5972.,  6263.,  6560.,  2874.,  3032.,  3194.,
      3360.,  3170.,  3336.,  3506.,  3680.,  6668.,  7008.,  7356.,  7712.,
      7292.,  7648.,  8012.,  8384.,  7916.,  8288.,  8668.,  9056.,  4186.,
      4376.,  4570.,  4768.,  4514.,  4712.,  4914.,  5120.,  4354.,  4552.,
      4754.,  4960.,  4650.,  4856.,  5066.,  5280.,  9788.,  10208., 10636.,
      11072., 10412., 10848., 11292., 11744., 11036., 11488., 11948., 12416.,
      5826.,  6056.,  6290.,  6528.,  6154.,  6392.,  6634.,  6880.,  2501.,
      2604.,  2709.,  2816.,  2665.,  2772.,  2881.,  2992.,  5574.,  5792.,
      6014.,  6240.,  5918.,  6144.,  6374.,  6608.,  6262.,  6496.,  6734.,
      6976.,  3285.,  3404.,  3525.,  3648.,  3465.,  3588.,  3713.,  3840.,
      3321.,  3444.,  3569.,  3696.,  3485.,  3612.,  3741.,  3872.,  7294.,
      7552.,  7814.,  8080.,  7638.,  7904.,  8174.,  8448.,  7982.,  8256.,
      8534.,  8816.,  4185.,  4324.,  4465.,  4608.,  4365.,  4508.,  4653.,
      4800.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     49.,    100.,   153.,   208.,   245.,   300.,   357.,
      416.,   494.,   608.,   726.,   848.,   902.,   1024.,  1150.,  1280.,
      1310.,  1440.,  1574.,  1712.,  689.,   756.,   825.,   896.,   901.,
      972.,   1045.,  1120.,  1029.,  1100.,  1173.,  1248.,  1225.,  1300.,
      1377.,  1456.,  2534.,  2688.,  2846.,  3008.,  2942.,  3104.,  3270.,
      3440.,  3350.,  3520.,  3694.,  3872.,  1749.,  1836.,  1925.,  2016.,
      1961.,  2052.,  2145.,  2240.,  2066.,  2216.,  2370.,  2528.,  2490.,
      2648.,  2810.,  2976.,  5148.,  5472.,  5804.,  6144.,  6028.,  6368.,
      6716.,  7072.,  6908.,  7264.,  7628.,  8000.,  3602.,  3784.,  3970.,
      4160.,  4058.,  4248.,  4442.,  4640.,  4186.,  4376.,  4570.,  4768.,
      4610.,  4808.,  5010.,  5216.,  9548.,  9952.,  10364., 10784., 10428.,
      10848., 11276., 11712., 11308., 11744., 12188., 12640., 5882.,  6104.,
      6330.,  6560.,  6338.,  6568.,  6802.,  7040.,  6371.,  6668.,  6971.,
      7280.,  7055.,  7364.,  7679.,  8000.,  14602., 15232., 15874., 16528.,
      16018., 16672., 17338., 18016., 17434., 18112., 18802., 19504., 9059.,
      9404.,  9755.,  10112., 9791.,  10148., 10511., 10880., 4842.,  5048.,
      5258.,  5472.,  5330.,  5544.,  5762.,  5984.,  10988., 11424., 11868.,
      12320., 11996., 12448., 12908., 13376., 13004., 13472., 13948., 14432.,
      6730.,  6968.,  7210.,  7456.,  7250.,  7496.,  7746.,  8000.,  7282.,
      7528.,  7778.,  8032.,  7770.,  8024.,  8282.,  8544.,  16028., 16544.,
      17068., 17600., 17036., 17568., 18108., 18656., 18044., 18592., 19148.,
      19712., 9330.,  9608.,  9890.,  10176., 9850.,  10136., 10426., 10720.,
      3965.,  4092.,  4221.,  4352.,  4225.,  4356.,  4489.,  4624.,  8694.,
      8960.,  9230.,  9504.,  9230.,  9504.,  9782.,  10064., 9766.,  10048.,
      10334., 10624., 5037.,  5180.,  5325.,  5472.,  5313.,  5460.,  5609.,
      5760.,  5265.,  5412.,  5561.,  5712.,  5525.,  5676.,  5829.,  5984.,
      11374., 11680., 11990., 12304., 11910., 12224., 12542., 12864., 12446.,
      12768., 13094., 13424., 6417.,  6580.,  6745.,  6912.,  6693.,  6860.,
      7029.,  7200.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      962.,   1418.,  1906.,  2426.,  946.,   1210.,  1506.,  1834.,  2575.,
      3147.,  3767.,  4435.,  1762.,  2090.,  2450.,  2842.,  4311.,  4979.,
      5695.,  6459.,  2578.,  2970.,  3394.,  3850.,  3266.,  3722.,  4210.,
      4730.,  1732.,  2388.,  3108.,  3892.,  3108.,  3892.,  4740.,  5652.,
      5246.,  6518.,  7886.,  9350.,  4740.,  5652.,  6628.,  7668.,  7694.,
      9158.,  10718., 12374., 6372.,  7412.,  8516.,  9684.,  8772.,  9940.,
      11172., 12468., 8420.,  9460.,  10564., 11732., 4292.,  4948.,  5668.,
      6452.,  11790., 13254., 14814., 16470., 5412.,  6196.,  7044.,  7956.,
      15006., 16662., 18414., 20262., 6532.,  7444.,  8420.,  9460.,  8932.,
      9972.,  11076., 12244., 4566.,  5614.,  6758.,  7998.,  6118.,  7358.,
      8694.,  10126., 10437., 12185., 14077., 16113., 9334.,  10766., 12294.,
      13918., 14237., 16273., 18453., 20777., 12550., 14174., 15894., 17710.,
      13398., 14958., 16614., 18366., 6372.,  7412.,  8516.,  9684.,  2244.,
      2900.,  3620.,  4404.,  10766., 12230., 13790., 15446., 3364.,  4148.,
      4996.,  5908.,  13982., 15638., 17390., 19238., 4484.,  5396.,  6372.,
      7412.,  6884.,  7924.,  9028.,  10196., 7830.,  9134.,  10534., 12030.,
      10406., 11902., 13494., 15182., 12773., 14905., 17181., 19601., 13622.,
      15310., 17094., 18974., 16573., 18993., 21557., 24265., 16838., 18718.,
      20694., 22766., 14614., 16430., 18342., 20350., 8420.,  9460.,  10564.,
      11732., 4292.,  4948.,  5668.,  6452.,  11790., 13254., 14814., 16470.,
      5412.,  6196.,  7044.,  7956.,  15006., 16662., 18414., 20262., 6532.,
      7444.,  8420.,  9460.,  8932.,  9972.,  11076., 12244., 4566.,  5614.,
      6758.,  7998.,  6118.,  7358.,  8694.,  10126., 10437., 12185., 14077.,
      16113., 9334.,  10766., 12294., 13918., 14237., 16273., 18453., 20777.,
      12550., 14174., 15894., 17710., 13398., 14958., 16614., 18366., 6372.,
      7412.,  8516.,  9684.,  2244.,  2900.,  3620.,  4404.,  10766., 12230.,
      13790., 15446., 3364.,  4148.,  4996.,  5908.,  13982., 15638., 17390.,
      19238., 4484.,  5396.,  6372.,  7412.,  6884.,  7924.,  9028.,  10196.,
      6532.,  7444.,  8420.,  9460.,  7908.,  8948.,  10052., 11220., 8926.,
      10326., 11822., 13414., 10564., 11732., 12964., 14260., 11886., 13478.,
      15166., 16950., 13220., 14516., 15876., 17300., 9284.,  10452., 11684.,
      12980., 7298.,  8010.,  8754.,  9530.,  4210.,  4730.,  5282.,  5866.,
      9519.,  10475., 11479., 12531., 5026.,  5610.,  6226.,  6874.,  11255.,
      12307., 13407., 14555., 5842.,  6490.,  7170.,  7882.,  7554.,  8266.,
      9010.,  9786.,  3780.,  4436.,  5156.,  5940.,  5156.,  5940.,  6788.,
      7700.,  8318.,  9590.,  10958., 12422., 6788.,  7700.,  8676.,  9716.,
      10766., 12230., 13790., 15446., 8420.,  9460.,  10564., 11732., 10820.,
      11988., 13220., 14516., 6372.,  7412.,  8516.,  9684.,  2244.,  2900.,
      3620.,  4404.,  10766., 12230., 13790., 15446., 3364.,  4148.,  4996.,
      5908.,  13982., 15638., 17390., 19238., 4484.,  5396.,  6372.,  7412.,
      6884.,  7924.,  9028.,  10196., 7830.,  9134.,  10534., 12030., 10406.,
      11902., 13494., 15182., 12773., 14905., 17181., 19601., 13622., 15310.,
      17094., 18974., 16573., 18993., 21557., 24265., 16838., 18718., 20694.,
      22766., 14614., 16430., 18342., 20350., 8420.,  9460.,  10564., 11732.,
      4292.,  4948.,  5668.,  6452.,  11790., 13254., 14814., 16470., 5412.,
      6196.,  7044.,  7956.,  15006., 16662., 18414., 20262., 6532.,  7444.,
      8420.,  9460.,  8932.,  9972.,  11076., 12244., 4566.,  5614.,  6758.,
      7998.,  6118.,  7358.,  8694.,  10126., 10437., 12185., 14077., 16113.,
      9334.,  10766., 12294., 13918., 14237., 16273., 18453., 20777., 12550.,
      14174., 15894., 17710., 13398., 14958., 16614., 18366., 6372.,  7412.,
      8516.,  9684.,  2244.,  2900.,  3620.,  4404.,  10766., 12230., 13790.,
      15446., 3364.,  4148.,  4996.,  5908.,  13982., 15638., 17390., 19238.,
      4484.,  5396.,  6372.,  7412.,  6884.,  7924.,  9028.,  10196., 7830.,
      9134.,  10534., 12030., 10406., 11902., 13494., 15182., 12773., 14905.,
      17181., 19601., 13622., 15310., 17094., 18974., 16573., 18993., 21557.,
      24265., 16838., 18718., 20694., 22766., 14614., 16430., 18342., 20350.,
      8420.,  9460.,  10564., 11732., 4292.,  4948.,  5668.,  6452.,  11790.,
      13254., 14814., 16470., 5412.,  6196.,  7044.,  7956.,  15006., 16662.,
      18414., 20262., 6532.,  7444.,  8420.,  9460.,  8932.,  9972.,  11076.,
      12244., 4484.,  5396.,  6372.,  7412.,  5860.,  6900.,  8004.,  9172.,
      9950.,  11350., 12846., 14438., 8516.,  9684.,  10916., 12212., 12910.,
      14502., 16190., 17974., 11172., 12468., 13828., 15252., 11332., 12500.,
      13732., 15028., 962.,   1418.,  1906.,  2426.,  946.,   1210.,  1506.,
      1834.,  2575.,  3147.,  3767.,  4435.,  1762.,  2090.,  2450.,  2842.,
      4311.,  4979.,  5695.,  6459.,  2578.,  2970.,  3394.,  3850.,  3266.,
      3722.,  4210.,  4730.,  1732.,  2388.,  3108.,  3892.,  3108.,  3892.,
      4740.,  5652.,  5246.,  6518.,  7886.,  9350.,  4740.,  5652.,  6628.,
      7668.,  7694.,  9158.,  10718., 12374., 6372.,  7412.,  8516.,  9684.,
      8772.,  9940.,  11172., 12468., 8420.,  9460.,  10564., 11732., 4292.,
      4948.,  5668.,  6452.,  11790., 13254., 14814., 16470., 5412.,  6196.,
      7044.,  7956.,  15006., 16662., 18414., 20262., 6532.,  7444.,  8420.,
      9460.,  8932.,  9972.,  11076., 12244., 4566.,  5614.,  6758.,  7998.,
      6118.,  7358.,  8694.,  10126., 10437., 12185., 14077., 16113., 9334.,
      10766., 12294., 13918., 14237., 16273., 18453., 20777., 12550., 14174.,
      15894., 17710., 13398., 14958., 16614., 18366., 6372.,  7412.,  8516.,
      9684.,  2244.,  2900.,  3620.,  4404.,  10766., 12230., 13790., 15446.,
      3364.,  4148.,  4996.,  5908.,  13982., 15638., 17390., 19238., 4484.,
      5396.,  6372.,  7412.,  6884.,  7924.,  9028.,  10196., 7830.,  9134.,
      10534., 12030., 10406., 11902., 13494., 15182., 12773., 14905., 17181.,
      19601., 13622., 15310., 17094., 18974., 16573., 18993., 21557., 24265.,
      16838., 18718., 20694., 22766., 14614., 16430., 18342., 20350., 8420.,
      9460.,  10564., 11732., 4292.,  4948.,  5668.,  6452.,  11790., 13254.,
      14814., 16470., 5412.,  6196.,  7044.,  7956.,  15006., 16662., 18414.,
      20262., 6532.,  7444.,  8420.,  9460.,  8932.,  9972.,  11076., 12244.,
      4566.,  5614.,  6758.,  7998.,  6118.,  7358.,  8694.,  10126., 10437.,
      12185., 14077., 16113., 9334.,  10766., 12294., 13918., 14237., 16273.,
      18453., 20777., 12550., 14174., 15894., 17710., 13398., 14958., 16614.,
      18366., 6372.,  7412.,  8516.,  9684.,  2244.,  2900.,  3620.,  4404.,
      10766., 12230., 13790., 15446., 3364.,  4148.,  4996.,  5908.,  13982.,
      15638., 17390., 19238., 4484.,  5396.,  6372.,  7412.,  6884.,  7924.,
      9028.,  10196., 6532.,  7444.,  8420.,  9460.,  7908.,  8948.,  10052.,
      11220., 8926.,  10326., 11822., 13414., 10564., 11732., 12964., 14260.,
      11886., 13478., 15166., 16950., 13220., 14516., 15876., 17300., 9284.,
      10452., 11684., 12980.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  125.,   305.,   501.,   713.,   149.,   361.,   589.,   833.,
      962.,   1418.,  1906.,  2426.,  946.,   1210.,  1506.,  1834.,  1122.,
      1450.,  1810.,  2202.,  29.,    81.,    149.,   233.,   181.,   265.,
      365.,   481.,   106.,   274.,   474.,   706.,   410.,   642.,   906.,
      1202.,  1124.,  1652.,  2244.,  2900.,  1988.,  2644.,  3364.,  4148.,
      2852.,  3636.,  4484.,  5396.,  2090.,  2514.,  2970.,  3458.,  2650.,
      3138.,  3658.,  4210.,  1626.,  2114.,  2634.,  3186.,  1738.,  2034.,
      2362.,  2722.,  5252.,  6164.,  7140.,  8180.,  2660.,  3188.,  3780.,
      4436.,  3524.,  4180.,  4900.,  5684.,  410.,   642.,   906.,   1202.,
      970.,   1266.,  1594.,  1954.,  815.,   1259.,  1751.,  2291.,  1655.,
      2195.,  2783.,  3419.,  4150.,  5326.,  6598.,  7966.,  6214.,  7582.,
      9046.,  10606., 8086.,  9390.,  10790., 12286., 5327.,  6155.,  7031.,
      7955.,  5335.,  6003.,  6719.,  7483.,  4794.,  5410.,  6058.,  6738.,
      3370.,  3794.,  4250.,  4738.,  10564., 11732., 12964., 14260., 4900.,
      5684.,  6532.,  7444.,  6788.,  7700.,  8676.,  9716.,  1018.,  1378.,
      1770.,  2194.,  2090.,  2514.,  2970.,  3458.,  2346.,  2770.,  3226.,
      3714.,  3162.,  3650.,  4170.,  4722.,  7140.,  8180.,  9284.,  10452.,
      9028.,  10196., 11428., 12724., 8676.,  9716.,  10820., 11988., 6378.,
      7058.,  7770.,  8514.,  4186.,  4674.,  5194.,  5746.,  3853.,  4225.,
      4613.,  5017.,  101.,   249.,   413.,   593.,   5410.,  5994.,  6610.,
      7258.,  1298.,  1690.,  2114.,  2570.,  2498.,  2954.,  3442.,  3962.,
      1453.,  1697.,  1957.,  2233.,  2117.,  2393.,  2685.,  2993.,  2245.,
      2521.,  2813.,  3121.,  2781.,  3089.,  3413.,  3753.,  6098.,  6746.,
      7426.,  8138.,  7298.,  8010.,  8754.,  9530.,  4210.,  4730.,  5282.,
      5866.,  4773.,  5177.,  5597.,  6033.,  125.,   305.,   501.,   713.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     149.,   361.,   589.,   833.,   941.,   1185.,  1445.,  1721.,
      1906.,  2426.,  2978.,  3562.,  3618.,  4202.,  4818.,  5466.,  5330.,
      5978.,  6658.,  7370.,  2933.,  3273.,  3629.,  4001.,  3853.,  4225.,
      4613.,  5017.,  4109.,  4481.,  4869.,  5273.,  4901.,  5305.,  5725.,
      6161.,  10466., 11306., 12178., 13082., 5842.,  6490.,  7170.,  7882.,
      7554.,  8266.,  9010.,  9786.,  173.,   417.,   677.,   953.,   1093.,
      1369.,  1661.,  1969.,  1738.,  2034.,  2362.,  2722.,  2554.,  2914.,
      3306.,  3730.,  5412.,  6196.,  7044.,  7956.,  7300.,  8212.,  9188.,
      10228., 9188.,  10228., 11332., 12500., 5258.,  5810.,  6394.,  7010.,
      6330.,  6946.,  7594.,  8274.,  5818.,  6434.,  7082.,  7762.,  298.,
      722.,   1178.,  1666.,  8516.,  9684.,  10916., 12212., 2852.,  3636.,
      4484.,  5396.,  4740.,  5652.,  6628.,  7668.,  2042.,  2402.,  2794.,
      3218.,  3114.,  3538.,  3994.,  4482.,  3423.,  3931.,  4487.,  5091.,
      4519.,  5123.,  5775.,  6475.,  9878.,  11182., 12582., 14078., 12454.,
      13950., 15542., 17230., 8694.,  10126., 11654., 13278., 8703.,  9595.,
      10535., 11523., 2823.,  3555.,  4335.,  5163.,  1626.,  2114.,  2634.,
      3186.,  1738.,  2034.,  2362.,  2722.,  5252.,  6164.,  7140.,  8180.,
      2660.,  3188.,  3780.,  4436.,  3524.,  4180.,  4900.,  5684.,  410.,
      642.,   906.,   1202.,  970.,   1266.,  1594.,  1954.,  714.,   1010.,
      1338.,  1698.,  1018.,  1378.,  1770.,  2194.,  2852.,  3636.,  4484.,
      5396.,  3716.,  4628.,  5604.,  6644.,  4388.,  5172.,  6020.,  6932.,
      3210.,  3762.,  4346.,  4962.,  2554.,  2914.,  3306.,  3730.,  2013.,
      2321.,  2645.,  2985.,  53.,    137.,   237.,   353.,   3266.,  3722.,
      4210.,  4730.,  690.,   954.,   1250.,  1578.,  1378.,  1706.,  2066.,
      2458.,  893.,   1073.,  1269.,  1481.,  1301.,  1513.,  1741.,  1985.,
      1173.,  1385.,  1613.,  1857.,  1453.,  1697.,  1957.,  2233.,  3442.,
      3962.,  4514.,  5098.,  4130.,  4714.,  5330.,  5978.,  2578.,  2970.,
      3394.,  3850.,  2933.,  3273.,  3629.,  4001.,  77.,    193.,   325.,
      473.,   0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     101.,   249.,   413.,   593.,   637.,   817.,   1013.,
      1225.,  1298.,  1690.,  2114.,  2570.,  2498.,  2954.,  3442.,  3962.,
      3698.,  4218.,  4770.,  5354.,  2117.,  2393.,  2685.,  2993.,  2781.,
      3089.,  3413.,  3753.,  2781.,  3089.,  3413.,  3753.,  3317.,  3657.,
      4013.,  4385.,  7298.,  8010.,  8754.,  9530.,  4210.,  4730.,  5282.,
      5866.,  5410.,  5994.,  6610.,  7258.,  125.,   305.,   501.,   713.,
      789.,   1001.,  1229.,  1473.,  1322.,  1746.,  2202.,  2690.,  2650.,
      3138.,  3658.,  4210.,  5604.,  6644.,  7748.,  8916.,  8516.,  9684.,
      10916., 12212., 11428., 12724., 14084., 15508., 6378.,  7058.,  7770.,
      8514.,  7962.,  8706.,  9482.,  10290., 7962.,  8706.,  9482.,  10290.,
      5002.,  5554.,  6138.,  6754.,  15876., 17300., 18788., 20340., 7140.,
      8180.,  9284.,  10452., 10052., 11220., 12452., 13748., 1626.,  2114.,
      2634.,  3186.,  3210.,  3762.,  4346.,  4962.,  3983.,  4555.,  5175.,
      5843.,  5335.,  6003.,  6719.,  7483.,  11510., 12942., 14470., 16094.,
      14598., 16222., 17942., 19758., 13398., 14958., 16614., 18366., 10031.,
      10987., 11991., 13043., 6455.,  7251.,  8095.,  8987.,  5818.,  6434.,
      7082.,  7762.,  298.,   722.,   1178.,  1666.,  8516.,  9684.,  10916.,
      12212., 2852.,  3636.,  4484.,  5396.,  4740.,  5652.,  6628.,  7668.,
      2042.,  2402.,  2794.,  3218.,  3114.,  3538.,  3994.,  4482.,  3370.,
      3794.,  4250.,  4738.,  4186.,  4674.,  5194.,  5746.,  9188.,  10228.,
      11332., 12500., 11076., 12244., 13476., 14772., 6628.,  7668.,  8772.,
      9940.,  7402.,  8082.,  8794.,  9538.,  1114.,  1602.,  2122.,  2674.,
      173.,   417.,   677.,   953.,   5.,     25.,    61.,    113.,   1122.,
      1450.,  1810.,  2202.,  82.,    218.,   386.,   586.,   258.,   458.,
      690.,   954.,   333.,   449.,   581.,   729.,   485.,   633.,   797.,
      977.,   101.,   249.,   413.,   593.,   125.,   305.,   501.,   713.,
      786.,   1178.,  1602.,  2058.,  962.,   1418.,  1906.,  2426.,  946.,
      1210.,  1506.,  1834.,  1093.,  1369.,  1661.,  1969.,  29.,    81.,
      149.,   233.,   0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  6490.,
      8970.,  11834., 15082., 4956.,  6524.,  8348.,  10428., 12090., 15338.,
      18970., 22986., 7324.,  9404.,  11740., 14332., 12764., 15356., 18204.,
      21308., 3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600., 16760.,
      8244.,  12180., 16884., 22356., 14648., 18808., 23480., 28664., 15348.,
      20820., 27060., 34068., 23480., 28664., 34360., 40568., 12600., 16760.,
      21432., 26616., 5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,
      11000., 15348., 20820., 27060., 34068., 7864.,  11000., 14648., 18808.,
      28596., 35604., 43380., 51924., 12600., 16760., 21432., 26616., 23480.,
      28664., 34360., 40568., 3668.,  6836.,  10772., 15476., 7700.,  12404.,
      17876., 24116., 11182., 16830., 23630., 31582., 20948., 27188., 34196.,
      41972., 20814., 28766., 37870., 48126., 34196., 41972., 50516., 59828.,
      19924., 26164., 33172., 40948., 5816.,  8952.,  12600., 16760., 3128.,
      5240.,  7864.,  11000., 15348., 20820., 27060., 34068., 7864.,  11000.,
      14648., 18808., 28596., 35604., 43380., 51924., 12600., 16760., 21432.,
      26616., 23480., 28664., 34360., 40568., 3668.,  6836.,  10772., 15476.,
      7700.,  12404., 17876., 24116., 11182., 16830., 23630., 31582., 20948.,
      27188., 34196., 41972., 20814., 28766., 37870., 48126., 34196., 41972.,
      50516., 59828., 19924., 26164., 33172., 40948., 5816.,  8952.,  12600.,
      16760., 3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068.,
      7864.,  11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600.,
      16760., 21432., 26616., 23480., 28664., 34360., 40568., 3668.,  6836.,
      10772., 15476., 7700.,  12404., 17876., 24116., 11182., 16830., 23630.,
      31582., 20948., 27188., 34196., 41972., 20814., 28766., 37870., 48126.,
      34196., 41972., 50516., 59828., 19924., 26164., 33172., 40948., 5816.,
      8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000., 15348., 20820.,
      27060., 34068., 7864.,  11000., 14648., 18808., 28596., 35604., 43380.,
      51924., 12600., 16760., 21432., 26616., 23480., 28664., 34360., 40568.,
      3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600., 16760., 8244.,
      12180., 16884., 22356., 14648., 18808., 23480., 28664., 15348., 20820.,
      27060., 34068., 23480., 28664., 34360., 40568., 12600., 16760., 21432.,
      26616., 1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,
      6490.,  8970.,  11834., 15082., 4956.,  6524.,  8348.,  10428., 12090.,
      15338., 18970., 22986., 7324.,  9404.,  11740., 14332., 12764., 15356.,
      18204., 21308., 3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600.,
      16760., 8244.,  12180., 16884., 22356., 14648., 18808., 23480., 28664.,
      15348., 20820., 27060., 34068., 23480., 28664., 34360., 40568., 12600.,
      16760., 21432., 26616., 5816.,  8952.,  12600., 16760., 3128.,  5240.,
      7864.,  11000., 15348., 20820., 27060., 34068., 7864.,  11000., 14648.,
      18808., 28596., 35604., 43380., 51924., 12600., 16760., 21432., 26616.,
      23480., 28664., 34360., 40568., 3668.,  6836.,  10772., 15476., 7700.,
      12404., 17876., 24116., 11182., 16830., 23630., 31582., 20948., 27188.,
      34196., 41972., 20814., 28766., 37870., 48126., 34196., 41972., 50516.,
      59828., 19924., 26164., 33172., 40948., 5816.,  8952.,  12600., 16760.,
      3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068., 7864.,
      11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600., 16760.,
      21432., 26616., 23480., 28664., 34360., 40568., 3668.,  6836.,  10772.,
      15476., 7700.,  12404., 17876., 24116., 11182., 16830., 23630., 31582.,
      20948., 27188., 34196., 41972., 20814., 28766., 37870., 48126., 34196.,
      41972., 50516., 59828., 19924., 26164., 33172., 40948., 5816.,  8952.,
      12600., 16760., 3128.,  5240.,  7864.,  11000., 15348., 20820., 27060.,
      34068., 7864.,  11000., 14648., 18808., 28596., 35604., 43380., 51924.,
      12600., 16760., 21432., 26616., 23480., 28664., 34360., 40568., 3668.,
      6836.,  10772., 15476., 7700.,  12404., 17876., 24116., 11182., 16830.,
      23630., 31582., 20948., 27188., 34196., 41972., 20814., 28766., 37870.,
      48126., 34196., 41972., 50516., 59828., 19924., 26164., 33172., 40948.,
      5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000., 15348.,
      20820., 27060., 34068., 7864.,  11000., 14648., 18808., 28596., 35604.,
      43380., 51924., 12600., 16760., 21432., 26616., 23480., 28664., 34360.,
      40568., 3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600., 16760.,
      8244.,  12180., 16884., 22356., 14648., 18808., 23480., 28664., 15348.,
      20820., 27060., 34068., 23480., 28664., 34360., 40568., 12600., 16760.,
      21432., 26616., 1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,
      6524.,  6490.,  8970.,  11834., 15082., 4956.,  6524.,  8348.,  10428.,
      12090., 15338., 18970., 22986., 7324.,  9404.,  11740., 14332., 12764.,
      15356., 18204., 21308., 3128.,  5240.,  7864.,  11000., 5816.,  8952.,
      12600., 16760., 8244.,  12180., 16884., 22356., 14648., 18808., 23480.,
      28664., 15348., 20820., 27060., 34068., 23480., 28664., 34360., 40568.,
      12600., 16760., 21432., 26616., 5816.,  8952.,  12600., 16760., 3128.,
      5240.,  7864.,  11000., 15348., 20820., 27060., 34068., 7864.,  11000.,
      14648., 18808., 28596., 35604., 43380., 51924., 12600., 16760., 21432.,
      26616., 23480., 28664., 34360., 40568., 3668.,  6836.,  10772., 15476.,
      7700.,  12404., 17876., 24116., 11182., 16830., 23630., 31582., 20948.,
      27188., 34196., 41972., 20814., 28766., 37870., 48126., 34196., 41972.,
      50516., 59828., 19924., 26164., 33172., 40948., 5816.,  8952.,  12600.,
      16760., 3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068.,
      7864.,  11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600.,
      16760., 21432., 26616., 23480., 28664., 34360., 40568., 3668.,  6836.,
      10772., 15476., 7700.,  12404., 17876., 24116., 11182., 16830., 23630.,
      31582., 20948., 27188., 34196., 41972., 20814., 28766., 37870., 48126.,
      34196., 41972., 50516., 59828., 19924., 26164., 33172., 40948., 5816.,
      8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000., 15348., 20820.,
      27060., 34068., 7864.,  11000., 14648., 18808., 28596., 35604., 43380.,
      51924., 12600., 16760., 21432., 26616., 23480., 28664., 34360., 40568.,
      3668.,  6836.,  10772., 15476., 7700.,  12404., 17876., 24116., 11182.,
      16830., 23630., 31582., 20948., 27188., 34196., 41972., 20814., 28766.,
      37870., 48126., 34196., 41972., 50516., 59828., 19924., 26164., 33172.,
      40948., 5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000.,
      15348., 20820., 27060., 34068., 7864.,  11000., 14648., 18808., 28596.,
      35604., 43380., 51924., 12600., 16760., 21432., 26616., 23480., 28664.,
      34360., 40568., 3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600.,
      16760., 8244.,  12180., 16884., 22356., 14648., 18808., 23480., 28664.,
      15348., 20820., 27060., 34068., 23480., 28664., 34360., 40568., 12600.,
      16760., 21432., 26616.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,
      1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,
      4956.,  6524.,  3742.,  4910.,  6206.,  7630.,  190.,   590.,   1118.,
      1774.,  190.,   590.,   1118.,  1774.,  350.,   1006.,  1790.,  2702.,
      1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  3932.,
      5500.,  7324.,  9404.,  190.,   590.,   1118.,  1774.,  1374.,  2030.,
      2814.,  3726.,  700.,   2012.,  3580.,  5404.,  3068.,  4892.,  6972.,
      9308.,  7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664.,
      7864.,  11000., 14648., 18808., 11580., 13916., 16508., 19356., 3068.,
      4892.,  6972.,  9308.,  3068.,  4892.,  6972.,  9308.,  4796.,  6108.,
      7676.,  9500.,  14648., 18808., 23480., 28664., 7864.,  11000., 14648.,
      18808., 14648., 18808., 23480., 28664., 3068.,  4892.,  6972.,  9308.,
      7484.,  9820.,  12412., 15260., 4826.,  6282.,  8122.,  10346., 7354.,
      9578.,  12186., 15178., 8404.,  12596., 17556., 23284., 16532., 22260.,
      28756., 36020., 10452., 14644., 19604., 25332., 11226., 14730., 18618.,
      22890., 7354.,  9578.,  12186., 15178., 7164.,  8988.,  11068., 13404.,
      700.,   2012.,  3580.,  5404.,  14648., 18808., 23480., 28664., 7864.,
      11000., 14648., 18808., 14648., 18808., 23480., 28664., 7164.,  8988.,
      11068., 13404., 11580., 13916., 16508., 19356., 700.,   2012.,  3580.,
      5404.,  3068.,  4892.,  6972.,  9308.,  7864.,  11000., 14648., 18808.,
      14648., 18808., 23480., 28664., 7864.,  11000., 14648., 18808., 11580.,
      13916., 16508., 19356., 3068.,  4892.,  6972.,  9308.,  510.,   1422.,
      2462.,  3630.,  30.,    174.,   446.,   846.,   3932.,  5500.,  7324.,
      9404.,  540.,   1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,
      2558.,  3470.,  4510.,  5678.,  3742.,  4910.,  6206.,  7630.,  30.,
      174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,   1596.,
      2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,
      6524.,  3742.,  4910.,  6206.,  7630.,  190.,   590.,   1118.,  1774.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     350.,   1006.,  1790.,  2702.,  2558.,  3470.,  4510.,  5678.,
      5276.,  7356.,  9692.,  12284., 10716., 13308., 16156., 19260., 7324.,
      9404.,  11740., 14332., 10206., 11886., 13694., 15630., 510.,   1422.,
      2462.,  3630.,  2558.,  3470.,  4510.,  5678.,  4766.,  5934.,  7230.,
      8654.,  10716., 13308., 16156., 19260., 7324.,  9404.,  11740., 14332.,
      12764., 15356., 18204., 21308., 510.,   1422.,  2462.,  3630.,  3742.,
      4910.,  6206.,  7630.,  4796.,  6108.,  7676.,  9500.,  7164.,  8988.,
      11068., 13404., 7864.,  11000., 14648., 18808., 14648., 18808., 23480.,
      28664., 7864.,  11000., 14648., 18808., 7484.,  9820.,  12412., 15260.,
      7164.,  8988.,  11068., 13404., 7164.,  8988.,  11068., 13404., 700.,
      2012.,  3580.,  5404.,  14648., 18808., 23480., 28664., 7864.,  11000.,
      14648., 18808., 14648., 18808., 23480., 28664., 7164.,  8988.,  11068.,
      13404., 11580., 13916., 16508., 19356., 1050.,  3018.,  5370.,  8106.,
      5626.,  8362.,  11482., 14986., 13140., 18356., 24340., 31092., 25364.,
      32116., 39636., 47924., 15188., 20404., 26388., 33140., 21786., 25802.,
      30202., 34986., 3578.,  6314.,  9434.,  12938., 3068.,  4892.,  6972.,
      9308.,  4796.,  6108.,  7676.,  9500.,  14648., 18808., 23480., 28664.,
      7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664., 3068.,
      4892.,  6972.,  9308.,  7484.,  9820.,  12412., 15260., 4796.,  6108.,
      7676.,  9500.,  7164.,  8988.,  11068., 13404., 7864.,  11000., 14648.,
      18808., 14648., 18808., 23480., 28664., 7864.,  11000., 14648., 18808.,
      7484.,  9820.,  12412., 15260., 7164.,  8988.,  11068., 13404., 6974.,
      8398.,  9950.,  11630., 350.,   1006.,  1790.,  2702.,  12764., 15356.,
      18204., 21308., 5276.,  7356.,  9692.,  12284., 10716., 13308., 16156.,
      19260., 6974.,  8398.,  9950.,  11630., 10206., 11886., 13694., 15630.,
      350.,   1006.,  1790.,  2702.,  2558.,  3470.,  4510.,  5678.,  5276.,
      7356.,  9692.,  12284., 10716., 13308., 16156., 19260., 7324.,  9404.,
      11740., 14332., 10206., 11886., 13694., 15630., 510.,   1422.,  2462.,
      3630.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     30.,    174.,   446.,   846.,   190.,   590.,   1118.,
      1774.,  540.,   1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,
      2588.,  3644.,  4956.,  6524.,  3742.,  4910.,  6206.,  7630.,  190.,
      590.,   1118.,  1774.,  190.,   590.,   1118.,  1774.,  350.,   1006.,
      1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,
      6524.,  3932.,  5500.,  7324.,  9404.,  190.,   590.,   1118.,  1774.,
      1374.,  2030.,  2814.,  3726.,  700.,   2012.,  3580.,  5404.,  3068.,
      4892.,  6972.,  9308.,  7864.,  11000., 14648., 18808., 14648., 18808.,
      23480., 28664., 7864.,  11000., 14648., 18808., 11580., 13916., 16508.,
      19356., 3068.,  4892.,  6972.,  9308.,  3068.,  4892.,  6972.,  9308.,
      4796.,  6108.,  7676.,  9500.,  14648., 18808., 23480., 28664., 7864.,
      11000., 14648., 18808., 14648., 18808., 23480., 28664., 3068.,  4892.,
      6972.,  9308.,  7484.,  9820.,  12412., 15260., 4826.,  6282.,  8122.,
      10346., 7354.,  9578.,  12186., 15178., 8404.,  12596., 17556., 23284.,
      16532., 22260., 28756., 36020., 10452., 14644., 19604., 25332., 11226.,
      14730., 18618., 22890., 7354.,  9578.,  12186., 15178., 7164.,  8988.,
      11068., 13404., 700.,   2012.,  3580.,  5404.,  14648., 18808., 23480.,
      28664., 7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664.,
      7164.,  8988.,  11068., 13404., 11580., 13916., 16508., 19356., 700.,
      2012.,  3580.,  5404.,  3068.,  4892.,  6972.,  9308.,  7864.,  11000.,
      14648., 18808., 14648., 18808., 23480., 28664., 7864.,  11000., 14648.,
      18808., 11580., 13916., 16508., 19356., 3068.,  4892.,  6972.,  9308.,
      510.,   1422.,  2462.,  3630.,  30.,    174.,   446.,   846.,   3932.,
      5500.,  7324.,  9404.,  540.,   1596.,  2908.,  4476.,  1884.,  3452.,
      5276.,  7356.,  2558.,  3470.,  4510.,  5678.,  3742.,  4910.,  6206.,
      7630.,  30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,
      540.,   1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2588.,
      3644.,  4956.,  6524.,  3742.,  4910.,  6206.,  7630.,  190.,   590.,
      1118.,  1774.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,    20.,   23.,   44.,   39.,   68.,   55.,   62.,   22.,   56.,
      70.,   124.,  102.,  172.,  134.,  156.,  52.,   126.,  140.,  244.,
      192.,  322.,  244.,  266.,  100.,  233.,  266.,  450.,  344.,  567.,
      422.,  467.,  148.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,
      244.,  521.,  578.,  918.,  656.,  1035., 734.,  803.,  244.,  510.,
      556.,  868.,  608.,  946.,  660.,  714.,  388.,  809.,  890.,  1386.,
      968.,  1503., 1046., 1139., 340.,  702.,  764.,  1180., 816.,  1258.,
      868.,  938.,  490.,  1012., 1074., 1660., 1146., 1768., 1218., 1288.,
      147.,  300.,  343.,  524.,  359.,  548.,  375.,  422.,  302.,  616.,
      710.,  1084., 742.,  1132., 774.,  876.,  532.,  1086., 1180., 1804.,
      1232., 1882., 1284., 1386., 820.,  1673., 1826., 2790., 1904., 2907.,
      1982., 2147., 628.,  1278., 1388., 2116., 1440., 2194., 1492., 1610.,
      964.,  1961., 2138., 3258., 2216., 3375., 2294., 2483., 724.,  1470.,
      1596., 2428., 1648., 2506., 1700., 1834., 1108., 2249., 2450., 3726.,
      2528., 3843., 2606., 2819., 820.,  1662., 1804., 2740., 1856., 2818.,
      1908., 2058., 1170., 2372., 2514., 3820., 2586., 3928., 2658., 2808.,
      287.,  580.,  663.,  1004., 679.,  1028., 695.,  782.,  582.,  1176.,
      1350., 2044., 1382., 2092., 1414., 1596., 1012., 2046., 2220., 3364.,
      2272., 3442., 2324., 2506., 1540., 3113., 3386., 5130., 3464., 5247.,
      3542., 3827., 1108., 2238., 2428., 3676., 2480., 3754., 2532., 2730.,
      1684., 3401., 3698., 5598., 3776., 5715., 3854., 4163., 1204., 2430.,
      2636., 3988., 2688., 4066., 2740., 2954., 1828., 3689., 4010., 6066.,
      4088., 6183., 4166., 4499., 1300., 2622., 2844., 4300., 2896., 4378.,
      2948., 3178., 1850., 3732., 3954., 5980., 4026., 6088., 4098., 4328.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,    5.,    8.,    11.,  8.,   10.,  0.,    6.,    7.,    20.,
      23.,  26.,   18.,   20.,   0.,   14.,  18.,  48.,   58.,   68.,   44.,
      50.,  0.,    34.,   38.,   98.,  108., 118., 74.,   80.,   0.,    59.,
      68.,  169.,  190.,  211.,  128., 140., 0.,   78.,   86.,   194.,  212.,
      230., 130.,  140.,  0.,    118., 126., 284., 302.,  320.,  180.,  190.,
      0.,   80.,   85.,   186.,  197., 208., 114., 120.,  0.,    105.,  110.,
      241., 252.,  263.,  144.,  150., 0.,   0.,   0.,    0.,    0.,    0.,
      0.,   0.,    0.,    7.,    14.,  29.,  44.,  59.,   32.,   40.,   0.,
      42.,  49.,   104.,  119.,  134., 72.,  80.,  0.,    86.,   102.,  216.,
      250., 284.,  152.,  170.,  0.,   166., 182., 386.,  420.,  454.,  242.,
      260., 0.,    257.,  284.,  601., 658., 715., 380.,  410.,  0.,    210.,
      230., 482.,  524.,  566.,  298., 320., 0.,   310.,  330.,  692.,  734.,
      776., 408.,  430.,  0.,    176., 187., 390., 413.,  436.,  228.,  240.,
      0.,   231.,  242.,  505.,  528., 551., 288., 300.,  0.,    0.,    0.,
      0.,   0.,    0.,    0.,    0.,   0.,   13.,  26.,   53.,   80.,   107.,
      56.,  70.,   0.,    78.,   91.,  188., 215., 242.,  126.,  140.,  0.,
      158., 186.,  384.,  442.,  500., 260., 290., 0.,    298.,  326.,  674.,
      732., 790.,  410.,  440.,  0.,   455., 500., 1033., 1126., 1219., 632.,
      680., 0.,    342.,  374.,  770., 836., 902., 466.,  500.,  0.,    502.,
      534., 1100., 1166., 1232., 636., 670., 0.,   272.,  289.,  594.,  629.,
      664., 342.,  360.,  0.,    357., 374., 769., 804.,  839.,  432.,  450.,
      0.,   0.,    0.,    0.,    0.,   0.,   0.,   0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,    128.,   148.,   295.,   272.,   481.,   396.,   448.,   138.,
      368.,   472.,   854.,   720.,   1226.,  968.,   1136.,  358.,   888.,
      992.,   1754.,  1400.,  2366.,  1808.,  1976.,  701.,   1660.,  1912.,
      3267.,  2524.,  4185.,  3136.,  3484.,  1110.,  2392.,  2624.,  4202.,
      3032.,  4814.,  3440.,  3736.,  1829.,  3916.,  4360.,  6939.,  4972.,
      7857.,  5584.,  6124.,  1862.,  3896.,  4256.,  6650.,  4664.,  7262.,
      5072.,  5496.,  2957.,  6172.,  6808.,  10611., 7420.,  11529., 8032.,
      8764.,  2614.,  5400.,  5888.,  9098.,  6296.,  9710.,  6704.,  7256.,
      3794.,  7840.,  8328.,  12878., 8896.,  13730., 9464.,  10016., 1121.,
      2288.,  2628.,  4015.,  2752.,  4201.,  2876.,  3248.,  2298.,  4688.,
      5432.,  8294.,  5680.,  8666.,  5928.,  6736.,  4118.,  8408.,  9152.,
      13994., 9560.,  14606., 9968.,  10776., 6341.,  12940., 14152., 21627.,
      14764., 22545., 15376., 16684., 4870.,  9912.,  10784., 16442., 11192.,
      17054., 11600., 12536., 7469.,  15196., 16600., 25299., 17212., 26217.,
      17824., 19324., 5622.,  11416., 12416., 18890., 12824., 19502., 13232.,
      14296., 8597.,  17452., 19048., 28971., 19660., 29889., 20272., 21964.,
      6374.,  12920., 14048., 21338., 14456., 21950., 14864., 16056., 9154.,
      18560., 19688., 29918., 20256., 30770., 20824., 22016., 2201.,  4448.,
      5108.,  7735.,  5232.,  7921.,  5356.,  6048.,  4458.,  9008.,  10392.,
      15734., 10640., 16106., 10888., 12336., 7878.,  15928., 17312., 26234.,
      17720., 26846., 18128., 19576., 11981., 24220., 26392., 39987., 27004.,
      40905., 27616., 29884., 8630.,  17432., 18944., 28682., 19352., 29294.,
      19760., 21336., 13109., 26476., 28840., 43659., 29452., 44577., 30064.,
      32524., 9382.,  18936., 20576., 31130., 20984., 31742., 21392., 23096.,
      14237., 28732., 31288., 47331., 31900., 48249., 32512., 35164., 10134.,
      20440., 22208., 33578., 22616., 34190., 23024., 24856., 14514., 29280.,
      31048., 46958., 31616., 47810., 32184., 34016.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   0.,    35.,   41.,
      128.,  148.,  168.,  123.,  137.,  0.,    82.,   110.,  312.,  384.,
      456.,  306.,  350.,  0.,    222.,  250.,  672.,  744.,  816.,  526.,
      570.,  0.,    391.,  457.,  1172., 1328., 1484., 919.,  1009., 0.,
      566.,  626.,  1424., 1560., 1696., 966.,  1042., 0.,    866.,  926.,
      2104., 2240., 2376., 1346., 1422., 0.,    599.,  637.,  1400., 1484.,
      1568., 863.,  909.,  0.,    789.,  827.,  1820., 1904., 1988., 1093.,
      1139., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      41.,   95.,   196.,  312.,  428.,  233.,  295.,  0.,    311.,  365.,
      776.,  892.,  1008., 543.,  605.,  0.,    634.,  758.,  1608., 1872.,
      2136., 1146., 1286., 0.,    1254., 1378., 2928., 3192., 3456., 1846.,
      1986., 0.,    1939., 2149., 4556., 5000., 5444., 2899., 3133., 0.,
      1598., 1754., 3680., 4008., 4336., 2286., 2458., 0.,    2378., 2534.,
      5320., 5648., 5976., 3146., 3318., 0.,    1355., 1441., 3008., 3188.,
      3368., 1763., 1857., 0.,    1785., 1871., 3908., 4088., 4268., 2233.,
      2327., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      77.,   179.,  364.,  576.,  788.,  413.,  523.,  0.,    587.,  689.,
      1424., 1636., 1848., 963.,  1073., 0.,    1186., 1406., 2904., 3360.,
      3816., 1986., 2222., 0.,    2286., 2506., 5184., 5640., 6096., 3166.,
      3402., 0.,    3487., 3841., 7940., 8672., 9404., 4879., 5257., 0.,
      2630., 2882., 5936., 6456., 6976., 3606., 3874., 0.,    3890., 4142.,
      8536., 9056., 9576., 4946., 5214., 0.,    2111., 2245., 4616., 4892.,
      5168., 2663., 2805., 0.,    2781., 2915., 5996., 6272., 6548., 3373.,
      3515., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,   900.,   1044.,  2138.,  2020.,  3602.,  2996.,  3396.,  956.,
      2632.,  3432.,  6292.,  5384.,  9220.,  7336.,  8648.,  1996.,  5992.,
      5128.,  10948., 6312.,  13748., 7496.,  8808.,  4578.,  10172., 12140.,
      19830., 14940., 24030., 17740., 20476., 3852.,  13800., 9864.,  22148.,
      11048., 24948., 12232., 14568., 9410.,  19836., 23340., 36630., 26140.,
      40830., 28940., 33212., 5708.,  21608., 14600., 33348., 15784., 36148.,
      16968., 20328., 12578., 26172., 29164., 45366., 31964., 49566., 34764.,
      38524., 780.,   15848., 3720.,  21124., 4904.,  23924., 6088.,  8424.,
      5020.,  11016., 12840., 20788., 15304., 24484., 17768., 20104., 1966.,
      4292.,  4948.,  7994.,  5924.,  9458.,  6900.,  7812.,  4348.,  9416.,
      11240., 18004., 13192., 20932., 15144., 17480., 3852.,  13800., 9864.,
      22148., 11048., 24948., 12232., 14568., 9410.,  19836., 23340., 36630.,
      26140., 40830., 28940., 33212., 5708.,  21608., 14600., 33348., 15784.,
      36148., 16968., 20328., 12578., 26172., 29164., 45366., 31964., 49566.,
      34764., 38524., 780.,   15848., 3720.,  21124., 4904.,  23924., 6088.,
      8424.,  5506.,  12028., 14508., 23382., 17308., 27582., 20108., 23356.,
      1996.,  5992.,  5128.,  10948., 6312.,  13748., 7496.,  8808.,  3676.,
      8328.,  9128.,  15220., 11592., 18916., 14056., 15368., 3662.,  7684.,
      8852.,  13850., 9828.,  15314., 10804., 12228., 7740.,  16200., 19048.,
      29716., 21000., 32644., 22952., 26312., 5708.,  21608., 14600., 33348.,
      15784., 36148., 16968., 20328., 12578., 26172., 29164., 45366., 31964.,
      49566., 34764., 38524., 780.,   15848., 3720.,  21124., 4904.,  23924.,
      6088.,  8424.,  5506.,  12028., 14508., 23382., 17308., 27582., 20108.,
      23356., 1996.,  5992.,  5128.,  10948., 6312.,  13748., 7496.,  8808.,
      4578.,  10172., 12140., 19830., 14940., 24030., 17740., 20476., 3852.,
      13800., 9864.,  22148., 11048., 24948., 12232., 14568., 8092.,  17160.,
      18984., 30004., 21448., 33700., 23912., 26248.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   0.,     230.,
      270.,   900.,   1044.,  1188.,  902.,   1006.,  0.,     540.,   748.,
      2216.,  2760.,  3304.,  2268.,  2604.,  0.,     1580.,  1148.,  4296.,
      3176.,  3720.,  2284.,  2620.,  0.,     2170.,  2674.,  6364.,  7564.,
      8764.,  5274.,  5970.,  0.,     4300.,  2076.,  8200.,  5544.,  6600.,
      3724.,  4316.,  0.,     3932.,  4396.,  9768.,  10824., 11880., 6684.,
      7276.,  0.,     4630.,  190.,   6116.,  1012.,  1668.,  950.,   1310.,
      0.,     1374.,  1670.,  3636.,  4292.,  4948.,  2750.,  3110.,  0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     270.,
      694.,   1428.,  2340.,  3252.,  1774.,  2262.,  0.,     2390.,  2814.,
      5988.,  6900.,  7812.,  4214.,  4702.,  0.,     4860.,  5836.,  12392.,
      14472., 16552., 8892.,  9996.,  0.,     9740.,  3932.,  16008., 10280.,
      12360., 6604.,  7708.,  0.,     8266.,  9922.,  20860., 24364., 27868.,
      14826., 16674., 0.,     12460., 4860.,  19912., 12648., 15240., 8044.,
      9404.,  0.,     9788.,  11020., 23016., 25608., 28200., 14844., 16204.,
      0.,     10630., 430.,   12740., 2260.,  3684.,  1958.,  2702.,  0.,
      3150.,  3830.,  7956.,  9380.,  10804., 5678.,  6422.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     510.,   1318.,
      2676.,  4356.,  6036.,  3166.,  4038.,  0.,     4550.,  5358.,  11076.,
      12756., 14436., 7526.,  8398.,  0.,     9180.,  10924., 22568., 26184.,
      29800., 15516., 17388., 0.,     17900., 6716.,  27720., 17384., 21000.,
      10924., 12796., 0.,     13722., 15506., 32028., 35788., 39548., 20666.,
      22642., 0.,     14860., 860.,   18056., 4136.,  6216.,  3532.,  4636.,
      0.,     4764.,  5740.,  12456., 14536., 16616., 9052.,  10156., 0.,
      630.,   30.,    1700.,  180.,   324.,   278.,   382.,   0.,     190.,
      230.,   756.,   900.,   1044.,  798.,   902.,   0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,    28.,    48.,    80.,    56.,    92.,    119.,   176.,   116.,
      156.,   209.,   272.,   176.,   220.,   200.,   248.,   50.,    88.,
      144.,   224.,   192.,   280.,   358.,   496.,   312.,   408.,   538.,
      688.,   432.,   536.,   512.,   624.,   150.,   208.,   384.,   504.,
      432.,   560.,   778.,   976.,   632.,   768.,   1078.,  1288.,  832.,
      976.,   912.,   1064.,  301.,   400.,   728.,   932.,   848.,   1064.,
      1467.,  1800.,  1148.,  1376.,  1917.,  2268.,  1448.,  1688.,  1616.,
      1868.,  518.,   592.,   1120.,  1272.,  1232.,  1392.,  1978.,  2224.,
      1432.,  1600.,  2278.,  2536.,  1632.,  1808.,  1776.,  1960.,  853.,
      976.,   1832.,  2084.,  2048.,  2312.,  3267.,  3672.,  2348.,  2624.,
      3717.,  4140.,  2648.,  2936.,  2912.,  3212.,  886.,   976.,   1856.,
      2040.,  2032.,  2224.,  3178.,  3472.,  2232.,  2432.,  3478.,  3784.,
      2432.,  2640.,  2640.,  2856.,  1405.,  1552.,  2936.,  3236.,  3248.,
      3560.,  5067.,  5544.,  3548.,  3872.,  5517.,  6012.,  3848.,  4184.,
      4208.,  4556.,  1254.,  1360.,  2592.,  2808.,  2832.,  3056.,  4378.,
      4720.,  3032.,  3264.,  4678.,  5032.,  3232.,  3472.,  3504.,  3752.,
      1834.,  1960.,  3792.,  4048.,  4032.,  4296.,  6238.,  6640.,  4312.,
      4584.,  6658.,  7072.,  4592.,  4872.,  4864.,  5152.,  533.,   588.,
      1088.,  1200.,  1256.,  1372.,  1919.,  2096.,  1316.,  1436.,  2009.,
      2192.,  1376.,  1500.,  1560.,  1688.,  1090.,  1208.,  2224.,  2464.,
      2592.,  2840.,  3958.,  4336.,  2712.,  2968.,  4138.,  4528.,  2832.,
      3096.,  3232.,  3504.,  1990.,  2128.,  4064.,  4344.,  4432.,  4720.,
      6778.,  7216.,  4632.,  4928.,  7078.,  7528.,  4832.,  5136.,  5232.,
      5544.,  3061.,  3280.,  6248.,  6692.,  6848.,  7304.,  10467., 11160.,
      7148.,  7616.,  10917., 11628., 7448.,  7928.,  8096.,  8588.,  2358.,
      2512.,  4800.,  5112.,  5232.,  5552.,  7978.,  8464.,  5432.,  5760.,
      8278.,  8776.,  5632.,  5968.,  6096.,  6440.,  3613.,  3856.,  7352.,
      7844.,  8048.,  8552.,  12267., 13032., 8348.,  8864.,  12717., 13500.,
      8648.,  9176.,  9392.,  9932.,  2726.,  2896.,  5536.,  5880.,  6032.,
      6384.,  9178.,  9712.,  6232.,  6592.,  9478.,  10024., 6432.,  6800.,
      6960.,  7336.,  4165.,  4432.,  8456.,  8996.,  9248.,  9800.,  14067.,
      14904., 9548.,  10112., 14517., 15372., 9848.,  10424., 10688., 11276.,
      3094.,  3280.,  6272.,  6648.,  6832.,  7216.,  10378., 10960., 7032.,
      7424.,  10678., 11272., 7232.,  7632.,  7824.,  8232.,  4474.,  4680.,
      9072.,  9488.,  9632.,  10056., 14638., 15280., 9912.,  10344., 15058.,
      15712., 10192., 10632., 10784., 11232., 1053.,  1148.,  2128.,  2320.,
      2456.,  2652.,  3719.,  4016.,  2516.,  2716.,  3809.,  4112.,  2576.,
      2780.,  2920.,  3128.,  2130.,  2328.,  4304.,  4704.,  4992.,  5400.,
      7558.,  8176.,  5112.,  5528.,  7738.,  8368.,  5232.,  5656.,  5952.,
      6384.,  3830.,  4048.,  7744.,  8184.,  8432.,  8880.,  12778., 13456.,
      8632.,  9088.,  13078., 13768., 8832.,  9296.,  9552.,  10024., 5821.,
      6160.,  11768., 12452., 12848., 13544., 19467., 20520., 13148., 13856.,
      19917., 20988., 13448., 14168., 14576., 15308., 4198.,  4432.,  8480.,
      8952.,  9232.,  9712.,  13978., 14704., 9432.,  9920.,  14278., 15016.,
      9632.,  10128., 10416., 10920., 6373.,  6736.,  12872., 13604., 14048.,
      14792., 21267., 22392., 14348., 15104., 21717., 22860., 14648., 15416.,
      15872., 16652., 4566.,  4816.,  9216.,  9720.,  10032., 10544., 15178.,
      15952., 10232., 10752., 15478., 16264., 10432., 10960., 11280., 11816.,
      6925.,  7312.,  13976., 14756., 15248., 16040., 23067., 24264., 15548.,
      16352., 23517., 24732., 15848., 16664., 17168., 17996., 4934.,  5200.,
      9952.,  10488., 10832., 11376., 16378., 17200., 11032., 11584., 16678.,
      17512., 11232., 11792., 12144., 12712., 7114.,  7400.,  14352., 14928.,
      15232., 15816., 23038., 23920., 15512., 16104., 23458., 24352., 15792.,
      16392., 16704., 17312.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,   32.,   24.,   44.,
      21.,   32.,   27.,   40.,   0.,    0.,    11.,   24.,   13.,   28.,
      48.,   80.,   56.,   92.,   64.,   104.,  51.,   72.,   57.,   80.,
      0.,    0.,    26.,   56.,   38.,   72.,   120.,  192.,  152.,  232.,
      184.,  272.,  130.,  176.,  150.,  200.,  0.,    0.,    86.,   136.,
      98.,   152.,  280.,  392.,  312.,  432.,  344.,  472.,  230.,  296.,
      250.,  320.,  0.,    0.,    155.,  236.,  185.,  272.,  496.,  676.,
      568.,  760.,  640.,  844.,  407.,  512.,  449.,  560.,  0.,    0.,
      254.,  312.,  282.,  344.,  648.,  776.,  712.,  848.,  776.,  920.,
      446.,  520.,  482.,  560.,  0.,    0.,    394.,  472.,  422.,  504.,
      968.,  1136., 1032., 1208., 1096., 1280., 626.,  720.,  662.,  760.,
      0.,    0.,    279.,  320.,  297.,  340.,  656.,  744.,  696.,  788.,
      736.,  832.,  407.,  456.,  429.,  480.,  0.,    0.,    369.,  420.,
      387.,  440.,  856.,  964.,  896.,  1008., 936.,  1052., 517.,  576.,
      539.,  600.,  0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      13.,   28.,   39.,   56.,   80.,   116.,  136.,  176.,  192.,  236.,
      105.,  128.,  135.,  160.,  0.,    0.,    143.,  168.,  169.,  196.,
      360.,  416.,  416.,  476.,  472.,  536.,  255.,  288.,  285.,  320.,
      0.,    0.,    290.,  344.,  350.,  408.,  744.,  864.,  872.,  1000.,
      1000., 1136., 538.,  608.,  606.,  680.,  0.,    0.,    590.,  664.,
      650.,  728.,  1384., 1544., 1512., 1680., 1640., 1816., 878.,  968.,
      946.,  1040., 0.,    0.,    911.,  1028., 1013., 1136., 2152., 2404.,
      2368., 2632., 2584., 2860., 1379., 1520., 1493., 1640., 0.,    0.,
      758.,  840.,  834.,  920.,  1752., 1928., 1912., 2096., 2072., 2264.,
      1094., 1192., 1178., 1280., 0.,    0.,    1138., 1240., 1214., 1320.,
      2552., 2768., 2712., 2936., 2872., 3104., 1514., 1632., 1598., 1720.,
      0.,    0.,    651.,  704.,  693.,  748.,  1448., 1560., 1536., 1652.,
      1624., 1744., 851.,  912.,  897.,  960.,  0.,    0.,    861.,  924.,
      903.,  968.,  1888., 2020., 1976., 2112., 2064., 2204., 1081., 1152.,
      1127., 1200., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      25.,   52.,   75.,   104.,  152.,  212.,  256.,  320.,  360.,  428.,
      189.,  224.,  243.,  280.,  0.,    0.,    275.,  312.,  325.,  364.,
      672.,  752.,  776.,  860.,  880.,  968.,  459.,  504.,  513.,  560.,
      0.,    0.,    554.,  632.,  662.,  744.,  1368., 1536., 1592., 1768.,
      1816., 2000., 946.,  1040., 1062., 1160., 0.,    0.,    1094., 1192.,
      1202., 1304., 2488., 2696., 2712., 2928., 2936., 3160., 1526., 1640.,
      1642., 1760., 0.,    0.,    1667., 1820., 1841., 2000., 3808., 4132.,
      4168., 4504., 4528., 4876., 2351., 2528., 2537., 2720., 0.,    0.,
      1262., 1368., 1386., 1496., 2856., 3080., 3112., 3344., 3368., 3608.,
      1742., 1864., 1874., 2000., 0.,    0.,    1882., 2008., 2006., 2136.,
      4136., 4400., 4392., 4664., 4648., 4928., 2402., 2544., 2534., 2680.,
      0.,    0.,    1023., 1088., 1089., 1156., 2240., 2376., 2376., 2516.,
      2512., 2656., 1295., 1368., 1365., 1440., 0.,    0.,    1353., 1428.,
      1419., 1496., 2920., 3076., 3056., 3216., 3192., 3356., 1645., 1728.,
      1715., 1800., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    193.,   326.,   574.,   382.,   662.,   847.,   1291.,  854.,
      1166.,  1555.,  2047.,  1326.,  1670.,  1510.,  1886.,  330.,   626.,
      1004.,  1628.,  1372.,  2060.,  2606.,  3686.,  2316.,  3068.,  4022.,
      5198.,  3260.,  4076.,  3884.,  4764.,  898.,   1098.,  2652.,  3340.,
      2316.,  2812.,  4950.,  5998.,  2876.,  3436.,  6302.,  7446.,  3436.,
      4060.,  4060.,  4748.,  2027.,  2551.,  4538.,  5634.,  5474.,  6666.,
      8985.,  10845., 6826.,  8114.,  11013., 13017., 8178.,  9562.,  9498.,
      10978., 1762.,  2090.,  6428.,  7372.,  4556.,  5308.,  10358., 11790.,
      5116.,  5932.,  11710., 13238., 5676.,  6556.,  6812.,  7756.,  4347.,
      5063.,  9178.,  10658., 10882., 12458., 17097., 19533., 12234., 13906.,
      19125., 21705., 13586., 15354., 15674., 17538., 2626.,  3082.,  10204.,
      11404., 6796.,  7804.,  15766., 17582., 7356.,  8428.,  17118., 19030.,
      7916.,  9052.,  9564.,  10764., 5963.,  6615.,  12410., 13762., 13858.,
      15306., 21561., 23805., 15210., 16754., 23589., 25977., 16562., 18202.,
      18394., 20130., 226.,   554.,   7452.,  8396.,  1484.,  2236.,  9846.,
      11278., 2044.,  2860.,  11198., 12726., 2604.,  3484.,  3740.,  4684.,
      2266.,  2754.,  5004.,  6012.,  5884.,  6956.,  9566.,  11222., 7084.,
      8220.,  11366., 13118., 8284.,  9484.,  9420.,  10684., 893.,   1073.,
      1958.,  2334.,  2270.,  2678.,  3679.,  4315.,  2742.,  3182.,  4387.,
      5071.,  3214.,  3686.,  3654.,  4158.,  1962.,  2386.,  4268.,  5148.,
      5148.,  6092.,  8270.,  9734.,  6092.,  7100.,  9686.,  11246., 7036.,
      8108.,  8172.,  9308.,  1762.,  2090.,  6428.,  7372.,  4556.,  5308.,
      10358., 11790., 5116.,  5932.,  11710., 13238., 5676.,  6556.,  6812.,
      7756.,  4347.,  5063.,  9178.,  10658., 10882., 12458., 17097., 19533.,
      12234., 13906., 19125., 21705., 13586., 15354., 15674., 17538., 2626.,
      3082.,  10204., 11404., 6796.,  7804.,  15766., 17582., 7356.,  8428.,
      17118., 19030., 7916.,  9052.,  9564.,  10764., 5963.,  6615.,  12410.,
      13762., 13858., 15306., 21561., 23805., 15210., 16754., 23589., 25977.,
      16562., 18202., 18394., 20130., 226.,   554.,   7452.,  8396.,  1484.,
      2236.,  9846.,  11278., 2044.,  2860.,  11198., 12726., 2604.,  3484.,
      3740.,  4684.,  2459.,  3047.,  5402.,  6626.,  6594.,  7914.,  10665.,
      12717., 7946.,  9362.,  12693., 14889., 9298.,  10810., 10874., 12482.,
      898.,   1098.,  2652.,  3340.,  2316.,  2812.,  4950.,  5998.,  2876.,
      3436.,  6302.,  7446.,  3436.,  4060.,  4060.,  4748.,  1658.,  2018.,
      3788.,  4540.,  4156.,  4972.,  6974.,  8246.,  5356.,  6236.,  8774.,
      10142., 6556.,  7500.,  7180.,  8188.,  1709.,  1953.,  3590.,  4094.,
      4158.,  4694.,  6511.,  7339.,  4630.,  5198.,  7219.,  8095.,  5102.,
      5702.,  5798.,  6430.,  3594.,  4146.,  7532.,  8668.,  8924.,  10124.,
      13934., 15782., 9868.,  11132., 15350., 17294., 10812., 12140., 12460.,
      13852., 2626.,  3082.,  10204., 11404., 6796.,  7804.,  15766., 17582.,
      7356.,  8428.,  17118., 19030., 7916.,  9052.,  9564.,  10764., 5963.,
      6615.,  12410., 13762., 13858., 15306., 21561., 23805., 15210., 16754.,
      23589., 25977., 16562., 18202., 18394., 20130., 226.,   554.,   7452.,
      8396.,  1484.,  2236.,  9846.,  11278., 2044.,  2860.,  11198., 12726.,
      2604.,  3484.,  3740.,  4684.,  2459.,  3047.,  5402.,  6626.,  6594.,
      7914.,  10665., 12717., 7946.,  9362.,  12693., 14889., 9298.,  10810.,
      10874., 12482., 898.,   1098.,  2652.,  3340.,  2316.,  2812.,  4950.,
      5998.,  2876.,  3436.,  6302.,  7446.,  3436.,  4060.,  4060.,  4748.,
      2027.,  2551.,  4538.,  5634.,  5474.,  6666.,  8985.,  10845., 6826.,
      8114.,  11013., 13017., 8178.,  9562.,  9498.,  10978., 1762.,  2090.,
      6428.,  7372.,  4556.,  5308.,  10358., 11790., 5116.,  5932.,  11710.,
      13238., 5676.,  6556.,  6812.,  7756.,  3802.,  4290.,  8076.,  9084.,
      8956.,  10028., 14174., 15830., 10156., 11292., 15974., 17726., 11356.,
      12556., 12492., 13756.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    17.,    53.,    46.,    134.,   102.,   222.,   158.,
      310.,   149.,   233.,   193.,   293.,   0.,     0.,     65.,    165.,
      77.,    193.,   326.,   574.,   382.,   662.,   438.,   750.,   369.,
      533.,   413.,   593.,   0.,     0.,     154.,   386.,   242.,   506.,
      828.,   1388.,  1068.,  1692.,  1308.,  1996.,  954.,   1314.,  1106.,
      1498.,  0.,     0.,     594.,   986.,   682.,   1106.,  2028.,  2908.,
      2268.,  3212.,  2508.,  3516.,  1714.,  2234.,  1866.,  2418.,  0.,
      0.,     1087.,  1723.,  1315.,  1999.,  3626.,  5042.,  4178.,  5690.,
      4730.,  6338.,  3055.,  3883.,  3379.,  4255.,  0.,     0.,     1922.,
      2378.,  2138.,  2626.,  4940.,  5948.,  5436.,  6508.,  5932.,  7068.,
      3426.,  4010.,  3706.,  4322.,  0.,     0.,     3002.,  3618.,  3218.,
      3866.,  7420.,  8748.,  7916.,  9308.,  8412.,  9868.,  4826.,  5570.,
      5106.,  5882.,  0.,     0.,     2153.,  2477.,  2293.,  2633.,  5078.,
      5774.,  5390.,  6118.,  5702.,  6462.,  3161.,  3549.,  3333.,  3737.,
      0.,     0.,     2853.,  3257.,  2993.,  3413.,  6638.,  7494.,  6950.,
      7838.,  7262.,  8182.,  4021.,  4489.,  4193.,  4677.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     77.,    193.,
      281.,   413.,   574.,   854.,   1014.,  1326.,  1454.,  1798.,  797.,
      977.,   1033.,  1229.,  0.,     0.,     1097.,  1293.,  1301.,  1513.,
      2774.,  3214.,  3214.,  3686.,  3654.,  4158.,  1977.,  2237.,  2213.,
      2489.,  0.,     0.,     2218.,  2642.,  2690.,  3146.,  5724.,  6668.,
      6732.,  7740.,  7740.,  8812.,  4170.,  4722.,  4706.,  5290.,  0.,
      0.,     4578.,  5162.,  5050.,  5666.,  10764., 12028., 11772., 13100.,
      12780., 14172., 6850.,  7562.,  7386.,  8130.,  0.,     0.,     7063.,
      7987.,  7867.,  8839.,  16730., 18722., 18434., 20522., 20138., 22322.,
      10759., 11875., 11659., 12823., 0.,     0.,     5906.,  6554.,  6506.,
      7186.,  13676., 15068., 14940., 16396., 16204., 17724., 8562.,  9338.,
      9226.,  10034., 0.,     0.,     8906.,  9714.,  9506.,  10346., 19996.,
      21708., 21260., 23036., 22524., 24364., 11882., 12818., 12546., 13514.,
      0.,     0.,     5105.,  5525.,  5437.,  5873.,  11366., 12254., 12062.,
      12982., 12758., 13710., 6689.,  7173.,  7053.,  7553.,  0.,     0.,
      6765.,  7265.,  7097.,  7613.,  14846., 15894., 15542., 16622., 16238.,
      17350., 8509.,  9073.,  8873.,  9453.,  0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     149.,   361.,   545.,   773.,
      1102.,  1574.,  1926.,  2430.,  2750.,  3286.,  1445.,  1721.,  1873.,
      2165.,  0.,     0.,     2129.,  2421.,  2525.,  2833.,  5222.,  5854.,
      6046.,  6710.,  6870.,  7566.,  3585.,  3941.,  4013.,  4385.,  0.,
      0.,     4282.,  4898.,  5138.,  5786.,  10620., 11948., 12396., 13788.,
      14172., 15628., 7386.,  8130.,  8306.,  9082.,  0.,     0.,     8562.,
      9338.,  9418.,  10226., 19500., 21148., 21276., 22988., 23052., 24828.,
      11986., 12890., 12906., 13842., 0.,     0.,     13039., 14251., 14419.,
      15679., 29834., 32402., 32690., 35354., 35546., 38306., 18463., 19867.,
      19939., 21391., 0.,     0.,     9890.,  10730., 10874., 11746., 22412.,
      24188., 24444., 26284., 26476., 28380., 13698., 14666., 14746., 15746.,
      0.,     0.,     14810., 15810., 15794., 16826., 32572., 34668., 34604.,
      36764., 36636., 38860., 18938., 20066., 19986., 21146., 0.,     0.,
      8057.,  8573.,  8581.,  9113.,  17654., 18734., 18734., 19846., 19814.,
      20958., 10217., 10797., 10773., 11369., 0.,     0.,     10677., 11273.,
      11201., 11813., 23054., 24294., 24134., 25406., 25214., 26518., 12997.,
      13657., 13553., 14229., 0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,   1422.,  2380.,  4332.,  2156.,  3340.,  5722.,  8202.,  3852.,
      5292.,  9290.,  12154., 5548.,  7244.,  6988.,  8940.,  1724.,  3036.,
      4120.,  7000.,  7000.,  10392., 11764., 17236., 10392., 14296., 16852.,
      23092., 13784., 18200., 18712., 23640., 7004.,  8572.,  17880., 22296.,
      9240.,  12120., 25044., 31284., 11608., 15000., 31668., 38676., 13976.,
      17880., 18904., 23320., 4202.,  6298.,  10180., 14756., 13476., 18820.,
      22622., 30190., 20100., 26212., 30510., 39230., 26724., 33604., 28356.,
      34980., 860.,   2428.,  13784., 18200., 5144.,  8024.,  22996., 29236.,
      7512.,  10904., 29620., 36628., 9880.,  13784., 14808., 19224., 7594.,
      10202., 16964., 22564., 22308., 28676., 27678., 36782., 28932., 36068.,
      35566., 45822., 35556., 43460., 31044., 38692., 7004.,  8572.,  17880.,
      22296., 9240.,  12120., 25044., 31284., 11608., 15000., 31668., 38676.,
      13976., 17880., 18904., 23320., 4202.,  6298.,  10180., 14756., 13476.,
      18820., 22622., 30190., 20100., 26212., 30510., 39230., 26724., 33604.,
      28356., 34980., 860.,   2428.,  13784., 18200., 5144.,  8024.,  22996.,
      29236., 7512.,  10904., 29620., 36628., 9880.,  13784., 14808., 19224.,
      6140.,  7964.,  13976., 17880., 16856., 21272., 19252., 25236., 22296.,
      27224., 25364., 32116., 27736., 33176., 19736., 24664., 6974.,  8398.,
      15308., 18284., 8940.,  11148., 19994., 24010., 10636., 13100., 23562.,
      27962., 12332., 15052., 15820., 18796., 3772.,  5084.,  8216.,  11096.,
      11096., 14488., 17908., 23380., 14488., 18392., 22996., 29236., 17880.,
      22296., 22808., 27736., 860.,   2428.,  13784., 18200., 5144.,  8024.,
      22996., 29236., 7512.,  10904., 29620., 36628., 9880.,  13784., 14808.,
      19224., 7594.,  10202., 16964., 22564., 22308., 28676., 27678., 36782.,
      28932., 36068., 35566., 45822., 35556., 43460., 31044., 38692., 7004.,
      8572.,  17880., 22296., 9240.,  12120., 25044., 31284., 11608., 15000.,
      31668., 38676., 13976., 17880., 18904., 23320., 4202.,  6298.,  10180.,
      14756., 13476., 18820., 22622., 30190., 20100., 26212., 30510., 39230.,
      26724., 33604., 28356., 34980., 860.,   2428.,  13784., 18200., 5144.,
      8024.,  22996., 29236., 7512.,  10904., 29620., 36628., 9880.,  13784.,
      14808., 19224., 7594.,  10202., 16964., 22564., 22308., 28676., 27678.,
      36782., 28932., 36068., 35566., 45822., 35556., 43460., 31044., 38692.,
      7004.,  8572.,  17880., 22296., 9240.,  12120., 25044., 31284., 11608.,
      15000., 31668., 38676., 13976., 17880., 18904., 23320., 4092.,  5916.,
      9880.,  13784., 12760., 17176., 21300., 27284., 18200., 23128., 27412.,
      34164., 23640., 29080., 23832., 28760., 510.,   1422.,  2380.,  4332.,
      2156.,  3340.,  5722.,  8202.,  3852.,  5292.,  9290.,  12154., 5548.,
      7244.,  6988.,  8940.,  1724.,  3036.,  4120.,  7000.,  7000.,  10392.,
      11764., 17236., 10392., 14296., 16852., 23092., 13784., 18200., 18712.,
      23640., 7004.,  8572.,  17880., 22296., 9240.,  12120., 25044., 31284.,
      11608., 15000., 31668., 38676., 13976., 17880., 18904., 23320., 4202.,
      6298.,  10180., 14756., 13476., 18820., 22622., 30190., 20100., 26212.,
      30510., 39230., 26724., 33604., 28356., 34980., 860.,   2428.,  13784.,
      18200., 5144.,  8024.,  22996., 29236., 7512.,  10904., 29620., 36628.,
      9880.,  13784., 14808., 19224., 7594.,  10202., 16964., 22564., 22308.,
      28676., 27678., 36782., 28932., 36068., 35566., 45822., 35556., 43460.,
      31044., 38692., 7004.,  8572.,  17880., 22296., 9240.,  12120., 25044.,
      31284., 11608., 15000., 31668., 38676., 13976., 17880., 18904., 23320.,
      4202.,  6298.,  10180., 14756., 13476., 18820., 22622., 30190., 20100.,
      26212., 30510., 39230., 26724., 33604., 28356., 34980., 860.,   2428.,
      13784., 18200., 5144.,  8024.,  22996., 29236., 7512.,  10904., 29620.,
      36628., 9880.,  13784., 14808., 19224., 6140.,  7964.,  13976., 17880.,
      16856., 21272., 19252., 25236., 22296., 27224., 25364., 32116., 27736.,
      33176., 19736., 24664.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1132.,
      2316.,  1118.,  1774.,  1454.,  2238.,  0.,     0.,     430.,   1214.,
      510.,   1422.,  2380.,  4332.,  2156.,  3340.,  2572.,  4012.,  110.,
      382.,   446.,   846.,   0.,     0.,     380.,   1180.,  1052.,  2108.,
      2776.,  5144.,  4632.,  7512.,  6488.,  9880.,  4604.,  6428.,  5788.,
      7868.,  0.,     0.,     3740.,  5820.,  3772.,  5084.,  11416., 15320.,
      5848.,  8216.,  7704.,  10584., 1052.,  2108.,  2236.,  3548.,  0.,
      0.,     2074.,  4042.,  3850.,  6202.,  9476.,  14564., 13796., 19652.,
      17476., 23076., 11482., 14986., 11338., 14202., 0.,     0.,     10204.,
      12796., 7164.,  8988.,  22296., 27224., 10584., 13976., 14488., 18392.,
      2396.,  3964.,  4604.,  6428.,  0.,     0.,     5116.,  6940.,  6812.,
      8892.,  15320., 19736., 19224., 24152., 18392., 22808., 13436., 16284.,
      8860.,  10940., 0.,     0.,     8078.,  9630.,  350.,   1006.,  11404.,
      13868., 2988.,  4684.,  5452.,  7404.,  3150.,  4190.,  4510.,  5678.,
      0.,     0.,     4766.,  5934.,  5870.,  7166.,  12844., 15564., 15308.,
      18284., 8940.,  11148., 9950.,  11630., 430.,   1214.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     510.,   1422.,
      2126.,  3166.,  4332.,  6540.,  7820.,  10284., 11308., 14028., 6206.,
      7630.,  8078.,  9630.,  0.,     0.,     8590.,  10142., 10206., 11886.,
      21772., 25260., 12332., 15052., 15820., 18796., 590.,   1630.,  2462.,
      3630.,  0.,     0.,     3772.,  5084.,  5468.,  7036.,  11608., 15000.,
      15512., 19416., 19416., 23832., 11068., 13404., 13276., 15868., 0.,
      0.,     12252., 14844., 1020.,  2844.,  18200., 23128., 6488.,  9880.,
      10392., 14296., 4444.,  6012.,  6652.,  8476.,  0.,     0.,     7354.,
      9578.,  9642.,  12250., 21060., 26660., 26404., 32772., 18820., 24932.,
      18298., 22058., 6378.,  9498.,  0.,     0.,     3740.,  5820.,  3772.,
      5084.,  11416., 15320., 5848.,  8216.,  7704.,  10584., 1052.,  2108.,
      2236.,  3548.,  0.,     0.,     1724.,  3036.,  2396.,  3964.,  6488.,
      9880.,  8344.,  12248., 9560.,  12952., 6972.,  9308.,  5468.,  7036.,
      0.,     0.,     4334.,  5630.,  190.,   590.,   6988.,  8940.,  1644.,
      2828.,  3084.,  4524.,  1966.,  2750.,  2814.,  3726.,  0.,     0.,
      2558.,  3470.,  3150.,  4190.,  7404.,  9612.,  8844.,  11308., 5548.,
      7244.,  6206.,  7630.,  270.,   798.,   0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     350.,   1006.,  1454.,  2238.,
      2988.,  4684.,  5452.,  7404.,  7916.,  10124., 4510.,  5678.,  5870.,
      7166.,  0.,     0.,     5870.,  7166.,  6974.,  8398.,  15308., 18284.,
      8940.,  11148., 11404., 13868., 430.,   1214.,  1790.,  2702.,  0.,
      0.,     3068.,  4892.,  5788.,  7868.,  12248., 16664., 18200., 23128.,
      24152., 29592., 13436., 16284., 16668., 19772., 0.,     0.,     16668.,
      19772., 10556., 12892., 33176., 39128., 15320., 19736., 21272., 26200.,
      3740.,  5820.,  6972.,  9308.,  0.,     0.,     8538.,  11018., 11338.,
      14202., 24452., 30564., 30820., 37700., 28356., 34980., 21018., 25034.,
      13706., 17082., 0.,     0.,     12252., 14844., 1020.,  2844.,  18200.,
      23128., 6488.,  9880.,  10392., 14296., 4444.,  6012.,  6652.,  8476.,
      0.,     0.,     7164.,  8988.,  8860.,  10940., 19416., 23832., 23320.,
      28248., 14296., 18712., 15484., 18332., 2716.,  4796.,  0.,     0.,
      590.,   1630.,  30.,    174.,   2572.,  4012.,  300.,   972.,   716.,
      1644.,  782.,   1310.,  1118.,  1774.,  0.,     0.,     350.,   1006.,
      430.,   1214.,  1964.,  3660.,  2380.,  4332.,  2156.,  3340.,  2462.,
      3630.,  110.,   382.,   0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,
      542.,   624.,   719.,   836.,   959.,   1088.,  622.,   704.,   790.,
      880.,   710.,   800.,   894.,   992.,   130.,   200.,   274.,   352.,
      428.,   576.,   732.,   896.,   604.,   768.,   940.,   1120.,  1174.,
      1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,  2152.,
      2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,  2268.,
      2496.,  490.,   600.,   714.,   832.,   1308.,  1536.,  1772.,  2016.,
      1484.,  1728.,  1980.,  2240.,  2734.,  3112.,  3502.,  3904.,  2268.,
      2528.,  2796.,  3072.,  3910.,  4312.,  4726.,  5152.,  3052.,  3328.,
      3612.,  3904.,  3356.,  3648.,  3948.,  4256.,  1015.,  1204.,  1399.,
      1600.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,  3818.,  4256.,
      5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,  5504.,  6993.,
      7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,  5978.,  6464.,
      6962.,  7472.,  1930.,  2072.,  2218.,  2368.,  4188.,  4480.,  4780.,
      5088.,  4620.,  4928.,  5244.,  5568.,  7438.,  7912.,  8398.,  8896.,
      5404.,  5728.,  6060.,  6400.,  8614.,  9112.,  9622.,  10144., 6188.,
      6528.,  6876.,  7232.,  6748.,  7104.,  7468.,  7840.,  3175.,  3412.,
      3655.,  3904.,  6842.,  7328.,  7826.,  8336.,  7682.,  8192.,  8714.,
      9248.,  12285., 13068., 13869., 14688., 8858.,  9392.,  9938.,  10496.,
      14049., 14868., 15705., 16560., 10034., 10592., 11162., 11744., 11066.,
      11648., 12242., 12848., 3370.,  3544.,  3722.,  3904.,  7068.,  7424.,
      7788.,  8160.,  7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294.,
      13888., 8540.,  8928.,  9324.,  9728.,  13318., 13912., 14518., 15136.,
      9324.,  9728.,  10140., 10560., 10140., 10560., 10988., 11424., 5335.,
      5620.,  5911.,  6208.,  11162., 11744., 12338., 12944., 12386., 12992.,
      13610., 14240., 19341., 20268., 21213., 22176., 13562., 14192., 14834.,
      15488., 21105., 22068., 23049., 24048., 14738., 15392., 16058., 16736.,
      16154., 16832., 17522., 18224., 4810.,  5016.,  5226.,  5440.,  9948.,
      10368., 10796., 11232., 10892., 11328., 11772., 12224., 16846., 17512.,
      18190., 18880., 11676., 12128., 12588., 13056., 18022., 18712., 19414.,
      20128., 12460., 12928., 13404., 13888., 13532., 14016., 14508., 15008.,
      7090.,  7336.,  7586.,  7840.,  14668., 15168., 15676., 16192., 15612.,
      16128., 16652., 17184., 24166., 24952., 25750., 26560., 16716., 17248.,
      17788., 18336., 25822., 26632., 27454., 28288., 17820., 18368., 18924.,
      19488., 18892., 19456., 20028., 20608., 2025.,  2132.,  2241.,  2352.,
      4134.,  4352.,  4574.,  4800.,  4798.,  5024.,  5254.,  5488.,  7331.,
      7676.,  8027.,  8384.,  5030.,  5264.,  5502.,  5744.,  7679.,  8036.,
      8399.,  8768.,  5262.,  5504.,  5750.,  6000.,  5990.,  6240.,  6494.,
      6752.,  4130.,  4360.,  4594.,  4832.,  8428.,  8896.,  9372.,  9856.,
      9884.,  10368., 10860., 11360., 15094., 15832., 16582., 17344., 10348.,
      10848., 11356., 11872., 15790., 16552., 17326., 18112., 10812., 11328.,
      11852., 12384., 12396., 12928., 13468., 14016., 7690.,  7960.,  8234.,
      8512.,  15708., 16256., 16812., 17376., 17164., 17728., 18300., 18880.,
      26254., 27112., 27982., 28864., 17948., 18528., 19116., 19712., 27430.,
      28312., 29206., 30112., 18732., 19328., 19932., 20544., 20316., 20928.,
      21548., 22176., 11815., 12244., 12679., 13120., 24122., 24992., 25874.,
      26768., 26498., 27392., 28298., 29216., 40509., 41868., 43245., 44640.,
      27674., 28592., 29522., 30464., 42273., 43668., 45081., 46512., 28850.,
      29792., 30746., 31712., 31418., 32384., 33362., 34352., 9130.,  9432.,
      9738.,  10048., 18588., 19200., 19820., 20448., 20300., 20928., 21564.,
      22208., 30958., 31912., 32878., 33856., 21084., 21728., 22380., 23040.,
      32134., 33112., 34102., 35104., 21868., 22528., 23196., 23872., 23708.,
      24384., 25068., 25760., 13335., 13684., 14039., 14400., 27162., 27872.,
      28594., 29328., 28898., 29632., 30378., 31136., 44109., 45228., 46365.,
      47520., 30074., 30832., 31602., 32384., 45873., 47028., 48201., 49392.,
      31250., 32032., 32826., 33632., 33178., 33984., 34802., 35632., 7370.,
      7576.,  7786.,  8000.,  15068., 15488., 15916., 16352., 16012., 16448.,
      16892., 17344., 24526., 25192., 25870., 26560., 16796., 17248., 17708.,
      18176., 25702., 26392., 27094., 27808., 17580., 18048., 18524., 19008.,
      18652., 19136., 19628., 20128., 9735.,  10004., 10279., 10560., 19962.,
      20512., 21074., 21648., 21058., 21632., 22218., 22816., 32349., 33228.,
      34125., 35040., 22234., 22832., 23442., 24064., 34113., 35028., 35961.,
      36912., 23410., 24032., 24666., 25312., 24698., 25344., 26002., 26672.,
      490.,   600.,   714.,   832.,   1308.,  1536.,  1772.,  2016.,  1484.,
      1728.,  1980.,  2240.,  2734.,  3112.,  3502.,  3904.,  2268.,  2528.,
      2796.,  3072.,  3910.,  4312.,  4726.,  5152.,  3052.,  3328.,  3612.,
      3904.,  3356.,  3648.,  3948.,  4256.,  850.,   1000.,  1154.,  1312.,
      2188.,  2496.,  2812.,  3136.,  2364.,  2688.,  3020.,  3360.,  4294.,
      4792.,  5302.,  5824.,  3468.,  3808.,  4156.,  4512.,  5950.,  6472.,
      7006.,  7552.,  4572.,  4928.,  5292.,  5664.,  4876.,  5248.,  5628.,
      6016.,  825.,   884.,   945.,   1008.,  1734.,  1856.,  1982.,  2112.,
      2014.,  2144.,  2278.,  2416.,  3155.,  3356.,  3563.,  3776.,  2246.,
      2384.,  2526.,  2672.,  3503.,  3716.,  3935.,  4160.,  2478.,  2624.,
      2774.,  2928.,  2822.,  2976.,  3134.,  3296.,  1730.,  1864.,  2002.,
      2144.,  3628.,  3904.,  4188.,  4480.,  4316.,  4608.,  4908.,  5216.,
      6742.,  7192.,  7654.,  8128.,  4780.,  5088.,  5404.,  5728.,  7438.,
      7912.,  8398.,  8896.,  5244.,  5568.,  5900.,  6240.,  6060.,  6400.,
      6748.,  7104.,  3370.,  3544.,  3722.,  3904.,  7068.,  7424.,  7788.,
      8160.,  7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294., 13888.,
      8540.,  8928.,  9324.,  9728.,  13318., 13912., 14518., 15136., 9324.,
      9728.,  10140., 10560., 10140., 10560., 10988., 11424., 5335.,  5620.,
      5911.,  6208.,  11162., 11744., 12338., 12944., 12386., 12992., 13610.,
      14240., 19341., 20268., 21213., 22176., 13562., 14192., 14834., 15488.,
      21105., 22068., 23049., 24048., 14738., 15392., 16058., 16736., 16154.,
      16832., 17522., 18224., 4810.,  5016.,  5226.,  5440.,  9948.,  10368.,
      10796., 11232., 10892., 11328., 11772., 12224., 16846., 17512., 18190.,
      18880., 11676., 12128., 12588., 13056., 18022., 18712., 19414., 20128.,
      12460., 12928., 13404., 13888., 13532., 14016., 14508., 15008., 7495.,
      7828.,  8167.,  8512.,  15482., 16160., 16850., 17552., 17090., 17792.,
      18506., 19232., 26397., 27468., 28557., 29664., 18266., 18992., 19730.,
      20480., 28161., 29268., 30393., 31536., 19442., 20192., 20954., 21728.,
      21242., 22016., 22802., 23600., 6250.,  6488.,  6730.,  6976.,  12828.,
      13312., 13804., 14304., 14028., 14528., 15036., 15552., 21550., 22312.,
      23086., 23872., 14812., 15328., 15852., 16384., 22726., 23512., 24310.,
      25120., 15596., 16128., 16668., 17216., 16924., 17472., 18028., 18592.,
      9655.,  10036., 10423., 10816., 19802., 20576., 21362., 22160., 21794.,
      22592., 23402., 24224., 33453., 34668., 35901., 37152., 22970., 23792.,
      24626., 25472., 35217., 36468., 37737., 39024., 24146., 24992., 25850.,
      26720., 26330., 27200., 28082., 28976., 7690.,  7960.,  8234.,  8512.,
      15708., 16256., 16812., 17376., 17164., 17728., 18300., 18880., 26254.,
      27112., 27982., 28864., 17948., 18528., 19116., 19712., 27430., 28312.,
      29206., 30112., 18732., 19328., 19932., 20544., 20316., 20928., 21548.,
      22176., 11250., 11560., 11874., 12192., 22988., 23616., 24252., 24896.,
      24444., 25088., 25740., 26400., 37414., 38392., 39382., 40384., 25548.,
      26208., 26876., 27552., 39070., 40072., 41086., 42112., 26652., 27328.,
      28012., 28704., 28236., 28928., 29628., 30336.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    5.,     12.,    21.,    32.,    14.,
      32.,    54.,    80.,    38.,    64.,    94.,    128.,   62.,    96.,
      134.,   176.,   65.,    84.,    105.,   128.,   85.,    108.,   133.,
      160.,   0.,     0.,     0.,     0.,     21.,    44.,    69.,    96.,
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   182.,   256.,   334.,   416.,   165.,   204.,
      245.,   288.,   185.,   228.,   273.,   320.,   0.,     0.,     0.,
      0.,     50.,    104.,   162.,   224.,   90.,    152.,   218.,   288.,
      348.,   480.,   620.,   768.,   460.,   608.,   764.,   928.,   572.,
      736.,   908.,   1088.,  434.,   520.,   610.,   704.,   506.,   600.,
      698.,   800.,   0.,     0.,     0.,     0.,     250.,   344.,   442.,
      544.,   290.,   392.,   498.,   608.,   908.,   1120.,  1340.,  1568.,
      1020.,  1248.,  1484.,  1728.,  1132.,  1376.,  1628.,  1888.,  794.,
      920.,   1050.,  1184.,  866.,   1000.,  1138.,  1280.,  0.,     0.,
      0.,     0.,     467.,   620.,   779.,   944.,   575.,   740.,   911.,
      1088.,  1642.,  1984.,  2338.,  2704.,  1906.,  2272.,  2650.,  3040.,
      2170.,  2560.,  2962.,  3376.,  1427.,  1628.,  1835.,  2048.,  1583.,
      1796.,  2015.,  2240.,  0.,     0.,     0.,     0.,     906.,   1016.,
      1130.,  1248.,  1010.,  1128.,  1250.,  1376.,  2348.,  2592.,  2844.,
      3104.,  2588.,  2848.,  3116.,  3392.,  2828.,  3104.,  3388.,  3680.,
      1642.,  1784.,  1930.,  2080.,  1778.,  1928.,  2082.,  2240.,  0.,
      0.,     0.,     0.,     1426.,  1576.,  1730.,  1888.,  1530.,  1688.,
      1850.,  2016.,  3548.,  3872.,  4204.,  4544.,  3788.,  4128.,  4476.,
      4832.,  4028.,  4384.,  4748.,  5120.,  2322.,  2504.,  2690.,  2880.,
      2458.,  2648.,  2842.,  3040.,  0.,     0.,     0.,     0.,     1037.,
      1116.,  1197.,  1280.,  1105.,  1188.,  1273.,  1360.,  2454.,  2624.,
      2798.,  2976.,  2606.,  2784.,  2966.,  3152.,  2758.,  2944.,  3134.,
      3328.,  1533.,  1628.,  1725.,  1824.,  1617.,  1716.,  1817.,  1920.,
      0.,     0.,     0.,     0.,     1377.,  1476.,  1577.,  1680.,  1445.,
      1548.,  1653.,  1760.,  3214.,  3424.,  3638.,  3856.,  3366.,  3584.,
      3806.,  4032.,  3518.,  3744.,  3974.,  4208.,  1953.,  2068.,  2185.,
      2304.,  2037.,  2156.,  2277.,  2400.,  0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     25.,    52.,    81.,    112.,
      125.,   156.,   189.,   224.,   254.,   320.,   390.,   464.,   470.,
      544.,   622.,   704.,   686.,   768.,   854.,   944.,   377.,   420.,
      465.,   512.,   493.,   540.,   589.,   640.,   0.,     0.,     0.,
      0.,     525.,   572.,   621.,   672.,   625.,   676.,   729.,   784.,
      1334.,  1440.,  1550.,  1664.,  1550.,  1664.,  1782.,  1904.,  1766.,
      1888.,  2014.,  2144.,  957.,   1020.,  1085.,  1152.,  1073.,  1140.,
      1209.,  1280.,  0.,     0.,     0.,     0.,     1058.,  1160.,  1266.,
      1376.,  1290.,  1400.,  1514.,  1632.,  2748.,  2976.,  3212.,  3456.,
      3244.,  3488.,  3740.,  4000.,  3740.,  4000.,  4268.,  4544.,  2018.,
      2152.,  2290.,  2432.,  2282.,  2424.,  2570.,  2720.,  0.,     0.,
      0.,     0.,     2218.,  2360.,  2506.,  2656.,  2450.,  2600.,  2754.,
      2912.,  5228.,  5536.,  5852.,  6176.,  5724.,  6048.,  6380.,  6720.,
      6220.,  6560.,  6908.,  7264.,  3338.,  3512.,  3690.,  3872.,  3602.,
      3784.,  3970.,  4160.,  0.,     0.,     0.,     0.,     3419.,  3644.,
      3875.,  4112.,  3815.,  4052.,  4295.,  4544.,  8122.,  8608.,  9106.,
      9616.,  8962.,  9472.,  9994.,  10528., 9802.,  10336., 10882., 11440.,
      5243.,  5516.,  5795.,  6080.,  5687.,  5972.,  6263.,  6560.,  0.,
      0.,     0.,     0.,     2874.,  3032.,  3194.,  3360.,  3170.,  3336.,
      3506.,  3680.,  6668.,  7008.,  7356.,  7712.,  7292.,  7648.,  8012.,
      8384.,  7916.,  8288.,  8668.,  9056.,  4186.,  4376.,  4570.,  4768.,
      4514.,  4712.,  4914.,  5120.,  0.,     0.,     0.,     0.,     4354.,
      4552.,  4754.,  4960.,  4650.,  4856.,  5066.,  5280.,  9788.,  10208.,
      10636., 11072., 10412., 10848., 11292., 11744., 11036., 11488., 11948.,
      12416., 5826.,  6056.,  6290.,  6528.,  6154.,  6392.,  6634.,  6880.,
      0.,     0.,     0.,     0.,     2501.,  2604.,  2709.,  2816.,  2665.,
      2772.,  2881.,  2992.,  5574.,  5792.,  6014.,  6240.,  5918.,  6144.,
      6374.,  6608.,  6262.,  6496.,  6734.,  6976.,  3285.,  3404.,  3525.,
      3648.,  3465.,  3588.,  3713.,  3840.,  0.,     0.,     0.,     0.,
      3321.,  3444.,  3569.,  3696.,  3485.,  3612.,  3741.,  3872.,  7294.,
      7552.,  7814.,  8080.,  7638.,  7904.,  8174.,  8448.,  7982.,  8256.,
      8534.,  8816.,  4185.,  4324.,  4465.,  4608.,  4365.,  4508.,  4653.,
      4800.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     49.,    100.,   153.,   208.,   245.,   300.,   357.,   416.,
      494.,   608.,   726.,   848.,   902.,   1024.,  1150.,  1280.,  1310.,
      1440.,  1574.,  1712.,  689.,   756.,   825.,   896.,   901.,   972.,
      1045.,  1120.,  0.,     0.,     0.,     0.,     1029.,  1100.,  1173.,
      1248.,  1225.,  1300.,  1377.,  1456.,  2534.,  2688.,  2846.,  3008.,
      2942.,  3104.,  3270.,  3440.,  3350.,  3520.,  3694.,  3872.,  1749.,
      1836.,  1925.,  2016.,  1961.,  2052.,  2145.,  2240.,  0.,     0.,
      0.,     0.,     2066.,  2216.,  2370.,  2528.,  2490.,  2648.,  2810.,
      2976.,  5148.,  5472.,  5804.,  6144.,  6028.,  6368.,  6716.,  7072.,
      6908.,  7264.,  7628.,  8000.,  3602.,  3784.,  3970.,  4160.,  4058.,
      4248.,  4442.,  4640.,  0.,     0.,     0.,     0.,     4186.,  4376.,
      4570.,  4768.,  4610.,  4808.,  5010.,  5216.,  9548.,  9952.,  10364.,
      10784., 10428., 10848., 11276., 11712., 11308., 11744., 12188., 12640.,
      5882.,  6104.,  6330.,  6560.,  6338.,  6568.,  6802.,  7040.,  0.,
      0.,     0.,     0.,     6371.,  6668.,  6971.,  7280.,  7055.,  7364.,
      7679.,  8000.,  14602., 15232., 15874., 16528., 16018., 16672., 17338.,
      18016., 17434., 18112., 18802., 19504., 9059.,  9404.,  9755.,  10112.,
      9791.,  10148., 10511., 10880., 0.,     0.,     0.,     0.,     4842.,
      5048.,  5258.,  5472.,  5330.,  5544.,  5762.,  5984.,  10988., 11424.,
      11868., 12320., 11996., 12448., 12908., 13376., 13004., 13472., 13948.,
      14432., 6730.,  6968.,  7210.,  7456.,  7250.,  7496.,  7746.,  8000.,
      0.,     0.,     0.,     0.,     7282.,  7528.,  7778.,  8032.,  7770.,
      8024.,  8282.,  8544.,  16028., 16544., 17068., 17600., 17036., 17568.,
      18108., 18656., 18044., 18592., 19148., 19712., 9330.,  9608.,  9890.,
      10176., 9850.,  10136., 10426., 10720., 0.,     0.,     0.,     0.,
      3965.,  4092.,  4221.,  4352.,  4225.,  4356.,  4489.,  4624.,  8694.,
      8960.,  9230.,  9504.,  9230.,  9504.,  9782.,  10064., 9766.,  10048.,
      10334., 10624., 5037.,  5180.,  5325.,  5472.,  5313.,  5460.,  5609.,
      5760.,  0.,     0.,     0.,     0.,     5265.,  5412.,  5561.,  5712.,
      5525.,  5676.,  5829.,  5984.,  11374., 11680., 11990., 12304., 11910.,
      12224., 12542., 12864., 12446., 12768., 13094., 13424., 6417.,  6580.,
      6745.,  6912.,  6693.,  6860.,  7029.,  7200.,  0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  946.,
      1210.,  1506.,  1834.,  2575.,  3147.,  3767.,  4435.,  1762.,  2090.,
      2450.,  2842.,  4311.,  4979.,  5695.,  6459.,  2578.,  2970.,  3394.,
      3850.,  3266.,  3722.,  4210.,  4730.,  714.,   1010.,  1338.,  1698.,
      1732.,  2388.,  3108.,  3892.,  3108.,  3892.,  4740.,  5652.,  5246.,
      6518.,  7886.,  9350.,  4740.,  5652.,  6628.,  7668.,  7694.,  9158.,
      10718., 12374., 6372.,  7412.,  8516.,  9684.,  8772.,  9940.,  11172.,
      12468., 3322.,  3682.,  4074.,  4498.,  8420.,  9460.,  10564., 11732.,
      4292.,  4948.,  5668.,  6452.,  11790., 13254., 14814., 16470., 5412.,
      6196.,  7044.,  7956.,  15006., 16662., 18414., 20262., 6532.,  7444.,
      8420.,  9460.,  8932.,  9972.,  11076., 12244., 1863.,  2339.,  2863.,
      3435.,  4566.,  5614.,  6758.,  7998.,  6118.,  7358.,  8694.,  10126.,
      10437., 12185., 14077., 16113., 9334.,  10766., 12294., 13918., 14237.,
      16273., 18453., 20777., 12550., 14174., 15894., 17710., 13398., 14958.,
      16614., 18366., 250.,   610.,   1002.,  1426.,  6372.,  7412.,  8516.,
      9684.,  2244.,  2900.,  3620.,  4404.,  10766., 12230., 13790., 15446.,
      3364.,  4148.,  4996.,  5908.,  13982., 15638., 17390., 19238., 4484.,
      5396.,  6372.,  7412.,  6884.,  7924.,  9028.,  10196., 3495.,  4099.,
      4751.,  5451.,  7830.,  9134.,  10534., 12030., 10406., 11902., 13494.,
      15182., 12773., 14905., 17181., 19601., 13622., 15310., 17094., 18974.,
      16573., 18993., 21557., 24265., 16838., 18718., 20694., 22766., 14614.,
      16430., 18342., 20350., 3322.,  3682.,  4074.,  4498.,  8420.,  9460.,
      10564., 11732., 4292.,  4948.,  5668.,  6452.,  11790., 13254., 14814.,
      16470., 5412.,  6196.,  7044.,  7956.,  15006., 16662., 18414., 20262.,
      6532.,  7444.,  8420.,  9460.,  8932.,  9972.,  11076., 12244., 1863.,
      2339.,  2863.,  3435.,  4566.,  5614.,  6758.,  7998.,  6118.,  7358.,
      8694.,  10126., 10437., 12185., 14077., 16113., 9334.,  10766., 12294.,
      13918., 14237., 16273., 18453., 20777., 12550., 14174., 15894., 17710.,
      13398., 14958., 16614., 18366., 250.,   610.,   1002.,  1426.,  6372.,
      7412.,  8516.,  9684.,  2244.,  2900.,  3620.,  4404.,  10766., 12230.,
      13790., 15446., 3364.,  4148.,  4996.,  5908.,  13982., 15638., 17390.,
      19238., 4484.,  5396.,  6372.,  7412.,  6884.,  7924.,  9028.,  10196.,
      2858.,  3282.,  3738.,  4226.,  6532.,  7444.,  8420.,  9460.,  7908.,
      8948.,  10052., 11220., 8926.,  10326., 11822., 13414., 10564., 11732.,
      12964., 14260., 11886., 13478., 15166., 16950., 13220., 14516., 15876.,
      17300., 9284.,  10452., 11684., 12980., 3317.,  3657.,  4013.,  4385.,
      7298.,  8010.,  8754.,  9530.,  4210.,  4730.,  5282.,  5866.,  9519.,
      10475., 11479., 12531., 5026.,  5610.,  6226.,  6874.,  11255., 12307.,
      13407., 14555., 5842.,  6490.,  7170.,  7882.,  7554.,  8266.,  9010.,
      9786.,  1738.,  2034.,  2362.,  2722.,  3780.,  4436.,  5156.,  5940.,
      5156.,  5940.,  6788.,  7700.,  8318.,  9590.,  10958., 12422., 6788.,
      7700.,  8676.,  9716.,  10766., 12230., 13790., 15446., 8420.,  9460.,
      10564., 11732., 10820., 11988., 13220., 14516., 250.,   610.,   1002.,
      1426.,  6372.,  7412.,  8516.,  9684.,  2244.,  2900.,  3620.,  4404.,
      10766., 12230., 13790., 15446., 3364.,  4148.,  4996.,  5908.,  13982.,
      15638., 17390., 19238., 4484.,  5396.,  6372.,  7412.,  6884.,  7924.,
      9028.,  10196., 3495.,  4099.,  4751.,  5451.,  7830.,  9134.,  10534.,
      12030., 10406., 11902., 13494., 15182., 12773., 14905., 17181., 19601.,
      13622., 15310., 17094., 18974., 16573., 18993., 21557., 24265., 16838.,
      18718., 20694., 22766., 14614., 16430., 18342., 20350., 3322.,  3682.,
      4074.,  4498.,  8420.,  9460.,  10564., 11732., 4292.,  4948.,  5668.,
      6452.,  11790., 13254., 14814., 16470., 5412.,  6196.,  7044.,  7956.,
      15006., 16662., 18414., 20262., 6532.,  7444.,  8420.,  9460.,  8932.,
      9972.,  11076., 12244., 1863.,  2339.,  2863.,  3435.,  4566.,  5614.,
      6758.,  7998.,  6118.,  7358.,  8694.,  10126., 10437., 12185., 14077.,
      16113., 9334.,  10766., 12294., 13918., 14237., 16273., 18453., 20777.,
      12550., 14174., 15894., 17710., 13398., 14958., 16614., 18366., 250.,
      610.,   1002.,  1426.,  6372.,  7412.,  8516.,  9684.,  2244.,  2900.,
      3620.,  4404.,  10766., 12230., 13790., 15446., 3364.,  4148.,  4996.,
      5908.,  13982., 15638., 17390., 19238., 4484.,  5396.,  6372.,  7412.,
      6884.,  7924.,  9028.,  10196., 3495.,  4099.,  4751.,  5451.,  7830.,
      9134.,  10534., 12030., 10406., 11902., 13494., 15182., 12773., 14905.,
      17181., 19601., 13622., 15310., 17094., 18974., 16573., 18993., 21557.,
      24265., 16838., 18718., 20694., 22766., 14614., 16430., 18342., 20350.,
      3322.,  3682.,  4074.,  4498.,  8420.,  9460.,  10564., 11732., 4292.,
      4948.,  5668.,  6452.,  11790., 13254., 14814., 16470., 5412.,  6196.,
      7044.,  7956.,  15006., 16662., 18414., 20262., 6532.,  7444.,  8420.,
      9460.,  8932.,  9972.,  11076., 12244., 1834.,  2258.,  2714.,  3202.,
      4484.,  5396.,  6372.,  7412.,  5860.,  6900.,  8004.,  9172.,  9950.,
      11350., 12846., 14438., 8516.,  9684.,  10916., 12212., 12910., 14502.,
      16190., 17974., 11172., 12468., 13828., 15252., 11332., 12500., 13732.,
      15028., 149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,
      946.,   1210.,  1506.,  1834.,  2575.,  3147.,  3767.,  4435.,  1762.,
      2090.,  2450.,  2842.,  4311.,  4979.,  5695.,  6459.,  2578.,  2970.,
      3394.,  3850.,  3266.,  3722.,  4210.,  4730.,  714.,   1010.,  1338.,
      1698.,  1732.,  2388.,  3108.,  3892.,  3108.,  3892.,  4740.,  5652.,
      5246.,  6518.,  7886.,  9350.,  4740.,  5652.,  6628.,  7668.,  7694.,
      9158.,  10718., 12374., 6372.,  7412.,  8516.,  9684.,  8772.,  9940.,
      11172., 12468., 3322.,  3682.,  4074.,  4498.,  8420.,  9460.,  10564.,
      11732., 4292.,  4948.,  5668.,  6452.,  11790., 13254., 14814., 16470.,
      5412.,  6196.,  7044.,  7956.,  15006., 16662., 18414., 20262., 6532.,
      7444.,  8420.,  9460.,  8932.,  9972.,  11076., 12244., 1863.,  2339.,
      2863.,  3435.,  4566.,  5614.,  6758.,  7998.,  6118.,  7358.,  8694.,
      10126., 10437., 12185., 14077., 16113., 9334.,  10766., 12294., 13918.,
      14237., 16273., 18453., 20777., 12550., 14174., 15894., 17710., 13398.,
      14958., 16614., 18366., 250.,   610.,   1002.,  1426.,  6372.,  7412.,
      8516.,  9684.,  2244.,  2900.,  3620.,  4404.,  10766., 12230., 13790.,
      15446., 3364.,  4148.,  4996.,  5908.,  13982., 15638., 17390., 19238.,
      4484.,  5396.,  6372.,  7412.,  6884.,  7924.,  9028.,  10196., 3495.,
      4099.,  4751.,  5451.,  7830.,  9134.,  10534., 12030., 10406., 11902.,
      13494., 15182., 12773., 14905., 17181., 19601., 13622., 15310., 17094.,
      18974., 16573., 18993., 21557., 24265., 16838., 18718., 20694., 22766.,
      14614., 16430., 18342., 20350., 3322.,  3682.,  4074.,  4498.,  8420.,
      9460.,  10564., 11732., 4292.,  4948.,  5668.,  6452.,  11790., 13254.,
      14814., 16470., 5412.,  6196.,  7044.,  7956.,  15006., 16662., 18414.,
      20262., 6532.,  7444.,  8420.,  9460.,  8932.,  9972.,  11076., 12244.,
      1863.,  2339.,  2863.,  3435.,  4566.,  5614.,  6758.,  7998.,  6118.,
      7358.,  8694.,  10126., 10437., 12185., 14077., 16113., 9334.,  10766.,
      12294., 13918., 14237., 16273., 18453., 20777., 12550., 14174., 15894.,
      17710., 13398., 14958., 16614., 18366., 250.,   610.,   1002.,  1426.,
      6372.,  7412.,  8516.,  9684.,  2244.,  2900.,  3620.,  4404.,  10766.,
      12230., 13790., 15446., 3364.,  4148.,  4996.,  5908.,  13982., 15638.,
      17390., 19238., 4484.,  5396.,  6372.,  7412.,  6884.,  7924.,  9028.,
      10196., 2858.,  3282.,  3738.,  4226.,  6532.,  7444.,  8420.,  9460.,
      7908.,  8948.,  10052., 11220., 8926.,  10326., 11822., 13414., 10564.,
      11732., 12964., 14260., 11886., 13478., 15166., 16950., 13220., 14516.,
      15876., 17300., 9284.,  10452., 11684., 12980.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  0.,     0.,     0.,     0.,     125.,   305.,   501.,   713.,
      149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  946.,
      1210.,  1506.,  1834.,  1122.,  1450.,  1810.,  2202.,  29.,    81.,
      149.,   233.,   181.,   265.,   365.,   481.,   0.,     0.,     0.,
      0.,     106.,   274.,   474.,   706.,   410.,   642.,   906.,   1202.,
      1124.,  1652.,  2244.,  2900.,  1988.,  2644.,  3364.,  4148.,  2852.,
      3636.,  4484.,  5396.,  2090.,  2514.,  2970.,  3458.,  2650.,  3138.,
      3658.,  4210.,  0.,     0.,     0.,     0.,     1626.,  2114.,  2634.,
      3186.,  1738.,  2034.,  2362.,  2722.,  5252.,  6164.,  7140.,  8180.,
      2660.,  3188.,  3780.,  4436.,  3524.,  4180.,  4900.,  5684.,  410.,
      642.,   906.,   1202.,  970.,   1266.,  1594.,  1954.,  0.,     0.,
      0.,     0.,     815.,   1259.,  1751.,  2291.,  1655.,  2195.,  2783.,
      3419.,  4150.,  5326.,  6598.,  7966.,  6214.,  7582.,  9046.,  10606.,
      8086.,  9390.,  10790., 12286., 5327.,  6155.,  7031.,  7955.,  5335.,
      6003.,  6719.,  7483.,  0.,     0.,     0.,     0.,     4794.,  5410.,
      6058.,  6738.,  3370.,  3794.,  4250.,  4738.,  10564., 11732., 12964.,
      14260., 4900.,  5684.,  6532.,  7444.,  6788.,  7700.,  8676.,  9716.,
      1018.,  1378.,  1770.,  2194.,  2090.,  2514.,  2970.,  3458.,  0.,
      0.,     0.,     0.,     2346.,  2770.,  3226.,  3714.,  3162.,  3650.,
      4170.,  4722.,  7140.,  8180.,  9284.,  10452., 9028.,  10196., 11428.,
      12724., 8676.,  9716.,  10820., 11988., 6378.,  7058.,  7770.,  8514.,
      4186.,  4674.,  5194.,  5746.,  0.,     0.,     0.,     0.,     3853.,
      4225.,  4613.,  5017.,  101.,   249.,   413.,   593.,   5410.,  5994.,
      6610.,  7258.,  1298.,  1690.,  2114.,  2570.,  2498.,  2954.,  3442.,
      3962.,  1453.,  1697.,  1957.,  2233.,  2117.,  2393.,  2685.,  2993.,
      0.,     0.,     0.,     0.,     2245.,  2521.,  2813.,  3121.,  2781.,
      3089.,  3413.,  3753.,  6098.,  6746.,  7426.,  8138.,  7298.,  8010.,
      8754.,  9530.,  4210.,  4730.,  5282.,  5866.,  4773.,  5177.,  5597.,
      6033.,  125.,   305.,   501.,   713.,   0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     149.,   361.,   589.,   833.,
      941.,   1185.,  1445.,  1721.,  1906.,  2426.,  2978.,  3562.,  3618.,
      4202.,  4818.,  5466.,  5330.,  5978.,  6658.,  7370.,  2933.,  3273.,
      3629.,  4001.,  3853.,  4225.,  4613.,  5017.,  0.,     0.,     0.,
      0.,     4109.,  4481.,  4869.,  5273.,  4901.,  5305.,  5725.,  6161.,
      10466., 11306., 12178., 13082., 5842.,  6490.,  7170.,  7882.,  7554.,
      8266.,  9010.,  9786.,  173.,   417.,   677.,   953.,   1093.,  1369.,
      1661.,  1969.,  0.,     0.,     0.,     0.,     1738.,  2034.,  2362.,
      2722.,  2554.,  2914.,  3306.,  3730.,  5412.,  6196.,  7044.,  7956.,
      7300.,  8212.,  9188.,  10228., 9188.,  10228., 11332., 12500., 5258.,
      5810.,  6394.,  7010.,  6330.,  6946.,  7594.,  8274.,  0.,     0.,
      0.,     0.,     5818.,  6434.,  7082.,  7762.,  298.,   722.,   1178.,
      1666.,  8516.,  9684.,  10916., 12212., 2852.,  3636.,  4484.,  5396.,
      4740.,  5652.,  6628.,  7668.,  2042.,  2402.,  2794.,  3218.,  3114.,
      3538.,  3994.,  4482.,  0.,     0.,     0.,     0.,     3423.,  3931.,
      4487.,  5091.,  4519.,  5123.,  5775.,  6475.,  9878.,  11182., 12582.,
      14078., 12454., 13950., 15542., 17230., 8694.,  10126., 11654., 13278.,
      8703.,  9595.,  10535., 11523., 2823.,  3555.,  4335.,  5163.,  0.,
      0.,     0.,     0.,     1626.,  2114.,  2634.,  3186.,  1738.,  2034.,
      2362.,  2722.,  5252.,  6164.,  7140.,  8180.,  2660.,  3188.,  3780.,
      4436.,  3524.,  4180.,  4900.,  5684.,  410.,   642.,   906.,   1202.,
      970.,   1266.,  1594.,  1954.,  0.,     0.,     0.,     0.,     714.,
      1010.,  1338.,  1698.,  1018.,  1378.,  1770.,  2194.,  2852.,  3636.,
      4484.,  5396.,  3716.,  4628.,  5604.,  6644.,  4388.,  5172.,  6020.,
      6932.,  3210.,  3762.,  4346.,  4962.,  2554.,  2914.,  3306.,  3730.,
      0.,     0.,     0.,     0.,     2013.,  2321.,  2645.,  2985.,  53.,
      137.,   237.,   353.,   3266.,  3722.,  4210.,  4730.,  690.,   954.,
      1250.,  1578.,  1378.,  1706.,  2066.,  2458.,  893.,   1073.,  1269.,
      1481.,  1301.,  1513.,  1741.,  1985.,  0.,     0.,     0.,     0.,
      1173.,  1385.,  1613.,  1857.,  1453.,  1697.,  1957.,  2233.,  3442.,
      3962.,  4514.,  5098.,  4130.,  4714.,  5330.,  5978.,  2578.,  2970.,
      3394.,  3850.,  2933.,  3273.,  3629.,  4001.,  77.,    193.,   325.,
      473.,   0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     101.,   249.,   413.,   593.,   637.,   817.,   1013.,  1225.,
      1298.,  1690.,  2114.,  2570.,  2498.,  2954.,  3442.,  3962.,  3698.,
      4218.,  4770.,  5354.,  2117.,  2393.,  2685.,  2993.,  2781.,  3089.,
      3413.,  3753.,  0.,     0.,     0.,     0.,     2781.,  3089.,  3413.,
      3753.,  3317.,  3657.,  4013.,  4385.,  7298.,  8010.,  8754.,  9530.,
      4210.,  4730.,  5282.,  5866.,  5410.,  5994.,  6610.,  7258.,  125.,
      305.,   501.,   713.,   789.,   1001.,  1229.,  1473.,  0.,     0.,
      0.,     0.,     1322.,  1746.,  2202.,  2690.,  2650.,  3138.,  3658.,
      4210.,  5604.,  6644.,  7748.,  8916.,  8516.,  9684.,  10916., 12212.,
      11428., 12724., 14084., 15508., 6378.,  7058.,  7770.,  8514.,  7962.,
      8706.,  9482.,  10290., 0.,     0.,     0.,     0.,     7962.,  8706.,
      9482.,  10290., 5002.,  5554.,  6138.,  6754.,  15876., 17300., 18788.,
      20340., 7140.,  8180.,  9284.,  10452., 10052., 11220., 12452., 13748.,
      1626.,  2114.,  2634.,  3186.,  3210.,  3762.,  4346.,  4962.,  0.,
      0.,     0.,     0.,     3983.,  4555.,  5175.,  5843.,  5335.,  6003.,
      6719.,  7483.,  11510., 12942., 14470., 16094., 14598., 16222., 17942.,
      19758., 13398., 14958., 16614., 18366., 10031., 10987., 11991., 13043.,
      6455.,  7251.,  8095.,  8987.,  0.,     0.,     0.,     0.,     5818.,
      6434.,  7082.,  7762.,  298.,   722.,   1178.,  1666.,  8516.,  9684.,
      10916., 12212., 2852.,  3636.,  4484.,  5396.,  4740.,  5652.,  6628.,
      7668.,  2042.,  2402.,  2794.,  3218.,  3114.,  3538.,  3994.,  4482.,
      0.,     0.,     0.,     0.,     3370.,  3794.,  4250.,  4738.,  4186.,
      4674.,  5194.,  5746.,  9188.,  10228., 11332., 12500., 11076., 12244.,
      13476., 14772., 6628.,  7668.,  8772.,  9940.,  7402.,  8082.,  8794.,
      9538.,  1114.,  1602.,  2122.,  2674.,  0.,     0.,     0.,     0.,
      173.,   417.,   677.,   953.,   5.,     25.,    61.,    113.,   1122.,
      1450.,  1810.,  2202.,  82.,    218.,   386.,   586.,   258.,   458.,
      690.,   954.,   333.,   449.,   581.,   729.,   485.,   633.,   797.,
      977.,   0.,     0.,     0.,     0.,     101.,   249.,   413.,   593.,
      125.,   305.,   501.,   713.,   786.,   1178.,  1602.,  2058.,  962.,
      1418.,  1906.,  2426.,  946.,   1210.,  1506.,  1834.,  1093.,  1369.,
      1661.,  1969.,  29.,    81.,    149.,   233.,   0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      350.,   1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,
      3644.,  4956.,  6524.,  6490.,  8970.,  11834., 15082., 4956.,  6524.,
      8348.,  10428., 12090., 15338., 18970., 22986., 7324.,  9404.,  11740.,
      14332., 12764., 15356., 18204., 21308., 700.,   2012.,  3580.,  5404.,
      3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600., 16760., 8244.,
      12180., 16884., 22356., 14648., 18808., 23480., 28664., 15348., 20820.,
      27060., 34068., 23480., 28664., 34360., 40568., 12600., 16760., 21432.,
      26616., 380.,   1180.,  2236.,  3548.,  5816.,  8952.,  12600., 16760.,
      3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068., 7864.,
      11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600., 16760.,
      21432., 26616., 23480., 28664., 34360., 40568., 890.,   2602.,  4698.,
      7178.,  3668.,  6836.,  10772., 15476., 7700.,  12404., 17876., 24116.,
      11182., 16830., 23630., 31582., 20948., 27188., 34196., 41972., 20814.,
      28766., 37870., 48126., 34196., 41972., 50516., 59828., 19924., 26164.,
      33172., 40948., 380.,   1180.,  2236.,  3548.,  5816.,  8952.,  12600.,
      16760., 3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068.,
      7864.,  11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600.,
      16760., 21432., 26616., 23480., 28664., 34360., 40568., 890.,   2602.,
      4698.,  7178.,  3668.,  6836.,  10772., 15476., 7700.,  12404., 17876.,
      24116., 11182., 16830., 23630., 31582., 20948., 27188., 34196., 41972.,
      20814., 28766., 37870., 48126., 34196., 41972., 50516., 59828., 19924.,
      26164., 33172., 40948., 380.,   1180.,  2236.,  3548.,  5816.,  8952.,
      12600., 16760., 3128.,  5240.,  7864.,  11000., 15348., 20820., 27060.,
      34068., 7864.,  11000., 14648., 18808., 28596., 35604., 43380., 51924.,
      12600., 16760., 21432., 26616., 23480., 28664., 34360., 40568., 890.,
      2602.,  4698.,  7178.,  3668.,  6836.,  10772., 15476., 7700.,  12404.,
      17876., 24116., 11182., 16830., 23630., 31582., 20948., 27188., 34196.,
      41972., 20814., 28766., 37870., 48126., 34196., 41972., 50516., 59828.,
      19924., 26164., 33172., 40948., 380.,   1180.,  2236.,  3548.,  5816.,
      8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000., 15348., 20820.,
      27060., 34068., 7864.,  11000., 14648., 18808., 28596., 35604., 43380.,
      51924., 12600., 16760., 21432., 26616., 23480., 28664., 34360., 40568.,
      700.,   2012.,  3580.,  5404.,  3128.,  5240.,  7864.,  11000., 5816.,
      8952.,  12600., 16760., 8244.,  12180., 16884., 22356., 14648., 18808.,
      23480., 28664., 15348., 20820., 27060., 34068., 23480., 28664., 34360.,
      40568., 12600., 16760., 21432., 26616., 350.,   1006.,  1790.,  2702.,
      1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  6490.,
      8970.,  11834., 15082., 4956.,  6524.,  8348.,  10428., 12090., 15338.,
      18970., 22986., 7324.,  9404.,  11740., 14332., 12764., 15356., 18204.,
      21308., 700.,   2012.,  3580.,  5404.,  3128.,  5240.,  7864.,  11000.,
      5816.,  8952.,  12600., 16760., 8244.,  12180., 16884., 22356., 14648.,
      18808., 23480., 28664., 15348., 20820., 27060., 34068., 23480., 28664.,
      34360., 40568., 12600., 16760., 21432., 26616., 380.,   1180.,  2236.,
      3548.,  5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000.,
      15348., 20820., 27060., 34068., 7864.,  11000., 14648., 18808., 28596.,
      35604., 43380., 51924., 12600., 16760., 21432., 26616., 23480., 28664.,
      34360., 40568., 890.,   2602.,  4698.,  7178.,  3668.,  6836.,  10772.,
      15476., 7700.,  12404., 17876., 24116., 11182., 16830., 23630., 31582.,
      20948., 27188., 34196., 41972., 20814., 28766., 37870., 48126., 34196.,
      41972., 50516., 59828., 19924., 26164., 33172., 40948., 380.,   1180.,
      2236.,  3548.,  5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,
      11000., 15348., 20820., 27060., 34068., 7864.,  11000., 14648., 18808.,
      28596., 35604., 43380., 51924., 12600., 16760., 21432., 26616., 23480.,
      28664., 34360., 40568., 890.,   2602.,  4698.,  7178.,  3668.,  6836.,
      10772., 15476., 7700.,  12404., 17876., 24116., 11182., 16830., 23630.,
      31582., 20948., 27188., 34196., 41972., 20814., 28766., 37870., 48126.,
      34196., 41972., 50516., 59828., 19924., 26164., 33172., 40948., 380.,
      1180.,  2236.,  3548.,  5816.,  8952.,  12600., 16760., 3128.,  5240.,
      7864.,  11000., 15348., 20820., 27060., 34068., 7864.,  11000., 14648.,
      18808., 28596., 35604., 43380., 51924., 12600., 16760., 21432., 26616.,
      23480., 28664., 34360., 40568., 890.,   2602.,  4698.,  7178.,  3668.,
      6836.,  10772., 15476., 7700.,  12404., 17876., 24116., 11182., 16830.,
      23630., 31582., 20948., 27188., 34196., 41972., 20814., 28766., 37870.,
      48126., 34196., 41972., 50516., 59828., 19924., 26164., 33172., 40948.,
      380.,   1180.,  2236.,  3548.,  5816.,  8952.,  12600., 16760., 3128.,
      5240.,  7864.,  11000., 15348., 20820., 27060., 34068., 7864.,  11000.,
      14648., 18808., 28596., 35604., 43380., 51924., 12600., 16760., 21432.,
      26616., 23480., 28664., 34360., 40568., 700.,   2012.,  3580.,  5404.,
      3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600., 16760., 8244.,
      12180., 16884., 22356., 14648., 18808., 23480., 28664., 15348., 20820.,
      27060., 34068., 23480., 28664., 34360., 40568., 12600., 16760., 21432.,
      26616., 350.,   1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,
      2588.,  3644.,  4956.,  6524.,  6490.,  8970.,  11834., 15082., 4956.,
      6524.,  8348.,  10428., 12090., 15338., 18970., 22986., 7324.,  9404.,
      11740., 14332., 12764., 15356., 18204., 21308., 700.,   2012.,  3580.,
      5404.,  3128.,  5240.,  7864.,  11000., 5816.,  8952.,  12600., 16760.,
      8244.,  12180., 16884., 22356., 14648., 18808., 23480., 28664., 15348.,
      20820., 27060., 34068., 23480., 28664., 34360., 40568., 12600., 16760.,
      21432., 26616., 380.,   1180.,  2236.,  3548.,  5816.,  8952.,  12600.,
      16760., 3128.,  5240.,  7864.,  11000., 15348., 20820., 27060., 34068.,
      7864.,  11000., 14648., 18808., 28596., 35604., 43380., 51924., 12600.,
      16760., 21432., 26616., 23480., 28664., 34360., 40568., 890.,   2602.,
      4698.,  7178.,  3668.,  6836.,  10772., 15476., 7700.,  12404., 17876.,
      24116., 11182., 16830., 23630., 31582., 20948., 27188., 34196., 41972.,
      20814., 28766., 37870., 48126., 34196., 41972., 50516., 59828., 19924.,
      26164., 33172., 40948., 380.,   1180.,  2236.,  3548.,  5816.,  8952.,
      12600., 16760., 3128.,  5240.,  7864.,  11000., 15348., 20820., 27060.,
      34068., 7864.,  11000., 14648., 18808., 28596., 35604., 43380., 51924.,
      12600., 16760., 21432., 26616., 23480., 28664., 34360., 40568., 890.,
      2602.,  4698.,  7178.,  3668.,  6836.,  10772., 15476., 7700.,  12404.,
      17876., 24116., 11182., 16830., 23630., 31582., 20948., 27188., 34196.,
      41972., 20814., 28766., 37870., 48126., 34196., 41972., 50516., 59828.,
      19924., 26164., 33172., 40948., 380.,   1180.,  2236.,  3548.,  5816.,
      8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000., 15348., 20820.,
      27060., 34068., 7864.,  11000., 14648., 18808., 28596., 35604., 43380.,
      51924., 12600., 16760., 21432., 26616., 23480., 28664., 34360., 40568.,
      890.,   2602.,  4698.,  7178.,  3668.,  6836.,  10772., 15476., 7700.,
      12404., 17876., 24116., 11182., 16830., 23630., 31582., 20948., 27188.,
      34196., 41972., 20814., 28766., 37870., 48126., 34196., 41972., 50516.,
      59828., 19924., 26164., 33172., 40948., 380.,   1180.,  2236.,  3548.,
      5816.,  8952.,  12600., 16760., 3128.,  5240.,  7864.,  11000., 15348.,
      20820., 27060., 34068., 7864.,  11000., 14648., 18808., 28596., 35604.,
      43380., 51924., 12600., 16760., 21432., 26616., 23480., 28664., 34360.,
      40568., 700.,   2012.,  3580.,  5404.,  3128.,  5240.,  7864.,  11000.,
      5816.,  8952.,  12600., 16760., 8244.,  12180., 16884., 22356., 14648.,
      18808., 23480., 28664., 15348., 20820., 27060., 34068., 23480., 28664.,
      34360., 40568., 12600., 16760., 21432., 26616.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,
      1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,
      4956.,  6524.,  3742.,  4910.,  6206.,  7630.,  190.,   590.,   1118.,
      1774.,  0.,     0.,     0.,     0.,     190.,   590.,   1118.,  1774.,
      350.,   1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,
      3644.,  4956.,  6524.,  3932.,  5500.,  7324.,  9404.,  190.,   590.,
      1118.,  1774.,  1374.,  2030.,  2814.,  3726.,  0.,     0.,     0.,
      0.,     700.,   2012.,  3580.,  5404.,  3068.,  4892.,  6972.,  9308.,
      7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664., 7864.,
      11000., 14648., 18808., 11580., 13916., 16508., 19356., 3068.,  4892.,
      6972.,  9308.,  0.,     0.,     0.,     0.,     3068.,  4892.,  6972.,
      9308.,  4796.,  6108.,  7676.,  9500.,  14648., 18808., 23480., 28664.,
      7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664., 3068.,
      4892.,  6972.,  9308.,  7484.,  9820.,  12412., 15260., 0.,     0.,
      0.,     0.,     4826.,  6282.,  8122.,  10346., 7354.,  9578.,  12186.,
      15178., 8404.,  12596., 17556., 23284., 16532., 22260., 28756., 36020.,
      10452., 14644., 19604., 25332., 11226., 14730., 18618., 22890., 7354.,
      9578.,  12186., 15178., 0.,     0.,     0.,     0.,     7164.,  8988.,
      11068., 13404., 700.,   2012.,  3580.,  5404.,  14648., 18808., 23480.,
      28664., 7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664.,
      7164.,  8988.,  11068., 13404., 11580., 13916., 16508., 19356., 0.,
      0.,     0.,     0.,     700.,   2012.,  3580.,  5404.,  3068.,  4892.,
      6972.,  9308.,  7864.,  11000., 14648., 18808., 14648., 18808., 23480.,
      28664., 7864.,  11000., 14648., 18808., 11580., 13916., 16508., 19356.,
      3068.,  4892.,  6972.,  9308.,  0.,     0.,     0.,     0.,     510.,
      1422.,  2462.,  3630.,  30.,    174.,   446.,   846.,   3932.,  5500.,
      7324.,  9404.,  540.,   1596.,  2908.,  4476.,  1884.,  3452.,  5276.,
      7356.,  2558.,  3470.,  4510.,  5678.,  3742.,  4910.,  6206.,  7630.,
      0.,     0.,     0.,     0.,     30.,    174.,   446.,   846.,   190.,
      590.,   1118.,  1774.,  540.,   1596.,  2908.,  4476.,  1884.,  3452.,
      5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  3742.,  4910.,  6206.,
      7630.,  190.,   590.,   1118.,  1774.,  0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     350.,   1006.,  1790.,  2702.,
      2558.,  3470.,  4510.,  5678.,  5276.,  7356.,  9692.,  12284., 10716.,
      13308., 16156., 19260., 7324.,  9404.,  11740., 14332., 10206., 11886.,
      13694., 15630., 510.,   1422.,  2462.,  3630.,  0.,     0.,     0.,
      0.,     2558.,  3470.,  4510.,  5678.,  4766.,  5934.,  7230.,  8654.,
      10716., 13308., 16156., 19260., 7324.,  9404.,  11740., 14332., 12764.,
      15356., 18204., 21308., 510.,   1422.,  2462.,  3630.,  3742.,  4910.,
      6206.,  7630.,  0.,     0.,     0.,     0.,     4796.,  6108.,  7676.,
      9500.,  7164.,  8988.,  11068., 13404., 7864.,  11000., 14648., 18808.,
      14648., 18808., 23480., 28664., 7864.,  11000., 14648., 18808., 7484.,
      9820.,  12412., 15260., 7164.,  8988.,  11068., 13404., 0.,     0.,
      0.,     0.,     7164.,  8988.,  11068., 13404., 700.,   2012.,  3580.,
      5404.,  14648., 18808., 23480., 28664., 7864.,  11000., 14648., 18808.,
      14648., 18808., 23480., 28664., 7164.,  8988.,  11068., 13404., 11580.,
      13916., 16508., 19356., 0.,     0.,     0.,     0.,     1050.,  3018.,
      5370.,  8106.,  5626.,  8362.,  11482., 14986., 13140., 18356., 24340.,
      31092., 25364., 32116., 39636., 47924., 15188., 20404., 26388., 33140.,
      21786., 25802., 30202., 34986., 3578.,  6314.,  9434.,  12938., 0.,
      0.,     0.,     0.,     3068.,  4892.,  6972.,  9308.,  4796.,  6108.,
      7676.,  9500.,  14648., 18808., 23480., 28664., 7864.,  11000., 14648.,
      18808., 14648., 18808., 23480., 28664., 3068.,  4892.,  6972.,  9308.,
      7484.,  9820.,  12412., 15260., 0.,     0.,     0.,     0.,     4796.,
      6108.,  7676.,  9500.,  7164.,  8988.,  11068., 13404., 7864.,  11000.,
      14648., 18808., 14648., 18808., 23480., 28664., 7864.,  11000., 14648.,
      18808., 7484.,  9820.,  12412., 15260., 7164.,  8988.,  11068., 13404.,
      0.,     0.,     0.,     0.,     6974.,  8398.,  9950.,  11630., 350.,
      1006.,  1790.,  2702.,  12764., 15356., 18204., 21308., 5276.,  7356.,
      9692.,  12284., 10716., 13308., 16156., 19260., 6974.,  8398.,  9950.,
      11630., 10206., 11886., 13694., 15630., 0.,     0.,     0.,     0.,
      350.,   1006.,  1790.,  2702.,  2558.,  3470.,  4510.,  5678.,  5276.,
      7356.,  9692.,  12284., 10716., 13308., 16156., 19260., 7324.,  9404.,
      11740., 14332., 10206., 11886., 13694., 15630., 510.,   1422.,  2462.,
      3630.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,
      540.,   1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2588.,
      3644.,  4956.,  6524.,  3742.,  4910.,  6206.,  7630.,  190.,   590.,
      1118.,  1774.,  0.,     0.,     0.,     0.,     190.,   590.,   1118.,
      1774.,  350.,   1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,
      2588.,  3644.,  4956.,  6524.,  3932.,  5500.,  7324.,  9404.,  190.,
      590.,   1118.,  1774.,  1374.,  2030.,  2814.,  3726.,  0.,     0.,
      0.,     0.,     700.,   2012.,  3580.,  5404.,  3068.,  4892.,  6972.,
      9308.,  7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664.,
      7864.,  11000., 14648., 18808., 11580., 13916., 16508., 19356., 3068.,
      4892.,  6972.,  9308.,  0.,     0.,     0.,     0.,     3068.,  4892.,
      6972.,  9308.,  4796.,  6108.,  7676.,  9500.,  14648., 18808., 23480.,
      28664., 7864.,  11000., 14648., 18808., 14648., 18808., 23480., 28664.,
      3068.,  4892.,  6972.,  9308.,  7484.,  9820.,  12412., 15260., 0.,
      0.,     0.,     0.,     4826.,  6282.,  8122.,  10346., 7354.,  9578.,
      12186., 15178., 8404.,  12596., 17556., 23284., 16532., 22260., 28756.,
      36020., 10452., 14644., 19604., 25332., 11226., 14730., 18618., 22890.,
      7354.,  9578.,  12186., 15178., 0.,     0.,     0.,     0.,     7164.,
      8988.,  11068., 13404., 700.,   2012.,  3580.,  5404.,  14648., 18808.,
      23480., 28664., 7864.,  11000., 14648., 18808., 14648., 18808., 23480.,
      28664., 7164.,  8988.,  11068., 13404., 11580., 13916., 16508., 19356.,
      0.,     0.,     0.,     0.,     700.,   2012.,  3580.,  5404.,  3068.,
      4892.,  6972.,  9308.,  7864.,  11000., 14648., 18808., 14648., 18808.,
      23480., 28664., 7864.,  11000., 14648., 18808., 11580., 13916., 16508.,
      19356., 3068.,  4892.,  6972.,  9308.,  0.,     0.,     0.,     0.,
      510.,   1422.,  2462.,  3630.,  30.,    174.,   446.,   846.,   3932.,
      5500.,  7324.,  9404.,  540.,   1596.,  2908.,  4476.,  1884.,  3452.,
      5276.,  7356.,  2558.,  3470.,  4510.,  5678.,  3742.,  4910.,  6206.,
      7630.,  0.,     0.,     0.,     0.,     30.,    174.,   446.,   846.,
      190.,   590.,   1118.,  1774.,  540.,   1596.,  2908.,  4476.,  1884.,
      3452.,  5276.,  7356.,  2588.,  3644.,  4956.,  6524.,  3742.,  4910.,
      6206.,  7630.,  190.,   590.,   1118.,  1774.,  0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,    20.,   23.,   44.,   39.,   68.,   55.,   92.,   71.,   80.,
      24.,   60.,   76.,   133.,  108.,  181.,  140.,  229.,  172.,  200.,
      59.,   140.,  156.,  268.,  208.,  346.,  260.,  424.,  312.,  340.,
      116.,  265.,  304.,  507.,  382.,  624.,  460.,  741.,  538.,  595.,
      179.,  380.,  416.,  658.,  468.,  736.,  520.,  814.,  572.,  620.,
      296.,  625.,  694.,  1092., 772.,  1209., 850.,  1326., 928.,  1015.,
      299.,  620.,  676.,  1048., 728.,  1126., 780.,  1204., 832.,  900.,
      476.,  985.,  1084., 1677., 1162., 1794., 1240., 1911., 1318., 1435.,
      419.,  860.,  936.,  1438., 988.,  1516., 1040., 1594., 1092., 1180.,
      604.,  1240., 1316., 2023., 1388., 2131., 1460., 2239., 1532., 1620.,
      182.,  370.,  423.,  644.,  439.,  668.,  455.,  692.,  471.,  530.,
      374.,  760.,  876.,  1333., 908.,  1381., 940.,  1429., 972.,  1100.,
      659.,  1340., 1456., 2218., 1508., 2296., 1560., 2374., 1612., 1740.,
      1016., 2065., 2254., 3432., 2332., 3549., 2410., 3666., 2488., 2695.,
      779.,  1580., 1716., 2608., 1768., 2686., 1820., 2764., 1872., 2020.,
      1196., 2425., 2644., 4017., 2722., 4134., 2800., 4251., 2878., 3115.,
      899.,  1820., 1976., 2998., 2028., 3076., 2080., 3154., 2132., 2300.,
      1376., 2785., 3034., 4602., 3112., 4719., 3190., 4836., 3268., 3535.,
      1019., 2060., 2236., 3388., 2288., 3466., 2340., 3544., 2392., 2580.,
      1454., 2940., 3116., 4723., 3188., 4831., 3260., 4939., 3332., 3520.,
      357.,  720.,  823.,  1244., 839.,  1268., 855.,  1292., 871.,  980.,
      724.,  1460., 1676., 2533., 1708., 2581., 1740., 2629., 1772., 2000.,
      1259., 2540., 2756., 4168., 2808., 4246., 2860., 4324., 2912., 3140.,
      1916., 3865., 4204., 6357., 4282., 6474., 4360., 6591., 4438., 4795.,
      1379., 2780., 3016., 4558., 3068., 4636., 3120., 4714., 3172., 3420.,
      2096., 4225., 4594., 6942., 4672., 7059., 4750., 7176., 4828., 5215.,
      1499., 3020., 3276., 4948., 3328., 5026., 3380., 5104., 3432., 3700.,
      2276., 4585., 4984., 7527., 5062., 7644., 5140., 7761., 5218., 5635.,
      1619., 3260., 3536., 5338., 3588., 5416., 3640., 5494., 3692., 3980.,
      2304., 4640., 4916., 7423., 4988., 7531., 5060., 7639., 5132., 5420.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,    8.,    14.,   14.,   19.,   12.,  15.,   0.,
      6.,   7.,   20.,   23.,   44.,   39.,   44.,   27.,  30.,   0.,
      15.,  20.,  52.,   64.,   115.,  96.,   112.,  66.,  75.,   0.,
      40.,  45.,  112.,  124.,  220.,  176.,  192.,  111., 120.,  0.,
      72.,  84.,  201.,  228.,  393.,  306.,  339.,  192., 210.,  0.,
      106., 117., 256.,  280.,  454.,  332.,  360.,  195., 210.,  0.,
      161., 172., 376.,  400.,  649.,  472.,  500.,  270., 285.,  0.,
      112., 119., 254.,  269.,  428.,  305.,  322.,  171., 180.,  0.,
      147., 154., 329.,  344.,  548.,  390.,  407.,  216., 225.,  0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,   0.,    0.,
      10.,  20.,  41.,   62.,   95.,   68.,   91.,   48.,  60.,   0.,
      60.,  70.,  146.,  167.,  260.,  183.,  206.,  108., 120.,  0.,
      123., 146., 304.,  352.,  547.,  384.,  436.,  228., 255.,  0.,
      238., 261., 544.,  592.,  922.,  644.,  696.,  363., 390.,  0.,
      369., 408., 849.,  930.,  1446., 1008., 1095., 570., 615.,  0.,
      304., 333., 688.,  748.,  1156., 800.,  864.,  447., 480.,  0.,
      449., 478., 988.,  1048., 1621., 1120., 1184., 612., 645.,  0.,
      256., 272., 560.,  593.,  914.,  629.,  664.,  342., 360.,  0.,
      336., 352., 725.,  758.,  1169., 804.,  839.,  432., 450.,  0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,   0.,    0.,
      19.,  38.,  77.,   116.,  176.,  122.,  163.,  84.,  105.,  0.,
      114., 133., 272.,  311.,  476.,  327.,  368.,  189., 210.,  0.,
      231., 272., 556.,  640.,  979.,  672.,  760.,  390., 435.,  0.,
      436., 477., 976.,  1060., 1624., 1112., 1200., 615., 660.,  0.,
      666., 732., 1497., 1632., 2499., 1710., 1851., 948., 1020., 0.,
      502., 549., 1120., 1216., 1858., 1268., 1368., 699., 750.,  0.,
      737., 784., 1600., 1696., 2593., 1768., 1868., 954., 1005., 0.,
      400., 425., 866.,  917.,  1400., 953.,  1006., 513., 540.,  0.,
      525., 550., 1121., 1172., 1790., 1218., 1271., 648., 675.,  0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,   0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,    128.,   148.,   295.,   272.,   481.,   396.,   667.,   520.,
      588.,   152.,   396.,   516.,   920.,   764.,   1292.,  1012.,  1664.,
      1260.,  1476.,  412.,   996.,   1116.,  1940.,  1524.,  2552.,  1932.,
      3164.,  2340.,  2556.,  823.,   1904.,  2204.,  3705.,  2816.,  4623.,
      3428.,  5541.,  4040.,  4484.,  1352.,  2876.,  3156.,  5000.,  3564.,
      5612.,  3972.,  6224.,  4380.,  4756.,  2233.,  4724.,  5264.,  8295.,
      5876.,  9213.,  6488.,  10131., 7100.,  7784.,  2292.,  4756.,  5196.,
      8060.,  5604.,  8672.,  6012.,  9284.,  6420.,  6956.,  3643.,  7544.,
      8324.,  12885., 8936.,  13803., 9548.,  14721., 10160., 11084., 3232.,
      6636.,  7236.,  11120., 7644.,  11732., 8052.,  12344., 8460.,  9156.,
      4692.,  9636.,  10236., 15740., 10804., 16592., 11372., 17444., 11940.,
      12636., 1391.,  2828.,  3248.,  4945.,  3372.,  5131.,  3496.,  5317.,
      3620.,  4088.,  2852.,  5796.,  6716.,  10220., 6964.,  10592., 7212.,
      10964., 7460.,  8476.,  5112.,  10396., 11316., 17240., 11724., 17852.,
      12132., 18464., 12540., 13556., 7873.,  16004., 17504., 26655., 18116.,
      27573., 18728., 28491., 19340., 20984., 6052.,  12276., 13356., 20300.,
      13764., 20912., 14172., 21524., 14580., 15756., 9283.,  18824., 20564.,
      31245., 21176., 32163., 21788., 33081., 22400., 24284., 6992.,  14156.,
      15396., 23360., 15804., 23972., 16212., 24584., 16620., 17956., 10693.,
      21644., 23624., 35835., 24236., 36753., 24848., 37671., 25460., 27584.,
      7932.,  16036., 17436., 26420., 17844., 27032., 18252., 27644., 18660.,
      20156., 11392., 23036., 24436., 37040., 25004., 37892., 25572., 38744.,
      26140., 27636., 2741.,  5528.,  6348.,  9595.,  6472.,  9781.,  6596.,
      9967.,  6720.,  7588.,  5552.,  11196., 12916., 19520., 13164., 19892.,
      13412., 20264., 13660., 15476., 9812.,  19796., 21516., 32540., 21924.,
      33152., 22332., 33764., 22740., 24556., 14923., 30104., 32804., 49605.,
      33416., 50523., 34028., 51441., 34640., 37484., 10752., 21676., 23556.,
      35600., 23964., 36212., 24372., 36824., 24780., 26756., 16333., 32924.,
      35864., 54195., 36476., 55113., 37088., 56031., 37700., 40784., 11692.,
      23556., 25596., 38660., 26004., 39272., 26412., 39884., 26820., 28956.,
      17743., 35744., 38924., 58785., 39536., 59703., 40148., 60621., 40760.,
      44084., 12632., 25436., 27636., 41720., 28044., 42332., 28452., 42944.,
      28860., 31156., 18092., 36436., 38636., 58340., 39204., 59192., 39772.,
      60044., 40340., 42636.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,    48.,    85.,    92.,    128.,   83.,   105.,  0.,
      35.,   41.,   128.,   148.,   295.,   272.,   308.,   193.,  215.,  0.,
      88.,   124.,  340.,   428.,   788.,   676.,   796.,   476.,  544.,  0.,
      268.,  304.,  780.,   868.,   1568.,  1276.,  1396.,  816.,  884.,  0.,
      489.,  579.,  1416.,  1620.,  2829.,  2232.,  2484.,  1419., 1557., 0.,
      784.,  868.,  1908.,  2092.,  3404.,  2500.,  2716.,  1476., 1592., 0.,
      1204., 1288., 2828.,  3012.,  4904.,  3580.,  3796.,  2056., 2172., 0.,
      851.,  905.,  1936.,  2052.,  3271.,  2336.,  2468.,  1313., 1383., 0.,
      1121., 1175., 2516.,  2632.,  4201.,  2996.,  3128.,  1663., 1733., 0.,
      0.,    0.,    0.,     0.,     0.,     0.,     0.,     0.,    0.,    0.,
      59.,   137.,  280.,   444.,   679.,   488.,   668.,   353.,  447.,  0.,
      449.,  527.,  1100.,  1264.,  1969.,  1388.,  1568.,  823.,  917.,  0.,
      916.,  1096., 2284.,  2660.,  4136.,  2908.,  3316.,  1736., 1948., 0.,
      1816., 1996., 4164.,  4540.,  7076.,  4948.,  5356.,  2796., 3008., 0.,
      2811., 3117., 6492.,  7128.,  11091., 7740.,  8424.,  4389., 4743., 0.,
      2332., 2560., 5292.,  5764.,  8912.,  6172.,  6676.,  3456., 3716., 0.,
      3472., 3700., 7652.,  8124.,  12572., 8692.,  9196.,  4756., 5016., 0.,
      1985., 2111., 4348.,  4608.,  7105.,  4892.,  5168.,  2663., 2805., 0.,
      2615., 2741., 5648.,  5908.,  9115.,  6272.,  6548.,  3373., 3515., 0.,
      0.,    0.,    0.,     0.,     0.,     0.,     0.,     0.,    0.,    0.,
      113.,  263.,  532.,   840.,   1273.,  884.,   1208.,  623.,  789.,  0.,
      863.,  1013., 2072.,  2380.,  3643.,  2504.,  2828.,  1453., 1619., 0.,
      1744., 2068., 4228.,  4892.,  7484.,  5140.,  5836.,  2996., 3352., 0.,
      3364., 3688., 7548.,  8212.,  12584., 8620.,  9316.,  4776., 5132., 0.,
      5133., 5655., 11568., 12636., 19353., 13248., 14364., 7359., 7929., 0.,
      3880., 4252., 8676.,  9436.,  14420., 9844.,  10636., 5436., 5840., 0.,
      5740., 6112., 12476., 13236., 20240., 13804., 14596., 7456., 7860., 0.,
      3119., 3317., 6760.,  7164.,  10939., 7448.,  7868.,  4013., 4227., 0.,
      4109., 4307., 8780.,  9184.,  14029., 9548.,  9968.,  5083., 5297., 0.,
      0.,    0.,    0.,     0.,     0.,     0.,     0.,     0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,   900.,   1044.,  2138.,  2020.,  3602.,  2996.,  5066.,  3972.,
      4500.,  1060.,  2840.,  3768.,  6796.,  5720.,  9724.,  7672.,  12652.,
      9624.,  11320., 2420.,  6840.,  6104.,  12412., 7288.,  15212., 8472.,
      18012., 9656.,  11352., 5530.,  12076., 14428., 23262., 17228., 27462.,
      20028., 31662., 22828., 26332., 4740.,  16600., 12024., 26412., 13208.,
      29212., 14392., 32012., 15576., 18552., 11570., 23516., 26764., 40934.,
      25852., 40398., 28652., 44598., 31452., 34828., 7060.,  20600., 11160.,
      26844., 3512.,  19788., 4696.,  22588., 5880.,  8088.,  15946., 22028.,
      25148., 33390., 13996., 22614., 16796., 26814., 19596., 22844., 2596.,
      6552.,  7608.,  13324., 6104.,  12412., 7288.,  15212., 8472.,  9912.,
      9076.,  14392., 16088., 22780., 10744., 17644., 13208., 21340., 15672.,
      17112., 4086.,  8532.,  9828.,  15314., 10804., 16778., 11780., 18242.,
      12756., 14436., 8692.,  18104., 21336., 32508., 21624., 32748., 19864.,
      30940., 21816., 23768., 6596.,  24408., 16760., 31852., 11160., 26844.,
      3512.,  19788., 4696.,  6648.,  14738., 30492., 34252., 42118., 25148.,
      33390., 13996., 22614., 16796., 19660., 2132.,  20600., 7064.,  12188.,
      7608.,  13324., 6104.,  12412., 7288.,  8472.,  8874.,  18764., 22396.,
      30478., 19436., 27894., 14428., 23262., 17228., 19964., 3812.,  12696.,
      9656.,  20812., 10840., 23612., 12024., 26412., 13208., 15672., 9154.,
      19324., 22828., 35862., 25628., 39422., 26764., 40934., 25852., 28460.,
      6132.,  22456., 15576., 34812., 16760., 31852., 11160., 26844., 3512.,
      5208.,  13252., 27480., 30456., 47212., 32920., 40028., 23480., 30796.,
      11992., 13688., 1118.,  2596.,  2996.,  5066.,  3972.,  6530.,  4948.,
      7994.,  5924.,  6708.,  2756.,  6232.,  7672.,  12652., 9624.,  15580.,
      11576., 18508., 13528., 15736., 3348.,  10744., 8472.,  18012., 9656.,
      20812., 10840., 23612., 12024., 14232., 7946.,  16908., 20028., 31662.,
      22828., 35862., 25628., 39422., 26764., 30012., 5668.,  20504., 14392.,
      32012., 15576., 34812., 16760., 31852., 11160., 13624., 12322., 25660.,
      28652., 44598., 31452., 48798., 34252., 42118., 25148., 28268., 1204.,
      16696., 4696.,  22588., 5880.,  25388., 7064.,  12188., 7608.,  9304.,
      6458.,  13932., 16796., 26814., 19596., 31014., 22396., 30478., 19436.,
      22428., 2884.,  8792.,  7288.,  15212., 8472.,  18012., 9656.,  20812.,
      10840., 12792., 5524.,  12024., 13208., 21340., 15672., 25036., 18136.,
      28732., 20600., 22552.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   578.,   660.,   932.,   614.,   782.,
      0.,     230.,   270.,   900.,   1044.,  2138.,  2020.,  2292.,  1454.,
      1622.,  0.,     580.,   852.,   2424.,  3096.,  5788.,  5048.,  5976.,
      3604.,  4132.,  0.,     1940.,  1572.,  5144.,  4152.,  9484.,  5336.,
      6264.,  3556.,  4084.,  0.,     2930.,  3626.,  8268.,  9852.,  16398.,
      12652., 14620., 8202.,  9282.,  0.,     6020.,  2964.,  11000., 7704.,
      17884., 8888.,  10584., 5716.,  6628.,  0.,     5588.,  6244.,  13464.,
      14904., 23884., 17368., 19064., 10276., 11188., 0.,     6630.,  270.,
      8324.,  1428.,  10970., 1636.,  2676.,  1454.,  2006.,  0.,     1966.,
      2390.,  5076.,  5988.,  9458.,  6836.,  7876.,  4214.,  4766.,  0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     390.,   1006.,  2052.,  3348.,  5114.,  3684.,  5108.,  2702.,
      3446.,  0.,     3470.,  4086.,  8532.,  9828.,  15314., 10804., 12228.,
      6422.,  7166.,  0.,     7060.,  8484.,  17688., 20664., 32140., 22616.,
      25848., 13540., 15220., 0.,     14180., 5748.,  22712., 14808., 34684.,
      15992., 19224., 10036., 11716., 0.,     12074., 14498., 29372., 33388.,
      50870., 32476., 35852., 18818., 20602., 0.,     18260., 7140.,  22808.,
      11576., 29516., 3928.,  5880.,  3364.,  4404.,  0.,     14372., 16180.,
      22456., 25176., 33340., 13688., 15640., 8564.,  9604.,  0.,     15630.,
      630.,   2260.,  2660.,  5330.,  180.,   324.,   278.,   382.,   0.,
      4630.,  5630.,  6820.,  7860.,  9386.,  900.,   1044.,  798.,   902.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     110.,   278.,   596.,   996.,   1586.,  1332.,  1860.,
      1078.,  1374.,  0.,     950.,   1118.,  2596.,  2996.,  5066.,  3972.,
      4500.,  2558.,  2854.,  0.,     2020.,  2548.,  5816.,  7000.,  11644.,
      8952.,  10392., 5812.,  6596.,  0.,     4660.,  2500.,  9048.,  6520.,
      15084., 7704.,  9144.,  4996.,  5780.,  0.,     4962.,  6042.,  13100.,
      15452., 24798., 18252., 20988., 11386., 12850., 0.,     8740.,  3892.,
      14904., 10072., 23484., 11256., 13464., 7156.,  8324.,  0.,     7540.,
      8452.,  17880., 19832., 31276., 22296., 24504., 12996., 14164., 0.,
      8630.,  350.,   10532., 1844.,  13642., 2052.,  3348.,  1790.,  2470.,
      0.,     2558.,  3110.,  6516.,  7684.,  12002., 8532.,  9828.,  5190.,
      5870.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,    28.,    48.,    80.,    56.,    92.,    119.,   176.,   116.,
      156.,   209.,   272.,   176.,   220.,   299.,   368.,   236.,   284.,
      268.,   320.,   56.,    96.,    156.,   240.,   212.,   304.,   388.,
      532.,   332.,   432.,   568.,   724.,   452.,   560.,   748.,   916.,
      572.,   688.,   676.,   800.,   176.,   236.,   436.,   560.,   492.,
      624.,   868.,   1072.,  692.,   832.,   1168.,  1384.,  892.,   1040.,
      1468.,  1696.,  1092.,  1248.,  1196.,  1360.,  359.,   464.,   844.,
      1060.,  988.,   1216.,  1677.,  2028.,  1288.,  1528.,  2127.,  2496.,
      1588.,  1840.,  2577.,  2964.,  1888.,  2152.,  2104.,  2380.,  636.,
      716.,   1356.,  1520.,  1492.,  1664.,  2368.,  2632.,  1692.,  1872.,
      2668.,  2944.,  1892.,  2080.,  2968.,  3256.,  2092.,  2288.,  2276.,
      2480.,  1049.,  1184.,  2224.,  2500.,  2488.,  2776.,  3927.,  4368.,
      2788.,  3088.,  4377.,  4836.,  3088.,  3400.,  4827.,  5304.,  3388.,
      3712.,  3724.,  4060.,  1096.,  1196.,  2276.,  2480.,  2492.,  2704.,
      3868.,  4192.,  2692.,  2912.,  4168.,  4504.,  2892.,  3120.,  4468.,
      4816.,  3092.,  3328.,  3356.,  3600.,  1739.,  1904.,  3604.,  3940.,
      3988.,  4336.,  6177.,  6708.,  4288.,  4648.,  6627.,  7176.,  4588.,
      4960.,  7077.,  7644.,  4888.,  5272.,  5344.,  5740.,  1556.,  1676.,
      3196.,  3440.,  3492.,  3744.,  5368.,  5752.,  3692.,  3952.,  5668.,
      6064.,  3892.,  4160.,  5968.,  6376.,  4092.,  4368.,  4436.,  4720.,
      2276.,  2416.,  4676.,  4960.,  4972.,  5264.,  7648.,  8092.,  5252.,
      5552.,  8068.,  8524.,  5532.,  5840.,  8488.,  8956.,  5812.,  6128.,
      6156.,  6480.,  663.,   728.,   1348.,  1480.,  1556.,  1692.,  2369.,
      2576.,  1616.,  1756.,  2459.,  2672.,  1676.,  1820.,  2549.,  2768.,
      1736.,  1884.,  1968.,  2120.,  1356.,  1496.,  2756.,  3040.,  3212.,
      3504.,  4888.,  5332.,  3332.,  3632.,  5068.,  5524.,  3452.,  3760.,
      5248.,  5716.,  3572.,  3888.,  4076.,  4400.,  2476.,  2636.,  5036.,
      5360.,  5492.,  5824.,  8368.,  8872.,  5692.,  6032.,  8668.,  9184.,
      5892.,  6240.,  8968.,  9496.,  6092.,  6448.,  6596.,  6960.,  3809.,
      4064.,  7744.,  8260.,  8488.,  9016.,  12927., 13728., 8788.,  9328.,
      13377., 14196., 9088.,  9640.,  13827., 14664., 9388.,  9952.,  10204.,
      10780., 2936.,  3116.,  5956.,  6320.,  6492.,  6864.,  9868.,  10432.,
      6692.,  7072.,  10168., 10744., 6892.,  7280.,  10468., 11056., 7092.,
      7488.,  7676.,  8080.,  4499.,  4784.,  9124.,  9700.,  9988.,  10576.,
      15177., 16068., 10288., 10888., 15627., 16536., 10588., 11200., 16077.,
      17004., 10888., 11512., 11824., 12460., 3396.,  3596.,  6876.,  7280.,
      7492.,  7904.,  11368., 11992., 7692.,  8112.,  11668., 12304., 7892.,
      8320.,  11968., 12616., 8092.,  8528.,  8756.,  9200.,  5189.,  5504.,
      10504., 11140., 11488., 12136., 17427., 18408., 11788., 12448., 17877.,
      18876., 12088., 12760., 18327., 19344., 12388., 13072., 13444., 14140.,
      3856.,  4076.,  7796.,  8240.,  8492.,  8944.,  12868., 13552., 8692.,
      9152.,  13168., 13864., 8892.,  9360.,  13468., 14176., 9092.,  9568.,
      9836.,  10320., 5576.,  5816.,  11276., 11760., 11972., 12464., 18148.,
      18892., 12252., 12752., 18568., 19324., 12532., 13040., 18988., 19756.,
      12812., 13328., 13556., 14080., 1313.,  1428.,  2648.,  2880.,  3056.,
      3292.,  4619.,  4976.,  3116.,  3356.,  4709.,  5072.,  3176.,  3420.,
      4799.,  5168.,  3236.,  3484.,  3668.,  3920.,  2656.,  2896.,  5356.,
      5840.,  6212.,  6704.,  9388.,  10132., 6332.,  6832.,  9568.,  10324.,
      6452.,  6960.,  9748.,  10516., 6572.,  7088.,  7476.,  8000.,  4776.,
      5036.,  9636.,  10160., 10492., 11024., 15868., 16672., 10692., 11232.,
      16168., 16984., 10892., 11440., 16468., 17296., 11092., 11648., 11996.,
      12560., 7259.,  7664.,  14644., 15460., 15988., 16816., 24177., 25428.,
      16288., 17128., 24627., 25896., 16588., 17440., 25077., 26364., 16888.,
      17752., 18304., 19180., 5236.,  5516.,  10556., 11120., 11492., 12064.,
      17368., 18232., 11692., 12272., 17668., 18544., 11892., 12480., 17968.,
      18856., 12092., 12688., 13076., 13680., 7949.,  8384.,  16024., 16900.,
      17488., 18376., 26427., 27768., 17788., 18688., 26877., 28236., 18088.,
      19000., 27327., 28704., 18388., 19312., 19924., 20860., 5696.,  5996.,
      11476., 12080., 12492., 13104., 18868., 19792., 12692., 13312., 19168.,
      20104., 12892., 13520., 19468., 20416., 13092., 13728., 14156., 14800.,
      8639.,  9104.,  17404., 18340., 18988., 19936., 28677., 30108., 19288.,
      20248., 29127., 30576., 19588., 20560., 29577., 31044., 19888., 20872.,
      21544., 22540., 6156.,  6476.,  12396., 13040., 13492., 14144., 20368.,
      21352., 13692., 14352., 20668., 21664., 13892., 14560., 20968., 21976.,
      14092., 14768., 15236., 15920., 8876.,  9216.,  17876., 18560., 18972.,
      19664., 28648., 29692., 19252., 19952., 29068., 30124., 19532., 20240.,
      29488., 30556., 19812., 20528., 20956., 21680.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,   32.,   29.,   56.,
      36.,   56.,   52.,   76.,   35.,   48.,   45.,   60.,   0.,    0.,
      11.,   24.,   13.,   28.,   48.,   80.,   56.,   92.,   119.,  176.,
      116.,  156.,  132.,  176.,  85.,   108.,  95.,   120.,  0.,    0.,
      28.,   60.,   44.,   80.,   132.,  208.,  172.,  256.,  328.,  460.,
      292.,  384.,  348.,  448.,  212.,  264.,  244.,  300.,  0.,    0.,
      108.,  160.,  124.,  180.,  332.,  448.,  372.,  496.,  688.,  880.,
      572.,  704.,  628.,  768.,  372.,  444.,  404.,  480.,  0.,    0.,
      201.,  288.,  243.,  336.,  612.,  804.,  708.,  912.,  1257., 1572.,
      1008., 1224., 1128., 1356., 651.,  768.,  717.,  840.,  0.,    0.,
      360.,  424.,  400.,  468.,  884.,  1024., 972.,  1120., 1588., 1816.,
      1172., 1328., 1276., 1440., 696.,  780.,  752.,  840.,  0.,    0.,
      560.,  644.,  600.,  688.,  1324., 1504., 1412., 1600., 2308., 2596.,
      1692., 1888., 1796., 2000., 976.,  1080., 1032., 1140., 0.,    0.,
      403.,  448.,  429.,  476.,  920.,  1016., 976.,  1076., 1559., 1712.,
      1116., 1220., 1180., 1288., 629.,  684.,  663.,  720.,  0.,    0.,
      533.,  588.,  559.,  616.,  1200., 1316., 1256., 1376., 2009., 2192.,
      1436., 1560., 1500., 1628., 799.,  864.,  833.,  900.,  0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      19.,   40.,   57.,   80.,   116.,  164.,  196.,  248.,  299.,  380.,
      216.,  272.,  304.,  364.,  161.,  192.,  207.,  240.,  0.,    0.,
      209.,  240.,  247.,  280.,  516.,  584.,  596.,  668.,  929.,  1040.,
      656.,  732.,  744.,  824.,  391.,  432.,  437.,  480.,  0.,    0.,
      424.,  492.,  512.,  584.,  1068., 1216., 1252., 1408., 1948., 2188.,
      1372., 1536., 1572., 1744., 824.,  912.,  928.,  1020., 0.,    0.,
      864.,  952.,  952.,  1044., 1988., 2176., 2172., 2368., 3388., 3688.,
      2372., 2576., 2572., 2784., 1344., 1452., 1448., 1560., 0.,    0.,
      1335., 1476., 1485., 1632., 3096., 3396., 3408., 3720., 5307., 5784.,
      3708., 4032., 4044., 4380., 2109., 2280., 2283., 2460., 0.,    0.,
      1116., 1216., 1228., 1332., 2540., 2752., 2772., 2992., 4288., 4624.,
      2972., 3200., 3220., 3456., 1668., 1788., 1796., 1920., 0.,    0.,
      1676., 1796., 1788., 1912., 3700., 3952., 3932., 4192., 6088., 6484.,
      4212., 4480., 4460., 4736., 2308., 2448., 2436., 2580., 0.,    0.,
      961.,  1024., 1023., 1088., 2108., 2240., 2236., 2372., 3449., 3656.,
      2376., 2516., 2512., 2656., 1295., 1368., 1365., 1440., 0.,    0.,
      1271., 1344., 1333., 1408., 2748., 2900., 2876., 3032., 4439., 4676.,
      3056., 3216., 3192., 3356., 1645., 1728., 1715., 1800., 0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      37.,   76.,   111.,  152.,  224.,  308.,  376.,  464.,  569.,  704.,
      396.,  488.,  556.,  652.,  287.,  336.,  369.,  420.,  0.,    0.,
      407.,  456.,  481.,  532.,  984.,  1088., 1136., 1244., 1739., 1904.,
      1196., 1308., 1356., 1472., 697.,  756.,  779.,  840.,  0.,    0.,
      820.,  924.,  980.,  1088., 2004., 2224., 2332., 2560., 3568., 3916.,
      2452., 2688., 2796., 3040., 1436., 1560., 1612., 1740., 0.,    0.,
      1620., 1744., 1780., 1908., 3644., 3904., 3972., 4240., 6088., 6496.,
      4172., 4448., 4516., 4800., 2316., 2460., 2492., 2640., 0.,    0.,
      2469., 2664., 2727., 2928., 5580., 5988., 6108., 6528., 9357., 9996.,
      6408., 6840., 6960., 7404., 3567., 3792., 3849., 4080., 0.,    0.,
      1872., 2008., 2056., 2196., 4196., 4480., 4572., 4864., 6988., 7432.,
      4772., 5072., 5164., 5472., 2640., 2796., 2840., 3000., 0.,    0.,
      2792., 2948., 2976., 3136., 6076., 6400., 6452., 6784., 9868., 10372.,
      6732., 7072., 7124., 7472., 3640., 3816., 3840., 4020., 0.,    0.,
      1519., 1600., 1617., 1700., 3296., 3464., 3496., 3668., 5339., 5600.,
      3636., 3812., 3844., 4024., 1961., 2052., 2067., 2160., 0.,    0.,
      2009., 2100., 2107., 2200., 4296., 4484., 4496., 4688., 6869., 7160.,
      4676., 4872., 4884., 5084., 2491., 2592., 2597., 2700., 0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    193.,   326.,   574.,   382.,   662.,   847.,   1291.,  854.,
      1166.,  1555.,  2047.,  1326.,  1670.,  2263.,  2803.,  1798.,  2174.,
      2046.,  2454.,  374.,   686.,   1092.,  1748.,  1524.,  2244.,  2834.,
      3962.,  2468.,  3252.,  4250.,  5474.,  3412.,  4260.,  5666.,  6986.,
      4356.,  5268.,  5172.,  6148.,  1102.,  1318.,  3060.,  3780.,  2788.,
      3316.,  5658.,  6754.,  3348.,  3940.,  7010.,  8202.,  3908.,  4564.,
      8362.,  9650.,  4468.,  5188.,  5284.,  6068.,  2479.,  3051.,  5442.,
      6634.,  6570.,  7858.,  10629., 12633., 7922.,  9306.,  12657., 14805.,
      9274.,  10754., 14685., 16977., 10626., 12202., 12330., 14002., 2182.,
      2558.,  7780.,  8820.,  5588.,  6436.,  12418., 13994., 6148.,  7060.,
      13770., 15442., 6708.,  7684.,  15122., 16890., 7268.,  8308.,  8724.,
      9828.,  5379.,  6191.,  11050., 12466., 12626., 14138., 19361., 21573.,
      12250., 13602., 19149., 21249., 13602., 15050., 21177., 23421., 14954.,
      16498., 16594., 18234., 3262.,  3798.,  9748.,  10852., 5124.,  6036.,
      12650., 14194., 1396.,  2116.,  9202.,  10586., 1956.,  2740.,  10554.,
      12034., 2516.,  3364.,  3588.,  4500.,  7575.,  8371.,  10322., 11706.,
      11834., 13314., 15613., 17777., 6338.,  7658.,  10281., 12333., 7690.,
      9106.,  12309., 14505., 9042.,  10554., 10618., 12226., 1078.,  1518.,
      2820.,  3732.,  3444.,  4164.,  6034.,  7290.,  2788.,  3316.,  5658.,
      6754.,  3348.,  3940.,  7010.,  8202.,  3908.,  4564.,  4596.,  5316.,
      4238.,  4838.,  6708.,  7684.,  7524.,  8564.,  10650., 12130., 4948.,
      5796.,  8162.,  9482.,  6148.,  7060.,  9962.,  11378., 7348.,  8324.,
      8036.,  9076.,  1913.,  2173.,  3998.,  4534.,  4630.,  5198.,  7219.,
      8095.,  5102.,  5702.,  7927.,  8851.,  5574.,  6206.,  8635.,  9607.,
      6046.,  6710.,  6870.,  7566.,  4046.,  4646.,  8436.,  9668.,  10020.,
      11316., 15386., 17122., 10260., 11364., 15586., 17162., 9476.,  10388.,
      14762., 16178., 10420., 11396., 11364., 12404., 3046.,  3550.,  11556.,
      12852., 7828.,  8932.,  15074., 16778., 5124.,  6036.,  12650., 14194.,
      1396.,  2116.,  9202.,  10586., 1956.,  2740.,  2900.,  3748.,  6995.,
      7743.,  14474., 16018., 16306., 17946., 19921., 22197., 11834., 13314.,
      15613., 17777., 6338.,  7658.,  10281., 12333., 7690.,  9106.,  9074.,
      10586., 862.,   1270.,  9748.,  10852., 3076.,  3988.,  5386.,  6802.,
      3444.,  4164.,  6034.,  7290.,  2788.,  3316.,  5658.,  6754.,  3348.,
      3940.,  3908.,  4564.,  4071.,  4803.,  8626.,  10138., 10394., 12002.,
      14125., 16353., 8994.,  10442., 12889., 15005., 6570.,  7858.,  10629.,
      12633., 7922.,  9306.,  9242.,  10722., 1750.,  2062.,  5892.,  6804.,
      4468.,  5188.,  9714.,  11098., 5028.,  5812.,  11066., 12546., 5588.,
      6436.,  12418., 13994., 6148.,  7060.,  7348.,  8324.,  4219.,  4935.,
      8922.,  10402., 10626., 12202., 16713., 19149., 11978., 13650., 18549.,
      20873., 12626., 14138., 19361., 21573., 12250., 13602., 13506., 14954.,
      2830.,  3302.,  10612., 11844., 7268.,  8308.,  16474., 18338., 7828.,
      8932.,  15074., 16778., 5124.,  6036.,  12650., 14194., 1396.,  2116.,
      2212.,  2996.,  6310.,  6942.,  13092., 14388., 14548., 15908., 22562.,
      24650., 15748., 17172., 19050., 20978., 11124., 12356., 14514., 16282.,
      5476.,  6516.,  6292.,  7396.,  485.,   633.,   1142.,  1454.,  1326.,
      1670.,  2263.,  2803.,  1798.,  2174.,  2971.,  3559.,  2270.,  2678.,
      3679.,  4315.,  2742.,  3182.,  3118.,  3590.,  1190.,  1566.,  2724.,
      3508.,  3412.,  4260.,  5666.,  6986.,  4356.,  5268.,  7082.,  8498.,
      5300.,  6276.,  8498.,  10010., 6244.,  7284.,  7316.,  8420.,  1534.,
      1814.,  4948.,  5796.,  3908.,  4564.,  8362.,  9650.,  4468.,  5188.,
      9714.,  11098., 5028.,  5812.,  11066., 12546., 5588.,  6436.,  6660.,
      7572.,  3639.,  4307.,  7762.,  9146.,  9274.,  10754., 14685., 16977.,
      10626., 12202., 16713., 19149., 11978., 13650., 18549., 20873., 12626.,
      14138., 14202., 15810., 2614.,  3054.,  9668.,  10836., 6708.,  7684.,
      15122., 16890., 7268.,  8308.,  16474., 18338., 7828.,  8932.,  15074.,
      16778., 5124.,  6036.,  6324.,  7300.,  5835.,  6487.,  12154., 13506.,
      13602., 15050., 21177., 23421., 14954., 16498., 23205., 25593., 16306.,
      17946., 19921., 22197., 11834., 13314., 13346., 14922., 430.,   774.,
      7860.,  8836.,  1956.,  2740.,  10554., 12034., 2516.,  3364.,  11906.,
      13482., 3076.,  3988.,  5386.,  6802.,  3444.,  4164.,  4260.,  5044.,
      2911.,  3547.,  6306.,  7626.,  7690.,  9106.,  12309., 14505., 9042.,
      10554., 14337., 16677., 10394., 12002., 14125., 16353., 8994.,  10442.,
      10442., 11986., 1318.,  1566.,  4004.,  4788.,  3348.,  3940.,  7010.,
      8202.,  3908.,  4564.,  8362.,  9650.,  4468.,  5188.,  9714.,  11098.,
      5028.,  5812.,  5972.,  6820.,  2558.,  2966.,  5588.,  6436.,  6148.,
      7060.,  9962.,  11378., 7348.,  8324.,  11762., 13274., 8548.,  9588.,
      13562., 15170., 9748.,  10852., 10692., 11860.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    17.,    53.,    46.,    134.,   102.,   222.,   187.,
      391.,   254.,   406.,   374.,   558.,   257.,   357.,   333.,   449.,
      0.,     0.,     65.,    165.,   77.,    193.,   326.,   574.,   382.,
      662.,   847.,   1291.,  854.,   1166.,  974.,   1318.,  637.,   817.,
      713.,   909.,   0.,     0.,     166.,   414.,   286.,   566.,   916.,
      1508.,  1220.,  1876.,  2378.,  3410.,  2164.,  2884.,  2596.,  3380.,
      1598.,  2006.,  1846.,  2286.,  0.,     0.,     766.,   1174.,  694.,
      878.,   2244.,  2900.,  1844.,  2308.,  4242.,  5242.,  2404.,  2932.,
      2836.,  3428.,  1622.,  1934.,  1870.,  2214.,  0.,     0.,     1251.,
      1679.,  1575.,  2051.,  3634.,  4634.,  4378.,  5474.,  7341.,  9057.,
      5730.,  6922.,  6666.,  7954.,  3767.,  4435.,  4283.,  4999.,  0.,
      0.,     2758.,  3262.,  1342.,  1622.,  5076.,  5924.,  3524.,  4180.,
      8298.,  9586.,  4084.,  4804.,  4900.,  5684.,  2654.,  3062.,  3094.,
      3534.,  0.,     0.,     2590.,  2998.,  2902.,  3342.,  6276.,  7188.,
      6964.,  7940.,  11186., 12698., 8164.,  9204.,  8980.,  10084., 4854.,
      5422.,  5294.,  5894.,  0.,     0.,     3137.,  3493.,  77.,    193.,
      3910.,  4414.,  574.,   854.,   5135.,  5835.,  662.,   974.,   1166.,
      1510.,  637.,   817.,   905.,   1101.,  0.,     0.,     893.,   1073.,
      1097.,  1293.,  2334.,  2742.,  2774.,  3214.,  4387.,  5071.,  3182.,
      3654.,  3686.,  4190.,  1977.,  2237.,  2245.,  2521.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     113.,   277.,   413.,   593.,   838.,   1214.,  1470.,
      1878.,  2239.,  2875.,  1622.,  2062.,  2318.,  2790.,  1229.,  1473.,
      1593.,  1853.,  0.,     0.,     1613.,  1857.,  1913.,  2173.,  3998.,
      4534.,  4630.,  5198.,  7219.,  8095.,  5102.,  5702.,  5798.,  6430.,
      3049.,  3373.,  3413.,  3753.,  0.,     0.,     3262.,  3798.,  3958.,
      4526.,  8260.,  9428.,  9716.,  10948., 15122., 17018., 10660., 11956.,
      12244., 13604., 6422.,  7118.,  7246.,  7974.,  0.,     0.,     6742.,
      7438.,  2638.,  3110.,  10740., 11972., 6884.,  7924.,  16410., 18274.,
      7444.,  8548.,  9028.,  10196., 4718.,  5318.,  5542.,  6174.,  0.,
      0.,     5607.,  6467.,  6795.,  7703.,  13882., 15490., 15842., 17546.,
      24185., 26685., 15466., 17010., 17106., 18746., 8987.,  9831.,  9855.,
      10747., 0.,     0.,     8734.,  9526.,  3286.,  3854.,  10820., 11988.,
      5300.,  6276.,  13938., 15578., 1572.,  2356.,  2516.,  3364.,  1462.,
      1902.,  1966.,  2438.,  0.,     0.,     6838.,  7534.,  7726.,  8454.,
      10612., 11844., 11940., 13236., 15738., 17602., 6292.,  7396.,  7236.,
      8404.,  3982.,  4582.,  4486.,  5118.,  0.,     0.,     7565.,  8065.,
      185.,   445.,   862.,   1398.,  1174.,  1486.,  2355.,  2975.,  46.,
      134.,   102.,   222.,   105.,   173.,   149.,   233.,   0.,     0.,
      2153.,  2477.,  2645.,  2985.,  3190.,  3630.,  3694.,  4166.,  4391.,
      4995.,  326.,   574.,   382.,   662.,   325.,   473.,   369.,   533.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     29.,    81.,    105.,   173.,   222.,
      374.,   406.,   590.,   643.,   943.,   558.,   774.,   806.,   1054.,
      473.,   605.,   613.,   761.,   0.,     0.,     409.,   541.,   485.,
      633.,   1142.,  1454.,  1326.,  1670.,  2263.,  2803.,  1798.,  2174.,
      2046.,  2454.,  1173.,  1385.,  1313.,  1541.,  0.,     0.,     854.,
      1166.,  1102.,  1446.,  2548.,  3268.,  3108.,  3892.,  5210.,  6434.,
      4052.,  4900.,  4740.,  5652.,  2670.,  3142.,  3046.,  3550.,  0.,
      0.,     2094.,  2566.,  1126.,  1374.,  4132.,  4916.,  2964.,  3556.,
      6946.,  8138.,  3524.,  4180.,  4212.,  4932.,  2310.,  2686.,  2686.,
      3094.,  0.,     0.,     2219.,  2743.,  2735.,  3307.,  5954.,  7146.,
      7082.,  8370.,  11397., 13401., 8434.,  9818.,  9754.,  11234., 5311.,
      6075.,  6019.,  6831.,  0.,     0.,     4086.,  4654.,  1774.,  2118.,
      6964.,  7940.,  4644.,  5428.,  11002., 12482., 5204.,  6052.,  6276.,
      7188.,  3342.,  3814.,  3910.,  4414.,  0.,     0.,     3534.,  4006.,
      3974.,  4478.,  8420.,  9460.,  9364.,  10468., 14786., 16490., 10564.,
      11732., 11636., 12868., 6182.,  6814.,  6750.,  7414.,  0.,     0.,
      4121.,  4509.,  101.,   249.,   4982.,  5550.,  750.,   1094.,  6423.,
      7219.,  838.,   1214.,  1470.,  1878.,  789.,   1001.,  1121.,  1349.,
      0.,     0.,     1173.,  1385.,  1441.,  1669.,  3022.,  3494.,  3590.,
      4094.,  5611.,  6391.,  3998.,  4534.,  4630.,  5198.,  2449.,  2741.,
      2781.,  3089.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,   1422.,  2380.,  4332.,  2156.,  3340.,  5722.,  8202.,  3852.,
      5292.,  9290.,  12154., 5548.,  7244.,  12858., 16106., 7244.,  9196.,
      9196.,  11404., 2060.,  3500.,  4792.,  7928.,  8184.,  11832., 13540.,
      19396., 11576., 15736., 17988., 23588., 12280., 15928., 18340., 23684.,
      8888.,  12024., 11256., 14904., 8620.,  10316., 21112., 25784., 10936.,
      14072., 28612., 35236., 13304., 16952., 24356., 30724., 2744.,  5880.,
      16004., 22116., 4472.,  7096.,  6840.,  9976.,  5722.,  8202.,  13220.,
      18564., 18052., 24164., 29486., 38206., 24676., 31556., 32638., 41486.,
      24516., 31140., 31694., 40670., 20260., 26628., 18820., 24932., 4172.,
      6124.,  22456., 27640., 9208.,  12856., 33188., 40580., 11576., 15736.,
      24836., 31972., 13304., 16952., 28772., 35652., 10936., 14072., 14328.,
      17976., 11658., 15034., 24452., 30564., 30820., 37700., 37054., 46414.,
      30660., 37284., 27278., 35742., 26404., 32772., 22238., 30830., 18052.,
      24164., 22244., 28100., 12012., 14220., 21112., 25784., 2744.,  5880.,
      16004., 22116., 4472.,  7096.,  19940., 25796., 6840.,  9976.,  26564.,
      33188., 9208.,  12856., 13624., 17784., 10810., 14058., 18660., 24516.,
      24516., 31140., 31694., 40670., 20260., 26628., 26654., 35758., 26884.,
      34020., 33902., 43134., 30820., 37700., 26308., 32932., 7564.,  10028.,
      18360., 23544., 13304., 16952., 28772., 35652., 10936., 14072., 28612.,
      35236., 13304., 16952., 24356., 30724., 2744.,  5880.,  6136.,  9784.,
      13612., 16332., 20088., 24760., 24504., 29688., 19140., 25764., 14968.,
      19640., 24612., 30980., 20408., 25592., 25988., 32100., 19064., 23736.,
      17720., 21880., 2126.,  3166.,  5612.,  7820.,  3852.,  5292.,  9290.,
      12154., 5548.,  7244.,  12858., 16106., 7244.,  9196.,  16426., 20058.,
      8940.,  11148., 11404., 13868., 3244.,  4940.,  7160.,  10808., 11576.,
      15736., 17988., 23588., 12280., 15928., 18340., 23684., 8888.,  12024.,
      14596., 19684., 12280., 15928., 15672., 19832., 10316., 12268., 26552.,
      31736., 13304., 16952., 24356., 30724., 2744.,  5880.,  16004., 22116.,
      4472.,  7096.,  19940., 25796., 6840.,  9976.,  10232., 13880., 8266.,
      11130., 18308., 24420., 24676., 31556., 32638., 41486., 24516., 31140.,
      31694., 40670., 20260., 26628., 26654., 35758., 26884., 34020., 24932.,
      31812., 5868.,  8076.,  27896., 33592., 11576., 15736., 24836., 31972.,
      13304., 16952., 28772., 35652., 10936., 14072., 28612., 35236., 13304.,
      16952., 17720., 21880., 11514., 14250., 24804., 30660., 30660., 37284.,
      27278., 35742., 26404., 32772., 22238., 30830., 18052., 24164., 29486.,
      38206., 24676., 31556., 28356., 34980., 780.,   2220.,  11576., 15736.,
      4472.,  7096.,  19940., 25796., 6840.,  9976.,  26564., 33188., 9208.,
      12856., 33188., 40580., 11576., 15736., 17016., 21688., 6570.,  9178.,
      14916., 20516., 20260., 26628., 26654., 35758., 26884., 34020., 33902.,
      43134., 30820., 37700., 37054., 46414., 30660., 37284., 23588., 29956.,
      8620.,  10316., 21112., 25784., 10936., 14072., 28612., 35236., 13304.,
      16952., 24356., 30724., 2744.,  5880.,  16004., 22116., 4472.,  7096.,
      6840.,  9976.,  4940.,  6892.,  11576., 15736., 14968., 19640., 24612.,
      30980., 20408., 25592., 25988., 32100., 19064., 23736., 23268., 29124.,
      13624., 17784., 9208.,  12856., 3742.,  4910.,  8844.,  11308., 5548.,
      7244.,  12858., 16106., 7244.,  9196.,  16426., 20058., 8940.,  11148.,
      19994., 24010., 10636., 13100., 13612., 16332., 4428.,  6380.,  8888.,
      12024., 12280., 15928., 18340., 23684., 8888.,  12024., 14596., 19684.,
      12280., 15928., 19684., 25540., 15672., 19832., 20088., 24760., 12012.,
      14220., 21112., 25784., 2744.,  5880.,  16004., 22116., 4472.,  7096.,
      19940., 25796., 6840.,  9976.,  26564., 33188., 9208.,  12856., 13624.,
      17784., 10810., 14058., 18660., 24516., 24516., 31140., 31694., 40670.,
      20260., 26628., 26654., 35758., 26884., 34020., 33902., 43134., 30820.,
      37700., 26308., 32932., 7564.,  10028., 18360., 23544., 13304., 16952.,
      28772., 35652., 10936., 14072., 28612., 35236., 13304., 16952., 24356.,
      30724., 2744.,  5880.,  6136.,  9784.,  14058., 17178., 21060., 26660.,
      26404., 32772., 22238., 30830., 18052., 24164., 29486., 38206., 24676.,
      31556., 32638., 41486., 24516., 31140., 25636., 32004., 2476.,  4172.,
      17016., 21688., 6840.,  9976.,  26564., 33188., 9208.,  12856., 33188.,
      40580., 11576., 15736., 24836., 31972., 13304., 16952., 17720., 21880.,
      9114.,  12106., 20004., 26372., 26884., 34020., 33902., 43134., 30820.,
      37700., 37054., 46414., 30660., 37284., 27278., 35742., 26404., 32772.,
      16772., 22884., 10316., 12268., 26552., 31736., 13304., 16952., 24356.,
      30724., 2744.,  5880.,  16004., 22116., 4472.,  7096.,  19940., 25796.,
      6840.,  9976.,  10232., 13880., 7148.,  9356.,  15992., 20664., 20408.,
      25592., 25988., 32100., 19064., 23736., 23268., 29124., 13624., 17784.,
      16452., 22052., 19064., 23736., 13624., 17784.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1322.,
      2906.,  1900.,  3084.,  2828.,  4268.,  1966.,  2750.,  2558.,  3470.,
      0.,     0.,     430.,   1214.,  510.,   1422.,  2380.,  4332.,  2156.,
      3340.,  5722.,  8202.,  3852.,  5292.,  4780.,  6476.,  190.,   590.,
      782.,   1310.,  0.,     0.,     460.,   1388.,  1388.,  2572.,  3448.,
      6072.,  5816.,  8952.,  9988.,  15076., 9208.,  12856., 12600., 16760.,
      7660.,  9868.,  9612.,  12076., 0.,     0.,     5100.,  7308.,  5388.,
      6828.,  14648., 18808., 7544.,  10168., 21476., 27332., 9912.,  13048.,
      13304., 16952., 1804.,  3244.,  3756.,  5452.,  0.,     0.,     2826.,
      5178.,  5370.,  8106.,  12516., 18372., 18372., 24996., 29326., 37790.,
      22308., 28676., 24964., 31076., 11834., 15082., 9130.,  11738., 0.,
      0.,     14796., 17772., 10476., 12684., 30968., 36664., 14648., 18808.,
      30468., 37604., 4088.,  7736.,  8504.,  12664., 3180.,  4364.,  4620.,
      6060.,  0.,     0.,     7404.,  9612.,  9868.,  12332., 21432., 26616.,
      26872., 32568., 31588., 38468., 25528., 30712., 21112., 25784., 10380.,
      12844., 940.,   2636.,  0.,     0.,     11822., 13630., 510.,   1422.,
      15820., 18796., 4332.,  6540.,  8410.,  11914., 4364.,  5804.,  6316.,
      8012.,  190.,   590.,   270.,   798.,   0.,     0.,     6974.,  8398.,
      8590.,  10142., 18284., 21516., 21772., 25260., 12682., 16058., 14124.,
      16844., 1100.,  3052.,  590.,   1630.,  30.,    174.,   0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     110.,   382.,   446.,   846.,   972.,   1900.,  1900.,
      3084.,  3098.,  5066.,  3084.,  4524.,  4524.,  6220.,  2814.,  3726.,
      3662.,  4702.,  0.,     0.,     1790.,  2702.,  2126.,  3166.,  5612.,
      7820.,  3852.,  5292.,  9290.,  12154., 5548.,  7244.,  6988.,  8940.,
      270.,   798.,   1118.,  1774.,  0.,     0.,     1132.,  2316.,  2572.,
      4012.,  5816.,  8952.,  9208.,  12856., 15076., 20932., 12600., 16760.,
      17016., 21688., 9868.,  12332., 12332., 15052., 0.,     0.,     8332.,
      10796., 7084.,  8780.,  20088., 24760., 9912.,  13048., 28100., 34724.,
      12280., 15928., 16696., 20856., 2476.,  4172.,  4940.,  6892.,  0.,
      0.,     4602.,  7338.,  7914.,  11034., 16964., 22564., 22308., 28676.,
      32478., 41070., 22148., 28260., 22244., 28100., 15914., 19546., 11930.,
      14922., 0.,     0.,     18028., 21260., 12172., 14636., 25528., 30712.,
      4088.,  7736.,  22116., 28996., 5816.,  8952.,  9208.,  12856., 3852.,
      5292.,  5804.,  7500.,  0.,     0.,     9100.,  11564., 12076., 14796.,
      21112., 25784., 25528., 30712., 28868., 35492., 20088., 24760., 12600.,
      16760., 13612., 16332., 2636.,  4588.,  0.,     0.,     13694., 15630.,
      590.,   1630.,  3052.,  5260.,  4364.,  5804.,  8778.,  11642., 300.,
      972.,   716.,   1644.,  782.,   1310.,  1118.,  1774.,  0.,     0.,
      8078.,  9630.,  9950.,  11630., 12172., 14636., 14124., 16844., 2554.,
      5290.,  2380.,  4332.,  2156.,  3340.,  2462.,  3630.,  110.,   382.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     190.,   590.,   782.,   1310.,  1644.,
      2828.,  3084.,  4524.,  4874.,  7226.,  4268.,  5964.,  6220.,  8172.,
      3662.,  4702.,  4766.,  5934.,  0.,     0.,     3150.,  4190.,  3742.,
      4910.,  8844.,  11308., 5548.,  7244.,  12858., 16106., 7244.,  9196.,
      9196.,  11404., 350.,   1006.,  1454.,  2238.,  0.,     0.,     1804.,
      3244.,  3756.,  5452.,  8184.,  11832., 12600., 16760., 20164., 26788.,
      15992., 20664., 21432., 26616., 12076., 14796., 15052., 18028., 0.,
      0.,     11564., 14284., 8780.,  10732., 25528., 30712., 12280., 15928.,
      34724., 42116., 14648., 18808., 20088., 24760., 3148.,  5100.,  6124.,
      8332.,  0.,     0.,     5738.,  7834.,  7770.,  10250., 17316., 22660.,
      22148., 28260., 31534., 40254., 28772., 35652., 28356., 34980., 19994.,
      24010., 14730., 18106., 0.,     0.,     10380., 12844., 940.,   2636.,
      15992., 20664., 5816.,  8952.,  26052., 32676., 8184.,  11832., 12600.,
      16760., 4524.,  6220.,  6988.,  8940.,  0.,     0.,     6060.,  7756.,
      7500.,  9452.,  16696., 20856., 20088., 24760., 22052., 28420., 25528.,
      30712., 17016., 21688., 16844., 19820., 4332.,  6540.,  0.,     0.,
      590.,   1630.,  30.,    174.,   2572.,  4012.,  300.,   972.,   5050.,
      7274.,  972.,   1900.,  1900.,  3084.,  1374.,  2030.,  1966.,  2750.,
      0.,     0.,     350.,   1006.,  430.,   1214.,  1964.,  3660.,  2380.,
      4332.,  4714.,  6810.,  5612.,  7820.,  3852.,  5292.,  4334.,  5630.,
      190.,   590.,   0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,
      542.,   624.,   719.,   836.,   959.,   1088.,  622.,   704.,   790.,
      880.,   1067.,  1196.,  1331.,  1472.,  854.,   944.,   1038.,  1136.,
      974.,   1072.,  1174.,  1280.,  150.,   224.,   302.,   384.,   468.,
      624.,   788.,   960.,   676.,   848.,   1028.,  1216.,  1282.,  1552.,
      1834.,  2128.,  1140.,  1328.,  1524.,  1728.,  1978.,  2272.,  2578.,
      2896.,  1604.,  1808.,  2020.,  2240.,  2674.,  2992.,  3322.,  3664.,
      2068.,  2288.,  2516.,  2752.,  2468.,  2704.,  2948.,  3200.,  590.,
      704.,   822.,   944.,   1508.,  1744.,  1988.,  2240.,  1716.,  1968.,
      2228.,  2496.,  3082.,  3472.,  3874.,  4288.,  2500.,  2768.,  3044.,
      3328.,  4258.,  4672.,  5098.,  5536.,  3284.,  3568.,  3860.,  4160.,
      5434.,  5872.,  6322.,  6784.,  4068.,  4368.,  4676.,  4992.,  4468.,
      4784.,  5108.,  5440.,  1235.,  1436.,  1643.,  1856.,  2962.,  3376.,
      3802.,  4240.,  3514.,  3952.,  4402.,  4864.,  6033.,  6708.,  7401.,
      8112.,  4690.,  5152.,  5626.,  6112.,  7797.,  8508.,  9237.,  9984.,
      5866.,  6352.,  6850.,  7360.,  9561.,  10308., 11073., 11856., 7042.,
      7552.,  8074.,  8608.,  7882.,  8416.,  8962.,  9520.,  2390.,  2544.,
      2702.,  2864.,  5108.,  5424.,  5748.,  6080.,  5636.,  5968.,  6308.,
      6656.,  8962.,  9472.,  9994.,  10528., 6420.,  6768.,  7124.,  7488.,
      10138., 10672., 11218., 11776., 7204.,  7568.,  7940.,  8320.,  11314.,
      11872., 12442., 13024., 7988.,  8368.,  8756.,  9152.,  8708.,  9104.,
      9508.,  9920.,  3935.,  4196.,  4463.,  4736.,  8362.,  8896.,  9442.,
      10000., 9394.,  9952.,  10522., 11104., 14853., 15708., 16581., 17472.,
      10570., 11152., 11746., 12352., 16617., 17508., 18417., 19344., 11746.,
      12352., 12970., 13600., 18381., 19308., 20253., 21216., 12922., 13552.,
      14194., 14848., 14242., 14896., 15562., 16240., 4190.,  4384.,  4582.,
      4784.,  8708.,  9104.,  9508.,  9920.,  9556.,  9968.,  10388., 10816.,
      14842., 15472., 16114., 16768., 10340., 10768., 11204., 11648., 16018.,
      16672., 17338., 18016., 11124., 11568., 12020., 12480., 17194., 17872.,
      18562., 19264., 11908., 12368., 12836., 13312., 12948., 13424., 13908.,
      14400., 6635.,  6956.,  7283.,  7616.,  13762., 14416., 15082., 15760.,
      15274., 15952., 16642., 17344., 23673., 24708., 25761., 26832., 16450.,
      17152., 17866., 18592., 25437., 26508., 27597., 28704., 17626., 18352.,
      19090., 19840., 27201., 28308., 29433., 30576., 18802., 19552., 20314.,
      21088., 20602., 21376., 22162., 22960., 5990.,  6224.,  6462.,  6704.,
      12308., 12784., 13268., 13760., 13476., 13968., 14468., 14976., 20722.,
      21472., 22234., 23008., 14260., 14768., 15284., 15808., 21898., 22672.,
      23458., 24256., 15044., 15568., 16100., 16640., 23074., 23872., 24682.,
      25504., 15828., 16368., 16916., 17472., 17188., 17744., 18308., 18880.,
      8830.,  9104.,  9382.,  9664.,  18148., 18704., 19268., 19840., 19316.,
      19888., 20468., 21056., 29722., 30592., 31474., 32368., 20420., 21008.,
      21604., 22208., 31378., 32272., 33178., 34096., 21524., 22128., 22740.,
      23360., 33034., 33952., 34882., 35824., 22628., 23248., 23876., 24512.,
      23988., 24624., 25268., 25920., 2525.,  2652.,  2781.,  2912.,  5134.,
      5392.,  5654.,  5920.,  5958.,  6224.,  6494.,  6768.,  9071.,  9476.,
      9887.,  10304., 6190.,  6464.,  6742.,  7024.,  9419.,  9836.,  10259.,
      10688., 6422.,  6704.,  6990.,  7280.,  9767.,  10196., 10631., 11072.,
      6654.,  6944.,  7238.,  7536.,  7574.,  7872.,  8174.,  8480.,  5150.,
      5424.,  5702.,  5984.,  10468., 11024., 11588., 12160., 12276., 12848.,
      13428., 14016., 18554., 19296., 20050., 20816., 12100., 12560., 13028.,
      13504., 18098., 18736., 19386., 20048., 10900., 11248., 11604., 11968.,
      16618., 17152., 17698., 18256., 11364., 11728., 12100., 12480., 12340.,
      12720., 13108., 13504., 9590.,  9904.,  10222., 10544., 19508., 20144.,
      20788., 21440., 21316., 21968., 22628., 23296., 29794., 30656., 31530.,
      32416., 18900., 19440., 19988., 20544., 27258., 28016., 28786., 29568.,
      15460., 15888., 16324., 16768., 23698., 24352., 25018., 25696., 16244.,
      16688., 17140., 17600., 17220., 17680., 18148., 18624., 14095., 14468.,
      14847., 15232., 28682., 29440., 30210., 30992., 30610., 31392., 32186.,
      32992., 41429., 42492., 43573., 44672., 26026., 26704., 27394., 28096.,
      36921., 37892., 38881., 39888., 20418., 20992., 21578., 22176., 31389.,
      32268., 33165., 34080., 21594., 22192., 22802., 23424., 22786., 23408.,
      24042., 24688., 8190.,  8416.,  8646.,  8880.,  16708., 17168., 17636.,
      18112., 17812., 18288., 18772., 19264., 19418., 20016., 20626., 21248.,
      10276., 10640., 11012., 11392., 11762., 12256., 12762., 13280., 1716.,
      1968.,  2228.,  2496.,  3082.,  3472.,  3874.,  4288.,  2500.,  2768.,
      3044.,  3328.,  2772.,  3056.,  3348.,  3648.,  11035., 11340., 11651.,
      11968., 22562., 23184., 23818., 24464., 23946., 24592., 25250., 25920.,
      26313., 27172., 28049., 28944., 14242., 14784., 15338., 15904., 16685.,
      17452., 18237., 19040., 3514.,  3952.,  4402.,  4864.,  6033.,  6708.,
      7401.,  8112.,  4690.,  5152.,  5626.,  6112.,  5338.,  5824.,  6322.,
      6832.,  1670.,  1808.,  1950.,  2096.,  3668.,  3952.,  4244.,  4544.,
      4068.,  4368.,  4676.,  4992.,  6610.,  7072.,  7546.,  8032.,  4852.,
      5168.,  5492.,  5824.,  7786.,  8272.,  8770.,  9280.,  5636.,  5968.,
      6308.,  6656.,  8962.,  9472.,  9994.,  10528., 6420.,  6768.,  7124.,
      7488.,  7012.,  7376.,  7748.,  8128.,  2855.,  3092.,  3335.,  3584.,
      6202.,  6688.,  7186.,  7696.,  7042.,  7552.,  8074.,  8608.,  11325.,
      12108., 12909., 13728., 8218.,  8752.,  9298.,  9856.,  13089., 13908.,
      14745., 15600., 9394.,  9952.,  10522., 11104., 14853., 15708., 16581.,
      17472., 10570., 11152., 11746., 12352., 11698., 12304., 12922., 13552.,
      3470.,  3648.,  3830.,  4016.,  7268.,  7632.,  8004.,  8384.,  7988.,
      8368.,  8756.,  9152.,  12490., 13072., 13666., 14272., 8772.,  9168.,
      9572.,  9984.,  13666., 14272., 14890., 15520., 9556.,  9968.,  10388.,
      10816., 14842., 15472., 16114., 16768., 10340., 10768., 11204., 11648.,
      11252., 11696., 12148., 12608., 5190.,  5408.,  5630.,  5856.,  10868.,
      11312., 11764., 12224., 11588., 12048., 12516., 12992., 18130., 18832.,
      19546., 20272., 12692., 13168., 13652., 14144., 19786., 20512., 21250.,
      22000., 13796., 14288., 14788., 15296., 21442., 22192., 22954., 23728.,
      14900., 15408., 15924., 16448., 15812., 16336., 16868., 17408., 1825.,
      1924.,  2025.,  2128.,  3734.,  3936.,  4142.,  4352.,  4334.,  4544.,
      4758.,  4976.,  6635.,  6956.,  7283.,  7616.,  4566.,  4784.,  5006.,
      5232.,  6983.,  7316.,  7655.,  8000.,  4798.,  5024.,  5254.,  5488.,
      7331.,  7676.,  8027.,  8384.,  5030.,  5264.,  5502.,  5744.,  5726.,
      5968.,  6214.,  6464.,  3750.,  3968.,  4190.,  4416.,  7668.,  8112.,
      8564.,  9024.,  9028.,  9488.,  9956.,  10432., 13810., 14512., 15226.,
      15952., 9492.,  9968.,  10452., 10944., 14506., 15232., 15970., 16720.,
      9956.,  10448., 10948., 11456., 15202., 15952., 16714., 17488., 10420.,
      10928., 11444., 11968., 11972., 12496., 13028., 13568., 7070.,  7328.,
      7590.,  7856.,  14468., 14992., 15524., 16064., 15828., 16368., 16916.,
      17472., 24250., 25072., 25906., 26752., 16612., 17168., 17732., 18304.,
      25426., 26272., 27130., 28000., 17396., 17968., 18548., 19136., 26602.,
      27472., 28354., 29248., 18180., 18768., 19364., 19968., 19732., 20336.,
      20948., 21568., 10955., 11372., 11795., 12224., 22402., 23248., 24106.,
      24976., 24682., 25552., 26434., 27328., 37785., 39108., 40449., 41808.,
      25858., 26752., 27658., 28576., 39549., 40908., 42285., 43680., 27034.,
      27952., 28882., 29824., 41185., 42452., 43737., 45040., 27570., 28384.,
      29210., 30048., 29626., 30464., 31314., 32176., 8870.,  9168.,  9470.,
      9776.,  18068., 18672., 19284., 19904., 19748., 20368., 20996., 21632.,
      30130., 31072., 32026., 32992., 20532., 21168., 21812., 22464., 31306.,
      32272., 33250., 34240., 21316., 21968., 22628., 23296., 29794., 30656.,
      31530., 32416., 18900., 19440., 19988., 20544., 20260., 20816., 21380.,
      21952., 13015., 13364., 13719., 14080., 26522., 27232., 27954., 28688.,
      28258., 28992., 29738., 30496., 43149., 44268., 45405., 46560., 29434.,
      30192., 30962., 31744., 44913., 46068., 47241., 48432., 30610., 31392.,
      32186., 32992., 41429., 42492., 43573., 44672., 26026., 26704., 27394.,
      28096., 27538., 28240., 28954., 29680., 7470.,  7680.,  7894.,  8112.,
      15268., 15696., 16132., 16576., 16244., 16688., 17140., 17600., 24874.,
      25552., 26242., 26944., 17028., 17488., 17956., 18432., 26050., 26752.,
      27466., 28192., 17812., 18288., 18772., 19264., 19418., 20016., 20626.,
      21248., 10276., 10640., 11012., 11392., 10932., 11312., 11700., 12096.,
      9955.,  10236., 10523., 10816., 20402., 20976., 21562., 22160., 21594.,
      22192., 22802., 23424., 33153., 34068., 35001., 35952., 22770., 23392.,
      24026., 24672., 34917., 35868., 36837., 37824., 23946., 24592., 25250.,
      25920., 26313., 27172., 28049., 28944., 14242., 14784., 15338., 15904.,
      15210., 15776., 16354., 16944., 950.,   1072.,  1198.,  1328.,  2228.,
      2480.,  2740.,  3008.,  2500.,  2768.,  3044.,  3328.,  4258.,  4672.,
      5098.,  5536.,  3284.,  3568.,  3860.,  4160.,  5434.,  5872.,  6322.,
      6784.,  4068.,  4368.,  4676.,  4992.,  6610.,  7072.,  7546.,  8032.,
      4852.,  5168.,  5492.,  5824.,  5316.,  5648.,  5988.,  6336.,  1550.,
      1712.,  1878.,  2048.,  3588.,  3920.,  4260.,  4608.,  3860.,  4208.,
      4564.,  4928.,  6538.,  7072.,  7618.,  8176.,  4964.,  5328.,  5700.,
      6080.,  8194.,  8752.,  9322.,  9904.,  6068.,  6448.,  6836.,  7232.,
      9850.,  10432., 11026., 11632., 7172.,  7568.,  7972.,  8384.,  7636.,
      8048.,  8468.,  8896.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    5.,     12.,    21.,    32.,    14.,
      32.,    54.,    80.,    38.,    64.,    94.,    128.,   71.,    116.,
      167.,   224.,   110.,   144.,   182.,   224.,   166.,   208.,   254.,
      304.,   117.,   140.,   165.,   192.,   153.,   180.,   209.,   240.,
      0.,     0.,     0.,     0.,     21.,    44.,    69.,    96.,    25.,
      52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,   224.,
      294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,   542.,
      624.,   446.,   528.,   614.,   704.,   297.,   340.,   385.,   432.,
      333.,   380.,   429.,   480.,   0.,     0.,     0.,     0.,     54.,
      112.,   174.,   240.,   110.,   176.,   246.,   320.,   388.,   528.,
      676.,   832.,   532.,   688.,   852.,   1024.,  1066.,  1312.,  1570.,
      1840.,  996.,   1168.,  1348.,  1536.,  1204.,  1392.,  1588.,  1792.,
      750.,   848.,   950.,   1056.,  870.,   976.,   1086.,  1200.,  0.,
      0.,     0.,     0.,     334.,   432.,   534.,   640.,   390.,   496.,
      606.,   720.,   1108.,  1328.,  1556.,  1792.,  1252.,  1488.,  1732.,
      1984.,  2386.,  2752.,  3130.,  3520.,  2036.,  2288.,  2548.,  2816.,
      2244.,  2512.,  2788.,  3072.,  1350.,  1488.,  1630.,  1776.,  1470.,
      1616.,  1766.,  1920.,  0.,     0.,     0.,     0.,     639.,   804.,
      975.,   1152.,  795.,   972.,   1155.,  1344.,  2082.,  2448.,  2826.,
      3216.,  2442.,  2832.,  3234.,  3648.,  4425.,  5028.,  5649.,  6288.,
      3618.,  4032.,  4458.,  4896.,  4074.,  4512.,  4962.,  5424.,  2379.,
      2604.,  2835.,  3072.,  2631.,  2868.,  3111.,  3360.,  0.,     0.,
      0.,     0.,     1318.,  1440.,  1566.,  1696.,  1470.,  1600.,  1734.,
      1872.,  3268.,  3536.,  3812.,  4096.,  3604.,  3888.,  4180.,  4480.,
      5914.,  6352.,  6802.,  7264.,  4388.,  4688.,  4996.,  5312.,  4788.,
      5104.,  5428.,  5760.,  2622.,  2784.,  2950.,  3120.,  2838.,  3008.,
      3182.,  3360.,  0.,     0.,     0.,     0.,     2078.,  2240.,  2406.,
      2576.,  2230.,  2400.,  2574.,  2752.,  4948.,  5296.,  5652.,  6016.,
      5284.,  5648.,  6020.,  6400.,  8674.,  9232.,  9802.,  10384., 6388.,
      6768.,  7156.,  7552.,  6788.,  7184.,  7588.,  8000.,  3702.,  3904.,
      4110.,  4320.,  3918.,  4128.,  4342.,  4560.,  0.,     0.,     0.,
      0.,     1525.,  1612.,  1701.,  1792.,  1625.,  1716.,  1809.,  1904.,
      3494.,  3680.,  3870.,  4064.,  3710.,  3904.,  4102.,  4304.,  5939.,
      6236.,  6539.,  6848.,  4262.,  4464.,  4670.,  4880.,  4510.,  4720.,
      4934.,  5152.,  2409.,  2516.,  2625.,  2736.,  2541.,  2652.,  2765.,
      2880.,  0.,     0.,     0.,     0.,     2025.,  2132.,  2241.,  2352.,
      2125.,  2236.,  2349.,  2464.,  4574.,  4800.,  5030.,  5264.,  4790.,
      5024.,  5262.,  5504.,  7679.,  8036.,  8399.,  8768.,  5502.,  5744.,
      5990.,  6240.,  5750.,  6000.,  6254.,  6512.,  3069.,  3196.,  3325.,
      3456.,  3201.,  3332.,  3465.,  3600.,  0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     37.,    76.,    117.,   160.,   185.,
      228.,   273.,   320.,   374.,   464.,   558.,   656.,   686.,   784.,
      886.,   992.,   1043.,  1196.,  1355.,  1520.,  758.,   864.,   974.,
      1088.,  1102.,  1216.,  1334.,  1456.,  585.,   644.,   705.,   768.,
      765.,   828.,   893.,   960.,   0.,     0.,     0.,     0.,     777.,
      836.,   897.,   960.,   925.,   988.,   1053.,  1120.,  1934.,  2064.,
      2198.,  2336.,  2246.,  2384.,  2526.,  2672.,  3503.,  3716.,  3935.,
      4160.,  2478.,  2624.,  2774.,  2928.,  2822.,  2976.,  3134.,  3296.,
      1485.,  1564.,  1645.,  1728.,  1665.,  1748.,  1833.,  1920.,  0.,
      0.,     0.,     0.,     1566.,  1696.,  1830.,  1968.,  1910.,  2048.,
      2190.,  2336.,  3988.,  4272.,  4564.,  4864.,  4708.,  5008.,  5316.,
      5632.,  7330.,  7792.,  8266.,  8752.,  5172.,  5488.,  5812.,  6144.,
      5956.,  6288.,  6628.,  6976.,  3126.,  3296.,  3470.,  3648.,  3534.,
      3712.,  3894.,  4080.,  0.,     0.,     0.,     0.,     3286.,  3456.,
      3630.,  3808.,  3630.,  3808.,  3990.,  4176.,  7588.,  7952.,  8324.,
      8704.,  8308.,  8688.,  9076.,  9472.,  12970., 13552., 14146., 14752.,
      9092.,  9488.,  9892.,  10304., 9876.,  10288., 10708., 11136., 5166.,
      5376.,  5590.,  5808.,  5574.,  5792.,  6014.,  6240.,  0.,     0.,
      0.,     0.,     5067.,  5340.,  5619.,  5904.,  5655.,  5940.,  6231.,
      6528.,  11802., 12384., 12978., 13584., 13026., 13632., 14250., 14880.,
      20301., 21228., 22173., 23136., 14202., 14832., 15474., 16128., 15522.,
      16176., 16842., 17520., 8103.,  8436.,  8775.,  9120.,  8787.,  9132.,
      9483.,  9840.,  0.,     0.,     0.,     0.,     4270.,  4464.,  4662.,
      4864.,  4710.,  4912.,  5118.,  5328.,  9748.,  10160., 10580., 11008.,
      10660., 11088., 11524., 11968., 16498., 17152., 17818., 18496., 11444.,
      11888., 12340., 12800., 12420., 12880., 13348., 13824., 6438.,  6672.,
      6910.,  7152.,  6942.,  7184.,  7430.,  7680.,  0.,     0.,     0.,
      0.,     6470.,  6704.,  6942.,  7184.,  6910.,  7152.,  7398.,  7648.,
      14308., 14800., 15300., 15808., 15220., 15728., 16244., 16768., 23578.,
      24352., 25138., 25936., 16324., 16848., 17380., 17920., 17300., 17840.,
      18388., 18944., 8958.,  9232.,  9510.,  9792.,  9462.,  9744.,  10030.,
      10320., 0.,     0.,     0.,     0.,     3721.,  3844.,  3969.,  4096.,
      3965.,  4092.,  4221.,  4352.,  8174.,  8432.,  8694.,  8960.,  8678.,
      8944.,  9214.,  9488.,  13391., 13796., 14207., 14624., 9230.,  9504.,
      9782.,  10064., 9766.,  10048., 10334., 10624., 5037.,  5180.,  5325.,
      5472.,  5313.,  5460.,  5609.,  5760.,  0.,     0.,     0.,     0.,
      4941.,  5084.,  5229.,  5376.,  5185.,  5332.,  5481.,  5632.,  10694.,
      10992., 11294., 11600., 11198., 11504., 11814., 12128., 17291., 17756.,
      18227., 18704., 11910., 12224., 12542., 12864., 12446., 12768., 13094.,
      13424., 6417.,  6580.,  6745.,  6912.,  6693.,  6860.,  7029.,  7200.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     73.,
      148.,   225.,   304.,   365.,   444.,   525.,   608.,   734.,   896.,
      1062.,  1232.,  1334.,  1504.,  1678.,  1856.,  2015.,  2276.,  2543.,
      2816.,  1406.,  1584.,  1766.,  1952.,  2038.,  2224.,  2414.,  2608.,
      1053.,  1148.,  1245.,  1344.,  1377.,  1476.,  1577.,  1680.,  0.,
      0.,     0.,     0.,     1533.,  1628.,  1725.,  1824.,  1825.,  1924.,
      2025.,  2128.,  3734.,  3936.,  4142.,  4352.,  4334.,  4544.,  4758.,
      4976.,  6635.,  6956.,  7283.,  7616.,  4566.,  4784.,  5006.,  5232.,
      5198.,  5424.,  5654.,  5888.,  2673.,  2788.,  2905.,  3024.,  2997.,
      3116.,  3237.,  3360.,  0.,     0.,     0.,     0.,     3078.,  3280.,
      3486.,  3696.,  3710.,  3920.,  4134.,  4352.,  7588.,  8016.,  8452.,
      8896.,  8884.,  9328.,  9780.,  10240., 13594., 14272., 14962., 15664.,
      9348.,  9808.,  10276., 10752., 10708., 11184., 11668., 12160., 5502.,
      5744.,  5990.,  6240.,  6198.,  6448.,  6702.,  6960.,  0.,     0.,
      0.,     0.,     6238.,  6480.,  6726.,  6976.,  6870.,  7120.,  7374.,
      7632.,  14068., 14576., 15092., 15616., 15364., 15888., 16420., 16960.,
      23554., 24352., 25162., 25984., 16148., 16688., 17236., 17792., 17508.,
      18064., 18628., 19200., 8982.,  9264.,  9550.,  9840.,  9678.,  9968.,
      10262., 10560., 0.,     0.,     0.,     0.,     9495.,  9876.,  10263.,
      10656., 10515., 10908., 11307., 11712., 21522., 22320., 23130., 23952.,
      23610., 24432., 25266., 26112., 36177., 37428., 38697., 39984., 24786.,
      25632., 26490., 27360., 26970., 27840., 28722., 29616., 13827., 14268.,
      14715., 15168., 14943., 15396., 15855., 16320., 0.,     0.,     0.,
      0.,     7222.,  7488.,  7758.,  8032.,  7950.,  8224.,  8502.,  8784.,
      16228., 16784., 17348., 17920., 17716., 18288., 18868., 19456., 27082.,
      27952., 28834., 29728., 18500., 19088., 19684., 20288., 20052., 20656.,
      21268., 21888., 10254., 10560., 10870., 11184., 11046., 11360., 11678.,
      12000., 0.,     0.,     0.,     0.,     10862., 11168., 11478., 11792.,
      11590., 11904., 12222., 12544., 23668., 24304., 24948., 25600., 25156.,
      25808., 26468., 27136., 38482., 39472., 40474., 41488., 26260., 26928.,
      27604., 28288., 27812., 28496., 29188., 29888., 14214., 14560., 14910.,
      15264., 15006., 15360., 15718., 16080., 0.,     0.,     0.,     0.,
      5917.,  6076.,  6237.,  6400.,  6305.,  6468.,  6633.,  6800.,  12854.,
      13184., 13518., 13856., 13646., 13984., 14326., 14672., 20843., 21356.,
      21875., 22400., 14198., 14544., 14894., 15248., 15022., 15376., 15734.,
      16096., 7665.,  7844.,  8025.,  8208.,  8085.,  8268.,  8453.,  8640.,
      0.,     0.,     0.,     0.,     7857.,  8036.,  8217.,  8400.,  8245.,
      8428.,  8613.,  8800.,  16814., 17184., 17558., 17936., 17606., 17984.,
      18366., 18752., 26903., 27476., 28055., 28640., 18318., 18704., 19094.,
      19488., 19142., 19536., 19934., 20336., 9765.,  9964.,  10165., 10368.,
      10185., 10388., 10593., 10800., 0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  946.,
      1210.,  1506.,  1834.,  2575.,  3147.,  3767.,  4435.,  1762.,  2090.,
      2450.,  2842.,  4311.,  4979.,  5695.,  6459.,  2578.,  2970.,  3394.,
      3850.,  6047.,  6811.,  7623.,  8483.,  3394.,  3850.,  4338.,  4858.,
      4338.,  4858.,  5410.,  5994.,  866.,   1194.,  1554.,  1946.,  2036.,
      2756.,  3540.,  4388.,  3668.,  4516.,  5428.,  6404.,  6086.,  7454.,
      8918.,  10478., 5300.,  6276.,  7316.,  8420.,  8342.,  9646.,  11046.,
      12542., 5716.,  6564.,  7476.,  8452.,  8550.,  9790.,  11126., 12558.,
      4084.,  4804.,  5588.,  6436.,  5204.,  6052.,  6964.,  7940.,  4114.,
      4506.,  4930.,  5386.,  10004., 11108., 12276., 13508., 5108.,  5828.,
      6612.,  7460.,  13526., 15086., 16742., 18494., 6228.,  7076.,  7988.,
      8964.,  11430., 12926., 14518., 16206., 1012.,  1732.,  2516.,  3364.,
      7286.,  8718.,  10246., 11870., 1940.,  2532.,  3188.,  3908.,  3060.,
      3780.,  4564.,  5412.,  2575.,  3147.,  3767.,  4435.,  5990.,  7230.,
      8566.,  9998.,  8310.,  9742.,  11270., 12894., 13725., 15761., 17941.,
      20265., 11526., 13150., 14870., 16686., 15285., 17353., 19565., 21921.,
      11478., 13038., 14694., 16446., 14797., 16897., 19141., 21529., 9382.,
      10878., 12470., 14158., 8694.,  10126., 11654., 13278., 1858.,  2314.,
      2802.,  3322.,  10612., 11844., 13140., 14500., 4180.,  5028.,  5940.,
      6916.,  15718., 17470., 19318., 21262., 5300.,  6276.,  7316.,  8420.,
      11574., 13262., 15046., 16926., 6228.,  7076.,  7988.,  8964.,  13574.,
      15198., 16918., 18734., 5108.,  5828.,  6612.,  7460.,  6740.,  7588.,
      8500.,  9476.,  5431.,  6227.,  7071.,  7963.,  11510., 12942., 14470.,
      16094., 14598., 16222., 17942., 19758., 17429., 19625., 21965., 24449.,
      14550., 16110., 17766., 19518., 12653., 14625., 16741., 19001., 12454.,
      13950., 15542., 17230., 10117., 12121., 14269., 16561., 8310.,  9742.,
      11270., 12894., 10438., 11806., 13270., 14830., 5746.,  6266.,  6818.,
      7402.,  10004., 11108., 12276., 13508., 1012.,  1732.,  2516.,  3364.,
      7286.,  8718.,  10246., 11870., 1940.,  2532.,  3188.,  3908.,  9286.,
      10654., 12118., 13678., 3060.,  3780.,  4564.,  5412.,  12502., 14062.,
      15718., 17470., 4180.,  5028.,  5940.,  6916.,  6324.,  7300.,  8340.,
      9444.,  5023.,  5787.,  6599.,  7459.,  8646.,  10014., 11478., 13038.,
      11478., 13038., 14694., 16446., 14797., 16897., 19141., 21529., 9382.,
      10878., 12470., 14158., 12261., 14393., 16669., 19089., 12598., 14286.,
      16070., 17950., 15869., 18033., 20341., 22793., 14598., 16222., 17942.,
      19758., 12374., 13934., 15590., 17342., 3490.,  4074.,  4690.,  5338.,
      8564.,  9796.,  11092., 12452., 6228.,  7076.,  7988.,  8964.,  13574.,
      15198., 16918., 18734., 5108.,  5828.,  6612.,  7460.,  13526., 15086.,
      16742., 18494., 6228.,  7076.,  7988.,  8964.,  11430., 12926., 14518.,
      16206., 1012.,  1732.,  2516.,  3364.,  2644.,  3492.,  4404.,  5380.,
      6482.,  7130.,  7810.,  8522.,  9492.,  10596., 11764., 12996., 11636.,
      12868., 14164., 15524., 8790.,  10350., 12006., 13758., 6932.,  8036.,
      9204.,  10436., 11558., 13054., 14646., 16334., 9588.,  10820., 12116.,
      13476., 12278., 13710., 15238., 16862., 8980.,  10084., 11252., 12484.,
      8372.,  9348.,  10388., 11492., 941.,   1185.,  1445.,  1721.,  2546.,
      3066.,  3618.,  4202.,  1762.,  2090.,  2450.,  2842.,  4311.,  4979.,
      5695.,  6459.,  2578.,  2970.,  3394.,  3850.,  6047.,  6811.,  7623.,
      8483.,  3394.,  3850.,  4338.,  4858.,  7783.,  8643.,  9551.,  10507.,
      4210.,  4730.,  5282.,  5866.,  5410.,  5994.,  6610.,  7258.,  1426.,
      1818.,  2242.,  2698.,  3156.,  4004.,  4916.,  5892.,  5300.,  6276.,
      7316.,  8420.,  8342.,  9646.,  11046., 12542., 5716.,  6564.,  7476.,
      8452.,  8550.,  9790.,  11126., 12558., 4084.,  4804.,  5588.,  6436.,
      6710.,  7886.,  9158.,  10526., 5716.,  6564.,  7476.,  8452.,  7348.,
      8324.,  9364.,  10468., 4930.,  5386.,  5874.,  6394.,  12660., 13892.,
      15188., 16548., 6228.,  7076.,  7988.,  8964.,  11430., 12926., 14518.,
      16206., 1012.,  1732.,  2516.,  3364.,  7286.,  8718.,  10246., 11870.,
      1940.,  2532.,  3188.,  3908.,  9286.,  10654., 12118., 13678., 3060.,
      3780.,  4564.,  5412.,  4692.,  5540.,  6452.,  7428.,  3799.,  4467.,
      5183.,  5947.,  8438.,  9870.,  11398., 13022., 11526., 13150., 14870.,
      16686., 15285., 17353., 19565., 21921., 11478., 13038., 14694., 16446.,
      14797., 16897., 19141., 21529., 9382.,  10878., 12470., 14158., 12261.,
      14393., 16669., 19089., 12598., 14286., 16070., 17950., 11654., 13278.,
      14998., 16814., 2674.,  3194.,  3746.,  4330.,  13268., 14628., 16052.,
      17540., 5300.,  6276.,  7316.,  8420.,  11574., 13262., 15046., 16926.,
      6228.,  7076.,  7988.,  8964.,  13574., 15198., 16918., 18734., 5108.,
      5828.,  6612.,  7460.,  13526., 15086., 16742., 18494., 6228.,  7076.,
      7988.,  8964.,  8372.,  9348.,  10388., 11492., 5439.,  6075.,  6759.,
      7491.,  11718., 13086., 14550., 16110., 14550., 16110., 17766., 19518.,
      12653., 14625., 16741., 19001., 12454., 13950., 15542., 17230., 10117.,
      12121., 14269., 16561., 8310.,  9742.,  11270., 12894., 13725., 15761.,
      17941., 20265., 11526., 13150., 14870., 16686., 13398., 14958., 16614.,
      18366., 226.,   554.,   914.,   1306.,  5300.,  6276.,  7316.,  8420.,
      1940.,  2532.,  3188.,  3908.,  9286.,  10654., 12118., 13678., 3060.,
      3780.,  4564.,  5412.,  12502., 14062., 15718., 17470., 4180.,  5028.,
      5940.,  6916.,  15718., 17470., 19318., 21262., 5300.,  6276.,  7316.,
      8420.,  7956.,  9060.,  10228., 11460., 2983.,  3587.,  4239.,  4939.,
      6806.,  8110.,  9510.,  11006., 9382.,  10878., 12470., 14158., 12261.,
      14393., 16669., 19089., 12598., 14286., 16070., 17950., 15869., 18033.,
      20341., 22793., 14598., 16222., 17942., 19758., 17429., 19625., 21965.,
      24449., 14550., 16110., 17766., 19518., 11046., 12542., 14134., 15822.,
      4114.,  4506.,  4930.,  5386.,  10004., 11108., 12276., 13508., 5108.,
      5828.,  6612.,  7460.,  13526., 15086., 16742., 18494., 6228.,  7076.,
      7988.,  8964.,  11430., 12926., 14518., 16206., 1012.,  1732.,  2516.,
      3364.,  7286.,  8718.,  10246., 11870., 1940.,  2532.,  3188.,  3908.,
      3060.,  3780.,  4564.,  5412.,  2242.,  2698.,  3186.,  3706.,  5300.,
      6276.,  7316.,  8420.,  6932.,  8036.,  9204.,  10436., 11558., 13054.,
      14646., 16334., 9588.,  10820., 12116., 13476., 12278., 13710., 15238.,
      16862., 8980.,  10084., 11252., 12484., 10950., 12318., 13782., 15342.,
      6324.,  7300.,  8340.,  9444.,  4180.,  5028.,  5940.,  6916.,  1733.,
      2009.,  2301.,  2609.,  4130.,  4714.,  5330.,  5978.,  2578.,  2970.,
      3394.,  3850.,  6047.,  6811.,  7623.,  8483.,  3394.,  3850.,  4338.,
      4858.,  7783.,  8643.,  9551.,  10507., 4210.,  4730.,  5282.,  5866.,
      9519.,  10475., 11479., 12531., 5026.,  5610.,  6226.,  6874.,  6482.,
      7130.,  7810.,  8522.,  1986.,  2442.,  2930.,  3450.,  4084.,  4804.,
      5588.,  6436.,  5716.,  6564.,  7476.,  8452.,  8550.,  9790.,  11126.,
      12558., 4084.,  4804.,  5588.,  6436.,  6710.,  7886.,  9158.,  10526.,
      5716.,  6564.,  7476.,  8452.,  9158.,  10526., 11990., 13550., 7348.,
      8324.,  9364.,  10468., 9492.,  10596., 11764., 12996., 5746.,  6266.,
      6818.,  7402.,  10004., 11108., 12276., 13508., 1012.,  1732.,  2516.,
      3364.,  7286.,  8718.,  10246., 11870., 1940.,  2532.,  3188.,  3908.,
      9286.,  10654., 12118., 13678., 3060.,  3780.,  4564.,  5412.,  12502.,
      14062., 15718., 17470., 4180.,  5028.,  5940.,  6916.,  6324.,  7300.,
      8340.,  9444.,  5023.,  5787.,  6599.,  7459.,  8646.,  10014., 11478.,
      13038., 11478., 13038., 14694., 16446., 14797., 16897., 19141., 21529.,
      9382.,  10878., 12470., 14158., 12261., 14393., 16669., 19089., 12598.,
      14286., 16070., 17950., 15869., 18033., 20341., 22793., 14598., 16222.,
      17942., 19758., 12374., 13934., 15590., 17342., 3490.,  4074.,  4690.,
      5338.,  8564.,  9796.,  11092., 12452., 6228.,  7076.,  7988.,  8964.,
      13574., 15198., 16918., 18734., 5108.,  5828.,  6612.,  7460.,  13526.,
      15086., 16742., 18494., 6228.,  7076.,  7988.,  8964.,  11430., 12926.,
      14518., 16206., 1012.,  1732.,  2516.,  3364.,  2644.,  3492.,  4404.,
      5380.,  6663.,  7395.,  8175.,  9003.,  9878.,  11182., 12582., 14078.,
      12454., 13950., 15542., 17230., 10117., 12121., 14269., 16561., 8310.,
      9742.,  11270., 12894., 13725., 15761., 17941., 20265., 11526., 13150.,
      14870., 16686., 15285., 17353., 19565., 21921., 11478., 13038., 14694.,
      16446., 12070., 13566., 15158., 16846., 1042.,  1434.,  1858.,  2314.,
      7956.,  9060.,  10228., 11460., 3060.,  3780.,  4564.,  5412.,  12502.,
      14062., 15718., 17470., 4180.,  5028.,  5940.,  6916.,  15718., 17470.,
      19318., 21262., 5300.,  6276.,  7316.,  8420.,  11574., 13262., 15046.,
      16926., 6228.,  7076.,  7988.,  8964.,  8372.,  9348.,  10388., 11492.,
      4207.,  4907.,  5655.,  6451.,  9254.,  10750., 12342., 14030., 12598.,
      14286., 16070., 17950., 15869., 18033., 20341., 22793., 14598., 16222.,
      17942., 19758., 17429., 19625., 21965., 24449., 14550., 16110., 17766.,
      19518., 12653., 14625., 16741., 19001., 12454., 13950., 15542., 17230.,
      7670.,  9102.,  10630., 12254., 4930.,  5386.,  5874.,  6394.,  12660.,
      13892., 15188., 16548., 6228.,  7076.,  7988.,  8964.,  11430., 12926.,
      14518., 16206., 1012.,  1732.,  2516.,  3364.,  7286.,  8718.,  10246.,
      11870., 1940.,  2532.,  3188.,  3908.,  9286.,  10654., 12118., 13678.,
      3060.,  3780.,  4564.,  5412.,  4692.,  5540.,  6452.,  7428.,  3314.,
      3834.,  4386.,  4970.,  7444.,  8548.,  9716.,  10948., 9588.,  10820.,
      12116., 13476., 12278., 13710., 15238., 16862., 8980.,  10084., 11252.,
      12484., 10950., 12318., 13782., 15342., 6324.,  7300.,  8340.,  9444.,
      7574.,  8878.,  10278., 11774., 8980.,  10084., 11252., 12484., 6324.,
      7300.,  8340.,  9444.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   487.,   835.,
      1231.,  1675.,  818.,   1082.,  1378.,  1706.,  1250.,  1578.,  1938.,
      2330.,  893.,   1073.,  1269.,  1481.,  1173.,  1385.,  1613.,  1857.,
      0.,     0.,     0.,     0.,     125.,   305.,   501.,   713.,   149.,
      361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  946.,   1210.,
      1506.,  1834.,  2575.,  3147.,  3767.,  4435.,  1762.,  2090.,  2450.,
      2842.,  2194.,  2586.,  3010.,  3466.,  53.,    137.,   237.,   353.,
      333.,   449.,   581.,   729.,   0.,     0.,     0.,     0.,     130.,
      330.,   562.,   826.,   562.,   826.,   1122.,  1450.,  1428.,  2020.,
      2676.,  3396.,  2548.,  3268.,  4052.,  4900.,  4406.,  5582.,  6854.,
      8222.,  4180.,  5028.,  5940.,  6916.,  5812.,  6788.,  7828.,  8932.,
      3570.,  4090.,  4642.,  5226.,  4514.,  5098.,  5714.,  6362.,  0.,
      0.,     0.,     0.,     2290.,  2810.,  3362.,  3946.,  2530.,  2858.,
      3218.,  3610.,  6836.,  7812.,  8852.,  9956.,  3476.,  4068.,  4724.,
      5444.,  10054., 11422., 12886., 14446., 4596.,  5316.,  6100.,  6948.,
      6228.,  7076.,  7988.,  8964.,  738.,   1066.,  1426.,  1818.,  1682.,
      2074.,  2498.,  2954.,  0.,     0.,     0.,     0.,     1143.,  1683.,
      2271.,  2907.,  2367.,  3003.,  3687.,  4419.,  5574.,  6942.,  8406.,
      9966.,  8406.,  9966.,  11622., 13374., 13677., 15649., 17765., 20025.,
      10406., 11902., 13494., 15182., 11766., 13198., 14726., 16350., 5535.,
      6299.,  7111.,  7971.,  4263.,  4867.,  5519.,  6219.,  0.,     0.,
      0.,     0.,     7042.,  7754.,  8498.,  9274.,  4978.,  5498.,  6050.,
      6634.,  14804., 16164., 17588., 19076., 6836.,  7812.,  8852.,  9956.,
      14390., 16078., 17862., 19742., 1620.,  2468.,  3380.,  4356.,  3764.,
      4740.,  5780.,  6884.,  1458.,  1722.,  2018.,  2346.,  2146.,  2474.,
      2834.,  3226.,  0.,     0.,     0.,     0.,     3442.,  3962.,  4514.,
      5098.,  4642.,  5226.,  5842.,  6490.,  10100., 11332., 12628., 13988.,
      12756., 14116., 15540., 17028., 14982., 16606., 18326., 20142., 12148.,
      13380., 14676., 16036., 10004., 11108., 12276., 13508., 4898.,  5482.,
      6098.,  6746.,  274.,   666.,   1090.,  1546.,  0.,     0.,     0.,
      0.,     5693.,  6129.,  6581.,  7049.,  149.,   361.,   589.,   833.,
      7554.,  8266.,  9010.,  9786.,  1906.,  2426.,  2978.,  3562.,  3791.,
      4619.,  5495.,  6419.,  2018.,  2346.,  2706.,  3098.,  2962.,  3354.,
      3778.,  4234.,  53.,    137.,   237.,   353.,   77.,    193.,   325.,
      473.,   0.,     0.,     0.,     0.,     3317.,  3657.,  4013.,  4385.,
      4109.,  4481.,  4869.,  5273.,  8754.,  9530.,  10338., 11178., 10466.,
      11306., 12178., 13082., 5943.,  6739.,  7583.,  8475.,  6738.,  7386.,
      8066.,  8778.,  322.,   778.,   1266.,  1786.,  173.,   417.,   677.,
      953.,   5.,     25.,    61.,    113.,   0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     29.,    81.,    149.,   233.,   181.,
      265.,   365.,   481.,   386.,   586.,   818.,   1082.,  818.,   1082.,
      1378.,  1706.,  1327.,  1771.,  2263.,  2803.,  1378.,  1706.,  2066.,
      2458.,  2066.,  2458.,  2882.,  3338.,  1301.,  1513.,  1741.,  1985.,
      1709.,  1953.,  2213.,  2489.,  0.,     0.,     0.,     0.,     789.,
      1001.,  1229.,  1473.,  941.,   1185.,  1445.,  1721.,  2546.,  3066.,
      3618.,  4202.,  1762.,  2090.,  2450.,  2842.,  4311.,  4979.,  5695.,
      6459.,  2578.,  2970.,  3394.,  3850.,  3266.,  3722.,  4210.,  4730.,
      77.,    193.,   325.,   473.,   485.,   633.,   797.,   977.,   0.,
      0.,     0.,     0.,     434.,   698.,   994.,   1322.,  1122.,  1450.,
      1810.,  2202.,  2548.,  3268.,  4052.,  4900.,  4180.,  5028.,  5940.,
      6916.,  6854.,  8222.,  9686.,  11246., 5812.,  6788.,  7828.,  8932.,
      7956.,  9060.,  10228., 11460., 4642.,  5226.,  5842.,  6490.,  5842.,
      6490.,  7170.,  7882.,  0.,     0.,     0.,     0.,     3874.,  4458.,
      5074.,  5722.,  3346.,  3738.,  4162.,  4618.,  9492.,  10596., 11764.,
      12996., 4596.,  5316.,  6100.,  6948.,  13270., 14830., 16486., 18238.,
      5716.,  6564.,  7476.,  8452.,  7860.,  8836.,  9876.,  10980., 1042.,
      1434.,  1858.,  2314.,  2242.,  2698.,  3186.,  3706.,  0.,     0.,
      0.,     0.,     1983.,  2619.,  3303.,  4035.,  3591.,  4323.,  5103.,
      5931.,  7830.,  9134.,  10534., 12030., 10406., 11902., 13494., 15182.,
      15237., 17241., 19389., 21681., 10358., 11790., 13318., 14942., 10438.,
      11806., 13270., 14830., 7527.,  8387.,  9295.,  10251., 5615.,  6315.,
      7063.,  7859.,  0.,     0.,     0.,     0.,     8626.,  9402.,  10210.,
      11050., 5794.,  6378.,  6994.,  7642.,  12148., 13380., 14676., 16036.,
      1620.,  2468.,  3380.,  4356.,  10246., 11870., 13590., 15406., 2548.,
      3268.,  4052.,  4900.,  4180.,  5028.,  5940.,  6916.,  1762.,  2090.,
      2450.,  2842.,  2706.,  3098.,  3522.,  3978.,  0.,     0.,     0.,
      0.,     4258.,  4842.,  5458.,  6106.,  5714.,  6362.,  7042.,  7754.,
      10004., 11108., 12276., 13508., 12148., 13380., 14676., 16036., 13654.,
      15214., 16870., 18622., 9492.,  10596., 11764., 12996., 5812.,  6788.,
      7828.,  8932.,  6482.,  7130.,  7810.,  8522.,  1090.,  1546.,  2034.,
      2554.,  0.,     0.,     0.,     0.,     6613.,  7081.,  7565.,  8065.,
      173.,   417.,   677.,   953.,   1266.,  1786.,  2338.,  2922.,  2018.,
      2346.,  2706.,  3098.,  4055.,  4723.,  5439.,  6203.,  82.,    218.,
      386.,   586.,   258.,   458.,   690.,   954.,   333.,   449.,   581.,
      729.,   485.,   633.,   797.,   977.,   0.,     0.,     0.,     0.,
      3853.,  4225.,  4613.,  5017.,  4773.,  5177.,  5597.,  6033.,  5794.,
      6378.,  6994.,  7642.,  6738.,  7386.,  8066.,  8778.,  959.,   1595.,
      2279.,  3011.,  962.,   1418.,  1906.,  2426.,  946.,   1210.,  1506.,
      1834.,  1093.,  1369.,  1661.,  1969.,  29.,    81.,    149.,   233.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     53.,
      137.,   237.,   353.,   333.,   449.,   581.,   729.,   690.,   954.,
      1250.,  1578.,  1378.,  1706.,  2066.,  2458.,  2167.,  2707.,  3295.,
      3931.,  1938.,  2330.,  2754.,  3210.,  2882.,  3338.,  3826.,  4346.,
      1709.,  1953.,  2213.,  2489.,  2245.,  2521.,  2813.,  3121.,  0.,
      0.,     0.,     0.,     1453.,  1697.,  1957.,  2233.,  1733.,  2009.,
      2301.,  2609.,  4130.,  4714.,  5330.,  5978.,  2578.,  2970.,  3394.,
      3850.,  6047.,  6811.,  7623.,  8483.,  3394.,  3850.,  4338.,  4858.,
      4338.,  4858.,  5410.,  5994.,  101.,   249.,   413.,   593.,   637.,
      817.,   1013.,  1225.,  0.,     0.,     0.,     0.,     738.,   1066.,
      1426.,  1818.,  1682.,  2074.,  2498.,  2954.,  3668.,  4516.,  5428.,
      6404.,  5812.,  6788.,  7828.,  8932.,  9302.,  10862., 12518., 14270.,
      7444.,  8548.,  9716.,  10948., 10100., 11332., 12628., 13988., 5714.,
      6362.,  7042.,  7754.,  7170.,  7882.,  8626.,  9402.,  0.,     0.,
      0.,     0.,     5458.,  6106.,  6786.,  7498.,  4162.,  4618.,  5106.,
      5626.,  12148., 13380., 14676., 16036., 5716.,  6564.,  7476.,  8452.,
      16486., 18238., 20086., 22030., 6836.,  7812.,  8852.,  9956.,  9492.,
      10596., 11764., 12996., 1346.,  1802.,  2290.,  2810.,  2802.,  3322.,
      3874.,  4458.,  0.,     0.,     0.,     0.,     2631.,  3107.,  3631.,
      4203.,  3599.,  4171.,  4791.,  5459.,  8038.,  9278.,  10614., 12046.,
      10358., 11790., 13318., 14942., 14749., 16785., 18965., 21289., 13574.,
      15198., 16918., 18734., 13398., 14958., 16614., 18366., 9519.,  10475.,
      11479., 12531., 6967.,  7763.,  8607.,  9499.,  0.,     0.,     0.,
      0.,     4898.,  5482.,  6098.,  6746.,  274.,   666.,   1090.,  1546.,
      7444.,  8548.,  9716.,  10948., 2548.,  3268.,  4052.,  4900.,  12246.,
      13806., 15462., 17214., 3668.,  4516.,  5428.,  6404.,  5812.,  6788.,
      7828.,  8932.,  2066.,  2458.,  2882.,  3338.,  3266.,  3722.,  4210.,
      4730.,  0.,     0.,     0.,     0.,     2834.,  3226.,  3650.,  4106.,
      3522.,  3978.,  4466.,  4986.,  7860.,  8836.,  9876.,  10980., 9492.,
      10596., 11764., 12996., 10278., 11774., 13366., 15054., 12148., 13380.,
      14676., 16036., 7956.,  9060.,  10228., 11460., 8066.,  8778.,  9522.,
      10298., 1906.,  2426.,  2978.,  3562.,  0.,     0.,     0.,     0.,
      173.,   417.,   677.,   953.,   5.,     25.,    61.,    113.,   1122.,
      1450.,  1810.,  2202.,  82.,    218.,   386.,   586.,   2271.,  2779.,
      3335.,  3939.,  386.,   586.,   818.,   1082.,  818.,   1082.,  1378.,
      1706.,  613.,   761.,   925.,   1105.,  893.,   1073.,  1269.,  1481.,
      0.,     0.,     0.,     0.,     101.,   249.,   413.,   593.,   125.,
      305.,   501.,   713.,   786.,   1178.,  1602.,  2058.,  962.,   1418.,
      1906.,  2426.,  2119.,  2595.,  3119.,  3691.,  2546.,  3066.,  3618.,
      4202.,  1762.,  2090.,  2450.,  2842.,  2013.,  2321.,  2645.,  2985.,
      53.,    137.,   237.,   353.,   0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      350.,   1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,
      3644.,  4956.,  6524.,  6490.,  8970.,  11834., 15082., 4956.,  6524.,
      8348.,  10428., 12090., 15338., 18970., 22986., 7324.,  9404.,  11740.,
      14332., 12954., 15946., 19322., 23082., 860.,   2428.,  4252.,  6332.,
      4252.,  6332.,  8668.,  11260., 1884.,  3452.,  5276.,  7356.,  5496.,
      8120.,  11256., 14904., 10232., 13880., 18040., 22712., 10772., 15476.,
      20948., 27188., 19064., 23736., 28920., 34616., 17236., 22452., 28436.,
      35188., 23160., 27832., 33016., 38712., 6676.,  11380., 16852., 23092.,
      6136.,  9784.,  13944., 18616., 9592.,  12216., 15352., 19000., 2588.,
      3644.,  4956.,  6524.,  10232., 13880., 18040., 22712., 5496.,  8120.,
      11256., 14904., 20948., 27188., 34196., 41972., 10232., 13880., 18040.,
      22712., 29460., 36212., 43732., 52020., 6136.,  9784.,  13944., 18616.,
      16852., 23092., 30100., 37876., 9592.,  12216., 15352., 19000., 14328.,
      17976., 22136., 26808., 6490.,  8970.,  11834., 15082., 10772., 15476.,
      20948., 27188., 20948., 27188., 34196., 41972., 20174., 27102., 35182.,
      44414., 29460., 36212., 43732., 52020., 12142., 19326., 27662., 37150.,
      16852., 23092., 30100., 37876., 19854., 26270., 33838., 42558., 20628.,
      26356., 32852., 40116., 6356.,  10548., 15508., 21236., 4956.,  6524.,
      8348.,  10428., 19064., 23736., 28920., 34616., 10232., 13880., 18040.,
      22712., 29460., 36212., 43732., 52020., 6136.,  9784.,  13944., 18616.,
      16852., 23092., 30100., 37876., 9592.,  12216., 15352., 19000., 20628.,
      26356., 32852., 40116., 5496.,  8120.,  11256., 14904., 10232., 13880.,
      18040., 22712., 12090., 15338., 18970., 22986., 17236., 22452., 28436.,
      35188., 29460., 36212., 43732., 52020., 12142., 19326., 27662., 37150.,
      16852., 23092., 30100., 37876., 19854., 26270., 33838., 42558., 20628.,
      26356., 32852., 40116., 11822., 18494., 26318., 35294., 20948., 27188.,
      34196., 41972., 12820., 17524., 22996., 29236., 7324.,  9404.,  11740.,
      14332., 23160., 27832., 33016., 38712., 6136.,  9784.,  13944., 18616.,
      16852., 23092., 30100., 37876., 9592.,  12216., 15352., 19000., 20628.,
      26356., 32852., 40116., 5496.,  8120.,  11256., 14904., 20948., 27188.,
      34196., 41972., 10232., 13880., 18040., 22712., 19064., 23736., 28920.,
      34616., 12954., 15946., 19322., 23082., 6676.,  11380., 16852., 23092.,
      16852., 23092., 30100., 37876., 19854., 26270., 33838., 42558., 20628.,
      26356., 32852., 40116., 11822., 18494., 26318., 35294., 20948., 27188.,
      34196., 41972., 20174., 27102., 35182., 44414., 29460., 36212., 43732.,
      52020., 11092., 16308., 22292., 29044., 860.,   2428.,  4252.,  6332.,
      6136.,  9784.,  13944., 18616., 9592.,  12216., 15352., 19000., 20628.,
      26356., 32852., 40116., 5496.,  8120.,  11256., 14904., 20948., 27188.,
      34196., 41972., 10232., 13880., 18040., 22712., 29460., 36212., 43732.,
      52020., 6136.,  9784.,  13944., 18616., 14968., 19640., 24824., 30520.,
      4252.,  6332.,  8668.,  11260., 9592.,  12216., 15352., 19000., 14328.,
      17976., 22136., 26808., 6356.,  10548., 15508., 21236., 10232., 13880.,
      18040., 22712., 12820., 17524., 22996., 29236., 19064., 23736., 28920.,
      34616., 11092., 16308., 22292., 29044., 14968., 19640., 24824., 30520.,
      14328., 17976., 22136., 26808., 2558.,  3470.,  4510.,  5678.,  6300.,
      8380.,  10716., 13308., 4956.,  6524.,  8348.,  10428., 12090., 15338.,
      18970., 22986., 7324.,  9404.,  11740., 14332., 12954., 15946., 19322.,
      23082., 860.,   2428.,  4252.,  6332.,  5626.,  8362.,  11482., 14986.,
      2588.,  3644.,  4956.,  6524.,  3932.,  5500.,  7324.,  9404.,  6300.,
      8380.,  10716., 13308., 10232., 13880., 18040., 22712., 19064., 23736.,
      28920., 34616., 17236., 22452., 28436., 35188., 23160., 27832., 33016.,
      38712., 6676.,  11380., 16852., 23092., 6136.,  9784.,  13944., 18616.,
      12500., 16692., 21652., 27380., 10232., 13880., 18040., 22712., 5496.,
      8120.,  11256., 14904., 4956.,  6524.,  8348.,  10428., 19064., 23736.,
      28920., 34616., 10232., 13880., 18040., 22712., 29460., 36212., 43732.,
      52020., 6136.,  9784.,  13944., 18616., 16852., 23092., 30100., 37876.,
      9592.,  12216., 15352., 19000., 20628., 26356., 32852., 40116., 5496.,
      8120.,  11256., 14904., 10232., 13880., 18040., 22712., 12090., 15338.,
      18970., 22986., 17236., 22452., 28436., 35188., 29460., 36212., 43732.,
      52020., 12142., 19326., 27662., 37150., 16852., 23092., 30100., 37876.,
      19854., 26270., 33838., 42558., 20628., 26356., 32852., 40116., 11822.,
      18494., 26318., 35294., 20948., 27188., 34196., 41972., 12820., 17524.,
      22996., 29236., 7324.,  9404.,  11740., 14332., 23160., 27832., 33016.,
      38712., 6136.,  9784.,  13944., 18616., 16852., 23092., 30100., 37876.,
      9592.,  12216., 15352., 19000., 20628., 26356., 32852., 40116., 5496.,
      8120.,  11256., 14904., 20948., 27188., 34196., 41972., 10232., 13880.,
      18040., 22712., 19064., 23736., 28920., 34616., 12954., 15946., 19322.,
      23082., 6676.,  11380., 16852., 23092., 16852., 23092., 30100., 37876.,
      19854., 26270., 33838., 42558., 20628., 26356., 32852., 40116., 11822.,
      18494., 26318., 35294., 20948., 27188., 34196., 41972., 20174., 27102.,
      35182., 44414., 29460., 36212., 43732., 52020., 11092., 16308., 22292.,
      29044., 860.,   2428.,  4252.,  6332.,  6136.,  9784.,  13944., 18616.,
      9592.,  12216., 15352., 19000., 20628., 26356., 32852., 40116., 5496.,
      8120.,  11256., 14904., 20948., 27188., 34196., 41972., 10232., 13880.,
      18040., 22712., 29460., 36212., 43732., 52020., 6136.,  9784.,  13944.,
      18616., 14968., 19640., 24824., 30520., 5626.,  8362.,  11482., 14986.,
      12500., 16692., 21652., 27380., 20628., 26356., 32852., 40116., 11822.,
      18494., 26318., 35294., 20948., 27188., 34196., 41972., 20174., 27102.,
      35182., 44414., 29460., 36212., 43732., 52020., 12142., 19326., 27662.,
      37150., 16852., 23092., 30100., 37876., 16916., 21620., 27092., 33332.,
      2588.,  3644.,  4956.,  6524.,  10232., 13880., 18040., 22712., 5496.,
      8120.,  11256., 14904., 20948., 27188., 34196., 41972., 10232., 13880.,
      18040., 22712., 29460., 36212., 43732., 52020., 6136.,  9784.,  13944.,
      18616., 16852., 23092., 30100., 37876., 9592.,  12216., 15352., 19000.,
      14328., 17976., 22136., 26808., 3932.,  5500.,  7324.,  9404.,  5496.,
      8120.,  11256., 14904., 10232., 13880., 18040., 22712., 12820., 17524.,
      22996., 29236., 19064., 23736., 28920., 34616., 11092., 16308., 22292.,
      29044., 14968., 19640., 24824., 30520., 16916., 21620., 27092., 33332.,
      14328., 17976., 22136., 26808., 1400.,  4024.,  7160.,  10808., 4766.,
      5934.,  7230.,  8654.,  10716., 13308., 16156., 19260., 7324.,  9404.,
      11740., 14332., 12954., 15946., 19322., 23082., 860.,   2428.,  4252.,
      6332.,  5626.,  8362.,  11482., 14986., 2588.,  3644.,  4956.,  6524.,
      6490.,  8970.,  11834., 15082., 4956.,  6524.,  8348.,  10428., 8348.,
      10428., 12764., 15356., 10716., 13308., 16156., 19260., 14328., 17976.,
      22136., 26808., 23160., 27832., 33016., 38712., 6676.,  11380., 16852.,
      23092., 6136.,  9784.,  13944., 18616., 12500., 16692., 21652., 27380.,
      10232., 13880., 18040., 22712., 10772., 15476., 20948., 27188., 19064.,
      23736., 28920., 34616., 10232., 13880., 18040., 22712., 7324.,  9404.,
      11740., 14332., 23160., 27832., 33016., 38712., 6136.,  9784.,  13944.,
      18616., 16852., 23092., 30100., 37876., 9592.,  12216., 15352., 19000.,
      20628., 26356., 32852., 40116., 5496.,  8120.,  11256., 14904., 20948.,
      27188., 34196., 41972., 10232., 13880., 18040., 22712., 19064., 23736.,
      28920., 34616., 12954., 15946., 19322., 23082., 6676.,  11380., 16852.,
      23092., 16852., 23092., 30100., 37876., 19854., 26270., 33838., 42558.,
      20628., 26356., 32852., 40116., 11822., 18494., 26318., 35294., 20948.,
      27188., 34196., 41972., 20174., 27102., 35182., 44414., 29460., 36212.,
      43732., 52020., 11092., 16308., 22292., 29044., 860.,   2428.,  4252.,
      6332.,  6136.,  9784.,  13944., 18616., 9592.,  12216., 15352., 19000.,
      20628., 26356., 32852., 40116., 5496.,  8120.,  11256., 14904., 20948.,
      27188., 34196., 41972., 10232., 13880., 18040., 22712., 29460., 36212.,
      43732., 52020., 6136.,  9784.,  13944., 18616., 14968., 19640., 24824.,
      30520., 5626.,  8362.,  11482., 14986., 12500., 16692., 21652., 27380.,
      20628., 26356., 32852., 40116., 11822., 18494., 26318., 35294., 20948.,
      27188., 34196., 41972., 20174., 27102., 35182., 44414., 29460., 36212.,
      43732., 52020., 12142., 19326., 27662., 37150., 16852., 23092., 30100.,
      37876., 16916., 21620., 27092., 33332., 2588.,  3644.,  4956.,  6524.,
      10232., 13880., 18040., 22712., 5496.,  8120.,  11256., 14904., 20948.,
      27188., 34196., 41972., 10232., 13880., 18040., 22712., 29460., 36212.,
      43732., 52020., 6136.,  9784.,  13944., 18616., 16852., 23092., 30100.,
      37876., 9592.,  12216., 15352., 19000., 14328., 17976., 22136., 26808.,
      6490.,  8970.,  11834., 15082., 10772., 15476., 20948., 27188., 20948.,
      27188., 34196., 41972., 20174., 27102., 35182., 44414., 29460., 36212.,
      43732., 52020., 12142., 19326., 27662., 37150., 16852., 23092., 30100.,
      37876., 19854., 26270., 33838., 42558., 20628., 26356., 32852., 40116.,
      6356.,  10548., 15508., 21236., 4956.,  6524.,  8348.,  10428., 19064.,
      23736., 28920., 34616., 10232., 13880., 18040., 22712., 29460., 36212.,
      43732., 52020., 6136.,  9784.,  13944., 18616., 16852., 23092., 30100.,
      37876., 9592.,  12216., 15352., 19000., 20628., 26356., 32852., 40116.,
      5496.,  8120.,  11256., 14904., 10232., 13880., 18040., 22712., 8348.,
      10428., 12764., 15356., 10232., 13880., 18040., 22712., 19064., 23736.,
      28920., 34616., 11092., 16308., 22292., 29044., 14968., 19640., 24824.,
      30520., 16916., 21620., 27092., 33332., 14328., 17976., 22136., 26808.,
      6356.,  10548., 15508., 21236., 10232., 13880., 18040., 22712., 5496.,
      8120.,  11256., 14904.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   446.,   846.,   190.,   590.,   1118.,  1774.,  540.,
      1596.,  2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2938.,  4650.,
      6746.,  9226.,  6300.,  8380.,  10716., 13308., 4956.,  6524.,  8348.,
      10428., 6974.,  8398.,  9950.,  11630., 350.,   1006.,  1790.,  2702.,
      0.,     0.,     0.,     0.,     190.,   590.,   1118.,  1774.,  350.,
      1006.,  1790.,  2702.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,
      4956.,  6524.,  6490.,  8970.,  11834., 15082., 4956.,  6524.,  8348.,
      10428., 8348.,  10428., 12764., 15356., 350.,   1006.,  1790.,  2702.,
      2558.,  3470.,  4510.,  5678.,  0.,     0.,     0.,     0.,     860.,
      2428.,  4252.,  6332.,  4252.,  6332.,  8668.,  11260., 9592.,  12216.,
      15352., 19000., 14328., 17976., 22136., 26808., 6356.,  10548., 15508.,
      21236., 10232., 13880., 18040., 22712., 5496.,  8120.,  11256., 14904.,
      6300.,  8380.,  10716., 13308., 4956.,  6524.,  8348.,  10428., 0.,
      0.,     0.,     0.,     4252.,  6332.,  8668.,  11260., 7004.,  8572.,
      10396., 12476., 14328., 17976., 22136., 26808., 1400.,  4024.,  7160.,
      10808., 14484., 20212., 26708., 33972., 5496.,  8120.,  11256., 14904.,
      10232., 13880., 18040., 22712., 4956.,  6524.,  8348.,  10428., 8348.,
      10428., 12764., 15356., 0.,     0.,     0.,     0.,     7354.,  9578.,
      12186., 15178., 12954., 15946., 19322., 23082., 6676.,  11380., 16852.,
      23092., 16852., 23092., 30100., 37876., 19854., 26270., 33838., 42558.,
      20628., 26356., 32852., 40116., 6356.,  10548., 15508., 21236., 8858.,
      11850., 15226., 18986., 2938.,  4650.,  6746.,  9226.,  0.,     0.,
      0.,     0.,     12764., 15356., 18204., 21308., 5276.,  7356.,  9692.,
      12284., 14968., 19640., 24824., 30520., 14328., 17976., 22136., 26808.,
      27092., 33332., 40340., 48116., 1400.,  4024.,  7160.,  10808., 6136.,
      9784.,  13944., 18616., 2588.,  3644.,  4956.,  6524.,  3932.,  5500.,
      7324.,  9404.,  0.,     0.,     0.,     0.,     5276.,  7356.,  9692.,
      12284., 10716., 13308., 16156., 19260., 14328., 17976., 22136., 26808.,
      23160., 27832., 33016., 38712., 6676.,  11380., 16852., 23092., 6136.,
      9784.,  13944., 18616., 9592.,  12216., 15352., 19000., 3932.,  5500.,
      7324.,  9404.,  540.,   1596.,  2908.,  4476.,  0.,     0.,     0.,
      0.,     6974.,  8398.,  9950.,  11630., 350.,   1006.,  1790.,  2702.,
      12764., 15356., 18204., 21308., 5276.,  7356.,  9692.,  12284., 11226.,
      14730., 18618., 22890., 7004.,  8572.,  10396., 12476., 10396., 12476.,
      14812., 17404., 350.,   1006.,  1790.,  2702.,  510.,   1422.,  2462.,
      3630.,  0.,     0.,     0.,     0.,     350.,   1006.,  1790.,  2702.,
      2558.,  3470.,  4510.,  5678.,  5276.,  7356.,  9692.,  12284., 10716.,
      13308., 16156., 19260., 7354.,  9578.,  12186., 15178., 10396., 12476.,
      14812., 17404., 860.,   2428.,  4252.,  6332.,  510.,   1422.,  2462.,
      3630.,  30.,    174.,   446.,   846.,   0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     190.,   590.,   1118.,  1774.,  1374.,
      2030.,  2814.,  3726.,  2908.,  4476.,  6300.,  8380.,  6300.,  8380.,
      10716., 13308., 5466.,  7946.,  10810., 14058., 10716., 13308., 16156.,
      19260., 7324.,  9404.,  11740., 14332., 10206., 11886., 13694., 15630.,
      510.,   1422.,  2462.,  3630.,  0.,     0.,     0.,     0.,     1374.,
      2030.,  2814.,  3726.,  2558.,  3470.,  4510.,  5678.,  6300.,  8380.,
      10716., 13308., 4956.,  6524.,  8348.,  10428., 12090., 15338., 18970.,
      22986., 7324.,  9404.,  11740., 14332., 12764., 15356., 18204., 21308.,
      510.,   1422.,  2462.,  3630.,  3742.,  4910.,  6206.,  7630.,  0.,
      0.,     0.,     0.,     2588.,  3644.,  4956.,  6524.,  3932.,  5500.,
      7324.,  9404.,  5496.,  8120.,  11256., 14904., 10232., 13880., 18040.,
      22712., 12820., 17524., 22996., 29236., 19064., 23736., 28920., 34616.,
      10232., 13880., 18040., 22712., 10716., 13308., 16156., 19260., 7324.,
      9404.,  11740., 14332., 0.,     0.,     0.,     0.,     3932.,  5500.,
      7324.,  9404.,  540.,   1596.,  2908.,  4476.,  10232., 13880., 18040.,
      22712., 5496.,  8120.,  11256., 14904., 22996., 29236., 36244., 44020.,
      10232., 13880., 18040., 22712., 19064., 23736., 28920., 34616., 7324.,
      9404.,  11740., 14332., 12764., 15356., 18204., 21308., 0.,     0.,
      0.,     0.,     1050.,  3018.,  5370.,  8106.,  5626.,  8362.,  11482.,
      14986., 12500., 16692., 21652., 27380., 20628., 26356., 32852., 40116.,
      11822., 18494., 26318., 35294., 20948., 27188., 34196., 41972., 12820.,
      17524., 22996., 29236., 16506., 20266., 24410., 28938., 5466.,  7946.,
      10810., 14058., 0.,     0.,     0.,     0.,     4252.,  6332.,  8668.,
      11260., 7004.,  8572.,  10396., 12476., 14328., 17976., 22136., 26808.,
      1400.,  4024.,  7160.,  10808., 14484., 20212., 26708., 33972., 5496.,
      8120.,  11256., 14904., 10232., 13880., 18040., 22712., 4956.,  6524.,
      8348.,  10428., 8348.,  10428., 12764., 15356., 0.,     0.,     0.,
      0.,     7004.,  8572.,  10396., 12476., 10396., 12476., 14812., 17404.,
      1400.,  4024.,  7160.,  10808., 6136.,  9784.,  13944., 18616., 12500.,
      16692., 21652., 27380., 10232., 13880., 18040., 22712., 5496.,  8120.,
      11256., 14904., 8348.,  10428., 12764., 15356., 2908.,  4476.,  6300.,
      8380.,  0.,     0.,     0.,     0.,     10206., 11886., 13694., 15630.,
      510.,   1422.,  2462.,  3630.,  4252.,  6332.,  8668.,  11260., 7004.,
      8572.,  10396., 12476., 14138., 17386., 21018., 25034., 540.,   1596.,
      2908.,  4476.,  1884.,  3452.,  5276.,  7356.,  2558.,  3470.,  4510.,
      5678.,  3742.,  4910.,  6206.,  7630.,  0.,     0.,     0.,     0.,
      510.,   1422.,  2462.,  3630.,  3742.,  4910.,  6206.,  7630.,  7004.,
      8572.,  10396., 12476., 10396., 12476., 14812., 17404., 1050.,  3018.,
      5370.,  8106.,  1884.,  3452.,  5276.,  7356.,  2588.,  3644.,  4956.,
      6524.,  3742.,  4910.,  6206.,  7630.,  190.,   590.,   1118.,  1774.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     350.,
      1006.,  1790.,  2702.,  2558.,  3470.,  4510.,  5678.,  5276.,  7356.,
      9692.,  12284., 10716., 13308., 16156., 19260., 7354.,  9578.,  12186.,
      15178., 10396., 12476., 14812., 17404., 860.,   2428.,  4252.,  6332.,
      510.,   1422.,  2462.,  3630.,  30.,    174.,   446.,   846.,   0.,
      0.,     0.,     0.,     2558.,  3470.,  4510.,  5678.,  4766.,  5934.,
      7230.,  8654.,  10716., 13308., 16156., 19260., 7324.,  9404.,  11740.,
      14332., 12954., 15946., 19322., 23082., 860.,   2428.,  4252.,  6332.,
      4252.,  6332.,  8668.,  11260., 30.,    174.,   446.,   846.,   190.,
      590.,   1118.,  1774.,  0.,     0.,     0.,     0.,     4956.,  6524.,
      8348.,  10428., 8348.,  10428., 12764., 15356., 10232., 13880., 18040.,
      22712., 19064., 23736., 28920., 34616., 11092., 16308., 22292., 29044.,
      14968., 19640., 24824., 30520., 14328., 17976., 22136., 26808., 10396.,
      12476., 14812., 17404., 860.,   2428.,  4252.,  6332.,  0.,     0.,
      0.,     0.,     8348.,  10428., 12764., 15356., 2908.,  4476.,  6300.,
      8380.,  19064., 23736., 28920., 34616., 10232., 13880., 18040., 22712.,
      23316., 30068., 37588., 45876., 14328., 17976., 22136., 26808., 23160.,
      27832., 33016., 38712., 860.,   2428.,  4252.,  6332.,  4252.,  6332.,
      8668.,  11260., 0.,     0.,     0.,     0.,     2938.,  4650.,  6746.,
      9226.,  6490.,  8970.,  11834., 15082., 10772., 15476., 20948., 27188.,
      20948., 27188., 34196., 41972., 20174., 27102., 35182., 44414., 29460.,
      36212., 43732., 52020., 11092., 16308., 22292., 29044., 11226., 14730.,
      18618., 22890., 7354.,  9578.,  12186., 15178., 0.,     0.,     0.,
      0.,     3932.,  5500.,  7324.,  9404.,  540.,   1596.,  2908.,  4476.,
      10232., 13880., 18040., 22712., 5496.,  8120.,  11256., 14904., 22996.,
      29236., 36244., 44020., 10232., 13880., 18040., 22712., 19064., 23736.,
      28920., 34616., 7324.,  9404.,  11740., 14332., 12764., 15356., 18204.,
      21308., 0.,     0.,     0.,     0.,     540.,   1596.,  2908.,  4476.,
      1884.,  3452.,  5276.,  7356.,  5496.,  8120.,  11256., 14904., 10232.,
      13880., 18040., 22712., 10772., 15476., 20948., 27188., 19064., 23736.,
      28920., 34616., 10232., 13880., 18040., 22712., 12764., 15356., 18204.,
      21308., 5276.,  7356.,  9692.,  12284., 0.,     0.,     0.,     0.,
      510.,   1422.,  2462.,  3630.,  30.,    174.,   446.,   846.,   3932.,
      5500.,  7324.,  9404.,  540.,   1596.,  2908.,  4476.,  8858.,  11850.,
      15226., 18986., 2908.,  4476.,  6300.,  8380.,  6300.,  8380.,  10716.,
      13308., 4766.,  5934.,  7230.,  8654.,  6974.,  8398.,  9950.,  11630.,
      0.,     0.,     0.,     0.,     30.,    174.,   446.,   846.,   190.,
      590.,   1118.,  1774.,  540.,   1596.,  2908.,  4476.,  1884.,  3452.,
      5276.,  7356.,  2938.,  4650.,  6746.,  9226.,  6300.,  8380.,  10716.,
      13308., 4956.,  6524.,  8348.,  10428., 6974.,  8398.,  9950.,  11630.,
      350.,   1006.,  1790.,  2702.,  0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}