/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_depthwise_conv2d_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/depthwise_conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::DefaultBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;
using GTestTypePairs = sycldnn::types::ToGTestTypes<SNNTypePairs>::type;

template <typename Pair>
using ForwardWindow11Stride4 =
    sycldnn::depthwise_conv2d::WindowStrideTest<Pair, 11, 4>;
TYPED_TEST_SUITE(ForwardWindow11Stride4, GTestTypePairs);
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x15x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15309., 20091., 19319., 13489., 22491., 33025., 29685., 17127.,
      24559., 33805., 33025., 18379., 14137., 21871., 19195., 10429.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x15x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {33025., 29685., 33805., 33025.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x15x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12665., 13434., 17631., 18774., 19043., 20174., 12505., 13282.,
      19123., 20438., 32057., 34018., 28413., 30282., 18595., 19758.,
      21391., 22782., 31541., 33658., 32057., 34018., 17375., 18550.,
      13945., 14834., 21967., 23390., 19763., 21110., 12665., 13434.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x15x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {32057., 34018., 28413., 30282.,
                                         31541., 33658., 32057., 34018.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x15x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14289., 15058., 15827., 16596., 16103., 17246., 18389., 19532.,
      18299., 19430., 20561., 21692., 11337., 12114., 12891., 13668.,
      18435., 19750., 21065., 22380., 32809., 34770., 36731., 38692.,
      26509., 28378., 30247., 32116., 18363., 19526., 20689., 21852.,
      22255., 23646., 25037., 26428., 29701., 31818., 33935., 36052.,
      32809., 34770., 36731., 38692., 16295., 17470., 18645., 19820.,
      12985., 13874., 14763., 15652., 22191., 23614., 25037., 26460.,
      18243., 19590., 20937., 22284., 14289., 15058., 15827., 16596.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x15x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      32809., 34770., 36731., 38692., 26509., 28378., 30247., 32116.,
      29701., 31818., 33935., 36052., 32809., 34770., 36731., 38692.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x15x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11289., 12788., 16125., 18476., 17605., 19996., 13313., 14980.,
      21517., 24108., 29985., 33860., 26985., 30740., 16949., 19292.,
      22277., 24956., 33881., 38004., 29985., 33860., 15853., 18156.,
      12913., 14564., 22581., 25276., 21949., 24556., 11289., 12788.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x15x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {29985., 33860., 26985., 30740.,
                                         33881., 38004., 29985., 33860.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x15x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12225., 12946., 14502., 15272., 16825., 17882., 20266., 21400.,
      17441., 18538., 20962., 22136., 12065., 12898., 14550., 15432.,
      21185., 22522., 25170., 26584., 29897., 31778., 35702., 37704.,
      26833., 28594., 32398., 34280., 17025., 18122., 20514., 21688.,
      22361., 23786., 26522., 28024., 32577., 34706., 38878., 41128.,
      29897., 31778., 35702., 37704., 16665., 17722., 20074., 21208.,
      12065., 12898., 14550., 15432., 21689., 23114., 25818., 27320.,
      20257., 21594., 24210., 25624., 12225., 12946., 14502., 15272.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x15x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29897., 31778., 35702., 37704., 26833., 28594., 32398., 34280.,
      32577., 34706., 38878., 41128., 29897., 31778., 35702., 37704.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x15x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11409., 12130., 12851., 13572., 15114., 15884., 16654., 17424., 15697.,
      16754., 17811., 18868., 21222., 22356., 23490., 24624., 14841., 15938.,
      17035., 18132., 20526., 21700., 22874., 24048., 10497., 11330., 12163.,
      12996., 14650., 15532., 16414., 17296., 19433., 20770., 22107., 23444.,
      26078., 27492., 28906., 30320., 27705., 29586., 31467., 33348., 37274.,
      39276., 41278., 43280., 24769., 26530., 28291., 30052., 33858., 35740.,
      37622., 39504., 14841., 15938., 17035., 18132., 20526., 21700., 22874.,
      24048., 19393., 20818., 22243., 23668., 26390., 27892., 29394., 30896.,
      29745., 31874., 34003., 36132., 40306., 42556., 44806., 47056., 27705.,
      29586., 31467., 33348., 37274., 39276., 41278., 43280., 15697., 16754.,
      17811., 18868., 21222., 22356., 23490., 24624., 10497., 11330., 12163.,
      12996., 14650., 15532., 16414., 17296., 19393., 20818., 22243., 23668.,
      26390., 27892., 29394., 30896., 19433., 20770., 22107., 23444., 26078.,
      27492., 28906., 30320., 11409., 12130., 12851., 13572., 15114., 15884.,
      16654., 17424.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x15x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27705., 29586., 31467., 33348., 37274., 39276., 41278., 43280.,
      24769., 26530., 28291., 30052., 33858., 35740., 37622., 39504.,
      29745., 31874., 34003., 36132., 40306., 42556., 44806., 47056.,
      27705., 29586., 31467., 33348., 37274., 39276., 41278., 43280.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x15x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12289., 13796., 15401., 17104., 18813., 21236., 23813., 26544.,
      19405., 21780., 24309., 26992., 11249., 12740., 14329., 16016.,
      17981., 20340., 22853., 25520., 30025., 33732., 37681., 41872.,
      28793., 32548., 36545., 40784., 18605., 20948., 23445., 26096.,
      19693., 22100., 24661., 27376., 28793., 32548., 36545., 40784.,
      30025., 33732., 37681., 41872., 18525., 20916., 23461., 26160.,
      11249., 12740., 14329., 16016., 19405., 21780., 24309., 26992.,
      17181., 19508., 21989., 24624., 12289., 13796., 15401., 17104.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x15x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30025., 33732., 37681., 41872., 28793., 32548., 36545., 40784.,
      28793., 32548., 36545., 40784., 30025., 33732., 37681., 41872.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x15x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11281., 12002., 13446., 14216., 15807., 16626., 18364., 19232., 18277.,
      19450., 21766., 23016., 25563., 26890., 29668., 31072., 17461., 18586.,
      20854., 22056., 24555., 25834., 28564., 29920., 11281., 12002., 13446.,
      14216., 15807., 16626., 18364., 19232., 17461., 18586., 20854., 22056.,
      24555., 25834., 28564., 29920., 28441., 30226., 33814., 35720., 39671.,
      41698., 46012., 48160., 27977., 29810., 33446., 35400., 39399., 41474.,
      45836., 48032., 17461., 18586., 20854., 22056., 24555., 25834., 28564.,
      29920., 18277., 19450., 21766., 23016., 25563., 26890., 29668., 31072.,
      27977., 29810., 33446., 35400., 39399., 41474., 45836., 48032., 28441.,
      30226., 33814., 35720., 39671., 41698., 46012., 48160., 18277., 19450.,
      21766., 23016., 25563., 26890., 29668., 31072., 11281., 12002., 13446.,
      14216., 15807., 16626., 18364., 19232., 18277., 19450., 21766., 23016.,
      25563., 26890., 29668., 31072., 17461., 18586., 20854., 22056., 24555.,
      25834., 28564., 29920., 11281., 12002., 13446., 14216., 15807., 16626.,
      18364., 19232.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x15x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28441., 30226., 33814., 35720., 39671., 41698., 46012., 48160.,
      27977., 29810., 33446., 35400., 39399., 41474., 45836., 48032.,
      27977., 29810., 33446., 35400., 39399., 41474., 45836., 48032.,
      28441., 30226., 33814., 35720., 39671., 41698., 46012., 48160.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x15x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7249.,  7970.,  8691.,  9412.,  10762., 11532., 12302., 13072., 14667.,
      15486., 16305., 17124., 18964., 19832., 20700., 21568., 11765., 12938.,
      14111., 15284., 17450., 18700., 19950., 21200., 23751., 25078., 26405.,
      27732., 30668., 32072., 33476., 34880., 11205., 12330., 13455., 14580.,
      16698., 17900., 19102., 20304., 22807., 24086., 25365., 26644., 29532.,
      30888., 32244., 33600., 7249.,  7970.,  8691.,  9412.,  10762., 11532.,
      12302., 13072., 14667., 15486., 16305., 17124., 18964., 19832., 20700.,
      21568., 11205., 12330., 13455., 14580., 16698., 17900., 19102., 20304.,
      22807., 24086., 25365., 26644., 29532., 30888., 32244., 33600., 18105.,
      19890., 21675., 23460., 26810., 28716., 30622., 32528., 36483., 38510.,
      40537., 42564., 47124., 49272., 51420., 53568., 18153., 19986., 21819.,
      23652., 27050., 29004., 30958., 32912., 36915., 38990., 41065., 43140.,
      47748., 49944., 52140., 54336., 11205., 12330., 13455., 14580., 16698.,
      17900., 19102., 20304., 22807., 24086., 25365., 26644., 29532., 30888.,
      32244., 33600., 11765., 12938., 14111., 15284., 17450., 18700., 19950.,
      21200., 23751., 25078., 26405., 27732., 30668., 32072., 33476., 34880.,
      18153., 19986., 21819., 23652., 27050., 29004., 30958., 32912., 36915.,
      38990., 41065., 43140., 47748., 49944., 52140., 54336., 18105., 19890.,
      21675., 23460., 26810., 28716., 30622., 32528., 36483., 38510., 40537.,
      42564., 47124., 49272., 51420., 53568., 11765., 12938., 14111., 15284.,
      17450., 18700., 19950., 21200., 23751., 25078., 26405., 27732., 30668.,
      32072., 33476., 34880., 7249.,  7970.,  8691.,  9412.,  10762., 11532.,
      12302., 13072., 14667., 15486., 16305., 17124., 18964., 19832., 20700.,
      21568., 11765., 12938., 14111., 15284., 17450., 18700., 19950., 21200.,
      23751., 25078., 26405., 27732., 30668., 32072., 33476., 34880., 11205.,
      12330., 13455., 14580., 16698., 17900., 19102., 20304., 22807., 24086.,
      25365., 26644., 29532., 30888., 32244., 33600., 7249.,  7970.,  8691.,
      9412.,  10762., 11532., 12302., 13072., 14667., 15486., 16305., 17124.,
      18964., 19832., 20700., 21568.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x15x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18105., 19890., 21675., 23460., 26810., 28716., 30622., 32528.,
      36483., 38510., 40537., 42564., 47124., 49272., 51420., 53568.,
      18153., 19986., 21819., 23652., 27050., 29004., 30958., 32912.,
      36915., 38990., 41065., 43140., 47748., 49944., 52140., 54336.,
      18153., 19986., 21819., 23652., 27050., 29004., 30958., 32912.,
      36915., 38990., 41065., 43140., 47748., 49944., 52140., 54336.,
      18105., 19890., 21675., 23460., 26810., 28716., 30622., 32528.,
      36483., 38510., 40537., 42564., 47124., 49272., 51420., 53568.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x16x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11156., 18227., 23439., 16737., 16828., 26973., 34609., 23639.,
      16828., 26973., 34609., 23639., 10340., 16655., 21243., 14469.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x16x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {25064., 32700., 25064., 32700.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x16x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9932.,  10568., 17051., 18118., 21919., 23294., 15509., 16482.,
      15852., 16888., 26907., 28634., 34399., 36610., 23797., 25358.,
      15852., 16888., 26907., 28634., 34399., 36610., 23797., 25358.,
      10156., 10792., 16915., 17982., 21687., 23062., 15101., 16074.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x16x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {25034., 26640., 32526., 34616.,
                                         25034., 26640., 32526., 34616.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x16x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9628.,  10264., 10900., 11536., 16555., 17622., 18689., 19756.,
      21247., 22622., 23997., 25372., 14205., 15178., 16151., 17124.,
      15500., 16536., 17572., 18608., 26039., 27766., 29493., 31220.,
      33243., 35454., 37665., 39876., 23473., 25034., 26595., 28156.,
      15500., 16536., 17572., 18608., 26039., 27766., 29493., 31220.,
      33243., 35454., 37665., 39876., 23473., 25034., 26595., 28156.,
      9372.,  10008., 10644., 11280., 15387., 16454., 17521., 18588.,
      19887., 21262., 22637., 24012., 14861., 15834., 16807., 17780.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x16x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.,
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x16x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6744.,  8080.,  15317., 17612., 25053., 27964., 19321., 21380.,
      10904., 13040., 24325., 27892., 39309., 43844., 29049., 32220.,
      10904., 13040., 24325., 27892., 39309., 43844., 29049., 32220.,
      7128.,  8528.,  15837., 18108., 25381., 28268., 18305., 20308.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x16x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20579., 23904., 35563., 39856.,
                                         20579., 23904., 35563., 39856.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x16x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6896.,  7344.,  8744.,  9248.,  15265., 16266., 18594., 19672.,
      24649., 26266., 29210., 30904., 17801., 19026., 21070., 22344.,
      10480., 11184., 13384., 14176., 23429., 25002., 28618., 30312.,
      37837., 40378., 44962., 47624., 28557., 30482., 33702., 35704.,
      10480., 11184., 13384., 14176., 23429., 25002., 28618., 30312.,
      37837., 40378., 44962., 47624., 28557., 30482., 33702., 35704.,
      6384.,  6832.,  8232.,  8736.,  14513., 15514., 17794., 18872.,
      23513., 25130., 28026., 29720., 18585., 19810., 21870., 23144.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x16x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.,
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x16x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5664.,  6112.,  6560.,  7008.,  8408.,  8912.,  9416.,  9920.,  12761.,
      13762., 14763., 15764., 18062., 19140., 20218., 21296., 20673., 22290.,
      23907., 25524., 28438., 30132., 31826., 33520., 15561., 16786., 18011.,
      19236., 21282., 22556., 23830., 25104., 8992.,  9696.,  10400., 11104.,
      13304., 14096., 14888., 15680., 20197., 21770., 23343., 24916., 28534.,
      30228., 31922., 33616., 32685., 35226., 37767., 40308., 44894., 47556.,
      50218., 52880., 24661., 26586., 28511., 30436., 33658., 35660., 37662.,
      39664., 8992.,  9696.,  10400., 11104., 13304., 14096., 14888., 15680.,
      20197., 21770., 23343., 24916., 28534., 30228., 31922., 33616., 32685.,
      35226., 37767., 40308., 44894., 47556., 50218., 52880., 24661., 26586.,
      28511., 30436., 33658., 35660., 37662., 39664., 5664.,  6112.,  6560.,
      7008.,  8408.,  8912.,  9416.,  9920.,  12761., 13762., 14763., 15764.,
      18062., 19140., 20218., 21296., 20673., 22290., 23907., 25524., 28438.,
      30132., 31826., 33520., 15561., 16786., 18011., 19236., 21282., 22556.,
      23830., 25104.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x16x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17075., 18406., 19737., 21068., 24444., 25896., 27348., 28800.,
      29563., 31862., 34161., 36460., 40804., 43224., 45644., 48064.,
      17075., 18406., 19737., 21068., 24444., 25896., 27348., 28800.,
      29563., 31862., 34161., 36460., 40804., 43224., 45644., 48064.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x16x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12952., 14688., 16536., 18496., 14893., 17172., 19605., 22192.,
      21245., 23860., 26629., 29552., 11809., 13412., 15113., 16912.,
      19640., 22368., 25272., 28352., 23937., 27476., 31257., 35280.,
      31633., 35700., 40009., 44560., 19461., 21988., 24669., 27504.,
      19640., 22368., 25272., 28352., 23937., 27476., 31257., 35280.,
      31633., 35700., 40009., 44560., 19461., 21988., 24669., 27504.,
      11928., 13664., 15512., 17472., 15485., 17716., 20101., 22640.,
      19021., 21588., 24309., 27184., 12849., 14468., 16185., 18000.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x16x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.,
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x16x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10600., 11440., 13120., 14016., 15864., 16816., 18832., 19840., 12885.,
      13914., 16086., 17192., 19595., 20778., 23412., 24672., 17061., 18426.,
      20934., 22376., 25115., 26634., 29604., 31200., 10497., 11330., 12886.,
      13768., 15471., 16402., 18252., 19232., 16840., 18160., 20800., 22208.,
      25112., 26608., 29776., 31360., 20529., 22146., 25566., 27304., 31087.,
      32946., 37092., 39072., 27201., 29346., 33294., 35560., 39871., 42258.,
      46932., 49440., 16685., 17994., 20446., 21832., 24515., 25978., 28892.,
      30432., 16840., 18160., 20800., 22208., 25112., 26608., 29776., 31360.,
      20529., 22146., 25566., 27304., 31087., 32946., 37092., 39072., 27201.,
      29346., 33294., 35560., 39871., 42258., 46932., 49440., 16685., 17994.,
      20446., 21832., 24515., 25978., 28892., 30432., 10600., 11440., 13120.,
      14016., 15864., 16816., 18832., 19840., 12885., 13914., 16086., 17192.,
      19595., 20778., 23412., 24672., 17061., 18426., 20934., 22376., 25115.,
      26634., 29604., 31200., 10497., 11330., 12886., 13768., 15471., 16402.,
      18252., 19232.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x16x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19245., 20730., 24018., 25624., 29275., 31002., 35016., 36864.,
      25917., 27930., 31746., 33880., 38059., 40314., 44856., 47232.,
      19245., 20730., 24018., 25624., 29275., 31002., 35016., 36864.,
      25917., 27930., 31746., 33880., 38059., 40314., 44856., 47232.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x16x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7432.,  8272.,  9112.,  9952.,  11520., 12416., 13312., 14208., 16056.,
      17008., 17960., 18912., 21040., 22048., 23056., 24064., 9061.,  10090.,
      11119., 12148., 14170., 15276., 16382., 17488., 19895., 21078., 22261.,
      23444., 26236., 27496., 28756., 30016., 11957., 13322., 14687., 16052.,
      18410., 19852., 21294., 22736., 25479., 26998., 28517., 30036., 33164.,
      34760., 36356., 37952., 7361.,  8194.,  9027.,  9860.,  11322., 12204.,
      13086., 13968., 15675., 16606., 17537., 18468., 20420., 21400., 22380.,
      23360., 11752., 13072., 14392., 15712., 18176., 19584., 20992., 22400.,
      25304., 26800., 28296., 29792., 33136., 34720., 36304., 37888., 14353.,
      15970., 17587., 19204., 22386., 24124., 25862., 27600., 31387., 33246.,
      35105., 36964., 41356., 43336., 45316., 47296., 18977., 21122., 23267.,
      25412., 29122., 31388., 33654., 35920., 40235., 42622., 45009., 47396.,
      52316., 54824., 57332., 59840., 11645., 12954., 14263., 15572., 17874.,
      19260., 20646., 22032., 24719., 26182., 27645., 29108., 32180., 33720.,
      35260., 36800., 11752., 13072., 14392., 15712., 18176., 19584., 20992.,
      22400., 25304., 26800., 28296., 29792., 33136., 34720., 36304., 37888.,
      14353., 15970., 17587., 19204., 22386., 24124., 25862., 27600., 31387.,
      33246., 35105., 36964., 41356., 43336., 45316., 47296., 18977., 21122.,
      23267., 25412., 29122., 31388., 33654., 35920., 40235., 42622., 45009.,
      47396., 52316., 54824., 57332., 59840., 11645., 12954., 14263., 15572.,
      17874., 19260., 20646., 22032., 24719., 26182., 27645., 29108., 32180.,
      33720., 35260., 36800., 7432.,  8272.,  9112.,  9952.,  11520., 12416.,
      13312., 14208., 16056., 17008., 17960., 18912., 21040., 22048., 23056.,
      24064., 9061.,  10090., 11119., 12148., 14170., 15276., 16382., 17488.,
      19895., 21078., 22261., 23444., 26236., 27496., 28756., 30016., 11957.,
      13322., 14687., 16052., 18410., 19852., 21294., 22736., 25479., 26998.,
      28517., 30036., 33164., 34760., 36356., 37952., 7361.,  8194.,  9027.,
      9860.,  11322., 12204., 13086., 13968., 15675., 16606., 17537., 18468.,
      20420., 21400., 22380., 23360.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x16x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13453., 14938., 16423., 17908., 20958., 22564., 24170., 25776.,
      29431., 31158., 32885., 34612., 38872., 40720., 42568., 44416.,
      18077., 20090., 22103., 24116., 27694., 29828., 31962., 34096.,
      38279., 40534., 42789., 45044., 49832., 52208., 54584., 56960.,
      13453., 14938., 16423., 17908., 20958., 22564., 24170., 25776.,
      29431., 31158., 32885., 34612., 38872., 40720., 42568., 44416.,
      18077., 20090., 22103., 24116., 27694., 29828., 31962., 34096.,
      38279., 40534., 42789., 45044., 49832., 52208., 54584., 56960.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x18x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14014., 21854., 23290., 20966., 11694.,
                                         21594., 32662., 31626., 29292., 14880.,
                                         21362., 31678., 30002., 27812., 16360.,
                                         13910., 20030., 19626., 16442., 8202.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x18x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {32662., 31626., 31678., 30002.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x18x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12226., 13020., 18832., 20092., 20532., 21812., 18807., 19948.,
      10421., 11100., 18638., 19860., 31340., 33324., 30128., 32148.,
      30431., 32216., 15405., 16416., 18614., 19908., 33236., 35196.,
      29816., 31716., 27231., 29000., 17261., 18352., 12866., 13708.,
      20160., 21468., 21444., 22708., 16255., 17364., 8941.,  9588.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x18x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {31340., 33324., 30128., 32148.,
                                         33236., 35196., 29816., 31716.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x18x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12074., 12868., 13662., 14456., 19380., 20640., 21900., 23160., 19048.,
      20328., 21608., 22888., 17241., 18382., 19523., 20664., 10051., 10730.,
      11409., 12088., 18070., 19292., 20514., 21736., 29304., 31288., 33272.,
      35256., 29788., 31808., 33828., 35848., 27141., 28926., 30711., 32496.,
      14599., 15610., 16621., 17632., 19230., 20524., 21818., 23112., 29792.,
      31752., 33712., 35672., 28004., 29904., 31804., 33704., 26901., 28670.,
      30439., 32208., 16695., 17786., 18877., 19968., 12410., 13252., 14094.,
      14936., 18788., 20096., 21404., 22712., 18712., 19976., 21240., 22504.,
      16393., 17502., 18611., 19720., 8947.,  9594.,  10241., 10888.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x18x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29304., 31288., 33272., 35256., 29788., 31808., 33828., 35848.,
      29792., 31752., 33712., 35672., 28004., 29904., 31804., 33704.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x18x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11979., 13560., 20287., 22840., 19015., 21544., 16534., 18776.,
      10442., 11768., 16995., 19368., 29607., 33496., 31535., 35560.,
      28174., 31792., 14194., 16256., 19955., 22536., 30359., 34296.,
      27679., 31496., 26894., 30416., 17138., 19296., 12867., 14488.,
      19415., 21944., 19999., 22504., 16310., 18536., 8554.,  9832.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x18x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {29607., 33496., 31535., 35560.,
                                         30359., 34296., 27679., 31496.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x18x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11923., 12726., 14364., 15216., 19763., 21022., 23608., 24944., 18011.,
      19246., 21808., 23120., 16136., 17196., 19462., 20592., 9936.,  10548.,
      11874., 12528., 16455., 17574., 20004., 21200., 28103., 29998., 33936.,
      35952., 30543., 32574., 36648., 38800., 28184., 29980., 33646., 35552.,
      13312., 14308., 16410., 17472., 19607., 20934., 23572., 24976., 30071.,
      32014., 36000., 38064., 25599., 27422., 31288., 33232., 25720., 27420.,
      30990., 32800., 17056., 18148., 20346., 21504., 12003., 12806., 14428.,
      15280., 17763., 19022., 21560., 22896., 18699., 19934., 22448., 23760.,
      15944., 17004., 19238., 20368., 8688.,  9300.,  10626., 11280.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x18x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28103., 29998., 33936., 35952., 30543., 32574., 36648., 38800.,
      30071., 32014., 36000., 38064., 25599., 27422., 31288., 33232.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x18x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10275., 11078., 11881., 12684., 14308., 15160., 16012., 16864., 16123.,
      17382., 18641., 19900., 22456., 23792., 25128., 26464., 15715., 16950.,
      18185., 19420., 21952., 23264., 24576., 25888., 14060., 15120., 16180.,
      17240., 19490., 20620., 21750., 22880., 8220.,  8832.,  9444.,  10056.,
      11382., 12036., 12690., 13344., 14351., 15470., 16589., 17708., 20124.,
      21320., 22516., 23712., 24359., 26254., 28149., 30044., 33984., 36000.,
      38016., 40032., 26031., 28062., 30093., 32124., 36200., 38352., 40504.,
      42656., 23756., 25552., 27348., 29144., 32810., 34716., 36622., 38528.,
      13340., 14336., 15332., 16328., 18446., 19508., 20570., 21632., 16863.,
      18190., 19517., 20844., 23468., 24872., 26276., 27680., 25175., 27118.,
      29061., 31004., 34992., 37056., 39120., 41184., 23519., 25342., 27165.,
      28988., 32856., 34800., 36744., 38688., 22508., 24208., 25908., 27608.,
      31178., 32988., 34798., 36608., 14588., 15680., 16772., 17864., 20078.,
      21236., 22394., 23552., 10275., 11078., 11881., 12684., 14308., 15160.,
      16012., 16864., 16123., 17382., 18641., 19900., 22456., 23792., 25128.,
      26464., 15715., 16950., 18185., 19420., 21952., 23264., 24576., 25888.,
      14060., 15120., 16180., 17240., 19490., 20620., 21750., 22880., 8220.,
      8832.,  9444.,  10056., 11382., 12036., 12690., 13344.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x18x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24359., 26254., 28149., 30044., 33984., 36000., 38016., 40032.,
      26031., 28062., 30093., 32124., 36200., 38352., 40504., 42656.,
      25175., 27118., 29061., 31004., 34992., 37056., 39120., 41184.,
      23519., 25342., 27165., 28988., 32856., 34800., 36744., 38688.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x18x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10629., 12140., 13749., 15456., 17585., 19964., 22497., 25184., 17089.,
      19484., 22033., 24736., 16358., 18520., 20822., 23264., 9066.,  10344.,
      11706., 13152., 16393., 18764., 21289., 23968., 27557., 31260., 35205.,
      39392., 25525., 29244., 33205., 37408., 25854., 29240., 32846., 36672.,
      13810., 15816., 17954., 20224., 16393., 18764., 21289., 23968., 27557.,
      31260., 35205., 39392., 25525., 29244., 33205., 37408., 25854., 29240.,
      32846., 36672., 13810., 15816., 17954., 20224., 10805., 12300., 13893.,
      15584., 16193., 18524., 21009., 23648., 16977., 19324., 21825., 24480.,
      14982., 17112., 19382., 21792., 9642.,  10920., 12282., 13728.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x18x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27557., 31260., 35205., 39392., 25525., 29244., 33205., 37408.,
      27557., 31260., 35205., 39392., 25525., 29244., 33205., 37408.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x18x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9109.,  9834.,  11282., 12056., 13651., 14474., 16216., 17088., 14585.,
      15714., 17986., 19192., 21695., 22978., 25712., 27072., 14601., 15746.,
      18034., 19256., 21775., 23074., 25824., 27200., 13898., 14924., 17000.,
      18096., 20382., 21548., 24044., 25280., 8406.,  9012.,  10248., 10896.,
      12258., 12948., 14436., 15168., 14401., 15538., 17818., 19032., 21543.,
      22834., 25576., 26944., 22997., 24778., 28362., 30264., 34211., 36234.,
      40544., 42688., 23013., 24810., 28410., 30328., 34291., 36330., 40656.,
      42816., 21954., 23580., 26856., 28592., 32198., 34044., 37980., 39936.,
      13342., 14308., 16264., 17296., 19450., 20548., 22900., 24064., 14401.,
      15538., 17818., 19032., 21543., 22834., 25576., 26944., 22997., 24778.,
      28362., 30264., 34211., 36234., 40544., 42688., 23013., 24810., 28410.,
      30328., 34291., 36330., 40656., 42816., 21954., 23580., 26856., 28592.,
      32198., 34044., 37980., 39936., 13342., 14308., 16264., 17296., 19450.,
      20548., 22900., 24064., 9109.,  9834.,  11282., 12056., 13651., 14474.,
      16216., 17088., 14585., 15714., 17986., 19192., 21695., 22978., 25712.,
      27072., 14601., 15746., 18034., 19256., 21775., 23074., 25824., 27200.,
      13898., 14924., 17000., 18096., 20382., 21548., 24044., 25280., 8406.,
      9012.,  10248., 10896., 12258., 12948., 14436., 15168.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x18x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22997., 24778., 28362., 30264., 34211., 36234., 40544., 42688.,
      23013., 24810., 28410., 30328., 34291., 36330., 40656., 42816.,
      22997., 24778., 28362., 30264., 34211., 36234., 40544., 42688.,
      23013., 24810., 28410., 30328., 34291., 36330., 40656., 42816.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x15x18x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6229.,  6954.,  7679.,  8404.,  9758.,  10532., 11306., 12080., 13679.,
      14502., 15325., 16148., 17992., 18864., 19736., 20608., 10057., 11186.,
      12315., 13444., 15566., 16772., 17978., 19184., 21691., 22974., 24257.,
      25540., 28432., 29792., 31152., 32512., 10073., 11218., 12363., 13508.,
      15646., 16868., 18090., 19312., 21835., 23134., 24433., 25732., 28640.,
      30016., 31392., 32768., 9394.,  10420., 11446., 12472., 14408., 15504.,
      16600., 17696., 19982., 21148., 22314., 23480., 26116., 27352., 28588.,
      29824., 5550.,  6156.,  6762.,  7368.,  8520.,  9168.,  9816.,  10464.,
      11826., 12516., 13206., 13896., 15468., 16200., 16932., 17664., 9809.,
      10946., 12083., 13220., 15350., 16564., 17778., 18992., 21507., 22798.,
      24089., 25380., 28280., 29648., 31016., 32384., 15797., 17578., 19359.,
      21140., 24486., 26388., 28290., 30192., 34143., 36166., 38189., 40212.,
      44768., 46912., 49056., 51200., 15813., 17610., 19407., 21204., 24566.,
      26484., 28402., 30320., 34287., 36326., 38365., 40404., 44976., 47136.,
      49296., 51456., 14794., 16420., 18046., 19672., 22728., 24464., 26200.,
      27936., 31542., 33388., 35234., 37080., 41236., 43192., 45148., 47104.,
      8790.,  9756.,  10722., 11688., 13512., 14544., 15576., 16608., 18762.,
      19860., 20958., 22056., 24540., 25704., 26868., 28032., 9809.,  10946.,
      12083., 13220., 15350., 16564., 17778., 18992., 21507., 22798., 24089.,
      25380., 28280., 29648., 31016., 32384., 15797., 17578., 19359., 21140.,
      24486., 26388., 28290., 30192., 34143., 36166., 38189., 40212., 44768.,
      46912., 49056., 51200., 15813., 17610., 19407., 21204., 24566., 26484.,
      28402., 30320., 34287., 36326., 38365., 40404., 44976., 47136., 49296.,
      51456., 14794., 16420., 18046., 19672., 22728., 24464., 26200., 27936.,
      31542., 33388., 35234., 37080., 41236., 43192., 45148., 47104., 8790.,
      9756.,  10722., 11688., 13512., 14544., 15576., 16608., 18762., 19860.,
      20958., 22056., 24540., 25704., 26868., 28032., 6229.,  6954.,  7679.,
      8404.,  9758.,  10532., 11306., 12080., 13679., 14502., 15325., 16148.,
      17992., 18864., 19736., 20608., 10057., 11186., 12315., 13444., 15566.,
      16772., 17978., 19184., 21691., 22974., 24257., 25540., 28432., 29792.,
      31152., 32512., 10073., 11218., 12363., 13508., 15646., 16868., 18090.,
      19312., 21835., 23134., 24433., 25732., 28640., 30016., 31392., 32768.,
      9394.,  10420., 11446., 12472., 14408., 15504., 16600., 17696., 19982.,
      21148., 22314., 23480., 26116., 27352., 28588., 29824., 5550.,  6156.,
      6762.,  7368.,  8520.,  9168.,  9816.,  10464., 11826., 12516., 13206.,
      13896., 15468., 16200., 16932., 17664.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x15x18x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15797., 17578., 19359., 21140., 24486., 26388., 28290., 30192.,
      34143., 36166., 38189., 40212., 44768., 46912., 49056., 51200.,
      15813., 17610., 19407., 21204., 24566., 26484., 28402., 30320.,
      34287., 36326., 38365., 40404., 44976., 47136., 49296., 51456.,
      15797., 17578., 19359., 21140., 24486., 26388., 28290., 30192.,
      34143., 36166., 38189., 40212., 44768., 46912., 49056., 51200.,
      15813., 17610., 19407., 21204., 24566., 26484., 28402., 30320.,
      34287., 36326., 38365., 40404., 44976., 47136., 49296., 51456.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x15x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14384., 20016., 21024., 15008., 22680., 30780., 29680., 18264.,
      21100., 31752., 30780., 18044., 11824., 19268., 20240., 12216.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x15x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {33025., 29685., 33805., 33025.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x15x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12708., 13568., 20164., 21472., 19972., 21312., 14180., 15104.,
      21834., 23184., 30872., 32888., 29660., 31584., 17346., 18544.,
      20006., 21304., 32916., 34960., 30872., 32888., 18302., 19512.,
      11272., 12000., 19990., 21256., 21882., 23200., 12176., 13008.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x15x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {32057., 34018., 28413., 30282.,
                                         31541., 33658., 32057., 34018.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x15x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11692., 12552., 13412., 14272., 20460., 21768., 23076., 24384.,
      19916., 21256., 22596., 23936., 13804., 14728., 15652., 16576.,
      21358., 22708., 24058., 25408., 28624., 30640., 32656., 34672.,
      29236., 31160., 33084., 35008., 17462., 18660., 19858., 21056.,
      19162., 20460., 21758., 23056., 31788., 33832., 35876., 37920.,
      28624., 30640., 32656., 34672., 18722., 19932., 21142., 22352.,
      10616., 11344., 12072., 12800., 18042., 19308., 20574., 21840.,
      20110., 21428., 22746., 24064., 11360., 12192., 13024., 13856.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x15x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      32809., 34770., 36731., 38692., 26509., 28378., 30247., 32116.,
      29701., 31818., 33935., 36052., 32809., 34770., 36731., 38692.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x15x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13816., 15616., 19000., 21696., 19192., 21888., 13304., 15104.,
      21947., 24608., 30943., 34928., 26535., 30272., 15475., 17760.,
      20787., 23408., 32919., 37024., 30943., 34928., 16811., 19184.,
      11375., 12928., 21059., 23696., 22347., 25024., 12871., 14496.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x15x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {29985., 33860., 26985., 30740.,
                                         33881., 38004., 29985., 33860.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x15x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13072., 13968., 15816., 16768., 18352., 19600., 22344., 23680.,
      18480., 19728., 22472., 23808., 13584., 14480., 16328., 17280.,
      21143., 22550., 25268., 26752., 29207., 31198., 35232., 37344.,
      25503., 27246., 31032., 32896., 15351., 16390., 18724., 19840.,
      20655., 22022., 24700., 26144., 31247., 33358., 37512., 39744.,
      29207., 31198., 35232., 37344., 16655., 17782., 20204., 21408.,
      10623., 11358., 12912., 13696., 20047., 21414., 24060., 25504.,
      20279., 21686., 24372., 25856., 12511., 13358., 15040., 15936.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x15x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29897., 31778., 35702., 37704., 26833., 28594., 32398., 34280.,
      32577., 34706., 38878., 41128., 29897., 31778., 35702., 37704.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x15x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11168., 12064., 12960., 13856., 15704., 16656., 17608., 18560., 15744.,
      16992., 18240., 19488., 22232., 23568., 24904., 26240., 16000., 17248.,
      18496., 19744., 22488., 23824., 25160., 26496., 11680., 12576., 13472.,
      14368., 16216., 17168., 18120., 19072., 17679., 19086., 20493., 21900.,
      24604., 26088., 27572., 29056., 24935., 26926., 28917., 30908., 34944.,
      37056., 39168., 41280., 21871., 23614., 25357., 27100., 30888., 32752.,
      34616., 36480., 12959., 13998., 15037., 16076., 18412., 19528., 20644.,
      21760., 17511., 18878., 20245., 21612., 24276., 25720., 27164., 28608.,
      26847., 28958., 31069., 33180., 37336., 39568., 41800., 44032., 24935.,
      26926., 28917., 30908., 34944., 37056., 39168., 41280., 13943., 15070.,
      16197., 17324., 19748., 20952., 22156., 23360., 9247.,  9982.,  10717.,
      11452., 13008., 13792., 14576., 15360., 17511., 18878., 20245., 21612.,
      24276., 25720., 27164., 28608., 17679., 19086., 20493., 21900., 24604.,
      26088., 27572., 29056., 10383., 11230., 12077., 12924., 14592., 15488.,
      16384., 17280.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x15x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27705., 29586., 31467., 33348., 37274., 39276., 41278., 43280.,
      24769., 26530., 28291., 30052., 33858., 35740., 37622., 39504.,
      29745., 31874., 34003., 36132., 40306., 42556., 44806., 47056.,
      27705., 29586., 31467., 33348., 37274., 39276., 41278., 43280.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x15x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12120., 13856., 15704., 17664., 19704., 22432., 25336., 28416.,
      19192., 21920., 24824., 27904., 12632., 14368., 16216., 18176.,
      16745., 19116., 21641., 24320., 26949., 30716., 34725., 38976.,
      26133., 29852., 33813., 38016., 16409., 18764., 21273., 23936.,
      17433., 19852., 22425., 25152., 26133., 29852., 33813., 38016.,
      26949., 30716., 34725., 38976., 17353., 19756., 22313., 25024.,
      10637., 12156., 13773., 15488., 17273., 19660., 22201., 24896.,
      16073., 18412., 20905., 23552., 11101., 12636., 14269., 16000.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x15x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30025., 33732., 37681., 41872., 28793., 32548., 36545., 40784.,
      28793., 32548., 36545., 40784., 30025., 33732., 37681., 41872.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x15x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10472., 11312., 12992., 13888., 15736., 16688., 18704., 19712., 16456.,
      17776., 20416., 21824., 24728., 26224., 29392., 30976., 16456., 17776.,
      20416., 21824., 24728., 26224., 29392., 30976., 10472., 11312., 12992.,
      13888., 15736., 16688., 18704., 19712., 13825., 14962., 17242., 18456.,
      20967., 22258., 25000., 26368., 22741., 24586., 28234., 30200., 34211.,
      36298., 40672., 42880., 22181., 23978., 27578., 29496., 33459., 35498.,
      39824., 41984., 13825., 14962., 17242., 18456., 20967., 22258., 25000.,
      26368., 14641., 15826., 18154., 19416., 21975., 23314., 26104., 27520.,
      22181., 23978., 27578., 29496., 33459., 35498., 39824., 41984., 22741.,
      24586., 28234., 30200., 34211., 36298., 40672., 42880., 14641., 15826.,
      18154., 19416., 21975., 23314., 26104., 27520., 9005.,  9754.,  11226.,
      12024., 13643., 14490., 16256., 17152., 14641., 15826., 18154., 19416.,
      21975., 23314., 26104., 27520., 13825., 14962., 17242., 18456., 20967.,
      22258., 25000., 26368., 9005.,  9754.,  11226., 12024., 13643., 14490.,
      16256., 17152.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x15x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28441., 30226., 33814., 35720., 39671., 41698., 46012., 48160.,
      27977., 29810., 33446., 35400., 39399., 41474., 45836., 48032.,
      27977., 29810., 33446., 35400., 39399., 41474., 45836., 48032.,
      28441., 30226., 33814., 35720., 39671., 41698., 46012., 48160.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x15x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6664.,  7504.,  8344.,  9184.,  10752., 11648., 12544., 13440., 15288.,
      16240., 17192., 18144., 20272., 21280., 22288., 23296., 10472., 11792.,
      13112., 14432., 16896., 18304., 19712., 21120., 24024., 25520., 27016.,
      28512., 31856., 33440., 35024., 36608., 10472., 11792., 13112., 14432.,
      16896., 18304., 19712., 21120., 24024., 25520., 27016., 28512., 31856.,
      33440., 35024., 36608., 6664.,  7504.,  8344.,  9184.,  10752., 11648.,
      12544., 13440., 15288., 16240., 17192., 18144., 20272., 21280., 22288.,
      23296., 8785.,  9922.,  11059., 12196., 14326., 15540., 16754., 17968.,
      20483., 21774., 23065., 24356., 27256., 28624., 29992., 31360., 14325.,
      16170., 18015., 19860., 23270., 25236., 27202., 29168., 33183., 35270.,
      37357., 39444., 44064., 46272., 48480., 50688., 14277., 16074., 17871.,
      19668., 23030., 24948., 26866., 28784., 32751., 34790., 36829., 38868.,
      43440., 45600., 47760., 49920., 8785.,  9922.,  11059., 12196., 14326.,
      15540., 16754., 17968., 20483., 21774., 23065., 24356., 27256., 28624.,
      29992., 31360., 9345.,  10530., 11715., 12900., 15078., 16340., 17602.,
      18864., 21427., 22766., 24105., 25444., 28392., 29808., 31224., 32640.,
      14277., 16074., 17871., 19668., 23030., 24948., 26866., 28784., 32751.,
      34790., 36829., 38868., 43440., 45600., 47760., 49920., 14325., 16170.,
      18015., 19860., 23270., 25236., 27202., 29168., 33183., 35270., 37357.,
      39444., 44064., 46272., 48480., 50688., 9345.,  10530., 11715., 12900.,
      15078., 16340., 17602., 18864., 21427., 22766., 24105., 25444., 28392.,
      29808., 31224., 32640., 5741.,  6490.,  7239.,  7988.,  9366.,  10164.,
      10962., 11760., 13383., 14230., 15077., 15924., 17792., 18688., 19584.,
      20480., 9345.,  10530., 11715., 12900., 15078., 16340., 17602., 18864.,
      21427., 22766., 24105., 25444., 28392., 29808., 31224., 32640., 8785.,
      9922.,  11059., 12196., 14326., 15540., 16754., 17968., 20483., 21774.,
      23065., 24356., 27256., 28624., 29992., 31360., 5741.,  6490.,  7239.,
      7988.,  9366.,  10164., 10962., 11760., 13383., 14230., 15077., 15924.,
      17792., 18688., 19584., 20480.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x15x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18105., 19890., 21675., 23460., 26810., 28716., 30622., 32528.,
      36483., 38510., 40537., 42564., 47124., 49272., 51420., 53568.,
      18153., 19986., 21819., 23652., 27050., 29004., 30958., 32912.,
      36915., 38990., 41065., 43140., 47748., 49944., 52140., 54336.,
      18153., 19986., 21819., 23652., 27050., 29004., 30958., 32912.,
      36915., 38990., 41065., 43140., 47748., 49944., 52140., 54336.,
      18105., 19890., 21675., 23460., 26810., 28716., 30622., 32528.,
      36483., 38510., 40537., 42564., 47124., 49272., 51420., 53568.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x16x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13616., 21708., 27228., 19124., 19708., 31053., 38689., 26663.,
      19708., 31053., 38689., 26663., 11940., 18399., 22987., 15029.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x16x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {25064., 32700., 25064., 32700.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x16x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11616., 12416., 20176., 21496., 25616., 27288., 18032., 19208.,
      17900., 19064., 29259., 31162., 36751., 39138., 25125., 26798.,
      17900., 19064., 29259., 31162., 36751., 39138., 25125., 26798.,
      12204., 12968., 19203., 20446., 23975., 25526., 15597., 16682.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x16x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {25034., 26640., 32526., 34616.,
                                         25034., 26640., 32526., 34616.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x16x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12000., 12800., 13600., 14400., 19672., 20992., 22312., 23632.,
      24952., 26624., 28296., 29968., 17512., 18688., 19864., 21040.,
      17420., 18584., 19748., 20912., 28007., 29910., 31813., 33716.,
      35211., 37598., 39985., 42372., 24481., 26154., 27827., 29500.,
      17420., 18584., 19748., 20912., 28007., 29910., 31813., 33716.,
      35211., 37598., 39985., 42372., 24481., 26154., 27827., 29500.,
      11292., 12056., 12820., 13584., 18251., 19494., 20737., 21980.,
      22751., 24302., 25853., 27404., 16253., 17338., 18423., 19508.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x16x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.,
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x16x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7936.,  9472.,  17616., 20208., 28496., 31792., 21008., 23312.,
      10904., 13040., 24325., 27892., 39309., 43844., 29049., 32220.,
      10904., 13040., 24325., 27892., 39309., 43844., 29049., 32220.,
      7128.,  8528.,  15837., 18108., 25381., 28268., 18305., 20308.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x16x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20579., 23904., 35563., 39856.,
                                         20579., 23904., 35563., 39856.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x16x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7680.,  8192.,  9792.,  10368., 17160., 18304., 20944., 22176.,
      27720., 29568., 32912., 34848., 21000., 22400., 24752., 26208.,
      10480., 11184., 13384., 14176., 23429., 25002., 28618., 30312.,
      37837., 40378., 44962., 47624., 28557., 30482., 33702., 35704.,
      10480., 11184., 13384., 14176., 23429., 25002., 28618., 30312.,
      37837., 40378., 44962., 47624., 28557., 30482., 33702., 35704.,
      6384.,  6832.,  8232.,  8736.,  14513., 15514., 17794., 18872.,
      23513., 25130., 28026., 29720., 18585., 19810., 21870., 23144.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x16x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.,
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x16x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6656.,  7168.,  7680.,  8192.,  9792.,  10368., 10944., 11520., 14872.,
      16016., 17160., 18304., 20944., 22176., 23408., 24640., 24024., 25872.,
      27720., 29568., 32912., 34848., 36784., 38720., 18200., 19600., 21000.,
      22400., 24752., 26208., 27664., 29120., 8992.,  9696.,  10400., 11104.,
      13304., 14096., 14888., 15680., 20197., 21770., 23343., 24916., 28534.,
      30228., 31922., 33616., 32685., 35226., 37767., 40308., 44894., 47556.,
      50218., 52880., 24661., 26586., 28511., 30436., 33658., 35660., 37662.,
      39664., 8992.,  9696.,  10400., 11104., 13304., 14096., 14888., 15680.,
      20197., 21770., 23343., 24916., 28534., 30228., 31922., 33616., 32685.,
      35226., 37767., 40308., 44894., 47556., 50218., 52880., 24661., 26586.,
      28511., 30436., 33658., 35660., 37662., 39664., 5664.,  6112.,  6560.,
      7008.,  8408.,  8912.,  9416.,  9920.,  12761., 13762., 14763., 15764.,
      18062., 19140., 20218., 21296., 20673., 22290., 23907., 25524., 28438.,
      30132., 31826., 33520., 15561., 16786., 18011., 19236., 21282., 22556.,
      23830., 25104.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x16x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17075., 18406., 19737., 21068., 24444., 25896., 27348., 28800.,
      29563., 31862., 34161., 36460., 40804., 43224., 45644., 48064.,
      17075., 18406., 19737., 21068., 24444., 25896., 27348., 28800.,
      29563., 31862., 34161., 36460., 40804., 43224., 45644., 48064.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x16x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14400., 16384., 18496., 20736., 17640., 20224., 22984., 25920.,
      23400., 26368., 29512., 32832., 14280., 16128., 18088., 20160.,
      19640., 22368., 25272., 28352., 23937., 27476., 31257., 35280.,
      31633., 35700., 40009., 44560., 19461., 21988., 24669., 27504.,
      19640., 22368., 25272., 28352., 23937., 27476., 31257., 35280.,
      31633., 35700., 40009., 44560., 19461., 21988., 24669., 27504.,
      11928., 13664., 15512., 17472., 15485., 17716., 20101., 22640.,
      19021., 21588., 24309., 27184., 12849., 14468., 16185., 18000.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x16x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.,
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x16x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12480., 13440., 15360., 16384., 18496., 19584., 21888., 23040., 15288.,
      16464., 18960., 20224., 22984., 24336., 27360., 28800., 20280., 21840.,
      24720., 26368., 29512., 31248., 34656., 36480., 12376., 13328., 15120.,
      16128., 18088., 19152., 21280., 22400., 16840., 18160., 20800., 22208.,
      25112., 26608., 29776., 31360., 20529., 22146., 25566., 27304., 31087.,
      32946., 37092., 39072., 27201., 29346., 33294., 35560., 39871., 42258.,
      46932., 49440., 16685., 17994., 20446., 21832., 24515., 25978., 28892.,
      30432., 16840., 18160., 20800., 22208., 25112., 26608., 29776., 31360.,
      20529., 22146., 25566., 27304., 31087., 32946., 37092., 39072., 27201.,
      29346., 33294., 35560., 39871., 42258., 46932., 49440., 16685., 17994.,
      20446., 21832., 24515., 25978., 28892., 30432., 10600., 11440., 13120.,
      14016., 15864., 16816., 18832., 19840., 12885., 13914., 16086., 17192.,
      19595., 20778., 23412., 24672., 17061., 18426., 20934., 22376., 25115.,
      26634., 29604., 31200., 10497., 11330., 12886., 13768., 15471., 16402.,
      18252., 19232.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x16x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19245., 20730., 24018., 25624., 29275., 31002., 35016., 36864.,
      25917., 27930., 31746., 33880., 38059., 40314., 44856., 47232.,
      19245., 20730., 24018., 25624., 29275., 31002., 35016., 36864.,
      25917., 27930., 31746., 33880., 38059., 40314., 44856., 47232.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x16x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8640.,  9600.,  10560., 11520., 13312., 14336., 15360., 16384., 18496.,
      19584., 20672., 21760., 24192., 25344., 26496., 27648., 10584., 11760.,
      12936., 14112., 16432., 17696., 18960., 20224., 22984., 24336., 25688.,
      27040., 30240., 31680., 33120., 34560., 14040., 15600., 17160., 18720.,
      21424., 23072., 24720., 26368., 29512., 31248., 32984., 34720., 38304.,
      40128., 41952., 43776., 8568.,  9520.,  10472., 11424., 13104., 14112.,
      15120., 16128., 18088., 19152., 20216., 21280., 23520., 24640., 25760.,
      26880., 11752., 13072., 14392., 15712., 18176., 19584., 20992., 22400.,
      25304., 26800., 28296., 29792., 33136., 34720., 36304., 37888., 14353.,
      15970., 17587., 19204., 22386., 24124., 25862., 27600., 31387., 33246.,
      35105., 36964., 41356., 43336., 45316., 47296., 18977., 21122., 23267.,
      25412., 29122., 31388., 33654., 35920., 40235., 42622., 45009., 47396.,
      52316., 54824., 57332., 59840., 11645., 12954., 14263., 15572., 17874.,
      19260., 20646., 22032., 24719., 26182., 27645., 29108., 32180., 33720.,
      35260., 36800., 11752., 13072., 14392., 15712., 18176., 19584., 20992.,
      22400., 25304., 26800., 28296., 29792., 33136., 34720., 36304., 37888.,
      14353., 15970., 17587., 19204., 22386., 24124., 25862., 27600., 31387.,
      33246., 35105., 36964., 41356., 43336., 45316., 47296., 18977., 21122.,
      23267., 25412., 29122., 31388., 33654., 35920., 40235., 42622., 45009.,
      47396., 52316., 54824., 57332., 59840., 11645., 12954., 14263., 15572.,
      17874., 19260., 20646., 22032., 24719., 26182., 27645., 29108., 32180.,
      33720., 35260., 36800., 7432.,  8272.,  9112.,  9952.,  11520., 12416.,
      13312., 14208., 16056., 17008., 17960., 18912., 21040., 22048., 23056.,
      24064., 9061.,  10090., 11119., 12148., 14170., 15276., 16382., 17488.,
      19895., 21078., 22261., 23444., 26236., 27496., 28756., 30016., 11957.,
      13322., 14687., 16052., 18410., 19852., 21294., 22736., 25479., 26998.,
      28517., 30036., 33164., 34760., 36356., 37952., 7361.,  8194.,  9027.,
      9860.,  11322., 12204., 13086., 13968., 15675., 16606., 17537., 18468.,
      20420., 21400., 22380., 23360.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x16x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13453., 14938., 16423., 17908., 20958., 22564., 24170., 25776.,
      29431., 31158., 32885., 34612., 38872., 40720., 42568., 44416.,
      18077., 20090., 22103., 24116., 27694., 29828., 31962., 34096.,
      38279., 40534., 42789., 45044., 49832., 52208., 54584., 56960.,
      13453., 14938., 16423., 17908., 20958., 22564., 24170., 25776.,
      29431., 31158., 32885., 34612., 38872., 40720., 42568., 44416.,
      18077., 20090., 22103., 24116., 27694., 29828., 31962., 34096.,
      38279., 40534., 42789., 45044., 49832., 52208., 54584., 56960.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x18x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14544., 21880., 20680., 19060., 11228.,
                                         21168., 32432., 32228., 28762., 16410.,
                                         21800., 31096., 32332., 29970., 16674.,
                                         14008., 18980., 17328., 17560., 9460.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x18x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {32662., 31626., 31678., 30002.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x18x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13336., 14208., 22808., 24176., 20280., 21648., 19616., 20872.,
      11648., 12408., 19152., 20416., 32798., 34848., 31202., 33288.,
      26431., 28276., 16637., 17684., 19832., 21168., 28870., 30896.,
      31274., 33240., 27583., 29412., 17085., 18212., 13588., 14416.,
      19106., 20392., 18918., 20160., 19599., 20752., 9933.,  10632.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x18x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {31340., 33324., 30128., 32148.,
                                         33236., 35196., 29816., 31716.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x18x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12680., 13552., 14424., 15296., 21080., 22448., 23816., 25184., 21016.,
      22384., 23752., 25120., 19032., 20288., 21544., 22800., 11592., 12352.,
      13112., 13872., 19376., 20640., 21904., 23168., 31066., 33116., 35166.,
      37216., 30782., 32868., 34954., 37040., 28041., 29886., 31731., 33576.,
      15107., 16154., 17201., 18248., 19896., 21232., 22568., 23904., 30146.,
      32172., 34198., 36224., 28742., 30708., 32674., 34640., 27289., 29118.,
      30947., 32776., 16435., 17562., 18689., 19816., 12332., 13160., 13988.,
      14816., 18942., 20228., 21514., 22800., 17970., 19212., 20454., 21696.,
      17789., 18942., 20095., 21248., 10751., 11450., 12149., 12848.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x18x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29304., 31288., 33272., 35256., 29788., 31808., 33828., 35848.,
      29792., 31752., 33712., 35672., 28004., 29904., 31804., 33704.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x18x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13504., 15296., 22528., 25376., 22272., 25120., 18800., 21392.,
      10928., 12464., 18855., 21312., 30891., 34880., 30131., 34128.,
      27854., 31400., 14098., 16104., 18711., 21216., 29883., 33760.,
      28483., 32304., 28110., 31752., 17426., 19656., 13351., 15008.,
      20315., 22864., 18211., 20672., 17366., 19616., 9130.,  10448.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x18x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {29607., 33496., 31535., 35560.,
                                         30359., 34296., 27679., 31496.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x18x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12968., 13856., 15696., 16640., 21160., 22560., 25456., 26944., 21416.,
      22816., 25712., 27200., 19072., 20352., 22992., 24352., 11136., 11904.,
      13488., 14304., 18683., 19886., 22400., 23680., 30443., 32438., 36476.,
      38592., 28659., 30662., 34708., 36832., 27104., 28828., 32422., 34256.,
      13432., 14372., 16418., 17424., 17835., 19086., 21648., 22976., 29051.,
      30934., 34860., 36864., 27075., 28902., 32772., 34720., 27520., 29340.,
      33030., 34960., 16792., 17956., 20226., 21456., 12935., 13774., 15432.,
      16320., 18903., 20182., 22740., 24096., 16575., 17766., 20236., 21504.,
      16752., 17836., 20094., 21248., 9544.,  10196., 11562., 12256.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x18x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28103., 29998., 33936., 35952., 30543., 32574., 36648., 38800.,
      30071., 32014., 36000., 38064., 25599., 27422., 31288., 33232.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x18x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11864., 12752., 13640., 14528., 16368., 17312., 18256., 19200., 18520.,
      19920., 21320., 22720., 25616., 27104., 28592., 30080., 18008., 19408.,
      20808., 22208., 25104., 26592., 28080., 29568., 16896., 18176., 19456.,
      20736., 23376., 24736., 26096., 27456., 9728.,  10496., 11264., 12032.,
      13616., 14432., 15248., 16064., 15779., 16982., 18185., 19388., 21888.,
      23168., 24448., 25728., 26379., 28374., 30369., 32364., 36404., 38520.,
      40636., 42752., 25875., 27878., 29881., 31884., 35932., 38056., 40180.,
      42304., 22820., 24544., 26268., 27992., 31586., 33420., 35254., 37088.,
      11588., 12528., 13468., 14408., 16470., 17476., 18482., 19488., 16595.,
      17846., 19097., 20348., 22896., 24224., 25552., 26880., 24731., 26614.,
      28497., 30380., 34308., 36312., 38316., 40320., 22883., 24710., 26537.,
      28364., 32236., 34184., 36132., 38080., 24068., 25888., 27708., 29528.,
      33218., 35148., 37078., 39008., 15012., 16176., 17340., 18504., 20790.,
      22020., 23250., 24480., 11079., 11918., 12757., 13596., 15256., 16144.,
      17032., 17920., 16719., 17998., 19277., 20556., 23132., 24488., 25844.,
      27200., 14967., 16158., 17349., 18540., 21028., 22296., 23564., 24832.,
      14372., 15456., 16540., 17624., 19898., 21052., 22206., 23360., 8228.,
      8880.,  9532.,  10184., 11550., 12244., 12938., 13632.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x18x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24359., 26254., 28149., 30044., 33984., 36000., 38016., 40032.,
      26031., 28062., 30093., 32124., 36200., 38352., 40504., 42656.,
      25175., 27118., 29061., 31004., 34992., 37056., 39120., 41184.,
      23519., 25342., 27165., 28988., 32856., 34800., 36744., 38688.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x18x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12680., 14400., 16232., 18176., 19880., 22592., 25480., 28544., 19368.,
      22080., 24968., 28032., 18256., 20736., 23376., 26176., 10544., 12032.,
      13616., 15296., 16849., 19228., 21761., 24448., 28877., 32620., 36605.,
      40832., 25117., 28812., 32749., 36928., 26574., 30008., 33662., 37536.,
      13666., 15688., 17842., 20128., 16849., 19228., 21761., 24448., 28877.,
      32620., 36605., 40832., 25117., 28812., 32749., 36928., 26574., 30008.,
      33662., 37536., 13666., 15688., 17842., 20128., 10685., 12188., 13789.,
      15488., 17961., 20332., 22857., 25536., 15737., 18060., 20537., 23168.,
      16598., 18776., 21094., 23552., 8858.,  10152., 11530., 12992.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x18x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27557., 31260., 35205., 39392., 25525., 29244., 33205., 37408.,
      27557., 31260., 35205., 39392., 25525., 29244., 33205., 37408.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x18x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11352., 12176., 13840., 14720., 16552., 17488., 19488., 20480., 17592.,
      18896., 21520., 22912., 25800., 27280., 30432., 32000., 16568., 17872.,
      20496., 21888., 24776., 26256., 29408., 30976., 16112., 17312., 19712.,
      20992., 23632., 24992., 27872., 29312., 8848.,  9568.,  11008., 11776.,
      13360., 14176., 15904., 16768., 15561., 16706., 18994., 20216., 22735.,
      24034., 26784., 28160., 24573., 26394., 30018., 31960., 35947., 38010.,
      42360., 44544., 22221., 23994., 27570., 29464., 33403., 35418., 39720.,
      41856., 22578., 24252., 27576., 29360., 33014., 34908., 38892., 40896.,
      12014., 12996., 14968., 16016., 18186., 19300., 21668., 22848., 15561.,
      16706., 18994., 20216., 22735., 24034., 26784., 28160., 24573., 26394.,
      30018., 31960., 35947., 38010., 42360., 44544., 22221., 23994., 27570.,
      29464., 33403., 35418., 39720., 41856., 22578., 24252., 27576., 29360.,
      33014., 34908., 38892., 40896., 12014., 12996., 14968., 16016., 18186.,
      19300., 21668., 22848., 9885.,  10618., 12074., 12856., 14459., 15290.,
      17040., 17920., 15777., 16946., 19258., 20504., 23047., 24370., 27144.,
      28544., 13937., 15058., 17322., 18520., 21015., 22290., 25016., 26368.,
      14522., 15596., 17720., 18864., 21198., 22412., 24956., 26240., 7590.,
      8212.,  9464.,  10128., 11506., 12212., 13716., 14464.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x18x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22997., 24778., 28362., 30264., 34211., 36234., 40544., 42688.,
      23013., 24810., 28410., 30328., 34291., 36330., 40656., 42816.,
      22997., 24778., 28362., 30264., 34211., 36234., 40544., 42688.,
      23013., 24810., 28410., 30328., 34291., 36330., 40656., 42816.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x16x18x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7672.,  8496.,  9320.,  10144., 11696., 12576., 13456., 14336., 16168.,
      17104., 18040., 18976., 21088., 22080., 23072., 24064., 11992., 13296.,
      14600., 15904., 18352., 19744., 21136., 22528., 25416., 26896., 28376.,
      29856., 33184., 34752., 36320., 37888., 11992., 13296., 14600., 15904.,
      18352., 19744., 21136., 22528., 25416., 26896., 28376., 29856., 33184.,
      34752., 36320., 37888., 10800., 12000., 13200., 14400., 16640., 17920.,
      19200., 20480., 23120., 24480., 25840., 27200., 30240., 31680., 33120.,
      34560., 6480.,  7200.,  7920.,  8640.,  9984.,  10752., 11520., 12288.,
      13872., 14688., 15504., 16320., 18144., 19008., 19872., 20736., 10585.,
      11730., 12875., 14020., 16158., 17380., 18602., 19824., 22347., 23646.,
      24945., 26244., 29152., 30528., 31904., 33280., 16861., 18682., 20503.,
      22324., 25710., 27652., 29594., 31536., 35527., 37590., 39653., 41716.,
      46312., 48496., 50680., 52864., 16301., 18074., 19847., 21620., 24958.,
      26852., 28746., 30640., 34583., 36598., 38613., 40628., 45176., 47312.,
      49448., 51584., 15226., 16900., 18574., 20248., 23352., 25136., 26920.,
      28704., 32358., 34252., 36146., 38040., 42244., 44248., 46252., 48256.,
      8934.,  9916.,  10898., 11880., 13720., 14768., 15816., 16864., 19034.,
      20148., 21262., 22376., 24876., 26056., 27236., 28416., 10585., 11730.,
      12875., 14020., 16158., 17380., 18602., 19824., 22347., 23646., 24945.,
      26244., 29152., 30528., 31904., 33280., 16861., 18682., 20503., 22324.,
      25710., 27652., 29594., 31536., 35527., 37590., 39653., 41716., 46312.,
      48496., 50680., 52864., 16301., 18074., 19847., 21620., 24958., 26852.,
      28746., 30640., 34583., 36598., 38613., 40628., 45176., 47312., 49448.,
      51584., 15226., 16900., 18574., 20248., 23352., 25136., 26920., 28704.,
      32358., 34252., 36146., 38040., 42244., 44248., 46252., 48256., 8934.,
      9916.,  10898., 11880., 13720., 14768., 15816., 16864., 19034., 20148.,
      21262., 22376., 24876., 26056., 27236., 28416., 6749.,  7482.,  8215.,
      8948.,  10310., 11092., 11874., 12656., 14263., 15094., 15925., 16756.,
      18608., 19488., 20368., 21248., 10865., 12034., 13203., 14372., 16534.,
      17780., 19026., 20272., 22819., 24142., 25465., 26788., 29720., 31120.,
      32520., 33920., 10305., 11426., 12547., 13668., 15782., 16980., 18178.,
      19376., 21875., 23150., 24425., 25700., 28584., 29936., 31288., 32640.,
      9826.,  10900., 11974., 13048., 15032., 16176., 17320., 18464., 20798.,
      22012., 23226., 24440., 27124., 28408., 29692., 30976., 5694.,  6316.,
      6938.,  7560.,  8728.,  9392.,  10056., 10720., 12098., 12804., 13510.,
      14216., 15804., 16552., 17300., 18048.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x16x18x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15797., 17578., 19359., 21140., 24486., 26388., 28290., 30192.,
      34143., 36166., 38189., 40212., 44768., 46912., 49056., 51200.,
      15813., 17610., 19407., 21204., 24566., 26484., 28402., 30320.,
      34287., 36326., 38365., 40404., 44976., 47136., 49296., 51456.,
      15797., 17578., 19359., 21140., 24486., 26388., 28290., 30192.,
      34143., 36166., 38189., 40212., 44768., 46912., 49056., 51200.,
      15813., 17610., 19407., 21204., 24566., 26484., 28402., 30320.,
      34287., 36326., 38365., 40404., 44976., 47136., 49296., 51456.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x15x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15309., 20091., 19319., 13489., 22491., 33025., 29685.,
      17127., 24559., 33805., 33025., 18379., 17811., 29051.,
      28415., 18087., 10573., 17173., 19649., 12265.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x15x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {33025., 29685., 33805., 33025.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x15x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12665., 13434., 17631., 18774., 19043., 20174., 12505., 13282.,
      19123., 20438., 32057., 34018., 28413., 30282., 18595., 19758.,
      21391., 22782., 31541., 33658., 32057., 34018., 17375., 18550.,
      17577., 18694., 28497., 30326., 28225., 30078., 19489., 20622.,
      9155.,  9754.,  16011., 17066., 17787., 18946., 11595., 12370.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x15x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {32057., 34018., 28413., 30282.,
                                         31541., 33658., 32057., 34018.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x15x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14289., 15058., 15827., 16596., 16103., 17246., 18389., 19532., 18299.,
      19430., 20561., 21692., 11337., 12114., 12891., 13668., 18435., 19750.,
      21065., 22380., 32809., 34770., 36731., 38692., 26509., 28378., 30247.,
      32116., 18363., 19526., 20689., 21852., 22255., 23646., 25037., 26428.,
      29701., 31818., 33935., 36052., 32809., 34770., 36731., 38692., 16295.,
      17470., 18645., 19820., 16981., 18098., 19215., 20332., 27869., 29698.,
      31527., 33356., 25509., 27362., 29215., 31068., 19381., 20514., 21647.,
      22780., 8783.,  9382.,  9981.,  10580., 15991., 17046., 18101., 19156.,
      18415., 19574., 20733., 21892., 10639., 11414., 12189., 12964.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x15x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      32809., 34770., 36731., 38692., 26509., 28378., 30247., 32116.,
      29701., 31818., 33935., 36052., 32809., 34770., 36731., 38692.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x15x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11289., 12788., 16125., 18476., 17605., 19996., 13313., 14980.,
      21517., 24108., 29985., 33860., 26985., 30740., 16949., 19292.,
      22277., 24956., 33881., 38004., 29985., 33860., 15853., 18156.,
      15494., 17676., 28446., 32108., 31902., 35708., 19430., 21788.,
      6986.,  8116.,  14418., 16468., 19666., 22020., 14570., 16164.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x15x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {29985., 33860., 26985., 30740.,
                                         33881., 38004., 29985., 33860.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x15x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12225., 12946., 14502., 15272., 16825., 17882., 20266., 21400., 17441.,
      18538., 20962., 22136., 12065., 12898., 14550., 15432., 21185., 22522.,
      25170., 26584., 29897., 31778., 35702., 37704., 26833., 28594., 32398.,
      34280., 17025., 18122., 20514., 21688., 22361., 23786., 26522., 28024.,
      32577., 34706., 38878., 41128., 29897., 31778., 35702., 37704., 16665.,
      17722., 20074., 21208., 15384., 16396., 18590., 19672., 27808., 29628.,
      33294., 35224., 29968., 31932., 35742., 37816., 19192., 20396., 22782.,
      24056., 6512.,  6964.,  8122.,  8616.,  14312., 15268., 17322., 18344.,
      19384., 20644., 23002., 24328., 13520., 14420., 16026., 16968.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x15x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29897., 31778., 35702., 37704., 26833., 28594., 32398., 34280.,
      32577., 34706., 38878., 41128., 29897., 31778., 35702., 37704.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x15x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11409., 12130., 12851., 13572., 15114., 15884., 16654., 17424., 15697.,
      16754., 17811., 18868., 21222., 22356., 23490., 24624., 14841., 15938.,
      17035., 18132., 20526., 21700., 22874., 24048., 10497., 11330., 12163.,
      12996., 14650., 15532., 16414., 17296., 19433., 20770., 22107., 23444.,
      26078., 27492., 28906., 30320., 27705., 29586., 31467., 33348., 37274.,
      39276., 41278., 43280., 24769., 26530., 28291., 30052., 33858., 35740.,
      37622., 39504., 14841., 15938., 17035., 18132., 20526., 21700., 22874.,
      24048., 19393., 20818., 22243., 23668., 26390., 27892., 29394., 30896.,
      29745., 31874., 34003., 36132., 40306., 42556., 44806., 47056., 27705.,
      29586., 31467., 33348., 37274., 39276., 41278., 43280., 15697., 16754.,
      17811., 18868., 21222., 22356., 23490., 24624., 13276., 14288., 15300.,
      16312., 18498., 19580., 20662., 21744., 24996., 26816., 28636., 30456.,
      34130., 36060., 37990., 39920., 27636., 29600., 31564., 33528., 37346.,
      39420., 41494., 43568., 17692., 18896., 20100., 21304., 23682., 24956.,
      26230., 27504., 6076.,  6528.,  6980.,  7432.,  8582.,  9076.,  9570.,
      10064., 12564., 13520., 14476., 15432., 17494., 18516., 19538., 20560.,
      17284., 18544., 19804., 21064., 23430., 24756., 26082., 27408., 12540.,
      13440., 14340., 15240., 16838., 17780., 18722., 19664.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x15x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27705., 29586., 31467., 33348., 37274., 39276., 41278., 43280.,
      24769., 26530., 28291., 30052., 33858., 35740., 37622., 39504.,
      29745., 31874., 34003., 36132., 40306., 42556., 44806., 47056.,
      27705., 29586., 31467., 33348., 37274., 39276., 41278., 43280.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x15x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12289., 13796., 15401., 17104., 18813., 21236., 23813., 26544., 19405.,
      21780., 24309., 26992., 11249., 12740., 14329., 16016., 17981., 20340.,
      22853., 25520., 30025., 33732., 37681., 41872., 28793., 32548., 36545.,
      40784., 18605., 20948., 23445., 26096., 19693., 22100., 24661., 27376.,
      28793., 32548., 36545., 40784., 30025., 33732., 37681., 41872., 18525.,
      20916., 23461., 26160., 16638., 18776., 21054., 23472., 26086., 29432.,
      32998., 36784., 26726., 30136., 33766., 37616., 16574., 18712., 20990.,
      23408., 10258., 11560., 12946., 14416., 15114., 17096., 19210., 21456.,
      16394., 18440., 20618., 22928., 10194., 11496., 12882., 14352.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x15x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30025., 33732., 37681., 41872., 28793., 32548., 36545., 40784.,
      28793., 32548., 36545., 40784., 30025., 33732., 37681., 41872.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x15x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11281., 12002., 13446., 14216., 15807., 16626., 18364., 19232., 18277.,
      19450., 21766., 23016., 25563., 26890., 29668., 31072., 17461., 18586.,
      20854., 22056., 24555., 25834., 28564., 29920., 11281., 12002., 13446.,
      14216., 15807., 16626., 18364., 19232., 17461., 18586., 20854., 22056.,
      24555., 25834., 28564., 29920., 28441., 30226., 33814., 35720., 39671.,
      41698., 46012., 48160., 27977., 29810., 33446., 35400., 39399., 41474.,
      45836., 48032., 17461., 18586., 20854., 22056., 24555., 25834., 28564.,
      29920., 18277., 19450., 21766., 23016., 25563., 26890., 29668., 31072.,
      27977., 29810., 33446., 35400., 39399., 41474., 45836., 48032., 28441.,
      30226., 33814., 35720., 39671., 41698., 46012., 48160., 18277., 19450.,
      21766., 23016., 25563., 26890., 29668., 31072., 15770., 16796., 18856.,
      19952., 22222., 23388., 25868., 27104., 25410., 27020., 30264., 31984.,
      35558., 37388., 41292., 43232., 25602., 27276., 30584., 32368., 36006.,
      37900., 41868., 43872., 15770., 16796., 18856., 19952., 22222., 23388.,
      25868., 27104., 9606.,  10244., 11496., 12176., 13554., 14276., 15780.,
      16544., 14430., 15380., 17304., 18320., 20442., 21524., 23844., 24992.,
      15902., 16916., 18904., 19984., 22170., 23316., 25700., 26912., 9606.,
      10244., 11496., 12176., 13554., 14276., 15780., 16544.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x15x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28441., 30226., 33814., 35720., 39671., 41698., 46012., 48160.,
      27977., 29810., 33446., 35400., 39399., 41474., 45836., 48032.,
      27977., 29810., 33446., 35400., 39399., 41474., 45836., 48032.,
      28441., 30226., 33814., 35720., 39671., 41698., 46012., 48160.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x15x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7249.,  7970.,  8691.,  9412.,  10762., 11532., 12302., 13072., 14667.,
      15486., 16305., 17124., 18964., 19832., 20700., 21568., 11765., 12938.,
      14111., 15284., 17450., 18700., 19950., 21200., 23751., 25078., 26405.,
      27732., 30668., 32072., 33476., 34880., 11205., 12330., 13455., 14580.,
      16698., 17900., 19102., 20304., 22807., 24086., 25365., 26644., 29532.,
      30888., 32244., 33600., 7249.,  7970.,  8691.,  9412.,  10762., 11532.,
      12302., 13072., 14667., 15486., 16305., 17124., 18964., 19832., 20700.,
      21568., 11205., 12330., 13455., 14580., 16698., 17900., 19102., 20304.,
      22807., 24086., 25365., 26644., 29532., 30888., 32244., 33600., 18105.,
      19890., 21675., 23460., 26810., 28716., 30622., 32528., 36483., 38510.,
      40537., 42564., 47124., 49272., 51420., 53568., 18153., 19986., 21819.,
      23652., 27050., 29004., 30958., 32912., 36915., 38990., 41065., 43140.,
      47748., 49944., 52140., 54336., 11205., 12330., 13455., 14580., 16698.,
      17900., 19102., 20304., 22807., 24086., 25365., 26644., 29532., 30888.,
      32244., 33600., 11765., 12938., 14111., 15284., 17450., 18700., 19950.,
      21200., 23751., 25078., 26405., 27732., 30668., 32072., 33476., 34880.,
      18153., 19986., 21819., 23652., 27050., 29004., 30958., 32912., 36915.,
      38990., 41065., 43140., 47748., 49944., 52140., 54336., 18105., 19890.,
      21675., 23460., 26810., 28716., 30622., 32528., 36483., 38510., 40537.,
      42564., 47124., 49272., 51420., 53568., 11765., 12938., 14111., 15284.,
      17450., 18700., 19950., 21200., 23751., 25078., 26405., 27732., 30668.,
      32072., 33476., 34880., 10354., 11380., 12406., 13432., 15368., 16464.,
      17560., 18656., 20942., 22108., 23274., 24440., 27076., 28312., 29548.,
      30784., 16378., 17988., 19598., 21208., 24248., 25968., 27688., 29408.,
      32998., 34828., 36658., 38488., 42628., 44568., 46508., 48448., 16698.,
      18372., 20046., 21720., 24824., 26608., 28392., 30176., 33830., 35724.,
      37618., 39512., 43716., 45720., 47724., 49728., 10354., 11380., 12406.,
      13432., 15368., 16464., 17560., 18656., 20942., 22108., 23274., 24440.,
      27076., 28312., 29548., 30784., 6414.,  7052.,  7690.,  8328.,  9512.,
      10192., 10872., 11552., 12946., 13668., 14390., 15112., 16716., 17480.,
      18244., 19008., 9478.,  10428., 11378., 12328., 14136., 15152., 16168.,
      17184., 19322., 20404., 21486., 22568., 25036., 26184., 27332., 28480.,
      10310., 11324., 12338., 13352., 15224., 16304., 17384., 18464., 20666.,
      21812., 22958., 24104., 26636., 27848., 29060., 30272., 6414.,  7052.,
      7690.,  8328.,  9512.,  10192., 10872., 11552., 12946., 13668., 14390.,
      15112., 16716., 17480., 18244., 19008.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x15x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18105., 19890., 21675., 23460., 26810., 28716., 30622., 32528.,
      36483., 38510., 40537., 42564., 47124., 49272., 51420., 53568.,
      18153., 19986., 21819., 23652., 27050., 29004., 30958., 32912.,
      36915., 38990., 41065., 43140., 47748., 49944., 52140., 54336.,
      18153., 19986., 21819., 23652., 27050., 29004., 30958., 32912.,
      36915., 38990., 41065., 43140., 47748., 49944., 52140., 54336.,
      18105., 19890., 21675., 23460., 26810., 28716., 30622., 32528.,
      36483., 38510., 40537., 42564., 47124., 49272., 51420., 53568.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x16x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11156., 18227., 23439., 16737., 16828., 26973., 34609.,
      23639., 16828., 26973., 34609., 23639., 16012., 25323.,
      32079., 21973., 9956.,  15929., 20165., 13895.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x16x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {25064., 32700., 25064., 32700.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x16x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9932.,  10568., 17051., 18118., 21919., 23294., 15509., 16482.,
      15852., 16888., 26907., 28634., 34399., 36610., 23797., 25358.,
      15852., 16888., 26907., 28634., 34399., 36610., 23797., 25358.,
      15408., 16408., 25988., 27638., 32916., 35006., 22796., 24266.,
      9424.,  10024., 15540., 16530., 19652., 20906., 14044., 14926.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x16x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {25034., 26640., 32526., 34616.,
                                         25034., 26640., 32526., 34616.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x16x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9628.,  10264., 10900., 11536., 16555., 17622., 18689., 19756., 21247.,
      22622., 23997., 25372., 14205., 15178., 16151., 17124., 15500., 16536.,
      17572., 18608., 26039., 27766., 29493., 31220., 33243., 35454., 37665.,
      39876., 23473., 25034., 26595., 28156., 15500., 16536., 17572., 18608.,
      26039., 27766., 29493., 31220., 33243., 35454., 37665., 39876., 23473.,
      25034., 26595., 28156., 14904., 15904., 16904., 17904., 24822., 26472.,
      28122., 29772., 31326., 33416., 35506., 37596., 22234., 23704., 25174.,
      26644., 8904.,  9504.,  10104., 10704., 14314., 15304., 16294., 17284.,
      18178., 19432., 20686., 21940., 13350., 14232., 15114., 15996.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x16x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.,
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x16x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6744.,  8080.,  15317., 17612., 25053., 27964., 19321., 21380.,
      10904., 13040., 24325., 27892., 39309., 43844., 29049., 32220.,
      10904., 13040., 24325., 27892., 39309., 43844., 29049., 32220.,
      10096., 12080., 22628., 25900., 36484., 40636., 27132., 30036.,
      5808.,  6992.,  13252., 15204., 21476., 23956., 16268., 18012.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x16x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20579., 23904., 35563., 39856.,
                                         20579., 23904., 35563., 39856.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x16x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6896.,  7344.,  8744.,  9248.,  15265., 16266., 18594., 19672., 24649.,
      26266., 29210., 30904., 17801., 19026., 21070., 22344., 10480., 11184.,
      13384., 14176., 23429., 25002., 28618., 30312., 37837., 40378., 44962.,
      47624., 28557., 30482., 33702., 35704., 10480., 11184., 13384., 14176.,
      23429., 25002., 28618., 30312., 37837., 40378., 44962., 47624., 28557.,
      30482., 33702., 35704., 9408.,  10048., 12048., 12768., 21170., 22600.,
      25876., 27416., 34178., 36488., 40644., 43064., 26178., 27928., 30860.,
      32680., 5568.,  5952.,  7152.,  7584.,  12526., 13384., 15340., 16264.,
      20254., 21640., 24124., 25576., 15678., 16728., 18484., 19576.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x16x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.,
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x16x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5664.,  6112.,  6560.,  7008.,  8408.,  8912.,  9416.,  9920.,  12761.,
      13762., 14763., 15764., 18062., 19140., 20218., 21296., 20673., 22290.,
      23907., 25524., 28438., 30132., 31826., 33520., 15561., 16786., 18011.,
      19236., 21282., 22556., 23830., 25104., 8992.,  9696.,  10400., 11104.,
      13304., 14096., 14888., 15680., 20197., 21770., 23343., 24916., 28534.,
      30228., 31922., 33616., 32685., 35226., 37767., 40308., 44894., 47556.,
      50218., 52880., 24661., 26586., 28511., 30436., 33658., 35660., 37662.,
      39664., 8992.,  9696.,  10400., 11104., 13304., 14096., 14888., 15680.,
      20197., 21770., 23343., 24916., 28534., 30228., 31922., 33616., 32685.,
      35226., 37767., 40308., 44894., 47556., 50218., 52880., 24661., 26586.,
      28511., 30436., 33658., 35660., 37662., 39664., 8192.,  8832.,  9472.,
      10112., 12112., 12832., 13552., 14272., 18382., 19812., 21242., 22672.,
      25956., 27496., 29036., 30576., 29694., 32004., 34314., 36624., 40788.,
      43208., 45628., 48048., 22350., 24100., 25850., 27600., 30524., 32344.,
      34164., 35984., 4864.,  5248.,  5632.,  6016.,  7216.,  7648.,  8080.,
      8512.,  10946., 11804., 12662., 13520., 15484., 16408., 17332., 18256.,
      17682., 19068., 20454., 21840., 24332., 25784., 27236., 28688., 13250.,
      14300., 15350., 16400., 18148., 19240., 20332., 21424.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x16x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17075., 18406., 19737., 21068., 24444., 25896., 27348., 28800.,
      29563., 31862., 34161., 36460., 40804., 43224., 45644., 48064.,
      17075., 18406., 19737., 21068., 24444., 25896., 27348., 28800.,
      29563., 31862., 34161., 36460., 40804., 43224., 45644., 48064.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x16x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12952., 14688., 16536., 18496., 14893., 17172., 19605., 22192., 21245.,
      23860., 26629., 29552., 11809., 13412., 15113., 16912., 19640., 22368.,
      25272., 28352., 23937., 27476., 31257., 35280., 31633., 35700., 40009.,
      44560., 19461., 21988., 24669., 27504., 19640., 22368., 25272., 28352.,
      23937., 27476., 31257., 35280., 31633., 35700., 40009., 44560., 19461.,
      21988., 24669., 27504., 17616., 20096., 22736., 25536., 22026., 25232.,
      28658., 32304., 28330., 32016., 35922., 40048., 17970., 20272., 22714.,
      25296., 10416., 11904., 13488., 15168., 13078., 14992., 17038., 19216.,
      16502., 18704., 21038., 23504., 10830., 12208., 13670., 15216.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x16x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.,
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x16x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10600., 11440., 13120., 14016., 15864., 16816., 18832., 19840., 12885.,
      13914., 16086., 17192., 19595., 20778., 23412., 24672., 17061., 18426.,
      20934., 22376., 25115., 26634., 29604., 31200., 10497., 11330., 12886.,
      13768., 15471., 16402., 18252., 19232., 16840., 18160., 20800., 22208.,
      25112., 26608., 29776., 31360., 20529., 22146., 25566., 27304., 31087.,
      32946., 37092., 39072., 27201., 29346., 33294., 35560., 39871., 42258.,
      46932., 49440., 16685., 17994., 20446., 21832., 24515., 25978., 28892.,
      30432., 16840., 18160., 20800., 22208., 25112., 26608., 29776., 31360.,
      20529., 22146., 25566., 27304., 31087., 32946., 37092., 39072., 27201.,
      29346., 33294., 35560., 39871., 42258., 46932., 49440., 16685., 17994.,
      20446., 21832., 24515., 25978., 28892., 30432., 15344., 16544., 18944.,
      20224., 22864., 24224., 27104., 28544., 18710., 20180., 23284., 24864.,
      28298., 29988., 33752., 35552., 24694., 26644., 30228., 32288., 36202.,
      38372., 42616., 44896., 15198., 16388., 18612., 19872., 22306., 23636.,
      26280., 27680., 9104.,  9824.,  11264., 12032., 13616., 14432., 16160.,
      17024., 11066., 11948., 13804., 14752., 16806., 17820., 20072., 21152.,
      14554., 15724., 17868., 19104., 21446., 22748., 25288., 26656., 9010.,
      9724.,  11052., 11808., 13262., 14060., 15640., 16480.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x16x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19245., 20730., 24018., 25624., 29275., 31002., 35016., 36864.,
      25917., 27930., 31746., 33880., 38059., 40314., 44856., 47232.,
      19245., 20730., 24018., 25624., 29275., 31002., 35016., 36864.,
      25917., 27930., 31746., 33880., 38059., 40314., 44856., 47232.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x16x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7432.,  8272.,  9112.,  9952.,  11520., 12416., 13312., 14208., 16056.,
      17008., 17960., 18912., 21040., 22048., 23056., 24064., 9061.,  10090.,
      11119., 12148., 14170., 15276., 16382., 17488., 19895., 21078., 22261.,
      23444., 26236., 27496., 28756., 30016., 11957., 13322., 14687., 16052.,
      18410., 19852., 21294., 22736., 25479., 26998., 28517., 30036., 33164.,
      34760., 36356., 37952., 7361.,  8194.,  9027.,  9860.,  11322., 12204.,
      13086., 13968., 15675., 16606., 17537., 18468., 20420., 21400., 22380.,
      23360., 11752., 13072., 14392., 15712., 18176., 19584., 20992., 22400.,
      25304., 26800., 28296., 29792., 33136., 34720., 36304., 37888., 14353.,
      15970., 17587., 19204., 22386., 24124., 25862., 27600., 31387., 33246.,
      35105., 36964., 41356., 43336., 45316., 47296., 18977., 21122., 23267.,
      25412., 29122., 31388., 33654., 35920., 40235., 42622., 45009., 47396.,
      52316., 54824., 57332., 59840., 11645., 12954., 14263., 15572., 17874.,
      19260., 20646., 22032., 24719., 26182., 27645., 29108., 32180., 33720.,
      35260., 36800., 11752., 13072., 14392., 15712., 18176., 19584., 20992.,
      22400., 25304., 26800., 28296., 29792., 33136., 34720., 36304., 37888.,
      14353., 15970., 17587., 19204., 22386., 24124., 25862., 27600., 31387.,
      33246., 35105., 36964., 41356., 43336., 45316., 47296., 18977., 21122.,
      23267., 25412., 29122., 31388., 33654., 35920., 40235., 42622., 45009.,
      47396., 52316., 54824., 57332., 59840., 11645., 12954., 14263., 15572.,
      17874., 19260., 20646., 22032., 24719., 26182., 27645., 29108., 32180.,
      33720., 35260., 36800., 10800., 12000., 13200., 14400., 16640., 17920.,
      19200., 20480., 23120., 24480., 25840., 27200., 30240., 31680., 33120.,
      34560., 13230., 14700., 16170., 17640., 20540., 22120., 23700., 25280.,
      28730., 30420., 32110., 33800., 37800., 39600., 41400., 43200., 17550.,
      19500., 21450., 23400., 26780., 28840., 30900., 32960., 36890., 39060.,
      41230., 43400., 47880., 50160., 52440., 54720., 10710., 11900., 13090.,
      14280., 16380., 17640., 18900., 20160., 22610., 23940., 25270., 26600.,
      29400., 30800., 32200., 33600., 6480.,  7200.,  7920.,  8640.,  9984.,
      10752., 11520., 12288., 13872., 14688., 15504., 16320., 18144., 19008.,
      19872., 20736., 7938.,  8820.,  9702.,  10584., 12324., 13272., 14220.,
      15168., 17238., 18252., 19266., 20280., 22680., 23760., 24840., 25920.,
      10530., 11700., 12870., 14040., 16068., 17304., 18540., 19776., 22134.,
      23436., 24738., 26040., 28728., 30096., 31464., 32832., 6426.,  7140.,
      7854.,  8568.,  9828.,  10584., 11340., 12096., 13566., 14364., 15162.,
      15960., 17640., 18480., 19320., 20160.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x16x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13453., 14938., 16423., 17908., 20958., 22564., 24170., 25776.,
      29431., 31158., 32885., 34612., 38872., 40720., 42568., 44416.,
      18077., 20090., 22103., 24116., 27694., 29828., 31962., 34096.,
      38279., 40534., 42789., 45044., 49832., 52208., 54584., 56960.,
      13453., 14938., 16423., 17908., 20958., 22564., 24170., 25776.,
      29431., 31158., 32885., 34612., 38872., 40720., 42568., 44416.,
      18077., 20090., 22103., 24116., 27694., 29828., 31962., 34096.,
      38279., 40534., 42789., 45044., 49832., 52208., 54584., 56960.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x18x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14014., 21854., 23290., 20966., 11694., 21594., 32662., 31626., 29292.,
      14880., 21362., 31678., 30002., 27812., 16360., 18654., 27936., 29252.,
      25845., 14079., 12050., 16760., 16964., 16255., 8285.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x18x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {32662., 31626., 31678., 30002.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x18x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12226., 13020., 18832., 20092., 20532., 21812., 18807., 19948., 10421.,
      11100., 18638., 19860., 31340., 33324., 30128., 32148., 30431., 32216.,
      15405., 16416., 18614., 19908., 33236., 35196., 29816., 31716., 27231.,
      29000., 17261., 18352., 17694., 18844., 28766., 30624., 31342., 33256.,
      24768., 26474., 14400., 15390., 12330., 13060., 15866., 16976., 16298.,
      17384., 15496., 16478., 9400.,  10010.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x18x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {31340., 33324., 30128., 32148.,
                                         33236., 35196., 29816., 31716.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x18x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12074., 12868., 13662., 14456., 19380., 20640., 21900., 23160., 19048.,
      20328., 21608., 22888., 17241., 18382., 19523., 20664., 10051., 10730.,
      11409., 12088., 18070., 19292., 20514., 21736., 29304., 31288., 33272.,
      35256., 29788., 31808., 33828., 35848., 27141., 28926., 30711., 32496.,
      14599., 15610., 16621., 17632., 19230., 20524., 21818., 23112., 29792.,
      31752., 33712., 35672., 28004., 29904., 31804., 33704., 26901., 28670.,
      30439., 32208., 16695., 17786., 18877., 19968., 17118., 18268., 19418.,
      20568., 27674., 29532., 31390., 33248., 28930., 30844., 32758., 34672.,
      25974., 27680., 29386., 31092., 13730., 14720., 15710., 16700., 10842.,
      11572., 12302., 13032., 16318., 17428., 18538., 19648., 15158., 16244.,
      17330., 18416., 14042., 15024., 16006., 16988., 9390.,  10000., 10610.,
      11220.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x18x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29304., 31288., 33272., 35256., 29788., 31808., 33828., 35848.,
      29792., 31752., 33712., 35672., 28004., 29904., 31804., 33704.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x18x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11979., 13560., 20287., 22840., 19015., 21544., 16534., 18776., 10442.,
      11768., 16995., 19368., 29607., 33496., 31535., 35560., 28174., 31792.,
      14194., 16256., 19955., 22536., 30359., 34296., 27679., 31496., 26894.,
      30416., 17138., 19296., 15728., 17912., 27064., 30592., 29304., 32976.,
      26060., 29396., 13924., 15868., 9752.,  11080., 14416., 16480., 15888.,
      18000., 16596., 18620., 11196., 12468.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x18x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {29607., 33496., 31535., 35560.,
                                         30359., 34296., 27679., 31496.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x18x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11923., 12726., 14364., 15216., 19763., 21022., 23608., 24944., 18011.,
      19246., 21808., 23120., 16136., 17196., 19462., 20592., 9936.,  10548.,
      11874., 12528., 16455., 17574., 20004., 21200., 28103., 29998., 33936.,
      35952., 30543., 32574., 36648., 38800., 28184., 29980., 33646., 35552.,
      13312., 14308., 16410., 17472., 19607., 20934., 23572., 24976., 30071.,
      32014., 36000., 38064., 25599., 27422., 31288., 33232., 25720., 27420.,
      30990., 32800., 17056., 18148., 20346., 21504., 14698., 15712., 17908.,
      18992., 24794., 26480., 30012., 31808., 27594., 29424., 33100., 35040.,
      25768., 27416., 30740., 32488., 12936., 13896., 15868., 16888., 9670.,
      10320., 11676., 12368., 14614., 15584., 17652., 18688., 14438., 15456.,
      17572., 18656., 14520., 15528., 17548., 18616., 10840., 11512., 12772.,
      13480.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x18x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28103., 29998., 33936., 35952., 30543., 32574., 36648., 38800.,
      30071., 32014., 36000., 38064., 25599., 27422., 31288., 33232.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x18x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10275., 11078., 11881., 12684., 14308., 15160., 16012., 16864., 16123.,
      17382., 18641., 19900., 22456., 23792., 25128., 26464., 15715., 16950.,
      18185., 19420., 21952., 23264., 24576., 25888., 14060., 15120., 16180.,
      17240., 19490., 20620., 21750., 22880., 8220.,  8832.,  9444.,  10056.,
      11382., 12036., 12690., 13344., 14351., 15470., 16589., 17708., 20124.,
      21320., 22516., 23712., 24359., 26254., 28149., 30044., 33984., 36000.,
      38016., 40032., 26031., 28062., 30093., 32124., 36200., 38352., 40504.,
      42656., 23756., 25552., 27348., 29144., 32810., 34716., 36622., 38528.,
      13340., 14336., 15332., 16328., 18446., 19508., 20570., 21632., 16863.,
      18190., 19517., 20844., 23468., 24872., 26276., 27680., 25175., 27118.,
      29061., 31004., 34992., 37056., 39120., 41184., 23519., 25342., 27165.,
      28988., 32856., 34800., 36744., 38688., 22508., 24208., 25908., 27608.,
      31178., 32988., 34798., 36608., 14588., 15680., 16772., 17864., 20078.,
      21236., 22394., 23552., 12990., 14004., 15018., 16032., 18220., 19304.,
      20388., 21472., 21662., 23348., 25034., 26720., 30260., 32056., 33852.,
      35648., 23534., 25364., 27194., 29024., 32708., 34648., 36588., 38528.,
      21760., 23408., 25056., 26704., 30036., 31784., 33532., 35280., 12752.,
      13712., 14672., 15632., 17596., 18616., 19636., 20656., 8098.,  8748.,
      9398.,  10048., 11396., 12088., 12780., 13472., 12578., 13548., 14518.,
      15488., 17564., 18600., 19636., 20672., 13202., 14220., 15238., 16256.,
      18380., 19464., 20548., 21632., 13312., 14320., 15328., 16336., 18348.,
      19416., 20484., 21552., 8880.,  9552.,  10224., 10896., 12164., 12872.,
      13580., 14288.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x18x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24359., 26254., 28149., 30044., 33984., 36000., 38016., 40032.,
      26031., 28062., 30093., 32124., 36200., 38352., 40504., 42656.,
      25175., 27118., 29061., 31004., 34992., 37056., 39120., 41184.,
      23519., 25342., 27165., 28988., 32856., 34800., 36744., 38688.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x18x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10629., 12140., 13749., 15456., 17585., 19964., 22497., 25184., 17089.,
      19484., 22033., 24736., 16358., 18520., 20822., 23264., 9066.,  10344.,
      11706., 13152., 16393., 18764., 21289., 23968., 27557., 31260., 35205.,
      39392., 25525., 29244., 33205., 37408., 25854., 29240., 32846., 36672.,
      13810., 15816., 17954., 20224., 16393., 18764., 21289., 23968., 27557.,
      31260., 35205., 39392., 25525., 29244., 33205., 37408., 25854., 29240.,
      32846., 36672., 13810., 15816., 17954., 20224., 14754., 16896., 19178.,
      21600., 24794., 28128., 31682., 35456., 23642., 27040., 30658., 34496.,
      23116., 26160., 29404., 32848., 13140., 14992., 16964., 19056., 9374.,
      10656., 12022., 13472., 13638., 15616., 17726., 19968., 15046., 17088.,
      19262., 21568., 12852., 14672., 16612., 18672., 8108.,  9200.,  10364.,
      11600.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x18x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27557., 31260., 35205., 39392., 25525., 29244., 33205., 37408.,
      27557., 31260., 35205., 39392., 25525., 29244., 33205., 37408.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x18x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9109.,  9834.,  11282., 12056., 13651., 14474., 16216., 17088., 14585.,
      15714., 17986., 19192., 21695., 22978., 25712., 27072., 14601., 15746.,
      18034., 19256., 21775., 23074., 25824., 27200., 13898., 14924., 17000.,
      18096., 20382., 21548., 24044., 25280., 8406.,  9012.,  10248., 10896.,
      12258., 12948., 14436., 15168., 14401., 15538., 17818., 19032., 21543.,
      22834., 25576., 26944., 22997., 24778., 28362., 30264., 34211., 36234.,
      40544., 42688., 23013., 24810., 28410., 30328., 34291., 36330., 40656.,
      42816., 21954., 23580., 26856., 28592., 32198., 34044., 37980., 39936.,
      13342., 14308., 16264., 17296., 19450., 20548., 22900., 24064., 14401.,
      15538., 17818., 19032., 21543., 22834., 25576., 26944., 22997., 24778.,
      28362., 30264., 34211., 36234., 40544., 42688., 23013., 24810., 28410.,
      30328., 34291., 36330., 40656., 42816., 21954., 23580., 26856., 28592.,
      32198., 34044., 37980., 39936., 13342., 14308., 16264., 17296., 19450.,
      20548., 22900., 24064., 13150., 14180., 16244., 17344., 19618., 20788.,
      23272., 24512., 20790., 22388., 25620., 27328., 30890., 32708., 36600.,
      38528., 21494., 23156., 26452., 28224., 31850., 33732., 37688., 39680.,
      19772., 21240., 24192., 25760., 29012., 30680., 34232., 36000., 12260.,
      13160., 14944., 15904., 17868., 18888., 21032., 22112., 7858.,  8476.,
      9708.,  10368., 11726., 12428., 13912., 14656., 12378., 13324., 15244.,
      16256., 18374., 19452., 21768., 22912., 13082., 14092., 16076., 17152.,
      19334., 20476., 22856., 24064., 11716., 12584., 14336., 15264., 17196.,
      18184., 20296., 21344., 7324.,  7864.,  8928.,  9504.,  10676., 11288.,
      12568., 13216.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x18x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22997., 24778., 28362., 30264., 34211., 36234., 40544., 42688.,
      23013., 24810., 28410., 30328., 34291., 36330., 40656., 42816.,
      22997., 24778., 28362., 30264., 34211., 36234., 40544., 42688.,
      23013., 24810., 28410., 30328., 34291., 36330., 40656., 42816.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME1x18x18x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6229.,  6954.,  7679.,  8404.,  9758.,  10532., 11306., 12080., 13679.,
      14502., 15325., 16148., 17992., 18864., 19736., 20608., 10057., 11186.,
      12315., 13444., 15566., 16772., 17978., 19184., 21691., 22974., 24257.,
      25540., 28432., 29792., 31152., 32512., 10073., 11218., 12363., 13508.,
      15646., 16868., 18090., 19312., 21835., 23134., 24433., 25732., 28640.,
      30016., 31392., 32768., 9394.,  10420., 11446., 12472., 14408., 15504.,
      16600., 17696., 19982., 21148., 22314., 23480., 26116., 27352., 28588.,
      29824., 5550.,  6156.,  6762.,  7368.,  8520.,  9168.,  9816.,  10464.,
      11826., 12516., 13206., 13896., 15468., 16200., 16932., 17664., 9809.,
      10946., 12083., 13220., 15350., 16564., 17778., 18992., 21507., 22798.,
      24089., 25380., 28280., 29648., 31016., 32384., 15797., 17578., 19359.,
      21140., 24486., 26388., 28290., 30192., 34143., 36166., 38189., 40212.,
      44768., 46912., 49056., 51200., 15813., 17610., 19407., 21204., 24566.,
      26484., 28402., 30320., 34287., 36326., 38365., 40404., 44976., 47136.,
      49296., 51456., 14794., 16420., 18046., 19672., 22728., 24464., 26200.,
      27936., 31542., 33388., 35234., 37080., 41236., 43192., 45148., 47104.,
      8790.,  9756.,  10722., 11688., 13512., 14544., 15576., 16608., 18762.,
      19860., 20958., 22056., 24540., 25704., 26868., 28032., 9809.,  10946.,
      12083., 13220., 15350., 16564., 17778., 18992., 21507., 22798., 24089.,
      25380., 28280., 29648., 31016., 32384., 15797., 17578., 19359., 21140.,
      24486., 26388., 28290., 30192., 34143., 36166., 38189., 40212., 44768.,
      46912., 49056., 51200., 15813., 17610., 19407., 21204., 24566., 26484.,
      28402., 30320., 34287., 36326., 38365., 40404., 44976., 47136., 49296.,
      51456., 14794., 16420., 18046., 19672., 22728., 24464., 26200., 27936.,
      31542., 33388., 35234., 37080., 41236., 43192., 45148., 47104., 8790.,
      9756.,  10722., 11688., 13512., 14544., 15576., 16608., 18762., 19860.,
      20958., 22056., 24540., 25704., 26868., 28032., 8822.,  9852.,  10882.,
      11912., 13852., 14952., 16052., 17152., 19442., 20612., 21782., 22952.,
      25592., 26832., 28072., 29312., 14190., 15788., 17386., 18984., 22012.,
      23720., 25428., 27136., 30714., 32532., 34350., 36168., 40296., 42224.,
      44152., 46080., 14510., 16172., 17834., 19496., 22588., 24360., 26132.,
      27904., 31546., 33428., 35310., 37192., 41384., 43376., 45368., 47360.,
      13212., 14680., 16148., 17616., 20384., 21952., 23520., 25088., 28356.,
      30024., 31692., 33360., 37128., 38896., 40664., 42432., 8100.,  9000.,
      9900.,  10800., 12480., 13440., 14400., 15360., 17340., 18360., 19380.,
      20400., 22680., 23760., 24840., 25920., 5242.,  5860.,  6478.,  7096.,
      8260.,  8920.,  9580.,  10240., 11614., 12316., 13018., 13720., 15304.,
      16048., 16792., 17536., 8450.,  9396.,  10342., 11288., 13092., 14104.,
      15116., 16128., 18262., 19340., 20418., 21496., 23960., 25104., 26248.,
      27392., 8770.,  9780.,  10790., 11800., 13668., 14744., 15820., 16896.,
      19094., 20236., 21378., 22520., 25048., 26256., 27464., 28672., 7812.,
      8680.,  9548.,  10416., 12064., 12992., 13920., 14848., 16796., 17784.,
      18772., 19760., 22008., 23056., 24104., 25152., 4860.,  5400.,  5940.,
      6480.,  7488.,  8064.,  8640.,  9216.,  10404., 11016., 11628., 12240.,
      13608., 14256., 14904., 15552.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID1x18x18x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15797., 17578., 19359., 21140., 24486., 26388., 28290., 30192.,
      34143., 36166., 38189., 40212., 44768., 46912., 49056., 51200.,
      15813., 17610., 19407., 21204., 24566., 26484., 28402., 30320.,
      34287., 36326., 38365., 40404., 44976., 47136., 49296., 51456.,
      15797., 17578., 19359., 21140., 24486., 26388., 28290., 30192.,
      34143., 36166., 38189., 40212., 44768., 46912., 49056., 51200.,
      15813., 17610., 19407., 21204., 24566., 26484., 28402., 30320.,
      34287., 36326., 38365., 40404., 44976., 47136., 49296., 51456.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x15x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15309., 20091., 19319., 13489., 22491., 33025., 29685., 17127.,
      24559., 33805., 33025., 18379., 14137., 21871., 19195., 10429.,
      14130., 19730., 20110., 14322., 21870., 31606., 29930., 17798.,
      24578., 33666., 31606., 17898., 14930., 21738., 18294., 9586.,
      13047., 19465., 20933., 15155., 21249., 30347., 30271., 18501.,
      23925., 33559., 30347., 17513., 15371., 20933., 17521., 8839.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x15x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {33025., 29685., 33805., 33025.,
                                         31606., 29930., 33666., 31606.,
                                         30347., 30271., 33559., 30347.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x15x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12665., 13434., 17631., 18774., 19043., 20174., 12505., 13282., 19123.,
      20438., 32057., 34018., 28413., 30282., 18595., 19758., 21391., 22782.,
      31541., 33658., 32057., 34018., 17375., 18550., 13945., 14834., 21967.,
      23390., 19763., 21110., 12665., 13434., 11442., 12164., 17664., 18788.,
      19268., 20444., 13290., 14116., 18604., 19900., 30506., 32428., 29102.,
      30996., 18772., 19980., 21096., 22500., 31494., 33604., 30506., 32428.,
      17360., 18516., 14714., 15652., 21688., 23124., 19036., 20332., 11442.,
      12164., 10411., 11086., 17889., 18994., 19557., 20778., 14075., 14950.,
      18117., 19362., 29275., 31158., 29983., 31902., 19013., 20266., 20513.,
      21898., 31543., 33614., 29275., 31158., 17537., 18674., 14811., 15766.,
      21121., 22538., 18565., 19810., 10411., 11086.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x15x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      32057., 34018., 28413., 30282., 31541., 33658., 32057., 34018.,
      30506., 32428., 29102., 30996., 31494., 33604., 30506., 32428.,
      29275., 31158., 29983., 31902., 31543., 33614., 29275., 31158.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x15x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14289., 15058., 15827., 16596., 16103., 17246., 18389., 19532., 18299.,
      19430., 20561., 21692., 11337., 12114., 12891., 13668., 18435., 19750.,
      21065., 22380., 32809., 34770., 36731., 38692., 26509., 28378., 30247.,
      32116., 18363., 19526., 20689., 21852., 22255., 23646., 25037., 26428.,
      29701., 31818., 33935., 36052., 32809., 34770., 36731., 38692., 16295.,
      17470., 18645., 19820., 12985., 13874., 14763., 15652., 22191., 23614.,
      25037., 26460., 18243., 19590., 20937., 22284., 14289., 15058., 15827.,
      16596., 12242., 12964., 13686., 14408., 16028., 17152., 18276., 19400.,
      18544., 19720., 20896., 22072., 12058., 12884., 13710., 14536., 18344.,
      19640., 20936., 22232., 29970., 31892., 33814., 35736., 27062., 28956.,
      30850., 32744., 18576., 19784., 20992., 22200., 21556., 22960., 24364.,
      25768., 29838., 31948., 34058., 36168., 29970., 31892., 33814., 35736.,
      16188., 17344., 18500., 19656., 13706., 14644., 15582., 16520., 21460.,
      22896., 24332., 25768., 17704., 19000., 20296., 21592., 12242., 12964.,
      13686., 14408., 10579., 11254., 11929., 12604., 16337., 17442., 18547.,
      19652., 18917., 20138., 21359., 22580., 12779., 13654., 14529., 15404.,
      18349., 19594., 20839., 22084., 27771., 29654., 31537., 33420., 27999.,
      29918., 31837., 33756., 18917., 20170., 21423., 22676., 20313., 21698.,
      23083., 24468., 30199., 32270., 34341., 36412., 27771., 29654., 31537.,
      33420., 16465., 17602., 18739., 19876., 14139., 15094., 16049., 17004.,
      20185., 21602., 23019., 24436., 17677., 18922., 20167., 21412., 10579.,
      11254., 11929., 12604.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x15x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      32809., 34770., 36731., 38692., 26509., 28378., 30247., 32116.,
      29701., 31818., 33935., 36052., 32809., 34770., 36731., 38692.,
      29970., 31892., 33814., 35736., 27062., 28956., 30850., 32744.,
      29838., 31948., 34058., 36168., 29970., 31892., 33814., 35736.,
      27771., 29654., 31537., 33420., 27999., 29918., 31837., 33756.,
      30199., 32270., 34341., 36412., 27771., 29654., 31537., 33420.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x15x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11289., 12788., 16125., 18476., 17605., 19996., 13313., 14980., 21517.,
      24108., 29985., 33860., 26985., 30740., 16949., 19292., 22277., 24956.,
      33881., 38004., 29985., 33860., 15853., 18156., 12913., 14564., 22581.,
      25276., 21949., 24556., 11289., 12788., 9099.,  10504., 15423., 17736.,
      18823., 21304., 14883., 16648., 19231., 21752., 27651., 31448., 27595.,
      31400., 18071., 20504., 22199., 24904., 32763., 36872., 27651., 31448.,
      15055., 17320., 14451., 16200., 22535., 25256., 19951., 22488., 9099.,
      10504., 7965.,  9308.,  15521., 17828., 19913., 22484., 16293., 18124.,
      18161., 20612., 26629., 30380., 28333., 32188., 19065., 21588., 21961.,
      24660., 31997., 36060., 26629., 30380., 15057., 17316., 15317., 17132.,
      22329., 25044., 18401., 20868., 7965.,  9308.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x15x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29985., 33860., 26985., 30740., 33881., 38004., 29985., 33860.,
      27651., 31448., 27595., 31400., 32763., 36872., 27651., 31448.,
      26629., 30380., 28333., 32188., 31997., 36060., 26629., 30380.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x15x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12225., 12946., 14502., 15272., 16825., 17882., 20266., 21400., 17441.,
      18538., 20962., 22136., 12065., 12898., 14550., 15432., 21185., 22522.,
      25170., 26584., 29897., 31778., 35702., 37704., 26833., 28594., 32398.,
      34280., 17025., 18122., 20514., 21688., 22361., 23786., 26522., 28024.,
      32577., 34706., 38878., 41128., 29897., 31778., 35702., 37704., 16665.,
      17722., 20074., 21208., 12065., 12898., 14550., 15432., 21689., 23114.,
      25818., 27320., 20257., 21594., 24210., 25624., 12225., 12946., 14502.,
      15272., 9667.,  10294., 11756., 12432., 15139., 16158., 18504., 19600.,
      18443., 19630., 22144., 23408., 13507., 14438., 16188., 17168., 18539.,
      19806., 22384., 23728., 26779., 28582., 32428., 34352., 26403., 28214.,
      32068., 34000., 17963., 19150., 21632., 22896., 21987., 23438., 26200.,
      27728., 30803., 32918., 37076., 39312., 26779., 28582., 32428., 34352.,
      14915., 15934., 18248., 19344., 13507., 14438., 16188., 17168., 21251.,
      22702., 25432., 26960., 18059., 19326., 21872., 23216., 9667.,  10294.,
      11756., 12432., 8165.,  8730.,  10130., 10744., 15021., 16034., 18374.,
      19464., 19189., 20466., 23070., 24424., 14661., 15658., 17474., 18520.,
      17301., 18498., 21006., 22280., 25229., 26986., 30786., 32664., 27253.,
      29114., 33018., 35000., 18645., 19922., 22494., 23848., 21325., 22770.,
      25526., 27048., 29765., 31834., 35946., 38136., 25229., 26986., 30786.,
      32664., 14733., 15746., 18054., 19144., 14661., 15658., 17474., 18520.,
      20525., 21970., 24694., 26216., 16757., 17954., 20430., 21704., 8165.,
      8730.,  10130., 10744.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x15x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29897., 31778., 35702., 37704., 26833., 28594., 32398., 34280.,
      32577., 34706., 38878., 41128., 29897., 31778., 35702., 37704.,
      26779., 28582., 32428., 34352., 26403., 28214., 32068., 34000.,
      30803., 32918., 37076., 39312., 26779., 28582., 32428., 34352.,
      25229., 26986., 30786., 32664., 27253., 29114., 33018., 35000.,
      29765., 31834., 35946., 38136., 25229., 26986., 30786., 32664.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x15x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11409., 12130., 12851., 13572., 15114., 15884., 16654., 17424., 15697.,
      16754., 17811., 18868., 21222., 22356., 23490., 24624., 14841., 15938.,
      17035., 18132., 20526., 21700., 22874., 24048., 10497., 11330., 12163.,
      12996., 14650., 15532., 16414., 17296., 19433., 20770., 22107., 23444.,
      26078., 27492., 28906., 30320., 27705., 29586., 31467., 33348., 37274.,
      39276., 41278., 43280., 24769., 26530., 28291., 30052., 33858., 35740.,
      37622., 39504., 14841., 15938., 17035., 18132., 20526., 21700., 22874.,
      24048., 19393., 20818., 22243., 23668., 26390., 27892., 29394., 30896.,
      29745., 31874., 34003., 36132., 40306., 42556., 44806., 47056., 27705.,
      29586., 31467., 33348., 37274., 39276., 41278., 43280., 15697., 16754.,
      17811., 18868., 21222., 22356., 23490., 24624., 10497., 11330., 12163.,
      12996., 14650., 15532., 16414., 17296., 19393., 20818., 22243., 23668.,
      26390., 27892., 29394., 30896., 19433., 20770., 22107., 23444., 26078.,
      27492., 28906., 30320., 11409., 12130., 12851., 13572., 15114., 15884.,
      16654., 17424., 7859.,  8486.,  9113.,  9740.,  11188., 11864., 12540.,
      13216., 12875., 13894., 14913., 15932., 18248., 19344., 20440., 21536.,
      15219., 16406., 17593., 18780., 21264., 22528., 23792., 25056., 11747.,
      12678., 13609., 14540., 16292., 17272., 18252., 19232., 15811., 17078.,
      18345., 19612., 22176., 23520., 24864., 26208., 22827., 24630., 26433.,
      28236., 32084., 34008., 35932., 37856., 23091., 24902., 26713., 28524.,
      32380., 34312., 36244., 38176., 15219., 16406., 17593., 18780., 21264.,
      22528., 23792., 25056., 18171., 19622., 21073., 22524., 25272., 26800.,
      28328., 29856., 26467., 28582., 30697., 32812., 36972., 39208., 41444.,
      43680., 22827., 24630., 26433., 28236., 32084., 34008., 35932., 37856.,
      12875., 13894., 14913., 15932., 18248., 19344., 20440., 21536., 11747.,
      12678., 13609., 14540., 16292., 17272., 18252., 19232., 18171., 19622.,
      21073., 22524., 25272., 26800., 28328., 29856., 15811., 17078., 18345.,
      19612., 22176., 23520., 24864., 26208., 7859.,  8486.,  9113.,  9740.,
      11188., 11864., 12540., 13216., 6389.,  6954.,  7519.,  8084.,  9470.,
      10084., 10698., 11312., 12133., 13146., 14159., 15172., 17482., 18572.,
      19662., 20752., 16109., 17386., 18663., 19940., 22514., 23868., 25222.,
      26576., 12453., 13450., 14447., 15444., 17262., 18308., 19354., 20400.,
      13981., 15178., 16375., 17572., 20066., 21340., 22614., 23888., 21053.,
      22810., 24567., 26324., 30126., 32004., 33882., 35760., 22949., 24810.,
      26671., 28532., 32438., 34420., 36402., 38384., 16109., 17386., 18663.,
      19940., 22514., 23868., 25222., 26576., 17429., 18874., 20319., 21764.,
      24506., 26028., 27550., 29072., 24693., 26762., 28831., 30900., 35014.,
      37204., 39394., 41584., 21053., 22810., 24567., 26324., 30126., 32004.,
      33882., 35760., 12133., 13146., 14159., 15172., 17482., 18572., 19662.,
      20752., 12453., 13450., 14447., 15444., 17262., 18308., 19354., 20400.,
      17429., 18874., 20319., 21764., 24506., 26028., 27550., 29072., 13981.,
      15178., 16375., 17572., 20066., 21340., 22614., 23888., 6389.,  6954.,
      7519.,  8084.,  9470.,  10084., 10698., 11312.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x15x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27705., 29586., 31467., 33348., 37274., 39276., 41278., 43280., 24769.,
      26530., 28291., 30052., 33858., 35740., 37622., 39504., 29745., 31874.,
      34003., 36132., 40306., 42556., 44806., 47056., 27705., 29586., 31467.,
      33348., 37274., 39276., 41278., 43280., 22827., 24630., 26433., 28236.,
      32084., 34008., 35932., 37856., 23091., 24902., 26713., 28524., 32380.,
      34312., 36244., 38176., 26467., 28582., 30697., 32812., 36972., 39208.,
      41444., 43680., 22827., 24630., 26433., 28236., 32084., 34008., 35932.,
      37856., 21053., 22810., 24567., 26324., 30126., 32004., 33882., 35760.,
      22949., 24810., 26671., 28532., 32438., 34420., 36402., 38384., 24693.,
      26762., 28831., 30900., 35014., 37204., 39394., 41584., 21053., 22810.,
      24567., 26324., 30126., 32004., 33882., 35760.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x15x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12289., 13796., 15401., 17104., 18813., 21236., 23813., 26544., 19405.,
      21780., 24309., 26992., 11249., 12740., 14329., 16016., 17981., 20340.,
      22853., 25520., 30025., 33732., 37681., 41872., 28793., 32548., 36545.,
      40784., 18605., 20948., 23445., 26096., 19693., 22100., 24661., 27376.,
      28793., 32548., 36545., 40784., 30025., 33732., 37681., 41872., 18525.,
      20916., 23461., 26160., 11249., 12740., 14329., 16016., 19405., 21780.,
      24309., 26992., 17181., 19508., 21989., 24624., 12289., 13796., 15401.,
      17104., 11205., 12716., 14325., 16032., 16785., 19196., 21761., 24480.,
      17793., 20188., 22737., 25440., 10101., 11596., 13189., 14880., 16305.,
      18684., 21217., 23904., 26477., 30156., 34077., 38240., 26589., 30380.,
      34413., 38688., 17377., 19740., 22257., 24928., 17601., 19996., 22545.,
      25248., 26589., 30380., 34413., 38688., 26477., 30156., 34077., 38240.,
      16369., 18748., 21281., 23968., 10101., 11596., 13189., 14880., 17185.,
      19548., 22065., 24736., 15889., 18236., 20737., 23392., 11205., 12716.,
      14325., 16032., 10377., 11892., 13505., 15216., 16549., 18948., 21501.,
      24208., 16821., 19236., 21805., 24528., 10233., 11732., 13329., 15024.,
      16805., 19204., 21757., 24464., 24753., 28436., 32361., 36528., 26401.,
      30196., 34233., 38512., 16277., 18660., 21197., 23888., 16277., 18660.,
      21197., 23888., 26401., 30196., 34233., 38512., 24753., 28436., 32361.,
      36528., 16005., 18372., 20893., 23568., 10233., 11732., 13329., 15024.,
      15733., 18084., 20589., 23248., 16261., 18628., 21149., 23824., 10377.,
      11892., 13505., 15216.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x15x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30025., 33732., 37681., 41872., 28793., 32548., 36545., 40784.,
      28793., 32548., 36545., 40784., 30025., 33732., 37681., 41872.,
      26477., 30156., 34077., 38240., 26589., 30380., 34413., 38688.,
      26589., 30380., 34413., 38688., 26477., 30156., 34077., 38240.,
      24753., 28436., 32361., 36528., 26401., 30196., 34233., 38512.,
      26401., 30196., 34233., 38512., 24753., 28436., 32361., 36528.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x15x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11281., 12002., 13446., 14216., 15807., 16626., 18364., 19232., 18277.,
      19450., 21766., 23016., 25563., 26890., 29668., 31072., 17461., 18586.,
      20854., 22056., 24555., 25834., 28564., 29920., 11281., 12002., 13446.,
      14216., 15807., 16626., 18364., 19232., 17461., 18586., 20854., 22056.,
      24555., 25834., 28564., 29920., 28441., 30226., 33814., 35720., 39671.,
      41698., 46012., 48160., 27977., 29810., 33446., 35400., 39399., 41474.,
      45836., 48032., 17461., 18586., 20854., 22056., 24555., 25834., 28564.,
      29920., 18277., 19450., 21766., 23016., 25563., 26890., 29668., 31072.,
      27977., 29810., 33446., 35400., 39399., 41474., 45836., 48032., 28441.,
      30226., 33814., 35720., 39671., 41698., 46012., 48160., 18277., 19450.,
      21766., 23016., 25563., 26890., 29668., 31072., 11281., 12002., 13446.,
      14216., 15807., 16626., 18364., 19232., 18277., 19450., 21766., 23016.,
      25563., 26890., 29668., 31072., 17461., 18586., 20854., 22056., 24555.,
      25834., 28564., 29920., 11281., 12002., 13446., 14216., 15807., 16626.,
      18364., 19232., 8981.,  9706.,  11154., 11928., 13523., 14346., 16088.,
      16960., 14233., 15394., 17698., 18936., 21471., 22786., 25552., 26944.,
      14217., 15362., 17650., 18872., 21391., 22690., 25440., 26816., 8981.,
      9706.,  11154., 11928., 13523., 14346., 16088., 16960., 14217., 15362.,
      17650., 18872., 21391., 22690., 25440., 26816., 21885., 23642., 27202.,
      29080., 33003., 35002., 39288., 41408., 23021., 24890., 28562., 30552.,
      34587., 36698., 41096., 43328., 14217., 15362., 17650., 18872., 21391.,
      22690., 25440., 26816., 14233., 15394., 17698., 18936., 21471., 22786.,
      25552., 26944., 23021., 24890., 28562., 30552., 34587., 36698., 41096.,
      43328., 21885., 23642., 27202., 29080., 33003., 35002., 39288., 41408.,
      14233., 15394., 17698., 18936., 21471., 22786., 25552., 26944., 8981.,
      9706.,  11154., 11928., 13523., 14346., 16088., 16960., 14233., 15394.,
      17698., 18936., 21471., 22786., 25552., 26944., 14217., 15362., 17650.,
      18872., 21391., 22690., 25440., 26816., 8981.,  9706.,  11154., 11928.,
      13523., 14346., 16088., 16960., 8217.,  8946.,  10398., 11176., 12775.,
      13602., 15348., 16224., 12749., 13898., 16190., 17416., 19939., 21242.,
      23996., 25376., 13277., 14442., 16750., 17992., 20531., 21850., 24620.,
      26016., 8217.,  8946.,  10398., 11176., 12775., 13602., 15348., 16224.,
      13277., 14442., 16750., 17992., 20531., 21850., 24620., 26016., 19969.,
      21730., 25294., 27176., 31103., 33106., 37396., 39520., 21105., 22978.,
      26654., 28648., 32687., 34802., 39204., 41440., 13277., 14442., 16750.,
      17992., 20531., 21850., 24620., 26016., 12749., 13898., 16190., 17416.,
      19939., 21242., 23996., 25376., 21105., 22978., 26654., 28648., 32687.,
      34802., 39204., 41440., 19969., 21730., 25294., 27176., 31103., 33106.,
      37396., 39520., 12749., 13898., 16190., 17416., 19939., 21242., 23996.,
      25376., 8217.,  8946.,  10398., 11176., 12775., 13602., 15348., 16224.,
      12749., 13898., 16190., 17416., 19939., 21242., 23996., 25376., 13277.,
      14442., 16750., 17992., 20531., 21850., 24620., 26016., 8217.,  8946.,
      10398., 11176., 12775., 13602., 15348., 16224.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x15x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28441., 30226., 33814., 35720., 39671., 41698., 46012., 48160., 27977.,
      29810., 33446., 35400., 39399., 41474., 45836., 48032., 27977., 29810.,
      33446., 35400., 39399., 41474., 45836., 48032., 28441., 30226., 33814.,
      35720., 39671., 41698., 46012., 48160., 21885., 23642., 27202., 29080.,
      33003., 35002., 39288., 41408., 23021., 24890., 28562., 30552., 34587.,
      36698., 41096., 43328., 23021., 24890., 28562., 30552., 34587., 36698.,
      41096., 43328., 21885., 23642., 27202., 29080., 33003., 35002., 39288.,
      41408., 19969., 21730., 25294., 27176., 31103., 33106., 37396., 39520.,
      21105., 22978., 26654., 28648., 32687., 34802., 39204., 41440., 21105.,
      22978., 26654., 28648., 32687., 34802., 39204., 41440., 19969., 21730.,
      25294., 27176., 31103., 33106., 37396., 39520.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x15x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7249.,  7970.,  8691.,  9412.,  10762., 11532., 12302., 13072., 14667.,
      15486., 16305., 17124., 18964., 19832., 20700., 21568., 11765., 12938.,
      14111., 15284., 17450., 18700., 19950., 21200., 23751., 25078., 26405.,
      27732., 30668., 32072., 33476., 34880., 11205., 12330., 13455., 14580.,
      16698., 17900., 19102., 20304., 22807., 24086., 25365., 26644., 29532.,
      30888., 32244., 33600., 7249.,  7970.,  8691.,  9412.,  10762., 11532.,
      12302., 13072., 14667., 15486., 16305., 17124., 18964., 19832., 20700.,
      21568., 11205., 12330., 13455., 14580., 16698., 17900., 19102., 20304.,
      22807., 24086., 25365., 26644., 29532., 30888., 32244., 33600., 18105.,
      19890., 21675., 23460., 26810., 28716., 30622., 32528., 36483., 38510.,
      40537., 42564., 47124., 49272., 51420., 53568., 18153., 19986., 21819.,
      23652., 27050., 29004., 30958., 32912., 36915., 38990., 41065., 43140.,
      47748., 49944., 52140., 54336., 11205., 12330., 13455., 14580., 16698.,
      17900., 19102., 20304., 22807., 24086., 25365., 26644., 29532., 30888.,
      32244., 33600., 11765., 12938., 14111., 15284., 17450., 18700., 19950.,
      21200., 23751., 25078., 26405., 27732., 30668., 32072., 33476., 34880.,
      18153., 19986., 21819., 23652., 27050., 29004., 30958., 32912., 36915.,
      38990., 41065., 43140., 47748., 49944., 52140., 54336., 18105., 19890.,
      21675., 23460., 26810., 28716., 30622., 32528., 36483., 38510., 40537.,
      42564., 47124., 49272., 51420., 53568., 11765., 12938., 14111., 15284.,
      17450., 18700., 19950., 21200., 23751., 25078., 26405., 27732., 30668.,
      32072., 33476., 34880., 7249.,  7970.,  8691.,  9412.,  10762., 11532.,
      12302., 13072., 14667., 15486., 16305., 17124., 18964., 19832., 20700.,
      21568., 11765., 12938., 14111., 15284., 17450., 18700., 19950., 21200.,
      23751., 25078., 26405., 27732., 30668., 32072., 33476., 34880., 11205.,
      12330., 13455., 14580., 16698., 17900., 19102., 20304., 22807., 24086.,
      25365., 26644., 29532., 30888., 32244., 33600., 7249.,  7970.,  8691.,
      9412.,  10762., 11532., 12302., 13072., 14667., 15486., 16305., 17124.,
      18964., 19832., 20700., 21568., 5717.,  6442.,  7167.,  7892.,  9246.,
      10020., 10794., 11568., 13167., 13990., 14813., 15636., 17480., 18352.,
      19224., 20096., 9065.,  10226., 11387., 12548., 14702., 15940., 17178.,
      18416., 20955., 22270., 23585., 24900., 27824., 29216., 30608., 32000.,
      9049.,  10194., 11339., 12484., 14622., 15844., 17066., 18288., 20811.,
      22110., 23409., 24708., 27616., 28992., 30368., 31744., 5717.,  6442.,
      7167.,  7892.,  9246.,  10020., 10794., 11568., 13167., 13990., 14813.,
      15636., 17480., 18352., 19224., 20096., 9049.,  10194., 11339., 12484.,
      14622., 15844., 17066., 18288., 20811., 22110., 23409., 24708., 27616.,
      28992., 30368., 31744., 13725., 15482., 17239., 18996., 22318., 24196.,
      26074., 27952., 31879., 33878., 35877., 37876., 42408., 44528., 46648.,
      48768., 14861., 16730., 18599., 20468., 23902., 25892., 27882., 29872.,
      33911., 36022., 38133., 40244., 44888., 47120., 49352., 51584., 9049.,
      10194., 11339., 12484., 14622., 15844., 17066., 18288., 20811., 22110.,
      23409., 24708., 27616., 28992., 30368., 31744., 9065.,  10226., 11387.,
      12548., 14702., 15940., 17178., 18416., 20955., 22270., 23585., 24900.,
      27824., 29216., 30608., 32000., 14861., 16730., 18599., 20468., 23902.,
      25892., 27882., 29872., 33911., 36022., 38133., 40244., 44888., 47120.,
      49352., 51584., 13725., 15482., 17239., 18996., 22318., 24196., 26074.,
      27952., 31879., 33878., 35877., 37876., 42408., 44528., 46648., 48768.,
      9065.,  10226., 11387., 12548., 14702., 15940., 17178., 18416., 20955.,
      22270., 23585., 24900., 27824., 29216., 30608., 32000., 5717.,  6442.,
      7167.,  7892.,  9246.,  10020., 10794., 11568., 13167., 13990., 14813.,
      15636., 17480., 18352., 19224., 20096., 9065.,  10226., 11387., 12548.,
      14702., 15940., 17178., 18416., 20955., 22270., 23585., 24900., 27824.,
      29216., 30608., 32000., 9049.,  10194., 11339., 12484., 14622., 15844.,
      17066., 18288., 20811., 22110., 23409., 24708., 27616., 28992., 30368.,
      31744., 5717.,  6442.,  7167.,  7892.,  9246.,  10020., 10794., 11568.,
      13167., 13990., 14813., 15636., 17480., 18352., 19224., 20096., 7257.,
      7986.,  8715.,  9444.,  10802., 11580., 12358., 13136., 14739., 15566.,
      16393., 17220., 19068., 19944., 20820., 21696., 11485., 12634., 13783.,
      14932., 17074., 18300., 19526., 20752., 23279., 24582., 25885., 27188.,
      30100., 31480., 32860., 34240., 11501., 12666., 13831., 14996., 17154.,
      18396., 19638., 20880., 23423., 24742., 26061., 27380., 30308., 31704.,
      33100., 34496., 7257.,  7986.,  8715.,  9444.,  10802., 11580., 12358.,
      13136., 14739., 15566., 16393., 17220., 19068., 19944., 20820., 21696.,
      11501., 12666., 13831., 14996., 17154., 18396., 19638., 20880., 23423.,
      24742., 26061., 27380., 30308., 31704., 33100., 34496., 17569., 19330.,
      21091., 22852., 26178., 28060., 29942., 31824., 35755., 37758., 39761.,
      41764., 46300., 48424., 50548., 52672., 18705., 20578., 22451., 24324.,
      27762., 29756., 31750., 33744., 37787., 39902., 42017., 44132., 48780.,
      51016., 53252., 55488., 11501., 12666., 13831., 14996., 17154., 18396.,
      19638., 20880., 23423., 24742., 26061., 27380., 30308., 31704., 33100.,
      34496., 11485., 12634., 13783., 14932., 17074., 18300., 19526., 20752.,
      23279., 24582., 25885., 27188., 30100., 31480., 32860., 34240., 18705.,
      20578., 22451., 24324., 27762., 29756., 31750., 33744., 37787., 39902.,
      42017., 44132., 48780., 51016., 53252., 55488., 17569., 19330., 21091.,
      22852., 26178., 28060., 29942., 31824., 35755., 37758., 39761., 41764.,
      46300., 48424., 50548., 52672., 11485., 12634., 13783., 14932., 17074.,
      18300., 19526., 20752., 23279., 24582., 25885., 27188., 30100., 31480.,
      32860., 34240., 7257.,  7986.,  8715.,  9444.,  10802., 11580., 12358.,
      13136., 14739., 15566., 16393., 17220., 19068., 19944., 20820., 21696.,
      11485., 12634., 13783., 14932., 17074., 18300., 19526., 20752., 23279.,
      24582., 25885., 27188., 30100., 31480., 32860., 34240., 11501., 12666.,
      13831., 14996., 17154., 18396., 19638., 20880., 23423., 24742., 26061.,
      27380., 30308., 31704., 33100., 34496., 7257.,  7986.,  8715.,  9444.,
      10802., 11580., 12358., 13136., 14739., 15566., 16393., 17220., 19068.,
      19944., 20820., 21696.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x15x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18105., 19890., 21675., 23460., 26810., 28716., 30622., 32528., 36483.,
      38510., 40537., 42564., 47124., 49272., 51420., 53568., 18153., 19986.,
      21819., 23652., 27050., 29004., 30958., 32912., 36915., 38990., 41065.,
      43140., 47748., 49944., 52140., 54336., 18153., 19986., 21819., 23652.,
      27050., 29004., 30958., 32912., 36915., 38990., 41065., 43140., 47748.,
      49944., 52140., 54336., 18105., 19890., 21675., 23460., 26810., 28716.,
      30622., 32528., 36483., 38510., 40537., 42564., 47124., 49272., 51420.,
      53568., 13725., 15482., 17239., 18996., 22318., 24196., 26074., 27952.,
      31879., 33878., 35877., 37876., 42408., 44528., 46648., 48768., 14861.,
      16730., 18599., 20468., 23902., 25892., 27882., 29872., 33911., 36022.,
      38133., 40244., 44888., 47120., 49352., 51584., 14861., 16730., 18599.,
      20468., 23902., 25892., 27882., 29872., 33911., 36022., 38133., 40244.,
      44888., 47120., 49352., 51584., 13725., 15482., 17239., 18996., 22318.,
      24196., 26074., 27952., 31879., 33878., 35877., 37876., 42408., 44528.,
      46648., 48768., 17569., 19330., 21091., 22852., 26178., 28060., 29942.,
      31824., 35755., 37758., 39761., 41764., 46300., 48424., 50548., 52672.,
      18705., 20578., 22451., 24324., 27762., 29756., 31750., 33744., 37787.,
      39902., 42017., 44132., 48780., 51016., 53252., 55488., 18705., 20578.,
      22451., 24324., 27762., 29756., 31750., 33744., 37787., 39902., 42017.,
      44132., 48780., 51016., 53252., 55488., 17569., 19330., 21091., 22852.,
      26178., 28060., 29942., 31824., 35755., 37758., 39761., 41764., 46300.,
      48424., 50548., 52672.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x16x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11156., 18227., 23439., 16737., 16828., 26973., 34609., 23639.,
      16828., 26973., 34609., 23639., 10340., 16655., 21243., 14469.,
      13268., 21059., 26271., 18641., 19708., 31053., 38689., 26663.,
      19708., 31053., 38689., 26663., 11940., 18399., 22987., 15029.,
      11156., 18227., 23439., 16737., 16828., 26973., 34609., 23639.,
      16828., 26973., 34609., 23639., 10340., 16655., 21243., 14469.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x16x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {25064., 32700., 25064., 32700.,
                                         29144., 36780., 29144., 36780.,
                                         25064., 32700., 25064., 32700.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x16x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9932.,  10568., 17051., 18118., 21919., 23294., 15509., 16482., 15852.,
      16888., 26907., 28634., 34399., 36610., 23797., 25358., 15852., 16888.,
      26907., 28634., 34399., 36610., 23797., 25358., 10156., 10792., 16915.,
      17982., 21687., 23062., 15101., 16074., 10956., 11720., 18955., 20198.,
      23823., 25374., 17157., 18242., 17900., 19064., 29259., 31162., 36751.,
      39138., 25125., 26798., 17900., 19064., 29259., 31162., 36751., 39138.,
      25125., 26798., 12204., 12968., 19203., 20446., 23975., 25526., 15597.,
      16682., 9932.,  10568., 17051., 18118., 21919., 23294., 15509., 16482.,
      15852., 16888., 26907., 28634., 34399., 36610., 23797., 25358., 15852.,
      16888., 26907., 28634., 34399., 36610., 23797., 25358., 10156., 10792.,
      16915., 17982., 21687., 23062., 15101., 16074.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x16x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25034., 26640., 32526., 34616., 25034., 26640., 32526., 34616.,
      27386., 29168., 34878., 37144., 27386., 29168., 34878., 37144.,
      25034., 26640., 32526., 34616., 25034., 26640., 32526., 34616.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x16x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9628.,  10264., 10900., 11536., 16555., 17622., 18689., 19756., 21247.,
      22622., 23997., 25372., 14205., 15178., 16151., 17124., 15500., 16536.,
      17572., 18608., 26039., 27766., 29493., 31220., 33243., 35454., 37665.,
      39876., 23473., 25034., 26595., 28156., 15500., 16536., 17572., 18608.,
      26039., 27766., 29493., 31220., 33243., 35454., 37665., 39876., 23473.,
      25034., 26595., 28156., 9372.,  10008., 10644., 11280., 15387., 16454.,
      17521., 18588., 19887., 21262., 22637., 24012., 14861., 15834., 16807.,
      17780., 11548., 12312., 13076., 13840., 18651., 19894., 21137., 22380.,
      23343., 24894., 26445., 27996., 15853., 16938., 18023., 19108., 17420.,
      18584., 19748., 20912., 28007., 29910., 31813., 33716., 35211., 37598.,
      39985., 42372., 24481., 26154., 27827., 29500., 17420., 18584., 19748.,
      20912., 28007., 29910., 31813., 33716., 35211., 37598., 39985., 42372.,
      24481., 26154., 27827., 29500., 11292., 12056., 12820., 13584., 18251.,
      19494., 20737., 21980., 22751., 24302., 25853., 27404., 16253., 17338.,
      18423., 19508., 9628.,  10264., 10900., 11536., 16555., 17622., 18689.,
      19756., 21247., 22622., 23997., 25372., 14205., 15178., 16151., 17124.,
      15500., 16536., 17572., 18608., 26039., 27766., 29493., 31220., 33243.,
      35454., 37665., 39876., 23473., 25034., 26595., 28156., 15500., 16536.,
      17572., 18608., 26039., 27766., 29493., 31220., 33243., 35454., 37665.,
      39876., 23473., 25034., 26595., 28156., 9372.,  10008., 10644., 11280.,
      15387., 16454., 17521., 18588., 19887., 21262., 22637., 24012., 14861.,
      15834., 16807., 17780.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x16x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.,
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.,
      26206., 27988., 29770., 31552., 33410., 35676., 37942., 40208.,
      26206., 27988., 29770., 31552., 33410., 35676., 37942., 40208.,
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.,
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x16x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6744.,  8080.,  15317., 17612., 25053., 27964., 19321., 21380., 10904.,
      13040., 24325., 27892., 39309., 43844., 29049., 32220., 10904., 13040.,
      24325., 27892., 39309., 43844., 29049., 32220., 7128.,  8528.,  15837.,
      18108., 25381., 28268., 18305., 20308., 6744.,  8080.,  15317., 17612.,
      25053., 27964., 19321., 21380., 10904., 13040., 24325., 27892., 39309.,
      43844., 29049., 32220., 10904., 13040., 24325., 27892., 39309., 43844.,
      29049., 32220., 7128.,  8528.,  15837., 18108., 25381., 28268., 18305.,
      20308., 6744.,  8080.,  15317., 17612., 25053., 27964., 19321., 21380.,
      10904., 13040., 24325., 27892., 39309., 43844., 29049., 32220., 10904.,
      13040., 24325., 27892., 39309., 43844., 29049., 32220., 7128.,  8528.,
      15837., 18108., 25381., 28268., 18305., 20308.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x16x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20579., 23904., 35563., 39856., 20579., 23904., 35563., 39856.,
      20579., 23904., 35563., 39856., 20579., 23904., 35563., 39856.,
      20579., 23904., 35563., 39856., 20579., 23904., 35563., 39856.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x16x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6896.,  7344.,  8744.,  9248.,  15265., 16266., 18594., 19672., 24649.,
      26266., 29210., 30904., 17801., 19026., 21070., 22344., 10480., 11184.,
      13384., 14176., 23429., 25002., 28618., 30312., 37837., 40378., 44962.,
      47624., 28557., 30482., 33702., 35704., 10480., 11184., 13384., 14176.,
      23429., 25002., 28618., 30312., 37837., 40378., 44962., 47624., 28557.,
      30482., 33702., 35704., 6384.,  6832.,  8232.,  8736.,  14513., 15514.,
      17794., 18872., 23513., 25130., 28026., 29720., 18585., 19810., 21870.,
      23144., 6896.,  7344.,  8744.,  9248.,  15265., 16266., 18594., 19672.,
      24649., 26266., 29210., 30904., 17801., 19026., 21070., 22344., 10480.,
      11184., 13384., 14176., 23429., 25002., 28618., 30312., 37837., 40378.,
      44962., 47624., 28557., 30482., 33702., 35704., 10480., 11184., 13384.,
      14176., 23429., 25002., 28618., 30312., 37837., 40378., 44962., 47624.,
      28557., 30482., 33702., 35704., 6384.,  6832.,  8232.,  8736.,  14513.,
      15514., 17794., 18872., 23513., 25130., 28026., 29720., 18585., 19810.,
      21870., 23144., 6896.,  7344.,  8744.,  9248.,  15265., 16266., 18594.,
      19672., 24649., 26266., 29210., 30904., 17801., 19026., 21070., 22344.,
      10480., 11184., 13384., 14176., 23429., 25002., 28618., 30312., 37837.,
      40378., 44962., 47624., 28557., 30482., 33702., 35704., 10480., 11184.,
      13384., 14176., 23429., 25002., 28618., 30312., 37837., 40378., 44962.,
      47624., 28557., 30482., 33702., 35704., 6384.,  6832.,  8232.,  8736.,
      14513., 15514., 17794., 18872., 23513., 25130., 28026., 29720., 18585.,
      19810., 21870., 23144.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x16x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.,
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.,
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.,
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.,
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.,
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x16x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5664.,  6112.,  6560.,  7008.,  8408.,  8912.,  9416.,  9920.,  12761.,
      13762., 14763., 15764., 18062., 19140., 20218., 21296., 20673., 22290.,
      23907., 25524., 28438., 30132., 31826., 33520., 15561., 16786., 18011.,
      19236., 21282., 22556., 23830., 25104., 8992.,  9696.,  10400., 11104.,
      13304., 14096., 14888., 15680., 20197., 21770., 23343., 24916., 28534.,
      30228., 31922., 33616., 32685., 35226., 37767., 40308., 44894., 47556.,
      50218., 52880., 24661., 26586., 28511., 30436., 33658., 35660., 37662.,
      39664., 8992.,  9696.,  10400., 11104., 13304., 14096., 14888., 15680.,
      20197., 21770., 23343., 24916., 28534., 30228., 31922., 33616., 32685.,
      35226., 37767., 40308., 44894., 47556., 50218., 52880., 24661., 26586.,
      28511., 30436., 33658., 35660., 37662., 39664., 5664.,  6112.,  6560.,
      7008.,  8408.,  8912.,  9416.,  9920.,  12761., 13762., 14763., 15764.,
      18062., 19140., 20218., 21296., 20673., 22290., 23907., 25524., 28438.,
      30132., 31826., 33520., 15561., 16786., 18011., 19236., 21282., 22556.,
      23830., 25104., 5664.,  6112.,  6560.,  7008.,  8408.,  8912.,  9416.,
      9920.,  12761., 13762., 14763., 15764., 18062., 19140., 20218., 21296.,
      20673., 22290., 23907., 25524., 28438., 30132., 31826., 33520., 15561.,
      16786., 18011., 19236., 21282., 22556., 23830., 25104., 8992.,  9696.,
      10400., 11104., 13304., 14096., 14888., 15680., 20197., 21770., 23343.,
      24916., 28534., 30228., 31922., 33616., 32685., 35226., 37767., 40308.,
      44894., 47556., 50218., 52880., 24661., 26586., 28511., 30436., 33658.,
      35660., 37662., 39664., 8992.,  9696.,  10400., 11104., 13304., 14096.,
      14888., 15680., 20197., 21770., 23343., 24916., 28534., 30228., 31922.,
      33616., 32685., 35226., 37767., 40308., 44894., 47556., 50218., 52880.,
      24661., 26586., 28511., 30436., 33658., 35660., 37662., 39664., 5664.,
      6112.,  6560.,  7008.,  8408.,  8912.,  9416.,  9920.,  12761., 13762.,
      14763., 15764., 18062., 19140., 20218., 21296., 20673., 22290., 23907.,
      25524., 28438., 30132., 31826., 33520., 15561., 16786., 18011., 19236.,
      21282., 22556., 23830., 25104., 5664.,  6112.,  6560.,  7008.,  8408.,
      8912.,  9416.,  9920.,  12761., 13762., 14763., 15764., 18062., 19140.,
      20218., 21296., 20673., 22290., 23907., 25524., 28438., 30132., 31826.,
      33520., 15561., 16786., 18011., 19236., 21282., 22556., 23830., 25104.,
      8992.,  9696.,  10400., 11104., 13304., 14096., 14888., 15680., 20197.,
      21770., 23343., 24916., 28534., 30228., 31922., 33616., 32685., 35226.,
      37767., 40308., 44894., 47556., 50218., 52880., 24661., 26586., 28511.,
      30436., 33658., 35660., 37662., 39664., 8992.,  9696.,  10400., 11104.,
      13304., 14096., 14888., 15680., 20197., 21770., 23343., 24916., 28534.,
      30228., 31922., 33616., 32685., 35226., 37767., 40308., 44894., 47556.,
      50218., 52880., 24661., 26586., 28511., 30436., 33658., 35660., 37662.,
      39664., 5664.,  6112.,  6560.,  7008.,  8408.,  8912.,  9416.,  9920.,
      12761., 13762., 14763., 15764., 18062., 19140., 20218., 21296., 20673.,
      22290., 23907., 25524., 28438., 30132., 31826., 33520., 15561., 16786.,
      18011., 19236., 21282., 22556., 23830., 25104.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x16x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17075., 18406., 19737., 21068., 24444., 25896., 27348., 28800., 29563.,
      31862., 34161., 36460., 40804., 43224., 45644., 48064., 17075., 18406.,
      19737., 21068., 24444., 25896., 27348., 28800., 29563., 31862., 34161.,
      36460., 40804., 43224., 45644., 48064., 17075., 18406., 19737., 21068.,
      24444., 25896., 27348., 28800., 29563., 31862., 34161., 36460., 40804.,
      43224., 45644., 48064., 17075., 18406., 19737., 21068., 24444., 25896.,
      27348., 28800., 29563., 31862., 34161., 36460., 40804., 43224., 45644.,
      48064., 17075., 18406., 19737., 21068., 24444., 25896., 27348., 28800.,
      29563., 31862., 34161., 36460., 40804., 43224., 45644., 48064., 17075.,
      18406., 19737., 21068., 24444., 25896., 27348., 28800., 29563., 31862.,
      34161., 36460., 40804., 43224., 45644., 48064.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x16x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12952., 14688., 16536., 18496., 14893., 17172., 19605., 22192., 21245.,
      23860., 26629., 29552., 11809., 13412., 15113., 16912., 19640., 22368.,
      25272., 28352., 23937., 27476., 31257., 35280., 31633., 35700., 40009.,
      44560., 19461., 21988., 24669., 27504., 19640., 22368., 25272., 28352.,
      23937., 27476., 31257., 35280., 31633., 35700., 40009., 44560., 19461.,
      21988., 24669., 27504., 11928., 13664., 15512., 17472., 15485., 17716.,
      20101., 22640., 19021., 21588., 24309., 27184., 12849., 14468., 16185.,
      18000., 12952., 14688., 16536., 18496., 14893., 17172., 19605., 22192.,
      21245., 23860., 26629., 29552., 11809., 13412., 15113., 16912., 19640.,
      22368., 25272., 28352., 23937., 27476., 31257., 35280., 31633., 35700.,
      40009., 44560., 19461., 21988., 24669., 27504., 19640., 22368., 25272.,
      28352., 23937., 27476., 31257., 35280., 31633., 35700., 40009., 44560.,
      19461., 21988., 24669., 27504., 11928., 13664., 15512., 17472., 15485.,
      17716., 20101., 22640., 19021., 21588., 24309., 27184., 12849., 14468.,
      16185., 18000., 12952., 14688., 16536., 18496., 14893., 17172., 19605.,
      22192., 21245., 23860., 26629., 29552., 11809., 13412., 15113., 16912.,
      19640., 22368., 25272., 28352., 23937., 27476., 31257., 35280., 31633.,
      35700., 40009., 44560., 19461., 21988., 24669., 27504., 19640., 22368.,
      25272., 28352., 23937., 27476., 31257., 35280., 31633., 35700., 40009.,
      44560., 19461., 21988., 24669., 27504., 11928., 13664., 15512., 17472.,
      15485., 17716., 20101., 22640., 19021., 21588., 24309., 27184., 12849.,
      14468., 16185., 18000.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x16x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.,
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.,
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.,
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.,
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.,
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x16x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10600., 11440., 13120., 14016., 15864., 16816., 18832., 19840., 12885.,
      13914., 16086., 17192., 19595., 20778., 23412., 24672., 17061., 18426.,
      20934., 22376., 25115., 26634., 29604., 31200., 10497., 11330., 12886.,
      13768., 15471., 16402., 18252., 19232., 16840., 18160., 20800., 22208.,
      25112., 26608., 29776., 31360., 20529., 22146., 25566., 27304., 31087.,
      32946., 37092., 39072., 27201., 29346., 33294., 35560., 39871., 42258.,
      46932., 49440., 16685., 17994., 20446., 21832., 24515., 25978., 28892.,
      30432., 16840., 18160., 20800., 22208., 25112., 26608., 29776., 31360.,
      20529., 22146., 25566., 27304., 31087., 32946., 37092., 39072., 27201.,
      29346., 33294., 35560., 39871., 42258., 46932., 49440., 16685., 17994.,
      20446., 21832., 24515., 25978., 28892., 30432., 10600., 11440., 13120.,
      14016., 15864., 16816., 18832., 19840., 12885., 13914., 16086., 17192.,
      19595., 20778., 23412., 24672., 17061., 18426., 20934., 22376., 25115.,
      26634., 29604., 31200., 10497., 11330., 12886., 13768., 15471., 16402.,
      18252., 19232., 10600., 11440., 13120., 14016., 15864., 16816., 18832.,
      19840., 12885., 13914., 16086., 17192., 19595., 20778., 23412., 24672.,
      17061., 18426., 20934., 22376., 25115., 26634., 29604., 31200., 10497.,
      11330., 12886., 13768., 15471., 16402., 18252., 19232., 16840., 18160.,
      20800., 22208., 25112., 26608., 29776., 31360., 20529., 22146., 25566.,
      27304., 31087., 32946., 37092., 39072., 27201., 29346., 33294., 35560.,
      39871., 42258., 46932., 49440., 16685., 17994., 20446., 21832., 24515.,
      25978., 28892., 30432., 16840., 18160., 20800., 22208., 25112., 26608.,
      29776., 31360., 20529., 22146., 25566., 27304., 31087., 32946., 37092.,
      39072., 27201., 29346., 33294., 35560., 39871., 42258., 46932., 49440.,
      16685., 17994., 20446., 21832., 24515., 25978., 28892., 30432., 10600.,
      11440., 13120., 14016., 15864., 16816., 18832., 19840., 12885., 13914.,
      16086., 17192., 19595., 20778., 23412., 24672., 17061., 18426., 20934.,
      22376., 25115., 26634., 29604., 31200., 10497., 11330., 12886., 13768.,
      15471., 16402., 18252., 19232., 10600., 11440., 13120., 14016., 15864.,
      16816., 18832., 19840., 12885., 13914., 16086., 17192., 19595., 20778.,
      23412., 24672., 17061., 18426., 20934., 22376., 25115., 26634., 29604.,
      31200., 10497., 11330., 12886., 13768., 15471., 16402., 18252., 19232.,
      16840., 18160., 20800., 22208., 25112., 26608., 29776., 31360., 20529.,
      22146., 25566., 27304., 31087., 32946., 37092., 39072., 27201., 29346.,
      33294., 35560., 39871., 42258., 46932., 49440., 16685., 17994., 20446.,
      21832., 24515., 25978., 28892., 30432., 16840., 18160., 20800., 22208.,
      25112., 26608., 29776., 31360., 20529., 22146., 25566., 27304., 31087.,
      32946., 37092., 39072., 27201., 29346., 33294., 35560., 39871., 42258.,
      46932., 49440., 16685., 17994., 20446., 21832., 24515., 25978., 28892.,
      30432., 10600., 11440., 13120., 14016., 15864., 16816., 18832., 19840.,
      12885., 13914., 16086., 17192., 19595., 20778., 23412., 24672., 17061.,
      18426., 20934., 22376., 25115., 26634., 29604., 31200., 10497., 11330.,
      12886., 13768., 15471., 16402., 18252., 19232.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x16x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19245., 20730., 24018., 25624., 29275., 31002., 35016., 36864., 25917.,
      27930., 31746., 33880., 38059., 40314., 44856., 47232., 19245., 20730.,
      24018., 25624., 29275., 31002., 35016., 36864., 25917., 27930., 31746.,
      33880., 38059., 40314., 44856., 47232., 19245., 20730., 24018., 25624.,
      29275., 31002., 35016., 36864., 25917., 27930., 31746., 33880., 38059.,
      40314., 44856., 47232., 19245., 20730., 24018., 25624., 29275., 31002.,
      35016., 36864., 25917., 27930., 31746., 33880., 38059., 40314., 44856.,
      47232., 19245., 20730., 24018., 25624., 29275., 31002., 35016., 36864.,
      25917., 27930., 31746., 33880., 38059., 40314., 44856., 47232., 19245.,
      20730., 24018., 25624., 29275., 31002., 35016., 36864., 25917., 27930.,
      31746., 33880., 38059., 40314., 44856., 47232.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x16x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7432.,  8272.,  9112.,  9952.,  11520., 12416., 13312., 14208., 16056.,
      17008., 17960., 18912., 21040., 22048., 23056., 24064., 9061.,  10090.,
      11119., 12148., 14170., 15276., 16382., 17488., 19895., 21078., 22261.,
      23444., 26236., 27496., 28756., 30016., 11957., 13322., 14687., 16052.,
      18410., 19852., 21294., 22736., 25479., 26998., 28517., 30036., 33164.,
      34760., 36356., 37952., 7361.,  8194.,  9027.,  9860.,  11322., 12204.,
      13086., 13968., 15675., 16606., 17537., 18468., 20420., 21400., 22380.,
      23360., 11752., 13072., 14392., 15712., 18176., 19584., 20992., 22400.,
      25304., 26800., 28296., 29792., 33136., 34720., 36304., 37888., 14353.,
      15970., 17587., 19204., 22386., 24124., 25862., 27600., 31387., 33246.,
      35105., 36964., 41356., 43336., 45316., 47296., 18977., 21122., 23267.,
      25412., 29122., 31388., 33654., 35920., 40235., 42622., 45009., 47396.,
      52316., 54824., 57332., 59840., 11645., 12954., 14263., 15572., 17874.,
      19260., 20646., 22032., 24719., 26182., 27645., 29108., 32180., 33720.,
      35260., 36800., 11752., 13072., 14392., 15712., 18176., 19584., 20992.,
      22400., 25304., 26800., 28296., 29792., 33136., 34720., 36304., 37888.,
      14353., 15970., 17587., 19204., 22386., 24124., 25862., 27600., 31387.,
      33246., 35105., 36964., 41356., 43336., 45316., 47296., 18977., 21122.,
      23267., 25412., 29122., 31388., 33654., 35920., 40235., 42622., 45009.,
      47396., 52316., 54824., 57332., 59840., 11645., 12954., 14263., 15572.,
      17874., 19260., 20646., 22032., 24719., 26182., 27645., 29108., 32180.,
      33720., 35260., 36800., 7432.,  8272.,  9112.,  9952.,  11520., 12416.,
      13312., 14208., 16056., 17008., 17960., 18912., 21040., 22048., 23056.,
      24064., 9061.,  10090., 11119., 12148., 14170., 15276., 16382., 17488.,
      19895., 21078., 22261., 23444., 26236., 27496., 28756., 30016., 11957.,
      13322., 14687., 16052., 18410., 19852., 21294., 22736., 25479., 26998.,
      28517., 30036., 33164., 34760., 36356., 37952., 7361.,  8194.,  9027.,
      9860.,  11322., 12204., 13086., 13968., 15675., 16606., 17537., 18468.,
      20420., 21400., 22380., 23360., 7432.,  8272.,  9112.,  9952.,  11520.,
      12416., 13312., 14208., 16056., 17008., 17960., 18912., 21040., 22048.,
      23056., 24064., 9061.,  10090., 11119., 12148., 14170., 15276., 16382.,
      17488., 19895., 21078., 22261., 23444., 26236., 27496., 28756., 30016.,
      11957., 13322., 14687., 16052., 18410., 19852., 21294., 22736., 25479.,
      26998., 28517., 30036., 33164., 34760., 36356., 37952., 7361.,  8194.,
      9027.,  9860.,  11322., 12204., 13086., 13968., 15675., 16606., 17537.,
      18468., 20420., 21400., 22380., 23360., 11752., 13072., 14392., 15712.,
      18176., 19584., 20992., 22400., 25304., 26800., 28296., 29792., 33136.,
      34720., 36304., 37888., 14353., 15970., 17587., 19204., 22386., 24124.,
      25862., 27600., 31387., 33246., 35105., 36964., 41356., 43336., 45316.,
      47296., 18977., 21122., 23267., 25412., 29122., 31388., 33654., 35920.,
      40235., 42622., 45009., 47396., 52316., 54824., 57332., 59840., 11645.,
      12954., 14263., 15572., 17874., 19260., 20646., 22032., 24719., 26182.,
      27645., 29108., 32180., 33720., 35260., 36800., 11752., 13072., 14392.,
      15712., 18176., 19584., 20992., 22400., 25304., 26800., 28296., 29792.,
      33136., 34720., 36304., 37888., 14353., 15970., 17587., 19204., 22386.,
      24124., 25862., 27600., 31387., 33246., 35105., 36964., 41356., 43336.,
      45316., 47296., 18977., 21122., 23267., 25412., 29122., 31388., 33654.,
      35920., 40235., 42622., 45009., 47396., 52316., 54824., 57332., 59840.,
      11645., 12954., 14263., 15572., 17874., 19260., 20646., 22032., 24719.,
      26182., 27645., 29108., 32180., 33720., 35260., 36800., 7432.,  8272.,
      9112.,  9952.,  11520., 12416., 13312., 14208., 16056., 17008., 17960.,
      18912., 21040., 22048., 23056., 24064., 9061.,  10090., 11119., 12148.,
      14170., 15276., 16382., 17488., 19895., 21078., 22261., 23444., 26236.,
      27496., 28756., 30016., 11957., 13322., 14687., 16052., 18410., 19852.,
      21294., 22736., 25479., 26998., 28517., 30036., 33164., 34760., 36356.,
      37952., 7361.,  8194.,  9027.,  9860.,  11322., 12204., 13086., 13968.,
      15675., 16606., 17537., 18468., 20420., 21400., 22380., 23360., 7432.,
      8272.,  9112.,  9952.,  11520., 12416., 13312., 14208., 16056., 17008.,
      17960., 18912., 21040., 22048., 23056., 24064., 9061.,  10090., 11119.,
      12148., 14170., 15276., 16382., 17488., 19895., 21078., 22261., 23444.,
      26236., 27496., 28756., 30016., 11957., 13322., 14687., 16052., 18410.,
      19852., 21294., 22736., 25479., 26998., 28517., 30036., 33164., 34760.,
      36356., 37952., 7361.,  8194.,  9027.,  9860.,  11322., 12204., 13086.,
      13968., 15675., 16606., 17537., 18468., 20420., 21400., 22380., 23360.,
      11752., 13072., 14392., 15712., 18176., 19584., 20992., 22400., 25304.,
      26800., 28296., 29792., 33136., 34720., 36304., 37888., 14353., 15970.,
      17587., 19204., 22386., 24124., 25862., 27600., 31387., 33246., 35105.,
      36964., 41356., 43336., 45316., 47296., 18977., 21122., 23267., 25412.,
      29122., 31388., 33654., 35920., 40235., 42622., 45009., 47396., 52316.,
      54824., 57332., 59840., 11645., 12954., 14263., 15572., 17874., 19260.,
      20646., 22032., 24719., 26182., 27645., 29108., 32180., 33720., 35260.,
      36800., 11752., 13072., 14392., 15712., 18176., 19584., 20992., 22400.,
      25304., 26800., 28296., 29792., 33136., 34720., 36304., 37888., 14353.,
      15970., 17587., 19204., 22386., 24124., 25862., 27600., 31387., 33246.,
      35105., 36964., 41356., 43336., 45316., 47296., 18977., 21122., 23267.,
      25412., 29122., 31388., 33654., 35920., 40235., 42622., 45009., 47396.,
      52316., 54824., 57332., 59840., 11645., 12954., 14263., 15572., 17874.,
      19260., 20646., 22032., 24719., 26182., 27645., 29108., 32180., 33720.,
      35260., 36800., 7432.,  8272.,  9112.,  9952.,  11520., 12416., 13312.,
      14208., 16056., 17008., 17960., 18912., 21040., 22048., 23056., 24064.,
      9061.,  10090., 11119., 12148., 14170., 15276., 16382., 17488., 19895.,
      21078., 22261., 23444., 26236., 27496., 28756., 30016., 11957., 13322.,
      14687., 16052., 18410., 19852., 21294., 22736., 25479., 26998., 28517.,
      30036., 33164., 34760., 36356., 37952., 7361.,  8194.,  9027.,  9860.,
      11322., 12204., 13086., 13968., 15675., 16606., 17537., 18468., 20420.,
      21400., 22380., 23360.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x16x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13453., 14938., 16423., 17908., 20958., 22564., 24170., 25776., 29431.,
      31158., 32885., 34612., 38872., 40720., 42568., 44416., 18077., 20090.,
      22103., 24116., 27694., 29828., 31962., 34096., 38279., 40534., 42789.,
      45044., 49832., 52208., 54584., 56960., 13453., 14938., 16423., 17908.,
      20958., 22564., 24170., 25776., 29431., 31158., 32885., 34612., 38872.,
      40720., 42568., 44416., 18077., 20090., 22103., 24116., 27694., 29828.,
      31962., 34096., 38279., 40534., 42789., 45044., 49832., 52208., 54584.,
      56960., 13453., 14938., 16423., 17908., 20958., 22564., 24170., 25776.,
      29431., 31158., 32885., 34612., 38872., 40720., 42568., 44416., 18077.,
      20090., 22103., 24116., 27694., 29828., 31962., 34096., 38279., 40534.,
      42789., 45044., 49832., 52208., 54584., 56960., 13453., 14938., 16423.,
      17908., 20958., 22564., 24170., 25776., 29431., 31158., 32885., 34612.,
      38872., 40720., 42568., 44416., 18077., 20090., 22103., 24116., 27694.,
      29828., 31962., 34096., 38279., 40534., 42789., 45044., 49832., 52208.,
      54584., 56960., 13453., 14938., 16423., 17908., 20958., 22564., 24170.,
      25776., 29431., 31158., 32885., 34612., 38872., 40720., 42568., 44416.,
      18077., 20090., 22103., 24116., 27694., 29828., 31962., 34096., 38279.,
      40534., 42789., 45044., 49832., 52208., 54584., 56960., 13453., 14938.,
      16423., 17908., 20958., 22564., 24170., 25776., 29431., 31158., 32885.,
      34612., 38872., 40720., 42568., 44416., 18077., 20090., 22103., 24116.,
      27694., 29828., 31962., 34096., 38279., 40534., 42789., 45044., 49832.,
      52208., 54584., 56960.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x18x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14014., 21854., 23290., 20966., 11694., 21594., 32662., 31626., 29292.,
      14880., 21362., 31678., 30002., 27812., 16360., 13910., 20030., 19626.,
      16442., 8202.,  13764., 20992., 21308., 18392., 10356., 19940., 29916.,
      32432., 29726., 16454., 23228., 32228., 31096., 29462., 16430., 12308.,
      19320., 18980., 15996., 8896.,  13354., 20738., 21854., 21706., 13370.,
      20590., 31266., 32662., 29744., 17100., 22214., 31626., 31678., 27432.,
      14132., 12946., 19442., 20030., 18302., 9398.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x18x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {32662., 31626., 31678., 30002.,
                                         29916., 32432., 32228., 31096.,
                                         31266., 32662., 31626., 31678.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x18x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12226., 13020., 18832., 20092., 20532., 21812., 18807., 19948., 10421.,
      11100., 18638., 19860., 31340., 33324., 30128., 32148., 30431., 32216.,
      15405., 16416., 18614., 19908., 33236., 35196., 29816., 31716., 27231.,
      29000., 17261., 18352., 12866., 13708., 20160., 21468., 21444., 22708.,
      16255., 17364., 8941.,  9588.,  11584., 12392., 20222., 21504., 21730.,
      23032., 17095., 18256., 10613., 11304., 19084., 20264., 29050., 30968.,
      32798., 34848., 28927., 30844., 16093., 17260., 21908., 23256., 31202.,
      33288., 28870., 30896., 28287., 30060., 16157., 17212., 12272., 13064.,
      19806., 21072., 19106., 20392., 17263., 18392., 10765., 11424., 10686.,
      11444., 20844., 22084., 18832., 20092., 18967., 20148., 12341., 13044.,
      17866., 19132., 29704., 31684., 31340., 33324., 27807., 29664., 18189.,
      19320., 19538., 20844., 30128., 32148., 33236., 35196., 27167., 28880.,
      14413., 15432., 13022., 13828., 20028., 21316., 20160., 21468., 19679.,
      20828., 9133.,  9804.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x18x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31340., 33324., 30128., 32148., 33236., 35196., 29816., 31716.,
      29050., 30968., 32798., 34848., 31202., 33288., 28870., 30896.,
      29704., 31684., 31340., 33324., 30128., 32148., 33236., 35196.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x18x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12074., 12868., 13662., 14456., 19380., 20640., 21900., 23160., 19048.,
      20328., 21608., 22888., 17241., 18382., 19523., 20664., 10051., 10730.,
      11409., 12088., 18070., 19292., 20514., 21736., 29304., 31288., 33272.,
      35256., 29788., 31808., 33828., 35848., 27141., 28926., 30711., 32496.,
      14599., 15610., 16621., 17632., 19230., 20524., 21818., 23112., 29792.,
      31752., 33712., 35672., 28004., 29904., 31804., 33704., 26901., 28670.,
      30439., 32208., 16695., 17786., 18877., 19968., 12410., 13252., 14094.,
      14936., 18788., 20096., 21404., 22712., 18712., 19976., 21240., 22504.,
      16393., 17502., 18611., 19720., 8947.,  9594.,  10241., 10888., 12632.,
      13440., 14248., 15056., 18874., 20156., 21438., 22720., 20206., 21508.,
      22810., 24112., 18021., 19182., 20343., 21504., 10231., 10922., 11613.,
      12304., 17660., 18840., 20020., 21200., 28950., 30868., 32786., 34704.,
      31066., 33116., 35166., 37216., 28353., 30270., 32187., 34104., 17739.,
      18906., 20073., 21240., 20324., 21672., 23020., 24368., 30782., 32868.,
      34954., 37040., 30146., 32172., 34198., 36224., 26193., 27966., 29739.,
      31512., 15419., 16474., 17529., 18584., 11784., 12576., 13368., 14160.,
      17930., 19196., 20462., 21728., 18942., 20228., 21514., 22800., 16469.,
      17598., 18727., 19856., 10663., 11322., 11981., 12640., 10694., 11452.,
      12210., 12968., 19968., 21208., 22448., 23688., 19380., 20640., 21900.,
      23160., 17777., 18958., 20139., 21320., 10411., 11114., 11817., 12520.,
      19938., 21204., 22470., 23736., 28212., 30192., 32172., 34152., 29304.,
      31288., 33272., 35256., 27453., 29310., 31167., 33024., 16719., 17850.,
      18981., 20112., 19402., 20708., 22014., 23320., 29788., 31808., 33828.,
      35848., 29792., 31752., 33712., 35672., 25293., 27006., 28719., 30432.,
      14911., 15930., 16949., 17968., 11734., 12540., 13346., 14152., 19184.,
      20472., 21760., 23048., 18788., 20096., 21404., 22712., 17313., 18462.,
      19611., 20760., 9563.,  10234., 10905., 11576.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x18x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29304., 31288., 33272., 35256., 29788., 31808., 33828., 35848.,
      29792., 31752., 33712., 35672., 28004., 29904., 31804., 33704.,
      28950., 30868., 32786., 34704., 31066., 33116., 35166., 37216.,
      30782., 32868., 34954., 37040., 30146., 32172., 34198., 36224.,
      28212., 30192., 32172., 34152., 29304., 31288., 33272., 35256.,
      29788., 31808., 33828., 35848., 29792., 31752., 33712., 35672.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x18x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11979., 13560., 20287., 22840., 19015., 21544., 16534., 18776., 10442.,
      11768., 16995., 19368., 29607., 33496., 31535., 35560., 28174., 31792.,
      14194., 16256., 19955., 22536., 30359., 34296., 27679., 31496., 26894.,
      30416., 17138., 19296., 12867., 14488., 19415., 21944., 19999., 22504.,
      16310., 18536., 8554.,  9832.,  10951., 12496., 19355., 21888., 20515.,
      23088., 17590., 19872., 9546.,  10896., 16607., 18960., 28483., 32304.,
      30891., 34880., 28110., 31800., 17874., 20056., 20431., 23024., 30131.,
      34128., 29883., 33760., 25678., 29144., 14930., 17016., 11935., 13520.,
      18835., 21344., 20315., 22864., 16918., 19184., 9386.,  10688., 10499.,
      12008., 19767., 22280., 20287., 22840., 17494., 19816., 10826., 12200.,
      18331., 20728., 27679., 31496., 29607., 33496., 29326., 33024., 17458.,
      19696., 19499., 22040., 31535., 35560., 30359., 34296., 25102., 28576.,
      14898., 16912., 11579., 13128., 18575., 21064., 19415., 21944., 18422.,
      20728., 9322.,  10648.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x18x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29607., 33496., 31535., 35560., 30359., 34296., 27679., 31496.,
      28483., 32304., 30891., 34880., 30131., 34128., 29883., 33760.,
      27679., 31496., 29607., 33496., 31535., 35560., 30359., 34296.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x18x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11923., 12726., 14364., 15216., 19763., 21022., 23608., 24944., 18011.,
      19246., 21808., 23120., 16136., 17196., 19462., 20592., 9936.,  10548.,
      11874., 12528., 16455., 17574., 20004., 21200., 28103., 29998., 33936.,
      35952., 30543., 32574., 36648., 38800., 28184., 29980., 33646., 35552.,
      13312., 14308., 16410., 17472., 19607., 20934., 23572., 24976., 30071.,
      32014., 36000., 38064., 25599., 27422., 31288., 33232., 25720., 27420.,
      30990., 32800., 17056., 18148., 20346., 21504., 12003., 12806., 14428.,
      15280., 17763., 19022., 21560., 22896., 18699., 19934., 22448., 23760.,
      15944., 17004., 19238., 20368., 8688.,  9300.,  10626., 11280., 11567.,
      12334., 13936., 14752., 18559., 19798., 22364., 23680., 19559., 20838.,
      23444., 24800., 17440., 18540., 20846., 22016., 8760.,  9396.,  10746.,
      11424., 16083., 17182., 19592., 20768., 27075., 28902., 32772., 34720.,
      30443., 32438., 36476., 38592., 26448., 28316., 32054., 34032., 18248.,
      19364., 21586., 22768., 20931., 22270., 24920., 26336., 28659., 30662.,
      34708., 36832., 29051., 30934., 34860., 36864., 24880., 26524., 30038.,
      31792., 14504., 15524., 17650., 18736., 11199., 11966., 13552., 14368.,
      18287., 19526., 22044., 23360., 18903., 20182., 22740., 24096., 15328.,
      16428., 18702., 19872., 10584., 11220., 12570., 13248., 10315., 11046.,
      12612., 13392., 19019., 20238., 22784., 24080., 19763., 21022., 23608.,
      24944., 16440., 17580., 19926., 21136., 9888.,  10548., 11922., 12624.,
      18847., 19990., 22444., 23664., 25599., 27422., 31288., 33232., 28103.,
      29998., 33936., 35952., 28360., 30236., 33982., 35968., 17104., 18276.,
      20554., 21792., 18479., 19766., 22364., 23728., 30543., 32574., 36648.,
      38800., 30071., 32014., 36000., 38064., 23208., 24860., 28382., 30144.,
      14256., 15204., 17258., 18272., 11547., 12278., 13828., 14608., 17403.,
      18622., 21120., 22416., 17763., 19022., 21560., 22896., 17528., 18668.,
      20982., 22192., 9664.,  10324., 11698., 12400.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x18x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28103., 29998., 33936., 35952., 30543., 32574., 36648., 38800.,
      30071., 32014., 36000., 38064., 25599., 27422., 31288., 33232.,
      27075., 28902., 32772., 34720., 30443., 32438., 36476., 38592.,
      28659., 30662., 34708., 36832., 29051., 30934., 34860., 36864.,
      25599., 27422., 31288., 33232., 28103., 29998., 33936., 35952.,
      30543., 32574., 36648., 38800., 30071., 32014., 36000., 38064.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x18x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10275., 11078., 11881., 12684., 14308., 15160., 16012., 16864., 16123.,
      17382., 18641., 19900., 22456., 23792., 25128., 26464., 15715., 16950.,
      18185., 19420., 21952., 23264., 24576., 25888., 14060., 15120., 16180.,
      17240., 19490., 20620., 21750., 22880., 8220.,  8832.,  9444.,  10056.,
      11382., 12036., 12690., 13344., 14351., 15470., 16589., 17708., 20124.,
      21320., 22516., 23712., 24359., 26254., 28149., 30044., 33984., 36000.,
      38016., 40032., 26031., 28062., 30093., 32124., 36200., 38352., 40504.,
      42656., 23756., 25552., 27348., 29144., 32810., 34716., 36622., 38528.,
      13340., 14336., 15332., 16328., 18446., 19508., 20570., 21632., 16863.,
      18190., 19517., 20844., 23468., 24872., 26276., 27680., 25175., 27118.,
      29061., 31004., 34992., 37056., 39120., 41184., 23519., 25342., 27165.,
      28988., 32856., 34800., 36744., 38688., 22508., 24208., 25908., 27608.,
      31178., 32988., 34798., 36608., 14588., 15680., 16772., 17864., 20078.,
      21236., 22394., 23552., 10275., 11078., 11881., 12684., 14308., 15160.,
      16012., 16864., 16123., 17382., 18641., 19900., 22456., 23792., 25128.,
      26464., 15715., 16950., 18185., 19420., 21952., 23264., 24576., 25888.,
      14060., 15120., 16180., 17240., 19490., 20620., 21750., 22880., 8220.,
      8832.,  9444.,  10056., 11382., 12036., 12690., 13344., 9727.,  10494.,
      11261., 12028., 13616., 14432., 15248., 16064., 15783., 17022., 18261.,
      19500., 22036., 23352., 24668., 25984., 16719., 17998., 19277., 20556.,
      23132., 24488., 25844., 27200., 14068., 15168., 16268., 17368., 19658.,
      20828., 21998., 23168., 8532.,  9168.,  9804.,  10440., 11790., 12468.,
      13146., 13824., 13499., 14598., 15697., 16796., 19192., 20368., 21544.,
      22720., 22883., 24710., 26537., 28364., 32236., 34184., 36132., 38080.,
      26379., 28374., 30369., 32364., 36404., 38520., 40636., 42752., 24180.,
      26048., 27916., 29784., 33522., 35500., 37478., 39456., 14900., 16016.,
      17132., 18248., 20486., 21668., 22850., 24032., 17323., 18662., 20001.,
      21340., 23976., 25392., 26808., 28224., 25875., 27878., 29881., 31884.,
      35932., 38056., 40180., 42304., 24731., 26614., 28497., 30380., 34308.,
      36312., 38316., 40320., 20756., 22400., 24044., 25688., 29202., 30956.,
      32710., 34464., 13652., 14672., 15692., 16712., 18854., 19940., 21026.,
      22112., 9727.,  10494., 11261., 12028., 13616., 14432., 15248., 16064.,
      15783., 17022., 18261., 19500., 22036., 23352., 24668., 25984., 16719.,
      17998., 19277., 20556., 23132., 24488., 25844., 27200., 14068., 15168.,
      16268., 17368., 19658., 20828., 21998., 23168., 8532.,  9168.,  9804.,
      10440., 11790., 12468., 13146., 13824., 9435.,  10166., 10897., 11628.,
      13180., 13960., 14740., 15520., 15699., 16918., 18137., 19356., 21872.,
      23168., 24464., 25760., 16123., 17382., 18641., 19900., 22456., 23792.,
      25128., 26464., 14588., 15728., 16868., 18008., 20338., 21548., 22758.,
      23968., 8332.,  8992.,  9652.,  10312., 11686., 12388., 13090., 13792.,
      14759., 15902., 17045., 18188., 20628., 21848., 23068., 24288., 23519.,
      25342., 27165., 28988., 32856., 34800., 36744., 38688., 24359., 26254.,
      28149., 30044., 33984., 36000., 38016., 40032., 23772., 25648., 27524.,
      29400., 33146., 35132., 37118., 39104., 14604., 15776., 16948., 18120.,
      20414., 21652., 22890., 24128., 16439., 17726., 19013., 20300., 22884.,
      24248., 25612., 26976., 26031., 28062., 30093., 32124., 36200., 38352.,
      40504., 42656., 25175., 27118., 29061., 31004., 34992., 37056., 39120.,
      41184., 21372., 23024., 24676., 26328., 29850., 31612., 33374., 35136.,
      12204., 13152., 14100., 15048., 17118., 18132., 19146., 20160., 9435.,
      10166., 10897., 11628., 13180., 13960., 14740., 15520., 15699., 16918.,
      18137., 19356., 21872., 23168., 24464., 25760., 16123., 17382., 18641.,
      19900., 22456., 23792., 25128., 26464., 14588., 15728., 16868., 18008.,
      20338., 21548., 22758., 23968., 8332.,  8992.,  9652.,  10312., 11686.,
      12388., 13090., 13792.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x18x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24359., 26254., 28149., 30044., 33984., 36000., 38016., 40032., 26031.,
      28062., 30093., 32124., 36200., 38352., 40504., 42656., 25175., 27118.,
      29061., 31004., 34992., 37056., 39120., 41184., 23519., 25342., 27165.,
      28988., 32856., 34800., 36744., 38688., 22883., 24710., 26537., 28364.,
      32236., 34184., 36132., 38080., 26379., 28374., 30369., 32364., 36404.,
      38520., 40636., 42752., 25875., 27878., 29881., 31884., 35932., 38056.,
      40180., 42304., 24731., 26614., 28497., 30380., 34308., 36312., 38316.,
      40320., 23519., 25342., 27165., 28988., 32856., 34800., 36744., 38688.,
      24359., 26254., 28149., 30044., 33984., 36000., 38016., 40032., 26031.,
      28062., 30093., 32124., 36200., 38352., 40504., 42656., 25175., 27118.,
      29061., 31004., 34992., 37056., 39120., 41184.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x18x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10629., 12140., 13749., 15456., 17585., 19964., 22497., 25184., 17089.,
      19484., 22033., 24736., 16358., 18520., 20822., 23264., 9066.,  10344.,
      11706., 13152., 16393., 18764., 21289., 23968., 27557., 31260., 35205.,
      39392., 25525., 29244., 33205., 37408., 25854., 29240., 32846., 36672.,
      13810., 15816., 17954., 20224., 16393., 18764., 21289., 23968., 27557.,
      31260., 35205., 39392., 25525., 29244., 33205., 37408., 25854., 29240.,
      32846., 36672., 13810., 15816., 17954., 20224., 10805., 12300., 13893.,
      15584., 16193., 18524., 21009., 23648., 16977., 19324., 21825., 24480.,
      14982., 17112., 19382., 21792., 9642.,  10920., 12282., 13728., 10365.,
      11868., 13469., 15168., 17257., 19628., 22153., 24832., 17689., 20108.,
      22681., 25408., 15958., 18136., 20454., 22912., 9786.,  11112., 12522.,
      14016., 17345., 19708., 22225., 24896., 25117., 28812., 32749., 36928.,
      28877., 32620., 36605., 40832., 23278., 26680., 30302., 34144., 16194.,
      18248., 20434., 22752., 17345., 19708., 22225., 24896., 25117., 28812.,
      32749., 36928., 28877., 32620., 36605., 40832., 23278., 26680., 30302.,
      34144., 16194., 18248., 20434., 22752., 10669., 12156., 13741., 15424.,
      15737., 18060., 20537., 23168., 17961., 20332., 22857., 25536., 14838.,
      16984., 19270., 21696., 10362., 11688., 13098., 14592., 10869., 12364.,
      13957., 15648., 17089., 19484., 22033., 24736., 17585., 19964., 22497.,
      25184., 15558., 17752., 20086., 22560., 9546.,  10856., 12250., 13728.,
      17657., 20012., 22521., 25184., 25525., 29244., 33205., 37408., 27557.,
      31260., 35205., 39392., 23518., 26936., 30574., 34432., 14802., 16840.,
      19010., 21312., 17657., 20012., 22521., 25184., 25525., 29244., 33205.,
      37408., 27557., 31260., 35205., 39392., 23518., 26936., 30574., 34432.,
      14802., 16840., 19010., 21312., 10277., 11756., 13333., 15008., 16977.,
      19324., 21825., 24480., 16193., 18524., 21009., 23648., 15718., 17880.,
      20182., 22624., 9098.,  10408., 11802., 13280.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x18x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27557., 31260., 35205., 39392., 25525., 29244., 33205., 37408.,
      27557., 31260., 35205., 39392., 25525., 29244., 33205., 37408.,
      25117., 28812., 32749., 36928., 28877., 32620., 36605., 40832.,
      25117., 28812., 32749., 36928., 28877., 32620., 36605., 40832.,
      25525., 29244., 33205., 37408., 27557., 31260., 35205., 39392.,
      25525., 29244., 33205., 37408., 27557., 31260., 35205., 39392.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x18x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9109.,  9834.,  11282., 12056., 13651., 14474., 16216., 17088., 14585.,
      15714., 17986., 19192., 21695., 22978., 25712., 27072., 14601., 15746.,
      18034., 19256., 21775., 23074., 25824., 27200., 13898., 14924., 17000.,
      18096., 20382., 21548., 24044., 25280., 8406.,  9012.,  10248., 10896.,
      12258., 12948., 14436., 15168., 14401., 15538., 17818., 19032., 21543.,
      22834., 25576., 26944., 22997., 24778., 28362., 30264., 34211., 36234.,
      40544., 42688., 23013., 24810., 28410., 30328., 34291., 36330., 40656.,
      42816., 21954., 23580., 26856., 28592., 32198., 34044., 37980., 39936.,
      13342., 14308., 16264., 17296., 19450., 20548., 22900., 24064., 14401.,
      15538., 17818., 19032., 21543., 22834., 25576., 26944., 22997., 24778.,
      28362., 30264., 34211., 36234., 40544., 42688., 23013., 24810., 28410.,
      30328., 34291., 36330., 40656., 42816., 21954., 23580., 26856., 28592.,
      32198., 34044., 37980., 39936., 13342., 14308., 16264., 17296., 19450.,
      20548., 22900., 24064., 9109.,  9834.,  11282., 12056., 13651., 14474.,
      16216., 17088., 14585., 15714., 17986., 19192., 21695., 22978., 25712.,
      27072., 14601., 15746., 18034., 19256., 21775., 23074., 25824., 27200.,
      13898., 14924., 17000., 18096., 20382., 21548., 24044., 25280., 8406.,
      9012.,  10248., 10896., 12258., 12948., 14436., 15168., 8845.,  9562.,
      11002., 11768., 13355., 14170., 15904., 16768., 13937., 15058., 17322.,
      18520., 21015., 22290., 25016., 26368., 15777., 16946., 19258., 20504.,
      23047., 24370., 27144., 28544., 13082., 14124., 16216., 17328., 19630.,
      20812., 23324., 24576., 9030.,  9684.,  10968., 11664., 13074., 13812.,
      15348., 16128., 14009., 15138., 17410., 18616., 21119., 22402., 25136.,
      26496., 22221., 23994., 27570., 29464., 33403., 35418., 39720., 41856.,
      24573., 26394., 30018., 31960., 35947., 38010., 42360., 44544., 20626.,
      22268., 25560., 27312., 30934., 32796., 36748., 38720., 13966., 14980.,
      16984., 18064., 20266., 21412., 23812., 25024., 14009., 15138., 17410.,
      18616., 21119., 22402., 25136., 26496., 22221., 23994., 27570., 29464.,
      33403., 35418., 39720., 41856., 24573., 26394., 30018., 31960., 35947.,
      38010., 42360., 44544., 20626., 22268., 25560., 27312., 30934., 32796.,
      36748., 38720., 13966., 14980., 16984., 18064., 20266., 21412., 23812.,
      25024., 8845.,  9562.,  11002., 11768., 13355., 14170., 15904., 16768.,
      13937., 15058., 17322., 18520., 21015., 22290., 25016., 26368., 15777.,
      16946., 19258., 20504., 23047., 24370., 27144., 28544., 13082., 14124.,
      16216., 17328., 19630., 20812., 23324., 24576., 9030.,  9684.,  10968.,
      11664., 13074., 13812., 15348., 16128., 9093.,  9802.,  11234., 11992.,
      13571., 14378., 16104., 16960., 14601., 15746., 18034., 19256., 21775.,
      23074., 25824., 27200., 14585., 15714., 17986., 19192., 21695., 22978.,
      25712., 27072., 13290., 14348., 16456., 17584., 19902., 21100., 23628.,
      24896., 7798.,  8436.,  9704.,  10384., 11778., 12500., 14020., 14784.,
      14385., 15506., 17770., 18968., 21463., 22738., 25464., 26816., 23013.,
      24810., 28410., 30328., 34291., 36330., 40656., 42816., 22997., 24778.,
      28362., 30264., 34211., 36234., 40544., 42688., 20834., 22492., 25800.,
      27568., 31206., 33084., 37052., 39040., 12222., 13220., 15208., 16272.,
      18458., 19588., 21972., 23168., 14385., 15506., 17770., 18968., 21463.,
      22738., 25464., 26816., 23013., 24810., 28410., 30328., 34291., 36330.,
      40656., 42816., 22997., 24778., 28362., 30264., 34211., 36234., 40544.,
      42688., 20834., 22492., 25800., 27568., 31206., 33084., 37052., 39040.,
      12222., 13220., 15208., 16272., 18458., 19588., 21972., 23168., 9093.,
      9802.,  11234., 11992., 13571., 14378., 16104., 16960., 14601., 15746.,
      18034., 19256., 21775., 23074., 25824., 27200., 14585., 15714., 17986.,
      19192., 21695., 22978., 25712., 27072., 13290., 14348., 16456., 17584.,
      19902., 21100., 23628., 24896., 7798.,  8436.,  9704.,  10384., 11778.,
      12500., 14020., 14784.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x18x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22997., 24778., 28362., 30264., 34211., 36234., 40544., 42688., 23013.,
      24810., 28410., 30328., 34291., 36330., 40656., 42816., 22997., 24778.,
      28362., 30264., 34211., 36234., 40544., 42688., 23013., 24810., 28410.,
      30328., 34291., 36330., 40656., 42816., 22221., 23994., 27570., 29464.,
      33403., 35418., 39720., 41856., 24573., 26394., 30018., 31960., 35947.,
      38010., 42360., 44544., 22221., 23994., 27570., 29464., 33403., 35418.,
      39720., 41856., 24573., 26394., 30018., 31960., 35947., 38010., 42360.,
      44544., 23013., 24810., 28410., 30328., 34291., 36330., 40656., 42816.,
      22997., 24778., 28362., 30264., 34211., 36234., 40544., 42688., 23013.,
      24810., 28410., 30328., 34291., 36330., 40656., 42816., 22997., 24778.,
      28362., 30264., 34211., 36234., 40544., 42688.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x15x18x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6229.,  6954.,  7679.,  8404.,  9758.,  10532., 11306., 12080., 13679.,
      14502., 15325., 16148., 17992., 18864., 19736., 20608., 10057., 11186.,
      12315., 13444., 15566., 16772., 17978., 19184., 21691., 22974., 24257.,
      25540., 28432., 29792., 31152., 32512., 10073., 11218., 12363., 13508.,
      15646., 16868., 18090., 19312., 21835., 23134., 24433., 25732., 28640.,
      30016., 31392., 32768., 9394.,  10420., 11446., 12472., 14408., 15504.,
      16600., 17696., 19982., 21148., 22314., 23480., 26116., 27352., 28588.,
      29824., 5550.,  6156.,  6762.,  7368.,  8520.,  9168.,  9816.,  10464.,
      11826., 12516., 13206., 13896., 15468., 16200., 16932., 17664., 9809.,
      10946., 12083., 13220., 15350., 16564., 17778., 18992., 21507., 22798.,
      24089., 25380., 28280., 29648., 31016., 32384., 15797., 17578., 19359.,
      21140., 24486., 26388., 28290., 30192., 34143., 36166., 38189., 40212.,
      44768., 46912., 49056., 51200., 15813., 17610., 19407., 21204., 24566.,
      26484., 28402., 30320., 34287., 36326., 38365., 40404., 44976., 47136.,
      49296., 51456., 14794., 16420., 18046., 19672., 22728., 24464., 26200.,
      27936., 31542., 33388., 35234., 37080., 41236., 43192., 45148., 47104.,
      8790.,  9756.,  10722., 11688., 13512., 14544., 15576., 16608., 18762.,
      19860., 20958., 22056., 24540., 25704., 26868., 28032., 9809.,  10946.,
      12083., 13220., 15350., 16564., 17778., 18992., 21507., 22798., 24089.,
      25380., 28280., 29648., 31016., 32384., 15797., 17578., 19359., 21140.,
      24486., 26388., 28290., 30192., 34143., 36166., 38189., 40212., 44768.,
      46912., 49056., 51200., 15813., 17610., 19407., 21204., 24566., 26484.,
      28402., 30320., 34287., 36326., 38365., 40404., 44976., 47136., 49296.,
      51456., 14794., 16420., 18046., 19672., 22728., 24464., 26200., 27936.,
      31542., 33388., 35234., 37080., 41236., 43192., 45148., 47104., 8790.,
      9756.,  10722., 11688., 13512., 14544., 15576., 16608., 18762., 19860.,
      20958., 22056., 24540., 25704., 26868., 28032., 6229.,  6954.,  7679.,
      8404.,  9758.,  10532., 11306., 12080., 13679., 14502., 15325., 16148.,
      17992., 18864., 19736., 20608., 10057., 11186., 12315., 13444., 15566.,
      16772., 17978., 19184., 21691., 22974., 24257., 25540., 28432., 29792.,
      31152., 32512., 10073., 11218., 12363., 13508., 15646., 16868., 18090.,
      19312., 21835., 23134., 24433., 25732., 28640., 30016., 31392., 32768.,
      9394.,  10420., 11446., 12472., 14408., 15504., 16600., 17696., 19982.,
      21148., 22314., 23480., 26116., 27352., 28588., 29824., 5550.,  6156.,
      6762.,  7368.,  8520.,  9168.,  9816.,  10464., 11826., 12516., 13206.,
      13896., 15468., 16200., 16932., 17664., 6733.,  7450.,  8167.,  8884.,
      10230., 10996., 11762., 12528., 14119., 14934., 15749., 16564., 18400.,
      19264., 20128., 20992., 10305., 11426., 12547., 13668., 15782., 16980.,
      18178., 19376., 21875., 23150., 24425., 25700., 28584., 29936., 31288.,
      32640., 10865., 12034., 13203., 14372., 16534., 17780., 19026., 20272.,
      22819., 24142., 25465., 26788., 29720., 31120., 32520., 33920., 9538.,
      10580., 11622., 12664., 14616., 15728., 16840., 17952., 20254., 21436.,
      22618., 23800., 26452., 27704., 28956., 30208., 5982.,  6636.,  7290.,
      7944.,  9144.,  9840.,  10536., 11232., 12642., 13380., 14118., 14856.,
      16476., 17256., 18036., 18816., 10569., 11698., 12827., 13956., 16078.,
      17284., 18490., 19696., 22203., 23486., 24769., 26052., 28944., 30304.,
      31664., 33024., 16301., 18074., 19847., 21620., 24958., 26852., 28746.,
      30640., 34583., 36598., 38613., 40628., 45176., 47312., 49448., 51584.,
      16861., 18682., 20503., 22324., 25710., 27652., 29594., 31536., 35527.,
      37590., 39653., 41716., 46312., 48496., 50680., 52864., 14938., 16580.,
      18222., 19864., 22936., 24688., 26440., 28192., 31814., 33676., 35538.,
      37400., 41572., 43544., 45516., 47488., 9222.,  10236., 11250., 12264.,
      14136., 15216., 16296., 17376., 19578., 20724., 21870., 23016., 25548.,
      26760., 27972., 29184., 10569., 11698., 12827., 13956., 16078., 17284.,
      18490., 19696., 22203., 23486., 24769., 26052., 28944., 30304., 31664.,
      33024., 16301., 18074., 19847., 21620., 24958., 26852., 28746., 30640.,
      34583., 36598., 38613., 40628., 45176., 47312., 49448., 51584., 16861.,
      18682., 20503., 22324., 25710., 27652., 29594., 31536., 35527., 37590.,
      39653., 41716., 46312., 48496., 50680., 52864., 14938., 16580., 18222.,
      19864., 22936., 24688., 26440., 28192., 31814., 33676., 35538., 37400.,
      41572., 43544., 45516., 47488., 9222.,  10236., 11250., 12264., 14136.,
      15216., 16296., 17376., 19578., 20724., 21870., 23016., 25548., 26760.,
      27972., 29184., 6733.,  7450.,  8167.,  8884.,  10230., 10996., 11762.,
      12528., 14119., 14934., 15749., 16564., 18400., 19264., 20128., 20992.,
      10305., 11426., 12547., 13668., 15782., 16980., 18178., 19376., 21875.,
      23150., 24425., 25700., 28584., 29936., 31288., 32640., 10865., 12034.,
      13203., 14372., 16534., 17780., 19026., 20272., 22819., 24142., 25465.,
      26788., 29720., 31120., 32520., 33920., 9538.,  10580., 11622., 12664.,
      14616., 15728., 16840., 17952., 20254., 21436., 22618., 23800., 26452.,
      27704., 28956., 30208., 5982.,  6636.,  7290.,  7944.,  9144.,  9840.,
      10536., 11232., 12642., 13380., 14118., 14856., 16476., 17256., 18036.,
      18816., 6213.,  6922.,  7631.,  8340.,  9678.,  10436., 11194., 11952.,
      13535., 14342., 15149., 15956., 17784., 18640., 19496., 20352., 10073.,
      11218., 12363., 13508., 15646., 16868., 18090., 19312., 21835., 23134.,
      24433., 25732., 28640., 30016., 31392., 32768., 10057., 11186., 12315.,
      13444., 15566., 16772., 17978., 19184., 21691., 22974., 24257., 25540.,
      28432., 29792., 31152., 32512., 9682.,  10740., 11798., 12856., 14824.,
      15952., 17080., 18208., 20526., 21724., 22922., 24120., 26788., 28056.,
      29324., 30592., 5838.,  6476.,  7114.,  7752.,  8936.,  9616.,  10296.,
      10976., 12370., 13092., 13814., 14536., 16140., 16904., 17668., 18432.,
      9793.,  10914., 12035., 13156., 15270., 16468., 17666., 18864., 21363.,
      22638., 23913., 25188., 28072., 29424., 30776., 32128., 15813., 17610.,
      19407., 21204., 24566., 26484., 28402., 30320., 34287., 36326., 38365.,
      40404., 44976., 47136., 49296., 51456., 15797., 17578., 19359., 21140.,
      24486., 26388., 28290., 30192., 34143., 36166., 38189., 40212., 44768.,
      46912., 49056., 51200., 15082., 16740., 18398., 20056., 23144., 24912.,
      26680., 28448., 32086., 33964., 35842., 37720., 41908., 43896., 45884.,
      47872., 9078.,  10076., 11074., 12072., 13928., 14992., 16056., 17120.,
      19306., 20436., 21566., 22696., 25212., 26408., 27604., 28800., 9793.,
      10914., 12035., 13156., 15270., 16468., 17666., 18864., 21363., 22638.,
      23913., 25188., 28072., 29424., 30776., 32128., 15813., 17610., 19407.,
      21204., 24566., 26484., 28402., 30320., 34287., 36326., 38365., 40404.,
      44976., 47136., 49296., 51456., 15797., 17578., 19359., 21140., 24486.,
      26388., 28290., 30192., 34143., 36166., 38189., 40212., 44768., 46912.,
      49056., 51200., 15082., 16740., 18398., 20056., 23144., 24912., 26680.,
      28448., 32086., 33964., 35842., 37720., 41908., 43896., 45884., 47872.,
      9078.,  10076., 11074., 12072., 13928., 14992., 16056., 17120., 19306.,
      20436., 21566., 22696., 25212., 26408., 27604., 28800., 6213.,  6922.,
      7631.,  8340.,  9678.,  10436., 11194., 11952., 13535., 14342., 15149.,
      15956., 17784., 18640., 19496., 20352., 10073., 11218., 12363., 13508.,
      15646., 16868., 18090., 19312., 21835., 23134., 24433., 25732., 28640.,
      30016., 31392., 32768., 10057., 11186., 12315., 13444., 15566., 16772.,
      17978., 19184., 21691., 22974., 24257., 25540., 28432., 29792., 31152.,
      32512., 9682.,  10740., 11798., 12856., 14824., 15952., 17080., 18208.,
      20526., 21724., 22922., 24120., 26788., 28056., 29324., 30592., 5838.,
      6476.,  7114.,  7752.,  8936.,  9616.,  10296., 10976., 12370., 13092.,
      13814., 14536., 16140., 16904., 17668., 18432.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x15x18x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15797., 17578., 19359., 21140., 24486., 26388., 28290., 30192., 34143.,
      36166., 38189., 40212., 44768., 46912., 49056., 51200., 15813., 17610.,
      19407., 21204., 24566., 26484., 28402., 30320., 34287., 36326., 38365.,
      40404., 44976., 47136., 49296., 51456., 15797., 17578., 19359., 21140.,
      24486., 26388., 28290., 30192., 34143., 36166., 38189., 40212., 44768.,
      46912., 49056., 51200., 15813., 17610., 19407., 21204., 24566., 26484.,
      28402., 30320., 34287., 36326., 38365., 40404., 44976., 47136., 49296.,
      51456., 16301., 18074., 19847., 21620., 24958., 26852., 28746., 30640.,
      34583., 36598., 38613., 40628., 45176., 47312., 49448., 51584., 16861.,
      18682., 20503., 22324., 25710., 27652., 29594., 31536., 35527., 37590.,
      39653., 41716., 46312., 48496., 50680., 52864., 16301., 18074., 19847.,
      21620., 24958., 26852., 28746., 30640., 34583., 36598., 38613., 40628.,
      45176., 47312., 49448., 51584., 16861., 18682., 20503., 22324., 25710.,
      27652., 29594., 31536., 35527., 37590., 39653., 41716., 46312., 48496.,
      50680., 52864., 15813., 17610., 19407., 21204., 24566., 26484., 28402.,
      30320., 34287., 36326., 38365., 40404., 44976., 47136., 49296., 51456.,
      15797., 17578., 19359., 21140., 24486., 26388., 28290., 30192., 34143.,
      36166., 38189., 40212., 44768., 46912., 49056., 51200., 15813., 17610.,
      19407., 21204., 24566., 26484., 28402., 30320., 34287., 36326., 38365.,
      40404., 44976., 47136., 49296., 51456., 15797., 17578., 19359., 21140.,
      24486., 26388., 28290., 30192., 34143., 36166., 38189., 40212., 44768.,
      46912., 49056., 51200.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x15x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14384., 20016., 21024., 15008., 22680., 30780., 29680., 18264.,
      21100., 31752., 30780., 18044., 11824., 19268., 20240., 12216.,
      17392., 22768., 21472., 13664., 23368., 33612., 29952., 17288.,
      23580., 34072., 33612., 19372., 13344., 21044., 20224., 11400.,
      14384., 20016., 21024., 15008., 22680., 30780., 29680., 18264.,
      21100., 31752., 30780., 18044., 11824., 19268., 20240., 12216.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x15x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {33025., 29685., 33805., 33025.,
                                         30097., 29957., 32797., 30097.,
                                         33025., 29685., 33805., 33025.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x15x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12708., 13568., 20164., 21472., 19972., 21312., 14180., 15104., 21834.,
      23184., 30872., 32888., 29660., 31584., 17346., 18544., 20006., 21304.,
      32916., 34960., 30872., 32888., 18302., 19512., 11272., 12000., 19990.,
      21256., 21882., 23200., 12176., 13008., 15524., 16512., 21956., 23392.,
      22340., 23744., 13540., 14464., 20122., 21488., 31912., 33944., 28716.,
      30592., 18002., 19152., 20790., 22168., 31844., 33968., 31912., 33944.,
      18382., 19608., 13176., 14016., 21350., 22760., 20746., 22144., 13088.,
      13936., 12708., 13568., 20164., 21472., 19972., 21312., 14180., 15104.,
      21834., 23184., 30872., 32888., 29660., 31584., 17346., 18544., 20006.,
      21304., 32916., 34960., 30872., 32888., 18302., 19512., 11272., 12000.,
      19990., 21256., 21882., 23200., 12176., 13008.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x15x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      32057., 34018., 28413., 30282., 31541., 33658., 32057., 34018.,
      29769., 31746., 30413., 32362., 34181., 36250., 29769., 31746.,
      32057., 34018., 28413., 30282., 31541., 33658., 32057., 34018.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x15x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11692., 12552., 13412., 14272., 20460., 21768., 23076., 24384., 19916.,
      21256., 22596., 23936., 13804., 14728., 15652., 16576., 21358., 22708.,
      24058., 25408., 28624., 30640., 32656., 34672., 29236., 31160., 33084.,
      35008., 17462., 18660., 19858., 21056., 19162., 20460., 21758., 23056.,
      31788., 33832., 35876., 37920., 28624., 30640., 32656., 34672., 18722.,
      19932., 21142., 22352., 10616., 11344., 12072., 12800., 18042., 19308.,
      20574., 21840., 20110., 21428., 22746., 24064., 11360., 12192., 13024.,
      13856., 15660., 16648., 17636., 18624., 20332., 21768., 23204., 24640.,
      21004., 22408., 23812., 25216., 14060., 14984., 15908., 16832., 19454.,
      20820., 22186., 23552., 31200., 33232., 35264., 37296., 26884., 28760.,
      30636., 32512., 17286., 18436., 19586., 20736., 21162., 22540., 23918.,
      25296., 30076., 32200., 34324., 36448., 31200., 33232., 35264., 37296.,
      17330., 18556., 19782., 21008., 12264., 13104., 13944., 14784., 21130.,
      22540., 23950., 25360., 19294., 20692., 22090., 23488., 13680., 14528.,
      15376., 16224., 11692., 12552., 13412., 14272., 20460., 21768., 23076.,
      24384., 19916., 21256., 22596., 23936., 13804., 14728., 15652., 16576.,
      21358., 22708., 24058., 25408., 28624., 30640., 32656., 34672., 29236.,
      31160., 33084., 35008., 17462., 18660., 19858., 21056., 19162., 20460.,
      21758., 23056., 31788., 33832., 35876., 37920., 28624., 30640., 32656.,
      34672., 18722., 19932., 21142., 22352., 10616., 11344., 12072., 12800.,
      18042., 19308., 20574., 21840., 20110., 21428., 22746., 24064., 11360.,
      12192., 13024., 13856.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x15x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      32809., 34770., 36731., 38692., 26509., 28378., 30247., 32116.,
      29701., 31818., 33935., 36052., 32809., 34770., 36731., 38692.,
      27705., 29682., 31659., 33636., 30941., 32890., 34839., 36788.,
      33493., 35562., 37631., 39700., 27705., 29682., 31659., 33636.,
      32809., 34770., 36731., 38692., 26509., 28378., 30247., 32116.,
      29701., 31818., 33935., 36052., 32809., 34770., 36731., 38692.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x15x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13816., 15616., 19000., 21696., 19192., 21888., 13304., 15104., 21947.,
      24608., 30943., 34928., 26535., 30272., 15475., 17760., 20787., 23408.,
      32919., 37024., 30943., 34928., 16811., 19184., 11375., 12928., 21059.,
      23696., 22347., 25024., 12871., 14496., 13816., 15616., 19000., 21696.,
      19192., 21888., 13304., 15104., 21947., 24608., 30943., 34928., 26535.,
      30272., 15475., 17760., 20787., 23408., 32919., 37024., 30943., 34928.,
      16811., 19184., 11375., 12928., 21059., 23696., 22347., 25024., 12871.,
      14496., 13816., 15616., 19000., 21696., 19192., 21888., 13304., 15104.,
      21947., 24608., 30943., 34928., 26535., 30272., 15475., 17760., 20787.,
      23408., 32919., 37024., 30943., 34928., 16811., 19184., 11375., 12928.,
      21059., 23696., 22347., 25024., 12871., 14496.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x15x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29985., 33860., 26985., 30740., 33881., 38004., 29985., 33860.,
      29985., 33860., 26985., 30740., 33881., 38004., 29985., 33860.,
      29985., 33860., 26985., 30740., 33881., 38004., 29985., 33860.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x15x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13072., 13968., 15816., 16768., 18352., 19600., 22344., 23680., 18480.,
      19728., 22472., 23808., 13584., 14480., 16328., 17280., 21143., 22550.,
      25268., 26752., 29207., 31198., 35232., 37344., 25503., 27246., 31032.,
      32896., 15351., 16390., 18724., 19840., 20655., 22022., 24700., 26144.,
      31247., 33358., 37512., 39744., 29207., 31198., 35232., 37344., 16655.,
      17782., 20204., 21408., 10623., 11358., 12912., 13696., 20047., 21414.,
      24060., 25504., 20279., 21686., 24372., 25856., 12511., 13358., 15040.,
      15936., 13072., 13968., 15816., 16768., 18352., 19600., 22344., 23680.,
      18480., 19728., 22472., 23808., 13584., 14480., 16328., 17280., 21143.,
      22550., 25268., 26752., 29207., 31198., 35232., 37344., 25503., 27246.,
      31032., 32896., 15351., 16390., 18724., 19840., 20655., 22022., 24700.,
      26144., 31247., 33358., 37512., 39744., 29207., 31198., 35232., 37344.,
      16655., 17782., 20204., 21408., 10623., 11358., 12912., 13696., 20047.,
      21414., 24060., 25504., 20279., 21686., 24372., 25856., 12511., 13358.,
      15040., 15936., 13072., 13968., 15816., 16768., 18352., 19600., 22344.,
      23680., 18480., 19728., 22472., 23808., 13584., 14480., 16328., 17280.,
      21143., 22550., 25268., 26752., 29207., 31198., 35232., 37344., 25503.,
      27246., 31032., 32896., 15351., 16390., 18724., 19840., 20655., 22022.,
      24700., 26144., 31247., 33358., 37512., 39744., 29207., 31198., 35232.,
      37344., 16655., 17782., 20204., 21408., 10623., 11358., 12912., 13696.,
      20047., 21414., 24060., 25504., 20279., 21686., 24372., 25856., 12511.,
      13358., 15040., 15936.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x15x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29897., 31778., 35702., 37704., 26833., 28594., 32398., 34280.,
      32577., 34706., 38878., 41128., 29897., 31778., 35702., 37704.,
      29897., 31778., 35702., 37704., 26833., 28594., 32398., 34280.,
      32577., 34706., 38878., 41128., 29897., 31778., 35702., 37704.,
      29897., 31778., 35702., 37704., 26833., 28594., 32398., 34280.,
      32577., 34706., 38878., 41128., 29897., 31778., 35702., 37704.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x15x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11168., 12064., 12960., 13856., 15704., 16656., 17608., 18560., 15744.,
      16992., 18240., 19488., 22232., 23568., 24904., 26240., 16000., 17248.,
      18496., 19744., 22488., 23824., 25160., 26496., 11680., 12576., 13472.,
      14368., 16216., 17168., 18120., 19072., 17679., 19086., 20493., 21900.,
      24604., 26088., 27572., 29056., 24935., 26926., 28917., 30908., 34944.,
      37056., 39168., 41280., 21871., 23614., 25357., 27100., 30888., 32752.,
      34616., 36480., 12959., 13998., 15037., 16076., 18412., 19528., 20644.,
      21760., 17511., 18878., 20245., 21612., 24276., 25720., 27164., 28608.,
      26847., 28958., 31069., 33180., 37336., 39568., 41800., 44032., 24935.,
      26926., 28917., 30908., 34944., 37056., 39168., 41280., 13943., 15070.,
      16197., 17324., 19748., 20952., 22156., 23360., 9247.,  9982.,  10717.,
      11452., 13008., 13792., 14576., 15360., 17511., 18878., 20245., 21612.,
      24276., 25720., 27164., 28608., 17679., 19086., 20493., 21900., 24604.,
      26088., 27572., 29056., 10383., 11230., 12077., 12924., 14592., 15488.,
      16384., 17280., 11168., 12064., 12960., 13856., 15704., 16656., 17608.,
      18560., 15744., 16992., 18240., 19488., 22232., 23568., 24904., 26240.,
      16000., 17248., 18496., 19744., 22488., 23824., 25160., 26496., 11680.,
      12576., 13472., 14368., 16216., 17168., 18120., 19072., 17679., 19086.,
      20493., 21900., 24604., 26088., 27572., 29056., 24935., 26926., 28917.,
      30908., 34944., 37056., 39168., 41280., 21871., 23614., 25357., 27100.,
      30888., 32752., 34616., 36480., 12959., 13998., 15037., 16076., 18412.,
      19528., 20644., 21760., 17511., 18878., 20245., 21612., 24276., 25720.,
      27164., 28608., 26847., 28958., 31069., 33180., 37336., 39568., 41800.,
      44032., 24935., 26926., 28917., 30908., 34944., 37056., 39168., 41280.,
      13943., 15070., 16197., 17324., 19748., 20952., 22156., 23360., 9247.,
      9982.,  10717., 11452., 13008., 13792., 14576., 15360., 17511., 18878.,
      20245., 21612., 24276., 25720., 27164., 28608., 17679., 19086., 20493.,
      21900., 24604., 26088., 27572., 29056., 10383., 11230., 12077., 12924.,
      14592., 15488., 16384., 17280., 11168., 12064., 12960., 13856., 15704.,
      16656., 17608., 18560., 15744., 16992., 18240., 19488., 22232., 23568.,
      24904., 26240., 16000., 17248., 18496., 19744., 22488., 23824., 25160.,
      26496., 11680., 12576., 13472., 14368., 16216., 17168., 18120., 19072.,
      17679., 19086., 20493., 21900., 24604., 26088., 27572., 29056., 24935.,
      26926., 28917., 30908., 34944., 37056., 39168., 41280., 21871., 23614.,
      25357., 27100., 30888., 32752., 34616., 36480., 12959., 13998., 15037.,
      16076., 18412., 19528., 20644., 21760., 17511., 18878., 20245., 21612.,
      24276., 25720., 27164., 28608., 26847., 28958., 31069., 33180., 37336.,
      39568., 41800., 44032., 24935., 26926., 28917., 30908., 34944., 37056.,
      39168., 41280., 13943., 15070., 16197., 17324., 19748., 20952., 22156.,
      23360., 9247.,  9982.,  10717., 11452., 13008., 13792., 14576., 15360.,
      17511., 18878., 20245., 21612., 24276., 25720., 27164., 28608., 17679.,
      19086., 20493., 21900., 24604., 26088., 27572., 29056., 10383., 11230.,
      12077., 12924., 14592., 15488., 16384., 17280.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x15x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27705., 29586., 31467., 33348., 37274., 39276., 41278., 43280., 24769.,
      26530., 28291., 30052., 33858., 35740., 37622., 39504., 29745., 31874.,
      34003., 36132., 40306., 42556., 44806., 47056., 27705., 29586., 31467.,
      33348., 37274., 39276., 41278., 43280., 27705., 29586., 31467., 33348.,
      37274., 39276., 41278., 43280., 24769., 26530., 28291., 30052., 33858.,
      35740., 37622., 39504., 29745., 31874., 34003., 36132., 40306., 42556.,
      44806., 47056., 27705., 29586., 31467., 33348., 37274., 39276., 41278.,
      43280., 27705., 29586., 31467., 33348., 37274., 39276., 41278., 43280.,
      24769., 26530., 28291., 30052., 33858., 35740., 37622., 39504., 29745.,
      31874., 34003., 36132., 40306., 42556., 44806., 47056., 27705., 29586.,
      31467., 33348., 37274., 39276., 41278., 43280.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x15x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12120., 13856., 15704., 17664., 19704., 22432., 25336., 28416., 19192.,
      21920., 24824., 27904., 12632., 14368., 16216., 18176., 16745., 19116.,
      21641., 24320., 26949., 30716., 34725., 38976., 26133., 29852., 33813.,
      38016., 16409., 18764., 21273., 23936., 17433., 19852., 22425., 25152.,
      26133., 29852., 33813., 38016., 26949., 30716., 34725., 38976., 17353.,
      19756., 22313., 25024., 10637., 12156., 13773., 15488., 17273., 19660.,
      22201., 24896., 16073., 18412., 20905., 23552., 11101., 12636., 14269.,
      16000., 12120., 13856., 15704., 17664., 19704., 22432., 25336., 28416.,
      19192., 21920., 24824., 27904., 12632., 14368., 16216., 18176., 16745.,
      19116., 21641., 24320., 26949., 30716., 34725., 38976., 26133., 29852.,
      33813., 38016., 16409., 18764., 21273., 23936., 17433., 19852., 22425.,
      25152., 26133., 29852., 33813., 38016., 26949., 30716., 34725., 38976.,
      17353., 19756., 22313., 25024., 10637., 12156., 13773., 15488., 17273.,
      19660., 22201., 24896., 16073., 18412., 20905., 23552., 11101., 12636.,
      14269., 16000., 12120., 13856., 15704., 17664., 19704., 22432., 25336.,
      28416., 19192., 21920., 24824., 27904., 12632., 14368., 16216., 18176.,
      16745., 19116., 21641., 24320., 26949., 30716., 34725., 38976., 26133.,
      29852., 33813., 38016., 16409., 18764., 21273., 23936., 17433., 19852.,
      22425., 25152., 26133., 29852., 33813., 38016., 26949., 30716., 34725.,
      38976., 17353., 19756., 22313., 25024., 10637., 12156., 13773., 15488.,
      17273., 19660., 22201., 24896., 16073., 18412., 20905., 23552., 11101.,
      12636., 14269., 16000.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x15x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30025., 33732., 37681., 41872., 28793., 32548., 36545., 40784.,
      28793., 32548., 36545., 40784., 30025., 33732., 37681., 41872.,
      30025., 33732., 37681., 41872., 28793., 32548., 36545., 40784.,
      28793., 32548., 36545., 40784., 30025., 33732., 37681., 41872.,
      30025., 33732., 37681., 41872., 28793., 32548., 36545., 40784.,
      28793., 32548., 36545., 40784., 30025., 33732., 37681., 41872.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x15x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10472., 11312., 12992., 13888., 15736., 16688., 18704., 19712., 16456.,
      17776., 20416., 21824., 24728., 26224., 29392., 30976., 16456., 17776.,
      20416., 21824., 24728., 26224., 29392., 30976., 10472., 11312., 12992.,
      13888., 15736., 16688., 18704., 19712., 13825., 14962., 17242., 18456.,
      20967., 22258., 25000., 26368., 22741., 24586., 28234., 30200., 34211.,
      36298., 40672., 42880., 22181., 23978., 27578., 29496., 33459., 35498.,
      39824., 41984., 13825., 14962., 17242., 18456., 20967., 22258., 25000.,
      26368., 14641., 15826., 18154., 19416., 21975., 23314., 26104., 27520.,
      22181., 23978., 27578., 29496., 33459., 35498., 39824., 41984., 22741.,
      24586., 28234., 30200., 34211., 36298., 40672., 42880., 14641., 15826.,
      18154., 19416., 21975., 23314., 26104., 27520., 9005.,  9754.,  11226.,
      12024., 13643., 14490., 16256., 17152., 14641., 15826., 18154., 19416.,
      21975., 23314., 26104., 27520., 13825., 14962., 17242., 18456., 20967.,
      22258., 25000., 26368., 9005.,  9754.,  11226., 12024., 13643., 14490.,
      16256., 17152., 10472., 11312., 12992., 13888., 15736., 16688., 18704.,
      19712., 16456., 17776., 20416., 21824., 24728., 26224., 29392., 30976.,
      16456., 17776., 20416., 21824., 24728., 26224., 29392., 30976., 10472.,
      11312., 12992., 13888., 15736., 16688., 18704., 19712., 13825., 14962.,
      17242., 18456., 20967., 22258., 25000., 26368., 22741., 24586., 28234.,
      30200., 34211., 36298., 40672., 42880., 22181., 23978., 27578., 29496.,
      33459., 35498., 39824., 41984., 13825., 14962., 17242., 18456., 20967.,
      22258., 25000., 26368., 14641., 15826., 18154., 19416., 21975., 23314.,
      26104., 27520., 22181., 23978., 27578., 29496., 33459., 35498., 39824.,
      41984., 22741., 24586., 28234., 30200., 34211., 36298., 40672., 42880.,
      14641., 15826., 18154., 19416., 21975., 23314., 26104., 27520., 9005.,
      9754.,  11226., 12024., 13643., 14490., 16256., 17152., 14641., 15826.,
      18154., 19416., 21975., 23314., 26104., 27520., 13825., 14962., 17242.,
      18456., 20967., 22258., 25000., 26368., 9005.,  9754.,  11226., 12024.,
      13643., 14490., 16256., 17152., 10472., 11312., 12992., 13888., 15736.,
      16688., 18704., 19712., 16456., 17776., 20416., 21824., 24728., 26224.,
      29392., 30976., 16456., 17776., 20416., 21824., 24728., 26224., 29392.,
      30976., 10472., 11312., 12992., 13888., 15736., 16688., 18704., 19712.,
      13825., 14962., 17242., 18456., 20967., 22258., 25000., 26368., 22741.,
      24586., 28234., 30200., 34211., 36298., 40672., 42880., 22181., 23978.,
      27578., 29496., 33459., 35498., 39824., 41984., 13825., 14962., 17242.,
      18456., 20967., 22258., 25000., 26368., 14641., 15826., 18154., 19416.,
      21975., 23314., 26104., 27520., 22181., 23978., 27578., 29496., 33459.,
      35498., 39824., 41984., 22741., 24586., 28234., 30200., 34211., 36298.,
      40672., 42880., 14641., 15826., 18154., 19416., 21975., 23314., 26104.,
      27520., 9005.,  9754.,  11226., 12024., 13643., 14490., 16256., 17152.,
      14641., 15826., 18154., 19416., 21975., 23314., 26104., 27520., 13825.,
      14962., 17242., 18456., 20967., 22258., 25000., 26368., 9005.,  9754.,
      11226., 12024., 13643., 14490., 16256., 17152.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x15x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28441., 30226., 33814., 35720., 39671., 41698., 46012., 48160., 27977.,
      29810., 33446., 35400., 39399., 41474., 45836., 48032., 27977., 29810.,
      33446., 35400., 39399., 41474., 45836., 48032., 28441., 30226., 33814.,
      35720., 39671., 41698., 46012., 48160., 28441., 30226., 33814., 35720.,
      39671., 41698., 46012., 48160., 27977., 29810., 33446., 35400., 39399.,
      41474., 45836., 48032., 27977., 29810., 33446., 35400., 39399., 41474.,
      45836., 48032., 28441., 30226., 33814., 35720., 39671., 41698., 46012.,
      48160., 28441., 30226., 33814., 35720., 39671., 41698., 46012., 48160.,
      27977., 29810., 33446., 35400., 39399., 41474., 45836., 48032., 27977.,
      29810., 33446., 35400., 39399., 41474., 45836., 48032., 28441., 30226.,
      33814., 35720., 39671., 41698., 46012., 48160.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x15x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6664.,  7504.,  8344.,  9184.,  10752., 11648., 12544., 13440., 15288.,
      16240., 17192., 18144., 20272., 21280., 22288., 23296., 10472., 11792.,
      13112., 14432., 16896., 18304., 19712., 21120., 24024., 25520., 27016.,
      28512., 31856., 33440., 35024., 36608., 10472., 11792., 13112., 14432.,
      16896., 18304., 19712., 21120., 24024., 25520., 27016., 28512., 31856.,
      33440., 35024., 36608., 6664.,  7504.,  8344.,  9184.,  10752., 11648.,
      12544., 13440., 15288., 16240., 17192., 18144., 20272., 21280., 22288.,
      23296., 8785.,  9922.,  11059., 12196., 14326., 15540., 16754., 17968.,
      20483., 21774., 23065., 24356., 27256., 28624., 29992., 31360., 14325.,
      16170., 18015., 19860., 23270., 25236., 27202., 29168., 33183., 35270.,
      37357., 39444., 44064., 46272., 48480., 50688., 14277., 16074., 17871.,
      19668., 23030., 24948., 26866., 28784., 32751., 34790., 36829., 38868.,
      43440., 45600., 47760., 49920., 8785.,  9922.,  11059., 12196., 14326.,
      15540., 16754., 17968., 20483., 21774., 23065., 24356., 27256., 28624.,
      29992., 31360., 9345.,  10530., 11715., 12900., 15078., 16340., 17602.,
      18864., 21427., 22766., 24105., 25444., 28392., 29808., 31224., 32640.,
      14277., 16074., 17871., 19668., 23030., 24948., 26866., 28784., 32751.,
      34790., 36829., 38868., 43440., 45600., 47760., 49920., 14325., 16170.,
      18015., 19860., 23270., 25236., 27202., 29168., 33183., 35270., 37357.,
      39444., 44064., 46272., 48480., 50688., 9345.,  10530., 11715., 12900.,
      15078., 16340., 17602., 18864., 21427., 22766., 24105., 25444., 28392.,
      29808., 31224., 32640., 5741.,  6490.,  7239.,  7988.,  9366.,  10164.,
      10962., 11760., 13383., 14230., 15077., 15924., 17792., 18688., 19584.,
      20480., 9345.,  10530., 11715., 12900., 15078., 16340., 17602., 18864.,
      21427., 22766., 24105., 25444., 28392., 29808., 31224., 32640., 8785.,
      9922.,  11059., 12196., 14326., 15540., 16754., 17968., 20483., 21774.,
      23065., 24356., 27256., 28624., 29992., 31360., 5741.,  6490.,  7239.,
      7988.,  9366.,  10164., 10962., 11760., 13383., 14230., 15077., 15924.,
      17792., 18688., 19584., 20480., 6664.,  7504.,  8344.,  9184.,  10752.,
      11648., 12544., 13440., 15288., 16240., 17192., 18144., 20272., 21280.,
      22288., 23296., 10472., 11792., 13112., 14432., 16896., 18304., 19712.,
      21120., 24024., 25520., 27016., 28512., 31856., 33440., 35024., 36608.,
      10472., 11792., 13112., 14432., 16896., 18304., 19712., 21120., 24024.,
      25520., 27016., 28512., 31856., 33440., 35024., 36608., 6664.,  7504.,
      8344.,  9184.,  10752., 11648., 12544., 13440., 15288., 16240., 17192.,
      18144., 20272., 21280., 22288., 23296., 8785.,  9922.,  11059., 12196.,
      14326., 15540., 16754., 17968., 20483., 21774., 23065., 24356., 27256.,
      28624., 29992., 31360., 14325., 16170., 18015., 19860., 23270., 25236.,
      27202., 29168., 33183., 35270., 37357., 39444., 44064., 46272., 48480.,
      50688., 14277., 16074., 17871., 19668., 23030., 24948., 26866., 28784.,
      32751., 34790., 36829., 38868., 43440., 45600., 47760., 49920., 8785.,
      9922.,  11059., 12196., 14326., 15540., 16754., 17968., 20483., 21774.,
      23065., 24356., 27256., 28624., 29992., 31360., 9345.,  10530., 11715.,
      12900., 15078., 16340., 17602., 18864., 21427., 22766., 24105., 25444.,
      28392., 29808., 31224., 32640., 14277., 16074., 17871., 19668., 23030.,
      24948., 26866., 28784., 32751., 34790., 36829., 38868., 43440., 45600.,
      47760., 49920., 14325., 16170., 18015., 19860., 23270., 25236., 27202.,
      29168., 33183., 35270., 37357., 39444., 44064., 46272., 48480., 50688.,
      9345.,  10530., 11715., 12900., 15078., 16340., 17602., 18864., 21427.,
      22766., 24105., 25444., 28392., 29808., 31224., 32640., 5741.,  6490.,
      7239.,  7988.,  9366.,  10164., 10962., 11760., 13383., 14230., 15077.,
      15924., 17792., 18688., 19584., 20480., 9345.,  10530., 11715., 12900.,
      15078., 16340., 17602., 18864., 21427., 22766., 24105., 25444., 28392.,
      29808., 31224., 32640., 8785.,  9922.,  11059., 12196., 14326., 15540.,
      16754., 17968., 20483., 21774., 23065., 24356., 27256., 28624., 29992.,
      31360., 5741.,  6490.,  7239.,  7988.,  9366.,  10164., 10962., 11760.,
      13383., 14230., 15077., 15924., 17792., 18688., 19584., 20480., 6664.,
      7504.,  8344.,  9184.,  10752., 11648., 12544., 13440., 15288., 16240.,
      17192., 18144., 20272., 21280., 22288., 23296., 10472., 11792., 13112.,
      14432., 16896., 18304., 19712., 21120., 24024., 25520., 27016., 28512.,
      31856., 33440., 35024., 36608., 10472., 11792., 13112., 14432., 16896.,
      18304., 19712., 21120., 24024., 25520., 27016., 28512., 31856., 33440.,
      35024., 36608., 6664.,  7504.,  8344.,  9184.,  10752., 11648., 12544.,
      13440., 15288., 16240., 17192., 18144., 20272., 21280., 22288., 23296.,
      8785.,  9922.,  11059., 12196., 14326., 15540., 16754., 17968., 20483.,
      21774., 23065., 24356., 27256., 28624., 29992., 31360., 14325., 16170.,
      18015., 19860., 23270., 25236., 27202., 29168., 33183., 35270., 37357.,
      39444., 44064., 46272., 48480., 50688., 14277., 16074., 17871., 19668.,
      23030., 24948., 26866., 28784., 32751., 34790., 36829., 38868., 43440.,
      45600., 47760., 49920., 8785.,  9922.,  11059., 12196., 14326., 15540.,
      16754., 17968., 20483., 21774., 23065., 24356., 27256., 28624., 29992.,
      31360., 9345.,  10530., 11715., 12900., 15078., 16340., 17602., 18864.,
      21427., 22766., 24105., 25444., 28392., 29808., 31224., 32640., 14277.,
      16074., 17871., 19668., 23030., 24948., 26866., 28784., 32751., 34790.,
      36829., 38868., 43440., 45600., 47760., 49920., 14325., 16170., 18015.,
      19860., 23270., 25236., 27202., 29168., 33183., 35270., 37357., 39444.,
      44064., 46272., 48480., 50688., 9345.,  10530., 11715., 12900., 15078.,
      16340., 17602., 18864., 21427., 22766., 24105., 25444., 28392., 29808.,
      31224., 32640., 5741.,  6490.,  7239.,  7988.,  9366.,  10164., 10962.,
      11760., 13383., 14230., 15077., 15924., 17792., 18688., 19584., 20480.,
      9345.,  10530., 11715., 12900., 15078., 16340., 17602., 18864., 21427.,
      22766., 24105., 25444., 28392., 29808., 31224., 32640., 8785.,  9922.,
      11059., 12196., 14326., 15540., 16754., 17968., 20483., 21774., 23065.,
      24356., 27256., 28624., 29992., 31360., 5741.,  6490.,  7239.,  7988.,
      9366.,  10164., 10962., 11760., 13383., 14230., 15077., 15924., 17792.,
      18688., 19584., 20480.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x15x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18105., 19890., 21675., 23460., 26810., 28716., 30622., 32528., 36483.,
      38510., 40537., 42564., 47124., 49272., 51420., 53568., 18153., 19986.,
      21819., 23652., 27050., 29004., 30958., 32912., 36915., 38990., 41065.,
      43140., 47748., 49944., 52140., 54336., 18153., 19986., 21819., 23652.,
      27050., 29004., 30958., 32912., 36915., 38990., 41065., 43140., 47748.,
      49944., 52140., 54336., 18105., 19890., 21675., 23460., 26810., 28716.,
      30622., 32528., 36483., 38510., 40537., 42564., 47124., 49272., 51420.,
      53568., 18105., 19890., 21675., 23460., 26810., 28716., 30622., 32528.,
      36483., 38510., 40537., 42564., 47124., 49272., 51420., 53568., 18153.,
      19986., 21819., 23652., 27050., 29004., 30958., 32912., 36915., 38990.,
      41065., 43140., 47748., 49944., 52140., 54336., 18153., 19986., 21819.,
      23652., 27050., 29004., 30958., 32912., 36915., 38990., 41065., 43140.,
      47748., 49944., 52140., 54336., 18105., 19890., 21675., 23460., 26810.,
      28716., 30622., 32528., 36483., 38510., 40537., 42564., 47124., 49272.,
      51420., 53568., 18105., 19890., 21675., 23460., 26810., 28716., 30622.,
      32528., 36483., 38510., 40537., 42564., 47124., 49272., 51420., 53568.,
      18153., 19986., 21819., 23652., 27050., 29004., 30958., 32912., 36915.,
      38990., 41065., 43140., 47748., 49944., 52140., 54336., 18153., 19986.,
      21819., 23652., 27050., 29004., 30958., 32912., 36915., 38990., 41065.,
      43140., 47748., 49944., 52140., 54336., 18105., 19890., 21675., 23460.,
      26810., 28716., 30622., 32528., 36483., 38510., 40537., 42564., 47124.,
      49272., 51420., 53568.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x16x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13616., 21708., 27228., 19124., 19708., 31053., 38689., 26663.,
      19708., 31053., 38689., 26663., 11940., 18399., 22987., 15029.,
      13616., 21708., 27228., 19124., 19708., 31053., 38689., 26663.,
      19708., 31053., 38689., 26663., 11940., 18399., 22987., 15029.,
      13616., 21708., 27228., 19124., 19708., 31053., 38689., 26663.,
      19708., 31053., 38689., 26663., 11940., 18399., 22987., 15029.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x16x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {25064., 32700., 25064., 32700.,
                                         25064., 32700., 25064., 32700.,
                                         25064., 32700., 25064., 32700.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x16x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11616., 12416., 20176., 21496., 25616., 27288., 18032., 19208., 17900.,
      19064., 29259., 31162., 36751., 39138., 25125., 26798., 17900., 19064.,
      29259., 31162., 36751., 39138., 25125., 26798., 12204., 12968., 19203.,
      20446., 23975., 25526., 15597., 16682., 11616., 12416., 20176., 21496.,
      25616., 27288., 18032., 19208., 17900., 19064., 29259., 31162., 36751.,
      39138., 25125., 26798., 17900., 19064., 29259., 31162., 36751., 39138.,
      25125., 26798., 12204., 12968., 19203., 20446., 23975., 25526., 15597.,
      16682., 11616., 12416., 20176., 21496., 25616., 27288., 18032., 19208.,
      17900., 19064., 29259., 31162., 36751., 39138., 25125., 26798., 17900.,
      19064., 29259., 31162., 36751., 39138., 25125., 26798., 12204., 12968.,
      19203., 20446., 23975., 25526., 15597., 16682.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x16x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25034., 26640., 32526., 34616., 25034., 26640., 32526., 34616.,
      25034., 26640., 32526., 34616., 25034., 26640., 32526., 34616.,
      25034., 26640., 32526., 34616., 25034., 26640., 32526., 34616.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x16x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12000., 12800., 13600., 14400., 19672., 20992., 22312., 23632., 24952.,
      26624., 28296., 29968., 17512., 18688., 19864., 21040., 17420., 18584.,
      19748., 20912., 28007., 29910., 31813., 33716., 35211., 37598., 39985.,
      42372., 24481., 26154., 27827., 29500., 17420., 18584., 19748., 20912.,
      28007., 29910., 31813., 33716., 35211., 37598., 39985., 42372., 24481.,
      26154., 27827., 29500., 11292., 12056., 12820., 13584., 18251., 19494.,
      20737., 21980., 22751., 24302., 25853., 27404., 16253., 17338., 18423.,
      19508., 12000., 12800., 13600., 14400., 19672., 20992., 22312., 23632.,
      24952., 26624., 28296., 29968., 17512., 18688., 19864., 21040., 17420.,
      18584., 19748., 20912., 28007., 29910., 31813., 33716., 35211., 37598.,
      39985., 42372., 24481., 26154., 27827., 29500., 17420., 18584., 19748.,
      20912., 28007., 29910., 31813., 33716., 35211., 37598., 39985., 42372.,
      24481., 26154., 27827., 29500., 11292., 12056., 12820., 13584., 18251.,
      19494., 20737., 21980., 22751., 24302., 25853., 27404., 16253., 17338.,
      18423., 19508., 12000., 12800., 13600., 14400., 19672., 20992., 22312.,
      23632., 24952., 26624., 28296., 29968., 17512., 18688., 19864., 21040.,
      17420., 18584., 19748., 20912., 28007., 29910., 31813., 33716., 35211.,
      37598., 39985., 42372., 24481., 26154., 27827., 29500., 17420., 18584.,
      19748., 20912., 28007., 29910., 31813., 33716., 35211., 37598., 39985.,
      42372., 24481., 26154., 27827., 29500., 11292., 12056., 12820., 13584.,
      18251., 19494., 20737., 21980., 22751., 24302., 25853., 27404., 16253.,
      17338., 18423., 19508.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x16x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.,
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.,
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.,
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.,
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.,
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x16x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7936.,  9472.,  17616., 20208., 28496., 31792., 21008., 23312., 10904.,
      13040., 24325., 27892., 39309., 43844., 29049., 32220., 10904., 13040.,
      24325., 27892., 39309., 43844., 29049., 32220., 7128.,  8528.,  15837.,
      18108., 25381., 28268., 18305., 20308., 7936.,  9472.,  17616., 20208.,
      28496., 31792., 21008., 23312., 10904., 13040., 24325., 27892., 39309.,
      43844., 29049., 32220., 10904., 13040., 24325., 27892., 39309., 43844.,
      29049., 32220., 7128.,  8528.,  15837., 18108., 25381., 28268., 18305.,
      20308., 7936.,  9472.,  17616., 20208., 28496., 31792., 21008., 23312.,
      10904., 13040., 24325., 27892., 39309., 43844., 29049., 32220., 10904.,
      13040., 24325., 27892., 39309., 43844., 29049., 32220., 7128.,  8528.,
      15837., 18108., 25381., 28268., 18305., 20308.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x16x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20579., 23904., 35563., 39856., 20579., 23904., 35563., 39856.,
      20579., 23904., 35563., 39856., 20579., 23904., 35563., 39856.,
      20579., 23904., 35563., 39856., 20579., 23904., 35563., 39856.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x16x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7680.,  8192.,  9792.,  10368., 17160., 18304., 20944., 22176., 27720.,
      29568., 32912., 34848., 21000., 22400., 24752., 26208., 10480., 11184.,
      13384., 14176., 23429., 25002., 28618., 30312., 37837., 40378., 44962.,
      47624., 28557., 30482., 33702., 35704., 10480., 11184., 13384., 14176.,
      23429., 25002., 28618., 30312., 37837., 40378., 44962., 47624., 28557.,
      30482., 33702., 35704., 6384.,  6832.,  8232.,  8736.,  14513., 15514.,
      17794., 18872., 23513., 25130., 28026., 29720., 18585., 19810., 21870.,
      23144., 7680.,  8192.,  9792.,  10368., 17160., 18304., 20944., 22176.,
      27720., 29568., 32912., 34848., 21000., 22400., 24752., 26208., 10480.,
      11184., 13384., 14176., 23429., 25002., 28618., 30312., 37837., 40378.,
      44962., 47624., 28557., 30482., 33702., 35704., 10480., 11184., 13384.,
      14176., 23429., 25002., 28618., 30312., 37837., 40378., 44962., 47624.,
      28557., 30482., 33702., 35704., 6384.,  6832.,  8232.,  8736.,  14513.,
      15514., 17794., 18872., 23513., 25130., 28026., 29720., 18585., 19810.,
      21870., 23144., 7680.,  8192.,  9792.,  10368., 17160., 18304., 20944.,
      22176., 27720., 29568., 32912., 34848., 21000., 22400., 24752., 26208.,
      10480., 11184., 13384., 14176., 23429., 25002., 28618., 30312., 37837.,
      40378., 44962., 47624., 28557., 30482., 33702., 35704., 10480., 11184.,
      13384., 14176., 23429., 25002., 28618., 30312., 37837., 40378., 44962.,
      47624., 28557., 30482., 33702., 35704., 6384.,  6832.,  8232.,  8736.,
      14513., 15514., 17794., 18872., 23513., 25130., 28026., 29720., 18585.,
      19810., 21870., 23144.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x16x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.,
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.,
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.,
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.,
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.,
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x16x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6656.,  7168.,  7680.,  8192.,  9792.,  10368., 10944., 11520., 14872.,
      16016., 17160., 18304., 20944., 22176., 23408., 24640., 24024., 25872.,
      27720., 29568., 32912., 34848., 36784., 38720., 18200., 19600., 21000.,
      22400., 24752., 26208., 27664., 29120., 8992.,  9696.,  10400., 11104.,
      13304., 14096., 14888., 15680., 20197., 21770., 23343., 24916., 28534.,
      30228., 31922., 33616., 32685., 35226., 37767., 40308., 44894., 47556.,
      50218., 52880., 24661., 26586., 28511., 30436., 33658., 35660., 37662.,
      39664., 8992.,  9696.,  10400., 11104., 13304., 14096., 14888., 15680.,
      20197., 21770., 23343., 24916., 28534., 30228., 31922., 33616., 32685.,
      35226., 37767., 40308., 44894., 47556., 50218., 52880., 24661., 26586.,
      28511., 30436., 33658., 35660., 37662., 39664., 5664.,  6112.,  6560.,
      7008.,  8408.,  8912.,  9416.,  9920.,  12761., 13762., 14763., 15764.,
      18062., 19140., 20218., 21296., 20673., 22290., 23907., 25524., 28438.,
      30132., 31826., 33520., 15561., 16786., 18011., 19236., 21282., 22556.,
      23830., 25104., 6656.,  7168.,  7680.,  8192.,  9792.,  10368., 10944.,
      11520., 14872., 16016., 17160., 18304., 20944., 22176., 23408., 24640.,
      24024., 25872., 27720., 29568., 32912., 34848., 36784., 38720., 18200.,
      19600., 21000., 22400., 24752., 26208., 27664., 29120., 8992.,  9696.,
      10400., 11104., 13304., 14096., 14888., 15680., 20197., 21770., 23343.,
      24916., 28534., 30228., 31922., 33616., 32685., 35226., 37767., 40308.,
      44894., 47556., 50218., 52880., 24661., 26586., 28511., 30436., 33658.,
      35660., 37662., 39664., 8992.,  9696.,  10400., 11104., 13304., 14096.,
      14888., 15680., 20197., 21770., 23343., 24916., 28534., 30228., 31922.,
      33616., 32685., 35226., 37767., 40308., 44894., 47556., 50218., 52880.,
      24661., 26586., 28511., 30436., 33658., 35660., 37662., 39664., 5664.,
      6112.,  6560.,  7008.,  8408.,  8912.,  9416.,  9920.,  12761., 13762.,
      14763., 15764., 18062., 19140., 20218., 21296., 20673., 22290., 23907.,
      25524., 28438., 30132., 31826., 33520., 15561., 16786., 18011., 19236.,
      21282., 22556., 23830., 25104., 6656.,  7168.,  7680.,  8192.,  9792.,
      10368., 10944., 11520., 14872., 16016., 17160., 18304., 20944., 22176.,
      23408., 24640., 24024., 25872., 27720., 29568., 32912., 34848., 36784.,
      38720., 18200., 19600., 21000., 22400., 24752., 26208., 27664., 29120.,
      8992.,  9696.,  10400., 11104., 13304., 14096., 14888., 15680., 20197.,
      21770., 23343., 24916., 28534., 30228., 31922., 33616., 32685., 35226.,
      37767., 40308., 44894., 47556., 50218., 52880., 24661., 26586., 28511.,
      30436., 33658., 35660., 37662., 39664., 8992.,  9696.,  10400., 11104.,
      13304., 14096., 14888., 15680., 20197., 21770., 23343., 24916., 28534.,
      30228., 31922., 33616., 32685., 35226., 37767., 40308., 44894., 47556.,
      50218., 52880., 24661., 26586., 28511., 30436., 33658., 35660., 37662.,
      39664., 5664.,  6112.,  6560.,  7008.,  8408.,  8912.,  9416.,  9920.,
      12761., 13762., 14763., 15764., 18062., 19140., 20218., 21296., 20673.,
      22290., 23907., 25524., 28438., 30132., 31826., 33520., 15561., 16786.,
      18011., 19236., 21282., 22556., 23830., 25104.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x16x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17075., 18406., 19737., 21068., 24444., 25896., 27348., 28800., 29563.,
      31862., 34161., 36460., 40804., 43224., 45644., 48064., 17075., 18406.,
      19737., 21068., 24444., 25896., 27348., 28800., 29563., 31862., 34161.,
      36460., 40804., 43224., 45644., 48064., 17075., 18406., 19737., 21068.,
      24444., 25896., 27348., 28800., 29563., 31862., 34161., 36460., 40804.,
      43224., 45644., 48064., 17075., 18406., 19737., 21068., 24444., 25896.,
      27348., 28800., 29563., 31862., 34161., 36460., 40804., 43224., 45644.,
      48064., 17075., 18406., 19737., 21068., 24444., 25896., 27348., 28800.,
      29563., 31862., 34161., 36460., 40804., 43224., 45644., 48064., 17075.,
      18406., 19737., 21068., 24444., 25896., 27348., 28800., 29563., 31862.,
      34161., 36460., 40804., 43224., 45644., 48064.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x16x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14400., 16384., 18496., 20736., 17640., 20224., 22984., 25920., 23400.,
      26368., 29512., 32832., 14280., 16128., 18088., 20160., 19640., 22368.,
      25272., 28352., 23937., 27476., 31257., 35280., 31633., 35700., 40009.,
      44560., 19461., 21988., 24669., 27504., 19640., 22368., 25272., 28352.,
      23937., 27476., 31257., 35280., 31633., 35700., 40009., 44560., 19461.,
      21988., 24669., 27504., 11928., 13664., 15512., 17472., 15485., 17716.,
      20101., 22640., 19021., 21588., 24309., 27184., 12849., 14468., 16185.,
      18000., 14400., 16384., 18496., 20736., 17640., 20224., 22984., 25920.,
      23400., 26368., 29512., 32832., 14280., 16128., 18088., 20160., 19640.,
      22368., 25272., 28352., 23937., 27476., 31257., 35280., 31633., 35700.,
      40009., 44560., 19461., 21988., 24669., 27504., 19640., 22368., 25272.,
      28352., 23937., 27476., 31257., 35280., 31633., 35700., 40009., 44560.,
      19461., 21988., 24669., 27504., 11928., 13664., 15512., 17472., 15485.,
      17716., 20101., 22640., 19021., 21588., 24309., 27184., 12849., 14468.,
      16185., 18000., 14400., 16384., 18496., 20736., 17640., 20224., 22984.,
      25920., 23400., 26368., 29512., 32832., 14280., 16128., 18088., 20160.,
      19640., 22368., 25272., 28352., 23937., 27476., 31257., 35280., 31633.,
      35700., 40009., 44560., 19461., 21988., 24669., 27504., 19640., 22368.,
      25272., 28352., 23937., 27476., 31257., 35280., 31633., 35700., 40009.,
      44560., 19461., 21988., 24669., 27504., 11928., 13664., 15512., 17472.,
      15485., 17716., 20101., 22640., 19021., 21588., 24309., 27184., 12849.,
      14468., 16185., 18000.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x16x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.,
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.,
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.,
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.,
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.,
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x16x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12480., 13440., 15360., 16384., 18496., 19584., 21888., 23040., 15288.,
      16464., 18960., 20224., 22984., 24336., 27360., 28800., 20280., 21840.,
      24720., 26368., 29512., 31248., 34656., 36480., 12376., 13328., 15120.,
      16128., 18088., 19152., 21280., 22400., 16840., 18160., 20800., 22208.,
      25112., 26608., 29776., 31360., 20529., 22146., 25566., 27304., 31087.,
      32946., 37092., 39072., 27201., 29346., 33294., 35560., 39871., 42258.,
      46932., 49440., 16685., 17994., 20446., 21832., 24515., 25978., 28892.,
      30432., 16840., 18160., 20800., 22208., 25112., 26608., 29776., 31360.,
      20529., 22146., 25566., 27304., 31087., 32946., 37092., 39072., 27201.,
      29346., 33294., 35560., 39871., 42258., 46932., 49440., 16685., 17994.,
      20446., 21832., 24515., 25978., 28892., 30432., 10600., 11440., 13120.,
      14016., 15864., 16816., 18832., 19840., 12885., 13914., 16086., 17192.,
      19595., 20778., 23412., 24672., 17061., 18426., 20934., 22376., 25115.,
      26634., 29604., 31200., 10497., 11330., 12886., 13768., 15471., 16402.,
      18252., 19232., 12480., 13440., 15360., 16384., 18496., 19584., 21888.,
      23040., 15288., 16464., 18960., 20224., 22984., 24336., 27360., 28800.,
      20280., 21840., 24720., 26368., 29512., 31248., 34656., 36480., 12376.,
      13328., 15120., 16128., 18088., 19152., 21280., 22400., 16840., 18160.,
      20800., 22208., 25112., 26608., 29776., 31360., 20529., 22146., 25566.,
      27304., 31087., 32946., 37092., 39072., 27201., 29346., 33294., 35560.,
      39871., 42258., 46932., 49440., 16685., 17994., 20446., 21832., 24515.,
      25978., 28892., 30432., 16840., 18160., 20800., 22208., 25112., 26608.,
      29776., 31360., 20529., 22146., 25566., 27304., 31087., 32946., 37092.,
      39072., 27201., 29346., 33294., 35560., 39871., 42258., 46932., 49440.,
      16685., 17994., 20446., 21832., 24515., 25978., 28892., 30432., 10600.,
      11440., 13120., 14016., 15864., 16816., 18832., 19840., 12885., 13914.,
      16086., 17192., 19595., 20778., 23412., 24672., 17061., 18426., 20934.,
      22376., 25115., 26634., 29604., 31200., 10497., 11330., 12886., 13768.,
      15471., 16402., 18252., 19232., 12480., 13440., 15360., 16384., 18496.,
      19584., 21888., 23040., 15288., 16464., 18960., 20224., 22984., 24336.,
      27360., 28800., 20280., 21840., 24720., 26368., 29512., 31248., 34656.,
      36480., 12376., 13328., 15120., 16128., 18088., 19152., 21280., 22400.,
      16840., 18160., 20800., 22208., 25112., 26608., 29776., 31360., 20529.,
      22146., 25566., 27304., 31087., 32946., 37092., 39072., 27201., 29346.,
      33294., 35560., 39871., 42258., 46932., 49440., 16685., 17994., 20446.,
      21832., 24515., 25978., 28892., 30432., 16840., 18160., 20800., 22208.,
      25112., 26608., 29776., 31360., 20529., 22146., 25566., 27304., 31087.,
      32946., 37092., 39072., 27201., 29346., 33294., 35560., 39871., 42258.,
      46932., 49440., 16685., 17994., 20446., 21832., 24515., 25978., 28892.,
      30432., 10600., 11440., 13120., 14016., 15864., 16816., 18832., 19840.,
      12885., 13914., 16086., 17192., 19595., 20778., 23412., 24672., 17061.,
      18426., 20934., 22376., 25115., 26634., 29604., 31200., 10497., 11330.,
      12886., 13768., 15471., 16402., 18252., 19232.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x16x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19245., 20730., 24018., 25624., 29275., 31002., 35016., 36864., 25917.,
      27930., 31746., 33880., 38059., 40314., 44856., 47232., 19245., 20730.,
      24018., 25624., 29275., 31002., 35016., 36864., 25917., 27930., 31746.,
      33880., 38059., 40314., 44856., 47232., 19245., 20730., 24018., 25624.,
      29275., 31002., 35016., 36864., 25917., 27930., 31746., 33880., 38059.,
      40314., 44856., 47232., 19245., 20730., 24018., 25624., 29275., 31002.,
      35016., 36864., 25917., 27930., 31746., 33880., 38059., 40314., 44856.,
      47232., 19245., 20730., 24018., 25624., 29275., 31002., 35016., 36864.,
      25917., 27930., 31746., 33880., 38059., 40314., 44856., 47232., 19245.,
      20730., 24018., 25624., 29275., 31002., 35016., 36864., 25917., 27930.,
      31746., 33880., 38059., 40314., 44856., 47232.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x16x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8640.,  9600.,  10560., 11520., 13312., 14336., 15360., 16384., 18496.,
      19584., 20672., 21760., 24192., 25344., 26496., 27648., 10584., 11760.,
      12936., 14112., 16432., 17696., 18960., 20224., 22984., 24336., 25688.,
      27040., 30240., 31680., 33120., 34560., 14040., 15600., 17160., 18720.,
      21424., 23072., 24720., 26368., 29512., 31248., 32984., 34720., 38304.,
      40128., 41952., 43776., 8568.,  9520.,  10472., 11424., 13104., 14112.,
      15120., 16128., 18088., 19152., 20216., 21280., 23520., 24640., 25760.,
      26880., 11752., 13072., 14392., 15712., 18176., 19584., 20992., 22400.,
      25304., 26800., 28296., 29792., 33136., 34720., 36304., 37888., 14353.,
      15970., 17587., 19204., 22386., 24124., 25862., 27600., 31387., 33246.,
      35105., 36964., 41356., 43336., 45316., 47296., 18977., 21122., 23267.,
      25412., 29122., 31388., 33654., 35920., 40235., 42622., 45009., 47396.,
      52316., 54824., 57332., 59840., 11645., 12954., 14263., 15572., 17874.,
      19260., 20646., 22032., 24719., 26182., 27645., 29108., 32180., 33720.,
      35260., 36800., 11752., 13072., 14392., 15712., 18176., 19584., 20992.,
      22400., 25304., 26800., 28296., 29792., 33136., 34720., 36304., 37888.,
      14353., 15970., 17587., 19204., 22386., 24124., 25862., 27600., 31387.,
      33246., 35105., 36964., 41356., 43336., 45316., 47296., 18977., 21122.,
      23267., 25412., 29122., 31388., 33654., 35920., 40235., 42622., 45009.,
      47396., 52316., 54824., 57332., 59840., 11645., 12954., 14263., 15572.,
      17874., 19260., 20646., 22032., 24719., 26182., 27645., 29108., 32180.,
      33720., 35260., 36800., 7432.,  8272.,  9112.,  9952.,  11520., 12416.,
      13312., 14208., 16056., 17008., 17960., 18912., 21040., 22048., 23056.,
      24064., 9061.,  10090., 11119., 12148., 14170., 15276., 16382., 17488.,
      19895., 21078., 22261., 23444., 26236., 27496., 28756., 30016., 11957.,
      13322., 14687., 16052., 18410., 19852., 21294., 22736., 25479., 26998.,
      28517., 30036., 33164., 34760., 36356., 37952., 7361.,  8194.,  9027.,
      9860.,  11322., 12204., 13086., 13968., 15675., 16606., 17537., 18468.,
      20420., 21400., 22380., 23360., 8640.,  9600.,  10560., 11520., 13312.,
      14336., 15360., 16384., 18496., 19584., 20672., 21760., 24192., 25344.,
      26496., 27648., 10584., 11760., 12936., 14112., 16432., 17696., 18960.,
      20224., 22984., 24336., 25688., 27040., 30240., 31680., 33120., 34560.,
      14040., 15600., 17160., 18720., 21424., 23072., 24720., 26368., 29512.,
      31248., 32984., 34720., 38304., 40128., 41952., 43776., 8568.,  9520.,
      10472., 11424., 13104., 14112., 15120., 16128., 18088., 19152., 20216.,
      21280., 23520., 24640., 25760., 26880., 11752., 13072., 14392., 15712.,
      18176., 19584., 20992., 22400., 25304., 26800., 28296., 29792., 33136.,
      34720., 36304., 37888., 14353., 15970., 17587., 19204., 22386., 24124.,
      25862., 27600., 31387., 33246., 35105., 36964., 41356., 43336., 45316.,
      47296., 18977., 21122., 23267., 25412., 29122., 31388., 33654., 35920.,
      40235., 42622., 45009., 47396., 52316., 54824., 57332., 59840., 11645.,
      12954., 14263., 15572., 17874., 19260., 20646., 22032., 24719., 26182.,
      27645., 29108., 32180., 33720., 35260., 36800., 11752., 13072., 14392.,
      15712., 18176., 19584., 20992., 22400., 25304., 26800., 28296., 29792.,
      33136., 34720., 36304., 37888., 14353., 15970., 17587., 19204., 22386.,
      24124., 25862., 27600., 31387., 33246., 35105., 36964., 41356., 43336.,
      45316., 47296., 18977., 21122., 23267., 25412., 29122., 31388., 33654.,
      35920., 40235., 42622., 45009., 47396., 52316., 54824., 57332., 59840.,
      11645., 12954., 14263., 15572., 17874., 19260., 20646., 22032., 24719.,
      26182., 27645., 29108., 32180., 33720., 35260., 36800., 7432.,  8272.,
      9112.,  9952.,  11520., 12416., 13312., 14208., 16056., 17008., 17960.,
      18912., 21040., 22048., 23056., 24064., 9061.,  10090., 11119., 12148.,
      14170., 15276., 16382., 17488., 19895., 21078., 22261., 23444., 26236.,
      27496., 28756., 30016., 11957., 13322., 14687., 16052., 18410., 19852.,
      21294., 22736., 25479., 26998., 28517., 30036., 33164., 34760., 36356.,
      37952., 7361.,  8194.,  9027.,  9860.,  11322., 12204., 13086., 13968.,
      15675., 16606., 17537., 18468., 20420., 21400., 22380., 23360., 8640.,
      9600.,  10560., 11520., 13312., 14336., 15360., 16384., 18496., 19584.,
      20672., 21760., 24192., 25344., 26496., 27648., 10584., 11760., 12936.,
      14112., 16432., 17696., 18960., 20224., 22984., 24336., 25688., 27040.,
      30240., 31680., 33120., 34560., 14040., 15600., 17160., 18720., 21424.,
      23072., 24720., 26368., 29512., 31248., 32984., 34720., 38304., 40128.,
      41952., 43776., 8568.,  9520.,  10472., 11424., 13104., 14112., 15120.,
      16128., 18088., 19152., 20216., 21280., 23520., 24640., 25760., 26880.,
      11752., 13072., 14392., 15712., 18176., 19584., 20992., 22400., 25304.,
      26800., 28296., 29792., 33136., 34720., 36304., 37888., 14353., 15970.,
      17587., 19204., 22386., 24124., 25862., 27600., 31387., 33246., 35105.,
      36964., 41356., 43336., 45316., 47296., 18977., 21122., 23267., 25412.,
      29122., 31388., 33654., 35920., 40235., 42622., 45009., 47396., 52316.,
      54824., 57332., 59840., 11645., 12954., 14263., 15572., 17874., 19260.,
      20646., 22032., 24719., 26182., 27645., 29108., 32180., 33720., 35260.,
      36800., 11752., 13072., 14392., 15712., 18176., 19584., 20992., 22400.,
      25304., 26800., 28296., 29792., 33136., 34720., 36304., 37888., 14353.,
      15970., 17587., 19204., 22386., 24124., 25862., 27600., 31387., 33246.,
      35105., 36964., 41356., 43336., 45316., 47296., 18977., 21122., 23267.,
      25412., 29122., 31388., 33654., 35920., 40235., 42622., 45009., 47396.,
      52316., 54824., 57332., 59840., 11645., 12954., 14263., 15572., 17874.,
      19260., 20646., 22032., 24719., 26182., 27645., 29108., 32180., 33720.,
      35260., 36800., 7432.,  8272.,  9112.,  9952.,  11520., 12416., 13312.,
      14208., 16056., 17008., 17960., 18912., 21040., 22048., 23056., 24064.,
      9061.,  10090., 11119., 12148., 14170., 15276., 16382., 17488., 19895.,
      21078., 22261., 23444., 26236., 27496., 28756., 30016., 11957., 13322.,
      14687., 16052., 18410., 19852., 21294., 22736., 25479., 26998., 28517.,
      30036., 33164., 34760., 36356., 37952., 7361.,  8194.,  9027.,  9860.,
      11322., 12204., 13086., 13968., 15675., 16606., 17537., 18468., 20420.,
      21400., 22380., 23360.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x16x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13453., 14938., 16423., 17908., 20958., 22564., 24170., 25776., 29431.,
      31158., 32885., 34612., 38872., 40720., 42568., 44416., 18077., 20090.,
      22103., 24116., 27694., 29828., 31962., 34096., 38279., 40534., 42789.,
      45044., 49832., 52208., 54584., 56960., 13453., 14938., 16423., 17908.,
      20958., 22564., 24170., 25776., 29431., 31158., 32885., 34612., 38872.,
      40720., 42568., 44416., 18077., 20090., 22103., 24116., 27694., 29828.,
      31962., 34096., 38279., 40534., 42789., 45044., 49832., 52208., 54584.,
      56960., 13453., 14938., 16423., 17908., 20958., 22564., 24170., 25776.,
      29431., 31158., 32885., 34612., 38872., 40720., 42568., 44416., 18077.,
      20090., 22103., 24116., 27694., 29828., 31962., 34096., 38279., 40534.,
      42789., 45044., 49832., 52208., 54584., 56960., 13453., 14938., 16423.,
      17908., 20958., 22564., 24170., 25776., 29431., 31158., 32885., 34612.,
      38872., 40720., 42568., 44416., 18077., 20090., 22103., 24116., 27694.,
      29828., 31962., 34096., 38279., 40534., 42789., 45044., 49832., 52208.,
      54584., 56960., 13453., 14938., 16423., 17908., 20958., 22564., 24170.,
      25776., 29431., 31158., 32885., 34612., 38872., 40720., 42568., 44416.,
      18077., 20090., 22103., 24116., 27694., 29828., 31962., 34096., 38279.,
      40534., 42789., 45044., 49832., 52208., 54584., 56960., 13453., 14938.,
      16423., 17908., 20958., 22564., 24170., 25776., 29431., 31158., 32885.,
      34612., 38872., 40720., 42568., 44416., 18077., 20090., 22103., 24116.,
      27694., 29828., 31962., 34096., 38279., 40534., 42789., 45044., 49832.,
      52208., 54584., 56960.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x18x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14544., 21880., 20680., 19060., 11228., 21168., 32432., 32228., 28762.,
      16410., 21800., 31096., 32332., 29970., 16674., 14008., 18980., 17328.,
      17560., 9460.,  14544., 21880., 20680., 19060., 11228., 21168., 32432.,
      32228., 28762., 16410., 21800., 31096., 32332., 29970., 16674., 14008.,
      18980., 17328., 17560., 9460.,  14544., 21880., 20680., 19060., 11228.,
      21168., 32432., 32228., 28762., 16410., 21800., 31096., 32332., 29970.,
      16674., 14008., 18980., 17328., 17560., 9460.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x18x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {32662., 31626., 31678., 30002.,
                                         32662., 31626., 31678., 30002.,
                                         32662., 31626., 31678., 30002.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x18x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13336., 14208., 22808., 24176., 20280., 21648., 19616., 20872., 11648.,
      12408., 19152., 20416., 32798., 34848., 31202., 33288., 26431., 28276.,
      16637., 17684., 19832., 21168., 28870., 30896., 31274., 33240., 27583.,
      29412., 17085., 18212., 13588., 14416., 19106., 20392., 18918., 20160.,
      19599., 20752., 9933.,  10632., 13336., 14208., 22808., 24176., 20280.,
      21648., 19616., 20872., 11648., 12408., 19152., 20416., 32798., 34848.,
      31202., 33288., 26431., 28276., 16637., 17684., 19832., 21168., 28870.,
      30896., 31274., 33240., 27583., 29412., 17085., 18212., 13588., 14416.,
      19106., 20392., 18918., 20160., 19599., 20752., 9933.,  10632., 13336.,
      14208., 22808., 24176., 20280., 21648., 19616., 20872., 11648., 12408.,
      19152., 20416., 32798., 34848., 31202., 33288., 26431., 28276., 16637.,
      17684., 19832., 21168., 28870., 30896., 31274., 33240., 27583., 29412.,
      17085., 18212., 13588., 14416., 19106., 20392., 18918., 20160., 19599.,
      20752., 9933.,  10632.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x18x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31340., 33324., 30128., 32148., 33236., 35196., 29816., 31716.,
      31340., 33324., 30128., 32148., 33236., 35196., 29816., 31716.,
      31340., 33324., 30128., 32148., 33236., 35196., 29816., 31716.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x18x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12680., 13552., 14424., 15296., 21080., 22448., 23816., 25184., 21016.,
      22384., 23752., 25120., 19032., 20288., 21544., 22800., 11592., 12352.,
      13112., 13872., 19376., 20640., 21904., 23168., 31066., 33116., 35166.,
      37216., 30782., 32868., 34954., 37040., 28041., 29886., 31731., 33576.,
      15107., 16154., 17201., 18248., 19896., 21232., 22568., 23904., 30146.,
      32172., 34198., 36224., 28742., 30708., 32674., 34640., 27289., 29118.,
      30947., 32776., 16435., 17562., 18689., 19816., 12332., 13160., 13988.,
      14816., 18942., 20228., 21514., 22800., 17970., 19212., 20454., 21696.,
      17789., 18942., 20095., 21248., 10751., 11450., 12149., 12848., 12680.,
      13552., 14424., 15296., 21080., 22448., 23816., 25184., 21016., 22384.,
      23752., 25120., 19032., 20288., 21544., 22800., 11592., 12352., 13112.,
      13872., 19376., 20640., 21904., 23168., 31066., 33116., 35166., 37216.,
      30782., 32868., 34954., 37040., 28041., 29886., 31731., 33576., 15107.,
      16154., 17201., 18248., 19896., 21232., 22568., 23904., 30146., 32172.,
      34198., 36224., 28742., 30708., 32674., 34640., 27289., 29118., 30947.,
      32776., 16435., 17562., 18689., 19816., 12332., 13160., 13988., 14816.,
      18942., 20228., 21514., 22800., 17970., 19212., 20454., 21696., 17789.,
      18942., 20095., 21248., 10751., 11450., 12149., 12848., 12680., 13552.,
      14424., 15296., 21080., 22448., 23816., 25184., 21016., 22384., 23752.,
      25120., 19032., 20288., 21544., 22800., 11592., 12352., 13112., 13872.,
      19376., 20640., 21904., 23168., 31066., 33116., 35166., 37216., 30782.,
      32868., 34954., 37040., 28041., 29886., 31731., 33576., 15107., 16154.,
      17201., 18248., 19896., 21232., 22568., 23904., 30146., 32172., 34198.,
      36224., 28742., 30708., 32674., 34640., 27289., 29118., 30947., 32776.,
      16435., 17562., 18689., 19816., 12332., 13160., 13988., 14816., 18942.,
      20228., 21514., 22800., 17970., 19212., 20454., 21696., 17789., 18942.,
      20095., 21248., 10751., 11450., 12149., 12848.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x18x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29304., 31288., 33272., 35256., 29788., 31808., 33828., 35848.,
      29792., 31752., 33712., 35672., 28004., 29904., 31804., 33704.,
      29304., 31288., 33272., 35256., 29788., 31808., 33828., 35848.,
      29792., 31752., 33712., 35672., 28004., 29904., 31804., 33704.,
      29304., 31288., 33272., 35256., 29788., 31808., 33828., 35848.,
      29792., 31752., 33712., 35672., 28004., 29904., 31804., 33704.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x18x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13504., 15296., 22528., 25376., 22272., 25120., 18800., 21392., 10928.,
      12464., 18855., 21312., 30891., 34880., 30131., 34128., 27854., 31400.,
      14098., 16104., 18711., 21216., 29883., 33760., 28483., 32304., 28110.,
      31752., 17426., 19656., 13351., 15008., 20315., 22864., 18211., 20672.,
      17366., 19616., 9130.,  10448., 13504., 15296., 22528., 25376., 22272.,
      25120., 18800., 21392., 10928., 12464., 18855., 21312., 30891., 34880.,
      30131., 34128., 27854., 31400., 14098., 16104., 18711., 21216., 29883.,
      33760., 28483., 32304., 28110., 31752., 17426., 19656., 13351., 15008.,
      20315., 22864., 18211., 20672., 17366., 19616., 9130.,  10448., 13504.,
      15296., 22528., 25376., 22272., 25120., 18800., 21392., 10928., 12464.,
      18855., 21312., 30891., 34880., 30131., 34128., 27854., 31400., 14098.,
      16104., 18711., 21216., 29883., 33760., 28483., 32304., 28110., 31752.,
      17426., 19656., 13351., 15008., 20315., 22864., 18211., 20672., 17366.,
      19616., 9130.,  10448.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x18x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29607., 33496., 31535., 35560., 30359., 34296., 27679., 31496.,
      29607., 33496., 31535., 35560., 30359., 34296., 27679., 31496.,
      29607., 33496., 31535., 35560., 30359., 34296., 27679., 31496.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x18x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12968., 13856., 15696., 16640., 21160., 22560., 25456., 26944., 21416.,
      22816., 25712., 27200., 19072., 20352., 22992., 24352., 11136., 11904.,
      13488., 14304., 18683., 19886., 22400., 23680., 30443., 32438., 36476.,
      38592., 28659., 30662., 34708., 36832., 27104., 28828., 32422., 34256.,
      13432., 14372., 16418., 17424., 17835., 19086., 21648., 22976., 29051.,
      30934., 34860., 36864., 27075., 28902., 32772., 34720., 27520., 29340.,
      33030., 34960., 16792., 17956., 20226., 21456., 12935., 13774., 15432.,
      16320., 18903., 20182., 22740., 24096., 16575., 17766., 20236., 21504.,
      16752., 17836., 20094., 21248., 9544.,  10196., 11562., 12256., 12968.,
      13856., 15696., 16640., 21160., 22560., 25456., 26944., 21416., 22816.,
      25712., 27200., 19072., 20352., 22992., 24352., 11136., 11904., 13488.,
      14304., 18683., 19886., 22400., 23680., 30443., 32438., 36476., 38592.,
      28659., 30662., 34708., 36832., 27104., 28828., 32422., 34256., 13432.,
      14372., 16418., 17424., 17835., 19086., 21648., 22976., 29051., 30934.,
      34860., 36864., 27075., 28902., 32772., 34720., 27520., 29340., 33030.,
      34960., 16792., 17956., 20226., 21456., 12935., 13774., 15432., 16320.,
      18903., 20182., 22740., 24096., 16575., 17766., 20236., 21504., 16752.,
      17836., 20094., 21248., 9544.,  10196., 11562., 12256., 12968., 13856.,
      15696., 16640., 21160., 22560., 25456., 26944., 21416., 22816., 25712.,
      27200., 19072., 20352., 22992., 24352., 11136., 11904., 13488., 14304.,
      18683., 19886., 22400., 23680., 30443., 32438., 36476., 38592., 28659.,
      30662., 34708., 36832., 27104., 28828., 32422., 34256., 13432., 14372.,
      16418., 17424., 17835., 19086., 21648., 22976., 29051., 30934., 34860.,
      36864., 27075., 28902., 32772., 34720., 27520., 29340., 33030., 34960.,
      16792., 17956., 20226., 21456., 12935., 13774., 15432., 16320., 18903.,
      20182., 22740., 24096., 16575., 17766., 20236., 21504., 16752., 17836.,
      20094., 21248., 9544.,  10196., 11562., 12256.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x18x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28103., 29998., 33936., 35952., 30543., 32574., 36648., 38800.,
      30071., 32014., 36000., 38064., 25599., 27422., 31288., 33232.,
      28103., 29998., 33936., 35952., 30543., 32574., 36648., 38800.,
      30071., 32014., 36000., 38064., 25599., 27422., 31288., 33232.,
      28103., 29998., 33936., 35952., 30543., 32574., 36648., 38800.,
      30071., 32014., 36000., 38064., 25599., 27422., 31288., 33232.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x18x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11864., 12752., 13640., 14528., 16368., 17312., 18256., 19200., 18520.,
      19920., 21320., 22720., 25616., 27104., 28592., 30080., 18008., 19408.,
      20808., 22208., 25104., 26592., 28080., 29568., 16896., 18176., 19456.,
      20736., 23376., 24736., 26096., 27456., 9728.,  10496., 11264., 12032.,
      13616., 14432., 15248., 16064., 15779., 16982., 18185., 19388., 21888.,
      23168., 24448., 25728., 26379., 28374., 30369., 32364., 36404., 38520.,
      40636., 42752., 25875., 27878., 29881., 31884., 35932., 38056., 40180.,
      42304., 22820., 24544., 26268., 27992., 31586., 33420., 35254., 37088.,
      11588., 12528., 13468., 14408., 16470., 17476., 18482., 19488., 16595.,
      17846., 19097., 20348., 22896., 24224., 25552., 26880., 24731., 26614.,
      28497., 30380., 34308., 36312., 38316., 40320., 22883., 24710., 26537.,
      28364., 32236., 34184., 36132., 38080., 24068., 25888., 27708., 29528.,
      33218., 35148., 37078., 39008., 15012., 16176., 17340., 18504., 20790.,
      22020., 23250., 24480., 11079., 11918., 12757., 13596., 15256., 16144.,
      17032., 17920., 16719., 17998., 19277., 20556., 23132., 24488., 25844.,
      27200., 14967., 16158., 17349., 18540., 21028., 22296., 23564., 24832.,
      14372., 15456., 16540., 17624., 19898., 21052., 22206., 23360., 8228.,
      8880.,  9532.,  10184., 11550., 12244., 12938., 13632., 11864., 12752.,
      13640., 14528., 16368., 17312., 18256., 19200., 18520., 19920., 21320.,
      22720., 25616., 27104., 28592., 30080., 18008., 19408., 20808., 22208.,
      25104., 26592., 28080., 29568., 16896., 18176., 19456., 20736., 23376.,
      24736., 26096., 27456., 9728.,  10496., 11264., 12032., 13616., 14432.,
      15248., 16064., 15779., 16982., 18185., 19388., 21888., 23168., 24448.,
      25728., 26379., 28374., 30369., 32364., 36404., 38520., 40636., 42752.,
      25875., 27878., 29881., 31884., 35932., 38056., 40180., 42304., 22820.,
      24544., 26268., 27992., 31586., 33420., 35254., 37088., 11588., 12528.,
      13468., 14408., 16470., 17476., 18482., 19488., 16595., 17846., 19097.,
      20348., 22896., 24224., 25552., 26880., 24731., 26614., 28497., 30380.,
      34308., 36312., 38316., 40320., 22883., 24710., 26537., 28364., 32236.,
      34184., 36132., 38080., 24068., 25888., 27708., 29528., 33218., 35148.,
      37078., 39008., 15012., 16176., 17340., 18504., 20790., 22020., 23250.,
      24480., 11079., 11918., 12757., 13596., 15256., 16144., 17032., 17920.,
      16719., 17998., 19277., 20556., 23132., 24488., 25844., 27200., 14967.,
      16158., 17349., 18540., 21028., 22296., 23564., 24832., 14372., 15456.,
      16540., 17624., 19898., 21052., 22206., 23360., 8228.,  8880.,  9532.,
      10184., 11550., 12244., 12938., 13632., 11864., 12752., 13640., 14528.,
      16368., 17312., 18256., 19200., 18520., 19920., 21320., 22720., 25616.,
      27104., 28592., 30080., 18008., 19408., 20808., 22208., 25104., 26592.,
      28080., 29568., 16896., 18176., 19456., 20736., 23376., 24736., 26096.,
      27456., 9728.,  10496., 11264., 12032., 13616., 14432., 15248., 16064.,
      15779., 16982., 18185., 19388., 21888., 23168., 24448., 25728., 26379.,
      28374., 30369., 32364., 36404., 38520., 40636., 42752., 25875., 27878.,
      29881., 31884., 35932., 38056., 40180., 42304., 22820., 24544., 26268.,
      27992., 31586., 33420., 35254., 37088., 11588., 12528., 13468., 14408.,
      16470., 17476., 18482., 19488., 16595., 17846., 19097., 20348., 22896.,
      24224., 25552., 26880., 24731., 26614., 28497., 30380., 34308., 36312.,
      38316., 40320., 22883., 24710., 26537., 28364., 32236., 34184., 36132.,
      38080., 24068., 25888., 27708., 29528., 33218., 35148., 37078., 39008.,
      15012., 16176., 17340., 18504., 20790., 22020., 23250., 24480., 11079.,
      11918., 12757., 13596., 15256., 16144., 17032., 17920., 16719., 17998.,
      19277., 20556., 23132., 24488., 25844., 27200., 14967., 16158., 17349.,
      18540., 21028., 22296., 23564., 24832., 14372., 15456., 16540., 17624.,
      19898., 21052., 22206., 23360., 8228.,  8880.,  9532.,  10184., 11550.,
      12244., 12938., 13632.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x18x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24359., 26254., 28149., 30044., 33984., 36000., 38016., 40032., 26031.,
      28062., 30093., 32124., 36200., 38352., 40504., 42656., 25175., 27118.,
      29061., 31004., 34992., 37056., 39120., 41184., 23519., 25342., 27165.,
      28988., 32856., 34800., 36744., 38688., 24359., 26254., 28149., 30044.,
      33984., 36000., 38016., 40032., 26031., 28062., 30093., 32124., 36200.,
      38352., 40504., 42656., 25175., 27118., 29061., 31004., 34992., 37056.,
      39120., 41184., 23519., 25342., 27165., 28988., 32856., 34800., 36744.,
      38688., 24359., 26254., 28149., 30044., 33984., 36000., 38016., 40032.,
      26031., 28062., 30093., 32124., 36200., 38352., 40504., 42656., 25175.,
      27118., 29061., 31004., 34992., 37056., 39120., 41184., 23519., 25342.,
      27165., 28988., 32856., 34800., 36744., 38688.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x18x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12680., 14400., 16232., 18176., 19880., 22592., 25480., 28544., 19368.,
      22080., 24968., 28032., 18256., 20736., 23376., 26176., 10544., 12032.,
      13616., 15296., 16849., 19228., 21761., 24448., 28877., 32620., 36605.,
      40832., 25117., 28812., 32749., 36928., 26574., 30008., 33662., 37536.,
      13666., 15688., 17842., 20128., 16849., 19228., 21761., 24448., 28877.,
      32620., 36605., 40832., 25117., 28812., 32749., 36928., 26574., 30008.,
      33662., 37536., 13666., 15688., 17842., 20128., 10685., 12188., 13789.,
      15488., 17961., 20332., 22857., 25536., 15737., 18060., 20537., 23168.,
      16598., 18776., 21094., 23552., 8858.,  10152., 11530., 12992., 12680.,
      14400., 16232., 18176., 19880., 22592., 25480., 28544., 19368., 22080.,
      24968., 28032., 18256., 20736., 23376., 26176., 10544., 12032., 13616.,
      15296., 16849., 19228., 21761., 24448., 28877., 32620., 36605., 40832.,
      25117., 28812., 32749., 36928., 26574., 30008., 33662., 37536., 13666.,
      15688., 17842., 20128., 16849., 19228., 21761., 24448., 28877., 32620.,
      36605., 40832., 25117., 28812., 32749., 36928., 26574., 30008., 33662.,
      37536., 13666., 15688., 17842., 20128., 10685., 12188., 13789., 15488.,
      17961., 20332., 22857., 25536., 15737., 18060., 20537., 23168., 16598.,
      18776., 21094., 23552., 8858.,  10152., 11530., 12992., 12680., 14400.,
      16232., 18176., 19880., 22592., 25480., 28544., 19368., 22080., 24968.,
      28032., 18256., 20736., 23376., 26176., 10544., 12032., 13616., 15296.,
      16849., 19228., 21761., 24448., 28877., 32620., 36605., 40832., 25117.,
      28812., 32749., 36928., 26574., 30008., 33662., 37536., 13666., 15688.,
      17842., 20128., 16849., 19228., 21761., 24448., 28877., 32620., 36605.,
      40832., 25117., 28812., 32749., 36928., 26574., 30008., 33662., 37536.,
      13666., 15688., 17842., 20128., 10685., 12188., 13789., 15488., 17961.,
      20332., 22857., 25536., 15737., 18060., 20537., 23168., 16598., 18776.,
      21094., 23552., 8858.,  10152., 11530., 12992.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x18x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27557., 31260., 35205., 39392., 25525., 29244., 33205., 37408.,
      27557., 31260., 35205., 39392., 25525., 29244., 33205., 37408.,
      27557., 31260., 35205., 39392., 25525., 29244., 33205., 37408.,
      27557., 31260., 35205., 39392., 25525., 29244., 33205., 37408.,
      27557., 31260., 35205., 39392., 25525., 29244., 33205., 37408.,
      27557., 31260., 35205., 39392., 25525., 29244., 33205., 37408.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x18x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11352., 12176., 13840., 14720., 16552., 17488., 19488., 20480., 17592.,
      18896., 21520., 22912., 25800., 27280., 30432., 32000., 16568., 17872.,
      20496., 21888., 24776., 26256., 29408., 30976., 16112., 17312., 19712.,
      20992., 23632., 24992., 27872., 29312., 8848.,  9568.,  11008., 11776.,
      13360., 14176., 15904., 16768., 15561., 16706., 18994., 20216., 22735.,
      24034., 26784., 28160., 24573., 26394., 30018., 31960., 35947., 38010.,
      42360., 44544., 22221., 23994., 27570., 29464., 33403., 35418., 39720.,
      41856., 22578., 24252., 27576., 29360., 33014., 34908., 38892., 40896.,
      12014., 12996., 14968., 16016., 18186., 19300., 21668., 22848., 15561.,
      16706., 18994., 20216., 22735., 24034., 26784., 28160., 24573., 26394.,
      30018., 31960., 35947., 38010., 42360., 44544., 22221., 23994., 27570.,
      29464., 33403., 35418., 39720., 41856., 22578., 24252., 27576., 29360.,
      33014., 34908., 38892., 40896., 12014., 12996., 14968., 16016., 18186.,
      19300., 21668., 22848., 9885.,  10618., 12074., 12856., 14459., 15290.,
      17040., 17920., 15777., 16946., 19258., 20504., 23047., 24370., 27144.,
      28544., 13937., 15058., 17322., 18520., 21015., 22290., 25016., 26368.,
      14522., 15596., 17720., 18864., 21198., 22412., 24956., 26240., 7590.,
      8212.,  9464.,  10128., 11506., 12212., 13716., 14464., 11352., 12176.,
      13840., 14720., 16552., 17488., 19488., 20480., 17592., 18896., 21520.,
      22912., 25800., 27280., 30432., 32000., 16568., 17872., 20496., 21888.,
      24776., 26256., 29408., 30976., 16112., 17312., 19712., 20992., 23632.,
      24992., 27872., 29312., 8848.,  9568.,  11008., 11776., 13360., 14176.,
      15904., 16768., 15561., 16706., 18994., 20216., 22735., 24034., 26784.,
      28160., 24573., 26394., 30018., 31960., 35947., 38010., 42360., 44544.,
      22221., 23994., 27570., 29464., 33403., 35418., 39720., 41856., 22578.,
      24252., 27576., 29360., 33014., 34908., 38892., 40896., 12014., 12996.,
      14968., 16016., 18186., 19300., 21668., 22848., 15561., 16706., 18994.,
      20216., 22735., 24034., 26784., 28160., 24573., 26394., 30018., 31960.,
      35947., 38010., 42360., 44544., 22221., 23994., 27570., 29464., 33403.,
      35418., 39720., 41856., 22578., 24252., 27576., 29360., 33014., 34908.,
      38892., 40896., 12014., 12996., 14968., 16016., 18186., 19300., 21668.,
      22848., 9885.,  10618., 12074., 12856., 14459., 15290., 17040., 17920.,
      15777., 16946., 19258., 20504., 23047., 24370., 27144., 28544., 13937.,
      15058., 17322., 18520., 21015., 22290., 25016., 26368., 14522., 15596.,
      17720., 18864., 21198., 22412., 24956., 26240., 7590.,  8212.,  9464.,
      10128., 11506., 12212., 13716., 14464., 11352., 12176., 13840., 14720.,
      16552., 17488., 19488., 20480., 17592., 18896., 21520., 22912., 25800.,
      27280., 30432., 32000., 16568., 17872., 20496., 21888., 24776., 26256.,
      29408., 30976., 16112., 17312., 19712., 20992., 23632., 24992., 27872.,
      29312., 8848.,  9568.,  11008., 11776., 13360., 14176., 15904., 16768.,
      15561., 16706., 18994., 20216., 22735., 24034., 26784., 28160., 24573.,
      26394., 30018., 31960., 35947., 38010., 42360., 44544., 22221., 23994.,
      27570., 29464., 33403., 35418., 39720., 41856., 22578., 24252., 27576.,
      29360., 33014., 34908., 38892., 40896., 12014., 12996., 14968., 16016.,
      18186., 19300., 21668., 22848., 15561., 16706., 18994., 20216., 22735.,
      24034., 26784., 28160., 24573., 26394., 30018., 31960., 35947., 38010.,
      42360., 44544., 22221., 23994., 27570., 29464., 33403., 35418., 39720.,
      41856., 22578., 24252., 27576., 29360., 33014., 34908., 38892., 40896.,
      12014., 12996., 14968., 16016., 18186., 19300., 21668., 22848., 9885.,
      10618., 12074., 12856., 14459., 15290., 17040., 17920., 15777., 16946.,
      19258., 20504., 23047., 24370., 27144., 28544., 13937., 15058., 17322.,
      18520., 21015., 22290., 25016., 26368., 14522., 15596., 17720., 18864.,
      21198., 22412., 24956., 26240., 7590.,  8212.,  9464.,  10128., 11506.,
      12212., 13716., 14464.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x18x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22997., 24778., 28362., 30264., 34211., 36234., 40544., 42688., 23013.,
      24810., 28410., 30328., 34291., 36330., 40656., 42816., 22997., 24778.,
      28362., 30264., 34211., 36234., 40544., 42688., 23013., 24810., 28410.,
      30328., 34291., 36330., 40656., 42816., 22997., 24778., 28362., 30264.,
      34211., 36234., 40544., 42688., 23013., 24810., 28410., 30328., 34291.,
      36330., 40656., 42816., 22997., 24778., 28362., 30264., 34211., 36234.,
      40544., 42688., 23013., 24810., 28410., 30328., 34291., 36330., 40656.,
      42816., 22997., 24778., 28362., 30264., 34211., 36234., 40544., 42688.,
      23013., 24810., 28410., 30328., 34291., 36330., 40656., 42816., 22997.,
      24778., 28362., 30264., 34211., 36234., 40544., 42688., 23013., 24810.,
      28410., 30328., 34291., 36330., 40656., 42816.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x16x18x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7672.,  8496.,  9320.,  10144., 11696., 12576., 13456., 14336., 16168.,
      17104., 18040., 18976., 21088., 22080., 23072., 24064., 11992., 13296.,
      14600., 15904., 18352., 19744., 21136., 22528., 25416., 26896., 28376.,
      29856., 33184., 34752., 36320., 37888., 11992., 13296., 14600., 15904.,
      18352., 19744., 21136., 22528., 25416., 26896., 28376., 29856., 33184.,
      34752., 36320., 37888., 10800., 12000., 13200., 14400., 16640., 17920.,
      19200., 20480., 23120., 24480., 25840., 27200., 30240., 31680., 33120.,
      34560., 6480.,  7200.,  7920.,  8640.,  9984.,  10752., 11520., 12288.,
      13872., 14688., 15504., 16320., 18144., 19008., 19872., 20736., 10585.,
      11730., 12875., 14020., 16158., 17380., 18602., 19824., 22347., 23646.,
      24945., 26244., 29152., 30528., 31904., 33280., 16861., 18682., 20503.,
      22324., 25710., 27652., 29594., 31536., 35527., 37590., 39653., 41716.,
      46312., 48496., 50680., 52864., 16301., 18074., 19847., 21620., 24958.,
      26852., 28746., 30640., 34583., 36598., 38613., 40628., 45176., 47312.,
      49448., 51584., 15226., 16900., 18574., 20248., 23352., 25136., 26920.,
      28704., 32358., 34252., 36146., 38040., 42244., 44248., 46252., 48256.,
      8934.,  9916.,  10898., 11880., 13720., 14768., 15816., 16864., 19034.,
      20148., 21262., 22376., 24876., 26056., 27236., 28416., 10585., 11730.,
      12875., 14020., 16158., 17380., 18602., 19824., 22347., 23646., 24945.,
      26244., 29152., 30528., 31904., 33280., 16861., 18682., 20503., 22324.,
      25710., 27652., 29594., 31536., 35527., 37590., 39653., 41716., 46312.,
      48496., 50680., 52864., 16301., 18074., 19847., 21620., 24958., 26852.,
      28746., 30640., 34583., 36598., 38613., 40628., 45176., 47312., 49448.,
      51584., 15226., 16900., 18574., 20248., 23352., 25136., 26920., 28704.,
      32358., 34252., 36146., 38040., 42244., 44248., 46252., 48256., 8934.,
      9916.,  10898., 11880., 13720., 14768., 15816., 16864., 19034., 20148.,
      21262., 22376., 24876., 26056., 27236., 28416., 6749.,  7482.,  8215.,
      8948.,  10310., 11092., 11874., 12656., 14263., 15094., 15925., 16756.,
      18608., 19488., 20368., 21248., 10865., 12034., 13203., 14372., 16534.,
      17780., 19026., 20272., 22819., 24142., 25465., 26788., 29720., 31120.,
      32520., 33920., 10305., 11426., 12547., 13668., 15782., 16980., 18178.,
      19376., 21875., 23150., 24425., 25700., 28584., 29936., 31288., 32640.,
      9826.,  10900., 11974., 13048., 15032., 16176., 17320., 18464., 20798.,
      22012., 23226., 24440., 27124., 28408., 29692., 30976., 5694.,  6316.,
      6938.,  7560.,  8728.,  9392.,  10056., 10720., 12098., 12804., 13510.,
      14216., 15804., 16552., 17300., 18048., 7672.,  8496.,  9320.,  10144.,
      11696., 12576., 13456., 14336., 16168., 17104., 18040., 18976., 21088.,
      22080., 23072., 24064., 11992., 13296., 14600., 15904., 18352., 19744.,
      21136., 22528., 25416., 26896., 28376., 29856., 33184., 34752., 36320.,
      37888., 11992., 13296., 14600., 15904., 18352., 19744., 21136., 22528.,
      25416., 26896., 28376., 29856., 33184., 34752., 36320., 37888., 10800.,
      12000., 13200., 14400., 16640., 17920., 19200., 20480., 23120., 24480.,
      25840., 27200., 30240., 31680., 33120., 34560., 6480.,  7200.,  7920.,
      8640.,  9984.,  10752., 11520., 12288., 13872., 14688., 15504., 16320.,
      18144., 19008., 19872., 20736., 10585., 11730., 12875., 14020., 16158.,
      17380., 18602., 19824., 22347., 23646., 24945., 26244., 29152., 30528.,
      31904., 33280., 16861., 18682., 20503., 22324., 25710., 27652., 29594.,
      31536., 35527., 37590., 39653., 41716., 46312., 48496., 50680., 52864.,
      16301., 18074., 19847., 21620., 24958., 26852., 28746., 30640., 34583.,
      36598., 38613., 40628., 45176., 47312., 49448., 51584., 15226., 16900.,
      18574., 20248., 23352., 25136., 26920., 28704., 32358., 34252., 36146.,
      38040., 42244., 44248., 46252., 48256., 8934.,  9916.,  10898., 11880.,
      13720., 14768., 15816., 16864., 19034., 20148., 21262., 22376., 24876.,
      26056., 27236., 28416., 10585., 11730., 12875., 14020., 16158., 17380.,
      18602., 19824., 22347., 23646., 24945., 26244., 29152., 30528., 31904.,
      33280., 16861., 18682., 20503., 22324., 25710., 27652., 29594., 31536.,
      35527., 37590., 39653., 41716., 46312., 48496., 50680., 52864., 16301.,
      18074., 19847., 21620., 24958., 26852., 28746., 30640., 34583., 36598.,
      38613., 40628., 45176., 47312., 49448., 51584., 15226., 16900., 18574.,
      20248., 23352., 25136., 26920., 28704., 32358., 34252., 36146., 38040.,
      42244., 44248., 46252., 48256., 8934.,  9916.,  10898., 11880., 13720.,
      14768., 15816., 16864., 19034., 20148., 21262., 22376., 24876., 26056.,
      27236., 28416., 6749.,  7482.,  8215.,  8948.,  10310., 11092., 11874.,
      12656., 14263., 15094., 15925., 16756., 18608., 19488., 20368., 21248.,
      10865., 12034., 13203., 14372., 16534., 17780., 19026., 20272., 22819.,
      24142., 25465., 26788., 29720., 31120., 32520., 33920., 10305., 11426.,
      12547., 13668., 15782., 16980., 18178., 19376., 21875., 23150., 24425.,
      25700., 28584., 29936., 31288., 32640., 9826.,  10900., 11974., 13048.,
      15032., 16176., 17320., 18464., 20798., 22012., 23226., 24440., 27124.,
      28408., 29692., 30976., 5694.,  6316.,  6938.,  7560.,  8728.,  9392.,
      10056., 10720., 12098., 12804., 13510., 14216., 15804., 16552., 17300.,
      18048., 7672.,  8496.,  9320.,  10144., 11696., 12576., 13456., 14336.,
      16168., 17104., 18040., 18976., 21088., 22080., 23072., 24064., 11992.,
      13296., 14600., 15904., 18352., 19744., 21136., 22528., 25416., 26896.,
      28376., 29856., 33184., 34752., 36320., 37888., 11992., 13296., 14600.,
      15904., 18352., 19744., 21136., 22528., 25416., 26896., 28376., 29856.,
      33184., 34752., 36320., 37888., 10800., 12000., 13200., 14400., 16640.,
      17920., 19200., 20480., 23120., 24480., 25840., 27200., 30240., 31680.,
      33120., 34560., 6480.,  7200.,  7920.,  8640.,  9984.,  10752., 11520.,
      12288., 13872., 14688., 15504., 16320., 18144., 19008., 19872., 20736.,
      10585., 11730., 12875., 14020., 16158., 17380., 18602., 19824., 22347.,
      23646., 24945., 26244., 29152., 30528., 31904., 33280., 16861., 18682.,
      20503., 22324., 25710., 27652., 29594., 31536., 35527., 37590., 39653.,
      41716., 46312., 48496., 50680., 52864., 16301., 18074., 19847., 21620.,
      24958., 26852., 28746., 30640., 34583., 36598., 38613., 40628., 45176.,
      47312., 49448., 51584., 15226., 16900., 18574., 20248., 23352., 25136.,
      26920., 28704., 32358., 34252., 36146., 38040., 42244., 44248., 46252.,
      48256., 8934.,  9916.,  10898., 11880., 13720., 14768., 15816., 16864.,
      19034., 20148., 21262., 22376., 24876., 26056., 27236., 28416., 10585.,
      11730., 12875., 14020., 16158., 17380., 18602., 19824., 22347., 23646.,
      24945., 26244., 29152., 30528., 31904., 33280., 16861., 18682., 20503.,
      22324., 25710., 27652., 29594., 31536., 35527., 37590., 39653., 41716.,
      46312., 48496., 50680., 52864., 16301., 18074., 19847., 21620., 24958.,
      26852., 28746., 30640., 34583., 36598., 38613., 40628., 45176., 47312.,
      49448., 51584., 15226., 16900., 18574., 20248., 23352., 25136., 26920.,
      28704., 32358., 34252., 36146., 38040., 42244., 44248., 46252., 48256.,
      8934.,  9916.,  10898., 11880., 13720., 14768., 15816., 16864., 19034.,
      20148., 21262., 22376., 24876., 26056., 27236., 28416., 6749.,  7482.,
      8215.,  8948.,  10310., 11092., 11874., 12656., 14263., 15094., 15925.,
      16756., 18608., 19488., 20368., 21248., 10865., 12034., 13203., 14372.,
      16534., 17780., 19026., 20272., 22819., 24142., 25465., 26788., 29720.,
      31120., 32520., 33920., 10305., 11426., 12547., 13668., 15782., 16980.,
      18178., 19376., 21875., 23150., 24425., 25700., 28584., 29936., 31288.,
      32640., 9826.,  10900., 11974., 13048., 15032., 16176., 17320., 18464.,
      20798., 22012., 23226., 24440., 27124., 28408., 29692., 30976., 5694.,
      6316.,  6938.,  7560.,  8728.,  9392.,  10056., 10720., 12098., 12804.,
      13510., 14216., 15804., 16552., 17300., 18048.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x16x18x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15797., 17578., 19359., 21140., 24486., 26388., 28290., 30192., 34143.,
      36166., 38189., 40212., 44768., 46912., 49056., 51200., 15813., 17610.,
      19407., 21204., 24566., 26484., 28402., 30320., 34287., 36326., 38365.,
      40404., 44976., 47136., 49296., 51456., 15797., 17578., 19359., 21140.,
      24486., 26388., 28290., 30192., 34143., 36166., 38189., 40212., 44768.,
      46912., 49056., 51200., 15813., 17610., 19407., 21204., 24566., 26484.,
      28402., 30320., 34287., 36326., 38365., 40404., 44976., 47136., 49296.,
      51456., 15797., 17578., 19359., 21140., 24486., 26388., 28290., 30192.,
      34143., 36166., 38189., 40212., 44768., 46912., 49056., 51200., 15813.,
      17610., 19407., 21204., 24566., 26484., 28402., 30320., 34287., 36326.,
      38365., 40404., 44976., 47136., 49296., 51456., 15797., 17578., 19359.,
      21140., 24486., 26388., 28290., 30192., 34143., 36166., 38189., 40212.,
      44768., 46912., 49056., 51200., 15813., 17610., 19407., 21204., 24566.,
      26484., 28402., 30320., 34287., 36326., 38365., 40404., 44976., 47136.,
      49296., 51456., 15797., 17578., 19359., 21140., 24486., 26388., 28290.,
      30192., 34143., 36166., 38189., 40212., 44768., 46912., 49056., 51200.,
      15813., 17610., 19407., 21204., 24566., 26484., 28402., 30320., 34287.,
      36326., 38365., 40404., 44976., 47136., 49296., 51456., 15797., 17578.,
      19359., 21140., 24486., 26388., 28290., 30192., 34143., 36166., 38189.,
      40212., 44768., 46912., 49056., 51200., 15813., 17610., 19407., 21204.,
      24566., 26484., 28402., 30320., 34287., 36326., 38365., 40404., 44976.,
      47136., 49296., 51456.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x15x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15309., 20091., 19319., 13489., 22491., 33025., 29685., 17127., 24559.,
      33805., 33025., 18379., 17811., 29051., 28415., 18087., 10573., 17173.,
      19649., 12265., 15347., 19869., 19481., 13727., 22341., 31623., 29563.,
      17721., 20505., 30803., 31623., 18653., 17169., 27609., 29373., 19605.,
      8951.,  14815., 18187., 12579., 16537., 24351., 20091., 11149., 24559.,
      33805., 33025., 18379., 20611., 33561., 33805., 21391., 17295., 26327.,
      29051., 19587., 12769., 17001., 17173., 11165.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x15x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {33025., 29685., 33805., 33025.,
                                         31623., 29563., 30803., 31623.,
                                         33805., 33025., 33561., 33805.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x15x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12665., 13434., 17631., 18774., 19043., 20174., 12505., 13282., 19123.,
      20438., 32057., 34018., 28413., 30282., 18595., 19758., 21391., 22782.,
      31541., 33658., 32057., 34018., 17375., 18550., 17577., 18694., 28497.,
      30326., 28225., 30078., 19489., 20622., 9155.,  9754.,  16011., 17066.,
      17787., 18946., 11595., 12370., 13527., 14406., 19181., 20442., 18321.,
      19538., 12583., 13374., 21457., 22826., 32295., 34350., 29195., 31126.,
      17393., 18578., 19181., 20434., 31843., 33862., 32295., 34350., 18541.,
      19802., 16081., 17090., 27721., 29490., 31065., 33018., 20169., 21482.,
      7499.,  8046.,  15491., 16446., 17939., 19094., 12883., 13702., 13653.,
      14610., 23003., 24350., 17631., 18774., 11285., 11930., 21391., 22782.,
      31541., 33658., 32057., 34018., 17375., 18550., 19019., 20262., 31249.,
      33298., 31541., 33658., 21595., 22910., 16953., 18046., 28225., 29998.,
      28497., 30326., 19057., 20294., 12435., 13122., 15675., 16722., 16011.,
      17066., 10843., 11578.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x15x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      32057., 34018., 28413., 30282., 31541., 33658., 32057., 34018.,
      32295., 34350., 29195., 31126., 31843., 33862., 32295., 34350.,
      31541., 33658., 32057., 34018., 31249., 33298., 31541., 33658.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x15x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14289., 15058., 15827., 16596., 16103., 17246., 18389., 19532., 18299.,
      19430., 20561., 21692., 11337., 12114., 12891., 13668., 18435., 19750.,
      21065., 22380., 32809., 34770., 36731., 38692., 26509., 28378., 30247.,
      32116., 18363., 19526., 20689., 21852., 22255., 23646., 25037., 26428.,
      29701., 31818., 33935., 36052., 32809., 34770., 36731., 38692., 16295.,
      17470., 18645., 19820., 16981., 18098., 19215., 20332., 27869., 29698.,
      31527., 33356., 25509., 27362., 29215., 31068., 19381., 20514., 21647.,
      22780., 8783.,  9382.,  9981.,  10580., 15991., 17046., 18101., 19156.,
      18415., 19574., 20733., 21892., 10639., 11414., 12189., 12964., 12639.,
      13518., 14397., 15276., 18893., 20154., 21415., 22676., 18625., 19842.,
      21059., 22276., 11543., 12334., 13125., 13916., 20681., 22050., 23419.,
      24788., 30183., 32238., 34293., 36348., 28075., 30006., 31937., 33868.,
      17665., 18850., 20035., 21220., 18677., 19930., 21183., 22436., 30467.,
      32486., 34505., 36524., 30183., 32238., 34293., 36348., 18221., 19482.,
      20743., 22004., 15249., 16258., 17267., 18276., 25737., 27506., 29275.,
      31044., 29425., 31378., 33331., 35284., 19089., 20402., 21715., 23028.,
      7251.,  7798.,  8345.,  8892.,  14027., 14982., 15937., 16892., 16675.,
      17830., 18985., 20140., 12403., 13222., 14041., 14860., 13645., 14602.,
      15559., 16516., 23187., 24534., 25881., 27228., 16103., 17246., 18389.,
      19532., 10181., 10826., 11471., 12116., 22255., 23646., 25037., 26428.,
      29701., 31818., 33935., 36052., 32809., 34770., 36731., 38692., 16295.,
      17470., 18645., 19820., 19067., 20310., 21553., 22796., 31361., 33410.,
      35459., 37508., 29701., 31818., 33935., 36052., 21907., 23222., 24537.,
      25852., 14989., 16082., 17175., 18268., 28149., 29922., 31695., 33468.,
      27869., 29698., 31527., 33356., 17517., 18754., 19991., 21228., 12567.,
      13254., 13941., 14628., 14303., 15350., 16397., 17444., 15991., 17046.,
      18101., 19156., 10711., 11446., 12181., 12916.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x15x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      32809., 34770., 36731., 38692., 26509., 28378., 30247., 32116.,
      29701., 31818., 33935., 36052., 32809., 34770., 36731., 38692.,
      30183., 32238., 34293., 36348., 28075., 30006., 31937., 33868.,
      30467., 32486., 34505., 36524., 30183., 32238., 34293., 36348.,
      29701., 31818., 33935., 36052., 32809., 34770., 36731., 38692.,
      31361., 33410., 35459., 37508., 29701., 31818., 33935., 36052.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x15x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11289., 12788., 16125., 18476., 17605., 19996., 13313., 14980., 21517.,
      24108., 29985., 33860., 26985., 30740., 16949., 19292., 22277., 24956.,
      33881., 38004., 29985., 33860., 15853., 18156., 15494., 17676., 28446.,
      32108., 31902., 35708., 19430., 21788., 6986.,  8116.,  14418., 16468.,
      19666., 22020., 14570., 16164., 14293., 16012., 18297., 20788., 15521.,
      17828., 10173., 11644., 21961., 24660., 31997., 36060., 26629., 30380.,
      15057., 17316., 19393., 21924., 31541., 35596., 31997., 36060., 17961.,
      20404., 14006., 16068., 25998., 29540., 30126., 33908., 21014., 23508.,
      6586.,  7708.,  13218., 15164., 17378., 19628., 13530., 15116., 16145.,
      17956., 22261., 24892., 16125., 18476., 9177.,  10548., 22277., 24956.,
      33881., 38004., 29985., 33860., 15853., 18156., 16221., 18572., 31217.,
      35172., 33881., 38004., 20837., 23420., 14950., 17020., 24830., 28252.,
      28446., 32108., 21446., 23948., 9642.,  10884., 14450., 16420., 14418.,
      16468., 11338., 12788.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x15x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29985., 33860., 26985., 30740., 33881., 38004., 29985., 33860.,
      31997., 36060., 26629., 30380., 31541., 35596., 31997., 36060.,
      33881., 38004., 29985., 33860., 31217., 35172., 33881., 38004.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x15x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12225., 12946., 14502., 15272., 16825., 17882., 20266., 21400., 17441.,
      18538., 20962., 22136., 12065., 12898., 14550., 15432., 21185., 22522.,
      25170., 26584., 29897., 31778., 35702., 37704., 26833., 28594., 32398.,
      34280., 17025., 18122., 20514., 21688., 22361., 23786., 26522., 28024.,
      32577., 34706., 38878., 41128., 29897., 31778., 35702., 37704., 16665.,
      17722., 20074., 21208., 15384., 16396., 18590., 19672., 27808., 29628.,
      33294., 35224., 29968., 31932., 35742., 37816., 19192., 20396., 22782.,
      24056., 6512.,  6964.,  8122.,  8616.,  14312., 15268., 17322., 18344.,
      19384., 20644., 23002., 24328., 13520., 14420., 16026., 16968., 13533.,
      14474., 16250., 17240., 17573., 18770., 21294., 22568., 15021., 16034.,
      18374., 19464., 9181.,  9818.,  11274., 11960., 21325., 22770., 25526.,
      27048., 29765., 31834., 35946., 38136., 25229., 26986., 30786., 32664.,
      14733., 15746., 18054., 19144., 19173., 20450., 23038., 24392., 30141.,
      32202., 36306., 38488., 29765., 31834., 35946., 38136., 17029., 18226.,
      20718., 21992., 12784., 13676., 15750., 16712., 24824., 26524., 30070.,
      31880., 28232., 30172., 33958., 36008., 19280., 20620., 23142., 24552.,
      6104.,  6548.,  7698.,  8184.,  12016., 12868., 14818., 15736., 16960.,
      18116., 20370., 21592., 12984., 13876., 15474., 16408., 15737., 16770.,
      18638., 19720., 21905., 23242., 25906., 27320., 16825., 17882., 20266.,
      21400., 8441.,  8978.,  10334., 10920., 22361., 23786., 26522., 28024.,
      32577., 34706., 38878., 41128., 29897., 31778., 35702., 37704., 16665.,
      17722., 20074., 21208., 16465., 17562., 19970., 21144., 30745., 32706.,
      36710., 38792., 32577., 34706., 38878., 41128., 20977., 22314., 24946.,
      26360., 13896., 14796., 16878., 17848., 24400., 25980., 29406., 31096.,
      27808., 29628., 33294., 35224., 20264., 21612., 24142., 25560., 9408.,
      9972.,  11242., 11848., 13432., 14308., 16282., 17224., 14312., 15268.,
      17322., 18344., 11296., 12052., 13514., 14312.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x15x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29897., 31778., 35702., 37704., 26833., 28594., 32398., 34280.,
      32577., 34706., 38878., 41128., 29897., 31778., 35702., 37704.,
      29765., 31834., 35946., 38136., 25229., 26986., 30786., 32664.,
      30141., 32202., 36306., 38488., 29765., 31834., 35946., 38136.,
      32577., 34706., 38878., 41128., 29897., 31778., 35702., 37704.,
      30745., 32706., 36710., 38792., 32577., 34706., 38878., 41128.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x15x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11409., 12130., 12851., 13572., 15114., 15884., 16654., 17424., 15697.,
      16754., 17811., 18868., 21222., 22356., 23490., 24624., 14841., 15938.,
      17035., 18132., 20526., 21700., 22874., 24048., 10497., 11330., 12163.,
      12996., 14650., 15532., 16414., 17296., 19433., 20770., 22107., 23444.,
      26078., 27492., 28906., 30320., 27705., 29586., 31467., 33348., 37274.,
      39276., 41278., 43280., 24769., 26530., 28291., 30052., 33858., 35740.,
      37622., 39504., 14841., 15938., 17035., 18132., 20526., 21700., 22874.,
      24048., 19393., 20818., 22243., 23668., 26390., 27892., 29394., 30896.,
      29745., 31874., 34003., 36132., 40306., 42556., 44806., 47056., 27705.,
      29586., 31467., 33348., 37274., 39276., 41278., 43280., 15697., 16754.,
      17811., 18868., 21222., 22356., 23490., 24624., 13276., 14288., 15300.,
      16312., 18498., 19580., 20662., 21744., 24996., 26816., 28636., 30456.,
      34130., 36060., 37990., 39920., 27636., 29600., 31564., 33528., 37346.,
      39420., 41494., 43568., 17692., 18896., 20100., 21304., 23682., 24956.,
      26230., 27504., 6076.,  6528.,  6980.,  7432.,  8582.,  9076.,  9570.,
      10064., 12564., 13520., 14476., 15432., 17494., 18516., 19538., 20560.,
      17284., 18544., 19804., 21064., 23430., 24756., 26082., 27408., 12540.,
      13440., 14340., 15240., 16838., 17780., 18722., 19664., 10861., 11802.,
      12743., 13684., 15446., 16436., 17426., 18416., 13981., 15178., 16375.,
      17572., 20066., 21340., 22614., 23888., 12133., 13146., 14159., 15172.,
      17482., 18572., 19662., 20752., 7997.,  8634.,  9271.,  9908.,  11366.,
      12052., 12738., 13424., 17429., 18874., 20319., 21764., 24506., 26028.,
      27550., 29072., 24693., 26762., 28831., 30900., 35014., 37204., 39394.,
      41584., 21053., 22810., 24567., 26324., 30126., 32004., 33882., 35760.,
      12133., 13146., 14159., 15172., 17482., 18572., 19662., 20752., 16109.,
      17386., 18663., 19940., 22514., 23868., 25222., 26576., 25453., 27514.,
      29575., 31636., 35742., 37924., 40106., 42288., 24693., 26762., 28831.,
      30900., 35014., 37204., 39394., 41584., 13981., 15178., 16375., 17572.,
      20066., 21340., 22614., 23888., 10628., 11520., 12412., 13304., 15370.,
      16332., 17294., 18256., 20940., 22640., 24340., 26040., 29594., 31404.,
      33214., 35024., 23932., 25872., 27812., 29752., 33546., 35596., 37646.,
      39696., 16068., 17408., 18748., 20088., 22602., 24012., 25422., 26832.,
      4884.,  5328.,  5772.,  6216.,  7358.,  7844.,  8330.,  8816.,  10124.,
      10976., 11828., 12680., 14638., 15556., 16474., 17392., 14588., 15744.,
      16900., 18056., 20318., 21540., 22762., 23984., 11092., 11984., 12876.,
      13768., 15358., 16292., 17226., 18160., 14281., 15314., 16347., 17380.,
      19234., 20316., 21398., 22480., 19433., 20770., 22107., 23444., 26078.,
      27492., 28906., 30320., 15697., 16754., 17811., 18868., 21222., 22356.,
      23490., 24624., 7641.,  8178.,  8715.,  9252.,  10610., 11196., 11782.,
      12368., 19393., 20818., 22243., 23668., 26390., 27892., 29394., 30896.,
      29745., 31874., 34003., 36132., 40306., 42556., 44806., 47056., 27705.,
      29586., 31467., 33348., 37274., 39276., 41278., 43280., 15697., 16754.,
      17811., 18868., 21222., 22356., 23490., 24624., 14841., 15938., 17035.,
      18132., 20526., 21700., 22874., 24048., 27273., 29234., 31195., 33156.,
      37162., 39244., 41326., 43408., 29745., 31874., 34003., 36132., 40306.,
      42556., 44806., 47056., 19433., 20770., 22107., 23444., 26078., 27492.,
      28906., 30320., 13228., 14128., 15028., 15928., 18002., 18972., 19942.,
      20912., 22004., 23584., 25164., 26744., 30178., 31868., 33558., 35248.,
      24996., 26816., 28636., 30456., 34130., 36060., 37990., 39920., 18412.,
      19760., 21108., 22456., 24978., 26396., 27814., 29232., 8940.,  9504.,
      10068., 10632., 11894., 12500., 13106., 13712., 12932., 13808., 14684.,
      15560., 17542., 18484., 19426., 20368., 12564., 13520., 14476., 15432.,
      17494., 18516., 19538., 20560., 9516.,  10272., 11028., 11784., 13238.,
      14036., 14834., 15632.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x15x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27705., 29586., 31467., 33348., 37274., 39276., 41278., 43280., 24769.,
      26530., 28291., 30052., 33858., 35740., 37622., 39504., 29745., 31874.,
      34003., 36132., 40306., 42556., 44806., 47056., 27705., 29586., 31467.,
      33348., 37274., 39276., 41278., 43280., 24693., 26762., 28831., 30900.,
      35014., 37204., 39394., 41584., 21053., 22810., 24567., 26324., 30126.,
      32004., 33882., 35760., 25453., 27514., 29575., 31636., 35742., 37924.,
      40106., 42288., 24693., 26762., 28831., 30900., 35014., 37204., 39394.,
      41584., 29745., 31874., 34003., 36132., 40306., 42556., 44806., 47056.,
      27705., 29586., 31467., 33348., 37274., 39276., 41278., 43280., 27273.,
      29234., 31195., 33156., 37162., 39244., 41326., 43408., 29745., 31874.,
      34003., 36132., 40306., 42556., 44806., 47056.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x15x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12289., 13796., 15401., 17104., 18813., 21236., 23813., 26544., 19405.,
      21780., 24309., 26992., 11249., 12740., 14329., 16016., 17981., 20340.,
      22853., 25520., 30025., 33732., 37681., 41872., 28793., 32548., 36545.,
      40784., 18605., 20948., 23445., 26096., 19693., 22100., 24661., 27376.,
      28793., 32548., 36545., 40784., 30025., 33732., 37681., 41872., 18525.,
      20916., 23461., 26160., 16638., 18776., 21054., 23472., 26086., 29432.,
      32998., 36784., 26726., 30136., 33766., 37616., 16574., 18712., 20990.,
      23408., 10258., 11560., 12946., 14416., 15114., 17096., 19210., 21456.,
      16394., 18440., 20618., 22928., 10194., 11496., 12882., 14352., 10649.,
      12180., 13809., 15536., 16821., 19236., 21805., 24528., 16549., 18948.,
      21501., 24208., 10249., 11764., 13377., 15088., 16277., 18660., 21197.,
      23888., 26401., 30196., 34233., 38512., 24753., 28436., 32361., 36528.,
      16005., 18372., 20893., 23568., 16805., 19204., 21757., 24464., 24753.,
      28436., 32361., 36528., 26401., 30196., 34233., 38512., 16277., 18660.,
      21197., 23888., 14638., 16792., 19086., 21520., 23638., 27064., 30710.,
      34576., 22870., 26232., 29814., 33616., 14574., 16728., 19022., 21456.,
      8802.,  10088., 11458., 12912., 13178., 15176., 17306., 19568., 14330.,
      16392., 18586., 20912., 8738.,  10024., 11394., 12848., 11537., 13060.,
      14681., 16400., 19405., 21780., 24309., 26992., 18813., 21236., 23813.,
      26544., 12289., 13796., 15401., 17104., 19693., 22100., 24661., 27376.,
      28793., 32548., 36545., 40784., 30025., 33732., 37681., 41872., 18525.,
      20916., 23461., 26160., 17981., 20340., 22853., 25520., 30025., 33732.,
      37681., 41872., 28793., 32548., 36545., 40784., 18605., 20948., 23445.,
      26096., 17246., 19416., 21726., 24176., 26726., 30136., 33766., 37616.,
      26086., 29432., 32998., 36784., 17182., 19352., 21662., 24112., 9906.,
      11176., 12530., 13968., 16394., 18440., 20618., 22928., 15114., 17096.,
      19210., 21456., 9842.,  11112., 12466., 13904.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x15x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30025., 33732., 37681., 41872., 28793., 32548., 36545., 40784.,
      28793., 32548., 36545., 40784., 30025., 33732., 37681., 41872.,
      26401., 30196., 34233., 38512., 24753., 28436., 32361., 36528.,
      24753., 28436., 32361., 36528., 26401., 30196., 34233., 38512.,
      28793., 32548., 36545., 40784., 30025., 33732., 37681., 41872.,
      30025., 33732., 37681., 41872., 28793., 32548., 36545., 40784.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x15x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11281., 12002., 13446., 14216., 15807., 16626., 18364., 19232., 18277.,
      19450., 21766., 23016., 25563., 26890., 29668., 31072., 17461., 18586.,
      20854., 22056., 24555., 25834., 28564., 29920., 11281., 12002., 13446.,
      14216., 15807., 16626., 18364., 19232., 17461., 18586., 20854., 22056.,
      24555., 25834., 28564., 29920., 28441., 30226., 33814., 35720., 39671.,
      41698., 46012., 48160., 27977., 29810., 33446., 35400., 39399., 41474.,
      45836., 48032., 17461., 18586., 20854., 22056., 24555., 25834., 28564.,
      29920., 18277., 19450., 21766., 23016., 25563., 26890., 29668., 31072.,
      27977., 29810., 33446., 35400., 39399., 41474., 45836., 48032., 28441.,
      30226., 33814., 35720., 39671., 41698., 46012., 48160., 18277., 19450.,
      21766., 23016., 25563., 26890., 29668., 31072., 15770., 16796., 18856.,
      19952., 22222., 23388., 25868., 27104., 25410., 27020., 30264., 31984.,
      35558., 37388., 41292., 43232., 25602., 27276., 30584., 32368., 36006.,
      37900., 41868., 43872., 15770., 16796., 18856., 19952., 22222., 23388.,
      25868., 27104., 9606.,  10244., 11496., 12176., 13554., 14276., 15780.,
      16544., 14430., 15380., 17304., 18320., 20442., 21524., 23844., 24992.,
      15902., 16916., 18904., 19984., 22170., 23316., 25700., 26912., 9606.,
      10244., 11496., 12176., 13554., 14276., 15780., 16544., 8233.,  8978.,
      10446., 11240., 12855., 13698., 15460., 16352., 13277., 14442., 16750.,
      17992., 20531., 21850., 24620., 26016., 12749., 13898., 16190., 17416.,
      19939., 21242., 23996., 25376., 8233.,  8978.,  10446., 11240., 12855.,
      13698., 15460., 16352., 12749., 13898., 16190., 17416., 19939., 21242.,
      23996., 25376., 21105., 22978., 26654., 28648., 32687., 34802., 39204.,
      41440., 19969., 21730., 25294., 27176., 31103., 33106., 37396., 39520.,
      12749., 13898., 16190., 17416., 19939., 21242., 23996., 25376., 13277.,
      14442., 16750., 17992., 20531., 21850., 24620., 26016., 19969., 21730.,
      25294., 27176., 31103., 33106., 37396., 39520., 21105., 22978., 26654.,
      28648., 32687., 34802., 39204., 41440., 13277., 14442., 16750., 17992.,
      20531., 21850., 24620., 26016., 11498., 12540., 14616., 15728., 18014.,
      19196., 21692., 22944., 18898., 20588., 23912., 25712., 29366., 31276.,
      35260., 37280., 18450., 20076., 23336., 25072., 28662., 30508., 34428.,
      36384., 11498., 12540., 14616., 15728., 18014., 19196., 21692., 22944.,
      6966.,  7588.,  8824.,  9488.,  10850., 11556., 13044., 13792., 10542.,
      11508., 13448., 14480., 16618., 17716., 20052., 21216., 11758., 12788.,
      14792., 15888., 18090., 19252., 21652., 22880., 6966.,  7588.,  8824.,
      9488.,  10850., 11556., 13044., 13792., 11297., 12034., 13494., 14280.,
      15887., 16722., 18476., 19360., 17461., 18586., 20854., 22056., 24555.,
      25834., 28564., 29920., 18277., 19450., 21766., 23016., 25563., 26890.,
      29668., 31072., 11297., 12034., 13494., 14280., 15887., 16722., 18476.,
      19360., 18277., 19450., 21766., 23016., 25563., 26890., 29668., 31072.,
      27977., 29810., 33446., 35400., 39399., 41474., 45836., 48032., 28441.,
      30226., 33814., 35720., 39671., 41698., 46012., 48160., 18277., 19450.,
      21766., 23016., 25563., 26890., 29668., 31072., 17461., 18586., 20854.,
      22056., 24555., 25834., 28564., 29920., 28441., 30226., 33814., 35720.,
      39671., 41698., 46012., 48160., 27977., 29810., 33446., 35400., 39399.,
      41474., 45836., 48032., 17461., 18586., 20854., 22056., 24555., 25834.,
      28564., 29920., 16442., 17500., 19592., 20720., 23022., 24220., 26732.,
      28000., 25602., 27276., 30584., 32368., 36006., 37900., 41868., 43872.,
      25410., 27020., 30264., 31984., 35558., 37388., 41292., 43232., 16442.,
      17500., 19592., 20720., 23022., 24220., 26732., 28000., 9446.,  10052.,
      11272., 11920., 13266., 13956., 15428., 16160., 15902., 16916., 18904.,
      19984., 22170., 23316., 25700., 26912., 14430., 15380., 17304., 18320.,
      20442., 21524., 23844., 24992., 9446.,  10052., 11272., 11920., 13266.,
      13956., 15428., 16160.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x15x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28441., 30226., 33814., 35720., 39671., 41698., 46012., 48160., 27977.,
      29810., 33446., 35400., 39399., 41474., 45836., 48032., 27977., 29810.,
      33446., 35400., 39399., 41474., 45836., 48032., 28441., 30226., 33814.,
      35720., 39671., 41698., 46012., 48160., 21105., 22978., 26654., 28648.,
      32687., 34802., 39204., 41440., 19969., 21730., 25294., 27176., 31103.,
      33106., 37396., 39520., 19969., 21730., 25294., 27176., 31103., 33106.,
      37396., 39520., 21105., 22978., 26654., 28648., 32687., 34802., 39204.,
      41440., 27977., 29810., 33446., 35400., 39399., 41474., 45836., 48032.,
      28441., 30226., 33814., 35720., 39671., 41698., 46012., 48160., 28441.,
      30226., 33814., 35720., 39671., 41698., 46012., 48160., 27977., 29810.,
      33446., 35400., 39399., 41474., 45836., 48032.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x15x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7249.,  7970.,  8691.,  9412.,  10762., 11532., 12302., 13072., 14667.,
      15486., 16305., 17124., 18964., 19832., 20700., 21568., 11765., 12938.,
      14111., 15284., 17450., 18700., 19950., 21200., 23751., 25078., 26405.,
      27732., 30668., 32072., 33476., 34880., 11205., 12330., 13455., 14580.,
      16698., 17900., 19102., 20304., 22807., 24086., 25365., 26644., 29532.,
      30888., 32244., 33600., 7249.,  7970.,  8691.,  9412.,  10762., 11532.,
      12302., 13072., 14667., 15486., 16305., 17124., 18964., 19832., 20700.,
      21568., 11205., 12330., 13455., 14580., 16698., 17900., 19102., 20304.,
      22807., 24086., 25365., 26644., 29532., 30888., 32244., 33600., 18105.,
      19890., 21675., 23460., 26810., 28716., 30622., 32528., 36483., 38510.,
      40537., 42564., 47124., 49272., 51420., 53568., 18153., 19986., 21819.,
      23652., 27050., 29004., 30958., 32912., 36915., 38990., 41065., 43140.,
      47748., 49944., 52140., 54336., 11205., 12330., 13455., 14580., 16698.,
      17900., 19102., 20304., 22807., 24086., 25365., 26644., 29532., 30888.,
      32244., 33600., 11765., 12938., 14111., 15284., 17450., 18700., 19950.,
      21200., 23751., 25078., 26405., 27732., 30668., 32072., 33476., 34880.,
      18153., 19986., 21819., 23652., 27050., 29004., 30958., 32912., 36915.,
      38990., 41065., 43140., 47748., 49944., 52140., 54336., 18105., 19890.,
      21675., 23460., 26810., 28716., 30622., 32528., 36483., 38510., 40537.,
      42564., 47124., 49272., 51420., 53568., 11765., 12938., 14111., 15284.,
      17450., 18700., 19950., 21200., 23751., 25078., 26405., 27732., 30668.,
      32072., 33476., 34880., 10354., 11380., 12406., 13432., 15368., 16464.,
      17560., 18656., 20942., 22108., 23274., 24440., 27076., 28312., 29548.,
      30784., 16378., 17988., 19598., 21208., 24248., 25968., 27688., 29408.,
      32998., 34828., 36658., 38488., 42628., 44568., 46508., 48448., 16698.,
      18372., 20046., 21720., 24824., 26608., 28392., 30176., 33830., 35724.,
      37618., 39512., 43716., 45720., 47724., 49728., 10354., 11380., 12406.,
      13432., 15368., 16464., 17560., 18656., 20942., 22108., 23274., 24440.,
      27076., 28312., 29548., 30784., 6414.,  7052.,  7690.,  8328.,  9512.,
      10192., 10872., 11552., 12946., 13668., 14390., 15112., 16716., 17480.,
      18244., 19008., 9478.,  10428., 11378., 12328., 14136., 15152., 16168.,
      17184., 19322., 20404., 21486., 22568., 25036., 26184., 27332., 28480.,
      10310., 11324., 12338., 13352., 15224., 16304., 17384., 18464., 20666.,
      21812., 22958., 24104., 26636., 27848., 29060., 30272., 6414.,  7052.,
      7690.,  8328.,  9512.,  10192., 10872., 11552., 12946., 13668., 14390.,
      15112., 16716., 17480., 18244., 19008., 7273.,  8018.,  8763.,  9508.,
      10882., 11676., 12470., 13264., 14883., 15726., 16569., 17412., 19276.,
      20168., 21060., 21952., 11501., 12666., 13831., 14996., 17154., 18396.,
      19638., 20880., 23423., 24742., 26061., 27380., 30308., 31704., 33100.,
      34496., 11485., 12634., 13783., 14932., 17074., 18300., 19526., 20752.,
      23279., 24582., 25885., 27188., 30100., 31480., 32860., 34240., 7273.,
      8018.,  8763.,  9508.,  10882., 11676., 12470., 13264., 14883., 15726.,
      16569., 17412., 19276., 20168., 21060., 21952., 11485., 12634., 13783.,
      14932., 17074., 18300., 19526., 20752., 23279., 24582., 25885., 27188.,
      30100., 31480., 32860., 34240., 18705., 20578., 22451., 24324., 27762.,
      29756., 31750., 33744., 37787., 39902., 42017., 44132., 48780., 51016.,
      53252., 55488., 17569., 19330., 21091., 22852., 26178., 28060., 29942.,
      31824., 35755., 37758., 39761., 41764., 46300., 48424., 50548., 52672.,
      11485., 12634., 13783., 14932., 17074., 18300., 19526., 20752., 23279.,
      24582., 25885., 27188., 30100., 31480., 32860., 34240., 11501., 12666.,
      13831., 14996., 17154., 18396., 19638., 20880., 23423., 24742., 26061.,
      27380., 30308., 31704., 33100., 34496., 17569., 19330., 21091., 22852.,
      26178., 28060., 29942., 31824., 35755., 37758., 39761., 41764., 46300.,
      48424., 50548., 52672., 18705., 20578., 22451., 24324., 27762., 29756.,
      31750., 33744., 37787., 39902., 42017., 44132., 48780., 51016., 53252.,
      55488., 11501., 12666., 13831., 14996., 17154., 18396., 19638., 20880.,
      23423., 24742., 26061., 27380., 30308., 31704., 33100., 34496., 10498.,
      11540., 12582., 13624., 15576., 16688., 17800., 18912., 21214., 22396.,
      23578., 24760., 27412., 28664., 29916., 31168., 17098., 18788., 20478.,
      22168., 25288., 27088., 28888., 30688., 34358., 36268., 38178., 40088.,
      44308., 46328., 48348., 50368., 16266., 17892., 19518., 21144., 24200.,
      25936., 27672., 29408., 33014., 34860., 36706., 38552., 42708., 44664.,
      46620., 48576., 10498., 11540., 12582., 13624., 15576., 16688., 17800.,
      18912., 21214., 22396., 23578., 24760., 27412., 28664., 29916., 31168.,
      6270.,  6892.,  7514.,  8136.,  9304.,  9968.,  10632., 11296., 12674.,
      13380., 14086., 14792., 16380., 17128., 17876., 18624., 9878.,  10844.,
      11810., 12776., 14600., 15632., 16664., 17696., 19850., 20948., 22046.,
      23144., 25628., 26792., 27956., 29120., 10198., 11228., 12258., 13288.,
      15176., 16272., 17368., 18464., 20682., 21844., 23006., 24168., 26716.,
      27944., 29172., 30400., 6270.,  6892.,  7514.,  8136.,  9304.,  9968.,
      10632., 11296., 12674., 13380., 14086., 14792., 16380., 17128., 17876.,
      18624., 7265.,  8002.,  8739.,  9476.,  10842., 11628., 12414., 13200.,
      14811., 15646., 16481., 17316., 19172., 20056., 20940., 21824., 11205.,
      12330., 13455., 14580., 16698., 17900., 19102., 20304., 22807., 24086.,
      25365., 26644., 29532., 30888., 32244., 33600., 11765., 12938., 14111.,
      15284., 17450., 18700., 19950., 21200., 23751., 25078., 26405., 27732.,
      30668., 32072., 33476., 34880., 7265.,  8002.,  8739.,  9476.,  10842.,
      11628., 12414., 13200., 14811., 15646., 16481., 17316., 19172., 20056.,
      20940., 21824., 11765., 12938., 14111., 15284., 17450., 18700., 19950.,
      21200., 23751., 25078., 26405., 27732., 30668., 32072., 33476., 34880.,
      18153., 19986., 21819., 23652., 27050., 29004., 30958., 32912., 36915.,
      38990., 41065., 43140., 47748., 49944., 52140., 54336., 18105., 19890.,
      21675., 23460., 26810., 28716., 30622., 32528., 36483., 38510., 40537.,
      42564., 47124., 49272., 51420., 53568., 11765., 12938., 14111., 15284.,
      17450., 18700., 19950., 21200., 23751., 25078., 26405., 27732., 30668.,
      32072., 33476., 34880., 11205., 12330., 13455., 14580., 16698., 17900.,
      19102., 20304., 22807., 24086., 25365., 26644., 29532., 30888., 32244.,
      33600., 18105., 19890., 21675., 23460., 26810., 28716., 30622., 32528.,
      36483., 38510., 40537., 42564., 47124., 49272., 51420., 53568., 18153.,
      19986., 21819., 23652., 27050., 29004., 30958., 32912., 36915., 38990.,
      41065., 43140., 47748., 49944., 52140., 54336., 11205., 12330., 13455.,
      14580., 16698., 17900., 19102., 20304., 22807., 24086., 25365., 26644.,
      29532., 30888., 32244., 33600., 10642., 11700., 12758., 13816., 15784.,
      16912., 18040., 19168., 21486., 22684., 23882., 25080., 27748., 29016.,
      30284., 31552., 16698., 18372., 20046., 21720., 24824., 26608., 28392.,
      30176., 33830., 35724., 37618., 39512., 43716., 45720., 47724., 49728.,
      16378., 17988., 19598., 21208., 24248., 25968., 27688., 29408., 32998.,
      34828., 36658., 38488., 42628., 44568., 46508., 48448., 10642., 11700.,
      12758., 13816., 15784., 16912., 18040., 19168., 21486., 22684., 23882.,
      25080., 27748., 29016., 30284., 31552., 6126.,  6732.,  7338.,  7944.,
      9096.,  9744.,  10392., 11040., 12402., 13092., 13782., 14472., 16044.,
      16776., 17508., 18240., 10310., 11324., 12338., 13352., 15224., 16304.,
      17384., 18464., 20666., 21812., 22958., 24104., 26636., 27848., 29060.,
      30272., 9478.,  10428., 11378., 12328., 14136., 15152., 16168., 17184.,
      19322., 20404., 21486., 22568., 25036., 26184., 27332., 28480., 6126.,
      6732.,  7338.,  7944.,  9096.,  9744.,  10392., 11040., 12402., 13092.,
      13782., 14472., 16044., 16776., 17508., 18240.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x15x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18105., 19890., 21675., 23460., 26810., 28716., 30622., 32528., 36483.,
      38510., 40537., 42564., 47124., 49272., 51420., 53568., 18153., 19986.,
      21819., 23652., 27050., 29004., 30958., 32912., 36915., 38990., 41065.,
      43140., 47748., 49944., 52140., 54336., 18153., 19986., 21819., 23652.,
      27050., 29004., 30958., 32912., 36915., 38990., 41065., 43140., 47748.,
      49944., 52140., 54336., 18105., 19890., 21675., 23460., 26810., 28716.,
      30622., 32528., 36483., 38510., 40537., 42564., 47124., 49272., 51420.,
      53568., 18705., 20578., 22451., 24324., 27762., 29756., 31750., 33744.,
      37787., 39902., 42017., 44132., 48780., 51016., 53252., 55488., 17569.,
      19330., 21091., 22852., 26178., 28060., 29942., 31824., 35755., 37758.,
      39761., 41764., 46300., 48424., 50548., 52672., 17569., 19330., 21091.,
      22852., 26178., 28060., 29942., 31824., 35755., 37758., 39761., 41764.,
      46300., 48424., 50548., 52672., 18705., 20578., 22451., 24324., 27762.,
      29756., 31750., 33744., 37787., 39902., 42017., 44132., 48780., 51016.,
      53252., 55488., 18153., 19986., 21819., 23652., 27050., 29004., 30958.,
      32912., 36915., 38990., 41065., 43140., 47748., 49944., 52140., 54336.,
      18105., 19890., 21675., 23460., 26810., 28716., 30622., 32528., 36483.,
      38510., 40537., 42564., 47124., 49272., 51420., 53568., 18105., 19890.,
      21675., 23460., 26810., 28716., 30622., 32528., 36483., 38510., 40537.,
      42564., 47124., 49272., 51420., 53568., 18153., 19986., 21819., 23652.,
      27050., 29004., 30958., 32912., 36915., 38990., 41065., 43140., 47748.,
      49944., 52140., 54336.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x16x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11156., 18227., 23439., 16737., 16828., 26973., 34609., 23639., 16828.,
      26973., 34609., 23639., 16012., 25323., 32079., 21973., 9956.,  15929.,
      20165., 13895., 11156., 18227., 23439., 16737., 16828., 26973., 34609.,
      23639., 16828., 26973., 34609., 23639., 16012., 25323., 32079., 21973.,
      9956.,  15929., 20165., 13895., 11156., 18227., 23439., 16737., 16828.,
      26973., 34609., 23639., 16828., 26973., 34609., 23639., 16012., 25323.,
      32079., 21973., 9956.,  15929., 20165., 13895.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x16x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {25064., 32700., 25064., 32700.,
                                         25064., 32700., 25064., 32700.,
                                         25064., 32700., 25064., 32700.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x16x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9932.,  10568., 17051., 18118., 21919., 23294., 15509., 16482., 15852.,
      16888., 26907., 28634., 34399., 36610., 23797., 25358., 15852., 16888.,
      26907., 28634., 34399., 36610., 23797., 25358., 15408., 16408., 25988.,
      27638., 32916., 35006., 22796., 24266., 9424.,  10024., 15540., 16530.,
      19652., 20906., 14044., 14926., 9932.,  10568., 17051., 18118., 21919.,
      23294., 15509., 16482., 15852., 16888., 26907., 28634., 34399., 36610.,
      23797., 25358., 15852., 16888., 26907., 28634., 34399., 36610., 23797.,
      25358., 15408., 16408., 25988., 27638., 32916., 35006., 22796., 24266.,
      9424.,  10024., 15540., 16530., 19652., 20906., 14044., 14926., 9932.,
      10568., 17051., 18118., 21919., 23294., 15509., 16482., 15852., 16888.,
      26907., 28634., 34399., 36610., 23797., 25358., 15852., 16888., 26907.,
      28634., 34399., 36610., 23797., 25358., 15408., 16408., 25988., 27638.,
      32916., 35006., 22796., 24266., 9424.,  10024., 15540., 16530., 19652.,
      20906., 14044., 14926.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x16x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25034., 26640., 32526., 34616., 25034., 26640., 32526., 34616.,
      25034., 26640., 32526., 34616., 25034., 26640., 32526., 34616.,
      25034., 26640., 32526., 34616., 25034., 26640., 32526., 34616.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x16x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9628.,  10264., 10900., 11536., 16555., 17622., 18689., 19756., 21247.,
      22622., 23997., 25372., 14205., 15178., 16151., 17124., 15500., 16536.,
      17572., 18608., 26039., 27766., 29493., 31220., 33243., 35454., 37665.,
      39876., 23473., 25034., 26595., 28156., 15500., 16536., 17572., 18608.,
      26039., 27766., 29493., 31220., 33243., 35454., 37665., 39876., 23473.,
      25034., 26595., 28156., 14904., 15904., 16904., 17904., 24822., 26472.,
      28122., 29772., 31326., 33416., 35506., 37596., 22234., 23704., 25174.,
      26644., 8904.,  9504.,  10104., 10704., 14314., 15304., 16294., 17284.,
      18178., 19432., 20686., 21940., 13350., 14232., 15114., 15996., 9628.,
      10264., 10900., 11536., 16555., 17622., 18689., 19756., 21247., 22622.,
      23997., 25372., 14205., 15178., 16151., 17124., 15500., 16536., 17572.,
      18608., 26039., 27766., 29493., 31220., 33243., 35454., 37665., 39876.,
      23473., 25034., 26595., 28156., 15500., 16536., 17572., 18608., 26039.,
      27766., 29493., 31220., 33243., 35454., 37665., 39876., 23473., 25034.,
      26595., 28156., 14904., 15904., 16904., 17904., 24822., 26472., 28122.,
      29772., 31326., 33416., 35506., 37596., 22234., 23704., 25174., 26644.,
      8904.,  9504.,  10104., 10704., 14314., 15304., 16294., 17284., 18178.,
      19432., 20686., 21940., 13350., 14232., 15114., 15996., 9628.,  10264.,
      10900., 11536., 16555., 17622., 18689., 19756., 21247., 22622., 23997.,
      25372., 14205., 15178., 16151., 17124., 15500., 16536., 17572., 18608.,
      26039., 27766., 29493., 31220., 33243., 35454., 37665., 39876., 23473.,
      25034., 26595., 28156., 15500., 16536., 17572., 18608., 26039., 27766.,
      29493., 31220., 33243., 35454., 37665., 39876., 23473., 25034., 26595.,
      28156., 14904., 15904., 16904., 17904., 24822., 26472., 28122., 29772.,
      31326., 33416., 35506., 37596., 22234., 23704., 25174., 26644., 8904.,
      9504.,  10104., 10704., 14314., 15304., 16294., 17284., 18178., 19432.,
      20686., 21940., 13350., 14232., 15114., 15996.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x16x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.,
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.,
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.,
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.,
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.,
      24238., 25844., 27450., 29056., 31442., 33532., 35622., 37712.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x16x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6744.,  8080.,  15317., 17612., 25053., 27964., 19321., 21380., 10904.,
      13040., 24325., 27892., 39309., 43844., 29049., 32220., 10904., 13040.,
      24325., 27892., 39309., 43844., 29049., 32220., 10096., 12080., 22628.,
      25900., 36484., 40636., 27132., 30036., 5808.,  6992.,  13252., 15204.,
      21476., 23956., 16268., 18012., 6744.,  8080.,  15317., 17612., 25053.,
      27964., 19321., 21380., 10904., 13040., 24325., 27892., 39309., 43844.,
      29049., 32220., 10904., 13040., 24325., 27892., 39309., 43844., 29049.,
      32220., 10096., 12080., 22628., 25900., 36484., 40636., 27132., 30036.,
      5808.,  6992.,  13252., 15204., 21476., 23956., 16268., 18012., 6744.,
      8080.,  15317., 17612., 25053., 27964., 19321., 21380., 10904., 13040.,
      24325., 27892., 39309., 43844., 29049., 32220., 10904., 13040., 24325.,
      27892., 39309., 43844., 29049., 32220., 10096., 12080., 22628., 25900.,
      36484., 40636., 27132., 30036., 5808.,  6992.,  13252., 15204., 21476.,
      23956., 16268., 18012.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x16x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20579., 23904., 35563., 39856., 20579., 23904., 35563., 39856.,
      20579., 23904., 35563., 39856., 20579., 23904., 35563., 39856.,
      20579., 23904., 35563., 39856., 20579., 23904., 35563., 39856.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x16x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6896.,  7344.,  8744.,  9248.,  15265., 16266., 18594., 19672., 24649.,
      26266., 29210., 30904., 17801., 19026., 21070., 22344., 10480., 11184.,
      13384., 14176., 23429., 25002., 28618., 30312., 37837., 40378., 44962.,
      47624., 28557., 30482., 33702., 35704., 10480., 11184., 13384., 14176.,
      23429., 25002., 28618., 30312., 37837., 40378., 44962., 47624., 28557.,
      30482., 33702., 35704., 9408.,  10048., 12048., 12768., 21170., 22600.,
      25876., 27416., 34178., 36488., 40644., 43064., 26178., 27928., 30860.,
      32680., 5568.,  5952.,  7152.,  7584.,  12526., 13384., 15340., 16264.,
      20254., 21640., 24124., 25576., 15678., 16728., 18484., 19576., 6896.,
      7344.,  8744.,  9248.,  15265., 16266., 18594., 19672., 24649., 26266.,
      29210., 30904., 17801., 19026., 21070., 22344., 10480., 11184., 13384.,
      14176., 23429., 25002., 28618., 30312., 37837., 40378., 44962., 47624.,
      28557., 30482., 33702., 35704., 10480., 11184., 13384., 14176., 23429.,
      25002., 28618., 30312., 37837., 40378., 44962., 47624., 28557., 30482.,
      33702., 35704., 9408.,  10048., 12048., 12768., 21170., 22600., 25876.,
      27416., 34178., 36488., 40644., 43064., 26178., 27928., 30860., 32680.,
      5568.,  5952.,  7152.,  7584.,  12526., 13384., 15340., 16264., 20254.,
      21640., 24124., 25576., 15678., 16728., 18484., 19576., 6896.,  7344.,
      8744.,  9248.,  15265., 16266., 18594., 19672., 24649., 26266., 29210.,
      30904., 17801., 19026., 21070., 22344., 10480., 11184., 13384., 14176.,
      23429., 25002., 28618., 30312., 37837., 40378., 44962., 47624., 28557.,
      30482., 33702., 35704., 10480., 11184., 13384., 14176., 23429., 25002.,
      28618., 30312., 37837., 40378., 44962., 47624., 28557., 30482., 33702.,
      35704., 9408.,  10048., 12048., 12768., 21170., 22600., 25876., 27416.,
      34178., 36488., 40644., 43064., 26178., 27928., 30860., 32680., 5568.,
      5952.,  7152.,  7584.,  12526., 13384., 15340., 16264., 20254., 21640.,
      24124., 25576., 15678., 16728., 18484., 19576.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x16x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.,
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.,
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.,
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.,
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.,
      19827., 21158., 24532., 25984., 34235., 36534., 40876., 43296.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x16x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5664.,  6112.,  6560.,  7008.,  8408.,  8912.,  9416.,  9920.,  12761.,
      13762., 14763., 15764., 18062., 19140., 20218., 21296., 20673., 22290.,
      23907., 25524., 28438., 30132., 31826., 33520., 15561., 16786., 18011.,
      19236., 21282., 22556., 23830., 25104., 8992.,  9696.,  10400., 11104.,
      13304., 14096., 14888., 15680., 20197., 21770., 23343., 24916., 28534.,
      30228., 31922., 33616., 32685., 35226., 37767., 40308., 44894., 47556.,
      50218., 52880., 24661., 26586., 28511., 30436., 33658., 35660., 37662.,
      39664., 8992.,  9696.,  10400., 11104., 13304., 14096., 14888., 15680.,
      20197., 21770., 23343., 24916., 28534., 30228., 31922., 33616., 32685.,
      35226., 37767., 40308., 44894., 47556., 50218., 52880., 24661., 26586.,
      28511., 30436., 33658., 35660., 37662., 39664., 8192.,  8832.,  9472.,
      10112., 12112., 12832., 13552., 14272., 18382., 19812., 21242., 22672.,
      25956., 27496., 29036., 30576., 29694., 32004., 34314., 36624., 40788.,
      43208., 45628., 48048., 22350., 24100., 25850., 27600., 30524., 32344.,
      34164., 35984., 4864.,  5248.,  5632.,  6016.,  7216.,  7648.,  8080.,
      8512.,  10946., 11804., 12662., 13520., 15484., 16408., 17332., 18256.,
      17682., 19068., 20454., 21840., 24332., 25784., 27236., 28688., 13250.,
      14300., 15350., 16400., 18148., 19240., 20332., 21424., 5664.,  6112.,
      6560.,  7008.,  8408.,  8912.,  9416.,  9920.,  12761., 13762., 14763.,
      15764., 18062., 19140., 20218., 21296., 20673., 22290., 23907., 25524.,
      28438., 30132., 31826., 33520., 15561., 16786., 18011., 19236., 21282.,
      22556., 23830., 25104., 8992.,  9696.,  10400., 11104., 13304., 14096.,
      14888., 15680., 20197., 21770., 23343., 24916., 28534., 30228., 31922.,
      33616., 32685., 35226., 37767., 40308., 44894., 47556., 50218., 52880.,
      24661., 26586., 28511., 30436., 33658., 35660., 37662., 39664., 8992.,
      9696.,  10400., 11104., 13304., 14096., 14888., 15680., 20197., 21770.,
      23343., 24916., 28534., 30228., 31922., 33616., 32685., 35226., 37767.,
      40308., 44894., 47556., 50218., 52880., 24661., 26586., 28511., 30436.,
      33658., 35660., 37662., 39664., 8192.,  8832.,  9472.,  10112., 12112.,
      12832., 13552., 14272., 18382., 19812., 21242., 22672., 25956., 27496.,
      29036., 30576., 29694., 32004., 34314., 36624., 40788., 43208., 45628.,
      48048., 22350., 24100., 25850., 27600., 30524., 32344., 34164., 35984.,
      4864.,  5248.,  5632.,  6016.,  7216.,  7648.,  8080.,  8512.,  10946.,
      11804., 12662., 13520., 15484., 16408., 17332., 18256., 17682., 19068.,
      20454., 21840., 24332., 25784., 27236., 28688., 13250., 14300., 15350.,
      16400., 18148., 19240., 20332., 21424., 5664.,  6112.,  6560.,  7008.,
      8408.,  8912.,  9416.,  9920.,  12761., 13762., 14763., 15764., 18062.,
      19140., 20218., 21296., 20673., 22290., 23907., 25524., 28438., 30132.,
      31826., 33520., 15561., 16786., 18011., 19236., 21282., 22556., 23830.,
      25104., 8992.,  9696.,  10400., 11104., 13304., 14096., 14888., 15680.,
      20197., 21770., 23343., 24916., 28534., 30228., 31922., 33616., 32685.,
      35226., 37767., 40308., 44894., 47556., 50218., 52880., 24661., 26586.,
      28511., 30436., 33658., 35660., 37662., 39664., 8992.,  9696.,  10400.,
      11104., 13304., 14096., 14888., 15680., 20197., 21770., 23343., 24916.,
      28534., 30228., 31922., 33616., 32685., 35226., 37767., 40308., 44894.,
      47556., 50218., 52880., 24661., 26586., 28511., 30436., 33658., 35660.,
      37662., 39664., 8192.,  8832.,  9472.,  10112., 12112., 12832., 13552.,
      14272., 18382., 19812., 21242., 22672., 25956., 27496., 29036., 30576.,
      29694., 32004., 34314., 36624., 40788., 43208., 45628., 48048., 22350.,
      24100., 25850., 27600., 30524., 32344., 34164., 35984., 4864.,  5248.,
      5632.,  6016.,  7216.,  7648.,  8080.,  8512.,  10946., 11804., 12662.,
      13520., 15484., 16408., 17332., 18256., 17682., 19068., 20454., 21840.,
      24332., 25784., 27236., 28688., 13250., 14300., 15350., 16400., 18148.,
      19240., 20332., 21424.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x16x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17075., 18406., 19737., 21068., 24444., 25896., 27348., 28800., 29563.,
      31862., 34161., 36460., 40804., 43224., 45644., 48064., 17075., 18406.,
      19737., 21068., 24444., 25896., 27348., 28800., 29563., 31862., 34161.,
      36460., 40804., 43224., 45644., 48064., 17075., 18406., 19737., 21068.,
      24444., 25896., 27348., 28800., 29563., 31862., 34161., 36460., 40804.,
      43224., 45644., 48064., 17075., 18406., 19737., 21068., 24444., 25896.,
      27348., 28800., 29563., 31862., 34161., 36460., 40804., 43224., 45644.,
      48064., 17075., 18406., 19737., 21068., 24444., 25896., 27348., 28800.,
      29563., 31862., 34161., 36460., 40804., 43224., 45644., 48064., 17075.,
      18406., 19737., 21068., 24444., 25896., 27348., 28800., 29563., 31862.,
      34161., 36460., 40804., 43224., 45644., 48064.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x16x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12952., 14688., 16536., 18496., 14893., 17172., 19605., 22192., 21245.,
      23860., 26629., 29552., 11809., 13412., 15113., 16912., 19640., 22368.,
      25272., 28352., 23937., 27476., 31257., 35280., 31633., 35700., 40009.,
      44560., 19461., 21988., 24669., 27504., 19640., 22368., 25272., 28352.,
      23937., 27476., 31257., 35280., 31633., 35700., 40009., 44560., 19461.,
      21988., 24669., 27504., 17616., 20096., 22736., 25536., 22026., 25232.,
      28658., 32304., 28330., 32016., 35922., 40048., 17970., 20272., 22714.,
      25296., 10416., 11904., 13488., 15168., 13078., 14992., 17038., 19216.,
      16502., 18704., 21038., 23504., 10830., 12208., 13670., 15216., 12952.,
      14688., 16536., 18496., 14893., 17172., 19605., 22192., 21245., 23860.,
      26629., 29552., 11809., 13412., 15113., 16912., 19640., 22368., 25272.,
      28352., 23937., 27476., 31257., 35280., 31633., 35700., 40009., 44560.,
      19461., 21988., 24669., 27504., 19640., 22368., 25272., 28352., 23937.,
      27476., 31257., 35280., 31633., 35700., 40009., 44560., 19461., 21988.,
      24669., 27504., 17616., 20096., 22736., 25536., 22026., 25232., 28658.,
      32304., 28330., 32016., 35922., 40048., 17970., 20272., 22714., 25296.,
      10416., 11904., 13488., 15168., 13078., 14992., 17038., 19216., 16502.,
      18704., 21038., 23504., 10830., 12208., 13670., 15216., 12952., 14688.,
      16536., 18496., 14893., 17172., 19605., 22192., 21245., 23860., 26629.,
      29552., 11809., 13412., 15113., 16912., 19640., 22368., 25272., 28352.,
      23937., 27476., 31257., 35280., 31633., 35700., 40009., 44560., 19461.,
      21988., 24669., 27504., 19640., 22368., 25272., 28352., 23937., 27476.,
      31257., 35280., 31633., 35700., 40009., 44560., 19461., 21988., 24669.,
      27504., 17616., 20096., 22736., 25536., 22026., 25232., 28658., 32304.,
      28330., 32016., 35922., 40048., 17970., 20272., 22714., 25296., 10416.,
      11904., 13488., 15168., 13078., 14992., 17038., 19216., 16502., 18704.,
      21038., 23504., 10830., 12208., 13670., 15216.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x16x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.,
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.,
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.,
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.,
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.,
      22461., 25868., 29517., 33408., 29645., 33580., 37757., 42176.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x16x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10600., 11440., 13120., 14016., 15864., 16816., 18832., 19840., 12885.,
      13914., 16086., 17192., 19595., 20778., 23412., 24672., 17061., 18426.,
      20934., 22376., 25115., 26634., 29604., 31200., 10497., 11330., 12886.,
      13768., 15471., 16402., 18252., 19232., 16840., 18160., 20800., 22208.,
      25112., 26608., 29776., 31360., 20529., 22146., 25566., 27304., 31087.,
      32946., 37092., 39072., 27201., 29346., 33294., 35560., 39871., 42258.,
      46932., 49440., 16685., 17994., 20446., 21832., 24515., 25978., 28892.,
      30432., 16840., 18160., 20800., 22208., 25112., 26608., 29776., 31360.,
      20529., 22146., 25566., 27304., 31087., 32946., 37092., 39072., 27201.,
      29346., 33294., 35560., 39871., 42258., 46932., 49440., 16685., 17994.,
      20446., 21832., 24515., 25978., 28892., 30432., 15344., 16544., 18944.,
      20224., 22864., 24224., 27104., 28544., 18710., 20180., 23284., 24864.,
      28298., 29988., 33752., 35552., 24694., 26644., 30228., 32288., 36202.,
      38372., 42616., 44896., 15198., 16388., 18612., 19872., 22306., 23636.,
      26280., 27680., 9104.,  9824.,  11264., 12032., 13616., 14432., 16160.,
      17024., 11066., 11948., 13804., 14752., 16806., 17820., 20072., 21152.,
      14554., 15724., 17868., 19104., 21446., 22748., 25288., 26656., 9010.,
      9724.,  11052., 11808., 13262., 14060., 15640., 16480., 10600., 11440.,
      13120., 14016., 15864., 16816., 18832., 19840., 12885., 13914., 16086.,
      17192., 19595., 20778., 23412., 24672., 17061., 18426., 20934., 22376.,
      25115., 26634., 29604., 31200., 10497., 11330., 12886., 13768., 15471.,
      16402., 18252., 19232., 16840., 18160., 20800., 22208., 25112., 26608.,
      29776., 31360., 20529., 22146., 25566., 27304., 31087., 32946., 37092.,
      39072., 27201., 29346., 33294., 35560., 39871., 42258., 46932., 49440.,
      16685., 17994., 20446., 21832., 24515., 25978., 28892., 30432., 16840.,
      18160., 20800., 22208., 25112., 26608., 29776., 31360., 20529., 22146.,
      25566., 27304., 31087., 32946., 37092., 39072., 27201., 29346., 33294.,
      35560., 39871., 42258., 46932., 49440., 16685., 17994., 20446., 21832.,
      24515., 25978., 28892., 30432., 15344., 16544., 18944., 20224., 22864.,
      24224., 27104., 28544., 18710., 20180., 23284., 24864., 28298., 29988.,
      33752., 35552., 24694., 26644., 30228., 32288., 36202., 38372., 42616.,
      44896., 15198., 16388., 18612., 19872., 22306., 23636., 26280., 27680.,
      9104.,  9824.,  11264., 12032., 13616., 14432., 16160., 17024., 11066.,
      11948., 13804., 14752., 16806., 17820., 20072., 21152., 14554., 15724.,
      17868., 19104., 21446., 22748., 25288., 26656., 9010.,  9724.,  11052.,
      11808., 13262., 14060., 15640., 16480., 10600., 11440., 13120., 14016.,
      15864., 16816., 18832., 19840., 12885., 13914., 16086., 17192., 19595.,
      20778., 23412., 24672., 17061., 18426., 20934., 22376., 25115., 26634.,
      29604., 31200., 10497., 11330., 12886., 13768., 15471., 16402., 18252.,
      19232., 16840., 18160., 20800., 22208., 25112., 26608., 29776., 31360.,
      20529., 22146., 25566., 27304., 31087., 32946., 37092., 39072., 27201.,
      29346., 33294., 35560., 39871., 42258., 46932., 49440., 16685., 17994.,
      20446., 21832., 24515., 25978., 28892., 30432., 16840., 18160., 20800.,
      22208., 25112., 26608., 29776., 31360., 20529., 22146., 25566., 27304.,
      31087., 32946., 37092., 39072., 27201., 29346., 33294., 35560., 39871.,
      42258., 46932., 49440., 16685., 17994., 20446., 21832., 24515., 25978.,
      28892., 30432., 15344., 16544., 18944., 20224., 22864., 24224., 27104.,
      28544., 18710., 20180., 23284., 24864., 28298., 29988., 33752., 35552.,
      24694., 26644., 30228., 32288., 36202., 38372., 42616., 44896., 15198.,
      16388., 18612., 19872., 22306., 23636., 26280., 27680., 9104.,  9824.,
      11264., 12032., 13616., 14432., 16160., 17024., 11066., 11948., 13804.,
      14752., 16806., 17820., 20072., 21152., 14554., 15724., 17868., 19104.,
      21446., 22748., 25288., 26656., 9010.,  9724.,  11052., 11808., 13262.,
      14060., 15640., 16480.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x16x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19245., 20730., 24018., 25624., 29275., 31002., 35016., 36864., 25917.,
      27930., 31746., 33880., 38059., 40314., 44856., 47232., 19245., 20730.,
      24018., 25624., 29275., 31002., 35016., 36864., 25917., 27930., 31746.,
      33880., 38059., 40314., 44856., 47232., 19245., 20730., 24018., 25624.,
      29275., 31002., 35016., 36864., 25917., 27930., 31746., 33880., 38059.,
      40314., 44856., 47232., 19245., 20730., 24018., 25624., 29275., 31002.,
      35016., 36864., 25917., 27930., 31746., 33880., 38059., 40314., 44856.,
      47232., 19245., 20730., 24018., 25624., 29275., 31002., 35016., 36864.,
      25917., 27930., 31746., 33880., 38059., 40314., 44856., 47232., 19245.,
      20730., 24018., 25624., 29275., 31002., 35016., 36864., 25917., 27930.,
      31746., 33880., 38059., 40314., 44856., 47232.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x16x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7432.,  8272.,  9112.,  9952.,  11520., 12416., 13312., 14208., 16056.,
      17008., 17960., 18912., 21040., 22048., 23056., 24064., 9061.,  10090.,
      11119., 12148., 14170., 15276., 16382., 17488., 19895., 21078., 22261.,
      23444., 26236., 27496., 28756., 30016., 11957., 13322., 14687., 16052.,
      18410., 19852., 21294., 22736., 25479., 26998., 28517., 30036., 33164.,
      34760., 36356., 37952., 7361.,  8194.,  9027.,  9860.,  11322., 12204.,
      13086., 13968., 15675., 16606., 17537., 18468., 20420., 21400., 22380.,
      23360., 11752., 13072., 14392., 15712., 18176., 19584., 20992., 22400.,
      25304., 26800., 28296., 29792., 33136., 34720., 36304., 37888., 14353.,
      15970., 17587., 19204., 22386., 24124., 25862., 27600., 31387., 33246.,
      35105., 36964., 41356., 43336., 45316., 47296., 18977., 21122., 23267.,
      25412., 29122., 31388., 33654., 35920., 40235., 42622., 45009., 47396.,
      52316., 54824., 57332., 59840., 11645., 12954., 14263., 15572., 17874.,
      19260., 20646., 22032., 24719., 26182., 27645., 29108., 32180., 33720.,
      35260., 36800., 11752., 13072., 14392., 15712., 18176., 19584., 20992.,
      22400., 25304., 26800., 28296., 29792., 33136., 34720., 36304., 37888.,
      14353., 15970., 17587., 19204., 22386., 24124., 25862., 27600., 31387.,
      33246., 35105., 36964., 41356., 43336., 45316., 47296., 18977., 21122.,
      23267., 25412., 29122., 31388., 33654., 35920., 40235., 42622., 45009.,
      47396., 52316., 54824., 57332., 59840., 11645., 12954., 14263., 15572.,
      17874., 19260., 20646., 22032., 24719., 26182., 27645., 29108., 32180.,
      33720., 35260., 36800., 10800., 12000., 13200., 14400., 16640., 17920.,
      19200., 20480., 23120., 24480., 25840., 27200., 30240., 31680., 33120.,
      34560., 13230., 14700., 16170., 17640., 20540., 22120., 23700., 25280.,
      28730., 30420., 32110., 33800., 37800., 39600., 41400., 43200., 17550.,
      19500., 21450., 23400., 26780., 28840., 30900., 32960., 36890., 39060.,
      41230., 43400., 47880., 50160., 52440., 54720., 10710., 11900., 13090.,
      14280., 16380., 17640., 18900., 20160., 22610., 23940., 25270., 26600.,
      29400., 30800., 32200., 33600., 6480.,  7200.,  7920.,  8640.,  9984.,
      10752., 11520., 12288., 13872., 14688., 15504., 16320., 18144., 19008.,
      19872., 20736., 7938.,  8820.,  9702.,  10584., 12324., 13272., 14220.,
      15168., 17238., 18252., 19266., 20280., 22680., 23760., 24840., 25920.,
      10530., 11700., 12870., 14040., 16068., 17304., 18540., 19776., 22134.,
      23436., 24738., 26040., 28728., 30096., 31464., 32832., 6426.,  7140.,
      7854.,  8568.,  9828.,  10584., 11340., 12096., 13566., 14364., 15162.,
      15960., 17640., 18480., 19320., 20160., 7432.,  8272.,  9112.,  9952.,
      11520., 12416., 13312., 14208., 16056., 17008., 17960., 18912., 21040.,
      22048., 23056., 24064., 9061.,  10090., 11119., 12148., 14170., 15276.,
      16382., 17488., 19895., 21078., 22261., 23444., 26236., 27496., 28756.,
      30016., 11957., 13322., 14687., 16052., 18410., 19852., 21294., 22736.,
      25479., 26998., 28517., 30036., 33164., 34760., 36356., 37952., 7361.,
      8194.,  9027.,  9860.,  11322., 12204., 13086., 13968., 15675., 16606.,
      17537., 18468., 20420., 21400., 22380., 23360., 11752., 13072., 14392.,
      15712., 18176., 19584., 20992., 22400., 25304., 26800., 28296., 29792.,
      33136., 34720., 36304., 37888., 14353., 15970., 17587., 19204., 22386.,
      24124., 25862., 27600., 31387., 33246., 35105., 36964., 41356., 43336.,
      45316., 47296., 18977., 21122., 23267., 25412., 29122., 31388., 33654.,
      35920., 40235., 42622., 45009., 47396., 52316., 54824., 57332., 59840.,
      11645., 12954., 14263., 15572., 17874., 19260., 20646., 22032., 24719.,
      26182., 27645., 29108., 32180., 33720., 35260., 36800., 11752., 13072.,
      14392., 15712., 18176., 19584., 20992., 22400., 25304., 26800., 28296.,
      29792., 33136., 34720., 36304., 37888., 14353., 15970., 17587., 19204.,
      22386., 24124., 25862., 27600., 31387., 33246., 35105., 36964., 41356.,
      43336., 45316., 47296., 18977., 21122., 23267., 25412., 29122., 31388.,
      33654., 35920., 40235., 42622., 45009., 47396., 52316., 54824., 57332.,
      59840., 11645., 12954., 14263., 15572., 17874., 19260., 20646., 22032.,
      24719., 26182., 27645., 29108., 32180., 33720., 35260., 36800., 10800.,
      12000., 13200., 14400., 16640., 17920., 19200., 20480., 23120., 24480.,
      25840., 27200., 30240., 31680., 33120., 34560., 13230., 14700., 16170.,
      17640., 20540., 22120., 23700., 25280., 28730., 30420., 32110., 33800.,
      37800., 39600., 41400., 43200., 17550., 19500., 21450., 23400., 26780.,
      28840., 30900., 32960., 36890., 39060., 41230., 43400., 47880., 50160.,
      52440., 54720., 10710., 11900., 13090., 14280., 16380., 17640., 18900.,
      20160., 22610., 23940., 25270., 26600., 29400., 30800., 32200., 33600.,
      6480.,  7200.,  7920.,  8640.,  9984.,  10752., 11520., 12288., 13872.,
      14688., 15504., 16320., 18144., 19008., 19872., 20736., 7938.,  8820.,
      9702.,  10584., 12324., 13272., 14220., 15168., 17238., 18252., 19266.,
      20280., 22680., 23760., 24840., 25920., 10530., 11700., 12870., 14040.,
      16068., 17304., 18540., 19776., 22134., 23436., 24738., 26040., 28728.,
      30096., 31464., 32832., 6426.,  7140.,  7854.,  8568.,  9828.,  10584.,
      11340., 12096., 13566., 14364., 15162., 15960., 17640., 18480., 19320.,
      20160., 7432.,  8272.,  9112.,  9952.,  11520., 12416., 13312., 14208.,
      16056., 17008., 17960., 18912., 21040., 22048., 23056., 24064., 9061.,
      10090., 11119., 12148., 14170., 15276., 16382., 17488., 19895., 21078.,
      22261., 23444., 26236., 27496., 28756., 30016., 11957., 13322., 14687.,
      16052., 18410., 19852., 21294., 22736., 25479., 26998., 28517., 30036.,
      33164., 34760., 36356., 37952., 7361.,  8194.,  9027.,  9860.,  11322.,
      12204., 13086., 13968., 15675., 16606., 17537., 18468., 20420., 21400.,
      22380., 23360., 11752., 13072., 14392., 15712., 18176., 19584., 20992.,
      22400., 25304., 26800., 28296., 29792., 33136., 34720., 36304., 37888.,
      14353., 15970., 17587., 19204., 22386., 24124., 25862., 27600., 31387.,
      33246., 35105., 36964., 41356., 43336., 45316., 47296., 18977., 21122.,
      23267., 25412., 29122., 31388., 33654., 35920., 40235., 42622., 45009.,
      47396., 52316., 54824., 57332., 59840., 11645., 12954., 14263., 15572.,
      17874., 19260., 20646., 22032., 24719., 26182., 27645., 29108., 32180.,
      33720., 35260., 36800., 11752., 13072., 14392., 15712., 18176., 19584.,
      20992., 22400., 25304., 26800., 28296., 29792., 33136., 34720., 36304.,
      37888., 14353., 15970., 17587., 19204., 22386., 24124., 25862., 27600.,
      31387., 33246., 35105., 36964., 41356., 43336., 45316., 47296., 18977.,
      21122., 23267., 25412., 29122., 31388., 33654., 35920., 40235., 42622.,
      45009., 47396., 52316., 54824., 57332., 59840., 11645., 12954., 14263.,
      15572., 17874., 19260., 20646., 22032., 24719., 26182., 27645., 29108.,
      32180., 33720., 35260., 36800., 10800., 12000., 13200., 14400., 16640.,
      17920., 19200., 20480., 23120., 24480., 25840., 27200., 30240., 31680.,
      33120., 34560., 13230., 14700., 16170., 17640., 20540., 22120., 23700.,
      25280., 28730., 30420., 32110., 33800., 37800., 39600., 41400., 43200.,
      17550., 19500., 21450., 23400., 26780., 28840., 30900., 32960., 36890.,
      39060., 41230., 43400., 47880., 50160., 52440., 54720., 10710., 11900.,
      13090., 14280., 16380., 17640., 18900., 20160., 22610., 23940., 25270.,
      26600., 29400., 30800., 32200., 33600., 6480.,  7200.,  7920.,  8640.,
      9984.,  10752., 11520., 12288., 13872., 14688., 15504., 16320., 18144.,
      19008., 19872., 20736., 7938.,  8820.,  9702.,  10584., 12324., 13272.,
      14220., 15168., 17238., 18252., 19266., 20280., 22680., 23760., 24840.,
      25920., 10530., 11700., 12870., 14040., 16068., 17304., 18540., 19776.,
      22134., 23436., 24738., 26040., 28728., 30096., 31464., 32832., 6426.,
      7140.,  7854.,  8568.,  9828.,  10584., 11340., 12096., 13566., 14364.,
      15162., 15960., 17640., 18480., 19320., 20160.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x16x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13453., 14938., 16423., 17908., 20958., 22564., 24170., 25776., 29431.,
      31158., 32885., 34612., 38872., 40720., 42568., 44416., 18077., 20090.,
      22103., 24116., 27694., 29828., 31962., 34096., 38279., 40534., 42789.,
      45044., 49832., 52208., 54584., 56960., 13453., 14938., 16423., 17908.,
      20958., 22564., 24170., 25776., 29431., 31158., 32885., 34612., 38872.,
      40720., 42568., 44416., 18077., 20090., 22103., 24116., 27694., 29828.,
      31962., 34096., 38279., 40534., 42789., 45044., 49832., 52208., 54584.,
      56960., 13453., 14938., 16423., 17908., 20958., 22564., 24170., 25776.,
      29431., 31158., 32885., 34612., 38872., 40720., 42568., 44416., 18077.,
      20090., 22103., 24116., 27694., 29828., 31962., 34096., 38279., 40534.,
      42789., 45044., 49832., 52208., 54584., 56960., 13453., 14938., 16423.,
      17908., 20958., 22564., 24170., 25776., 29431., 31158., 32885., 34612.,
      38872., 40720., 42568., 44416., 18077., 20090., 22103., 24116., 27694.,
      29828., 31962., 34096., 38279., 40534., 42789., 45044., 49832., 52208.,
      54584., 56960., 13453., 14938., 16423., 17908., 20958., 22564., 24170.,
      25776., 29431., 31158., 32885., 34612., 38872., 40720., 42568., 44416.,
      18077., 20090., 22103., 24116., 27694., 29828., 31962., 34096., 38279.,
      40534., 42789., 45044., 49832., 52208., 54584., 56960., 13453., 14938.,
      16423., 17908., 20958., 22564., 24170., 25776., 29431., 31158., 32885.,
      34612., 38872., 40720., 42568., 44416., 18077., 20090., 22103., 24116.,
      27694., 29828., 31962., 34096., 38279., 40534., 42789., 45044., 49832.,
      52208., 54584., 56960.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x18x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14014., 21854., 23290., 20966., 11694., 21594., 32662., 31626., 29292.,
      14880., 21362., 31678., 30002., 27812., 16360., 18654., 27936., 29252.,
      25845., 14079., 12050., 16760., 16964., 16255., 8285.,  15250., 23290.,
      22966., 19810., 11650., 22214., 31626., 31678., 27432., 14132., 20830.,
      30002., 30246., 29888., 16668., 20034., 29252., 27304., 24421., 14735.,
      10334., 16964., 17488., 15471., 8173.,  15366., 22966., 21426., 20318.,
      10422., 21362., 31678., 30002., 27812., 16360., 19914., 30246., 32442.,
      29340., 16144., 19750., 27304., 26316., 24821., 13791., 12330., 17488.,
      16284., 14655., 8189.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x18x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {32662., 31626., 31678., 30002.,
                                         31626., 31678., 30002., 30246.,
                                         31678., 30002., 30246., 32442.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x18x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12226., 13020., 18832., 20092., 20532., 21812., 18807., 19948., 10421.,
      11100., 18638., 19860., 31340., 33324., 30128., 32148., 30431., 32216.,
      15405., 16416., 18614., 19908., 33236., 35196., 29816., 31716., 27231.,
      29000., 17261., 18352., 17694., 18844., 28766., 30624., 31342., 33256.,
      24768., 26474., 14400., 15390., 12330., 13060., 15866., 16976., 16298.,
      17384., 15496., 16478., 9400.,  10010., 11846., 12676., 20532., 21812.,
      20792., 22060., 17751., 18916., 11701., 12420., 19538., 20844., 30128.,
      32148., 33236., 35196., 27167., 28880., 14413., 15432., 20474., 21660.,
      29816., 31716., 30108., 32076., 30623., 32512., 16269., 17432., 18990.,
      20196., 31342., 33256., 26494., 28336., 24464., 26058., 15792., 16702.,
      9978.,  10652., 16298., 17384., 16346., 17408., 14200., 15166., 9352.,
      9914.,  12362., 13164., 20792., 22060., 19612., 20900., 20023., 21212.,
      10677., 11372., 18614., 19908., 33236., 35196., 29816., 31716., 27231.,
      29000., 17261., 18352., 18366., 19572., 30108., 32076., 33248., 35316.,
      26847., 28728., 15789., 16896., 20062., 21292., 26494., 28336., 26670.,
      28408., 25696., 27242., 14880., 15838., 10890., 11572., 16346., 17408.,
      14986., 16024., 14952., 15838., 8536.,  9050.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x18x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31340., 33324., 30128., 32148., 33236., 35196., 29816., 31716.,
      30128., 32148., 33236., 35196., 29816., 31716., 30108., 32076.,
      33236., 35196., 29816., 31716., 30108., 32076., 33248., 35316.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x18x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12074., 12868., 13662., 14456., 19380., 20640., 21900., 23160., 19048.,
      20328., 21608., 22888., 17241., 18382., 19523., 20664., 10051., 10730.,
      11409., 12088., 18070., 19292., 20514., 21736., 29304., 31288., 33272.,
      35256., 29788., 31808., 33828., 35848., 27141., 28926., 30711., 32496.,
      14599., 15610., 16621., 17632., 19230., 20524., 21818., 23112., 29792.,
      31752., 33712., 35672., 28004., 29904., 31804., 33704., 26901., 28670.,
      30439., 32208., 16695., 17786., 18877., 19968., 17118., 18268., 19418.,
      20568., 27674., 29532., 31390., 33248., 28930., 30844., 32758., 34672.,
      25974., 27680., 29386., 31092., 13730., 14720., 15710., 16700., 10842.,
      11572., 12302., 13032., 16318., 17428., 18538., 19648., 15158., 16244.,
      17330., 18416., 14042., 15024., 16006., 16988., 9390.,  10000., 10610.,
      11220., 12686., 13516., 14346., 15176., 19048., 20328., 21608., 22888.,
      18940., 20208., 21476., 22744., 16897., 18062., 19227., 20392., 10907.,
      11626., 12345., 13064., 19402., 20708., 22014., 23320., 29788., 31808.,
      33828., 35848., 29792., 31752., 33712., 35672., 25293., 27006., 28719.,
      30432., 14911., 15930., 16949., 17968., 18578., 19764., 20950., 22136.,
      28004., 29904., 31804., 33704., 29416., 31384., 33352., 35320., 28957.,
      30846., 32735., 34624., 16943., 18106., 19269., 20432., 17350., 18556.,
      19762., 20968., 28930., 30844., 32758., 34672., 27754., 29596., 31438.,
      33280., 22150., 23744., 25338., 26932., 14034., 14944., 15854., 16764.,
      10930., 11604., 12278., 12952., 15158., 16244., 17330., 18416., 15278.,
      16340., 17402., 18464., 14794., 15760., 16726., 17692., 8062.,  8624.,
      9186.,  9748.,  12082., 12884., 13686., 14488., 18940., 20208., 21476.,
      22744., 18992., 20280., 21568., 22856., 18089., 19278., 20467., 21656.,
      10291., 10986., 11681., 12376., 19230., 20524., 21818., 23112., 29792.,
      31752., 33712., 35672., 28004., 29904., 31804., 33704., 26901., 28670.,
      30439., 32208., 16695., 17786., 18877., 19968., 18054., 19260., 20466.,
      21672., 29416., 31384., 33352., 35320., 31372., 33440., 35508., 37576.,
      29093., 30974., 32855., 34736., 15271., 16378., 17485., 18592., 18190.,
      19420., 20650., 21880., 27754., 29596., 31438., 33280., 24370., 26108.,
      27846., 29584., 22358., 23904., 25450., 26996., 14722., 15680., 16638.,
      17596., 10314., 10996., 11678., 12360., 15278., 16340., 17402., 18464.,
      15654., 16692., 17730., 18768., 13562., 14448., 15334., 16220., 7246.,
      7760.,  8274.,  8788.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x18x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29304., 31288., 33272., 35256., 29788., 31808., 33828., 35848.,
      29792., 31752., 33712., 35672., 28004., 29904., 31804., 33704.,
      29788., 31808., 33828., 35848., 29792., 31752., 33712., 35672.,
      28004., 29904., 31804., 33704., 29416., 31384., 33352., 35320.,
      29792., 31752., 33712., 35672., 28004., 29904., 31804., 33704.,
      29416., 31384., 33352., 35320., 31372., 33440., 35508., 37576.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x18x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11979., 13560., 20287., 22840., 19015., 21544., 16534., 18776., 10442.,
      11768., 16995., 19368., 29607., 33496., 31535., 35560., 28174., 31792.,
      14194., 16256., 19955., 22536., 30359., 34296., 27679., 31496., 26894.,
      30416., 17138., 19296., 15728., 17912., 27064., 30592., 29304., 32976.,
      26060., 29396., 13924., 15868., 9752.,  11080., 14416., 16480., 15888.,
      18000., 16596., 18620., 11196., 12468., 13203., 14792., 19015., 21544.,
      18479., 20952., 18390., 20680., 10826., 12232., 19499., 22040., 31535.,
      35560., 30359., 34296., 25102., 28576., 14898., 16912., 18331., 20728.,
      27679., 31496., 29607., 33496., 29326., 33024., 17458., 19696., 17616.,
      19912., 29304., 32976., 28024., 31648., 24044., 27284., 14020., 15868.,
      8408.,  9656.,  15888., 18000., 17456., 19648., 16692., 18748., 8412.,
      9588.,  10843., 12376., 18479., 20952., 19767., 22280., 18710., 21048.,
      10698., 12120., 19955., 22536., 30359., 34296., 27679., 31496., 26894.,
      30416., 17138., 19296., 16995., 19368., 29607., 33496., 31535., 35560.,
      28174., 31792., 14194., 16256., 18896., 21272., 28024., 31648., 26264.,
      29808., 24844., 28052., 15652., 17596., 10840., 12200., 17456., 19648.,
      17744., 19952., 13460., 15356., 7164.,  8244.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x18x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29607., 33496., 31535., 35560., 30359., 34296., 27679., 31496.,
      31535., 35560., 30359., 34296., 27679., 31496., 29607., 33496.,
      30359., 34296., 27679., 31496., 29607., 33496., 31535., 35560.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x18x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11923., 12726., 14364., 15216., 19763., 21022., 23608., 24944., 18011.,
      19246., 21808., 23120., 16136., 17196., 19462., 20592., 9936.,  10548.,
      11874., 12528., 16455., 17574., 20004., 21200., 28103., 29998., 33936.,
      35952., 30543., 32574., 36648., 38800., 28184., 29980., 33646., 35552.,
      13312., 14308., 16410., 17472., 19607., 20934., 23572., 24976., 30071.,
      32014., 36000., 38064., 25599., 27422., 31288., 33232., 25720., 27420.,
      30990., 32800., 17056., 18148., 20346., 21504., 14698., 15712., 17908.,
      18992., 24794., 26480., 30012., 31808., 27594., 29424., 33100., 35040.,
      25768., 27416., 30740., 32488., 12936., 13896., 15868., 16888., 9670.,
      10320., 11676., 12368., 14614., 15584., 17652., 18688., 14438., 15456.,
      17572., 18656., 14520., 15528., 17548., 18616., 10840., 11512., 12772.,
      13480., 13083., 13894., 15540., 16400., 18011., 19246., 21808., 23120.,
      17763., 18942., 21448., 22704., 17240., 18348., 20662., 21840., 10368.,
      11060., 12466., 13200., 18479., 19766., 22364., 23728., 30543., 32574.,
      36648., 38800., 30071., 32014., 36000., 38064., 23208., 24860., 28382.,
      30144., 14256., 15204., 17258., 18272., 18847., 19990., 22444., 23664.,
      25599., 27422., 31288., 33232., 28103., 29998., 33936., 35952., 28360.,
      30236., 33982., 35968., 17104., 18276., 20554., 21792., 15802., 16928.,
      19236., 20432., 27594., 29424., 33100., 35040., 27642., 29424., 33052.,
      34944., 21320., 22872., 26100., 27752., 13224., 14088., 15964., 16888.,
      9366.,  9936.,  11212., 11824., 14438., 15456., 17572., 18656., 15446.,
      16544., 18740., 19904., 16216., 17256., 19308., 20408., 7928.,  8504.,
      9668.,  10280., 11235., 11990., 13580., 14384., 17763., 18942., 21448.,
      22704., 19019., 20238., 22784., 24080., 18344., 19500., 21862., 23088.,
      9840.,  10548., 11970., 12720., 19607., 20934., 23572., 24976., 30071.,
      32014., 36000., 38064., 25599., 27422., 31288., 33232., 25720., 27420.,
      30990., 32800., 17056., 18148., 20346., 21504., 16455., 17574., 20004.,
      21200., 28103., 29998., 33936., 35952., 30543., 32574., 36648., 38800.,
      28184., 29980., 33646., 35552., 13312., 14308., 16410., 17472., 17770.,
      18976., 21364., 22640., 27642., 29424., 33052., 34944., 23690., 25392.,
      28940., 30752., 22440., 23960., 27156., 28776., 15368., 16328., 18300.,
      19320., 10278., 10960., 12348., 13072., 15446., 16544., 18740., 19904.,
      17030., 18144., 20356., 21536., 13496., 14376., 16268., 17208., 6040.,
      6520.,  7588.,  8104.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x18x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28103., 29998., 33936., 35952., 30543., 32574., 36648., 38800.,
      30071., 32014., 36000., 38064., 25599., 27422., 31288., 33232.,
      30543., 32574., 36648., 38800., 30071., 32014., 36000., 38064.,
      25599., 27422., 31288., 33232., 28103., 29998., 33936., 35952.,
      30071., 32014., 36000., 38064., 25599., 27422., 31288., 33232.,
      28103., 29998., 33936., 35952., 30543., 32574., 36648., 38800.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x18x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10275., 11078., 11881., 12684., 14308., 15160., 16012., 16864., 16123.,
      17382., 18641., 19900., 22456., 23792., 25128., 26464., 15715., 16950.,
      18185., 19420., 21952., 23264., 24576., 25888., 14060., 15120., 16180.,
      17240., 19490., 20620., 21750., 22880., 8220.,  8832.,  9444.,  10056.,
      11382., 12036., 12690., 13344., 14351., 15470., 16589., 17708., 20124.,
      21320., 22516., 23712., 24359., 26254., 28149., 30044., 33984., 36000.,
      38016., 40032., 26031., 28062., 30093., 32124., 36200., 38352., 40504.,
      42656., 23756., 25552., 27348., 29144., 32810., 34716., 36622., 38528.,
      13340., 14336., 15332., 16328., 18446., 19508., 20570., 21632., 16863.,
      18190., 19517., 20844., 23468., 24872., 26276., 27680., 25175., 27118.,
      29061., 31004., 34992., 37056., 39120., 41184., 23519., 25342., 27165.,
      28988., 32856., 34800., 36744., 38688., 22508., 24208., 25908., 27608.,
      31178., 32988., 34798., 36608., 14588., 15680., 16772., 17864., 20078.,
      21236., 22394., 23552., 12990., 14004., 15018., 16032., 18220., 19304.,
      20388., 21472., 21662., 23348., 25034., 26720., 30260., 32056., 33852.,
      35648., 23534., 25364., 27194., 29024., 32708., 34648., 36588., 38528.,
      21760., 23408., 25056., 26704., 30036., 31784., 33532., 35280., 12752.,
      13712., 14672., 15632., 17596., 18616., 19636., 20656., 8098.,  8748.,
      9398.,  10048., 11396., 12088., 12780., 13472., 12578., 13548., 14518.,
      15488., 17564., 18600., 19636., 20672., 13202., 14220., 15238., 16256.,
      18380., 19464., 20548., 21632., 13312., 14320., 15328., 16336., 18348.,
      19416., 20484., 21552., 8880.,  9552.,  10224., 10896., 12164., 12872.,
      13580., 14288., 10283., 11094., 11905., 12716., 14348., 15208., 16068.,
      16928., 15715., 16950., 18185., 19420., 21952., 23264., 24576., 25888.,
      15275., 16454., 17633., 18812., 21288., 22544., 23800., 25056., 14172.,
      15280., 16388., 17496., 19794., 20972., 22150., 23328., 8748.,  9440.,
      10132., 10824., 12230., 12964., 13698., 14432., 16439., 17726., 19013.,
      20300., 22884., 24248., 25612., 26976., 26031., 28062., 30093., 32124.,
      36200., 38352., 40504., 42656., 25175., 27118., 29061., 31004., 34992.,
      37056., 39120., 41184., 21372., 23024., 24676., 26328., 29850., 31612.,
      33374., 35136., 12204., 13152., 14100., 15048., 17118., 18132., 19146.,
      20160., 14759., 15902., 17045., 18188., 20628., 21848., 23068., 24288.,
      23519., 25342., 27165., 28988., 32856., 34800., 36744., 38688., 24359.,
      26254., 28149., 30044., 33984., 36000., 38016., 40032., 23772., 25648.,
      27524., 29400., 33146., 35132., 37118., 39104., 14604., 15776., 16948.,
      18120., 20414., 21652., 22890., 24128., 14318., 15444., 16570., 17696.,
      19996., 21192., 22388., 23584., 23534., 25364., 27194., 29024., 32708.,
      34648., 36588., 38528., 23166., 24948., 26730., 28512., 32148., 34040.,
      35932., 37824., 19872., 21424., 22976., 24528., 27764., 29416., 31068.,
      32720., 10864., 11728., 12592., 13456., 15324., 16248., 17172., 18096.,
      7314.,  7884.,  8454.,  9024.,  10292., 10904., 11516., 12128., 13202.,
      14220., 15238., 16256., 18380., 19464., 20548., 21632., 14114., 15212.,
      16310., 17408., 19612., 20776., 21940., 23104., 13088., 14128., 15168.,
      16208., 18252., 19352., 20452., 21552., 6992.,  7568.,  8144.,  8720.,
      9892.,  10504., 11116., 11728., 9459.,  10214., 10969., 11724., 13300.,
      14104., 14908., 15712., 15275., 16454., 17633., 18812., 21288., 22544.,
      23800., 25056., 15699., 16918., 18137., 19356., 21872., 23168., 24464.,
      25760., 15308., 16464., 17620., 18776., 21122., 22348., 23574., 24800.,
      9468.,  10176., 10884., 11592., 13014., 13764., 14514., 15264., 16863.,
      18190., 19517., 20844., 23468., 24872., 26276., 27680., 25175., 27118.,
      29061., 31004., 34992., 37056., 39120., 41184., 23519., 25342., 27165.,
      28988., 32856., 34800., 36744., 38688., 22508., 24208., 25908., 27608.,
      31178., 32988., 34798., 36608., 14588., 15680., 16772., 17864., 20078.,
      21236., 22394., 23552., 14351., 15470., 16589., 17708., 20124., 21320.,
      22516., 23712., 24359., 26254., 28149., 30044., 33984., 36000., 38016.,
      40032., 26031., 28062., 30093., 32124., 36200., 38352., 40504., 42656.,
      23756., 25552., 27348., 29144., 32810., 34716., 36622., 38528., 13340.,
      14336., 15332., 16328., 18446., 19508., 20570., 21632., 15358., 16564.,
      17770., 18976., 21356., 22632., 23908., 25184., 23166., 24948., 26730.,
      28512., 32148., 34040., 35932., 37824., 21998., 23700., 25402., 27104.,
      30660., 32472., 34284., 36096., 19840., 21360., 22880., 24400., 27604.,
      29224., 30844., 32464., 12496., 13456., 14416., 15376., 17340., 18360.,
      19380., 20400., 8770.,  9452.,  10134., 10816., 12196., 12920., 13644.,
      14368., 14114., 15212., 16310., 17408., 19612., 20776., 21940., 23104.,
      14194., 15308., 16422., 17536., 19756., 20936., 22116., 23296., 11392.,
      12272., 13152., 14032., 15916., 16856., 17796., 18736., 6128.,  6608.,
      7088.,  7568.,  8644.,  9160.,  9676.,  10192.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x18x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24359., 26254., 28149., 30044., 33984., 36000., 38016., 40032., 26031.,
      28062., 30093., 32124., 36200., 38352., 40504., 42656., 25175., 27118.,
      29061., 31004., 34992., 37056., 39120., 41184., 23519., 25342., 27165.,
      28988., 32856., 34800., 36744., 38688., 26031., 28062., 30093., 32124.,
      36200., 38352., 40504., 42656., 25175., 27118., 29061., 31004., 34992.,
      37056., 39120., 41184., 23519., 25342., 27165., 28988., 32856., 34800.,
      36744., 38688., 24359., 26254., 28149., 30044., 33984., 36000., 38016.,
      40032., 25175., 27118., 29061., 31004., 34992., 37056., 39120., 41184.,
      23519., 25342., 27165., 28988., 32856., 34800., 36744., 38688., 24359.,
      26254., 28149., 30044., 33984., 36000., 38016., 40032., 26031., 28062.,
      30093., 32124., 36200., 38352., 40504., 42656.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x18x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10629., 12140., 13749., 15456., 17585., 19964., 22497., 25184., 17089.,
      19484., 22033., 24736., 16358., 18520., 20822., 23264., 9066.,  10344.,
      11706., 13152., 16393., 18764., 21289., 23968., 27557., 31260., 35205.,
      39392., 25525., 29244., 33205., 37408., 25854., 29240., 32846., 36672.,
      13810., 15816., 17954., 20224., 16393., 18764., 21289., 23968., 27557.,
      31260., 35205., 39392., 25525., 29244., 33205., 37408., 25854., 29240.,
      32846., 36672., 13810., 15816., 17954., 20224., 14754., 16896., 19178.,
      21600., 24794., 28128., 31682., 35456., 23642., 27040., 30658., 34496.,
      23116., 26160., 29404., 32848., 13140., 14992., 16964., 19056., 9374.,
      10656., 12022., 13472., 13638., 15616., 17726., 19968., 15046., 17088.,
      19262., 21568., 12852., 14672., 16612., 18672., 8108.,  9200.,  10364.,
      11600., 10869., 12364., 13957., 15648., 17089., 19484., 22033., 24736.,
      17585., 19964., 22497., 25184., 15558., 17752., 20086., 22560., 9546.,
      10856., 12250., 13728., 17657., 20012., 22521., 25184., 25525., 29244.,
      33205., 37408., 27557., 31260., 35205., 39392., 23518., 26936., 30574.,
      34432., 14802., 16840., 19010., 21312., 17657., 20012., 22521., 25184.,
      25525., 29244., 33205., 37408., 27557., 31260., 35205., 39392., 23518.,
      26936., 30574., 34432., 14802., 16840., 19010., 21312., 16098., 18240.,
      20522., 22944., 23642., 27040., 30658., 34496., 24794., 28128., 31682.,
      35456., 21644., 24752., 28060., 31568., 13524., 15376., 17348., 19440.,
      9182.,  10464., 11830., 13280., 15046., 17088., 19262., 21568., 13638.,
      15616., 17726., 19968., 13940., 15824., 17828., 19952., 7468.,  8560.,
      9724.,  10960., 10629., 12140., 13749., 15456., 17585., 19964., 22497.,
      25184., 17089., 19484., 22033., 24736., 16358., 18520., 20822., 23264.,
      9066.,  10344., 11706., 13152., 16393., 18764., 21289., 23968., 27557.,
      31260., 35205., 39392., 25525., 29244., 33205., 37408., 25854., 29240.,
      32846., 36672., 13810., 15816., 17954., 20224., 16393., 18764., 21289.,
      23968., 27557., 31260., 35205., 39392., 25525., 29244., 33205., 37408.,
      25854., 29240., 32846., 36672., 13810., 15816., 17954., 20224., 14754.,
      16896., 19178., 21600., 24794., 28128., 31682., 35456., 23642., 27040.,
      30658., 34496., 23116., 26160., 29404., 32848., 13140., 14992., 16964.,
      19056., 9374.,  10656., 12022., 13472., 13638., 15616., 17726., 19968.,
      15046., 17088., 19262., 21568., 12852., 14672., 16612., 18672., 8108.,
      9200.,  10364., 11600.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x18x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27557., 31260., 35205., 39392., 25525., 29244., 33205., 37408.,
      27557., 31260., 35205., 39392., 25525., 29244., 33205., 37408.,
      25525., 29244., 33205., 37408., 27557., 31260., 35205., 39392.,
      25525., 29244., 33205., 37408., 27557., 31260., 35205., 39392.,
      27557., 31260., 35205., 39392., 25525., 29244., 33205., 37408.,
      27557., 31260., 35205., 39392., 25525., 29244., 33205., 37408.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x18x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9109.,  9834.,  11282., 12056., 13651., 14474., 16216., 17088., 14585.,
      15714., 17986., 19192., 21695., 22978., 25712., 27072., 14601., 15746.,
      18034., 19256., 21775., 23074., 25824., 27200., 13898., 14924., 17000.,
      18096., 20382., 21548., 24044., 25280., 8406.,  9012.,  10248., 10896.,
      12258., 12948., 14436., 15168., 14401., 15538., 17818., 19032., 21543.,
      22834., 25576., 26944., 22997., 24778., 28362., 30264., 34211., 36234.,
      40544., 42688., 23013., 24810., 28410., 30328., 34291., 36330., 40656.,
      42816., 21954., 23580., 26856., 28592., 32198., 34044., 37980., 39936.,
      13342., 14308., 16264., 17296., 19450., 20548., 22900., 24064., 14401.,
      15538., 17818., 19032., 21543., 22834., 25576., 26944., 22997., 24778.,
      28362., 30264., 34211., 36234., 40544., 42688., 23013., 24810., 28410.,
      30328., 34291., 36330., 40656., 42816., 21954., 23580., 26856., 28592.,
      32198., 34044., 37980., 39936., 13342., 14308., 16264., 17296., 19450.,
      20548., 22900., 24064., 13150., 14180., 16244., 17344., 19618., 20788.,
      23272., 24512., 20790., 22388., 25620., 27328., 30890., 32708., 36600.,
      38528., 21494., 23156., 26452., 28224., 31850., 33732., 37688., 39680.,
      19772., 21240., 24192., 25760., 29012., 30680., 34232., 36000., 12260.,
      13160., 14944., 15904., 17868., 18888., 21032., 22112., 7858.,  8476.,
      9708.,  10368., 11726., 12428., 13912., 14656., 12378., 13324., 15244.,
      16256., 18374., 19452., 21768., 22912., 13082., 14092., 16076., 17152.,
      19334., 20476., 22856., 24064., 11716., 12584., 14336., 15264., 17196.,
      18184., 20296., 21344., 7324.,  7864.,  8928.,  9504.,  10676., 11288.,
      12568., 13216., 9093.,  9802.,  11234., 11992., 13571., 14378., 16104.,
      16960., 14601., 15746., 18034., 19256., 21775., 23074., 25824., 27200.,
      14585., 15714., 17986., 19192., 21695., 22978., 25712., 27072., 13290.,
      14348., 16456., 17584., 19902., 21100., 23628., 24896., 7798.,  8436.,
      9704.,  10384., 11778., 12500., 14020., 14784., 14385., 15506., 17770.,
      18968., 21463., 22738., 25464., 26816., 23013., 24810., 28410., 30328.,
      34291., 36330., 40656., 42816., 22997., 24778., 28362., 30264., 34211.,
      36234., 40544., 42688., 20834., 22492., 25800., 27568., 31206., 33084.,
      37052., 39040., 12222., 13220., 15208., 16272., 18458., 19588., 21972.,
      23168., 14385., 15506., 17770., 18968., 21463., 22738., 25464., 26816.,
      23013., 24810., 28410., 30328., 34291., 36330., 40656., 42816., 22997.,
      24778., 28362., 30264., 34211., 36234., 40544., 42688., 20834., 22492.,
      25800., 27568., 31206., 33084., 37052., 39040., 12222., 13220., 15208.,
      16272., 18458., 19588., 21972., 23168., 13278., 14308., 16372., 17472.,
      19746., 20916., 23400., 24640., 21494., 23156., 26452., 28224., 31850.,
      33732., 37688., 39680., 20790., 22388., 25620., 27328., 30890., 32708.,
      36600., 38528., 19324., 20856., 23872., 25504., 28820., 30552., 34168.,
      36000., 10980., 11880., 13664., 14624., 16588., 17608., 19752., 20832.,
      7986.,  8604.,  9836.,  10496., 11854., 12556., 14040., 14784., 13082.,
      14092., 16076., 17152., 19334., 20476., 22856., 24064., 12378., 13324.,
      15244., 16256., 18374., 19452., 21768., 22912., 11780., 12712., 14528.,
      15520., 17516., 18568., 20744., 21856., 6556.,  7096.,  8160.,  8736.,
      9908.,  10520., 11800., 12448., 9109.,  9834.,  11282., 12056., 13651.,
      14474., 16216., 17088., 14585., 15714., 17986., 19192., 21695., 22978.,
      25712., 27072., 14601., 15746., 18034., 19256., 21775., 23074., 25824.,
      27200., 13898., 14924., 17000., 18096., 20382., 21548., 24044., 25280.,
      8406.,  9012.,  10248., 10896., 12258., 12948., 14436., 15168., 14401.,
      15538., 17818., 19032., 21543., 22834., 25576., 26944., 22997., 24778.,
      28362., 30264., 34211., 36234., 40544., 42688., 23013., 24810., 28410.,
      30328., 34291., 36330., 40656., 42816., 21954., 23580., 26856., 28592.,
      32198., 34044., 37980., 39936., 13342., 14308., 16264., 17296., 19450.,
      20548., 22900., 24064., 14401., 15538., 17818., 19032., 21543., 22834.,
      25576., 26944., 22997., 24778., 28362., 30264., 34211., 36234., 40544.,
      42688., 23013., 24810., 28410., 30328., 34291., 36330., 40656., 42816.,
      21954., 23580., 26856., 28592., 32198., 34044., 37980., 39936., 13342.,
      14308., 16264., 17296., 19450., 20548., 22900., 24064., 13150., 14180.,
      16244., 17344., 19618., 20788., 23272., 24512., 20790., 22388., 25620.,
      27328., 30890., 32708., 36600., 38528., 21494., 23156., 26452., 28224.,
      31850., 33732., 37688., 39680., 19772., 21240., 24192., 25760., 29012.,
      30680., 34232., 36000., 12260., 13160., 14944., 15904., 17868., 18888.,
      21032., 22112., 7858.,  8476.,  9708.,  10368., 11726., 12428., 13912.,
      14656., 12378., 13324., 15244., 16256., 18374., 19452., 21768., 22912.,
      13082., 14092., 16076., 17152., 19334., 20476., 22856., 24064., 11716.,
      12584., 14336., 15264., 17196., 18184., 20296., 21344., 7324.,  7864.,
      8928.,  9504.,  10676., 11288., 12568., 13216.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x18x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22997., 24778., 28362., 30264., 34211., 36234., 40544., 42688., 23013.,
      24810., 28410., 30328., 34291., 36330., 40656., 42816., 22997., 24778.,
      28362., 30264., 34211., 36234., 40544., 42688., 23013., 24810., 28410.,
      30328., 34291., 36330., 40656., 42816., 23013., 24810., 28410., 30328.,
      34291., 36330., 40656., 42816., 22997., 24778., 28362., 30264., 34211.,
      36234., 40544., 42688., 23013., 24810., 28410., 30328., 34291., 36330.,
      40656., 42816., 22997., 24778., 28362., 30264., 34211., 36234., 40544.,
      42688., 22997., 24778., 28362., 30264., 34211., 36234., 40544., 42688.,
      23013., 24810., 28410., 30328., 34291., 36330., 40656., 42816., 22997.,
      24778., 28362., 30264., 34211., 36234., 40544., 42688., 23013., 24810.,
      28410., 30328., 34291., 36330., 40656., 42816.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, SAME3x18x18x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6229.,  6954.,  7679.,  8404.,  9758.,  10532., 11306., 12080., 13679.,
      14502., 15325., 16148., 17992., 18864., 19736., 20608., 10057., 11186.,
      12315., 13444., 15566., 16772., 17978., 19184., 21691., 22974., 24257.,
      25540., 28432., 29792., 31152., 32512., 10073., 11218., 12363., 13508.,
      15646., 16868., 18090., 19312., 21835., 23134., 24433., 25732., 28640.,
      30016., 31392., 32768., 9394.,  10420., 11446., 12472., 14408., 15504.,
      16600., 17696., 19982., 21148., 22314., 23480., 26116., 27352., 28588.,
      29824., 5550.,  6156.,  6762.,  7368.,  8520.,  9168.,  9816.,  10464.,
      11826., 12516., 13206., 13896., 15468., 16200., 16932., 17664., 9809.,
      10946., 12083., 13220., 15350., 16564., 17778., 18992., 21507., 22798.,
      24089., 25380., 28280., 29648., 31016., 32384., 15797., 17578., 19359.,
      21140., 24486., 26388., 28290., 30192., 34143., 36166., 38189., 40212.,
      44768., 46912., 49056., 51200., 15813., 17610., 19407., 21204., 24566.,
      26484., 28402., 30320., 34287., 36326., 38365., 40404., 44976., 47136.,
      49296., 51456., 14794., 16420., 18046., 19672., 22728., 24464., 26200.,
      27936., 31542., 33388., 35234., 37080., 41236., 43192., 45148., 47104.,
      8790.,  9756.,  10722., 11688., 13512., 14544., 15576., 16608., 18762.,
      19860., 20958., 22056., 24540., 25704., 26868., 28032., 9809.,  10946.,
      12083., 13220., 15350., 16564., 17778., 18992., 21507., 22798., 24089.,
      25380., 28280., 29648., 31016., 32384., 15797., 17578., 19359., 21140.,
      24486., 26388., 28290., 30192., 34143., 36166., 38189., 40212., 44768.,
      46912., 49056., 51200., 15813., 17610., 19407., 21204., 24566., 26484.,
      28402., 30320., 34287., 36326., 38365., 40404., 44976., 47136., 49296.,
      51456., 14794., 16420., 18046., 19672., 22728., 24464., 26200., 27936.,
      31542., 33388., 35234., 37080., 41236., 43192., 45148., 47104., 8790.,
      9756.,  10722., 11688., 13512., 14544., 15576., 16608., 18762., 19860.,
      20958., 22056., 24540., 25704., 26868., 28032., 8822.,  9852.,  10882.,
      11912., 13852., 14952., 16052., 17152., 19442., 20612., 21782., 22952.,
      25592., 26832., 28072., 29312., 14190., 15788., 17386., 18984., 22012.,
      23720., 25428., 27136., 30714., 32532., 34350., 36168., 40296., 42224.,
      44152., 46080., 14510., 16172., 17834., 19496., 22588., 24360., 26132.,
      27904., 31546., 33428., 35310., 37192., 41384., 43376., 45368., 47360.,
      13212., 14680., 16148., 17616., 20384., 21952., 23520., 25088., 28356.,
      30024., 31692., 33360., 37128., 38896., 40664., 42432., 8100.,  9000.,
      9900.,  10800., 12480., 13440., 14400., 15360., 17340., 18360., 19380.,
      20400., 22680., 23760., 24840., 25920., 5242.,  5860.,  6478.,  7096.,
      8260.,  8920.,  9580.,  10240., 11614., 12316., 13018., 13720., 15304.,
      16048., 16792., 17536., 8450.,  9396.,  10342., 11288., 13092., 14104.,
      15116., 16128., 18262., 19340., 20418., 21496., 23960., 25104., 26248.,
      27392., 8770.,  9780.,  10790., 11800., 13668., 14744., 15820., 16896.,
      19094., 20236., 21378., 22520., 25048., 26256., 27464., 28672., 7812.,
      8680.,  9548.,  10416., 12064., 12992., 13920., 14848., 16796., 17784.,
      18772., 19760., 22008., 23056., 24104., 25152., 4860.,  5400.,  5940.,
      6480.,  7488.,  8064.,  8640.,  9216.,  10404., 11016., 11628., 12240.,
      13608., 14256., 14904., 15552., 6213.,  6922.,  7631.,  8340.,  9678.,
      10436., 11194., 11952., 13535., 14342., 15149., 15956., 17784., 18640.,
      19496., 20352., 10073., 11218., 12363., 13508., 15646., 16868., 18090.,
      19312., 21835., 23134., 24433., 25732., 28640., 30016., 31392., 32768.,
      10057., 11186., 12315., 13444., 15566., 16772., 17978., 19184., 21691.,
      22974., 24257., 25540., 28432., 29792., 31152., 32512., 9682.,  10740.,
      11798., 12856., 14824., 15952., 17080., 18208., 20526., 21724., 22922.,
      24120., 26788., 28056., 29324., 30592., 5838.,  6476.,  7114.,  7752.,
      8936.,  9616.,  10296., 10976., 12370., 13092., 13814., 14536., 16140.,
      16904., 17668., 18432., 9793.,  10914., 12035., 13156., 15270., 16468.,
      17666., 18864., 21363., 22638., 23913., 25188., 28072., 29424., 30776.,
      32128., 15813., 17610., 19407., 21204., 24566., 26484., 28402., 30320.,
      34287., 36326., 38365., 40404., 44976., 47136., 49296., 51456., 15797.,
      17578., 19359., 21140., 24486., 26388., 28290., 30192., 34143., 36166.,
      38189., 40212., 44768., 46912., 49056., 51200., 15082., 16740., 18398.,
      20056., 23144., 24912., 26680., 28448., 32086., 33964., 35842., 37720.,
      41908., 43896., 45884., 47872., 9078.,  10076., 11074., 12072., 13928.,
      14992., 16056., 17120., 19306., 20436., 21566., 22696., 25212., 26408.,
      27604., 28800., 9793.,  10914., 12035., 13156., 15270., 16468., 17666.,
      18864., 21363., 22638., 23913., 25188., 28072., 29424., 30776., 32128.,
      15813., 17610., 19407., 21204., 24566., 26484., 28402., 30320., 34287.,
      36326., 38365., 40404., 44976., 47136., 49296., 51456., 15797., 17578.,
      19359., 21140., 24486., 26388., 28290., 30192., 34143., 36166., 38189.,
      40212., 44768., 46912., 49056., 51200., 15082., 16740., 18398., 20056.,
      23144., 24912., 26680., 28448., 32086., 33964., 35842., 37720., 41908.,
      43896., 45884., 47872., 9078.,  10076., 11074., 12072., 13928., 14992.,
      16056., 17120., 19306., 20436., 21566., 22696., 25212., 26408., 27604.,
      28800., 9078.,  10108., 11138., 12168., 14108., 15208., 16308., 17408.,
      19698., 20868., 22038., 23208., 25848., 27088., 28328., 29568., 14510.,
      16172., 17834., 19496., 22588., 24360., 26132., 27904., 31546., 33428.,
      35310., 37192., 41384., 43376., 45368., 47360., 14190., 15788., 17386.,
      18984., 22012., 23720., 25428., 27136., 30714., 32532., 34350., 36168.,
      40296., 42224., 44152., 46080., 13788., 15320., 16852., 18384., 21216.,
      22848., 24480., 26112., 29444., 31176., 32908., 34640., 38472., 40304.,
      42136., 43968., 8100.,  9000.,  9900.,  10800., 12480., 13440., 14400.,
      15360., 17340., 18360., 19380., 20400., 22680., 23760., 24840., 25920.,
      5498.,  6116.,  6734.,  7352.,  8516.,  9176.,  9836.,  10496., 11870.,
      12572., 13274., 13976., 15560., 16304., 17048., 17792., 8770.,  9780.,
      10790., 11800., 13668., 14744., 15820., 16896., 19094., 20236., 21378.,
      22520., 25048., 26256., 27464., 28672., 8450.,  9396.,  10342., 11288.,
      13092., 14104., 15116., 16128., 18262., 19340., 20418., 21496., 23960.,
      25104., 26248., 27392., 8388.,  9320.,  10252., 11184., 12896., 13888.,
      14880., 15872., 17884., 18936., 19988., 21040., 23352., 24464., 25576.,
      26688., 4860.,  5400.,  5940.,  6480.,  7488.,  8064.,  8640.,  9216.,
      10404., 11016., 11628., 12240., 13608., 14256., 14904., 15552., 6229.,
      6954.,  7679.,  8404.,  9758.,  10532., 11306., 12080., 13679., 14502.,
      15325., 16148., 17992., 18864., 19736., 20608., 10057., 11186., 12315.,
      13444., 15566., 16772., 17978., 19184., 21691., 22974., 24257., 25540.,
      28432., 29792., 31152., 32512., 10073., 11218., 12363., 13508., 15646.,
      16868., 18090., 19312., 21835., 23134., 24433., 25732., 28640., 30016.,
      31392., 32768., 9394.,  10420., 11446., 12472., 14408., 15504., 16600.,
      17696., 19982., 21148., 22314., 23480., 26116., 27352., 28588., 29824.,
      5550.,  6156.,  6762.,  7368.,  8520.,  9168.,  9816.,  10464., 11826.,
      12516., 13206., 13896., 15468., 16200., 16932., 17664., 9809.,  10946.,
      12083., 13220., 15350., 16564., 17778., 18992., 21507., 22798., 24089.,
      25380., 28280., 29648., 31016., 32384., 15797., 17578., 19359., 21140.,
      24486., 26388., 28290., 30192., 34143., 36166., 38189., 40212., 44768.,
      46912., 49056., 51200., 15813., 17610., 19407., 21204., 24566., 26484.,
      28402., 30320., 34287., 36326., 38365., 40404., 44976., 47136., 49296.,
      51456., 14794., 16420., 18046., 19672., 22728., 24464., 26200., 27936.,
      31542., 33388., 35234., 37080., 41236., 43192., 45148., 47104., 8790.,
      9756.,  10722., 11688., 13512., 14544., 15576., 16608., 18762., 19860.,
      20958., 22056., 24540., 25704., 26868., 28032., 9809.,  10946., 12083.,
      13220., 15350., 16564., 17778., 18992., 21507., 22798., 24089., 25380.,
      28280., 29648., 31016., 32384., 15797., 17578., 19359., 21140., 24486.,
      26388., 28290., 30192., 34143., 36166., 38189., 40212., 44768., 46912.,
      49056., 51200., 15813., 17610., 19407., 21204., 24566., 26484., 28402.,
      30320., 34287., 36326., 38365., 40404., 44976., 47136., 49296., 51456.,
      14794., 16420., 18046., 19672., 22728., 24464., 26200., 27936., 31542.,
      33388., 35234., 37080., 41236., 43192., 45148., 47104., 8790.,  9756.,
      10722., 11688., 13512., 14544., 15576., 16608., 18762., 19860., 20958.,
      22056., 24540., 25704., 26868., 28032., 8822.,  9852.,  10882., 11912.,
      13852., 14952., 16052., 17152., 19442., 20612., 21782., 22952., 25592.,
      26832., 28072., 29312., 14190., 15788., 17386., 18984., 22012., 23720.,
      25428., 27136., 30714., 32532., 34350., 36168., 40296., 42224., 44152.,
      46080., 14510., 16172., 17834., 19496., 22588., 24360., 26132., 27904.,
      31546., 33428., 35310., 37192., 41384., 43376., 45368., 47360., 13212.,
      14680., 16148., 17616., 20384., 21952., 23520., 25088., 28356., 30024.,
      31692., 33360., 37128., 38896., 40664., 42432., 8100.,  9000.,  9900.,
      10800., 12480., 13440., 14400., 15360., 17340., 18360., 19380., 20400.,
      22680., 23760., 24840., 25920., 5242.,  5860.,  6478.,  7096.,  8260.,
      8920.,  9580.,  10240., 11614., 12316., 13018., 13720., 15304., 16048.,
      16792., 17536., 8450.,  9396.,  10342., 11288., 13092., 14104., 15116.,
      16128., 18262., 19340., 20418., 21496., 23960., 25104., 26248., 27392.,
      8770.,  9780.,  10790., 11800., 13668., 14744., 15820., 16896., 19094.,
      20236., 21378., 22520., 25048., 26256., 27464., 28672., 7812.,  8680.,
      9548.,  10416., 12064., 12992., 13920., 14848., 16796., 17784., 18772.,
      19760., 22008., 23056., 24104., 25152., 4860.,  5400.,  5940.,  6480.,
      7488.,  8064.,  8640.,  9216.,  10404., 11016., 11628., 12240., 13608.,
      14256., 14904., 15552.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4, VALID3x18x18x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15797., 17578., 19359., 21140., 24486., 26388., 28290., 30192., 34143.,
      36166., 38189., 40212., 44768., 46912., 49056., 51200., 15813., 17610.,
      19407., 21204., 24566., 26484., 28402., 30320., 34287., 36326., 38365.,
      40404., 44976., 47136., 49296., 51456., 15797., 17578., 19359., 21140.,
      24486., 26388., 28290., 30192., 34143., 36166., 38189., 40212., 44768.,
      46912., 49056., 51200., 15813., 17610., 19407., 21204., 24566., 26484.,
      28402., 30320., 34287., 36326., 38365., 40404., 44976., 47136., 49296.,
      51456., 15813., 17610., 19407., 21204., 24566., 26484., 28402., 30320.,
      34287., 36326., 38365., 40404., 44976., 47136., 49296., 51456., 15797.,
      17578., 19359., 21140., 24486., 26388., 28290., 30192., 34143., 36166.,
      38189., 40212., 44768., 46912., 49056., 51200., 15813., 17610., 19407.,
      21204., 24566., 26484., 28402., 30320., 34287., 36326., 38365., 40404.,
      44976., 47136., 49296., 51456., 15797., 17578., 19359., 21140., 24486.,
      26388., 28290., 30192., 34143., 36166., 38189., 40212., 44768., 46912.,
      49056., 51200., 15797., 17578., 19359., 21140., 24486., 26388., 28290.,
      30192., 34143., 36166., 38189., 40212., 44768., 46912., 49056., 51200.,
      15813., 17610., 19407., 21204., 24566., 26484., 28402., 30320., 34287.,
      36326., 38365., 40404., 44976., 47136., 49296., 51456., 15797., 17578.,
      19359., 21140., 24486., 26388., 28290., 30192., 34143., 36166., 38189.,
      40212., 44768., 46912., 49056., 51200., 15813., 17610., 19407., 21204.,
      24566., 26484., 28402., 30320., 34287., 36326., 38365., 40404., 44976.,
      47136., 49296., 51456.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 32.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}