/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_depthwise_conv2d_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>

#include "sycldnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/depthwise_conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::DefaultBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;
using GTestTypePairs = sycldnn::types::ToGTestTypes<SNNTypePairs>::type;


template <typename Pair>
using FilterBackpropWindow5Stride2 =
    sycldnn::depthwise_conv2d::WindowStrideTest<Pair, 5, 2>;
TYPED_TEST_SUITE(FilterBackpropWindow5Stride2, GTestTypePairs);
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2031., 2130., 2746., 1968., 2058., 2724., 2823., 3628., 2598., 2688., 3448., 3556., 4560., 3256., 3352., 1860., 1923., 2428., 1698., 1752., 2301., 2364., 2974., 2076., 2130.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {120., 130., 140., 150., 160., 190., 200., 210., 220., 230., 260., 270., 280., 290., 300., 330., 340., 350., 360., 370., 400., 410., 420., 430., 440.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3909., 4062., 4098., 4260., 5276., 5492., 3774., 3936., 3945., 4116., 5232., 5448., 5421., 5646., 6956., 7256., 4971., 5196., 5142., 5376., 6608., 6896., 6812., 7112., 8720., 9120., 6212., 6512., 6392., 6704., 3504., 3720., 3621., 3846., 4556., 4856., 3171., 3396., 3270., 3504., 4323., 4602., 4440., 4728., 5564., 5948., 3864., 4152., 3963., 4260.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {204., 240., 220., 260., 236., 280., 252., 300., 268., 320., 316., 380., 332., 400., 348., 420., 364., 440., 380., 460., 428., 520., 444., 540., 460., 560., 476., 580., 492., 600., 540., 660., 556., 680., 572., 700., 588., 720., 604., 740., 652., 800., 668., 820., 684., 840., 700., 860., 716., 880.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7665.,  7818.,  7971.,  8124.,  8034.,  8196.,  8358.,  8520., 10336., 10552., 10768., 10984.,  7386.,  7548.,  7710.,  7872.,  7719.,  7890.,  8061.,  8232., 10248., 10464., 10680., 10896., 10617., 10842., 11067., 11292., 13612., 13912., 14212., 14512.,  9717.,  9942., 10167., 10392., 10050., 10284., 10518., 10752., 12928., 13216., 13504., 13792., 13324., 13624., 13924., 14224., 17040., 17440., 17840., 18240., 12124., 12424., 12724., 13024., 12472., 12784., 13096., 13408.,  6792.,  7008.,  7224.,  7440.,  7017.,  7242.,  7467.,  7692.,  8812.,  9112.,  9412.,  9712.,  6117.,  6342.,  6567.,  6792.,  6306.,  6540.,  6774.,  7008.,  8367.,  8646.,  8925.,  9204.,  8592.,  8880.,  9168.,  9456., 10744., 11128., 11512., 11896.,  7440.,  7728.,  8016.,  8304.,  7629.,  7926.,  8223.,  8520.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 372.,  408.,  444.,  480.,  400.,  440.,  480.,  520.,  428.,  472.,  516.,  560.,  456.,  504.,  552.,  600.,  484.,  536.,  588.,  640.,  568.,  632.,  696.,  760.,  596.,  664.,  732.,  800.,  624.,  696.,  768.,  840.,  652.,  728.,  804.,  880.,  680.,  760.,  840.,  920.,  764.,  856.,  948., 1040.,  792.,  888.,  984., 1080.,  820.,  920., 1020., 1120.,  848.,  952., 1056., 1160.,  876.,  984., 1092., 1200.,  960., 1080., 1200., 1320.,  988., 1112., 1236., 1360., 1016., 1144., 1272., 1400., 1044., 1176., 1308., 1440., 1072., 1208., 1344., 1480., 1156., 1304., 1452., 1600., 1184., 1336., 1488., 1640., 1212., 1368., 1524., 1680., 1240., 1400., 1560., 1720., 1268., 1432., 1596., 1760.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7629.,  8124.,  8007.,  8520., 10312., 10984.,  7377.,  7872.,  7719.,  8232., 10275., 10896., 10653., 11292., 13672., 14512.,  9771., 10392., 10113., 10752., 13012., 13792., 13420., 14224., 17184., 18240., 12244., 13024., 12604., 13408.,  6891.,  7440.,  7125.,  7692.,  8968.,  9712.,  6243.,  6792.,  6441.,  7008.,  8529.,  9204.,  8763.,  9456., 10984., 11896.,  7629.,  8304.,  7827.,  8520.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 392.,  480.,  424.,  520.,  456.,  560.,  488.,  600.,  520.,  640.,  616.,  760.,  648.,  800.,  680.,  840.,  712.,  880.,  744.,  920.,  840., 1040.,  872., 1080.,  904., 1120.,  936., 1160.,  968., 1200., 1064., 1320., 1096., 1360., 1128., 1400., 1160., 1440., 1192., 1480., 1288., 1600., 1320., 1640., 1352., 1680., 1384., 1720., 1416., 1760.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14961., 15258., 15942., 16248., 15699., 16014., 16716., 17040., 20204., 20624., 21536., 21968., 14439., 14754., 15420., 15744., 15105., 15438., 16122., 16464., 20127., 20550., 21360., 21792., 20865., 21306., 22134., 22584., 26756., 27344., 28424., 29024., 19101., 19542., 20334., 20784., 19767., 20226., 21036., 21504., 25460., 26024., 27008., 27584., 26252., 26840., 27848., 28448., 33584., 34368., 35680., 36480., 23900., 24488., 25448., 26048., 24596., 25208., 26192., 26816., 13359., 13782., 14448., 14880., 13809., 14250., 14934., 15384., 17348., 17936., 18824., 19424., 12045., 12486., 13134., 13584., 12423., 12882., 13548., 14016., 16509., 17058., 17850., 18408., 16959., 17526., 18336., 18912., 21212., 21968., 23024., 23792., 14691., 15258., 16032., 16608., 15069., 15654., 16446., 17040.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 716.,  784.,  888.,  960.,  772.,  848.,  960., 1040.,  828.,  912., 1032., 1120.,  884.,  976., 1104., 1200.,  940., 1040., 1176., 1280., 1108., 1232., 1392., 1520., 1164., 1296., 1464., 1600., 1220., 1360., 1536., 1680., 1276., 1424., 1608., 1760., 1332., 1488., 1680., 1840., 1500., 1680., 1896., 2080., 1556., 1744., 1968., 2160., 1612., 1808., 2040., 2240., 1668., 1872., 2112., 2320., 1724., 1936., 2184., 2400., 1892., 2128., 2400., 2640., 1948., 2192., 2472., 2720., 2004., 2256., 2544., 2800., 2060., 2320., 2616., 2880., 2116., 2384., 2688., 2960., 2284., 2576., 2904., 3200., 2340., 2640., 2976., 3280., 2396., 2704., 3048., 3360., 2452., 2768., 3120., 3440., 2508., 2832., 3192., 3520.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7929.,  8162.,  8395.,  8628.,  9242.,  9484.,  9726.,  9968.,  8619.,  8870.,  9121.,  9372., 10004., 10264., 10524., 10784.,  8116.,  8408.,  8700.,  8992.,  9744., 10048., 10352., 10656.,  6611.,  6862.,  7113.,  7364.,  7924.,  8184.,  8444.,  8704.,  4533.,  4738.,  4943.,  5148.,  5662.,  5876.,  6090.,  6304.,  6999.,  7230.,  7461.,  7692.,  8304.,  8544.,  8784.,  9024.,  7689.,  7938.,  8187.,  8436.,  9066.,  9324.,  9582.,  9840.,  9148.,  9480.,  9812., 10144., 10936., 11280., 11624., 11968.,  5697.,  5946.,  6195.,  6444.,  7002.,  7260.,  7518.,  7776.,  6243.,  6510.,  6777.,  7044.,  7620.,  7896.,  8172.,  8448., 10548., 10856., 11164., 11472., 12224., 12544., 12864., 13184., 11340., 11672., 12004., 12336., 13112., 13456., 13800., 14144., 12752., 13152., 13552., 13952., 14880., 15296., 15712., 16128.,  8684.,  9016.,  9348.,  9680., 10360., 10704., 11048., 11392.,  8708.,  9000.,  9292.,  9584., 10224., 10528., 10832., 11136.,  8631.,  8862.,  9093.,  9324.,  9840., 10080., 10320., 10560.,  9129.,  9378.,  9627.,  9876., 10410., 10668., 10926., 11184., 11068., 11400., 11732., 12064., 12728., 13072., 13416., 13760.,  7137.,  7386.,  7635.,  7884.,  8346.,  8604.,  8862.,  9120.,  7491.,  7758.,  8025.,  8292.,  8772.,  9048.,  9324.,  9600.,  8469.,  8762.,  9055.,  9348.,  9926., 10228., 10530., 10832.,  8967.,  9278.,  9589.,  9900., 10496., 10816., 11136., 11456.,  8260.,  8632.,  9004.,  9376., 10080., 10464., 10848., 11232.,  6479.,  6790.,  7101.,  7412.,  7936.,  8256.,  8576.,  8896.,  4209.,  4474.,  4739.,  5004.,  5482.,  5756.,  6030.,  6304.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1364., 1432., 1500., 1568., 1704., 1776., 1848., 1920., 1468., 1544., 1620., 1696., 1840., 1920., 2000., 2080., 1572., 1656., 1740., 1824., 1976., 2064., 2152., 2240., 1676., 1768., 1860., 1952., 2112., 2208., 2304., 2400., 1780., 1880., 1980., 2080., 2248., 2352., 2456., 2560., 2092., 2216., 2340., 2464., 2656., 2784., 2912., 3040., 2196., 2328., 2460., 2592., 2792., 2928., 3064., 3200., 2300., 2440., 2580., 2720., 2928., 3072., 3216., 3360., 2404., 2552., 2700., 2848., 3064., 3216., 3368., 3520., 2508., 2664., 2820., 2976., 3200., 3360., 3520., 3680., 2820., 3000., 3180., 3360., 3608., 3792., 3976., 4160., 2924., 3112., 3300., 3488., 3744., 3936., 4128., 4320., 3028., 3224., 3420., 3616., 3880., 4080., 4280., 4480., 3132., 3336., 3540., 3744., 4016., 4224., 4432., 4640., 3236., 3448., 3660., 3872., 4152., 4368., 4584., 4800., 3548., 3784., 4020., 4256., 4560., 4800., 5040., 5280., 3652., 3896., 4140., 4384., 4696., 4944., 5192., 5440., 3756., 4008., 4260., 4512., 4832., 5088., 5344., 5600., 3860., 4120., 4380., 4640., 4968., 5232., 5496., 5760., 3964., 4232., 4500., 4768., 5104., 5376., 5648., 5920., 4276., 4568., 4860., 5152., 5512., 5808., 6104., 6400., 4380., 4680., 4980., 5280., 5648., 5952., 6256., 6560., 4484., 4792., 5100., 5408., 5784., 6096., 6408., 6720., 4588., 4904., 5220., 5536., 5920., 6240., 6560., 6880., 4692., 5016., 5340., 5664., 6056., 6384., 6712., 7040.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21745., 22580., 23433., 24304., 23221., 24092., 24981., 25888., 24836., 25888., 26964., 28064., 21249., 22084., 22937., 23808., 15797., 16540., 17301., 18080., 17997., 18828., 19677., 20544., 19473., 20340., 21225., 22128., 24884., 26016., 27172., 28352., 17517., 18348., 19197., 20064., 18849., 19716., 20601., 21504., 22876., 23888., 24924., 25984., 24460., 25520., 26604., 27712., 27504., 28800., 30128., 31488., 21852., 22864., 23900., 24960., 18508., 19440., 20396., 21376., 10749., 11436., 12141., 12864., 11649., 12372., 13113., 13872., 14452., 15392., 16356., 17344.,  9693., 10380., 11085., 11808., 10449., 11172., 11913., 12672., 13337., 14148., 14977., 15824., 14237., 15084., 15949., 16832., 15268., 16288., 17332., 18400., 11785., 12596., 13425., 14272.,  9853., 10572., 11309., 12064.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1404., 1568., 1740., 1920., 1516., 1696., 1884., 2080., 1628., 1824., 2028., 2240., 1740., 1952., 2172., 2400., 1852., 2080., 2316., 2560., 2188., 2464., 2748., 3040., 2300., 2592., 2892., 3200., 2412., 2720., 3036., 3360., 2524., 2848., 3180., 3520., 2636., 2976., 3324., 3680., 2972., 3360., 3756., 4160., 3084., 3488., 3900., 4320., 3196., 3616., 4044., 4480., 3308., 3744., 4188., 4640., 3420., 3872., 4332., 4800., 3756., 4256., 4764., 5280., 3868., 4384., 4908., 5440., 3980., 4512., 5052., 5600., 4092., 4640., 5196., 5760., 4204., 4768., 5340., 5920., 4540., 5152., 5772., 6400., 4652., 5280., 5916., 6560., 4764., 5408., 6060., 6720., 4876., 5536., 6204., 6880., 4988., 5664., 6348., 7040.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {43033., 43490., 44694., 45160., 46391., 46866., 48124., 48608., 45949., 46442., 47682., 48184., 49451., 49962., 51256., 51776., 49100., 49672., 51192., 51776., 53332., 53928., 55520., 56128., 42005., 42498., 43666., 44168., 45363., 45874., 47096., 47616., 31193., 31594., 32670., 33080., 34183., 34602., 35732., 36160., 35541., 35994., 37194., 37656., 38883., 39354., 40608., 41088., 38457., 38946., 40182., 40680., 41943., 42450., 43740., 44256., 49116., 49768., 51368., 52032., 53668., 54344., 56016., 56704., 34545., 35034., 36198., 36696., 37887., 38394., 39612., 40128., 37173., 37698., 38898., 39432., 40659., 41202., 42456., 43008., 45148., 45752., 47160., 47776., 49220., 49848., 51328., 51968., 48268., 48920., 50376., 51040., 52532., 53208., 54736., 55424., 54224., 55008., 56800., 57600., 59440., 60256., 62144., 62976., 43052., 43704., 45064., 45728., 47124., 47800., 49232., 49920., 36444., 37016., 38296., 38880., 40196., 40792., 42144., 42752., 21045., 21498., 22410., 22872., 23811., 24282., 25248., 25728., 22809., 23298., 24246., 24744., 25719., 26226., 27228., 27744., 28252., 28904., 30120., 30784., 32036., 32712., 34000., 34688., 18897., 19386., 20262., 20760., 21663., 22170., 23100., 23616., 20373., 20898., 21810., 22344., 23283., 23826., 24792., 25344., 26097., 26674., 27710., 28296., 29359., 29954., 31044., 31648., 27861., 28474., 29546., 30168., 31267., 31898., 33024., 33664., 29804., 30536., 31832., 32576., 33908., 34664., 36032., 36800., 22957., 23570., 24570., 25192., 26219., 26850., 27904., 28544., 19185., 19706., 20614., 21144., 22079., 22618., 23580., 24128.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2676.,  2808.,  3000.,  3136.,  3340.,  3480.,  3696.,  3840.,  2884.,  3032.,  3240.,  3392.,  3612.,  3768.,  4000.,  4160.,  3092.,  3256.,  3480.,  3648.,  3884.,  4056.,  4304.,  4480.,  3300.,  3480.,  3720.,  3904.,  4156.,  4344.,  4608.,  4800.,  3508.,  3704.,  3960.,  4160.,  4428.,  4632.,  4912.,  5120.,  4132.,  4376.,  4680.,  4928.,  5244.,  5496.,  5824.,  6080.,  4340.,  4600.,  4920.,  5184.,  5516.,  5784.,  6128.,  6400.,  4548.,  4824.,  5160.,  5440.,  5788.,  6072.,  6432.,  6720.,  4756.,  5048.,  5400.,  5696.,  6060.,  6360.,  6736.,  7040.,  4964.,  5272.,  5640.,  5952.,  6332.,  6648.,  7040.,  7360.,  5588.,  5944.,  6360.,  6720.,  7148.,  7512.,  7952.,  8320.,  5796.,  6168.,  6600.,  6976.,  7420.,  7800.,  8256.,  8640.,  6004.,  6392.,  6840.,  7232.,  7692.,  8088.,  8560.,  8960.,  6212.,  6616.,  7080.,  7488.,  7964.,  8376.,  8864.,  9280.,  6420.,  6840.,  7320.,  7744.,  8236.,  8664.,  9168.,  9600.,  7044.,  7512.,  8040.,  8512.,  9052.,  9528., 10080., 10560.,  7252.,  7736.,  8280.,  8768.,  9324.,  9816., 10384., 10880.,  7460.,  7960.,  8520.,  9024.,  9596., 10104., 10688., 11200.,  7668.,  8184.,  8760.,  9280.,  9868., 10392., 10992., 11520.,  7876.,  8408.,  9000.,  9536., 10140., 10680., 11296., 11840.,  8500.,  9080.,  9720., 10304., 10956., 11544., 12208., 12800.,  8708.,  9304.,  9960., 10560., 11228., 11832., 12512., 13120.,  8916.,  9528., 10200., 10816., 11500., 12120., 12816., 13440.,  9124.,  9752., 10440., 11072., 11772., 12408., 13120., 13760.,  9332.,  9976., 10680., 11328., 12044., 12696., 13424., 14080.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {30569., 31026., 31483., 31940., 33114., 33580., 34046., 34512., 35731., 36206., 36681., 37156., 38420., 38904., 39388., 39872., 33293., 33786., 34279., 34772., 35982., 36484., 36986., 37488., 38743., 39254., 39765., 40276., 41576., 42096., 42616., 43136., 31068., 31640., 32212., 32784., 34216., 34800., 35384., 35968., 37460., 38056., 38652., 39248., 40800., 41408., 42016., 42624., 25405., 25898., 26391., 26884., 27950., 28452., 28954., 29456., 30567., 31078., 31589., 32100., 33256., 33776., 34296., 34816., 17185., 17586., 17987., 18388., 19362., 19772., 20182., 20592., 21611., 22030., 22449., 22868., 23932., 24360., 24788., 25216., 26853., 27306., 27759., 28212., 29382., 29844., 30306., 30768., 31983., 32454., 32925., 33396., 34656., 35136., 35616., 36096., 29577., 30066., 30555., 31044., 32250., 32748., 33246., 33744., 34995., 35502., 36009., 36516., 37812., 38328., 38844., 39360., 35116., 35768., 36420., 37072., 38584., 39248., 39912., 40576., 42148., 42824., 43500., 44176., 45808., 46496., 47184., 47872., 21753., 22242., 22731., 23220., 24282., 24780., 25278., 25776., 26883., 27390., 27897., 28404., 29556., 30072., 30588., 31104., 23901., 24426., 24951., 25476., 26574., 27108., 27642., 28176., 29319., 29862., 30405., 30948., 32136., 32688., 33240., 33792., 40796., 41400., 42004., 42608., 44040., 44656., 45272., 45888., 47380., 48008., 48636., 49264., 50816., 51456., 52096., 52736., 43916., 44568., 45220., 45872., 47352., 48016., 48680., 49344., 50884., 51560., 52236., 52912., 54512., 55200., 55888., 56576., 49296., 50080., 50864., 51648., 53408., 54208., 55008., 55808., 57648., 58464., 59280., 60096., 62016., 62848., 63680., 64512., 33484., 34136., 34788., 35440., 36728., 37392., 38056., 38720., 40068., 40744., 41420., 42096., 43504., 44192., 44880., 45568., 33660., 34232., 34804., 35376., 36584., 37168., 37752., 38336., 39604., 40200., 40796., 41392., 42720., 43328., 43936., 44544., 33573., 34026., 34479., 34932., 35910., 36372., 36834., 37296., 38319., 38790., 39261., 39732., 40800., 41280., 41760., 42240., 35529., 36018., 36507., 36996., 38010., 38508., 39006., 39504., 40563., 41070., 41577., 42084., 43188., 43704., 44220., 44736., 43052., 43704., 44356., 45008., 46264., 46928., 47592., 48256., 49572., 50248., 50924., 51600., 52976., 53664., 54352., 55040., 27705., 28194., 28683., 29172., 30042., 30540., 31038., 31536., 32451., 32958., 33465., 33972., 34932., 35448., 35964., 36480., 29085., 29610., 30135., 30660., 31566., 32100., 32634., 33168., 34119., 34662., 35205., 35748., 36744., 37296., 37848., 38400., 32801., 33378., 33955., 34532., 35634., 36220., 36806., 37392., 38539., 39134., 39729., 40324., 41516., 42120., 42724., 43328., 34757., 35370., 35983., 36596., 37734., 38356., 38978., 39600., 40783., 41414., 42045., 42676., 43904., 44544., 45184., 45824., 31740., 32472., 33204., 33936., 35272., 36016., 36760., 37504., 38900., 39656., 40412., 41168., 42624., 43392., 44160., 44928., 24949., 25562., 26175., 26788., 27782., 28404., 29026., 29648., 30687., 31318., 31949., 32580., 33664., 34304., 34944., 35584., 15961., 16482., 17003., 17524., 18426., 18956., 19486., 20016., 20963., 21502., 22041., 22580., 23572., 24120., 24668., 25216.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5220.,  5352.,  5484.,  5616.,  5864.,  6000.,  6136.,  6272.,  6540.,  6680.,  6820.,  6960.,  7248.,  7392.,  7536.,  7680.,  5620.,  5768.,  5916.,  6064.,  6328.,  6480.,  6632.,  6784.,  7068.,  7224.,  7380.,  7536.,  7840.,  8000.,  8160.,  8320.,  6020.,  6184.,  6348.,  6512.,  6792.,  6960.,  7128.,  7296.,  7596.,  7768.,  7940.,  8112.,  8432.,  8608.,  8784.,  8960.,  6420.,  6600.,  6780.,  6960.,  7256.,  7440.,  7624.,  7808.,  8124.,  8312.,  8500.,  8688.,  9024.,  9216.,  9408.,  9600.,  6820.,  7016.,  7212.,  7408.,  7720.,  7920.,  8120.,  8320.,  8652.,  8856.,  9060.,  9264.,  9616.,  9824., 10032., 10240.,  8020.,  8264.,  8508.,  8752.,  9112.,  9360.,  9608.,  9856., 10236., 10488., 10740., 10992., 11392., 11648., 11904., 12160.,  8420.,  8680.,  8940.,  9200.,  9576.,  9840., 10104., 10368., 10764., 11032., 11300., 11568., 11984., 12256., 12528., 12800.,  8820.,  9096.,  9372.,  9648., 10040., 10320., 10600., 10880., 11292., 11576., 11860., 12144., 12576., 12864., 13152., 13440.,  9220.,  9512.,  9804., 10096., 10504., 10800., 11096., 11392., 11820., 12120., 12420., 12720., 13168., 13472., 13776., 14080.,  9620.,  9928., 10236., 10544., 10968., 11280., 11592., 11904., 12348., 12664., 12980., 13296., 13760., 14080., 14400., 14720., 10820., 11176., 11532., 11888., 12360., 12720., 13080., 13440., 13932., 14296., 14660., 15024., 15536., 15904., 16272., 16640., 11220., 11592., 11964., 12336., 12824., 13200., 13576., 13952., 14460., 14840., 15220., 15600., 16128., 16512., 16896., 17280., 11620., 12008., 12396., 12784., 13288., 13680., 14072., 14464., 14988., 15384., 15780., 16176., 16720., 17120., 17520., 17920., 12020., 12424., 12828., 13232., 13752., 14160., 14568., 14976., 15516., 15928., 16340., 16752., 17312., 17728., 18144., 18560., 12420., 12840., 13260., 13680., 14216., 14640., 15064., 15488., 16044., 16472., 16900., 17328., 17904., 18336., 18768., 19200., 13620., 14088., 14556., 15024., 15608., 16080., 16552., 17024., 17628., 18104., 18580., 19056., 19680., 20160., 20640., 21120., 14020., 14504., 14988., 15472., 16072., 16560., 17048., 17536., 18156., 18648., 19140., 19632., 20272., 20768., 21264., 21760., 14420., 14920., 15420., 15920., 16536., 17040., 17544., 18048., 18684., 19192., 19700., 20208., 20864., 21376., 21888., 22400., 14820., 15336., 15852., 16368., 17000., 17520., 18040., 18560., 19212., 19736., 20260., 20784., 21456., 21984., 22512., 23040., 15220., 15752., 16284., 16816., 17464., 18000., 18536., 19072., 19740., 20280., 20820., 21360., 22048., 22592., 23136., 23680., 16420., 17000., 17580., 18160., 18856., 19440., 20024., 20608., 21324., 21912., 22500., 23088., 23824., 24416., 25008., 25600., 16820., 17416., 18012., 18608., 19320., 19920., 20520., 21120., 21852., 22456., 23060., 23664., 24416., 25024., 25632., 26240., 17220., 17832., 18444., 19056., 19784., 20400., 21016., 21632., 22380., 23000., 23620., 24240., 25008., 25632., 26256., 26880., 17620., 18248., 18876., 19504., 20248., 20880., 21512., 22144., 22908., 23544., 24180., 24816., 25600., 26240., 26880., 27520., 18020., 18664., 19308., 19952., 20712., 21360., 22008., 22656., 23436., 24088., 24740., 25392., 26192., 26848., 27504., 28160.};
  const std::array<int, 4> in_shape = {{ 1, 7, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2376., 3062., 3188., 2286., 2376., 3168., 4070., 4196., 3006., 3096., 4000., 5128., 5264., 3760., 3856., 2160., 2726., 2804., 1962., 2016., 2664., 3350., 3428., 2394., 2448.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {134., 144., 154., 164., 174., 214., 224., 234., 244., 254., 294., 304., 314., 324., 334., 374., 384., 394., 404., 414., 454., 464., 474., 484., 494.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4572.,  4752.,  5884.,  6124.,  6124.,  6376.,  4383.,  4572.,  4554.,  4752.,  6084.,  6336.,  7804.,  8140.,  8044.,  8392.,  5751.,  6012.,  5922.,  6192.,  7664.,  8000.,  9808., 10256., 10064., 10528.,  7172.,  7520.,  7352.,  7712.,  4068.,  4320.,  5116.,  5452.,  5260.,  5608.,  3663.,  3924.,  3762.,  4032.,  5004.,  5328.,  6268.,  6700.,  6412.,  6856.,  4455.,  4788.,  4554.,  4896.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {228., 268., 244., 288., 260., 308., 276., 328., 292., 348., 356., 428., 372., 448., 388., 468., 404., 488., 420., 508., 484., 588., 500., 608., 516., 628., 532., 648., 548., 668., 612., 748., 628., 768., 644., 788., 660., 808., 676., 828., 740., 908., 756., 928., 772., 948., 788., 968., 804., 988.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8964.,  9144.,  9324.,  9504., 11528., 11768., 12008., 12248., 11996., 12248., 12500., 12752.,  8577.,  8766.,  8955.,  9144.,  8910.,  9108.,  9306.,  9504., 11916., 12168., 12420., 12672., 15272., 15608., 15944., 16280., 15740., 16088., 16436., 16784., 11241., 11502., 11763., 12024., 11574., 11844., 12114., 12384., 14992., 15328., 15664., 16000., 19168., 19616., 20064., 20512., 19664., 20128., 20592., 21056., 13996., 14344., 14692., 15040., 14344., 14704., 15064., 15424.,  7884.,  8136.,  8388.,  8640.,  9896., 10232., 10568., 10904., 10172., 10520., 10868., 11216.,  7065.,  7326.,  7587.,  7848.,  7254.,  7524.,  7794.,  8064.,  9684., 10008., 10332., 10656., 12104., 12536., 12968., 13400., 12380., 12824., 13268., 13712.,  8577.,  8910.,  9243.,  9576.,  8766.,  9108.,  9450.,  9792.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 416.,  456.,  496.,  536.,  444.,  488.,  532.,  576.,  472.,  520.,  568.,  616.,  500.,  552.,  604.,  656.,  528.,  584.,  640.,  696.,  640.,  712.,  784.,  856.,  668.,  744.,  820.,  896.,  696.,  776.,  856.,  936.,  724.,  808.,  892.,  976.,  752.,  840.,  928., 1016.,  864.,  968., 1072., 1176.,  892., 1000., 1108., 1216.,  920., 1032., 1144., 1256.,  948., 1064., 1180., 1296.,  976., 1096., 1216., 1336., 1088., 1224., 1360., 1496., 1116., 1256., 1396., 1536., 1144., 1288., 1432., 1576., 1172., 1320., 1468., 1616., 1200., 1352., 1504., 1656., 1312., 1480., 1648., 1816., 1340., 1512., 1684., 1856., 1368., 1544., 1720., 1896., 1396., 1576., 1756., 1936., 1424., 1608., 1792., 1976.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8955.,  9504., 11528., 12248., 12008., 12752.,  8595.,  9144.,  8937.,  9504., 11979., 12672., 15368., 16280., 15848., 16784., 11331., 12024., 11673., 12384., 15124., 16000., 19360., 20512., 19872., 21056., 14164., 15040., 14524., 15424.,  8019.,  8640., 10088., 10904., 10376., 11216.,  7227.,  7848.,  7425.,  8064.,  9891., 10656., 12392., 13400., 12680., 13712.,  8811.,  9576.,  9009.,  9792.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 440.,  536.,  472.,  576.,  504.,  616.,  536.,  656.,  568.,  696.,  696.,  856.,  728.,  896.,  760.,  936.,  792.,  976.,  824., 1016.,  952., 1176.,  984., 1216., 1016., 1256., 1048., 1296., 1080., 1336., 1208., 1496., 1240., 1536., 1272., 1576., 1304., 1616., 1336., 1656., 1464., 1816., 1496., 1856., 1528., 1896., 1560., 1936., 1592., 1976.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17559., 17910., 18648., 19008., 22588., 23056., 24016., 24496., 23524., 24016., 25000., 25504., 16821., 17190., 17910., 18288., 17487., 17874., 18612., 19008., 23463., 23958., 24840., 25344., 30076., 30736., 31888., 32560., 31012., 31696., 32872., 33568., 22149., 22662., 23526., 24048., 22815., 23346., 24228., 24768., 29588., 30248., 31328., 32000., 37840., 38720., 40128., 41024., 38832., 39744., 41184., 42112., 27644., 28328., 29384., 30080., 28340., 29048., 30128., 30848., 15543., 16038., 16776., 17280., 19516., 20176., 21136., 21808., 20068., 20752., 21736., 22432., 13941., 14454., 15174., 15696., 14319., 14850., 15588., 16128., 19143., 19782., 20664., 21312., 23932., 24784., 25936., 26800., 24484., 25360., 26536., 27424., 16965., 17622., 18486., 19152., 17343., 18018., 18900., 19584.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 804.,  880.,  992., 1072.,  860.,  944., 1064., 1152.,  916., 1008., 1136., 1232.,  972., 1072., 1208., 1312., 1028., 1136., 1280., 1392., 1252., 1392., 1568., 1712., 1308., 1456., 1640., 1792., 1364., 1520., 1712., 1872., 1420., 1584., 1784., 1952., 1476., 1648., 1856., 2032., 1700., 1904., 2144., 2352., 1756., 1968., 2216., 2432., 1812., 2032., 2288., 2512., 1868., 2096., 2360., 2592., 1924., 2160., 2432., 2672., 2148., 2416., 2720., 2992., 2204., 2480., 2792., 3072., 2260., 2544., 2864., 3152., 2316., 2608., 2936., 3232., 2372., 2672., 3008., 3312., 2596., 2928., 3296., 3632., 2652., 2992., 3368., 3712., 2708., 3056., 3440., 3792., 2764., 3120., 3512., 3872., 2820., 3184., 3584., 3952.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4239.,  4398.,  4557.,  4716.,  5256.,  5424.,  5592.,  5760.,  5028.,  5240.,  5452.,  5664.,  6336.,  6560.,  6784.,  7008.,  5852.,  6088.,  6324.,  6560.,  7256.,  7504.,  7752.,  8000.,  3513.,  3690.,  3867.,  4044.,  4530.,  4716.,  4902.,  5088.,  4059.,  4254.,  4449.,  4644.,  5148.,  5352.,  5556.,  5760.,  9759., 10062., 10365., 10668., 11352., 11664., 11976., 12288., 11620., 12024., 12428., 12832., 13696., 14112., 14528., 14944., 12444., 12872., 13300., 13728., 14616., 15056., 15496., 15936.,  7881.,  8202.,  8523.,  8844.,  9474.,  9804., 10134., 10464.,  8427.,  8766.,  9105.,  9444., 10092., 10440., 10788., 11136., 12436., 12712., 12988., 13264., 13984., 14272., 14560., 14848., 15408., 15776., 16144., 16512., 17408., 17792., 18176., 18560., 16336., 16736., 17136., 17536., 18464., 18880., 19296., 19712., 10828., 11128., 11428., 11728., 12376., 12688., 13000., 13312., 11428., 11752., 12076., 12400., 13072., 13408., 13744., 14080., 10623., 10926., 11229., 11532., 12120., 12432., 12744., 13056., 12772., 13176., 13580., 13984., 14720., 15136., 15552., 15968., 13340., 13768., 14196., 14624., 15384., 15824., 16264., 16704.,  8553.,  8874.,  9195.,  9516., 10050., 10380., 10710., 11040.,  8907.,  9246.,  9585.,  9924., 10476., 10824., 11172., 11520.,  5199.,  5454.,  5709.,  5964.,  6504.,  6768.,  7032.,  7296.,  5796.,  6136.,  6476.,  6816.,  7488.,  7840.,  8192.,  8544.,  6364.,  6728.,  7092.,  7456.,  8152.,  8528.,  8904.,  9280.,  3513.,  3786.,  4059.,  4332.,  4818.,  5100.,  5382.,  5664.,  3867.,  4158.,  4449.,  4740.,  5244.,  5544.,  5844.,  6144.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1532., 1608., 1684., 1760., 1904., 1984., 2064., 2144., 1636., 1720., 1804., 1888., 2040., 2128., 2216., 2304., 1740., 1832., 1924., 2016., 2176., 2272., 2368., 2464., 1844., 1944., 2044., 2144., 2312., 2416., 2520., 2624., 1948., 2056., 2164., 2272., 2448., 2560., 2672., 2784., 2364., 2504., 2644., 2784., 2992., 3136., 3280., 3424., 2468., 2616., 2764., 2912., 3128., 3280., 3432., 3584., 2572., 2728., 2884., 3040., 3264., 3424., 3584., 3744., 2676., 2840., 3004., 3168., 3400., 3568., 3736., 3904., 2780., 2952., 3124., 3296., 3536., 3712., 3888., 4064., 3196., 3400., 3604., 3808., 4080., 4288., 4496., 4704., 3300., 3512., 3724., 3936., 4216., 4432., 4648., 4864., 3404., 3624., 3844., 4064., 4352., 4576., 4800., 5024., 3508., 3736., 3964., 4192., 4488., 4720., 4952., 5184., 3612., 3848., 4084., 4320., 4624., 4864., 5104., 5344., 4028., 4296., 4564., 4832., 5168., 5440., 5712., 5984., 4132., 4408., 4684., 4960., 5304., 5584., 5864., 6144., 4236., 4520., 4804., 5088., 5440., 5728., 6016., 6304., 4340., 4632., 4924., 5216., 5576., 5872., 6168., 6464., 4444., 4744., 5044., 5344., 5712., 6016., 6320., 6624., 4860., 5192., 5524., 5856., 6256., 6592., 6928., 7264., 4964., 5304., 5644., 5984., 6392., 6736., 7080., 7424., 5068., 5416., 5764., 6112., 6528., 6880., 7232., 7584., 5172., 5528., 5884., 6240., 6664., 7024., 7384., 7744., 5276., 5640., 6004., 6368., 6800., 7168., 7536., 7904.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12861., 13548., 14253., 14976., 16548., 17440., 18356., 19296., 18420., 19360., 20324., 21312., 12957., 13644., 14349., 15072., 14289., 15012., 15753., 16512., 24669., 25644., 26637., 27648., 31524., 32800., 34100., 35424., 33396., 34720., 36068., 37440., 23613., 24588., 25581., 26592., 24945., 25956., 26985., 28032., 21148., 22096., 23068., 24064., 27056., 28288., 29552., 30848., 29040., 30336., 31664., 33024., 20380., 21328., 22300., 23296., 21772., 22768., 23788., 24832., 15117., 15948., 16797., 17664., 18788., 19872., 20980., 22112., 19892., 21024., 22180., 23360., 13485., 14316., 15165., 16032., 14241., 15108., 15993., 16896., 12717., 13452., 14205., 14976., 15844., 16800., 17780., 18784., 16948., 17952., 18980., 20032., 11469., 12204., 12957., 13728., 12225., 12996., 13785., 14592.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1580., 1760., 1948., 2144., 1692., 1888., 2092., 2304., 1804., 2016., 2236., 2464., 1916., 2144., 2380., 2624., 2028., 2272., 2524., 2784., 2476., 2784., 3100., 3424., 2588., 2912., 3244., 3584., 2700., 3040., 3388., 3744., 2812., 3168., 3532., 3904., 2924., 3296., 3676., 4064., 3372., 3808., 4252., 4704., 3484., 3936., 4396., 4864., 3596., 4064., 4540., 5024., 3708., 4192., 4684., 5184., 3820., 4320., 4828., 5344., 4268., 4832., 5404., 5984., 4380., 4960., 5548., 6144., 4492., 5088., 5692., 6304., 4604., 5216., 5836., 6464., 4716., 5344., 5980., 6624., 5164., 5856., 6556., 7264., 5276., 5984., 6700., 7424., 5388., 6112., 6844., 7584., 5500., 6240., 6988., 7744., 5612., 6368., 7132., 7904.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4869.,  4986.,  5466.,  5592.,  6099.,  6234.,  6768.,  6912.,  6316.,  6472.,  7064.,  7232.,  7860.,  8040.,  8704.,  8896.,  7964.,  8168.,  8808.,  9024.,  9700.,  9928., 10640., 10880.,  5025.,  5178.,  5622.,  5784.,  6255.,  6426.,  6924.,  7104.,  6117.,  6306.,  6786.,  6984.,  7491.,  7698.,  8232.,  8448., 15909., 16314., 17082., 17496., 18291., 18714., 19536., 19968., 19500., 20040., 21016., 21568., 22580., 23144., 24192., 24768., 21148., 21736., 22760., 23360., 24420., 25032., 26128., 26752., 13761., 14202., 14934., 15384., 16143., 16602., 17388., 17856., 14853., 15330., 16098., 16584., 17379., 17874., 18696., 19200.,  5660.,  5816.,  6392.,  6560.,  7172.,  7352.,  8000.,  8192.,  7312.,  7520.,  8224.,  8448.,  9200.,  9440., 10240., 10496.,  9168.,  9440., 10208., 10496., 11312., 11616., 12480., 12800.,  5612.,  5816.,  6344.,  6560.,  7124.,  7352.,  7952.,  8192.,  6812.,  7064.,  7640.,  7904.,  8516.,  8792.,  9440.,  9728., 11589., 11994., 12666., 13080., 13779., 14202., 14928., 15360., 13740., 14280., 15128., 15680., 16564., 17128., 18048., 18624., 14876., 15464., 16360., 16960., 17892., 18504., 19472., 20096.,  9057.,  9498., 10134., 10584., 11247., 11706., 12396., 12864.,  9765., 10242., 10914., 11400., 12099., 12594., 13320., 13824.,  3621.,  3738.,  4122.,  4248.,  4659.,  4794.,  5232.,  5376.,  4652.,  4808.,  5272.,  5440.,  5940.,  6120.,  6656.,  6848.,  5788.,  5992.,  6504.,  6720.,  7268.,  7496.,  8080.,  8320.,  3393.,  3546.,  3894.,  4056.,  4431.,  4602.,  5004.,  5184.,  4101.,  4290.,  4674.,  4872.,  5283.,  5490.,  5928.,  6144.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3012.,  3160.,  3368.,  3520.,  3740.,  3896.,  4128.,  4288.,  3220.,  3384.,  3608.,  3776.,  4012.,  4184.,  4432.,  4608.,  3428.,  3608.,  3848.,  4032.,  4284.,  4472.,  4736.,  4928.,  3636.,  3832.,  4088.,  4288.,  4556.,  4760.,  5040.,  5248.,  3844.,  4056.,  4328.,  4544.,  4828.,  5048.,  5344.,  5568.,  4676.,  4952.,  5288.,  5568.,  5916.,  6200.,  6560.,  6848.,  4884.,  5176.,  5528.,  5824.,  6188.,  6488.,  6864.,  7168.,  5092.,  5400.,  5768.,  6080.,  6460.,  6776.,  7168.,  7488.,  5300.,  5624.,  6008.,  6336.,  6732.,  7064.,  7472.,  7808.,  5508.,  5848.,  6248.,  6592.,  7004.,  7352.,  7776.,  8128.,  6340.,  6744.,  7208.,  7616.,  8092.,  8504.,  8992.,  9408.,  6548.,  6968.,  7448.,  7872.,  8364.,  8792.,  9296.,  9728.,  6756.,  7192.,  7688.,  8128.,  8636.,  9080.,  9600., 10048.,  6964.,  7416.,  7928.,  8384.,  8908.,  9368.,  9904., 10368.,  7172.,  7640.,  8168.,  8640.,  9180.,  9656., 10208., 10688.,  8004.,  8536.,  9128.,  9664., 10268., 10808., 11424., 11968.,  8212.,  8760.,  9368.,  9920., 10540., 11096., 11728., 12288.,  8420.,  8984.,  9608., 10176., 10812., 11384., 12032., 12608.,  8628.,  9208.,  9848., 10432., 11084., 11672., 12336., 12928.,  8836.,  9432., 10088., 10688., 11356., 11960., 12640., 13248.,  9668., 10328., 11048., 11712., 12444., 13112., 13856., 14528.,  9876., 10552., 11288., 11968., 12716., 13400., 14160., 14848., 10084., 10776., 11528., 12224., 12988., 13688., 14464., 15168., 10292., 11000., 11768., 12480., 13260., 13976., 14768., 15488., 10500., 11224., 12008., 12736., 13532., 14264., 15072., 15808.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4629.,  4746.,  4863.,  4980.,  5430.,  5556.,  5682.,  5808.,  6303.,  6438.,  6573.,  6708.,  7248.,  7392.,  7536.,  7680.,  5820.,  5976.,  6132.,  6288.,  6792.,  6960.,  7128.,  7296.,  7860.,  8040.,  8220.,  8400.,  9024.,  9216.,  9408.,  9600.,  7020.,  7224.,  7428.,  7632.,  8184.,  8400.,  8616.,  8832.,  9444.,  9672.,  9900., 10128., 10800., 11040., 11280., 11520.,  3369.,  3522.,  3675.,  3828.,  4170.,  4332.,  4494.,  4656.,  5043.,  5214.,  5385.,  5556.,  5988.,  6168.,  6348.,  6528.,  3981.,  4170.,  4359.,  4548.,  4926.,  5124.,  5322.,  5520.,  5943.,  6150.,  6357.,  6564.,  7032.,  7248.,  7464.,  7680., 14133., 14538., 14943., 15348., 16086., 16500., 16914., 17328., 18111., 18534., 18957., 19380., 20208., 20640., 21072., 21504., 15420., 15960., 16500., 17040., 17928., 18480., 19032., 19584., 20532., 21096., 21660., 22224., 23232., 23808., 24384., 24960., 16620., 17208., 17796., 18384., 19320., 19920., 20520., 21120., 22116., 22728., 23340., 23952., 25008., 25632., 26256., 26880.,  8265.,  8706.,  9147.,  9588., 10218., 10668., 11118., 11568., 12243., 12702., 13161., 13620., 14340., 14808., 15276., 15744.,  8877.,  9354.,  9831., 10308., 10974., 11460., 11946., 12432., 13143., 13638., 14133., 14628., 15384., 15888., 16392., 16896.,  6172.,  6328.,  6484.,  6640.,  7240.,  7408.,  7576.,  7744.,  8404.,  8584.,  8764.,  8944.,  9664.,  9856., 10048., 10240.,  7760.,  7968.,  8176.,  8384.,  9056.,  9280.,  9504.,  9728., 10480., 10720., 10960., 11200., 12032., 12288., 12544., 12800.,  9360.,  9632.,  9904., 10176., 10912., 11200., 11488., 11776., 12592., 12896., 13200., 13504., 14400., 14720., 15040., 15360.,  4492.,  4696.,  4900.,  5104.,  5560.,  5776.,  5992.,  6208.,  6724.,  6952.,  7180.,  7408.,  7984.,  8224.,  8464.,  8704.,  5308.,  5560.,  5812.,  6064.,  6568.,  6832.,  7096.,  7360.,  7924.,  8200.,  8476.,  8752.,  9376.,  9664.,  9952., 10240., 14133., 14538., 14943., 15348., 16086., 16500., 16914., 17328., 18111., 18534., 18957., 19380., 20208., 20640., 21072., 21504., 15420., 15960., 16500., 17040., 17928., 18480., 19032., 19584., 20532., 21096., 21660., 22224., 23232., 23808., 24384., 24960., 16620., 17208., 17796., 18384., 19320., 19920., 20520., 21120., 22116., 22728., 23340., 23952., 25008., 25632., 26256., 26880.,  8265.,  8706.,  9147.,  9588., 10218., 10668., 11118., 11568., 12243., 12702., 13161., 13620., 14340., 14808., 15276., 15744.,  8877.,  9354.,  9831., 10308., 10974., 11460., 11946., 12432., 13143., 13638., 14133., 14628., 15384., 15888., 16392., 16896.,  4629.,  4746.,  4863.,  4980.,  5430.,  5556.,  5682.,  5808.,  6303.,  6438.,  6573.,  6708.,  7248.,  7392.,  7536.,  7680.,  5820.,  5976.,  6132.,  6288.,  6792.,  6960.,  7128.,  7296.,  7860.,  8040.,  8220.,  8400.,  9024.,  9216.,  9408.,  9600.,  7020.,  7224.,  7428.,  7632.,  8184.,  8400.,  8616.,  8832.,  9444.,  9672.,  9900., 10128., 10800., 11040., 11280., 11520.,  3369.,  3522.,  3675.,  3828.,  4170.,  4332.,  4494.,  4656.,  5043.,  5214.,  5385.,  5556.,  5988.,  6168.,  6348.,  6528.,  3981.,  4170.,  4359.,  4548.,  4926.,  5124.,  5322.,  5520.,  5943.,  6150.,  6357.,  6564.,  7032.,  7248.,  7464.,  7680.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5876.,  6024.,  6172.,  6320.,  6584.,  6736.,  6888.,  7040.,  7324.,  7480.,  7636.,  7792.,  8096.,  8256.,  8416.,  8576.,  6276.,  6440.,  6604.,  6768.,  7048.,  7216.,  7384.,  7552.,  7852.,  8024.,  8196.,  8368.,  8688.,  8864.,  9040.,  9216.,  6676.,  6856.,  7036.,  7216.,  7512.,  7696.,  7880.,  8064.,  8380.,  8568.,  8756.,  8944.,  9280.,  9472.,  9664.,  9856.,  7076.,  7272.,  7468.,  7664.,  7976.,  8176.,  8376.,  8576.,  8908.,  9112.,  9316.,  9520.,  9872., 10080., 10288., 10496.,  7476.,  7688.,  7900.,  8112.,  8440.,  8656.,  8872.,  9088.,  9436.,  9656.,  9876., 10096., 10464., 10688., 10912., 11136.,  9076.,  9352.,  9628.,  9904., 10296., 10576., 10856., 11136., 11548., 11832., 12116., 12400., 12832., 13120., 13408., 13696.,  9476.,  9768., 10060., 10352., 10760., 11056., 11352., 11648., 12076., 12376., 12676., 12976., 13424., 13728., 14032., 14336.,  9876., 10184., 10492., 10800., 11224., 11536., 11848., 12160., 12604., 12920., 13236., 13552., 14016., 14336., 14656., 14976., 10276., 10600., 10924., 11248., 11688., 12016., 12344., 12672., 13132., 13464., 13796., 14128., 14608., 14944., 15280., 15616., 10676., 11016., 11356., 11696., 12152., 12496., 12840., 13184., 13660., 14008., 14356., 14704., 15200., 15552., 15904., 16256., 12276., 12680., 13084., 13488., 14008., 14416., 14824., 15232., 15772., 16184., 16596., 17008., 17568., 17984., 18400., 18816., 12676., 13096., 13516., 13936., 14472., 14896., 15320., 15744., 16300., 16728., 17156., 17584., 18160., 18592., 19024., 19456., 13076., 13512., 13948., 14384., 14936., 15376., 15816., 16256., 16828., 17272., 17716., 18160., 18752., 19200., 19648., 20096., 13476., 13928., 14380., 14832., 15400., 15856., 16312., 16768., 17356., 17816., 18276., 18736., 19344., 19808., 20272., 20736., 13876., 14344., 14812., 15280., 15864., 16336., 16808., 17280., 17884., 18360., 18836., 19312., 19936., 20416., 20896., 21376., 15476., 16008., 16540., 17072., 17720., 18256., 18792., 19328., 19996., 20536., 21076., 21616., 22304., 22848., 23392., 23936., 15876., 16424., 16972., 17520., 18184., 18736., 19288., 19840., 20524., 21080., 21636., 22192., 22896., 23456., 24016., 24576., 16276., 16840., 17404., 17968., 18648., 19216., 19784., 20352., 21052., 21624., 22196., 22768., 23488., 24064., 24640., 25216., 16676., 17256., 17836., 18416., 19112., 19696., 20280., 20864., 21580., 22168., 22756., 23344., 24080., 24672., 25264., 25856., 17076., 17672., 18268., 18864., 19576., 20176., 20776., 21376., 22108., 22712., 23316., 23920., 24672., 25280., 25888., 26496., 18676., 19336., 19996., 20656., 21432., 22096., 22760., 23424., 24220., 24888., 25556., 26224., 27040., 27712., 28384., 29056., 19076., 19752., 20428., 21104., 21896., 22576., 23256., 23936., 24748., 25432., 26116., 26800., 27632., 28320., 29008., 29696., 19476., 20168., 20860., 21552., 22360., 23056., 23752., 24448., 25276., 25976., 26676., 27376., 28224., 28928., 29632., 30336., 19876., 20584., 21292., 22000., 22824., 23536., 24248., 24960., 25804., 26520., 27236., 27952., 28816., 29536., 30256., 30976., 20276., 21000., 21724., 22448., 23288., 24016., 24744., 25472., 26332., 27064., 27796., 28528., 29408., 30144., 30880., 31616.};
  const std::array<int, 4> in_shape = {{ 1, 7, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4880.,  5935.,  6130.,  4730.,  4880.,  6500.,  7885.,  8080.,  6230.,  6380.,  8200.,  9930., 10140.,  7800.,  7960.,  4400.,  5260.,  5380.,  4070.,  4160.,  5420.,  6460.,  6580.,  4970.,  5060.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 371.,  392.,  413.,  434.,  455.,  581.,  602.,  623.,  644.,  665.,  791.,  812.,  833.,  854.,  875., 1001., 1022., 1043., 1064., 1085., 1211., 1232., 1253., 1274., 1295.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9460.,  9760., 11495., 11870., 11870., 12260.,  9148.,  9460.,  9436.,  9760., 12580., 13000., 15245., 15770., 15620., 16160., 12028., 12460., 12316., 12760., 15840., 16400., 19160., 19860., 19560., 20280., 15024., 15600., 15328., 15920.,  8380.,  8800.,  9995., 10520., 10220., 10760.,  7708.,  8140.,  7876.,  8320., 10300., 10840., 12245., 12920., 12470., 13160.,  9388.,  9940.,  9556., 10120.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 664.,  742.,  700.,  784.,  736.,  826.,  772.,  868.,  808.,  910., 1024., 1162., 1060., 1204., 1096., 1246., 1132., 1288., 1168., 1330., 1384., 1582., 1420., 1624., 1456., 1666., 1492., 1708., 1528., 1750., 1744., 2002., 1780., 2044., 1816., 2086., 1852., 2128., 1888., 2170., 2104., 2422., 2140., 2464., 2176., 2506., 2212., 2548., 2248., 2590.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18620., 18920., 19220., 19520., 22615., 22990., 23365., 23740., 23350., 23740., 24130., 24520., 17984., 18296., 18608., 18920., 18548., 18872., 19196., 19520., 24740., 25160., 25580., 26000., 29965., 30490., 31015., 31540., 30700., 31240., 31780., 32320., 23624., 24056., 24488., 24920., 24188., 24632., 25076., 25520., 31120., 31680., 32240., 32800., 37620., 38320., 39020., 39720., 38400., 39120., 39840., 40560., 29472., 30048., 30624., 31200., 30064., 30656., 31248., 31840., 16340., 16760., 17180., 17600., 19465., 19990., 20515., 21040., 19900., 20440., 20980., 21520., 14984., 15416., 15848., 16280., 15308., 15752., 16196., 16640., 20060., 20600., 21140., 21680., 23815., 24490., 25165., 25840., 24250., 24940., 25630., 26320., 18224., 18776., 19328., 19880., 18548., 19112., 19676., 20240.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1250., 1328., 1406., 1484., 1316., 1400., 1484., 1568., 1382., 1472., 1562., 1652., 1448., 1544., 1640., 1736., 1514., 1616., 1718., 1820., 1910., 2048., 2186., 2324., 1976., 2120., 2264., 2408., 2042., 2192., 2342., 2492., 2108., 2264., 2420., 2576., 2174., 2336., 2498., 2660., 2570., 2768., 2966., 3164., 2636., 2840., 3044., 3248., 2702., 2912., 3122., 3332., 2768., 2984., 3200., 3416., 2834., 3056., 3278., 3500., 3230., 3488., 3746., 4004., 3296., 3560., 3824., 4088., 3362., 3632., 3902., 4172., 3428., 3704., 3980., 4256., 3494., 3776., 4058., 4340., 3890., 4208., 4526., 4844., 3956., 4280., 4604., 4928., 4022., 4352., 4682., 5012., 4088., 4424., 4760., 5096., 4154., 4496., 4838., 5180.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18608., 19520., 22615., 23740., 23365., 24520., 18008., 18920., 18584., 19520., 24848., 26000., 30115., 31540., 30865., 32320., 23768., 24920., 24344., 25520., 31344., 32800., 37920., 39720., 38720., 40560., 29744., 31200., 30352., 31840., 16568., 17600., 19765., 21040., 20215., 21520., 15248., 16280., 15584., 16640., 20408., 21680., 24265., 25840., 24715., 26320., 18608., 19880., 18944., 20240.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1292., 1484., 1364., 1568., 1436., 1652., 1508., 1736., 1580., 1820., 2012., 2324., 2084., 2408., 2156., 2492., 2228., 2576., 2300., 2660., 2732., 3164., 2804., 3248., 2876., 3332., 2948., 3416., 3020., 3500., 3452., 4004., 3524., 4088., 3596., 4172., 3668., 4256., 3740., 4340., 4172., 4844., 4244., 4928., 4316., 5012., 4388., 5096., 4460., 5180.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {36628., 37216., 38440., 39040., 44495., 45230., 46730., 47480., 45965., 46730., 48260., 49040., 35404., 36016., 37216., 37840., 36532., 37168., 38392., 39040., 48868., 49696., 51160., 52000., 59195., 60230., 62030., 63080., 60665., 61730., 63560., 64640., 46684., 47536., 48976., 49840., 47812., 48688., 50152., 51040., 42384., 43232., 44768., 45632., 46428., 47424., 49240., 50256., 47988., 49024., 50880., 51936., 31856., 32608., 33984., 34752., 33040., 33824., 35232., 36032., 32308., 33136., 34360., 35200., 38495., 39530., 41030., 42080., 39365., 40430., 41960., 43040., 29644., 30496., 31696., 32560., 30292., 31168., 32392., 33280., 25668., 26480., 27688., 28512., 26843., 27794., 29210., 30176., 27713., 28694., 30140., 31136., 17308., 18016., 19072., 19792., 17956., 18688., 19768., 20512.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2434.,  2584.,  2812.,  2968.,  2566.,  2728.,  2968.,  3136.,  2698.,  2872.,  3124.,  3304.,  2830.,  3016.,  3280.,  3472.,  2962.,  3160.,  3436.,  3640.,  3754.,  4024.,  4372.,  4648.,  3886.,  4168.,  4528.,  4816.,  4018.,  4312.,  4684.,  4984.,  4150.,  4456.,  4840.,  5152.,  4282.,  4600.,  4996.,  5320.,  5074.,  5464.,  5932.,  6328.,  5206.,  5608.,  6088.,  6496.,  5338.,  5752.,  6244.,  6664.,  5470.,  5896.,  6400.,  6832.,  5602.,  6040.,  6556.,  7000.,  6394.,  6904.,  7492.,  8008.,  6526.,  7048.,  7648.,  8176.,  6658.,  7192.,  7804.,  8344.,  6790.,  7336.,  7960.,  8512.,  6922.,  7480.,  8116.,  8680.,  7714.,  8344.,  9052.,  9688.,  7846.,  8488.,  9208.,  9856.,  7978.,  8632.,  9364., 10024.,  8110.,  8776.,  9520., 10192.,  8242.,  8920.,  9676., 10360.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9564.,  9896., 10228., 10560., 11256., 11600., 11944., 12288., 11903., 12318., 12733., 13148., 14054., 14484., 14914., 15344., 12765., 13210., 13655., 14100., 15036., 15496., 15956., 16416.,  9524.,  9880., 10236., 10592., 11344., 11712., 12080., 12448., 10220., 10600., 10980., 11360., 12136., 12528., 12920., 13312.,  8012.,  8392.,  8772.,  9152.,  9896., 10288., 10680., 11072., 11051., 11510., 11969., 12428., 13378., 13852., 14326., 14800., 11913., 12402., 12891., 13380., 14360., 14864., 15368., 15872.,  9060.,  9400.,  9740., 10080., 10816., 11168., 11520., 11872.,  9756., 10120., 10484., 10848., 11608., 11984., 12360., 12736., 10960., 11424., 11888., 12352., 13280., 13760., 14240., 14720., 16404., 16952., 17500., 18048., 19192., 19760., 20328., 20896., 17436., 18024., 18612., 19200., 20384., 20992., 21600., 22208., 15024., 15456., 15888., 16320., 17216., 17664., 18112., 18560., 15824., 16288., 16752., 17216., 18144., 18624., 19104., 19584., 12780., 13160., 13540., 13920., 14696., 15088., 15480., 15872., 13491., 13950., 14409., 14868., 15794., 16268., 16742., 17216., 14305., 14794., 15283., 15772., 16728., 17232., 17736., 18240.,  8196.,  8536.,  8876.,  9216.,  9920., 10272., 10624., 10976.,  8828.,  9192.,  9556.,  9920., 10648., 11024., 11400., 11776., 10844., 11272., 11700., 12128., 12952., 13392., 13832., 14272., 11135., 11638., 12141., 12644., 13614., 14132., 14650., 15168., 11949., 12482., 13015., 13548., 14548., 15096., 15644., 16192.,  8180.,  8568.,  8956.,  9344., 10096., 10496., 10896., 11296.,  8812.,  9224.,  9636., 10048., 10824., 11248., 11672., 12096.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4718.,  4868.,  5018.,  5168.,  5468.,  5624.,  5780.,  5936.,  4970.,  5132.,  5294.,  5456.,  5768.,  5936.,  6104.,  6272.,  5222.,  5396.,  5570.,  5744.,  6068.,  6248.,  6428.,  6608.,  5474.,  5660.,  5846.,  6032.,  6368.,  6560.,  6752.,  6944.,  5726.,  5924.,  6122.,  6320.,  6668.,  6872.,  7076.,  7280.,  7238.,  7508.,  7778.,  8048.,  8468.,  8744.,  9020.,  9296.,  7490.,  7772.,  8054.,  8336.,  8768.,  9056.,  9344.,  9632.,  7742.,  8036.,  8330.,  8624.,  9068.,  9368.,  9668.,  9968.,  7994.,  8300.,  8606.,  8912.,  9368.,  9680.,  9992., 10304.,  8246.,  8564.,  8882.,  9200.,  9668.,  9992., 10316., 10640.,  9758., 10148., 10538., 10928., 11468., 11864., 12260., 12656., 10010., 10412., 10814., 11216., 11768., 12176., 12584., 12992., 10262., 10676., 11090., 11504., 12068., 12488., 12908., 13328., 10514., 10940., 11366., 11792., 12368., 12800., 13232., 13664., 10766., 11204., 11642., 12080., 12668., 13112., 13556., 14000., 12278., 12788., 13298., 13808., 14468., 14984., 15500., 16016., 12530., 13052., 13574., 14096., 14768., 15296., 15824., 16352., 12782., 13316., 13850., 14384., 15068., 15608., 16148., 16688., 13034., 13580., 14126., 14672., 15368., 15920., 16472., 17024., 13286., 13844., 14402., 14960., 15668., 16232., 16796., 17360., 14798., 15428., 16058., 16688., 17468., 18104., 18740., 19376., 15050., 15692., 16334., 16976., 17768., 18416., 19064., 19712., 15302., 15956., 16610., 17264., 18068., 18728., 19388., 20048., 15554., 16220., 16886., 17552., 18368., 19040., 19712., 20384., 15806., 16484., 17162., 17840., 18668., 19352., 20036., 20720.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {36292., 37568., 38868., 40192., 44095., 45660., 47255., 48880., 47035., 48660., 50315., 52000., 35940., 37216., 38516., 39840., 38196., 39520., 40868., 42240., 40420., 41792., 43188., 44608., 47383., 49036., 50719., 52432., 50323., 52036., 53779., 55552., 34436., 35680., 36948., 38240., 36692., 37984., 39300., 40640., 40848., 42432., 44048., 45696., 44588., 46464., 48380., 50336., 47708., 49664., 51660., 53696., 31248., 32704., 34192., 35712., 33616., 35136., 36688., 38272., 25460., 26592., 27748., 28928., 29323., 30676., 32059., 33472., 31063., 32476., 33919., 35392., 21076., 22080., 23108., 24160., 22372., 23424., 24500., 25600., 23060., 24288., 25540., 26816., 23683., 25124., 26595., 28096., 25423., 26924., 28455., 30016., 15220., 16320., 17444., 18592., 16516., 17664., 18836., 20032.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4802.,  5168.,  5546.,  5936.,  5066.,  5456.,  5858.,  6272.,  5330.,  5744.,  6170.,  6608.,  5594.,  6032.,  6482.,  6944.,  5858.,  6320.,  6794.,  7280.,  7442.,  8048.,  8666.,  9296.,  7706.,  8336.,  8978.,  9632.,  7970.,  8624.,  9290.,  9968.,  8234.,  8912.,  9602., 10304.,  8498.,  9200.,  9914., 10640., 10082., 10928., 11786., 12656., 10346., 11216., 12098., 12992., 10610., 11504., 12410., 13328., 10874., 11792., 12722., 13664., 11138., 12080., 13034., 14000., 12722., 13808., 14906., 16016., 12986., 14096., 15218., 16352., 13250., 14384., 15530., 16688., 13514., 14672., 15842., 17024., 13778., 14960., 16154., 17360., 15362., 16688., 18026., 19376., 15626., 16976., 18338., 19712., 15890., 17264., 18650., 20048., 16154., 17552., 18962., 20384., 16418., 17840., 19274., 20720.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9340.,  9736., 10472., 10880., 11652., 12072., 12880., 13312., 11215., 11646., 12538., 12984., 13921., 14382., 15364., 15840., 12939., 13430., 14382., 14888., 15885., 16406., 17448., 17984., 10188., 10568., 11320., 11712., 12500., 12904., 13728., 14144., 11580., 12008., 12808., 13248., 14084., 14536., 15408., 15872., 10204., 10568., 11272., 11648., 12388., 12776., 13552., 13952., 12967., 13358., 14210., 14616., 15513., 15934., 16876., 17312., 14691., 15142., 16054., 16520., 17477., 17958., 18960., 19456.,  8684.,  8968.,  9624.,  9920., 10612., 10920., 11648., 11968., 10076., 10408., 11112., 11456., 12196., 12552., 13328., 13696., 13456., 13984., 14944., 15488., 16496., 17056., 18112., 18688., 15396., 15960., 17080., 17664., 18844., 19448., 20688., 21312., 17460., 18104., 19304., 19968., 21228., 21912., 23232., 23936., 13904., 14368., 15264., 15744., 16688., 17184., 18176., 18688., 15504., 16032., 16992., 17536., 18544., 19104., 20160., 20736., 10492., 10856., 11592., 11968., 12740., 13128., 13936., 14336.,  9679., 10070., 10898., 11304., 12177., 12598., 13516., 13952., 11307., 11758., 12646., 13112., 14045., 14526., 15504., 16000.,  5964.,  6248.,  6872.,  7168.,  7828.,  8136.,  8832.,  9152.,  7228.,  7560.,  8232.,  8576.,  9284.,  9640., 10384., 10752., 12252., 12712., 13544., 14016., 14884., 15368., 16272., 16768., 13159., 13638., 14554., 15048., 16009., 16518., 17524., 18048., 14787., 15326., 16302., 16856., 17877., 18446., 19512., 20096., 11564., 11944., 12664., 13056., 13812., 14216., 15008., 15424., 12828., 13256., 14024., 14464., 15268., 15720., 16560., 17024.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9310.,  9604., 10036., 10336., 10786., 11092., 11560., 11872.,  9814., 10132., 10588., 10912., 11386., 11716., 12208., 12544., 10318., 10660., 11140., 11488., 11986., 12340., 12856., 13216., 10822., 11188., 11692., 12064., 12586., 12964., 13504., 13888., 11326., 11716., 12244., 12640., 13186., 13588., 14152., 14560., 14350., 14884., 15556., 16096., 16786., 17332., 18040., 18592., 14854., 15412., 16108., 16672., 17386., 17956., 18688., 19264., 15358., 15940., 16660., 17248., 17986., 18580., 19336., 19936., 15862., 16468., 17212., 17824., 18586., 19204., 19984., 20608., 16366., 16996., 17764., 18400., 19186., 19828., 20632., 21280., 19390., 20164., 21076., 21856., 22786., 23572., 24520., 25312., 19894., 20692., 21628., 22432., 23386., 24196., 25168., 25984., 20398., 21220., 22180., 23008., 23986., 24820., 25816., 26656., 20902., 21748., 22732., 23584., 24586., 25444., 26464., 27328., 21406., 22276., 23284., 24160., 25186., 26068., 27112., 28000., 24430., 25444., 26596., 27616., 28786., 29812., 31000., 32032., 24934., 25972., 27148., 28192., 29386., 30436., 31648., 32704., 25438., 26500., 27700., 28768., 29986., 31060., 32296., 33376., 25942., 27028., 28252., 29344., 30586., 31684., 32944., 34048., 26446., 27556., 28804., 29920., 31186., 32308., 33592., 34720., 29470., 30724., 32116., 33376., 34786., 36052., 37480., 38752., 29974., 31252., 32668., 33952., 35386., 36676., 38128., 39424., 30478., 31780., 33220., 34528., 35986., 37300., 38776., 40096., 30982., 32308., 33772., 35104., 36586., 37924., 39424., 40768., 31486., 32836., 34324., 35680., 37186., 38548., 40072., 41440.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10028., 10424., 10820., 11216., 11960., 12368., 12776., 13184., 13988., 14408., 14828., 15248., 16112., 16544., 16976., 17408., 10287., 10718., 11149., 11580., 12470., 12916., 13362., 13808., 14773., 15234., 15695., 16156., 17196., 17672., 18148., 18624., 11883., 12374., 12865., 13356., 14306., 14812., 15318., 15824., 16849., 17370., 17891., 18412., 19512., 20048., 20584., 21120.,  8348.,  8728.,  9108.,  9488., 10216., 10608., 11000., 11392., 12180., 12584., 12988., 13392., 14240., 14656., 15072., 15488.,  9548.,  9976., 10404., 10832., 11608., 12048., 12488., 12928., 13764., 14216., 14668., 15120., 16016., 16480., 16944., 17408., 11276., 11640., 12004., 12368., 13080., 13456., 13832., 14208., 14980., 15368., 15756., 16144., 16976., 17376., 17776., 18176., 12295., 12686., 13077., 13468., 14318., 14724., 15130., 15536., 16461., 16882., 17303., 17724., 18724., 19160., 19596., 20032., 13891., 14342., 14793., 15244., 16154., 16620., 17086., 17552., 18537., 19018., 19499., 19980., 21040., 21536., 22032., 22528.,  6460.,  6744.,  7028.,  7312.,  7944.,  8240.,  8536.,  8832.,  9524.,  9832., 10140., 10448., 11200., 11520., 11840., 12160.,  7660.,  7992.,  8324.,  8656.,  9336.,  9680., 10024., 10368., 11108., 11464., 11820., 12176., 12976., 13344., 13712., 14080., 11152., 11680., 12208., 12736., 13728., 14272., 14816., 15360., 16432., 16992., 17552., 18112., 19264., 19840., 20416., 20992., 13332., 13896., 14460., 15024., 16168., 16752., 17336., 17920., 19164., 19768., 20372., 20976., 22320., 22944., 23568., 24192., 15332., 15976., 16620., 17264., 18488., 19152., 19816., 20480., 21804., 22488., 23172., 23856., 25280., 25984., 26688., 27392., 13648., 14112., 14576., 15040., 15968., 16448., 16928., 17408., 18416., 18912., 19408., 19904., 20992., 21504., 22016., 22528., 15248., 15776., 16304., 16832., 17824., 18368., 18912., 19456., 20528., 21088., 21648., 22208., 23360., 23936., 24512., 25088., 10508., 10872., 11236., 11600., 12312., 12688., 13064., 13440., 14212., 14600., 14988., 15376., 16208., 16608., 17008., 17408.,  7767.,  8158.,  8549.,  8940.,  9742., 10148., 10554., 10960., 11837., 12258., 12679., 13100., 14052., 14488., 14924., 15360.,  9171.,  9622., 10073., 10524., 11386., 11852., 12318., 12784., 13721., 14202., 14683., 15164., 16176., 16672., 17168., 17664.,  5180.,  5464.,  5748.,  6032.,  6664.,  6960.,  7256.,  7552.,  8244.,  8552.,  8860.,  9168.,  9920., 10240., 10560., 10880.,  6380.,  6712.,  7044.,  7376.,  8056.,  8400.,  8744.,  9088.,  9828., 10184., 10540., 10896., 11696., 12064., 12432., 12800., 10860., 11320., 11780., 12240., 13048., 13520., 13992., 14464., 15332., 15816., 16300., 16784., 17712., 18208., 18704., 19200., 13103., 13582., 14061., 14540., 15430., 15924., 16418., 16912., 17877., 18386., 18895., 19404., 20444., 20968., 21492., 22016., 14507., 15046., 15585., 16124., 17074., 17628., 18182., 18736., 19761., 20330., 20899., 21468., 22568., 23152., 23736., 24320., 11676., 12056., 12436., 12816., 13544., 13936., 14328., 14720., 15508., 15912., 16316., 16720., 17568., 17984., 18400., 18816., 12876., 13304., 13732., 14160., 14936., 15376., 15816., 16256., 17092., 17544., 17996., 18448., 19344., 19808., 20272., 20736.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18326., 18620., 18914., 19208., 19772., 20072., 20372., 20672., 21266., 21572., 21878., 22184., 22808., 23120., 23432., 23744., 19310., 19628., 19946., 20264., 20852., 21176., 21500., 21824., 22442., 22772., 23102., 23432., 24080., 24416., 24752., 25088., 20294., 20636., 20978., 21320., 21932., 22280., 22628., 22976., 23618., 23972., 24326., 24680., 25352., 25712., 26072., 26432., 21278., 21644., 22010., 22376., 23012., 23384., 23756., 24128., 24794., 25172., 25550., 25928., 26624., 27008., 27392., 27776., 22262., 22652., 23042., 23432., 24092., 24488., 24884., 25280., 25970., 26372., 26774., 27176., 27896., 28304., 28712., 29120.,  9478.,  9756., 10034., 10312., 10860., 11144., 11428., 11712., 12290., 12580., 12870., 13160., 13768., 14064., 14360., 14656., 10462., 10764., 11066., 11368., 11940., 12248., 12556., 12864., 13466., 13780., 14094., 14408., 15040., 15360., 15680., 16000.,  5174.,  5372.,  5570.,  5768.,  6236.,  6440.,  6644.,  6848.,  7346.,  7556.,  7766.,  7976.,  8504.,  8720.,  8936.,  9152.,  6158.,  6380.,  6602.,  6824.,  7316.,  7544.,  7772.,  8000.,  8522.,  8756.,  8990.,  9224.,  9776., 10016., 10256., 10496.,  7142.,  7388.,  7634.,  7880.,  8396.,  8648.,  8900.,  9152.,  9698.,  9956., 10214., 10472., 11048., 11312., 11576., 11840., 13046., 13436., 13826., 14216., 14876., 15272., 15668., 16064., 16754., 17156., 17558., 17960., 18680., 19088., 19496., 19904., 14030., 14444., 14858., 15272., 15956., 16376., 16796., 17216., 17930., 18356., 18782., 19208., 19952., 20384., 20816., 21248., 15014., 15452., 15890., 16328., 17036., 17480., 17924., 18368., 19106., 19556., 20006., 20456., 21224., 21680., 22136., 22592., 15998., 16460., 16922., 17384., 18116., 18584., 19052., 19520., 20282., 20756., 21230., 21704., 22496., 22976., 23456., 23936., 16982., 17468., 17954., 18440., 19196., 19688., 20180., 20672., 21458., 21956., 22454., 22952., 23768., 24272., 24776., 25280., 16486., 16860., 17234., 17608., 18252., 18632., 19012., 19392., 20066., 20452., 20838., 21224., 21928., 22320., 22712., 23104., 17470., 17868., 18266., 18664., 19332., 19736., 20140., 20544., 21242., 21652., 22062., 22472., 23200., 23616., 24032., 24448., 18326., 18620., 18914., 19208., 19772., 20072., 20372., 20672., 21266., 21572., 21878., 22184., 22808., 23120., 23432., 23744., 19310., 19628., 19946., 20264., 20852., 21176., 21500., 21824., 22442., 22772., 23102., 23432., 24080., 24416., 24752., 25088., 20294., 20636., 20978., 21320., 21932., 22280., 22628., 22976., 23618., 23972., 24326., 24680., 25352., 25712., 26072., 26432., 15830., 16188., 16546., 16904., 17532., 17896., 18260., 18624., 19282., 19652., 20022., 20392., 21080., 21456., 21832., 22208., 16814., 17196., 17578., 17960., 18612., 19000., 19388., 19776., 20458., 20852., 21246., 21640., 22352., 22752., 23152., 23552.,  9478.,  9756., 10034., 10312., 10860., 11144., 11428., 11712., 12290., 12580., 12870., 13160., 13768., 14064., 14360., 14656., 10462., 10764., 11066., 11368., 11940., 12248., 12556., 12864., 13466., 13780., 14094., 14408., 15040., 15360., 15680., 16000.,  5174.,  5372.,  5570.,  5768.,  6236.,  6440.,  6644.,  6848.,  7346.,  7556.,  7766.,  7976.,  8504.,  8720.,  8936.,  9152.};
  const std::array<int, 4> in_shape = {{ 1, 7, 10, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2724., 2823., 3628., 2598., 2688., 3448., 3556., 4560., 3256., 3352., 4204., 4312., 5512., 3928., 4024., 2301., 2364., 2974., 2076., 2130., 2742., 2805., 3520., 2454., 2508.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {120., 130., 140., 150., 160., 190., 200., 210., 220., 230., 260., 270., 280., 290., 300., 330., 340., 350., 360., 370., 400., 410., 420., 430., 440.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5232.,  5448.,  5421.,  5646.,  6956.,  7256.,  4971.,  5196.,  5142.,  5376.,  6608.,  6896.,  6812.,  7112.,  8720.,  9120.,  6212.,  6512.,  6392.,  6704.,  8036.,  8408.,  8240.,  8624., 10512., 11024.,  7472.,  7856.,  7652.,  8048.,  4323.,  4602.,  4440.,  4728.,  5564.,  5948.,  3864.,  4152.,  3963.,  4260.,  5142.,  5484.,  5259.,  5610.,  6572.,  7040.,  4557.,  4908.,  4656.,  5016.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {204., 240., 220., 260., 236., 280., 252., 300., 268., 320., 316., 380., 332., 400., 348., 420., 364., 440., 380., 460., 428., 520., 444., 540., 460., 560., 476., 580., 492., 600., 540., 660., 556., 680., 572., 700., 588., 720., 604., 740., 652., 800., 668., 820., 684., 840., 700., 860., 716., 880.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10248., 10464., 10680., 10896., 10617., 10842., 11067., 11292., 13612., 13912., 14212., 14512.,  9717.,  9942., 10167., 10392., 10050., 10284., 10518., 10752., 12928., 13216., 13504., 13792., 13324., 13624., 13924., 14224., 17040., 17440., 17840., 18240., 12124., 12424., 12724., 13024., 12472., 12784., 13096., 13408., 15700., 16072., 16444., 16816., 16096., 16480., 16864., 17248., 20512., 21024., 21536., 22048., 14560., 14944., 15328., 15712., 14908., 15304., 15700., 16096.,  8367.,  8646.,  8925.,  9204.,  8592.,  8880.,  9168.,  9456., 10744., 11128., 11512., 11896.,  7440.,  7728.,  8016.,  8304.,  7629.,  7926.,  8223.,  8520.,  9942., 10284., 10626., 10968., 10167., 10518., 10869., 11220., 12676., 13144., 13612., 14080.,  8763.,  9114.,  9465.,  9816.,  8952.,  9312.,  9672., 10032.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 372.,  408.,  444.,  480.,  400.,  440.,  480.,  520.,  428.,  472.,  516.,  560.,  456.,  504.,  552.,  600.,  484.,  536.,  588.,  640.,  568.,  632.,  696.,  760.,  596.,  664.,  732.,  800.,  624.,  696.,  768.,  840.,  652.,  728.,  804.,  880.,  680.,  760.,  840.,  920.,  764.,  856.,  948., 1040.,  792.,  888.,  984., 1080.,  820.,  920., 1020., 1120.,  848.,  952., 1056., 1160.,  876.,  984., 1092., 1200.,  960., 1080., 1200., 1320.,  988., 1112., 1236., 1360., 1016., 1144., 1272., 1400., 1044., 1176., 1308., 1440., 1072., 1208., 1344., 1480., 1156., 1304., 1452., 1600., 1184., 1336., 1488., 1640., 1212., 1368., 1524., 1680., 1240., 1400., 1560., 1720., 1268., 1432., 1596., 1760.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10275., 10896., 10653., 11292., 13672., 14512.,  9771., 10392., 10113., 10752., 13012., 13792., 13420., 14224., 17184., 18240., 12244., 13024., 12604., 13408., 15868., 16816., 16276., 17248., 20768., 22048., 14764., 15712., 15124., 16096.,  8529.,  9204.,  8763.,  9456., 10984., 11896.,  7629.,  8304.,  7827.,  8520., 10167., 10968., 10401., 11220., 13000., 14080.,  9015.,  9816.,  9213., 10032.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 392.,  480.,  424.,  520.,  456.,  560.,  488.,  600.,  520.,  640.,  616.,  760.,  648.,  800.,  680.,  840.,  712.,  880.,  744.,  920.,  840., 1040.,  872., 1080.,  904., 1120.,  936., 1160.,  968., 1200., 1064., 1320., 1096., 1360., 1128., 1400., 1160., 1440., 1192., 1480., 1288., 1600., 1320., 1640., 1352., 1680., 1384., 1720., 1416., 1760.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20127., 20550., 21360., 21792., 20865., 21306., 22134., 22584., 26756., 27344., 28424., 29024., 19101., 19542., 20334., 20784., 19767., 20226., 21036., 21504., 25460., 26024., 27008., 27584., 26252., 26840., 27848., 28448., 33584., 34368., 35680., 36480., 23900., 24488., 25448., 26048., 24596., 25208., 26192., 26816., 31004., 31736., 32888., 33632., 31796., 32552., 33728., 34496., 40528., 41536., 43072., 44096., 28772., 29528., 30656., 31424., 29468., 30248., 31400., 32192., 16509., 17058., 17850., 18408., 16959., 17526., 18336., 18912., 21212., 21968., 23024., 23792., 14691., 15258., 16032., 16608., 15069., 15654., 16446., 17040., 19659., 20334., 21252., 21936., 20109., 20802., 21738., 22440., 25076., 26000., 27224., 28160., 17337., 18030., 18930., 19632., 17715., 18426., 19344., 20064.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 716.,  784.,  888.,  960.,  772.,  848.,  960., 1040.,  828.,  912., 1032., 1120.,  884.,  976., 1104., 1200.,  940., 1040., 1176., 1280., 1108., 1232., 1392., 1520., 1164., 1296., 1464., 1600., 1220., 1360., 1536., 1680., 1276., 1424., 1608., 1760., 1332., 1488., 1680., 1840., 1500., 1680., 1896., 2080., 1556., 1744., 1968., 2160., 1612., 1808., 2040., 2240., 1668., 1872., 2112., 2320., 1724., 1936., 2184., 2400., 1892., 2128., 2400., 2640., 1948., 2192., 2472., 2720., 2004., 2256., 2544., 2800., 2060., 2320., 2616., 2880., 2116., 2384., 2688., 2960., 2284., 2576., 2904., 3200., 2340., 2640., 2976., 3280., 2396., 2704., 3048., 3360., 2452., 2768., 3120., 3440., 2508., 2832., 3192., 3520.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6999.,  7230.,  7461.,  7692.,  8304.,  8544.,  8784.,  9024.,  7689.,  7938.,  8187.,  8436.,  9066.,  9324.,  9582.,  9840.,  9148.,  9480.,  9812., 10144., 10936., 11280., 11624., 11968.,  5697.,  5946.,  6195.,  6444.,  7002.,  7260.,  7518.,  7776.,  6243.,  6510.,  6777.,  7044.,  7620.,  7896.,  8172.,  8448., 10548., 10856., 11164., 11472., 12224., 12544., 12864., 13184., 11340., 11672., 12004., 12336., 13112., 13456., 13800., 14144., 12752., 13152., 13552., 13952., 14880., 15296., 15712., 16128.,  8684.,  9016.,  9348.,  9680., 10360., 10704., 11048., 11392.,  8708.,  9000.,  9292.,  9584., 10224., 10528., 10832., 11136., 14428., 14776., 15124., 15472., 16264., 16624., 16984., 17344., 15220., 15592., 15964., 16336., 17152., 17536., 17920., 18304., 18608., 19104., 19600., 20096., 21120., 21632., 22144., 22656., 12244., 12616., 12988., 13360., 14080., 14464., 14848., 15232., 12844., 13240., 13636., 14032., 14776., 15184., 15592., 16000.,  8469.,  8762.,  9055.,  9348.,  9926., 10228., 10530., 10832.,  8967.,  9278.,  9589.,  9900., 10496., 10816., 11136., 11456.,  8260.,  8632.,  9004.,  9376., 10080., 10464., 10848., 11232.,  6479.,  6790.,  7101.,  7412.,  7936.,  8256.,  8576.,  8896.,  4209.,  4474.,  4739.,  5004.,  5482.,  5756.,  6030.,  6304.,  6195.,  6486.,  6777.,  7068.,  7644.,  7944.,  8244.,  8544.,  6693.,  7002.,  7311.,  7620.,  8214.,  8532.,  8850.,  9168.,  7500.,  7912.,  8324.,  8736.,  9480.,  9904., 10328., 10752.,  4221.,  4530.,  4839.,  5148.,  5670.,  5988.,  6306.,  6624.,  4575.,  4902.,  5229.,  5556.,  6096.,  6432.,  6768.,  7104.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1364., 1432., 1500., 1568., 1704., 1776., 1848., 1920., 1468., 1544., 1620., 1696., 1840., 1920., 2000., 2080., 1572., 1656., 1740., 1824., 1976., 2064., 2152., 2240., 1676., 1768., 1860., 1952., 2112., 2208., 2304., 2400., 1780., 1880., 1980., 2080., 2248., 2352., 2456., 2560., 2092., 2216., 2340., 2464., 2656., 2784., 2912., 3040., 2196., 2328., 2460., 2592., 2792., 2928., 3064., 3200., 2300., 2440., 2580., 2720., 2928., 3072., 3216., 3360., 2404., 2552., 2700., 2848., 3064., 3216., 3368., 3520., 2508., 2664., 2820., 2976., 3200., 3360., 3520., 3680., 2820., 3000., 3180., 3360., 3608., 3792., 3976., 4160., 2924., 3112., 3300., 3488., 3744., 3936., 4128., 4320., 3028., 3224., 3420., 3616., 3880., 4080., 4280., 4480., 3132., 3336., 3540., 3744., 4016., 4224., 4432., 4640., 3236., 3448., 3660., 3872., 4152., 4368., 4584., 4800., 3548., 3784., 4020., 4256., 4560., 4800., 5040., 5280., 3652., 3896., 4140., 4384., 4696., 4944., 5192., 5440., 3756., 4008., 4260., 4512., 4832., 5088., 5344., 5600., 3860., 4120., 4380., 4640., 4968., 5232., 5496., 5760., 3964., 4232., 4500., 4768., 5104., 5376., 5648., 5920., 4276., 4568., 4860., 5152., 5512., 5808., 6104., 6400., 4380., 4680., 4980., 5280., 5648., 5952., 6256., 6560., 4484., 4792., 5100., 5408., 5784., 6096., 6408., 6720., 4588., 4904., 5220., 5536., 5920., 6240., 6560., 6880., 4692., 5016., 5340., 5664., 6056., 6384., 6712., 7040.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17997., 18828., 19677., 20544., 19473., 20340., 21225., 22128., 24884., 26016., 27172., 28352., 17517., 18348., 19197., 20064., 18849., 19716., 20601., 21504., 22876., 23888., 24924., 25984., 24460., 25520., 26604., 27712., 27504., 28800., 30128., 31488., 21852., 22864., 23900., 24960., 18508., 19440., 20396., 21376., 23980., 25072., 26188., 27328., 25564., 26704., 27868., 29056., 32432., 33920., 35440., 36992., 22636., 23728., 24844., 25984., 24028., 25168., 26332., 27520., 13337., 14148., 14977., 15824., 14237., 15084., 15949., 16832., 15268., 16288., 17332., 18400., 11785., 12596., 13425., 14272.,  9853., 10572., 11309., 12064., 13749., 14556., 15381., 16224., 14649., 15492., 16353., 17232., 18132., 19232., 20356., 21504., 12213., 13020., 13845., 14688., 12969., 13812., 14673., 15552.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1404., 1568., 1740., 1920., 1516., 1696., 1884., 2080., 1628., 1824., 2028., 2240., 1740., 1952., 2172., 2400., 1852., 2080., 2316., 2560., 2188., 2464., 2748., 3040., 2300., 2592., 2892., 3200., 2412., 2720., 3036., 3360., 2524., 2848., 3180., 3520., 2636., 2976., 3324., 3680., 2972., 3360., 3756., 4160., 3084., 3488., 3900., 4320., 3196., 3616., 4044., 4480., 3308., 3744., 4188., 4640., 3420., 3872., 4332., 4800., 3756., 4256., 4764., 5280., 3868., 4384., 4908., 5440., 3980., 4512., 5052., 5600., 4092., 4640., 5196., 5760., 4204., 4768., 5340., 5920., 4540., 5152., 5772., 6400., 4652., 5280., 5916., 6560., 4764., 5408., 6060., 6720., 4876., 5536., 6204., 6880., 4988., 5664., 6348., 7040.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10389., 10650., 11274., 11544., 12195., 12474., 13152., 13440., 11769., 12066., 12726., 13032., 13719., 14034., 14748., 15072., 14556., 14952., 15784., 16192., 17060., 17480., 18384., 18816.,  9393.,  9690., 10278., 10584., 11199., 11514., 12156., 12480., 10485., 10818., 11442., 11784., 12435., 12786., 13464., 13824., 12252., 12600., 13368., 13728., 14532., 14904., 15744., 16128., 13836., 14232., 15048., 15456., 16308., 16728., 17616., 18048., 11344., 11744., 12640., 13056., 14000., 14432., 15424., 15872., 10668., 11064., 11784., 12192., 12948., 13368., 14160., 14592.,  6044.,  6296.,  6872.,  7136.,  7748.,  8024.,  8672.,  8960.,  9644.,  9944., 10664., 10976., 11732., 12056., 12848., 13184., 11228., 11576., 12344., 12704., 13508., 13880., 14720., 15104., 13712., 14176., 15136., 15616., 16624., 17120., 18176., 18688.,  8444.,  8792.,  9464.,  9824., 10532., 10904., 11648., 12032.,  9644., 10040., 10760., 11168., 11924., 12344., 13136., 13568.,  8241.,  8562.,  9150.,  9480., 10095., 10434., 11076., 11424.,  9237.,  9594., 10218., 10584., 11235., 11610., 12288., 12672.,  6636.,  6984.,  7640.,  8000.,  8692.,  9064.,  9792., 10176.,  6381.,  6738.,  7290.,  7656.,  8235.,  8610.,  9216.,  9600.,  3313.,  3514.,  3910.,  4120.,  4543.,  4762.,  5212.,  5440.,  5613.,  5802.,  6258.,  6456.,  6939.,  7146.,  7656.,  7872.,  6609.,  6834.,  7326.,  7560.,  8079.,  8322.,  8868.,  9120.,  8060.,  8360.,  8968.,  9280.,  9924., 10248., 10928., 11264.,  4809.,  5034.,  5454.,  5688.,  6135.,  6378.,  6852.,  7104.,  5517.,  5778.,  6234.,  6504.,  6987.,  7266.,  7776.,  8064.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2676.,  2808.,  3000.,  3136.,  3340.,  3480.,  3696.,  3840.,  2884.,  3032.,  3240.,  3392.,  3612.,  3768.,  4000.,  4160.,  3092.,  3256.,  3480.,  3648.,  3884.,  4056.,  4304.,  4480.,  3300.,  3480.,  3720.,  3904.,  4156.,  4344.,  4608.,  4800.,  3508.,  3704.,  3960.,  4160.,  4428.,  4632.,  4912.,  5120.,  4132.,  4376.,  4680.,  4928.,  5244.,  5496.,  5824.,  6080.,  4340.,  4600.,  4920.,  5184.,  5516.,  5784.,  6128.,  6400.,  4548.,  4824.,  5160.,  5440.,  5788.,  6072.,  6432.,  6720.,  4756.,  5048.,  5400.,  5696.,  6060.,  6360.,  6736.,  7040.,  4964.,  5272.,  5640.,  5952.,  6332.,  6648.,  7040.,  7360.,  5588.,  5944.,  6360.,  6720.,  7148.,  7512.,  7952.,  8320.,  5796.,  6168.,  6600.,  6976.,  7420.,  7800.,  8256.,  8640.,  6004.,  6392.,  6840.,  7232.,  7692.,  8088.,  8560.,  8960.,  6212.,  6616.,  7080.,  7488.,  7964.,  8376.,  8864.,  9280.,  6420.,  6840.,  7320.,  7744.,  8236.,  8664.,  9168.,  9600.,  7044.,  7512.,  8040.,  8512.,  9052.,  9528., 10080., 10560.,  7252.,  7736.,  8280.,  8768.,  9324.,  9816., 10384., 10880.,  7460.,  7960.,  8520.,  9024.,  9596., 10104., 10688., 11200.,  7668.,  8184.,  8760.,  9280.,  9868., 10392., 10992., 11520.,  7876.,  8408.,  9000.,  9536., 10140., 10680., 11296., 11840.,  8500.,  9080.,  9720., 10304., 10956., 11544., 12208., 12800.,  8708.,  9304.,  9960., 10560., 11228., 11832., 12512., 13120.,  8916.,  9528., 10200., 10816., 11500., 12120., 12816., 13440.,  9124.,  9752., 10440., 11072., 11772., 12408., 13120., 13760.,  9332.,  9976., 10680., 11328., 12044., 12696., 13424., 14080.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9381.,  9642.,  9903., 10164., 10758., 11028., 11298., 11568., 12207., 12486., 12765., 13044., 13728., 14016., 14304., 14592., 10569., 10866., 11163., 11460., 12090., 12396., 12702., 13008., 13683., 13998., 14313., 14628., 15348., 15672., 15996., 16320., 11820., 12216., 12612., 13008., 13752., 14160., 14568., 14976., 15780., 16200., 16620., 17040., 17904., 18336., 18768., 19200.,  5817.,  6114.,  6411.,  6708.,  7194.,  7500.,  7806.,  8112.,  8643.,  8958.,  9273.,  9588., 10164., 10488., 10812., 11136.,  6429.,  6762.,  7095.,  7428.,  7950.,  8292.,  8634.,  8976.,  9543.,  9894., 10245., 10596., 11208., 11568., 11928., 12288., 10460., 10808., 11156., 11504., 12296., 12656., 13016., 13376., 14228., 14600., 14972., 15344., 16256., 16640., 17024., 17408., 12044., 12440., 12836., 13232., 14072., 14480., 14888., 15296., 16196., 16616., 17036., 17456., 18416., 18848., 19280., 19712.,  7440.,  7840.,  8240.,  8640.,  9504.,  9920., 10336., 10752., 11696., 12128., 12560., 12992., 14016., 14464., 14912., 15360.,  5708.,  6104.,  6500.,  6896.,  7544.,  7952.,  8360.,  8768.,  9476.,  9896., 10316., 10736., 11504., 11936., 12368., 12800.,  3260.,  3512.,  3764.,  4016.,  4520.,  4784.,  5048.,  5312.,  5876.,  6152.,  6428.,  6704.,  7328.,  7616.,  7904.,  8192., 10924., 11224., 11524., 11824., 12568., 12880., 13192., 13504., 14308., 14632., 14956., 15280., 16144., 16480., 16816., 17152., 12508., 12856., 13204., 13552., 14344., 14704., 15064., 15424., 16276., 16648., 17020., 17392., 18304., 18688., 19072., 19456., 14160., 14624., 15088., 15552., 16480., 16960., 17440., 17920., 18928., 19424., 19920., 20416., 21504., 22016., 22528., 23040.,  6940.,  7288.,  7636.,  7984.,  8584.,  8944.,  9304.,  9664., 10324., 10696., 11068., 11440., 12160., 12544., 12928., 13312.,  7756.,  8152.,  8548.,  8944.,  9592., 10000., 10408., 10816., 11524., 11944., 12364., 12784., 13552., 13984., 14416., 14848.,  9313.,  9634.,  9955., 10276., 10930., 11260., 11590., 11920., 12619., 12958., 13297., 13636., 14380., 14728., 15076., 15424., 10501., 10858., 11215., 11572., 12262., 12628., 12994., 13360., 14095., 14470., 14845., 15220., 16000., 16384., 16768., 17152.,  5500.,  5848.,  6196.,  6544.,  7240.,  7600.,  7960.,  8320.,  9076.,  9448.,  9820., 10192., 11008., 11392., 11776., 12160.,  4789.,  5146.,  5503.,  5860.,  6406.,  6772.,  7138.,  7504.,  8095.,  8470.,  8845.,  9220.,  9856., 10240., 10624., 11008.,  2137.,  2338.,  2539.,  2740.,  3130.,  3340.,  3550.,  3760.,  4195.,  4414.,  4633.,  4852.,  5332.,  5560.,  5788.,  6016.,  7005.,  7194.,  7383.,  7572.,  8094.,  8292.,  8490.,  8688.,  9255.,  9462.,  9669.,  9876., 10488., 10704., 10920., 11136.,  8193.,  8418.,  8643.,  8868.,  9426.,  9660.,  9894., 10128., 10731., 10974., 11217., 11460., 12108., 12360., 12612., 12864.,  9420.,  9720., 10020., 10320., 10968., 11280., 11592., 11904., 12612., 12936., 13260., 13584., 14352., 14688., 15024., 15360.,  4593.,  4818.,  5043.,  5268.,  5682.,  5916.,  6150.,  6384.,  6843.,  7086.,  7329.,  7572.,  8076.,  8328.,  8580.,  8832.,  5205.,  5466.,  5727.,  5988.,  6438.,  6708.,  6978.,  7248.,  7743.,  8022.,  8301.,  8580.,  9120.,  9408.,  9696.,  9984.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5220.,  5352.,  5484.,  5616.,  5864.,  6000.,  6136.,  6272.,  6540.,  6680.,  6820.,  6960.,  7248.,  7392.,  7536.,  7680.,  5620.,  5768.,  5916.,  6064.,  6328.,  6480.,  6632.,  6784.,  7068.,  7224.,  7380.,  7536.,  7840.,  8000.,  8160.,  8320.,  6020.,  6184.,  6348.,  6512.,  6792.,  6960.,  7128.,  7296.,  7596.,  7768.,  7940.,  8112.,  8432.,  8608.,  8784.,  8960.,  6420.,  6600.,  6780.,  6960.,  7256.,  7440.,  7624.,  7808.,  8124.,  8312.,  8500.,  8688.,  9024.,  9216.,  9408.,  9600.,  6820.,  7016.,  7212.,  7408.,  7720.,  7920.,  8120.,  8320.,  8652.,  8856.,  9060.,  9264.,  9616.,  9824., 10032., 10240.,  8020.,  8264.,  8508.,  8752.,  9112.,  9360.,  9608.,  9856., 10236., 10488., 10740., 10992., 11392., 11648., 11904., 12160.,  8420.,  8680.,  8940.,  9200.,  9576.,  9840., 10104., 10368., 10764., 11032., 11300., 11568., 11984., 12256., 12528., 12800.,  8820.,  9096.,  9372.,  9648., 10040., 10320., 10600., 10880., 11292., 11576., 11860., 12144., 12576., 12864., 13152., 13440.,  9220.,  9512.,  9804., 10096., 10504., 10800., 11096., 11392., 11820., 12120., 12420., 12720., 13168., 13472., 13776., 14080.,  9620.,  9928., 10236., 10544., 10968., 11280., 11592., 11904., 12348., 12664., 12980., 13296., 13760., 14080., 14400., 14720., 10820., 11176., 11532., 11888., 12360., 12720., 13080., 13440., 13932., 14296., 14660., 15024., 15536., 15904., 16272., 16640., 11220., 11592., 11964., 12336., 12824., 13200., 13576., 13952., 14460., 14840., 15220., 15600., 16128., 16512., 16896., 17280., 11620., 12008., 12396., 12784., 13288., 13680., 14072., 14464., 14988., 15384., 15780., 16176., 16720., 17120., 17520., 17920., 12020., 12424., 12828., 13232., 13752., 14160., 14568., 14976., 15516., 15928., 16340., 16752., 17312., 17728., 18144., 18560., 12420., 12840., 13260., 13680., 14216., 14640., 15064., 15488., 16044., 16472., 16900., 17328., 17904., 18336., 18768., 19200., 13620., 14088., 14556., 15024., 15608., 16080., 16552., 17024., 17628., 18104., 18580., 19056., 19680., 20160., 20640., 21120., 14020., 14504., 14988., 15472., 16072., 16560., 17048., 17536., 18156., 18648., 19140., 19632., 20272., 20768., 21264., 21760., 14420., 14920., 15420., 15920., 16536., 17040., 17544., 18048., 18684., 19192., 19700., 20208., 20864., 21376., 21888., 22400., 14820., 15336., 15852., 16368., 17000., 17520., 18040., 18560., 19212., 19736., 20260., 20784., 21456., 21984., 22512., 23040., 15220., 15752., 16284., 16816., 17464., 18000., 18536., 19072., 19740., 20280., 20820., 21360., 22048., 22592., 23136., 23680., 16420., 17000., 17580., 18160., 18856., 19440., 20024., 20608., 21324., 21912., 22500., 23088., 23824., 24416., 25008., 25600., 16820., 17416., 18012., 18608., 19320., 19920., 20520., 21120., 21852., 22456., 23060., 23664., 24416., 25024., 25632., 26240., 17220., 17832., 18444., 19056., 19784., 20400., 21016., 21632., 22380., 23000., 23620., 24240., 25008., 25632., 26256., 26880., 17620., 18248., 18876., 19504., 20248., 20880., 21512., 22144., 22908., 23544., 24180., 24816., 25600., 26240., 26880., 27520., 18020., 18664., 19308., 19952., 20712., 21360., 22008., 22656., 23436., 24088., 24740., 25392., 26192., 26848., 27504., 28160.};
  const std::array<int, 4> in_shape = {{ 1, 8, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3168., 4070., 4196., 3006., 3096., 4000., 5128., 5264., 3760., 3856., 4864., 6216., 6352., 4528., 4624., 2664., 3350., 3428., 2394., 2448., 3168., 3974., 4052., 2826., 2880.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {134., 144., 154., 164., 174., 214., 224., 234., 244., 254., 294., 304., 314., 324., 334., 374., 384., 394., 404., 414., 454., 464., 474., 484., 494.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6084.,  6336.,  7804.,  8140.,  8044.,  8392.,  5751.,  6012.,  5922.,  6192.,  7664.,  8000.,  9808., 10256., 10064., 10528.,  7172.,  7520.,  7352.,  7712.,  9296.,  9728., 11856., 12432., 12112., 12704.,  8612.,  9056.,  8792.,  9248.,  5004.,  5328.,  6268.,  6700.,  6412.,  6856.,  4455.,  4788.,  4554.,  4896.,  5940.,  6336.,  7420.,  7948.,  7564.,  8104.,  5247.,  5652.,  5346.,  5760.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {228., 268., 244., 288., 260., 308., 276., 328., 292., 348., 356., 428., 372., 448., 388., 468., 404., 488., 420., 508., 484., 588., 500., 608., 516., 628., 532., 648., 548., 668., 612., 748., 628., 768., 644., 788., 660., 808., 676., 828., 740., 908., 756., 928., 772., 948., 788., 968., 804., 988.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11916., 12168., 12420., 12672., 15272., 15608., 15944., 16280., 15740., 16088., 16436., 16784., 11241., 11502., 11763., 12024., 11574., 11844., 12114., 12384., 14992., 15328., 15664., 16000., 19168., 19616., 20064., 20512., 19664., 20128., 20592., 21056., 13996., 14344., 14692., 15040., 14344., 14704., 15064., 15424., 18160., 18592., 19024., 19456., 23136., 23712., 24288., 24864., 23632., 24224., 24816., 25408., 16780., 17224., 17668., 18112., 17128., 17584., 18040., 18496.,  9684., 10008., 10332., 10656., 12104., 12536., 12968., 13400., 12380., 12824., 13268., 13712.,  8577.,  8910.,  9243.,  9576.,  8766.,  9108.,  9450.,  9792., 11484., 11880., 12276., 12672., 14312., 14840., 15368., 15896., 14588., 15128., 15668., 16208., 10089., 10494., 10899., 11304., 10278., 10692., 11106., 11520.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 416.,  456.,  496.,  536.,  444.,  488.,  532.,  576.,  472.,  520.,  568.,  616.,  500.,  552.,  604.,  656.,  528.,  584.,  640.,  696.,  640.,  712.,  784.,  856.,  668.,  744.,  820.,  896.,  696.,  776.,  856.,  936.,  724.,  808.,  892.,  976.,  752.,  840.,  928., 1016.,  864.,  968., 1072., 1176.,  892., 1000., 1108., 1216.,  920., 1032., 1144., 1256.,  948., 1064., 1180., 1296.,  976., 1096., 1216., 1336., 1088., 1224., 1360., 1496., 1116., 1256., 1396., 1536., 1144., 1288., 1432., 1576., 1172., 1320., 1468., 1616., 1200., 1352., 1504., 1656., 1312., 1480., 1648., 1816., 1340., 1512., 1684., 1856., 1368., 1544., 1720., 1896., 1396., 1576., 1756., 1936., 1424., 1608., 1792., 1976.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11979., 12672., 15368., 16280., 15848., 16784., 11331., 12024., 11673., 12384., 15124., 16000., 19360., 20512., 19872., 21056., 14164., 15040., 14524., 15424., 18388., 19456., 23456., 24864., 23968., 25408., 17044., 18112., 17404., 18496.,  9891., 10656., 12392., 13400., 12680., 13712.,  8811.,  9576.,  9009.,  9792., 11763., 12672., 14696., 15896., 14984., 16208., 10395., 11304., 10593., 11520.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 440.,  536.,  472.,  576.,  504.,  616.,  536.,  656.,  568.,  696.,  696.,  856.,  728.,  896.,  760.,  936.,  792.,  976.,  824., 1016.,  952., 1176.,  984., 1216., 1016., 1256., 1048., 1296., 1080., 1336., 1208., 1496., 1240., 1536., 1272., 1576., 1304., 1616., 1336., 1656., 1464., 1816., 1496., 1856., 1528., 1896., 1560., 1936., 1592., 1976.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {23463., 23958., 24840., 25344., 30076., 30736., 31888., 32560., 31012., 31696., 32872., 33568., 22149., 22662., 23526., 24048., 22815., 23346., 24228., 24768., 29588., 30248., 31328., 32000., 37840., 38720., 40128., 41024., 38832., 39744., 41184., 42112., 27644., 28328., 29384., 30080., 28340., 29048., 30128., 30848., 35924., 36776., 38048., 38912., 45776., 46912., 48576., 49728., 46768., 47936., 49632., 50816., 33212., 34088., 35336., 36224., 33908., 34808., 36080., 36992., 19143., 19782., 20664., 21312., 23932., 24784., 25936., 26800., 24484., 25360., 26536., 27424., 16965., 17622., 18486., 19152., 17343., 18018., 18900., 19584., 22743., 23526., 24552., 25344., 28348., 29392., 30736., 31792., 28900., 29968., 31336., 32416., 19989., 20790., 21798., 22608., 20367., 21186., 22212., 23040.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 804.,  880.,  992., 1072.,  860.,  944., 1064., 1152.,  916., 1008., 1136., 1232.,  972., 1072., 1208., 1312., 1028., 1136., 1280., 1392., 1252., 1392., 1568., 1712., 1308., 1456., 1640., 1792., 1364., 1520., 1712., 1872., 1420., 1584., 1784., 1952., 1476., 1648., 1856., 2032., 1700., 1904., 2144., 2352., 1756., 1968., 2216., 2432., 1812., 2032., 2288., 2512., 1868., 2096., 2360., 2592., 1924., 2160., 2432., 2672., 2148., 2416., 2720., 2992., 2204., 2480., 2792., 3072., 2260., 2544., 2864., 3152., 2316., 2608., 2936., 3232., 2372., 2672., 3008., 3312., 2596., 2928., 3296., 3632., 2652., 2992., 3368., 3712., 2708., 3056., 3440., 3792., 2764., 3120., 3512., 3872., 2820., 3184., 3584., 3952.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9759., 10062., 10365., 10668., 11352., 11664., 11976., 12288., 11620., 12024., 12428., 12832., 13696., 14112., 14528., 14944., 12444., 12872., 13300., 13728., 14616., 15056., 15496., 15936.,  7881.,  8202.,  8523.,  8844.,  9474.,  9804., 10134., 10464.,  8427.,  8766.,  9105.,  9444., 10092., 10440., 10788., 11136., 12436., 12712., 12988., 13264., 13984., 14272., 14560., 14848., 15408., 15776., 16144., 16512., 17408., 17792., 18176., 18560., 16336., 16736., 17136., 17536., 18464., 18880., 19296., 19712., 10828., 11128., 11428., 11728., 12376., 12688., 13000., 13312., 11428., 11752., 12076., 12400., 13072., 13408., 13744., 14080., 18772., 19240., 19708., 20176., 21088., 21568., 22048., 22528., 22832., 23456., 24080., 24704., 25856., 26496., 27136., 27776., 23760., 24416., 25072., 25728., 26912., 27584., 28256., 28928., 15628., 16120., 16612., 17104., 17944., 18448., 18952., 19456., 16228., 16744., 17260., 17776., 18640., 19168., 19696., 20224.,  5199.,  5454.,  5709.,  5964.,  6504.,  6768.,  7032.,  7296.,  5796.,  6136.,  6476.,  6816.,  7488.,  7840.,  8192.,  8544.,  6364.,  6728.,  7092.,  7456.,  8152.,  8528.,  8904.,  9280.,  3513.,  3786.,  4059.,  4332.,  4818.,  5100.,  5382.,  5664.,  3867.,  4158.,  4449.,  4740.,  5244.,  5544.,  5844.,  6144.,  9183.,  9582.,  9981., 10380., 11064., 11472., 11880., 12288., 10340., 10872., 11404., 11936., 12800., 13344., 13888., 14432., 10908., 11464., 12020., 12576., 13464., 14032., 14600., 15168.,  6345.,  6762.,  7179.,  7596.,  8226.,  8652.,  9078.,  9504.,  6699.,  7134.,  7569.,  8004.,  8652.,  9096.,  9540.,  9984.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1532., 1608., 1684., 1760., 1904., 1984., 2064., 2144., 1636., 1720., 1804., 1888., 2040., 2128., 2216., 2304., 1740., 1832., 1924., 2016., 2176., 2272., 2368., 2464., 1844., 1944., 2044., 2144., 2312., 2416., 2520., 2624., 1948., 2056., 2164., 2272., 2448., 2560., 2672., 2784., 2364., 2504., 2644., 2784., 2992., 3136., 3280., 3424., 2468., 2616., 2764., 2912., 3128., 3280., 3432., 3584., 2572., 2728., 2884., 3040., 3264., 3424., 3584., 3744., 2676., 2840., 3004., 3168., 3400., 3568., 3736., 3904., 2780., 2952., 3124., 3296., 3536., 3712., 3888., 4064., 3196., 3400., 3604., 3808., 4080., 4288., 4496., 4704., 3300., 3512., 3724., 3936., 4216., 4432., 4648., 4864., 3404., 3624., 3844., 4064., 4352., 4576., 4800., 5024., 3508., 3736., 3964., 4192., 4488., 4720., 4952., 5184., 3612., 3848., 4084., 4320., 4624., 4864., 5104., 5344., 4028., 4296., 4564., 4832., 5168., 5440., 5712., 5984., 4132., 4408., 4684., 4960., 5304., 5584., 5864., 6144., 4236., 4520., 4804., 5088., 5440., 5728., 6016., 6304., 4340., 4632., 4924., 5216., 5576., 5872., 6168., 6464., 4444., 4744., 5044., 5344., 5712., 6016., 6320., 6624., 4860., 5192., 5524., 5856., 6256., 6592., 6928., 7264., 4964., 5304., 5644., 5984., 6392., 6736., 7080., 7424., 5068., 5416., 5764., 6112., 6528., 6880., 7232., 7584., 5172., 5528., 5884., 6240., 6664., 7024., 7384., 7744., 5276., 5640., 6004., 6368., 6800., 7168., 7536., 7904.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24669., 25644., 26637., 27648., 31524., 32800., 34100., 35424., 33396., 34720., 36068., 37440., 23613., 24588., 25581., 26592., 24945., 25956., 26985., 28032., 21148., 22096., 23068., 24064., 27056., 28288., 29552., 30848., 29040., 30336., 31664., 33024., 20380., 21328., 22300., 23296., 21772., 22768., 23788., 24832., 33820., 35152., 36508., 37888., 42928., 44672., 46448., 48256., 44912., 46720., 48560., 50432., 31516., 32848., 34204., 35584., 32908., 34288., 35692., 37120., 12717., 13452., 14205., 14976., 15844., 16800., 17780., 18784., 16948., 17952., 18980., 20032., 11469., 12204., 12957., 13728., 12225., 12996., 13785., 14592., 19917., 20940., 21981., 23040., 24676., 26016., 27380., 28768., 25780., 27168., 28580., 30016., 17517., 18540., 19581., 20640., 18273., 19332., 20409., 21504.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1580., 1760., 1948., 2144., 1692., 1888., 2092., 2304., 1804., 2016., 2236., 2464., 1916., 2144., 2380., 2624., 2028., 2272., 2524., 2784., 2476., 2784., 3100., 3424., 2588., 2912., 3244., 3584., 2700., 3040., 3388., 3744., 2812., 3168., 3532., 3904., 2924., 3296., 3676., 4064., 3372., 3808., 4252., 4704., 3484., 3936., 4396., 4864., 3596., 4064., 4540., 5024., 3708., 4192., 4684., 5184., 3820., 4320., 4828., 5344., 4268., 4832., 5404., 5984., 4380., 4960., 5548., 6144., 4492., 5088., 5692., 6304., 4604., 5216., 5836., 6464., 4716., 5344., 5980., 6624., 5164., 5856., 6556., 7264., 5276., 5984., 6700., 7424., 5388., 6112., 6844., 7584., 5500., 6240., 6988., 7744., 5612., 6368., 7132., 7904.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15909., 16314., 17082., 17496., 18291., 18714., 19536., 19968., 19500., 20040., 21016., 21568., 22580., 23144., 24192., 24768., 21148., 21736., 22760., 23360., 24420., 25032., 26128., 26752., 13761., 14202., 14934., 15384., 16143., 16602., 17388., 17856., 14853., 15330., 16098., 16584., 17379., 17874., 18696., 19200.,  5660.,  5816.,  6392.,  6560.,  7172.,  7352.,  8000.,  8192.,  7312.,  7520.,  8224.,  8448.,  9200.,  9440., 10240., 10496.,  9168.,  9440., 10208., 10496., 11312., 11616., 12480., 12800.,  5612.,  5816.,  6344.,  6560.,  7124.,  7352.,  7952.,  8192.,  6812.,  7064.,  7640.,  7904.,  8516.,  8792.,  9440.,  9728., 18332., 18872., 19832., 20384., 21380., 21944., 22976., 23552., 22160., 22880., 24096., 24832., 26096., 26848., 28160., 28928., 24016., 24800., 26080., 26880., 28208., 29024., 30400., 31232., 15212., 15800., 16712., 17312., 18260., 18872., 19856., 20480., 16412., 17048., 18008., 18656., 19652., 20312., 21344., 22016.,  3621.,  3738.,  4122.,  4248.,  4659.,  4794.,  5232.,  5376.,  4652.,  4808.,  5272.,  5440.,  5940.,  6120.,  6656.,  6848.,  5788.,  5992.,  6504.,  6720.,  7268.,  7496.,  8080.,  8320.,  3393.,  3546.,  3894.,  4056.,  4431.,  4602.,  5004.,  5184.,  4101.,  4290.,  4674.,  4872.,  5283.,  5490.,  5928.,  6144., 11589., 11994., 12666., 13080., 13779., 14202., 14928., 15360., 13740., 14280., 15128., 15680., 16564., 17128., 18048., 18624., 14876., 15464., 16360., 16960., 17892., 18504., 19472., 20096.,  9057.,  9498., 10134., 10584., 11247., 11706., 12396., 12864.,  9765., 10242., 10914., 11400., 12099., 12594., 13320., 13824.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3012.,  3160.,  3368.,  3520.,  3740.,  3896.,  4128.,  4288.,  3220.,  3384.,  3608.,  3776.,  4012.,  4184.,  4432.,  4608.,  3428.,  3608.,  3848.,  4032.,  4284.,  4472.,  4736.,  4928.,  3636.,  3832.,  4088.,  4288.,  4556.,  4760.,  5040.,  5248.,  3844.,  4056.,  4328.,  4544.,  4828.,  5048.,  5344.,  5568.,  4676.,  4952.,  5288.,  5568.,  5916.,  6200.,  6560.,  6848.,  4884.,  5176.,  5528.,  5824.,  6188.,  6488.,  6864.,  7168.,  5092.,  5400.,  5768.,  6080.,  6460.,  6776.,  7168.,  7488.,  5300.,  5624.,  6008.,  6336.,  6732.,  7064.,  7472.,  7808.,  5508.,  5848.,  6248.,  6592.,  7004.,  7352.,  7776.,  8128.,  6340.,  6744.,  7208.,  7616.,  8092.,  8504.,  8992.,  9408.,  6548.,  6968.,  7448.,  7872.,  8364.,  8792.,  9296.,  9728.,  6756.,  7192.,  7688.,  8128.,  8636.,  9080.,  9600., 10048.,  6964.,  7416.,  7928.,  8384.,  8908.,  9368.,  9904., 10368.,  7172.,  7640.,  8168.,  8640.,  9180.,  9656., 10208., 10688.,  8004.,  8536.,  9128.,  9664., 10268., 10808., 11424., 11968.,  8212.,  8760.,  9368.,  9920., 10540., 11096., 11728., 12288.,  8420.,  8984.,  9608., 10176., 10812., 11384., 12032., 12608.,  8628.,  9208.,  9848., 10432., 11084., 11672., 12336., 12928.,  8836.,  9432., 10088., 10688., 11356., 11960., 12640., 13248.,  9668., 10328., 11048., 11712., 12444., 13112., 13856., 14528.,  9876., 10552., 11288., 11968., 12716., 13400., 14160., 14848., 10084., 10776., 11528., 12224., 12988., 13688., 14464., 15168., 10292., 11000., 11768., 12480., 13260., 13976., 14768., 15488., 10500., 11224., 12008., 12736., 13532., 14264., 15072., 15808.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14133., 14538., 14943., 15348., 16086., 16500., 16914., 17328., 18111., 18534., 18957., 19380., 20208., 20640., 21072., 21504., 15420., 15960., 16500., 17040., 17928., 18480., 19032., 19584., 20532., 21096., 21660., 22224., 23232., 23808., 24384., 24960., 16620., 17208., 17796., 18384., 19320., 19920., 20520., 21120., 22116., 22728., 23340., 23952., 25008., 25632., 26256., 26880.,  8265.,  8706.,  9147.,  9588., 10218., 10668., 11118., 11568., 12243., 12702., 13161., 13620., 14340., 14808., 15276., 15744.,  8877.,  9354.,  9831., 10308., 10974., 11460., 11946., 12432., 13143., 13638., 14133., 14628., 15384., 15888., 16392., 16896.,  6172.,  6328.,  6484.,  6640.,  7240.,  7408.,  7576.,  7744.,  8404.,  8584.,  8764.,  8944.,  9664.,  9856., 10048., 10240.,  7760.,  7968.,  8176.,  8384.,  9056.,  9280.,  9504.,  9728., 10480., 10720., 10960., 11200., 12032., 12288., 12544., 12800.,  9360.,  9632.,  9904., 10176., 10912., 11200., 11488., 11776., 12592., 12896., 13200., 13504., 14400., 14720., 15040., 15360.,  4492.,  4696.,  4900.,  5104.,  5560.,  5776.,  5992.,  6208.,  6724.,  6952.,  7180.,  7408.,  7984.,  8224.,  8464.,  8704.,  5308.,  5560.,  5812.,  6064.,  6568.,  6832.,  7096.,  7360.,  7924.,  8200.,  8476.,  8752.,  9376.,  9664.,  9952., 10240., 18844., 19384., 19924., 20464., 21448., 22000., 22552., 23104., 24148., 24712., 25276., 25840., 26944., 27520., 28096., 28672., 20560., 21280., 22000., 22720., 23904., 24640., 25376., 26112., 27376., 28128., 28880., 29632., 30976., 31744., 32512., 33280., 22160., 22944., 23728., 24512., 25760., 26560., 27360., 28160., 29488., 30304., 31120., 31936., 33344., 34176., 35008., 35840., 11020., 11608., 12196., 12784., 13624., 14224., 14824., 15424., 16324., 16936., 17548., 18160., 19120., 19744., 20368., 20992., 11836., 12472., 13108., 13744., 14632., 15280., 15928., 16576., 17524., 18184., 18844., 19504., 20512., 21184., 21856., 22528.,  4629.,  4746.,  4863.,  4980.,  5430.,  5556.,  5682.,  5808.,  6303.,  6438.,  6573.,  6708.,  7248.,  7392.,  7536.,  7680.,  5820.,  5976.,  6132.,  6288.,  6792.,  6960.,  7128.,  7296.,  7860.,  8040.,  8220.,  8400.,  9024.,  9216.,  9408.,  9600.,  7020.,  7224.,  7428.,  7632.,  8184.,  8400.,  8616.,  8832.,  9444.,  9672.,  9900., 10128., 10800., 11040., 11280., 11520.,  3369.,  3522.,  3675.,  3828.,  4170.,  4332.,  4494.,  4656.,  5043.,  5214.,  5385.,  5556.,  5988.,  6168.,  6348.,  6528.,  3981.,  4170.,  4359.,  4548.,  4926.,  5124.,  5322.,  5520.,  5943.,  6150.,  6357.,  6564.,  7032.,  7248.,  7464.,  7680., 14133., 14538., 14943., 15348., 16086., 16500., 16914., 17328., 18111., 18534., 18957., 19380., 20208., 20640., 21072., 21504., 15420., 15960., 16500., 17040., 17928., 18480., 19032., 19584., 20532., 21096., 21660., 22224., 23232., 23808., 24384., 24960., 16620., 17208., 17796., 18384., 19320., 19920., 20520., 21120., 22116., 22728., 23340., 23952., 25008., 25632., 26256., 26880.,  8265.,  8706.,  9147.,  9588., 10218., 10668., 11118., 11568., 12243., 12702., 13161., 13620., 14340., 14808., 15276., 15744.,  8877.,  9354.,  9831., 10308., 10974., 11460., 11946., 12432., 13143., 13638., 14133., 14628., 15384., 15888., 16392., 16896.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5876.,  6024.,  6172.,  6320.,  6584.,  6736.,  6888.,  7040.,  7324.,  7480.,  7636.,  7792.,  8096.,  8256.,  8416.,  8576.,  6276.,  6440.,  6604.,  6768.,  7048.,  7216.,  7384.,  7552.,  7852.,  8024.,  8196.,  8368.,  8688.,  8864.,  9040.,  9216.,  6676.,  6856.,  7036.,  7216.,  7512.,  7696.,  7880.,  8064.,  8380.,  8568.,  8756.,  8944.,  9280.,  9472.,  9664.,  9856.,  7076.,  7272.,  7468.,  7664.,  7976.,  8176.,  8376.,  8576.,  8908.,  9112.,  9316.,  9520.,  9872., 10080., 10288., 10496.,  7476.,  7688.,  7900.,  8112.,  8440.,  8656.,  8872.,  9088.,  9436.,  9656.,  9876., 10096., 10464., 10688., 10912., 11136.,  9076.,  9352.,  9628.,  9904., 10296., 10576., 10856., 11136., 11548., 11832., 12116., 12400., 12832., 13120., 13408., 13696.,  9476.,  9768., 10060., 10352., 10760., 11056., 11352., 11648., 12076., 12376., 12676., 12976., 13424., 13728., 14032., 14336.,  9876., 10184., 10492., 10800., 11224., 11536., 11848., 12160., 12604., 12920., 13236., 13552., 14016., 14336., 14656., 14976., 10276., 10600., 10924., 11248., 11688., 12016., 12344., 12672., 13132., 13464., 13796., 14128., 14608., 14944., 15280., 15616., 10676., 11016., 11356., 11696., 12152., 12496., 12840., 13184., 13660., 14008., 14356., 14704., 15200., 15552., 15904., 16256., 12276., 12680., 13084., 13488., 14008., 14416., 14824., 15232., 15772., 16184., 16596., 17008., 17568., 17984., 18400., 18816., 12676., 13096., 13516., 13936., 14472., 14896., 15320., 15744., 16300., 16728., 17156., 17584., 18160., 18592., 19024., 19456., 13076., 13512., 13948., 14384., 14936., 15376., 15816., 16256., 16828., 17272., 17716., 18160., 18752., 19200., 19648., 20096., 13476., 13928., 14380., 14832., 15400., 15856., 16312., 16768., 17356., 17816., 18276., 18736., 19344., 19808., 20272., 20736., 13876., 14344., 14812., 15280., 15864., 16336., 16808., 17280., 17884., 18360., 18836., 19312., 19936., 20416., 20896., 21376., 15476., 16008., 16540., 17072., 17720., 18256., 18792., 19328., 19996., 20536., 21076., 21616., 22304., 22848., 23392., 23936., 15876., 16424., 16972., 17520., 18184., 18736., 19288., 19840., 20524., 21080., 21636., 22192., 22896., 23456., 24016., 24576., 16276., 16840., 17404., 17968., 18648., 19216., 19784., 20352., 21052., 21624., 22196., 22768., 23488., 24064., 24640., 25216., 16676., 17256., 17836., 18416., 19112., 19696., 20280., 20864., 21580., 22168., 22756., 23344., 24080., 24672., 25264., 25856., 17076., 17672., 18268., 18864., 19576., 20176., 20776., 21376., 22108., 22712., 23316., 23920., 24672., 25280., 25888., 26496., 18676., 19336., 19996., 20656., 21432., 22096., 22760., 23424., 24220., 24888., 25556., 26224., 27040., 27712., 28384., 29056., 19076., 19752., 20428., 21104., 21896., 22576., 23256., 23936., 24748., 25432., 26116., 26800., 27632., 28320., 29008., 29696., 19476., 20168., 20860., 21552., 22360., 23056., 23752., 24448., 25276., 25976., 26676., 27376., 28224., 28928., 29632., 30336., 19876., 20584., 21292., 22000., 22824., 23536., 24248., 24960., 25804., 26520., 27236., 27952., 28816., 29536., 30256., 30976., 20276., 21000., 21724., 22448., 23288., 24016., 24744., 25472., 26332., 27064., 27796., 28528., 29408., 30144., 30880., 31616.};
  const std::array<int, 4> in_shape = {{ 1, 8, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6500.,  7885.,  8080.,  6230.,  6380.,  8200.,  9930., 10140.,  7800.,  7960.,  9960., 12030., 12240.,  9400.,  9560.,  5420.,  6460.,  6580.,  4970.,  5060.,  6440.,  7660.,  7780.,  5870.,  5960.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 371.,  392.,  413.,  434.,  455.,  581.,  602.,  623.,  644.,  665.,  791.,  812.,  833.,  854.,  875., 1001., 1022., 1043., 1064., 1085., 1211., 1232., 1253., 1274., 1295.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12580., 13000., 15245., 15770., 15620., 16160., 12028., 12460., 12316., 12760., 15840., 16400., 19160., 19860., 19560., 20280., 15024., 15600., 15328., 15920., 19200., 19920., 23160., 24060., 23560., 24480., 18064., 18800., 18368., 19120., 10300., 10840., 12245., 12920., 12470., 13160.,  9388.,  9940.,  9556., 10120., 12220., 12880., 14495., 15320., 14720., 15560., 11068., 11740., 11236., 11920.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 664.,  742.,  700.,  784.,  736.,  826.,  772.,  868.,  808.,  910., 1024., 1162., 1060., 1204., 1096., 1246., 1132., 1288., 1168., 1330., 1384., 1582., 1420., 1624., 1456., 1666., 1492., 1708., 1528., 1750., 1744., 2002., 1780., 2044., 1816., 2086., 1852., 2128., 1888., 2170., 2104., 2422., 2140., 2464., 2176., 2506., 2212., 2548., 2248., 2590.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24740., 25160., 25580., 26000., 29965., 30490., 31015., 31540., 30700., 31240., 31780., 32320., 23624., 24056., 24488., 24920., 24188., 24632., 25076., 25520., 31120., 31680., 32240., 32800., 37620., 38320., 39020., 39720., 38400., 39120., 39840., 40560., 29472., 30048., 30624., 31200., 30064., 30656., 31248., 31840., 37680., 38400., 39120., 39840., 45420., 46320., 47220., 48120., 46200., 47120., 48040., 48960., 35392., 36128., 36864., 37600., 35984., 36736., 37488., 38240., 20060., 20600., 21140., 21680., 23815., 24490., 25165., 25840., 24250., 24940., 25630., 26320., 18224., 18776., 19328., 19880., 18548., 19112., 19676., 20240., 23780., 24440., 25100., 25760., 28165., 28990., 29815., 30640., 28600., 29440., 30280., 31120., 21464., 22136., 22808., 23480., 21788., 22472., 23156., 23840.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1250., 1328., 1406., 1484., 1316., 1400., 1484., 1568., 1382., 1472., 1562., 1652., 1448., 1544., 1640., 1736., 1514., 1616., 1718., 1820., 1910., 2048., 2186., 2324., 1976., 2120., 2264., 2408., 2042., 2192., 2342., 2492., 2108., 2264., 2420., 2576., 2174., 2336., 2498., 2660., 2570., 2768., 2966., 3164., 2636., 2840., 3044., 3248., 2702., 2912., 3122., 3332., 2768., 2984., 3200., 3416., 2834., 3056., 3278., 3500., 3230., 3488., 3746., 4004., 3296., 3560., 3824., 4088., 3362., 3632., 3902., 4172., 3428., 3704., 3980., 4256., 3494., 3776., 4058., 4340., 3890., 4208., 4526., 4844., 3956., 4280., 4604., 4928., 4022., 4352., 4682., 5012., 4088., 4424., 4760., 5096., 4154., 4496., 4838., 5180.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24848., 26000., 30115., 31540., 30865., 32320., 23768., 24920., 24344., 25520., 31344., 32800., 37920., 39720., 38720., 40560., 29744., 31200., 30352., 31840., 38064., 39840., 45920., 48120., 46720., 48960., 35824., 37600., 36432., 38240., 20408., 21680., 24265., 25840., 24715., 26320., 18608., 19880., 18944., 20240., 24248., 25760., 28765., 30640., 29215., 31120., 21968., 23480., 22304., 23840.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1292., 1484., 1364., 1568., 1436., 1652., 1508., 1736., 1580., 1820., 2012., 2324., 2084., 2408., 2156., 2492., 2228., 2576., 2300., 2660., 2732., 3164., 2804., 3248., 2876., 3332., 2948., 3416., 3020., 3500., 3452., 4004., 3524., 4088., 3596., 4172., 3668., 4256., 3740., 4340., 4172., 4844., 4244., 4928., 4316., 5012., 4388., 5096., 4460., 5180.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {48868., 49696., 51160., 52000., 59195., 60230., 62030., 63080., 60665., 61730., 63560., 64640., 46684., 47536., 48976., 49840., 47812., 48688., 50152., 51040., 42384., 43232., 44768., 45632., 46428., 47424., 49240., 50256., 47988., 49024., 50880., 51936., 31856., 32608., 33984., 34752., 33040., 33824., 35232., 36032., 38352., 39264., 40864., 41792., 45900., 47040., 49000., 50160., 47460., 48640., 50640., 51840., 35888., 36832., 38400., 39360., 37072., 38048., 39648., 40640., 25668., 26480., 27688., 28512., 26843., 27794., 29210., 30176., 27713., 28694., 30140., 31136., 17308., 18016., 19072., 19792., 17956., 18688., 19768., 20512., 21076., 21872., 23064., 23872., 24535., 25530., 26990., 28000., 25405., 26430., 27920., 28960., 18540., 19360., 20528., 21360., 19188., 20032., 21224., 22080.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2434.,  2584.,  2812.,  2968.,  2566.,  2728.,  2968.,  3136.,  2698.,  2872.,  3124.,  3304.,  2830.,  3016.,  3280.,  3472.,  2962.,  3160.,  3436.,  3640.,  3754.,  4024.,  4372.,  4648.,  3886.,  4168.,  4528.,  4816.,  4018.,  4312.,  4684.,  4984.,  4150.,  4456.,  4840.,  5152.,  4282.,  4600.,  4996.,  5320.,  5074.,  5464.,  5932.,  6328.,  5206.,  5608.,  6088.,  6496.,  5338.,  5752.,  6244.,  6664.,  5470.,  5896.,  6400.,  6832.,  5602.,  6040.,  6556.,  7000.,  6394.,  6904.,  7492.,  8008.,  6526.,  7048.,  7648.,  8176.,  6658.,  7192.,  7804.,  8344.,  6790.,  7336.,  7960.,  8512.,  6922.,  7480.,  8116.,  8680.,  7714.,  8344.,  9052.,  9688.,  7846.,  8488.,  9208.,  9856.,  7978.,  8632.,  9364., 10024.,  8110.,  8776.,  9520., 10192.,  8242.,  8920.,  9676., 10360.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8012.,  8392.,  8772.,  9152.,  9896., 10288., 10680., 11072., 11051., 11510., 11969., 12428., 13378., 13852., 14326., 14800., 11913., 12402., 12891., 13380., 14360., 14864., 15368., 15872.,  9060.,  9400.,  9740., 10080., 10816., 11168., 11520., 11872.,  9756., 10120., 10484., 10848., 11608., 11984., 12360., 12736., 10960., 11424., 11888., 12352., 13280., 13760., 14240., 14720., 16404., 16952., 17500., 18048., 19192., 19760., 20328., 20896., 17436., 18024., 18612., 19200., 20384., 20992., 21600., 22208., 15024., 15456., 15888., 16320., 17216., 17664., 18112., 18560., 15824., 16288., 16752., 17216., 18144., 18624., 19104., 19584., 14032., 14496., 14960., 15424., 16352., 16832., 17312., 17792., 15588., 16152., 16716., 17280., 18440., 19024., 19608., 20192., 16620., 17224., 17828., 18432., 19632., 20256., 20880., 21504.,  9904., 10336., 10768., 11200., 12096., 12544., 12992., 13440., 10704., 11168., 11632., 12096., 13024., 13504., 13984., 14464., 10844., 11272., 11700., 12128., 12952., 13392., 13832., 14272., 11135., 11638., 12141., 12644., 13614., 14132., 14650., 15168., 11949., 12482., 13015., 13548., 14548., 15096., 15644., 16192.,  8180.,  8568.,  8956.,  9344., 10096., 10496., 10896., 11296.,  8812.,  9224.,  9636., 10048., 10824., 11248., 11672., 12096.,  9292.,  9640.,  9988., 10336., 11080., 11440., 11800., 12160., 11211., 11630., 12049., 12468., 13354., 13788., 14222., 14656., 12025., 12474., 12923., 13372., 14288., 14752., 15216., 15680., 10084., 10392., 10700., 11008., 11680., 12000., 12320., 12640., 10716., 11048., 11380., 11712., 12408., 12752., 13096., 13440.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4718.,  4868.,  5018.,  5168.,  5468.,  5624.,  5780.,  5936.,  4970.,  5132.,  5294.,  5456.,  5768.,  5936.,  6104.,  6272.,  5222.,  5396.,  5570.,  5744.,  6068.,  6248.,  6428.,  6608.,  5474.,  5660.,  5846.,  6032.,  6368.,  6560.,  6752.,  6944.,  5726.,  5924.,  6122.,  6320.,  6668.,  6872.,  7076.,  7280.,  7238.,  7508.,  7778.,  8048.,  8468.,  8744.,  9020.,  9296.,  7490.,  7772.,  8054.,  8336.,  8768.,  9056.,  9344.,  9632.,  7742.,  8036.,  8330.,  8624.,  9068.,  9368.,  9668.,  9968.,  7994.,  8300.,  8606.,  8912.,  9368.,  9680.,  9992., 10304.,  8246.,  8564.,  8882.,  9200.,  9668.,  9992., 10316., 10640.,  9758., 10148., 10538., 10928., 11468., 11864., 12260., 12656., 10010., 10412., 10814., 11216., 11768., 12176., 12584., 12992., 10262., 10676., 11090., 11504., 12068., 12488., 12908., 13328., 10514., 10940., 11366., 11792., 12368., 12800., 13232., 13664., 10766., 11204., 11642., 12080., 12668., 13112., 13556., 14000., 12278., 12788., 13298., 13808., 14468., 14984., 15500., 16016., 12530., 13052., 13574., 14096., 14768., 15296., 15824., 16352., 12782., 13316., 13850., 14384., 15068., 15608., 16148., 16688., 13034., 13580., 14126., 14672., 15368., 15920., 16472., 17024., 13286., 13844., 14402., 14960., 15668., 16232., 16796., 17360., 14798., 15428., 16058., 16688., 17468., 18104., 18740., 19376., 15050., 15692., 16334., 16976., 17768., 18416., 19064., 19712., 15302., 15956., 16610., 17264., 18068., 18728., 19388., 20048., 15554., 16220., 16886., 17552., 18368., 19040., 19712., 20384., 15806., 16484., 17162., 17840., 18668., 19352., 20036., 20720.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {40420., 41792., 43188., 44608., 47383., 49036., 50719., 52432., 50323., 52036., 53779., 55552., 34436., 35680., 36948., 38240., 36692., 37984., 39300., 40640., 40848., 42432., 44048., 45696., 44588., 46464., 48380., 50336., 47708., 49664., 51660., 53696., 31248., 32704., 34192., 35712., 33616., 35136., 36688., 38272., 37264., 38848., 40464., 42112., 43788., 45696., 47644., 49632., 46908., 48896., 50924., 52992., 33296., 34752., 36240., 37760., 35664., 37184., 38736., 40320., 23060., 24288., 25540., 26816., 23683., 25124., 26595., 28096., 25423., 26924., 28455., 30016., 15220., 16320., 17444., 18592., 16516., 17664., 18836., 20032., 20916., 21984., 23076., 24192., 24443., 25716., 27019., 28352., 26183., 27516., 28879., 30272., 19348., 20288., 21252., 22240., 20644., 21632., 22644., 23680.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4802.,  5168.,  5546.,  5936.,  5066.,  5456.,  5858.,  6272.,  5330.,  5744.,  6170.,  6608.,  5594.,  6032.,  6482.,  6944.,  5858.,  6320.,  6794.,  7280.,  7442.,  8048.,  8666.,  9296.,  7706.,  8336.,  8978.,  9632.,  7970.,  8624.,  9290.,  9968.,  8234.,  8912.,  9602., 10304.,  8498.,  9200.,  9914., 10640., 10082., 10928., 11786., 12656., 10346., 11216., 12098., 12992., 10610., 11504., 12410., 13328., 10874., 11792., 12722., 13664., 11138., 12080., 13034., 14000., 12722., 13808., 14906., 16016., 12986., 14096., 15218., 16352., 13250., 14384., 15530., 16688., 13514., 14672., 15842., 17024., 13778., 14960., 16154., 17360., 15362., 16688., 18026., 19376., 15626., 16976., 18338., 19712., 15890., 17264., 18650., 20048., 16154., 17552., 18962., 20384., 16418., 17840., 19274., 20720.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10204., 10568., 11272., 11648., 12388., 12776., 13552., 13952., 12967., 13358., 14210., 14616., 15513., 15934., 16876., 17312., 14691., 15142., 16054., 16520., 17477., 17958., 18960., 19456.,  8684.,  8968.,  9624.,  9920., 10612., 10920., 11648., 11968., 10076., 10408., 11112., 11456., 12196., 12552., 13328., 13696., 13456., 13984., 14944., 15488., 16496., 17056., 18112., 18688., 15396., 15960., 17080., 17664., 18844., 19448., 20688., 21312., 17460., 18104., 19304., 19968., 21228., 21912., 23232., 23936., 13904., 14368., 15264., 15744., 16688., 17184., 18176., 18688., 15504., 16032., 16992., 17536., 18544., 19104., 20160., 20736., 12944., 13472., 14432., 14976., 15984., 16544., 17600., 18176., 13764., 14360., 15512., 16128., 17340., 17976., 19248., 19904., 15828., 16504., 17736., 18432., 19724., 20440., 21792., 22528.,  9296.,  9760., 10656., 11136., 12080., 12576., 13568., 14080., 10896., 11424., 12384., 12928., 13936., 14496., 15552., 16128., 12252., 12712., 13544., 14016., 14884., 15368., 16272., 16768., 13159., 13638., 14554., 15048., 16009., 16518., 17524., 18048., 14787., 15326., 16302., 16856., 17877., 18446., 19512., 20096., 11564., 11944., 12664., 13056., 13812., 14216., 15008., 15424., 12828., 13256., 14024., 14464., 15268., 15720., 16560., 17024., 10236., 10600., 11336., 11712., 12484., 12872., 13680., 14080., 11903., 12342., 13218., 13672., 14593., 15062., 16028., 16512., 13531., 14030., 14966., 15480., 16461., 16990., 18016., 18560., 10380., 10728., 11416., 11776., 12500., 12872., 13632., 14016., 11644., 12040., 12776., 13184., 13956., 14376., 15184., 15616.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9310.,  9604., 10036., 10336., 10786., 11092., 11560., 11872.,  9814., 10132., 10588., 10912., 11386., 11716., 12208., 12544., 10318., 10660., 11140., 11488., 11986., 12340., 12856., 13216., 10822., 11188., 11692., 12064., 12586., 12964., 13504., 13888., 11326., 11716., 12244., 12640., 13186., 13588., 14152., 14560., 14350., 14884., 15556., 16096., 16786., 17332., 18040., 18592., 14854., 15412., 16108., 16672., 17386., 17956., 18688., 19264., 15358., 15940., 16660., 17248., 17986., 18580., 19336., 19936., 15862., 16468., 17212., 17824., 18586., 19204., 19984., 20608., 16366., 16996., 17764., 18400., 19186., 19828., 20632., 21280., 19390., 20164., 21076., 21856., 22786., 23572., 24520., 25312., 19894., 20692., 21628., 22432., 23386., 24196., 25168., 25984., 20398., 21220., 22180., 23008., 23986., 24820., 25816., 26656., 20902., 21748., 22732., 23584., 24586., 25444., 26464., 27328., 21406., 22276., 23284., 24160., 25186., 26068., 27112., 28000., 24430., 25444., 26596., 27616., 28786., 29812., 31000., 32032., 24934., 25972., 27148., 28192., 29386., 30436., 31648., 32704., 25438., 26500., 27700., 28768., 29986., 31060., 32296., 33376., 25942., 27028., 28252., 29344., 30586., 31684., 32944., 34048., 26446., 27556., 28804., 29920., 31186., 32308., 33592., 34720., 29470., 30724., 32116., 33376., 34786., 36052., 37480., 38752., 29974., 31252., 32668., 33952., 35386., 36676., 38128., 39424., 30478., 31780., 33220., 34528., 35986., 37300., 38776., 40096., 30982., 32308., 33772., 35104., 36586., 37924., 39424., 40768., 31486., 32836., 34324., 35680., 37186., 38548., 40072., 41440.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11276., 11640., 12004., 12368., 13080., 13456., 13832., 14208., 14980., 15368., 15756., 16144., 16976., 17376., 17776., 18176., 12295., 12686., 13077., 13468., 14318., 14724., 15130., 15536., 16461., 16882., 17303., 17724., 18724., 19160., 19596., 20032., 13891., 14342., 14793., 15244., 16154., 16620., 17086., 17552., 18537., 19018., 19499., 19980., 21040., 21536., 22032., 22528.,  6460.,  6744.,  7028.,  7312.,  7944.,  8240.,  8536.,  8832.,  9524.,  9832., 10140., 10448., 11200., 11520., 11840., 12160.,  7660.,  7992.,  8324.,  8656.,  9336.,  9680., 10024., 10368., 11108., 11464., 11820., 12176., 12976., 13344., 13712., 14080., 11152., 11680., 12208., 12736., 13728., 14272., 14816., 15360., 16432., 16992., 17552., 18112., 19264., 19840., 20416., 20992., 13332., 13896., 14460., 15024., 16168., 16752., 17336., 17920., 19164., 19768., 20372., 20976., 22320., 22944., 23568., 24192., 15332., 15976., 16620., 17264., 18488., 19152., 19816., 20480., 21804., 22488., 23172., 23856., 25280., 25984., 26688., 27392., 13648., 14112., 14576., 15040., 15968., 16448., 16928., 17408., 18416., 18912., 19408., 19904., 20992., 21504., 22016., 22528., 15248., 15776., 16304., 16832., 17824., 18368., 18912., 19456., 20528., 21088., 21648., 22208., 23360., 23936., 24512., 25088., 15248., 15776., 16304., 16832., 17824., 18368., 18912., 19456., 20528., 21088., 21648., 22208., 23360., 23936., 24512., 25088., 14132., 14728., 15324., 15920., 17096., 17712., 18328., 18944., 20220., 20856., 21492., 22128., 23504., 24160., 24816., 25472., 16132., 16808., 17484., 18160., 19416., 20112., 20808., 21504., 22860., 23576., 24292., 25008., 26464., 27200., 27936., 28672.,  9552., 10016., 10480., 10944., 11872., 12352., 12832., 13312., 14320., 14816., 15312., 15808., 16896., 17408., 17920., 18432., 11152., 11680., 12208., 12736., 13728., 14272., 14816., 15360., 16432., 16992., 17552., 18112., 19264., 19840., 20416., 20992., 10860., 11320., 11780., 12240., 13048., 13520., 13992., 14464., 15332., 15816., 16300., 16784., 17712., 18208., 18704., 19200., 13103., 13582., 14061., 14540., 15430., 15924., 16418., 16912., 17877., 18386., 18895., 19404., 20444., 20968., 21492., 22016., 14507., 15046., 15585., 16124., 17074., 17628., 18182., 18736., 19761., 20330., 20899., 21468., 22568., 23152., 23736., 24320., 11676., 12056., 12436., 12816., 13544., 13936., 14328., 14720., 15508., 15912., 16316., 16720., 17568., 17984., 18400., 18816., 12876., 13304., 13732., 14160., 14936., 15376., 15816., 16256., 17092., 17544., 17996., 18448., 19344., 19808., 20272., 20736.,  7948.,  8312.,  8676.,  9040.,  9752., 10128., 10504., 10880., 11652., 12040., 12428., 12816., 13648., 14048., 14448., 14848.,  9095.,  9534.,  9973., 10412., 11262., 11716., 12170., 12624., 13549., 14018., 14487., 14956., 15956., 16440., 16924., 17408., 10499., 10998., 11497., 11996., 12906., 13420., 13934., 14448., 15433., 15962., 16491., 17020., 18080., 18624., 19168., 19712.,  8828.,  9176.,  9524.,  9872., 10568., 10928., 11288., 11648., 12404., 12776., 13148., 13520., 14336., 14720., 15104., 15488., 10028., 10424., 10820., 11216., 11960., 12368., 12776., 13184., 13988., 14408., 14828., 15248., 16112., 16544., 16976., 17408.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18326., 18620., 18914., 19208., 19772., 20072., 20372., 20672., 21266., 21572., 21878., 22184., 22808., 23120., 23432., 23744., 19310., 19628., 19946., 20264., 20852., 21176., 21500., 21824., 22442., 22772., 23102., 23432., 24080., 24416., 24752., 25088., 20294., 20636., 20978., 21320., 21932., 22280., 22628., 22976., 23618., 23972., 24326., 24680., 25352., 25712., 26072., 26432., 21278., 21644., 22010., 22376., 23012., 23384., 23756., 24128., 24794., 25172., 25550., 25928., 26624., 27008., 27392., 27776., 22262., 22652., 23042., 23432., 24092., 24488., 24884., 25280., 25970., 26372., 26774., 27176., 27896., 28304., 28712., 29120.,  9478.,  9756., 10034., 10312., 10860., 11144., 11428., 11712., 12290., 12580., 12870., 13160., 13768., 14064., 14360., 14656., 10462., 10764., 11066., 11368., 11940., 12248., 12556., 12864., 13466., 13780., 14094., 14408., 15040., 15360., 15680., 16000.,  5174.,  5372.,  5570.,  5768.,  6236.,  6440.,  6644.,  6848.,  7346.,  7556.,  7766.,  7976.,  8504.,  8720.,  8936.,  9152.,  6158.,  6380.,  6602.,  6824.,  7316.,  7544.,  7772.,  8000.,  8522.,  8756.,  8990.,  9224.,  9776., 10016., 10256., 10496.,  7142.,  7388.,  7634.,  7880.,  8396.,  8648.,  8900.,  9152.,  9698.,  9956., 10214., 10472., 11048., 11312., 11576., 11840., 13046., 13436., 13826., 14216., 14876., 15272., 15668., 16064., 16754., 17156., 17558., 17960., 18680., 19088., 19496., 19904., 14030., 14444., 14858., 15272., 15956., 16376., 16796., 17216., 17930., 18356., 18782., 19208., 19952., 20384., 20816., 21248., 15014., 15452., 15890., 16328., 17036., 17480., 17924., 18368., 19106., 19556., 20006., 20456., 21224., 21680., 22136., 22592., 15998., 16460., 16922., 17384., 18116., 18584., 19052., 19520., 20282., 20756., 21230., 21704., 22496., 22976., 23456., 23936., 16982., 17468., 17954., 18440., 19196., 19688., 20180., 20672., 21458., 21956., 22454., 22952., 23768., 24272., 24776., 25280., 16486., 16860., 17234., 17608., 18252., 18632., 19012., 19392., 20066., 20452., 20838., 21224., 21928., 22320., 22712., 23104., 17470., 17868., 18266., 18664., 19332., 19736., 20140., 20544., 21242., 21652., 22062., 22472., 23200., 23616., 24032., 24448., 18326., 18620., 18914., 19208., 19772., 20072., 20372., 20672., 21266., 21572., 21878., 22184., 22808., 23120., 23432., 23744., 19310., 19628., 19946., 20264., 20852., 21176., 21500., 21824., 22442., 22772., 23102., 23432., 24080., 24416., 24752., 25088., 20294., 20636., 20978., 21320., 21932., 22280., 22628., 22976., 23618., 23972., 24326., 24680., 25352., 25712., 26072., 26432., 15830., 16188., 16546., 16904., 17532., 17896., 18260., 18624., 19282., 19652., 20022., 20392., 21080., 21456., 21832., 22208., 16814., 17196., 17578., 17960., 18612., 19000., 19388., 19776., 20458., 20852., 21246., 21640., 22352., 22752., 23152., 23552.,  9478.,  9756., 10034., 10312., 10860., 11144., 11428., 11712., 12290., 12580., 12870., 13160., 13768., 14064., 14360., 14656., 10462., 10764., 11066., 11368., 11940., 12248., 12556., 12864., 13466., 13780., 14094., 14408., 15040., 15360., 15680., 16000.,  5174.,  5372.,  5570.,  5768.,  6236.,  6440.,  6644.,  6848.,  7346.,  7556.,  7766.,  7976.,  8504.,  8720.,  8936.,  9152.};
  const std::array<int, 4> in_shape = {{ 1, 8, 10, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5692.,  5848.,  7560.,  5464.,  5608.,  6815.,  6980.,  9010.,  6500.,  6650.,  7970.,  8135., 10480.,  7550.,  7700.,  4960.,  5068.,  6464.,  4600.,  4696.,  5716.,  5824.,  7416.,  5272.,  5368.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 451.,  472.,  493.,  514.,  535.,  598.,  619.,  640.,  661.,  682.,  745.,  766.,  787.,  808.,  829.,  892.,  913.,  934.,  955.,  976., 1039., 1060., 1081., 1102., 1123.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11012., 11384., 11312., 11696., 14608., 15120., 10544., 10928., 10820., 11216., 13165., 13630., 13480., 13960., 17380., 18020., 12520., 13000., 12805., 13300., 15370., 15940., 15685., 16270., 20180., 20960., 14515., 15100., 14800., 15400.,  9464.,  9920.,  9668., 10136., 12304., 12928.,  8732.,  9200.,  8912.,  9392., 10892., 11432., 11096., 11648., 14096., 14832.,  9992., 10544., 10172., 10736.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 806.,  902.,  842.,  944.,  878.,  986.,  914., 1028.,  950., 1070., 1058., 1196., 1094., 1238., 1130., 1280., 1166., 1322., 1202., 1364., 1310., 1490., 1346., 1532., 1382., 1574., 1418., 1616., 1454., 1658., 1562., 1784., 1598., 1826., 1634., 1868., 1670., 1910., 1706., 1952., 1814., 2078., 1850., 2120., 1886., 2162., 1922., 2204., 1958., 2246.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21652., 22024., 22396., 22768., 22240., 22624., 23008., 23392., 28704., 29216., 29728., 30240., 20704., 21088., 21472., 21856., 21244., 21640., 22036., 22432., 25865., 26330., 26795., 27260., 26480., 26960., 27440., 27920., 34120., 34760., 35400., 36040., 24560., 25040., 25520., 26000., 25115., 25610., 26105., 26600., 30170., 30740., 31310., 31880., 30785., 31370., 31955., 32540., 39580., 40360., 41140., 41920., 28445., 29030., 29615., 30200., 29000., 29600., 30200., 30800., 18472., 18928., 19384., 19840., 18868., 19336., 19804., 20272., 23984., 24608., 25232., 25856., 16996., 17464., 17932., 18400., 17344., 17824., 18304., 18784., 21244., 21784., 22324., 22864., 21640., 22192., 22744., 23296., 27456., 28192., 28928., 29664., 19432., 19984., 20536., 21088., 19780., 20344., 20908., 21472.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1516., 1612., 1708., 1804., 1582., 1684., 1786., 1888., 1648., 1756., 1864., 1972., 1714., 1828., 1942., 2056., 1780., 1900., 2020., 2140., 1978., 2116., 2254., 2392., 2044., 2188., 2332., 2476., 2110., 2260., 2410., 2560., 2176., 2332., 2488., 2644., 2242., 2404., 2566., 2728., 2440., 2620., 2800., 2980., 2506., 2692., 2878., 3064., 2572., 2764., 2956., 3148., 2638., 2836., 3034., 3232., 2704., 2908., 3112., 3316., 2902., 3124., 3346., 3568., 2968., 3196., 3424., 3652., 3034., 3268., 3502., 3736., 3100., 3340., 3580., 3820., 3166., 3412., 3658., 3904., 3364., 3628., 3892., 4156., 3430., 3700., 3970., 4240., 3496., 3772., 4048., 4324., 3562., 3844., 4126., 4408., 3628., 3916., 4204., 4492.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21724., 22768., 22324., 23392., 28832., 30240., 20812., 21856., 21364., 22432., 26015., 27260., 26645., 27920., 34360., 36040., 24755., 26000., 25325., 26600., 30425., 31880., 31055., 32540., 39960., 41920., 28745., 30200., 29315., 30800., 18724., 19840., 19132., 20272., 24352., 25856., 17284., 18400., 17644., 18784., 21580., 22864., 21988., 23296., 27936., 29664., 19804., 21088., 20164., 21472.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1576., 1804., 1648., 1888., 1720., 1972., 1792., 2056., 1864., 2140., 2080., 2392., 2152., 2476., 2224., 2560., 2296., 2644., 2368., 2728., 2584., 2980., 2656., 3064., 2728., 3148., 2800., 3232., 2872., 3316., 3088., 3568., 3160., 3652., 3232., 3736., 3304., 3820., 3376., 3904., 3592., 4156., 3664., 4240., 3736., 4324., 3808., 4408., 3880., 4492.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10268., 10616., 11384., 11744., 11060., 11432., 12224., 12608., 13904., 14400., 15424., 15936.,  9572.,  9944., 10688., 11072., 10268., 10664., 11432., 11840., 13099., 13566., 14486., 14968., 13945., 14442., 15392., 15904., 15620., 16240., 17424., 18064., 11957., 12454., 13344., 13856., 10315., 10778., 11634., 12112., 12621., 13042., 13916., 14352., 13147., 13534., 14374., 14776., 16748., 17328., 18472., 19072., 11599., 11986., 12766., 13168., 12325., 12742., 13552., 13984., 15876., 16328., 17200., 17664., 16668., 17144., 18040., 18528., 19952., 20544., 21664., 22272., 14764., 15240., 16088., 16576., 14116., 14552., 15360., 15808., 10924., 11288., 12072., 12448.,  8324.,  8648.,  9392.,  9728., 13520., 14016., 15040., 15552.,  7028.,  7352.,  8048.,  8384.,  7724.,  8072.,  8792.,  9152.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2966., 3152., 3416., 3608., 3098., 3296., 3572., 3776., 3230., 3440., 3728., 3944., 3362., 3584., 3884., 4112., 3494., 3728., 4040., 4280., 3890., 4160., 4508., 4784., 4022., 4304., 4664., 4952., 4154., 4448., 4820., 5120., 4286., 4592., 4976., 5288., 4418., 4736., 5132., 5456., 4814., 5168., 5600., 5960., 4946., 5312., 5756., 6128., 5078., 5456., 5912., 6296., 5210., 5600., 6068., 6464., 5342., 5744., 6224., 6632., 5738., 6176., 6692., 7136., 5870., 6320., 6848., 7304., 6002., 6464., 7004., 7472., 6134., 6608., 7160., 7640., 6266., 6752., 7316., 7808., 6662., 7184., 7784., 8312., 6794., 7328., 7940., 8480., 6926., 7472., 8096., 8648., 7058., 7616., 8252., 8816., 7190., 7760., 8408., 8984.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9052.,  9400.,  9748., 10096., 10888., 11248., 11608., 11968.,  9844., 10216., 10588., 10960., 11776., 12160., 12544., 12928., 11440., 11936., 12432., 12928., 13952., 14464., 14976., 15488.,  6868.,  7240.,  7612.,  7984.,  8704.,  9088.,  9472.,  9856.,  7468.,  7864.,  8260.,  8656.,  9400.,  9808., 10216., 10624., 13315., 13782., 14249., 14716., 15690., 16172., 16654., 17136., 14209., 14706., 15203., 15700., 16704., 17216., 17728., 18240., 15772., 16392., 17012., 17632., 18848., 19488., 20128., 20768., 10233., 10730., 11227., 11724., 12608., 13120., 13632., 14144., 10311., 10774., 11237., 11700., 12550., 13028., 13506., 13984., 15221., 15642., 16063., 16484., 17412., 17848., 18284., 18720., 15539., 15926., 16313., 16700., 17594., 17996., 18398., 18800., 19092., 19672., 20252., 20832., 22008., 22608., 23208., 23808., 12443., 12830., 13217., 13604., 14378., 14780., 15182., 15584., 13097., 13514., 13931., 14348., 15152., 15584., 16016., 16448., 16324., 16776., 17228., 17680., 18576., 19040., 19504., 19968., 17116., 17592., 18068., 18544., 19464., 19952., 20440., 20928., 18320., 18912., 19504., 20096., 21216., 21824., 22432., 23040., 13308., 13784., 14260., 14736., 15560., 16048., 16536., 17024., 11284., 11720., 12156., 12592., 13376., 13824., 14272., 14720.,  9324.,  9688., 10052., 10416., 11224., 11600., 11976., 12352.,  7492.,  7816.,  8140.,  8464.,  9232.,  9568.,  9904., 10240., 10672., 11168., 11664., 12160., 13184., 13696., 14208., 14720.,  4900.,  5224.,  5548.,  5872.,  6544.,  6880.,  7216.,  7552.,  5500.,  5848.,  6196.,  6544.,  7240.,  7600.,  7960.,  8320.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5746.,  5932.,  6118.,  6304.,  6640.,  6832.,  7024.,  7216.,  5998.,  6196.,  6394.,  6592.,  6940.,  7144.,  7348.,  7552.,  6250.,  6460.,  6670.,  6880.,  7240.,  7456.,  7672.,  7888.,  6502.,  6724.,  6946.,  7168.,  7540.,  7768.,  7996.,  8224.,  6754.,  6988.,  7222.,  7456.,  7840.,  8080.,  8320.,  8560.,  7510.,  7780.,  8050.,  8320.,  8740.,  9016.,  9292.,  9568.,  7762.,  8044.,  8326.,  8608.,  9040.,  9328.,  9616.,  9904.,  8014.,  8308.,  8602.,  8896.,  9340.,  9640.,  9940., 10240.,  8266.,  8572.,  8878.,  9184.,  9640.,  9952., 10264., 10576.,  8518.,  8836.,  9154.,  9472.,  9940., 10264., 10588., 10912.,  9274.,  9628.,  9982., 10336., 10840., 11200., 11560., 11920.,  9526.,  9892., 10258., 10624., 11140., 11512., 11884., 12256.,  9778., 10156., 10534., 10912., 11440., 11824., 12208., 12592., 10030., 10420., 10810., 11200., 11740., 12136., 12532., 12928., 10282., 10684., 11086., 11488., 12040., 12448., 12856., 13264., 11038., 11476., 11914., 12352., 12940., 13384., 13828., 14272., 11290., 11740., 12190., 12640., 13240., 13696., 14152., 14608., 11542., 12004., 12466., 12928., 13540., 14008., 14476., 14944., 11794., 12268., 12742., 13216., 13840., 14320., 14800., 15280., 12046., 12532., 13018., 13504., 14140., 14632., 15124., 15616., 12802., 13324., 13846., 14368., 15040., 15568., 16096., 16624., 13054., 13588., 14122., 14656., 15340., 15880., 16420., 16960., 13306., 13852., 14398., 14944., 15640., 16192., 16744., 17296., 13558., 14116., 14674., 15232., 15940., 16504., 17068., 17632., 13810., 14380., 14950., 15520., 16240., 16816., 17392., 17968.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {34924., 36208., 37516., 38848., 37276., 38608., 39964., 41344., 48048., 49792., 51568., 53376., 34348., 35632., 36940., 38272., 36508., 37840., 39196., 40576., 45935., 47484., 49063., 50672., 48395., 50004., 51643., 53312., 58620., 60640., 62700., 64800., 44479., 46028., 47607., 49216., 41963., 43444., 44955., 46496., 33971., 35428., 36915., 38432., 27599., 28988., 30407., 31856., 43468., 45408., 47388., 49408., 24563., 25892., 27251., 28640., 26783., 28172., 29591., 31040., 31356., 32656., 33980., 35328., 32940., 34288., 35660., 37056., 39408., 41088., 42800., 44544., 29180., 30480., 31804., 33152., 27884., 29104., 30348., 31616., 21452., 22576., 23724., 24896., 16252., 17296., 18364., 19456., 26544., 28032., 29552., 31104., 13708., 14704., 15724., 16768., 15100., 16144., 17212., 18304.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5866.,  6304.,  6754.,  7216.,  6130.,  6592.,  7066.,  7552.,  6394.,  6880.,  7378.,  7888.,  6658.,  7168.,  7690.,  8224.,  6922.,  7456.,  8002.,  8560.,  7714.,  8320.,  8938.,  9568.,  7978.,  8608.,  9250.,  9904.,  8242.,  8896.,  9562., 10240.,  8506.,  9184.,  9874., 10576.,  8770.,  9472., 10186., 10912.,  9562., 10336., 11122., 11920.,  9826., 10624., 11434., 12256., 10090., 10912., 11746., 12592., 10354., 11200., 12058., 12928., 10618., 11488., 12370., 13264., 11410., 12352., 13306., 14272., 11674., 12640., 13618., 14608., 11938., 12928., 13930., 14944., 12202., 13216., 14242., 15280., 12466., 13504., 14554., 15616., 13258., 14368., 15490., 16624., 13522., 14656., 15802., 16960., 13786., 14944., 16114., 17296., 14050., 15232., 16426., 17632., 14314., 15520., 16738., 17968.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11180., 11480., 12200., 12512., 13268., 13592., 14384., 14720., 12764., 13112., 13880., 14240., 15044., 15416., 16256., 16640., 15760., 16224., 17184., 17664., 18672., 19168., 20224., 20736.,  9980., 10328., 11000., 11360., 12068., 12440., 13184., 13568., 11180., 11576., 12296., 12704., 13460., 13880., 14672., 15104., 14471., 14942., 15890., 16376., 17369., 17870., 18908., 19424., 16259., 16790., 17798., 18344., 19397., 19958., 21056., 21632., 14004., 14584., 15720., 16320., 17516., 18136., 19392., 20032., 12011., 12542., 13430., 13976., 14909., 15470., 16448., 17024.,  7495.,  7894.,  8650.,  9064.,  9865., 10294., 11140., 11584., 10603., 10982., 11838., 12232., 13133., 13542., 14488., 14912., 11815., 12190., 13042., 13432., 14329., 14734., 15676., 16096., 14564., 15128., 16248., 16832., 18012., 18616., 19856., 20480.,  8815.,  9190.,  9922., 10312., 11089., 11494., 12316., 12736., 10123., 10558., 11350., 11800., 12637., 13102., 13984., 14464., 14396., 14840., 15704., 16160., 17060., 17528., 18464., 18944., 15980., 16472., 17384., 17888., 18836., 19352., 20336., 20864., 15056., 15584., 16608., 17152., 18224., 18784., 19904., 20480., 12044., 12536., 13352., 13856., 14708., 15224., 16112., 16640.,  9468.,  9816., 10488., 10848., 11556., 11928., 12672., 13056.,  9100.,  9368., 10056., 10336., 11060., 11352., 12112., 12416.,  8060.,  8312.,  8984.,  9248.,  9956., 10232., 10976., 11264., 12112., 12512., 13408., 13824., 14768., 15200., 16192., 16640.,  6044.,  6296.,  6872.,  7136.,  7748.,  8024.,  8672.,  8960.,  7244.,  7544.,  8168.,  8480.,  9140.,  9464., 10160., 10496.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11366., 11732., 12236., 12608., 13130., 13508., 14048., 14432., 11870., 12260., 12788., 13184., 13730., 14132., 14696., 15104., 12374., 12788., 13340., 13760., 14330., 14756., 15344., 15776., 12878., 13316., 13892., 14336., 14930., 15380., 15992., 16448., 13382., 13844., 14444., 14912., 15530., 16004., 16640., 17120., 14894., 15428., 16100., 16640., 17330., 17876., 18584., 19136., 15398., 15956., 16652., 17216., 17930., 18500., 19232., 19808., 15902., 16484., 17204., 17792., 18530., 19124., 19880., 20480., 16406., 17012., 17756., 18368., 19130., 19748., 20528., 21152., 16910., 17540., 18308., 18944., 19730., 20372., 21176., 21824., 18422., 19124., 19964., 20672., 21530., 22244., 23120., 23840., 18926., 19652., 20516., 21248., 22130., 22868., 23768., 24512., 19430., 20180., 21068., 21824., 22730., 23492., 24416., 25184., 19934., 20708., 21620., 22400., 23330., 24116., 25064., 25856., 20438., 21236., 22172., 22976., 23930., 24740., 25712., 26528., 21950., 22820., 23828., 24704., 25730., 26612., 27656., 28544., 22454., 23348., 24380., 25280., 26330., 27236., 28304., 29216., 22958., 23876., 24932., 25856., 26930., 27860., 28952., 29888., 23462., 24404., 25484., 26432., 27530., 28484., 29600., 30560., 23966., 24932., 26036., 27008., 28130., 29108., 30248., 31232., 25478., 26516., 27692., 28736., 29930., 30980., 32192., 33248., 25982., 27044., 28244., 29312., 30530., 31604., 32840., 33920., 26486., 27572., 28796., 29888., 31130., 32228., 33488., 34592., 26990., 28100., 29348., 30464., 31730., 32852., 34136., 35264., 27494., 28628., 29900., 31040., 32330., 33476., 34784., 35936.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10924., 11224., 11524., 11824., 12568., 12880., 13192., 13504., 14308., 14632., 14956., 15280., 16144., 16480., 16816., 17152., 12508., 12856., 13204., 13552., 14344., 14704., 15064., 15424., 16276., 16648., 17020., 17392., 18304., 18688., 19072., 19456., 14160., 14624., 15088., 15552., 16480., 16960., 17440., 17920., 18928., 19424., 19920., 20416., 21504., 22016., 22528., 23040.,  6940.,  7288.,  7636.,  7984.,  8584.,  8944.,  9304.,  9664., 10324., 10696., 11068., 11440., 12160., 12544., 12928., 13312.,  7756.,  8152.,  8548.,  8944.,  9592., 10000., 10408., 10816., 11524., 11944., 12364., 12784., 13552., 13984., 14416., 14848., 14775., 15246., 15717., 16188., 17214., 17700., 18186., 18672., 19773., 20274., 20775., 21276., 22452., 22968., 23484., 24000., 16755., 17286., 17817., 18348., 19434., 19980., 20526., 21072., 22233., 22794., 23355., 23916., 25152., 25728., 26304., 26880., 12580., 13160., 13740., 14320., 15480., 16080., 16680., 17280., 18540., 19160., 19780., 20400., 21760., 22400., 23040., 23680.,  8259.,  8790.,  9321.,  9852., 10698., 11244., 11790., 12336., 13257., 13818., 14379., 14940., 15936., 16512., 17088., 17664.,  6015.,  6414.,  6813.,  7212.,  7926.,  8340.,  8754.,  9168.,  9957., 10386., 10815., 11244., 12108., 12552., 12996., 13440., 12763., 13142., 13521., 13900., 14834., 15228., 15622., 16016., 17025., 17434., 17843., 18252., 19336., 19760., 20184., 20608., 13655., 14030., 14405., 14780., 15710., 16100., 16490., 16880., 17885., 18290., 18695., 19100., 20180., 20600., 21020., 21440., 15764., 16328., 16892., 17456., 18600., 19184., 19768., 20352., 21596., 22200., 22804., 23408., 24752., 25376., 26000., 26624.,  7655.,  8030.,  8405.,  8780.,  9470.,  9860., 10250., 10640., 11405., 11810., 12215., 12620., 13460., 13880., 14300., 14720.,  8675.,  9110.,  9545.,  9980., 10730., 11180., 11630., 12080., 12905., 13370., 13835., 14300., 15200., 15680., 16160., 16640., 13628., 14072., 14516., 14960., 15848., 16304., 16760., 17216., 18164., 18632., 19100., 19568., 20576., 21056., 21536., 22016., 15212., 15704., 16196., 16688., 17624., 18128., 18632., 19136., 20132., 20648., 21164., 21680., 22736., 23264., 23792., 24320., 10640., 11168., 11696., 12224., 13216., 13760., 14304., 14848., 15920., 16480., 17040., 17600., 18752., 19328., 19904., 20480.,  7340.,  7832.,  8324.,  8816.,  9560., 10064., 10568., 11072., 11876., 12392., 12908., 13424., 14288., 14816., 15344., 15872.,  4892.,  5240.,  5588.,  5936.,  6536.,  6896.,  7256.,  7616.,  8276.,  8648.,  9020.,  9392., 10112., 10496., 10880., 11264.,  8844.,  9112.,  9380.,  9648., 10360., 10640., 10920., 11200., 11972., 12264., 12556., 12848., 13680., 13984., 14288., 14592.,  9340.,  9592.,  9844., 10096., 10792., 11056., 11320., 11584., 12340., 12616., 12892., 13168., 13984., 14272., 14560., 14848., 11024., 11424., 11824., 12224., 13088., 13504., 13920., 14336., 15280., 15712., 16144., 16576., 17600., 18048., 18496., 18944.,  5308.,  5560.,  5812.,  6064.,  6568.,  6832.,  7096.,  7360.,  7924.,  8200.,  8476.,  8752.,  9376.,  9664.,  9952., 10240.,  6124.,  6424.,  6724.,  7024.,  7576.,  7888.,  8200.,  8512.,  9124.,  9448.,  9772., 10096., 10768., 11104., 11440., 11776.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22366., 22732., 23098., 23464., 24100., 24472., 24844., 25216., 25882., 26260., 26638., 27016., 27712., 28096., 28480., 28864., 23350., 23740., 24130., 24520., 25180., 25576., 25972., 26368., 27058., 27460., 27862., 28264., 28984., 29392., 29800., 30208., 13966., 14252., 14538., 14824., 15380., 15672., 15964., 16256., 16842., 17140., 17438., 17736., 18352., 18656., 18960., 19264., 14950., 15260., 15570., 15880., 16460., 16776., 17092., 17408., 18018., 18340., 18662., 18984., 19624., 19952., 20280., 20608.,  7614.,  7820.,  8026.,  8232.,  8708.,  8920.,  9132.,  9344.,  9850., 10068., 10286., 10504., 11040., 11264., 11488., 11712., 10566., 10844., 11122., 11400., 11948., 12232., 12516., 12800., 13378., 13668., 13958., 14248., 14856., 15152., 15448., 15744., 11550., 11852., 12154., 12456., 13028., 13336., 13644., 13952., 14554., 14868., 15182., 15496., 16128., 16448., 16768., 17088., 12534., 12860., 13186., 13512., 14108., 14440., 14772., 15104., 15730., 16068., 16406., 16744., 17400., 17744., 18088., 18432., 13518., 13868., 14218., 14568., 15188., 15544., 15900., 16256., 16906., 17268., 17630., 17992., 18672., 19040., 19408., 19776., 14502., 14876., 15250., 15624., 16268., 16648., 17028., 17408., 18082., 18468., 18854., 19240., 19944., 20336., 20728., 21120., 17454., 17900., 18346., 18792., 19508., 19960., 20412., 20864., 21610., 22068., 22526., 22984., 23760., 24224., 24688., 25152., 18438., 18908., 19378., 19848., 20588., 21064., 21540., 22016., 22786., 23268., 23750., 24232., 25032., 25520., 26008., 26496., 13150., 13516., 13882., 14248., 14884., 15256., 15628., 16000., 16666., 17044., 17422., 17800., 18496., 18880., 19264., 19648., 14134., 14524., 14914., 15304., 15964., 16360., 16756., 17152., 17842., 18244., 18646., 19048., 19768., 20176., 20584., 20992., 10894., 11180., 11466., 11752., 12308., 12600., 12892., 13184., 13770., 14068., 14366., 14664., 15280., 15584., 15888., 16192., 13846., 14204., 14562., 14920., 15548., 15912., 16276., 16640., 17298., 17668., 18038., 18408., 19096., 19472., 19848., 20224., 14830., 15212., 15594., 15976., 16628., 17016., 17404., 17792., 18474., 18868., 19262., 19656., 20368., 20768., 21168., 21568., 15814., 16220., 16626., 17032., 17708., 18120., 18532., 18944., 19650., 20068., 20486., 20904., 21640., 22064., 22488., 22912., 16798., 17228., 17658., 18088., 18788., 19224., 19660., 20096., 20826., 21268., 21710., 22152., 22912., 23360., 23808., 24256., 17782., 18236., 18690., 19144., 19868., 20328., 20788., 21248., 22002., 22468., 22934., 23400., 24184., 24656., 25128., 25600., 20734., 21260., 21786., 22312., 23108., 23640., 24172., 24704., 25530., 26068., 26606., 27144., 28000., 28544., 29088., 29632., 21718., 22268., 22818., 23368., 24188., 24744., 25300., 25856., 26706., 27268., 27830., 28392., 29272., 29840., 30408., 30976., 20526., 20972., 21418., 21864., 22580., 23032., 23484., 23936., 24682., 25140., 25598., 26056., 26832., 27296., 27760., 28224., 21510., 21980., 22450., 22920., 23660., 24136., 24612., 25088., 25858., 26340., 26822., 27304., 28104., 28592., 29080., 29568., 22366., 22732., 23098., 23464., 24100., 24472., 24844., 25216., 25882., 26260., 26638., 27016., 27712., 28096., 28480., 28864.};
  const std::array<int, 4> in_shape = {{ 1, 10, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6592.,  8520.,  8720.,  6304.,  6448.,  7880., 10170., 10380.,  7490.,  7640.,  9200., 11850., 12060.,  8690.,  8840.,  5728.,  7304.,  7440.,  5296.,  5392.,  6592.,  8392.,  8528.,  6064.,  6160.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 509.,  530.,  551.,  572.,  593.,  677.,  698.,  719.,  740.,  761.,  845.,  866.,  887.,  908.,  929., 1013., 1034., 1055., 1076., 1097., 1181., 1202., 1223., 1244., 1265.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12752., 13184., 16464., 17040., 16848., 17440., 12164., 12608., 12440., 12896., 15220., 15760., 19620., 20340., 20020., 20760., 14425., 14980., 14710., 15280., 17740., 18400., 22820., 23700., 23220., 24120., 16705., 17380., 16990., 17680., 10928., 11456., 13904., 14608., 14160., 14880., 10052., 10592., 10232., 10784., 12560., 13184., 15952., 16784., 16208., 17056., 11492., 12128., 11672., 12320.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 910., 1018.,  946., 1060.,  982., 1102., 1018., 1144., 1054., 1186., 1198., 1354., 1234., 1396., 1270., 1438., 1306., 1480., 1342., 1522., 1486., 1690., 1522., 1732., 1558., 1774., 1594., 1816., 1630., 1858., 1774., 2026., 1810., 2068., 1846., 2110., 1882., 2152., 1918., 2194., 2062., 2362., 2098., 2404., 2134., 2446., 2170., 2488., 2206., 2530.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {25072., 25504., 25936., 26368., 32352., 32928., 33504., 34080., 33104., 33696., 34288., 34880., 23884., 24328., 24772., 25216., 24424., 24880., 25336., 25792., 29900., 30440., 30980., 31520., 38520., 39240., 39960., 40680., 39300., 40040., 40780., 41520., 28295., 28850., 29405., 29960., 28850., 29420., 29990., 30560., 34820., 35480., 36140., 36800., 44760., 45640., 46520., 47400., 45540., 46440., 47340., 48240., 32735., 33410., 34085., 34760., 33290., 33980., 34670., 35360., 21328., 21856., 22384., 22912., 27104., 27808., 28512., 29216., 27600., 28320., 29040., 29760., 19564., 20104., 20644., 21184., 19912., 20464., 21016., 21568., 24496., 25120., 25744., 26368., 31072., 31904., 32736., 33568., 31568., 32416., 33264., 34112., 22348., 22984., 23620., 24256., 22696., 23344., 23992., 24640.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1712., 1820., 1928., 2036., 1778., 1892., 2006., 2120., 1844., 1964., 2084., 2204., 1910., 2036., 2162., 2288., 1976., 2108., 2240., 2372., 2240., 2396., 2552., 2708., 2306., 2468., 2630., 2792., 2372., 2540., 2708., 2876., 2438., 2612., 2786., 2960., 2504., 2684., 2864., 3044., 2768., 2972., 3176., 3380., 2834., 3044., 3254., 3464., 2900., 3116., 3332., 3548., 2966., 3188., 3410., 3632., 3032., 3260., 3488., 3716., 3296., 3548., 3800., 4052., 3362., 3620., 3878., 4136., 3428., 3692., 3956., 4220., 3494., 3764., 4034., 4304., 3560., 3836., 4112., 4388., 3824., 4124., 4424., 4724., 3890., 4196., 4502., 4808., 3956., 4268., 4580., 4892., 4022., 4340., 4658., 4976., 4088., 4412., 4736., 5060.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {25204., 26368., 32544., 34080., 33312., 34880., 24052., 25216., 24604., 25792., 30125., 31520., 38840., 40680., 39640., 41520., 28565., 29960., 29135., 30560., 35165., 36800., 45240., 47400., 46040., 48240., 33125., 34760., 33695., 35360., 21652., 22912., 27552., 29216., 28064., 29760., 19924., 21184., 20284., 21568., 24916., 26368., 31648., 33568., 32160., 34112., 22804., 24256., 23164., 24640.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1784., 2036., 1856., 2120., 1928., 2204., 2000., 2288., 2072., 2372., 2360., 2708., 2432., 2792., 2504., 2876., 2576., 2960., 2648., 3044., 2936., 3380., 3008., 3464., 3080., 3548., 3152., 3632., 3224., 3716., 3512., 4052., 3584., 4136., 3656., 4220., 3728., 4304., 3800., 4388., 4088., 4724., 4160., 4808., 4232., 4892., 4304., 4976., 4376., 5060.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14036., 14504., 15392., 15872., 17616., 18240., 19392., 20032., 18608., 19264., 20448., 21120., 12860., 13352., 14216., 14720., 13556., 14072., 14960., 15488., 10993., 11290., 12040., 12352., 14052., 14448., 15408., 15824., 15100., 15536., 16536., 16992., 10531., 10858., 11578., 11920., 11257., 11614., 12364., 12736., 17761., 18298., 19288., 19840., 22436., 23152., 24432., 25168., 23484., 24240., 25560., 26336., 16339., 16906., 17866., 18448., 17065., 17662., 18652., 19264.,  7700.,  7976.,  8672.,  8960.,  9680., 10048., 10944., 11328., 10672., 11072., 12000., 12416.,  7292.,  7592.,  8264.,  8576.,  7988.,  8312.,  9008.,  9344., 14036., 14504., 15392., 15872., 17616., 18240., 19392., 20032., 18608., 19264., 20448., 21120., 12860., 13352., 14216., 14720., 13556., 14072., 14960., 15488.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 3358.,  3568.,  3856.,  4072.,  3490.,  3712.,  4012.,  4240.,  3622.,  3856.,  4168.,  4408.,  3754.,  4000.,  4324.,  4576.,  3886.,  4144.,  4480.,  4744.,  4414.,  4720.,  5104.,  5416.,  4546.,  4864.,  5260.,  5584.,  4678.,  5008.,  5416.,  5752.,  4810.,  5152.,  5572.,  5920.,  4942.,  5296.,  5728.,  6088.,  5470.,  5872.,  6352.,  6760.,  5602.,  6016.,  6508.,  6928.,  5734.,  6160.,  6664.,  7096.,  5866.,  6304.,  6820.,  7264.,  5998.,  6448.,  6976.,  7432.,  6526.,  7024.,  7600.,  8104.,  6658.,  7168.,  7756.,  8272.,  6790.,  7312.,  7912.,  8440.,  6922.,  7456.,  8068.,  8608.,  7054.,  7600.,  8224.,  8776.,  7582.,  8176.,  8848.,  9448.,  7714.,  8320.,  9004.,  9616.,  7846.,  8464.,  9160.,  9784.,  7978.,  8608.,  9316.,  9952.,  8110.,  8752.,  9472., 10120.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12628., 13096., 13564., 14032., 14944., 15424., 15904., 16384., 14640., 15264., 15888., 16512., 17664., 18304., 18944., 19584., 15568., 16224., 16880., 17536., 18720., 19392., 20064., 20736.,  9484.,  9976., 10468., 10960., 11800., 12304., 12808., 13312., 10084., 10600., 11116., 11632., 12496., 13024., 13552., 14080., 12857., 13154., 13451., 13748., 14552., 14864., 15176., 15488., 15932., 16328., 16724., 17120., 18112., 18528., 18944., 19360., 16964., 17400., 17836., 18272., 19304., 19760., 20216., 20672., 11135., 11462., 11789., 12116., 12830., 13172., 13514., 13856., 11789., 12146., 12503., 12860., 13604., 13976., 14348., 14720., 20009., 20546., 21083., 21620., 22664., 23216., 23768., 24320., 24188., 24904., 25620., 26336., 27648., 28384., 29120., 29856., 25220., 25976., 26732., 27488., 28840., 29616., 30392., 31168., 16367., 16934., 17501., 18068., 19022., 19604., 20186., 20768., 17021., 17618., 18215., 18812., 19796., 20408., 21020., 21632.,  6292.,  6568.,  6844.,  7120.,  7840.,  8128.,  8416.,  8704.,  7216.,  7584.,  7952.,  8320.,  9216.,  9600.,  9984., 10368.,  8144.,  8544.,  8944.,  9344., 10272., 10688., 11104., 11520.,  4684.,  4984.,  5284.,  5584.,  6232.,  6544.,  6856.,  7168.,  5284.,  5608.,  5932.,  6256.,  6928.,  7264.,  7600.,  7936., 12628., 13096., 13564., 14032., 14944., 15424., 15904., 16384., 14640., 15264., 15888., 16512., 17664., 18304., 18944., 19584., 15568., 16224., 16880., 17536., 18720., 19392., 20064., 20736.,  9484.,  9976., 10468., 10960., 11800., 12304., 12808., 13312., 10084., 10600., 11116., 11632., 12496., 13024., 13552., 14080.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6506.,  6716.,  6926.,  7136.,  7496.,  7712.,  7928.,  8144.,  6758.,  6980.,  7202.,  7424.,  7796.,  8024.,  8252.,  8480.,  7010.,  7244.,  7478.,  7712.,  8096.,  8336.,  8576.,  8816.,  7262.,  7508.,  7754.,  8000.,  8396.,  8648.,  8900.,  9152.,  7514.,  7772.,  8030.,  8288.,  8696.,  8960.,  9224.,  9488.,  8522.,  8828.,  9134.,  9440.,  9896., 10208., 10520., 10832.,  8774.,  9092.,  9410.,  9728., 10196., 10520., 10844., 11168.,  9026.,  9356.,  9686., 10016., 10496., 10832., 11168., 11504.,  9278.,  9620.,  9962., 10304., 10796., 11144., 11492., 11840.,  9530.,  9884., 10238., 10592., 11096., 11456., 11816., 12176., 10538., 10940., 11342., 11744., 12296., 12704., 13112., 13520., 10790., 11204., 11618., 12032., 12596., 13016., 13436., 13856., 11042., 11468., 11894., 12320., 12896., 13328., 13760., 14192., 11294., 11732., 12170., 12608., 13196., 13640., 14084., 14528., 11546., 11996., 12446., 12896., 13496., 13952., 14408., 14864., 12554., 13052., 13550., 14048., 14696., 15200., 15704., 16208., 12806., 13316., 13826., 14336., 14996., 15512., 16028., 16544., 13058., 13580., 14102., 14624., 15296., 15824., 16352., 16880., 13310., 13844., 14378., 14912., 15596., 16136., 16676., 17216., 13562., 14108., 14654., 15200., 15896., 16448., 17000., 17552., 14570., 15164., 15758., 16352., 17096., 17696., 18296., 18896., 14822., 15428., 16034., 16640., 17396., 18008., 18620., 19232., 15074., 15692., 16310., 16928., 17696., 18320., 18944., 19568., 15326., 15956., 16586., 17216., 17996., 18632., 19268., 19904., 15578., 16220., 16862., 17504., 18296., 18944., 19592., 20240.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18076., 19024., 19996., 20992., 22960., 24192., 25456., 26752., 24944., 26240., 27568., 28928., 17308., 18256., 19228., 20224., 18700., 19696., 20716., 21760.,  5819.,  6452.,  7115.,  7808.,  7612.,  8416.,  9260., 10144.,  9708., 10592., 11516., 12480.,  6491.,  7124.,  7787.,  8480.,  7943.,  8636.,  9359., 10112., 19355., 20468., 21611., 22784., 24380., 25824., 27308., 28832., 26476., 28000., 29564., 31168., 18107., 19220., 20363., 21536., 19559., 20732., 21935., 23168.,  5404.,  5968.,  6556.,  7168.,  7088.,  7808.,  8560.,  9344.,  9072.,  9856., 10672., 11520.,  6172.,  6736.,  7324.,  7936.,  7564.,  8176.,  8812.,  9472., 18076., 19024., 19996., 20992., 22960., 24192., 25456., 26752., 24944., 26240., 27568., 28928., 17308., 18256., 19228., 20224., 18700., 19696., 20716., 21760.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6650.,  7136.,  7634.,  8144.,  6914.,  7424.,  7946.,  8480.,  7178.,  7712.,  8258.,  8816.,  7442.,  8000.,  8570.,  9152.,  7706.,  8288.,  8882.,  9488.,  8762.,  9440., 10130., 10832.,  9026.,  9728., 10442., 11168.,  9290., 10016., 10754., 11504.,  9554., 10304., 11066., 11840.,  9818., 10592., 11378., 12176., 10874., 11744., 12626., 13520., 11138., 12032., 12938., 13856., 11402., 12320., 13250., 14192., 11666., 12608., 13562., 14528., 11930., 12896., 13874., 14864., 12986., 14048., 15122., 16208., 13250., 14336., 15434., 16544., 13514., 14624., 15746., 16880., 13778., 14912., 16058., 17216., 14042., 15200., 16370., 17552., 15098., 16352., 17618., 18896., 15362., 16640., 17930., 19232., 15626., 16928., 18242., 19568., 15890., 17216., 18554., 19904., 16154., 17504., 18866., 20240.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18332., 18872., 19832., 20384., 21380., 21944., 22976., 23552., 22160., 22880., 24096., 24832., 26096., 26848., 28160., 28928., 24016., 24800., 26080., 26880., 28208., 29024., 30400., 31232., 15212., 15800., 16712., 17312., 18260., 18872., 19856., 20480., 16412., 17048., 18008., 18656., 19652., 20312., 21344., 22016.,  6451.,  6646.,  7318.,  7528.,  8245.,  8470.,  9232.,  9472.,  8308.,  8568.,  9384.,  9664., 10540., 10840., 11776., 12096., 10372., 10712., 11608., 11968., 12924., 13304., 14320., 14720.,  6199.,  6454.,  7066.,  7336.,  7993.,  8278.,  8980.,  9280.,  7507.,  7822.,  8494.,  8824.,  9541.,  9886., 10648., 11008., 20755., 21430., 22582., 23272., 24469., 25174., 26416., 27136., 24820., 25720., 27176., 28096., 29612., 30552., 32128., 33088., 26884., 27864., 29400., 30400., 31996., 33016., 34672., 35712., 16663., 17398., 18490., 19240., 20377., 21142., 22324., 23104., 17971., 18766., 19918., 20728., 21925., 22750., 23992., 24832.,  5660.,  5816.,  6392.,  6560.,  7172.,  7352.,  8000.,  8192.,  7312.,  7520.,  8224.,  8448.,  9200.,  9440., 10240., 10496.,  9168.,  9440., 10208., 10496., 11312., 11616., 12480., 12800.,  5612.,  5816.,  6344.,  6560.,  7124.,  7352.,  7952.,  8192.,  6812.,  7064.,  7640.,  7904.,  8516.,  8792.,  9440.,  9728., 18332., 18872., 19832., 20384., 21380., 21944., 22976., 23552., 22160., 22880., 24096., 24832., 26096., 26848., 28160., 28928., 24016., 24800., 26080., 26880., 28208., 29024., 30400., 31232., 15212., 15800., 16712., 17312., 18260., 18872., 19856., 20480., 16412., 17048., 18008., 18656., 19652., 20312., 21344., 22016.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12886., 13300., 13852., 14272., 14842., 15268., 15856., 16288., 13390., 13828., 14404., 14848., 15442., 15892., 16504., 16960., 13894., 14356., 14956., 15424., 16042., 16516., 17152., 17632., 14398., 14884., 15508., 16000., 16642., 17140., 17800., 18304., 14902., 15412., 16060., 16576., 17242., 17764., 18448., 18976., 16918., 17524., 18268., 18880., 19642., 20260., 21040., 21664., 17422., 18052., 18820., 19456., 20242., 20884., 21688., 22336., 17926., 18580., 19372., 20032., 20842., 21508., 22336., 23008., 18430., 19108., 19924., 20608., 21442., 22132., 22984., 23680., 18934., 19636., 20476., 21184., 22042., 22756., 23632., 24352., 20950., 21748., 22684., 23488., 24442., 25252., 26224., 27040., 21454., 22276., 23236., 24064., 25042., 25876., 26872., 27712., 21958., 22804., 23788., 24640., 25642., 26500., 27520., 28384., 22462., 23332., 24340., 25216., 26242., 27124., 28168., 29056., 22966., 23860., 24892., 25792., 26842., 27748., 28816., 29728., 24982., 25972., 27100., 28096., 29242., 30244., 31408., 32416., 25486., 26500., 27652., 28672., 29842., 30868., 32056., 33088., 25990., 27028., 28204., 29248., 30442., 31492., 32704., 33760., 26494., 27556., 28756., 29824., 31042., 32116., 33352., 34432., 26998., 28084., 29308., 30400., 31642., 32740., 34000., 35104., 29014., 30196., 31516., 32704., 34042., 35236., 36592., 37792., 29518., 30724., 32068., 33280., 34642., 35860., 37240., 38464., 30022., 31252., 32620., 33856., 35242., 36484., 37888., 39136., 30526., 31780., 33172., 34432., 35842., 37108., 38536., 39808., 31030., 32308., 33724., 35008., 36442., 37732., 39184., 40480.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18844., 19384., 19924., 20464., 21448., 22000., 22552., 23104., 24148., 24712., 25276., 25840., 26944., 27520., 28096., 28672., 20560., 21280., 22000., 22720., 23904., 24640., 25376., 26112., 27376., 28128., 28880., 29632., 30976., 31744., 32512., 33280., 22160., 22944., 23728., 24512., 25760., 26560., 27360., 28160., 29488., 30304., 31120., 31936., 33344., 34176., 35008., 35840., 11020., 11608., 12196., 12784., 13624., 14224., 14824., 15424., 16324., 16936., 17548., 18160., 19120., 19744., 20368., 20992., 11836., 12472., 13108., 13744., 14632., 15280., 15928., 16576., 17524., 18184., 18844., 19504., 20512., 21184., 21856., 22528.,  7715.,  7910.,  8105.,  8300.,  9050.,  9260.,  9470.,  9680., 10505., 10730., 10955., 11180., 12080., 12320., 12560., 12800.,  9700.,  9960., 10220., 10480., 11320., 11600., 11880., 12160., 13100., 13400., 13700., 14000., 15040., 15360., 15680., 16000., 11700., 12040., 12380., 12720., 13640., 14000., 14360., 14720., 15740., 16120., 16500., 16880., 18000., 18400., 18800., 19200.,  5615.,  5870.,  6125.,  6380.,  6950.,  7220.,  7490.,  7760.,  8405.,  8690.,  8975.,  9260.,  9980., 10280., 10580., 10880.,  6635.,  6950.,  7265.,  7580.,  8210.,  8540.,  8870.,  9200.,  9905., 10250., 10595., 10940., 11720., 12080., 12440., 12800., 23555., 24230., 24905., 25580., 26810., 27500., 28190., 28880., 30185., 30890., 31595., 32300., 33680., 34400., 35120., 35840., 25700., 26600., 27500., 28400., 29880., 30800., 31720., 32640., 34220., 35160., 36100., 37040., 38720., 39680., 40640., 41600., 27700., 28680., 29660., 30640., 32200., 33200., 34200., 35200., 36860., 37880., 38900., 39920., 41680., 42720., 43760., 44800., 13775., 14510., 15245., 15980., 17030., 17780., 18530., 19280., 20405., 21170., 21935., 22700., 23900., 24680., 25460., 26240., 14795., 15590., 16385., 17180., 18290., 19100., 19910., 20720., 21905., 22730., 23555., 24380., 25640., 26480., 27320., 28160.,  6172.,  6328.,  6484.,  6640.,  7240.,  7408.,  7576.,  7744.,  8404.,  8584.,  8764.,  8944.,  9664.,  9856., 10048., 10240.,  7760.,  7968.,  8176.,  8384.,  9056.,  9280.,  9504.,  9728., 10480., 10720., 10960., 11200., 12032., 12288., 12544., 12800.,  9360.,  9632.,  9904., 10176., 10912., 11200., 11488., 11776., 12592., 12896., 13200., 13504., 14400., 14720., 15040., 15360.,  4492.,  4696.,  4900.,  5104.,  5560.,  5776.,  5992.,  6208.,  6724.,  6952.,  7180.,  7408.,  7984.,  8224.,  8464.,  8704.,  5308.,  5560.,  5812.,  6064.,  6568.,  6832.,  7096.,  7360.,  7924.,  8200.,  8476.,  8752.,  9376.,  9664.,  9952., 10240., 18844., 19384., 19924., 20464., 21448., 22000., 22552., 23104., 24148., 24712., 25276., 25840., 26944., 27520., 28096., 28672., 20560., 21280., 22000., 22720., 23904., 24640., 25376., 26112., 27376., 28128., 28880., 29632., 30976., 31744., 32512., 33280., 22160., 22944., 23728., 24512., 25760., 26560., 27360., 28160., 29488., 30304., 31120., 31936., 33344., 34176., 35008., 35840., 11020., 11608., 12196., 12784., 13624., 14224., 14824., 15424., 16324., 16936., 17548., 18160., 19120., 19744., 20368., 20992., 11836., 12472., 13108., 13744., 14632., 15280., 15928., 16576., 17524., 18184., 18844., 19504., 20512., 21184., 21856., 22528.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 6670.,  6828.,  6986.,  7144.,  7572.,  7736.,  7900.,  8064.,  8522.,  8692.,  8862.,  9032.,  9520.,  9696.,  9872., 10048.,  7654.,  7836.,  8018.,  8200.,  8652.,  8840.,  9028.,  9216.,  9698.,  9892., 10086., 10280., 10792., 10992., 11192., 11392.,  8638.,  8844.,  9050.,  9256.,  9732.,  9944., 10156., 10368., 10874., 11092., 11310., 11528., 12064., 12288., 12512., 12736.,  9622.,  9852., 10082., 10312., 10812., 11048., 11284., 11520., 12050., 12292., 12534., 12776., 13336., 13584., 13832., 14080., 10606., 10860., 11114., 11368., 11892., 12152., 12412., 12672., 13226., 13492., 13758., 14024., 14608., 14880., 15152., 15424., 14542., 14892., 15242., 15592., 16212., 16568., 16924., 17280., 17930., 18292., 18654., 19016., 19696., 20064., 20432., 20800., 15526., 15900., 16274., 16648., 17292., 17672., 18052., 18432., 19106., 19492., 19878., 20264., 20968., 21360., 21752., 22144., 16510., 16908., 17306., 17704., 18372., 18776., 19180., 19584., 20282., 20692., 21102., 21512., 22240., 22656., 23072., 23488., 17494., 17916., 18338., 18760., 19452., 19880., 20308., 20736., 21458., 21892., 22326., 22760., 23512., 23952., 24392., 24832., 18478., 18924., 19370., 19816., 20532., 20984., 21436., 21888., 22634., 23092., 23550., 24008., 24784., 25248., 25712., 26176., 11918., 12204., 12490., 12776., 13332., 13624., 13916., 14208., 14794., 15092., 15390., 15688., 16304., 16608., 16912., 17216., 12902., 13212., 13522., 13832., 14412., 14728., 15044., 15360., 15970., 16292., 16614., 16936., 17576., 17904., 18232., 18560., 13886., 14220., 14554., 14888., 15492., 15832., 16172., 16512., 17146., 17492., 17838., 18184., 18848., 19200., 19552., 19904., 14870., 15228., 15586., 15944., 16572., 16936., 17300., 17664., 18322., 18692., 19062., 19432., 20120., 20496., 20872., 21248., 15854., 16236., 16618., 17000., 17652., 18040., 18428., 18816., 19498., 19892., 20286., 20680., 21392., 21792., 22192., 22592., 19790., 20268., 20746., 21224., 21972., 22456., 22940., 23424., 24202., 24692., 25182., 25672., 26480., 26976., 27472., 27968., 20774., 21276., 21778., 22280., 23052., 23560., 24068., 24576., 25378., 25892., 26406., 26920., 27752., 28272., 28792., 29312., 21758., 22284., 22810., 23336., 24132., 24664., 25196., 25728., 26554., 27092., 27630., 28168., 29024., 29568., 30112., 30656., 22742., 23292., 23842., 24392., 25212., 25768., 26324., 26880., 27730., 28292., 28854., 29416., 30296., 30864., 31432., 32000., 23726., 24300., 24874., 25448., 26292., 26872., 27452., 28032., 28906., 29492., 30078., 30664., 31568., 32160., 32752., 33344.,  6670.,  6828.,  6986.,  7144.,  7572.,  7736.,  7900.,  8064.,  8522.,  8692.,  8862.,  9032.,  9520.,  9696.,  9872., 10048.,  7654.,  7836.,  8018.,  8200.,  8652.,  8840.,  9028.,  9216.,  9698.,  9892., 10086., 10280., 10792., 10992., 11192., 11392.,  8638.,  8844.,  9050.,  9256.,  9732.,  9944., 10156., 10368., 10874., 11092., 11310., 11528., 12064., 12288., 12512., 12736.,  9622.,  9852., 10082., 10312., 10812., 11048., 11284., 11520., 12050., 12292., 12534., 12776., 13336., 13584., 13832., 14080., 10606., 10860., 11114., 11368., 11892., 12152., 12412., 12672., 13226., 13492., 13758., 14024., 14608., 14880., 15152., 15424.};
  const std::array<int, 4> in_shape = {{ 1, 10, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13560., 16530., 16840., 13080., 13320., 16200., 19725., 20050., 15550., 15800., 18900., 22975., 23300., 18050., 18300., 11720., 14130., 14340., 11000., 11160., 13480., 16230., 16440., 12600., 12760.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1407., 1452., 1497., 1542., 1587., 1857., 1902., 1947., 1992., 2037., 2307., 2352., 2397., 2442., 2487., 2757., 2802., 2847., 2892., 2937., 3207., 3252., 3297., 3342., 3387.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {26400., 27120., 32160., 33060., 32760., 33680., 25424., 26160., 25888., 26640., 31500., 32400., 38325., 39450., 38950., 40100., 30180., 31100., 30660., 31600., 36700., 37800., 44575., 45950., 45200., 46600., 34980., 36100., 35460., 36600., 22560., 23440., 27160., 28260., 27560., 28680., 21104., 22000., 21408., 22320., 25920., 26960., 31160., 32460., 31560., 32880., 24144., 25200., 24448., 25520.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2607., 2814., 2688., 2904., 2769., 2994., 2850., 3084., 2931., 3174., 3417., 3714., 3498., 3804., 3579., 3894., 3660., 3984., 3741., 4074., 4227., 4614., 4308., 4704., 4389., 4794., 4470., 4884., 4551., 4974., 5037., 5514., 5118., 5604., 5199., 5694., 5280., 5784., 5361., 5874., 5847., 6414., 5928., 6504., 6009., 6594., 6090., 6684., 6171., 6774.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11888., 12352., 12816., 13280., 17084., 17664., 18244., 18824., 17688., 18288., 18888., 19488., 13824., 14304., 14784., 15264., 14288., 14784., 15280., 15776., 15380., 15896., 16412., 16928., 21701., 22314., 22927., 23540., 22350., 22988., 23626., 24264., 17712., 18184., 18656., 19128., 18204., 18696., 19188., 19680., 20076., 20664., 21252., 21840., 24223., 24958., 25693., 26428., 24872., 25632., 26392., 27152., 18728., 19336., 19944., 20552., 19220., 19848., 20476., 21104., 13648., 14144., 14640., 15136., 15332., 15920., 16508., 17096., 15856., 16464., 17072., 17680., 10336., 10784., 11232., 11680., 10736., 11200., 11664., 12128., 11632., 12160., 12688., 13216., 15068., 15728., 16388., 17048., 15592., 16272., 16952., 17632., 11712., 12256., 12800., 13344., 12112., 12672., 13232., 13792.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5007.,  5214.,  5421.,  5628.,  5160.,  5376.,  5592.,  5808.,  5313.,  5538.,  5763.,  5988.,  5466.,  5700.,  5934.,  6168.,  5619.,  5862.,  6105.,  6348.,  6537.,  6834.,  7131.,  7428.,  6690.,  6996.,  7302.,  7608.,  6843.,  7158.,  7473.,  7788.,  6996.,  7320.,  7644.,  7968.,  7149.,  7482.,  7815.,  8148.,  8067.,  8454.,  8841.,  9228.,  8220.,  8616.,  9012.,  9408.,  8373.,  8778.,  9183.,  9588.,  8526.,  8940.,  9354.,  9768.,  8679.,  9102.,  9525.,  9948.,  9597., 10074., 10551., 11028.,  9750., 10236., 10722., 11208.,  9903., 10398., 10893., 11388., 10056., 10560., 11064., 11568., 10209., 10722., 11235., 11748., 11127., 11694., 12261., 12828., 11280., 11856., 12432., 13008., 11433., 12018., 12603., 13188., 11586., 12180., 12774., 13368., 11739., 12342., 12945., 13548.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {28752., 30176., 34920., 36680., 36120., 37920., 27856., 29280., 28784., 30240., 29200., 30752., 33017., 34868., 34267., 36168., 23912., 25336., 24872., 26336., 30896., 32592., 37325., 39420., 38575., 40720., 29544., 31240., 30504., 32240., 19184., 20512., 21152., 22728., 21952., 23568., 14896., 16096., 15504., 16736., 19760., 21152., 23520., 25240., 24320., 26080., 18288., 19680., 18896., 20320.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5133.,  5628.,  5295.,  5808.,  5457.,  5988.,  5619.,  6168.,  5781.,  6348.,  6753.,  7428.,  6915.,  7608.,  7077.,  7788.,  7239.,  7968.,  7401.,  8148.,  8373.,  9228.,  8535.,  9408.,  8697.,  9588.,  8859.,  9768.,  9021.,  9948.,  9993., 11028., 10155., 11208., 10317., 11388., 10479., 11568., 10641., 11748., 11613., 12828., 11775., 13008., 11937., 13188., 12099., 13368., 12261., 13548.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11344., 11808., 12768., 13248., 14812., 15376., 16584., 17168., 16020., 16624., 17872., 18496., 10288., 10720., 11648., 12096., 11216., 11680., 12640., 13120., 16812., 17440., 18616., 19264., 23105., 23858., 25310., 26088., 24403., 25206., 26708., 27536., 18996., 19600., 20736., 21360., 19980., 20624., 21800., 22464., 18140., 18784., 19976., 20640., 20213., 20954., 22394., 23160., 21511., 22302., 23792., 24608., 14564., 15120., 16208., 16784., 15548., 16144., 17272., 17888., 12944., 13536., 14560., 15168., 15356., 16064., 17336., 18064., 16404., 17152., 18464., 19232., 10736., 11296., 12288., 12864., 11536., 12128., 13152., 13760., 11600., 12128., 13088., 13632., 16108., 16704., 17864., 18480., 17156., 17792., 18992., 19648., 13424., 13856., 14720., 15168., 14224., 14688., 15584., 16064.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9861., 10266., 10842., 11256., 10167., 10590., 11184., 11616., 10473., 10914., 11526., 11976., 10779., 11238., 11868., 12336., 11085., 11562., 12210., 12696., 12921., 13506., 14262., 14856., 13227., 13830., 14604., 15216., 13533., 14154., 14946., 15576., 13839., 14478., 15288., 15936., 14145., 14802., 15630., 16296., 15981., 16746., 17682., 18456., 16287., 17070., 18024., 18816., 16593., 17394., 18366., 19176., 16899., 17718., 18708., 19536., 17205., 18042., 19050., 19896., 19041., 19986., 21102., 22056., 19347., 20310., 21444., 22416., 19653., 20634., 21786., 22776., 19959., 20958., 22128., 23136., 20265., 21282., 22470., 23496., 22101., 23226., 24522., 25656., 22407., 23550., 24864., 26016., 22713., 23874., 25206., 26376., 23019., 24198., 25548., 26736., 23325., 24522., 25890., 27096.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10896., 11360., 11824., 12288., 13280., 13760., 14240., 14720., 14660., 15224., 15788., 16352., 17608., 18192., 18776., 19360., 15884., 16488., 17092., 17696., 18992., 19616., 20240., 20864., 13360., 13792., 14224., 14656., 15680., 16128., 16576., 17024., 14416., 14880., 15344., 15808., 16864., 17344., 17824., 18304., 16804., 17432., 18060., 18688., 19944., 20592., 21240., 21888., 23633., 24386., 25139., 25892., 27442., 28220., 28998., 29776., 25027., 25830., 26633., 27436., 29036., 29864., 30692., 31520., 22924., 23528., 24132., 24736., 26000., 26624., 27248., 27872., 24084., 24728., 25372., 26016., 27320., 27984., 28648., 29312., 22772., 23416., 24060., 24704., 25976., 26640., 27304., 27968., 22725., 23466., 24207., 24948., 26486., 27252., 28018., 28784., 24119., 24910., 25701., 26492., 28080., 28896., 29712., 30528., 14620., 15176., 15732., 16288., 17504., 18080., 18656., 19232., 15780., 16376., 16972., 17568., 18824., 19440., 20056., 20672., 13136., 13728., 14320., 14912., 15968., 16576., 17184., 17792., 15412., 16120., 16828., 17536., 18840., 19568., 20296., 21024., 16444., 17192., 17940., 18688., 20032., 20800., 21568., 22336., 11568., 12128., 12688., 13248., 14272., 14848., 15424., 16000., 12368., 12960., 13552., 14144., 15200., 15808., 16416., 17024., 11024., 11552., 12080., 12608., 13600., 14144., 14688., 15232., 14980., 15576., 16172., 16768., 17960., 18576., 19192., 19808., 16012., 16648., 17284., 17920., 19152., 19808., 20464., 21120., 13488., 13920., 14352., 14784., 15680., 16128., 16576., 17024., 14288., 14752., 15216., 15680., 16608., 17088., 17568., 18048.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19317., 19722., 20127., 20532., 21270., 21684., 22098., 22512., 19911., 20334., 20757., 21180., 21936., 22368., 22800., 23232., 20505., 20946., 21387., 21828., 22602., 23052., 23502., 23952., 21099., 21558., 22017., 22476., 23268., 23736., 24204., 24672., 21693., 22170., 22647., 23124., 23934., 24420., 24906., 25392., 25257., 25842., 26427., 27012., 27930., 28524., 29118., 29712., 25851., 26454., 27057., 27660., 28596., 29208., 29820., 30432., 26445., 27066., 27687., 28308., 29262., 29892., 30522., 31152., 27039., 27678., 28317., 28956., 29928., 30576., 31224., 31872., 27633., 28290., 28947., 29604., 30594., 31260., 31926., 32592., 31197., 31962., 32727., 33492., 34590., 35364., 36138., 36912., 31791., 32574., 33357., 34140., 35256., 36048., 36840., 37632., 32385., 33186., 33987., 34788., 35922., 36732., 37542., 38352., 32979., 33798., 34617., 35436., 36588., 37416., 38244., 39072., 33573., 34410., 35247., 36084., 37254., 38100., 38946., 39792., 37137., 38082., 39027., 39972., 41250., 42204., 43158., 44112., 37731., 38694., 39657., 40620., 41916., 42888., 43860., 44832., 38325., 39306., 40287., 41268., 42582., 43572., 44562., 45552., 38919., 39918., 40917., 41916., 43248., 44256., 45264., 46272., 39513., 40530., 41547., 42564., 43914., 44940., 45966., 46992., 43077., 44202., 45327., 46452., 47910., 49044., 50178., 51312., 43671., 44814., 45957., 47100., 48576., 49728., 50880., 52032., 44265., 45426., 46587., 47748., 49242., 50412., 51582., 52752., 44859., 46038., 47217., 48396., 49908., 51096., 52284., 53472., 45453., 46650., 47847., 49044., 50574., 51780., 52986., 54192.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15184., 16192., 17232., 18304., 16220., 17440., 18700., 20000., 18636., 19936., 21276., 22656., 11280., 12224., 13200., 14208., 13136., 14144., 15184., 16256., 17884., 19008., 20172., 21376., 20665., 21988., 23361., 24784., 23261., 24684., 26157., 27680., 17404., 18464., 19564., 20704., 19372., 20512., 21692., 22912., 15228., 16448., 17708., 19008., 16801., 18228., 19705., 21232., 19397., 20924., 22501., 24128., 12764., 13856., 14988., 16160., 14732., 15904., 17116., 18368., 14864., 15808., 16784., 17792., 13740., 14848., 15996., 17184., 15836., 17024., 18252., 19520.,  9680., 10560., 11472., 12416., 11280., 12224., 13200., 14208., 13584., 14528., 15504., 16512., 18060., 19200., 20380., 21600., 20156., 21376., 22636., 23936., 15568., 16448., 17360., 18304., 17168., 18112., 19088., 20096.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19569., 20532., 21513., 22512., 20181., 21180., 22197., 23232., 20793., 21828., 22881., 23952., 21405., 22476., 23565., 24672., 22017., 23124., 24249., 25392., 25689., 27012., 28353., 29712., 26301., 27660., 29037., 30432., 26913., 28308., 29721., 31152., 27525., 28956., 30405., 31872., 28137., 29604., 31089., 32592., 31809., 33492., 35193., 36912., 32421., 34140., 35877., 37632., 33033., 34788., 36561., 38352., 33645., 35436., 37245., 39072., 34257., 36084., 37929., 39792., 37929., 39972., 42033., 44112., 38541., 40620., 42717., 44832., 39153., 41268., 43401., 45552., 39765., 41916., 44085., 46272., 40377., 42564., 44769., 46992., 44049., 46452., 48873., 51312., 44661., 47100., 49557., 52032., 45273., 47748., 50241., 52752., 45885., 48396., 50925., 53472., 46497., 49044., 51609., 54192.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15824., 16352., 17376., 17920., 18992., 19552., 20672., 21248., 20004., 20600., 21848., 22464., 23772., 24408., 25776., 26432., 22452., 23128., 24456., 25152., 26540., 27256., 28704., 29440., 17104., 17568., 18592., 19072., 20144., 20640., 21760., 22272., 19216., 19744., 20832., 21376., 22512., 23072., 24256., 24832., 15524., 16120., 17304., 17920., 19164., 19800., 21104., 21760., 18089., 18738., 20134., 20808., 22279., 22978., 24524., 25248., 20877., 21626., 23122., 23896., 25467., 26266., 27912., 28736., 18004., 18552., 19720., 20288., 21516., 22104., 23392., 24000., 20324., 20952., 22200., 22848., 24156., 24824., 26192., 26880., 20868., 21560., 22840., 23552., 24892., 25624., 27024., 27776., 19985., 20738., 22238., 23016., 24591., 25394., 27044., 27872., 22773., 23626., 25226., 26104., 27779., 28682., 30432., 31360., 13812., 14392., 15592., 16192., 17452., 18072., 19392., 20032., 16132., 16792., 18072., 18752., 20092., 20792., 22192., 22912., 13456., 13984., 14944., 15488., 16496., 17056., 18112., 18688., 14628., 15192., 16312., 16896., 18076., 18680., 19920., 20544., 16692., 17336., 18536., 19200., 20460., 21144., 22464., 23168., 12880., 13344., 14240., 14720., 15664., 16160., 17152., 17664., 14480., 15008., 15968., 16512., 17520., 18080., 19136., 19712., 11920., 12448., 13408., 13952., 14960., 15520., 16576., 17152., 15044., 15640., 16792., 17408., 18620., 19256., 20528., 21184., 17108., 17784., 19016., 19712., 21004., 21720., 23072., 23808., 13392., 13856., 14752., 15232., 16176., 16672., 17664., 18176., 14992., 15520., 16480., 17024., 18032., 18592., 19648., 20224.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {38337., 39138., 40254., 41064., 42207., 43026., 44196., 45024., 39525., 40362., 41514., 42360., 43539., 44394., 45600., 46464., 40713., 41586., 42774., 43656., 44871., 45762., 47004., 47904., 41901., 42810., 44034., 44952., 46203., 47130., 48408., 49344., 43089., 44034., 45294., 46248., 47535., 48498., 49812., 50784., 50217., 51378., 52854., 54024., 55527., 56706., 58236., 59424., 51405., 52602., 54114., 55320., 56859., 58074., 59640., 60864., 52593., 53826., 55374., 56616., 58191., 59442., 61044., 62304., 53781., 55050., 56634., 57912., 59523., 60810., 62448., 63744., 54969., 56274., 57894., 59208., 60855., 62178., 63852., 65184., 45457., 46722., 48302., 49576., 51183., 52466., 54100., 55392., 46645., 47946., 49562., 50872., 52515., 53834., 55504., 56832., 33241., 34322., 35718., 36808., 38231., 39330., 40780., 41888., 34429., 35546., 36978., 38104., 39563., 40698., 42184., 43328., 23073., 23970., 25182., 26088., 27327., 28242., 29508., 30432., 30201., 31314., 32742., 33864., 35319., 36450., 37932., 39072., 31389., 32538., 34002., 35160., 36651., 37818., 39336., 40512., 32577., 33762., 35262., 36456., 37983., 39186., 40740., 41952., 33765., 34986., 36522., 37752., 39315., 40554., 42144., 43392., 34953., 36210., 37782., 39048., 40647., 41922., 43548., 44832., 31585., 32802., 34334., 35560., 37119., 38354., 39940., 41184., 32773., 34026., 35594., 36856., 38451., 39722., 41344., 42624., 25513., 26546., 27894., 28936., 30311., 31362., 32764., 33824., 26701., 27770., 29154., 30232., 31643., 32730., 34168., 35264., 21489., 22338., 23502., 24360., 25551., 26418., 27636., 28512.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {15248., 15776., 16304., 16832., 17824., 18368., 18912., 19456., 20528., 21088., 21648., 22208., 23360., 23936., 24512., 25088., 16692., 17288., 17884., 18480., 19656., 20272., 20888., 21504., 22780., 23416., 24052., 24688., 26064., 26720., 27376., 28032., 18692., 19368., 20044., 20720., 21976., 22672., 23368., 24064., 25420., 26136., 26852., 27568., 29024., 29760., 30496., 31232., 11600., 12064., 12528., 12992., 13920., 14400., 14880., 15360., 16368., 16864., 17360., 17856., 18944., 19456., 19968., 20480., 13200., 13728., 14256., 14784., 15776., 16320., 16864., 17408., 18480., 19040., 19600., 20160., 21312., 21888., 22464., 23040., 12724., 13320., 13916., 14512., 15688., 16304., 16920., 17536., 18812., 19448., 20084., 20720., 22096., 22752., 23408., 24064., 15305., 15954., 16603., 17252., 18602., 19276., 19950., 20624., 22099., 22798., 23497., 24196., 25796., 26520., 27244., 27968., 17709., 18458., 19207., 19956., 21406., 22180., 22954., 23728., 25303., 26102., 26901., 27700., 29400., 30224., 31048., 31872., 16388., 16936., 17484., 18032., 19160., 19728., 20296., 20864., 22092., 22680., 23268., 23856., 25184., 25792., 26400., 27008., 18388., 19016., 19644., 20272., 21480., 22128., 22776., 23424., 24732., 25400., 26068., 26736., 28144., 28832., 29520., 30208., 20756., 21448., 22140., 22832., 24104., 24816., 25528., 26240., 27612., 28344., 29076., 29808., 31280., 32032., 32784., 33536., 16945., 17698., 18451., 19204., 20658., 21436., 22214., 22992., 24571., 25374., 26177., 26980., 28684., 29512., 30340., 31168., 19349., 20202., 21055., 21908., 23462., 24340., 25218., 26096., 27775., 28678., 29581., 30484., 32288., 33216., 34144., 35072., 11044., 11624., 12204., 12784., 13944., 14544., 15144., 15744., 17004., 17624., 18244., 18864., 20224., 20864., 21504., 22144., 13044., 13704., 14364., 15024., 16264., 16944., 17624., 18304., 19644., 20344., 21044., 21744., 23184., 23904., 24624., 25344., 13200., 13728., 14256., 14784., 15776., 16320., 16864., 17408., 18480., 19040., 19600., 20160., 21312., 21888., 22464., 23040., 15892., 16456., 17020., 17584., 18728., 19312., 19896., 20480., 21724., 22328., 22932., 23536., 24880., 25504., 26128., 26752., 17892., 18536., 19180., 19824., 21048., 21712., 22376., 23040., 24364., 25048., 25732., 26416., 27840., 28544., 29248., 29952., 13648., 14112., 14576., 15040., 15968., 16448., 16928., 17408., 18416., 18912., 19408., 19904., 20992., 21504., 22016., 22528., 15248., 15776., 16304., 16832., 17824., 18368., 18912., 19456., 20528., 21088., 21648., 22208., 23360., 23936., 24512., 25088., 11152., 11680., 12208., 12736., 13728., 14272., 14816., 15360., 16432., 16992., 17552., 18112., 19264., 19840., 20416., 20992., 12596., 13192., 13788., 14384., 15560., 16176., 16792., 17408., 18684., 19320., 19956., 20592., 21968., 22624., 23280., 23936., 14596., 15272., 15948., 16624., 17880., 18576., 19272., 19968., 21324., 22040., 22756., 23472., 24928., 25664., 26400., 27136., 11600., 12064., 12528., 12992., 13920., 14400., 14880., 15360., 16368., 16864., 17360., 17856., 18944., 19456., 19968., 20480., 13200., 13728., 14256., 14784., 15776., 16320., 16864., 17408., 18480., 19040., 19600., 20160., 21312., 21888., 22464., 23040.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {26209., 26626., 27043., 27460., 28370., 28796., 29222., 29648., 30603., 31038., 31473., 31908., 32908., 33352., 33796., 34240., 28037., 28490., 28943., 29396., 30342., 30804., 31266., 31728., 32719., 33190., 33661., 34132., 35168., 35648., 36128., 36608., 29865., 30354., 30843., 31332., 32314., 32812., 33310., 33808., 34835., 35342., 35849., 36356., 37428., 37944., 38460., 38976., 31693., 32218., 32743., 33268., 34286., 34820., 35354., 35888., 36951., 37494., 38037., 38580., 39688., 40240., 40792., 41344., 33521., 34082., 34643., 35204., 36258., 36828., 37398., 37968., 39067., 39646., 40225., 40804., 41948., 42536., 43124., 43712., 25801., 26322., 26843., 27364., 28378., 28908., 29438., 29968., 31027., 31566., 32105., 32644., 33748., 34296., 34844., 35392., 27629., 28186., 28743., 29300., 30350., 30916., 31482., 32048., 33143., 33718., 34293., 34868., 36008., 36592., 37176., 37760., 23185., 23650., 24115., 24580., 25538., 26012., 26486., 26960., 27963., 28446., 28929., 29412., 30460., 30952., 31444., 31936., 25013., 25514., 26015., 26516., 27510., 28020., 28530., 29040., 30079., 30598., 31117., 31636., 32720., 33248., 33776., 34304., 26841., 27378., 27915., 28452., 29482., 30028., 30574., 31120., 32195., 32750., 33305., 33860., 34980., 35544., 36108., 36672., 37681., 38306., 38931., 39556., 40674., 41308., 41942., 42576., 43739., 44382., 45025., 45668., 46876., 47528., 48180., 48832., 39509., 40170., 40831., 41492., 42646., 43316., 43986., 44656., 45855., 46534., 47213., 47892., 49136., 49824., 50512., 51200., 26873., 27442., 28011., 28580., 29642., 30220., 30798., 31376., 32483., 33070., 33657., 34244., 35396., 35992., 36588., 37184., 28701., 29306., 29911., 30516., 31614., 32228., 32842., 33456., 34599., 35222., 35845., 36468., 37656., 38288., 38920., 39552., 18113., 18626., 19139., 19652., 20658., 21180., 21702., 22224., 23275., 23806., 24337., 24868., 25964., 26504., 27044., 27584., 22681., 23154., 23627., 24100., 25066., 25548., 26030., 26512., 27523., 28014., 28505., 28996., 30052., 30552., 31052., 31552., 24509., 25018., 25527., 26036., 27038., 27556., 28074., 28592., 29639., 30166., 30693., 31220., 32312., 32848., 33384., 33920., 26209., 26626., 27043., 27460., 28370., 28796., 29222., 29648., 30603., 31038., 31473., 31908., 32908., 33352., 33796., 34240., 28037., 28490., 28943., 29396., 30342., 30804., 31266., 31728., 32719., 33190., 33661., 34132., 35168., 35648., 36128., 36608., 29865., 30354., 30843., 31332., 32314., 32812., 33310., 33808., 34835., 35342., 35849., 36356., 37428., 37944., 38460., 38976., 30465., 31042., 31619., 32196., 33266., 33852., 34438., 35024., 36139., 36734., 37329., 37924., 39084., 39688., 40292., 40896., 32293., 32906., 33519., 34132., 35238., 35860., 36482., 37104., 38255., 38886., 39517., 40148., 41344., 41984., 42624., 43264., 25801., 26322., 26843., 27364., 28378., 28908., 29438., 29968., 31027., 31566., 32105., 32644., 33748., 34296., 34844., 35392., 27629., 28186., 28743., 29300., 30350., 30916., 31482., 32048., 33143., 33718., 34293., 34868., 36008., 36592., 37176., 37760., 23185., 23650., 24115., 24580., 25538., 26012., 26486., 26960., 27963., 28446., 28929., 29412., 30460., 30952., 31444., 31936.};
  const std::array<int, 4> in_shape = {{ 1, 10, 10, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22950., 22015., 29512., 21294., 19116., 23445., 24174., 31710., 23328., 24030., 26860., 26352., 34952., 25352., 23592., 20169., 20790., 27198., 19944., 20538., 16964., 16433., 21732., 15718., 13944.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {6182., 6260., 6338., 6416., 6494., 6728., 6806., 6884., 6962., 7040., 7274., 7352., 7430., 7508., 7586., 7820., 7898., 7976., 8054., 8132., 8366., 8444., 8522., 8600., 8678.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {23958., 24716., 21549., 22270., 30372., 31376., 20107., 20828., 19308., 19992., 24951., 25770., 25806., 26652., 33364., 34492., 24114., 24960., 24915., 25788., 28628., 29656., 26872., 27872., 36784., 38160., 24872., 25872., 24708., 25680., 18399., 19218., 19038., 19884., 24340., 25468., 17346., 18192., 17931., 18804., 16216., 16968., 14615., 15330., 20452., 21448., 13185., 13900., 13194., 13872.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11668., 12364., 11812., 12520., 11956., 12676., 12100., 12832., 12244., 12988., 12676., 13456., 12820., 13612., 12964., 13768., 13108., 13924., 13252., 14080., 13684., 14548., 13828., 14704., 13972., 14860., 14116., 15016., 14260., 15172., 14692., 15640., 14836., 15796., 14980., 15952., 15124., 16108., 15268., 16264., 15700., 16732., 15844., 16888., 15988., 17044., 16132., 17200., 16276., 17356.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {29622., 30380., 31138., 31896., 28361., 29082., 29803., 30524., 36956., 37960., 38964., 39968., 25477., 26198., 26919., 27640., 23340., 24024., 24708., 25392., 31611., 32430., 33249., 34068., 32718., 33564., 34410., 35256., 41536., 42664., 43792., 44920., 29334., 30180., 31026., 31872., 30333., 31206., 32079., 32952., 32932., 33960., 34988., 36016., 32776., 33776., 34776., 35776., 41472., 42848., 44224., 45600., 28776., 29776., 30776., 31776., 27708., 28680., 29652., 30624., 18507., 19326., 20145., 20964., 19182., 20028., 20874., 21720., 23488., 24616., 25744., 26872., 15798., 16644., 17490., 18336., 16365., 17238., 18111., 18984., 18368., 19120., 19872., 20624., 18723., 19438., 20153., 20868., 22756., 23752., 24748., 25744., 15863., 16578., 17293., 18008., 15342., 16020., 16698., 17376.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22640., 23336., 24032., 24728., 22916., 23624., 24332., 25040., 23192., 23912., 24632., 25352., 23468., 24200., 24932., 25664., 23744., 24488., 25232., 25976., 24572., 25352., 26132., 26912., 24848., 25640., 26432., 27224., 25124., 25928., 26732., 27536., 25400., 26216., 27032., 27848., 25676., 26504., 27332., 28160., 26504., 27368., 28232., 29096., 26780., 27656., 28532., 29408., 27056., 27944., 28832., 29720., 27332., 28232., 29132., 30032., 27608., 28520., 29432., 30344., 28436., 29384., 30332., 31280., 28712., 29672., 30632., 31592., 28988., 29960., 30932., 31904., 29264., 30248., 31232., 32216., 29540., 30536., 31532., 32528., 30368., 31400., 32432., 33464., 30644., 31688., 32732., 33776., 30920., 31976., 33032., 34088., 31196., 32264., 33332., 34400., 31472., 32552., 33632., 34712.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24917., 26520., 23363., 24956., 31608., 33696., 21941., 23480., 20215., 21680., 28311., 30036., 30021., 31800., 39000., 41336., 28227., 29952., 29829., 31608., 34692., 36784., 29900., 31936., 41248., 43936., 27892., 29856., 27436., 29344., 21567., 23076., 22845., 24408., 29432., 31480., 21051., 22560., 22221., 23784., 22897., 24464., 18415., 19908., 25944., 27920., 16761., 18200., 16651., 18016.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {23192., 24728., 23480., 25040., 23768., 25352., 24056., 25664., 24344., 25976., 25208., 26912., 25496., 27224., 25784., 27536., 26072., 27848., 26360., 28160., 27224., 29096., 27512., 29408., 27800., 29720., 28088., 30032., 28376., 30344., 29240., 31280., 29528., 31592., 29816., 31904., 30104., 32216., 30392., 32528., 31256., 33464., 31544., 33776., 31832., 34088., 32120., 34400., 32408., 34712.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {31001., 31722., 33604., 34352., 30847., 31558., 33430., 34168., 37948., 38896., 41320., 42304., 28003., 28714., 30478., 31216., 23473., 24110., 25800., 26464., 33699., 34542., 36546., 37416., 35913., 36810., 38868., 39792., 45828., 47024., 49696., 50928., 32325., 33222., 35172., 36096., 34323., 35274., 37278., 38256., 38884., 39944., 42264., 43360., 36012., 37016., 39280., 40320., 45296., 46656., 49600., 51008., 31996., 33000., 35120., 36160., 29604., 30552., 32616., 33600., 20211., 21054., 22626., 23496., 21561., 22458., 24084., 25008., 26692., 27888., 29984., 31216., 17973., 18870., 20388., 21312., 19107., 20058., 21630., 22608., 22941., 23842., 25472., 26400., 21091., 21918., 23474., 24328., 25420., 26544., 28568., 29728., 17783., 18610., 20058., 20912., 16485., 17238., 18612., 19392.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {45004., 46384., 48064., 49456., 45556., 46960., 48664., 50080., 46108., 47536., 49264., 50704., 46660., 48112., 49864., 51328., 47212., 48688., 50464., 51952., 48868., 50416., 52264., 53824., 49420., 50992., 52864., 54448., 49972., 51568., 53464., 55072., 50524., 52144., 54064., 55696., 51076., 52720., 54664., 56320., 41212., 42672., 44432., 45904., 41764., 43248., 45032., 46528., 31820., 33072., 34624., 35888., 32372., 33648., 35224., 36512., 32924., 34224., 35824., 37136., 34580., 35952., 37624., 39008., 35132., 36528., 38224., 39632., 35684., 37104., 38824., 40256., 36236., 37680., 39424., 40880., 36788., 38256., 40024., 41504., 28972., 30256., 31840., 33136., 29524., 30832., 32440., 33760., 21628., 22704., 24080., 25168., 22180., 23280., 24680., 25792., 22732., 23856., 25280., 26416.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {25313., 26034., 26755., 27476., 29340., 30088., 30836., 31584., 26807., 27518., 28229., 28940., 30794., 31532., 32270., 33008., 29380., 30328., 31276., 32224., 34552., 35536., 36520., 37504., 21119., 21830., 22541., 23252., 24890., 25628., 26366., 27104., 18021., 18658., 19295., 19932., 21496., 22160., 22824., 23488., 30843., 31686., 32529., 33372., 35358., 36228., 37098., 37968., 32913., 33810., 34707., 35604., 37644., 38568., 39492., 40416., 39772., 40968., 42164., 43360., 45936., 47168., 48400., 49632., 25737., 26634., 27531., 28428., 30252., 31176., 32100., 33024., 27375., 28326., 29277., 30228., 32106., 33084., 34062., 35040., 37156., 38216., 39276., 40336., 42728., 43824., 44920., 46016., 33260., 34264., 35268., 36272., 38608., 39648., 40688., 41728., 41616., 42976., 44336., 45696., 48640., 50048., 51456., 52864., 25228., 26232., 27236., 28240., 30288., 31328., 32368., 33408., 26388., 27336., 28284., 29232., 31224., 32208., 33192., 34176., 25947., 26790., 27633., 28476., 30174., 31044., 31914., 32784., 27441., 28338., 29235., 30132., 31884., 32808., 33732., 34656., 32476., 33672., 34868., 36064., 38256., 39488., 40720., 41952., 20265., 21162., 22059., 22956., 24492., 25416., 26340., 27264., 21327., 22278., 23229., 24180., 25770., 26748., 27726., 28704., 23285., 24186., 25087., 25988., 27744., 28672., 29600., 30528., 22603., 23430., 24257., 25084., 26766., 27620., 28474., 29328., 23348., 24472., 25596., 26720., 28840., 30000., 31160., 32320., 15987., 16814., 17641., 18468., 19934., 20788., 21642., 22496., 12313., 13066., 13819., 14572., 15964., 16744., 17524., 18304.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {41908., 42648., 43388., 44128., 45456., 46208., 46960., 47712., 36716., 37352., 37988., 38624., 39848., 40496., 41144., 41792., 37796., 38456., 39116., 39776., 41024., 41696., 42368., 43040., 38876., 39560., 40244., 40928., 42200., 42896., 43592., 44288., 39956., 40664., 41372., 42080., 43376., 44096., 44816., 45536., 43196., 43976., 44756., 45536., 46904., 47696., 48488., 49280., 44276., 45080., 45884., 46688., 48080., 48896., 49712., 50528., 45356., 46184., 47012., 47840., 49256., 50096., 50936., 51776., 46436., 47288., 48140., 48992., 50432., 51296., 52160., 53024., 47516., 48392., 49268., 50144., 51608., 52496., 53384., 54272., 34116., 34808., 35500., 36192., 37472., 38176., 38880., 39584., 30972., 31560., 32148., 32736., 33912., 34512., 35112., 35712., 21684., 22168., 22652., 23136., 24208., 24704., 25200., 25696., 22764., 23272., 23780., 24288., 25384., 25904., 26424., 26944., 23844., 24376., 24908., 25440., 26560., 27104., 27648., 28192., 27084., 27688., 28292., 28896., 30088., 30704., 31320., 31936., 28164., 28792., 29420., 30048., 31264., 31904., 32544., 33184., 29244., 29896., 30548., 31200., 32440., 33104., 33768., 34432., 30324., 31000., 31676., 32352., 33616., 34304., 34992., 35680., 31404., 32104., 32804., 33504., 34792., 35504., 36216., 36928., 25300., 25944., 26588., 27232., 28464., 29120., 29776., 30432., 26380., 27048., 27716., 28384., 29640., 30320., 31000., 31680., 19140., 19704., 20268., 20832., 21984., 22560., 23136., 23712., 20220., 20808., 21396., 21984., 23160., 23760., 24360., 24960., 21300., 21912., 22524., 23136., 24336., 24960., 25584., 26208.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {26015., 27732., 29503., 31328., 24427., 26124., 27875., 29680., 31420., 33632., 35916., 38272., 22175., 23764., 25407., 27104., 17531., 19036., 20595., 22208., 34803., 36828., 38907., 41040., 39231., 41364., 43551., 45792., 50316., 53088., 55932., 58848., 35235., 37260., 39339., 41472., 39231., 41364., 43551., 45792., 40164., 42384., 44676., 47040., 37044., 39216., 41460., 43776., 41808., 44544., 47376., 50304., 33252., 35280., 37380., 39552., 24820., 26672., 28596., 30592., 20547., 22140., 23787., 25488., 23247., 24948., 26703., 28512., 29004., 31200., 33468., 35808., 19251., 20844., 22491., 24192., 21519., 23220., 24975., 26784., 24855., 26436., 28071., 29760., 22755., 24252., 25803., 27408., 23964., 25824., 27756., 29760., 19575., 20964., 22407., 23904., 14355., 15532., 16763., 18048.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {42372., 44128., 45908., 47712., 37076., 38624., 40196., 41792., 38180., 39776., 41396., 43040., 39284., 40928., 42596., 44288., 40388., 42080., 43796., 45536., 43700., 45536., 47396., 49280., 44804., 46688., 48596., 50528., 45908., 47840., 49796., 51776., 47012., 48992., 50996., 53024., 48116., 50144., 52196., 54272., 34532., 36192., 37876., 39584., 31284., 32736., 34212., 35712., 21892., 23136., 24404., 25696., 22996., 24288., 25604., 26944., 24100., 25440., 26804., 28192., 27412., 28896., 30404., 31936., 28516., 30048., 31604., 33184., 29620., 31200., 32804., 34432., 30724., 32352., 34004., 35680., 31828., 33504., 35204., 36928., 25668., 27232., 28820., 30432., 26772., 28384., 30020., 31680., 19428., 20832., 22260., 23712., 20532., 21984., 23460., 24960., 21636., 23136., 24660., 26208.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21623., 22206., 23878., 24488., 26241., 26878., 28712., 29376., 22051., 22614., 24266., 24856., 26589., 27206., 29020., 29664., 25716., 26488., 28568., 29376., 31564., 32408., 34704., 35584., 17547., 18110., 19546., 20136., 21653., 22270., 23868., 24512., 16023., 16502., 17854., 18360., 19793., 20326., 21840., 22400., 35307., 36198., 38178., 39096., 41157., 42102., 44244., 45216., 39447., 40446., 42534., 43560., 45729., 46782., 49032., 50112., 48612., 49944., 52584., 53952., 56700., 58104., 60960., 62400., 31455., 32454., 34326., 35352., 37305., 38358., 40392., 41472., 34731., 35838., 37818., 38952., 41013., 42174., 44316., 45504., 34148., 35144., 37400., 38432., 40796., 41864., 44336., 45440., 31540., 32488., 34696., 35680., 37996., 39016., 41440., 42496., 33776., 34976., 37664., 38912., 41744., 43040., 46016., 47360., 23956., 24904., 26824., 27808., 29836., 30856., 32992., 34048., 19044., 19816., 21560., 22368., 24220., 25064., 27024., 27904., 25803., 26694., 28386., 29304., 31077., 32022., 33876., 34848., 28791., 29790., 31590., 32616., 34497., 35550., 37512., 38592., 34404., 35736., 37992., 39360., 41724., 43128., 45600., 47040., 20799., 21798., 23382., 24408., 26073., 27126., 28872., 29952., 22923., 24030., 25722., 26856., 28629., 29790., 31644., 32832., 22399., 23278., 24958., 25864., 27625., 28558., 30400., 31360., 20075., 20870., 22466., 23288., 24965., 25814., 27572., 28448., 19540., 20536., 22456., 23488., 25516., 26584., 28720., 29824., 13715., 14510., 15890., 16712., 18173., 19022., 20564., 21440.,  9375.,  9958., 11126., 11736., 12985., 13622., 14952., 15616.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {28108., 28680., 29816., 30400., 31572., 32168., 33376., 33984., 23996., 24488., 25544., 26048., 27140., 27656., 28784., 29312., 26156., 26696., 27800., 28352., 29492., 30056., 31232., 31808., 28316., 28904., 30056., 30656., 31844., 32456., 33680., 34304., 30476., 31112., 32312., 32960., 34196., 34856., 36128., 36800., 36956., 37736., 39080., 39872., 41252., 42056., 43472., 44288., 39116., 39944., 41336., 42176., 43604., 44456., 45920., 46784., 41276., 42152., 43592., 44480., 45956., 46856., 48368., 49280., 43436., 44360., 45848., 46784., 48308., 49256., 50816., 51776., 45596., 46568., 48104., 49088., 50660., 51656., 53264., 54272., 35436., 36296., 37720., 38592., 40052., 40936., 42432., 43328., 33372., 34152., 35496., 36288., 37668., 38472., 39888., 40704., 21964., 22536., 23672., 24256., 25428., 26024., 27232., 27840., 24124., 24744., 25928., 26560., 27780., 28424., 29680., 30336., 24108., 24648., 25752., 26304., 27444., 28008., 29184., 29760., 30588., 31272., 32520., 33216., 34500., 35208., 36528., 37248., 32748., 33480., 34776., 35520., 36852., 37608., 38976., 39744., 34908., 35688., 37032., 37824., 39204., 40008., 41424., 42240., 37068., 37896., 39288., 40128., 41556., 42408., 43872., 44736., 39228., 40104., 41544., 42432., 43908., 44808., 46320., 47232., 36364., 37256., 38712., 39616., 41108., 42024., 43552., 44480., 38524., 39464., 40968., 41920., 43460., 44424., 46000., 46976., 31212., 31944., 33240., 33984., 35316., 36072., 37440., 38208., 26076., 26728., 27944., 28608., 29860., 30536., 31824., 32512., 28108., 28680., 29816., 30400., 31572., 32168., 33376., 33984.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16423., 17006., 17589., 18172., 19754., 20364., 20974., 21584., 23301., 23938., 24575., 25212., 27064., 27728., 28392., 29056., 16787., 17350., 17913., 18476., 20038., 20628., 21218., 21808., 23505., 24122., 24739., 25356., 27188., 27832., 28476., 29120., 16356., 17128., 17900., 18672., 20488., 21296., 22104., 22912., 24908., 25752., 26596., 27440., 29616., 30496., 31376., 32256.,  7779.,  8342.,  8905.,  9468., 10598., 11188., 11778., 12368., 13633., 14250., 14867., 15484., 16884., 17528., 18172., 18816.,  8399.,  8878.,  9357.,  9836., 10882., 11388., 11894., 12400., 13581., 14114., 14647., 15180., 16496., 17056., 17616., 18176., 31707., 32598., 33489., 34380., 36270., 37188., 38106., 39024., 41049., 41994., 42939., 43884., 46044., 47016., 47988., 48960., 35271., 36270., 37269., 38268., 40266., 41292., 42318., 43344., 45477., 46530., 47583., 48636., 50904., 51984., 53064., 54144., 39060., 40392., 41724., 43056., 45432., 46800., 48168., 49536., 52092., 53496., 54900., 56304., 59040., 60480., 61920., 63360., 19287., 20286., 21285., 22284., 23850., 24876., 25902., 26928., 28629., 29682., 30735., 31788., 33624., 34704., 35784., 36864., 21123., 22230., 23337., 24444., 26118., 27252., 28386., 29520., 31329., 32490., 33651., 34812., 36756., 37944., 39132., 40320., 29796., 30792., 31788., 32784., 35112., 36144., 37176., 38208., 40716., 41784., 42852., 43920., 46608., 47712., 48816., 49920., 28212., 29160., 30108., 31056., 33336., 34320., 35304., 36288., 38748., 39768., 40788., 41808., 44448., 45504., 46560., 47616., 23856., 25056., 26256., 27456., 30048., 31296., 32544., 33792., 36624., 37920., 39216., 40512., 43584., 44928., 46272., 47616., 13044., 13992., 14940., 15888., 17592., 18576., 19560., 20544., 22428., 23448., 24468., 25488., 27552., 28608., 29664., 30720., 11076., 11848., 12620., 13392., 14920., 15728., 16536., 17344., 19052., 19896., 20740., 21584., 23472., 24352., 25232., 26112., 31707., 32598., 33489., 34380., 36270., 37188., 38106., 39024., 41049., 41994., 42939., 43884., 46044., 47016., 47988., 48960., 35271., 36270., 37269., 38268., 40266., 41292., 42318., 43344., 45477., 46530., 47583., 48636., 50904., 51984., 53064., 54144., 39060., 40392., 41724., 43056., 45432., 46800., 48168., 49536., 52092., 53496., 54900., 56304., 59040., 60480., 61920., 63360., 19287., 20286., 21285., 22284., 23850., 24876., 25902., 26928., 28629., 29682., 30735., 31788., 33624., 34704., 35784., 36864., 21123., 22230., 23337., 24444., 26118., 27252., 28386., 29520., 31329., 32490., 33651., 34812., 36756., 37944., 39132., 40320., 25167., 26046., 26925., 27804., 29682., 30588., 31494., 32400., 34413., 35346., 36279., 37212., 39360., 40320., 41280., 42240., 22395., 23190., 23985., 24780., 26574., 27396., 28218., 29040., 30969., 31818., 32667., 33516., 35580., 36456., 37332., 38208., 16836., 17832., 18828., 19824., 21864., 22896., 23928., 24960., 27180., 28248., 29316., 30384., 32784., 33888., 34992., 36096.,  9675., 10470., 11265., 12060., 13422., 14244., 15066., 15888., 17385., 18234., 19083., 19932., 21564., 22440., 23316., 24192.,  7095.,  7678.,  8261.,  8844.,  9994., 10604., 11214., 11824., 13109., 13746., 14383., 15020., 16440., 17104., 17768., 18432.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {34652., 35224., 35796., 36368., 37544., 38128., 38712., 39296., 40532., 41128., 41724., 42320., 43616., 44224., 44832., 45440., 24460., 24952., 25444., 25936., 27032., 27536., 28040., 28544., 29700., 30216., 30732., 31248., 32464., 32992., 33520., 34048., 26684., 27224., 27764., 28304., 29448., 30000., 30552., 31104., 32308., 32872., 33436., 34000., 35264., 35840., 36416., 36992., 28908., 29496., 30084., 30672., 31864., 32464., 33064., 33664., 34916., 35528., 36140., 36752., 38064., 38688., 39312., 39936., 31132., 31768., 32404., 33040., 34280., 34928., 35576., 36224., 37524., 38184., 38844., 39504., 40864., 41536., 42208., 42880., 37804., 38584., 39364., 40144., 41528., 42320., 43112., 43904., 45348., 46152., 46956., 47760., 49264., 50080., 50896., 51712., 40028., 40856., 41684., 42512., 43944., 44784., 45624., 46464., 47956., 48808., 49660., 50512., 52064., 52928., 53792., 54656., 42252., 43128., 44004., 44880., 46360., 47248., 48136., 49024., 50564., 51464., 52364., 53264., 54864., 55776., 56688., 57600., 44476., 45400., 46324., 47248., 48776., 49712., 50648., 51584., 53172., 54120., 55068., 56016., 57664., 58624., 59584., 60544., 46700., 47672., 48644., 49616., 51192., 52176., 53160., 54144., 55780., 56776., 57772., 58768., 60464., 61472., 62480., 63488., 36732., 37592., 38452., 39312., 40776., 41648., 42520., 43392., 44916., 45800., 46684., 47568., 49152., 50048., 50944., 51840., 30636., 31416., 32196., 32976., 34360., 35152., 35944., 36736., 38180., 38984., 39788., 40592., 42096., 42912., 43728., 44544., 22364., 22936., 23508., 24080., 25256., 25840., 26424., 27008., 28244., 28840., 29436., 30032., 31328., 31936., 32544., 33152., 24588., 25208., 25828., 26448., 27672., 28304., 28936., 29568., 30852., 31496., 32140., 32784., 34128., 34784., 35440., 36096., 22588., 23128., 23668., 24208., 25352., 25904., 26456., 27008., 28212., 28776., 29340., 29904., 31168., 31744., 32320., 32896., 29260., 29944., 30628., 31312., 32600., 33296., 33992., 34688., 36036., 36744., 37452., 38160., 39568., 40288., 41008., 41728., 31484., 32216., 32948., 33680., 35016., 35760., 36504., 37248., 38644., 39400., 40156., 40912., 42368., 43136., 43904., 44672., 33708., 34488., 35268., 36048., 37432., 38224., 39016., 39808., 41252., 42056., 42860., 43664., 45168., 45984., 46800., 47616., 35932., 36760., 37588., 38416., 39848., 40688., 41528., 42368., 43860., 44712., 45564., 46416., 47968., 48832., 49696., 50560., 38156., 39032., 39908., 40784., 42264., 43152., 44040., 44928., 46468., 47368., 48268., 49168., 50768., 51680., 52592., 53504., 42652., 43544., 44436., 45328., 46824., 47728., 48632., 49536., 51092., 52008., 52924., 53840., 55456., 56384., 57312., 58240., 44876., 45816., 46756., 47696., 49240., 50192., 51144., 52096., 53700., 54664., 55628., 56592., 58256., 59232., 60208., 61184., 44796., 45528., 46260., 46992., 48328., 49072., 49816., 50560., 51956., 52712., 53468., 54224., 55680., 56448., 57216., 57984., 32556., 33208., 33860., 34512., 35768., 36432., 37096., 37760., 39076., 39752., 40428., 41104., 42480., 43168., 43856., 44544., 34652., 35224., 35796., 36368., 37544., 38128., 38712., 39296., 40532., 41128., 41724., 42320., 43616., 44224., 44832., 45440.};
  const std::array<int, 4> in_shape = {{ 3, 7, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19536., 25618., 26572., 19530., 20232., 20952., 27490., 28444., 20922., 21624., 28224., 36952., 38128., 27984., 28848., 18024., 23586., 24396., 17886., 18480., 16272., 21234., 22044., 16110., 16704.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {7042., 7120., 7198., 7276., 7354., 7666., 7744., 7822., 7900., 7978., 8290., 8368., 8446., 8524., 8602., 8914., 8992., 9070., 9148., 9226., 9538., 9616., 9694., 9772., 9850.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {23772., 24480., 30836., 31780., 31940., 32920., 23157., 23892., 23958., 24720., 21972., 22704., 28404., 29380., 29508., 30520., 21309., 22068., 22110., 22896., 33840., 34944., 43760., 45232., 45040., 46560., 32556., 33696., 33480., 34656., 16116., 16848., 20596., 21572., 21412., 22424., 15237., 15996., 15822., 16608., 20268., 21024., 26100., 27108., 26916., 27960., 19341., 20124., 19926., 20736.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13292., 14084., 13436., 14240., 13580., 14396., 13724., 14552., 13868., 14708., 14444., 15332., 14588., 15488., 14732., 15644., 14876., 15800., 15020., 15956., 15596., 16580., 15740., 16736., 15884., 16892., 16028., 17048., 16172., 17204., 16748., 17828., 16892., 17984., 17036., 18140., 17180., 18296., 17324., 18452., 17900., 19076., 18044., 19232., 18188., 19388., 18332., 19544., 18476., 19700.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {27636., 28344., 29052., 29760., 35128., 36072., 37016., 37960., 36532., 37512., 38492., 39472., 25803., 26538., 27273., 28008., 26802., 27564., 28326., 29088., 31692., 32424., 33156., 33888., 40472., 41448., 42424., 43400., 41876., 42888., 43900., 44912., 29763., 30522., 31281., 32040., 30762., 31548., 32334., 33120., 38928., 40032., 41136., 42240., 49184., 50656., 52128., 53600., 50672., 52192., 53712., 55232., 35556., 36696., 37836., 38976., 36600., 37776., 38952., 40128., 19980., 20712., 21444., 22176., 24856., 25832., 26808., 27784., 25684., 26696., 27708., 28720., 17619., 18378., 19137., 19896., 18186., 18972., 19758., 20544., 23652., 24408., 25164., 25920., 29688., 30696., 31704., 32712., 30516., 31560., 32604., 33648., 21195., 21978., 22761., 23544., 21762., 22572., 23382., 24192.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {25792., 26584., 27376., 28168., 26068., 26872., 27676., 28480., 26344., 27160., 27976., 28792., 26620., 27448., 28276., 29104., 26896., 27736., 28576., 29416., 28000., 28888., 29776., 30664., 28276., 29176., 30076., 30976., 28552., 29464., 30376., 31288., 28828., 29752., 30676., 31600., 29104., 30040., 30976., 31912., 30208., 31192., 32176., 33160., 30484., 31480., 32476., 33472., 30760., 31768., 32776., 33784., 31036., 32056., 33076., 34096., 31312., 32344., 33376., 34408., 32416., 33496., 34576., 35656., 32692., 33784., 34876., 35968., 32968., 34072., 35176., 36280., 33244., 34360., 35476., 36592., 33520., 34648., 35776., 36904., 34624., 35800., 36976., 38152., 34900., 36088., 37276., 38464., 35176., 36376., 37576., 38776., 35452., 36664., 37876., 39088., 35728., 36952., 38176., 39400.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {29985., 31680., 39064., 41288., 41272., 43568., 29961., 31656., 31563., 33312., 23313., 25056., 30104., 32392., 32312., 34672., 23193., 24936., 24795., 26592., 31740., 33792., 41184., 43872., 43744., 46528., 31548., 33600., 33396., 35520., 16425., 17952., 20920., 22920., 22552., 24624., 15873., 17400., 17043., 18624., 19161., 20544., 24760., 26568., 26392., 28272., 18897., 20280., 20067., 21504.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {26440., 28168., 26728., 28480., 27016., 28792., 27304., 29104., 27592., 29416., 28744., 30664., 29032., 30976., 29320., 31288., 29608., 31600., 29896., 31912., 31048., 33160., 31336., 33472., 31624., 33784., 31912., 34096., 32200., 34408., 33352., 35656., 33640., 35968., 33928., 36280., 34216., 36592., 34504., 36904., 35656., 38152., 35944., 38464., 36232., 38776., 36520., 39088., 36808., 39400.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {33621., 34434., 36408., 37248., 42996., 44080., 46640., 47760., 45804., 46960., 49592., 50784., 32367., 33234., 35154., 36048., 34365., 35286., 37260., 38208., 35589., 36450., 38472., 39360., 45492., 46640., 49264., 50448., 48300., 49520., 52216., 53472., 34143., 35058., 37026., 37968., 36141., 37110., 39132., 40128., 32508., 33528., 35808., 36864., 41072., 42432., 45376., 46784., 44048., 45504., 48544., 50048., 30516., 31608., 33816., 34944., 32604., 33768., 36048., 37248., 21813., 22674., 24264., 25152., 27124., 28272., 30320., 31504., 28780., 30000., 32120., 33376., 19503., 20418., 21954., 22896., 20637., 21606., 23196., 24192., 18213., 18930., 20376., 21120., 22708., 23664., 25520., 26512., 24364., 25392., 27320., 28384., 16479., 17250., 18642., 19440., 17613., 18438., 19884., 20736.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {29292., 30352., 31712., 32784., 29844., 30928., 32312., 33408., 30396., 31504., 32912., 34032., 30948., 32080., 33512., 34656., 31500., 32656., 34112., 35280., 33708., 34960., 36512., 37776., 34260., 35536., 37112., 38400., 34812., 36112., 37712., 39024., 35364., 36688., 38312., 39648., 35916., 37264., 38912., 40272., 20204., 21136., 22368., 23312., 20756., 21712., 22968., 23936., 21308., 22288., 23568., 24560., 21860., 22864., 24168., 25184., 22412., 23440., 24768., 25808., 24620., 25744., 27168., 28304., 25172., 26320., 27768., 28928., 25724., 26896., 28368., 29552., 26276., 27472., 28968., 30176., 26828., 28048., 29568., 30800., 29036., 30352., 31968., 33296., 29588., 30928., 32568., 33920., 30140., 31504., 33168., 34544., 30692., 32080., 33768., 35168., 31244., 32656., 34368., 35792.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {33789., 34602., 35415., 36228., 38184., 39024., 39864., 40704., 41388., 42472., 43556., 44640., 47104., 48224., 49344., 50464., 43860., 45016., 46172., 47328., 49864., 51056., 52248., 53440., 28923., 29790., 30657., 31524., 33318., 34212., 35106., 36000., 30561., 31482., 32403., 33324., 35172., 36120., 37068., 38016., 31533., 32394., 33255., 34116., 36120., 37008., 37896., 38784., 38124., 39272., 40420., 41568., 44096., 45280., 46464., 47648., 40596., 41816., 43036., 44256., 46856., 48112., 49368., 50624., 26283., 27198., 28113., 29028., 30870., 31812., 32754., 33696., 27921., 28890., 29859., 30828., 32724., 33720., 34716., 35712., 31356., 32376., 33396., 34416., 36768., 37824., 38880., 39936., 37264., 38624., 39984., 41344., 44288., 45696., 47104., 48512., 40048., 41504., 42960., 44416., 47456., 48960., 50464., 51968., 24996., 26088., 27180., 28272., 30408., 31536., 32664., 33792., 26796., 27960., 29124., 30288., 32496., 33696., 34896., 36096., 26445., 27306., 28167., 29028., 30744., 31632., 32520., 33408., 31340., 32488., 33636., 34784., 36928., 38112., 39296., 40480., 33044., 34264., 35484., 36704., 38920., 40176., 41432., 42688., 20619., 21534., 22449., 23364., 24918., 25860., 26802., 27744., 21681., 22650., 23619., 24588., 26196., 27192., 28188., 29184., 22461., 23178., 23895., 24612., 26184., 26928., 27672., 28416., 26796., 27752., 28708., 29664., 31616., 32608., 33600., 34592., 28500., 29528., 30556., 31584., 33608., 34672., 35736., 36800., 17787., 18558., 19329., 20100., 21510., 22308., 23106., 23904., 18849., 19674., 20499., 21324., 22788., 23640., 24492., 25344.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {26292., 26840., 27388., 27936., 29072., 29632., 30192., 30752., 27372., 27944., 28516., 29088., 30248., 30832., 31416., 32000., 28452., 29048., 29644., 30240., 31424., 32032., 32640., 33248., 29532., 30152., 30772., 31392., 32600., 33232., 33864., 34496., 30612., 31256., 31900., 32544., 33776., 34432., 35088., 35744., 25460., 25944., 26428., 26912., 27984., 28480., 28976., 29472., 26540., 27048., 27556., 28064., 29160., 29680., 30200., 30720., 27620., 28152., 28684., 29216., 30336., 30880., 31424., 31968., 28700., 29256., 29812., 30368., 31512., 32080., 32648., 33216., 29780., 30360., 30940., 31520., 32688., 33280., 33872., 34464., 16436., 16856., 17276., 17696., 18704., 19136., 19568., 20000., 17516., 17960., 18404., 18848., 19880., 20336., 20792., 21248., 18596., 19064., 19532., 20000., 21056., 21536., 22016., 22496., 19676., 20168., 20660., 21152., 22232., 22736., 23240., 23744., 20756., 21272., 21788., 22304., 23408., 23936., 24464., 24992., 25076., 25688., 26300., 26912., 28112., 28736., 29360., 29984., 26156., 26792., 27428., 28064., 29288., 29936., 30584., 31232., 27236., 27896., 28556., 29216., 30464., 31136., 31808., 32480., 28316., 29000., 29684., 30368., 31640., 32336., 33032., 33728., 29396., 30104., 30812., 31520., 32816., 33536., 34256., 34976., 33716., 34520., 35324., 36128., 37520., 38336., 39152., 39968., 34796., 35624., 36452., 37280., 38696., 39536., 40376., 41216., 35876., 36728., 37580., 38432., 39872., 40736., 41600., 42464., 36956., 37832., 38708., 39584., 41048., 41936., 42824., 43712., 38036., 38936., 39836., 40736., 42224., 43136., 44048., 44960.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {26775., 28548., 30375., 32256., 34668., 36960., 39324., 41760., 40284., 42720., 45228., 47808., 28215., 29988., 31815., 33696., 32211., 34092., 36027., 38016., 38583., 40644., 42759., 44928., 49644., 52320., 55068., 57888., 55260., 58080., 60972., 63936., 38871., 40932., 43047., 45216., 42867., 45036., 47259., 49536., 28884., 30960., 33108., 35328., 37136., 39808., 42576., 45440., 43088., 45952., 48912., 51968., 29652., 31728., 33876., 36096., 33828., 36048., 38340., 40704., 23751., 25380., 27063., 28800., 29868., 31968., 34140., 36384., 33180., 35424., 37740., 40128., 22311., 23940., 25623., 27360., 24579., 26316., 28107., 29952., 16551., 17892., 19287., 20736., 21036., 22752., 24540., 26400., 24348., 26208., 28140., 30144., 16263., 17604., 18999., 20448., 18531., 19980., 21483., 23040.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {26564., 27936., 29332., 30752., 27668., 29088., 30532., 32000., 28772., 30240., 31732., 33248., 29876., 31392., 32932., 34496., 30980., 32544., 34132., 35744., 25668., 26912., 28180., 29472., 26772., 28064., 29380., 30720., 27876., 29216., 30580., 31968., 28980., 30368., 31780., 33216., 30084., 31520., 32980., 34464., 16580., 17696., 18836., 20000., 17684., 18848., 20036., 21248., 18788., 20000., 21236., 22496., 19892., 21152., 22436., 23744., 20996., 22304., 23636., 24992., 25412., 26912., 28436., 29984., 26516., 28064., 29636., 31232., 27620., 29216., 30836., 32480., 28724., 30368., 32036., 33728., 29828., 31520., 33236., 34976., 34244., 36128., 38036., 39968., 35348., 37280., 39236., 41216., 36452., 38432., 40436., 42464., 37556., 39584., 41636., 43712., 38660., 40736., 42836., 44960.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {25647., 26286., 28014., 28680., 30489., 31182., 33072., 33792., 32132., 32984., 35144., 36032., 38300., 39224., 41600., 42560., 37076., 38072., 40376., 41408., 43820., 44888., 47408., 48512., 23811., 24558., 26178., 26952., 28653., 29454., 31236., 32064., 27087., 27942., 29670., 30552., 32361., 33270., 35160., 36096., 36687., 37614., 39630., 40584., 42681., 43662., 45840., 46848., 45316., 46552., 49096., 50368., 53020., 54328., 57088., 58432., 50260., 51640., 54328., 55744., 58540., 59992., 62896., 64384., 32547., 33582., 35490., 36552., 38541., 39630., 41700., 42816., 35823., 36966., 38982., 40152., 42249., 43446., 45624., 46848., 29652., 30504., 32616., 33504., 35724., 36648., 38976., 39936., 36784., 37920., 40544., 41728., 44496., 45728., 48640., 49920., 42352., 43680., 46496., 47872., 50832., 52256., 55360., 56832., 26436., 27432., 29400., 30432., 32508., 33576., 35760., 36864., 30036., 31176., 33288., 34464., 36684., 37896., 40224., 41472., 26799., 27726., 29454., 30408., 32217., 33198., 35088., 36096., 32132., 33368., 35528., 36800., 39068., 40376., 42752., 44096., 35540., 36920., 39224., 40640., 43052., 44504., 47024., 48512., 21507., 22542., 24162., 25224., 26925., 28014., 29796., 30912., 23631., 24774., 26502., 27672., 29481., 30678., 32568., 33792., 18831., 19470., 20910., 21576., 23097., 23790., 25392., 26112., 23044., 23896., 25672., 26560., 28444., 29368., 31360., 32320., 26452., 27448., 29368., 30400., 32428., 33496., 35632., 36736., 15843., 16590., 17922., 18696., 20109., 20910., 22404., 23232., 17967., 18822., 20262., 21144., 22665., 23574., 25176., 26112.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24908., 25480., 26616., 27200., 28372., 28968., 30176., 30784., 27068., 27688., 28872., 29504., 30724., 31368., 32624., 33280., 29228., 29896., 31128., 31808., 33076., 33768., 35072., 35776., 31388., 32104., 33384., 34112., 35428., 36168., 37520., 38272., 33548., 34312., 35640., 36416., 37780., 38568., 39968., 40768., 32716., 33416., 34680., 35392., 36692., 37416., 38752., 39488., 34876., 35624., 36936., 37696., 39044., 39816., 41200., 41984., 37036., 37832., 39192., 40000., 41396., 42216., 43648., 44480., 39196., 40040., 41448., 42304., 43748., 44616., 46096., 46976., 41356., 42248., 43704., 44608., 46100., 47016., 48544., 49472., 26956., 27528., 28664., 29248., 30420., 31016., 32224., 32832., 29116., 29736., 30920., 31552., 32772., 33416., 34672., 35328., 31276., 31944., 33176., 33856., 35124., 35816., 37120., 37824., 33436., 34152., 35432., 36160., 37476., 38216., 39568., 40320., 35596., 36360., 37688., 38464., 39828., 40616., 42016., 42816., 30668., 31368., 32632., 33344., 34644., 35368., 36704., 37440., 32828., 33576., 34888., 35648., 36996., 37768., 39152., 39936., 34988., 35784., 37144., 37952., 39348., 40168., 41600., 42432., 37148., 37992., 39400., 40256., 41700., 42568., 44048., 44928., 39308., 40200., 41656., 42560., 44052., 44968., 46496., 47424., 24908., 25480., 26616., 27200., 28372., 28968., 30176., 30784., 27068., 27688., 28872., 29504., 30724., 31368., 32624., 33280., 29228., 29896., 31128., 31808., 33076., 33768., 35072., 35776., 31388., 32104., 33384., 34112., 35428., 36168., 37520., 38272., 33548., 34312., 35640., 36416., 37780., 38568., 39968., 40768.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4095.,  4446.,  4797.,  5148.,  5922.,  6300.,  6678.,  7056.,  7965.,  8370.,  8775.,  9180., 10224., 10656., 11088., 11520.,  5364.,  5832.,  6300.,  6768.,  7704.,  8208.,  8712.,  9216., 10332., 10872., 11412., 11952., 13248., 13824., 14400., 14976.,  6660.,  7272.,  7884.,  8496.,  9576., 10224., 10872., 11520., 12780., 13464., 14148., 14832., 16272., 16992., 17712., 18432.,  2907.,  3366.,  3825.,  4284.,  5022.,  5508.,  5994.,  6480.,  7353.,  7866.,  8379.,  8892.,  9900., 10440., 10980., 11520.,  3591.,  4158.,  4725.,  5292.,  6138.,  6732.,  7326.,  7920.,  8901.,  9522., 10143., 10764., 11880., 12528., 13176., 13824.,  4095.,  4446.,  4797.,  5148.,  5922.,  6300.,  6678.,  7056.,  7965.,  8370.,  8775.,  9180., 10224., 10656., 11088., 11520.,  5364.,  5832.,  6300.,  6768.,  7704.,  8208.,  8712.,  9216., 10332., 10872., 11412., 11952., 13248., 13824., 14400., 14976.,  6660.,  7272.,  7884.,  8496.,  9576., 10224., 10872., 11520., 12780., 13464., 14148., 14832., 16272., 16992., 17712., 18432.,  2907.,  3366.,  3825.,  4284.,  5022.,  5508.,  5994.,  6480.,  7353.,  7866.,  8379.,  8892.,  9900., 10440., 10980., 11520.,  3591.,  4158.,  4725.,  5292.,  6138.,  6732.,  7326.,  7920.,  8901.,  9522., 10143., 10764., 11880., 12528., 13176., 13824.,  5460.,  5928.,  6396.,  6864.,  7896.,  8400.,  8904.,  9408., 10620., 11160., 11700., 12240., 13632., 14208., 14784., 15360.,  7152.,  7776.,  8400.,  9024., 10272., 10944., 11616., 12288., 13776., 14496., 15216., 15936., 17664., 18432., 19200., 19968.,  8880.,  9696., 10512., 11328., 12768., 13632., 14496., 15360., 17040., 17952., 18864., 19776., 21696., 22656., 23616., 24576.,  3876.,  4488.,  5100.,  5712.,  6696.,  7344.,  7992.,  8640.,  9804., 10488., 11172., 11856., 13200., 13920., 14640., 15360.,  4788.,  5544.,  6300.,  7056.,  8184.,  8976.,  9768., 10560., 11868., 12696., 13524., 14352., 15840., 16704., 17568., 18432.,  4095.,  4446.,  4797.,  5148.,  5922.,  6300.,  6678.,  7056.,  7965.,  8370.,  8775.,  9180., 10224., 10656., 11088., 11520.,  5364.,  5832.,  6300.,  6768.,  7704.,  8208.,  8712.,  9216., 10332., 10872., 11412., 11952., 13248., 13824., 14400., 14976.,  6660.,  7272.,  7884.,  8496.,  9576., 10224., 10872., 11520., 12780., 13464., 14148., 14832., 16272., 16992., 17712., 18432.,  2907.,  3366.,  3825.,  4284.,  5022.,  5508.,  5994.,  6480.,  7353.,  7866.,  8379.,  8892.,  9900., 10440., 10980., 11520.,  3591.,  4158.,  4725.,  5292.,  6138.,  6732.,  7326.,  7920.,  8901.,  9522., 10143., 10764., 11880., 12528., 13176., 13824.,  4095.,  4446.,  4797.,  5148.,  5922.,  6300.,  6678.,  7056.,  7965.,  8370.,  8775.,  9180., 10224., 10656., 11088., 11520.,  5364.,  5832.,  6300.,  6768.,  7704.,  8208.,  8712.,  9216., 10332., 10872., 11412., 11952., 13248., 13824., 14400., 14976.,  6660.,  7272.,  7884.,  8496.,  9576., 10224., 10872., 11520., 12780., 13464., 14148., 14832., 16272., 16992., 17712., 18432.,  2907.,  3366.,  3825.,  4284.,  5022.,  5508.,  5994.,  6480.,  7353.,  7866.,  8379.,  8892.,  9900., 10440., 10980., 11520.,  3591.,  4158.,  4725.,  5292.,  6138.,  6732.,  7326.,  7920.,  8901.,  9522., 10143., 10764., 11880., 12528., 13176., 13824.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {30300., 30872., 31444., 32016., 33192., 33776., 34360., 34944., 36180., 36776., 37372., 37968., 39264., 39872., 40480., 41088., 32524., 33144., 33764., 34384., 35608., 36240., 36872., 37504., 38788., 39432., 40076., 40720., 42064., 42720., 43376., 44032., 34748., 35416., 36084., 36752., 38024., 38704., 39384., 40064., 41396., 42088., 42780., 43472., 44864., 45568., 46272., 46976., 36972., 37688., 38404., 39120., 40440., 41168., 41896., 42624., 44004., 44744., 45484., 46224., 47664., 48416., 49168., 49920., 39196., 39960., 40724., 41488., 42856., 43632., 44408., 45184., 46612., 47400., 48188., 48976., 50464., 51264., 52064., 52864., 29404., 30104., 30804., 31504., 32808., 33520., 34232., 34944., 36308., 37032., 37756., 38480., 39904., 40640., 41376., 42112., 31628., 32376., 33124., 33872., 35224., 35984., 36744., 37504., 38916., 39688., 40460., 41232., 42704., 43488., 44272., 45056., 33852., 34648., 35444., 36240., 37640., 38448., 39256., 40064., 41524., 42344., 43164., 43984., 45504., 46336., 47168., 48000., 36076., 36920., 37764., 38608., 40056., 40912., 41768., 42624., 44132., 45000., 45868., 46736., 48304., 49184., 50064., 50944., 38300., 39192., 40084., 40976., 42472., 43376., 44280., 45184., 46740., 47656., 48572., 49488., 51104., 52032., 52960., 53888., 34396., 34968., 35540., 36112., 37288., 37872., 38456., 39040., 40276., 40872., 41468., 42064., 43360., 43968., 44576., 45184., 36620., 37240., 37860., 38480., 39704., 40336., 40968., 41600., 42884., 43528., 44172., 44816., 46160., 46816., 47472., 48128., 38844., 39512., 40180., 40848., 42120., 42800., 43480., 44160., 45492., 46184., 46876., 47568., 48960., 49664., 50368., 51072., 41068., 41784., 42500., 43216., 44536., 45264., 45992., 46720., 48100., 48840., 49580., 50320., 51760., 52512., 53264., 54016., 43292., 44056., 44820., 45584., 46952., 47728., 48504., 49280., 50708., 51496., 52284., 53072., 54560., 55360., 56160., 56960., 25308., 26008., 26708., 27408., 28712., 29424., 30136., 30848., 32212., 32936., 33660., 34384., 35808., 36544., 37280., 38016., 27532., 28280., 29028., 29776., 31128., 31888., 32648., 33408., 34820., 35592., 36364., 37136., 38608., 39392., 40176., 40960., 29756., 30552., 31348., 32144., 33544., 34352., 35160., 35968., 37428., 38248., 39068., 39888., 41408., 42240., 43072., 43904., 31980., 32824., 33668., 34512., 35960., 36816., 37672., 38528., 40036., 40904., 41772., 42640., 44208., 45088., 45968., 46848., 34204., 35096., 35988., 36880., 38376., 39280., 40184., 41088., 42644., 43560., 44476., 45392., 47008., 47936., 48864., 49792., 30300., 30872., 31444., 32016., 33192., 33776., 34360., 34944., 36180., 36776., 37372., 37968., 39264., 39872., 40480., 41088., 32524., 33144., 33764., 34384., 35608., 36240., 36872., 37504., 38788., 39432., 40076., 40720., 42064., 42720., 43376., 44032., 34748., 35416., 36084., 36752., 38024., 38704., 39384., 40064., 41396., 42088., 42780., 43472., 44864., 45568., 46272., 46976., 36972., 37688., 38404., 39120., 40440., 41168., 41896., 42624., 44004., 44744., 45484., 46224., 47664., 48416., 49168., 49920., 39196., 39960., 40724., 41488., 42856., 43632., 44408., 45184., 46612., 47400., 48188., 48976., 50464., 51264., 52064., 52864.};
  const std::array<int, 4> in_shape = {{ 3, 7, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {42756., 52815., 54300., 42810., 43980., 43488., 50129., 51614., 37294., 38464., 43640., 53202., 55032., 42664., 44104., 37068., 42504., 43764., 31334., 32324., 33568., 40832., 42092., 32594., 33584.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19527., 19698., 19869., 20040., 20211., 21237., 21408., 21579., 21750., 21921., 22947., 23118., 23289., 23460., 23631., 24657., 24828., 24999., 25170., 25341., 26367., 26538., 26709., 26880., 27051.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {36780., 37896., 46059., 47454., 47512., 48952., 37620., 38772., 38772., 39960., 38204., 39488., 46317., 47842., 47770., 49340., 35508., 36700., 36660., 37888., 42432., 43760., 52680., 54308., 54488., 56176., 42288., 43600., 43712., 45072., 37140., 38424., 46747., 48272., 48070., 49640., 36900., 38092., 37948., 39176., 37012., 38208., 44233., 45696., 45556., 47064., 34580., 35748., 35628., 36832.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {37560., 39054., 37884., 39396., 38208., 39738., 38532., 40080., 38856., 40422., 40800., 42474., 41124., 42816., 41448., 43158., 41772., 43500., 42096., 43842., 44040., 45894., 44364., 46236., 44688., 46578., 45012., 46920., 45336., 47262., 47280., 49314., 47604., 49656., 47928., 49998., 48252., 50340., 48576., 50682., 50520., 52734., 50844., 53076., 51168., 53418., 51492., 53760., 51816., 54102.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {29820., 30936., 32052., 33168., 39203., 40598., 41993., 43388., 40592., 42032., 43472., 44912., 32232., 33384., 34536., 35688., 33348., 34536., 35724., 36912., 32628., 33912., 35196., 36480., 41253., 42778., 44303., 45828., 42642., 44212., 45782., 47352., 32832., 34024., 35216., 36408., 33948., 35176., 36404., 37632., 38352., 39680., 41008., 42336., 52020., 53648., 55276., 56904., 53784., 55472., 57160., 58848., 43968., 45280., 46592., 47904., 45360., 46720., 48080., 49440., 42276., 43560., 44844., 46128., 53249., 54774., 56299., 57824., 54634., 56204., 57774., 59344., 44256., 45448., 46640., 47832., 45356., 46584., 47812., 49040., 40700., 41896., 43092., 44288., 48411., 49874., 51337., 52800., 49796., 51304., 52812., 54320., 38232., 39400., 40568., 41736., 39332., 40536., 41740., 42944.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {28314., 29040., 29766., 30492., 28944., 29688., 30432., 31176., 29574., 30336., 31098., 31860., 30204., 30984., 31764., 32544., 30834., 31632., 32430., 33228., 34614., 35520., 36426., 37332., 35244., 36168., 37092., 38016., 35874., 36816., 37758., 38700., 36504., 37464., 38424., 39384., 37134., 38112., 39090., 40068., 40914., 42000., 43086., 44172., 41544., 42648., 43752., 44856., 42174., 43296., 44418., 45540., 42804., 43944., 45084., 46224., 43434., 44592., 45750., 46908., 47214., 48480., 49746., 51012., 47844., 49128., 50412., 51696., 48474., 49776., 51078., 52380., 49104., 50424., 51744., 53064., 43974., 45184., 46394., 47604., 37770., 38832., 39894., 40956., 38400., 39480., 40560., 41640., 39030., 40128., 41226., 42324., 39660., 40776., 41892., 43008., 40290., 41424., 42558., 43692.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {35728., 38032., 45993., 48828., 48899., 51824., 39528., 41832., 41832., 44208., 39280., 41728., 46125., 49092., 49031., 52088., 34856., 37176., 37160., 39552., 45072., 47968., 52480., 56008., 56096., 59744., 41744., 44576., 44592., 47520., 33672., 36016., 41995., 44832., 44641., 47568., 33520., 35736., 35616., 37904., 34504., 36736., 39143., 41856., 41789., 44592., 30672., 32840., 32768., 35008.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {28716., 30492., 29364., 31176., 30012., 31860., 30660., 32544., 31308., 33228., 35196., 37332., 35844., 38016., 36492., 38700., 37140., 39384., 37788., 40068., 41676., 44172., 42324., 44856., 42972., 45540., 43620., 46224., 44268., 46908., 48156., 51012., 48804., 51696., 49452., 52380., 50100., 53064., 44860., 47604., 38508., 40956., 39156., 41640., 39804., 42324., 40452., 43008., 41100., 43692.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {35468., 36576., 38824., 39968., 46425., 47762., 50578., 51960., 49203., 50630., 53536., 55008., 40436., 41552., 43856., 45008., 42668., 43856., 46232., 47456., 34492., 35744., 38136., 39424., 41693., 43162., 46110., 47624., 44471., 46030., 49068., 50672., 32612., 33744., 36064., 37232., 34844., 36048., 38440., 39680., 40816., 42208., 45088., 46528., 50820., 52480., 56024., 57744., 54348., 56128., 59792., 61632., 41808., 43168., 46016., 47424., 44592., 46048., 48992., 50496., 38380., 39632., 42072., 43360., 47257., 48726., 51670., 53184., 50027., 51586., 54620., 56224., 38836., 39968., 42272., 43440., 41036., 42240., 44616., 45856., 33244., 34384., 36712., 37888., 37837., 39182., 42002., 43392., 40607., 42042., 44952., 46432., 30372., 31456., 33712., 34832., 32572., 33728., 36056., 37248.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {29118., 29784., 31116., 31800., 30378., 31080., 32448., 33168., 31638., 32376., 33780., 34536., 32898., 33672., 35112., 35904., 34158., 34968., 36444., 37272., 41718., 42744., 44436., 45480., 42978., 44040., 45768., 46848., 44238., 45336., 47100., 48216., 45498., 46632., 48432., 49584., 46758., 47928., 49764., 50952., 54318., 55704., 57756., 59160., 55578., 57000., 59088., 60528., 56838., 58296., 60420., 61896., 58098., 59592., 61752., 63264., 59358., 60888., 63084., 64632., 49766., 51256., 53412., 54920., 51026., 52552., 54744., 56288., 44478., 45912., 48012., 49464., 45738., 47208., 49344., 50832., 41238., 42616., 44660., 46056., 36126., 37336., 39212., 40440., 37386., 38632., 40544., 41808., 36470., 37624., 39444., 40616., 37730., 38920., 40776., 41984., 37326., 38424., 40188., 41304.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {30468., 31576., 32684., 33792., 36056., 37200., 38344., 39488., 40441., 41778., 43115., 44452., 47294., 48676., 50058., 51440., 43091., 44518., 45945., 47372., 50304., 51776., 53248., 54720., 34316., 35432., 36548., 37664., 39968., 41120., 42272., 43424., 36404., 37592., 38780., 39968., 42344., 43568., 44792., 46016., 35284., 36536., 37788., 39040., 41448., 42736., 44024., 45312., 43645., 45114., 46583., 48052., 51026., 52540., 54054., 55568., 46295., 47854., 49413., 50972., 54036., 55640., 57244., 58848., 32476., 33608., 34740., 35872., 38192., 39360., 40528., 41696., 34564., 35768., 36972., 38176., 40568., 41808., 43048., 44288., 36336., 37728., 39120., 40512., 43424., 44864., 46304., 47744., 45708., 47368., 49028., 50688., 54264., 55984., 57704., 59424., 49060., 50840., 52620., 54400., 58096., 59936., 61776., 63616., 39120., 40480., 41840., 43200., 46080., 47488., 48896., 50304., 41776., 43232., 44688., 46144., 49120., 50624., 52128., 53632., 35444., 36696., 37948., 39200., 41640., 42928., 44216., 45504., 40373., 41842., 43311., 44780., 47682., 49196., 50710., 52224., 42879., 44438., 45997., 47556., 50548., 52152., 53756., 55360., 32124., 33256., 34388., 35520., 37808., 38976., 40144., 41312., 34148., 35352., 36556., 37760., 40120., 41360., 42600., 43840., 35012., 36152., 37292., 38432., 40760., 41936., 43112., 44288., 37273., 38618., 39963., 41308., 44086., 45476., 46866., 48256., 39779., 41214., 42649., 44084., 46952., 48432., 49912., 51392., 29068., 30152., 31236., 32320., 34560., 35680., 36800., 37920., 31092., 32248., 33404., 34560., 36872., 38064., 39256., 40448.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13090., 13564., 14038., 14512., 15532., 16024., 16516., 17008., 14038., 14548., 15058., 15568., 16624., 17152., 17680., 18208., 13386., 13868., 14350., 14832., 15860., 16360., 16860., 17360., 14334., 14852., 15370., 15888., 16952., 17488., 18024., 18560., 14194., 14684., 15174., 15664., 16700., 17208., 17716., 18224., 14570., 15084., 15598., 16112., 17172., 17704., 18236., 18768., 15518., 16068., 16618., 17168., 18264., 18832., 19400., 19968., 14866., 15388., 15910., 16432., 17500., 18040., 18580., 19120., 15814., 16372., 16930., 17488., 18592., 19168., 19744., 20320., 16762., 17356., 17950., 18544., 19684., 20296., 20908., 21520., 14578., 15196., 15814., 16432., 17596., 18232., 18868., 19504., 15526., 16180., 16834., 17488., 18688., 19360., 20032., 20704., 16410., 17036., 17662., 18288., 19460., 20104., 20748., 21392., 17358., 18020., 18682., 19344., 20552., 21232., 21912., 22592., 14658., 15292., 15926., 16560., 17740., 18392., 19044., 19696., 14906., 15436., 15966., 16496., 17572., 18120., 18668., 19216., 15854., 16420., 16986., 17552., 18664., 19248., 19832., 20416., 13090., 13564., 14038., 14512., 15532., 16024., 16516., 17008., 14038., 14548., 15058., 15568., 16624., 17152., 17680., 18208., 13386., 13868., 14350., 14832., 15860., 16360., 16860., 17360., 14786., 15292., 15798., 16304., 17356., 17880., 18404., 18928., 15734., 16276., 16818., 17360., 18448., 19008., 19568., 20128., 14570., 15084., 15598., 16112., 17172., 17704., 18236., 18768., 15518., 16068., 16618., 17168., 18264., 18832., 19400., 19968., 14866., 15388., 15910., 16432., 17500., 18040., 18580., 19120.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8876., 10048., 11292., 12608.,  8709., 10020., 11421., 12912., 11449., 12940., 14521., 16192.,  8076.,  9120., 10236., 11424., 10236., 11424., 12684., 14016.,  9068., 10240., 11484., 12800.,  9741., 11060., 12469., 13968., 12481., 13980., 15569., 17248.,  6604.,  7648.,  8764.,  9952.,  8764.,  9952., 11212., 12544., 12080., 13632., 15280., 17024., 10340., 12032., 13844., 15776., 13812., 15744., 17796., 19968.,  8816., 10176., 11632., 13184., 11568., 13120., 14768., 16512.,  8444.,  9632., 10892., 12224.,  8553.,  9836., 11209., 12672., 11149., 12612., 14165., 15808.,  6652.,  7680.,  8780.,  9952.,  8748.,  9920., 11164., 12480.,  9532., 10720., 11980., 13312.,  8113.,  9372., 10721., 12160., 10709., 12148., 13677., 15296.,  7356.,  8384.,  9484., 10656.,  9452., 10624., 11868., 13184.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {32646., 34224., 35838., 37488., 35166., 36816., 38502., 40224., 31926., 33520., 35150., 36816., 34446., 36112., 37814., 39552., 31718., 33328., 34974., 36656., 37238., 38896., 40590., 42320., 39758., 41488., 43254., 45056., 40614., 42288., 43998., 45744., 43134., 44880., 46662., 48480., 45654., 47472., 49326., 51216., 40422., 42288., 44190., 46128., 42942., 44880., 46854., 48864., 41238., 43120., 45038., 46992., 43758., 45712., 47702., 49728., 42566., 44464., 46398., 48368., 35542., 37232., 38958., 40720., 38062., 39824., 41622., 43456., 32646., 34224., 35838., 37488., 35166., 36816., 38502., 40224., 31926., 33520., 35150., 36816., 34374., 36016., 37694., 39408., 36894., 38608., 40358., 42144., 37238., 38896., 40590., 42320., 39758., 41488., 43254., 45056., 40614., 42288., 43998., 45744.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7764.,  8376.,  9528., 10176., 11436., 12120., 13488., 14208.,  7941.,  8522.,  9814., 10440., 11867., 12538., 14100., 14816., 10425., 11186., 12658., 13464., 15071., 15922., 17664., 18560.,  6404.,  6872.,  7880.,  8384.,  9500., 10040., 11264., 11840.,  8276.,  8888., 10040., 10688., 11948., 12632., 14000., 14720.,  7892.,  8504.,  9656., 10304., 11564., 12248., 13616., 14336.,  8461.,  9050., 10350., 10984., 12419., 13098., 14668., 15392., 10945., 11714., 13194., 14008., 15623., 16482., 18232., 19136.,  6020.,  6488.,  7496.,  8000.,  9116.,  9656., 10880., 11456.,  7892.,  8504.,  9656., 10304., 11564., 12248., 13616., 14336., 10608., 11424., 12960., 13824., 15504., 16416., 18240., 19200.,  9804., 10568., 12232., 13056., 14900., 15784., 17808., 18752., 12924., 13928., 15832., 16896., 18980., 20104., 22368., 23552.,  8112.,  8736., 10080., 10752., 12240., 12960., 14592., 15360., 10608., 11424., 12960., 13824., 15504., 16416., 18240., 19200.,  8276.,  8888., 10040., 10688., 11948., 12632., 14000., 14720.,  7109.,  7698.,  8926.,  9560., 10923., 11602., 13100., 13824.,  9305., 10074., 11482., 12296., 13839., 14698., 16376., 17280.,  5892.,  6360.,  7368.,  7872.,  8988.,  9528., 10752., 11328.,  7764.,  8376.,  9528., 10176., 11436., 12120., 13488., 14208.,  7892.,  8504.,  9656., 10304., 11564., 12248., 13616., 14336.,  6765.,  7330.,  8534.,  9144., 10483., 11138., 12612., 13312.,  8961.,  9706., 11090., 11880., 13399., 14234., 15888., 16768.,  6020.,  6488.,  7496.,  8000.,  9116.,  9656., 10880., 11456.,  7892.,  8504.,  9656., 10304., 11564., 12248., 13616., 14336.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12970., 13452., 14444., 14944., 15990., 16508., 17608., 18144., 14866., 15420., 16484., 17056., 18174., 18764., 19936., 20544., 12538., 13036., 14044., 14560., 15622., 16156., 17272., 17824., 14434., 15004., 16084., 16672., 17806., 18412., 19600., 20224., 13130., 13644., 14668., 15200., 16278., 16828., 17960., 18528., 12346., 12908., 13980., 14560., 15686., 16284., 17464., 18080., 14242., 14876., 16020., 16672., 17870., 18540., 19792., 20480., 12874., 13388., 14412., 14944., 16022., 16572., 17704., 18272., 14770., 15356., 16452., 17056., 18206., 18828., 20032., 20672., 16026., 16556., 17596., 18144., 19238., 19804., 20952., 21536., 13130., 13644., 14668., 15200., 16278., 16828., 17960., 18528., 15026., 15612., 16708., 17312., 18462., 19084., 20288., 20928., 16282., 16812., 17852., 18400., 19494., 20060., 21208., 21792., 18178., 18780., 19892., 20512., 21678., 22316., 23536., 24192., 13802., 14348., 15404., 15968., 17078., 17660., 18824., 19424., 16026., 16556., 17596., 18144., 19238., 19804., 20952., 21536., 17922., 18524., 19636., 20256., 21422., 22060., 23280., 23936., 12970., 13452., 14444., 14944., 15990., 16508., 17608., 18144., 14866., 15420., 16484., 17056., 18174., 18764., 19936., 20544., 12538., 13036., 14044., 14560., 15622., 16156., 17272., 17824., 13802., 14348., 15404., 15968., 17078., 17660., 18824., 19424., 15698., 16316., 17444., 18080., 19262., 19916., 21152., 21824., 12346., 12908., 13980., 14560., 15686., 16284., 17464., 18080., 14242., 14876., 16020., 16672., 17870., 18540., 19792., 20480., 12874., 13388., 14412., 14944., 16022., 16572., 17704., 18272.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5636.,  6248.,  6860.,  7472.,  8552.,  9200.,  9848., 10496., 11756., 12440., 13124., 13808., 15248., 15968., 16688., 17408.,  5573.,  6154.,  6735.,  7316.,  8506.,  9132.,  9758., 10384., 11799., 12470., 13141., 13812., 15452., 16168., 16884., 17600.,  7289.,  8050.,  8811.,  9572., 10942., 11748., 12554., 13360., 14955., 15806., 16657., 17508., 19328., 20224., 21120., 22016.,  4340.,  4808.,  5276.,  5744.,  6680.,  7184.,  7688.,  8192.,  9308.,  9848., 10388., 10928., 12224., 12800., 13376., 13952.,  5636.,  6248.,  6860.,  7472.,  8552.,  9200.,  9848., 10496., 11756., 12440., 13124., 13808., 15248., 15968., 16688., 17408.,  5380.,  5992.,  6604.,  7216.,  8296.,  8944.,  9592., 10240., 11500., 12184., 12868., 13552., 14992., 15712., 16432., 17152.,  5581.,  6170.,  6759.,  7348.,  8546.,  9180.,  9814., 10448., 11871., 12550., 13229., 13908., 15556., 16280., 17004., 17728.,  7297.,  8066.,  8835.,  9604., 10982., 11796., 12610., 13424., 15027., 15886., 16745., 17604., 19432., 20336., 21240., 22144.,  4084.,  4552.,  5020.,  5488.,  6424.,  6928.,  7432.,  7936.,  9052.,  9592., 10132., 10672., 11968., 12544., 13120., 13696.,  5380.,  5992.,  6604.,  7216.,  8296.,  8944.,  9592., 10240., 11500., 12184., 12868., 13552., 14992., 15712., 16432., 17152.,  7344.,  8160.,  8976.,  9792., 11232., 12096., 12960., 13824., 15504., 16416., 17328., 18240., 20160., 21120., 22080., 23040.,  6620.,  7384.,  8148.,  8912., 10456., 11280., 12104., 12928., 14772., 15656., 16540., 17424., 19568., 20512., 21456., 22400.,  8780.,  9784., 10788., 11792., 13576., 14640., 15704., 16768., 18852., 19976., 21100., 22224., 24608., 25792., 26976., 28160.,  5616.,  6240.,  6864.,  7488.,  8736.,  9408., 10080., 10752., 12240., 12960., 13680., 14400., 16128., 16896., 17664., 18432.,  7344.,  8160.,  8976.,  9792., 11232., 12096., 12960., 13824., 15504., 16416., 17328., 18240., 20160., 21120., 22080., 23040.,  5636.,  6248.,  6860.,  7472.,  8552.,  9200.,  9848., 10496., 11756., 12440., 13124., 13808., 15248., 15968., 16688., 17408.,  5021.,  5610.,  6199.,  6788.,  7938.,  8572.,  9206.,  9840., 11215., 11894., 12573., 13252., 14852., 15576., 16300., 17024.,  6545.,  7314.,  8083.,  8852., 10182., 10996., 11810., 12624., 14179., 15038., 15897., 16756., 18536., 19440., 20344., 21248.,  4340.,  4808.,  5276.,  5744.,  6680.,  7184.,  7688.,  8192.,  9308.,  9848., 10388., 10928., 12224., 12800., 13376., 13952.,  5636.,  6248.,  6860.,  7472.,  8552.,  9200.,  9848., 10496., 11756., 12440., 13124., 13808., 15248., 15968., 16688., 17408.,  5380.,  5992.,  6604.,  7216.,  8296.,  8944.,  9592., 10240., 11500., 12184., 12868., 13552., 14992., 15712., 16432., 17152.,  5125.,  5690.,  6255.,  6820.,  7946.,  8556.,  9166.,  9776., 11127., 11782., 12437., 13092., 14668., 15368., 16068., 16768.,  6649.,  7394.,  8139.,  8884., 10190., 10980., 11770., 12560., 14091., 14926., 15761., 16596., 18352., 19232., 20112., 20992.,  4084.,  4552.,  5020.,  5488.,  6424.,  6928.,  7432.,  7936.,  9052.,  9592., 10132., 10672., 11968., 12544., 13120., 13696.,  5380.,  5992.,  6604.,  7216.,  8296.,  8944.,  9592., 10240., 11500., 12184., 12868., 13552., 14992., 15712., 16432., 17152.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11122., 11604., 12086., 12568., 13540., 14040., 14540., 15040., 16102., 16620., 17138., 17656., 18808., 19344., 19880., 20416., 12794., 13348., 13902., 14456., 15500., 16072., 16644., 17216., 18350., 18940., 19530., 20120., 21344., 21952., 22560., 23168., 10242., 10740., 11238., 11736., 12724., 13240., 13756., 14272., 15350., 15884., 16418., 16952., 18120., 18672., 19224., 19776., 11914., 12484., 13054., 13624., 14684., 15272., 15860., 16448., 17598., 18204., 18810., 19416., 20656., 21280., 21904., 22528., 11410., 11924., 12438., 12952., 13956., 14488., 15020., 15552., 16646., 17196., 17746., 18296., 19480., 20048., 20616., 21184., 13890., 14452., 15014., 15576., 16628., 17208., 17788., 18368., 19510., 20108., 20706., 21304., 22536., 23152., 23768., 24384., 15562., 16196., 16830., 17464., 18588., 19240., 19892., 20544., 21758., 22428., 23098., 23768., 25072., 25760., 26448., 27136., 10898., 11412., 11926., 12440., 13444., 13976., 14508., 15040., 16134., 16684., 17234., 17784., 18968., 19536., 20104., 20672., 12570., 13156., 13742., 14328., 15404., 16008., 16612., 17216., 18382., 19004., 19626., 20248., 21504., 22144., 22784., 23424., 13090., 13620., 14150., 14680., 15700., 16248., 16796., 17344., 18454., 19020., 19586., 20152., 21352., 21936., 22520., 23104., 11410., 11924., 12438., 12952., 13956., 14488., 15020., 15552., 16646., 17196., 17746., 18296., 19480., 20048., 20616., 21184., 13082., 13668., 14254., 14840., 15916., 16520., 17124., 17728., 18894., 19516., 20138., 20760., 22016., 22656., 23296., 23936., 13602., 14132., 14662., 15192., 16212., 16760., 17308., 17856., 18966., 19532., 20098., 20664., 21864., 22448., 23032., 23616., 15274., 15876., 16478., 17080., 18172., 18792., 19412., 20032., 21214., 21852., 22490., 23128., 24400., 25056., 25712., 26368., 12722., 13268., 13814., 14360., 15396., 15960., 16524., 17088., 18214., 18796., 19378., 19960., 21176., 21776., 22376., 22976., 13090., 13620., 14150., 14680., 15700., 16248., 16796., 17344., 18454., 19020., 19586., 20152., 21352., 21936., 22520., 23104., 14762., 15364., 15966., 16568., 17660., 18280., 18900., 19520., 20702., 21340., 21978., 22616., 23888., 24544., 25200., 25856., 11122., 11604., 12086., 12568., 13540., 14040., 14540., 15040., 16102., 16620., 17138., 17656., 18808., 19344., 19880., 20416., 12794., 13348., 13902., 14456., 15500., 16072., 16644., 17216., 18350., 18940., 19530., 20120., 21344., 21952., 22560., 23168., 10242., 10740., 11238., 11736., 12724., 13240., 13756., 14272., 15350., 15884., 16418., 16952., 18120., 18672., 19224., 19776., 12722., 13268., 13814., 14360., 15396., 15960., 16524., 17088., 18214., 18796., 19378., 19960., 21176., 21776., 22376., 22976., 14394., 15012., 15630., 16248., 17356., 17992., 18628., 19264., 20462., 21116., 21770., 22424., 23712., 24384., 25056., 25728., 13890., 14452., 15014., 15576., 16628., 17208., 17788., 18368., 19510., 20108., 20706., 21304., 22536., 23152., 23768., 24384., 15562., 16196., 16830., 17464., 18588., 19240., 19892., 20544., 21758., 22428., 23098., 23768., 25072., 25760., 26448., 27136., 10898., 11412., 11926., 12440., 13444., 13976., 14508., 15040., 16134., 16684., 17234., 17784., 18968., 19536., 20104., 20672.};
  const std::array<int, 4> in_shape = {{ 3, 7, 10, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19300., 18621., 25780., 17970., 18672., 26696., 27596., 35312., 26536., 25032., 28068., 27816., 37528., 26760., 27624., 15199., 15820., 19914., 15108., 13590., 17370., 17991., 23472., 17154., 17748.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {6952., 7030., 7108., 7186., 7264., 7498., 7576., 7654., 7732., 7810., 8044., 8122., 8200., 8278., 8356., 8590., 8668., 8746., 8824., 8902., 9136., 9214., 9292., 9370., 9448.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21016., 21704., 19119., 19770., 27332., 28264., 17817., 18468., 18618., 19296., 29840., 30864., 30836., 31896., 39536., 40928., 28716., 29776., 29064., 30096., 31244., 32328., 30000., 31056., 40816., 42288., 27888., 28944., 28812., 29904., 16977., 17662., 17616., 18328., 22516., 23444., 16192., 16904., 16713., 17388., 21258., 22068., 21897., 22734., 28164., 29280., 20223., 21060., 20808., 21672.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13124., 13904., 13268., 14060., 13412., 14216., 13556., 14372., 13700., 14528., 14132., 14996., 14276., 15152., 14420., 15308., 14564., 15464., 14708., 15620., 15140., 16088., 15284., 16244., 15428., 16400., 15572., 16556., 15716., 16712., 16148., 17180., 16292., 17336., 16436., 17492., 16580., 17648., 16724., 17804., 17156., 18272., 17300., 18428., 17444., 18584., 17588., 18740., 17732., 18896.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {28032., 28720., 29408., 30096., 27795., 28446., 29097., 29748., 36580., 37512., 38444., 39376., 25191., 25842., 26493., 27144., 26190., 26868., 27546., 28224., 34080., 35104., 36128., 37152., 35268., 36328., 37388., 38448., 43888., 45280., 46672., 48064., 31028., 32088., 33148., 34208., 30984., 32016., 33048., 34080., 39644., 40728., 41812., 42896., 40512., 41568., 42624., 43680., 51488., 52960., 54432., 55904., 36288., 37344., 38400., 39456., 37332., 38424., 39516., 40608., 20021., 20706., 21391., 22076., 20696., 21408., 22120., 22832., 25672., 26600., 27528., 28456., 17848., 18560., 19272., 19984., 18351., 19026., 19701., 20376., 24426., 25236., 26046., 26856., 25101., 25938., 26775., 27612., 31404., 32520., 33636., 34752., 21753., 22590., 23427., 24264., 22320., 23184., 24048., 24912.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {25468., 26248., 27028., 27808., 25744., 26536., 27328., 28120., 26020., 26824., 27628., 28432., 26296., 27112., 27928., 28744., 26572., 27400., 28228., 29056., 27400., 28264., 29128., 29992., 27676., 28552., 29428., 30304., 27952., 28840., 29728., 30616., 28228., 29128., 30028., 30928., 28504., 29416., 30328., 31240., 29332., 30280., 31228., 32176., 29608., 30568., 31528., 32488., 29884., 30856., 31828., 32800., 30160., 31144., 32128., 33112., 30436., 31432., 32428., 33424., 31264., 32296., 33328., 34360., 31540., 32584., 33628., 34672., 31816., 32872., 33928., 34984., 32092., 33160., 34228., 35296., 32368., 33448., 34528., 35608., 33196., 34312., 35428., 36544., 33472., 34600., 35728., 36856., 33748., 34888., 36028., 37168., 34024., 35176., 36328., 37480., 34300., 35464., 36628., 37792.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {30361., 32144., 25287., 26996., 36664., 38992., 23633., 25288., 25235., 26944., 31164., 33312., 33156., 35376., 39648., 42432., 30780., 32928., 28980., 31008., 31412., 33552., 27644., 29728., 38880., 41696., 25540., 27552., 27388., 29472., 17955., 19452., 19233., 20784., 22456., 24360., 17463., 18960., 16521., 17880., 21141., 22632., 19411., 20892., 25880., 27840., 17781., 19208., 18951., 20432.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {26104., 27808., 26392., 28120., 26680., 28432., 26968., 28744., 27256., 29056., 28120., 29992., 28408., 30304., 28696., 30616., 28984., 30928., 29272., 31240., 30136., 32176., 30424., 32488., 30712., 32800., 31000., 33112., 31288., 33424., 32152., 34360., 32440., 34672., 32728., 34984., 33016., 35296., 33304., 35608., 34168., 36544., 34456., 36856., 34744., 37168., 35032., 37480., 35320., 37792.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {37869., 38770., 40832., 41760., 34835., 35662., 37650., 38504., 46796., 47984., 50648., 51872., 31527., 32354., 34234., 35088., 33525., 34406., 36340., 37248., 37404., 38520., 40896., 42048., 39780., 40968., 43416., 44640., 44048., 45504., 48544., 50048., 35028., 36216., 38520., 39744., 30012., 31080., 33264., 34368., 35348., 36456., 38824., 39968., 34524., 35576., 37888., 38976., 44528., 46016., 49088., 50624., 30316., 31368., 33536., 34624., 32404., 33528., 35768., 36928., 21447., 22278., 23838., 24696., 22797., 23682., 25296., 26208., 24148., 25200., 27152., 28240., 19257., 20142., 21648., 22560., 16359., 17106., 18474., 19248., 19761., 20586., 22140., 22992., 19255., 20070., 21614., 22456., 24284., 25392., 27400., 28544., 15995., 16810., 18246., 19088., 17129., 17998., 19488., 20384.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {39140., 40432., 42024., 43328., 39692., 41008., 42624., 43952., 29748., 30832., 32216., 33312., 30300., 31408., 32816., 33936., 30852., 31984., 33416., 34560., 32508., 33712., 35216., 36432., 33060., 34288., 35816., 37056., 33612., 34864., 36416., 37680., 34164., 35440., 37016., 38304., 34716., 36016., 37616., 38928., 26900., 28016., 29432., 30560., 27452., 28592., 30032., 31184., 19556., 20464., 21672., 22592., 20108., 21040., 22272., 23216., 20660., 21616., 22872., 23840., 22316., 23344., 24672., 25712., 22868., 23920., 25272., 26336., 23420., 24496., 25872., 26960., 23972., 25072., 26472., 27584., 24524., 25648., 27072., 28208., 26180., 27376., 28872., 30080., 26732., 27952., 29472., 30704., 27284., 28528., 30072., 31328., 27836., 29104., 30672., 31952., 28388., 29680., 31272., 32576.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {35285., 36186., 37087., 37988., 40032., 40960., 41888., 42816., 31083., 31910., 32737., 33564., 35534., 36388., 37242., 38096., 40692., 41880., 43068., 44256., 46824., 48048., 49272., 50496., 24467., 25294., 26121., 26948., 28702., 29556., 30410., 31264., 26105., 26986., 27867., 28748., 30556., 31464., 32372., 33280., 34396., 35512., 36628., 37744., 40192., 41344., 42496., 43648., 36772., 37960., 39148., 40336., 42856., 44080., 45304., 46528., 38000., 39456., 40912., 42368., 45408., 46912., 48416., 49920., 27268., 28456., 29644., 30832., 33064., 34288., 35512., 36736., 23244., 24312., 25380., 26448., 28560., 29664., 30768., 31872., 34644., 35752., 36860., 37968., 40408., 41552., 42696., 43840., 34844., 35896., 36948., 38000., 40384., 41472., 42560., 43648., 42000., 43488., 44976., 46464., 49536., 51072., 52608., 54144., 26428., 27480., 28532., 29584., 31680., 32768., 33856., 34944., 28228., 29352., 30476., 31600., 33768., 34928., 36088., 37248., 24591., 25422., 26253., 27084., 28770., 29628., 30486., 31344., 26085., 26970., 27855., 28740., 30480., 31392., 32304., 33216., 26508., 27560., 28612., 29664., 31712., 32800., 33888., 34976., 19005., 19890., 20775., 21660., 23184., 24096., 25008., 25920., 16291., 17038., 17785., 18532., 19918., 20692., 21466., 22240., 25449., 26274., 27099., 27924., 29604., 30456., 31308., 32160., 23295., 24110., 24925., 25740., 27410., 28252., 29094., 29936., 28260., 29368., 30476., 31584., 33688., 34832., 35976., 37120., 16775., 17590., 18405., 19220., 20674., 21516., 22358., 23200., 17837., 18706., 19575., 20444., 21952., 22848., 23744., 24640.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {35388., 36040., 36692., 37344., 38584., 39248., 39912., 40576., 36468., 37144., 37820., 38496., 39760., 40448., 41136., 41824., 27180., 27752., 28324., 28896., 30056., 30640., 31224., 31808., 28260., 28856., 29452., 30048., 31232., 31840., 32448., 33056., 29340., 29960., 30580., 31200., 32408., 33040., 33672., 34304., 27332., 27896., 28460., 29024., 30176., 30752., 31328., 31904., 24188., 24648., 25108., 25568., 26616., 27088., 27560., 28032., 25268., 25752., 26236., 26720., 27792., 28288., 28784., 29280., 26348., 26856., 27364., 27872., 28968., 29488., 30008., 30528., 27428., 27960., 28492., 29024., 30144., 30688., 31232., 31776., 21324., 21800., 22276., 22752., 23816., 24304., 24792., 25280., 22404., 22904., 23404., 23904., 24992., 25504., 26016., 26528., 15164., 15560., 15956., 16352., 17336., 17744., 18152., 18560., 16244., 16664., 17084., 17504., 18512., 18944., 19376., 19808., 17324., 17768., 18212., 18656., 19688., 20144., 20600., 21056., 20564., 21080., 21596., 22112., 23216., 23744., 24272., 24800., 21644., 22184., 22724., 23264., 24392., 24944., 25496., 26048., 22724., 23288., 23852., 24416., 25568., 26144., 26720., 27296., 23804., 24392., 24980., 25568., 26744., 27344., 27944., 28544., 24884., 25496., 26108., 26720., 27920., 28544., 29168., 29792., 28124., 28808., 29492., 30176., 31448., 32144., 32840., 33536., 29204., 29912., 30620., 31328., 32624., 33344., 34064., 34784., 30284., 31016., 31748., 32480., 33800., 34544., 35288., 36032., 31364., 32120., 32876., 33632., 34976., 35744., 36512., 37280., 32444., 33224., 34004., 34784., 36152., 36944., 37736., 38528.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {35847., 37860., 39927., 42048., 32403., 34332., 36315., 38352., 45468., 48096., 50796., 53568., 29223., 31044., 32919., 34848., 33219., 35148., 37131., 39168., 38676., 40944., 43284., 45696., 43428., 45840., 48324., 50880., 43088., 45952., 48912., 51968., 38676., 40944., 43284., 45696., 28644., 30672., 32772., 34944., 34116., 36432., 38820., 41280., 34068., 36336., 38676., 41088., 45200., 48256., 51408., 54656., 29892., 32016., 34212., 36480., 34068., 36336., 38676., 41088., 23019., 24588., 26211., 27888., 25719., 27396., 29127., 30912., 23916., 25824., 27804., 29856., 21819., 23388., 25011., 26688., 16023., 17316., 18663., 20064., 18815., 20308., 21855., 23456., 19083., 20556., 22083., 23664., 24636., 26592., 28620., 30720., 15999., 17364., 18783., 20256., 18267., 19740., 21267., 22848.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {35764., 37344., 38948., 40576., 36868., 38496., 40148., 41824., 27476., 28896., 30340., 31808., 28580., 30048., 31540., 33056., 29684., 31200., 32740., 34304., 27620., 29024., 30452., 31904., 24372., 25568., 26788., 28032., 25476., 26720., 27988., 29280., 26580., 27872., 29188., 30528., 27684., 29024., 30388., 31776., 21524., 22752., 24004., 25280., 22628., 23904., 25204., 26528., 15284., 16352., 17444., 18560., 16388., 17504., 18644., 19808., 17492., 18656., 19844., 21056., 20804., 22112., 23444., 24800., 21908., 23264., 24644., 26048., 23012., 24416., 25844., 27296., 24116., 25568., 27044., 28544., 25220., 26720., 28244., 29792., 28532., 30176., 31844., 33536., 29636., 31328., 33044., 34784., 30740., 32480., 34244., 36032., 31844., 33632., 35444., 37280., 32948., 34784., 36644., 38528.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {33823., 34702., 36670., 37576., 39625., 40558., 42688., 43648., 30603., 31398., 33282., 34104., 36069., 36918., 38964., 39840., 41108., 42296., 44792., 46016., 48620., 49880., 52592., 53888., 24243., 25038., 26706., 27528., 29277., 30126., 31956., 32832., 27519., 28422., 30198., 31128., 32985., 33942., 35880., 36864., 35732., 36776., 39080., 40160., 42572., 43688., 46208., 47360., 40484., 41672., 44120., 45344., 47900., 49160., 51824., 53120., 38256., 39584., 42400., 43776., 46736., 48160., 51264., 52736., 30980., 32168., 34328., 35552., 37820., 39080., 41456., 42752., 22932., 23880., 25800., 26784., 28812., 29832., 31968., 33024., 35268., 36360., 38712., 39840., 42300., 43464., 46032., 47232., 34708., 35752., 38056., 39136., 41548., 42664., 45184., 46336., 44336., 45856., 48864., 50432., 53584., 55200., 58496., 60160., 26356., 27400., 29416., 30496., 32620., 33736., 35968., 37120., 29956., 31144., 33304., 34528., 36796., 38056., 40432., 41728., 23091., 23958., 25626., 26520., 28269., 29190., 31020., 31968., 26079., 27054., 28830., 29832., 31689., 32718., 34656., 35712., 22468., 23512., 25480., 26560., 28636., 29752., 31936., 33088., 18279., 19254., 20814., 21816., 23457., 24486., 26208., 27264., 12851., 13550., 14834., 15560., 16925., 17678., 19124., 19904., 23207., 23998., 25590., 26408., 28081., 28926., 30680., 31552., 21459., 22230., 23802., 24600., 26253., 27078., 28812., 29664., 26932., 28024., 30040., 31168., 33292., 34456., 36688., 37888., 15291., 16062., 17418., 18216., 19653., 20478., 21996., 22848., 17415., 18294., 19758., 20664., 22209., 23142., 24768., 25728.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {32732., 33384., 34600., 35264., 36516., 37192., 38480., 39168., 34892., 35592., 36856., 37568., 38868., 39592., 40928., 41664., 26684., 27304., 28488., 29120., 30340., 30984., 32240., 32896., 28844., 29512., 30744., 31424., 32692., 33384., 34688., 35392., 31004., 31720., 33000., 33728., 35044., 35784., 37136., 37888., 32236., 32968., 34264., 35008., 36340., 37096., 38464., 39232., 30172., 30824., 32040., 32704., 33956., 34632., 35920., 36608., 32332., 33032., 34296., 35008., 36308., 37032., 38368., 39104., 34492., 35240., 36552., 37312., 38660., 39432., 40816., 41600., 36652., 37448., 38808., 39616., 41012., 41832., 43264., 44096., 33788., 34600., 35976., 36800., 38212., 39048., 40496., 41344., 35948., 36808., 38232., 39104., 40564., 41448., 42944., 43840., 26588., 27240., 28456., 29120., 30372., 31048., 32336., 33024., 28748., 29448., 30712., 31424., 32724., 33448., 34784., 35520., 28732., 29352., 30536., 31168., 32388., 33032., 34288., 34944., 35212., 35976., 37304., 38080., 39444., 40232., 41632., 42432., 37372., 38184., 39560., 40384., 41796., 42632., 44080., 44928., 39532., 40392., 41816., 42688., 44148., 45032., 46528., 47424., 34396., 35176., 36520., 37312., 38692., 39496., 40912., 41728., 36556., 37384., 38776., 39616., 41044., 41896., 43360., 44224., 36764., 37608., 39016., 39872., 41316., 42184., 43664., 44544., 38924., 39816., 41272., 42176., 43668., 44584., 46112., 47040., 39932., 40744., 42120., 42944., 44356., 45192., 46640., 47488., 42092., 42952., 44376., 45248., 46708., 47592., 49088., 49984., 32732., 33384., 34600., 35264., 36516., 37192., 38480., 39168.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5775.,  6270.,  6765.,  7260.,  8178.,  8700.,  9222.,  9744., 10797., 11346., 11895., 12444., 13632., 14208., 14784., 15360.,  3675.,  3990.,  4305.,  4620.,  5358.,  5700.,  6042.,  6384.,  7257.,  7626.,  7995.,  8364.,  9372.,  9768., 10164., 10560.,  5124.,  5736.,  6348.,  6960.,  8040.,  8688.,  9336.,  9984., 11244., 11928., 12612., 13296., 14736., 15456., 16176., 16896.,  1995.,  2310.,  2625.,  2940.,  3534.,  3876.,  4218.,  4560.,  5289.,  5658.,  6027.,  6396.,  7260.,  7656.,  8052.,  8448.,  2679.,  3102.,  3525.,  3948.,  4650.,  5100.,  5550.,  6000.,  6837.,  7314.,  7791.,  8268.,  9240.,  9744., 10248., 10752.,  5460.,  5928.,  6396.,  6864.,  7896.,  8400.,  8904.,  9408., 10620., 11160., 11700., 12240., 13632., 14208., 14784., 15360.,  7140.,  7752.,  8364.,  8976., 10152., 10800., 11448., 12096., 13452., 14136., 14820., 15504., 17040., 17760., 18480., 19200.,  5616.,  6240.,  6864.,  7488.,  8736.,  9408., 10080., 10752., 12240., 12960., 13680., 14400., 16128., 16896., 17664., 18432.,  3876.,  4488.,  5100.,  5712.,  6696.,  7344.,  7992.,  8640.,  9804., 10488., 11172., 11856., 13200., 13920., 14640., 15360.,  2964.,  3432.,  3900.,  4368.,  5208.,  5712.,  6216.,  6720.,  7740.,  8280.,  8820.,  9360., 10560., 11136., 11712., 12288.,  7140.,  7752.,  8364.,  8976., 10152., 10800., 11448., 12096., 13452., 14136., 14820., 15504., 17040., 17760., 18480., 19200.,  5460.,  5928.,  6396.,  6864.,  7896.,  8400.,  8904.,  9408., 10620., 11160., 11700., 12240., 13632., 14208., 14784., 15360.,  7344.,  8160.,  8976.,  9792., 11232., 12096., 12960., 13824., 15504., 16416., 17328., 18240., 20160., 21120., 22080., 23040.,  2964.,  3432.,  3900.,  4368.,  5208.,  5712.,  6216.,  6720.,  7740.,  8280.,  8820.,  9360., 10560., 11136., 11712., 12288.,  3876.,  4488.,  5100.,  5712.,  6696.,  7344.,  7992.,  8640.,  9804., 10488., 11172., 11856., 13200., 13920., 14640., 15360.,  4515.,  4902.,  5289.,  5676.,  6486.,  6900.,  7314.,  7728.,  8673.,  9114.,  9555.,  9996., 11076., 11544., 12012., 12480.,  5775.,  6270.,  6765.,  7260.,  8178.,  8700.,  9222.,  9744., 10797., 11346., 11895., 12444., 13632., 14208., 14784., 15360.,  3828.,  4296.,  4764.,  5232.,  6168.,  6672.,  7176.,  7680.,  8796.,  9336.,  9876., 10416., 11712., 12288., 12864., 13440.,  3135.,  3630.,  4125.,  4620.,  5394.,  5916.,  6438.,  6960.,  7869.,  8418.,  8967.,  9516., 10560., 11136., 11712., 12288.,  1995.,  2310.,  2625.,  2940.,  3534.,  3876.,  4218.,  4560.,  5289.,  5658.,  6027.,  6396.,  7260.,  7656.,  8052.,  8448.,  4983.,  5454.,  5925.,  6396.,  7290.,  7788.,  8286.,  8784.,  9813., 10338., 10863., 11388., 12552., 13104., 13656., 14208.,  4515.,  4902.,  5289.,  5676.,  6486.,  6900.,  7314.,  7728.,  8673.,  9114.,  9555.,  9996., 11076., 11544., 12012., 12480.,  5892.,  6504.,  7116.,  7728.,  8808.,  9456., 10104., 10752., 12012., 12696., 13380., 14064., 15504., 16224., 16944., 17664.,  2451.,  2838.,  3225.,  3612.,  4278.,  4692.,  5106.,  5520.,  6321.,  6762.,  7203.,  7644.,  8580.,  9048.,  9516.,  9984.,  3135.,  3630.,  4125.,  4620.,  5394.,  5916.,  6438.,  6960.,  7869.,  8418.,  8967.,  9516., 10560., 11136., 11712., 12288.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {31532., 32184., 32836., 33488., 34744., 35408., 36072., 36736., 38052., 38728., 39404., 40080., 41456., 42144., 42832., 43520., 33756., 34456., 35156., 35856., 37160., 37872., 38584., 39296., 40660., 41384., 42108., 42832., 44256., 44992., 45728., 46464., 31756., 32376., 32996., 33616., 34840., 35472., 36104., 36736., 38020., 38664., 39308., 39952., 41296., 41952., 42608., 43264., 33980., 34648., 35316., 35984., 37256., 37936., 38616., 39296., 40628., 41320., 42012., 42704., 44096., 44800., 45504., 46208., 36204., 36920., 37636., 38352., 39672., 40400., 41128., 41856., 43236., 43976., 44716., 45456., 46896., 47648., 48400., 49152., 32508., 33240., 33972., 34704., 36040., 36784., 37528., 38272., 39668., 40424., 41180., 41936., 43392., 44160., 44928., 45696., 26412., 27064., 27716., 28368., 29624., 30288., 30952., 31616., 32932., 33608., 34284., 34960., 36336., 37024., 37712., 38400., 28636., 29336., 30036., 30736., 32040., 32752., 33464., 34176., 35540., 36264., 36988., 37712., 39136., 39872., 40608., 41344., 30860., 31608., 32356., 33104., 34456., 35216., 35976., 36736., 38148., 38920., 39692., 40464., 41936., 42720., 43504., 44288., 33084., 33880., 34676., 35472., 36872., 37680., 38488., 39296., 40756., 41576., 42396., 43216., 44736., 45568., 46400., 47232., 37580., 38392., 39204., 40016., 41432., 42256., 43080., 43904., 45380., 46216., 47052., 47888., 49424., 50272., 51120., 51968., 39804., 40664., 41524., 42384., 43848., 44720., 45592., 46464., 47988., 48872., 49756., 50640., 52224., 53120., 54016., 54912., 35628., 36280., 36932., 37584., 38840., 39504., 40168., 40832., 42148., 42824., 43500., 44176., 45552., 46240., 46928., 47616., 37852., 38552., 39252., 39952., 41256., 41968., 42680., 43392., 44756., 45480., 46204., 46928., 48352., 49088., 49824., 50560., 35852., 36472., 37092., 37712., 38936., 39568., 40200., 40832., 42116., 42760., 43404., 44048., 45392., 46048., 46704., 47360., 42524., 43288., 44052., 44816., 46184., 46960., 47736., 48512., 49940., 50728., 51516., 52304., 53792., 54592., 55392., 56192., 44748., 45560., 46372., 47184., 48600., 49424., 50248., 51072., 52548., 53384., 54220., 55056., 56592., 57440., 58288., 59136., 46972., 47832., 48692., 49552., 51016., 51888., 52760., 53632., 55156., 56040., 56924., 57808., 59392., 60288., 61184., 62080., 34732., 35512., 36292., 37072., 38456., 39248., 40040., 40832., 42276., 43080., 43884., 44688., 46192., 47008., 47824., 48640., 36956., 37784., 38612., 39440., 40872., 41712., 42552., 43392., 44884., 45736., 46588., 47440., 48992., 49856., 50720., 51584., 31212., 32056., 32900., 33744., 35192., 36048., 36904., 37760., 39268., 40136., 41004., 41872., 43440., 44320., 45200., 46080., 33436., 34328., 35220., 36112., 37608., 38512., 39416., 40320., 41876., 42792., 43708., 44624., 46240., 47168., 48096., 49024., 33484., 34296., 35108., 35920., 37336., 38160., 38984., 39808., 41284., 42120., 42956., 43792., 45328., 46176., 47024., 47872., 35708., 36568., 37428., 38288., 39752., 40624., 41496., 42368., 43892., 44776., 45660., 46544., 48128., 49024., 49920., 50816., 31532., 32184., 32836., 33488., 34744., 35408., 36072., 36736., 38052., 38728., 39404., 40080., 41456., 42144., 42832., 43520.};
  const std::array<int, 4> in_shape = {{ 3, 8, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21600., 28338., 29292., 21546., 22248., 28128., 36888., 38064., 27984., 28848., 35328., 46296., 47472., 34896., 35760., 23544., 30786., 31596., 23166., 23760., 28512., 37266., 38076., 27918., 28512.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7922.,  8000.,  8078.,  8156.,  8234.,  8546.,  8624.,  8702.,  8780.,  8858.,  9170.,  9248.,  9326.,  9404.,  9482.,  9794.,  9872.,  9950., 10028., 10106., 10418., 10496., 10574., 10652., 10730.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {26316., 27072., 34164., 35172., 35268., 36312., 25605., 26388., 26406., 27216., 33744., 34752., 43760., 45104., 45040., 46432., 32652., 33696., 33576., 34656., 41712., 43008., 54000., 55728., 55280., 57056., 40044., 41376., 40968., 42336., 25380., 26352., 32628., 33924., 33444., 34776., 24021., 25020., 24606., 25632., 30492., 31680., 39156., 40740., 39972., 41592., 28701., 29916., 29286., 30528.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14956., 15844., 15100., 16000., 15244., 16156., 15388., 16312., 15532., 16468., 16108., 17092., 16252., 17248., 16396., 17404., 16540., 17560., 16684., 17716., 17260., 18340., 17404., 18496., 17548., 18652., 17692., 18808., 17836., 18964., 18412., 19588., 18556., 19744., 18700., 19900., 18844., 20056., 18988., 20212., 19564., 20836., 19708., 20992., 19852., 21148., 19996., 21304., 20140., 21460.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7812.,  8280.,  8748.,  9216.,  9336.,  9960., 10584., 11208.,  9972., 10632., 11292., 11952.,  6363.,  6858.,  7353.,  7848.,  6786.,  7308.,  7830.,  8352.,  9840., 10272., 10704., 11136., 12192., 12768., 13344., 13920., 12912., 13536., 14160., 14784.,  8580.,  9048.,  9516.,  9984.,  9048.,  9552., 10056., 10560., 14736., 15456., 16176., 16896., 17952., 18912., 19872., 20832., 18672., 19680., 20688., 21696., 12324., 13080., 13836., 14592., 12792., 13584., 14376., 15168.,  4284.,  4680.,  5076.,  5472.,  4824.,  5352.,  5880.,  6408.,  5268.,  5832.,  6396.,  6960.,  2979.,  3402.,  3825.,  4248.,  3258.,  3708.,  4158.,  4608.,  7380.,  7992.,  8604.,  9216.,  8376.,  9192., 10008., 10824.,  8820.,  9672., 10524., 11376.,  5211.,  5850.,  6489.,  7128.,  5490.,  6156.,  6822.,  7488.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {29024., 29912., 30800., 31688., 29300., 30200., 31100., 32000., 29576., 30488., 31400., 32312., 29852., 30776., 31700., 32624., 30128., 31064., 32000., 32936., 31232., 32216., 33200., 34184., 31508., 32504., 33500., 34496., 31784., 32792., 33800., 34808., 32060., 33080., 34100., 35120., 32336., 33368., 34400., 35432., 33440., 34520., 35600., 36680., 33716., 34808., 35900., 36992., 33992., 35096., 36200., 37304., 34268., 35384., 36500., 37616., 34544., 35672., 36800., 37928., 35648., 36824., 38000., 39176., 35924., 37112., 38300., 39488., 36200., 37400., 38600., 39800., 36476., 37688., 38900., 40112., 36752., 37976., 39200., 40424., 37856., 39128., 40400., 41672., 38132., 39416., 40700., 41984., 38408., 39704., 41000., 42296., 38684., 39992., 41300., 42608., 38960., 40280., 41600., 42920.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {28929., 30720., 37528., 39880., 39736., 42160., 28713., 30504., 30315., 32160., 25404., 27264., 32992., 35424., 35552., 38080., 25596., 27456., 27444., 29376., 41340., 43776., 53472., 56672., 56032., 59328., 40380., 42816., 42228., 44736., 18249., 19680., 23480., 25352., 25112., 27056., 17889., 19320., 19059., 20544., 28473., 30336., 36536., 38984., 38168., 40688., 27249., 29112., 28419., 30336.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {29768., 31688., 30056., 32000., 30344., 32312., 30632., 32624., 30920., 32936., 32072., 34184., 32360., 34496., 32648., 34808., 32936., 35120., 33224., 35432., 34376., 36680., 34664., 36992., 34952., 37304., 35240., 37616., 35528., 37928., 36680., 39176., 36968., 39488., 37256., 39800., 37544., 40112., 37832., 40424., 38984., 41672., 39272., 41984., 39560., 42296., 39848., 42608., 40136., 42920.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12501., 13122., 14328., 14976., 15348., 16176., 17712., 18576., 16620., 17520., 19128., 20064., 10863., 11538., 12690., 13392., 11709., 12438., 13644., 14400.,  4668.,  4920.,  5856.,  6144.,  6000.,  6336.,  7488.,  7872.,  7440.,  7872.,  9120.,  9600.,  4596.,  4920.,  5784.,  6144.,  5532.,  5928.,  6864.,  7296., 14460., 15288., 16800., 17664., 17520., 18624., 20544., 21696., 18960., 20160., 22176., 23424., 12084., 12984., 14424., 15360., 13020., 13992., 15504., 16512.,  2997.,  3186.,  3816.,  4032.,  3828.,  4080.,  4848.,  5136.,  4716.,  5040.,  5880.,  6240.,  2799.,  3042.,  3618.,  3888.,  3357.,  3654.,  4284.,  4608.,  9189.,  9810., 10872., 11520., 10932., 11760., 13104., 13968., 11820., 12720., 14136., 15072.,  7263.,  7938.,  8946.,  9648.,  7821.,  8550.,  9612., 10368.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {17836., 18576., 19616., 20368., 18388., 19152., 20216., 20992., 18940., 19728., 20816., 21616., 19492., 20304., 21416., 22240., 20044., 20880., 22016., 22864., 22252., 23184., 24416., 25360., 22804., 23760., 25016., 25984., 23356., 24336., 25616., 26608., 23908., 24912., 26216., 27232., 24460., 25488., 26816., 27856., 26668., 27792., 29216., 30352., 27220., 28368., 29816., 30976., 27772., 28944., 30416., 31600., 28324., 29520., 31016., 32224., 28876., 30096., 31616., 32848., 31084., 32400., 34016., 35344., 31636., 32976., 34616., 35968., 32188., 33552., 35216., 36592., 32740., 34128., 35816., 37216., 33292., 34704., 36416., 37840., 35500., 37008., 38816., 40336., 36052., 37584., 39416., 40960., 36604., 38160., 40016., 41584., 37156., 38736., 40616., 42208., 37708., 39312., 41216., 42832.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11133., 11754., 12375., 12996., 14184., 14832., 15480., 16128., 12204., 13032., 13860., 14688., 16128., 16992., 17856., 18720., 13140., 14040., 14940., 15840., 17352., 18288., 19224., 20160.,  6651.,  7326.,  8001.,  8676.,  9702., 10404., 11106., 11808.,  7137.,  7866.,  8595.,  9324., 10404., 11160., 11916., 12672.,  5052.,  5304.,  5556.,  5808.,  6816.,  7104.,  7392.,  7680.,  6288.,  6624.,  6960.,  7296.,  8448.,  8832.,  9216.,  9600.,  7536.,  7968.,  8400.,  8832., 10080., 10560., 11040., 11520.,  3684.,  4008.,  4332.,  4656.,  5448.,  5808.,  6168.,  6528.,  4332.,  4728.,  5124.,  5520.,  6384.,  6816.,  7248.,  7680., 14844., 15672., 16500., 17328., 18912., 19776., 20640., 21504., 16272., 17376., 18480., 19584., 21504., 22656., 23808., 24960., 17520., 18720., 19920., 21120., 23136., 24384., 25632., 26880.,  8868.,  9768., 10668., 11568., 12936., 13872., 14808., 15744.,  9516., 10488., 11460., 12432., 13872., 14880., 15888., 16896.,  3789.,  3978.,  4167.,  4356.,  5112.,  5328.,  5544.,  5760.,  4716.,  4968.,  5220.,  5472.,  6336.,  6624.,  6912.,  7200.,  5652.,  5976.,  6300.,  6624.,  7560.,  7920.,  8280.,  8640.,  2763.,  3006.,  3249.,  3492.,  4086.,  4356.,  4626.,  4896.,  3249.,  3546.,  3843.,  4140.,  4788.,  5112.,  5436.,  5760., 11133., 11754., 12375., 12996., 14184., 14832., 15480., 16128., 12204., 13032., 13860., 14688., 16128., 16992., 17856., 18720., 13140., 14040., 14940., 15840., 17352., 18288., 19224., 20160.,  6651.,  7326.,  8001.,  8676.,  9702., 10404., 11106., 11808.,  7137.,  7866.,  8595.,  9324., 10404., 11160., 11916., 12672.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11892., 12120., 12348., 12576., 13392., 13632., 13872., 14112., 12972., 13224., 13476., 13728., 14568., 14832., 15096., 15360., 14052., 14328., 14604., 14880., 15744., 16032., 16320., 16608., 15132., 15432., 15732., 16032., 16920., 17232., 17544., 17856., 16212., 16536., 16860., 17184., 18096., 18432., 18768., 19104., 20532., 20952., 21372., 21792., 22800., 23232., 23664., 24096., 21612., 22056., 22500., 22944., 23976., 24432., 24888., 25344., 22692., 23160., 23628., 24096., 25152., 25632., 26112., 26592., 23772., 24264., 24756., 25248., 26328., 26832., 27336., 27840., 24852., 25368., 25884., 26400., 27504., 28032., 28560., 29088., 29172., 29784., 30396., 31008., 32208., 32832., 33456., 34080., 30252., 30888., 31524., 32160., 33384., 34032., 34680., 35328., 31332., 31992., 32652., 33312., 34560., 35232., 35904., 36576., 32412., 33096., 33780., 34464., 35736., 36432., 37128., 37824., 33492., 34200., 34908., 35616., 36912., 37632., 38352., 39072., 37812., 38616., 39420., 40224., 41616., 42432., 43248., 44064., 38892., 39720., 40548., 41376., 42792., 43632., 44472., 45312., 39972., 40824., 41676., 42528., 43968., 44832., 45696., 46560., 41052., 41928., 42804., 43680., 45144., 46032., 46920., 47808., 42132., 43032., 43932., 44832., 46320., 47232., 48144., 49056., 46452., 47448., 48444., 49440., 51024., 52032., 53040., 54048., 47532., 48552., 49572., 50592., 52200., 53232., 54264., 55296., 48612., 49656., 50700., 51744., 53376., 54432., 55488., 56544., 49692., 50760., 51828., 52896., 54552., 55632., 56712., 57792., 50772., 51864., 52956., 54048., 55728., 56832., 57936., 59040.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7479.,  8388.,  9351., 10368.,  9708., 10848., 12060., 13344., 12252., 13536., 14892., 16320.,  7767.,  8676.,  9639., 10656.,  9459., 10476., 11547., 12672.,  8724.,  9840., 11028., 12288., 11280., 12672., 14160., 15744., 14160., 15744., 17424., 19200.,  8724.,  9840., 11028., 12288., 10596., 11856., 13188., 14592.,  8724.,  9840., 11028., 12288., 11280., 12672., 14160., 15744., 14160., 15744., 17424., 19200.,  8724.,  9840., 11028., 12288., 10596., 11856., 13188., 14592.,  5607.,  6372.,  7191.,  8064.,  7212.,  8160.,  9180., 10272.,  8988., 10080., 11244., 12480.,  5319.,  6084.,  6903.,  7776.,  6435.,  7308.,  8235.,  9216.,  5607.,  6372.,  7191.,  8064.,  7212.,  8160.,  9180., 10272.,  8988., 10080., 11244., 12480.,  5319.,  6084.,  6903.,  7776.,  6435.,  7308.,  8235.,  9216.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11844., 12576., 13332., 14112., 12948., 13728., 14532., 15360., 14052., 14880., 15732., 16608., 15156., 16032., 16932., 17856., 16260., 17184., 18132., 19104., 20676., 21792., 22932., 24096., 21780., 22944., 24132., 25344., 22884., 24096., 25332., 26592., 23988., 25248., 26532., 27840., 25092., 26400., 27732., 29088., 29508., 31008., 32532., 34080., 30612., 32160., 33732., 35328., 31716., 33312., 34932., 36576., 32820., 34464., 36132., 37824., 33924., 35616., 37332., 39072., 38340., 40224., 42132., 44064., 39444., 41376., 43332., 45312., 40548., 42528., 44532., 46560., 41652., 43680., 45732., 47808., 42756., 44832., 46932., 49056., 47172., 49440., 51732., 54048., 48276., 50592., 52932., 55296., 49380., 51744., 54132., 56544., 50484., 52896., 55332., 57792., 51588., 54048., 56532., 59040.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7119.,  7470.,  8334.,  8712.,  9657., 10062., 11088., 11520.,  8964.,  9432., 10440., 10944., 12060., 12600., 13824., 14400., 10836., 11448., 12600., 13248., 14508., 15192., 16560., 17280.,  5283.,  5742.,  6498.,  6984.,  7821.,  8334.,  9252.,  9792.,  6255.,  6822.,  7686.,  8280.,  9225.,  9846., 10872., 11520.,  9492.,  9960., 11112., 11616., 12876., 13416., 14784., 15360., 11952., 12576., 13920., 14592., 16080., 16800., 18432., 19200., 14448., 15264., 16800., 17664., 19344., 20256., 22080., 23040.,  7044.,  7656.,  8664.,  9312., 10428., 11112., 12336., 13056.,  8340.,  9096., 10248., 11040., 12300., 13128., 14496., 15360.,  9492.,  9960., 11112., 11616., 12876., 13416., 14784., 15360., 11952., 12576., 13920., 14592., 16080., 16800., 18432., 19200., 14448., 15264., 16800., 17664., 19344., 20256., 22080., 23040.,  7044.,  7656.,  8664.,  9312., 10428., 11112., 12336., 13056.,  8340.,  9096., 10248., 11040., 12300., 13128., 14496., 15360.,  7119.,  7470.,  8334.,  8712.,  9657., 10062., 11088., 11520.,  8964.,  9432., 10440., 10944., 12060., 12600., 13824., 14400., 10836., 11448., 12600., 13248., 14508., 15192., 16560., 17280.,  5283.,  5742.,  6498.,  6984.,  7821.,  8334.,  9252.,  9792.,  6255.,  6822.,  7686.,  8280.,  9225.,  9846., 10872., 11520.,  7119.,  7470.,  8334.,  8712.,  9657., 10062., 11088., 11520.,  8964.,  9432., 10440., 10944., 12060., 12600., 13824., 14400., 10836., 11448., 12600., 13248., 14508., 15192., 16560., 17280.,  5283.,  5742.,  6498.,  6984.,  7821.,  8334.,  9252.,  9792.,  6255.,  6822.,  7686.,  8280.,  9225.,  9846., 10872., 11520.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {23244., 23688., 24696., 25152., 26196., 26664., 27744., 28224., 25404., 25896., 26952., 27456., 28548., 29064., 30192., 30720., 27564., 28104., 29208., 29760., 30900., 31464., 32640., 33216., 29724., 30312., 31464., 32064., 33252., 33864., 35088., 35712., 31884., 32520., 33720., 34368., 35604., 36264., 37536., 38208., 40524., 41352., 42744., 43584., 45012., 45864., 47328., 48192., 42684., 43560., 45000., 45888., 47364., 48264., 49776., 50688., 44844., 45768., 47256., 48192., 49716., 50664., 52224., 53184., 47004., 47976., 49512., 50496., 52068., 53064., 54672., 55680., 49164., 50184., 51768., 52800., 54420., 55464., 57120., 58176., 17100., 17544., 18552., 19008., 20052., 20520., 21600., 22080., 19260., 19752., 20808., 21312., 22404., 22920., 24048., 24576., 21420., 21960., 23064., 23616., 24756., 25320., 26496., 27072., 23580., 24168., 25320., 25920., 27108., 27720., 28944., 29568., 25740., 26376., 27576., 28224., 29460., 30120., 31392., 32064., 34380., 35208., 36600., 37440., 38868., 39720., 41184., 42048., 36540., 37416., 38856., 39744., 41220., 42120., 43632., 44544., 38700., 39624., 41112., 42048., 43572., 44520., 46080., 47040., 40860., 41832., 43368., 44352., 45924., 46920., 48528., 49536., 43020., 44040., 45624., 46656., 48276., 49320., 50976., 52032., 23244., 23688., 24696., 25152., 26196., 26664., 27744., 28224., 25404., 25896., 26952., 27456., 28548., 29064., 30192., 30720., 27564., 28104., 29208., 29760., 30900., 31464., 32640., 33216., 29724., 30312., 31464., 32064., 33252., 33864., 35088., 35712., 31884., 32520., 33720., 34368., 35604., 36264., 37536., 38208.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 4095.,  4446.,  4797.,  5148.,  5922.,  6300.,  6678.,  7056.,  7965.,  8370.,  8775.,  9180., 10224., 10656., 11088., 11520.,  5364.,  5832.,  6300.,  6768.,  7704.,  8208.,  8712.,  9216., 10332., 10872., 11412., 11952., 13248., 13824., 14400., 14976.,  6660.,  7272.,  7884.,  8496.,  9576., 10224., 10872., 11520., 12780., 13464., 14148., 14832., 16272., 16992., 17712., 18432.,  2907.,  3366.,  3825.,  4284.,  5022.,  5508.,  5994.,  6480.,  7353.,  7866.,  8379.,  8892.,  9900., 10440., 10980., 11520.,  3591.,  4158.,  4725.,  5292.,  6138.,  6732.,  7326.,  7920.,  8901.,  9522., 10143., 10764., 11880., 12528., 13176., 13824.,  5460.,  5928.,  6396.,  6864.,  7896.,  8400.,  8904.,  9408., 10620., 11160., 11700., 12240., 13632., 14208., 14784., 15360.,  7152.,  7776.,  8400.,  9024., 10272., 10944., 11616., 12288., 13776., 14496., 15216., 15936., 17664., 18432., 19200., 19968.,  8880.,  9696., 10512., 11328., 12768., 13632., 14496., 15360., 17040., 17952., 18864., 19776., 21696., 22656., 23616., 24576.,  3876.,  4488.,  5100.,  5712.,  6696.,  7344.,  7992.,  8640.,  9804., 10488., 11172., 11856., 13200., 13920., 14640., 15360.,  4788.,  5544.,  6300.,  7056.,  8184.,  8976.,  9768., 10560., 11868., 12696., 13524., 14352., 15840., 16704., 17568., 18432.,  5460.,  5928.,  6396.,  6864.,  7896.,  8400.,  8904.,  9408., 10620., 11160., 11700., 12240., 13632., 14208., 14784., 15360.,  7152.,  7776.,  8400.,  9024., 10272., 10944., 11616., 12288., 13776., 14496., 15216., 15936., 17664., 18432., 19200., 19968.,  8880.,  9696., 10512., 11328., 12768., 13632., 14496., 15360., 17040., 17952., 18864., 19776., 21696., 22656., 23616., 24576.,  3876.,  4488.,  5100.,  5712.,  6696.,  7344.,  7992.,  8640.,  9804., 10488., 11172., 11856., 13200., 13920., 14640., 15360.,  4788.,  5544.,  6300.,  7056.,  8184.,  8976.,  9768., 10560., 11868., 12696., 13524., 14352., 15840., 16704., 17568., 18432.,  4095.,  4446.,  4797.,  5148.,  5922.,  6300.,  6678.,  7056.,  7965.,  8370.,  8775.,  9180., 10224., 10656., 11088., 11520.,  5364.,  5832.,  6300.,  6768.,  7704.,  8208.,  8712.,  9216., 10332., 10872., 11412., 11952., 13248., 13824., 14400., 14976.,  6660.,  7272.,  7884.,  8496.,  9576., 10224., 10872., 11520., 12780., 13464., 14148., 14832., 16272., 16992., 17712., 18432.,  2907.,  3366.,  3825.,  4284.,  5022.,  5508.,  5994.,  6480.,  7353.,  7866.,  8379.,  8892.,  9900., 10440., 10980., 11520.,  3591.,  4158.,  4725.,  5292.,  6138.,  6732.,  7326.,  7920.,  8901.,  9522., 10143., 10764., 11880., 12528., 13176., 13824.,  4095.,  4446.,  4797.,  5148.,  5922.,  6300.,  6678.,  7056.,  7965.,  8370.,  8775.,  9180., 10224., 10656., 11088., 11520.,  5364.,  5832.,  6300.,  6768.,  7704.,  8208.,  8712.,  9216., 10332., 10872., 11412., 11952., 13248., 13824., 14400., 14976.,  6660.,  7272.,  7884.,  8496.,  9576., 10224., 10872., 11520., 12780., 13464., 14148., 14832., 16272., 16992., 17712., 18432.,  2907.,  3366.,  3825.,  4284.,  5022.,  5508.,  5994.,  6480.,  7353.,  7866.,  8379.,  8892.,  9900., 10440., 10980., 11520.,  3591.,  4158.,  4725.,  5292.,  6138.,  6732.,  7326.,  7920.,  8901.,  9522., 10143., 10764., 11880., 12528., 13176., 13824.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 1884.,  1944.,  2004.,  2064.,  2472.,  2544.,  2616.,  2688.,  3156.,  3240.,  3324.,  3408.,  3936.,  4032.,  4128.,  4224.,  3084.,  3192.,  3300.,  3408.,  3864.,  3984.,  4104.,  4224.,  4740.,  4872.,  5004.,  5136.,  5712.,  5856.,  6000.,  6144.,  4284.,  4440.,  4596.,  4752.,  5256.,  5424.,  5592.,  5760.,  6324.,  6504.,  6684.,  6864.,  7488.,  7680.,  7872.,  8064.,  5484.,  5688.,  5892.,  6096.,  6648.,  6864.,  7080.,  7296.,  7908.,  8136.,  8364.,  8592.,  9264.,  9504.,  9744.,  9984.,  6684.,  6936.,  7188.,  7440.,  8040.,  8304.,  8568.,  8832.,  9492.,  9768., 10044., 10320., 11040., 11328., 11616., 11904., 11484., 11928., 12372., 12816., 13608., 14064., 14520., 14976., 15828., 16296., 16764., 17232., 18144., 18624., 19104., 19584., 12684., 13176., 13668., 14160., 15000., 15504., 16008., 16512., 17412., 17928., 18444., 18960., 19920., 20448., 20976., 21504., 13884., 14424., 14964., 15504., 16392., 16944., 17496., 18048., 18996., 19560., 20124., 20688., 21696., 22272., 22848., 23424., 15084., 15672., 16260., 16848., 17784., 18384., 18984., 19584., 20580., 21192., 21804., 22416., 23472., 24096., 24720., 25344., 16284., 16920., 17556., 18192., 19176., 19824., 20472., 21120., 22164., 22824., 23484., 24144., 25248., 25920., 26592., 27264.,  1884.,  1944.,  2004.,  2064.,  2472.,  2544.,  2616.,  2688.,  3156.,  3240.,  3324.,  3408.,  3936.,  4032.,  4128.,  4224.,  3084.,  3192.,  3300.,  3408.,  3864.,  3984.,  4104.,  4224.,  4740.,  4872.,  5004.,  5136.,  5712.,  5856.,  6000.,  6144.,  4284.,  4440.,  4596.,  4752.,  5256.,  5424.,  5592.,  5760.,  6324.,  6504.,  6684.,  6864.,  7488.,  7680.,  7872.,  8064.,  5484.,  5688.,  5892.,  6096.,  6648.,  6864.,  7080.,  7296.,  7908.,  8136.,  8364.,  8592.,  9264.,  9504.,  9744.,  9984.,  6684.,  6936.,  7188.,  7440.,  8040.,  8304.,  8568.,  8832.,  9492.,  9768., 10044., 10320., 11040., 11328., 11616., 11904., 11484., 11928., 12372., 12816., 13608., 14064., 14520., 14976., 15828., 16296., 16764., 17232., 18144., 18624., 19104., 19584., 12684., 13176., 13668., 14160., 15000., 15504., 16008., 16512., 17412., 17928., 18444., 18960., 19920., 20448., 20976., 21504., 13884., 14424., 14964., 15504., 16392., 16944., 17496., 18048., 18996., 19560., 20124., 20688., 21696., 22272., 22848., 23424., 15084., 15672., 16260., 16848., 17784., 18384., 18984., 19584., 20580., 21192., 21804., 22416., 23472., 24096., 24720., 25344., 16284., 16920., 17556., 18192., 19176., 19824., 20472., 21120., 22164., 22824., 23484., 24144., 25248., 25920., 26592., 27264.,  1884.,  1944.,  2004.,  2064.,  2472.,  2544.,  2616.,  2688.,  3156.,  3240.,  3324.,  3408.,  3936.,  4032.,  4128.,  4224.,  3084.,  3192.,  3300.,  3408.,  3864.,  3984.,  4104.,  4224.,  4740.,  4872.,  5004.,  5136.,  5712.,  5856.,  6000.,  6144.,  4284.,  4440.,  4596.,  4752.,  5256.,  5424.,  5592.,  5760.,  6324.,  6504.,  6684.,  6864.,  7488.,  7680.,  7872.,  8064.,  5484.,  5688.,  5892.,  6096.,  6648.,  6864.,  7080.,  7296.,  7908.,  8136.,  8364.,  8592.,  9264.,  9504.,  9744.,  9984.,  6684.,  6936.,  7188.,  7440.,  8040.,  8304.,  8568.,  8832.,  9492.,  9768., 10044., 10320., 11040., 11328., 11616., 11904.};
  const std::array<int, 4> in_shape = {{ 3, 8, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {36476., 44099., 45584., 33250., 34420., 51224., 60302., 62132., 47848., 49288., 45880., 55754., 57584., 42920., 44360., 36212., 42152., 43412., 33278., 34268., 29128., 35104., 36364., 26410., 27400.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21957., 22128., 22299., 22470., 22641., 23667., 23838., 24009., 24180., 24351., 25377., 25548., 25719., 25890., 26061., 27087., 27258., 27429., 27600., 27771., 28797., 28968., 29139., 29310., 29481.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {37260., 38392., 46927., 48326., 48380., 49824., 36980., 38084., 38132., 39272., 48800., 50352., 60520., 62364., 62328., 64232., 48656., 50128., 50080., 51600., 48064., 49520., 58120., 59924., 59928., 61792., 45232., 46672., 46656., 48144., 41300., 42600., 46167., 47696., 47490., 49064., 35652., 36860., 36700., 37944., 30036., 31120., 37125., 38464., 38448., 39832., 29492., 30548., 30540., 31632.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {42240., 43914., 42564., 44256., 42888., 44598., 43212., 44940., 43536., 45282., 45480., 47334., 45804., 47676., 46128., 48018., 46452., 48360., 46776., 48702., 48720., 50754., 49044., 51096., 49368., 51438., 49692., 51780., 50016., 52122., 51960., 54174., 52284., 54516., 52608., 54858., 52932., 55200., 53256., 55542., 55200., 57594., 55524., 57936., 55848., 58278., 56172., 58620., 56496., 58962.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7052.,  7640.,  8228.,  8816.,  8871.,  9566., 10261., 10956.,  9556., 10296., 11036., 11776.,  7128.,  7656.,  8184.,  8712.,  7668.,  8232.,  8796.,  9360., 10864., 11648., 12432., 13216., 14780., 15696., 16612., 17528., 15648., 16624., 17600., 18576., 13440., 14176., 14912., 15648., 14128., 14912., 15696., 16480., 13680., 14464., 15248., 16032., 14820., 15760., 16700., 17640., 15688., 16688., 17688., 18688., 10112., 10848., 11584., 12320., 10800., 11584., 12368., 13152.,  8916.,  9576., 10236., 10896.,  9173.,  9934., 10695., 11456.,  9822., 10628., 11434., 12240.,  7216.,  7816.,  8416.,  9016.,  7740.,  8376.,  9012.,  9648.,  7980.,  8552.,  9124.,  9696., 10031., 10730., 11429., 12128., 10680., 11424., 12168., 12912.,  9224.,  9768., 10312., 10856.,  9748., 10328., 10908., 11488.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {37494., 38400., 39306., 40212., 38124., 39048., 39972., 40896., 38754., 39696., 40638., 41580., 39384., 40344., 41304., 42264., 40014., 40992., 41970., 42948., 43794., 44880., 45966., 47052., 44424., 45528., 46632., 47736., 45054., 46176., 47298., 48420., 45684., 46824., 47964., 49104., 46314., 47472., 48630., 49788., 50094., 51360., 52626., 53892., 50724., 52008., 53292., 54576., 51354., 52656., 53958., 55260., 51984., 53304., 54624., 55944., 46854., 48064., 49274., 50484., 40650., 41712., 42774., 43836., 41280., 42360., 43440., 44520., 41910., 43008., 44106., 45204., 42540., 43656., 44772., 45888., 43170., 44304., 45438., 46572., 46950., 48192., 49434., 50676., 47580., 48840., 50100., 51360., 48210., 49488., 50766., 52044., 48840., 50136., 51432., 52728., 45246., 46432., 47618., 48804.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {39888., 42224., 46321., 49164., 49227., 52160., 34920., 37128., 37224., 39504., 45456., 48480., 54528., 58168., 58144., 61904., 43344., 46240., 46192., 49184., 46480., 49504., 53824., 57512., 57440., 61248., 41680., 44576., 44528., 47520., 37000., 39376., 40195., 43040., 42841., 45776., 30896., 33144., 32992., 35312., 29832., 32032., 37983., 40704., 40629., 43440., 31824., 33960., 33920., 36128.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {38076., 40212., 38724., 40896., 39372., 41580., 40020., 42264., 40668., 42948., 44556., 47052., 45204., 47736., 45852., 48420., 46500., 49104., 47148., 49788., 51036., 53892., 51684., 54576., 52332., 55260., 52980., 55944., 47740., 50484., 41388., 43836., 42036., 44520., 42684., 45204., 43332., 45888., 43980., 46572., 47868., 50676., 48516., 51360., 49164., 52044., 49812., 52728., 46108., 48804.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {32492., 33632., 35912., 37088., 39393., 40738., 43562., 44952., 42171., 43606., 46520., 48000., 30804., 31824., 34032., 35088., 33036., 34128., 36408., 37536., 41200., 42720., 45728., 47296., 53780., 55552., 59208., 61040., 57308., 59200., 62976., 64928., 45968., 47392., 50304., 51776., 48752., 50272., 53280., 54848., 46576., 48096., 51104., 52672., 53348., 55168., 58872., 60752., 56876., 58816., 62640., 64640., 39056., 40480., 43392., 44864., 41840., 43360., 46368., 47936., 39884., 41168., 43640., 44960., 43393., 44870., 47822., 49344., 46163., 47730., 50772., 52384., 33812., 34976., 37312., 38512., 36012., 37248., 39656., 40928., 31100., 32208., 34504., 35648., 39349., 40702., 43530., 44928., 42119., 43562., 46480., 47968., 32964., 34016., 36240., 37328., 35164., 36288., 38584., 39744.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {47478., 48504., 50196., 51240., 48738., 49800., 51528., 52608., 49998., 51096., 52860., 53976., 51258., 52392., 54192., 55344., 52518., 53688., 55524., 56712., 42926., 44056., 45852., 47000., 44186., 45352., 47184., 48368., 37638., 38712., 40452., 41544., 38898., 40008., 41784., 42912., 40158., 41304., 43116., 44280., 47718., 49080., 51108., 52488., 48978., 50376., 52440., 53856., 50238., 51672., 53772., 55224., 51498., 52968., 55104., 56592., 46998., 48376., 50420., 51816., 30494., 31576., 33324., 34424., 31754., 32872., 34656., 35792., 26742., 27768., 29460., 30504., 28002., 29064., 30792., 31872., 29262., 30360., 32124., 33240., 34134., 35320., 37172., 38376., 35394., 36616., 38504., 39744., 34478., 35608., 37404., 38552., 35738., 36904., 38736., 39920., 31110., 32056., 33668., 34632.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8964.,  9528., 10092., 10656., 11832., 12432., 13032., 13632.,  9825., 10434., 11043., 11652., 13062., 13716., 14370., 15024., 11067., 11766., 12465., 13164., 14664., 15408., 16152., 16896.,  5292.,  5736.,  6180.,  6624.,  7680.,  8160.,  8640.,  9120.,  6228.,  6744.,  7260.,  7776.,  8904.,  9456., 10008., 10560.,  9072.,  9888., 10704., 11520., 13152., 14016., 14880., 15744., 10812., 11688., 12564., 13440., 15336., 16272., 17208., 18144., 12372., 13368., 14364., 15360., 17376., 18432., 19488., 20544., 10896., 11616., 12336., 13056., 14592., 15360., 16128., 16896., 12144., 12960., 13776., 14592., 16224., 17088., 17952., 18816., 12144., 12960., 13776., 14592., 16224., 17088., 17952., 18816., 11436., 12360., 13284., 14208., 16152., 17136., 18120., 19104., 12996., 14040., 15084., 16128., 18192., 19296., 20400., 21504.,  7824.,  8544.,  9264.,  9984., 11520., 12288., 13056., 13824.,  9072.,  9888., 10704., 11520., 13152., 14016., 14880., 15744.,  8724.,  9432., 10140., 10848., 12168., 12912., 13656., 14400., 10461., 11202., 11943., 12684., 14154., 14940., 15726., 16512., 11559., 12390., 13221., 14052., 15612., 16488., 17364., 18240.,  9276.,  9864., 10452., 11040., 12240., 12864., 13488., 14112., 10212., 10872., 11532., 12192., 13464., 14160., 14856., 15552.,  6468.,  7032.,  7596.,  8160.,  9336.,  9936., 10536., 11136.,  7425.,  8106.,  8787.,  9468., 10878., 11604., 12330., 13056.,  8523.,  9294., 10065., 10836., 12336., 13152., 13968., 14784.,  7116.,  7656.,  8196.,  8736.,  9888., 10464., 11040., 11616.,  8052.,  8664.,  9276.,  9888., 11112., 11760., 12408., 13056.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12714., 13164., 13614., 14064., 15060., 15528., 15996., 16464., 13662., 14148., 14634., 15120., 16152., 16656., 17160., 17664., 14610., 15132., 15654., 16176., 17244., 17784., 18324., 18864., 15558., 16116., 16674., 17232., 18336., 18912., 19488., 20064., 16506., 17100., 17694., 18288., 19428., 20040., 20652., 21264., 16818., 17372., 17926., 18480., 19580., 20152., 20724., 21296., 17766., 18356., 18946., 19536., 20672., 21280., 21888., 22496., 13402., 13836., 14270., 14704., 15684., 16136., 16588., 17040., 14350., 14820., 15290., 15760., 16776., 17264., 17752., 18240., 11650., 12092., 12534., 12976., 13964., 14424., 14884., 15344., 14202., 14796., 15390., 15984., 17124., 17736., 18348., 18960., 15150., 15780., 16410., 17040., 18216., 18864., 19512., 20160., 16098., 16764., 17430., 18096., 19308., 19992., 20676., 21360., 17046., 17748., 18450., 19152., 20400., 21120., 21840., 22560., 16394., 17068., 17742., 18416., 19636., 20328., 21020., 21712., 12994., 13500., 14006., 14512., 15564., 16088., 16612., 17136., 13942., 14484., 15026., 15568., 16656., 17216., 17776., 18336., 12714., 13164., 13614., 14064., 15060., 15528., 15996., 16464., 13662., 14148., 14634., 15120., 16152., 16656., 17160., 17664., 14610., 15132., 15654., 16176., 17244., 17784., 18324., 18864., 17098., 17708., 18318., 18928., 20084., 20712., 21340., 21968., 18046., 18692., 19338., 19984., 21176., 21840., 22504., 23168., 16818., 17372., 17926., 18480., 19580., 20152., 20724., 21296., 17766., 18356., 18946., 19536., 20672., 21280., 21888., 22496., 13402., 13836., 14270., 14704., 15684., 16136., 16588., 17040.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9004., 10176., 11420., 12736.,  9493., 10820., 12237., 13744., 12233., 13740., 15337., 17024.,  6924.,  7968.,  9084., 10272.,  9084., 10272., 11532., 12864., 12336., 13888., 15536., 17280., 10884., 12544., 14324., 16224., 14356., 16256., 18276., 20416.,  9072., 10432., 11888., 13440., 11824., 13376., 15024., 16768., 11568., 13120., 14768., 16512., 12068., 13824., 15700., 17696., 15540., 17536., 19652., 21888.,  8304.,  9664., 11120., 12672., 11056., 12608., 14256., 16000.,  8316.,  9504., 10764., 12096.,  8089.,  9356., 10713., 12160., 10685., 12132., 13669., 15296.,  7292.,  8320.,  9420., 10592.,  9388., 10560., 11804., 13120.,  9148., 10336., 11596., 12928.,  9921., 11260., 12689., 14208., 12517., 14036., 15645., 17344.,  7228.,  8256.,  9356., 10528.,  9324., 10496., 11740., 13056.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {33270., 34800., 36366., 37968., 35790., 37392., 39030., 40704., 38310., 39984., 41694., 43440., 40830., 42576., 44358., 46176., 43350., 45168., 47022., 48912., 36454., 38192., 39966., 41776., 38974., 40784., 42630., 44512., 27798., 29296., 30830., 32400., 30318., 31888., 33494., 35136., 29126., 30640., 32190., 33776., 41046., 42864., 44718., 46608., 43566., 45456., 47382., 49344., 46086., 48048., 50046., 52080., 48606., 50640., 52710., 54816., 45366., 47344., 49358., 51408., 34630., 36272., 37950., 39664., 37150., 38864., 40614., 42400., 33270., 34800., 36366., 37968., 35790., 37392., 39030., 40704., 38310., 39984., 41694., 43440., 41910., 43760., 45646., 47568., 44430., 46352., 48310., 50304., 36454., 38192., 39966., 41776., 38974., 40784., 42630., 44512., 27798., 29296., 30830., 32400.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8532.,  9144., 10296., 10944., 12204., 12888., 14256., 14976.,  8469.,  9066., 10374., 11016., 12459., 13146., 14724., 15456., 10953., 11730., 13218., 14040., 15663., 16530., 18288., 19200.,  5124.,  5592.,  6600.,  7104.,  8220.,  8760.,  9984., 10560.,  6996.,  7608.,  8760.,  9408., 10668., 11352., 12720., 13440., 10608., 11424., 12960., 13824., 15504., 16416., 18240., 19200.,  9900., 10632., 12264., 13056., 14868., 15720., 17712., 18624., 13020., 13992., 15864., 16896., 18948., 20040., 22272., 23424.,  8112.,  8736., 10080., 10752., 12240., 12960., 14592., 15360., 10608., 11424., 12960., 13824., 15504., 16416., 18240., 19200., 10608., 11424., 12960., 13824., 15504., 16416., 18240., 19200., 11148., 11976., 13704., 14592., 16500., 17448., 19536., 20544., 14268., 15336., 17304., 18432., 20580., 21768., 24096., 25344.,  8112.,  8736., 10080., 10752., 12240., 12960., 14592., 15360., 10608., 11424., 12960., 13824., 15504., 16416., 18240., 19200.,  6996.,  7608.,  8760.,  9408., 10668., 11352., 12720., 13440.,  7221.,  7794.,  9006.,  9624., 10971., 11634., 13116., 13824.,  9417., 10170., 11562., 12360., 13887., 14730., 16392., 17280.,  6660.,  7128.,  8136.,  8640.,  9756., 10296., 11520., 12096.,  8532.,  9144., 10296., 10944., 12204., 12888., 14256., 14976.,  8148.,  8760.,  9912., 10560., 11820., 12504., 13872., 14592.,  8253.,  8898., 10182., 10872., 12291., 13026., 14580., 15360., 10449., 11274., 12738., 13608., 15207., 16122., 17856., 18816.,  6276.,  6744.,  7752.,  8256.,  9372.,  9912., 11136., 11712.,  8148.,  8760.,  9912., 10560., 11820., 12504., 13872., 14592.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7482.,  7788.,  8604.,  8928.,  9798., 10140., 11064., 11424.,  9378.,  9756., 10644., 11040., 11982., 12396., 13392., 13824., 11274., 11724., 12684., 13152., 14166., 14652., 15720., 16224., 13170., 13692., 14724., 15264., 16350., 16908., 18048., 18624., 15066., 15660., 16764., 17376., 18534., 19164., 20376., 21024., 18378., 19020., 20172., 20832., 22038., 22716., 23976., 24672., 20274., 20988., 22212., 22944., 24222., 24972., 26304., 27072., 12058., 12460., 13372., 13792., 14758., 15196., 16216., 16672., 13954., 14428., 15412., 15904., 16942., 17452., 18544., 19072.,  9002.,  9356., 10220., 10592., 11510., 11900., 12872., 13280., 15066., 15660., 16764., 17376., 18534., 19164., 20376., 21024., 16962., 17628., 18804., 19488., 20718., 21420., 22704., 23424., 18858., 19596., 20844., 21600., 22902., 23676., 25032., 25824., 20754., 21564., 22884., 23712., 25086., 25932., 27360., 28224., 17850., 18540., 19740., 20448., 21702., 22428., 23736., 24480.,  9002.,  9356., 10220., 10592., 11510., 11900., 12872., 13280., 10898., 11324., 12260., 12704., 13694., 14156., 15200., 15680.,  7482.,  7788.,  8604.,  8928.,  9798., 10140., 11064., 11424.,  9378.,  9756., 10644., 11040., 11982., 12396., 13392., 13824., 11274., 11724., 12684., 13152., 14166., 14652., 15720., 16224., 17850., 18540., 19740., 20448., 21702., 22428., 23736., 24480., 19746., 20508., 21780., 22560., 23886., 24684., 26064., 26880., 18378., 19020., 20172., 20832., 22038., 22716., 23976., 24672., 20274., 20988., 22212., 22944., 24222., 24972., 26304., 27072., 12058., 12460., 13372., 13792., 14758., 15196., 16216., 16672.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5124.,  5736.,  6348.,  6960.,  8040.,  8688.,  9336.,  9984., 11244., 11928., 12612., 13296., 14736., 15456., 16176., 16896.,  5589.,  6186.,  6783.,  7380.,  8586.,  9228.,  9870., 10512., 11943., 12630., 13317., 14004., 15660., 16392., 17124., 17856.,  7305.,  8082.,  8859.,  9636., 11022., 11844., 12666., 13488., 15099., 15966., 16833., 17700., 19536., 20448., 21360., 22272.,  3828.,  4296.,  4764.,  5232.,  6168.,  6672.,  7176.,  7680.,  8796.,  9336.,  9876., 10416., 11712., 12288., 12864., 13440.,  5124.,  5736.,  6348.,  6960.,  8040.,  8688.,  9336.,  9984., 11244., 11928., 12612., 13296., 14736., 15456., 16176., 16896.,  7344.,  8160.,  8976.,  9792., 11232., 12096., 12960., 13824., 15504., 16416., 17328., 18240., 20160., 21120., 22080., 23040.,  7356.,  8088.,  8820.,  9552., 11064., 11856., 12648., 13440., 15252., 16104., 16956., 17808., 19920., 20832., 21744., 22656.,  9516., 10488., 11460., 12432., 14184., 15216., 16248., 17280., 19332., 20424., 21516., 22608., 24960., 26112., 27264., 28416.,  5616.,  6240.,  6864.,  7488.,  8736.,  9408., 10080., 10752., 12240., 12960., 13680., 14400., 16128., 16896., 17664., 18432.,  7344.,  8160.,  8976.,  9792., 11232., 12096., 12960., 13824., 15504., 16416., 17328., 18240., 20160., 21120., 22080., 23040.,  7344.,  8160.,  8976.,  9792., 11232., 12096., 12960., 13824., 15504., 16416., 17328., 18240., 20160., 21120., 22080., 23040.,  8220.,  9048.,  9876., 10704., 12312., 13200., 14088., 14976., 16884., 17832., 18780., 19728., 21936., 22944., 23952., 24960., 10380., 11448., 12516., 13584., 15432., 16560., 17688., 18816., 20964., 22152., 23340., 24528., 26976., 28224., 29472., 30720.,  5616.,  6240.,  6864.,  7488.,  8736.,  9408., 10080., 10752., 12240., 12960., 13680., 14400., 16128., 16896., 17664., 18432.,  7344.,  8160.,  8976.,  9792., 11232., 12096., 12960., 13824., 15504., 16416., 17328., 18240., 20160., 21120., 22080., 23040.,  5124.,  5736.,  6348.,  6960.,  8040.,  8688.,  9336.,  9984., 11244., 11928., 12612., 13296., 14736., 15456., 16176., 16896.,  4749.,  5322.,  5895.,  6468.,  7602.,  8220.,  8838.,  9456., 10815., 11478., 12141., 12804., 14388., 15096., 15804., 16512.,  6273.,  7026.,  7779.,  8532.,  9846., 10644., 11442., 12240., 13779., 14622., 15465., 16308., 18072., 18960., 19848., 20736.,  3828.,  4296.,  4764.,  5232.,  6168.,  6672.,  7176.,  7680.,  8796.,  9336.,  9876., 10416., 11712., 12288., 12864., 13440.,  5124.,  5736.,  6348.,  6960.,  8040.,  8688.,  9336.,  9984., 11244., 11928., 12612., 13296., 14736., 15456., 16176., 16896.,  5892.,  6504.,  7116.,  7728.,  8808.,  9456., 10104., 10752., 12012., 12696., 13380., 14064., 15504., 16224., 16944., 17664.,  4437.,  5082.,  5727.,  6372.,  7578.,  8268.,  8958.,  9648., 11079., 11814., 12549., 13284., 14940., 15720., 16500., 17280.,  5961.,  6786.,  7611.,  8436.,  9822., 10692., 11562., 12432., 14043., 14958., 15873., 16788., 18624., 19584., 20544., 21504.,  4596.,  5064.,  5532.,  6000.,  6936.,  7440.,  7944.,  8448.,  9564., 10104., 10644., 11184., 12480., 13056., 13632., 14208.,  5892.,  6504.,  7116.,  7728.,  8808.,  9456., 10104., 10752., 12012., 12696., 13380., 14064., 15504., 16224., 16944., 17664.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7490.,  7796.,  8102.,  8408.,  9204.,  9528.,  9852., 10176., 11062., 11404., 11746., 12088., 13064., 13424., 13784., 14144.,  9162.,  9540.,  9918., 10296., 11164., 11560., 11956., 12352., 13310., 13724., 14138., 14552., 15600., 16032., 16464., 16896., 10834., 11284., 11734., 12184., 13124., 13592., 14060., 14528., 15558., 16044., 16530., 17016., 18136., 18640., 19144., 19648., 12506., 13028., 13550., 14072., 15084., 15624., 16164., 16704., 17806., 18364., 18922., 19480., 20672., 21248., 21824., 22400., 14178., 14772., 15366., 15960., 17044., 17656., 18268., 18880., 20054., 20684., 21314., 21944., 23208., 23856., 24504., 25152., 16658., 17300., 17942., 18584., 19716., 20376., 21036., 21696., 22918., 23596., 24274., 24952., 26264., 26960., 27656., 28352., 18330., 19044., 19758., 20472., 21676., 22408., 23140., 23872., 25166., 25916., 26666., 27416., 28800., 29568., 30336., 31104.,  8354.,  8756.,  9158.,  9560., 10452., 10872., 11292., 11712., 12694., 13132., 13570., 14008., 15080., 15536., 15992., 16448., 10026., 10500., 10974., 11448., 12412., 12904., 13396., 13888., 14942., 15452., 15962., 16472., 17616., 18144., 18672., 19200.,  6386.,  6740.,  7094.,  7448.,  8292.,  8664.,  9036.,  9408., 10342., 10732., 11122., 11512., 12536., 12944., 13352., 13760., 14178., 14772., 15366., 15960., 17044., 17656., 18268., 18880., 20054., 20684., 21314., 21944., 23208., 23856., 24504., 25152., 15850., 16516., 17182., 17848., 19004., 19688., 20372., 21056., 22302., 23004., 23706., 24408., 25744., 26464., 27184., 27904., 17522., 18260., 18998., 19736., 20964., 21720., 22476., 23232., 24550., 25324., 26098., 26872., 28280., 29072., 29864., 30656., 19194., 20004., 20814., 21624., 22924., 23752., 24580., 25408., 26798., 27644., 28490., 29336., 30816., 31680., 32544., 33408., 15554., 16244., 16934., 17624., 18804., 19512., 20220., 20928., 22198., 22924., 23650., 24376., 25736., 26480., 27224., 27968.,  6386.,  6740.,  7094.,  7448.,  8292.,  8664.,  9036.,  9408., 10342., 10732., 11122., 11512., 12536., 12944., 13352., 13760.,  8058.,  8484.,  8910.,  9336., 10252., 10696., 11140., 11584., 12590., 13052., 13514., 13976., 15072., 15552., 16032., 16512.,  7490.,  7796.,  8102.,  8408.,  9204.,  9528.,  9852., 10176., 11062., 11404., 11746., 12088., 13064., 13424., 13784., 14144.,  9162.,  9540.,  9918., 10296., 11164., 11560., 11956., 12352., 13310., 13724., 14138., 14552., 15600., 16032., 16464., 16896., 10834., 11284., 11734., 12184., 13124., 13592., 14060., 14528., 15558., 16044., 16530., 17016., 18136., 18640., 19144., 19648., 15554., 16244., 16934., 17624., 18804., 19512., 20220., 20928., 22198., 22924., 23650., 24376., 25736., 26480., 27224., 27968., 17226., 17988., 18750., 19512., 20764., 21544., 22324., 23104., 24446., 25244., 26042., 26840., 28272., 29088., 29904., 30720., 16658., 17300., 17942., 18584., 19716., 20376., 21036., 21696., 22918., 23596., 24274., 24952., 26264., 26960., 27656., 28352., 18330., 19044., 19758., 20472., 21676., 22408., 23140., 23872., 25166., 25916., 26666., 27416., 28800., 29568., 30336., 31104.,  8354.,  8756.,  9158.,  9560., 10452., 10872., 11292., 11712., 12694., 13132., 13570., 14008., 15080., 15536., 15992., 16448.};
  const std::array<int, 4> in_shape = {{ 3, 8, 10, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {45564., 42976., 58984., 41736., 42888., 43931., 45326., 58746., 43936., 42918., 45184., 41907., 58436., 40586., 41936., 36280., 37324., 48208., 36024., 34920., 36100., 32984., 46200., 31816., 32824.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {20091., 20262., 20433., 20604., 20775., 21288., 21459., 21630., 21801., 21972., 22485., 22656., 22827., 22998., 23169., 23682., 23853., 24024., 24195., 24366., 24879., 25050., 25221., 25392., 25563.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {41348., 42616., 39144., 40384., 52784., 54480., 36664., 37904., 37780., 39056., 43445., 44790., 44846., 46236., 57804., 59636., 42066., 43456., 42801., 44172., 44676., 46080., 40957., 42278., 56892., 58760., 38315., 39636., 39626., 40992., 40896., 42160., 41988., 43288., 54256., 55968., 39388., 40688., 40344., 41616., 42012., 43272., 39008., 40176., 53616., 55280., 36672., 37840., 37692., 38896.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {38634., 40182., 38958., 40524., 39282., 40866., 39606., 41208., 39930., 41550., 40902., 42576., 41226., 42918., 41550., 43260., 41874., 43602., 42198., 43944., 43170., 44970., 43494., 45312., 43818., 45654., 44142., 45996., 44466., 46338., 45438., 47364., 45762., 47706., 46086., 48048., 46410., 48390., 46734., 48732., 47706., 49758., 48030., 50100., 48354., 50442., 48678., 50784., 49002., 51126.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11092., 11720., 12348., 12976., 10488., 11088., 11688., 12288., 12896., 13728., 14560., 15392.,  8088.,  8688.,  9288.,  9888.,  8556.,  9192.,  9828., 10464., 11593., 12298., 13003., 13708., 12334., 13084., 13834., 14584., 13296., 14232., 15168., 16104.,  9334., 10084., 10834., 11584.,  8391.,  9090.,  9789., 10488., 11628., 12360., 13092., 13824., 10993., 11674., 12355., 13036., 13612., 14584., 15556., 16528.,  8269.,  8950.,  9631., 10312.,  8830.,  9556., 10282., 11008., 10704., 11328., 11952., 12576., 11316., 11976., 12636., 13296., 12464., 13280., 14096., 14912.,  8676.,  9336.,  9996., 10656.,  8152.,  8752.,  9352.,  9952., 10348., 10936., 11524., 12112.,  9072.,  9600., 10128., 10656., 11744., 12512., 13280., 14048.,  6960.,  7488.,  8016.,  8544.,  7428.,  7992.,  8556.,  9120.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {30408., 31188., 31968., 32748., 31038., 31836., 32634., 33432., 31668., 32484., 33300., 34116., 32298., 33132., 33966., 34800., 32928., 33780., 34632., 35484., 34818., 35724., 36630., 37536., 35448., 36372., 37296., 38220., 36078., 37020., 37962., 38904., 36708., 37668., 38628., 39588., 37338., 38316., 39294., 40272., 39228., 40260., 41292., 42324., 39858., 40908., 41958., 43008., 40488., 41556., 42624., 43692., 41118., 42204., 43290., 44376., 41748., 42852., 43956., 45060., 43638., 44796., 45954., 47112., 44268., 45444., 46620., 47796., 44898., 46092., 47286., 48480., 45528., 46740., 47952., 49164., 46158., 47388., 48618., 49848., 42288., 43444., 44600., 45756., 42918., 44092., 45266., 46440., 38300., 39364., 40428., 41492., 38930., 40012., 41094., 42176., 39560., 40660., 41760., 42860.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {42980., 45424., 37932., 40320., 52640., 55840., 35604., 37920., 37836., 40224., 42225., 45036., 45027., 47928., 55176., 58856., 42117., 44928., 41091., 43800., 45135., 48000., 39297., 42060., 55912., 59664., 36663., 39336., 39285., 42048., 35388., 37728., 37572., 39984., 46432., 49472., 35004., 37344., 34932., 37152., 38580., 40848., 33660., 35808., 47712., 50656., 31620., 33696., 33660., 35808.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {30864., 32748., 31512., 33432., 32160., 34116., 32808., 34800., 33456., 35484., 35400., 37536., 36048., 38220., 36696., 38904., 37344., 39588., 37992., 40272., 39936., 42324., 40584., 43008., 41232., 43692., 41880., 44376., 42528., 45060., 44472., 47112., 45120., 47796., 45768., 48480., 46416., 49164., 47064., 49848., 43120., 45756., 43768., 46440., 39040., 41492., 39688., 42176., 40336., 42860.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {43908., 45128., 47608., 48864., 39756., 40920., 43344., 44544., 52976., 54592., 57792., 59456., 35100., 36264., 38544., 39744., 37188., 38424., 40776., 42048., 43341., 44706., 47574., 48984., 46167., 47622., 50580., 52080., 51964., 53776., 57472., 59344., 40347., 41802., 44580., 46080., 35709., 37062., 39738., 41136., 42579., 43998., 46920., 48384., 40605., 41922., 44742., 46104., 52852., 54736., 58504., 60448., 35337., 36654., 39294., 40656., 37803., 39210., 41940., 43392., 40188., 41400., 43872., 45120., 42564., 43848., 46392., 47712., 49552., 51136., 54304., 55936., 37428., 38712., 41112., 42432., 35484., 36648., 38928., 40128., 37300., 38440., 40840., 42016., 33852., 34872., 37152., 38208., 46576., 48064., 51136., 52672., 29772., 30792., 32928., 33984., 31860., 32952., 35160., 36288.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {33306., 34080., 35520., 36312., 34566., 35376., 36852., 37680., 35826., 36672., 38184., 39048., 37086., 37968., 39516., 40416., 38346., 39264., 40848., 41784., 42126., 43152., 44844., 45888., 43386., 44448., 46176., 47256., 44646., 45744., 47508., 48624., 45906., 47040., 48840., 49992., 47166., 48336., 50172., 51360., 50946., 52224., 54168., 55464., 52206., 53520., 55500., 56832., 53466., 54816., 56832., 58200., 54726., 56112., 58164., 59568., 55986., 57408., 59496., 60936., 59766., 61296., 63492., 65040., 52194., 53632., 55736., 57192., 53454., 54928., 57068., 58560., 46394., 47776., 49824., 51224., 47654., 49072., 51156., 52592., 45674., 47072., 49136., 50552., 46934., 48368., 50468., 51920., 42946., 44288., 46296., 47656., 44206., 45584., 47628., 49024., 45466., 46880., 48960., 50392.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9860., 10440., 11020., 11600., 12936., 13552., 14168., 14784.,  8908.,  9432.,  9956., 10480., 11760., 12320., 12880., 13440., 10320., 11104., 11888., 12672., 14272., 15104., 15936., 16768.,  4716.,  5240.,  5764.,  6288.,  7280.,  7840.,  8400.,  8960.,  5364.,  5960.,  6556.,  7152.,  8216.,  8848.,  9480., 10112., 11717., 12410., 13103., 13796., 15434., 16172., 16910., 17648., 13247., 14030., 14813., 15596., 17324., 18152., 18980., 19808., 11748., 12664., 13580., 14496., 16432., 17408., 18384., 19360.,  6983.,  7766.,  8549.,  9332., 10700., 11528., 12356., 13184.,  6065.,  6746.,  7427.,  8108.,  9374., 10100., 10826., 11552., 12635., 13382., 14129., 14876., 16568., 17360., 18152., 18944., 10901., 11546., 12191., 12836., 14426., 15116., 15806., 16496., 12684., 13672., 14660., 15648., 17656., 18704., 19752., 20800.,  5741.,  6386.,  7031.,  7676.,  8906.,  9596., 10286., 10976.,  6551.,  7286.,  8021.,  8756., 10076., 10856., 11636., 12416.,  9724., 10296., 10868., 11440., 12768., 13376., 13984., 14592., 10948., 11592., 12236., 12880., 14280., 14960., 15640., 16320.,  9648., 10400., 11152., 11904., 13472., 14272., 15072., 15872.,  5796.,  6440.,  7084.,  7728.,  8840.,  9520., 10200., 10880.,  5004.,  5560.,  6116.,  6672.,  7696.,  8288.,  8880.,  9472., 10132., 10728., 11324., 11920., 13272., 13904., 14536., 15168.,  8636.,  9144.,  9652., 10160., 11424., 11968., 12512., 13056., 10064., 10848., 11632., 12416., 14016., 14848., 15680., 16512.,  4572.,  5080.,  5588.,  6096.,  7072.,  7616.,  8160.,  8704.,  5220.,  5800.,  6380.,  6960.,  8008.,  8624.,  9240.,  9856.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {16174., 16692., 17210., 17728., 18792., 19328., 19864., 20400., 17122., 17676., 18230., 18784., 19884., 20456., 21028., 21600., 15446., 15972., 16498., 17024., 18096., 18640., 19184., 19728., 16394., 16956., 17518., 18080., 19188., 19768., 20348., 20928., 11582., 12052., 12522., 12992., 14008., 14496., 14984., 15472., 11290., 11804., 12318., 12832., 13892., 14424., 14956., 15488., 12238., 12788., 13338., 13888., 14984., 15552., 16120., 16688., 13186., 13772., 14358., 14944., 16076., 16680., 17284., 17888., 13558., 14116., 14674., 15232., 16336., 16912., 17488., 18064., 14506., 15100., 15694., 16288., 17428., 18040., 18652., 19264., 17286., 17924., 18562., 19200., 20384., 21040., 21696., 22352., 18234., 18908., 19582., 20256., 21476., 22168., 22860., 23552., 17582., 18228., 18874., 19520., 20712., 21376., 22040., 22704., 18530., 19212., 19894., 20576., 21804., 22504., 23204., 23904., 15766., 16356., 16946., 17536., 18672., 19280., 19888., 20496., 16498., 17132., 17766., 18400., 19580., 20232., 20884., 21536., 16870., 17476., 18082., 18688., 19840., 20464., 21088., 21712., 17818., 18460., 19102., 19744., 20932., 21592., 22252., 22912., 15054., 15604., 16154., 16704., 17800., 18368., 18936., 19504., 16002., 16588., 17174., 17760., 18892., 19496., 20100., 20704., 14110., 14676., 15242., 15808., 16920., 17504., 18088., 18672., 15058., 15660., 16262., 16864., 18012., 18632., 19252., 19872., 14342., 14852., 15362., 15872., 16928., 17456., 17984., 18512., 15290., 15836., 16382., 16928., 18020., 18584., 19148., 19712., 16174., 16692., 17210., 17728., 18792., 19328., 19864., 20400.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10788., 12048., 13380., 14784.,  7572.,  8688.,  9876., 11136., 12240., 13824., 15504., 17280.,  5700.,  6672.,  7716.,  8832.,  7572.,  8688.,  9876., 11136.,  9781., 11140., 12589., 14128., 12745., 14284., 15913., 17632., 11316., 13024., 14852., 16800.,  9733., 11092., 12541., 14080.,  6761.,  7948.,  9225., 10592., 12321., 13884., 15537., 17280.,  9781., 11140., 12589., 14128., 14596., 16544., 18612., 20800.,  7489.,  8668.,  9937., 11296.,  9733., 11092., 12541., 14080.,  7572.,  8688.,  9876., 11136., 10020., 11280., 12612., 14016.,  9360., 10752., 12240., 13824.,  7572.,  8688.,  9876., 11136.,  6468.,  7440.,  8484.,  9600., 10788., 12048., 13380., 14784.,  7572.,  8688.,  9876., 11136., 12240., 13824., 15504., 17280.,  5700.,  6672.,  7716.,  8832.,  7572.,  8688.,  9876., 11136.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {37822., 39488., 41190., 42928., 40342., 42080., 43854., 45664., 40174., 41856., 43574., 45328., 42694., 44448., 46238., 48064., 35230., 36800., 38406., 40048., 35494., 37152., 38846., 40576., 38014., 39744., 41510., 43312., 40534., 42336., 44174., 46048., 38318., 40064., 41846., 43664., 40838., 42656., 44510., 46400., 44174., 46080., 48022., 50000., 46694., 48672., 50686., 52736., 47550., 49472., 51430., 53424., 50070., 52064., 54094., 56160., 44654., 46464., 48310., 50192., 45942., 47840., 49774., 51744., 39630., 41472., 43350., 45264., 42150., 44064., 46014., 48000., 32638., 34368., 36134., 37936., 35158., 36960., 38798., 40672., 33758., 35520., 37318., 39152., 36278., 38112., 39982., 41888., 32910., 34560., 36246., 37968., 35430., 37152., 38910., 40704., 37822., 39488., 41190., 42928.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10404., 11016., 12312., 12960., 14364., 15048., 16560., 17280.,  7956.,  8424.,  9576., 10080., 11340., 11880., 13248., 13824., 10608., 11424., 12960., 13824., 15504., 16416., 18240., 19200.,  4212.,  4680.,  5544.,  6048.,  7020.,  7560.,  8640.,  9216.,  5508.,  6120.,  7128.,  7776.,  8892.,  9576., 10800., 11520.,  9613., 10186., 11614., 12232., 13795., 14458., 16156., 16864., 12673., 13426., 15034., 15832., 17575., 18418., 20296., 21184., 10204., 10984., 12664., 13504., 15364., 16264., 18304., 19264.,  6649.,  7402.,  8650.,  9448., 10831., 11674., 13192., 14080.,  5357.,  5938.,  7014.,  7640.,  8851.,  9522., 10868., 11584., 13081., 13858., 15490., 16312., 18079., 18946., 20848., 21760.,  9613., 10186., 11614., 12232., 13795., 14458., 16156., 16864., 12940., 13960., 15880., 16960., 19060., 20200., 22480., 23680.,  5029.,  5602.,  6670.,  7288.,  8491.,  9154., 10492., 11200.,  6649.,  7402.,  8650.,  9448., 10831., 11674., 13192., 14080.,  7956.,  8424.,  9576., 10080., 11340., 11880., 13248., 13824., 10404., 11016., 12312., 12960., 14364., 15048., 16560., 17280.,  8112.,  8736., 10080., 10752., 12240., 12960., 14592., 15360.,  5508.,  6120.,  7128.,  7776.,  8892.,  9576., 10800., 11520.,  4212.,  4680.,  5544.,  6048.,  7020.,  7560.,  8640.,  9216., 10404., 11016., 12312., 12960., 14364., 15048., 16560., 17280.,  7956.,  8424.,  9576., 10080., 11340., 11880., 13248., 13824., 10608., 11424., 12960., 13824., 15504., 16416., 18240., 19200.,  4212.,  4680.,  5544.,  6048.,  7020.,  7560.,  8640.,  9216.,  5508.,  6120.,  7128.,  7776.,  8892.,  9576., 10800., 11520.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {18114., 18684., 19764., 20352., 21486., 22092., 23280., 23904., 20010., 20652., 21804., 22464., 23670., 24348., 25608., 26304., 15570., 16092., 17124., 17664., 18750., 19308., 20448., 21024., 17466., 18060., 19164., 19776., 20934., 21564., 22776., 23424., 11490., 11964., 12948., 13440., 14478., 14988., 16080., 16608., 13466., 14028., 15100., 15680., 16806., 17404., 18584., 19200., 11650., 12156., 13172., 13696., 14766., 15308., 16432., 16992., 13546., 14124., 15212., 15808., 16950., 17564., 18760., 19392., 11730., 12252., 13284., 13824., 14910., 15468., 16608., 17184., 13626., 14220., 15324., 15936., 17094., 17724., 18936., 19584., 15986., 16540., 17604., 18176., 19294., 19884., 21056., 21664., 17882., 18508., 19644., 20288., 21478., 22140., 23384., 24064., 18114., 18684., 19764., 20352., 21486., 22092., 23280., 23904., 20010., 20652., 21804., 22464., 23670., 24348., 25608., 26304., 15570., 16092., 17124., 17664., 18750., 19308., 20448., 21024., 13386., 13932., 14988., 15552., 16662., 17244., 18408., 19008., 11570., 12060., 13060., 13568., 14622., 15148., 16256., 16800., 13466., 14028., 15100., 15680., 16806., 17404., 18584., 19200., 11650., 12156., 13172., 13696., 14766., 15308., 16432., 16992., 13546., 14124., 15212., 15808., 16950., 17564., 18760., 19392., 13858., 14396., 15444., 16000., 17102., 17676., 18832., 19424., 15754., 16364., 17484., 18112., 19286., 19932., 21160., 21824., 15986., 16540., 17604., 18176., 19294., 19884., 21056., 21664., 17882., 18508., 19644., 20288., 21478., 22140., 23384., 24064., 18114., 18684., 19764., 20352., 21486., 22092., 23280., 23904.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7140.,  7752.,  8364.,  8976., 10152., 10800., 11448., 12096., 13452., 14136., 14820., 15504., 17040., 17760., 18480., 19200.,  5460.,  5928.,  6396.,  6864.,  7896.,  8400.,  8904.,  9408., 10620., 11160., 11700., 12240., 13632., 14208., 14784., 15360.,  7344.,  8160.,  8976.,  9792., 11232., 12096., 12960., 13824., 15504., 16416., 17328., 18240., 20160., 21120., 22080., 23040.,  2964.,  3432.,  3900.,  4368.,  5208.,  5712.,  6216.,  6720.,  7740.,  8280.,  8820.,  9360., 10560., 11136., 11712., 12288.,  3876.,  4488.,  5100.,  5712.,  6696.,  7344.,  7992.,  8640.,  9804., 10488., 11172., 11856., 13200., 13920., 14640., 15360.,  6685.,  7258.,  7831.,  8404.,  9682., 10300., 10918., 11536., 13039., 13702., 14365., 15028., 16756., 17464., 18172., 18880.,  8785.,  9538., 10291., 11044., 12502., 13300., 14098., 14896., 16579., 17422., 18265., 19108., 21016., 21904., 22792., 23680.,  7148.,  7928.,  8708.,  9488., 11048., 11888., 12728., 13568., 15428., 16328., 17228., 18128., 20288., 21248., 22208., 23168.,  4769.,  5522.,  6275.,  7028.,  8246.,  9044.,  9842., 10640., 12083., 12926., 13769., 14612., 16280., 17168., 18056., 18944.,  3509.,  4090.,  4671.,  5252.,  6298.,  6924.,  7550.,  8176.,  9447., 10118., 10789., 11460., 12956., 13672., 14388., 15104.,  9065.,  9842., 10619., 11396., 12878., 13700., 14522., 15344., 17051., 17918., 18785., 19652., 21584., 22496., 23408., 24320.,  6685.,  7258.,  7831.,  8404.,  9682., 10300., 10918., 11536., 13039., 13702., 14365., 15028., 16756., 17464., 18172., 18880.,  9052., 10072., 11092., 12112., 13912., 14992., 16072., 17152., 19252., 20392., 21532., 22672., 25072., 26272., 27472., 28672.,  3629.,  4202.,  4775.,  5348.,  6386.,  7004.,  7622.,  8240.,  9503., 10166., 10829., 11492., 12980., 13688., 14396., 15104.,  4769.,  5522.,  6275.,  7028.,  8246.,  9044.,  9842., 10640., 12083., 12926., 13769., 14612., 16280., 17168., 18056., 18944.,  5460.,  5928.,  6396.,  6864.,  7896.,  8400.,  8904.,  9408., 10620., 11160., 11700., 12240., 13632., 14208., 14784., 15360.,  7140.,  7752.,  8364.,  8976., 10152., 10800., 11448., 12096., 13452., 14136., 14820., 15504., 17040., 17760., 18480., 19200.,  5616.,  6240.,  6864.,  7488.,  8736.,  9408., 10080., 10752., 12240., 12960., 13680., 14400., 16128., 16896., 17664., 18432.,  3876.,  4488.,  5100.,  5712.,  6696.,  7344.,  7992.,  8640.,  9804., 10488., 11172., 11856., 13200., 13920., 14640., 15360.,  2964.,  3432.,  3900.,  4368.,  5208.,  5712.,  6216.,  6720.,  7740.,  8280.,  8820.,  9360., 10560., 11136., 11712., 12288.,  7140.,  7752.,  8364.,  8976., 10152., 10800., 11448., 12096., 13452., 14136., 14820., 15504., 17040., 17760., 18480., 19200.,  5460.,  5928.,  6396.,  6864.,  7896.,  8400.,  8904.,  9408., 10620., 11160., 11700., 12240., 13632., 14208., 14784., 15360.,  7344.,  8160.,  8976.,  9792., 11232., 12096., 12960., 13824., 15504., 16416., 17328., 18240., 20160., 21120., 22080., 23040.,  2964.,  3432.,  3900.,  4368.,  5208.,  5712.,  6216.,  6720.,  7740.,  8280.,  8820.,  9360., 10560., 11136., 11712., 12288.,  3876.,  4488.,  5100.,  5712.,  6696.,  7344.,  7992.,  8640.,  9804., 10488., 11172., 11856., 13200., 13920., 14640., 15360.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12618., 13188., 13758., 14328., 15388., 15976., 16564., 17152., 18302., 18908., 19514., 20120., 21360., 21984., 22608., 23232., 14290., 14932., 15574., 16216., 17348., 18008., 18668., 19328., 20550., 21228., 21906., 22584., 23896., 24592., 25288., 25984., 11674., 12196., 12718., 13240., 14252., 14792., 15332., 15872., 16974., 17532., 18090., 18648., 19840., 20416., 20992., 21568., 13346., 13940., 14534., 15128., 16212., 16824., 17436., 18048., 19222., 19852., 20482., 21112., 22376., 23024., 23672., 24320., 11754., 12228., 12702., 13176., 14140., 14632., 15124., 15616., 16670., 17180., 17690., 18200., 19344., 19872., 20400., 20928., 13570., 14132., 14694., 15256., 16308., 16888., 17468., 18048., 19190., 19788., 20386., 20984., 22216., 22832., 23448., 24064., 12042., 12548., 13054., 13560., 14556., 15080., 15604., 16128., 17214., 17756., 18298., 18840., 20016., 20576., 21136., 21696., 13714., 14292., 14870., 15448., 16516., 17112., 17708., 18304., 19462., 20076., 20690., 21304., 22552., 23184., 23816., 24448., 12186., 12708., 13230., 13752., 14764., 15304., 15844., 16384., 17486., 18044., 18602., 19160., 20352., 20928., 21504., 22080., 13858., 14452., 15046., 15640., 16724., 17336., 17948., 18560., 19734., 20364., 20994., 21624., 22888., 23536., 24184., 24832., 12474., 13028., 13582., 14136., 15180., 15752., 16324., 16896., 18030., 18620., 19210., 19800., 21024., 21632., 22240., 22848., 14146., 14772., 15398., 16024., 17140., 17784., 18428., 19072., 20278., 20940., 21602., 22264., 23560., 24240., 24920., 25600., 12618., 13188., 13758., 14328., 15388., 15976., 16564., 17152., 18302., 18908., 19514., 20120., 21360., 21984., 22608., 23232., 14290., 14932., 15574., 16216., 17348., 18008., 18668., 19328., 20550., 21228., 21906., 22584., 23896., 24592., 25288., 25984., 11674., 12196., 12718., 13240., 14252., 14792., 15332., 15872., 16974., 17532., 18090., 18648., 19840., 20416., 20992., 21568., 13426., 13972., 14518., 15064., 16100., 16664., 17228., 17792., 18918., 19500., 20082., 20664., 21880., 22480., 23080., 23680., 11898., 12388., 12878., 13368., 14348., 14856., 15364., 15872., 16942., 17468., 17994., 18520., 19680., 20224., 20768., 21312., 13570., 14132., 14694., 15256., 16308., 16888., 17468., 18048., 19190., 19788., 20386., 20984., 22216., 22832., 23448., 24064., 12042., 12548., 13054., 13560., 14556., 15080., 15604., 16128., 17214., 17756., 18298., 18840., 20016., 20576., 21136., 21696., 13714., 14292., 14870., 15448., 16516., 17112., 17708., 18304., 19462., 20076., 20690., 21304., 22552., 23184., 23816., 24448., 12330., 12868., 13406., 13944., 14972., 15528., 16084., 16640., 17758., 18332., 18906., 19480., 20688., 21280., 21872., 22464., 14002., 14612., 15222., 15832., 16932., 17560., 18188., 18816., 20006., 20652., 21298., 21944., 23224., 23888., 24552., 25216., 12474., 13028., 13582., 14136., 15180., 15752., 16324., 16896., 18030., 18620., 19210., 19800., 21024., 21632., 22240., 22848., 14146., 14772., 15398., 16024., 17140., 17784., 18428., 19072., 20278., 20940., 21602., 22264., 23560., 24240., 24920., 25600., 12618., 13188., 13758., 14328., 15388., 15976., 16564., 17152., 18302., 18908., 19514., 20120., 21360., 21984., 22608., 23232.};
  const std::array<int, 4> in_shape = {{ 3, 10, 7, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12480., 16216., 17008., 12336., 12912.,  8760., 11406., 12340.,  8922.,  9600., 14544., 18878., 19812., 14346., 15024.,  5856.,  7576.,  8304.,  5952.,  6480., 10368., 13400., 14128., 10176., 10704.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {22911., 23082., 23253., 23424., 23595., 24279., 24450., 24621., 24792., 24963., 25647., 25818., 25989., 26160., 26331., 27015., 27186., 27357., 27528., 27699., 28383., 28554., 28725., 28896., 29067.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11184., 11904., 14064., 15024., 14832., 15840., 10284., 11040., 10824., 11616.,  9708., 10224., 12396., 13084., 13308., 14056.,  9315.,  9876.,  9954., 10560., 15540., 16416., 19692., 20860., 20604., 21832., 14427., 15348., 15066., 16032.,  6288.,  6720.,  7920.,  8496.,  8688.,  9312.,  5964.,  6432.,  6504.,  7008., 11184., 11904., 14064., 15024., 14832., 15840., 10284., 11040., 10824., 11616.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {44058., 45822., 44382., 46164., 44706., 46506., 45030., 46848., 45354., 47190., 46650., 48558., 46974., 48900., 47298., 49242., 47622., 49584., 47946., 49926., 49242., 51294., 49566., 51636., 49890., 51978., 50214., 52320., 50538., 52662., 51834., 54030., 52158., 54372., 52482., 54714., 52806., 55056., 53130., 55398., 54426., 56766., 54750., 57108., 55074., 57450., 55398., 57792., 55722., 58134.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10128., 10848., 11568., 12288., 11808., 12768., 13728., 14688., 12528., 13536., 14544., 15552.,  7716.,  8472.,  9228.,  9984.,  8184.,  8976.,  9768., 10560., 11604., 12120., 12636., 13152., 14376., 15064., 15752., 16440., 15244., 15992., 16740., 17488., 10101., 10662., 11223., 11784., 10662., 11268., 11874., 12480., 17532., 18408., 19284., 20160., 21320., 22488., 23656., 24824., 22188., 23416., 24644., 25872., 14589., 15510., 16431., 17352., 15150., 16116., 17082., 18048.,  5232.,  5664.,  6096.,  6528.,  6048.,  6624.,  7200.,  7776.,  6768.,  7392.,  8016.,  8640.,  3972.,  4440.,  4908.,  5376.,  4440.,  4944.,  5448.,  5952., 10128., 10848., 11568., 12288., 11808., 12768., 13728., 14688., 12528., 13536., 14544., 15552.,  7716.,  8472.,  9228.,  9984.,  8184.,  8976.,  9768., 10560.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {41040., 42036., 43032., 44028., 41670., 42684., 43698., 44712., 42300., 43332., 44364., 45396., 42930., 43980., 45030., 46080., 43560., 44628., 45696., 46764., 46080., 47220., 48360., 49500., 46710., 47868., 49026., 50184., 47340., 48516., 49692., 50868., 47970., 49164., 50358., 51552., 48600., 49812., 51024., 52236., 40112., 41140., 42168., 43196., 40742., 41788., 42834., 43880., 41372., 42436., 43500., 44564., 42002., 43084., 44166., 45248., 42632., 43732., 44832., 45932., 45152., 46324., 47496., 48668., 45782., 46972., 48162., 49352., 46412., 47620., 48828., 50036., 47042., 48268., 49494., 50720., 47672., 48916., 50160., 51404., 41232., 42292., 43352., 44412., 41862., 42940., 44018., 45096., 42492., 43588., 44684., 45780., 43122., 44236., 45350., 46464., 43752., 44884., 46016., 47148.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14268., 15744., 18144., 20064., 19680., 21696., 13692., 15168., 14772., 16320.,  5343.,  6432.,  6984.,  8376.,  8808., 10320.,  5991.,  7080.,  7269.,  8448., 17007., 18816., 21576., 23928., 23400., 25872., 16215., 18024., 17493., 19392.,  4476.,  5376.,  5856.,  7008.,  7392.,  8640.,  5052.,  5952.,  6132.,  7104., 14268., 15744., 18144., 20064., 19680., 21696., 13692., 15168., 14772., 16320.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {41712., 44028., 42360., 44712., 43008., 45396., 43656., 46080., 44304., 46764., 46896., 49500., 47544., 50184., 48192., 50868., 48840., 51552., 49488., 52236., 40816., 43196., 41464., 43880., 42112., 44564., 42760., 45248., 43408., 45932., 46000., 48668., 46648., 49352., 47296., 50036., 47944., 50720., 48592., 51404., 41968., 44412., 42616., 45096., 43264., 45780., 43912., 46464., 44560., 47148.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 256.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14460., 15288., 16800., 17664., 17520., 18624., 20544., 21696., 18960., 20160., 22176., 23424., 12084., 12984., 14424., 15360., 13020., 13992., 15504., 16512.,  5667.,  5982.,  7128.,  7488.,  7276.,  7696.,  9104.,  9584.,  9012.,  9552., 11080., 11680.,  5529.,  5934.,  6990.,  7440.,  6651.,  7146.,  8292.,  8832., 17523., 18558., 20424., 21504., 21164., 22544., 24912., 26352., 22900., 24400., 26888., 28448., 14505., 15630., 17406., 18576., 15627., 16842., 18708., 19968.,  4668.,  4920.,  5856.,  6144.,  6000.,  6336.,  7488.,  7872.,  7440.,  7872.,  9120.,  9600.,  4596.,  4920.,  5784.,  6144.,  5532.,  5928.,  6864.,  7296., 14460., 15288., 16800., 17664., 17520., 18624., 20544., 21696., 18960., 20160., 22176., 23424., 12084., 12984., 14424., 15360., 13020., 13992., 15504., 16512.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {37418., 38368., 39984., 40952., 38678., 39664., 41316., 42320., 39938., 40960., 42648., 43688., 41198., 42256., 43980., 45056., 42458., 43552., 45312., 46424., 47498., 48736., 50640., 51896., 48758., 50032., 51972., 53264., 50018., 51328., 53304., 54632., 51278., 52624., 54636., 56000., 52538., 53920., 55968., 57368., 31466., 32480., 34160., 35192., 32726., 33776., 35492., 36560., 33986., 35072., 36824., 37928., 35246., 36368., 38156., 39296., 36506., 37664., 39488., 40664., 41546., 42848., 44816., 46136., 42806., 44144., 46148., 47504., 44066., 45440., 47480., 48872., 45326., 46736., 48812., 50240., 46586., 48032., 50144., 51608., 24746., 25568., 27056., 27896., 26006., 26864., 28388., 29264., 27266., 28160., 29720., 30632., 28526., 29456., 31052., 32000., 29786., 30752., 32384., 33368.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14844., 15672., 16500., 17328., 18912., 19776., 20640., 21504., 16272., 17376., 18480., 19584., 21504., 22656., 23808., 24960., 17520., 18720., 19920., 21120., 23136., 24384., 25632., 26880.,  8868.,  9768., 10668., 11568., 12936., 13872., 14808., 15744.,  9516., 10488., 11460., 12432., 13872., 14880., 15888., 16896.,  6315.,  6630.,  6945.,  7260.,  8520.,  8880.,  9240.,  9600.,  7860.,  8280.,  8700.,  9120., 10560., 11040., 11520., 12000.,  9420.,  9960., 10500., 11040., 12600., 13200., 13800., 14400.,  4605.,  5010.,  5415.,  5820.,  6810.,  7260.,  7710.,  8160.,  5415.,  5910.,  6405.,  6900.,  7980.,  8520.,  9060.,  9600., 18555., 19590., 20625., 21660., 23640., 24720., 25800., 26880., 20340., 21720., 23100., 24480., 26880., 28320., 29760., 31200., 21900., 23400., 24900., 26400., 28920., 30480., 32040., 33600., 11085., 12210., 13335., 14460., 16170., 17340., 18510., 19680., 11895., 13110., 14325., 15540., 17340., 18600., 19860., 21120.,  5052.,  5304.,  5556.,  5808.,  6816.,  7104.,  7392.,  7680.,  6288.,  6624.,  6960.,  7296.,  8448.,  8832.,  9216.,  9600.,  7536.,  7968.,  8400.,  8832., 10080., 10560., 11040., 11520.,  3684.,  4008.,  4332.,  4656.,  5448.,  5808.,  6168.,  6528.,  4332.,  4728.,  5124.,  5520.,  6384.,  6816.,  7248.,  7680., 14844., 15672., 16500., 17328., 18912., 19776., 20640., 21504., 16272., 17376., 18480., 19584., 21504., 22656., 23808., 24960., 17520., 18720., 19920., 21120., 23136., 24384., 25632., 26880.,  8868.,  9768., 10668., 11568., 12936., 13872., 14808., 15744.,  9516., 10488., 11460., 12432., 13872., 14880., 15888., 16896.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11038., 11348., 11658., 11968., 12824., 13152., 13480., 13808., 11986., 12332., 12678., 13024., 13916., 14280., 14644., 15008., 12934., 13316., 13698., 14080., 15008., 15408., 15808., 16208., 13882., 14300., 14718., 15136., 16100., 16536., 16972., 17408., 14830., 15284., 15738., 16192., 17192., 17664., 18136., 18608., 18622., 19220., 19818., 20416., 21560., 22176., 22792., 23408., 19570., 20204., 20838., 21472., 22652., 23304., 23956., 24608., 20518., 21188., 21858., 22528., 23744., 24432., 25120., 25808., 21466., 22172., 22878., 23584., 24836., 25560., 26284., 27008., 22414., 23156., 23898., 24640., 25928., 26688., 27448., 28208.,  7262.,  7636.,  8010.,  8384.,  9304.,  9696., 10088., 10480.,  8210.,  8620.,  9030.,  9440., 10396., 10824., 11252., 11680.,  9158.,  9604., 10050., 10496., 11488., 11952., 12416., 12880., 10106., 10588., 11070., 11552., 12580., 13080., 13580., 14080., 11054., 11572., 12090., 12608., 13672., 14208., 14744., 15280., 14846., 15508., 16170., 16832., 18040., 18720., 19400., 20080., 15794., 16492., 17190., 17888., 19132., 19848., 20564., 21280., 16742., 17476., 18210., 18944., 20224., 20976., 21728., 22480., 17690., 18460., 19230., 20000., 21316., 22104., 22892., 23680., 18638., 19444., 20250., 21056., 22408., 23232., 24056., 24880., 11038., 11348., 11658., 11968., 12824., 13152., 13480., 13808., 11986., 12332., 12678., 13024., 13916., 14280., 14644., 15008., 12934., 13316., 13698., 14080., 15008., 15408., 15808., 16208., 13882., 14300., 14718., 15136., 16100., 16536., 16972., 17408., 14830., 15284., 15738., 16192., 17192., 17664., 18136., 18608.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 8724.,  9840., 11028., 12288., 11280., 12672., 14160., 15744., 14160., 15744., 17424., 19200.,  8724.,  9840., 11028., 12288., 10596., 11856., 13188., 14592., 10593., 11964., 13425., 14976., 13684., 15392., 17220., 19168., 17156., 19104., 21172., 23360., 10497., 11868., 13329., 14880., 12741., 14292., 15933., 17664., 10593., 11964., 13425., 14976., 13684., 15392., 17220., 19168., 17156., 19104., 21172., 23360., 10497., 11868., 13329., 14880., 12741., 14292., 15933., 17664.,  8724.,  9840., 11028., 12288., 11280., 12672., 14160., 15744., 14160., 15744., 17424., 19200.,  8724.,  9840., 11028., 12288., 10596., 11856., 13188., 14592.,  8724.,  9840., 11028., 12288., 11280., 12672., 14160., 15744., 14160., 15744., 17424., 19200.,  8724.,  9840., 11028., 12288., 10596., 11856., 13188., 14592.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {21214., 22464., 23750., 25072., 23734., 25056., 26414., 27808., 26254., 27648., 29078., 30544., 28774., 30240., 31742., 33280., 31294., 32832., 34406., 36016., 41374., 43200., 45062., 46960., 43894., 45792., 47726., 49696., 46414., 48384., 50390., 52432., 48934., 50976., 53054., 55168., 51454., 53568., 55718., 57904., 25694., 27072., 28486., 29936., 28214., 29664., 31150., 32672., 30734., 32256., 33814., 35408., 33254., 34848., 36478., 38144., 35774., 37440., 39142., 40880., 45854., 47808., 49798., 51824., 48374., 50400., 52462., 54560., 50894., 52992., 55126., 57296., 53414., 55584., 57790., 60032., 55934., 58176., 60454., 62768., 21214., 22464., 23750., 25072., 23734., 25056., 26414., 27808., 26254., 27648., 29078., 30544., 28774., 30240., 31742., 33280., 31294., 32832., 34406., 36016.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9492.,  9960., 11112., 11616., 12876., 13416., 14784., 15360., 11952., 12576., 13920., 14592., 16080., 16800., 18432., 19200., 14448., 15264., 16800., 17664., 19344., 20256., 22080., 23040.,  7044.,  7656.,  8664.,  9312., 10428., 11112., 12336., 13056.,  8340.,  9096., 10248., 11040., 12300., 13128., 14496., 15360., 11865., 12450., 13890., 14520., 16095., 16770., 18480., 19200., 14940., 15720., 17400., 18240., 20100., 21000., 23040., 24000., 18060., 19080., 21000., 22080., 24180., 25320., 27600., 28800.,  8805.,  9570., 10830., 11640., 13035., 13890., 15420., 16320., 10425., 11370., 12810., 13800., 15375., 16410., 18120., 19200., 11865., 12450., 13890., 14520., 16095., 16770., 18480., 19200., 14940., 15720., 17400., 18240., 20100., 21000., 23040., 24000., 18060., 19080., 21000., 22080., 24180., 25320., 27600., 28800.,  8805.,  9570., 10830., 11640., 13035., 13890., 15420., 16320., 10425., 11370., 12810., 13800., 15375., 16410., 18120., 19200.,  9492.,  9960., 11112., 11616., 12876., 13416., 14784., 15360., 11952., 12576., 13920., 14592., 16080., 16800., 18432., 19200., 14448., 15264., 16800., 17664., 19344., 20256., 22080., 23040.,  7044.,  7656.,  8664.,  9312., 10428., 11112., 12336., 13056.,  8340.,  9096., 10248., 11040., 12300., 13128., 14496., 15360.,  9492.,  9960., 11112., 11616., 12876., 13416., 14784., 15360., 11952., 12576., 13920., 14592., 16080., 16800., 18432., 19200., 14448., 15264., 16800., 17664., 19344., 20256., 22080., 23040.,  7044.,  7656.,  8664.,  9312., 10428., 11112., 12336., 13056.,  8340.,  9096., 10248., 11040., 12300., 13128., 14496., 15360.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2658.,  2748.,  3348.,  3456.,  4110.,  4236.,  4944.,  5088.,  4554.,  4716.,  5388.,  5568.,  6294.,  6492.,  7272.,  7488.,  6450.,  6684.,  7428.,  7680.,  8478.,  8748.,  9600.,  9888.,  8346.,  8652.,  9468.,  9792., 10662., 11004., 11928., 12288., 10242., 10620., 11508., 11904., 12846., 13260., 14256., 14688., 17826., 18492., 19668., 20352., 21582., 22284., 23568., 24288., 19722., 20460., 21708., 22464., 23766., 24540., 25896., 26688., 21618., 22428., 23748., 24576., 25950., 26796., 28224., 29088., 23514., 24396., 25788., 26688., 28134., 29052., 30552., 31488., 25410., 26364., 27828., 28800., 30318., 31308., 32880., 33888.,  2658.,  2748.,  3348.,  3456.,  4110.,  4236.,  4944.,  5088.,  4554.,  4716.,  5388.,  5568.,  6294.,  6492.,  7272.,  7488.,  6450.,  6684.,  7428.,  7680.,  8478.,  8748.,  9600.,  9888.,  8346.,  8652.,  9468.,  9792., 10662., 11004., 11928., 12288., 10242., 10620., 11508., 11904., 12846., 13260., 14256., 14688., 17826., 18492., 19668., 20352., 21582., 22284., 23568., 24288., 19722., 20460., 21708., 22464., 23766., 24540., 25896., 26688., 21618., 22428., 23748., 24576., 25950., 26796., 28224., 29088., 23514., 24396., 25788., 26688., 28134., 29052., 30552., 31488., 25410., 26364., 27828., 28800., 30318., 31308., 32880., 33888.,  2658.,  2748.,  3348.,  3456.,  4110.,  4236.,  4944.,  5088.,  4554.,  4716.,  5388.,  5568.,  6294.,  6492.,  7272.,  7488.,  6450.,  6684.,  7428.,  7680.,  8478.,  8748.,  9600.,  9888.,  8346.,  8652.,  9468.,  9792., 10662., 11004., 11928., 12288., 10242., 10620., 11508., 11904., 12846., 13260., 14256., 14688.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 5460.,  5928.,  6396.,  6864.,  7896.,  8400.,  8904.,  9408., 10620., 11160., 11700., 12240., 13632., 14208., 14784., 15360.,  7152.,  7776.,  8400.,  9024., 10272., 10944., 11616., 12288., 13776., 14496., 15216., 15936., 17664., 18432., 19200., 19968.,  8880.,  9696., 10512., 11328., 12768., 13632., 14496., 15360., 17040., 17952., 18864., 19776., 21696., 22656., 23616., 24576.,  3876.,  4488.,  5100.,  5712.,  6696.,  7344.,  7992.,  8640.,  9804., 10488., 11172., 11856., 13200., 13920., 14640., 15360.,  4788.,  5544.,  6300.,  7056.,  8184.,  8976.,  9768., 10560., 11868., 12696., 13524., 14352., 15840., 16704., 17568., 18432.,  6825.,  7410.,  7995.,  8580.,  9870., 10500., 11130., 11760., 13275., 13950., 14625., 15300., 17040., 17760., 18480., 19200.,  8940.,  9720., 10500., 11280., 12840., 13680., 14520., 15360., 17220., 18120., 19020., 19920., 22080., 23040., 24000., 24960., 11100., 12120., 13140., 14160., 15960., 17040., 18120., 19200., 21300., 22440., 23580., 24720., 27120., 28320., 29520., 30720.,  4845.,  5610.,  6375.,  7140.,  8370.,  9180.,  9990., 10800., 12255., 13110., 13965., 14820., 16500., 17400., 18300., 19200.,  5985.,  6930.,  7875.,  8820., 10230., 11220., 12210., 13200., 14835., 15870., 16905., 17940., 19800., 20880., 21960., 23040.,  6825.,  7410.,  7995.,  8580.,  9870., 10500., 11130., 11760., 13275., 13950., 14625., 15300., 17040., 17760., 18480., 19200.,  8940.,  9720., 10500., 11280., 12840., 13680., 14520., 15360., 17220., 18120., 19020., 19920., 22080., 23040., 24000., 24960., 11100., 12120., 13140., 14160., 15960., 17040., 18120., 19200., 21300., 22440., 23580., 24720., 27120., 28320., 29520., 30720.,  4845.,  5610.,  6375.,  7140.,  8370.,  9180.,  9990., 10800., 12255., 13110., 13965., 14820., 16500., 17400., 18300., 19200.,  5985.,  6930.,  7875.,  8820., 10230., 11220., 12210., 13200., 14835., 15870., 16905., 17940., 19800., 20880., 21960., 23040.,  5460.,  5928.,  6396.,  6864.,  7896.,  8400.,  8904.,  9408., 10620., 11160., 11700., 12240., 13632., 14208., 14784., 15360.,  7152.,  7776.,  8400.,  9024., 10272., 10944., 11616., 12288., 13776., 14496., 15216., 15936., 17664., 18432., 19200., 19968.,  8880.,  9696., 10512., 11328., 12768., 13632., 14496., 15360., 17040., 17952., 18864., 19776., 21696., 22656., 23616., 24576.,  3876.,  4488.,  5100.,  5712.,  6696.,  7344.,  7992.,  8640.,  9804., 10488., 11172., 11856., 13200., 13920., 14640., 15360.,  4788.,  5544.,  6300.,  7056.,  8184.,  8976.,  9768., 10560., 11868., 12696., 13524., 14352., 15840., 16704., 17568., 18432.,  5460.,  5928.,  6396.,  6864.,  7896.,  8400.,  8904.,  9408., 10620., 11160., 11700., 12240., 13632., 14208., 14784., 15360.,  7152.,  7776.,  8400.,  9024., 10272., 10944., 11616., 12288., 13776., 14496., 15216., 15936., 17664., 18432., 19200., 19968.,  8880.,  9696., 10512., 11328., 12768., 13632., 14496., 15360., 17040., 17952., 18864., 19776., 21696., 22656., 23616., 24576.,  3876.,  4488.,  5100.,  5712.,  6696.,  7344.,  7992.,  8640.,  9804., 10488., 11172., 11856., 13200., 13920., 14640., 15360.,  4788.,  5544.,  6300.,  7056.,  8184.,  8976.,  9768., 10560., 11868., 12696., 13524., 14352., 15840., 16704., 17568., 18432.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 2666.,  2756.,  2846.,  2936.,  3516.,  3624.,  3732.,  3840.,  4510.,  4636.,  4762.,  4888.,  5648.,  5792.,  5936.,  6080.,  4338.,  4500.,  4662.,  4824.,  5476.,  5656.,  5836.,  6016.,  6758.,  6956.,  7154.,  7352.,  8184.,  8400.,  8616.,  8832.,  6010.,  6244.,  6478.,  6712.,  7436.,  7688.,  7940.,  8192.,  9006.,  9276.,  9546.,  9816., 10720., 11008., 11296., 11584.,  7682.,  7988.,  8294.,  8600.,  9396.,  9720., 10044., 10368., 11254., 11596., 11938., 12280., 13256., 13616., 13976., 14336.,  9354.,  9732., 10110., 10488., 11356., 11752., 12148., 12544., 13502., 13916., 14330., 14744., 15792., 16224., 16656., 17088., 16042., 16708., 17374., 18040., 19196., 19880., 20564., 21248., 22494., 23196., 23898., 24600., 25936., 26656., 27376., 28096., 17714., 18452., 19190., 19928., 21156., 21912., 22668., 23424., 24742., 25516., 26290., 27064., 28472., 29264., 30056., 30848., 19386., 20196., 21006., 21816., 23116., 23944., 24772., 25600., 26990., 27836., 28682., 29528., 31008., 31872., 32736., 33600., 21058., 21940., 22822., 23704., 25076., 25976., 26876., 27776., 29238., 30156., 31074., 31992., 33544., 34480., 35416., 36352., 22730., 23684., 24638., 25592., 27036., 28008., 28980., 29952., 31486., 32476., 33466., 34456., 36080., 37088., 38096., 39104.,  2666.,  2756.,  2846.,  2936.,  3516.,  3624.,  3732.,  3840.,  4510.,  4636.,  4762.,  4888.,  5648.,  5792.,  5936.,  6080.,  4338.,  4500.,  4662.,  4824.,  5476.,  5656.,  5836.,  6016.,  6758.,  6956.,  7154.,  7352.,  8184.,  8400.,  8616.,  8832.,  6010.,  6244.,  6478.,  6712.,  7436.,  7688.,  7940.,  8192.,  9006.,  9276.,  9546.,  9816., 10720., 11008., 11296., 11584.,  7682.,  7988.,  8294.,  8600.,  9396.,  9720., 10044., 10368., 11254., 11596., 11938., 12280., 13256., 13616., 13976., 14336.,  9354.,  9732., 10110., 10488., 11356., 11752., 12148., 12544., 13502., 13916., 14330., 14744., 15792., 16224., 16656., 17088., 16042., 16708., 17374., 18040., 19196., 19880., 20564., 21248., 22494., 23196., 23898., 24600., 25936., 26656., 27376., 28096., 17714., 18452., 19190., 19928., 21156., 21912., 22668., 23424., 24742., 25516., 26290., 27064., 28472., 29264., 30056., 30848., 19386., 20196., 21006., 21816., 23116., 23944., 24772., 25600., 26990., 27836., 28682., 29528., 31008., 31872., 32736., 33600., 21058., 21940., 22822., 23704., 25076., 25976., 26876., 27776., 29238., 30156., 31074., 31992., 33544., 34480., 35416., 36352., 22730., 23684., 24638., 25592., 27036., 28008., 28980., 29952., 31486., 32476., 33466., 34456., 36080., 37088., 38096., 39104.,  2666.,  2756.,  2846.,  2936.,  3516.,  3624.,  3732.,  3840.,  4510.,  4636.,  4762.,  4888.,  5648.,  5792.,  5936.,  6080.,  4338.,  4500.,  4662.,  4824.,  5476.,  5656.,  5836.,  6016.,  6758.,  6956.,  7154.,  7352.,  8184.,  8400.,  8616.,  8832.,  6010.,  6244.,  6478.,  6712.,  7436.,  7688.,  7940.,  8192.,  9006.,  9276.,  9546.,  9816., 10720., 11008., 11296., 11584.,  7682.,  7988.,  8294.,  8600.,  9396.,  9720., 10044., 10368., 11254., 11596., 11938., 12280., 13256., 13616., 13976., 14336.,  9354.,  9732., 10110., 10488., 11356., 11752., 12148., 12544., 13502., 13916., 14330., 14744., 15792., 16224., 16656., 17088.};
  const std::array<int, 4> in_shape = {{ 3, 10, 8, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11416., 14074., 14936., 11848., 12552., 15292., 18190., 19312., 15114., 16020., 15800., 17762., 18884., 13614., 14520., 13352., 14882., 15764., 11944., 12664., 10984., 12822., 13704., 10760., 11480.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {30786., 31164., 31542., 31920., 30378., 29190., 29568., 26490., 26868., 23918., 22986., 23364., 23742., 24120., 22962., 22542., 22920., 20226., 20604., 18038., 17490., 17868., 18246., 18624., 19002.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12160., 12976., 15192., 16180., 16152., 17200., 12592., 13392., 13376., 14224., 15228., 16248., 18817., 19996., 19962., 21216., 16284., 17236., 17204., 18216., 16156., 17136., 17979., 19140., 19124., 20360., 13196., 14108., 14116., 15088., 13312., 14224., 14800., 15844., 15704., 16808., 11632., 12464., 12352., 13232., 10528., 11280., 13088., 13964., 13992., 14928., 10896., 11568., 11616., 12336.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {59787., 61572., 60516., 62328., 61245., 63084., 61974., 63840., 58991., 60756., 56709., 58380., 57438., 59136., 51383., 52980., 52112., 53736., 46313., 47836., 44415., 45972., 45144., 46728., 45873., 47484., 46602., 48240., 44387., 45924., 43641., 45084., 44370., 45840., 39083., 40452., 39812., 41208., 34781., 36076., 33651., 34980., 34380., 35736., 35109., 36492., 35838., 37248., 36567., 38004.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 9936., 10752., 11568., 12384., 12692., 13680., 14668., 15656., 13592., 14640., 15688., 16736., 11072., 11872., 12672., 13472., 11824., 12672., 13520., 14368., 14204., 15224., 16244., 17264., 18951., 20130., 21309., 22488., 20046., 21300., 22554., 23808., 17536., 18488., 19440., 20392., 18420., 19432., 20444., 21456., 17380., 18360., 19340., 20320., 18381., 19542., 20703., 21864., 19476., 20712., 21948., 23184., 12680., 13592., 14504., 15416., 13564., 14536., 15508., 16480., 11760., 12672., 13584., 14496., 12428., 13472., 14516., 15560., 13280., 14384., 15488., 16592.,  9344., 10176., 11008., 11840., 10000., 10880., 11760., 12640.,  9552., 10304., 11056., 11808., 12500., 13376., 14252., 15128., 13352., 14288., 15224., 16160., 10912., 11584., 12256., 12928., 11568., 12288., 13008., 13728.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {28573., 29398., 30223., 31048., 29300., 30152., 31004., 31856., 30027., 30906., 31785., 32664., 30754., 31660., 32566., 33472., 27833., 28702., 29571., 30440., 25667., 26570., 27473., 28376., 26394., 27324., 28254., 29184., 24497., 25390., 26283., 27176., 25224., 26144., 27064., 27984., 23583., 24466., 25349., 26232., 23721., 24638., 25555., 26472., 24448., 25392., 26336., 27280., 23319., 24226., 25133., 26040., 24046., 24980., 25914., 26848., 20293., 21126., 21959., 22792., 19663., 20530., 21397., 22264., 20390., 21284., 22178., 23072., 19261., 20118., 20975., 21832., 19988., 20872., 21756., 22640., 19115., 19962., 20809., 21656., 20789., 21670., 22551., 23432., 21516., 22424., 23332., 24240., 21155., 22026., 22897., 23768., 21882., 22780., 23678., 24576., 21777., 22638., 23499., 24360.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 1 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13456., 15072., 15504., 17448., 17424., 19488., 11856., 13408., 13424., 15072., 15080., 17072., 16745., 19064., 19035., 21504., 14784., 16680., 16624., 18640., 15528., 17504., 16605., 18952., 18895., 21392., 12416., 14264., 14256., 16224., 12848., 14432., 13720., 15560., 15528., 17488., 10896., 12384., 12336., 13920., 11760., 13344., 13624., 15512., 15432., 17440., 10832., 12320., 12272., 13856.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {48573., 50952., 50031., 52464., 51489., 53976., 52947., 55488., 50693., 53160., 52785., 55320., 54243., 56832., 48917., 51432., 50375., 52944., 45305., 47800., 45605., 48168., 47063., 49680., 46601., 49144., 48059., 50656., 44909., 47304., 48537., 51000., 49995., 52512., 45437., 47880., 46895., 49392., 42593., 45016., 44429., 46920., 45887., 48432., 46193., 48664., 47651., 50176., 48213., 50664.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 128.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {13040., 13856., 15456., 16320., 15044., 15968., 17912., 18896., 16844., 17888., 19952., 21056., 11472., 12192., 13760., 14528., 12976., 13792., 15456., 16320., 13908., 14928., 16936., 18016., 15911., 17010., 19354., 20528., 18101., 19350., 21844., 23168., 14700., 15616., 17536., 18512., 16468., 17504., 19544., 20640., 15332., 16336., 18328., 19392., 15731., 16858., 19230., 20432., 17921., 19198., 21720., 23072., 11548., 12416., 14288., 15216., 13316., 14304., 16296., 17344., 12016., 12832., 14432., 15296., 12612., 13488., 15336., 16272., 14316., 15312., 17280., 18336.,  9968., 10688., 12160., 12928., 11280., 12096., 13664., 14528., 11120., 11936., 13536., 14400., 12884., 13808., 15704., 16688., 14588., 15632., 17648., 18752., 10480., 11200., 12672., 13440., 11792., 12608., 14176., 15040.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {23843., 24634., 26206., 27024., 25297., 26142., 27768., 28640., 25151., 25986., 27602., 28464., 26605., 27494., 29164., 30080., 23067., 23882., 25478., 26320., 22831., 23714., 25378., 26288., 24285., 25222., 26940., 27904., 22283., 23146., 24790., 25680., 23737., 24654., 26352., 27296., 22823., 23730., 25418., 26352., 21947., 22794., 24422., 25296., 23401., 24302., 25984., 26912., 22167., 22994., 24602., 25456., 23621., 24502., 26164., 27072., 20019., 20762., 22286., 23056., 22855., 23666., 25258., 26096., 24309., 25174., 26820., 27712., 23843., 24634., 26206., 27024., 25297., 26142., 27768., 28640., 25151., 25986., 27602., 28464., 21011., 21850., 23470., 24336., 22465., 23358., 25032., 25952., 22831., 23714., 25378., 26288., 24285., 25222., 26940., 27904., 22283., 23146., 24790., 25680.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12144., 12960., 13776., 14592., 16224., 17088., 17952., 18816., 13356., 14280., 15204., 16128., 18072., 19056., 20040., 21024., 14916., 15960., 17004., 18048., 20112., 21216., 22320., 23424.,  9360., 10080., 10800., 11520., 13056., 13824., 14592., 15360., 10608., 11424., 12240., 13056., 14688., 15552., 16416., 17280., 11564., 12584., 13604., 14624., 16664., 17744., 18824., 19904., 13443., 14542., 15641., 16740., 19102., 20276., 21450., 22624., 15369., 16618., 17867., 19116., 21628., 22952., 24276., 25600., 13604., 14520., 15436., 16352., 18288., 19264., 20240., 21216., 15164., 16200., 17236., 18272., 20328., 21424., 22520., 23616., 14940., 15944., 16948., 17952., 19976., 21040., 22104., 23168., 13567., 14694., 15821., 16948., 19338., 20540., 21742., 22944., 15493., 16770., 18047., 19324., 21864., 23216., 24568., 25920.,  9268., 10136., 11004., 11872., 13760., 14688., 15616., 16544., 10828., 11816., 12804., 13792., 15800., 16848., 17896., 18944., 10608., 11424., 12240., 13056., 14688., 15552., 16416., 17280., 12732., 13608., 14484., 15360., 17256., 18192., 19128., 20064., 14292., 15288., 16284., 17280., 19296., 20352., 21408., 22464., 10896., 11616., 12336., 13056., 14592., 15360., 16128., 16896., 12144., 12960., 13776., 14592., 16224., 17088., 17952., 18816.,  9072.,  9888., 10704., 11520., 13152., 14016., 14880., 15744., 10284., 11208., 12132., 13056., 15000., 15984., 16968., 17952., 11844., 12888., 13932., 14976., 17040., 18144., 19248., 20352.,  9360., 10080., 10800., 11520., 13056., 13824., 14592., 15360., 10608., 11424., 12240., 13056., 14688., 15552., 16416., 17280.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {23919., 24710., 25501., 26292., 27914., 28732., 29550., 30368., 25365., 26210., 27055., 27900., 29576., 30448., 31320., 32192., 23675., 24510., 25345., 26180., 27846., 28708., 29570., 30432., 25121., 26010., 26899., 27788., 29508., 30424., 31340., 32256., 20807., 21622., 22437., 23252., 24898., 25740., 26582., 27424., 20011., 20894., 21777., 22660., 24374., 25284., 26194., 27104., 21457., 22394., 23331., 24268., 26036., 27000., 27964., 28928., 20215., 21078., 21941., 22804., 24498., 25388., 26278., 27168., 21661., 22578., 23495., 24412., 26160., 27104., 28048., 28992., 22531., 23438., 24345., 25252., 26990., 27924., 28858., 29792., 24679., 25526., 26373., 27220., 28898., 29772., 30646., 31520., 26125., 27026., 27927., 28828., 30560., 31488., 32416., 33344., 22323., 23150., 23977., 24804., 26462., 27316., 28170., 29024., 23769., 24650., 25531., 26412., 28124., 29032., 29940., 30848., 19391., 20134., 20877., 21620., 23194., 23964., 24734., 25504., 24739., 25550., 26361., 27172., 28814., 29652., 30490., 31328., 26185., 27050., 27915., 28780., 30476., 31368., 32260., 33152., 23919., 24710., 25501., 26292., 27914., 28732., 29550., 30368., 25365., 26210., 27055., 27900., 29576., 30448., 31320., 32192., 23675., 24510., 25345., 26180., 27846., 28708., 29570., 30432., 19231., 20070., 20909., 21748., 23418., 24284., 25150., 26016., 20677., 21570., 22463., 23356., 25080., 26000., 26920., 27840., 20011., 20894., 21777., 22660., 24374., 25284., 26194., 27104., 21457., 22394., 23331., 24268., 26036., 27000., 27964., 28928., 20215., 21078., 21941., 22804., 24498., 25388., 26278., 27168.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 2 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {11824., 13376., 15024., 16768., 12228., 14016., 15924., 17952., 15828., 17856., 20004., 22272.,  9648., 11072., 12592., 14208., 12656., 14272., 15984., 17792., 14852., 16800., 18868., 21056., 13511., 15588., 17815., 20192., 17891., 20268., 22795., 25472., 11524., 13248., 15092., 17056., 15060., 17024., 19108., 21312., 14788., 16736., 18804., 20992., 15135., 17332., 19679., 22176., 19515., 22012., 24659., 27456., 11332., 13056., 14900., 16864., 14868., 16832., 18916., 21120., 11824., 13376., 15024., 16768.,  9972., 11616., 13380., 15264., 13380., 15264., 17268., 19392.,  8272.,  9600., 11024., 12544., 10896., 12416., 14032., 15744., 11568., 13120., 14768., 16512., 11540., 13280., 15140., 17120., 14948., 16928., 19028., 21248.,  8784., 10112., 11536., 13056., 11408., 12928., 14544., 16256.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {23151., 24692., 26287., 27936., 26059., 27708., 29411., 31168., 27303., 28932., 30615., 32352., 30211., 31948., 33739., 35584., 21023., 22548., 24127., 25760., 19143., 20676., 22263., 23904., 22051., 23692., 25387., 27136., 18559., 20052., 21599., 23200., 21467., 23068., 24723., 26432., 21687., 23268., 24903., 26592., 21023., 22548., 24127., 25760., 23931., 25564., 27251., 28992., 20759., 22308., 23911., 25568., 23667., 25324., 27035., 28800., 17039., 18484., 19983., 21536., 21687., 23268., 24903., 26592., 24595., 26284., 28027., 29824., 23151., 24692., 26287., 27936., 26059., 27708., 29411., 31168., 27303., 28932., 30615., 32352., 17039., 18484., 19983., 21536., 19947., 21500., 23107., 24768., 19143., 20676., 22263., 23904., 22051., 23692., 25387., 27136., 18559., 20052., 21599., 23200.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {10608., 11424., 12960., 13824., 15504., 16416., 18240., 19200., 10380., 11208., 12936., 13824., 15732., 16680., 18768., 19776., 13500., 14568., 16536., 17664., 19812., 21000., 23328., 24576.,  8112.,  8736., 10080., 10752., 12240., 12960., 14592., 15360., 10608., 11424., 12960., 13824., 15504., 16416., 18240., 19200., 13452., 14472., 16392., 17472., 19572., 20712., 22992., 24192., 12163., 13070., 15090., 16072., 18317., 19374., 21844., 22976., 16015., 17222., 19542., 20824., 23369., 24726., 27496., 28928.,  9820., 10600., 12280., 13120., 14980., 15880., 17920., 18880., 12940., 13960., 15880., 16960., 19060., 20200., 22480., 23680., 13324., 14344., 16264., 17344., 19444., 20584., 22864., 24064., 13243., 14270., 16410., 17512., 19877., 21054., 23644., 24896., 17095., 18422., 20862., 22264., 24929., 26406., 29296., 30848., 10204., 10984., 12664., 13504., 15364., 16264., 18304., 19264., 13324., 14344., 16264., 17344., 19444., 20584., 22864., 24064., 10608., 11424., 12960., 13824., 15504., 16416., 18240., 19200.,  9132.,  9864., 11496., 12288., 14100., 14952., 16944., 17856., 12252., 13224., 15096., 16128., 18180., 19272., 21504., 22656.,  8112.,  8736., 10080., 10752., 12240., 12960., 14592., 15360., 10608., 11424., 12960., 13824., 15504., 16416., 18240., 19200., 10608., 11424., 12960., 13824., 15504., 16416., 18240., 19200., 10380., 11208., 12936., 13824., 15732., 16680., 18768., 19776., 13500., 14568., 16536., 17664., 19812., 21000., 23328., 24576.,  8112.,  8736., 10080., 10752., 12240., 12960., 14592., 15360., 10608., 11424., 12960., 13824., 15504., 16416., 18240., 19200.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24843., 25630., 27194., 28008., 29653., 30494., 32220., 33088., 27735., 28630., 30302., 31224., 32977., 33926., 35760., 36736., 27427., 28302., 29954., 30856., 32589., 33518., 35332., 36288., 30319., 31302., 33062., 34072., 35913., 36950., 38872., 39936., 21627., 22398., 23946., 24744., 26373., 27198., 28908., 29760., 17347., 18126., 19682., 20488., 22125., 22958., 24676., 25536., 20239., 21126., 22790., 23704., 25449., 26390., 28216., 29184., 18779., 19518., 21034., 21800., 23397., 24190., 25868., 26688., 21671., 22518., 24142., 25016., 26721., 27622., 29408., 30336., 23411., 24238., 25842., 26696., 28381., 29262., 31028., 31936., 21627., 22398., 23946., 24744., 26373., 27198., 28908., 29760., 24519., 25398., 27054., 27960., 29697., 30630., 32448., 33408., 19539., 20334., 21906., 22728., 24381., 25230., 26964., 27840., 22431., 23334., 25014., 25944., 27705., 28662., 30504., 31488., 14763., 15454., 16922., 17640., 19189., 19934., 21564., 22336., 23411., 24238., 25842., 26696., 28381., 29262., 31028., 31936., 26303., 27238., 28950., 29912., 31705., 32694., 34568., 35584., 24843., 25630., 27194., 28008., 29653., 30494., 32220., 33088., 27735., 28630., 30302., 31224., 32977., 33926., 35760., 36736., 27427., 28302., 29954., 30856., 32589., 33518., 35332., 36288., 14763., 15454., 16922., 17640., 19189., 19934., 21564., 22336., 17655., 18454., 20030., 20856., 22513., 23366., 25104., 25984., 17347., 18126., 19682., 20488., 22125., 22958., 24676., 25536., 20239., 21126., 22790., 23704., 25449., 26390., 28216., 29184., 18779., 19518., 21034., 21800., 23397., 24190., 25868., 26688.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, SAME3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = { 7344.,  8160.,  8976.,  9792., 11232., 12096., 12960., 13824., 15504., 16416., 17328., 18240., 20160., 21120., 22080., 23040.,  6684.,  7512.,  8340.,  9168., 10776., 11664., 12552., 13440., 15348., 16296., 17244., 18192., 20400., 21408., 22416., 23424.,  8844.,  9912., 10980., 12048., 13896., 15024., 16152., 17280., 19428., 20616., 21804., 22992., 25440., 26688., 27936., 29184.,  5616.,  6240.,  6864.,  7488.,  8736.,  9408., 10080., 10752., 12240., 12960., 13680., 14400., 16128., 16896., 17664., 18432.,  7344.,  8160.,  8976.,  9792., 11232., 12096., 12960., 13824., 15504., 16416., 17328., 18240., 20160., 21120., 22080., 23040.,  9052., 10072., 11092., 12112., 13912., 14992., 16072., 17152., 19252., 20392., 21532., 22672., 25072., 26272., 27472., 28672.,  9179., 10086., 10993., 11900., 13774., 14756., 15738., 16720., 18969., 20026., 21083., 22140., 24764., 25896., 27028., 28160., 11847., 13054., 14261., 15468., 17642., 18924., 20206., 21488., 24037., 25394., 26751., 28108., 31032., 32464., 33896., 35328.,  6892.,  7672.,  8452.,  9232., 10792., 11632., 12472., 13312., 15172., 16072., 16972., 17872., 20032., 20992., 21952., 22912.,  9052., 10072., 11092., 12112., 13912., 14992., 16072., 17152., 19252., 20392., 21532., 22672., 25072., 26272., 27472., 28672.,  9308., 10328., 11348., 12368., 14168., 15248., 16328., 17408., 19508., 20648., 21788., 22928., 25328., 26528., 27728., 28928.,  9939., 10966., 11993., 13020., 15014., 16116., 17218., 18320., 20689., 21866., 23043., 24220., 26964., 28216., 29468., 30720., 12607., 13934., 15261., 16588., 18882., 20284., 21686., 23088., 25757., 27234., 28711., 30188., 33232., 34784., 36336., 37888.,  7148.,  7928.,  8708.,  9488., 11048., 11888., 12728., 13568., 15428., 16328., 17228., 18128., 20288., 21248., 22208., 23168.,  9308., 10328., 11348., 12368., 14168., 15248., 16328., 17408., 19508., 20648., 21788., 22928., 25328., 26528., 27728., 28928.,  7344.,  8160.,  8976.,  9792., 11232., 12096., 12960., 13824., 15504., 16416., 17328., 18240., 20160., 21120., 22080., 23040.,  5820.,  6552.,  7284.,  8016.,  9528., 10320., 11112., 11904., 13716., 14568., 15420., 16272., 18384., 19296., 20208., 21120.,  7980.,  8952.,  9924., 10896., 12648., 13680., 14712., 15744., 17796., 18888., 19980., 21072., 23424., 24576., 25728., 26880.,  5616.,  6240.,  6864.,  7488.,  8736.,  9408., 10080., 10752., 12240., 12960., 13680., 14400., 16128., 16896., 17664., 18432.,  7344.,  8160.,  8976.,  9792., 11232., 12096., 12960., 13824., 15504., 16416., 17328., 18240., 20160., 21120., 22080., 23040.,  7344.,  8160.,  8976.,  9792., 11232., 12096., 12960., 13824., 15504., 16416., 17328., 18240., 20160., 21120., 22080., 23040.,  6684.,  7512.,  8340.,  9168., 10776., 11664., 12552., 13440., 15348., 16296., 17244., 18192., 20400., 21408., 22416., 23424.,  8844.,  9912., 10980., 12048., 13896., 15024., 16152., 17280., 19428., 20616., 21804., 22992., 25440., 26688., 27936., 29184.,  5616.,  6240.,  6864.,  7488.,  8736.,  9408., 10080., 10752., 12240., 12960., 13680., 14400., 16128., 16896., 17664., 18432.,  7344.,  8160.,  8976.,  9792., 11232., 12096., 12960., 13824., 15504., 16416., 17328., 18240., 20160., 21120., 22080., 23040.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 32.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(FilterBackpropWindow5Stride2, VALID3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {19459., 20246., 21033., 21820., 23366., 24180., 24994., 25808., 27489., 28330., 29171., 30012., 31828., 32696., 33564., 34432., 22063., 22958., 23853., 24748., 26402., 27324., 28246., 29168., 30957., 31906., 32855., 33804., 35728., 36704., 37680., 38656., 22491., 23366., 24241., 25116., 26750., 27652., 28554., 29456., 31225., 32154., 33083., 34012., 35916., 36872., 37828., 38784., 25095., 26078., 27061., 28044., 29786., 30796., 31806., 32816., 34693., 35730., 36767., 37804., 39816., 40880., 41944., 43008., 21235., 22006., 22777., 23548., 25078., 25876., 26674., 27472., 29137., 29962., 30787., 31612., 33412., 34264., 35116., 35968., 18811., 19590., 20369., 21148., 22686., 23492., 24298., 25104., 26777., 27610., 28443., 29276., 31084., 31944., 32804., 33664., 21415., 22302., 23189., 24076., 25722., 26636., 27550., 28464., 30245., 31186., 32127., 33068., 34984., 35952., 36920., 37888., 15571., 16310., 17049., 17788., 19286., 20052., 20818., 21584., 23217., 24010., 24803., 25596., 27364., 28184., 29004., 29824., 18175., 19022., 19869., 20716., 22322., 23196., 24070., 24944., 26685., 27586., 28487., 29388., 31264., 32192., 33120., 34048., 18603., 19430., 20257., 21084., 22670., 23524., 24378., 25232., 26953., 27834., 28715., 29596., 31452., 32360., 33268., 34176., 21235., 22006., 22777., 23548., 25078., 25876., 26674., 27472., 29137., 29962., 30787., 31612., 33412., 34264., 35116., 35968., 23839., 24718., 25597., 26476., 28114., 29020., 29926., 30832., 32605., 33538., 34471., 35404., 37312., 38272., 39232., 40192., 19083., 19878., 20673., 21468., 23022., 23844., 24666., 25488., 27177., 28026., 28875., 29724., 31548., 32424., 33300., 34176., 21687., 22590., 23493., 24396., 26058., 26988., 27918., 28848., 30645., 31602., 32559., 33516., 35448., 36432., 37416., 38400., 15779., 16470., 17161., 17852., 19302., 20020., 20738., 21456., 23041., 23786., 24531., 25276., 26996., 27768., 28540., 29312., 18603., 19430., 20257., 21084., 22670., 23524., 24378., 25232., 26953., 27834., 28715., 29596., 31452., 32360., 33268., 34176., 21207., 22142., 23077., 24012., 25706., 26668., 27630., 28592., 30421., 31410., 32399., 33388., 35352., 36368., 37384., 38400., 19459., 20246., 21033., 21820., 23366., 24180., 24994., 25808., 27489., 28330., 29171., 30012., 31828., 32696., 33564., 34432., 22063., 22958., 23853., 24748., 26402., 27324., 28246., 29168., 30957., 31906., 32855., 33804., 35728., 36704., 37680., 38656., 22491., 23366., 24241., 25116., 26750., 27652., 28554., 29456., 31225., 32154., 33083., 34012., 35916., 36872., 37828., 38784., 15779., 16470., 17161., 17852., 19302., 20020., 20738., 21456., 23041., 23786., 24531., 25276., 26996., 27768., 28540., 29312., 18383., 19182., 19981., 20780., 22338., 23164., 23990., 24816., 26509., 27362., 28215., 29068., 30896., 31776., 32656., 33536., 18811., 19590., 20369., 21148., 22686., 23492., 24298., 25104., 26777., 27610., 28443., 29276., 31084., 31944., 32804., 33664., 21415., 22302., 23189., 24076., 25722., 26636., 27550., 28464., 30245., 31186., 32127., 33068., 34984., 35952., 36920., 37888., 15571., 16310., 17049., 17788., 19286., 20052., 20818., 21584., 23217., 24010., 24803., 25596., 27364., 28184., 29004., 29824.};
  const std::array<int, 4> in_shape = {{ 3, 10, 10, 4 }};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 64.0;
  this->run_filter_backprop_test(exp_out, in_shape, multiplier, padding, max_input_val);
}