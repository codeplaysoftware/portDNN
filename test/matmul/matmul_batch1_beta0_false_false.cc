/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_matmul_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>
#include <vector>

#include "test/matmul/fixture.h"
#include "test/types/kernel_data_types.h"
#include "test/types/to_gtest_types.h"

using DataTypeList = sycldnn::types::KernelDataTypes;
using GTestTypeList = sycldnn::types::ToGTestTypes<DataTypeList>::type;

template <typename DataType>
using MatmulBatch1Beta0FalseFalse = MatmulFixture<DataType, false, false>;
TYPED_TEST_SUITE(MatmulBatch1Beta0FalseFalse, GTestTypeList);
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M14xK14xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3885.,  3990.,  3455.,  3560.,  3665.,  3770.,  3875.,  3980.,  3765.,
      3870.,  3079.,  3184.,  3289.,  3394.,  10269., 10570., 9335.,  9636.,
      9937.,  10238., 10539., 10840., 9925.,  10226., 8735.,  9036.,  9337.,
      9638.,  16653., 17150., 15215., 15712., 16209., 16706., 17203., 17700.,
      16085., 16582., 14391., 14888., 15385., 15882., 23037., 23730., 21095.,
      21788., 22481., 23174., 23867., 24560., 22245., 22938., 20047., 20740.,
      21433., 22126., 13549., 14054., 14431., 14936., 15441., 15946., 16451.,
      16956., 13557., 14062., 14183., 14688., 15193., 15698., 6621.,  6810.,
      5975.,  6164.,  6353.,  6542.,  6731.,  6920.,  6405.,  6594.,  5503.,
      5692.,  5881.,  6070.,  13005., 13390., 11855., 12240., 12625., 13010.,
      13395., 13780., 12565., 12950., 11159., 11544., 11929., 12314., 19389.,
      19970., 17735., 18316., 18897., 19478., 20059., 20640., 18725., 19306.,
      16815., 17396., 17977., 18558., 25773., 26550., 23615., 24392., 25169.,
      25946., 26723., 27500., 24885., 25662., 22471., 23248., 24025., 24802.,
      3997.,  4202.,  3895.,  4100.,  4305.,  4510.,  4715.,  4920.,  4933.,
      5138.,  4575.,  4780.,  4985.,  5190.,  9357.,  9630.,  8495.,  8768.,
      9041.,  9314.,  9587.,  9860.,  9045.,  9318.,  7927.,  8200.,  8473.,
      8746.,  15741., 16210., 14375., 14844., 15313., 15782., 16251., 16720.,
      15205., 15674., 13583., 14052., 14521., 14990., 22125., 22790., 20255.,
      20920., 21585., 22250., 22915., 23580., 21365., 22030., 19239., 19904.,
      20569., 21234., 19805., 20410., 16919., 17524., 18129., 18734., 19339.,
      19944., 16773., 17378., 17727., 18332., 18937., 19542.};
  const int batches = 1;
  const int m = 14;
  const int k = 14;
  const int n = 14;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M14xK14xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3259.,  3364.,  3469.,  3574.,  3359.,  3464.,  3569.,  3674.,  3203.,
      3308.,  3413.,  3518.,  2791.,  2896.,  3001.,  9125.,  9426.,  9727.,
      10028., 9113.,  9414.,  9715.,  10016., 8845.,  9146.,  9447.,  9748.,
      8321.,  8622.,  8923.,  14991., 15488., 15985., 16482., 14867., 15364.,
      15861., 16358., 14487., 14984., 15481., 15978., 13851., 14348., 14845.,
      20857., 21550., 22243., 22936., 20621., 21314., 22007., 22700., 20129.,
      20822., 21515., 22208., 19381., 20074., 20767., 15011., 15516., 16021.,
      16526., 13127., 13632., 14137., 14642., 15083., 15588., 16093., 16598.,
      16783., 17288., 17793., 5773.,  5962.,  6151.,  6340.,  5825.,  6014.,
      6203.,  6392.,  5621.,  5810.,  5999.,  6188.,  5161.,  5350.,  5539.,
      11639., 12024., 12409., 12794., 11579., 11964., 12349., 12734., 11263.,
      11648., 12033., 12418., 10691., 11076., 11461., 17505., 18086., 18667.,
      19248., 17333., 17914., 18495., 19076., 16905., 17486., 18067., 18648.,
      16221., 16802., 17383., 23371., 24148., 24925., 25702., 23087., 23864.,
      24641., 25418., 22547., 23324., 24101., 24878., 21751., 22528., 23305.,
      3509.,  3714.,  3919.,  4124.,  4137.,  4342.,  4547.,  4752.,  4509.,
      4714.,  4919.,  5124.,  4625.,  4830.,  5035.,  8287.,  8560.,  8833.,
      9106.,  8291.,  8564.,  8837.,  9110.,  8039.,  8312.,  8585.,  8858.,
      7531.,  7804.,  8077.,  14153., 14622., 15091., 15560., 14045., 14514.,
      14983., 15452., 13681., 14150., 14619., 15088., 13061., 13530., 13999.,
      20019., 20684., 21349., 22014., 19799., 20464., 21129., 21794., 19323.,
      19988., 20653., 21318., 18591., 19256., 19921., 18333., 18938., 19543.,
      20148., 16977., 17582., 18187., 18792., 15365., 15970., 16575., 17180.,
      17593., 18198., 18803.};
  const int batches = 1;
  const int m = 14;
  const int k = 14;
  const int n = 15;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M14xK14xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2441.,  2546.,  2651.,  2756.,  2861.,  2966.,  3071.,  3176.,  3281.,
      3386.,  3491.,  3596.,  3701.,  3806.,  3911.,  4016.,  6893.,  7194.,
      7495.,  7796.,  8097.,  8398.,  8699.,  9000.,  9301.,  9602.,  9903.,
      10204., 10505., 10806., 11107., 11408., 11345., 11842., 12339., 12836.,
      13333., 13830., 14327., 14824., 15321., 15818., 16315., 16812., 17309.,
      17806., 18303., 18800., 15797., 16490., 17183., 17876., 18569., 19262.,
      19955., 20648., 21341., 22034., 22727., 23420., 24113., 24806., 25499.,
      26192., 12697., 13202., 13707., 14212., 14717., 15222., 15727., 16232.,
      16737., 17242., 17747., 18252., 18757., 19262., 19767., 20272., 4349.,
      4538.,  4727.,  4916.,  5105.,  5294.,  5483.,  5672.,  5861.,  6050.,
      6239.,  6428.,  6617.,  6806.,  6995.,  7184.,  8801.,  9186.,  9571.,
      9956.,  10341., 10726., 11111., 11496., 11881., 12266., 12651., 13036.,
      13421., 13806., 14191., 14576., 13253., 13834., 14415., 14996., 15577.,
      16158., 16739., 17320., 17901., 18482., 19063., 19644., 20225., 20806.,
      21387., 21968., 17705., 18482., 19259., 20036., 20813., 21590., 22367.,
      23144., 23921., 24698., 25475., 26252., 27029., 27806., 28583., 29360.,
      2957.,  3162.,  3367.,  3572.,  3777.,  3982.,  4187.,  4392.,  4597.,
      4802.,  5007.,  5212.,  5417.,  5622.,  5827.,  6032.,  6257.,  6530.,
      6803.,  7076.,  7349.,  7622.,  7895.,  8168.,  8441.,  8714.,  8987.,
      9260.,  9533.,  9806.,  10079., 10352., 10709., 11178., 11647., 12116.,
      12585., 13054., 13523., 13992., 14461., 14930., 15399., 15868., 16337.,
      16806., 17275., 17744., 15161., 15826., 16491., 17156., 17821., 18486.,
      19151., 19816., 20481., 21146., 21811., 22476., 23141., 23806., 24471.,
      25136., 13213., 13818., 14423., 15028., 15633., 16238., 16843., 17448.,
      18053., 18658., 19263., 19868., 20473., 21078., 21683., 22288.};
  const int batches = 1;
  const int m = 14;
  const int k = 14;
  const int n = 16;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M14xK15xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3960.,  4080.,  3560.,  3680.,  3800.,  3920.,  4040.,  4160.,  3960.,
      4080.,  3304.,  3424.,  3544.,  3664.,  10875., 11220., 9965.,  10310.,
      10655., 11000., 11345., 11690., 10755., 11100., 9589.,  9934.,  10279.,
      10624., 17790., 18360., 16370., 16940., 17510., 18080., 18650., 19220.,
      17550., 18120., 15874., 16444., 17014., 17584., 24705., 25500., 22775.,
      23570., 24365., 25160., 25955., 26750., 24345., 25140., 22159., 22954.,
      23749., 24544., 7748.,  8064.,  7996.,  8312.,  8628.,  8944.,  9260.,
      9576.,  9828.,  10144., 9820.,  10136., 10452., 10768., 9031.,  9316.,
      8257.,  8542.,  8827.,  9112.,  9397.,  9682.,  8943.,  9228.,  7913.,
      8198.,  8483.,  8768.,  15946., 16456., 14662., 15172., 15682., 16192.,
      16702., 17212., 15738., 16248., 14198., 14708., 15218., 15728., 22861.,
      23596., 21067., 21802., 22537., 23272., 24007., 24742., 22533., 23268.,
      20483., 21218., 21953., 22688., 13584., 14096., 14480., 14992., 15504.,
      16016., 16528., 17040., 13648., 14160., 14288., 14800., 15312., 15824.,
      7187.,  7412.,  6549.,  6774.,  6999.,  7224.,  7449.,  7674.,  7131.,
      7356.,  6237.,  6462.,  6687.,  6912.,  14102., 14552., 12954., 13404.,
      13854., 14304., 14754., 15204., 13926., 14376., 12522., 12972., 13422.,
      13872., 21017., 21692., 19359., 20034., 20709., 21384., 22059., 22734.,
      20721., 21396., 18807., 19482., 20157., 20832., 21468., 22176., 18916.,
      19624., 20332., 21040., 21748., 22456., 19516., 20224., 20804., 21512.,
      22220., 22928., 5343.,  5508.,  4841.,  5006.,  5171.,  5336.,  5501.,
      5666.,  5319.,  5484.,  4561.,  4726.,  4891.,  5056.};
  const int batches = 1;
  const int m = 14;
  const int k = 15;
  const int n = 14;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M14xK15xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3544.,  3664.,  3784.,  3904.,  3704.,  3824.,  3944.,  4064.,  3608.,
      3728.,  3848.,  3968.,  3256.,  3376.,  3496.,  10114., 10459., 10804.,
      11149., 10214., 10559., 10904., 11249., 10058., 10403., 10748., 11093.,
      9646.,  9991.,  10336., 16684., 17254., 17824., 18394., 16724., 17294.,
      17864., 18434., 16508., 17078., 17648., 18218., 16036., 16606., 17176.,
      23254., 24049., 24844., 25639., 23234., 24029., 24824., 25619., 22958.,
      23753., 24548., 25343., 22426., 23221., 24016., 7808.,  8124.,  8440.,
      8756.,  9008.,  9324.,  9640.,  9956.,  9952.,  10268., 10584., 10900.,
      10640., 10956., 11272., 8362.,  8647.,  8932.,  9217.,  8478.,  8763.,
      9048.,  9333.,  8338.,  8623.,  8908.,  9193.,  7942.,  8227.,  8512.,
      14932., 15442., 15952., 16462., 14988., 15498., 16008., 16518., 14788.,
      15298., 15808., 16318., 14332., 14842., 15352., 21502., 22237., 22972.,
      23707., 21498., 22233., 22968., 23703., 21238., 21973., 22708., 23443.,
      20722., 21457., 22192., 15144., 15656., 16168., 16680., 13288., 13800.,
      14312., 14824., 15272., 15784., 16296., 16808., 17000., 17512., 18024.,
      6610.,  6835.,  7060.,  7285.,  6742.,  6967.,  7192.,  7417.,  6618.,
      6843.,  7068.,  7293.,  6238.,  6463.,  6688.,  13180., 13630., 14080.,
      14530., 13252., 13702., 14152., 14602., 13068., 13518., 13968., 14418.,
      12628., 13078., 13528., 19750., 20425., 21100., 21775., 19762., 20437.,
      21112., 21787., 19518., 20193., 20868., 21543., 19018., 19693., 20368.,
      21456., 22164., 22872., 23580., 20640., 21348., 22056., 22764., 19568.,
      20276., 20984., 21692., 22336., 23044., 23752., 4858.,  5023.,  5188.,
      5353.,  5006.,  5171.,  5336.,  5501.,  4898.,  5063.,  5228.,  5393.,
      4534.,  4699.,  4864.};
  const int batches = 1;
  const int m = 14;
  const int k = 15;
  const int n = 15;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M14xK15xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2936.,  3056.,  3176.,  3296.,  3416.,  3536.,  3656.,  3776.,  3896.,
      4016.,  4136.,  4256.,  4376.,  4496.,  4616.,  4736.,  8201.,  8546.,
      8891.,  9236.,  9581.,  9926.,  10271., 10616., 10961., 11306., 11651.,
      11996., 12341., 12686., 13031., 13376., 13466., 14036., 14606., 15176.,
      15746., 16316., 16886., 17456., 18026., 18596., 19166., 19736., 20306.,
      20876., 21446., 22016., 18731., 19526., 20321., 21116., 21911., 22706.,
      23501., 24296., 25091., 25886., 26681., 27476., 28271., 29066., 29861.,
      30656., 7932.,  8248.,  8564.,  8880.,  9196.,  9512.,  9828.,  10144.,
      10460., 10776., 11092., 11408., 11724., 12040., 12356., 12672., 6797.,
      7082.,  7367.,  7652.,  7937.,  8222.,  8507.,  8792.,  9077.,  9362.,
      9647.,  9932.,  10217., 10502., 10787., 11072., 12062., 12572., 13082.,
      13592., 14102., 14612., 15122., 15632., 16142., 16652., 17162., 17672.,
      18182., 18692., 19202., 19712., 17327., 18062., 18797., 19532., 20267.,
      21002., 21737., 22472., 23207., 23942., 24677., 25412., 26147., 26882.,
      27617., 28352., 12928., 13440., 13952., 14464., 14976., 15488., 16000.,
      16512., 17024., 17536., 18048., 18560., 19072., 19584., 20096., 20608.,
      5393.,  5618.,  5843.,  6068.,  6293.,  6518.,  6743.,  6968.,  7193.,
      7418.,  7643.,  7868.,  8093.,  8318.,  8543.,  8768.,  10658., 11108.,
      11558., 12008., 12458., 12908., 13358., 13808., 14258., 14708., 15158.,
      15608., 16058., 16508., 16958., 17408., 15923., 16598., 17273., 17948.,
      18623., 19298., 19973., 20648., 21323., 21998., 22673., 23348., 24023.,
      24698., 25373., 26048., 17924., 18632., 19340., 20048., 20756., 21464.,
      22172., 22880., 23588., 24296., 25004., 25712., 26420., 27128., 27836.,
      28544., 3989.,  4154.,  4319.,  4484.,  4649.,  4814.,  4979.,  5144.,
      5309.,  5474.,  5639.,  5804.,  5969.,  6134.,  6299.,  6464.};
  const int batches = 1;
  const int m = 14;
  const int k = 15;
  const int n = 16;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M14xK16xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4264.,  4400.,  3896.,  4032.,  4168.,  4304.,  4440.,  4576.,  4392.,
      4528.,  3768.,  3904.,  4040.,  4176.,  11944., 12336., 11064., 11456.,
      11848., 12240., 12632., 13024., 12072., 12464., 10936., 11328., 11720.,
      12112., 19624., 20272., 18232., 18880., 19528., 20176., 20824., 21472.,
      19752., 20400., 18104., 18752., 19400., 20048., 27304., 28208., 25400.,
      26304., 27208., 28112., 29016., 29920., 27432., 28336., 25272., 26176.,
      27080., 27984., 4264.,  4400.,  3896.,  4032.,  4168.,  4304.,  4440.,
      4576.,  4392.,  4528.,  3768.,  3904.,  4040.,  4176.,  11944., 12336.,
      11064., 11456., 11848., 12240., 12632., 13024., 12072., 12464., 10936.,
      11328., 11720., 12112., 19624., 20272., 18232., 18880., 19528., 20176.,
      20824., 21472., 19752., 20400., 18104., 18752., 19400., 20048., 27304.,
      28208., 25400., 26304., 27208., 28112., 29016., 29920., 27432., 28336.,
      25272., 26176., 27080., 27984., 4264.,  4400.,  3896.,  4032.,  4168.,
      4304.,  4440.,  4576.,  4392.,  4528.,  3768.,  3904.,  4040.,  4176.,
      11944., 12336., 11064., 11456., 11848., 12240., 12632., 13024., 12072.,
      12464., 10936., 11328., 11720., 12112., 19624., 20272., 18232., 18880.,
      19528., 20176., 20824., 21472., 19752., 20400., 18104., 18752., 19400.,
      20048., 27304., 28208., 25400., 26304., 27208., 28112., 29016., 29920.,
      27432., 28336., 25272., 26176., 27080., 27984., 4264.,  4400.,  3896.,
      4032.,  4168.,  4304.,  4440.,  4576.,  4392.,  4528.,  3768.,  3904.,
      4040.,  4176.,  11944., 12336., 11064., 11456., 11848., 12240., 12632.,
      13024., 12072., 12464., 10936., 11328., 11720., 12112.};
  const int batches = 1;
  const int m = 14;
  const int k = 16;
  const int n = 14;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M14xK16xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4088.,  4224.,  4360.,  4496.,  4312.,  4448.,  4584.,  4720.,  4280.,
      4416.,  4552.,  4688.,  3992.,  4128.,  4264.,  11640., 12032., 12424.,
      12816., 11864., 12256., 12648., 13040., 11832., 12224., 12616., 13008.,
      11544., 11936., 12328., 19192., 19840., 20488., 21136., 19416., 20064.,
      20712., 21360., 19384., 20032., 20680., 21328., 19096., 19744., 20392.,
      26744., 27648., 28552., 29456., 26968., 27872., 28776., 29680., 26936.,
      27840., 28744., 29648., 26648., 27552., 28456., 4088.,  4224.,  4360.,
      4496.,  4312.,  4448.,  4584.,  4720.,  4280.,  4416.,  4552.,  4688.,
      3992.,  4128.,  4264.,  11640., 12032., 12424., 12816., 11864., 12256.,
      12648., 13040., 11832., 12224., 12616., 13008., 11544., 11936., 12328.,
      19192., 19840., 20488., 21136., 19416., 20064., 20712., 21360., 19384.,
      20032., 20680., 21328., 19096., 19744., 20392., 26744., 27648., 28552.,
      29456., 26968., 27872., 28776., 29680., 26936., 27840., 28744., 29648.,
      26648., 27552., 28456., 4088.,  4224.,  4360.,  4496.,  4312.,  4448.,
      4584.,  4720.,  4280.,  4416.,  4552.,  4688.,  3992.,  4128.,  4264.,
      11640., 12032., 12424., 12816., 11864., 12256., 12648., 13040., 11832.,
      12224., 12616., 13008., 11544., 11936., 12328., 19192., 19840., 20488.,
      21136., 19416., 20064., 20712., 21360., 19384., 20032., 20680., 21328.,
      19096., 19744., 20392., 26744., 27648., 28552., 29456., 26968., 27872.,
      28776., 29680., 26936., 27840., 28744., 29648., 26648., 27552., 28456.,
      4088.,  4224.,  4360.,  4496.,  4312.,  4448.,  4584.,  4720.,  4280.,
      4416.,  4552.,  4688.,  3992.,  4128.,  4264.,  11640., 12032., 12424.,
      12816., 11864., 12256., 12648., 13040., 11832., 12224., 12616., 13008.,
      11544., 11936., 12328.};
  const int batches = 1;
  const int m = 14;
  const int k = 16;
  const int n = 15;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M14xK16xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3720.,  3856.,  3992.,  4128.,  4264.,  4400.,  4536.,  4672.,  4808.,
      4944.,  5080.,  5216.,  5352.,  5488.,  5624.,  5760.,  10120., 10512.,
      10904., 11296., 11688., 12080., 12472., 12864., 13256., 13648., 14040.,
      14432., 14824., 15216., 15608., 16000., 16520., 17168., 17816., 18464.,
      19112., 19760., 20408., 21056., 21704., 22352., 23000., 23648., 24296.,
      24944., 25592., 26240., 22920., 23824., 24728., 25632., 26536., 27440.,
      28344., 29248., 30152., 31056., 31960., 32864., 33768., 34672., 35576.,
      36480., 3720.,  3856.,  3992.,  4128.,  4264.,  4400.,  4536.,  4672.,
      4808.,  4944.,  5080.,  5216.,  5352.,  5488.,  5624.,  5760.,  10120.,
      10512., 10904., 11296., 11688., 12080., 12472., 12864., 13256., 13648.,
      14040., 14432., 14824., 15216., 15608., 16000., 16520., 17168., 17816.,
      18464., 19112., 19760., 20408., 21056., 21704., 22352., 23000., 23648.,
      24296., 24944., 25592., 26240., 22920., 23824., 24728., 25632., 26536.,
      27440., 28344., 29248., 30152., 31056., 31960., 32864., 33768., 34672.,
      35576., 36480., 3720.,  3856.,  3992.,  4128.,  4264.,  4400.,  4536.,
      4672.,  4808.,  4944.,  5080.,  5216.,  5352.,  5488.,  5624.,  5760.,
      10120., 10512., 10904., 11296., 11688., 12080., 12472., 12864., 13256.,
      13648., 14040., 14432., 14824., 15216., 15608., 16000., 16520., 17168.,
      17816., 18464., 19112., 19760., 20408., 21056., 21704., 22352., 23000.,
      23648., 24296., 24944., 25592., 26240., 22920., 23824., 24728., 25632.,
      26536., 27440., 28344., 29248., 30152., 31056., 31960., 32864., 33768.,
      34672., 35576., 36480., 3720.,  3856.,  3992.,  4128.,  4264.,  4400.,
      4536.,  4672.,  4808.,  4944.,  5080.,  5216.,  5352.,  5488.,  5624.,
      5760.,  10120., 10512., 10904., 11296., 11688., 12080., 12472., 12864.,
      13256., 13648., 14040., 14432., 14824., 15216., 15608., 16000.};
  const int batches = 1;
  const int m = 14;
  const int k = 16;
  const int n = 16;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M15xK14xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3885.,  3990.,  3455.,  3560.,  3665.,  3770.,  3875.,  3980.,  3765.,
      3870.,  3079.,  3184.,  3289.,  3394.,  10269., 10570., 9335.,  9636.,
      9937.,  10238., 10539., 10840., 9925.,  10226., 8735.,  9036.,  9337.,
      9638.,  16653., 17150., 15215., 15712., 16209., 16706., 17203., 17700.,
      16085., 16582., 14391., 14888., 15385., 15882., 23037., 23730., 21095.,
      21788., 22481., 23174., 23867., 24560., 22245., 22938., 20047., 20740.,
      21433., 22126., 13549., 14054., 14431., 14936., 15441., 15946., 16451.,
      16956., 13557., 14062., 14183., 14688., 15193., 15698., 6621.,  6810.,
      5975.,  6164.,  6353.,  6542.,  6731.,  6920.,  6405.,  6594.,  5503.,
      5692.,  5881.,  6070.,  13005., 13390., 11855., 12240., 12625., 13010.,
      13395., 13780., 12565., 12950., 11159., 11544., 11929., 12314., 19389.,
      19970., 17735., 18316., 18897., 19478., 20059., 20640., 18725., 19306.,
      16815., 17396., 17977., 18558., 25773., 26550., 23615., 24392., 25169.,
      25946., 26723., 27500., 24885., 25662., 22471., 23248., 24025., 24802.,
      3997.,  4202.,  3895.,  4100.,  4305.,  4510.,  4715.,  4920.,  4933.,
      5138.,  4575.,  4780.,  4985.,  5190.,  9357.,  9630.,  8495.,  8768.,
      9041.,  9314.,  9587.,  9860.,  9045.,  9318.,  7927.,  8200.,  8473.,
      8746.,  15741., 16210., 14375., 14844., 15313., 15782., 16251., 16720.,
      15205., 15674., 13583., 14052., 14521., 14990., 22125., 22790., 20255.,
      20920., 21585., 22250., 22915., 23580., 21365., 22030., 19239., 19904.,
      20569., 21234., 19805., 20410., 16919., 17524., 18129., 18734., 19339.,
      19944., 16773., 17378., 17727., 18332., 18937., 19542., 5709.,  5870.,
      5135.,  5296.,  5457.,  5618.,  5779.,  5940.,  5525.,  5686.,  4695.,
      4856.,  5017.,  5178.};
  const int batches = 1;
  const int m = 15;
  const int k = 14;
  const int n = 14;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M15xK14xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3259.,  3364.,  3469.,  3574.,  3359.,  3464.,  3569.,  3674.,  3203.,
      3308.,  3413.,  3518.,  2791.,  2896.,  3001.,  9125.,  9426.,  9727.,
      10028., 9113.,  9414.,  9715.,  10016., 8845.,  9146.,  9447.,  9748.,
      8321.,  8622.,  8923.,  14991., 15488., 15985., 16482., 14867., 15364.,
      15861., 16358., 14487., 14984., 15481., 15978., 13851., 14348., 14845.,
      20857., 21550., 22243., 22936., 20621., 21314., 22007., 22700., 20129.,
      20822., 21515., 22208., 19381., 20074., 20767., 15011., 15516., 16021.,
      16526., 13127., 13632., 14137., 14642., 15083., 15588., 16093., 16598.,
      16783., 17288., 17793., 5773.,  5962.,  6151.,  6340.,  5825.,  6014.,
      6203.,  6392.,  5621.,  5810.,  5999.,  6188.,  5161.,  5350.,  5539.,
      11639., 12024., 12409., 12794., 11579., 11964., 12349., 12734., 11263.,
      11648., 12033., 12418., 10691., 11076., 11461., 17505., 18086., 18667.,
      19248., 17333., 17914., 18495., 19076., 16905., 17486., 18067., 18648.,
      16221., 16802., 17383., 23371., 24148., 24925., 25702., 23087., 23864.,
      24641., 25418., 22547., 23324., 24101., 24878., 21751., 22528., 23305.,
      3509.,  3714.,  3919.,  4124.,  4137.,  4342.,  4547.,  4752.,  4509.,
      4714.,  4919.,  5124.,  4625.,  4830.,  5035.,  8287.,  8560.,  8833.,
      9106.,  8291.,  8564.,  8837.,  9110.,  8039.,  8312.,  8585.,  8858.,
      7531.,  7804.,  8077.,  14153., 14622., 15091., 15560., 14045., 14514.,
      14983., 15452., 13681., 14150., 14619., 15088., 13061., 13530., 13999.,
      20019., 20684., 21349., 22014., 19799., 20464., 21129., 21794., 19323.,
      19988., 20653., 21318., 18591., 19256., 19921., 18333., 18938., 19543.,
      20148., 16977., 17582., 18187., 18792., 15365., 15970., 16575., 17180.,
      17593., 18198., 18803., 4935.,  5096.,  5257.,  5418.,  5003.,  5164.,
      5325.,  5486.,  4815.,  4976.,  5137.,  5298.,  4371.,  4532.,  4693.};
  const int batches = 1;
  const int m = 15;
  const int k = 14;
  const int n = 15;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M15xK14xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2441.,  2546.,  2651.,  2756.,  2861.,  2966.,  3071.,  3176.,  3281.,
      3386.,  3491.,  3596.,  3701.,  3806.,  3911.,  4016.,  6893.,  7194.,
      7495.,  7796.,  8097.,  8398.,  8699.,  9000.,  9301.,  9602.,  9903.,
      10204., 10505., 10806., 11107., 11408., 11345., 11842., 12339., 12836.,
      13333., 13830., 14327., 14824., 15321., 15818., 16315., 16812., 17309.,
      17806., 18303., 18800., 15797., 16490., 17183., 17876., 18569., 19262.,
      19955., 20648., 21341., 22034., 22727., 23420., 24113., 24806., 25499.,
      26192., 12697., 13202., 13707., 14212., 14717., 15222., 15727., 16232.,
      16737., 17242., 17747., 18252., 18757., 19262., 19767., 20272., 4349.,
      4538.,  4727.,  4916.,  5105.,  5294.,  5483.,  5672.,  5861.,  6050.,
      6239.,  6428.,  6617.,  6806.,  6995.,  7184.,  8801.,  9186.,  9571.,
      9956.,  10341., 10726., 11111., 11496., 11881., 12266., 12651., 13036.,
      13421., 13806., 14191., 14576., 13253., 13834., 14415., 14996., 15577.,
      16158., 16739., 17320., 17901., 18482., 19063., 19644., 20225., 20806.,
      21387., 21968., 17705., 18482., 19259., 20036., 20813., 21590., 22367.,
      23144., 23921., 24698., 25475., 26252., 27029., 27806., 28583., 29360.,
      2957.,  3162.,  3367.,  3572.,  3777.,  3982.,  4187.,  4392.,  4597.,
      4802.,  5007.,  5212.,  5417.,  5622.,  5827.,  6032.,  6257.,  6530.,
      6803.,  7076.,  7349.,  7622.,  7895.,  8168.,  8441.,  8714.,  8987.,
      9260.,  9533.,  9806.,  10079., 10352., 10709., 11178., 11647., 12116.,
      12585., 13054., 13523., 13992., 14461., 14930., 15399., 15868., 16337.,
      16806., 17275., 17744., 15161., 15826., 16491., 17156., 17821., 18486.,
      19151., 19816., 20481., 21146., 21811., 22476., 23141., 23806., 24471.,
      25136., 13213., 13818., 14423., 15028., 15633., 16238., 16843., 17448.,
      18053., 18658., 19263., 19868., 20473., 21078., 21683., 22288., 3713.,
      3874.,  4035.,  4196.,  4357.,  4518.,  4679.,  4840.,  5001.,  5162.,
      5323.,  5484.,  5645.,  5806.,  5967.,  6128.};
  const int batches = 1;
  const int m = 15;
  const int k = 14;
  const int n = 16;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M15xK15xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3960.,  4080.,  3560.,  3680.,  3800.,  3920.,  4040.,  4160.,  3960.,
      4080.,  3304.,  3424.,  3544.,  3664.,  10875., 11220., 9965.,  10310.,
      10655., 11000., 11345., 11690., 10755., 11100., 9589.,  9934.,  10279.,
      10624., 17790., 18360., 16370., 16940., 17510., 18080., 18650., 19220.,
      17550., 18120., 15874., 16444., 17014., 17584., 24705., 25500., 22775.,
      23570., 24365., 25160., 25955., 26750., 24345., 25140., 22159., 22954.,
      23749., 24544., 7748.,  8064.,  7996.,  8312.,  8628.,  8944.,  9260.,
      9576.,  9828.,  10144., 9820.,  10136., 10452., 10768., 9031.,  9316.,
      8257.,  8542.,  8827.,  9112.,  9397.,  9682.,  8943.,  9228.,  7913.,
      8198.,  8483.,  8768.,  15946., 16456., 14662., 15172., 15682., 16192.,
      16702., 17212., 15738., 16248., 14198., 14708., 15218., 15728., 22861.,
      23596., 21067., 21802., 22537., 23272., 24007., 24742., 22533., 23268.,
      20483., 21218., 21953., 22688., 13584., 14096., 14480., 14992., 15504.,
      16016., 16528., 17040., 13648., 14160., 14288., 14800., 15312., 15824.,
      7187.,  7412.,  6549.,  6774.,  6999.,  7224.,  7449.,  7674.,  7131.,
      7356.,  6237.,  6462.,  6687.,  6912.,  14102., 14552., 12954., 13404.,
      13854., 14304., 14754., 15204., 13926., 14376., 12522., 12972., 13422.,
      13872., 21017., 21692., 19359., 20034., 20709., 21384., 22059., 22734.,
      20721., 21396., 18807., 19482., 20157., 20832., 21468., 22176., 18916.,
      19624., 20332., 21040., 21748., 22456., 19516., 20224., 20804., 21512.,
      22220., 22928., 5343.,  5508.,  4841.,  5006.,  5171.,  5336.,  5501.,
      5666.,  5319.,  5484.,  4561.,  4726.,  4891.,  5056.,  12258., 12648.,
      11246., 11636., 12026., 12416., 12806., 13196., 12114., 12504., 10846.,
      11236., 11626., 12016.};
  const int batches = 1;
  const int m = 15;
  const int k = 15;
  const int n = 14;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M15xK15xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3544.,  3664.,  3784.,  3904.,  3704.,  3824.,  3944.,  4064.,  3608.,
      3728.,  3848.,  3968.,  3256.,  3376.,  3496.,  10114., 10459., 10804.,
      11149., 10214., 10559., 10904., 11249., 10058., 10403., 10748., 11093.,
      9646.,  9991.,  10336., 16684., 17254., 17824., 18394., 16724., 17294.,
      17864., 18434., 16508., 17078., 17648., 18218., 16036., 16606., 17176.,
      23254., 24049., 24844., 25639., 23234., 24029., 24824., 25619., 22958.,
      23753., 24548., 25343., 22426., 23221., 24016., 7808.,  8124.,  8440.,
      8756.,  9008.,  9324.,  9640.,  9956.,  9952.,  10268., 10584., 10900.,
      10640., 10956., 11272., 8362.,  8647.,  8932.,  9217.,  8478.,  8763.,
      9048.,  9333.,  8338.,  8623.,  8908.,  9193.,  7942.,  8227.,  8512.,
      14932., 15442., 15952., 16462., 14988., 15498., 16008., 16518., 14788.,
      15298., 15808., 16318., 14332., 14842., 15352., 21502., 22237., 22972.,
      23707., 21498., 22233., 22968., 23703., 21238., 21973., 22708., 23443.,
      20722., 21457., 22192., 15144., 15656., 16168., 16680., 13288., 13800.,
      14312., 14824., 15272., 15784., 16296., 16808., 17000., 17512., 18024.,
      6610.,  6835.,  7060.,  7285.,  6742.,  6967.,  7192.,  7417.,  6618.,
      6843.,  7068.,  7293.,  6238.,  6463.,  6688.,  13180., 13630., 14080.,
      14530., 13252., 13702., 14152., 14602., 13068., 13518., 13968., 14418.,
      12628., 13078., 13528., 19750., 20425., 21100., 21775., 19762., 20437.,
      21112., 21787., 19518., 20193., 20868., 21543., 19018., 19693., 20368.,
      21456., 22164., 22872., 23580., 20640., 21348., 22056., 22764., 19568.,
      20276., 20984., 21692., 22336., 23044., 23752., 4858.,  5023.,  5188.,
      5353.,  5006.,  5171.,  5336.,  5501.,  4898.,  5063.,  5228.,  5393.,
      4534.,  4699.,  4864.,  11428., 11818., 12208., 12598., 11516., 11906.,
      12296., 12686., 11348., 11738., 12128., 12518., 10924., 11314., 11704.};
  const int batches = 1;
  const int m = 15;
  const int k = 15;
  const int n = 15;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M15xK15xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2936.,  3056.,  3176.,  3296.,  3416.,  3536.,  3656.,  3776.,  3896.,
      4016.,  4136.,  4256.,  4376.,  4496.,  4616.,  4736.,  8201.,  8546.,
      8891.,  9236.,  9581.,  9926.,  10271., 10616., 10961., 11306., 11651.,
      11996., 12341., 12686., 13031., 13376., 13466., 14036., 14606., 15176.,
      15746., 16316., 16886., 17456., 18026., 18596., 19166., 19736., 20306.,
      20876., 21446., 22016., 18731., 19526., 20321., 21116., 21911., 22706.,
      23501., 24296., 25091., 25886., 26681., 27476., 28271., 29066., 29861.,
      30656., 7932.,  8248.,  8564.,  8880.,  9196.,  9512.,  9828.,  10144.,
      10460., 10776., 11092., 11408., 11724., 12040., 12356., 12672., 6797.,
      7082.,  7367.,  7652.,  7937.,  8222.,  8507.,  8792.,  9077.,  9362.,
      9647.,  9932.,  10217., 10502., 10787., 11072., 12062., 12572., 13082.,
      13592., 14102., 14612., 15122., 15632., 16142., 16652., 17162., 17672.,
      18182., 18692., 19202., 19712., 17327., 18062., 18797., 19532., 20267.,
      21002., 21737., 22472., 23207., 23942., 24677., 25412., 26147., 26882.,
      27617., 28352., 12928., 13440., 13952., 14464., 14976., 15488., 16000.,
      16512., 17024., 17536., 18048., 18560., 19072., 19584., 20096., 20608.,
      5393.,  5618.,  5843.,  6068.,  6293.,  6518.,  6743.,  6968.,  7193.,
      7418.,  7643.,  7868.,  8093.,  8318.,  8543.,  8768.,  10658., 11108.,
      11558., 12008., 12458., 12908., 13358., 13808., 14258., 14708., 15158.,
      15608., 16058., 16508., 16958., 17408., 15923., 16598., 17273., 17948.,
      18623., 19298., 19973., 20648., 21323., 21998., 22673., 23348., 24023.,
      24698., 25373., 26048., 17924., 18632., 19340., 20048., 20756., 21464.,
      22172., 22880., 23588., 24296., 25004., 25712., 26420., 27128., 27836.,
      28544., 3989.,  4154.,  4319.,  4484.,  4649.,  4814.,  4979.,  5144.,
      5309.,  5474.,  5639.,  5804.,  5969.,  6134.,  6299.,  6464.,  9254.,
      9644.,  10034., 10424., 10814., 11204., 11594., 11984., 12374., 12764.,
      13154., 13544., 13934., 14324., 14714., 15104.};
  const int batches = 1;
  const int m = 15;
  const int k = 15;
  const int n = 16;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M15xK16xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4264.,  4400.,  3896.,  4032.,  4168.,  4304.,  4440.,  4576.,  4392.,
      4528.,  3768.,  3904.,  4040.,  4176.,  11944., 12336., 11064., 11456.,
      11848., 12240., 12632., 13024., 12072., 12464., 10936., 11328., 11720.,
      12112., 19624., 20272., 18232., 18880., 19528., 20176., 20824., 21472.,
      19752., 20400., 18104., 18752., 19400., 20048., 27304., 28208., 25400.,
      26304., 27208., 28112., 29016., 29920., 27432., 28336., 25272., 26176.,
      27080., 27984., 4264.,  4400.,  3896.,  4032.,  4168.,  4304.,  4440.,
      4576.,  4392.,  4528.,  3768.,  3904.,  4040.,  4176.,  11944., 12336.,
      11064., 11456., 11848., 12240., 12632., 13024., 12072., 12464., 10936.,
      11328., 11720., 12112., 19624., 20272., 18232., 18880., 19528., 20176.,
      20824., 21472., 19752., 20400., 18104., 18752., 19400., 20048., 27304.,
      28208., 25400., 26304., 27208., 28112., 29016., 29920., 27432., 28336.,
      25272., 26176., 27080., 27984., 4264.,  4400.,  3896.,  4032.,  4168.,
      4304.,  4440.,  4576.,  4392.,  4528.,  3768.,  3904.,  4040.,  4176.,
      11944., 12336., 11064., 11456., 11848., 12240., 12632., 13024., 12072.,
      12464., 10936., 11328., 11720., 12112., 19624., 20272., 18232., 18880.,
      19528., 20176., 20824., 21472., 19752., 20400., 18104., 18752., 19400.,
      20048., 27304., 28208., 25400., 26304., 27208., 28112., 29016., 29920.,
      27432., 28336., 25272., 26176., 27080., 27984., 4264.,  4400.,  3896.,
      4032.,  4168.,  4304.,  4440.,  4576.,  4392.,  4528.,  3768.,  3904.,
      4040.,  4176.,  11944., 12336., 11064., 11456., 11848., 12240., 12632.,
      13024., 12072., 12464., 10936., 11328., 11720., 12112., 19624., 20272.,
      18232., 18880., 19528., 20176., 20824., 21472., 19752., 20400., 18104.,
      18752., 19400., 20048.};
  const int batches = 1;
  const int m = 15;
  const int k = 16;
  const int n = 14;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M15xK16xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4088.,  4224.,  4360.,  4496.,  4312.,  4448.,  4584.,  4720.,  4280.,
      4416.,  4552.,  4688.,  3992.,  4128.,  4264.,  11640., 12032., 12424.,
      12816., 11864., 12256., 12648., 13040., 11832., 12224., 12616., 13008.,
      11544., 11936., 12328., 19192., 19840., 20488., 21136., 19416., 20064.,
      20712., 21360., 19384., 20032., 20680., 21328., 19096., 19744., 20392.,
      26744., 27648., 28552., 29456., 26968., 27872., 28776., 29680., 26936.,
      27840., 28744., 29648., 26648., 27552., 28456., 4088.,  4224.,  4360.,
      4496.,  4312.,  4448.,  4584.,  4720.,  4280.,  4416.,  4552.,  4688.,
      3992.,  4128.,  4264.,  11640., 12032., 12424., 12816., 11864., 12256.,
      12648., 13040., 11832., 12224., 12616., 13008., 11544., 11936., 12328.,
      19192., 19840., 20488., 21136., 19416., 20064., 20712., 21360., 19384.,
      20032., 20680., 21328., 19096., 19744., 20392., 26744., 27648., 28552.,
      29456., 26968., 27872., 28776., 29680., 26936., 27840., 28744., 29648.,
      26648., 27552., 28456., 4088.,  4224.,  4360.,  4496.,  4312.,  4448.,
      4584.,  4720.,  4280.,  4416.,  4552.,  4688.,  3992.,  4128.,  4264.,
      11640., 12032., 12424., 12816., 11864., 12256., 12648., 13040., 11832.,
      12224., 12616., 13008., 11544., 11936., 12328., 19192., 19840., 20488.,
      21136., 19416., 20064., 20712., 21360., 19384., 20032., 20680., 21328.,
      19096., 19744., 20392., 26744., 27648., 28552., 29456., 26968., 27872.,
      28776., 29680., 26936., 27840., 28744., 29648., 26648., 27552., 28456.,
      4088.,  4224.,  4360.,  4496.,  4312.,  4448.,  4584.,  4720.,  4280.,
      4416.,  4552.,  4688.,  3992.,  4128.,  4264.,  11640., 12032., 12424.,
      12816., 11864., 12256., 12648., 13040., 11832., 12224., 12616., 13008.,
      11544., 11936., 12328., 19192., 19840., 20488., 21136., 19416., 20064.,
      20712., 21360., 19384., 20032., 20680., 21328., 19096., 19744., 20392.};
  const int batches = 1;
  const int m = 15;
  const int k = 16;
  const int n = 15;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M15xK16xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3720.,  3856.,  3992.,  4128.,  4264.,  4400.,  4536.,  4672.,  4808.,
      4944.,  5080.,  5216.,  5352.,  5488.,  5624.,  5760.,  10120., 10512.,
      10904., 11296., 11688., 12080., 12472., 12864., 13256., 13648., 14040.,
      14432., 14824., 15216., 15608., 16000., 16520., 17168., 17816., 18464.,
      19112., 19760., 20408., 21056., 21704., 22352., 23000., 23648., 24296.,
      24944., 25592., 26240., 22920., 23824., 24728., 25632., 26536., 27440.,
      28344., 29248., 30152., 31056., 31960., 32864., 33768., 34672., 35576.,
      36480., 3720.,  3856.,  3992.,  4128.,  4264.,  4400.,  4536.,  4672.,
      4808.,  4944.,  5080.,  5216.,  5352.,  5488.,  5624.,  5760.,  10120.,
      10512., 10904., 11296., 11688., 12080., 12472., 12864., 13256., 13648.,
      14040., 14432., 14824., 15216., 15608., 16000., 16520., 17168., 17816.,
      18464., 19112., 19760., 20408., 21056., 21704., 22352., 23000., 23648.,
      24296., 24944., 25592., 26240., 22920., 23824., 24728., 25632., 26536.,
      27440., 28344., 29248., 30152., 31056., 31960., 32864., 33768., 34672.,
      35576., 36480., 3720.,  3856.,  3992.,  4128.,  4264.,  4400.,  4536.,
      4672.,  4808.,  4944.,  5080.,  5216.,  5352.,  5488.,  5624.,  5760.,
      10120., 10512., 10904., 11296., 11688., 12080., 12472., 12864., 13256.,
      13648., 14040., 14432., 14824., 15216., 15608., 16000., 16520., 17168.,
      17816., 18464., 19112., 19760., 20408., 21056., 21704., 22352., 23000.,
      23648., 24296., 24944., 25592., 26240., 22920., 23824., 24728., 25632.,
      26536., 27440., 28344., 29248., 30152., 31056., 31960., 32864., 33768.,
      34672., 35576., 36480., 3720.,  3856.,  3992.,  4128.,  4264.,  4400.,
      4536.,  4672.,  4808.,  4944.,  5080.,  5216.,  5352.,  5488.,  5624.,
      5760.,  10120., 10512., 10904., 11296., 11688., 12080., 12472., 12864.,
      13256., 13648., 14040., 14432., 14824., 15216., 15608., 16000., 16520.,
      17168., 17816., 18464., 19112., 19760., 20408., 21056., 21704., 22352.,
      23000., 23648., 24296., 24944., 25592., 26240.};
  const int batches = 1;
  const int m = 15;
  const int k = 16;
  const int n = 16;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M16xK14xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3885.,  3990.,  3455.,  3560.,  3665.,  3770.,  3875.,  3980.,  3765.,
      3870.,  3079.,  3184.,  3289.,  3394.,  10269., 10570., 9335.,  9636.,
      9937.,  10238., 10539., 10840., 9925.,  10226., 8735.,  9036.,  9337.,
      9638.,  16653., 17150., 15215., 15712., 16209., 16706., 17203., 17700.,
      16085., 16582., 14391., 14888., 15385., 15882., 23037., 23730., 21095.,
      21788., 22481., 23174., 23867., 24560., 22245., 22938., 20047., 20740.,
      21433., 22126., 13549., 14054., 14431., 14936., 15441., 15946., 16451.,
      16956., 13557., 14062., 14183., 14688., 15193., 15698., 6621.,  6810.,
      5975.,  6164.,  6353.,  6542.,  6731.,  6920.,  6405.,  6594.,  5503.,
      5692.,  5881.,  6070.,  13005., 13390., 11855., 12240., 12625., 13010.,
      13395., 13780., 12565., 12950., 11159., 11544., 11929., 12314., 19389.,
      19970., 17735., 18316., 18897., 19478., 20059., 20640., 18725., 19306.,
      16815., 17396., 17977., 18558., 25773., 26550., 23615., 24392., 25169.,
      25946., 26723., 27500., 24885., 25662., 22471., 23248., 24025., 24802.,
      3997.,  4202.,  3895.,  4100.,  4305.,  4510.,  4715.,  4920.,  4933.,
      5138.,  4575.,  4780.,  4985.,  5190.,  9357.,  9630.,  8495.,  8768.,
      9041.,  9314.,  9587.,  9860.,  9045.,  9318.,  7927.,  8200.,  8473.,
      8746.,  15741., 16210., 14375., 14844., 15313., 15782., 16251., 16720.,
      15205., 15674., 13583., 14052., 14521., 14990., 22125., 22790., 20255.,
      20920., 21585., 22250., 22915., 23580., 21365., 22030., 19239., 19904.,
      20569., 21234., 19805., 20410., 16919., 17524., 18129., 18734., 19339.,
      19944., 16773., 17378., 17727., 18332., 18937., 19542., 5709.,  5870.,
      5135.,  5296.,  5457.,  5618.,  5779.,  5940.,  5525.,  5686.,  4695.,
      4856.,  5017.,  5178.,  12093., 12450., 11015., 11372., 11729., 12086.,
      12443., 12800., 11685., 12042., 10351., 10708., 11065., 11422.};
  const int batches = 1;
  const int m = 16;
  const int k = 14;
  const int n = 14;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M16xK14xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3259.,  3364.,  3469.,  3574.,  3359.,  3464.,  3569.,  3674.,  3203.,
      3308.,  3413.,  3518.,  2791.,  2896.,  3001.,  9125.,  9426.,  9727.,
      10028., 9113.,  9414.,  9715.,  10016., 8845.,  9146.,  9447.,  9748.,
      8321.,  8622.,  8923.,  14991., 15488., 15985., 16482., 14867., 15364.,
      15861., 16358., 14487., 14984., 15481., 15978., 13851., 14348., 14845.,
      20857., 21550., 22243., 22936., 20621., 21314., 22007., 22700., 20129.,
      20822., 21515., 22208., 19381., 20074., 20767., 15011., 15516., 16021.,
      16526., 13127., 13632., 14137., 14642., 15083., 15588., 16093., 16598.,
      16783., 17288., 17793., 5773.,  5962.,  6151.,  6340.,  5825.,  6014.,
      6203.,  6392.,  5621.,  5810.,  5999.,  6188.,  5161.,  5350.,  5539.,
      11639., 12024., 12409., 12794., 11579., 11964., 12349., 12734., 11263.,
      11648., 12033., 12418., 10691., 11076., 11461., 17505., 18086., 18667.,
      19248., 17333., 17914., 18495., 19076., 16905., 17486., 18067., 18648.,
      16221., 16802., 17383., 23371., 24148., 24925., 25702., 23087., 23864.,
      24641., 25418., 22547., 23324., 24101., 24878., 21751., 22528., 23305.,
      3509.,  3714.,  3919.,  4124.,  4137.,  4342.,  4547.,  4752.,  4509.,
      4714.,  4919.,  5124.,  4625.,  4830.,  5035.,  8287.,  8560.,  8833.,
      9106.,  8291.,  8564.,  8837.,  9110.,  8039.,  8312.,  8585.,  8858.,
      7531.,  7804.,  8077.,  14153., 14622., 15091., 15560., 14045., 14514.,
      14983., 15452., 13681., 14150., 14619., 15088., 13061., 13530., 13999.,
      20019., 20684., 21349., 22014., 19799., 20464., 21129., 21794., 19323.,
      19988., 20653., 21318., 18591., 19256., 19921., 18333., 18938., 19543.,
      20148., 16977., 17582., 18187., 18792., 15365., 15970., 16575., 17180.,
      17593., 18198., 18803., 4935.,  5096.,  5257.,  5418.,  5003.,  5164.,
      5325.,  5486.,  4815.,  4976.,  5137.,  5298.,  4371.,  4532.,  4693.,
      10801., 11158., 11515., 11872., 10757., 11114., 11471., 11828., 10457.,
      10814., 11171., 11528., 9901.,  10258., 10615.};
  const int batches = 1;
  const int m = 16;
  const int k = 14;
  const int n = 15;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M16xK14xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2441.,  2546.,  2651.,  2756.,  2861.,  2966.,  3071.,  3176.,  3281.,
      3386.,  3491.,  3596.,  3701.,  3806.,  3911.,  4016.,  6893.,  7194.,
      7495.,  7796.,  8097.,  8398.,  8699.,  9000.,  9301.,  9602.,  9903.,
      10204., 10505., 10806., 11107., 11408., 11345., 11842., 12339., 12836.,
      13333., 13830., 14327., 14824., 15321., 15818., 16315., 16812., 17309.,
      17806., 18303., 18800., 15797., 16490., 17183., 17876., 18569., 19262.,
      19955., 20648., 21341., 22034., 22727., 23420., 24113., 24806., 25499.,
      26192., 12697., 13202., 13707., 14212., 14717., 15222., 15727., 16232.,
      16737., 17242., 17747., 18252., 18757., 19262., 19767., 20272., 4349.,
      4538.,  4727.,  4916.,  5105.,  5294.,  5483.,  5672.,  5861.,  6050.,
      6239.,  6428.,  6617.,  6806.,  6995.,  7184.,  8801.,  9186.,  9571.,
      9956.,  10341., 10726., 11111., 11496., 11881., 12266., 12651., 13036.,
      13421., 13806., 14191., 14576., 13253., 13834., 14415., 14996., 15577.,
      16158., 16739., 17320., 17901., 18482., 19063., 19644., 20225., 20806.,
      21387., 21968., 17705., 18482., 19259., 20036., 20813., 21590., 22367.,
      23144., 23921., 24698., 25475., 26252., 27029., 27806., 28583., 29360.,
      2957.,  3162.,  3367.,  3572.,  3777.,  3982.,  4187.,  4392.,  4597.,
      4802.,  5007.,  5212.,  5417.,  5622.,  5827.,  6032.,  6257.,  6530.,
      6803.,  7076.,  7349.,  7622.,  7895.,  8168.,  8441.,  8714.,  8987.,
      9260.,  9533.,  9806.,  10079., 10352., 10709., 11178., 11647., 12116.,
      12585., 13054., 13523., 13992., 14461., 14930., 15399., 15868., 16337.,
      16806., 17275., 17744., 15161., 15826., 16491., 17156., 17821., 18486.,
      19151., 19816., 20481., 21146., 21811., 22476., 23141., 23806., 24471.,
      25136., 13213., 13818., 14423., 15028., 15633., 16238., 16843., 17448.,
      18053., 18658., 19263., 19868., 20473., 21078., 21683., 22288., 3713.,
      3874.,  4035.,  4196.,  4357.,  4518.,  4679.,  4840.,  5001.,  5162.,
      5323.,  5484.,  5645.,  5806.,  5967.,  6128.,  8165.,  8522.,  8879.,
      9236.,  9593.,  9950.,  10307., 10664., 11021., 11378., 11735., 12092.,
      12449., 12806., 13163., 13520.};
  const int batches = 1;
  const int m = 16;
  const int k = 14;
  const int n = 16;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M16xK15xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3960.,  4080.,  3560.,  3680.,  3800.,  3920.,  4040.,  4160.,  3960.,
      4080.,  3304.,  3424.,  3544.,  3664.,  10875., 11220., 9965.,  10310.,
      10655., 11000., 11345., 11690., 10755., 11100., 9589.,  9934.,  10279.,
      10624., 17790., 18360., 16370., 16940., 17510., 18080., 18650., 19220.,
      17550., 18120., 15874., 16444., 17014., 17584., 24705., 25500., 22775.,
      23570., 24365., 25160., 25955., 26750., 24345., 25140., 22159., 22954.,
      23749., 24544., 7748.,  8064.,  7996.,  8312.,  8628.,  8944.,  9260.,
      9576.,  9828.,  10144., 9820.,  10136., 10452., 10768., 9031.,  9316.,
      8257.,  8542.,  8827.,  9112.,  9397.,  9682.,  8943.,  9228.,  7913.,
      8198.,  8483.,  8768.,  15946., 16456., 14662., 15172., 15682., 16192.,
      16702., 17212., 15738., 16248., 14198., 14708., 15218., 15728., 22861.,
      23596., 21067., 21802., 22537., 23272., 24007., 24742., 22533., 23268.,
      20483., 21218., 21953., 22688., 13584., 14096., 14480., 14992., 15504.,
      16016., 16528., 17040., 13648., 14160., 14288., 14800., 15312., 15824.,
      7187.,  7412.,  6549.,  6774.,  6999.,  7224.,  7449.,  7674.,  7131.,
      7356.,  6237.,  6462.,  6687.,  6912.,  14102., 14552., 12954., 13404.,
      13854., 14304., 14754., 15204., 13926., 14376., 12522., 12972., 13422.,
      13872., 21017., 21692., 19359., 20034., 20709., 21384., 22059., 22734.,
      20721., 21396., 18807., 19482., 20157., 20832., 21468., 22176., 18916.,
      19624., 20332., 21040., 21748., 22456., 19516., 20224., 20804., 21512.,
      22220., 22928., 5343.,  5508.,  4841.,  5006.,  5171.,  5336.,  5501.,
      5666.,  5319.,  5484.,  4561.,  4726.,  4891.,  5056.,  12258., 12648.,
      11246., 11636., 12026., 12416., 12806., 13196., 12114., 12504., 10846.,
      11236., 11626., 12016., 19173., 19788., 17651., 18266., 18881., 19496.,
      20111., 20726., 18909., 19524., 17131., 17746., 18361., 18976.};
  const int batches = 1;
  const int m = 16;
  const int k = 15;
  const int n = 14;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M16xK15xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3544.,  3664.,  3784.,  3904.,  3704.,  3824.,  3944.,  4064.,  3608.,
      3728.,  3848.,  3968.,  3256.,  3376.,  3496.,  10114., 10459., 10804.,
      11149., 10214., 10559., 10904., 11249., 10058., 10403., 10748., 11093.,
      9646.,  9991.,  10336., 16684., 17254., 17824., 18394., 16724., 17294.,
      17864., 18434., 16508., 17078., 17648., 18218., 16036., 16606., 17176.,
      23254., 24049., 24844., 25639., 23234., 24029., 24824., 25619., 22958.,
      23753., 24548., 25343., 22426., 23221., 24016., 7808.,  8124.,  8440.,
      8756.,  9008.,  9324.,  9640.,  9956.,  9952.,  10268., 10584., 10900.,
      10640., 10956., 11272., 8362.,  8647.,  8932.,  9217.,  8478.,  8763.,
      9048.,  9333.,  8338.,  8623.,  8908.,  9193.,  7942.,  8227.,  8512.,
      14932., 15442., 15952., 16462., 14988., 15498., 16008., 16518., 14788.,
      15298., 15808., 16318., 14332., 14842., 15352., 21502., 22237., 22972.,
      23707., 21498., 22233., 22968., 23703., 21238., 21973., 22708., 23443.,
      20722., 21457., 22192., 15144., 15656., 16168., 16680., 13288., 13800.,
      14312., 14824., 15272., 15784., 16296., 16808., 17000., 17512., 18024.,
      6610.,  6835.,  7060.,  7285.,  6742.,  6967.,  7192.,  7417.,  6618.,
      6843.,  7068.,  7293.,  6238.,  6463.,  6688.,  13180., 13630., 14080.,
      14530., 13252., 13702., 14152., 14602., 13068., 13518., 13968., 14418.,
      12628., 13078., 13528., 19750., 20425., 21100., 21775., 19762., 20437.,
      21112., 21787., 19518., 20193., 20868., 21543., 19018., 19693., 20368.,
      21456., 22164., 22872., 23580., 20640., 21348., 22056., 22764., 19568.,
      20276., 20984., 21692., 22336., 23044., 23752., 4858.,  5023.,  5188.,
      5353.,  5006.,  5171.,  5336.,  5501.,  4898.,  5063.,  5228.,  5393.,
      4534.,  4699.,  4864.,  11428., 11818., 12208., 12598., 11516., 11906.,
      12296., 12686., 11348., 11738., 12128., 12518., 10924., 11314., 11704.,
      17998., 18613., 19228., 19843., 18026., 18641., 19256., 19871., 17798.,
      18413., 19028., 19643., 17314., 17929., 18544.};
  const int batches = 1;
  const int m = 16;
  const int k = 15;
  const int n = 15;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M16xK15xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2936.,  3056.,  3176.,  3296.,  3416.,  3536.,  3656.,  3776.,  3896.,
      4016.,  4136.,  4256.,  4376.,  4496.,  4616.,  4736.,  8201.,  8546.,
      8891.,  9236.,  9581.,  9926.,  10271., 10616., 10961., 11306., 11651.,
      11996., 12341., 12686., 13031., 13376., 13466., 14036., 14606., 15176.,
      15746., 16316., 16886., 17456., 18026., 18596., 19166., 19736., 20306.,
      20876., 21446., 22016., 18731., 19526., 20321., 21116., 21911., 22706.,
      23501., 24296., 25091., 25886., 26681., 27476., 28271., 29066., 29861.,
      30656., 7932.,  8248.,  8564.,  8880.,  9196.,  9512.,  9828.,  10144.,
      10460., 10776., 11092., 11408., 11724., 12040., 12356., 12672., 6797.,
      7082.,  7367.,  7652.,  7937.,  8222.,  8507.,  8792.,  9077.,  9362.,
      9647.,  9932.,  10217., 10502., 10787., 11072., 12062., 12572., 13082.,
      13592., 14102., 14612., 15122., 15632., 16142., 16652., 17162., 17672.,
      18182., 18692., 19202., 19712., 17327., 18062., 18797., 19532., 20267.,
      21002., 21737., 22472., 23207., 23942., 24677., 25412., 26147., 26882.,
      27617., 28352., 12928., 13440., 13952., 14464., 14976., 15488., 16000.,
      16512., 17024., 17536., 18048., 18560., 19072., 19584., 20096., 20608.,
      5393.,  5618.,  5843.,  6068.,  6293.,  6518.,  6743.,  6968.,  7193.,
      7418.,  7643.,  7868.,  8093.,  8318.,  8543.,  8768.,  10658., 11108.,
      11558., 12008., 12458., 12908., 13358., 13808., 14258., 14708., 15158.,
      15608., 16058., 16508., 16958., 17408., 15923., 16598., 17273., 17948.,
      18623., 19298., 19973., 20648., 21323., 21998., 22673., 23348., 24023.,
      24698., 25373., 26048., 17924., 18632., 19340., 20048., 20756., 21464.,
      22172., 22880., 23588., 24296., 25004., 25712., 26420., 27128., 27836.,
      28544., 3989.,  4154.,  4319.,  4484.,  4649.,  4814.,  4979.,  5144.,
      5309.,  5474.,  5639.,  5804.,  5969.,  6134.,  6299.,  6464.,  9254.,
      9644.,  10034., 10424., 10814., 11204., 11594., 11984., 12374., 12764.,
      13154., 13544., 13934., 14324., 14714., 15104., 14519., 15134., 15749.,
      16364., 16979., 17594., 18209., 18824., 19439., 20054., 20669., 21284.,
      21899., 22514., 23129., 23744.};
  const int batches = 1;
  const int m = 16;
  const int k = 15;
  const int n = 16;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M16xK16xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4264.,  4400.,  3896.,  4032.,  4168.,  4304.,  4440.,  4576.,  4392.,
      4528.,  3768.,  3904.,  4040.,  4176.,  11944., 12336., 11064., 11456.,
      11848., 12240., 12632., 13024., 12072., 12464., 10936., 11328., 11720.,
      12112., 19624., 20272., 18232., 18880., 19528., 20176., 20824., 21472.,
      19752., 20400., 18104., 18752., 19400., 20048., 27304., 28208., 25400.,
      26304., 27208., 28112., 29016., 29920., 27432., 28336., 25272., 26176.,
      27080., 27984., 4264.,  4400.,  3896.,  4032.,  4168.,  4304.,  4440.,
      4576.,  4392.,  4528.,  3768.,  3904.,  4040.,  4176.,  11944., 12336.,
      11064., 11456., 11848., 12240., 12632., 13024., 12072., 12464., 10936.,
      11328., 11720., 12112., 19624., 20272., 18232., 18880., 19528., 20176.,
      20824., 21472., 19752., 20400., 18104., 18752., 19400., 20048., 27304.,
      28208., 25400., 26304., 27208., 28112., 29016., 29920., 27432., 28336.,
      25272., 26176., 27080., 27984., 4264.,  4400.,  3896.,  4032.,  4168.,
      4304.,  4440.,  4576.,  4392.,  4528.,  3768.,  3904.,  4040.,  4176.,
      11944., 12336., 11064., 11456., 11848., 12240., 12632., 13024., 12072.,
      12464., 10936., 11328., 11720., 12112., 19624., 20272., 18232., 18880.,
      19528., 20176., 20824., 21472., 19752., 20400., 18104., 18752., 19400.,
      20048., 27304., 28208., 25400., 26304., 27208., 28112., 29016., 29920.,
      27432., 28336., 25272., 26176., 27080., 27984., 4264.,  4400.,  3896.,
      4032.,  4168.,  4304.,  4440.,  4576.,  4392.,  4528.,  3768.,  3904.,
      4040.,  4176.,  11944., 12336., 11064., 11456., 11848., 12240., 12632.,
      13024., 12072., 12464., 10936., 11328., 11720., 12112., 19624., 20272.,
      18232., 18880., 19528., 20176., 20824., 21472., 19752., 20400., 18104.,
      18752., 19400., 20048., 27304., 28208., 25400., 26304., 27208., 28112.,
      29016., 29920., 27432., 28336., 25272., 26176., 27080., 27984.};
  const int batches = 1;
  const int m = 16;
  const int k = 16;
  const int n = 14;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M16xK16xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4088.,  4224.,  4360.,  4496.,  4312.,  4448.,  4584.,  4720.,  4280.,
      4416.,  4552.,  4688.,  3992.,  4128.,  4264.,  11640., 12032., 12424.,
      12816., 11864., 12256., 12648., 13040., 11832., 12224., 12616., 13008.,
      11544., 11936., 12328., 19192., 19840., 20488., 21136., 19416., 20064.,
      20712., 21360., 19384., 20032., 20680., 21328., 19096., 19744., 20392.,
      26744., 27648., 28552., 29456., 26968., 27872., 28776., 29680., 26936.,
      27840., 28744., 29648., 26648., 27552., 28456., 4088.,  4224.,  4360.,
      4496.,  4312.,  4448.,  4584.,  4720.,  4280.,  4416.,  4552.,  4688.,
      3992.,  4128.,  4264.,  11640., 12032., 12424., 12816., 11864., 12256.,
      12648., 13040., 11832., 12224., 12616., 13008., 11544., 11936., 12328.,
      19192., 19840., 20488., 21136., 19416., 20064., 20712., 21360., 19384.,
      20032., 20680., 21328., 19096., 19744., 20392., 26744., 27648., 28552.,
      29456., 26968., 27872., 28776., 29680., 26936., 27840., 28744., 29648.,
      26648., 27552., 28456., 4088.,  4224.,  4360.,  4496.,  4312.,  4448.,
      4584.,  4720.,  4280.,  4416.,  4552.,  4688.,  3992.,  4128.,  4264.,
      11640., 12032., 12424., 12816., 11864., 12256., 12648., 13040., 11832.,
      12224., 12616., 13008., 11544., 11936., 12328., 19192., 19840., 20488.,
      21136., 19416., 20064., 20712., 21360., 19384., 20032., 20680., 21328.,
      19096., 19744., 20392., 26744., 27648., 28552., 29456., 26968., 27872.,
      28776., 29680., 26936., 27840., 28744., 29648., 26648., 27552., 28456.,
      4088.,  4224.,  4360.,  4496.,  4312.,  4448.,  4584.,  4720.,  4280.,
      4416.,  4552.,  4688.,  3992.,  4128.,  4264.,  11640., 12032., 12424.,
      12816., 11864., 12256., 12648., 13040., 11832., 12224., 12616., 13008.,
      11544., 11936., 12328., 19192., 19840., 20488., 21136., 19416., 20064.,
      20712., 21360., 19384., 20032., 20680., 21328., 19096., 19744., 20392.,
      26744., 27648., 28552., 29456., 26968., 27872., 28776., 29680., 26936.,
      27840., 28744., 29648., 26648., 27552., 28456.};
  const int batches = 1;
  const int m = 16;
  const int k = 16;
  const int n = 15;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseFalse, M16xK16xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3720.,  3856.,  3992.,  4128.,  4264.,  4400.,  4536.,  4672.,  4808.,
      4944.,  5080.,  5216.,  5352.,  5488.,  5624.,  5760.,  10120., 10512.,
      10904., 11296., 11688., 12080., 12472., 12864., 13256., 13648., 14040.,
      14432., 14824., 15216., 15608., 16000., 16520., 17168., 17816., 18464.,
      19112., 19760., 20408., 21056., 21704., 22352., 23000., 23648., 24296.,
      24944., 25592., 26240., 22920., 23824., 24728., 25632., 26536., 27440.,
      28344., 29248., 30152., 31056., 31960., 32864., 33768., 34672., 35576.,
      36480., 3720.,  3856.,  3992.,  4128.,  4264.,  4400.,  4536.,  4672.,
      4808.,  4944.,  5080.,  5216.,  5352.,  5488.,  5624.,  5760.,  10120.,
      10512., 10904., 11296., 11688., 12080., 12472., 12864., 13256., 13648.,
      14040., 14432., 14824., 15216., 15608., 16000., 16520., 17168., 17816.,
      18464., 19112., 19760., 20408., 21056., 21704., 22352., 23000., 23648.,
      24296., 24944., 25592., 26240., 22920., 23824., 24728., 25632., 26536.,
      27440., 28344., 29248., 30152., 31056., 31960., 32864., 33768., 34672.,
      35576., 36480., 3720.,  3856.,  3992.,  4128.,  4264.,  4400.,  4536.,
      4672.,  4808.,  4944.,  5080.,  5216.,  5352.,  5488.,  5624.,  5760.,
      10120., 10512., 10904., 11296., 11688., 12080., 12472., 12864., 13256.,
      13648., 14040., 14432., 14824., 15216., 15608., 16000., 16520., 17168.,
      17816., 18464., 19112., 19760., 20408., 21056., 21704., 22352., 23000.,
      23648., 24296., 24944., 25592., 26240., 22920., 23824., 24728., 25632.,
      26536., 27440., 28344., 29248., 30152., 31056., 31960., 32864., 33768.,
      34672., 35576., 36480., 3720.,  3856.,  3992.,  4128.,  4264.,  4400.,
      4536.,  4672.,  4808.,  4944.,  5080.,  5216.,  5352.,  5488.,  5624.,
      5760.,  10120., 10512., 10904., 11296., 11688., 12080., 12472., 12864.,
      13256., 13648., 14040., 14432., 14824., 15216., 15608., 16000., 16520.,
      17168., 17816., 18464., 19112., 19760., 20408., 21056., 21704., 22352.,
      23000., 23648., 24296., 24944., 25592., 26240., 22920., 23824., 24728.,
      25632., 26536., 27440., 28344., 29248., 30152., 31056., 31960., 32864.,
      33768., 34672., 35576., 36480.};
  const int batches = 1;
  const int m = 16;
  const int k = 16;
  const int n = 16;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}