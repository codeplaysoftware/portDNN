/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_matmul_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>
#include <vector>

#include "test/matmul/fixture.h"
#include "test/types/kernel_data_types.h"
#include "test/types/to_gtest_types.h"

using DataTypeList = sycldnn::types::KernelDataTypes;
using GTestTypeList = sycldnn::types::ToGTestTypes<DataTypeList>::type;

template <typename DataType>
using MatmulBatch1Beta0FalseTrue = MatmulFixture<DataType, false, true>;
TYPED_TEST_SUITE(MatmulBatch1Beta0FalseTrue, GTestTypeList);
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M14xK14xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1015.,  2485.,  3955.,  5425.,  2479.,  1645.,  3115.,  4585.,  6055.,
      997.,   2275.,  3745.,  5215.,  3485.,  2485.,  6699.,  10913., 15127.,
      9549.,  4291.,  8505.,  12719., 16933., 3867.,  6097.,  10311., 14525.,
      11955., 3955.,  10913., 17871., 24829., 16619., 6937.,  13895., 20853.,
      27811., 6737.,  9919.,  16877., 23835., 20425., 5425.,  15127., 24829.,
      34531., 23689., 9583.,  19285., 28987., 38689., 9607.,  13741., 23443.,
      33145., 28895., 2479.,  9549.,  16619., 23689., 29415., 5509.,  12579.,
      19649., 26719., 8829.,  8539.,  15609., 22679., 28597., 1645.,  4291.,
      6937.,  9583.,  5509.,  2779.,  5425.,  8071.,  10717., 2227.,  3913.,
      6559.,  9205.,  7115.,  3115.,  8505.,  13895., 19285., 12579., 5425.,
      10815., 16205., 21595., 5097.,  7735.,  13125., 18515., 15585., 4585.,
      12719., 20853., 28987., 19649., 8071.,  16205., 24339., 32473., 7967.,
      11557., 19691., 27825., 24055., 6055.,  16933., 27811., 38689., 26719.,
      10717., 21595., 32473., 43351., 10837., 15379., 26257., 37135., 32525.,
      997.,   3867.,  6737.,  9607.,  8829.,  2227.,  5097.,  7967.,  10837.,
      8715.,  3457.,  6327.,  9197.,  9379.,  2275.,  6097.,  9919.,  13741.,
      8539.,  3913.,  7735.,  11557., 15379., 3457.,  5551.,  9373.,  13195.,
      10745., 3745.,  10311., 16877., 23443., 15609., 6559.,  13125., 19691.,
      26257., 6327.,  9373.,  15939., 22505., 19215., 5215.,  14525., 23835.,
      33145., 22679., 9205.,  18515., 27825., 37135., 9197.,  13195., 22505.,
      31815., 27685., 3485.,  11955., 20425., 28895., 28597., 7115.,  15585.,
      24055., 32525., 9379.,  10745., 19215., 27685., 35515.};
  const int batches = 1;
  const int m = 14;
  const int k = 14;
  const int n = 14;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M14xK14xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1015.,  2485.,  3955.,  5425.,  2479.,  1645.,  3115.,  4585.,  6055.,
      997.,   2275.,  3745.,  5215.,  3485.,  1435.,  2485.,  6699.,  10913.,
      15127., 9549.,  4291.,  8505.,  12719., 16933., 3867.,  6097.,  10311.,
      14525., 11955., 3689.,  3955.,  10913., 17871., 24829., 16619., 6937.,
      13895., 20853., 27811., 6737.,  9919.,  16877., 23835., 20425., 5943.,
      5425.,  15127., 24829., 34531., 23689., 9583.,  19285., 28987., 38689.,
      9607.,  13741., 23443., 33145., 28895., 8197.,  2479.,  9549.,  16619.,
      23689., 29415., 5509.,  12579., 19649., 26719., 8829.,  8539.,  15609.,
      22679., 28597., 4499.,  1645.,  4291.,  6937.,  9583.,  5509.,  2779.,
      5425.,  8071.,  10717., 2227.,  3913.,  6559.,  9205.,  7115.,  2401.,
      3115.,  8505.,  13895., 19285., 12579., 5425.,  10815., 16205., 21595.,
      5097.,  7735.,  13125., 18515., 15585., 4655.,  4585.,  12719., 20853.,
      28987., 19649., 8071.,  16205., 24339., 32473., 7967.,  11557., 19691.,
      27825., 24055., 6909.,  6055.,  16933., 27811., 38689., 26719., 10717.,
      21595., 32473., 43351., 10837., 15379., 26257., 37135., 32525., 9163.,
      997.,   3867.,  6737.,  9607.,  8829.,  2227.,  5097.,  7967.,  10837.,
      8715.,  3457.,  6327.,  9197.,  9379.,  1817.,  2275.,  6097.,  9919.,
      13741., 8539.,  3913.,  7735.,  11557., 15379., 3457.,  5551.,  9373.,
      13195., 10745., 3367.,  3745.,  10311., 16877., 23443., 15609., 6559.,
      13125., 19691., 26257., 6327.,  9373.,  15939., 22505., 19215., 5621.,
      5215.,  14525., 23835., 33145., 22679., 9205.,  18515., 27825., 37135.,
      9197.,  13195., 22505., 31815., 27685., 7875.,  3485.,  11955., 20425.,
      28895., 28597., 7115.,  15585., 24055., 32525., 9379.,  10745., 19215.,
      27685., 35515., 5905.};
  const int batches = 1;
  const int m = 14;
  const int k = 14;
  const int n = 15;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M14xK14xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1015.,  2485.,  3955.,  5425.,  2479.,  1645.,  3115.,  4585.,  6055.,
      997.,   2275.,  3745.,  5215.,  3485.,  1435.,  2905.,  2485.,  6699.,
      10913., 15127., 9549.,  4291.,  8505.,  12719., 16933., 3867.,  6097.,
      10311., 14525., 11955., 3689.,  7903.,  3955.,  10913., 17871., 24829.,
      16619., 6937.,  13895., 20853., 27811., 6737.,  9919.,  16877., 23835.,
      20425., 5943.,  12901., 5425.,  15127., 24829., 34531., 23689., 9583.,
      19285., 28987., 38689., 9607.,  13741., 23443., 33145., 28895., 8197.,
      17899., 2479.,  9549.,  16619., 23689., 29415., 5509.,  12579., 19649.,
      26719., 8829.,  8539.,  15609., 22679., 28597., 4499.,  11569., 1645.,
      4291.,  6937.,  9583.,  5509.,  2779.,  5425.,  8071.,  10717., 2227.,
      3913.,  6559.,  9205.,  7115.,  2401.,  5047.,  3115.,  8505.,  13895.,
      19285., 12579., 5425.,  10815., 16205., 21595., 5097.,  7735.,  13125.,
      18515., 15585., 4655.,  10045., 4585.,  12719., 20853., 28987., 19649.,
      8071.,  16205., 24339., 32473., 7967.,  11557., 19691., 27825., 24055.,
      6909.,  15043., 6055.,  16933., 27811., 38689., 26719., 10717., 21595.,
      32473., 43351., 10837., 15379., 26257., 37135., 32525., 9163.,  20041.,
      997.,   3867.,  6737.,  9607.,  8829.,  2227.,  5097.,  7967.,  10837.,
      8715.,  3457.,  6327.,  9197.,  9379.,  1817.,  4687.,  2275.,  6097.,
      9919.,  13741., 8539.,  3913.,  7735.,  11557., 15379., 3457.,  5551.,
      9373.,  13195., 10745., 3367.,  7189.,  3745.,  10311., 16877., 23443.,
      15609., 6559.,  13125., 19691., 26257., 6327.,  9373.,  15939., 22505.,
      19215., 5621.,  12187., 5215.,  14525., 23835., 33145., 22679., 9205.,
      18515., 27825., 37135., 9197.,  13195., 22505., 31815., 27685., 7875.,
      17185., 3485.,  11955., 20425., 28895., 28597., 7115.,  15585., 24055.,
      32525., 9379.,  10745., 19215., 27685., 35515., 5905.,  14375.};
  const int batches = 1;
  const int m = 14;
  const int k = 14;
  const int n = 16;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M14xK15xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1240.,  3040.,  4840.,  6640.,  1400.,  2560.,  4360.,  6160.,  2584.,
      2080.,  3880.,  5680.,  4792.,  1600.,  3040.,  8215.,  13390., 18565.,
      6140.,  6835.,  12010., 17185., 10264., 5455.,  10630., 15805., 15412.,
      4075.,  4840.,  13390., 21940., 30490., 10880., 11110., 19660., 28210.,
      17944., 8830.,  17380., 25930., 26032., 6550.,  6640.,  18565., 30490.,
      42415., 15620., 15385., 27310., 39235., 25624., 12205., 24130., 36055.,
      36652., 9025.,  1400.,  6140.,  10880., 15620., 16136., 4876.,  9616.,
      14356., 15512., 3612.,  8352.,  13092., 15912., 2348.,  2560.,  6835.,
      11110., 15385., 4876.,  5695.,  9970.,  14245., 8216.,  4555.,  8830.,
      13105., 12580., 3415.,  4360.,  12010., 19660., 27310., 9616.,  9970.,
      17620., 25270., 15896., 7930.,  15580., 23230., 23200., 5890.,  6160.,
      17185., 28210., 39235., 14356., 14245., 25270., 36295., 23576., 11305.,
      22330., 33355., 33820., 8365.,  2584.,  10264., 17944., 25624., 15512.,
      8216.,  15896., 23576., 29464., 6168.,  13848., 21528., 28056., 4120.,
      2080.,  5455.,  8830.,  12205., 3612.,  4555.,  7930.,  11305., 6168.,
      3655.,  7030.,  10405., 9748.,  2755.,  3880.,  10630., 17380., 24130.,
      8352.,  8830.,  15580., 22330., 13848., 7030.,  13780., 20530., 20368.,
      5230.,  5680.,  15805., 25930., 36055., 13092., 13105., 23230., 33355.,
      21528., 10405., 20530., 30655., 30988., 7705.,  4792.,  15412., 26032.,
      36652., 15912., 12580., 23200., 33820., 28056., 9748.,  20368., 30988.,
      41224., 6916.,  1600.,  4075.,  6550.,  9025.,  2348.,  3415.,  5890.,
      8365.,  4120.,  2755.,  5230.,  7705.,  6916.,  2095.};
  const int batches = 1;
  const int m = 14;
  const int k = 15;
  const int n = 14;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M14xK15xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1240.,  3040.,  4840.,  6640.,  1400.,  2560.,  4360.,  6160.,  2584.,
      2080.,  3880.,  5680.,  4792.,  1600.,  3400.,  3040.,  8215.,  13390.,
      18565., 6140.,  6835.,  12010., 17185., 10264., 5455.,  10630., 15805.,
      15412., 4075.,  9250.,  4840.,  13390., 21940., 30490., 10880., 11110.,
      19660., 28210., 17944., 8830.,  17380., 25930., 26032., 6550.,  15100.,
      6640.,  18565., 30490., 42415., 15620., 15385., 27310., 39235., 25624.,
      12205., 24130., 36055., 36652., 9025.,  20950., 1400.,  6140.,  10880.,
      15620., 16136., 4876.,  9616.,  14356., 15512., 3612.,  8352.,  13092.,
      15912., 2348.,  7088.,  2560.,  6835.,  11110., 15385., 4876.,  5695.,
      9970.,  14245., 8216.,  4555.,  8830.,  13105., 12580., 3415.,  7690.,
      4360.,  12010., 19660., 27310., 9616.,  9970.,  17620., 25270., 15896.,
      7930.,  15580., 23230., 23200., 5890.,  13540., 6160.,  17185., 28210.,
      39235., 14356., 14245., 25270., 36295., 23576., 11305., 22330., 33355.,
      33820., 8365.,  19390., 2584.,  10264., 17944., 25624., 15512., 8216.,
      15896., 23576., 29464., 6168.,  13848., 21528., 28056., 4120.,  11800.,
      2080.,  5455.,  8830.,  12205., 3612.,  4555.,  7930.,  11305., 6168.,
      3655.,  7030.,  10405., 9748.,  2755.,  6130.,  3880.,  10630., 17380.,
      24130., 8352.,  8830.,  15580., 22330., 13848., 7030.,  13780., 20530.,
      20368., 5230.,  11980., 5680.,  15805., 25930., 36055., 13092., 13105.,
      23230., 33355., 21528., 10405., 20530., 30655., 30988., 7705.,  17830.,
      4792.,  15412., 26032., 36652., 15912., 12580., 23200., 33820., 28056.,
      9748.,  20368., 30988., 41224., 6916.,  17536., 1600.,  4075.,  6550.,
      9025.,  2348.,  3415.,  5890.,  8365.,  4120.,  2755.,  5230.,  7705.,
      6916.,  2095.,  4570.};
  const int batches = 1;
  const int m = 14;
  const int k = 15;
  const int n = 15;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M14xK15xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1240.,  3040.,  4840.,  6640.,  1400.,  2560.,  4360.,  6160.,  2584.,
      2080.,  3880.,  5680.,  4792.,  1600.,  3400.,  5200.,  3040.,  8215.,
      13390., 18565., 6140.,  6835.,  12010., 17185., 10264., 5455.,  10630.,
      15805., 15412., 4075.,  9250.,  14425., 4840.,  13390., 21940., 30490.,
      10880., 11110., 19660., 28210., 17944., 8830.,  17380., 25930., 26032.,
      6550.,  15100., 23650., 6640.,  18565., 30490., 42415., 15620., 15385.,
      27310., 39235., 25624., 12205., 24130., 36055., 36652., 9025.,  20950.,
      32875., 1400.,  6140.,  10880., 15620., 16136., 4876.,  9616.,  14356.,
      15512., 3612.,  8352.,  13092., 15912., 2348.,  7088.,  11828., 2560.,
      6835.,  11110., 15385., 4876.,  5695.,  9970.,  14245., 8216.,  4555.,
      8830.,  13105., 12580., 3415.,  7690.,  11965., 4360.,  12010., 19660.,
      27310., 9616.,  9970.,  17620., 25270., 15896., 7930.,  15580., 23230.,
      23200., 5890.,  13540., 21190., 6160.,  17185., 28210., 39235., 14356.,
      14245., 25270., 36295., 23576., 11305., 22330., 33355., 33820., 8365.,
      19390., 30415., 2584.,  10264., 17944., 25624., 15512., 8216.,  15896.,
      23576., 29464., 6168.,  13848., 21528., 28056., 4120.,  11800., 19480.,
      2080.,  5455.,  8830.,  12205., 3612.,  4555.,  7930.,  11305., 6168.,
      3655.,  7030.,  10405., 9748.,  2755.,  6130.,  9505.,  3880.,  10630.,
      17380., 24130., 8352.,  8830.,  15580., 22330., 13848., 7030.,  13780.,
      20530., 20368., 5230.,  11980., 18730., 5680.,  15805., 25930., 36055.,
      13092., 13105., 23230., 33355., 21528., 10405., 20530., 30655., 30988.,
      7705.,  17830., 27955., 4792.,  15412., 26032., 36652., 15912., 12580.,
      23200., 33820., 28056., 9748.,  20368., 30988., 41224., 6916.,  17536.,
      28156., 1600.,  4075.,  6550.,  9025.,  2348.,  3415.,  5890.,  8365.,
      4120.,  2755.,  5230.,  7705.,  6916.,  2095.,  4570.,  7045.};
  const int batches = 1;
  const int m = 14;
  const int k = 15;
  const int n = 16;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M14xK16xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,
      3672.,  5848.,  8024.,  1496.,  3672.,  3672.,  9944.,  16216., 22488.,
      3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,
      9944.,  5848.,  16216., 26584., 36952., 5848.,  16216., 26584., 36952.,
      5848.,  16216., 26584., 36952., 5848.,  16216., 8024.,  22488., 36952.,
      51416., 8024.,  22488., 36952., 51416., 8024.,  22488., 36952., 51416.,
      8024.,  22488., 1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,
      8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  3672.,  9944.,
      16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216.,
      22488., 3672.,  9944.,  5848.,  16216., 26584., 36952., 5848.,  16216.,
      26584., 36952., 5848.,  16216., 26584., 36952., 5848.,  16216., 8024.,
      22488., 36952., 51416., 8024.,  22488., 36952., 51416., 8024.,  22488.,
      36952., 51416., 8024.,  22488., 1496.,  3672.,  5848.,  8024.,  1496.,
      3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,
      3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,
      9944.,  16216., 22488., 3672.,  9944.,  5848.,  16216., 26584., 36952.,
      5848.,  16216., 26584., 36952., 5848.,  16216., 26584., 36952., 5848.,
      16216., 8024.,  22488., 36952., 51416., 8024.,  22488., 36952., 51416.,
      8024.,  22488., 36952., 51416., 8024.,  22488., 1496.,  3672.,  5848.,
      8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,
      1496.,  3672.,  3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216.,
      22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.};
  const int batches = 1;
  const int m = 14;
  const int k = 16;
  const int n = 14;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M14xK16xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,
      3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  3672.,  9944.,  16216.,
      22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488.,
      3672.,  9944.,  16216., 5848.,  16216., 26584., 36952., 5848.,  16216.,
      26584., 36952., 5848.,  16216., 26584., 36952., 5848.,  16216., 26584.,
      8024.,  22488., 36952., 51416., 8024.,  22488., 36952., 51416., 8024.,
      22488., 36952., 51416., 8024.,  22488., 36952., 1496.,  3672.,  5848.,
      8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,
      1496.,  3672.,  5848.,  3672.,  9944.,  16216., 22488., 3672.,  9944.,
      16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216.,
      5848.,  16216., 26584., 36952., 5848.,  16216., 26584., 36952., 5848.,
      16216., 26584., 36952., 5848.,  16216., 26584., 8024.,  22488., 36952.,
      51416., 8024.,  22488., 36952., 51416., 8024.,  22488., 36952., 51416.,
      8024.,  22488., 36952., 1496.,  3672.,  5848.,  8024.,  1496.,  3672.,
      5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,
      3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,
      9944.,  16216., 22488., 3672.,  9944.,  16216., 5848.,  16216., 26584.,
      36952., 5848.,  16216., 26584., 36952., 5848.,  16216., 26584., 36952.,
      5848.,  16216., 26584., 8024.,  22488., 36952., 51416., 8024.,  22488.,
      36952., 51416., 8024.,  22488., 36952., 51416., 8024.,  22488., 36952.,
      1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,
      3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  3672.,  9944.,  16216.,
      22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488.,
      3672.,  9944.,  16216.};
  const int batches = 1;
  const int m = 14;
  const int k = 16;
  const int n = 15;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M14xK16xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,
      3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  3672.,  9944.,
      16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216.,
      22488., 3672.,  9944.,  16216., 22488., 5848.,  16216., 26584., 36952.,
      5848.,  16216., 26584., 36952., 5848.,  16216., 26584., 36952., 5848.,
      16216., 26584., 36952., 8024.,  22488., 36952., 51416., 8024.,  22488.,
      36952., 51416., 8024.,  22488., 36952., 51416., 8024.,  22488., 36952.,
      51416., 1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,
      1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  3672.,
      9944.,  16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.,
      16216., 22488., 3672.,  9944.,  16216., 22488., 5848.,  16216., 26584.,
      36952., 5848.,  16216., 26584., 36952., 5848.,  16216., 26584., 36952.,
      5848.,  16216., 26584., 36952., 8024.,  22488., 36952., 51416., 8024.,
      22488., 36952., 51416., 8024.,  22488., 36952., 51416., 8024.,  22488.,
      36952., 51416., 1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,
      8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,
      3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,
      9944.,  16216., 22488., 3672.,  9944.,  16216., 22488., 5848.,  16216.,
      26584., 36952., 5848.,  16216., 26584., 36952., 5848.,  16216., 26584.,
      36952., 5848.,  16216., 26584., 36952., 8024.,  22488., 36952., 51416.,
      8024.,  22488., 36952., 51416., 8024.,  22488., 36952., 51416., 8024.,
      22488., 36952., 51416., 1496.,  3672.,  5848.,  8024.,  1496.,  3672.,
      5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,
      8024.,  3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488.,
      3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488.};
  const int batches = 1;
  const int m = 14;
  const int k = 16;
  const int n = 16;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M15xK14xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1015.,  2485.,  3955.,  5425.,  2479.,  1645.,  3115.,  4585.,  6055.,
      997.,   2275.,  3745.,  5215.,  3485.,  2485.,  6699.,  10913., 15127.,
      9549.,  4291.,  8505.,  12719., 16933., 3867.,  6097.,  10311., 14525.,
      11955., 3955.,  10913., 17871., 24829., 16619., 6937.,  13895., 20853.,
      27811., 6737.,  9919.,  16877., 23835., 20425., 5425.,  15127., 24829.,
      34531., 23689., 9583.,  19285., 28987., 38689., 9607.,  13741., 23443.,
      33145., 28895., 2479.,  9549.,  16619., 23689., 29415., 5509.,  12579.,
      19649., 26719., 8829.,  8539.,  15609., 22679., 28597., 1645.,  4291.,
      6937.,  9583.,  5509.,  2779.,  5425.,  8071.,  10717., 2227.,  3913.,
      6559.,  9205.,  7115.,  3115.,  8505.,  13895., 19285., 12579., 5425.,
      10815., 16205., 21595., 5097.,  7735.,  13125., 18515., 15585., 4585.,
      12719., 20853., 28987., 19649., 8071.,  16205., 24339., 32473., 7967.,
      11557., 19691., 27825., 24055., 6055.,  16933., 27811., 38689., 26719.,
      10717., 21595., 32473., 43351., 10837., 15379., 26257., 37135., 32525.,
      997.,   3867.,  6737.,  9607.,  8829.,  2227.,  5097.,  7967.,  10837.,
      8715.,  3457.,  6327.,  9197.,  9379.,  2275.,  6097.,  9919.,  13741.,
      8539.,  3913.,  7735.,  11557., 15379., 3457.,  5551.,  9373.,  13195.,
      10745., 3745.,  10311., 16877., 23443., 15609., 6559.,  13125., 19691.,
      26257., 6327.,  9373.,  15939., 22505., 19215., 5215.,  14525., 23835.,
      33145., 22679., 9205.,  18515., 27825., 37135., 9197.,  13195., 22505.,
      31815., 27685., 3485.,  11955., 20425., 28895., 28597., 7115.,  15585.,
      24055., 32525., 9379.,  10745., 19215., 27685., 35515., 1435.,  3689.,
      5943.,  8197.,  4499.,  2401.,  4655.,  6909.,  9163.,  1817.,  3367.,
      5621.,  7875.,  5905.};
  const int batches = 1;
  const int m = 15;
  const int k = 14;
  const int n = 14;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M15xK14xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1015.,  2485.,  3955.,  5425.,  2479.,  1645.,  3115.,  4585.,  6055.,
      997.,   2275.,  3745.,  5215.,  3485.,  1435.,  2485.,  6699.,  10913.,
      15127., 9549.,  4291.,  8505.,  12719., 16933., 3867.,  6097.,  10311.,
      14525., 11955., 3689.,  3955.,  10913., 17871., 24829., 16619., 6937.,
      13895., 20853., 27811., 6737.,  9919.,  16877., 23835., 20425., 5943.,
      5425.,  15127., 24829., 34531., 23689., 9583.,  19285., 28987., 38689.,
      9607.,  13741., 23443., 33145., 28895., 8197.,  2479.,  9549.,  16619.,
      23689., 29415., 5509.,  12579., 19649., 26719., 8829.,  8539.,  15609.,
      22679., 28597., 4499.,  1645.,  4291.,  6937.,  9583.,  5509.,  2779.,
      5425.,  8071.,  10717., 2227.,  3913.,  6559.,  9205.,  7115.,  2401.,
      3115.,  8505.,  13895., 19285., 12579., 5425.,  10815., 16205., 21595.,
      5097.,  7735.,  13125., 18515., 15585., 4655.,  4585.,  12719., 20853.,
      28987., 19649., 8071.,  16205., 24339., 32473., 7967.,  11557., 19691.,
      27825., 24055., 6909.,  6055.,  16933., 27811., 38689., 26719., 10717.,
      21595., 32473., 43351., 10837., 15379., 26257., 37135., 32525., 9163.,
      997.,   3867.,  6737.,  9607.,  8829.,  2227.,  5097.,  7967.,  10837.,
      8715.,  3457.,  6327.,  9197.,  9379.,  1817.,  2275.,  6097.,  9919.,
      13741., 8539.,  3913.,  7735.,  11557., 15379., 3457.,  5551.,  9373.,
      13195., 10745., 3367.,  3745.,  10311., 16877., 23443., 15609., 6559.,
      13125., 19691., 26257., 6327.,  9373.,  15939., 22505., 19215., 5621.,
      5215.,  14525., 23835., 33145., 22679., 9205.,  18515., 27825., 37135.,
      9197.,  13195., 22505., 31815., 27685., 7875.,  3485.,  11955., 20425.,
      28895., 28597., 7115.,  15585., 24055., 32525., 9379.,  10745., 19215.,
      27685., 35515., 5905.,  1435.,  3689.,  5943.,  8197.,  4499.,  2401.,
      4655.,  6909.,  9163.,  1817.,  3367.,  5621.,  7875.,  5905.,  2079.};
  const int batches = 1;
  const int m = 15;
  const int k = 14;
  const int n = 15;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M15xK14xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1015.,  2485.,  3955.,  5425.,  2479.,  1645.,  3115.,  4585.,  6055.,
      997.,   2275.,  3745.,  5215.,  3485.,  1435.,  2905.,  2485.,  6699.,
      10913., 15127., 9549.,  4291.,  8505.,  12719., 16933., 3867.,  6097.,
      10311., 14525., 11955., 3689.,  7903.,  3955.,  10913., 17871., 24829.,
      16619., 6937.,  13895., 20853., 27811., 6737.,  9919.,  16877., 23835.,
      20425., 5943.,  12901., 5425.,  15127., 24829., 34531., 23689., 9583.,
      19285., 28987., 38689., 9607.,  13741., 23443., 33145., 28895., 8197.,
      17899., 2479.,  9549.,  16619., 23689., 29415., 5509.,  12579., 19649.,
      26719., 8829.,  8539.,  15609., 22679., 28597., 4499.,  11569., 1645.,
      4291.,  6937.,  9583.,  5509.,  2779.,  5425.,  8071.,  10717., 2227.,
      3913.,  6559.,  9205.,  7115.,  2401.,  5047.,  3115.,  8505.,  13895.,
      19285., 12579., 5425.,  10815., 16205., 21595., 5097.,  7735.,  13125.,
      18515., 15585., 4655.,  10045., 4585.,  12719., 20853., 28987., 19649.,
      8071.,  16205., 24339., 32473., 7967.,  11557., 19691., 27825., 24055.,
      6909.,  15043., 6055.,  16933., 27811., 38689., 26719., 10717., 21595.,
      32473., 43351., 10837., 15379., 26257., 37135., 32525., 9163.,  20041.,
      997.,   3867.,  6737.,  9607.,  8829.,  2227.,  5097.,  7967.,  10837.,
      8715.,  3457.,  6327.,  9197.,  9379.,  1817.,  4687.,  2275.,  6097.,
      9919.,  13741., 8539.,  3913.,  7735.,  11557., 15379., 3457.,  5551.,
      9373.,  13195., 10745., 3367.,  7189.,  3745.,  10311., 16877., 23443.,
      15609., 6559.,  13125., 19691., 26257., 6327.,  9373.,  15939., 22505.,
      19215., 5621.,  12187., 5215.,  14525., 23835., 33145., 22679., 9205.,
      18515., 27825., 37135., 9197.,  13195., 22505., 31815., 27685., 7875.,
      17185., 3485.,  11955., 20425., 28895., 28597., 7115.,  15585., 24055.,
      32525., 9379.,  10745., 19215., 27685., 35515., 5905.,  14375., 1435.,
      3689.,  5943.,  8197.,  4499.,  2401.,  4655.,  6909.,  9163.,  1817.,
      3367.,  5621.,  7875.,  5905.,  2079.,  4333.};
  const int batches = 1;
  const int m = 15;
  const int k = 14;
  const int n = 16;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M15xK15xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1240.,  3040.,  4840.,  6640.,  1400.,  2560.,  4360.,  6160.,  2584.,
      2080.,  3880.,  5680.,  4792.,  1600.,  3040.,  8215.,  13390., 18565.,
      6140.,  6835.,  12010., 17185., 10264., 5455.,  10630., 15805., 15412.,
      4075.,  4840.,  13390., 21940., 30490., 10880., 11110., 19660., 28210.,
      17944., 8830.,  17380., 25930., 26032., 6550.,  6640.,  18565., 30490.,
      42415., 15620., 15385., 27310., 39235., 25624., 12205., 24130., 36055.,
      36652., 9025.,  1400.,  6140.,  10880., 15620., 16136., 4876.,  9616.,
      14356., 15512., 3612.,  8352.,  13092., 15912., 2348.,  2560.,  6835.,
      11110., 15385., 4876.,  5695.,  9970.,  14245., 8216.,  4555.,  8830.,
      13105., 12580., 3415.,  4360.,  12010., 19660., 27310., 9616.,  9970.,
      17620., 25270., 15896., 7930.,  15580., 23230., 23200., 5890.,  6160.,
      17185., 28210., 39235., 14356., 14245., 25270., 36295., 23576., 11305.,
      22330., 33355., 33820., 8365.,  2584.,  10264., 17944., 25624., 15512.,
      8216.,  15896., 23576., 29464., 6168.,  13848., 21528., 28056., 4120.,
      2080.,  5455.,  8830.,  12205., 3612.,  4555.,  7930.,  11305., 6168.,
      3655.,  7030.,  10405., 9748.,  2755.,  3880.,  10630., 17380., 24130.,
      8352.,  8830.,  15580., 22330., 13848., 7030.,  13780., 20530., 20368.,
      5230.,  5680.,  15805., 25930., 36055., 13092., 13105., 23230., 33355.,
      21528., 10405., 20530., 30655., 30988., 7705.,  4792.,  15412., 26032.,
      36652., 15912., 12580., 23200., 33820., 28056., 9748.,  20368., 30988.,
      41224., 6916.,  1600.,  4075.,  6550.,  9025.,  2348.,  3415.,  5890.,
      8365.,  4120.,  2755.,  5230.,  7705.,  6916.,  2095.,  3400.,  9250.,
      15100., 20950., 7088.,  7690.,  13540., 19390., 11800., 6130.,  11980.,
      17830., 17536., 4570.};
  const int batches = 1;
  const int m = 15;
  const int k = 15;
  const int n = 14;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M15xK15xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1240.,  3040.,  4840.,  6640.,  1400.,  2560.,  4360.,  6160.,  2584.,
      2080.,  3880.,  5680.,  4792.,  1600.,  3400.,  3040.,  8215.,  13390.,
      18565., 6140.,  6835.,  12010., 17185., 10264., 5455.,  10630., 15805.,
      15412., 4075.,  9250.,  4840.,  13390., 21940., 30490., 10880., 11110.,
      19660., 28210., 17944., 8830.,  17380., 25930., 26032., 6550.,  15100.,
      6640.,  18565., 30490., 42415., 15620., 15385., 27310., 39235., 25624.,
      12205., 24130., 36055., 36652., 9025.,  20950., 1400.,  6140.,  10880.,
      15620., 16136., 4876.,  9616.,  14356., 15512., 3612.,  8352.,  13092.,
      15912., 2348.,  7088.,  2560.,  6835.,  11110., 15385., 4876.,  5695.,
      9970.,  14245., 8216.,  4555.,  8830.,  13105., 12580., 3415.,  7690.,
      4360.,  12010., 19660., 27310., 9616.,  9970.,  17620., 25270., 15896.,
      7930.,  15580., 23230., 23200., 5890.,  13540., 6160.,  17185., 28210.,
      39235., 14356., 14245., 25270., 36295., 23576., 11305., 22330., 33355.,
      33820., 8365.,  19390., 2584.,  10264., 17944., 25624., 15512., 8216.,
      15896., 23576., 29464., 6168.,  13848., 21528., 28056., 4120.,  11800.,
      2080.,  5455.,  8830.,  12205., 3612.,  4555.,  7930.,  11305., 6168.,
      3655.,  7030.,  10405., 9748.,  2755.,  6130.,  3880.,  10630., 17380.,
      24130., 8352.,  8830.,  15580., 22330., 13848., 7030.,  13780., 20530.,
      20368., 5230.,  11980., 5680.,  15805., 25930., 36055., 13092., 13105.,
      23230., 33355., 21528., 10405., 20530., 30655., 30988., 7705.,  17830.,
      4792.,  15412., 26032., 36652., 15912., 12580., 23200., 33820., 28056.,
      9748.,  20368., 30988., 41224., 6916.,  17536., 1600.,  4075.,  6550.,
      9025.,  2348.,  3415.,  5890.,  8365.,  4120.,  2755.,  5230.,  7705.,
      6916.,  2095.,  4570.,  3400.,  9250.,  15100., 20950., 7088.,  7690.,
      13540., 19390., 11800., 6130.,  11980., 17830., 17536., 4570.,  10420.};
  const int batches = 1;
  const int m = 15;
  const int k = 15;
  const int n = 15;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M15xK15xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1240.,  3040.,  4840.,  6640.,  1400.,  2560.,  4360.,  6160.,  2584.,
      2080.,  3880.,  5680.,  4792.,  1600.,  3400.,  5200.,  3040.,  8215.,
      13390., 18565., 6140.,  6835.,  12010., 17185., 10264., 5455.,  10630.,
      15805., 15412., 4075.,  9250.,  14425., 4840.,  13390., 21940., 30490.,
      10880., 11110., 19660., 28210., 17944., 8830.,  17380., 25930., 26032.,
      6550.,  15100., 23650., 6640.,  18565., 30490., 42415., 15620., 15385.,
      27310., 39235., 25624., 12205., 24130., 36055., 36652., 9025.,  20950.,
      32875., 1400.,  6140.,  10880., 15620., 16136., 4876.,  9616.,  14356.,
      15512., 3612.,  8352.,  13092., 15912., 2348.,  7088.,  11828., 2560.,
      6835.,  11110., 15385., 4876.,  5695.,  9970.,  14245., 8216.,  4555.,
      8830.,  13105., 12580., 3415.,  7690.,  11965., 4360.,  12010., 19660.,
      27310., 9616.,  9970.,  17620., 25270., 15896., 7930.,  15580., 23230.,
      23200., 5890.,  13540., 21190., 6160.,  17185., 28210., 39235., 14356.,
      14245., 25270., 36295., 23576., 11305., 22330., 33355., 33820., 8365.,
      19390., 30415., 2584.,  10264., 17944., 25624., 15512., 8216.,  15896.,
      23576., 29464., 6168.,  13848., 21528., 28056., 4120.,  11800., 19480.,
      2080.,  5455.,  8830.,  12205., 3612.,  4555.,  7930.,  11305., 6168.,
      3655.,  7030.,  10405., 9748.,  2755.,  6130.,  9505.,  3880.,  10630.,
      17380., 24130., 8352.,  8830.,  15580., 22330., 13848., 7030.,  13780.,
      20530., 20368., 5230.,  11980., 18730., 5680.,  15805., 25930., 36055.,
      13092., 13105., 23230., 33355., 21528., 10405., 20530., 30655., 30988.,
      7705.,  17830., 27955., 4792.,  15412., 26032., 36652., 15912., 12580.,
      23200., 33820., 28056., 9748.,  20368., 30988., 41224., 6916.,  17536.,
      28156., 1600.,  4075.,  6550.,  9025.,  2348.,  3415.,  5890.,  8365.,
      4120.,  2755.,  5230.,  7705.,  6916.,  2095.,  4570.,  7045.,  3400.,
      9250.,  15100., 20950., 7088.,  7690.,  13540., 19390., 11800., 6130.,
      11980., 17830., 17536., 4570.,  10420., 16270.};
  const int batches = 1;
  const int m = 15;
  const int k = 15;
  const int n = 16;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M15xK16xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,
      3672.,  5848.,  8024.,  1496.,  3672.,  3672.,  9944.,  16216., 22488.,
      3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,
      9944.,  5848.,  16216., 26584., 36952., 5848.,  16216., 26584., 36952.,
      5848.,  16216., 26584., 36952., 5848.,  16216., 8024.,  22488., 36952.,
      51416., 8024.,  22488., 36952., 51416., 8024.,  22488., 36952., 51416.,
      8024.,  22488., 1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,
      8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  3672.,  9944.,
      16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216.,
      22488., 3672.,  9944.,  5848.,  16216., 26584., 36952., 5848.,  16216.,
      26584., 36952., 5848.,  16216., 26584., 36952., 5848.,  16216., 8024.,
      22488., 36952., 51416., 8024.,  22488., 36952., 51416., 8024.,  22488.,
      36952., 51416., 8024.,  22488., 1496.,  3672.,  5848.,  8024.,  1496.,
      3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,
      3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,
      9944.,  16216., 22488., 3672.,  9944.,  5848.,  16216., 26584., 36952.,
      5848.,  16216., 26584., 36952., 5848.,  16216., 26584., 36952., 5848.,
      16216., 8024.,  22488., 36952., 51416., 8024.,  22488., 36952., 51416.,
      8024.,  22488., 36952., 51416., 8024.,  22488., 1496.,  3672.,  5848.,
      8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,
      1496.,  3672.,  3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216.,
      22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.,  5848.,  16216.,
      26584., 36952., 5848.,  16216., 26584., 36952., 5848.,  16216., 26584.,
      36952., 5848.,  16216.};
  const int batches = 1;
  const int m = 15;
  const int k = 16;
  const int n = 14;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M15xK16xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,
      3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  3672.,  9944.,  16216.,
      22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488.,
      3672.,  9944.,  16216., 5848.,  16216., 26584., 36952., 5848.,  16216.,
      26584., 36952., 5848.,  16216., 26584., 36952., 5848.,  16216., 26584.,
      8024.,  22488., 36952., 51416., 8024.,  22488., 36952., 51416., 8024.,
      22488., 36952., 51416., 8024.,  22488., 36952., 1496.,  3672.,  5848.,
      8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,
      1496.,  3672.,  5848.,  3672.,  9944.,  16216., 22488., 3672.,  9944.,
      16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216.,
      5848.,  16216., 26584., 36952., 5848.,  16216., 26584., 36952., 5848.,
      16216., 26584., 36952., 5848.,  16216., 26584., 8024.,  22488., 36952.,
      51416., 8024.,  22488., 36952., 51416., 8024.,  22488., 36952., 51416.,
      8024.,  22488., 36952., 1496.,  3672.,  5848.,  8024.,  1496.,  3672.,
      5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,
      3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,
      9944.,  16216., 22488., 3672.,  9944.,  16216., 5848.,  16216., 26584.,
      36952., 5848.,  16216., 26584., 36952., 5848.,  16216., 26584., 36952.,
      5848.,  16216., 26584., 8024.,  22488., 36952., 51416., 8024.,  22488.,
      36952., 51416., 8024.,  22488., 36952., 51416., 8024.,  22488., 36952.,
      1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,
      3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  3672.,  9944.,  16216.,
      22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488.,
      3672.,  9944.,  16216., 5848.,  16216., 26584., 36952., 5848.,  16216.,
      26584., 36952., 5848.,  16216., 26584., 36952., 5848.,  16216., 26584.};
  const int batches = 1;
  const int m = 15;
  const int k = 16;
  const int n = 15;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M15xK16xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,
      3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  3672.,  9944.,
      16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216.,
      22488., 3672.,  9944.,  16216., 22488., 5848.,  16216., 26584., 36952.,
      5848.,  16216., 26584., 36952., 5848.,  16216., 26584., 36952., 5848.,
      16216., 26584., 36952., 8024.,  22488., 36952., 51416., 8024.,  22488.,
      36952., 51416., 8024.,  22488., 36952., 51416., 8024.,  22488., 36952.,
      51416., 1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,
      1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  3672.,
      9944.,  16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.,
      16216., 22488., 3672.,  9944.,  16216., 22488., 5848.,  16216., 26584.,
      36952., 5848.,  16216., 26584., 36952., 5848.,  16216., 26584., 36952.,
      5848.,  16216., 26584., 36952., 8024.,  22488., 36952., 51416., 8024.,
      22488., 36952., 51416., 8024.,  22488., 36952., 51416., 8024.,  22488.,
      36952., 51416., 1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,
      8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,
      3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,
      9944.,  16216., 22488., 3672.,  9944.,  16216., 22488., 5848.,  16216.,
      26584., 36952., 5848.,  16216., 26584., 36952., 5848.,  16216., 26584.,
      36952., 5848.,  16216., 26584., 36952., 8024.,  22488., 36952., 51416.,
      8024.,  22488., 36952., 51416., 8024.,  22488., 36952., 51416., 8024.,
      22488., 36952., 51416., 1496.,  3672.,  5848.,  8024.,  1496.,  3672.,
      5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,
      8024.,  3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488.,
      3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488., 5848.,
      16216., 26584., 36952., 5848.,  16216., 26584., 36952., 5848.,  16216.,
      26584., 36952., 5848.,  16216., 26584., 36952.};
  const int batches = 1;
  const int m = 15;
  const int k = 16;
  const int n = 16;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M16xK14xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1015.,  2485.,  3955.,  5425.,  2479.,  1645.,  3115.,  4585.,  6055.,
      997.,   2275.,  3745.,  5215.,  3485.,  2485.,  6699.,  10913., 15127.,
      9549.,  4291.,  8505.,  12719., 16933., 3867.,  6097.,  10311., 14525.,
      11955., 3955.,  10913., 17871., 24829., 16619., 6937.,  13895., 20853.,
      27811., 6737.,  9919.,  16877., 23835., 20425., 5425.,  15127., 24829.,
      34531., 23689., 9583.,  19285., 28987., 38689., 9607.,  13741., 23443.,
      33145., 28895., 2479.,  9549.,  16619., 23689., 29415., 5509.,  12579.,
      19649., 26719., 8829.,  8539.,  15609., 22679., 28597., 1645.,  4291.,
      6937.,  9583.,  5509.,  2779.,  5425.,  8071.,  10717., 2227.,  3913.,
      6559.,  9205.,  7115.,  3115.,  8505.,  13895., 19285., 12579., 5425.,
      10815., 16205., 21595., 5097.,  7735.,  13125., 18515., 15585., 4585.,
      12719., 20853., 28987., 19649., 8071.,  16205., 24339., 32473., 7967.,
      11557., 19691., 27825., 24055., 6055.,  16933., 27811., 38689., 26719.,
      10717., 21595., 32473., 43351., 10837., 15379., 26257., 37135., 32525.,
      997.,   3867.,  6737.,  9607.,  8829.,  2227.,  5097.,  7967.,  10837.,
      8715.,  3457.,  6327.,  9197.,  9379.,  2275.,  6097.,  9919.,  13741.,
      8539.,  3913.,  7735.,  11557., 15379., 3457.,  5551.,  9373.,  13195.,
      10745., 3745.,  10311., 16877., 23443., 15609., 6559.,  13125., 19691.,
      26257., 6327.,  9373.,  15939., 22505., 19215., 5215.,  14525., 23835.,
      33145., 22679., 9205.,  18515., 27825., 37135., 9197.,  13195., 22505.,
      31815., 27685., 3485.,  11955., 20425., 28895., 28597., 7115.,  15585.,
      24055., 32525., 9379.,  10745., 19215., 27685., 35515., 1435.,  3689.,
      5943.,  8197.,  4499.,  2401.,  4655.,  6909.,  9163.,  1817.,  3367.,
      5621.,  7875.,  5905.,  2905.,  7903.,  12901., 17899., 11569., 5047.,
      10045., 15043., 20041., 4687.,  7189.,  12187., 17185., 14375.};
  const int batches = 1;
  const int m = 16;
  const int k = 14;
  const int n = 14;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M16xK14xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1015.,  2485.,  3955.,  5425.,  2479.,  1645.,  3115.,  4585.,  6055.,
      997.,   2275.,  3745.,  5215.,  3485.,  1435.,  2485.,  6699.,  10913.,
      15127., 9549.,  4291.,  8505.,  12719., 16933., 3867.,  6097.,  10311.,
      14525., 11955., 3689.,  3955.,  10913., 17871., 24829., 16619., 6937.,
      13895., 20853., 27811., 6737.,  9919.,  16877., 23835., 20425., 5943.,
      5425.,  15127., 24829., 34531., 23689., 9583.,  19285., 28987., 38689.,
      9607.,  13741., 23443., 33145., 28895., 8197.,  2479.,  9549.,  16619.,
      23689., 29415., 5509.,  12579., 19649., 26719., 8829.,  8539.,  15609.,
      22679., 28597., 4499.,  1645.,  4291.,  6937.,  9583.,  5509.,  2779.,
      5425.,  8071.,  10717., 2227.,  3913.,  6559.,  9205.,  7115.,  2401.,
      3115.,  8505.,  13895., 19285., 12579., 5425.,  10815., 16205., 21595.,
      5097.,  7735.,  13125., 18515., 15585., 4655.,  4585.,  12719., 20853.,
      28987., 19649., 8071.,  16205., 24339., 32473., 7967.,  11557., 19691.,
      27825., 24055., 6909.,  6055.,  16933., 27811., 38689., 26719., 10717.,
      21595., 32473., 43351., 10837., 15379., 26257., 37135., 32525., 9163.,
      997.,   3867.,  6737.,  9607.,  8829.,  2227.,  5097.,  7967.,  10837.,
      8715.,  3457.,  6327.,  9197.,  9379.,  1817.,  2275.,  6097.,  9919.,
      13741., 8539.,  3913.,  7735.,  11557., 15379., 3457.,  5551.,  9373.,
      13195., 10745., 3367.,  3745.,  10311., 16877., 23443., 15609., 6559.,
      13125., 19691., 26257., 6327.,  9373.,  15939., 22505., 19215., 5621.,
      5215.,  14525., 23835., 33145., 22679., 9205.,  18515., 27825., 37135.,
      9197.,  13195., 22505., 31815., 27685., 7875.,  3485.,  11955., 20425.,
      28895., 28597., 7115.,  15585., 24055., 32525., 9379.,  10745., 19215.,
      27685., 35515., 5905.,  1435.,  3689.,  5943.,  8197.,  4499.,  2401.,
      4655.,  6909.,  9163.,  1817.,  3367.,  5621.,  7875.,  5905.,  2079.,
      2905.,  7903.,  12901., 17899., 11569., 5047.,  10045., 15043., 20041.,
      4687.,  7189.,  12187., 17185., 14375., 4333.};
  const int batches = 1;
  const int m = 16;
  const int k = 14;
  const int n = 15;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M16xK14xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1015.,  2485.,  3955.,  5425.,  2479.,  1645.,  3115.,  4585.,  6055.,
      997.,   2275.,  3745.,  5215.,  3485.,  1435.,  2905.,  2485.,  6699.,
      10913., 15127., 9549.,  4291.,  8505.,  12719., 16933., 3867.,  6097.,
      10311., 14525., 11955., 3689.,  7903.,  3955.,  10913., 17871., 24829.,
      16619., 6937.,  13895., 20853., 27811., 6737.,  9919.,  16877., 23835.,
      20425., 5943.,  12901., 5425.,  15127., 24829., 34531., 23689., 9583.,
      19285., 28987., 38689., 9607.,  13741., 23443., 33145., 28895., 8197.,
      17899., 2479.,  9549.,  16619., 23689., 29415., 5509.,  12579., 19649.,
      26719., 8829.,  8539.,  15609., 22679., 28597., 4499.,  11569., 1645.,
      4291.,  6937.,  9583.,  5509.,  2779.,  5425.,  8071.,  10717., 2227.,
      3913.,  6559.,  9205.,  7115.,  2401.,  5047.,  3115.,  8505.,  13895.,
      19285., 12579., 5425.,  10815., 16205., 21595., 5097.,  7735.,  13125.,
      18515., 15585., 4655.,  10045., 4585.,  12719., 20853., 28987., 19649.,
      8071.,  16205., 24339., 32473., 7967.,  11557., 19691., 27825., 24055.,
      6909.,  15043., 6055.,  16933., 27811., 38689., 26719., 10717., 21595.,
      32473., 43351., 10837., 15379., 26257., 37135., 32525., 9163.,  20041.,
      997.,   3867.,  6737.,  9607.,  8829.,  2227.,  5097.,  7967.,  10837.,
      8715.,  3457.,  6327.,  9197.,  9379.,  1817.,  4687.,  2275.,  6097.,
      9919.,  13741., 8539.,  3913.,  7735.,  11557., 15379., 3457.,  5551.,
      9373.,  13195., 10745., 3367.,  7189.,  3745.,  10311., 16877., 23443.,
      15609., 6559.,  13125., 19691., 26257., 6327.,  9373.,  15939., 22505.,
      19215., 5621.,  12187., 5215.,  14525., 23835., 33145., 22679., 9205.,
      18515., 27825., 37135., 9197.,  13195., 22505., 31815., 27685., 7875.,
      17185., 3485.,  11955., 20425., 28895., 28597., 7115.,  15585., 24055.,
      32525., 9379.,  10745., 19215., 27685., 35515., 5905.,  14375., 1435.,
      3689.,  5943.,  8197.,  4499.,  2401.,  4655.,  6909.,  9163.,  1817.,
      3367.,  5621.,  7875.,  5905.,  2079.,  4333.,  2905.,  7903.,  12901.,
      17899., 11569., 5047.,  10045., 15043., 20041., 4687.,  7189.,  12187.,
      17185., 14375., 4333.,  9331.};
  const int batches = 1;
  const int m = 16;
  const int k = 14;
  const int n = 16;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M16xK15xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1240.,  3040.,  4840.,  6640.,  1400.,  2560.,  4360.,  6160.,  2584.,
      2080.,  3880.,  5680.,  4792.,  1600.,  3040.,  8215.,  13390., 18565.,
      6140.,  6835.,  12010., 17185., 10264., 5455.,  10630., 15805., 15412.,
      4075.,  4840.,  13390., 21940., 30490., 10880., 11110., 19660., 28210.,
      17944., 8830.,  17380., 25930., 26032., 6550.,  6640.,  18565., 30490.,
      42415., 15620., 15385., 27310., 39235., 25624., 12205., 24130., 36055.,
      36652., 9025.,  1400.,  6140.,  10880., 15620., 16136., 4876.,  9616.,
      14356., 15512., 3612.,  8352.,  13092., 15912., 2348.,  2560.,  6835.,
      11110., 15385., 4876.,  5695.,  9970.,  14245., 8216.,  4555.,  8830.,
      13105., 12580., 3415.,  4360.,  12010., 19660., 27310., 9616.,  9970.,
      17620., 25270., 15896., 7930.,  15580., 23230., 23200., 5890.,  6160.,
      17185., 28210., 39235., 14356., 14245., 25270., 36295., 23576., 11305.,
      22330., 33355., 33820., 8365.,  2584.,  10264., 17944., 25624., 15512.,
      8216.,  15896., 23576., 29464., 6168.,  13848., 21528., 28056., 4120.,
      2080.,  5455.,  8830.,  12205., 3612.,  4555.,  7930.,  11305., 6168.,
      3655.,  7030.,  10405., 9748.,  2755.,  3880.,  10630., 17380., 24130.,
      8352.,  8830.,  15580., 22330., 13848., 7030.,  13780., 20530., 20368.,
      5230.,  5680.,  15805., 25930., 36055., 13092., 13105., 23230., 33355.,
      21528., 10405., 20530., 30655., 30988., 7705.,  4792.,  15412., 26032.,
      36652., 15912., 12580., 23200., 33820., 28056., 9748.,  20368., 30988.,
      41224., 6916.,  1600.,  4075.,  6550.,  9025.,  2348.,  3415.,  5890.,
      8365.,  4120.,  2755.,  5230.,  7705.,  6916.,  2095.,  3400.,  9250.,
      15100., 20950., 7088.,  7690.,  13540., 19390., 11800., 6130.,  11980.,
      17830., 17536., 4570.,  5200.,  14425., 23650., 32875., 11828., 11965.,
      21190., 30415., 19480., 9505.,  18730., 27955., 28156., 7045.};
  const int batches = 1;
  const int m = 16;
  const int k = 15;
  const int n = 14;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M16xK15xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1240.,  3040.,  4840.,  6640.,  1400.,  2560.,  4360.,  6160.,  2584.,
      2080.,  3880.,  5680.,  4792.,  1600.,  3400.,  3040.,  8215.,  13390.,
      18565., 6140.,  6835.,  12010., 17185., 10264., 5455.,  10630., 15805.,
      15412., 4075.,  9250.,  4840.,  13390., 21940., 30490., 10880., 11110.,
      19660., 28210., 17944., 8830.,  17380., 25930., 26032., 6550.,  15100.,
      6640.,  18565., 30490., 42415., 15620., 15385., 27310., 39235., 25624.,
      12205., 24130., 36055., 36652., 9025.,  20950., 1400.,  6140.,  10880.,
      15620., 16136., 4876.,  9616.,  14356., 15512., 3612.,  8352.,  13092.,
      15912., 2348.,  7088.,  2560.,  6835.,  11110., 15385., 4876.,  5695.,
      9970.,  14245., 8216.,  4555.,  8830.,  13105., 12580., 3415.,  7690.,
      4360.,  12010., 19660., 27310., 9616.,  9970.,  17620., 25270., 15896.,
      7930.,  15580., 23230., 23200., 5890.,  13540., 6160.,  17185., 28210.,
      39235., 14356., 14245., 25270., 36295., 23576., 11305., 22330., 33355.,
      33820., 8365.,  19390., 2584.,  10264., 17944., 25624., 15512., 8216.,
      15896., 23576., 29464., 6168.,  13848., 21528., 28056., 4120.,  11800.,
      2080.,  5455.,  8830.,  12205., 3612.,  4555.,  7930.,  11305., 6168.,
      3655.,  7030.,  10405., 9748.,  2755.,  6130.,  3880.,  10630., 17380.,
      24130., 8352.,  8830.,  15580., 22330., 13848., 7030.,  13780., 20530.,
      20368., 5230.,  11980., 5680.,  15805., 25930., 36055., 13092., 13105.,
      23230., 33355., 21528., 10405., 20530., 30655., 30988., 7705.,  17830.,
      4792.,  15412., 26032., 36652., 15912., 12580., 23200., 33820., 28056.,
      9748.,  20368., 30988., 41224., 6916.,  17536., 1600.,  4075.,  6550.,
      9025.,  2348.,  3415.,  5890.,  8365.,  4120.,  2755.,  5230.,  7705.,
      6916.,  2095.,  4570.,  3400.,  9250.,  15100., 20950., 7088.,  7690.,
      13540., 19390., 11800., 6130.,  11980., 17830., 17536., 4570.,  10420.,
      5200.,  14425., 23650., 32875., 11828., 11965., 21190., 30415., 19480.,
      9505.,  18730., 27955., 28156., 7045.,  16270.};
  const int batches = 1;
  const int m = 16;
  const int k = 15;
  const int n = 15;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M16xK15xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1240.,  3040.,  4840.,  6640.,  1400.,  2560.,  4360.,  6160.,  2584.,
      2080.,  3880.,  5680.,  4792.,  1600.,  3400.,  5200.,  3040.,  8215.,
      13390., 18565., 6140.,  6835.,  12010., 17185., 10264., 5455.,  10630.,
      15805., 15412., 4075.,  9250.,  14425., 4840.,  13390., 21940., 30490.,
      10880., 11110., 19660., 28210., 17944., 8830.,  17380., 25930., 26032.,
      6550.,  15100., 23650., 6640.,  18565., 30490., 42415., 15620., 15385.,
      27310., 39235., 25624., 12205., 24130., 36055., 36652., 9025.,  20950.,
      32875., 1400.,  6140.,  10880., 15620., 16136., 4876.,  9616.,  14356.,
      15512., 3612.,  8352.,  13092., 15912., 2348.,  7088.,  11828., 2560.,
      6835.,  11110., 15385., 4876.,  5695.,  9970.,  14245., 8216.,  4555.,
      8830.,  13105., 12580., 3415.,  7690.,  11965., 4360.,  12010., 19660.,
      27310., 9616.,  9970.,  17620., 25270., 15896., 7930.,  15580., 23230.,
      23200., 5890.,  13540., 21190., 6160.,  17185., 28210., 39235., 14356.,
      14245., 25270., 36295., 23576., 11305., 22330., 33355., 33820., 8365.,
      19390., 30415., 2584.,  10264., 17944., 25624., 15512., 8216.,  15896.,
      23576., 29464., 6168.,  13848., 21528., 28056., 4120.,  11800., 19480.,
      2080.,  5455.,  8830.,  12205., 3612.,  4555.,  7930.,  11305., 6168.,
      3655.,  7030.,  10405., 9748.,  2755.,  6130.,  9505.,  3880.,  10630.,
      17380., 24130., 8352.,  8830.,  15580., 22330., 13848., 7030.,  13780.,
      20530., 20368., 5230.,  11980., 18730., 5680.,  15805., 25930., 36055.,
      13092., 13105., 23230., 33355., 21528., 10405., 20530., 30655., 30988.,
      7705.,  17830., 27955., 4792.,  15412., 26032., 36652., 15912., 12580.,
      23200., 33820., 28056., 9748.,  20368., 30988., 41224., 6916.,  17536.,
      28156., 1600.,  4075.,  6550.,  9025.,  2348.,  3415.,  5890.,  8365.,
      4120.,  2755.,  5230.,  7705.,  6916.,  2095.,  4570.,  7045.,  3400.,
      9250.,  15100., 20950., 7088.,  7690.,  13540., 19390., 11800., 6130.,
      11980., 17830., 17536., 4570.,  10420., 16270., 5200.,  14425., 23650.,
      32875., 11828., 11965., 21190., 30415., 19480., 9505.,  18730., 27955.,
      28156., 7045.,  16270., 25495.};
  const int batches = 1;
  const int m = 16;
  const int k = 15;
  const int n = 16;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M16xK16xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,
      3672.,  5848.,  8024.,  1496.,  3672.,  3672.,  9944.,  16216., 22488.,
      3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,
      9944.,  5848.,  16216., 26584., 36952., 5848.,  16216., 26584., 36952.,
      5848.,  16216., 26584., 36952., 5848.,  16216., 8024.,  22488., 36952.,
      51416., 8024.,  22488., 36952., 51416., 8024.,  22488., 36952., 51416.,
      8024.,  22488., 1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,
      8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  3672.,  9944.,
      16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216.,
      22488., 3672.,  9944.,  5848.,  16216., 26584., 36952., 5848.,  16216.,
      26584., 36952., 5848.,  16216., 26584., 36952., 5848.,  16216., 8024.,
      22488., 36952., 51416., 8024.,  22488., 36952., 51416., 8024.,  22488.,
      36952., 51416., 8024.,  22488., 1496.,  3672.,  5848.,  8024.,  1496.,
      3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,
      3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,
      9944.,  16216., 22488., 3672.,  9944.,  5848.,  16216., 26584., 36952.,
      5848.,  16216., 26584., 36952., 5848.,  16216., 26584., 36952., 5848.,
      16216., 8024.,  22488., 36952., 51416., 8024.,  22488., 36952., 51416.,
      8024.,  22488., 36952., 51416., 8024.,  22488., 1496.,  3672.,  5848.,
      8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,
      1496.,  3672.,  3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216.,
      22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.,  5848.,  16216.,
      26584., 36952., 5848.,  16216., 26584., 36952., 5848.,  16216., 26584.,
      36952., 5848.,  16216., 8024.,  22488., 36952., 51416., 8024.,  22488.,
      36952., 51416., 8024.,  22488., 36952., 51416., 8024.,  22488.};
  const int batches = 1;
  const int m = 16;
  const int k = 16;
  const int n = 14;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M16xK16xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,
      3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  3672.,  9944.,  16216.,
      22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488.,
      3672.,  9944.,  16216., 5848.,  16216., 26584., 36952., 5848.,  16216.,
      26584., 36952., 5848.,  16216., 26584., 36952., 5848.,  16216., 26584.,
      8024.,  22488., 36952., 51416., 8024.,  22488., 36952., 51416., 8024.,
      22488., 36952., 51416., 8024.,  22488., 36952., 1496.,  3672.,  5848.,
      8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,
      1496.,  3672.,  5848.,  3672.,  9944.,  16216., 22488., 3672.,  9944.,
      16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216.,
      5848.,  16216., 26584., 36952., 5848.,  16216., 26584., 36952., 5848.,
      16216., 26584., 36952., 5848.,  16216., 26584., 8024.,  22488., 36952.,
      51416., 8024.,  22488., 36952., 51416., 8024.,  22488., 36952., 51416.,
      8024.,  22488., 36952., 1496.,  3672.,  5848.,  8024.,  1496.,  3672.,
      5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,
      3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,
      9944.,  16216., 22488., 3672.,  9944.,  16216., 5848.,  16216., 26584.,
      36952., 5848.,  16216., 26584., 36952., 5848.,  16216., 26584., 36952.,
      5848.,  16216., 26584., 8024.,  22488., 36952., 51416., 8024.,  22488.,
      36952., 51416., 8024.,  22488., 36952., 51416., 8024.,  22488., 36952.,
      1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,
      3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  3672.,  9944.,  16216.,
      22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488.,
      3672.,  9944.,  16216., 5848.,  16216., 26584., 36952., 5848.,  16216.,
      26584., 36952., 5848.,  16216., 26584., 36952., 5848.,  16216., 26584.,
      8024.,  22488., 36952., 51416., 8024.,  22488., 36952., 51416., 8024.,
      22488., 36952., 51416., 8024.,  22488., 36952.};
  const int batches = 1;
  const int m = 16;
  const int k = 16;
  const int n = 15;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta0FalseTrue, M16xK16xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,
      3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  3672.,  9944.,
      16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216.,
      22488., 3672.,  9944.,  16216., 22488., 5848.,  16216., 26584., 36952.,
      5848.,  16216., 26584., 36952., 5848.,  16216., 26584., 36952., 5848.,
      16216., 26584., 36952., 8024.,  22488., 36952., 51416., 8024.,  22488.,
      36952., 51416., 8024.,  22488., 36952., 51416., 8024.,  22488., 36952.,
      51416., 1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,
      1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  3672.,
      9944.,  16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,  9944.,
      16216., 22488., 3672.,  9944.,  16216., 22488., 5848.,  16216., 26584.,
      36952., 5848.,  16216., 26584., 36952., 5848.,  16216., 26584., 36952.,
      5848.,  16216., 26584., 36952., 8024.,  22488., 36952., 51416., 8024.,
      22488., 36952., 51416., 8024.,  22488., 36952., 51416., 8024.,  22488.,
      36952., 51416., 1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,
      8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,  8024.,
      3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488., 3672.,
      9944.,  16216., 22488., 3672.,  9944.,  16216., 22488., 5848.,  16216.,
      26584., 36952., 5848.,  16216., 26584., 36952., 5848.,  16216., 26584.,
      36952., 5848.,  16216., 26584., 36952., 8024.,  22488., 36952., 51416.,
      8024.,  22488., 36952., 51416., 8024.,  22488., 36952., 51416., 8024.,
      22488., 36952., 51416., 1496.,  3672.,  5848.,  8024.,  1496.,  3672.,
      5848.,  8024.,  1496.,  3672.,  5848.,  8024.,  1496.,  3672.,  5848.,
      8024.,  3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488.,
      3672.,  9944.,  16216., 22488., 3672.,  9944.,  16216., 22488., 5848.,
      16216., 26584., 36952., 5848.,  16216., 26584., 36952., 5848.,  16216.,
      26584., 36952., 5848.,  16216., 26584., 36952., 8024.,  22488., 36952.,
      51416., 8024.,  22488., 36952., 51416., 8024.,  22488., 36952., 51416.,
      8024.,  22488., 36952., 51416.};
  const int batches = 1;
  const int m = 16;
  const int k = 16;
  const int n = 16;
  const auto beta = static_cast<DataType>(0);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}