/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_matmul_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>
#include <vector>

#include "test/matmul/fixture.h"
#include "test/types/kernel_data_types.h"
#include "test/types/to_gtest_types.h"

using DataTypeList = sycldnn::types::KernelDataTypes;
using GTestTypeList = sycldnn::types::ToGTestTypes<DataTypeList>::type;

template <typename DataType>
using MatmulBatch1Beta1TrueFalse = MatmulFixture<DataType, true, false>;
TYPED_TEST_SUITE(MatmulBatch1Beta1TrueFalse, GTestTypeList);
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M14xK14xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19855., 20312., 16737., 17194., 17651., 18108., 18565., 19022., 15831.,
      16288., 13225., 13682., 14139., 14596., 20325., 20796., 17171., 17642.,
      18113., 18584., 19055., 19526., 16285., 16756., 13643., 14114., 14585.,
      15056., 16763., 17184., 17541., 17962., 18383., 18804., 19225., 19646.,
      16291., 16712., 13485., 13906., 14327., 14748., 17233., 17668., 17975.,
      18410., 18845., 19280., 19715., 20150., 16745., 17180., 13903., 14338.,
      14773., 15208., 17703., 18152., 18409., 18858., 19307., 19756., 20205.,
      20654., 17135., 17584., 14257., 14706., 15155., 15604., 18109., 18572.,
      18779., 19242., 19705., 20168., 20631., 21094., 17589., 18052., 14675.,
      15138., 15601., 16064., 18579., 19056., 19213., 19690., 20167., 20644.,
      21121., 21598., 18043., 18520., 15093., 15570., 16047., 16524., 19049.,
      19540., 19647., 20138., 20629., 21120., 21611., 22102., 18497., 18988.,
      15511., 16002., 16493., 16984., 15871., 16312., 16305., 16746., 17187.,
      17628., 18069., 18510., 18887., 19328., 15737., 16178., 16619., 17060.,
      16341., 16796., 16675., 17130., 17585., 18040., 18495., 18950., 19277.,
      19732., 16091., 16546., 17001., 17456., 13227., 13632., 13461., 13866.,
      14271., 14676., 15081., 15486., 15699., 16104., 16445., 16850., 17255.,
      17660., 13697., 14116., 13895., 14314., 14733., 15152., 15571., 15990.,
      16153., 16572., 16863., 17282., 17701., 18120., 14167., 14600., 14329.,
      14762., 15195., 15628., 16061., 16494., 16607., 17040., 17281., 17714.,
      18147., 18580., 14637., 15084., 14763., 15210., 15657., 16104., 16551.,
      16998., 17061., 17508., 17635., 18082., 18529., 18976.};
  const int batches = 1;
  const int m = 14;
  const int k = 14;
  const int n = 14;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M14xK14xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15732., 16189., 16646., 17103., 13912., 14369., 14826., 15283., 12604.,
      13061., 13518., 13975., 11808., 12265., 12722., 16166., 16637., 17108.,
      17579., 14338., 14809., 15280., 15751., 13022., 13493., 13964., 14435.,
      12218., 12689., 13160., 16088., 16509., 16930., 17351., 13996., 14417.,
      14838., 15259., 12416., 12837., 13258., 13679., 11348., 11769., 12190.,
      16522., 16957., 17392., 17827., 14422., 14857., 15292., 15727., 12834.,
      13269., 13704., 14139., 11758., 12193., 12628., 16956., 17405., 17854.,
      18303., 14784., 15233., 15682., 16131., 13188., 13637., 14086., 14535.,
      12104., 12553., 13002., 17326., 17789., 18252., 18715., 15210., 15673.,
      16136., 16599., 13606., 14069., 14532., 14995., 12514., 12977., 13440.,
      17760., 18237., 18714., 19191., 15636., 16113., 16590., 17067., 14024.,
      14501., 14978., 15455., 12924., 13401., 13878., 18194., 18685., 19176.,
      19667., 16062., 16553., 17044., 17535., 14442., 14933., 15424., 15915.,
      13334., 13825., 14316., 14724., 15165., 15606., 16047., 16424., 16865.,
      17306., 17747., 14476., 14917., 15358., 15799., 13104., 13545., 13986.,
      15094., 15549., 16004., 16459., 16786., 17241., 17696., 18151., 14894.,
      15349., 15804., 16259., 13514., 13969., 14424., 15272., 15677., 16082.,
      16487., 16700., 17105., 17510., 17915., 14544., 14949., 15354., 15759.,
      12900., 13305., 13710., 15706., 16125., 16544., 16963., 17126., 17545.,
      17964., 18383., 14962., 15381., 15800., 16219., 13310., 13729., 14148.,
      16140., 16573., 17006., 17439., 17552., 17985., 18418., 18851., 15380.,
      15813., 16246., 16679., 13656., 14089., 14522., 16510., 16957., 17404.,
      17851., 17914., 18361., 18808., 19255., 15734., 16181., 16628., 17075.,
      14066., 14513., 14960.};
  const int batches = 1;
  const int m = 14;
  const int k = 14;
  const int n = 15;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M14xK14xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      43353., 44130., 44907., 45684., 46461., 47238., 48015., 48792., 49569.,
      50346., 51123., 51900., 52677., 53454., 54231., 55008., 44071., 44862.,
      45653., 46444., 47235., 48026., 48817., 49608., 50399., 51190., 51981.,
      52772., 53563., 54354., 55145., 55936., 42613., 43290., 43967., 44644.,
      45321., 45998., 46675., 47352., 48029., 48706., 49383., 50060., 50737.,
      51414., 52091., 52768., 43331., 44022., 44713., 45404., 46095., 46786.,
      47477., 48168., 48859., 49550., 50241., 50932., 51623., 52314., 53005.,
      53696., 44049., 44754., 45459., 46164., 46869., 47574., 48279., 48984.,
      49689., 50394., 51099., 51804., 52509., 53214., 53919., 54624., 44767.,
      45486., 46205., 46924., 47643., 48362., 49081., 49800., 50519., 51238.,
      51957., 52676., 53395., 54114., 54833., 55552., 45485., 46218., 46951.,
      47684., 48417., 49150., 49883., 50616., 51349., 52082., 52815., 53548.,
      54281., 55014., 55747., 56480., 46203., 46950., 47697., 48444., 49191.,
      49938., 50685., 51432., 52179., 52926., 53673., 54420., 55167., 55914.,
      56661., 57408., 46793., 47554., 48315., 49076., 49837., 50598., 51359.,
      52120., 52881., 53642., 54403., 55164., 55925., 56686., 57447., 58208.,
      47511., 48286., 49061., 49836., 50611., 51386., 52161., 52936., 53711.,
      54486., 55261., 56036., 56811., 57586., 58361., 59136., 48229., 49018.,
      49807., 50596., 51385., 52174., 52963., 53752., 54541., 55330., 56119.,
      56908., 57697., 58486., 59275., 60064., 48947., 49750., 50553., 51356.,
      52159., 52962., 53765., 54568., 55371., 56174., 56977., 57780., 58583.,
      59386., 60189., 60992., 49665., 50482., 51299., 52116., 52933., 53750.,
      54567., 55384., 56201., 57018., 57835., 58652., 59469., 60286., 61103.,
      61920., 50383., 51214., 52045., 52876., 53707., 54538., 55369., 56200.,
      57031., 57862., 58693., 59524., 60355., 61186., 62017., 62848.};
  const int batches = 1;
  const int m = 14;
  const int k = 14;
  const int n = 16;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 128.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M14xK15xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19880., 20342., 16772., 17234., 17696., 18158., 18620., 19082., 15896.,
      16358., 13300., 13762., 14224., 14686., 20355., 20832., 17213., 17690.,
      18167., 18644., 19121., 19598., 16363., 16840., 13733., 14210., 14687.,
      15164., 16798., 17226., 17590., 18018., 18446., 18874., 19302., 19730.,
      16382., 16810., 13590., 14018., 14446., 14874., 17273., 17716., 18031.,
      18474., 18917., 19360., 19803., 20246., 16849., 17292., 14023., 14466.,
      14909., 15352., 17748., 18206., 18472., 18930., 19388., 19846., 20304.,
      20762., 17252., 17710., 14392., 14850., 15308., 15766., 18159., 18632.,
      18849., 19322., 19795., 20268., 20741., 21214., 17719., 18192., 14825.,
      15298., 15771., 16244., 18634., 19122., 19290., 19778., 20266., 20754.,
      21242., 21730., 18186., 18674., 15258., 15746., 16234., 16722., 19109.,
      19612., 19731., 20234., 20737., 21240., 21743., 22246., 18653., 19156.,
      15691., 16194., 16697., 17200., 15936., 16390., 16396., 16850., 17304.,
      17758., 18212., 18666., 19056., 19510., 15932., 16386., 16840., 17294.,
      16411., 16880., 16773., 17242., 17711., 18180., 18649., 19118., 19459.,
      19928., 16301., 16770., 17239., 17708., 13302., 13722., 13566., 13986.,
      14406., 14826., 15246., 15666., 15894., 16314., 16670., 17090., 17510.,
      17930., 13777., 14212., 14007., 14442., 14877., 15312., 15747., 16182.,
      16361., 16796., 17103., 17538., 17973., 18408., 14252., 14702., 14448.,
      14898., 15348., 15798., 16248., 16698., 16828., 17278., 17536., 17986.,
      18436., 18886., 14727., 15192., 14889., 15354., 15819., 16284., 16749.,
      17214., 17295., 17760., 17905., 18370., 18835., 19300.};
  const int batches = 1;
  const int m = 14;
  const int k = 15;
  const int n = 14;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M14xK15xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15827., 16289., 16751., 17213., 14027., 14489., 14951., 15413., 12739.,
      13201., 13663., 14125., 11963., 12425., 12887., 16280., 16757., 17234.,
      17711., 14476., 14953., 15430., 15907., 13184., 13661., 14138., 14615.,
      12404., 12881., 13358., 16221., 16649., 17077., 17505., 14157., 14585.,
      15013., 15441., 12605., 13033., 13461., 13889., 11565., 11993., 12421.,
      16674., 17117., 17560., 18003., 14606., 15049., 15492., 15935., 13050.,
      13493., 13936., 14379., 12006., 12449., 12892., 17127., 17585., 18043.,
      18501., 14991., 15449., 15907., 16365., 13431., 13889., 14347., 14805.,
      12383., 12841., 13299., 17516., 17989., 18462., 18935., 15440., 15913.,
      16386., 16859., 13876., 14349., 14822., 15295., 12824., 13297., 13770.,
      17969., 18457., 18945., 19433., 15889., 16377., 16865., 17353., 14321.,
      14809., 15297., 15785., 13265., 13753., 14241., 18422., 18925., 19428.,
      19931., 16338., 16841., 17344., 17847., 14766., 15269., 15772., 16275.,
      13706., 14209., 14712., 14971., 15425., 15879., 16333., 16723., 17177.,
      17631., 18085., 14827., 15281., 15735., 16189., 13507., 13961., 14415.,
      15360., 15829., 16298., 16767., 17108., 17577., 18046., 18515., 15272.,
      15741., 16210., 16679., 13948., 14417., 14886., 15557., 15977., 16397.,
      16817., 17045., 17465., 17885., 18305., 14949., 15369., 15789., 16209.,
      13365., 13785., 14205., 16010., 16445., 16880., 17315., 17494., 17929.,
      18364., 18799., 15394., 15829., 16264., 16699., 13806., 14241., 14676.,
      16463., 16913., 17363., 17813., 17943., 18393., 18843., 19293., 15839.,
      16289., 16739., 17189., 14183., 14633., 15083., 16852., 17317., 17782.,
      18247., 18328., 18793., 19258., 19723., 16220., 16685., 17150., 17615.,
      14624., 15089., 15554.};
  const int batches = 1;
  const int m = 14;
  const int k = 15;
  const int n = 15;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M14xK15xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9918.,  10380., 10842., 11304., 11766., 12228., 12690., 13152., 13614.,
      14076., 14538., 15000., 15462., 15924., 16386., 16848., 10285., 10762.,
      11239., 11716., 12193., 12670., 13147., 13624., 14101., 14578., 15055.,
      15532., 16009., 16486., 16963., 17440., 9564.,  9992.,  10420., 10848.,
      11276., 11704., 12132., 12560., 12988., 13416., 13844., 14272., 14700.,
      15128., 15556., 15984., 9931.,  10374., 10817., 11260., 11703., 12146.,
      12589., 13032., 13475., 13918., 14361., 14804., 15247., 15690., 16133.,
      16576., 10234., 10692., 11150., 11608., 12066., 12524., 12982., 13440.,
      13898., 14356., 14814., 15272., 15730., 16188., 16646., 17104., 10601.,
      11074., 11547., 12020., 12493., 12966., 13439., 13912., 14385., 14858.,
      15331., 15804., 16277., 16750., 17223., 17696., 10968., 11456., 11944.,
      12432., 12920., 13408., 13896., 14384., 14872., 15360., 15848., 16336.,
      16824., 17312., 17800., 18288., 11335., 11838., 12341., 12844., 13347.,
      13850., 14353., 14856., 15359., 15862., 16365., 16868., 17371., 17874.,
      18377., 18880., 11574., 12028., 12482., 12936., 13390., 13844., 14298.,
      14752., 15206., 15660., 16114., 16568., 17022., 17476., 17930., 18384.,
      11941., 12410., 12879., 13348., 13817., 14286., 14755., 15224., 15693.,
      16162., 16631., 17100., 17569., 18038., 18507., 18976., 11220., 11640.,
      12060., 12480., 12900., 13320., 13740., 14160., 14580., 15000., 15420.,
      15840., 16260., 16680., 17100., 17520., 11587., 12022., 12457., 12892.,
      13327., 13762., 14197., 14632., 15067., 15502., 15937., 16372., 16807.,
      17242., 17677., 18112., 11890., 12340., 12790., 13240., 13690., 14140.,
      14590., 15040., 15490., 15940., 16390., 16840., 17290., 17740., 18190.,
      18640., 12257., 12722., 13187., 13652., 14117., 14582., 15047., 15512.,
      15977., 16442., 16907., 17372., 17837., 18302., 18767., 19232.};
  const int batches = 1;
  const int m = 14;
  const int k = 15;
  const int n = 16;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M14xK16xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20241., 20722., 17171., 17652., 18133., 18614., 19095., 19576., 16409.,
      16890., 13851., 14332., 14813., 15294., 20735., 21232., 17633., 18130.,
      18627., 19124., 19621., 20118., 16903., 17400., 14313., 14810., 15307.,
      15804., 17197., 17646., 18031., 18480., 18929., 19378., 19827., 20276.,
      16949., 17398., 14199., 14648., 15097., 15546., 17691., 18156., 18493.,
      18958., 19423., 19888., 20353., 20818., 17443., 17908., 14661., 15126.,
      15591., 16056., 18185., 18666., 18955., 19436., 19917., 20398., 20879.,
      21360., 17873., 18354., 15059., 15540., 16021., 16502., 18615., 19112.,
      19353., 19850., 20347., 20844., 21341., 21838., 18367., 18864., 15521.,
      16018., 16515., 17012., 19109., 19622., 19815., 20328., 20841., 21354.,
      21867., 22380., 18861., 19374., 15983., 16496., 17009., 17522., 19603.,
      20132., 20277., 20806., 21335., 21864., 22393., 22922., 19355., 19884.,
      16445., 16974., 17503., 18032., 16449., 16930., 16963., 17444., 17925.,
      18406., 18887., 19368., 19785., 20266., 16715., 17196., 17677., 18158.,
      16943., 17440., 17361., 17858., 18355., 18852., 19349., 19846., 20215.,
      20712., 17113., 17610., 18107., 18604., 13853., 14302., 14175., 14624.,
      15073., 15522., 15971., 16420., 16677., 17126., 17511., 17960., 18409.,
      18858., 14347., 14812., 14637., 15102., 15567., 16032., 16497., 16962.,
      17171., 17636., 17973., 18438., 18903., 19368., 14841., 15322., 15099.,
      15580., 16061., 16542., 17023., 17504., 17665., 18146., 18435., 18916.,
      19397., 19878., 15335., 15832., 15561., 16058., 16555., 17052., 17549.,
      18046., 18159., 18656., 18833., 19330., 19827., 20324.};
  const int batches = 1;
  const int m = 14;
  const int k = 16;
  const int n = 14;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M14xK16xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16473., 16954., 17435., 17916., 14749., 15230., 15711., 16192., 13537.,
      14018., 14499., 14980., 12837., 13318., 13799., 16960., 17457., 17954.,
      18451., 15236., 15733., 16230., 16727., 14024., 14521., 15018., 15515.,
      13324., 13821., 14318., 16935., 17384., 17833., 18282., 14955., 15404.,
      15853., 16302., 13487., 13936., 14385., 14834., 12531., 12980., 13429.,
      17422., 17887., 18352., 18817., 15442., 15907., 16372., 16837., 13974.,
      14439., 14904., 15369., 13018., 13483., 13948., 17909., 18390., 18871.,
      19352., 15865., 16346., 16827., 17308., 14397., 14878., 15359., 15840.,
      13441., 13922., 14403., 18332., 18829., 19326., 19823., 16352., 16849.,
      17346., 17843., 14884., 15381., 15878., 16375., 13928., 14425., 14922.,
      18819., 19332., 19845., 20358., 16839., 17352., 17865., 18378., 15371.,
      15884., 16397., 16910., 14415., 14928., 15441., 19306., 19835., 20364.,
      20893., 17326., 17855., 18384., 18913., 15858., 16387., 16916., 17445.,
      14902., 15431., 15960., 15889., 16370., 16851., 17332., 17749., 18230.,
      18711., 19192., 15961., 16442., 16923., 17404., 14749., 15230., 15711.,
      16312., 16809., 17306., 17803., 18172., 18669., 19166., 19663., 16448.,
      16945., 17442., 17939., 15236., 15733., 16230., 16543., 16992., 17441.,
      17890., 18147., 18596., 19045., 19494., 16167., 16616., 17065., 17514.,
      14699., 15148., 15597., 17030., 17495., 17960., 18425., 18634., 19099.,
      19564., 20029., 16654., 17119., 17584., 18049., 15186., 15651., 16116.,
      17517., 17998., 18479., 18960., 19121., 19602., 20083., 20564., 17141.,
      17622., 18103., 18584., 15609., 16090., 16571., 17940., 18437., 18934.,
      19431., 19544., 20041., 20538., 21035., 17564., 18061., 18558., 19055.,
      16096., 16593., 17090.};
  const int batches = 1;
  const int m = 14;
  const int k = 16;
  const int n = 15;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M14xK16xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10849., 11330., 11811., 12292., 12773., 13254., 13735., 14216., 14697.,
      15178., 15659., 16140., 16621., 17102., 17583., 18064., 11265., 11762.,
      12259., 12756., 13253., 13750., 14247., 14744., 15241., 15738., 16235.,
      16732., 17229., 17726., 18223., 18720., 10593., 11042., 11491., 11940.,
      12389., 12838., 13287., 13736., 14185., 14634., 15083., 15532., 15981.,
      16430., 16879., 17328., 11009., 11474., 11939., 12404., 12869., 13334.,
      13799., 14264., 14729., 15194., 15659., 16124., 16589., 17054., 17519.,
      17984., 11361., 11842., 12323., 12804., 13285., 13766., 14247., 14728.,
      15209., 15690., 16171., 16652., 17133., 17614., 18095., 18576., 11777.,
      12274., 12771., 13268., 13765., 14262., 14759., 15256., 15753., 16250.,
      16747., 17244., 17741., 18238., 18735., 19232., 12193., 12706., 13219.,
      13732., 14245., 14758., 15271., 15784., 16297., 16810., 17323., 17836.,
      18349., 18862., 19375., 19888., 12609., 13138., 13667., 14196., 14725.,
      15254., 15783., 16312., 16841., 17370., 17899., 18428., 18957., 19486.,
      20015., 20544., 12897., 13378., 13859., 14340., 14821., 15302., 15783.,
      16264., 16745., 17226., 17707., 18188., 18669., 19150., 19631., 20112.,
      13313., 13810., 14307., 14804., 15301., 15798., 16295., 16792., 17289.,
      17786., 18283., 18780., 19277., 19774., 20271., 20768., 12641., 13090.,
      13539., 13988., 14437., 14886., 15335., 15784., 16233., 16682., 17131.,
      17580., 18029., 18478., 18927., 19376., 13057., 13522., 13987., 14452.,
      14917., 15382., 15847., 16312., 16777., 17242., 17707., 18172., 18637.,
      19102., 19567., 20032., 13409., 13890., 14371., 14852., 15333., 15814.,
      16295., 16776., 17257., 17738., 18219., 18700., 19181., 19662., 20143.,
      20624., 13825., 14322., 14819., 15316., 15813., 16310., 16807., 17304.,
      17801., 18298., 18795., 19292., 19789., 20286., 20783., 21280.};
  const int batches = 1;
  const int m = 14;
  const int k = 16;
  const int n = 16;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M15xK14xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15732., 16152., 16060., 16480., 16900., 17320., 17740., 18160., 14676.,
      15096., 15260., 15680., 16100., 16520., 16202., 16636., 16494., 16928.,
      17362., 17796., 18230., 18664., 15130., 15564., 15678., 16112., 16546.,
      16980., 16672., 17120., 16928., 17376., 17824., 18272., 18720., 19168.,
      15584., 16032., 16096., 16544., 16992., 17440., 17142., 17604., 17362.,
      17824., 18286., 18748., 19210., 19672., 16038., 16500., 16514., 16976.,
      17438., 17900., 13964., 14376., 14020., 14432., 14844., 15256., 15668.,
      16080., 16364., 16776., 16676., 17088., 17500., 17912., 14370., 14796.,
      14390., 14816., 15242., 15668., 16094., 16520., 16818., 17244., 17094.,
      17520., 17946., 18372., 14840., 15280., 14824., 15264., 15704., 16144.,
      16584., 17024., 17272., 17712., 17512., 17952., 18392., 18832., 15310.,
      15764., 15258., 15712., 16166., 16620., 17074., 17528., 17726., 18180.,
      17930., 18384., 18838., 19292., 12644., 13048., 12428., 12832., 13236.,
      13640., 14044., 14448., 14532., 14936., 14572., 14976., 15380., 15784.,
      13114., 13532., 12798., 13216., 13634., 14052., 14470., 14888., 14922.,
      15340., 14926., 15344., 15762., 16180., 13520., 13952., 13232., 13664.,
      14096., 14528., 14960., 15392., 15376., 15808., 15344., 15776., 16208.,
      16640., 13990., 14436., 13666., 14112., 14558., 15004., 15450., 15896.,
      15830., 16276., 15762., 16208., 16654., 17100., 11836., 12232., 11348.,
      11744., 12140., 12536., 12932., 13328., 13148., 13544., 12916., 13312.,
      13708., 14104., 12306., 12716., 11782., 12192., 12602., 13012., 13422.,
      13832., 13602., 14012., 13270., 13680., 14090., 14500., 12712., 13136.,
      12152., 12576., 13000., 13424., 13848., 14272., 13992., 14416., 13688.,
      14112., 14536., 14960.};
  const int batches = 1;
  const int m = 15;
  const int k = 14;
  const int n = 14;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M15xK14xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      17804., 18224., 18644., 19064., 15580., 16000., 16420., 16840., 13612.,
      14032., 14452., 14872., 11900., 12320., 12740., 18238., 18672., 19106.,
      19540., 16006., 16440., 16874., 17308., 14030., 14464., 14898., 15332.,
      12310., 12744., 13178., 18672., 19120., 19568., 20016., 16432., 16880.,
      17328., 17776., 14448., 14896., 15344., 15792., 12720., 13168., 13616.,
      19106., 19568., 20030., 20492., 16858., 17320., 17782., 18244., 14866.,
      15328., 15790., 16252., 13130., 13592., 14054., 15636., 16048., 16460.,
      16872., 17156., 17568., 17980., 18392., 14900., 15312., 15724., 16136.,
      12900., 13312., 13724., 16006., 16432., 16858., 17284., 17582., 18008.,
      18434., 18860., 15318., 15744., 16170., 16596., 13310., 13736., 14162.,
      16440., 16880., 17320., 17760., 18008., 18448., 18888., 19328., 15736.,
      16176., 16616., 17056., 13720., 14160., 14600., 16874., 17328., 17782.,
      18236., 18434., 18888., 19342., 19796., 16154., 16608., 17062., 17516.,
      14130., 14584., 15038., 13660., 14064., 14468., 14872., 14956., 15360.,
      15764., 16168., 16444., 16848., 17252., 17656., 14156., 14560., 14964.,
      14030., 14448., 14866., 15284., 15318., 15736., 16154., 16572., 16862.,
      17280., 17698., 18116., 14566., 14984., 15402., 14464., 14896., 15328.,
      15760., 15744., 16176., 16608., 17040., 17280., 17712., 18144., 18576.,
      14976., 15408., 15840., 14898., 15344., 15790., 16236., 16170., 16616.,
      17062., 17508., 17698., 18144., 18590., 19036., 15386., 15832., 16278.,
      11940., 12336., 12732., 13128., 12948., 13344., 13740., 14136., 14212.,
      14608., 15004., 15400., 15668., 16064., 16460., 12310., 12720., 13130.,
      13540., 13310., 13720., 14130., 14540., 14566., 14976., 15386., 15796.,
      16078., 16488., 16898., 12744., 13168., 13592., 14016., 13736., 14160.,
      14584., 15008., 14984., 15408., 15832., 16256., 16488., 16912., 17336.};
  const int batches = 1;
  const int m = 15;
  const int k = 14;
  const int n = 15;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M15xK14xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9700.,  10120., 10540., 10960., 11380., 11800., 12220., 12640., 13060.,
      13480., 13900., 14320., 14740., 15160., 15580., 16000., 10034., 10468.,
      10902., 11336., 11770., 12204., 12638., 13072., 13506., 13940., 14374.,
      14808., 15242., 15676., 16110., 16544., 10368., 10816., 11264., 11712.,
      12160., 12608., 13056., 13504., 13952., 14400., 14848., 15296., 15744.,
      16192., 16640., 17088., 10702., 11164., 11626., 12088., 12550., 13012.,
      13474., 13936., 14398., 14860., 15322., 15784., 16246., 16708., 17170.,
      17632., 10908., 11320., 11732., 12144., 12556., 12968., 13380., 13792.,
      14204., 14616., 15028., 15440., 15852., 16264., 16676., 17088., 11242.,
      11668., 12094., 12520., 12946., 13372., 13798., 14224., 14650., 15076.,
      15502., 15928., 16354., 16780., 17206., 17632., 11576., 12016., 12456.,
      12896., 13336., 13776., 14216., 14656., 15096., 15536., 15976., 16416.,
      16856., 17296., 17736., 18176., 11910., 12364., 12818., 13272., 13726.,
      14180., 14634., 15088., 15542., 15996., 16450., 16904., 17358., 17812.,
      18266., 18720., 12116., 12520., 12924., 13328., 13732., 14136., 14540.,
      14944., 15348., 15752., 16156., 16560., 16964., 17368., 17772., 18176.,
      12450., 12868., 13286., 13704., 14122., 14540., 14958., 15376., 15794.,
      16212., 16630., 17048., 17466., 17884., 18302., 18720., 12784., 13216.,
      13648., 14080., 14512., 14944., 15376., 15808., 16240., 16672., 17104.,
      17536., 17968., 18400., 18832., 19264., 13118., 13564., 14010., 14456.,
      14902., 15348., 15794., 16240., 16686., 17132., 17578., 18024., 18470.,
      18916., 19362., 19808., 13324., 13720., 14116., 14512., 14908., 15304.,
      15700., 16096., 16492., 16888., 17284., 17680., 18076., 18472., 18868.,
      19264., 13658., 14068., 14478., 14888., 15298., 15708., 16118., 16528.,
      16938., 17348., 17758., 18168., 18578., 18988., 19398., 19808., 13992.,
      14416., 14840., 15264., 15688., 16112., 16536., 16960., 17384., 17808.,
      18232., 18656., 19080., 19504., 19928., 20352.};
  const int batches = 1;
  const int m = 15;
  const int k = 14;
  const int n = 16;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M15xK15xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15827., 16266., 16193., 16632., 17071., 17510., 17949., 18388., 14923.,
      15362., 15545., 15984., 16423., 16862., 16302., 16756., 16634., 17088.,
      17542., 17996., 18450., 18904., 15390., 15844., 15978., 16432., 16886.,
      17340., 16777., 17246., 17075., 17544., 18013., 18482., 18951., 19420.,
      15857., 16326., 16411., 16880., 17349., 17818., 17252., 17736., 17516.,
      18000., 18484., 18968., 19452., 19936., 16324., 16808., 16844., 17328.,
      17812., 18296., 14079., 14514., 14181., 14616., 15051., 15486., 15921.,
      16356., 16663., 17098., 17021., 17456., 17891., 18326., 14490., 14940.,
      14558., 15008., 15458., 15908., 16358., 16808., 17130., 17580., 17454.,
      17904., 18354., 18804., 14965., 15430., 14999., 15464., 15929., 16394.,
      16859., 17324., 17597., 18062., 17887., 18352., 18817., 19282., 15440.,
      15920., 15440., 15920., 16400., 16880., 17360., 17840., 18064., 18544.,
      18320., 18800., 19280., 19760., 12779., 13210., 12617., 13048., 13479.,
      13910., 14341., 14772., 14883., 15314., 14977., 15408., 15839., 16270.,
      13254., 13700., 12994., 13440., 13886., 14332., 14778., 15224., 15286.,
      15732., 15346., 15792., 16238., 16684., 13665., 14126., 13435., 13896.,
      14357., 14818., 15279., 15740., 15753., 16214., 15779., 16240., 16701.,
      17162., 14140., 14616., 13876., 14352., 14828., 15304., 15780., 16256.,
      16220., 16696., 16212., 16688., 17164., 17640., 11991., 12418., 11565.,
      11992., 12419., 12846., 13273., 13700., 13551., 13978., 13381., 13808.,
      14235., 14662., 12466., 12908., 12006., 12448., 12890., 13332., 13774.,
      14216., 14018., 14460., 13750., 14192., 14634., 15076., 12877., 13334.,
      12383., 12840., 13297., 13754., 14211., 14668., 14421., 14878., 14183.,
      14640., 15097., 15554.};
  const int batches = 1;
  const int m = 15;
  const int k = 15;
  const int n = 14;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M15xK15xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18165., 18604., 19043., 19482., 16017., 16456., 16895., 17334., 14125.,
      14564., 15003., 15442., 12489., 12928., 13367., 18618., 19072., 19526.,
      19980., 16466., 16920., 17374., 17828., 14570., 15024., 15478., 15932.,
      12930., 13384., 13838., 19071., 19540., 20009., 20478., 16915., 17384.,
      17853., 18322., 15015., 15484., 15953., 16422., 13371., 13840., 14309.,
      19524., 20008., 20492., 20976., 17364., 17848., 18332., 18816., 15460.,
      15944., 16428., 16912., 13812., 14296., 14780., 16073., 16508., 16943.,
      17378., 17685., 18120., 18555., 18990., 15521., 15956., 16391., 16826.,
      13613., 14048., 14483., 16462., 16912., 17362., 17812., 18134., 18584.,
      19034., 19484., 15966., 16416., 16866., 17316., 14054., 14504., 14954.,
      16915., 17380., 17845., 18310., 18583., 19048., 19513., 19978., 16411.,
      16876., 17341., 17806., 14495., 14960., 15425., 17368., 17848., 18328.,
      18808., 19032., 19512., 19992., 20472., 16856., 17336., 17816., 18296.,
      14936., 15416., 15896., 14173., 14604., 15035., 15466., 15577., 16008.,
      16439., 16870., 17173., 17604., 18035., 18466., 14993., 15424., 15855.,
      14562., 15008., 15454., 15900., 15962., 16408., 16854., 17300., 17618.,
      18064., 18510., 18956., 15434., 15880., 16326., 15015., 15476., 15937.,
      16398., 16411., 16872., 17333., 17794., 18063., 18524., 18985., 19446.,
      15875., 16336., 16797., 15468., 15944., 16420., 16896., 16860., 17336.,
      17812., 18288., 18508., 18984., 19460., 19936., 16316., 16792., 17268.,
      12529., 12956., 13383., 13810., 13661., 14088., 14515., 14942., 15049.,
      15476., 15903., 16330., 16629., 17056., 17483., 12918., 13360., 13802.,
      14244., 14046., 14488., 14930., 15372., 15430., 15872., 16314., 16756.,
      17070., 17512., 17954., 13371., 13828., 14285., 14742., 14495., 14952.,
      15409., 15866., 15875., 16332., 16789., 17246., 17511., 17968., 18425.};
  const int batches = 1;
  const int m = 15;
  const int k = 15;
  const int n = 15;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M15xK15xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10327., 10766., 11205., 11644., 12083., 12522., 12961., 13400., 13839.,
      14278., 14717., 15156., 15595., 16034., 16473., 16912., 10694., 11148.,
      11602., 12056., 12510., 12964., 13418., 13872., 14326., 14780., 15234.,
      15688., 16142., 16596., 17050., 17504., 11061., 11530., 11999., 12468.,
      12937., 13406., 13875., 14344., 14813., 15282., 15751., 16220., 16689.,
      17158., 17627., 18096., 11428., 11912., 12396., 12880., 13364., 13848.,
      14332., 14816., 15300., 15784., 16268., 16752., 17236., 17720., 18204.,
      18688., 11667., 12102., 12537., 12972., 13407., 13842., 14277., 14712.,
      15147., 15582., 16017., 16452., 16887., 17322., 17757., 18192., 12034.,
      12484., 12934., 13384., 13834., 14284., 14734., 15184., 15634., 16084.,
      16534., 16984., 17434., 17884., 18334., 18784., 12401., 12866., 13331.,
      13796., 14261., 14726., 15191., 15656., 16121., 16586., 17051., 17516.,
      17981., 18446., 18911., 19376., 12768., 13248., 13728., 14208., 14688.,
      15168., 15648., 16128., 16608., 17088., 17568., 18048., 18528., 19008.,
      19488., 19968., 13007., 13438., 13869., 14300., 14731., 15162., 15593.,
      16024., 16455., 16886., 17317., 17748., 18179., 18610., 19041., 19472.,
      13374., 13820., 14266., 14712., 15158., 15604., 16050., 16496., 16942.,
      17388., 17834., 18280., 18726., 19172., 19618., 20064., 13741., 14202.,
      14663., 15124., 15585., 16046., 16507., 16968., 17429., 17890., 18351.,
      18812., 19273., 19734., 20195., 20656., 14108., 14584., 15060., 15536.,
      16012., 16488., 16964., 17440., 17916., 18392., 18868., 19344., 19820.,
      20296., 20772., 21248., 14347., 14774., 15201., 15628., 16055., 16482.,
      16909., 17336., 17763., 18190., 18617., 19044., 19471., 19898., 20325.,
      20752., 14714., 15156., 15598., 16040., 16482., 16924., 17366., 17808.,
      18250., 18692., 19134., 19576., 20018., 20460., 20902., 21344., 15081.,
      15538., 15995., 16452., 16909., 17366., 17823., 18280., 18737., 19194.,
      19651., 20108., 20565., 21022., 21479., 21936.};
  const int batches = 1;
  const int m = 15;
  const int k = 15;
  const int n = 16;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M15xK16xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16473., 16946., 16907., 17380., 17853., 18326., 18799., 19272., 15841.,
      16314., 16531., 17004., 17477., 17950., 16967., 17456., 17369., 17858.,
      18347., 18836., 19325., 19814., 16335., 16824., 16993., 17482., 17971.,
      18460., 17461., 17966., 17831., 18336., 18841., 19346., 19851., 20356.,
      16829., 17334., 17455., 17960., 18465., 18970., 17955., 18476., 18293.,
      18814., 19335., 19856., 20377., 20898., 17323., 17844., 17917., 18438.,
      18959., 19480., 14801., 15274., 14979., 15452., 15925., 16398., 16871.,
      17344., 17689., 18162., 18123., 18596., 19069., 19542., 15231., 15720.,
      15377., 15866., 16355., 16844., 17333., 17822., 18183., 18672., 18585.,
      19074., 19563., 20052., 15725., 16230., 15839., 16344., 16849., 17354.,
      17859., 18364., 18677., 19182., 19047., 19552., 20057., 20562., 16219.,
      16740., 16301., 16822., 17343., 17864., 18385., 18906., 19171., 19692.,
      19509., 20030., 20551., 21072., 13577., 14050., 13499., 13972., 14445.,
      14918., 15391., 15864., 16017., 16490., 16195., 16668., 17141., 17614.,
      14071., 14560., 13897., 14386., 14875., 15364., 15853., 16342., 16447.,
      16936., 16593., 17082., 17571., 18060., 14501., 15006., 14359., 14864.,
      15369., 15874., 16379., 16884., 16941., 17446., 17055., 17560., 18065.,
      18570., 14995., 15516., 14821., 15342., 15863., 16384., 16905., 17426.,
      17435., 17956., 17517., 18038., 18559., 19080., 12865., 13338., 12531.,
      13004., 13477., 13950., 14423., 14896., 14793., 15266., 14715., 15188.,
      15661., 16134., 13359., 13848., 12993., 13482., 13971., 14460., 14949.,
      15438., 15287., 15776., 15113., 15602., 16091., 16580., 13789., 14294.,
      13391., 13896., 14401., 14906., 15411., 15916., 15717., 16222., 15575.,
      16080., 16585., 17090.};
  const int batches = 1;
  const int m = 15;
  const int k = 16;
  const int n = 14;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M15xK16xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      19321., 19794., 20267., 20740., 17309., 17782., 18255., 18728., 15553.,
      16026., 16499., 16972., 14053., 14526., 14999., 19808., 20297., 20786.,
      21275., 17796., 18285., 18774., 19263., 16040., 16529., 17018., 17507.,
      14540., 15029., 15518., 20295., 20800., 21305., 21810., 18283., 18788.,
      19293., 19798., 16527., 17032., 17537., 18042., 15027., 15532., 16037.,
      20782., 21303., 21824., 22345., 18770., 19291., 19812., 20333., 17014.,
      17535., 18056., 18577., 15514., 16035., 16556., 17365., 17838., 18311.,
      18784., 19129., 19602., 20075., 20548., 17117., 17590., 18063., 18536.,
      15361., 15834., 16307., 17788., 18277., 18766., 19255., 19616., 20105.,
      20594., 21083., 17604., 18093., 18582., 19071., 15848., 16337., 16826.,
      18275., 18780., 19285., 19790., 20103., 20608., 21113., 21618., 18091.,
      18596., 19101., 19606., 16335., 16840., 17345., 18762., 19283., 19804.,
      20325., 20590., 21111., 21632., 22153., 18578., 19099., 19620., 20141.,
      16822., 17343., 17864., 15601., 16074., 16547., 17020., 17173., 17646.,
      18119., 18592., 18937., 19410., 19883., 20356., 16925., 17398., 17871.,
      16024., 16513., 17002., 17491., 17596., 18085., 18574., 19063., 19424.,
      19913., 20402., 20891., 17412., 17901., 18390., 16511., 17016., 17521.,
      18026., 18083., 18588., 19093., 19598., 19911., 20416., 20921., 21426.,
      17899., 18404., 18909., 16998., 17519., 18040., 18561., 18570., 19091.,
      19612., 20133., 20398., 20919., 21440., 21961., 18386., 18907., 19428.,
      14093., 14566., 15039., 15512., 15409., 15882., 16355., 16828., 16981.,
      17454., 17927., 18400., 18745., 19218., 19691., 14516., 15005., 15494.,
      15983., 15832., 16321., 16810., 17299., 17404., 17893., 18382., 18871.,
      19232., 19721., 20210., 15003., 15508., 16013., 16518., 16319., 16824.,
      17329., 17834., 17891., 18396., 18901., 19406., 19719., 20224., 20729.};
  const int batches = 1;
  const int m = 15;
  const int k = 16;
  const int n = 15;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M15xK16xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11993., 12466., 12939., 13412., 13885., 14358., 14831., 15304., 15777.,
      16250., 16723., 17196., 17669., 18142., 18615., 19088., 12409., 12898.,
      13387., 13876., 14365., 14854., 15343., 15832., 16321., 16810., 17299.,
      17788., 18277., 18766., 19255., 19744., 12825., 13330., 13835., 14340.,
      14845., 15350., 15855., 16360., 16865., 17370., 17875., 18380., 18885.,
      19390., 19895., 20400., 13241., 13762., 14283., 14804., 15325., 15846.,
      16367., 16888., 17409., 17930., 18451., 18972., 19493., 20014., 20535.,
      21056., 13529., 14002., 14475., 14948., 15421., 15894., 16367., 16840.,
      17313., 17786., 18259., 18732., 19205., 19678., 20151., 20624., 13945.,
      14434., 14923., 15412., 15901., 16390., 16879., 17368., 17857., 18346.,
      18835., 19324., 19813., 20302., 20791., 21280., 14361., 14866., 15371.,
      15876., 16381., 16886., 17391., 17896., 18401., 18906., 19411., 19916.,
      20421., 20926., 21431., 21936., 14777., 15298., 15819., 16340., 16861.,
      17382., 17903., 18424., 18945., 19466., 19987., 20508., 21029., 21550.,
      22071., 22592., 15065., 15538., 16011., 16484., 16957., 17430., 17903.,
      18376., 18849., 19322., 19795., 20268., 20741., 21214., 21687., 22160.,
      15481., 15970., 16459., 16948., 17437., 17926., 18415., 18904., 19393.,
      19882., 20371., 20860., 21349., 21838., 22327., 22816., 15897., 16402.,
      16907., 17412., 17917., 18422., 18927., 19432., 19937., 20442., 20947.,
      21452., 21957., 22462., 22967., 23472., 16313., 16834., 17355., 17876.,
      18397., 18918., 19439., 19960., 20481., 21002., 21523., 22044., 22565.,
      23086., 23607., 24128., 16601., 17074., 17547., 18020., 18493., 18966.,
      19439., 19912., 20385., 20858., 21331., 21804., 22277., 22750., 23223.,
      23696., 17017., 17506., 17995., 18484., 18973., 19462., 19951., 20440.,
      20929., 21418., 21907., 22396., 22885., 23374., 23863., 24352., 17433.,
      17938., 18443., 18948., 19453., 19958., 20463., 20968., 21473., 21978.,
      22483., 22988., 23493., 23998., 24503., 25008.};
  const int batches = 1;
  const int m = 15;
  const int k = 16;
  const int n = 16;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M16xK14xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      43353., 44056., 42583., 43286., 43989., 44692., 45395., 46098., 46801.,
      47504., 48207., 48910., 49613., 50316., 44143., 44860., 43273., 43990.,
      44707., 45424., 46141., 46858., 47575., 48292., 49009., 49726., 50443.,
      51160., 44933., 45664., 43963., 44694., 45425., 46156., 46887., 47618.,
      48349., 49080., 49811., 50542., 51273., 52004., 45723., 46468., 44653.,
      45398., 46143., 46888., 47633., 48378., 49123., 49868., 50613., 51358.,
      52103., 52848., 46513., 47272., 45343., 46102., 46861., 47620., 48379.,
      49138., 49897., 50656., 51415., 52174., 52933., 53692., 47303., 48076.,
      46033., 46806., 47579., 48352., 49125., 49898., 50671., 51444., 52217.,
      52990., 53763., 54536., 48093., 48880., 46723., 47510., 48297., 49084.,
      49871., 50658., 51445., 52232., 53019., 53806., 54593., 55380., 48883.,
      49684., 47413., 48214., 49015., 49816., 50617., 51418., 52219., 53020.,
      53821., 54622., 55423., 56224., 49673., 50488., 48103., 48918., 49733.,
      50548., 51363., 52178., 52993., 53808., 54623., 55438., 56253., 57068.,
      50463., 51292., 48665., 49494., 50323., 51152., 51981., 52810., 53639.,
      54468., 55297., 56126., 56955., 57784., 51125., 51968., 49355., 50198.,
      51041., 51884., 52727., 53570., 54413., 55256., 56099., 56942., 57785.,
      58628., 51915., 52772., 50045., 50902., 51759., 52616., 53473., 54330.,
      55187., 56044., 56901., 57758., 58615., 59472., 52705., 53576., 50735.,
      51606., 52477., 53348., 54219., 55090., 55961., 56832., 57703., 58574.,
      59445., 60316., 53495., 54380., 51425., 52310., 53195., 54080., 54965.,
      55850., 56735., 57620., 58505., 59390., 60275., 61160., 54285., 55184.,
      52115., 53014., 53913., 54812., 55711., 56610., 57509., 58408., 59307.,
      60206., 61105., 62004., 55075., 55988., 52805., 53718., 54631., 55544.,
      56457., 57370., 58283., 59196., 60109., 61022., 61935., 62848.};
  const int batches = 1;
  const int m = 16;
  const int k = 14;
  const int n = 14;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 128.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M16xK14xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9700.,  10019., 10338., 10657., 10912., 11231., 11550., 11869., 12124.,
      12443., 12762., 13081., 13336., 13655., 13974., 10134., 10467., 10800.,
      11133., 11338., 11671., 12004., 12337., 12542., 12875., 13208., 13541.,
      13746., 14079., 14412., 10568., 10915., 11262., 11609., 11764., 12111.,
      12458., 12805., 12960., 13307., 13654., 14001., 14156., 14503., 14850.,
      11002., 11363., 11724., 12085., 12190., 12551., 12912., 13273., 13378.,
      13739., 14100., 14461., 14566., 14927., 15288., 11436., 11811., 12186.,
      12561., 12552., 12927., 13302., 13677., 13732., 14107., 14482., 14857.,
      14912., 15287., 15662., 11806., 12195., 12584., 12973., 12978., 13367.,
      13756., 14145., 14150., 14539., 14928., 15317., 15322., 15711., 16100.,
      12240., 12643., 13046., 13449., 13404., 13807., 14210., 14613., 14568.,
      14971., 15374., 15777., 15732., 16135., 16538., 12674., 13091., 13508.,
      13925., 13830., 14247., 14664., 15081., 14986., 15403., 15820., 16237.,
      16142., 16559., 16976., 13108., 13539., 13970., 14401., 14256., 14687.,
      15118., 15549., 15340., 15771., 16202., 16633., 16488., 16919., 17350.,
      13478., 13923., 14368., 14813., 14618., 15063., 15508., 15953., 15758.,
      16203., 16648., 17093., 16898., 17343., 17788., 13912., 14371., 14830.,
      15289., 15044., 15503., 15962., 16421., 16176., 16635., 17094., 17553.,
      17308., 17767., 18226., 14346., 14819., 15292., 15765., 15470., 15943.,
      16416., 16889., 16594., 17067., 17540., 18013., 17718., 18191., 18664.,
      14780., 15267., 15754., 16241., 15896., 16383., 16870., 17357., 17012.,
      17499., 17986., 18473., 18064., 18551., 19038., 15150., 15651., 16152.,
      16653., 16258., 16759., 17260., 17761., 17366., 17867., 18368., 18869.,
      18474., 18975., 19476., 15584., 16099., 16614., 17129., 16684., 17199.,
      17714., 18229., 17784., 18299., 18814., 19329., 18884., 19399., 19914.,
      16018., 16547., 17076., 17605., 17110., 17639., 18168., 18697., 18202.,
      18731., 19260., 19789., 19294., 19823., 20352.};
  const int batches = 1;
  const int m = 16;
  const int k = 14;
  const int n = 15;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M16xK14xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11631., 11950., 12269., 12588., 12907., 13226., 13545., 13864., 14183.,
      14502., 14821., 15140., 15459., 15778., 16097., 16416., 11965., 12298.,
      12631., 12964., 13297., 13630., 13963., 14296., 14629., 14962., 15295.,
      15628., 15961., 16294., 16627., 16960., 12299., 12646., 12993., 13340.,
      13687., 14034., 14381., 14728., 15075., 15422., 15769., 16116., 16463.,
      16810., 17157., 17504., 12633., 12994., 13355., 13716., 14077., 14438.,
      14799., 15160., 15521., 15882., 16243., 16604., 16965., 17326., 17687.,
      18048., 12903., 13278., 13653., 14028., 14403., 14778., 15153., 15528.,
      15903., 16278., 16653., 17028., 17403., 17778., 18153., 18528., 13237.,
      13626., 14015., 14404., 14793., 15182., 15571., 15960., 16349., 16738.,
      17127., 17516., 17905., 18294., 18683., 19072., 13571., 13974., 14377.,
      14780., 15183., 15586., 15989., 16392., 16795., 17198., 17601., 18004.,
      18407., 18810., 19213., 19616., 13905., 14322., 14739., 15156., 15573.,
      15990., 16407., 16824., 17241., 17658., 18075., 18492., 18909., 19326.,
      19743., 20160., 14175., 14606., 15037., 15468., 15899., 16330., 16761.,
      17192., 17623., 18054., 18485., 18916., 19347., 19778., 20209., 20640.,
      14509., 14954., 15399., 15844., 16289., 16734., 17179., 17624., 18069.,
      18514., 18959., 19404., 19849., 20294., 20739., 21184., 14843., 15302.,
      15761., 16220., 16679., 17138., 17597., 18056., 18515., 18974., 19433.,
      19892., 20351., 20810., 21269., 21728., 15177., 15650., 16123., 16596.,
      17069., 17542., 18015., 18488., 18961., 19434., 19907., 20380., 20853.,
      21326., 21799., 22272., 15447., 15934., 16421., 16908., 17395., 17882.,
      18369., 18856., 19343., 19830., 20317., 20804., 21291., 21778., 22265.,
      22752., 15781., 16282., 16783., 17284., 17785., 18286., 18787., 19288.,
      19789., 20290., 20791., 21292., 21793., 22294., 22795., 23296., 16115.,
      16630., 17145., 17660., 18175., 18690., 19205., 19720., 20235., 20750.,
      21265., 21780., 22295., 22810., 23325., 23840., 16449., 16978., 17507.,
      18036., 18565., 19094., 19623., 20152., 20681., 21210., 21739., 22268.,
      22797., 23326., 23855., 24384.};
  const int batches = 1;
  const int m = 16;
  const int k = 14;
  const int n = 16;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M16xK15xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9918.,  10270., 9534.,  9886.,  10238., 10590., 10942., 11294., 11582.,
      11934., 11198., 11550., 11902., 12254., 10393., 10760., 9975.,  10342.,
      10709., 11076., 11443., 11810., 12049., 12416., 11631., 11998., 12365.,
      12732., 10868., 11250., 10416., 10798., 11180., 11562., 11944., 12326.,
      12516., 12898., 12064., 12446., 12828., 13210., 11343., 11740., 10857.,
      11254., 11651., 12048., 12445., 12842., 12983., 13380., 12497., 12894.,
      13291., 13688., 11818., 12230., 11298., 11710., 12122., 12534., 12946.,
      13358., 13386., 13798., 12866., 13278., 13690., 14102., 12229., 12656.,
      11675., 12102., 12529., 12956., 13383., 13810., 13853., 14280., 13299.,
      13726., 14153., 14580., 12704., 13146., 12116., 12558., 13000., 13442.,
      13884., 14326., 14320., 14762., 13732., 14174., 14616., 15058., 13179.,
      13636., 12557., 13014., 13471., 13928., 14385., 14842., 14787., 15244.,
      14165., 14622., 15079., 15536., 13654., 14126., 12998., 13470., 13942.,
      14414., 14886., 15358., 15254., 15726., 14598., 15070., 15542., 16014.,
      14129., 14616., 13375., 13862., 14349., 14836., 15323., 15810., 15657.,
      16144., 14967., 15454., 15941., 16428., 14540., 15042., 13816., 14318.,
      14820., 15322., 15824., 16326., 16124., 16626., 15400., 15902., 16404.,
      16906., 15015., 15532., 14257., 14774., 15291., 15808., 16325., 16842.,
      16591., 17108., 15833., 16350., 16867., 17384., 15490., 16022., 14698.,
      15230., 15762., 16294., 16826., 17358., 17058., 17590., 16266., 16798.,
      17330., 17862., 15965., 16512., 15139., 15686., 16233., 16780., 17327.,
      17874., 17525., 18072., 16635., 17182., 17729., 18276., 16376., 16938.,
      15516., 16078., 16640., 17202., 17764., 18326., 17928., 18490., 17068.,
      17630., 18192., 18754., 16851., 17428., 15957., 16534., 17111., 17688.,
      18265., 18842., 18395., 18972., 17501., 18078., 18655., 19232.};
  const int batches = 1;
  const int m = 16;
  const int k = 15;
  const int n = 14;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M16xK15xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10327., 10679., 11031., 11383., 11671., 12023., 12375., 12727., 13015.,
      13367., 13719., 14071., 14359., 14711., 15063., 10780., 11147., 11514.,
      11881., 12120., 12487., 12854., 13221., 13460., 13827., 14194., 14561.,
      14800., 15167., 15534., 11233., 11615., 11997., 12379., 12569., 12951.,
      13333., 13715., 13905., 14287., 14669., 15051., 15241., 15623., 16005.,
      11686., 12083., 12480., 12877., 13018., 13415., 13812., 14209., 14350.,
      14747., 15144., 15541., 15682., 16079., 16476., 12139., 12551., 12963.,
      13375., 13403., 13815., 14227., 14639., 14731., 15143., 15555., 15967.,
      16059., 16471., 16883., 12528., 12955., 13382., 13809., 13852., 14279.,
      14706., 15133., 15176., 15603., 16030., 16457., 16500., 16927., 17354.,
      12981., 13423., 13865., 14307., 14301., 14743., 15185., 15627., 15621.,
      16063., 16505., 16947., 16941., 17383., 17825., 13434., 13891., 14348.,
      14805., 14750., 15207., 15664., 16121., 16066., 16523., 16980., 17437.,
      17382., 17839., 18296., 13887., 14359., 14831., 15303., 15199., 15671.,
      16143., 16615., 16447., 16919., 17391., 17863., 17759., 18231., 18703.,
      14276., 14763., 15250., 15737., 15584., 16071., 16558., 17045., 16892.,
      17379., 17866., 18353., 18200., 18687., 19174., 14729., 15231., 15733.,
      16235., 16033., 16535., 17037., 17539., 17337., 17839., 18341., 18843.,
      18641., 19143., 19645., 15182., 15699., 16216., 16733., 16482., 16999.,
      17516., 18033., 17782., 18299., 18816., 19333., 19082., 19599., 20116.,
      15635., 16167., 16699., 17231., 16931., 17463., 17995., 18527., 18227.,
      18759., 19291., 19823., 19459., 19991., 20523., 16024., 16571., 17118.,
      17665., 17316., 17863., 18410., 18957., 18608., 19155., 19702., 20249.,
      19900., 20447., 20994., 16477., 17039., 17601., 18163., 17765., 18327.,
      18889., 19451., 19053., 19615., 20177., 20739., 20341., 20903., 21465.,
      16930., 17507., 18084., 18661., 18214., 18791., 19368., 19945., 19498.,
      20075., 20652., 21229., 20782., 21359., 21936.};
  const int batches = 1;
  const int m = 16;
  const int k = 15;
  const int n = 15;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M16xK15xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12720., 13072., 13424., 13776., 14128., 14480., 14832., 15184., 15536.,
      15888., 16240., 16592., 16944., 17296., 17648., 18000., 13087., 13454.,
      13821., 14188., 14555., 14922., 15289., 15656., 16023., 16390., 16757.,
      17124., 17491., 17858., 18225., 18592., 13454., 13836., 14218., 14600.,
      14982., 15364., 15746., 16128., 16510., 16892., 17274., 17656., 18038.,
      18420., 18802., 19184., 13821., 14218., 14615., 15012., 15409., 15806.,
      16203., 16600., 16997., 17394., 17791., 18188., 18585., 18982., 19379.,
      19776., 14124., 14536., 14948., 15360., 15772., 16184., 16596., 17008.,
      17420., 17832., 18244., 18656., 19068., 19480., 19892., 20304., 14491.,
      14918., 15345., 15772., 16199., 16626., 17053., 17480., 17907., 18334.,
      18761., 19188., 19615., 20042., 20469., 20896., 14858., 15300., 15742.,
      16184., 16626., 17068., 17510., 17952., 18394., 18836., 19278., 19720.,
      20162., 20604., 21046., 21488., 15225., 15682., 16139., 16596., 17053.,
      17510., 17967., 18424., 18881., 19338., 19795., 20252., 20709., 21166.,
      21623., 22080., 15528., 16000., 16472., 16944., 17416., 17888., 18360.,
      18832., 19304., 19776., 20248., 20720., 21192., 21664., 22136., 22608.,
      15895., 16382., 16869., 17356., 17843., 18330., 18817., 19304., 19791.,
      20278., 20765., 21252., 21739., 22226., 22713., 23200., 16262., 16764.,
      17266., 17768., 18270., 18772., 19274., 19776., 20278., 20780., 21282.,
      21784., 22286., 22788., 23290., 23792., 16629., 17146., 17663., 18180.,
      18697., 19214., 19731., 20248., 20765., 21282., 21799., 22316., 22833.,
      23350., 23867., 24384., 16932., 17464., 17996., 18528., 19060., 19592.,
      20124., 20656., 21188., 21720., 22252., 22784., 23316., 23848., 24380.,
      24912., 17299., 17846., 18393., 18940., 19487., 20034., 20581., 21128.,
      21675., 22222., 22769., 23316., 23863., 24410., 24957., 25504., 17666.,
      18228., 18790., 19352., 19914., 20476., 21038., 21600., 22162., 22724.,
      23286., 23848., 24410., 24972., 25534., 26096., 18033., 18610., 19187.,
      19764., 20341., 20918., 21495., 22072., 22649., 23226., 23803., 24380.,
      24957., 25534., 26111., 26688.};
  const int batches = 1;
  const int m = 16;
  const int k = 15;
  const int n = 16;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M16xK16xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      10849., 11250., 10563., 10964., 11365., 11766., 12167., 12568., 12905.,
      13306., 12619., 13020., 13421., 13822., 11343., 11760., 11025., 11442.,
      11859., 12276., 12693., 13110., 13399., 13816., 13081., 13498., 13915.,
      14332., 11837., 12270., 11487., 11920., 12353., 12786., 13219., 13652.,
      13893., 14326., 13543., 13976., 14409., 14842., 12331., 12780., 11949.,
      12398., 12847., 13296., 13745., 14194., 14387., 14836., 14005., 14454.,
      14903., 15352., 12825., 13290., 12411., 12876., 13341., 13806., 14271.,
      14736., 14817., 15282., 14403., 14868., 15333., 15798., 13255., 13736.,
      12809., 13290., 13771., 14252., 14733., 15214., 15311., 15792., 14865.,
      15346., 15827., 16308., 13749., 14246., 13271., 13768., 14265., 14762.,
      15259., 15756., 15805., 16302., 15327., 15824., 16321., 16818., 14243.,
      14756., 13733., 14246., 14759., 15272., 15785., 16298., 16299., 16812.,
      15789., 16302., 16815., 17328., 14737., 15266., 14195., 14724., 15253.,
      15782., 16311., 16840., 16793., 17322., 16251., 16780., 17309., 17838.,
      15231., 15776., 14593., 15138., 15683., 16228., 16773., 17318., 17223.,
      17768., 16649., 17194., 17739., 18284., 15661., 16222., 15055., 15616.,
      16177., 16738., 17299., 17860., 17717., 18278., 17111., 17672., 18233.,
      18794., 16155., 16732., 15517., 16094., 16671., 17248., 17825., 18402.,
      18211., 18788., 17573., 18150., 18727., 19304., 16649., 17242., 15979.,
      16572., 17165., 17758., 18351., 18944., 18705., 19298., 18035., 18628.,
      19221., 19814., 17143., 17752., 16441., 17050., 17659., 18268., 18877.,
      19486., 19199., 19808., 18433., 19042., 19651., 20260., 17573., 18198.,
      16839., 17464., 18089., 18714., 19339., 19964., 19629., 20254., 18895.,
      19520., 20145., 20770., 18067., 18708., 17301., 17942., 18583., 19224.,
      19865., 20506., 20123., 20764., 19357., 19998., 20639., 21280.};
  const int batches = 1;
  const int m = 16;
  const int k = 16;
  const int n = 14;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M16xK16xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11993., 12394., 12795., 13196., 13533., 13934., 14335., 14736., 15073.,
      15474., 15875., 16276., 16613., 17014., 17415., 12480., 12897., 13314.,
      13731., 14020., 14437., 14854., 15271., 15560., 15977., 16394., 16811.,
      17100., 17517., 17934., 12967., 13400., 13833., 14266., 14507., 14940.,
      15373., 15806., 16047., 16480., 16913., 17346., 17587., 18020., 18453.,
      13454., 13903., 14352., 14801., 14994., 15443., 15892., 16341., 16534.,
      16983., 17432., 17881., 18074., 18523., 18972., 13941., 14406., 14871.,
      15336., 15417., 15882., 16347., 16812., 16957., 17422., 17887., 18352.,
      18497., 18962., 19427., 14364., 14845., 15326., 15807., 15904., 16385.,
      16866., 17347., 17444., 17925., 18406., 18887., 18984., 19465., 19946.,
      14851., 15348., 15845., 16342., 16391., 16888., 17385., 17882., 17931.,
      18428., 18925., 19422., 19471., 19968., 20465., 15338., 15851., 16364.,
      16877., 16878., 17391., 17904., 18417., 18418., 18931., 19444., 19957.,
      19958., 20471., 20984., 15825., 16354., 16883., 17412., 17365., 17894.,
      18423., 18952., 18841., 19370., 19899., 20428., 20381., 20910., 21439.,
      16248., 16793., 17338., 17883., 17788., 18333., 18878., 19423., 19328.,
      19873., 20418., 20963., 20868., 21413., 21958., 16735., 17296., 17857.,
      18418., 18275., 18836., 19397., 19958., 19815., 20376., 20937., 21498.,
      21355., 21916., 22477., 17222., 17799., 18376., 18953., 18762., 19339.,
      19916., 20493., 20302., 20879., 21456., 22033., 21842., 22419., 22996.,
      17709., 18302., 18895., 19488., 19249., 19842., 20435., 21028., 20789.,
      21382., 21975., 22568., 22265., 22858., 23451., 18132., 18741., 19350.,
      19959., 19672., 20281., 20890., 21499., 21212., 21821., 22430., 23039.,
      22752., 23361., 23970., 18619., 19244., 19869., 20494., 20159., 20784.,
      21409., 22034., 21699., 22324., 22949., 23574., 23239., 23864., 24489.,
      19106., 19747., 20388., 21029., 20646., 21287., 21928., 22569., 22186.,
      22827., 23468., 24109., 23726., 24367., 25008.};
  const int batches = 1;
  const int m = 16;
  const int k = 16;
  const int n = 15;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1TrueFalse, M16xK16xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15121., 15522., 15923., 16324., 16725., 17126., 17527., 17928., 18329.,
      18730., 19131., 19532., 19933., 20334., 20735., 21136., 15537., 15954.,
      16371., 16788., 17205., 17622., 18039., 18456., 18873., 19290., 19707.,
      20124., 20541., 20958., 21375., 21792., 15953., 16386., 16819., 17252.,
      17685., 18118., 18551., 18984., 19417., 19850., 20283., 20716., 21149.,
      21582., 22015., 22448., 16369., 16818., 17267., 17716., 18165., 18614.,
      19063., 19512., 19961., 20410., 20859., 21308., 21757., 22206., 22655.,
      23104., 16721., 17186., 17651., 18116., 18581., 19046., 19511., 19976.,
      20441., 20906., 21371., 21836., 22301., 22766., 23231., 23696., 17137.,
      17618., 18099., 18580., 19061., 19542., 20023., 20504., 20985., 21466.,
      21947., 22428., 22909., 23390., 23871., 24352., 17553., 18050., 18547.,
      19044., 19541., 20038., 20535., 21032., 21529., 22026., 22523., 23020.,
      23517., 24014., 24511., 25008., 17969., 18482., 18995., 19508., 20021.,
      20534., 21047., 21560., 22073., 22586., 23099., 23612., 24125., 24638.,
      25151., 25664., 18321., 18850., 19379., 19908., 20437., 20966., 21495.,
      22024., 22553., 23082., 23611., 24140., 24669., 25198., 25727., 26256.,
      18737., 19282., 19827., 20372., 20917., 21462., 22007., 22552., 23097.,
      23642., 24187., 24732., 25277., 25822., 26367., 26912., 19153., 19714.,
      20275., 20836., 21397., 21958., 22519., 23080., 23641., 24202., 24763.,
      25324., 25885., 26446., 27007., 27568., 19569., 20146., 20723., 21300.,
      21877., 22454., 23031., 23608., 24185., 24762., 25339., 25916., 26493.,
      27070., 27647., 28224., 19921., 20514., 21107., 21700., 22293., 22886.,
      23479., 24072., 24665., 25258., 25851., 26444., 27037., 27630., 28223.,
      28816., 20337., 20946., 21555., 22164., 22773., 23382., 23991., 24600.,
      25209., 25818., 26427., 27036., 27645., 28254., 28863., 29472., 20753.,
      21378., 22003., 22628., 23253., 23878., 24503., 25128., 25753., 26378.,
      27003., 27628., 28253., 28878., 29503., 30128., 21169., 21810., 22451.,
      23092., 23733., 24374., 25015., 25656., 26297., 26938., 27579., 28220.,
      28861., 29502., 30143., 30784.};
  const int batches = 1;
  const int m = 16;
  const int k = 16;
  const int n = 16;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}