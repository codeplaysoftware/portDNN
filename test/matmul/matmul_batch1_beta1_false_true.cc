/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_matmul_tests.py.
// Results calculated using Tensorflow v1.13.2.

#include <gtest/gtest.h>
#include <vector>

#include "test/matmul/fixture.h"
#include "test/types/kernel_data_types.h"
#include "test/types/to_gtest_types.h"

using DataTypeList = sycldnn::types::KernelDataTypes;
using GTestTypeList = sycldnn::types::ToGTestTypes<DataTypeList>::type;

template <typename DataType>
using MatmulBatch1Beta1FalseTrue = MatmulFixture<DataType, false, true>;
TYPED_TEST_SUITE(MatmulBatch1Beta1FalseTrue, GTestTypeList);
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M14xK14xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1016.,  2487.,  3958.,  5429.,  2484.,  1651.,  3122.,  4593.,  6064.,
      1007.,  2286.,  3757.,  5228.,  3499.,  2500.,  6715.,  10930., 15145.,
      9568.,  4311.,  8526.,  12741., 16956., 3891.,  6122.,  10337., 14552.,
      11983., 3984.,  10943., 17902., 24861., 16652., 6971.,  13930., 20889.,
      27848., 6775.,  9958.,  16917., 23876., 20467., 5468.,  15171., 24874.,
      34577., 23736., 9631.,  19334., 29037., 38740., 9659.,  13794., 23497.,
      33200., 28951., 2536.,  9607.,  16678., 23749., 29476., 5571.,  12642.,
      19713., 26720., 8831.,  8542.,  15613., 22684., 28603., 1652.,  4299.,
      6946.,  9593.,  5520.,  2791.,  5438.,  8085.,  10732., 2243.,  3930.,
      6577.,  9224.,  7135.,  3136.,  8527.,  13918., 19309., 12604., 5451.,
      10842., 16233., 21624., 5127.,  7766.,  13157., 18548., 15619., 4620.,
      12755., 20890., 29025., 19688., 8111.,  16246., 24381., 32516., 8011.,
      11602., 19737., 27872., 24103., 6104.,  16983., 27862., 38741., 26772.,
      10771., 21650., 32529., 43408., 10895., 15438., 26317., 37196., 32587.,
      1060.,  3931.,  6738.,  9609.,  8832.,  2231.,  5102.,  7973.,  10844.,
      8723.,  3466.,  6337.,  9208.,  9391.,  2288.,  6111.,  9934.,  13757.,
      8556.,  3931.,  7754.,  11577., 15400., 3479.,  5574.,  9397.,  13220.,
      10771., 3772.,  10339., 16906., 23473., 15640., 6591.,  13158., 19725.,
      26292., 6363.,  9410.,  15977., 22544., 19255., 5256.,  14567., 23878.,
      33189., 22724., 9251.,  18562., 27873., 37184., 9247.,  13246., 22557.,
      31868., 27739., 3540.,  12011., 20482., 28953., 28656., 7175.,  15646.,
      24117., 32588., 9443.,  10746., 19217., 27688., 35519.};
  const int batches = 1;
  const int m = 14;
  const int k = 14;
  const int n = 14;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M14xK14xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1016.,  2487.,  3958.,  5429.,  2484.,  1651.,  3122.,  4593.,  6064.,
      1007.,  2286.,  3757.,  5228.,  3499.,  1450.,  2501.,  6716.,  10931.,
      15146., 9569.,  4312.,  8527.,  12742., 16957., 3892.,  6123.,  10338.,
      14553., 11984., 3719.,  3986.,  10945., 17904., 24863., 16654., 6973.,
      13932., 20891., 27850., 6777.,  9960.,  16919., 23878., 20469., 5988.,
      5471.,  15174., 24877., 34580., 23739., 9634.,  19337., 29040., 38743.,
      9662.,  13797., 23500., 33203., 28954., 8257.,  2540.,  9611.,  16682.,
      23753., 29416., 5511.,  12582., 19653., 26724., 8835.,  8546.,  15617.,
      22688., 28607., 4510.,  1657.,  4304.,  6951.,  9598.,  5525.,  2796.,
      5443.,  8090.,  10737., 2248.,  3935.,  6582.,  9229.,  7140.,  2427.,
      3142.,  8533.,  13924., 19315., 12610., 5457.,  10848., 16239., 21630.,
      5133.,  7772.,  13163., 18554., 15625., 4696.,  4627.,  12762., 20897.,
      29032., 19695., 8118.,  16253., 24388., 32523., 8018.,  11609., 19744.,
      27879., 24110., 6965.,  6112.,  16991., 27870., 38749., 26780., 10779.,
      21658., 32537., 43352., 10839., 15382., 26261., 37140., 32531., 9170.,
      1005.,  3876.,  6747.,  9618.,  8841.,  2240.,  5111.,  7982.,  10853.,
      8732.,  3475.,  6346.,  9217.,  9400.,  1839.,  2298.,  6121.,  9944.,
      13767., 8566.,  3941.,  7764.,  11587., 15410., 3489.,  5584.,  9407.,
      13230., 10781., 3404.,  3783.,  10350., 16917., 23484., 15651., 6602.,
      13169., 19736., 26303., 6374.,  9421.,  15988., 22555., 19266., 5673.,
      5268.,  14579., 23890., 33201., 22736., 9263.,  18574., 27885., 37196.,
      9259.,  13258., 22569., 31816., 27687., 7878.,  3489.,  11960., 20431.,
      28902., 28605., 7124.,  15595., 24066., 32537., 9392.,  10759., 19230.,
      27701., 35532., 5923.};
  const int batches = 1;
  const int m = 14;
  const int k = 14;
  const int n = 15;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M14xK14xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1016.,  2487.,  3958.,  5429.,  2484.,  1651.,  3122.,  4593.,  6064.,
      1007.,  2286.,  3757.,  5228.,  3499.,  1450.,  2921.,  2502.,  6717.,
      10932., 15147., 9570.,  4313.,  8528.,  12743., 16958., 3893.,  6124.,
      10339., 14554., 11985., 3720.,  7935.,  3988.,  10947., 17906., 24865.,
      16656., 6975.,  13934., 20893., 27852., 6779.,  9962.,  16921., 23880.,
      20471., 5990.,  12949., 5474.,  15177., 24880., 34583., 23742., 9637.,
      19340., 29043., 38746., 9665.,  13800., 23503., 33206., 28957., 8260.,
      17963., 2480.,  9551.,  16622., 23693., 29420., 5515.,  12586., 19657.,
      26728., 8839.,  8550.,  15621., 22692., 28611., 4514.,  11585., 1662.,
      4309.,  6956.,  9603.,  5530.,  2801.,  5448.,  8095.,  10742., 2253.,
      3940.,  6587.,  9234.,  7145.,  2432.,  5079.,  3148.,  8539.,  13930.,
      19321., 12616., 5463.,  10854., 16245., 21636., 5139.,  7778.,  13169.,
      18560., 15631., 4702.,  10093., 4634.,  12769., 20904., 29039., 19702.,
      8125.,  16260., 24395., 32530., 8025.,  11616., 19751., 27886., 24117.,
      6972.,  15107., 6056.,  16935., 27814., 38693., 26724., 10723., 21602.,
      32481., 43360., 10847., 15390., 26269., 37148., 32539., 9178.,  20057.,
      1014.,  3885.,  6756.,  9627.,  8850.,  2249.,  5120.,  7991.,  10862.,
      8741.,  3484.,  6355.,  9226.,  9409.,  1848.,  4719.,  2308.,  6131.,
      9954.,  13777., 8576.,  3951.,  7774.,  11597., 15420., 3499.,  5594.,
      9417.,  13240., 10791., 3414.,  7237.,  3794.,  10361., 16928., 23495.,
      15662., 6613.,  13180., 19747., 26314., 6385.,  9432.,  15999., 22566.,
      19277., 5684.,  12251., 5216.,  14527., 23838., 33149., 22684., 9211.,
      18522., 27833., 37144., 9207.,  13206., 22517., 31828., 27699., 7890.,
      17201., 3502.,  11973., 20444., 28915., 28618., 7137.,  15608., 24079.,
      32550., 9405.,  10772., 19243., 27714., 35545., 5936.,  14407.};
  const int batches = 1;
  const int m = 14;
  const int k = 14;
  const int n = 16;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M14xK15xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1241.,  3042.,  4843.,  6644.,  1405.,  2566.,  4367.,  6168.,  2593.,
      2090.,  3891.,  5692.,  4805.,  1614.,  3055.,  8231.,  13407., 18583.,
      6159.,  6855.,  12031., 17207., 10287., 5479.,  10655., 15831., 15439.,
      4103.,  4869.,  13420., 21971., 30522., 10913., 11144., 19695., 28246.,
      17981., 8868.,  17419., 25970., 26073., 6592.,  6683.,  18609., 30535.,
      42461., 15667., 15433., 27359., 39285., 25675., 12257., 24183., 36109.,
      36707., 9081.,  1457.,  6198.,  10939., 15680., 16197., 4938.,  9679.,
      14420., 15513., 3614.,  8355.,  13096., 15917., 2354.,  2567.,  6843.,
      11119., 15395., 4887.,  5707.,  9983.,  14259., 8231.,  4571.,  8847.,
      13123., 12599., 3435.,  4381.,  12032., 19683., 27334., 9641.,  9996.,
      17647., 25298., 15925., 7960.,  15611., 23262., 23233., 5924.,  6195.,
      17221., 28247., 39273., 14395., 14285., 25311., 36337., 23619., 11349.,
      22375., 33401., 33867., 8413.,  2633.,  10314., 17995., 25676., 15565.,
      8270.,  15951., 23632., 29521., 6226.,  13907., 21588., 28117., 4182.,
      2143.,  5519.,  8831.,  12207., 3615.,  4559.,  7935.,  11311., 6175.,
      3663.,  7039.,  10415., 9759.,  2767.,  3893.,  10644., 17395., 24146.,
      8369.,  8848.,  15599., 22350., 13869., 7052.,  13803., 20554., 20393.,
      5256.,  5707.,  15833., 25959., 36085., 13123., 13137., 23263., 33389.,
      21563., 10441., 20567., 30693., 31027., 7745.,  4833.,  15454., 26075.,
      36696., 15957., 12626., 23247., 33868., 28105., 9798.,  20419., 31040.,
      41277., 6970.,  1655.,  4131.,  6607.,  9083.,  2407.,  3475.,  5951.,
      8427.,  4183.,  2819.,  5231.,  7707.,  6919.,  2099.};
  const int batches = 1;
  const int m = 14;
  const int k = 15;
  const int n = 14;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M14xK15xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1241.,  3042.,  4843.,  6644.,  1405.,  2566.,  4367.,  6168.,  2593.,
      2090.,  3891.,  5692.,  4805.,  1614.,  3415.,  3056.,  8232.,  13408.,
      18584., 6160.,  6856.,  12032., 17208., 10288., 5480.,  10656., 15832.,
      15440., 4104.,  9280.,  4871.,  13422., 21973., 30524., 10915., 11146.,
      19697., 28248., 17983., 8870.,  17421., 25972., 26075., 6594.,  15145.,
      6686.,  18612., 30538., 42464., 15670., 15436., 27362., 39288., 25678.,
      12260., 24186., 36112., 36710., 9084.,  21010., 1461.,  6202.,  10943.,
      15684., 16137., 4878.,  9619.,  14360., 15517., 3618.,  8359.,  13100.,
      15921., 2358.,  7099.,  2572.,  6848.,  11124., 15400., 4892.,  5712.,
      9988.,  14264., 8236.,  4576.,  8852.,  13128., 12604., 3440.,  7716.,
      4387.,  12038., 19689., 27340., 9647.,  10002., 17653., 25304., 15931.,
      7966.,  15617., 23268., 23239., 5930.,  13581., 6202.,  17228., 28254.,
      39280., 14402., 14292., 25318., 36344., 23626., 11356., 22382., 33408.,
      33874., 8420.,  19446., 2641.,  10322., 18003., 25684., 15573., 8278.,
      15959., 23640., 29465., 6170.,  13851., 21532., 28061., 4126.,  11807.,
      2088.,  5464.,  8840.,  12216., 3624.,  4568.,  7944.,  11320., 6184.,
      3672.,  7048.,  10424., 9768.,  2776.,  6152.,  3903.,  10654., 17405.,
      24156., 8379.,  8858.,  15609., 22360., 13879., 7062.,  13813., 20564.,
      20403., 5266.,  12017., 5718.,  15844., 25970., 36096., 13134., 13148.,
      23274., 33400., 21574., 10452., 20578., 30704., 31038., 7756.,  17882.,
      4845.,  15466., 26087., 36708., 15969., 12638., 23259., 33880., 28117.,
      9810.,  20431., 31052., 41225., 6918.,  17539., 1604.,  4080.,  6556.,
      9032.,  2356.,  3424.,  5900.,  8376.,  4132.,  2768.,  5244.,  7720.,
      6932.,  2112.,  4588.};
  const int batches = 1;
  const int m = 14;
  const int k = 15;
  const int n = 15;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M14xK15xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1241.,  3042.,  4843.,  6644.,  1405.,  2566.,  4367.,  6168.,  2593.,
      2090.,  3891.,  5692.,  4805.,  1614.,  3415.,  5216.,  3057.,  8233.,
      13409., 18585., 6161.,  6857.,  12033., 17209., 10289., 5481.,  10657.,
      15833., 15441., 4105.,  9281.,  14457., 4873.,  13424., 21975., 30526.,
      10917., 11148., 19699., 28250., 17985., 8872.,  17423., 25974., 26077.,
      6596.,  15147., 23698., 6689.,  18615., 30541., 42467., 15673., 15439.,
      27365., 39291., 25681., 12263., 24189., 36115., 36713., 9087.,  21013.,
      32939., 1401.,  6142.,  10883., 15624., 16141., 4882.,  9623.,  14364.,
      15521., 3622.,  8363.,  13104., 15925., 2362.,  7103.,  11844., 2577.,
      6853.,  11129., 15405., 4897.,  5717.,  9993.,  14269., 8241.,  4581.,
      8857.,  13133., 12609., 3445.,  7721.,  11997., 4393.,  12044., 19695.,
      27346., 9653.,  10008., 17659., 25310., 15937., 7972.,  15623., 23274.,
      23245., 5936.,  13587., 21238., 6209.,  17235., 28261., 39287., 14409.,
      14299., 25325., 36351., 23633., 11363., 22389., 33415., 33881., 8427.,
      19453., 30479., 2585.,  10266., 17947., 25628., 15517., 8222.,  15903.,
      23584., 29473., 6178.,  13859., 21540., 28069., 4134.,  11815., 19496.,
      2097.,  5473.,  8849.,  12225., 3633.,  4577.,  7953.,  11329., 6193.,
      3681.,  7057.,  10433., 9777.,  2785.,  6161.,  9537.,  3913.,  10664.,
      17415., 24166., 8389.,  8868.,  15619., 22370., 13889., 7072.,  13823.,
      20574., 20413., 5276.,  12027., 18778., 5729.,  15855., 25981., 36107.,
      13145., 13159., 23285., 33411., 21585., 10463., 20589., 30715., 31049.,
      7767.,  17893., 28019., 4793.,  15414., 26035., 36656., 15917., 12586.,
      23207., 33828., 28065., 9758.,  20379., 31000., 41237., 6930.,  17551.,
      28172., 1617.,  4093.,  6569.,  9045.,  2369.,  3437.,  5913.,  8389.,
      4145.,  2781.,  5257.,  7733.,  6945.,  2125.,  4601.,  7077.};
  const int batches = 1;
  const int m = 14;
  const int k = 15;
  const int n = 16;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M14xK16xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,  8032.,  1505.,
      3682.,  5859.,  8036.,  1509.,  3686.,  3687.,  9960.,  16233., 22506.,
      3691.,  9964.,  16237., 22510., 3695.,  9968.,  16241., 22514., 3699.,
      9972.,  5877.,  16246., 26615., 36984., 5881.,  16250., 26619., 36988.,
      5885.,  16254., 26623., 36992., 5889.,  16258., 8067.,  22532., 36997.,
      51462., 8071.,  22536., 37001., 51466., 8075.,  22540., 37005., 51470.,
      8079.,  22544., 1553.,  3730.,  5907.,  8084.,  1557.,  3734.,  5911.,
      8088.,  1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  3679.,  9952.,
      16225., 22498., 3683.,  9956.,  16229., 22502., 3687.,  9960.,  16233.,
      22506., 3691.,  9964.,  5869.,  16238., 26607., 36976., 5873.,  16242.,
      26611., 36980., 5877.,  16246., 26615., 36984., 5881.,  16250., 8059.,
      22524., 36989., 51454., 8063.,  22528., 36993., 51458., 8067.,  22532.,
      36997., 51462., 8071.,  22536., 1545.,  3722.,  5899.,  8076.,  1549.,
      3726.,  5903.,  8080.,  1553.,  3730.,  5907.,  8084.,  1557.,  3734.,
      3735.,  10008., 16217., 22490., 3675.,  9948.,  16221., 22494., 3679.,
      9952.,  16225., 22498., 3683.,  9956.,  5861.,  16230., 26599., 36968.,
      5865.,  16234., 26603., 36972., 5869.,  16238., 26607., 36976., 5873.,
      16242., 8051.,  22516., 36981., 51446., 8055.,  22520., 36985., 51450.,
      8059.,  22524., 36989., 51454., 8063.,  22528., 1537.,  3714.,  5891.,
      8068.,  1541.,  3718.,  5895.,  8072.,  1545.,  3722.,  5899.,  8076.,
      1549.,  3726.,  3727.,  10000., 16273., 22546., 3731.,  10004., 16277.,
      22550., 3735.,  10008., 16217., 22490., 3675.,  9948.};
  const int batches = 1;
  const int m = 14;
  const int k = 16;
  const int n = 14;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M14xK16xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,  8032.,  1505.,
      3682.,  5859.,  8036.,  1509.,  3686.,  5863.,  3688.,  9961.,  16234.,
      22507., 3692.,  9965.,  16238., 22511., 3696.,  9969.,  16242., 22515.,
      3700.,  9973.,  16246., 5879.,  16248., 26617., 36986., 5883.,  16252.,
      26621., 36990., 5887.,  16256., 26625., 36994., 5891.,  16260., 26629.,
      8070.,  22535., 37000., 51465., 8074.,  22539., 37004., 51469., 8078.,
      22543., 37008., 51473., 8082.,  22547., 37012., 1557.,  3734.,  5911.,
      8088.,  1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,  8032.,
      1505.,  3682.,  5859.,  3684.,  9957.,  16230., 22503., 3688.,  9961.,
      16234., 22507., 3692.,  9965.,  16238., 22511., 3696.,  9969.,  16242.,
      5875.,  16244., 26613., 36982., 5879.,  16248., 26617., 36986., 5883.,
      16252., 26621., 36990., 5887.,  16256., 26625., 8066.,  22531., 36996.,
      51461., 8070.,  22535., 37000., 51465., 8074.,  22539., 37004., 51469.,
      8078.,  22543., 37008., 1553.,  3730.,  5907.,  8084.,  1557.,  3734.,
      5911.,  8088.,  1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,
      3680.,  9953.,  16226., 22499., 3684.,  9957.,  16230., 22503., 3688.,
      9961.,  16234., 22507., 3692.,  9965.,  16238., 5871.,  16240., 26609.,
      36978., 5875.,  16244., 26613., 36982., 5879.,  16248., 26617., 36986.,
      5883.,  16252., 26621., 8062.,  22527., 36992., 51457., 8066.,  22531.,
      36996., 51461., 8070.,  22535., 37000., 51465., 8074.,  22539., 37004.,
      1549.,  3726.,  5903.,  8080.,  1553.,  3730.,  5907.,  8084.,  1557.,
      3734.,  5911.,  8088.,  1497.,  3674.,  5851.,  3676.,  9949.,  16222.,
      22495., 3680.,  9953.,  16226., 22499., 3684.,  9957.,  16230., 22503.,
      3688.,  9961.,  16234.};
  const int batches = 1;
  const int m = 14;
  const int k = 16;
  const int n = 15;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M14xK16xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,  8032.,  1505.,
      3682.,  5859.,  8036.,  1509.,  3686.,  5863.,  8040.,  3689.,  9962.,
      16235., 22508., 3693.,  9966.,  16239., 22512., 3697.,  9970.,  16243.,
      22516., 3701.,  9974.,  16247., 22520., 5881.,  16250., 26619., 36988.,
      5885.,  16254., 26623., 36992., 5889.,  16258., 26627., 36996., 5893.,
      16262., 26631., 37000., 8073.,  22538., 37003., 51468., 8077.,  22542.,
      37007., 51472., 8081.,  22546., 37011., 51476., 8085.,  22550., 37015.,
      51480., 1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,  8032.,
      1505.,  3682.,  5859.,  8036.,  1509.,  3686.,  5863.,  8040.,  3689.,
      9962.,  16235., 22508., 3693.,  9966.,  16239., 22512., 3697.,  9970.,
      16243., 22516., 3701.,  9974.,  16247., 22520., 5881.,  16250., 26619.,
      36988., 5885.,  16254., 26623., 36992., 5889.,  16258., 26627., 36996.,
      5893.,  16262., 26631., 37000., 8073.,  22538., 37003., 51468., 8077.,
      22542., 37007., 51472., 8081.,  22546., 37011., 51476., 8085.,  22550.,
      37015., 51480., 1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,
      8032.,  1505.,  3682.,  5859.,  8036.,  1509.,  3686.,  5863.,  8040.,
      3689.,  9962.,  16235., 22508., 3693.,  9966.,  16239., 22512., 3697.,
      9970.,  16243., 22516., 3701.,  9974.,  16247., 22520., 5881.,  16250.,
      26619., 36988., 5885.,  16254., 26623., 36992., 5889.,  16258., 26627.,
      36996., 5893.,  16262., 26631., 37000., 8073.,  22538., 37003., 51468.,
      8077.,  22542., 37007., 51472., 8081.,  22546., 37011., 51476., 8085.,
      22550., 37015., 51480., 1497.,  3674.,  5851.,  8028.,  1501.,  3678.,
      5855.,  8032.,  1505.,  3682.,  5859.,  8036.,  1509.,  3686.,  5863.,
      8040.,  3689.,  9962.,  16235., 22508., 3693.,  9966.,  16239., 22512.,
      3697.,  9970.,  16243., 22516., 3701.,  9974.,  16247., 22520.};
  const int batches = 1;
  const int m = 14;
  const int k = 16;
  const int n = 16;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M15xK14xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1016.,  2487.,  3958.,  5429.,  2484.,  1651.,  3122.,  4593.,  6064.,
      1007.,  2286.,  3757.,  5228.,  3499.,  2500.,  6715.,  10930., 15145.,
      9568.,  4311.,  8526.,  12741., 16956., 3891.,  6122.,  10337., 14552.,
      11983., 3984.,  10943., 17902., 24861., 16652., 6971.,  13930., 20889.,
      27848., 6775.,  9958.,  16917., 23876., 20467., 5468.,  15171., 24874.,
      34577., 23736., 9631.,  19334., 29037., 38740., 9659.,  13794., 23497.,
      33200., 28951., 2536.,  9607.,  16678., 23749., 29476., 5571.,  12642.,
      19713., 26720., 8831.,  8542.,  15613., 22684., 28603., 1652.,  4299.,
      6946.,  9593.,  5520.,  2791.,  5438.,  8085.,  10732., 2243.,  3930.,
      6577.,  9224.,  7135.,  3136.,  8527.,  13918., 19309., 12604., 5451.,
      10842., 16233., 21624., 5127.,  7766.,  13157., 18548., 15619., 4620.,
      12755., 20890., 29025., 19688., 8111.,  16246., 24381., 32516., 8011.,
      11602., 19737., 27872., 24103., 6104.,  16983., 27862., 38741., 26772.,
      10771., 21650., 32529., 43408., 10895., 15438., 26317., 37196., 32587.,
      1060.,  3931.,  6738.,  9609.,  8832.,  2231.,  5102.,  7973.,  10844.,
      8723.,  3466.,  6337.,  9208.,  9391.,  2288.,  6111.,  9934.,  13757.,
      8556.,  3931.,  7754.,  11577., 15400., 3479.,  5574.,  9397.,  13220.,
      10771., 3772.,  10339., 16906., 23473., 15640., 6591.,  13158., 19725.,
      26292., 6363.,  9410.,  15977., 22544., 19255., 5256.,  14567., 23878.,
      33189., 22724., 9251.,  18562., 27873., 37184., 9247.,  13246., 22557.,
      31868., 27739., 3540.,  12011., 20482., 28953., 28656., 7175.,  15646.,
      24117., 32588., 9443.,  10746., 19217., 27688., 35519., 1440.,  3695.,
      5950.,  8205.,  4508.,  2411.,  4666.,  6921.,  9176.,  1831.,  3382.,
      5637.,  7892.,  5923.};
  const int batches = 1;
  const int m = 15;
  const int k = 14;
  const int n = 14;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M15xK14xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1016.,  2487.,  3958.,  5429.,  2484.,  1651.,  3122.,  4593.,  6064.,
      1007.,  2286.,  3757.,  5228.,  3499.,  1450.,  2501.,  6716.,  10931.,
      15146., 9569.,  4312.,  8527.,  12742., 16957., 3892.,  6123.,  10338.,
      14553., 11984., 3719.,  3986.,  10945., 17904., 24863., 16654., 6973.,
      13932., 20891., 27850., 6777.,  9960.,  16919., 23878., 20469., 5988.,
      5471.,  15174., 24877., 34580., 23739., 9634.,  19337., 29040., 38743.,
      9662.,  13797., 23500., 33203., 28954., 8257.,  2540.,  9611.,  16682.,
      23753., 29416., 5511.,  12582., 19653., 26724., 8835.,  8546.,  15617.,
      22688., 28607., 4510.,  1657.,  4304.,  6951.,  9598.,  5525.,  2796.,
      5443.,  8090.,  10737., 2248.,  3935.,  6582.,  9229.,  7140.,  2427.,
      3142.,  8533.,  13924., 19315., 12610., 5457.,  10848., 16239., 21630.,
      5133.,  7772.,  13163., 18554., 15625., 4696.,  4627.,  12762., 20897.,
      29032., 19695., 8118.,  16253., 24388., 32523., 8018.,  11609., 19744.,
      27879., 24110., 6965.,  6112.,  16991., 27870., 38749., 26780., 10779.,
      21658., 32537., 43352., 10839., 15382., 26261., 37140., 32531., 9170.,
      1005.,  3876.,  6747.,  9618.,  8841.,  2240.,  5111.,  7982.,  10853.,
      8732.,  3475.,  6346.,  9217.,  9400.,  1839.,  2298.,  6121.,  9944.,
      13767., 8566.,  3941.,  7764.,  11587., 15410., 3489.,  5584.,  9407.,
      13230., 10781., 3404.,  3783.,  10350., 16917., 23484., 15651., 6602.,
      13169., 19736., 26303., 6374.,  9421.,  15988., 22555., 19266., 5673.,
      5268.,  14579., 23890., 33201., 22736., 9263.,  18574., 27885., 37196.,
      9259.,  13258., 22569., 31816., 27687., 7878.,  3489.,  11960., 20431.,
      28902., 28605., 7124.,  15595., 24066., 32537., 9392.,  10759., 19230.,
      27701., 35532., 5923.,  1454.,  3709.,  5964.,  8219.,  4522.,  2425.,
      4680.,  6935.,  9190.,  1845.,  3396.,  5651.,  7906.,  5937.,  2112.};
  const int batches = 1;
  const int m = 15;
  const int k = 14;
  const int n = 15;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M15xK14xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1016.,  2487.,  3958.,  5429.,  2484.,  1651.,  3122.,  4593.,  6064.,
      1007.,  2286.,  3757.,  5228.,  3499.,  1450.,  2921.,  2502.,  6717.,
      10932., 15147., 9570.,  4313.,  8528.,  12743., 16958., 3893.,  6124.,
      10339., 14554., 11985., 3720.,  7935.,  3988.,  10947., 17906., 24865.,
      16656., 6975.,  13934., 20893., 27852., 6779.,  9962.,  16921., 23880.,
      20471., 5990.,  12949., 5474.,  15177., 24880., 34583., 23742., 9637.,
      19340., 29043., 38746., 9665.,  13800., 23503., 33206., 28957., 8260.,
      17963., 2480.,  9551.,  16622., 23693., 29420., 5515.,  12586., 19657.,
      26728., 8839.,  8550.,  15621., 22692., 28611., 4514.,  11585., 1662.,
      4309.,  6956.,  9603.,  5530.,  2801.,  5448.,  8095.,  10742., 2253.,
      3940.,  6587.,  9234.,  7145.,  2432.,  5079.,  3148.,  8539.,  13930.,
      19321., 12616., 5463.,  10854., 16245., 21636., 5139.,  7778.,  13169.,
      18560., 15631., 4702.,  10093., 4634.,  12769., 20904., 29039., 19702.,
      8125.,  16260., 24395., 32530., 8025.,  11616., 19751., 27886., 24117.,
      6972.,  15107., 6056.,  16935., 27814., 38693., 26724., 10723., 21602.,
      32481., 43360., 10847., 15390., 26269., 37148., 32539., 9178.,  20057.,
      1014.,  3885.,  6756.,  9627.,  8850.,  2249.,  5120.,  7991.,  10862.,
      8741.,  3484.,  6355.,  9226.,  9409.,  1848.,  4719.,  2308.,  6131.,
      9954.,  13777., 8576.,  3951.,  7774.,  11597., 15420., 3499.,  5594.,
      9417.,  13240., 10791., 3414.,  7237.,  3794.,  10361., 16928., 23495.,
      15662., 6613.,  13180., 19747., 26314., 6385.,  9432.,  15999., 22566.,
      19277., 5684.,  12251., 5216.,  14527., 23838., 33149., 22684., 9211.,
      18522., 27833., 37144., 9207.,  13206., 22517., 31828., 27699., 7890.,
      17201., 3502.,  11973., 20444., 28915., 28618., 7137.,  15608., 24079.,
      32550., 9405.,  10772., 19243., 27714., 35545., 5936.,  14407., 1468.,
      3723.,  5978.,  8233.,  4536.,  2439.,  4694.,  6949.,  9204.,  1859.,
      3410.,  5665.,  7920.,  5951.,  2126.,  4381.};
  const int batches = 1;
  const int m = 15;
  const int k = 14;
  const int n = 16;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M15xK15xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1241.,  3042.,  4843.,  6644.,  1405.,  2566.,  4367.,  6168.,  2593.,
      2090.,  3891.,  5692.,  4805.,  1614.,  3055.,  8231.,  13407., 18583.,
      6159.,  6855.,  12031., 17207., 10287., 5479.,  10655., 15831., 15439.,
      4103.,  4869.,  13420., 21971., 30522., 10913., 11144., 19695., 28246.,
      17981., 8868.,  17419., 25970., 26073., 6592.,  6683.,  18609., 30535.,
      42461., 15667., 15433., 27359., 39285., 25675., 12257., 24183., 36109.,
      36707., 9081.,  1457.,  6198.,  10939., 15680., 16197., 4938.,  9679.,
      14420., 15513., 3614.,  8355.,  13096., 15917., 2354.,  2567.,  6843.,
      11119., 15395., 4887.,  5707.,  9983.,  14259., 8231.,  4571.,  8847.,
      13123., 12599., 3435.,  4381.,  12032., 19683., 27334., 9641.,  9996.,
      17647., 25298., 15925., 7960.,  15611., 23262., 23233., 5924.,  6195.,
      17221., 28247., 39273., 14395., 14285., 25311., 36337., 23619., 11349.,
      22375., 33401., 33867., 8413.,  2633.,  10314., 17995., 25676., 15565.,
      8270.,  15951., 23632., 29521., 6226.,  13907., 21588., 28117., 4182.,
      2143.,  5519.,  8831.,  12207., 3615.,  4559.,  7935.,  11311., 6175.,
      3663.,  7039.,  10415., 9759.,  2767.,  3893.,  10644., 17395., 24146.,
      8369.,  8848.,  15599., 22350., 13869., 7052.,  13803., 20554., 20393.,
      5256.,  5707.,  15833., 25959., 36085., 13123., 13137., 23263., 33389.,
      21563., 10441., 20567., 30693., 31027., 7745.,  4833.,  15454., 26075.,
      36696., 15957., 12626., 23247., 33868., 28105., 9798.,  20419., 31040.,
      41277., 6970.,  1655.,  4131.,  6607.,  9083.,  2407.,  3475.,  5951.,
      8427.,  4183.,  2819.,  5231.,  7707.,  6919.,  2099.,  3405.,  9256.,
      15107., 20958., 7097.,  7700.,  13551., 19402., 11813., 6144.,  11995.,
      17846., 17553., 4588.};
  const int batches = 1;
  const int m = 15;
  const int k = 15;
  const int n = 14;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M15xK15xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1241.,  3042.,  4843.,  6644.,  1405.,  2566.,  4367.,  6168.,  2593.,
      2090.,  3891.,  5692.,  4805.,  1614.,  3415.,  3056.,  8232.,  13408.,
      18584., 6160.,  6856.,  12032., 17208., 10288., 5480.,  10656., 15832.,
      15440., 4104.,  9280.,  4871.,  13422., 21973., 30524., 10915., 11146.,
      19697., 28248., 17983., 8870.,  17421., 25972., 26075., 6594.,  15145.,
      6686.,  18612., 30538., 42464., 15670., 15436., 27362., 39288., 25678.,
      12260., 24186., 36112., 36710., 9084.,  21010., 1461.,  6202.,  10943.,
      15684., 16137., 4878.,  9619.,  14360., 15517., 3618.,  8359.,  13100.,
      15921., 2358.,  7099.,  2572.,  6848.,  11124., 15400., 4892.,  5712.,
      9988.,  14264., 8236.,  4576.,  8852.,  13128., 12604., 3440.,  7716.,
      4387.,  12038., 19689., 27340., 9647.,  10002., 17653., 25304., 15931.,
      7966.,  15617., 23268., 23239., 5930.,  13581., 6202.,  17228., 28254.,
      39280., 14402., 14292., 25318., 36344., 23626., 11356., 22382., 33408.,
      33874., 8420.,  19446., 2641.,  10322., 18003., 25684., 15573., 8278.,
      15959., 23640., 29465., 6170.,  13851., 21532., 28061., 4126.,  11807.,
      2088.,  5464.,  8840.,  12216., 3624.,  4568.,  7944.,  11320., 6184.,
      3672.,  7048.,  10424., 9768.,  2776.,  6152.,  3903.,  10654., 17405.,
      24156., 8379.,  8858.,  15609., 22360., 13879., 7062.,  13813., 20564.,
      20403., 5266.,  12017., 5718.,  15844., 25970., 36096., 13134., 13148.,
      23274., 33400., 21574., 10452., 20578., 30704., 31038., 7756.,  17882.,
      4845.,  15466., 26087., 36708., 15969., 12638., 23259., 33880., 28117.,
      9810.,  20431., 31052., 41225., 6918.,  17539., 1604.,  4080.,  6556.,
      9032.,  2356.,  3424.,  5900.,  8376.,  4132.,  2768.,  5244.,  7720.,
      6932.,  2112.,  4588.,  3419.,  9270.,  15121., 20972., 7111.,  7714.,
      13565., 19416., 11827., 6158.,  12009., 17860., 17567., 4602.,  10453.};
  const int batches = 1;
  const int m = 15;
  const int k = 15;
  const int n = 15;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M15xK15xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1241.,  3042.,  4843.,  6644.,  1405.,  2566.,  4367.,  6168.,  2593.,
      2090.,  3891.,  5692.,  4805.,  1614.,  3415.,  5216.,  3057.,  8233.,
      13409., 18585., 6161.,  6857.,  12033., 17209., 10289., 5481.,  10657.,
      15833., 15441., 4105.,  9281.,  14457., 4873.,  13424., 21975., 30526.,
      10917., 11148., 19699., 28250., 17985., 8872.,  17423., 25974., 26077.,
      6596.,  15147., 23698., 6689.,  18615., 30541., 42467., 15673., 15439.,
      27365., 39291., 25681., 12263., 24189., 36115., 36713., 9087.,  21013.,
      32939., 1401.,  6142.,  10883., 15624., 16141., 4882.,  9623.,  14364.,
      15521., 3622.,  8363.,  13104., 15925., 2362.,  7103.,  11844., 2577.,
      6853.,  11129., 15405., 4897.,  5717.,  9993.,  14269., 8241.,  4581.,
      8857.,  13133., 12609., 3445.,  7721.,  11997., 4393.,  12044., 19695.,
      27346., 9653.,  10008., 17659., 25310., 15937., 7972.,  15623., 23274.,
      23245., 5936.,  13587., 21238., 6209.,  17235., 28261., 39287., 14409.,
      14299., 25325., 36351., 23633., 11363., 22389., 33415., 33881., 8427.,
      19453., 30479., 2585.,  10266., 17947., 25628., 15517., 8222.,  15903.,
      23584., 29473., 6178.,  13859., 21540., 28069., 4134.,  11815., 19496.,
      2097.,  5473.,  8849.,  12225., 3633.,  4577.,  7953.,  11329., 6193.,
      3681.,  7057.,  10433., 9777.,  2785.,  6161.,  9537.,  3913.,  10664.,
      17415., 24166., 8389.,  8868.,  15619., 22370., 13889., 7072.,  13823.,
      20574., 20413., 5276.,  12027., 18778., 5729.,  15855., 25981., 36107.,
      13145., 13159., 23285., 33411., 21585., 10463., 20589., 30715., 31049.,
      7767.,  17893., 28019., 4793.,  15414., 26035., 36656., 15917., 12586.,
      23207., 33828., 28065., 9758.,  20379., 31000., 41237., 6930.,  17551.,
      28172., 1617.,  4093.,  6569.,  9045.,  2369.,  3437.,  5913.,  8389.,
      4145.,  2781.,  5257.,  7733.,  6945.,  2125.,  4601.,  7077.,  3433.,
      9284.,  15135., 20986., 7125.,  7728.,  13579., 19430., 11841., 6172.,
      12023., 17874., 17581., 4616.,  10467., 16318.};
  const int batches = 1;
  const int m = 15;
  const int k = 15;
  const int n = 16;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M15xK16xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,  8032.,  1505.,
      3682.,  5859.,  8036.,  1509.,  3686.,  3687.,  9960.,  16233., 22506.,
      3691.,  9964.,  16237., 22510., 3695.,  9968.,  16241., 22514., 3699.,
      9972.,  5877.,  16246., 26615., 36984., 5881.,  16250., 26619., 36988.,
      5885.,  16254., 26623., 36992., 5889.,  16258., 8067.,  22532., 36997.,
      51462., 8071.,  22536., 37001., 51466., 8075.,  22540., 37005., 51470.,
      8079.,  22544., 1553.,  3730.,  5907.,  8084.,  1557.,  3734.,  5911.,
      8088.,  1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  3679.,  9952.,
      16225., 22498., 3683.,  9956.,  16229., 22502., 3687.,  9960.,  16233.,
      22506., 3691.,  9964.,  5869.,  16238., 26607., 36976., 5873.,  16242.,
      26611., 36980., 5877.,  16246., 26615., 36984., 5881.,  16250., 8059.,
      22524., 36989., 51454., 8063.,  22528., 36993., 51458., 8067.,  22532.,
      36997., 51462., 8071.,  22536., 1545.,  3722.,  5899.,  8076.,  1549.,
      3726.,  5903.,  8080.,  1553.,  3730.,  5907.,  8084.,  1557.,  3734.,
      3735.,  10008., 16217., 22490., 3675.,  9948.,  16221., 22494., 3679.,
      9952.,  16225., 22498., 3683.,  9956.,  5861.,  16230., 26599., 36968.,
      5865.,  16234., 26603., 36972., 5869.,  16238., 26607., 36976., 5873.,
      16242., 8051.,  22516., 36981., 51446., 8055.,  22520., 36985., 51450.,
      8059.,  22524., 36989., 51454., 8063.,  22528., 1537.,  3714.,  5891.,
      8068.,  1541.,  3718.,  5895.,  8072.,  1545.,  3722.,  5899.,  8076.,
      1549.,  3726.,  3727.,  10000., 16273., 22546., 3731.,  10004., 16277.,
      22550., 3735.,  10008., 16217., 22490., 3675.,  9948.,  5853.,  16222.,
      26591., 36960., 5857.,  16226., 26595., 36964., 5861.,  16230., 26599.,
      36968., 5865.,  16234.};
  const int batches = 1;
  const int m = 15;
  const int k = 16;
  const int n = 14;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M15xK16xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,  8032.,  1505.,
      3682.,  5859.,  8036.,  1509.,  3686.,  5863.,  3688.,  9961.,  16234.,
      22507., 3692.,  9965.,  16238., 22511., 3696.,  9969.,  16242., 22515.,
      3700.,  9973.,  16246., 5879.,  16248., 26617., 36986., 5883.,  16252.,
      26621., 36990., 5887.,  16256., 26625., 36994., 5891.,  16260., 26629.,
      8070.,  22535., 37000., 51465., 8074.,  22539., 37004., 51469., 8078.,
      22543., 37008., 51473., 8082.,  22547., 37012., 1557.,  3734.,  5911.,
      8088.,  1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,  8032.,
      1505.,  3682.,  5859.,  3684.,  9957.,  16230., 22503., 3688.,  9961.,
      16234., 22507., 3692.,  9965.,  16238., 22511., 3696.,  9969.,  16242.,
      5875.,  16244., 26613., 36982., 5879.,  16248., 26617., 36986., 5883.,
      16252., 26621., 36990., 5887.,  16256., 26625., 8066.,  22531., 36996.,
      51461., 8070.,  22535., 37000., 51465., 8074.,  22539., 37004., 51469.,
      8078.,  22543., 37008., 1553.,  3730.,  5907.,  8084.,  1557.,  3734.,
      5911.,  8088.,  1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,
      3680.,  9953.,  16226., 22499., 3684.,  9957.,  16230., 22503., 3688.,
      9961.,  16234., 22507., 3692.,  9965.,  16238., 5871.,  16240., 26609.,
      36978., 5875.,  16244., 26613., 36982., 5879.,  16248., 26617., 36986.,
      5883.,  16252., 26621., 8062.,  22527., 36992., 51457., 8066.,  22531.,
      36996., 51461., 8070.,  22535., 37000., 51465., 8074.,  22539., 37004.,
      1549.,  3726.,  5903.,  8080.,  1553.,  3730.,  5907.,  8084.,  1557.,
      3734.,  5911.,  8088.,  1497.,  3674.,  5851.,  3676.,  9949.,  16222.,
      22495., 3680.,  9953.,  16226., 22499., 3684.,  9957.,  16230., 22503.,
      3688.,  9961.,  16234., 5867.,  16236., 26605., 36974., 5871.,  16240.,
      26609., 36978., 5875.,  16244., 26613., 36982., 5879.,  16248., 26617.};
  const int batches = 1;
  const int m = 15;
  const int k = 16;
  const int n = 15;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M15xK16xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,  8032.,  1505.,
      3682.,  5859.,  8036.,  1509.,  3686.,  5863.,  8040.,  3689.,  9962.,
      16235., 22508., 3693.,  9966.,  16239., 22512., 3697.,  9970.,  16243.,
      22516., 3701.,  9974.,  16247., 22520., 5881.,  16250., 26619., 36988.,
      5885.,  16254., 26623., 36992., 5889.,  16258., 26627., 36996., 5893.,
      16262., 26631., 37000., 8073.,  22538., 37003., 51468., 8077.,  22542.,
      37007., 51472., 8081.,  22546., 37011., 51476., 8085.,  22550., 37015.,
      51480., 1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,  8032.,
      1505.,  3682.,  5859.,  8036.,  1509.,  3686.,  5863.,  8040.,  3689.,
      9962.,  16235., 22508., 3693.,  9966.,  16239., 22512., 3697.,  9970.,
      16243., 22516., 3701.,  9974.,  16247., 22520., 5881.,  16250., 26619.,
      36988., 5885.,  16254., 26623., 36992., 5889.,  16258., 26627., 36996.,
      5893.,  16262., 26631., 37000., 8073.,  22538., 37003., 51468., 8077.,
      22542., 37007., 51472., 8081.,  22546., 37011., 51476., 8085.,  22550.,
      37015., 51480., 1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,
      8032.,  1505.,  3682.,  5859.,  8036.,  1509.,  3686.,  5863.,  8040.,
      3689.,  9962.,  16235., 22508., 3693.,  9966.,  16239., 22512., 3697.,
      9970.,  16243., 22516., 3701.,  9974.,  16247., 22520., 5881.,  16250.,
      26619., 36988., 5885.,  16254., 26623., 36992., 5889.,  16258., 26627.,
      36996., 5893.,  16262., 26631., 37000., 8073.,  22538., 37003., 51468.,
      8077.,  22542., 37007., 51472., 8081.,  22546., 37011., 51476., 8085.,
      22550., 37015., 51480., 1497.,  3674.,  5851.,  8028.,  1501.,  3678.,
      5855.,  8032.,  1505.,  3682.,  5859.,  8036.,  1509.,  3686.,  5863.,
      8040.,  3689.,  9962.,  16235., 22508., 3693.,  9966.,  16239., 22512.,
      3697.,  9970.,  16243., 22516., 3701.,  9974.,  16247., 22520., 5881.,
      16250., 26619., 36988., 5885.,  16254., 26623., 36992., 5889.,  16258.,
      26627., 36996., 5893.,  16262., 26631., 37000.};
  const int batches = 1;
  const int m = 15;
  const int k = 16;
  const int n = 16;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M16xK14xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1016.,  2487.,  3958.,  5429.,  2484.,  1651.,  3122.,  4593.,  6064.,
      1007.,  2286.,  3757.,  5228.,  3499.,  2500.,  6715.,  10930., 15145.,
      9568.,  4311.,  8526.,  12741., 16956., 3891.,  6122.,  10337., 14552.,
      11983., 3984.,  10943., 17902., 24861., 16652., 6971.,  13930., 20889.,
      27848., 6775.,  9958.,  16917., 23876., 20467., 5468.,  15171., 24874.,
      34577., 23736., 9631.,  19334., 29037., 38740., 9659.,  13794., 23497.,
      33200., 28951., 2536.,  9607.,  16678., 23749., 29476., 5571.,  12642.,
      19713., 26720., 8831.,  8542.,  15613., 22684., 28603., 1652.,  4299.,
      6946.,  9593.,  5520.,  2791.,  5438.,  8085.,  10732., 2243.,  3930.,
      6577.,  9224.,  7135.,  3136.,  8527.,  13918., 19309., 12604., 5451.,
      10842., 16233., 21624., 5127.,  7766.,  13157., 18548., 15619., 4620.,
      12755., 20890., 29025., 19688., 8111.,  16246., 24381., 32516., 8011.,
      11602., 19737., 27872., 24103., 6104.,  16983., 27862., 38741., 26772.,
      10771., 21650., 32529., 43408., 10895., 15438., 26317., 37196., 32587.,
      1060.,  3931.,  6738.,  9609.,  8832.,  2231.,  5102.,  7973.,  10844.,
      8723.,  3466.,  6337.,  9208.,  9391.,  2288.,  6111.,  9934.,  13757.,
      8556.,  3931.,  7754.,  11577., 15400., 3479.,  5574.,  9397.,  13220.,
      10771., 3772.,  10339., 16906., 23473., 15640., 6591.,  13158., 19725.,
      26292., 6363.,  9410.,  15977., 22544., 19255., 5256.,  14567., 23878.,
      33189., 22724., 9251.,  18562., 27873., 37184., 9247.,  13246., 22557.,
      31868., 27739., 3540.,  12011., 20482., 28953., 28656., 7175.,  15646.,
      24117., 32588., 9443.,  10746., 19217., 27688., 35519., 1440.,  3695.,
      5950.,  8205.,  4508.,  2411.,  4666.,  6921.,  9176.,  1831.,  3382.,
      5637.,  7892.,  5923.,  2924.,  7923.,  12922., 17921., 11592., 5071.,
      10070., 15069., 20068., 4715.,  7218.,  12217., 17216., 14407.};
  const int batches = 1;
  const int m = 16;
  const int k = 14;
  const int n = 14;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M16xK14xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1016.,  2487.,  3958.,  5429.,  2484.,  1651.,  3122.,  4593.,  6064.,
      1007.,  2286.,  3757.,  5228.,  3499.,  1450.,  2501.,  6716.,  10931.,
      15146., 9569.,  4312.,  8527.,  12742., 16957., 3892.,  6123.,  10338.,
      14553., 11984., 3719.,  3986.,  10945., 17904., 24863., 16654., 6973.,
      13932., 20891., 27850., 6777.,  9960.,  16919., 23878., 20469., 5988.,
      5471.,  15174., 24877., 34580., 23739., 9634.,  19337., 29040., 38743.,
      9662.,  13797., 23500., 33203., 28954., 8257.,  2540.,  9611.,  16682.,
      23753., 29416., 5511.,  12582., 19653., 26724., 8835.,  8546.,  15617.,
      22688., 28607., 4510.,  1657.,  4304.,  6951.,  9598.,  5525.,  2796.,
      5443.,  8090.,  10737., 2248.,  3935.,  6582.,  9229.,  7140.,  2427.,
      3142.,  8533.,  13924., 19315., 12610., 5457.,  10848., 16239., 21630.,
      5133.,  7772.,  13163., 18554., 15625., 4696.,  4627.,  12762., 20897.,
      29032., 19695., 8118.,  16253., 24388., 32523., 8018.,  11609., 19744.,
      27879., 24110., 6965.,  6112.,  16991., 27870., 38749., 26780., 10779.,
      21658., 32537., 43352., 10839., 15382., 26261., 37140., 32531., 9170.,
      1005.,  3876.,  6747.,  9618.,  8841.,  2240.,  5111.,  7982.,  10853.,
      8732.,  3475.,  6346.,  9217.,  9400.,  1839.,  2298.,  6121.,  9944.,
      13767., 8566.,  3941.,  7764.,  11587., 15410., 3489.,  5584.,  9407.,
      13230., 10781., 3404.,  3783.,  10350., 16917., 23484., 15651., 6602.,
      13169., 19736., 26303., 6374.,  9421.,  15988., 22555., 19266., 5673.,
      5268.,  14579., 23890., 33201., 22736., 9263.,  18574., 27885., 37196.,
      9259.,  13258., 22569., 31816., 27687., 7878.,  3489.,  11960., 20431.,
      28902., 28605., 7124.,  15595., 24066., 32537., 9392.,  10759., 19230.,
      27701., 35532., 5923.,  1454.,  3709.,  5964.,  8219.,  4522.,  2425.,
      4680.,  6935.,  9190.,  1845.,  3396.,  5651.,  7906.,  5937.,  2112.,
      2939.,  7938.,  12937., 17936., 11607., 5086.,  10085., 15084., 20083.,
      4730.,  7233.,  12232., 17231., 14422., 4381.};
  const int batches = 1;
  const int m = 16;
  const int k = 14;
  const int n = 15;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M16xK14xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1016.,  2487.,  3958.,  5429.,  2484.,  1651.,  3122.,  4593.,  6064.,
      1007.,  2286.,  3757.,  5228.,  3499.,  1450.,  2921.,  2502.,  6717.,
      10932., 15147., 9570.,  4313.,  8528.,  12743., 16958., 3893.,  6124.,
      10339., 14554., 11985., 3720.,  7935.,  3988.,  10947., 17906., 24865.,
      16656., 6975.,  13934., 20893., 27852., 6779.,  9962.,  16921., 23880.,
      20471., 5990.,  12949., 5474.,  15177., 24880., 34583., 23742., 9637.,
      19340., 29043., 38746., 9665.,  13800., 23503., 33206., 28957., 8260.,
      17963., 2480.,  9551.,  16622., 23693., 29420., 5515.,  12586., 19657.,
      26728., 8839.,  8550.,  15621., 22692., 28611., 4514.,  11585., 1662.,
      4309.,  6956.,  9603.,  5530.,  2801.,  5448.,  8095.,  10742., 2253.,
      3940.,  6587.,  9234.,  7145.,  2432.,  5079.,  3148.,  8539.,  13930.,
      19321., 12616., 5463.,  10854., 16245., 21636., 5139.,  7778.,  13169.,
      18560., 15631., 4702.,  10093., 4634.,  12769., 20904., 29039., 19702.,
      8125.,  16260., 24395., 32530., 8025.,  11616., 19751., 27886., 24117.,
      6972.,  15107., 6056.,  16935., 27814., 38693., 26724., 10723., 21602.,
      32481., 43360., 10847., 15390., 26269., 37148., 32539., 9178.,  20057.,
      1014.,  3885.,  6756.,  9627.,  8850.,  2249.,  5120.,  7991.,  10862.,
      8741.,  3484.,  6355.,  9226.,  9409.,  1848.,  4719.,  2308.,  6131.,
      9954.,  13777., 8576.,  3951.,  7774.,  11597., 15420., 3499.,  5594.,
      9417.,  13240., 10791., 3414.,  7237.,  3794.,  10361., 16928., 23495.,
      15662., 6613.,  13180., 19747., 26314., 6385.,  9432.,  15999., 22566.,
      19277., 5684.,  12251., 5216.,  14527., 23838., 33149., 22684., 9211.,
      18522., 27833., 37144., 9207.,  13206., 22517., 31828., 27699., 7890.,
      17201., 3502.,  11973., 20444., 28915., 28618., 7137.,  15608., 24079.,
      32550., 9405.,  10772., 19243., 27714., 35545., 5936.,  14407., 1468.,
      3723.,  5978.,  8233.,  4536.,  2439.,  4694.,  6949.,  9204.,  1859.,
      3410.,  5665.,  7920.,  5951.,  2126.,  4381.,  2954.,  7953.,  12952.,
      17951., 11622., 5101.,  10100., 15099., 20098., 4745.,  7248.,  12247.,
      17246., 14437., 4396.,  9395.};
  const int batches = 1;
  const int m = 16;
  const int k = 14;
  const int n = 16;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M16xK15xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1241.,  3042.,  4843.,  6644.,  1405.,  2566.,  4367.,  6168.,  2593.,
      2090.,  3891.,  5692.,  4805.,  1614.,  3055.,  8231.,  13407., 18583.,
      6159.,  6855.,  12031., 17207., 10287., 5479.,  10655., 15831., 15439.,
      4103.,  4869.,  13420., 21971., 30522., 10913., 11144., 19695., 28246.,
      17981., 8868.,  17419., 25970., 26073., 6592.,  6683.,  18609., 30535.,
      42461., 15667., 15433., 27359., 39285., 25675., 12257., 24183., 36109.,
      36707., 9081.,  1457.,  6198.,  10939., 15680., 16197., 4938.,  9679.,
      14420., 15513., 3614.,  8355.,  13096., 15917., 2354.,  2567.,  6843.,
      11119., 15395., 4887.,  5707.,  9983.,  14259., 8231.,  4571.,  8847.,
      13123., 12599., 3435.,  4381.,  12032., 19683., 27334., 9641.,  9996.,
      17647., 25298., 15925., 7960.,  15611., 23262., 23233., 5924.,  6195.,
      17221., 28247., 39273., 14395., 14285., 25311., 36337., 23619., 11349.,
      22375., 33401., 33867., 8413.,  2633.,  10314., 17995., 25676., 15565.,
      8270.,  15951., 23632., 29521., 6226.,  13907., 21588., 28117., 4182.,
      2143.,  5519.,  8831.,  12207., 3615.,  4559.,  7935.,  11311., 6175.,
      3663.,  7039.,  10415., 9759.,  2767.,  3893.,  10644., 17395., 24146.,
      8369.,  8848.,  15599., 22350., 13869., 7052.,  13803., 20554., 20393.,
      5256.,  5707.,  15833., 25959., 36085., 13123., 13137., 23263., 33389.,
      21563., 10441., 20567., 30693., 31027., 7745.,  4833.,  15454., 26075.,
      36696., 15957., 12626., 23247., 33868., 28105., 9798.,  20419., 31040.,
      41277., 6970.,  1655.,  4131.,  6607.,  9083.,  2407.,  3475.,  5951.,
      8427.,  4183.,  2819.,  5231.,  7707.,  6919.,  2099.,  3405.,  9256.,
      15107., 20958., 7097.,  7700.,  13551., 19402., 11813., 6144.,  11995.,
      17846., 17553., 4588.,  5219.,  14445., 23671., 32897., 11851., 11989.,
      21215., 30441., 19507., 9533.,  18759., 27985., 28187., 7077.};
  const int batches = 1;
  const int m = 16;
  const int k = 15;
  const int n = 14;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M16xK15xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1241.,  3042.,  4843.,  6644.,  1405.,  2566.,  4367.,  6168.,  2593.,
      2090.,  3891.,  5692.,  4805.,  1614.,  3415.,  3056.,  8232.,  13408.,
      18584., 6160.,  6856.,  12032., 17208., 10288., 5480.,  10656., 15832.,
      15440., 4104.,  9280.,  4871.,  13422., 21973., 30524., 10915., 11146.,
      19697., 28248., 17983., 8870.,  17421., 25972., 26075., 6594.,  15145.,
      6686.,  18612., 30538., 42464., 15670., 15436., 27362., 39288., 25678.,
      12260., 24186., 36112., 36710., 9084.,  21010., 1461.,  6202.,  10943.,
      15684., 16137., 4878.,  9619.,  14360., 15517., 3618.,  8359.,  13100.,
      15921., 2358.,  7099.,  2572.,  6848.,  11124., 15400., 4892.,  5712.,
      9988.,  14264., 8236.,  4576.,  8852.,  13128., 12604., 3440.,  7716.,
      4387.,  12038., 19689., 27340., 9647.,  10002., 17653., 25304., 15931.,
      7966.,  15617., 23268., 23239., 5930.,  13581., 6202.,  17228., 28254.,
      39280., 14402., 14292., 25318., 36344., 23626., 11356., 22382., 33408.,
      33874., 8420.,  19446., 2641.,  10322., 18003., 25684., 15573., 8278.,
      15959., 23640., 29465., 6170.,  13851., 21532., 28061., 4126.,  11807.,
      2088.,  5464.,  8840.,  12216., 3624.,  4568.,  7944.,  11320., 6184.,
      3672.,  7048.,  10424., 9768.,  2776.,  6152.,  3903.,  10654., 17405.,
      24156., 8379.,  8858.,  15609., 22360., 13879., 7062.,  13813., 20564.,
      20403., 5266.,  12017., 5718.,  15844., 25970., 36096., 13134., 13148.,
      23274., 33400., 21574., 10452., 20578., 30704., 31038., 7756.,  17882.,
      4845.,  15466., 26087., 36708., 15969., 12638., 23259., 33880., 28117.,
      9810.,  20431., 31052., 41225., 6918.,  17539., 1604.,  4080.,  6556.,
      9032.,  2356.,  3424.,  5900.,  8376.,  4132.,  2768.,  5244.,  7720.,
      6932.,  2112.,  4588.,  3419.,  9270.,  15121., 20972., 7111.,  7714.,
      13565., 19416., 11827., 6158.,  12009., 17860., 17567., 4602.,  10453.,
      5234.,  14460., 23686., 32912., 11866., 12004., 21230., 30456., 19522.,
      9548.,  18774., 28000., 28202., 7092.,  16318.};
  const int batches = 1;
  const int m = 16;
  const int k = 15;
  const int n = 15;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M16xK15xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1241.,  3042.,  4843.,  6644.,  1405.,  2566.,  4367.,  6168.,  2593.,
      2090.,  3891.,  5692.,  4805.,  1614.,  3415.,  5216.,  3057.,  8233.,
      13409., 18585., 6161.,  6857.,  12033., 17209., 10289., 5481.,  10657.,
      15833., 15441., 4105.,  9281.,  14457., 4873.,  13424., 21975., 30526.,
      10917., 11148., 19699., 28250., 17985., 8872.,  17423., 25974., 26077.,
      6596.,  15147., 23698., 6689.,  18615., 30541., 42467., 15673., 15439.,
      27365., 39291., 25681., 12263., 24189., 36115., 36713., 9087.,  21013.,
      32939., 1401.,  6142.,  10883., 15624., 16141., 4882.,  9623.,  14364.,
      15521., 3622.,  8363.,  13104., 15925., 2362.,  7103.,  11844., 2577.,
      6853.,  11129., 15405., 4897.,  5717.,  9993.,  14269., 8241.,  4581.,
      8857.,  13133., 12609., 3445.,  7721.,  11997., 4393.,  12044., 19695.,
      27346., 9653.,  10008., 17659., 25310., 15937., 7972.,  15623., 23274.,
      23245., 5936.,  13587., 21238., 6209.,  17235., 28261., 39287., 14409.,
      14299., 25325., 36351., 23633., 11363., 22389., 33415., 33881., 8427.,
      19453., 30479., 2585.,  10266., 17947., 25628., 15517., 8222.,  15903.,
      23584., 29473., 6178.,  13859., 21540., 28069., 4134.,  11815., 19496.,
      2097.,  5473.,  8849.,  12225., 3633.,  4577.,  7953.,  11329., 6193.,
      3681.,  7057.,  10433., 9777.,  2785.,  6161.,  9537.,  3913.,  10664.,
      17415., 24166., 8389.,  8868.,  15619., 22370., 13889., 7072.,  13823.,
      20574., 20413., 5276.,  12027., 18778., 5729.,  15855., 25981., 36107.,
      13145., 13159., 23285., 33411., 21585., 10463., 20589., 30715., 31049.,
      7767.,  17893., 28019., 4793.,  15414., 26035., 36656., 15917., 12586.,
      23207., 33828., 28065., 9758.,  20379., 31000., 41237., 6930.,  17551.,
      28172., 1617.,  4093.,  6569.,  9045.,  2369.,  3437.,  5913.,  8389.,
      4145.,  2781.,  5257.,  7733.,  6945.,  2125.,  4601.,  7077.,  3433.,
      9284.,  15135., 20986., 7125.,  7728.,  13579., 19430., 11841., 6172.,
      12023., 17874., 17581., 4616.,  10467., 16318., 5249.,  14475., 23701.,
      32927., 11881., 12019., 21245., 30471., 19537., 9563.,  18789., 28015.,
      28217., 7107.,  16333., 25559.};
  const int batches = 1;
  const int m = 16;
  const int k = 15;
  const int n = 16;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M16xK16xN14) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,  8032.,  1505.,
      3682.,  5859.,  8036.,  1509.,  3686.,  3687.,  9960.,  16233., 22506.,
      3691.,  9964.,  16237., 22510., 3695.,  9968.,  16241., 22514., 3699.,
      9972.,  5877.,  16246., 26615., 36984., 5881.,  16250., 26619., 36988.,
      5885.,  16254., 26623., 36992., 5889.,  16258., 8067.,  22532., 36997.,
      51462., 8071.,  22536., 37001., 51466., 8075.,  22540., 37005., 51470.,
      8079.,  22544., 1553.,  3730.,  5907.,  8084.,  1557.,  3734.,  5911.,
      8088.,  1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  3679.,  9952.,
      16225., 22498., 3683.,  9956.,  16229., 22502., 3687.,  9960.,  16233.,
      22506., 3691.,  9964.,  5869.,  16238., 26607., 36976., 5873.,  16242.,
      26611., 36980., 5877.,  16246., 26615., 36984., 5881.,  16250., 8059.,
      22524., 36989., 51454., 8063.,  22528., 36993., 51458., 8067.,  22532.,
      36997., 51462., 8071.,  22536., 1545.,  3722.,  5899.,  8076.,  1549.,
      3726.,  5903.,  8080.,  1553.,  3730.,  5907.,  8084.,  1557.,  3734.,
      3735.,  10008., 16217., 22490., 3675.,  9948.,  16221., 22494., 3679.,
      9952.,  16225., 22498., 3683.,  9956.,  5861.,  16230., 26599., 36968.,
      5865.,  16234., 26603., 36972., 5869.,  16238., 26607., 36976., 5873.,
      16242., 8051.,  22516., 36981., 51446., 8055.,  22520., 36985., 51450.,
      8059.,  22524., 36989., 51454., 8063.,  22528., 1537.,  3714.,  5891.,
      8068.,  1541.,  3718.,  5895.,  8072.,  1545.,  3722.,  5899.,  8076.,
      1549.,  3726.,  3727.,  10000., 16273., 22546., 3731.,  10004., 16277.,
      22550., 3735.,  10008., 16217., 22490., 3675.,  9948.,  5853.,  16222.,
      26591., 36960., 5857.,  16226., 26595., 36964., 5861.,  16230., 26599.,
      36968., 5865.,  16234., 8043.,  22508., 36973., 51438., 8047.,  22512.,
      36977., 51442., 8051.,  22516., 36981., 51446., 8055.,  22520.};
  const int batches = 1;
  const int m = 16;
  const int k = 16;
  const int n = 14;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M16xK16xN15) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,  8032.,  1505.,
      3682.,  5859.,  8036.,  1509.,  3686.,  5863.,  3688.,  9961.,  16234.,
      22507., 3692.,  9965.,  16238., 22511., 3696.,  9969.,  16242., 22515.,
      3700.,  9973.,  16246., 5879.,  16248., 26617., 36986., 5883.,  16252.,
      26621., 36990., 5887.,  16256., 26625., 36994., 5891.,  16260., 26629.,
      8070.,  22535., 37000., 51465., 8074.,  22539., 37004., 51469., 8078.,
      22543., 37008., 51473., 8082.,  22547., 37012., 1557.,  3734.,  5911.,
      8088.,  1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,  8032.,
      1505.,  3682.,  5859.,  3684.,  9957.,  16230., 22503., 3688.,  9961.,
      16234., 22507., 3692.,  9965.,  16238., 22511., 3696.,  9969.,  16242.,
      5875.,  16244., 26613., 36982., 5879.,  16248., 26617., 36986., 5883.,
      16252., 26621., 36990., 5887.,  16256., 26625., 8066.,  22531., 36996.,
      51461., 8070.,  22535., 37000., 51465., 8074.,  22539., 37004., 51469.,
      8078.,  22543., 37008., 1553.,  3730.,  5907.,  8084.,  1557.,  3734.,
      5911.,  8088.,  1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,
      3680.,  9953.,  16226., 22499., 3684.,  9957.,  16230., 22503., 3688.,
      9961.,  16234., 22507., 3692.,  9965.,  16238., 5871.,  16240., 26609.,
      36978., 5875.,  16244., 26613., 36982., 5879.,  16248., 26617., 36986.,
      5883.,  16252., 26621., 8062.,  22527., 36992., 51457., 8066.,  22531.,
      36996., 51461., 8070.,  22535., 37000., 51465., 8074.,  22539., 37004.,
      1549.,  3726.,  5903.,  8080.,  1553.,  3730.,  5907.,  8084.,  1557.,
      3734.,  5911.,  8088.,  1497.,  3674.,  5851.,  3676.,  9949.,  16222.,
      22495., 3680.,  9953.,  16226., 22499., 3684.,  9957.,  16230., 22503.,
      3688.,  9961.,  16234., 5867.,  16236., 26605., 36974., 5871.,  16240.,
      26609., 36978., 5875.,  16244., 26613., 36982., 5879.,  16248., 26617.,
      8058.,  22523., 36988., 51453., 8062.,  22527., 36992., 51457., 8066.,
      22531., 36996., 51461., 8070.,  22535., 37000.};
  const int batches = 1;
  const int m = 16;
  const int k = 16;
  const int n = 15;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}
TYPED_TEST(MatmulBatch1Beta1FalseTrue, M16xK16xN16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,  8032.,  1505.,
      3682.,  5859.,  8036.,  1509.,  3686.,  5863.,  8040.,  3689.,  9962.,
      16235., 22508., 3693.,  9966.,  16239., 22512., 3697.,  9970.,  16243.,
      22516., 3701.,  9974.,  16247., 22520., 5881.,  16250., 26619., 36988.,
      5885.,  16254., 26623., 36992., 5889.,  16258., 26627., 36996., 5893.,
      16262., 26631., 37000., 8073.,  22538., 37003., 51468., 8077.,  22542.,
      37007., 51472., 8081.,  22546., 37011., 51476., 8085.,  22550., 37015.,
      51480., 1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,  8032.,
      1505.,  3682.,  5859.,  8036.,  1509.,  3686.,  5863.,  8040.,  3689.,
      9962.,  16235., 22508., 3693.,  9966.,  16239., 22512., 3697.,  9970.,
      16243., 22516., 3701.,  9974.,  16247., 22520., 5881.,  16250., 26619.,
      36988., 5885.,  16254., 26623., 36992., 5889.,  16258., 26627., 36996.,
      5893.,  16262., 26631., 37000., 8073.,  22538., 37003., 51468., 8077.,
      22542., 37007., 51472., 8081.,  22546., 37011., 51476., 8085.,  22550.,
      37015., 51480., 1497.,  3674.,  5851.,  8028.,  1501.,  3678.,  5855.,
      8032.,  1505.,  3682.,  5859.,  8036.,  1509.,  3686.,  5863.,  8040.,
      3689.,  9962.,  16235., 22508., 3693.,  9966.,  16239., 22512., 3697.,
      9970.,  16243., 22516., 3701.,  9974.,  16247., 22520., 5881.,  16250.,
      26619., 36988., 5885.,  16254., 26623., 36992., 5889.,  16258., 26627.,
      36996., 5893.,  16262., 26631., 37000., 8073.,  22538., 37003., 51468.,
      8077.,  22542., 37007., 51472., 8081.,  22546., 37011., 51476., 8085.,
      22550., 37015., 51480., 1497.,  3674.,  5851.,  8028.,  1501.,  3678.,
      5855.,  8032.,  1505.,  3682.,  5859.,  8036.,  1509.,  3686.,  5863.,
      8040.,  3689.,  9962.,  16235., 22508., 3693.,  9966.,  16239., 22512.,
      3697.,  9970.,  16243., 22516., 3701.,  9974.,  16247., 22520., 5881.,
      16250., 26619., 36988., 5885.,  16254., 26623., 36992., 5889.,  16258.,
      26627., 36996., 5893.,  16262., 26631., 37000., 8073.,  22538., 37003.,
      51468., 8077.,  22542., 37007., 51472., 8081.,  22546., 37011., 51476.,
      8085.,  22550., 37015., 51480.};
  const int batches = 1;
  const int m = 16;
  const int k = 16;
  const int n = 16;
  const auto beta = static_cast<DataType>(1);
  const DataType max_input_val = 64.0;
  this->run(exp_out, batches, m, k, n, beta, 0, 0, 0, max_input_val);
}